- en: Chapter 4. Building Our Application for iOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll start the chapter by covering some of the new design principles present
    in iOS 7\. This includes changes to the navigation and status bars, to the new
    UIKit, and changes to the application icon. Next, we will create our required
    files and organize them for easier navigation. Lastly, we will add some new view
    controllers to our storyboard and point them to our newly created files. On completing
    this chapter, we will have a complete skeleton of our application that is ready
    for functionality. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Designing for iOS 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of iOS 7, developers and designers will need to adjust their
    approach to suit the new "flat" design. Although it is not a requirement to follow
    this design pattern, almost all UI elements in the SDK have been completely revamped
    to support it.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to consider these changes when designing your iOS 7 application
    in order to keep a balanced layout. Some factors include new typography and updated
    UIKit dimensions. In this chapter, we will put together the skeleton of our application,
    but first we will discuss two important changes to iOS 7 that will directly affect
    how you build your future applications.
  prefs: []
  type: TYPE_NORMAL
- en: The navigation bar and status bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Probably, the most apparent change to iOS 7 is the new navigation bar and status
    bar. Both of these items have been around since the launch of iOS. Prior to iOS
    7, the 20-pixel status bar was simply a solid background view that would cover
    the top 20 pixels of the main application window.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, when using a navigation controller, the navigation bar itself
    would also act in the same manner, covering the next 44 pixels (for a total of
    64 pixels) of the view. Because of this, an item positioned with a *y=0* value
    would be positioned directly below the navigation or status bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the release of iOS 7, this has been removed entirely. The status bar itself
    now contains a clear background allowing any UI elements or views to be positioned
    behind it. Run our application and notice how our menu background image extends
    to the top of the device''s screen, directly behind the status bar as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation bar and status bar](img/0319OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is very common for most applications to have the status bar background match
    the navigation bar background. In iOS 7, setting the navigation bar color will
    automatically set the status bar background to match. The following screenshot
    is an example from our completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The navigation bar and status bar](img/0319OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another result of this change is that programmatically positioning your views
    on the *y* axis requires you to consider the heights of the status bar and the
    navigation bar. A view positioned at *x=0* and *y=0* will appear on the top-left
    corner of the screen, behind the navigation and status bar.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that this change specifically applies to code
    that is executed at runtime. When using storyboards, this new positioning does
    not apply. Xcode will automatically adjust views in storyboards in relation to
    the navigation and status bars. Each view will retain its initial *y* position
    regardless of any adjustments made.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, Apple has added a new translucent property to the navigation bar. Open
    the contacts application on any device running iOS 7 and scroll through your contacts.
    You will notice that as each item passes behind the navigation bar, it can be
    seen through the bar as it moves off the screen. This effect is used throughout
    iOS 7 and its newly designed applications, and Apple has also made it available
    to be used by developers. By default, this property will be set to `YES`, but
    can be disabled at any time if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: The new UIKit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'iOS 7''s new flat design has changed many of the dimensions of common UIKit
    elements. Some of these include segmented controls, search display controllers,
    and alert views. Most of these changes result in a smaller frame than found on
    previous versions of iOS, but also include updated typography and user interaction.
    The newly designed search bar is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The new UIKit](img/0319OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The segmented controls are as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The new UIKit](img/0319ot_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The new alert view for a notification is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The new UIKit](img/0319OT_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The new alert view for deletion is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The new UIKit](img/0319OT_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updated app icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple has made a subtle change to the standard iOS application icon size with
    the release of iOS 7\. Previously, icons featured an even corner radius that was
    easy to replicate on your own. Apple has provided a new shape known as a **superellipse**
    with a more stretched corner radius. Additionally, the shine (gloss effect) has
    been removed from application icons. As always, Xcode 5 will automatically clip
    your app icon images to the proper shape; however, if you wish to add your own
    stroke or shadows, you will need to use an unofficial template.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Apple has introduced what they call a **golden ratio grid system**
    that you will see in the following screenshot. Apple recommends using this grid
    when designing your icons and laying out individual elements. This is considered
    more of a guideline than a rule, so feel free to work outside of such a grid system
    if it better suits your application icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![Updated app icons](img/0319OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Putting together the pieces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have covered some of the basic design aspects of iOS 7, it's time
    to start building our application skeleton. Before we write any code, let's create
    the essential project files, construct our views in our storyboard, and create/connect
    outlets for each view controller. We will be able to navigate through our application;
    however, it just won't do anything yet.
  prefs: []
  type: TYPE_NORMAL
- en: Project organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the first steps in my development process is organizing my project in
    Xcode 5\. Doing so makes it easier to navigate your project and find the files
    you need. Let's go ahead and organize our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our **Food and Me** project and take a look at the navigator on the left.
    We have a couple of files in no particular order, and we will also be creating
    more files shortly. We are going to divide our main project files into the following
    three separate categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`App Delegate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`View Controllers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Custom Classes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the navigator pane, right-click on the top-level folder (`Food and Me`, our
    application name) and click on **New Group**. A new group will appear in our main
    `Food and Me` group; let's name it `App Delegate`. Repeat this process two more
    times, naming the new groups `View Controllers` and `Custom Classes`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Select both `AppDelegate.h` and `AppDelegate.m` (using the *command* key) and
    drag these files into the `App Delegate` group we just created. Do the same for
    `MenuViewController.h` and `MenuViewController.m` and drag these files into the
    `View Controllers` group. These groups can also be rearranged, so feel free to
    move them around based on preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot gives a peek into the final results found in the `Food
    and Me` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project organization](img/0319OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our project is a little more organized, it's time to create our remaining
    project files. Our application will require a view controller for our menu, the
    addition of new foods, views of our current foods, and then a detailed view of
    each food item. We have already set up our menu, so let's create the remaining
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on our `View Controllers` group and click on **New File** (you can
    also achieve this by navigating to **File** | **New** | **File** in the menu bar).
    Make sure that **Cocoa Touch** is selected in the left-hand side menu bar, select
    **Objective-C class** from the options, and then click on **Next**. Name this
    file `AddNewViewController` and make sure it is a subclass of `UIViewController`.
    Click on **Next** and then on **Create**. Our new file will be created and added
    to our `View Controllers` group.
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this process two more times. The first file will be named `MyFoodsViewController`
    and will be a subclass of `UITableViewController`. Name the second file `FoodDetailViewController`
    and set it as a subclass of `UIViewController`. We now have most of our required
    files for our application. In a later chapter, we will be creating one last project
    file in our `Custom Classes` group.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the storyboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our files, we need to create some views in our storyboard and
    hook them up to our classes we just created. Open `Main.storyboard` and you should
    see our navigation controller and its root view controller (the menu view controller).
    Let's add the remaining controllers to our storyboard now.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Utilities** pane on the right-hand side (if not already open) and
    click on the **Object Library**. Our `AddNewViewController` and `FoodDetailViewController`
    files are both subclasses of `UIViewController`, so drag two view controller objects
    onto the storyboard. Our `MyFoodsViewController` is a subclass of `UITableViewController`,
    so let's drag a `UITableViewController` object onto the storyboard as well.
  prefs: []
  type: TYPE_NORMAL
- en: Select one of the `UIViewControllers` and open the identity inspector. In the
    custom class section at the top, set this `View Controllers` class to `AddNewViewController`.
    Now select the remaining `UIViewController` and set its class to `FoodDetailViewController`.
    Lastly, select our `UITableViewController` and set its class to `MyFoodsViewController`.
    Our storyboard now has all of the objects needed for our application.
  prefs: []
  type: TYPE_NORMAL
- en: AddNewViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our files and added the proper controllers to our storyboard,
    let's go ahead and add the required objects to each controller. We will start
    with the `AddNewViewController` object. Select it, and then navigate to **Object
    Library** in the **Utilities** pane.
  prefs: []
  type: TYPE_NORMAL
- en: Our application will give users the ability to track what they eat. Each food
    item will consist of an image, name/title, and the date it was created. We will
    need to provide an image view to store the final image, a placeholder image view,
    and a `UITextField` object to input the name of the food item.
  prefs: []
  type: TYPE_NORMAL
- en: Drag a `UITextField` object and two `UIImageView` objects onto the `AddNewViewController`
    view. These will allow our user to interact with the view and create food items
    for our app. In this chapter, we are simply adding all the elements to our project,
    so do not worry about the size or positions of these objects.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `AddNewViewController` object itself and then click on the assistant
    editor button (the middle button in the top-right corner that resembles a tuxedo).
    Switch to `AddNewViewController.h` if it is not already displayed. In order to
    access these objects in our code, we will create outlets for each item in our
    code. While holding down the *control* key on your keyboard, click-and-drag from
    the `UITextField` to the header file and let go. Name this outlet `nameTextField`
    and click on **Connect**. Repeat this for both `UIImageView`s. Name the first
    image view `placeholderImageView` and the second `finalImageView`. We now have
    all required objects and connections for `AddNewViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: FoodDetailViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a user selects one of their previously added food items, we want to display
    a detailed view that includes a fullscreen background image, an image of the food,
    the name of the food, and then finally the date it was saved. Select the `FoodDetailViewController`
    class in the storyboard, and navigate back to the **Utilities** pane and the **Object
    Library**.
  prefs: []
  type: TYPE_NORMAL
- en: Drag two `UIImageView`s and two `UILabel`s onto the food detail view. Once again,
    ignore the size and positioning of each item. We will also add outlets for each
    object to our code, so go ahead and open the assistant editor and switch to the
    `FoodDetailViewController.h` file. Control drag from the first image view to the
    space between `@interface` and `@end` in the `.h` file, and name the outlet `backgroundImageView`.
    Perform the same steps for the second image view and name it `foodImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: Our labels will be used to display the name and date related to the food item.
    Control drag from the first label and name this outlet `foodNameLabel`. The second
    `UILabel` should be named `foodDateLabel`. We now have all the views required
    for our `FoodDetailViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: MyFoodsViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we dragged the `UITableViewController` object to the storyboard, Xcode
    5 automatically added a `UITableView` object, with a plane prototype cell, to
    the controller. **Food and Me** will be using a custom `UITableViewCell` subclass
    to create and lay out our table view cells. This will be covered in a later chapter,
    so for the time being we will make one simple change to the `MyFoodsViewController`
    class. Select the prototype cell and a small white box will appear at the bottom
    of the cell''s frame. Click-and-drag down this box to resize the cell. Set its
    height to 100 pixels, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MyFoodsViewController](img/0319OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned some of the newer design principles associated with
    iOS 7\. Additionally, we organized our project, created all of our required files,
    and started our views in storyboard. We are ready to start writing some code and
    adding functionality to our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will finish building the `AddNewViewController` class
    and add the functionality to save our users' data for later viewing.
  prefs: []
  type: TYPE_NORMAL
