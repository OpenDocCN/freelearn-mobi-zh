- en: Chapter 4. Building Our Application for iOS 7
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：为iOS 7构建我们的应用程序
- en: We'll start the chapter by covering some of the new design principles present
    in iOS 7\. This includes changes to the navigation and status bars, to the new
    UIKit, and changes to the application icon. Next, we will create our required
    files and organize them for easier navigation. Lastly, we will add some new view
    controllers to our storyboard and point them to our newly created files. On completing
    this chapter, we will have a complete skeleton of our application that is ready
    for functionality. Let's get started!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将本章从介绍iOS 7中的一些新设计原则开始。这包括对导航和状态栏、新的UIKit以及应用程序图标的更改。接下来，我们将创建所需的文件并将它们组织起来以便于导航。最后，我们将向我们的Storyboard添加一些新的视图控制器，并将它们指向我们新创建的文件。完成本章后，我们将有一个完整的应用程序框架，准备添加功能。让我们开始吧！
- en: Designing for iOS 7
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为iOS 7设计
- en: With the release of iOS 7, developers and designers will need to adjust their
    approach to suit the new "flat" design. Although it is not a requirement to follow
    this design pattern, almost all UI elements in the SDK have been completely revamped
    to support it.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iOS 7的发布，开发者和设计师需要调整他们的方法以适应新的“扁平化”设计。尽管遵循此设计模式不是强制性的，但几乎所有的UI元素在SDK中都已经完全重制以支持它。
- en: It is important to consider these changes when designing your iOS 7 application
    in order to keep a balanced layout. Some factors include new typography and updated
    UIKit dimensions. In this chapter, we will put together the skeleton of our application,
    but first we will discuss two important changes to iOS 7 that will directly affect
    how you build your future applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计iOS 7应用程序时，考虑这些变化对于保持平衡布局非常重要。一些因素包括新的字体和更新的UIKit尺寸。在本章中，我们将构建我们应用程序的框架，但首先我们将讨论iOS
    7中的两个重要变化，这些变化将直接影响你构建未来应用程序的方式。
- en: The navigation bar and status bar
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航栏和状态栏
- en: Probably, the most apparent change to iOS 7 is the new navigation bar and status
    bar. Both of these items have been around since the launch of iOS. Prior to iOS
    7, the 20-pixel status bar was simply a solid background view that would cover
    the top 20 pixels of the main application window.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可能iOS 7最明显的变化是新导航栏和状态栏。这两个项目自iOS推出以来一直存在。在iOS 7之前，20像素的状态栏只是一个简单的纯色背景视图，它会覆盖主应用程序窗口的顶部20像素。
- en: Additionally, when using a navigation controller, the navigation bar itself
    would also act in the same manner, covering the next 44 pixels (for a total of
    64 pixels) of the view. Because of this, an item positioned with a *y=0* value
    would be positioned directly below the navigation or status bar.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当使用导航控制器时，导航栏本身也会以同样的方式工作，覆盖视图的下一个44像素（总共64像素）。因此，定位y=0值的项将直接位于导航或状态栏下方。
- en: 'With the release of iOS 7, this has been removed entirely. The status bar itself
    now contains a clear background allowing any UI elements or views to be positioned
    behind it. Run our application and notice how our menu background image extends
    to the top of the device''s screen, directly behind the status bar as shown in
    the following screenshot:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着iOS 7的发布，这一变化已被完全移除。状态栏本身现在包含一个清晰的背景，允许任何UI元素或视图位于其后面。运行我们的应用程序并注意我们的菜单背景图像如何延伸到设备屏幕的顶部，直接位于状态栏后面，如以下截图所示：
- en: '![The navigation bar and status bar](img/0319OT_04_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![导航栏和状态栏](img/0319OT_04_01.jpg)'
- en: 'It is very common for most applications to have the status bar background match
    the navigation bar background. In iOS 7, setting the navigation bar color will
    automatically set the status bar background to match. The following screenshot
    is an example from our completed application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数应用程序来说，状态栏背景与导航栏背景相匹配是非常常见的。在iOS 7中，设置导航栏颜色将自动设置状态栏背景以匹配。以下截图是我们完成的应用程序的一个示例：
- en: '![The navigation bar and status bar](img/0319OT_04_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![导航栏和状态栏](img/0319OT_04_02.jpg)'
- en: Another result of this change is that programmatically positioning your views
    on the *y* axis requires you to consider the heights of the status bar and the
    navigation bar. A view positioned at *x=0* and *y=0* will appear on the top-left
    corner of the screen, behind the navigation and status bar.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这种变化的另一个结果是，在y轴上程序化定位你的视图需要你考虑状态栏和导航栏的高度。一个定位在x=0和y=0的视图将出现在屏幕的左上角，位于导航和状态栏后面。
- en: It is important to understand that this change specifically applies to code
    that is executed at runtime. When using storyboards, this new positioning does
    not apply. Xcode will automatically adjust views in storyboards in relation to
    the navigation and status bars. Each view will retain its initial *y* position
    regardless of any adjustments made.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，这个变化专门适用于在运行时执行的代码。当使用故事板时，这种新的定位不适用。Xcode会自动调整故事板中的视图，以适应导航栏和状态栏。每个视图将保留其初始的*y*位置，无论做出任何调整。
- en: Lastly, Apple has added a new translucent property to the navigation bar. Open
    the contacts application on any device running iOS 7 and scroll through your contacts.
    You will notice that as each item passes behind the navigation bar, it can be
    seen through the bar as it moves off the screen. This effect is used throughout
    iOS 7 and its newly designed applications, and Apple has also made it available
    to be used by developers. By default, this property will be set to `YES`, but
    can be disabled at any time if you wish.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，苹果为导航栏添加了一个新的半透明属性。在任何运行iOS 7的设备上打开联系人应用，滚动查看你的联系人。你会注意到，当每个项目穿过导航栏时，它可以在移动离开屏幕时通过栏看到。这种效果在iOS
    7及其新设计的应用程序中得到了广泛应用，苹果还允许开发者使用它。默认情况下，此属性将设置为`YES`，但如果你希望，可以随时禁用。
- en: The new UIKit
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的UIKit
- en: 'iOS 7''s new flat design has changed many of the dimensions of common UIKit
    elements. Some of these include segmented controls, search display controllers,
    and alert views. Most of these changes result in a smaller frame than found on
    previous versions of iOS, but also include updated typography and user interaction.
    The newly designed search bar is as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 7的新扁平化设计改变了许多常见的UIKit元素的尺寸。其中一些包括分段控件、搜索显示控制器和警告视图。这些变化大多数导致比iOS先前版本更小的框架，但也包括更新的字体和用户交互。新设计的搜索栏如下截图所示：
- en: '![The new UIKit](img/0319OT_04_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![新的UIKit](img/0319OT_04_03.jpg)'
- en: 'The segmented controls are as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 分段控件如下截图所示：
- en: '![The new UIKit](img/0319ot_04_07.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![新的UIKit](img/0319ot_04_07.jpg)'
- en: 'The new alert view for a notification is as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通知的新警告视图如下截图所示：
- en: '![The new UIKit](img/0319OT_04_08.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![新的UIKit](img/0319OT_04_08.jpg)'
- en: 'The new alert view for deletion is as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 删除的新警告视图如下截图所示：
- en: '![The new UIKit](img/0319OT_04_09.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![新的UIKit](img/0319OT_04_09.jpg)'
- en: Updated app icons
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新后的应用图标
- en: Apple has made a subtle change to the standard iOS application icon size with
    the release of iOS 7\. Previously, icons featured an even corner radius that was
    easy to replicate on your own. Apple has provided a new shape known as a **superellipse**
    with a more stretched corner radius. Additionally, the shine (gloss effect) has
    been removed from application icons. As always, Xcode 5 will automatically clip
    your app icon images to the proper shape; however, if you wish to add your own
    stroke or shadows, you will need to use an unofficial template.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果在iOS 7发布时对标准iOS应用程序图标大小进行了细微的调整。之前，图标具有易于复制的均匀圆角。苹果提供了一种新的形状，称为**超级椭圆**，具有更拉伸的圆角。此外，应用程序图标上的光泽（光泽效果）已被移除。像往常一样，Xcode
    5会自动剪裁你的应用程序图标图像到正确的形状；然而，如果你希望添加自己的描边或阴影，你需要使用非官方模板。
- en: Additionally, Apple has introduced what they call a **golden ratio grid system**
    that you will see in the following screenshot. Apple recommends using this grid
    when designing your icons and laying out individual elements. This is considered
    more of a guideline than a rule, so feel free to work outside of such a grid system
    if it better suits your application icon.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，苹果引入了他们称之为**黄金比例网格系统**的内容，你将在下面的屏幕截图中看到。苹果建议在设计图标和布局单个元素时使用此网格。这更被视为一个指南而不是规则，所以如果你觉得它更适合你的应用程序图标，可以自由地在这个网格系统之外工作。
- en: '![Updated app icons](img/0319OT_04_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![更新后的应用图标](img/0319OT_04_04.jpg)'
- en: Putting together the pieces
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合碎片
- en: Now that we have covered some of the basic design aspects of iOS 7, it's time
    to start building our application skeleton. Before we write any code, let's create
    the essential project files, construct our views in our storyboard, and create/connect
    outlets for each view controller. We will be able to navigate through our application;
    however, it just won't do anything yet.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了一些iOS 7的基本设计方面，是时候开始构建我们的应用程序骨架了。在我们编写任何代码之前，让我们创建基本的项目文件，在我们的故事板中构建我们的视图，并为每个视图控制器创建/连接出口。我们将能够导航到我们的应用程序；然而，它目前什么也不会做。
- en: Project organization
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目组织
- en: One of the first steps in my development process is organizing my project in
    Xcode 5\. Doing so makes it easier to navigate your project and find the files
    you need. Let's go ahead and organize our app.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我开发过程中的第一步是在Xcode 5中组织我的项目。这样做使得导航项目并找到所需的文件变得更容易。让我们继续组织我们的应用程序。
- en: 'Open our **Food and Me** project and take a look at the navigator on the left.
    We have a couple of files in no particular order, and we will also be creating
    more files shortly. We are going to divide our main project files into the following
    three separate categories:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的**Food and Me**项目，查看左侧的导航器。我们有一些文件，没有特定的顺序，我们很快还会创建更多文件。我们将把主要项目文件分为以下三个单独的类别：
- en: '`App Delegate`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`应用程序代理`'
- en: '`View Controllers`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`视图控制器`'
- en: '`Custom Classes`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`自定义类`'
- en: On the navigator pane, right-click on the top-level folder (`Food and Me`, our
    application name) and click on **New Group**. A new group will appear in our main
    `Food and Me` group; let's name it `App Delegate`. Repeat this process two more
    times, naming the new groups `View Controllers` and `Custom Classes`, respectively.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航器面板上，右键单击顶级文件夹（`Food and Me`，我们的应用程序名称）并单击**新建组**。在我们的主要`Food and Me`组中会出现一个新的组；让我们将其命名为`应用程序代理`。重复此过程两次，将新组分别命名为`视图控制器`和`自定义类`。
- en: Select both `AppDelegate.h` and `AppDelegate.m` (using the *command* key) and
    drag these files into the `App Delegate` group we just created. Do the same for
    `MenuViewController.h` and `MenuViewController.m` and drag these files into the
    `View Controllers` group. These groups can also be rearranged, so feel free to
    move them around based on preference.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`AppDelegate.h`和`AppDelegate.m`（使用*command*键），并将这些文件拖动到我们刚刚创建的`应用程序代理`组中。对`MenuViewController.h`和`MenuViewController.m`也执行相同的操作，并将这些文件拖动到`视图控制器`组中。这些组也可以重新排列，所以请根据您的喜好自由移动它们。
- en: 'The following screenshot gives a peek into the final results found in the `Food
    and Me` project:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在`Food and Me`项目中找到的最终结果：
- en: '![Project organization](img/0319OT_04_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![项目组织](img/0319OT_04_05.jpg)'
- en: Creating the files
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建文件
- en: Now that our project is a little more organized, it's time to create our remaining
    project files. Our application will require a view controller for our menu, the
    addition of new foods, views of our current foods, and then a detailed view of
    each food item. We have already set up our menu, so let's create the remaining
    files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们项目组织得更好了，是时候创建剩余的项目文件。我们的应用程序需要一个用于菜单的视图控制器，添加新食物的视图，当前食物的视图，以及每个食物项目的详细视图。我们已经设置了菜单，所以让我们创建剩余的文件。
- en: Right-click on our `View Controllers` group and click on **New File** (you can
    also achieve this by navigating to **File** | **New** | **File** in the menu bar).
    Make sure that **Cocoa Touch** is selected in the left-hand side menu bar, select
    **Objective-C class** from the options, and then click on **Next**. Name this
    file `AddNewViewController` and make sure it is a subclass of `UIViewController`.
    Click on **Next** and then on **Create**. Our new file will be created and added
    to our `View Controllers` group.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击我们的`视图控制器`组并单击**新建文件**（您也可以通过在菜单栏中导航到**文件** | **新建** | **文件**来实现此操作）。确保在左侧菜单栏中选择**Cocoa
    Touch**，从选项中选择**Objective-C类**，然后单击**下一步**。将此文件命名为`AddNewViewController`，并确保它是一个`UIViewController`的子类。单击**下一步**然后单击**创建**。我们的新文件将被创建并添加到我们的`视图控制器`组中。
- en: Repeat this process two more times. The first file will be named `MyFoodsViewController`
    and will be a subclass of `UITableViewController`. Name the second file `FoodDetailViewController`
    and set it as a subclass of `UIViewController`. We now have most of our required
    files for our application. In a later chapter, we will be creating one last project
    file in our `Custom Classes` group.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重复此过程两次。第一个文件将命名为`MyFoodsViewController`，并将作为`UITableViewController`的子类。第二个文件命名为`FoodDetailViewController`，并将其设置为`UIViewController`的子类。我们现在已经有了我们应用程序所需的大部分文件。在后面的章节中，我们将在`自定义类`组中创建最后一个项目文件。
- en: Setting up the storyboard
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置故事板
- en: Now that we have our files, we need to create some views in our storyboard and
    hook them up to our classes we just created. Open `Main.storyboard` and you should
    see our navigation controller and its root view controller (the menu view controller).
    Let's add the remaining controllers to our storyboard now.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了文件，我们需要在我们的故事板中创建一些视图并将它们连接到我们刚刚创建的类。打开`Main.storyboard`你应该能看到我们的导航控制器及其根视图控制器（菜单视图控制器）。现在让我们将剩余的控制器添加到我们的故事板中。
- en: Open the **Utilities** pane on the right-hand side (if not already open) and
    click on the **Object Library**. Our `AddNewViewController` and `FoodDetailViewController`
    files are both subclasses of `UIViewController`, so drag two view controller objects
    onto the storyboard. Our `MyFoodsViewController` is a subclass of `UITableViewController`,
    so let's drag a `UITableViewController` object onto the storyboard as well.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '打开右侧的**工具**面板（如果尚未打开）并点击**对象库**。我们的`AddNewViewController`和`FoodDetailViewController`文件都是`UIViewController`的子类，所以将两个视图控制器对象拖放到故事板中。我们的`MyFoodsViewController`是`UITableViewController`的子类，所以让我们将一个`UITableViewController`对象拖放到故事板中。 '
- en: Select one of the `UIViewControllers` and open the identity inspector. In the
    custom class section at the top, set this `View Controllers` class to `AddNewViewController`.
    Now select the remaining `UIViewController` and set its class to `FoodDetailViewController`.
    Lastly, select our `UITableViewController` and set its class to `MyFoodsViewController`.
    Our storyboard now has all of the objects needed for our application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个`UIViewControllers`并打开身份检查器。在顶部的自定义类部分，将这个`View Controllers`类设置为`AddNewViewController`。现在选择剩余的`UIViewController`并将其类设置为`FoodDetailViewController`。最后，选择我们的`UITableViewController`并将其类设置为`MyFoodsViewController`。现在我们的故事板已经包含了我们应用所需的所有对象。
- en: AddNewViewController
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AddNewViewController
- en: Now that we have created our files and added the proper controllers to our storyboard,
    let's go ahead and add the required objects to each controller. We will start
    with the `AddNewViewController` object. Select it, and then navigate to **Object
    Library** in the **Utilities** pane.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了文件并添加了适当的控制器到我们的故事板中，让我们继续添加每个控制器所需的对象。我们将从`AddNewViewController`对象开始。选择它，然后导航到**对象库**在**工具**面板中。
- en: Our application will give users the ability to track what they eat. Each food
    item will consist of an image, name/title, and the date it was created. We will
    need to provide an image view to store the final image, a placeholder image view,
    and a `UITextField` object to input the name of the food item.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将使用户能够追踪他们所吃的食物。每一项食物将包括一个图片、名称/标题以及创建日期。我们需要提供一个图像视图来存储最终图片、一个占位符图像视图以及一个`UITextField`对象来输入食物项的名称。
- en: Drag a `UITextField` object and two `UIImageView` objects onto the `AddNewViewController`
    view. These will allow our user to interact with the view and create food items
    for our app. In this chapter, we are simply adding all the elements to our project,
    so do not worry about the size or positions of these objects.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个`UITextField`对象和两个`UIImageView`对象拖放到`AddNewViewController`视图中。这将允许我们的用户与视图交互并为我们的应用创建食物项。在本章中，我们只是简单地将所有元素添加到我们的项目中，所以不要担心这些对象的大小或位置。
- en: Select the `AddNewViewController` object itself and then click on the assistant
    editor button (the middle button in the top-right corner that resembles a tuxedo).
    Switch to `AddNewViewController.h` if it is not already displayed. In order to
    access these objects in our code, we will create outlets for each item in our
    code. While holding down the *control* key on your keyboard, click-and-drag from
    the `UITextField` to the header file and let go. Name this outlet `nameTextField`
    and click on **Connect**. Repeat this for both `UIImageView`s. Name the first
    image view `placeholderImageView` and the second `finalImageView`. We now have
    all required objects and connections for `AddNewViewController`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`AddNewViewController`对象本身，然后点击右上角的辅助编辑器按钮（类似于燕尾服的按钮）。如果尚未显示，切换到`AddNewViewController.h`。为了在代码中访问这些对象，我们将为代码中的每个项目创建出口。在按住键盘上的*控制*键的同时，从`UITextField`拖动到头文件并释放。将此出口命名为`nameTextField`并点击**连接**。对两个`UIImageView`重复此操作。将第一个图像视图命名为`placeholderImageView`，第二个命名为`finalImageView`。我们现在有了`AddNewViewController`所需的所有对象和连接。
- en: FoodDetailViewController
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FoodDetailViewController
- en: When a user selects one of their previously added food items, we want to display
    a detailed view that includes a fullscreen background image, an image of the food,
    the name of the food, and then finally the date it was saved. Select the `FoodDetailViewController`
    class in the storyboard, and navigate back to the **Utilities** pane and the **Object
    Library**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择他们之前添加的其中一个食品项目时，我们希望显示一个详细视图，该视图包括全屏背景图像、食品图像、食品名称，最后是保存的日期。在故事板中选择`FoodDetailViewController`类，并导航回**实用工具**面板和**对象库**。
- en: Drag two `UIImageView`s and two `UILabel`s onto the food detail view. Once again,
    ignore the size and positioning of each item. We will also add outlets for each
    object to our code, so go ahead and open the assistant editor and switch to the
    `FoodDetailViewController.h` file. Control drag from the first image view to the
    space between `@interface` and `@end` in the `.h` file, and name the outlet `backgroundImageView`.
    Perform the same steps for the second image view and name it `foodImageView`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个`UIImageView`和两个`UILabel`拖动到食品详情视图中。再次忽略每个项目的尺寸和位置。我们还将为每个对象在我们的代码中添加出口，所以请打开辅助编辑器并切换到`FoodDetailViewController.h`文件。从第一个图像视图拖动控制到`.h`文件中`@interface`和`@end`之间的空间，并将出口命名为`backgroundImageView`。对第二个图像视图执行相同的步骤，并将其命名为`foodImageView`。
- en: Our labels will be used to display the name and date related to the food item.
    Control drag from the first label and name this outlet `foodNameLabel`. The second
    `UILabel` should be named `foodDateLabel`. We now have all the views required
    for our `FoodDetailViewController` class.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些标签用于显示与食品项目相关的名称和日期。从第一个标签开始拖动控制，并将此出口命名为`foodNameLabel`。第二个`UILabel`应命名为`foodDateLabel`。现在我们已经有我们`FoodDetailViewController`类所需的所有视图了。
- en: MyFoodsViewController
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MyFoodsViewController
- en: 'When we dragged the `UITableViewController` object to the storyboard, Xcode
    5 automatically added a `UITableView` object, with a plane prototype cell, to
    the controller. **Food and Me** will be using a custom `UITableViewCell` subclass
    to create and lay out our table view cells. This will be covered in a later chapter,
    so for the time being we will make one simple change to the `MyFoodsViewController`
    class. Select the prototype cell and a small white box will appear at the bottom
    of the cell''s frame. Click-and-drag down this box to resize the cell. Set its
    height to 100 pixels, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`UITableViewController`对象拖动到故事板中时，Xcode 5自动向控制器中添加了一个`UITableView`对象，带有一个平面原型单元格。**Food
    and Me**将使用自定义的`UITableViewCell`子类来创建和布局我们的表格视图单元格。这将在后面的章节中介绍，所以目前我们将对`MyFoodsViewController`类进行一个简单的更改。选择原型单元格，单元格框架底部将出现一个小白框。点击并拖动此框以调整单元格大小。将其高度设置为100像素，如图所示：
- en: '![MyFoodsViewController](img/0319OT_04_06.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![MyFoodsViewController](img/0319OT_04_06.jpg)'
- en: Summary
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned some of the newer design principles associated with
    iOS 7\. Additionally, we organized our project, created all of our required files,
    and started our views in storyboard. We are ready to start writing some code and
    adding functionality to our application.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了与iOS 7相关的一些较新的设计原则。此外，我们组织了我们的项目，创建了所有必需的文件，并在故事板中开始我们的视图。我们现在准备好开始编写代码并为我们的应用程序添加功能。
- en: In the next chapter, we will finish building the `AddNewViewController` class
    and add the functionality to save our users' data for later viewing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完成构建`AddNewViewController`类，并添加保存用户数据以便以后查看的功能。
