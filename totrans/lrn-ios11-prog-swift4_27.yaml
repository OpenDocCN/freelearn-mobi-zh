- en: Drag and Drop
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖拽和放置
- en: '*Drag and drop* was introduced in June 2017 at WWDC and it intrigued me in
    different ways. I love using my iPad and I felt like this would make it easier
    to do things. As I have had time to use iOS 11, I think that I was right about
    my assumption and I cannot wait until more apps have this feature.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*拖拽和放置* 在2017年6月的WWDC上被引入，并以不同的方式吸引了我。我喜欢使用我的iPad，我觉得这会使做事变得更简单。随着我有时间使用iOS
    11，我认为我的假设是正确的，我迫不及待地想看到更多应用拥有这个功能。'
- en: We are going to add drag and drop to our iPad app by letting users drag filter
    items we use in our filter scroller. We will also accept drag and drop from the
    *Photos* app. Users will be able to drag from the *Photos* app and drop it into
    our scroller when on the iPad.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过让用户拖拽我们在筛选滚动器中使用的筛选项来将拖拽和放置添加到我们的iPad应用中。我们还将接受来自 *照片* 应用的拖拽和放置。用户将能够从
    *照片* 应用中拖拽并将其放置到iPad上的滚动器中。
- en: 'We will cover the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下内容：
- en: How to drag from a Collection View
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从集合视图中拖拽
- en: How to create custom drag elements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建自定义拖拽元素
- en: How to accept drag and drop from the *Photos* app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何接受来自 *照片* 应用程序的拖拽和放置
- en: There is a lot of code in this chapter, mainly because we will be doing quite
    a few things. The first thing we want to do is drag photos from the *Photos* app
    or any app that has photos and drop it into our filter view area. Drag and drop
    is an alternative to using the picker control to add a photo.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中有大量的代码，主要是因为我们将要做很多事情。我们首先想要做的是从 *照片* 应用程序或任何包含照片的应用中拖拽照片并将其放置到我们的筛选视图区域。拖拽和放置是使用选择器控件添加照片的替代方法。
- en: Accepting drag from other apps
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受来自其他应用的拖拽
- en: 'Let''s get started in accepting drag and drop from other apps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始接受来自其他应用的拖拽和放置操作：
- en: Add drag and drop to our photo view from *Photos* apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 *照片* 应用程序添加拖拽和放置到我们的照片视图中
- en: Add drag and drop from filter scroller
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从筛选滚动器添加拖拽和放置
- en: 'The first thing we want to do is enable dragging for our filter items. We need
    to create a new extension to our `PhotoFilterViewController` called `PhotoFilterViewController+UIDropInteraction`.
    Inside this file, add the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先想要做的是启用我们的筛选项的拖拽功能。我们需要为我们的 `PhotoFilterViewController` 创建一个新的扩展，命名为 `PhotoFilterViewController+UIDropInteraction`。在这个文件中，添加以下内容：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we need to add all of the methods needed to accept drop interaction.
    We will write this to allow dropping within the app as well as outside of the
    app. When you start to drag an element, Apple calls this a **session**. There
    are two primary sessions we will need to watch out for, local sessions or non-local
    sessions. Local sessions mean that we are dragging within our app and if that
    is not happening then it means that the session is coming from a different app.
    Let''s handle this by first adding the first method `-dropInteraction:canHandleSession`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加所有接受放置交互的方法。我们将编写此代码以允许在应用内以及应用外进行放置。当你开始拖拽一个元素时，Apple称这为 **会话**。我们将需要关注两个主要会话，本地会话或非本地会话。本地会话意味着我们在我们的应用内拖拽，如果不是这种情况，那么会话来自不同的应用。让我们通过首先添加第一个方法
    `-dropInteraction:canHandleSession` 来处理这个问题：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This method is where we give permission for items to be dropped into our app
    as well as the local dragging of objects. For a local drag, we are accepting an
    image and for now we are not accepting drops from within the app. We will add
    this later. Let''s add the next method that we need to implement, `-dropInteraction:sessionDidUpdate:`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法是我们允许项被拖拽到我们的应用中以及本地拖拽对象的地方。对于本地拖拽，我们接受一个图像，目前我们不接受应用内的放置。我们稍后会添加这个功能。让我们添加下一个我们需要实现的方法
    `-dropInteraction:sessionDidUpdate:`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This method is telling our app how we want to consume data and in both cases
    we are going to copy it. Let''s add the next method, `-dropInteraction:performDrop`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法告诉我们的应用我们希望如何消费数据，在两种情况下我们都会复制它。让我们添加下一个方法 `-dropInteraction:performDrop`：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This method gets called after the user lifts their finger from the screen.
    This indicates the user''s intent to drop the item and this is your opportunity
    to request the data for the drag item. We simply take this data and display it
    in our Image View; we also create filter thumbnails. This behavior is the same
    behavior we have for selecting an image in the picker. Finally, we add our last
    method to `-dropInteraction:previewForDroppingItem:withDefault`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从屏幕上抬起手指时，会调用此方法。这表示用户有放置项的意图，这是您请求拖拽项数据的机会。我们简单地获取这些数据并在我们的图像视图中显示它；我们还创建了筛选缩略图。这种行为与在选择器中选择图像的行为相同。最后，我们将我们的最后一个方法添加到
    `-dropInteraction:previewForDroppingItem:withDefault`：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This last method is creating a preview for the image being dragged into our
    view. When you are done your extension should look like the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的方法是为拖入我们视图中的图像创建一个预览。当你完成时，你的扩展应该看起来像以下这样：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are now done with implementing dragging from other applications. Now that
    our drop implementation is added, we just need to make sure that our view will
    accept it. Add the following method inside the `PhotoFilterViewController`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了从其他应用程序拖动的实现。现在，我们的拖放实现已经添加，我们只需要确保我们的视图将接受它。在 `PhotoFilterViewController`
    中添加以下方法：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we are implementing the `UIDropInteraction` we just created in our extension.
    We just need to call this method. Add `addDropInteraction()` into the `initialize()`.
    It should now look like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在实现我们在扩展中刚刚创建的 `UIDropInteraction`。我们只需要调用这个方法。将 `addDropInteraction()`
    添加到 `initialize()` 中。现在它应该看起来像以下这样：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Launch the iPad Air simulator and open the *Photos* app at the same time. You
    can now drag from the *Photos* app directly into our filter area:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 同时启动 iPad Air 模拟器和打开 *Photos* 应用程序。你现在可以直接从 *Photos* 应用程序拖动到我们的过滤器区域：
- en: '![](img/b95a18cc-2acc-4128-969f-7733492bb5a2.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b95a18cc-2acc-4128-969f-7733492bb5a2.png)'
- en: 'We can also drag from Safari and drop into our filter area:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以从 Safari 拖动到我们的过滤器区域：
- en: '![](img/dcef129d-f3d7-45ec-b105-7a776f99a3eb.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcef129d-f3d7-45ec-b105-7a776f99a3eb.png)'
- en: We can drag our filter items to our Photo, but it currently does not do anything
    at this time. We have some work to do to get this in.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的过滤器项拖放到我们的照片中，但在此阶段它目前没有任何作用。我们需要做一些工作来使其实现。
- en: Dragging and dropping filter items
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖放过滤器项
- en: 'In order to make our filter items draggable, we have quite a few things to
    do. First, we need to update our `PhotoFilterViewController+UIDropInteraction`
    file. Open it up, look for the `-dropInteraction:canHandleSession:` method, and
    update the `else` statement from `false` to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的过滤器项可拖动，我们有很多事情要做。首先，我们需要更新我们的 `PhotoFilterViewController+UIDropInteraction`
    文件。打开它，查找 `-dropInteraction:canHandleSession:` 方法，并将 `else` 语句从 `false` 更新为以下内容：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you are done, your method will look like the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你的方法将看起来像以下这样：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can ignore the error for now. Here, we are just making sure that our `FilterItem`
    class can be dropped and loaded. Now, we need to do one more update in this class:
    find the `-dropInteraction:performDrop:` method. After the `if` statement we are
    going to add an `else`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可以忽略这个错误。在这里，我们只是确保我们的 `FilterItem` 类可以被拖放和加载。现在，我们需要在这个类中做一项更新：找到 `-dropInteraction:performDrop:`
    方法。在 `if` 语句之后，我们将添加一个 `else`：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This `else` statement we just added will loop through each item that is being
    dragged and load the object. Our app does not support multiple draggable items,
    but this is where it is handled. When we add this code we will have another error
    but we will address this soon. The `-dropInteraction:performDrop:` method should
    now look like the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的 `else` 语句将遍历每个正在拖动的项目并加载对象。我们的应用程序不支持多个可拖动项目，但这就是处理的地方。当我们添加此代码时，我们将会遇到另一个错误，但我们很快就会解决这个问题。`-dropInteraction:performDrop:`
    方法现在应该看起来像以下这样：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We still have two errors that we need to fix; let''s fix those next by opening
    the `FilterItem` class inside your `Photo Filter` folder. Add the following under
    the `init` method:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有两个错误需要修复；让我们通过打开 `Photo Filter` 文件夹中的 `FilterItem` 类来修复这些错误。在 `init` 方法下添加以下内容：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are adding our a `init` method that we need for dragging. This allows us
    to pass the data around. We have two errors because we need to conform to `NSItemProviderReading`
    and `NSItemProviderWriting`. We will write them both in the same file. In the
    `Photo Filter` folder, create a new `Swift` class and add the first extension:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在添加一个 `init` 方法，这是我们需要用于拖动的。这允许我们在应用程序中传递数据。我们有两个错误，因为我们需要符合 `NSItemProviderReading`
    和 `NSItemProviderWriting`。我们将它们都写在同一个文件中。在 `Photo Filter` 文件夹中，创建一个新的 `Swift`
    类并添加第一个扩展：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This extension is to conform to `NSItemProviderReading`, which decodes the
    data that we are passing so that we can read it. Next, add the last extension
    by adding the following after our first extension:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展是为了符合 `NSItemProviderReading`，它解码我们传递的数据，以便我们可以读取它。接下来，通过在我们的第一个扩展之后添加以下内容来添加最后一个扩展：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This extension allows us to export our data into a binary representation by
    first making sure the class type is of `FilterItem`. We are just about done with
    all the setup we need. We now need to make sure that our Collection View allows
    dragging. Currently, if you try to drag, nothing will happen. Open the `PhotoFilterViewController`
    and, in the `setupCollectionView()` method, add the following at the bottom of
    the method:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展允许我们通过首先确保类类型为 `FilterItem` 来将我们的数据导出为二进制表示。我们几乎完成了所有需要的设置。我们现在需要确保我们的 Collection
    View 允许拖动。目前，如果您尝试拖动，则不会发生任何操作。打开 `PhotoFilterViewController` 并在 `setupCollectionView()`
    方法的底部添加以下内容：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Adding this line will show an error, but you can ignore it, as we are about
    to fix it. When you finish, the entire method will look like the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此行将显示错误，但您可以忽略它，因为我们即将修复它。完成之后，整个方法将看起来如下所示：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This now enables dragging from a Collection View, but we now implement the drag
    delegate code for it all to work. Before we create another extension, let's create
    a new folder inside the `Photo Filter` folder and name this folder `Extensions`.
    Then drag both files we created earlier, `Filter-Item+NSItemProvider` and `PhotoFilterViewController+UIDropInteraction`,
    into the `Extensions` folder.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在允许从 Collection View 拖动，但我们现在需要实现拖动代理代码才能使其全部工作。在我们创建另一个扩展之前，让我们在“Photo Filter”文件夹内创建一个新的文件夹，并将其命名为“Extensions”。然后将我们之前创建的两个文件，`Filter-Item+NSItemProvider`
    和 `PhotoFilterViewController+UIDropInteraction`，拖入“Extensions”文件夹。
- en: 'Now that we have that folder set up right, click the `Extensions` folder inside
    the `Photo Filter` folder and create a new file called `PhotoFilterViewController+
    UICollectionViewDrag`. Once you have created the file, add the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经正确设置了该文件夹，请点击“Photo Filter”文件夹内的“Extensions”文件夹，并创建一个名为“PhotoFilterViewController+
    UICollectionViewDrag”的新文件。创建文件后，添加以下内容：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This method `-collectionView:itemsForBeginningDragSession:atIndexPath:` we
    are getting the data for the item at index path as a drag is being made. If the
    array is empty, the drag session will not begin. We are finished; if you build
    and run the project, you will now be able to drag filter items onto the selected
    photo. Let''s drag from our filter list:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法 `-collectionView:itemsForBeginningDragSession:atIndexPath:` 我们正在获取拖动时索引路径处的项目数据。如果数组为空，则拖动会话将不会开始。我们已经完成；如果您构建并运行项目，现在您将能够将过滤器项目拖放到选定的照片上。让我们从我们的过滤器列表中拖动：
- en: '![](img/a623d906-b32d-4fea-9dc5-3ca466e5d6b0.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a623d906-b32d-4fea-9dc5-3ca466e5d6b0.png)'
- en: 'After dropping the filter item, you should see the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 释放过滤器项目后，您应该看到以下内容：
- en: '![](img/f39195cf-d4eb-46b3-a8f8-a9d806ab061c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f39195cf-d4eb-46b3-a8f8-a9d806ab061c.png)'
- en: Summary
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at how to accept drag and drop from other applications.
    We also looked at how to create custom drag items using a Collection View. Now,
    we can use drag and drop on the iPad as a way to quickly add photos whereas the
    iPhone will use the *Camera Roll* only. Drag and drop is only supported for the
    iPad at this time, but hopefully soon Apple will open this up to us to use in
    our apps. In the next chapter, we will look at how to use Siri to request payments
    for friends for dinner.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何接受来自其他应用程序的拖放操作。我们还探讨了如何使用 Collection View 创建自定义拖动项。现在，我们可以使用 iPad
    上的拖放操作来快速添加照片，而 iPhone 则仅使用 *Camera Roll*。目前，拖放操作仅支持 iPad，但希望苹果公司很快会将其开放给我们用于我们的应用程序。在下一章中，我们将探讨如何使用
    Siri 为朋友的晚餐请求付款。
