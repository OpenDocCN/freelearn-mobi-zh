- en: Drag and Drop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Drag and drop* was introduced in June 2017 at WWDC and it intrigued me in
    different ways. I love using my iPad and I felt like this would make it easier
    to do things. As I have had time to use iOS 11, I think that I was right about
    my assumption and I cannot wait until more apps have this feature.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to add drag and drop to our iPad app by letting users drag filter
    items we use in our filter scroller. We will also accept drag and drop from the
    *Photos* app. Users will be able to drag from the *Photos* app and drop it into
    our scroller when on the iPad.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to drag from a Collection View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create custom drag elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to accept drag and drop from the *Photos* app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot of code in this chapter, mainly because we will be doing quite
    a few things. The first thing we want to do is drag photos from the *Photos* app
    or any app that has photos and drop it into our filter view area. Drag and drop
    is an alternative to using the picker control to add a photo.
  prefs: []
  type: TYPE_NORMAL
- en: Accepting drag from other apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started in accepting drag and drop from other apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add drag and drop to our photo view from *Photos* apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add drag and drop from filter scroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first thing we want to do is enable dragging for our filter items. We need
    to create a new extension to our `PhotoFilterViewController` called `PhotoFilterViewController+UIDropInteraction`.
    Inside this file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to add all of the methods needed to accept drop interaction.
    We will write this to allow dropping within the app as well as outside of the
    app. When you start to drag an element, Apple calls this a **session**. There
    are two primary sessions we will need to watch out for, local sessions or non-local
    sessions. Local sessions mean that we are dragging within our app and if that
    is not happening then it means that the session is coming from a different app.
    Let''s handle this by first adding the first method `-dropInteraction:canHandleSession`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is where we give permission for items to be dropped into our app
    as well as the local dragging of objects. For a local drag, we are accepting an
    image and for now we are not accepting drops from within the app. We will add
    this later. Let''s add the next method that we need to implement, `-dropInteraction:sessionDidUpdate:`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is telling our app how we want to consume data and in both cases
    we are going to copy it. Let''s add the next method, `-dropInteraction:performDrop`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This method gets called after the user lifts their finger from the screen.
    This indicates the user''s intent to drop the item and this is your opportunity
    to request the data for the drag item. We simply take this data and display it
    in our Image View; we also create filter thumbnails. This behavior is the same
    behavior we have for selecting an image in the picker. Finally, we add our last
    method to `-dropInteraction:previewForDroppingItem:withDefault`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This last method is creating a preview for the image being dragged into our
    view. When you are done your extension should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now done with implementing dragging from other applications. Now that
    our drop implementation is added, we just need to make sure that our view will
    accept it. Add the following method inside the `PhotoFilterViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are implementing the `UIDropInteraction` we just created in our extension.
    We just need to call this method. Add `addDropInteraction()` into the `initialize()`.
    It should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the iPad Air simulator and open the *Photos* app at the same time. You
    can now drag from the *Photos* app directly into our filter area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b95a18cc-2acc-4128-969f-7733492bb5a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also drag from Safari and drop into our filter area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcef129d-f3d7-45ec-b105-7a776f99a3eb.png)'
  prefs: []
  type: TYPE_IMG
- en: We can drag our filter items to our Photo, but it currently does not do anything
    at this time. We have some work to do to get this in.
  prefs: []
  type: TYPE_NORMAL
- en: Dragging and dropping filter items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to make our filter items draggable, we have quite a few things to
    do. First, we need to update our `PhotoFilterViewController+UIDropInteraction`
    file. Open it up, look for the `-dropInteraction:canHandleSession:` method, and
    update the `else` statement from `false` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are done, your method will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can ignore the error for now. Here, we are just making sure that our `FilterItem`
    class can be dropped and loaded. Now, we need to do one more update in this class:
    find the `-dropInteraction:performDrop:` method. After the `if` statement we are
    going to add an `else`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This `else` statement we just added will loop through each item that is being
    dragged and load the object. Our app does not support multiple draggable items,
    but this is where it is handled. When we add this code we will have another error
    but we will address this soon. The `-dropInteraction:performDrop:` method should
    now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We still have two errors that we need to fix; let''s fix those next by opening
    the `FilterItem` class inside your `Photo Filter` folder. Add the following under
    the `init` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We are adding our a `init` method that we need for dragging. This allows us
    to pass the data around. We have two errors because we need to conform to `NSItemProviderReading`
    and `NSItemProviderWriting`. We will write them both in the same file. In the
    `Photo Filter` folder, create a new `Swift` class and add the first extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This extension is to conform to `NSItemProviderReading`, which decodes the
    data that we are passing so that we can read it. Next, add the last extension
    by adding the following after our first extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This extension allows us to export our data into a binary representation by
    first making sure the class type is of `FilterItem`. We are just about done with
    all the setup we need. We now need to make sure that our Collection View allows
    dragging. Currently, if you try to drag, nothing will happen. Open the `PhotoFilterViewController`
    and, in the `setupCollectionView()` method, add the following at the bottom of
    the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding this line will show an error, but you can ignore it, as we are about
    to fix it. When you finish, the entire method will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This now enables dragging from a Collection View, but we now implement the drag
    delegate code for it all to work. Before we create another extension, let's create
    a new folder inside the `Photo Filter` folder and name this folder `Extensions`.
    Then drag both files we created earlier, `Filter-Item+NSItemProvider` and `PhotoFilterViewController+UIDropInteraction`,
    into the `Extensions` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have that folder set up right, click the `Extensions` folder inside
    the `Photo Filter` folder and create a new file called `PhotoFilterViewController+
    UICollectionViewDrag`. Once you have created the file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This method `-collectionView:itemsForBeginningDragSession:atIndexPath:` we
    are getting the data for the item at index path as a drag is being made. If the
    array is empty, the drag session will not begin. We are finished; if you build
    and run the project, you will now be able to drag filter items onto the selected
    photo. Let''s drag from our filter list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a623d906-b32d-4fea-9dc5-3ca466e5d6b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After dropping the filter item, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f39195cf-d4eb-46b3-a8f8-a9d806ab061c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to accept drag and drop from other applications.
    We also looked at how to create custom drag items using a Collection View. Now,
    we can use drag and drop on the iPad as a way to quickly add photos whereas the
    iPhone will use the *Camera Roll* only. Drag and drop is only supported for the
    iPad at this time, but hopefully soon Apple will open this up to us to use in
    our apps. In the next chapter, we will look at how to use Siri to request payments
    for friends for dinner.
  prefs: []
  type: TYPE_NORMAL
