["```swift\n@IBAction func didTapTakePhotoButton(sender: AnyObject) {\n    let imagePicker = UIImagePickerController()\n    if UIImagePickerController.isSourceTypeAvailable(.Camera) {\n        imagePicker.sourceType = .Camera\n    }\n    self.presentViewController(\n        imagePicker,\n        animated: true,\n        completion: nil\n    )\n}\n```", "```swift\nimagePicker.delegate = self\n```", "```swift\nextension ViewController: UINavigationControllerDelegate {}\n\nextension ViewController: UIImagePickerControllerDelegate {\n    func imagePickerController(\n        picker: UIImagePickerController,\n        didFinishPickingImage image: UIImage!,\n        editingInfo: [NSObject : AnyObject]!\n        )\n    {\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n}\n```", "```swift\nclass ViewController: UIViewController {\n\n    var photos = [UIImage]()\n\n    // ...\n}\n```", "```swift\n    func imagePickerController(\n        picker: UIImagePickerController,\n        didFinishPickingImage image: UIImage!,\n        editingInfo: [NSObject : AnyObject]!\n        )\n    {\n        self.photos.append(image)\n        self.dismissViewControllerAnimated(true, completion: nil)\n    }\n```", "```swift\nimport UIKit\n\nstruct Photo {\n    let image: UIImage\n    let label: String\n}\n```", "```swift\nvar images = [Photo]()\n```", "```swift\nself.dismissViewControllerAnimated(true) {\n    // Ask User for Label\n\n    let alertController = UIAlertController(\n        title: \"Photo Label\",\n        message: \"How would you like to label your photo?\",\n        preferredStyle: .Alert\n    )\n\n    alertController.addTextFieldWithConfigurationHandler()\n    {\n        textField in\n        let saveAction = UIAlertAction(\n            title: \"Save\",\n            style: .Default\n            ) { action in\n            let label = textField.text ?? \"\"\n            let photo = Photo(image: image, label: label)\n            self.photos.append(photo)\n        }\n        alertController.addAction(saveAction)\n    }\n\n    self.presentViewController(\n        alertController,\n        animated: true,\n        completion: nil\n     )\n}\n```", "```swift\nextension ViewController: UICollectionViewDataSource {\n    func collectionView(\n        collectionView: UICollectionView,\n        numberOfItemsInSection section: Int\n        ) -> Int\n    {\n        return self.photos.count\n    }\n}\n```", "```swift\nimport UIKit\n\nclass PhotoCollectionViewCell: UICollectionViewCell {\n    @IBOutlet var imageView: UIImageView!\n    @IBOutlet var label: UILabel!\n}\n```", "```swift\nclass ViewController: UIViewController {\n    @IBOutlet var collectionView: UICollectionView!\n\n    // ... \n}\n```", "```swift\nextension ViewController: UICollectionViewDataSource {\n    // ...\n\n    func collectionView(\n        collectionView: UICollectionView,\n        cellForItemAtIndexPath indexPath: NSIndexPath\n        ) -> UICollectionViewCell\n    {\n        let cell = collectionView\n            .dequeueReusableCellWithReuseIdentifier(\n            \"DefaultCell\",\n            forIndexPath: indexPath\n            ) as! PhotoCollectionViewCell\n\n        let photo = self.photos[indexPath.item]\n        cell.imageView.image = photo.image\n        cell.label.text = photo.label\n\n        return cell\n    }\n}\n```", "```swift\nlet saveAction = UIAlertAction(\n    title: \"Save\",\n    style: .Default\n    ) { action in\n    let label = textField.text ?? \"\"\n    let photo = Photo(image: image, label: label)\n    self.photos.append(photo)\n\n    let indexPath = NSIndexPath(\n        forItem: self.photos.count - 1,\n        inSection: 0\n    )\n    self.collectionView.insertItemsAtIndexPaths([indexPath])\n}\n```", "```swift\nimport UIKit\n\nclass PhotoStore: NSObject {\n    var photos = [Photo]()\n}\n```", "```swift\nclass PhotoStore: NSObject {\n    var photos = [Photo]()\n    var cellForPhoto:\n        (Photo, NSIndexPath) -> UICollectionViewCell\n\n    init(\n        cellForPhoto: (Photo,NSIndexPath) -> UICollectionViewCell\n        )\n    {\n        self.cellForPhoto = cellForPhoto\n\n        super.init()\n    }\n}\n```", "```swift\nextension PhotoStore: UICollectionViewDataSource {\n    func collectionView(\n        collectionView: UICollectionView,\n        numberOfItemsInSection section: Int\n        ) -> Int\n    {\n        return self.photos.count\n    }\n\n    func collectionView(\n        collectionView: UICollectionView,\n        cellForItemAtIndexPath indexPath: NSIndexPath\n        ) -> UICollectionViewCell\n    {\n        let photo = self.photos[indexPath.item]\n        return self.cellForPhoto(photo, indexPath)\n    }\n}\n```", "```swift\nfunc saveNewPhotoWithImage(\n    image: UIImage,\n    labeled label: String\n    ) -> NSIndexPath\n{\n    let photo = Photo(image: image, label: label)\n    self.photos.append(photo)\n    return NSIndexPath(\n       forItem: self.photos.count - 1,\n       inSection: 0\n    )\n}\n```", "```swift\n    var photoStore: PhotoStore!\n```", "```swift\nfunc createCellForPhoto(\n    photo: Photo,\n    indexPath: NSIndexPath\n    ) -> UICollectionViewCell\n{\n    let cell = self.collectionView\n        .dequeueReusableCellWithReuseIdentifier(\n        \"DefaultCell\",\n        forIndexPath: indexPath\n        ) as! PhotoCollectionViewCell\n\n    cell.imageView.image = photo.image\n    cell.label.text = photo.label\n\n    return cell\n}\n```", "```swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    self.photoStore = PhotoStore(\n        cellForPhoto: self.createCellForPhoto\n    )\n    self.collectionView.dataSource = self.photoStore\n}\n```", "```swift\nlet saveAction = UIAlertAction(\n    title: \"Save\",\n    style: .Default\n    ) { action in\n    let label = textField.text ?? \"\"\n    let indexPath = self.photoStore.saveNewPhotoWithImage(\n        image,\n        labeled: label\n    )\n    self.collectionView.insertItemsAtIndexPaths([indexPath])\n}\n```", "```swift\nprivate extension PhotoStore {\n    func getSaveDirectory() throws -> NSURL {\n        let fileManager = NSFileManager.defaultManager()\n        return try fileManager.URLForDirectory(\n            .DocumentDirectory,\n            inDomain: .UserDomainMask,\n            appropriateForURL: nil,\n            create: true\n        )\n    }\n}\n```", "```swift\nlet timeStamp = \"\\(NSDate().timeIntervalSince1970)\"\n```", "```swift\nlet fullDirectory = directory.URLByAppendingPathComponent(\n    timestamp\n    )\n```", "```swift\nNSFileManager.defaultManager().createDirectoryAtURL(\n    fullDirectory,\n    withIntermediateDirectories: true,\n    attributes: nil\n)\n```", "```swift\nlet fileName = \"\\(self.label).jpg\"\nlet filePath = fullDirectory\n    .URLByAppendingPathComponent(fileName)\n```", "```swift\nlet data = UIImageJPEGRepresentation(self.image, 1)\n```", "```swift\ndata.writeToURL(filePath, atomically: true)\n```", "```swift\nstruct Photo {\n    // ...\n\n    enum Error: String, ErrorType {\n        case CouldntGetImageData = \"Couldn't get data from image\"\n        case CouldntWriteImageData = \"Couldn't write image data\"\n    }\n\n    func saveToDirectory(directory: NSURL) throws {\n        let timeStamp = \"\\(NSDate().timeIntervalSince1970)\"\n        let fullDirectory = directory\n            .URLByAppendingPathComponent(timeStamp)\n        try NSFileManager.defaultManager().createDirectoryAtURL(\n            fullDirectory,\n            withIntermediateDirectories: true,\n            attributes: nil\n        )\n        let fileName = \"\\(self.label).jpg\"\n        let filePath = fullDirectory\n            .URLByAppendingPathComponent(fileName)\n        if let data = UIImageJPEGRepresentation(self.image, 1) {\n            if !data.writeToURL(filePath, atomically: true) {\n                throw Error.CouldntWriteImageData\n            }\n        }\n        else {\n            throw Error.CouldntGetImageData\n        }\n    }\n}\n```", "```swift\nfunc saveNewPhotoWithImage(\n    image: UIImage,\n    labeled label: String\n    ) throws -> NSIndexPath\n{\n    let photo = Photo(image: image, label: label)\n    try photo.saveToDirectory(self.getSaveDirectory())\n    self.photos.append(photo)\n    return NSIndexPath(\n        forItem: self.photos.count - 1,\n        inSection: 0\n    )\n}\n```", "```swift\nfunc displayErrorWithTitle(title: String?, message: String) {\n    let alert = UIAlertController(\n        title: title,\n        message: message,\n        preferredStyle: .Alert\n    )\n    alert.addAction(UIAlertAction(\n        title: \"OK\",\n        style: .Default,\n        handler: nil\n    ))\n    self.presentViewController(\n        alert,\n        animated: true,\n        completion: nil\n    )\n}\n```", "```swift\nfunc displayError(error: ErrorType, withTitle: String) {\n    switch error {\n    case let error as NSError:\n        self.displayErrorWithTitle(\n            title,\n            message: error.localizedDescription\n        )\n    case let error as Photo.Error:\n        self.displayErrorWithTitle(\n            title,\n            message: error.rawValue\n        )\n    default:\n        self.displayErrorWithTitle(\n            title,\n            message: \"Unknown Error\"\n        )\n    }\n}\n```", "```swift\nfunc createSaveActionWithTextField(\n    textField: UITextField,\n    andImage image: UIImage\n    ) -> UIAlertAction\n{\n    return UIAlertAction(\n        title: \"Save\",\n        style: .Default\n        ) { action in\n        do {\n            let indexPath = try self.photoStore\n               .saveNewPhotoWithImage(\n                image,\n                labeled: textField.text ?? \"\"\n                )\n            self.collectionView.insertItemsAtIndexPaths([indexPath]\n            )\n        }\n        catch let error {\n            self.displayError(\n                error,\n                withTitle: \"Error Saving Photo\"\n            )\n        }\n    }\n}\n```", "```swift\n// ..\n\nalertController.addTextFieldWithConfigurationHandler()\n{\n    textField in\n    let saveAction = self.createSaveActionWithTextField(\n        textField,\n        andImage: image\n    )\n    alertController.addAction(saveAction)\n}\n\n// ..\n```", "```swift\nlet image = UIImage(contentsOfFile: filePath.relativePath!)\n```", "```swift\nlet label = filePath.URLByDeletingPathExtension?\n    .lastPathComponent ?? \"\"\n```", "```swift\ninit(image: UIImage, label: String) {\n    self.image = image\n    self.label = label\n}\n\ninit?(filePath: NSURL) {\n    if let image = UIImage(\n        contentsOfFile: filePath.relativePath!\n        )\n    {\n        let label = filePath.URLByDeletingPathExtension?\n            .lastPathComponent ?? \"\"\n        self.init(image: image, label: label)\n    }\n    else {\n        return nil\n    }\n}\n```", "```swift\nfunc loadPhotos() throws {\n    self.photos.removeAll(keepCapacity: true)\n\n    let fileManager = NSFileManager.defaultManager()\n    let saveDirectory = try self.getSaveDirectory()\n    let enumerator = fileManager.enumeratorAtPath(\n        saveDirectory.relativePath!\n    )\n    while let file = enumerator?.nextObject() as? String {\n        let fileType = enumerator!.fileAttributes![NSFileType]\n            as! String\n        if fileType == NSFileTypeRegular {\n            let fullPath = saveDirectory\n                .URLByAppendingPathComponent(file)\n            if let photo = Photo(filePath: fullPath) {\n                self.photos.append(photo)\n            }\n        }\n    }\n}\n```", "```swift\noverride func viewWillAppear(animated: Bool) {\n    super.viewWillAppear(animated)\n\n    do {\n        try self.photoStore.loadPhotos()\n        self.collectionView.reloadData()\n    }\n    catch let error {\n        self.displayError(\n            error,\n            withTitle: \"Error Loading Photos\"\n        )\n    }\n}\n```"]