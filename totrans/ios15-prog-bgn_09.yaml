- en: '*Chapter 8*: Protocols, Extensions, and Error Handling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you've learned how to represent complex objects using
    classes or structures and how to use enumerations to group related values together.
  prefs: []
  type: TYPE_NORMAL
- en: To end the section on Swift, you'll learn about **protocols**, **extensions**,
    and **error handling**. Protocols define a blueprint of methods, properties, and
    other requirements that can be adopted by a class, structure, or enumeration.
    Extensions enable you to provide new functionality for an existing class, structure,
    or enumeration. Error handling covers how to respond to and recover from errors
    in your program.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll be able to write your own protocols to meet
    the requirements of your apps, use extensions to add new capabilities to existing
    types, and handle error conditions in your apps without crashing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Xcode playground for this chapter is in the `Chapter08` folder of the code
    bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3H1XWkQ](https://bit.ly/3H1XWkQ)'
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to start from scratch, create a new playground and name it `Protocols,
    ExtensionsAndErrorHandling`. You can type in and run all of the code in this chapter
    as you go along. Let's start with protocols, which is a way of specifying properties
    and methods that a class, structure or enumeration should have.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Protocols are like blueprints that determine what properties or methods an object
    should have. After you've declared a protocol, classes, structures, and enumerations
    can adopt this protocol, and provide their own implementation for the required
    properties and methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a protocol declaration looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Just like classes and structures, protocol names start with an uppercase letter.
    Properties need to be declared using the `var` keyword. You use `{get set}` if
    you want a property that can be read from or written to, and `{get}` if you want
    a read-only property. Note that you just specify property and method names. The
    implementation is done within the adopting class, structure, or enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on protocols, visit: [https://docs.swift.org/swift-book/LanguageGuide/Protocols.html](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you understand protocols, imagine an app used by a fast-food restaurant.
    The management has decided to show calorie counts for the meals being served.
    The app currently has the following class, structure, and enumeration, and none
    of them have calorie counts implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Burger` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Fries` structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Sauce` enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code to your playground to declare the `Burger` class, the
    `Fries` structure, and the `Sauce` enumeration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: These represent the existing class, structure, and enumeration in the app. Don't
    worry about the empty definitions, as they are not required for this lesson. As
    you can see, none of them have calorie counts at present. Let's look at how to
    work with protocols to specify the properties and methods needed to implement
    calorie counts. You'll start by declaring a protocol that specifies the required
    properties and methods in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a protocol declaration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a protocol that specifies a required property, `calories`, and
    a method, `description()`. Type the following into your playground above the class,
    structure, and enumeration declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This protocol is named `CalorieCount`. It specifies that any object that adopts
    it must have a property, `calories`, that holds the calorie count, and a method,
    `description()`, that returns a string. `{ get }` means that you only need to
    be able to read the value stored in `calories`, and you don't have to write to
    it. Note that the definition of the `description()` method is not specified as
    that will be done in the class, structure, or enumeration. All you need to do
    to adopt a protocol is type a colon after the class name followed by the protocol
    name, and implement the required properties and methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `Burger` class conform to this protocol, modify your code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `calories` property and the `description()` method have
    been added to the `Burger` class. Even though the protocol specifies a variable,
    you can use a constant here because the protocol only requires that you can get
    the value for `calories`, and not set it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the `Fries` structure adopt this protocol as well. Modify your
    code for the `Fries` structure as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The same process that was used for the `Burger` class is used for the `Fries`
    structure, and it now conforms to the `CalorieCount` protocol as well.
  prefs: []
  type: TYPE_NORMAL
- en: You could modify the `Sauce` enumeration in the same way, but let's do it using
    extensions instead. Extensions extend an existing class's capabilities. You'll
    add the `CalorieCount` protocol to the `Sauce` enumeration using an extension
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Extensions allow you to provide extra capabilities to an object without modifying
    the original object definition. You can use them on Apple-provided objects (where
    you don''t have access to the object definition) or when you wish to segregate
    your code for readability and ease of maintenance. Here''s what an extension looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, an extension is used to provide an additional property and method to an
    existing class.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: For more information on extensions, visit [https://docs.swift.org/swift-book/LanguageGuide/Extensions.html](https://docs.swift.org/swift-book/LanguageGuide/Extensions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to use extensions. You'll start by making the `Sauce` enumeration
    conform to the `CalorieCount` protocol using an extension in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a protocol via an extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the `Sauce` enumeration does not conform to the `CalorieCount`
    protocol. You''ll use an extension to add the properties and methods required
    to make it conform. Type in the following code after the declaration for the `Sauce`
    enumeration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, no changes were made to the original definition for the `Sauce`
    enumeration. This is also really useful if you want to extend the capabilities
    of existing Swift standard types, such as `String` and `Int`.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerations can't have stored properties, so a `switch` statement is used to
    return the number of calories based on the enumeration's value, using the `self`
    keyword. The `description()` method is the same as the one in the `Burger` class
    and the `Fries` structure.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, all three objects have a `calories` property and a `description()`
    method. Great!
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how you can put them in an array and perform an operation to get the
    total calorie count for a meal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an array of different types of objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ordinarily, an array''s elements must be of the same type. However, since the
    `Burger` class, the `Fries` structure, and the `Sauce` enumeration all conform
    to the `CalorieCount` protocol, you can make an array that contains elements conforming
    to this protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add instances of the `Burger` class, the `Fries` structure and the `Sauce`
    enumeration to an array, type in the following code after all the protocol and
    object declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get the total calorie count, add the following code after the line where
    you created the `foodArray` constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `for` loop iterates through each element in the `foodArray` array. For each
    iteration, the value in the `calories` property for each food item will be added
    to `totalCalories`, and the total amount, `1315`, will be displayed in the Debug
    area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have learned how to create a protocol and make a class, structure or enumeration
    conform to it, either within the class definition or via extensions. Let's look
    at error handling next, which looks at how to respond to or recover from errors
    in your program.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you write apps, bear in mind that error conditions may happen, and error
    handling is how your app would respond to and recover from such conditions.
  prefs: []
  type: TYPE_NORMAL
- en: First, you create a type that conforms to Swift's `Error` protocol, which lets
    this type be used for error handling. Enumerations are normally used, as you can
    specify associated values for different kinds of errors. When something unexpected
    happens, you can stop program execution by throwing an error. You use the `throw`
    statement for this, and provide an instance of the type conforming to the `Error`
    protocol with the appropriate value. This allows you to see what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, it would be better if you can respond to an error without stopping
    your program. For this, you can use a `do-catch` block, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, you attempt to execute code in the `do` block using the `try` keyword.
    If an error is thrown, the statements in the `catch` block are executed. You can
    have multiple `catch` blocks to handle different error types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important Information:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on error handling, visit [https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html](https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html).
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let's say you have an app that needs to access a web page. However,
    if the server where that web page is located is down, it is up to you to write
    the code to handle the error, such as trying an alternative web server or informing
    the user that the server is down.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an enumeration that conforms to the `Error` protocol, use a `throw`
    statement to stop program execution when an error occurs, and use a `do-catch`
    block to handle an error. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following code into your playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This declares an enumeration, `WebsiteError`, that adopts the `Error` protocol.
    It covers three possible error conditions; there is no internet connection, the
    website is down, or the URL could not be resolved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following code to declare a function that checks if a website is
    up after the `WebpageError` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `siteUp` is `true`, `"Site is up"` is returned. If `siteUp` is `false`, the
    program will stop executing and throw an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following code after the function declaration to call your function,
    and run your program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since `siteStatus` is `true`, `Site is up` will appear in the Results area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the value of `siteStatus` to `false` and run your program. Your program
    crashes and the following error message is displayed in the Debug area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Of course, it is always better if you can handle errors without making your
    program crash. You can do this by using a `do-catch` block. Modify your code as
    shown and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have learned how to handle errors in your app without making it crash. Give
    yourself a pat on the back; you have completed the first part of this book!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to write protocols and how to make classes,
    structures, and enumerations conform to them. You also learned how to extend the
    capabilities of a class by using an extension. Finally, you learned how to handle
    errors using the `do-catch` block.
  prefs: []
  type: TYPE_NORMAL
- en: It may seem rather abstract and hard to understand now, but as you will see
    in *Part 3* of this book, you will use protocols to implement common functionalities
    in different parts of your program instead of writing the same program over and
    over. You will see how useful extensions are in organizing your code, which makes
    it easy to maintain. Last but not least, you'll see how good error handling makes
    it easy to pinpoint the mistakes you made while coding your app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will start writing your first iOS application by creating
    the screens for it using storyboards, which allow you to rapidly prototype an
    application without having to type a lot of code.
  prefs: []
  type: TYPE_NORMAL
