["```swift\n// Abstract Class\n\nclass VODComponent {\n\n  func add(vodComponent: VODComponent) {\n    assert(false, \"This method is not supported\")\n  }\n\n  func remove(vodComponent: VODComponent) {\n    assert(false, \"This method is not supported\")\n  }\n\n  func getName() -> String {\n    assert(false, \"This method is not supported\")\n  }\n\n  func getDescription() -> String {\n    assert(false, \"This method is not supported\")\n  }\n\n  func getPrice() -> Double {\n    assert(false, \"This method is not supported\")\n  }\n\n  func getChild(i:Int) -> VODComponent {\n    assert(false, \"This method is not supported\")\n  }\n\n  func display() {\n    assert(false, \"This method is not supported\")\n  }\n}\n```", "```swift\nclass VODItem: VODComponent {\n  private var name: String!\n  Private var description: String!\n  private var price: Double!\n\n  init(name:String!, description:String!, price:Double!){\n    self.name = name\n    self.description = description\n    self.price = price\n  }\n\n  override func getName() -> String {\n    return name!\n  }\n\n  override func getDescription() -> String {\n    return description!\n  }\n\n  override func getPrice() -> Double {\n    return price!\n  }\n\n  override func display() {\n    print(\" \\(name!), \\(price!),  ----  \\(description!)\")\n  }\n}\n```", "```swift\nclass VODCategory: VODComponent{\n  var vodComponents = [VODComponent]()\n  private var name: String!\n  private var description: String!\n\n  init(name:String!, description:String!) {\n    self.name = name\n    self.description = description\n  }\n\n  override func add(vodComponent: VODComponent) {\n    vodComponents.append(vodComponent)\n  }\n\n  override func remove(vodComponent: VODComponent) {\n    vodComponents.remove(vodComponent)\n  }\n\n  override func getChild(i:Int) -> VODComponent {\n    return vodComponents[i]\n  }\n\n  override func getName() -> String {\n    return name!\n  }\n\n  override func getDescription() -> String {\n    return description!\n  }\n\n  override func display() {\n    print(\" \\(name!),  \\(description!) \\r\\n ----------------\")\n  }\n}\n```", "```swift\n  override func remove(vodComponent: VODComponent) {\n    vodComponents.remove(vodComponent)\n  }\n```", "```swift\nextension Array {\n  mutating func remove <T: Equatable> (object: T) {\n    for i in (self.count-1).stride(through: 0, by: -1) {\n      if let element = self[i] as? T {\n        if element == object {\n          self.removeAtIndex(i)\n        }\n      }\n    }\n  }\n}\n```", "```swift\n      if let element = self[i] as? T {\n        if element == object {\n          self.removeAtIndex(i)\n        }\n      }\n```", "```swift\n        if element == object {\n```", "```swift\nclass VODComponent : Equatable {\n\n  func add(vodComponent:VODComponent){\n    assert(false, \"This method is not supported\")\n  }\n```", "```swift\n// GLOBAL Func\nfunc ==(left: VODComponent, right: VODComponent) -> Bool {\n  return left === right\n}\n```", "```swift\n//VODCategory\nclass VODCategory:VODComponent{\n\nâ€¦\n  override func display() {\n    print(\" \\(name!),  \\(description!) \\r\\n ----------------\")\n for e in vodComponents{\n e.display()\n }\n  }\n}\n```", "```swift\nclass VODManager{\n  var catalog:VODComponent\n\n  init(vod: VODComponent) {\n      catalog = vod\n  }\n\n  func displayCatalog() {\n      catalog.display()\n  }\n}\n```", "```swift\n//USAGE\nlet horrorCategory = VODCategory(name: \"Horror\", description: \"Horror movies category\")\nlet tvSeriesCategory = VODCategory(name: \"TV Series\", description: \"TV Series category\")\nlet comedyCategory = VODCategory(name: \"Comedy\", description: \"Comedy category\")\nlet voSTTvSeries = VODCategory(name: \"VOSTSeries\", description: \"VOST TV Series sub category\")\n\nlet allVODComponents = VODCategory(name: \"All VOD\", description: \"All vod components\")\nlet vodManager = VODManager(vod: allVODComponents)\n\nallVODComponents.add(horrorCategory)\nallVODComponents.add(tvSeriesCategory)\nallVODComponents.add(comedyCategory)\n\ntvSeriesCategory.add(voSTTvSeries)\n\nhorrorCategory.add(VODItem(name: \"Scream\", description: \"Scream movie\", price: 9.99))\nhorrorCategory.add(VODItem(name: \"Paranormal Activity\", description: \"Paranormal Activity movie\", price: 9.99))\nhorrorCategory.add(VODItem(name: \"Blair Witch Project\", description: \"Blair Witch movie\", price: 9.99))\n\ntvSeriesCategory.add(VODItem(name: \"Game of thrones S1E1\", description: \"Game of thrones Saison 1 episode 1\", price: 1.99))\ntvSeriesCategory.add(VODItem(name: \"Deadwood\", description: \"Deadwood Saison 1 episode 1\", price: 1.99))\ntvSeriesCategory.add(VODItem(name: \"Breaking Bad\", description: \"Breaking Bad Saison 1 Episode 1 \" , price: 1.99))\n\nvoSTTvSeries.add(VODItem(name: \"Doc Martin\", description: \"Doc Martin French serie Saison 1 Episode 1\", price: 1.99))\nvoSTTvSeries.add(VODItem(name: \"Camping Paradis\", description: \"Camping Paradis French serie Saison 1 Episode 1\", price: 1.99))\n\ncomedyCategory.add(VODItem(name: \"Very Bad Trip\", description: \"Very Bad Trip Movie\", price: 9.99))\ncomedyCategory.add(VODItem(name: \"Hot Chick\", description: \"Hot Chick Movie\", price: 9.99))\ncomedyCategory.add(VODItem(name: \"Step Brothers\", description: \"Step Brothers Movie\", price: 9.99))\ncomedyCategory.add(VODItem(name: \"Bad teacher\", description: \"Bad Teacher Movie\", price: 9.99))\n\nvodManager.displayCatalog()\n```", "```swift\n override func display() -> String{\n    return \" \\(name!), \\(price!),  ----  \\(description!)\"\n  }\n```", "```swift\noverride func display() -> String{\n    var text = \" \\(name!),  \\(description!) \\r\\n ----------------\"\n    for e in vodComponents {\n        text += \"\\r\\n\\(e.display()) \\r\\n\"\n    }\n    return text\n  }\n```", "```swift\n  func displayCatalog() -> String{\n      return catalog.display()\n  }\n```", "```swift\nclass AbstractPerfTest {\n\n  let colors:[SKColor] = [\n    SKColor.yellowColor(),\n    SKColor.blackColor(),\n    SKColor.cyanColor(),\n    SKColor.whiteColor(),\n    SKColor.blueColor(),\n    SKColor.brownColor(),\n    SKColor.redColor(),\n    SKColor.greenColor(),\n    SKColor.grayColor(),\n    SKColor.purpleColor()\n  ]\n\n  let sks = SKScene()\n  let view = SKView(frame: NSRect(x: 0, y: 0, width: 1024, height: 768))\n\n  let maxRectWidth = 100\n  let maxRectHeight = 100\n\n  //must be overriden\n  func run(){\n    preconditionFailure(\"Must be overriden\")\n  }\n\n  // - MARK generate Rect Height and Width\n  func generateRectWidth() -> Int{\n    return Int(arc4random_uniform(UInt32(maxRectWidth)))\n  }\n\n  func generateRectHeight() -> Int{\n    return Int(arc4random_uniform(UInt32(maxRectHeight)))\n  }\n\n  // - MARK generate Position X and Y\n  func generateXPos() -> Int{\n    return Int(arc4random_uniform(UInt32(view.bounds.size.width)))\n  }\n\n  func generateYPos() -> Int{\n    return Int(arc4random_uniform(UInt32(view.bounds.size.height)))\n  }\n}\n```", "```swift\nimport Foundation\n// Inherits from our AbstractPerfTest class\n// which contains default methods and init\nclass NoPattern:AbstractPerfTest {\n  // Execute the test\n  override func run(){\n    var j:Int = 0\n    for _ in 1...NUMBER_TO_GENERATE {\n      let idx = Int(arc4random_uniform(UInt32(self.colors.count- 1)))\n\n      let rect = SimpleRect(color: self.colors[idx])\n      rect.display(generateXPos(), yPos: generateYPos(), width: generateRectWidth(), height: generateRectHeight())\n      j++\n    }\n    print(\"\\(j) rects generated\")\n  }\n}\n```", "```swift\nimport SpriteKit\nimport Foundation\n\nclass FlyweightRect {\n\n  var color: SKColor!\n  var xPos: Int?\n  var yPos: Int?\n  var width: Int?\n  var height: Int?\n  var image: NSImage?\n  var sprite: SKSpriteNode?\n\n  //the constructor contains our intrinsic state\n  init(color: SKColor) {\n    self.color = color\n    self.image = NSImage()\n    self.sprite = SKSpriteNode()\n  }\n\n  func display(xPos: Int, yPos: Int, width: Int, height: Int){\n    self.xPos = xPos\n    self.yPos = yPos\n    self.width = width\n    self.height = height\n  }\n\n  func description() -> String  {\n    return \"rect position: \\(self.xPos), \\(self.yPos) : dimension: \\(self.width), \\(self.height)  : color: \\(self.color)\"\n  }\n}\n```", "```swift\nimport SpriteKit\nimport Foundation\n\nclass FlyweightRectFactory{\n    internal static var rectsMap = Dictionary<SKColor, FlyweightRect>()\n\n  static func getFlyweightRect(color:SKColor) -> FlyweightRect{\n    if let result = rectsMap[color]{\n        return result\n    } else { // if nil add it to our dictionnary\n      let result = FlyweightRect(color: color)\n      rectsMap[color] = result\n      return result\n    }\n  }\n}\n```", "```swift\nimport SpriteKit\nimport Foundation\n\nclass FlyweightRectFactory {\n\n  internal static var rectsMap = Dictionary<SKColor, FlyweightRect>()\n  internal static var rectsMapNS = NSMutableDictionary()\n  internal static var rectsMapNSc = NSCache()\n\n  static func getFlyweightRect(color:SKColor) -> FlyweightRect{\n    if let result = rectsMap[color]{\n        return result\n    }else {       let result = FlyweightRect(color: color)\n      rectsMap[color] = result\n      return result\n    }\n  }\n\n  static func getFlyweightRectWithNS(color: SKColor) -> FlyweightRect{\n\n    let result = rectsMapNS[color.description]\n\n    if result == nil {\n      let flyweight= FlyweightRect(color: color)\n      rectsMapNS.setObject(flyweight, forKey: color.description)\n      return flyweightas FlyweightRect\n    }else {\n      return result as! FlyweightRect\n    }\n\n  }\n\n  static func getFlyweightRectWithNSc(color: SKColor) -> FlyweightRect{\n\n    let result = rectsMapNSc.objectForKey(color.description)\n\n    if result == nil {\n      let flyweight= FlyweightRect(color: color)\n      rectsMapNSc.setObject(flyweight, forKey:color.description)\n      return flyweight as FlyweightRect\n    }else {\n      return result as! FlyweightRect\n    }\n  }\n}\n```", "```swift\nclass WithPattern:AbstractPerfTest{\n  //Execute the test\n  override func run(){\n    var j:Int = 0\n    for _ in 1...NUMBER_TO_GENERATE{\n      let idx = Int(arc4random_uniform(UInt32(self.colors.count- 1)))\n      let rect = FlyweightRectFactory.getFlyweightRect(self.colors[idx])\n      rect.display(generateXPos(), yPos: generateYPos(), width: generateRectWidth(), height: generateRectHeight())\n      j++\n    }\n    print(\"\\(j) rects generated\")\n    //print(\"nb Map: \\(FlyweightRectFactory.rectsMap.count)\")\n  }\n```"]