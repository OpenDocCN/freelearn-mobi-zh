["```\n   // Nav Bar\n    @IBOutlet weak var btnHeart: UIBarButtonItem!\n\n    // Cell One\n    @IBOutlet weak var lblName: UILabel!\n    @IBOutlet weak var lblCuisine: UILabel!\n    @IBOutlet weak var lblHeaderAddress: UILabel!\n\n    // Cell Two\n    @IBOutlet weak var lblTableDetails: UILabel!\n\n    // Cell Three\n    @IBOutlet weak var lblOverallRating: UILabel!\n\n    // Cell Eight\n    @IBOutlet weak var lblAddress: UILabel!\n    @IBOutlet weak var imgMap: UIImageView! \n```", "```\nfunc setupLabels() {\n    guard let restaurant = selectedRestaurant else { return }\n    if let name = restaurant.name {\n        lblName.text = name\n        title = name\n    }\n\n    if let cuisine = restaurant.subtitle { lblCuisine.text = cuisine }\n    if let address = restaurant.address {\n        lblAddress.text = address\n        lblHeaderAddress.text = address\n    }\n\n    lblTableDetails.text = \"Table for 7, tonight at 10:00 PM\"\n}\n```", "```\nfunc createMap() {\n    guard let annotation = selectedRestaurant, let long = annotation.longitude, let lat = annotation.latitude else { return }\n    let location = CLLocationCoordinate2D(\n        latitude: lat,\n        longitude: long\n    )\n\n    takeSnapShot(with: location)\n}\n```", "```\nfunc takeSnapShot(with location: CLLocationCoordinate2D) {\n    let mapSnapshotOptions = MKMapSnapshotOptions()\n    var loc = location\n    let polyLine = MKPolyline(coordinates: &loc, count: 1)\n    let region = MKCoordinateRegionForMapRect(polyLine.boundingMapRect)\n\n    mapSnapshotOptions.region = region\n    mapSnapshotOptions.scale = UIScreen.main.scale\n    mapSnapshotOptions.size = CGSize(width: 340, height: 208)\n    mapSnapshotOptions.showsBuildings = true\n    mapSnapshotOptions.showsPointsOfInterest = true\n\n    let snapShotter = MKMapSnapshotter(options: mapSnapshotOptions)\n    snapShotter.start() { snapshot, error in\n        guard let snapshot = snapshot else {\n            return\n        }\n\n        UIGraphicsBeginImageContextWithOptions(mapSnapshotOptions.size, true, 0)\n        snapshot.image.draw(at: .zero)\n\n        let identifier = \"custompin\"\n        let annotation = MKPointAnnotation()\n        annotation.coordinate = location\n\n        let pinView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n        pinView.image = UIImage(named: \"custom-annotation\")!\n        let pinImage = pinView.image\n        var point = snapshot.point(for: location)\n\n        let rect = self.imgMap.bounds\n        if rect.contains(point) {\n            let pinCenterOffset = pinView.centerOffset\n            point.x -= pinView.bounds.size.width / 2\n            point.y -= pinView.bounds.size.height / 2\n            point.x += pinCenterOffset.x\n            point.y += pinCenterOffset.y\n            pinImage?.draw(at: point)\n        }\n\n        if let image = UIGraphicsGetImageFromCurrentImageContext() {\n            UIGraphicsEndImageContext()\n            DispatchQueue.main.async {\n                self.imgMap.image = image\n            }\n        }\n    }\n}\n```", "```\nfunc initialize() {\n   setupLabels()\n   createMap()\n}\n```", "```\ninitialize()\n```"]