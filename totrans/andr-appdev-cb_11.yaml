- en: Chapter 11. Multimedia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 多媒体
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Playing sound effects with SoundPool
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SoundPool播放声音效果
- en: Playing audio with MediaPlayer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MediaPlayer播放音频
- en: Responding to hardware media controls in your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用程序中响应用户媒体控制
- en: Taking a photo with the default camera app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用默认相机应用程序拍照
- en: Taking a photo using the (old) Camera API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用（旧）Camera API拍照
- en: Taking a photo using the Camera2 (the new) API
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Camera2（新）API拍照
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'Now that we''ve explored graphics and animations in the previous chapters,
    it''s time to look at the sound options available in Android. The two most popular
    options to play sound include:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在前几章中探讨了图形和动画，现在是时候看看Android中可用的声音选项了。播放声音最流行的两种选项包括：
- en: '**SoundPool**: This is for short sound clips'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SoundPool**：这是用于短声音剪辑的'
- en: '**MediaPlayer**: This is designed for larger sound files (like music) and video
    files'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MediaPlayer**：这是为较大的声音文件（如音乐）和视频文件设计的'
- en: The first two recipes will look at using these libraries. We'll also look at
    how to use hardware related to sound, such as the volume controls and media playback
    controls (play, pause, and so on often found on headphones).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个食谱将探讨如何使用这些库。我们还将探讨如何使用与声音相关的硬件，例如音量控制媒体播放控制（通常在耳机上找到的播放、暂停等）。
- en: The rest of the chapter will focus on using the camera, both indirectly through
    Intents (to pass the camera request to the default camera application) and directly
    using the camera APIs. We'll examine the new Camera2 APIs released with Android
    5.0 Lollipop (API 21), but we'll also look at the original Camera API since roughly
    75 percent of the market doesn't have Lollipop yet. (To help you take advantage
    of the new features offered in the Camera2 API, we'll show a newer method for
    using the old Camera APIs to make it easier to use both Camera APIs in your own
    application.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将专注于使用相机，无论是通过Intents间接（将相机请求传递到默认相机应用程序）还是直接使用相机API。我们将检查与Android 5.0
    Lollipop（API 21）一起发布的新的Camera2 API，但也会查看原始的Camera API，因为大约75%的市场还没有Lollipop。（为了帮助您利用Camera2
    API提供的新功能，我们将展示一种使用旧Camera API的新方法，以便更容易地在您的应用程序中使用这两个Camera API。）
- en: Playing sound effects with SoundPool
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SoundPool播放声音效果
- en: When you need sound effects in your application, SoundPool is usually a good
    starting point.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在应用程序中需要声音效果时，SoundPool通常是一个好的起点。
- en: SoundPool is interesting in that it allows us to create special effects with
    our sounds by changing the play rate and by allowing multiple sounds to play simultaneously.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SoundPool很有趣，因为它允许我们通过改变播放速率以及允许同时播放多个声音来创建特殊效果。
- en: 'Popular audio file types supported include:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的流行音频文件类型包括：
- en: 3GPP (`.3gp`)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: 3GPP (`.3gp`)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: FLAC (`.flac`)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FLAC (`.flac`)
- en: MP3 (`.mp3`)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3 (`.mp3`)
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIDI类型0和1（`.mid`，`.xmf`和`.mxmf`）
- en: Ogg (`.ogg`)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ogg (`.ogg`)
- en: WAVE (`.wav`)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAVE (`.wav`)
- en: See the *Supported Media Formats* link for a complete list, including network
    protocols.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅**支持的媒体格式**链接以获取完整列表，包括网络协议。
- en: As is common in Android, new releases to the OS bring changes to the APIs. The
    `SoundPool` is no exception and the original `SoundPool` constructor was deprecated
    in Lollipop (API 21). Rather than setting our minimum API to 21 or relying on
    deprecated code (that may stop working at some point), we'll implement both the
    old and the new approach and check the OS version at runtime to use the appropriate
    method.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android中很常见，新版本的操作系统会带来API的变化。`SoundPool`也不例外，原始的`SoundPool`构造函数在Lollipop（API
    21）中被弃用。我们不会将我们的最小API设置为21或依赖于弃用的代码（这可能在某个时刻停止工作），我们将实现旧的和新的方法，并在运行时检查操作系统版本以使用适当的方法。
- en: This recipe will demonstrate how to play sound effects using the Android `SoundPool`
    library. To demonstrate playing sounds simultaneously, we'll create two buttons,
    and each will play a sound when pressed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将演示如何使用Android `SoundPool`库播放声音效果。为了演示同时播放声音，我们将创建两个按钮，每个按钮在被按下时都会播放一个声音。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `SoundPool`. Use the default
    **Phone & Tablet** options, and select **Empty Activity** when prompted for **Activity
    Type**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为：`SoundPool`。使用默认的**手机和平板电脑**选项，并在提示**活动类型**时选择**空活动**。
- en: 'To demonstrate playing sounds simultaneously, we need at least two audio files
    in the project. We went to SoundBible.com([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html)
    ) and found two royalty-free public domain sounds to include in the download project
    files:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示同时播放声音，我们需要在项目中至少包含两个音频文件。我们去了 SoundBible.com([http://soundbible.com/royalty-free-sounds-5.html](http://soundbible.com/royalty-free-sounds-5.html)
    ) 并找到了两个免费公共领域声音，包括在下载项目文件中：
- en: 'The first sound is a longer playing sound:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个声音是较长时间播放的声音：
- en: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)'
- en: 'The second sound is shorter:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个声音较短：
- en: '[http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://soundbible.com/1615-Metal-Drop.html](http://soundbible.com/1615-Metal-Drop.html)'
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'As explained previously, we''ll need two audio files to include in the project.
    Once you have your sound files ready, follow these steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要在项目中包含两个音频文件。一旦你准备好了音效文件，请按照以下步骤操作：
- en: Create a new raw folder (**File** | **New** | **Android resource directory**)
    and chose `raw` in the **Resource type** dropdown.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的原始文件夹（**文件** | **新建** | **Android 资源目录**）并在 **资源类型** 下拉菜单中选择 `raw`。
- en: Copy your sound files to `res/raw` as `sound_1` and `sound_2`. (Keep their original
    extensions.)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的音效文件复制到 `res/raw` 目录下，命名为 `sound_1` 和 `sound_2`。 (保留它们的原始扩展名。)
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    Buttons:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `TextView` 替换为以下按钮：
- en: '[PRE0]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now open `ActivityMain.java` and add the following global variables:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `ActivityMain.java` 并添加以下全局变量：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Modify the existing `onCreate()` method, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改现有的 `onCreate()` 方法，如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the `createSoundPoolNew()` method:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `createSoundPoolNew()` 方法：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the `createSoundPooolOld()` method:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `createSoundPooolOld()` 方法：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the button `onClick()` methods:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加按钮的 `onClick()` 方法：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Override the `onStop()` callback as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写 `onStop()` 回调，如下所示：
- en: '[PRE6]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run the application on a device or emulator.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first detail to notice is how we construct the object itself. As we mentioned
    in the introduction, the SoundPool constructor was changed in Lollipop (API 21).
    The old constructor was deprecated in favor of using `SoundPool.Builder()`. With
    a constantly changing environment like Android, changes in the API are very common,
    so it''s a good idea to learn how to work with the changes. As you can see, it''s
    not difficult in this case. We just check the current OS version and call the
    appropriate method. It is worth noting the method annotations:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的细节是如何构建这个对象本身。正如我们在介绍中提到的，SoundPool 构造函数在 Lollipop (API 21) 中发生了变化。旧的构造函数已被弃用，转而使用
    `SoundPool.Builder()`。在像 Android 这样不断变化的环境中，API 的变化非常常见，因此学习如何应对这些变化是个好主意。正如你所见，在这种情况下并不困难。我们只需检查当前的操作系统版本并调用相应的方法。值得注意的是方法注释：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以及：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: After creating SoundPool, we set an `setOnLoadCompleteListener()` listener.
    Enabling the buttons is mostly for demonstration purposes to illustrate that SoundPool
    needs to load the sound resources before they are available.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 SoundPool 之后，我们设置了一个 `setOnLoadCompleteListener()` 监听器。启用按钮主要是为了演示目的，以说明
    SoundPool 在可用之前需要加载音效资源。
- en: The final point to make on using SoundPool is the call to `play()`. We need
    to pass in the `soundID`, which was returned when we loaded the sound using `load()`.
    The `Play()` gives us a few options, including sound volume (left and right),
    loop count, and playback rate. To demonstrate the flexibility, we play the first
    sound (which is longer) at a lower volume to create more of a background effect
    with the running water. The second sound plays at a higher volume and we play
    it twice.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 SoundPool 时，最后一点是调用 `play()`。我们需要传递 `soundID`，这是我们在使用 `load()` 加载声音时返回的。`Play()`
    给我们一些选项，包括声音音量（左右）、循环次数和播放速率。为了展示灵活性，我们将第一个声音（较长的声音）以较低的音量播放，以创造更多的背景效果。第二个声音以较高的音量播放，并且我们播放了两次。
- en: There's more...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you only need a basic sound effect, such as a click, you can use the AudioManager
    `playSoundEffect()` method. Here''s an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只需要一个基本的音效，例如点击声，你可以使用 AudioManager 的 `playSoundEffect()` 方法。以下是一个示例：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can only specify a sound from the `SoundEffectConstants`; you cannot use
    your own sound files.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能指定来自 `SoundEffectConstants` 的声音；你不能使用自己的音效文件。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**Developer** **Docs: SoundPool**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：SoundPool**'
- en: '[https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/media/SoundPool.html](https://developer.android.com/reference/android/media/SoundPool.html)'
- en: '**Developer** **Docs:**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：**'
- en: '[https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
- en: Playing audio with MediaPlayer
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MediaPlayer播放音频
- en: 'MediaPlayer is probably one of the most important classes for adding multimedia
    capability to your applications. It supports the following media sources:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: MediaPlayer可能是为你的应用程序添加多媒体功能最重要的类之一。它支持以下媒体源：
- en: Project resources
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目资源
- en: Local files
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地文件
- en: External resources (such as URLs, including streaming)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部资源（例如URL，包括流媒体）
- en: 'MediaPlayer supports the following popular audio files:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: MediaPlayer支持以下流行的音频文件：
- en: 3GPP (`.3gp`)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: 3GPP (`.3gp`)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: FLAC (`.flac`)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FLAC (`.flac`)
- en: MP3 (`.mp3`)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MP3 (`.mp3`)
- en: MIDI Type 0 and 1 (`.mid`, `.xmf`, and `.mxmf`)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIDI类型0和1 (`.mid`, `.xmf`, 和 `.mxmf`)
- en: Ogg (`.ogg`)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ogg (`.ogg`)
- en: WAVE (`.wav`)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAVE (`.wav`)
- en: 'And these popular file types:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以下流行的文件类型：
- en: 3GPP (`.3gp`)
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3GPP (`.3gp`)
- en: Matroska (`.mkv`)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matroska (`.mkv`)
- en: WebM (`.webm`)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebM (`.webm`)
- en: MPEG-4 (`.mp4`, `.m4a`)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MPEG-4 (`.mp4`, `.m4a`)
- en: See the *Supported Media Formats* link for a complete list, including network
    protocols.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅*支持的媒体格式*链接，获取完整列表，包括网络协议。
- en: This recipe will demonstrate how to set up MediaPlayer in your app to play a
    sound included with your project. (For a complete review of the full capability
    offered by MediaPlayer, see the Developer Docs link at the end of this recipe.)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将演示如何在你的应用程序中设置MediaPlayer以播放项目中的声音。（有关MediaPlayer提供的完整功能的详细说明，请参阅本教程末尾的开发者文档链接。）
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `MediaPlayer`. Use the
    default **Phone & Tablet** options and select **Empty Activity** when prompted
    for **Activity Type**.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为：`MediaPlayer`。使用默认的**手机和平板电脑**选项，并在提示**活动类型**时选择**空活动**。
- en: We will also need a sound for this recipe and will use the same longer playing
    "water" sound used in the previous recipe.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要为这个教程准备一个声音文件，并将使用之前教程中使用的相同较长的“水”声音。
- en: The first sound is a longer playing sound:[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个声音是一个较长的播放声音：[http://soundbible.com/2032-Water.html](http://soundbible.com/2032-Water.html)
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'As explained previously, we''ll need a sound file to include in the project.
    Once you have your sound file ready, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们需要一个声音文件包含在项目中。一旦你准备好了你的声音文件，请按照以下步骤操作：
- en: Create a new raw folder (**File** | **New** | **Android resource directory**)
    and chose `raw` in the **resource type** dropdown
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的raw文件夹（**文件** | **新建** | **Android资源目录**），并在**资源类型**下拉菜单中选择`raw`。
- en: Copy your sound file to `res/raw` as `sound_1`. (Keep the original extension.)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的声音文件复制到`res/raw`目录下，命名为`sound_1`。（保留原始扩展名。）
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    buttons:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`文件，并用以下按钮替换现有的`TextView`：
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now open `ActivityMain.java` and add the following global variable:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`ActivityMain.java`文件，并添加以下全局变量：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the `buttonPlay()` method:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`buttonPlay()`方法：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the `buttonPause()` method:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`buttonPause()`方法：
- en: '[PRE13]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the `buttonStop()` method:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`buttonStop()`方法：
- en: '[PRE14]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, override the `onStop()` callback with the following code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用以下代码覆盖`onStop()`回调：
- en: '[PRE15]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The code here is pretty straightforward. We create MediaPlayer with our sound
    and start playing the sound. The buttons will replay, pause, and stop accordingly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码相当简单。我们使用我们的声音创建MediaPlayer并开始播放声音。按钮将依次重播、暂停和停止。
- en: Even this basic example illustrates one very important concept regarding MediaPlayer,
    and that is the *state*. If you're making serious use of MediaPlayer, review the
    link provided below for detailed information.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这个基本示例也说明了关于MediaPlayer的一个非常重要的概念，那就是*状态*。如果你正在认真使用MediaPlayer，请查看以下提供的链接以获取详细信息。
- en: There's more...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'To make our demonstration easier to follow, we use the UI thread for all our
    operations. For this example, using a short audio file included with the project,
    we aren''t likely going to experience any UI delays. In general, it''s a good
    idea to use a background thread when preparing MediaPlayer. To make this common
    task easier, MediaPlayer already includes an asynchronous prepare method called
    `prepareAsync()`. The following code will create an `OnPreparedListener()` listener
    and use the `prepareAsync()` method:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的演示更容易理解，我们使用UI线程进行所有操作。对于这个例子，使用项目附带的一个短音频文件，我们不太可能遇到任何UI延迟。通常，在准备MediaPlayer时使用后台线程是一个好主意。为了使这个常见任务更容易，MediaPlayer已经包含了一个异步准备方法，称为`prepareAsync()`。以下代码将创建一个`OnPreparedListener()`监听器并使用`prepareAsync()`方法：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Playing music in the background
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在后台播放音乐
- en: Our example is meant to play audio when the application is in the foreground,
    and will release the MediaPlayer resources in the `onStop()` callback. What if
    you are creating a music player and want to play music in the background, even
    when the user is using another application? In that scenario, you'll want to use
    MediaPlayer in a service, instead of an Activity. You'll use the MediaPlayer library
    the same way; you'll just need to pass information (such as sound selection) from
    the UI to your service.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的例子旨在在应用处于前台时播放音频，并在`onStop()`回调中释放MediaPlayer资源。如果你正在创建音乐播放器，并想在用户使用其他应用时在后台播放音乐，那会怎样？在这种情况下，你将需要在服务中使用MediaPlayer而不是Activity。你将以相同的方式使用MediaPlayer库；你只需要从UI传递信息（如声音选择）到你的服务。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that since a service runs in the same UI thread as the activities, you
    still do not want to perform potentially blocking operations in a service. MediaPlayer
    does handle background threads to prevent blocking your UI Thread, otherwise,
    you would want to perform threading yourself. (See [Chapter 14](ch14.html "Chapter 14. Getting
    your app ready for the Play Store"), *Getting Your App Ready for the Play Store*
    for more information on threading and options.)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于服务在同一个UI线程中运行，因此你仍然不希望在服务中执行可能阻塞的操作。MediaPlayer可以处理后台线程以防止阻塞UI线程，否则，你可能需要自己进行线程处理。（有关线程和选项的更多信息，请参阅[第14章](ch14.html
    "第14章。为应用商店准备你的应用")，*为应用商店准备你的应用*。）
- en: Using hardware volume keys to control your app's audio volume
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用硬件音量键控制你应用的音频音量
- en: 'If you want the volume controls to control the volume in your app, use the
    `setVolumeControlStream()` method to specify your application''s audio stream,
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望音量控制控制你应用中的音量，请使用`setVolumeControlStream()`方法指定你应用的音频流，如下所示：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See the following `AudioManager` link for the other stream options.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 参见以下`AudioManager`链接以获取其他流选项。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Supported Media Format [https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的媒体格式[https://developer.android.com/guide/appendix/media-formats.html](https://developer.android.com/guide/appendix/media-formats.html)
- en: '**Developer** **Docs: MediaPlayer** [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：MediaPlayer** [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html)'
- en: '**Developer** **Docs: AudioManager**: [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：AudioManager** [https://developer.android.com/reference/android/media/AudioManager.html](https://developer.android.com/reference/android/media/AudioManager.html)'
- en: Responding to hardware media controls in your app
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的应用中响应用户媒体控制
- en: Having your app respond to media controls, such as Play, Pause, Skip, and so
    on, is a nice touch your users will appreciate.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用响应用户媒体控制，如播放、暂停、跳过等，是用户会欣赏的贴心功能。
- en: Android makes this possible through the media library. As with the *Playing
    sound effects with SoundPool* recipe earlier, the Lollipop release changed how
    this is done. Unlike the `SoundPool` example, this recipe is able to take advantage
    of another approach—the compatibility library.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Android通过媒体库实现了这一点。与之前提到的*使用SoundPool播放声音效果*配方一样，Lollipop版本改变了这样做的方式。与`SoundPool`示例不同，这个配方能够利用另一种方法——兼容性库。
- en: This recipe will show you how to set up `MediaSession` to respond to the hardware
    buttons, which will work on Lollipop and later, as well as previous `Lollilop`
    versions using the `MediaSessionCompat` library. (The Compatibility Library will
    take care of checking the OS version and using the correct API calls automatically.)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将向你展示如何设置`MediaSession`以响应硬件按钮，这将适用于Lollipop及以后的版本，以及使用`MediaSessionCompat`库的以前的`Lollilop`版本。（兼容性库将负责检查操作系统版本并自动使用正确的API调用。）
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `HardwareMediaControls`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for the **Activity Type**.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为：`HardwareMediaControls`。使用默认的**手机和平板电脑**选项，并在提示**活动类型**时选择**空活动**。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll just be using Toasts messages to respond to the hardware events and
    therefore will not need to make any changes to the activity layout. To get started,
    open `ActivityMain.java` and follow these steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用Toast消息来响应硬件事件，因此不需要对活动布局进行任何更改。要开始，请打开`ActivityMain.java`并按照以下步骤操作：
- en: 'Create the following `mMediaSessionCallback` to respond to the media buttons:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下`mMediaSessionCallback`以响应媒体按钮：
- en: '[PRE18]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`回调中：
- en: '[PRE19]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run the application on a device or emulator with media controls (such as headphones)
    to see the Toast messages.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有媒体控制功能（如耳机）的设备或模拟器上运行应用程序，以查看Toast消息。
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are four steps to setting this up:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此功能有四个步骤：
- en: Create a `MediaSession.Callback` and attach it to MediaSession
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`MediaSession.Callback`并将其附加到MediaSession
- en: Set the MediaSession flags to indicate we want the media buttons
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将媒体会话标志设置为指示我们想要媒体按钮
- en: Set `SessionState` to `active`
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SessionState`设置为`active`
- en: Set `PlayBackState` with the actions we're going to handle
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们将要处理的操作设置`PlayBackState`
- en: Steps 4 and 1 work together as the Callback will only get the events set in
    the `PlayBackState`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤4和1协同工作，因为回调将只获取在`PlayBackState`中设置的的事件。
- en: Since we're not actually controlling any playback in this recipe, we just demonstrate
    how to respond to the hardware events. You'll want to implement actual functionality
    in `PlayBackState` and include a call to `setState()` after the `setActions()`
    call.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这个菜谱中实际上并没有控制任何播放，所以我们只是演示如何响应硬件事件。你将需要在`PlayBackState`中实现实际的功能，并在调用`setActions()`之后调用`setState()`。
- en: This is a very nice example of how the changes to the API can make things easier.
    And since new `MediaSession` and `PlaybackState` were rolled in to the Compatibility
    Library, we can take advantage of these new APIs on older versions of the OS.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常棒的示例，说明了API的更改如何使事情变得更容易。由于新的`MediaSession`和`PlaybackState`被整合到兼容性库中，我们可以在旧版本的操作系统上利用这些新API。
- en: There's more...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Checking the hardware being used
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查正在使用的硬件
- en: 'If you want your app to respond differently based on the current output hardware,
    you can use `AudioManager` to check. Here''s an example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想你的应用程序根据当前输出硬件以不同的方式响应，你可以使用`AudioManager`来检查。以下是一个示例：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: See also
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**Developer** **Docs: MediaSession**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：MediaSession**'
- en: '[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/media/session/MediaSession.html](https://developer.android.com/reference/android/media/session/MediaSession.html)'
- en: '**Developer** **Docs: MediaSessionCompat**'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：MediaSessionCompat**'
- en: '[https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html](https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html)'
- en: '**Developer** **Docs: PlaybackState**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：PlaybackState**'
- en: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
- en: '**Developer** **Docs: PlaybackStateCompat**'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：PlaybackStateCompat**'
- en: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html](https://developer.android.com/reference/android/support/v4/media/session/PlaybackStateCompat.html)'
- en: Taking a photo with the default camera app
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用默认相机应用拍照
- en: If your application needs an image from the camera, but is not a camera replacement
    app, it may be better to allow the "default" camera app to take the picture. This
    also respects your user's choice of a preferred camera application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要从相机获取图像，但不是相机替换应用，可能最好允许“默认”相机应用拍照。这也尊重了用户对首选相机应用的偏好。
- en: When you take a photo, unless it is specific to just your application, it's
    considered good practice to make the photo publicly available. (This allows it
    to be included in the user's photo gallery.) This recipe will demonstrate using
    the default photo application to click a picture, save it to the public folder,
    and display the image.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拍照时，除非它仅针对你的应用程序，否则将其公开是良好的实践。（这允许它被包含在用户的照片库中。）这个菜谱将演示使用默认的拍照应用拍照，将其保存到公共文件夹，并显示图像。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it: `UsingTheDefaultCameraApp`.
    Use the default **Phone & Tablet** options and select **Empty Activity** when
    prompted for **Activity Type**.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为：`UsingTheDefaultCameraApp`。使用默认的 **Phone &
    Tablet** 选项，并在提示 **Activity Type** 时选择 **Empty Activity**。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''re going to create a layout with an ImageView and button. The button will
    create an Intent to launch the default Camera app. When the camera app is done,
    our app will get a callback. Start by opening the Android Manifest and follow
    these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含 ImageView 和按钮的布局。按钮将创建一个 Intent 来启动默认的相机应用。当相机应用完成后，我们的应用将收到回调。首先打开
    Android Manifest 并按照以下步骤操作：
- en: 'Add the following permission:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下权限：
- en: '[PRE21]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open the `activity_main.xml` file and replace the existing `TextView` with
    the following views:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 文件，并用以下视图替换现有的 `TextView`：
- en: '[PRE22]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Open `MainActivity.java` and add the following global variables to the `MainActivity`
    class:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并将以下全局变量添加到 `MainActivity` 类中：
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following method to create the URI for the photo:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来创建照片的 URI：
- en: '[PRE24]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following method to handle the button click:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理按钮点击：
- en: '[PRE25]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a new method to override `onActivityResult()`, as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的方法来覆盖 `onActivityResult()`，如下所示：
- en: '[PRE26]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以开始在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There are two parts to working with the default camera app. The first is to
    set up the intent to launch the app. We create the Intent using `MediaStore.ACTION_IMAGE_CAPTURE`
    to indicate we want a photo app. We verify a default app exists by checking the
    results from `resolveActivity()`. As long as it''s not null, we know an application
    is available to handle the intent. (Otherwise, our app will crash.) We create
    a filename and add it to the intent with: `putExtra(MediaStore.EXTRA_OUTPUT, mLastPhotoURI)`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 与默认相机应用一起工作的有两部分。第一部分是设置启动应用的意图。我们使用 `MediaStore.ACTION_IMAGE_CAPTURE` 创建 Intent，表示我们想要一个拍照应用。通过检查
    `resolveActivity()` 的结果来验证是否存在默认应用。只要它不为 null，我们就知道有一个应用程序可以处理这个意图。（否则，我们的应用将会崩溃。）我们创建一个文件名并将其添加到意图中：`putExtra(MediaStore.EXTRA_OUTPUT,
    mLastPhotoURI)`。
- en: When we get the callback in `onActivityResult()`, we first make sure it's the
    `PHOTO_RESULT` and `RESULT_OK` (the user could have cancelled), then we load the
    photo in `ImageView`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 `onActivityResult()` 中收到回调时，我们首先确保它是 `PHOTO_RESULT` 和 `RESULT_OK`（用户可能已取消），然后我们在
    `ImageView` 中加载照片。
- en: There's more...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you don''t care where the picture is stored, you can call the intent without
    using the `MediaStore.EXTRA_OUTPUT` extra. If you don''t specify the output file,
    the `onActivityResult()` will include a thumbnail of the image in data Intent.
    Here is how you can display the thumbnail:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不在乎图片存储在哪里，你可以不使用 `MediaStore.EXTRA_OUTPUT` 额外信息来调用 intent。如果你没有指定输出文件，`onActivityResult()`
    将在数据 Intent 中包含图像的缩略图。以下是显示缩略图的方法：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here''s the code to load the full resolution image, using the URI returned
    in `data Intent`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是加载全分辨率图像的代码，使用 `data Intent` 返回的 URI：
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Calling the default video app
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用默认视频应用
- en: 'It''s the same process if you want to call the default video capture application.
    Just change the intent in Step 5, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想调用默认的视频捕获应用，过程是相同的。只需在步骤 5 中更改 intent，如下所示：
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can get the URI to the video in the `onActivityResult()`, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `onActivityResult()` 中获取视频的 URI，如下所示：
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考内容
- en: The *Scaling down large images to avoid Out of Memory exceptions* recipe in
    [Chapter 9](ch09.html "Chapter 9. Graphics and Animation"), *Graphics and Animation*.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 9 章](ch09.html "第 9 章。图形和动画") 的 *将大图像缩小以避免内存不足异常* 菜谱中，*图形和动画*。
- en: Taking a picture using the (old) Camera API
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用（旧版）Camera API 拍照
- en: The previous recipe demonstrated how to use an intent to call the default photo
    application. If you only need a quick photo, the intent is probably the ideal
    solution. If not, and you need more control of the camera, this recipe will show
    you how to use the camera directly with the Camera API.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的菜谱演示了如何使用 intent 调用默认的图片应用程序。如果您只需要快速拍照，intent 可能是理想的解决方案。如果不是，并且您需要更多对摄像头的控制，这个菜谱将向您展示如何直接使用
    Camera API 使用摄像头。
- en: There are actually two recipes for using the Camera API—one for the original
    Camera API released in Android 1.0 (API 1) and Camera2 API, released in Android
    5.0 (API 21). We'll cover both the new and the old APIs. Ideally, you will want
    to write your application to the latest and greatest APIs available, but at the
    time of this writing, Android 5.0 (API 21) only has about a 23 percent market
    share. If you only use the Camera2 API, you exclude over 75 percent of the market.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有两种使用 Camera API 的方法——一种是 Android 1.0（API 1）中发布的原始 Camera API 和 Android 5.0（API
    21）中发布的 Camera2 API。我们将涵盖新旧两种 API。理想情况下，您可能希望编写适用于最新和最佳 API 的应用程序，但在撰写本文时，Android
    5.0（API 21）的市场份额只有大约 23%。如果您只使用 Camera2 API，您将排除超过 75% 的市场。
- en: Write your app to use Camera2 API to take advantage of the new features available,
    but still have a functional application using the original Camera API for the
    rest of your users. To help facilitate using both, this recipe is going to take
    advantage of newer features in Android, specifically the `TextureView`, introduced
    in Android 4.0 (API 14). We'll use the `TextureView`, in place of the more traditional
    `SurfaceView`, for displaying the camera preview. This will allow you to use the
    same layout with the newer Camera2 API as it uses the `TextureView` as well. (Setting
    the minimum API to Android 4.0 (API 14) and above, which has over 96 percent market
    share, isn't limiting your user base much.)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 编写您的应用程序以使用 Camera2 API 来利用新功能，同时仍然使用原始 Camera API 为您的其他用户提供一个功能性的应用程序。为了帮助使用两者，这个菜谱将利用
    Android 的新功能，特别是 Android 4.0（API 14）中引入的 `TextureView`。我们将使用 `TextureView` 来代替更传统的
    `SurfaceView`，用于显示摄像头预览。这将允许您使用与较新的 Camera2 API 相同的布局，因为它也使用 `TextureView`。（将最小
    API 设置为 Android 4.0（API 14）及以上，这占市场份额超过 96%，并不会太多地限制您的用户基础。）
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `CameraAPI`. \On the **Target
    Android Devices** dialog, select the **Phone & Tablet** option and chose API 14
    (or above) for the **Minimum SDK.** Select **Empty Activity** when prompted for
    **Activity Type**.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `CameraAPI`。在 **目标 Android 设备** 对话框中，选择 **手机和平板**
    选项，并为 **最小 SDK** 选择 API 14（或更高）。当提示 **活动类型** 时，选择 **空活动**。
- en: How to do it...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Start by opening the Android Manifest and following these steps:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开 AndroidManifest.xml 并按照以下步骤操作：
- en: 'Add the following two permissions:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个权限：
- en: '[PRE31]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now open `activity_main.xml` and replace the existing TextView with the following
    views:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 `activity_main.xml` 并将现有的 TextView 替换为以下视图：
- en: '[PRE32]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open `MainActivity.java` and modify the `MainActivity` class declaration to
    implement the `SurfaceTextureListener`, as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 并修改 `MainActivity` 类声明以实现 `SurfaceTextureListener`，如下所示：
- en: '[PRE33]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following global declarations to `MainActivity`:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下全局声明添加到 `MainActivity` 中：
- en: '[PRE34]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the following `PictureCallback` to handle saving the photo:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下 `PictureCallback` 以处理保存照片：
- en: '[PRE35]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 回调中：
- en: '[PRE36]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following methods to implement the `SurfaceTextureListener` interface:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以实现 `SurfaceTextureListener` 接口：
- en: '[PRE37]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following method to handle the button click:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法来处理按钮点击：
- en: '[PRE38]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Run the application on a device or emulator with a camera.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在带有摄像头的设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first thing to note is, when you''re looking at this code in Android Studio,
    you''re going to see a lot of strikethrough code with the following warning:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意，当您在 Android Studio 中查看此代码时，您将看到很多带有以下警告的删除线代码：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: As mentioned in the introduction, the `android.hardware.camera2` API was introduced
    in Android 5.0 (API 19) and replaces the `android.hardware.camera` APIs.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述，`android.hardware.camera2` API 在 Android 5.0 (API 19) 中引入，并取代了 `android.hardware.camera`
    API。
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can add the following annotation to suppress the Deprecation warning:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加以下注释来抑制弃用警告：
- en: '[PRE40]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'There are two main steps when using the Camera API:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Camera API时有两个主要步骤：
- en: Set up the preview
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置预览
- en: Capture the image
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获图像
- en: 'We get the `TextureView` from our layout, then assign our activity (which implements
    `SurfaceTextureListener`) as the listener using this code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从布局中获取`TextureView`，然后使用以下代码将我们的活动（实现了`SurfaceTextureListener`）作为监听器分配：
- en: '[PRE41]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When the `TextureView` surface is ready, we get the `onSurfaceTextureAvailable`
    callback, where we set the preview surface with the following code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当`TextureView`表面准备好时，我们会在我们创建的`Camera.PictureCallback`类中收到`onSurfaceTextureAvailable`回调，其中我们使用以下代码设置预览表面：
- en: '[PRE42]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The next step is to take the picture when the button is pressed. We do that
    with this code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在按钮按下时拍照。我们使用以下代码来完成这个操作：
- en: '[PRE43]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When the picture is ready, we get the `onPictureTaken()` callback in the `Camera.PictureCallback`
    class we created.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当图片准备好时，我们会在我们创建的`Camera.PictureCallback`类中收到`onPictureTaken()`回调。
- en: There's more...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Keep in mind, this code is meant to show you how it works, not to create a full
    commercial application. As most developers know, the real challenge in coding
    is to handle all the problem cases. Some areas to improve include adding the ability
    to switch cameras, as the app currently uses the default camera. Also, take a
    look at the device orientation for both the preview and when saving a picture.
    A more sophisticated app would handle some of the work on a background thread
    to avoid delays on the UI thread. (Take a look at the next recipe to see how we
    do some of the camera processing on a background thread.)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '请记住，这段代码的目的是向您展示它是如何工作的，而不是创建一个完整的商业应用程序。正如大多数开发者所知，编码中的真正挑战是处理所有的问题情况。一些需要改进的领域包括添加切换相机的功能，因为当前应用程序使用的是默认相机。此外，请查看预览和保存图片时的设备方向。一个更复杂的应用程序会在后台线程上处理一些工作，以避免UI线程上的延迟。（请查看下一个菜谱，了解我们如何在后台线程上执行一些相机处理。） '
- en: Setting the camera parameters
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置相机参数
- en: 'The Camera API includes parameters, which allow us to adjust the camera settings.
    With this example, we can change the size of the preview:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Camera API包括参数，允许我们调整相机设置。在这个例子中，我们可以更改预览的大小：
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Keep in mind, the hardware must also support the setting we want. In this example,
    we'd want to query the hardware first to get all available preview modes, then
    set the one that matches our requirements. (See an example of this in the next
    recipe when we set the picture resolution.) See `getParameters()` in the Camera
    documentation link.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，硬件也必须支持我们想要的设置。在这个例子中，我们首先想要查询硬件以获取所有可用的预览模式，然后设置符合我们要求的那个。 （在下一个菜谱中设置图片分辨率时，请参见此示例。）请参阅Camera文档链接中的`getParameters()`。
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The next recipe: *Taking a picture using the Camera2 (the new) API*'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个菜谱：*使用Camera2（新）API拍照*
- en: The *Reading device orientation* recipe in [Chapter 8](ch08.html "Chapter 8. Using
    the Touchscreen and Sensors"), *Using the Touchscreen and Sensors* for examples
    on detecting the current device orientation
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第8章中，*读取设备方向*的菜谱，*使用触摸屏和传感器*提供了检测当前设备方向的示例
- en: '**Developer Docs: Building a Camera App** at: [https://developer.android.com/guide/topics/media/camera.html#custom-camera](https://developer.android.com/guide/topics/media/camera.html#custom-camera)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者文档：构建相机应用**，请访问：[https://developer.android.com/guide/topics/media/camera.html#custom-camera](https://developer.android.com/guide/topics/media/camera.html#custom-camera)'
- en: '[https://developer.android.com/reference/android/hardware/Camera.html](https://developer.android.com/reference/android/hardware/Camera.html)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/hardware/Camera.html](https://developer.android.com/reference/android/hardware/Camera.html)'
- en: Taking a picture using the Camera2 (the new) API
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Camera2（新）API拍照
- en: Now that we've looked at the old Camera API, it's time to learn about the new
    Camera2 API. Unfortunately, it's a bit more complicated due to the asynchronous
    nature of the APIs. Fortunately, the overall concept is the same as the previous
    Camera API.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了旧的Camera API，是时候学习新的Camera2 API了。不幸的是，由于API的异步特性，它稍微复杂一些。幸运的是，整体概念与之前的Camera
    API相同。
- en: Getting ready
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `Camera2API`. On the **Target
    Android Devices** dialog, select the **Phone & Tablet** option and chose API 21
    (or higher) for the **Minimum SDK**. Select **Empty Activity** when prompted for
    **Activity Type**.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，命名为`Camera2API`。在**目标Android设备**对话框中，选择**手机和平板电脑**选项，并将**最小SDK**设置为API
    21（或更高）。当提示**活动类型**时，选择**空活动**。
- en: How to do it...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As you''ll see, there''s a lot of code for this recipe. Start by opening the
    Android Manifest and following these steps:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您将看到的，这个菜谱有很多代码。首先，打开AndroidManifest文件，按照以下步骤操作：
- en: 'Add the following two permissions:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个权限：
- en: '[PRE45]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now open `activity_main.xml` and replace the existing TextView with the following
    views:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`activity_main.xml`，并用以下视图替换现有的TextView：
- en: '[PRE46]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now open the `MainActivity.java` file and add the following global variables
    to the `MainActivity` class:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`MainActivity.java`文件，并将以下全局变量添加到`MainActivity`类中：
- en: '[PRE47]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following `Comparator` class:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`Comparator`类：
- en: '[PRE48]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following `CameraDevice.StateCallback`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`CameraDevice.StateCallback`：
- en: '[PRE49]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the following `SurfaceTextureListener`:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`SurfaceTextureListener`：
- en: '[PRE50]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the following `CameraCaptureSession.StateCallback`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`CameraCaptureSession.StateCallback`：
- en: '[PRE51]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the following code to the existing `onCreate()` callback:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`回调中：
- en: '[PRE52]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the following methods to override `onPause()` and `onResume()`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以重写`onPause()`和`onResume()`：
- en: '[PRE53]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the `openCamera()`method:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`openCamera()`方法：
- en: '[PRE54]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the `startPreview()` method:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`startPreview()`方法：
- en: '[PRE55]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add the `getPictureFile()` method:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`getPictureFile()`方法：
- en: '[PRE56]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the `takePicture()` method that saves the image file:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加保存图像文件的`takePicture()`方法：
- en: '[PRE57]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Run the application on a device or emulator with a camera.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在具有摄像头的设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since we learned about the TextureView in the previous recipe, we can jump to
    the new Camera2 API information.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在前面的菜谱中学习了TextureView，我们可以跳转到新的Camera2 API信息。
- en: 'Though there are more classes involved, just like the older Camera API, there
    are two basic steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管涉及更多的类，就像旧的Camera API一样，这里有两个基本步骤：
- en: Setting up the preview
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置预览
- en: Capturing the image
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获图像
- en: Setting up the preview
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置预览
- en: 'Here''s a rundown on how the code sets up the preview:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码如何设置预览的概述：
- en: First, we set up the `TextureView.SurfaceTextureListener` with the `setSurfaceTextureListener()`
    method in `onCreate()`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们在`onCreate()`中使用`setSurfaceTextureListener()`方法设置`TextureView.SurfaceTextureListener`。
- en: When we get the `onSurfaceTextureAvailable()` callback, we open the camera.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们收到`onSurfaceTextureAvailable()`回调时，我们打开相机。
- en: We pass our `CameraDevice.StateCallback` class to the `openCamera()` method,
    which eventually calls the `onOpened()` callback.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的`CameraDevice.StateCallback`类传递给`openCamera()`方法，它最终调用`onOpened()`回调。
- en: '`onOpened()` gets the surface for the preview by calling `getSurfaceTexture()`
    and passes it to the CameraDevice by calling `createCaptureSession()`.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`onOpened()`通过调用`getSurfaceTexture()`获取预览的表面，并通过调用`createCaptureSession()`将其传递给CameraDevice。'
- en: Finally, when `CameraCaptureSession.StateCallback onConfigured()` is called,
    we start the preview with the `setRepeatingRequest()` method.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当`CameraCaptureSession.StateCallback onConfigured()`被调用时，我们使用`setRepeatingRequest()`方法开始预览。
- en: Capturing the image
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获图像
- en: 'Even though the `takePicture()` method may appear to be procedural, capturing
    an image also involves several classes and relies on callbacks. Here''s a breakdown
    on how the code takes a picture:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`takePicture()`方法看起来像是过程性的，捕获图像也涉及到多个类并依赖于回调。以下是代码如何捕获图像的分解：
- en: The user clicks the **Take Picture** button.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击**拍照**按钮。
- en: Then queries the camera to find the largest available image size.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后查询相机以找到最大的可用图像大小。
- en: Then creates an `ImageReader`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个`ImageReader`。
- en: Next, he/she sets up `OnImageAvailableListener`, and saves the image in the
    `onImageAvailable()` callback.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，他/她设置了`OnImageAvailableListener`，并在`onImageAvailable()`回调中保存图像。
- en: Then, creates `CaptureRequest.Builder` and includes the `ImageReader` surface.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建`CaptureRequest.Builder`并包含`ImageReader`表面。
- en: Next, creates `CameraCaptureSession.CaptureCallback`, which defines the `onCaptureCompleted()`
    callback. When the capture is complete, it restarts the preview.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`CameraCaptureSession.CaptureCallback`，它定义了`onCaptureCompleted()`回调。捕获完成后，它重新开始预览。
- en: Then, calls the `createCaptureSession()` method, creating a `CameraCaptureSession.StateCallback`.
    This is where the `capture()` method is called, passing in the `CameraCaptureSession.CaptureCallback`
    created earlier.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，调用`createCaptureSession()`方法，创建一个`CameraCaptureSession.StateCallback`。这是调用`capture()`方法的地方，传入之前创建的`CameraCaptureSession.CaptureCallback`。
- en: There's more...
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As with the previous Camera example, we've just created the base code to demonstrate
    a working Camera application. Again, there are areas for improvement. First, you
    should handle the device orientation, for both the preview and when saving the
    images. (See the previous recipe for the link.) Also, with Android 6.0 (API 23)
    now available, it would be a good time to start using the new permission model.
    Instead of just checking for an exception as we do in the `openCamera()` method,
    it would be better to check for the required permission.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的Camera示例一样，我们只是创建了基础代码来演示一个可工作的Camera应用程序。同样，还有改进的空间。首先，你应该处理设备方向，无论是预览还是保存图像时。（参见之前的配方以获取链接。）此外，随着Android
    6.0（API 23）的现在可用，现在是开始使用新的权限模型的好时机。而不是像我们在`openCamera()`方法中所做的那样只是检查异常，最好是检查所需的权限。
- en: See also
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The previous recipe: *Taking a picture using the (old) Camera API*'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前的配方：*使用（旧）Camera API拍照*
- en: '*The new Android 6.0 Run-Time permission model* in [Chapter 14](ch14.html "Chapter 14. Getting
    your app ready for the Play Store")*, Getting Your App Ready for the Play Store*'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第14章中新的Android 6.0运行时权限模型* [第14章](ch14.html "第14章。为Play商店准备你的应用")*，为Play商店准备你的应用*'
- en: 'Developer Docs: Camera2 API'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：Camera2 API
- en: '[https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.android.com/reference/android/hardware/camera2/package-summary.html](https://developer.android.com/reference/android/hardware/camera2/package-summary.html)'
