["```swift\nlet numbers = [9, 29, 19, 79]\n\n// Imperative example\nvar tripledNumbers:[Int] = []\nfor number in numbers {\n    tripledNumbers.append(number * 3)\n}\nprint(tripledNumbers)\n\n// Declarative example\nlet tripledIntNumbers = numbers.map({ number in 3 * number })\nprint(tripledIntNumbers)\n\n```", "```swift\nlet oneToFour = [1, 2, 3, 4]\nlet firstNumber = oneToFour.lazy.map({ $0 * 3}).first!\nprint(firstNumber) // The result is going to be 3\n\n```", "```swift\n// VerboseClass.h\n@interface VerboseClass: NSObject\n@property (nonatomic, strong) NSArray *ourArray;\n- (void)aMethod:(NSArray *)anArray;\n@end\n\n// VerboseClass.m\n#import \"VerboseClass.h\"\n\n@implementation VerboseClass\n\n- (void)aMethod:(NSArray *)anArray {\n    self.ourArray = [[NSArray alloc] initWithArray:anArray];\n}\n\n@end\n\n// TestVerboseClass.m\n#import \"VerboseClass.h\"\n\n@interface TestVerboseClass : NSObject\n\n@end\n\n@implementation TestVerboseClass\n\n- (void)aMethod {\n    VerboseClass *ourOBJCClass = [[VerboseClass alloc] init];\n    [ourOBJCClass aMethod: @[@\"One\", @\"Two\", @\"Three\"]];\n    NSLog(@\"%@\", ourOBJCClass.ourArray);\n}\n\n@end\n\n```", "```swift\nclass ASwiftClass {\n    var ourArray: [String] = []\n\n    func aMethod(anArray: [String]) {\n        self.ourArray = anArray\n    }\n}\n\nlet aSwiftClassInstance = ASwiftClass()\naSwiftClassInstance.aMethod(anArray: [\"one\", \"Two\", \"Three\"])\nprint(aSwiftClassInstance.ourArray)\n\n```", "```swift\nlet constString = \"This is a string constant\" \n\n```", "```swift\nlet pi = 3.14159 \nvar primeNumber = 691 \nlet name = \"my name\" \n\n```", "```swift\nlet pi: Double = 3.14159 \nlet piAndPhi: (Double, Double) = (3.14159, 1.618) \nfunc ourFunction(a: Int) { /* ... */ } \n\n```", "```swift\ntypealias UnsignedInteger = UInt32 \n\n```", "```swift\nvar aMutableString = \"This is a variable String\" \nlet aConstString = \"This is a constant String\" \n\n```", "```swift\n// Tuples \nlet http400Error = (400, \"Bad Request\")\n// http400Error is of type (Int, String), and equals (400, \"Bad Request\")\n\n// Decompose a Tuple's content \nlet (requestStatusCode, requestStatusMessage) = http400Error \n\n```", "```swift\n// Optional value either contains a value or contains nil\nvar optionalString: String? = \"A String literal\"\noptionalString = nil\n\n```", "```swift\noptionalString = \"An optional String\"\nprint(optionalString!)\n\n```", "```swift\nlet nilName:String? = nil\nif let familyName = nilName {\n    let greetingfamilyName = \"Hello, Mr. \\(familyName)\"\n} else {\n    // Optional does not have a value\n}\n\n```", "```swift\nlet aVegetable = \"Arugula\" \n\n```", "```swift\nvar anEmptyString = \"\"\nvar anotherEmptyString = String()\n\n```", "```swift\nif anEmptyString.isEmpty {\n    print(\"String is empty\")\n}\n\n```", "```swift\nlet string1 = \"Hello\"\nlet string2 = \" Mr\"\nvar welcome = string1 + string2\n\nvar instruction = \"Follow us please\"\ninstruction += string2\n\nlet exclamationMark: Character = \"!\"\nwelcome.append(exclamationMark)\n\n```", "```swift\nlet multiplier = 3\nlet message = \"\\(multiplier) times 7.5 is \\(Double (multiplier) * 7.5)\"\n// message is \"3 times 7.5 is 22.5\"\n\n```", "```swift\n// Arrays and Dictionaries\nvar cheeses = [\"Brie\", \"Tete de Moine\", \"Cambozola\", \"Camembert\"]\ncheeses[2] = \"Roquefort\"\nvar cheeseWinePairs = [\n    \"Brie\":\"Chardonnay\",\n    \"Camembert\":\"Champagne\",\n    \"Gruyere\":\"Sauvignon Blanc\"\n]\n\ncheeseWinePairs [\"Cheddar\"] = \"Cabarnet Sauvignon\"\n// To create an empty array or dictionary\nlet emptyArray = [String]()\nlet emptyDictionary = Dictionary<String, Float>()\ncheeses = []\ncheeseWinePairs = [:]\n\n```", "```swift\nlet scores = [65, 75, 92, 87, 68]\nvar teamScore = 0\n\nfor score in scores {\n    if score > 70 {\n        teamScore = teamScore + 3\n    } else {\n        teamScore = teamScore + 1\n    }\n}\n\n```", "```swift\nfor (cheese, wine) in cheeseWinePairs {\n    print(\"\\(cheese): \\(wine)\")\n}\n\n```", "```swift\nvar count = 0\nfor var i = 0; i < 3; ++i {\n    count += i\n}\n\n```", "```swift\nvar count = 0\nfor i in 0...3 {\n    count += i\n}\n\n```", "```swift\nvar n = 2\nwhile n < 100 {\n    n = n * 2\n}\n\nvar m = 2\nrepeat {\n    m = m * 2\n} while m < 100\n\n```", "```swift\nlet fourToTwo = Array(stride(from: 4, to: 1, by: -1)) // [4, 3, 2]\nlet fourToOne = Array(stride(from:4, through: 1, by: -1)) // [4, 3, 2, 1]\n\n```", "```swift\nvar anEmptyString = \"\"\nif anEmptyString.isEmpty {\n    print(\"An empty String\")\n} else {\n    // String is not empty.\n}\n\n```", "```swift\nlet aNumber = \"Four or Five\"\nswitch aNumber {\n    case \"One\":\n        let one = \"One\"\n    case \"Two\", \"Three\":\n        let twoOrThree = \"Two or Three\"\n    case let x where x.hasSuffix(\"Five\"):\n        let fourOrFive = \"it is \\(x)\"\n    default:\n        let anyOtherNumber = \"Any other number\"\n}\n\n```", "```swift\nfunc greet(person: [String: String]) {\n    guard let name = person[\"name\"] else {\n        return\n    }\n    print(\"Hello Ms \\(name)!\")\n}\n\n```", "```swift\nfunc greet(name: String, day: String) -> String {\n    return \"Hello \\(name), today is \\(day)\"\n}\n\ngreet(name: \"Ted\", day:\"Saturday\")\n\n```", "```swift\n// Variable number of arguments in functions - Variadic Parameters\nfunc sumOf(numbers:Int...) -> (Int, Int) {\n    var sum = 0\n    var counter = 0\n    for number in numbers {\n        sum += number\n        counter += 1\n    }\n    return (sum, counter)\n}\n\nsumOf()\nsumOf(numbers: 7, 9, 45)\n\n```", "```swift\nfunc alignRight(var string: String, count: Int, pad: Character) -> String {\n    let amountToPad = count - string.characters.count\n    if amountToPad < 1 {\n        return string\n    }\n    let padString = String(pad)\n    for _ in 1...amountToPad {\n        string = padString + string\n    }\n    return string\n} \n\n```", "```swift\nfunc swapTwoInts( a: inout Int, b: inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n\n```", "```swift\nfunc returnTwenty() -> Int {\n    var y = 10\n    func add() {\n        y += 10\n    }\n    add()\n    return y\n}\n\nreturnTwenty()\n\n```", "```swift\n// Return another function as its value\nfunc makeIncrementer() -> (Int -> Int) {\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\n\nvar increment = makeIncrementer()\nincrement(7)\n\n```", "```swift\n// As a variable:\nvar closureName: (parameterTypes) -> (returnType)\n\n//As an optional variable:\nvar closureName: ((parameterTypes) -> (returnType))?\n\n//As a type alias:\ntypealias closureType = (parameterTypes) -> (returnType)\n\n```", "```swift\n// Return an `Array` containing the results of calling `transform(x)` on\n  each element `x` of `self`\n// func map<U>(transform: (T) -> U) -> [U]\nlet numbers = [10, 30, 91, 50, 100, 39, 74]\nvar formattedNumbers: [String] = []\n\nfor number in numbers {\n    let formattedNumber = \"\\(number)$\"\n    formattedNumbers.append(formattedNumber)\n}\n\nlet mappedNumbers = numbers.map { \"\\($0)$\" }\n\n```", "```swift\n// Return an Array containing the elements x of self for which\n  includeElement(x)` is `true`\n// func filter(includeElement: (T) -> Bool) -> [T]\nlet someEvenNumbers = numbers.filter { $0 % 2 == 0 }\n\n```", "```swift\n// Return the result of repeatedly calling `combine` with an accumulated\n  value initialized to `initial` and each element of `self`, in turn,\n  that is return `combine(combine(...combine(combine(initial, self[0]),\n  self[1]),...self[count-2]), self[count-1])`.\n// func reduce<U>(initial: U, combine: (U, T) -> U) -> U\nlet total = numbers.reduce(0) { $0 + $1 }\n\n```", "```swift\nenum MLSTeam {\n    case montreal\n    case toronto\n    case newYork\n    case columbus\n    case losAngeles\n    case seattle\n}\n\nlet theTeam = MLSTeam.montreal\n\n```", "```swift\nswitch theTeam {\n    case .montreal:\n        print(\"Montreal Impact\")\n    case .toronto:\n        print(\"Toronto FC\")\n    case .newYork:\n        print(\"Newyork Redbulls\")\n    case .columbus:\n        print(\"Columbus Crew\")\n    case .losAngeles:\n        print(\"LA Galaxy\")\n    case .seattle:\n        print(\"Seattle Sounders\")\n}\n\n```", "```swift\nenum NHLTeam { case canadiens, senators, rangers, penguins, blackHawks,\n  capitals}\n\nenum Team {\n    case hockey(NHLTeam)\n    case soccer(MLSTeam)\n}\n\nstruct HockeyAndSoccerTeams {\n    var hockey: NHLTeam\n    var soccer: MLSTeam\n}\n\n```", "```swift\nenum HockeyAndSoccerTeams {\n    case Value(hockey: NHLTeam, soccer: MLSTeam)\n}\n\n```", "```swift\nfunc swapTwoIntegers( a: inout Int, b: inout Int) {\n    let tempA = a\n    a = b\n    b = tempA\n}\n\n```", "```swift\nfunc swapTwoValues<T>( a: inout T, b: inout T) {\n    let tempA = a\n    a = b\n    b = tempA\n}\n\n```", "```swift\nclass AClass {\n    class func someTypeMethod() {\n        // type method body\n    }\n}\n```", "```swift\nAClass.someTypeMethod()\n\n```", "```swift\nstruct TimesTable {\n    let multiplier: Int\n    subscript(index: Int) -> Int {\n        return multiplier * index\n    }\n}\n\nlet fiveTimesTable = TimesTable(multiplier: 5)\nprint(\"six times five is \\(fiveTimesTable[6])\")\n// prints \"six times five is 30\"\n\n```", "```swift\nclass SomeSubClass: SomeSuperClass\n\n```", "```swift\nclass ShoppingItem {\n    var name: String?\n    var quantity = 1\n    var purchased = false\n}\n\nvar item = ShoppingItem()\n\n```", "```swift\nweak var aWeakProperty \n\n```", "```swift\nclass AClassWithLazyClosure {\n    lazy var aClosure: (Int, String) -> String = {\n        [unowned self] (index: Int, stringToProcess: String) -> String in\n        // closure body goes here\n        return \"\"\n    }\n}\n\n```", "```swift\n// Optional chaining\nclass Residence {\n    var numberOfRooms = 1\n}\n\nclass Person {\n    var residence: Residence?\n}\n\nlet jeanMarc = Person()\n// This can be used for calling methods and subscripts through optional\n  chaining too\nif let roomCount = jeanMarc.residence?.numberOfRooms {\n    // Use the roomCount\n}\n\n```", "```swift\nenum HttpError: ErrorType {\n    case badRequest\n    case unauthorized\n    case forbidden\n    case requestTimeOut\n    case unsupportedMediaType\n    case internalServerError\n    case notImplemented\n    case badGateway\n    case serviceUnavailable\n}\n\n```", "```swift\nprotocol HttpProtocol{\n    func didRecieveResults(results:NSDictionary)\n}\n\nstruct WebServiceManager {\n    var delegate:HttpProtocol?\n    let data: NSData\n    func test() {\n        do {\n            let jsonResult: NSDictionary = try\n              NSJSONSerialization.JSONObjectWithData(self.data,\n              options: NSJSONReadingOptions.MutableContainers) as!\n              NSDictionary\n            self.delegate?.didRecieveResults(jsonResult)\n        } catch let error as NSError {\n            print(\"json error\" + error.localizedDescription)\n        }\n    }\n}\n\n```", "```swift\nclass Movie {\n    var director: String\n    var name: String\n    init(name: String, director: String) {\n        self.director = director\n        self.name = name\n    }\n}\n\nlet objects: [AnyObject] = [\n    Movie(name: \"The Shawshank Redemption\", director: \"Frank Darabont\"),\n    Movie(name: \"The Godfather\", director: \"Francis Ford Coppola\")\n]\n\nfor object in objects {\n    let movie = object as! Movie\n    print(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n}\n\n// Shorter syntax\nfor movie in objects as! [Movie] {\n    print(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n}\n\n```", "```swift\nstruct BlackjackCard {\n    // nested Suit enumeration\n    enum Suit: Character {\n        case spades = \"♠\",\n        hearts = \"♡\",\n        diamonds = \"♢\",\n        clubs = \"♣\"\n    }\n\n    // nested Rank enumeration\n    enum Rank: Int {\n        case two = 2, three, four, five, six, seven, eight, nine, ten\n        case jack, queen, king, ace\n\n        // nested struct\n        struct Values {\n            let first: Int, second: Int?\n        }\n\n        var values: Values {\n            switch self {\n            case .ace:\n                return Values(first: 1, second: 11)\n            case .jack, .queen, .king:\n                return Values(first: 10, second: nil)\n            default:\n                return Values(first: self.rawValue, second: nil)\n            }\n        }\n    }\n\n    let rank: Rank, suit: Suit\n\n    var description: String {\n        var output = \"suit is \\(suit.rawValue),\"\n        output += \" value is \\(rank.values.first)\"\n        if let second = rank.values.second {\n            output += \" or \\(second)\"\n        }\n        return output\n    }\n}\n\n```", "```swift\nextension AType: AProtocol, BProtocol {\n}\n\n```", "```swift\n// Computed Properties\nextension Double {\n    var mm: Double { return self / 1_000.0 }\n    var ft: Double { return self / 3.2884 }\n}\n\nlet threeInch = 76.2.mm\nlet fiveFeet = 5.ft\n\n```", "```swift\nprotocol ExampleProtocol {\n    var simpleDescription: String { get }\n    mutating func adjust()\n}\n\n// Classes, enumerations and structs can all adopt protocols.\nclass SimpleClass: ExampleProtocol {\n    var simpleDescription: String = \"A very simple class example\"\n    var anotherProperty: Int = 79799\n\n    func adjust() {\n        simpleDescription += \" Now 100% adjusted...\"\n    }\n}\n\nvar aSimpleClass = SimpleClass()\naSimpleClass.adjust()\nlet aDescription = aSimpleClass.simpleDescription\n\nstruct SimpleStructure: ExampleProtocol {\n    var simpleDescription: String = \"A simple struct\"\n    // Mutating to mark a method that modifies the structure - For classes\n      we do not need to use mutating keyword\n    mutating func adjust() {\n        simpleDescription += \" (adjusted)\"\n    }\n}\n\nvar aSimpleStruct = SimpleStructure()\naSimpleStruct.adjust()\nlet aSimpleStructDescription = aSimpleStruct.simpleDescription\n\n```", "```swift\nextension ExampleProtocol {\n    var simpleDescription: String {\n        get {\n            return \"The description is: \\(self)\"\n        }\n        set {\n            self.simpleDescription = newValue\n        }\n    }\n\n    mutating func adjust() {\n        self.simpleDescription = \"adjusted simple description\"\n    }\n}\n\n```"]