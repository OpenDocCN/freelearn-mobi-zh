["```swift\n    var uiButton = new UIButton();\n    uiButton.TouchUpInside += delegate {…};\n    ```", "```swift\n    var uiButton = new UIButton();\n    uiButton.TouchUpInside +=(object sender, EventArgs e) => {…};\n    ```", "```swift\nprivate void setup()\n{\n    UIButton btn1 = new UIButton()\n    {\n        // set up the properties\n        Tag = 1,\n    };\n    UIButton btn2 = new UIButton()  \n    {\n        // set up the properties\n        Tag = 2,\n    };\n    UIButton btn3 = new UIButton()\n    {\n        // set up the properties\n        Tag = 3, \n    };\n    btn1.TouchUpInside += HandleButtonPressedEvent;\n    btn2.TouchUpInside += HandleButtonPressedEvent;\n    btn3.TouchUpInside += HandleButtonPressedEvent;\n}\nprivate void HandleButtonPressedEvent(object sender, EventArgs e)\n{\n    UIButton theButton = (UIButton)sender;\n    switch(theButton.Tag)\n    {\n        // do what is needed\n    }\n}\n```", "```swift\nbuttonCustomScan.TouchUpInside += async (sender, e) =>\n{\n    //Create an instance of our custom overlay\n    customOverlay = new CustomOverlayView();\n    //Wireup the buttons from our custom overlay\n    customOverlay.ButtonTorch.TouchUpInside += delegate {\n        scanner.ToggleTorch();\n    };\n    customOverlay.ButtonCancel.TouchUpInside += delegate\n    {\n        scanner.Cancel();\n    };\n\n    //Tell our scanner to use our custom overlay\n    scanner.UseCustomOverlay = true;\n    scanner.CustomOverlay = customOverlay;\n    var result = await scanner.Scan();\n    HandleScanResult(result);\n};\n```"]