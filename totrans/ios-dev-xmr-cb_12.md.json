["```swift\n    public override void OnActivated (UIApplication application)\n    {\n      Console.WriteLine(\"Activated, application state: {0}\", application.ApplicationState);\t\n    }\n    public override void OnResignActivation (UIApplication application)\n    {\n      Console.WriteLine(\"Resign activation, application state: {0}\", application.ApplicationState);\n    }\n    public override void DidEnterBackground (UIApplication application)\n    {\n      Console.WriteLine(\"Entered background, application state: {0}\", application.ApplicationState);\n    }\n    public override void WillEnterForeground (UIApplication application)\n    {\n      Console.WriteLine(\"Will enter foreground, application state: {0}\", application.ApplicationState);\n    }\n    ```", "```swift\n    private NSObject appDidEnterBackgroundObserver, appWillEnterForegroundObserver;\n    ```", "```swift\n    private void AddNotificationObservers()\n    {\n      this.appDidEnterBackgroundObserver = UIApplication.Notifications.ObserveDidEnterBackground((s, e) => Console.WriteLine(\"App did enter background! App state: {0}\", UIApplication.SharedApplication.ApplicationState));\n      this.appWillEnterForegroundObserver = UIApplication.Notifications.ObserveWillEnterForeground((s, e) => Console.WriteLine(\"App will enter foreground! App state: {0}\", UIApplication.SharedApplication.ApplicationState));\n    }\n    private void RemoveNotificationObservers()\n    {\n      NSNotificationCenter.DefaultCenter.RemoveObservers(new [] {\n        this.appDidEnterBackgroundObserver,\n        this.appWillEnterForegroundObserver\n      });\n    }\n    ```", "```swift\n    public override void ViewWillAppear(bool animated) {\n      base.ViewWillAppear(animated);\n      this.AddNotificationObservers();\n    }\n    ```", "```swift\n    public override void ViewWillDisappear(bool animated) {\n      base.ViewWillDisappear(animated);\n      this.RemoveNotificationObservers();\n    }\n    ```", "```swift\nthis.appDidEnterBackgroundObserver = UIApplication.Notifications.ObserveDidEnterBackground((s, e) => Console.WriteLine(\"App did enter background! App state: {0}\", UIApplication.SharedApplication.ApplicationState));\n```", "```swift\n    private int taskID;\n    public override void DidEnterBackground (UIApplication application)\n    {\n      if (this.taskID == 0)\n      {\n        this.taskID = application.BeginBackgroundTask(() => {\n          application.EndBackgroundTask(this.taskID);\n          this.taskID = 0;\n        });\n        ThreadPool.QueueUserWorkItem(delegate {\n          for (int i = 0; i < 60; i++)\n          {\n            Console.WriteLine(\"Task {0} - Current time {1}\", this.taskID, DateTime.Now);\n            Thread.Sleep(1000);\n          }\n          application.EndBackgroundTask(this.taskID);\n          this.taskID = 0;\n        });\n      }\n    }\n    public override void WillEnterForeground (UIApplication application)\n    {\n      if (this.taskID != 0)\n      {\n        Console.WriteLine(\"Background task is running!\");\n      } else\n      {\n        Console.WriteLine(\"Background task completed!\");\n      }\n    }\n    ```", "```swift\nthis.taskID = application.BeginBackgroundTask(() => {\n  application.EndBackgroundTask(taskID);\n  this.taskID = 0;\n} );\n```", "```swift\nConsole.WriteLine(\"Remaining time: {0}\", application.BackgroundTimeRemaining);\n```", "```swift\n    private AVAudioPlayer audioPlayer;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      NSError error = null;\n      AVAudioSession.SharedInstance().SetCategory(AVAudioSession.CategoryPlayback, out error);\n      if (error != null)\n      {\n        Console.WriteLine(\"Error setting audio session category: {0}\", error.LocalizedDescription);\n      }\n      this.audioPlayer = AVAudioPlayer.FromUrl(NSUrl.FromFilename(\"sound.m4a\"));\n      this.btnPlay.TouchUpInside += (sender, e) => this.audioPlayer.Play();\n    }\n    ```", "```swift\nNSError error = null;\nAVAudioSession.SharedInstance ().SetCategory (AVAudioSession.CategoryPlayback, out error);\n```", "```swift\n    public UILabel LabelStatus {\n      get { return this.lblStatus; }\n    }\n    ```", "```swift\n    UIApplication.SharedApplication.SetMinimumBackgroundFetchInterval(UIApplication.BackgroundFetchIntervalMinimum);\n    ```", "```swift\n    private int updateCount;\n    public override void PerformFetch (UIApplication application, Action<UIBackgroundFetchResult> completionHandler)\n    {\n      try {\n        HttpWebRequest request = WebRequest.Create(\"http://software.tavlikos.com\") as HttpWebRequest;\n        using (StreamReader sr = new StreamReader(request.GetResponse().GetResponseStream())) {\n          Console.WriteLine(\"Received response: {0}\", sr.ReadToEnd());\n        }\n        this.viewController.LabelStatus.Text = string.Format(\"Update count: {0}/n{1}\", ++updateCount, DateTime.Now);\n        completionHandler(UIBackgroundFetchResult.NewData);\n\n      } catch {\n        this.viewController.LabelStatus.Text = string.Format(\"Update {0} failed at {1}!\", ++updateCount, DateTime.Now);\n        completionHandler(UIBackgroundFetchResult.Failed);\n      }\n    }\n    ```", "```swift\npublic override void PerformFetch (UIApplication application, Action<UIBackgroundFetchResult> completionHandler)\n```", "```swift\ncompletionHandler(UIBackgroundFetchResult.NewData);\n```", "```swift\nUIApplication.SharedApplication.SetMinimumBackgroundFetchInterval(UIApplication.BackgroundFetchIntervalMinimum);\n```"]