["```java\napply plugin: 'war'\n```", "```java\napply plugin: 'war'\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  providedCompile \"javax.servlet:servlet-api:2.5\"\n  compile(\"commons-io:commons-io:2.4\")\n  compile 'javax.inject:javax.inject:1'\n}\n```", "```java\nSimpleWebApp$ jar -tvf build/libs/SimpleWebApp.war\n 0 Mon Mar 16 17:56:04 IST 2015 META-INF/\n 25 Mon Mar 16 17:56:04 IST 2015 META-INF/MANIFEST.MF\n 0 Mon Mar 16 17:56:04 IST 2015 WEB-INF/\n 0 Mon Mar 16 17:56:04 IST 2015 WEB-INF/classes/\n 0 Mon Mar 16 17:56:04 IST 2015 WEB-INF/classes/ch6/\n1148 Mon Mar 16 17:56:04 IST 2015 WEB-INF/classes/ch6/DateTimeServlet.class\n 0 Mon Mar 16 17:56:04 IST 2015 WEB-INF/lib/\n185140 Mon Mar 16 12:32:50 IST 2015 WEB-INF/lib/commons-io-2.4.jar\n 2497 Mon Mar 16 13:49:32 IST 2015 WEB-INF/lib/javax.inject-1.jar\n 578 Mon Mar 16 16:45:16 IST 2015 WEB-INF/web.xml\n\n```", "```java\napply plugin: 'war'\n\nrepositories {\n  mavenCentral()\n}\ndependencies {\n  providedCompile \"javax.servlet:servlet-api:2.5\"\n  compile(\"commons-io:commons-io:2.4\")\n  compile 'javax.inject:javax.inject:1'\n}\nwebAppDirName=\"WebContent\"\n\nwar{\n  baseName = \"simpleapp\"\n  version = \"1.0\"\n  extension = \"war\"\n  includeEmptyDirs = false\n}\n```", "```java\napply plugin: 'scala'\n```", "```java\npackage ch6\n\nobject HelloScala {\n    def main(args: Array[String]) {\n      println(\"Hello, Scala...\")\n    }\n}\n```", "```java\ndependencies {\n  compile('org.scala-lang:scala-library:2.11.6')\n}\n```", "```java\n$ gradle classes\n:compileJava\n:compileScala\n:processResources UP-TO-DATE\n:classes\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle testClasses\n:compileJava UP-TO-DATE\n:compileScala UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:compileTestJava UP-TO-DATE\n:compileTestScala UP-TO-DATE\n:processTestResources UP-TO-DATE\n:testClasses UP-TO-DATE\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ jar -tvf build/libs/ScalaApplication-1.0.jar\n0 Thu Mar 26 23:49:04 IST 2015 META-INF/\n94 Thu Mar 26 23:49:04 IST 2015 META-INF/MANIFEST.MF\n0 Thu Mar 26 23:49:04 IST 2015 ch6/\n1194 Thu Mar 26 23:48:58 IST 2015 ch6/Customer.class\n609 Thu Mar 26 23:49:04 IST 2015 ch6/HelloScala$.class\n594 Thu Mar 26 23:49:04 IST 2015 ch6/HelloScala.class\n1375 Thu Mar 26 23:48:58 IST 2015 ch6/Order.class\n\n```", "```java\napply plugin: 'java'\napply plugin: 'scala'\napply plugin: 'eclipse'\n\nversion = '1.0'\n\njar {\n  manifest {\n  attributes 'Implementation-Title': 'ScalaApplication', 'Implementation-Version': version\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile('org.scala-lang:scala-library:2.11.6')\n  runtime('org.scala-lang:scala-compiler:2.11.6')\n  compile('org.scala-lang:jline:2.9.0-1')\n}\n\ntask displayScalaPluginConvention << {\n  println \"Lib Directory: $libsDir\"\n  println \"Lib Directory Name: $libsDirName\"\n  println \"Reports Directory: $reportsDir\"\n  println \"Test Result Directory: $testResultsDir\"\n\n  println \"Source Code in two sourcesets: $sourceSets\"\n  println \"Production Code: ${sourceSets.main.java.srcDirs}, ${sourceSets.main.scala.srcDirs}\"\n  println \"Test Code: ${sourceSets.test.java.srcDirs}, ${sourceSets.test.scala.srcDirs}\"\n  println \"Production code output: ${sourceSets.main.output.classesDir} & ${sourceSets.main.output.resourcesDir}\"\n  println \"Test code output: ${sourceSets.test.output.classesDir} & ${sourceSets.test.output.resourcesDir}\"\n}\n```", "```java\n$ gradle displayScalaPluginConvention\n…\n:displayScalaPluginConvention\nLib Directory: <path>/ build/libs\nLib Directory Name: libs\nReports Directory: <path>/build/reports\nTest Result Directory: <path>/build/test-results\nSource Code in two sourcesets: [source set 'main', source set 'test']\nProduction Code: [<path>/src/main/java], [<path>/src/main/scala]\nTest Code: [<path>/src/test/java], [<path>/src/test/scala]\nProduction code output: <path>/build/classes/main & <path>/build/resources/main\nTest code output: <path>/build/classes/test & <path>/build/resources/test\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask runMain(type: JavaExec){\n  main = 'ch6.HelloScala'\n  classpath = configurations.runtime + sourceSets.main.output + sourceSets.test.output\n}\n```", "```java\n$ gradle runMain\n....\n:runMain\nHello, Scala...\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask showLogging << {\n  println \"This is println example\"\n  logger.error \"This is error message\"\n  logger.quiet \"This is quiet message\"\n  logger.warn \"This is WARNING message\"\n  logger.lifecycle \"This is LIFECYCLE message\"\n  logger.info \"This is INFO message\"\n  logger.debug \"This is DEBUG message\"\n}\n```", "```java\n$ gradle showLogging\n\n:showLogging\nThis is println example\nThis is error message\nThis is quiet message\nThis is WARNING message\nThis is LIFECYCLE message\n\nBUILD SUCCESSFUL\n\n```", "```java\nThis is println example\nThis is error message\nThis is quiet message\n\n```", "```java\ntask showLogging << {\nprintln \"This is println example\"\n..\nassert 1==2\n}\n```", "```java\n$ gradle showLogging -s\n……\n* Exception is:\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task ':showLogging'.\nat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)\n at\n….\norg.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)\n at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:305)\n...\n\n```", "```java\ntask showFile << {\n  File file1 = file(\"readme.txt\")\n  println file1    // will print name of the file\n  file1.eachLine {\n    println it  // will print contents line by line\n  }\n}\n```", "```java\ndef dir1 = new File(\"src\")\nprintln \"Checking directory \"+dir1.isFile() // will return false for directory\nprintln \"Checking directory \"+dir1.isDirectory() // will return true for directory\n```", "```java\ntask fileWrite << {\n  File file1 = file (\"readme.txt\")\n\n  // will append data at the end\n  file1.append(\"\\nAdding new line. \\n\")\n\n  // will overwrite contents\n  file1.setText(\"Overwriting existing contents\")\n\n  // will overwrite contents\n  file1.write(\"Using write method\")\n}\n```", "```java\ntask createFile << {\n  File file1 = new File(\"newFile.txt\")\n  file1.write(\"Using write method\")\n}\n```", "```java\nfile1 << \"New content\"\n```", "```java\ntask createNewFile << {\n  File file1 = new File(\"createNewFileMethod.txt\")\n  file1.createNewFile()\n}\n```", "```java\ntask createDir << {\n  def dir1 = new File(\"folder1\")\n  dir1.mkdir()\n\n  def dir2 = new File(\"folder2\")\n  dir2.createTempDir()\n\n  def dir3 = new File(\"folder3/subfolder31\")\n  dir3.mkdirs() // to create sub directories in one command\n}\n```", "```java\ntask fileOperations << {\n  File file1 = new File(\"readme.txt\")\n  println \"File size is \"+file1.size()\n  println \"Checking existence \"+file1.exists()\n  println \"Reading contents \"+file1.getText()\n  println \"Checking directory \"+file1.isDirectory()\n  println \"File length \"+file1.length()\n  println \"Hidden file \"+file1.isHidden()\n\n  // File paths\n  println \"File path is \"+file1.path\n  println \"File absolute path is \"+file1.absolutePath\n  println \"File canonical path is \"+file1.canonicalPath\n\n// Rename file\nfile1.renameTo(\"writeme.txt\")\n\n// File Permissions\nfile1.setReadOnly()\nprintln \"Checking read permission \"+ file1.canRead()+\" write permission \"+file1.canWrite()\nfile1.setWritable(true)\nprintln \"Checking read permission \"+ file1.canRead()+\" write permission \"+file1.canWrite()\n\n}\n```", "```java\ntask filterFiles << {\n  def dir1 = new File(\"dir1\")\n  dir1.eachFileMatch(~/.*.groovy/) {\n    println it\n  }\n  dir1.eachFileRecurse { dir ->\n    if(dir.isDirectory()) {\n      dir.eachFileMatch(~/.*.groovy/) {\n        println it\n      }\n    }\n  }\n}\n```", "```java\n$ gradle filterFiles\n\n:filterFiles\ndir1\\groovySample.groovy\ndir1\\subdir1\\groovySample1.groovy\ndir1\\subdir2\\groovySample2.groovy\ndir1\\subdir2\\subDir3\\groovySample3.groovy\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask deleteFile << {\n  def dir2 = new File(\"dir2\")\n  def file1 = new File(\"abc.txt\")\n  file1.createNewFile()\n  dir2.mkdir()\n  println \"File path is \"+file1.absolutePath\n  println \"Dir path is \"+dir2.absolutePath\n  file1.delete()\n  dir2.deleteDir()\n  println \"Checking file(abc.txt) existence: \"+file1.exists()+\" and Directory(dir2) existence: \"+dir2.exists()\n}\n```", "```java\n$ gradle deleteFile\n:deleteFile\nFile path is Chapter6/FileExample/abc.txt\nDir path is Chapter6/FileExample/dir2\nChecking file(abc.txt) existence:  false and Directory(dir2) existence:  false\n\nBUILD SUCCESSFUL\n\n```", "```java\ntask fileTreeSample << {\n  FileTree fTree = fileTree('dir1')\n  fTree.each {\n    println it.name\n  }\n  FileTree fTree1 = fileTree('dir1') {\n    include '**/*.groovy'\n  }\n  println \"\"\n  fTree1.each {\n    println it.name\n  }\n  println \"\"\nFileTree fTree2 = fileTree(dir:'dir1',excludes:['**/*.groovy'])\n  fTree2.each {\n    println it.absolutePath\n  }\n}\n```", "```java\nFileTree jarFile = zipTree('SampleProject-1.0.jar')\njarFile.each {\n  println it.name\n}\n```", "```java\ntask showCustomProp << {\n  Properties props = new Properties()\n  props.load(new FileInputStream(\"login.properties\"))\n  println props\n  println props.get('loginKey1')\n}\n```", "```java\nglobalProp1=globalVal1\nglobalProp2=globalVal2\n\n```", "```java\nProj1Prop1=Proj1Val1\nProj1Prop2=Proj1Val2\nsystemProp.sysProp1=sysVal1\n\n```", "```java\ntask showProps << {\n  println \"local property \"+Proj1Prop1\n  println \"local property \"+Proj1Prop2\n  println \"local property via command line: \"+projCommandProp1\n  println \"global property \"+globalProp1\n  println \"global property \"+globalProp2\n  println \"System property \"+System.properties['sysProp1']\n  println \"System property via command line: \"+System.properties['sysCommandProp1']\n}\n```", "```java\n$gradle -PprojCommandProp1=projCommandVal1-DsysCommandProp1=sysCommandVal1 showProps\n\n:showProps\nlocal property Proj1Val1\nlocal property Proj1Val2\nlocal property via command line: projCommandVal1\nglobal property globalVal1\nglobal property globalVal2\nSystem property sysVal1\nSystem property via command line: sysCommandVal1\n\nBUILD SUCCESSFUL\n\n```", "```java\nsettings.gradle:\ninclude 'login', 'profile', 'transactions'\n```", "```java\n$ gradle projects\n……\nRoot project 'UserManagement'\n+--- Project ':login'\n+--- Project ':profile'\n\\--- Project ':transactions'\n……\n\nBUILD SUCCESSFUL\n\n```", "```java\nprintln \"Project name is $name\"\n\nproject(':login') {\n  apply plugin: 'java'\n  println \"Project name is $name\"\n  task loginTask << {\n    println \"Task name is $name\"\n  }\n}\n\nproject(':profile') {\n  apply plugin: 'java'\n  println \"Project name is $name\"\n  task profileTask << {\n    println \"Task name is $name\"\n  }\n}\nproject(':transactions') {\n  apply plugin: 'java'\n  println \"Project name is $name\"\n  task transactionTask << {\n    println \"Task name is $name\"\n  }\n}\n```", "```java\n/UserManagement$ gradle\n\nProject name is UserManagement\nProject name is login\nProject name is profile\nProject name is transactions\n:help\n\n...\n\n```", "```java\n$ gradle loginTask\n\nProject name is UserManagement\nProject name is login\nProject name is profile\nProject name is transactions\n:login:loginTask\nTask name is loginTask\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle loginTask\n….\n:login:loginTask\nTask name is loginTask\n:transactions:loginTask\nTask name is loginTask\n\nBUILD SUCCESSFUL\n\n```", "```java\nprintln \"Project name is $name\"\nallprojects {\n  version = '2.0'\n}\nsubprojects { // for all subprojects\n  apply plugin: 'java'\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    compile 'log4j:log4j:1.2.16'\n  }\n}\n```", "```java\n$ gradle clean\nProject name is UserManagement\nProject name is login\nProject name is profile\nProject name is transactions\n:login:clean\n:profile:clean\n:transactions:clean\n\nBUILD SUCCESSFUL\n\n```", "```java\nincludeFlat 'department'\n// adding same level project as sub project\n```", "```java\n$ gradle clean\n\nProject name is UserManagement\nProject name is department\nProject name is login\nProject name is profile\nProject name is transactions\n:department:clean UP-TO-DATE\n:login:clean UP-TO-DATE\n:profile:clean UP-TO-DATE\n:transactions:clean UP-TO-DATE\n\nBUILD SUCCESSFUL\n\n```", "```java\n/<project name>/build.gradle\nprintln \"Project name is $name\"\ntask <projectName>Task << {\n  println \"Task name is $name \"\n}\n```", "```java\nprintln \"Project name is $name\"\nallprojects {\n  version = '2.0'\n}\nsubprojects { // for all sub projects\n  apply plugin: 'java'\n  repositories {\n    mavenCentral()\n  }\n}\n```", "```java\n/UserManagement_confDep$ gradle\n\nProject name is UserManagement_confDep\nProject name is login\nProject name is profile\nProject name is transactions\n...\nBUILD SUCCESSFUL\n\n```", "```java\nevaluationDependsOn(':profile')\n```", "```java\n/UserManagement_confDep$ gradle\n\nProject name is UserManagement_confDep\nProject name is profile    // Order is changed\nProject name is login\nProject name is transactions\n……\nBUILD SUCCESSFUL\n\n```", "```java\nproject(':login') {\n  println \"Project name is $name\"\n  task loginTask (dependsOn: \":profile:profileTask\")<< {\n    println \"Task name is $name\"\n  }\n}\n```", "```java\n/UserManagement_taskDep$ gradle loginTask\n….\n:profile:profileTask\nTask name is profileTask\n:login:loginTask\nTask name is loginTask\n\nBUILD SUCCESSFUL\n\n```", "```java\nproject(':login') {\n  dependencies {\n    compile project(':profile')\n  }\n  task loginTask (dependsOn: \":profile:profileTask\")<< {\n    println \"Task name is $name\"\n  }\n}\n```", "```java\n/UserManagement_libDep$ gradle clean compileJava\n...\n:login:clean\n:profile:clean\n:transactions:clean\n:department:compileJava UP-TO-DATE\n:profile:compileJava\n:profile:processResources UP-TO-DATE\n:profile:classes\n:profile:jar\n:login:compileJava\n:transactions:compileJava\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle :login:compileJava -a\n:login:compileJava\n\nBUILD SUCCESSFUL\n\n```", "```java\n/UserManagement_libDep$ gradle :profile:buildDependents\n. . .\n:profile:compileJava UP-TO-DATE\n:profile:processResources UP-TO-DATE\n:profile:classes UP-TO-DATE\n:profile:jar UP-TO-DATE\n:login:compileJava UP-TO-DATE\n:login:processResources UP-TO-DATE\n:login:classes UP-TO-DATE\n:login:jar\n:login:assemble\n:login:compileTestJava UP-TO-DATE\n:login:processTestResources UP-TO-DATE\n:login:testClasses UP-TO-DATE\n:login:test UP-TO-DATE\n:login:check UP-TO-DATE\n:login:build\n:login:buildDependents\n:profile:assemble UP-TO-DATE\n:profile:compileTestJava UP-TO-DATE\n:profile:processTestResources UP-TO-DATE\n:profile:testClasses UP-TO-DATE\n:profile:test UP-TO-DATE\n:profile:check UP-TO-DATE\n:profile:build UP-TO-DATE\n:profile:buildDependents\n\nBUILD SUCCESSFUL\n\n```", "```java\n/UserManagement_libDep$ gradle :login:buildNeeded\n. . .\n:login:processTestResources UP-TO-DATE\n:login:testClasses UP-TO-DATE\n:login:test UP-TO-DATE\n:login:check UP-TO-DATE\n:login:build UP-TO-DATE\n:profile:assemble UP-TO-DATE\n:profile:compileTestJava UP-TO-DATE\n:profile:processTestResources UP-TO-DATE\n:profile:testClasses UP-TO-DATE\n:profile:test UP-TO-DATE\n:profile:check UP-TO-DATE\n:profile:build UP-TO-DATE\n:profile:buildNeeded UP-TO-DATE\n:login:buildNeeded UP-TO-DATE\n\nBUILD SUCCESSFUL\n\n```", "```java\n$ gradle test\n:compileJava\n:processResources\n:classes\n:compileTestJava\n:processTestResources\n:testClasses\n:test\nBUILD SUCCESSFUL\n\n```", "```java\nrepositories {\n  mavenCentral()\n}\ndependencies {\n  testCompile 'junit:junit:4.12'\n}\n```", "```java\nsourceSets {\n  test {\n    java {\n      srcDir 'testSrc'\n    }\n  }\n}\n```", "```java\ntest {\nmaxParallelForks = 3\n}\n```", "```java\nTestUsingJunitParallel$ gradle clean --info test | grep 'Test Executor'\n. . . .\n. . . .\nSuccessfully started process 'Gradle Test Executor 2'\nSuccessfully started process 'Gradle Test Executor 1'\nSuccessfully started process 'Gradle Test Executor 3'\nGradle Test Executor 2 started executing tests.\nGradle Test Executor 3 started executing tests.\nGradle Test Executor 1 started executing tests.\nGradle Test Executor 3 finished executing tests.\nGradle Test Executor 2 finished executing tests.\nGradle Test Executor 1 finished executing tests.\n\n```", "```java\ntest {\n  ignoreFailures = true\n  maxParallelForks = 3\n  forkEvery = 1\n}\n```", "```java\nTestUsingJunitParallel$ gradle clean --info test | grep 'Test Executor'\n. . . .\nSuccessfully started process 'Gradle Test Executor 1'\nSuccessfully started process 'Gradle Test Executor 3'\nSuccessfully started process 'Gradle Test Executor 2'\nGradle Test Executor 1 started executing tests.\nGradle Test Executor 2 started executing tests.\nGradle Test Executor 3 started executing tests.\nGradle Test Executor 1 finished executing tests.\nStarting process 'Gradle Test Executor 4'. Working directory:\n. . . .\nSuccessfully started process 'Gradle Test Executor 4'\nGradle Test Executor 3 finished executing tests.\nGradle Test Executor 2 finished executing tests.\nStarting process 'Gradle Test Executor 5'. Working directory:\n. . . .\nSuccessfully started process 'Gradle Test Executor 5'\nGradle Test Executor 4 started executing tests.\nGradle Test Executor 5 started executing tests.\nGradle Test Executor 4 finished executing tests.\nGradle Test Executor 5 finished executing tests.\n\n```", "```java\n$ gradle test\n. . .\n:test\n\nch6.login.LoginTest > testLogin1 FAILED\n java.lang.AssertionError at LoginTest.java:26\n\n4 tests completed, 1 failed\n:test FAILED\n\nFAILURE: Build failed with an exception.\n. . .\nBUILD FAILED\n\n```", "```java\n$ gradle test\n. . .\nch6.login.LoginTest > testLogin1 FAILED\n java.lang.AssertionError at LoginTest.java:26\n\n4 tests completed, 1 failed\n. . .\nBUILD SUCCESSFUL\n\n```", "```java\ntest {\n  filter {\n    // 1: execute only login test cases\n    includeTestsMatching \"ch6.login.*\"\n\n    //2: include all test cases matching *Test\n    includeTestsMatching \"*Test\"\n\n    //3: include all integration tests having 1 in their name\n    includeTestsMatching \"*1\"\n\n    //4: Other way to include/exclude packages\n    include \"ch6/profile/**\"\n  }\n}\n```", "```java\ndependencies {\n  testCompile 'org.testng:testng:6.8.21'\n}\n```", "```java\n$ gradle clean test\n\n```", "```java\ntest{\n  useTestNG()\n  ignoreFailures = true\n  maxParallelForks = 2\n  forkEvery = 1\n}\n```", "```java\nuseTestNG(){\n  includeGroups 'Smoke'\n  listeners << 'org.testng.reporters.EmailableReporter'\n}\n```", "```java\n@Test(groups = \"<group name>\")\n```", "```java\n@Test(groups = \"Smoke\")\npublic void verifyArraySize()\n\n@Test(groups = \"Smoke\")\npublic void verifyArrayNotNull()\n\n@Test(groups = \"Integration\")\npublic void verifyArrayPosition()\n```", "```java\n<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n<suite name=\"Suite1\" verbose=\"1\" >\n  <listeners>\n    <listener class-name=\"org.testng.reporters.EmailableReporter\" />\n  </listeners>\n  <test name=\"Smoke Test\">\n    <groups>\n      <run>\n        <exclude name=\"Integration\" />\n        <include name=\"Smoke\" />\n      </run>\n    </groups>\n\n    <classes>\n      <class name=\"ch6.testng.example.ArrayTest\">\n      </class>\n    </classes>\n  </test>\n</suite>\n```", "```java\ntest {\nignoreFailures = true\n  useTestNG(){\n    suites(\"src/test/resources/testng.xml\")\n  }\n}\n```"]