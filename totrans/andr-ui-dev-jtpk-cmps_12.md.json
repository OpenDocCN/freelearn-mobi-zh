["```kt\nimplementation 'com.journeyapps:zxing-android-embedded:4.3.0'\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<com.journeyapps.barcodescanner.DecoratedBarcodeView\n\n  android:id=\"@+id/barcode_scanner\"\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:layout_alignParentTop=\"true\" />\n```", "```kt\nval root = layoutInflater.inflate(R.layout.layout, null)\nbarcodeView = root.findViewById(R.id.barcode_scanner)\nval formats = listOf(BarcodeFormat.QR_CODE,\n    BarcodeFormat.CODE_39)\nbarcodeView.barcodeView.decoderFactory =\n    DefaultDecoderFactory(formats)\nbarcodeView.initializeFromIntent(intent)\nval callback = object : BarcodeCallback {\n  override fun barcodeResult(result: BarcodeResult) {\n    if (result.text == null || result.text == text.value) {\n      return\n    }\n    text.value = result.text\n  }\n}\nbarcodeView.decodeContinuous(callback)\n```", "```kt\nprivate val text = MutableLiveData(\"\")\n```", "```kt\nsetContent {\n  val state = text.observeAsState()\n  state.value?.let {\n    ZxingDemo(root, it)\n  }\n}\n```", "```kt\n@Composable\nfun ZxingDemo(root: View, value: String) {\n  Box(\n    modifier = Modifier.fillMaxSize(),\n    contentAlignment = Alignment.TopCenter\n  ) {\n    AndroidView(modifier = Modifier.fillMaxSize(),\n      factory = {\n        root\n      })\n    if (value.isNotBlank()) {\n      Text(\n        modifier = Modifier.padding(16.dp),\n        text = value,\n        color = Color.White,\n        style = MaterialTheme.typography.h4\n      )\n    }\n  }\n}\n```", "```kt\nclass ComposeActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    val viewModel: MyViewModel by viewModels()\n    …\n    setContent {\n      ViewIntegrationDemo(viewModel) {\n        val i = Intent(\n          this,\n          ViewActivity::class.java\n        )\n        i.putExtra(KEY, viewModel.sliderValue.value)\n        startActivity(i)\n      }\n    }\n  }\n}\n```", "```kt\n@Composable\nfun ViewIntegrationDemo(viewModel: MyViewModel,\n                        onClick: () -> Unit) {\n  val sliderValueState =\n    viewModel.sliderValue.observeAsState()\n  Scaffold( ... ) {\n    Column( ... ) {\n      Slider( … )\n      AndroidViewBinding(\n        modifier = Modifier.fillMaxWidth(),\n        factory = CustomBinding::inflate\n      ) {\n        // Here Views will be updated\n      }\n    }\n  }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <com.google.android.material.textview.MaterialTextView\n    android:id=\"@+id/textView\"\n    ... />\n  <com.google.android.material.button.MaterialButton\n    android:id=\"@+id/button\"\n    …\n    android:text=\"@string/view_activity\"\n    …\n    app:layout_constraintTop_toBottomOf=\"@id/textView\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\ntextView.text = sliderValueState.value.toString()\nbutton.setOnClickListener {\n    onClick()\n}\n```", "```kt\nSlider(\n  modifier = Modifier.fillMaxWidth(),\n  onValueChange = {\n    viewModel.setSliderValue(it)\n  },\n  value = sliderValueState.value ?: 0F\n)\n```", "```kt\nval sliderValueState = viewModel.sliderValue.observeAsState()\n```", "```kt\nbinding = LayoutBinding.inflate(layoutInflater)\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n\n  …\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <com.google.android.material.slider.Slider\n    android:id=\"@+id/slider\"\n    ... />\n  <androidx.compose.ui.platform.ComposeView\n    android:id=\"@+id/compose_view\"\n    ...\n    app:layout_constraintTop_toBottomOf=\"@id/slider\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\nviewModel.sliderValue.observe(this) {\n  binding.slider.value = it\n}\n```", "```kt\nbinding.slider.addOnChangeListener { _, value, _ ->\n  viewModel.setSliderValue(value) }\n```", "```kt\nbinding.composeView.run {\n  setViewCompositionStrategy(\n      ViewCompositionStrategy.DisposeOnDetachedFromWindow)\n  setContent {\n    val sliderValue =\n            viewModel.sliderValue.observeAsState()\n    sliderValue.value?.let {\n      ComposeDemo(it) {\n        val I = Intent(\n          context,\n          ComposeActivity::class.java\n        )\n        i.putExtra(KEY, it)\n        startActivity(i)\n      }\n    }\n  }\n}\n```", "```kt\nval sliderValue = viewModel.sliderValue.observeAsState()\n```", "```kt\n@Composable\nfun ComposeDemo(value: Float, onClick: () -> Unit) {\n  Column(\n    modifier = Modifier\n      .fillMaxSize(),\n    horizontalAlignment = Alignment.CenterHorizontally\n  ) {\n    Box(\n      modifier = Modifier\n        .fillMaxWidth()\n        .background(MaterialTheme.colors.secondary)\n        .height(64.dp),\n      contentAlignment = Alignment.Center\n    ) {\n      Text(\n        text = value.toString()\n      )\n    }\n    Button(\n      onClick = onClick,\n      modifier = Modifier.padding(top = 16.dp)\n    ) {\n      Text(text = stringResource(id =\n            R.string.compose_activity))\n    }\n  }\n}\n```"]