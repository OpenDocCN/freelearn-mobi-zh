["```swift\nimport UnityEngine \nimport System.Collections \nclass example(MonoBehaviour): \ndef Start(): \ncurTransform as Transform \ncurTransform = gameObject.GetComponent[of Transform]() \ncurTransform = gameObject.transform \ndef Update(): \nother as ScriptName = gameObject.GetComponent[of ScriptName]() \nother.DoSomething() \nother.someVariable = 5\n\n```", "```swift\nfunction Start () { \nvar curTransform : Transform; \ncurTransform = gameObject.GetComponent(Transform); \n// This is equivalent to: \ncurTransform = gameObject.transform;\n}\nfunction Update () { \n// To access public variables and functions \n// in another script attached to the same game object. \n// (ScriptName is the name of the javascript file) \nvar other : ScriptName = gameObject.GetComponent(ScriptName); \n// Call the function DoSomething on the script other.DoSomething (); // set another variable in the other script instance other.someVariable = 5; }\nfunction Update () { // To access public variables and functions // in another script \nattached to the same game object. // (ScriptName is the name of the javascript file) var other : ScriptName = gameObject.GetComponent(ScriptName); // Call the function DoSomething on the script other.DoSomething (); \n// set another variable in the other script instance \nother.someVariable = 5; }\n\n```", "```swift\nusing UnityEngine; using System.Collections; public class example : MonoBehaviour { void Start() { Transform curTransform; curTransform = gameObject.GetComponent<Transform>(); curTransform = gameObject.transform;\nC# scriptstructure}\nvoid Update() { ScriptName other = gameObject.GetComponent<ScriptName>(); other.DoSomething(); other.someVariable = 5;\n}\n}\n\n```", "```swift\nusing UnityEngine;\nusing System.Collections;\npublic class SomeScript : MonoBehaviour {\npublic int testExpose = 5;\npublic String testStringExpose = \"Test\";\n// Update is called once per frame\nvoid Update () {\n}\n}\n\n```", "```swift\n// Start in landscape mode function Start () { iPhoneSettings.screenOrientation = iPhoneScreenOrientation.Landscape;\n}\n\n```", "```swift\n    void Start () {\n    if ( ! ( ( iPhoneSettings.generation == iPhoneGeneration.iPhone4 ) ||\n    ( iPhoneSettings.generation == iPhoneGeneration.iPad1Gen ) ) )\n    {\n    // this device isn't an iPad or an iPhone4 and therefore // doesn't support HD.\n    }\n    }\n\n    ```", "```swift\n    Application.LoadLevel(\"SDAdvisory\");\n\n    ```", "```swift\nusing System.Collections;\nusing UnityEngine;\npublic class SplashGUI : MonoBehaviour{\nvoid OnGUI(){\nif ( GUI.Button(new Rect(10,10,100,25), \"I Understand\") ) {\nApplication.LoadLevel(\"MainGame\");\n}\n}\n}\n\n```", "```swift\n    //Use this for initialization\n    void Start () {\n    iPhoneSettings.StartLocationServiceUpdates();\n    }\n\n    ```", "```swift\n    using UnityEngine;\n    using System.Collections;\n    public class LocationBasedGaming : MonoBehaviour {\n    public int retries = 20;\n    // Use this for initialization\n    void Start ()\n    {\n    iPhoneSettings.StartLocationServiceUpdates();\n    }\n    // Update is called once per frame\n    void Update () {\n    }\n    }\n\n    ```", "```swift\n    IEnumerator EnterWaitState( float time )\n    {\n    yield return new WaitForSeconds( time );\n    }\n\n    ```", "```swift\n    // Use this for initialization\n    void Start ()\n    {\n    iPhoneSettings.StartLocationServiceUpdates();\n    while( iPhoneSettings.locationServiceStatus == LocationServiceStatus.Initializing && retries > 0 )\n    {\n    EnterWaitState( 2.0f );\n    retries --;\n    }\n    }\n\n    ```", "```swift\n    IEnumerator Start ()\n    {\n    iPhoneSettings.StartLocationServiceUpdates();\n    while( iPhoneSettings.locationServiceStatus == LocationServiceStatus.Initializing && retries > 0 )\n    {\n    yield return new WaitForSeconds ( 2.0f );\n    retries --;\n    }\n    }\n\n    ```", "```swift\nif (iPhoneSettings.locationServiceStatus == LocationServiceStatus.Failed)\n{\nDebug.Log(\"Unable to activate the location services. Device reports failure\");\n}\nelse\n{\n// success path for location services - get information // from Google\nfloat latitude = iPhoneInput.lastLocation.latitude;\nfloat longitude = iPhoneInput.lastLocation.longitude;\n}\n\n```", "```swift\npublic class GoogleWeather : MonoBehaviour {\nString city;\nString conditions;\nString tempC;\nString tempF;\nString humidity;\nString wind;\n// Use this for initialization\nvoid Start () {\n}\n// Update is called once per frame\nvoid Update () {\n}\nvoid forLocation( float lat, float lon )\n{\nString postLat = \"\" + lat * 1000000;\nString postLon = \"\" + lon * 1000000;\nXmlDocument responseXML = new XmlDocument();\nresponseXML.Load(\"http://www.google.com/ig/api?weather=,,,\" + postLat + \",\" + postLon );\ncity = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ forecast_information/city\").Attributes[\"data\"].InnerText;\nconditions = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ current_conditions/condition\").Attributes[\"data\"].InnerText;\ntempC = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ current_conditions/temp_c\").Attributes[\"data\"].InnerText;\ntempF = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ current_conditions/temp_f\").Attributes[\"data\"].InnerText;\nhumidity = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ current_conditions/humidity\").Attributes[\"data\"].InnerText;\nwind = responseXML.SelectSingleNode(\"/xml_api_reply/weather/ current_conditions/wind_condition\").Attributes[\"data\"].InnerText;\n}\n}\n\n```", "```swift\n    using UnityEngine;\n    using System.Collections;\n    public class OrientationChange : MonoBehaviour {\n    // Use this for initialization\n    void Start () {\n    }\n    // Update is called once per frame\n    void FixedUpdate () {\n    if ( Input.deviceOrientation == DeviceOrientation.Portrait )\n    {\n    }\n    else if ( Input.deviceOrientation == DeviceOrientation.LandscapeLeft )\n    {\n    }\n    else if ( Input.deviceOrientation == DeviceOrientation.LandscapeRight )\n    {\n    }\n    else if ( Input.deviceOrientation == DeviceOrientation.PortraitUpsideDown )\n    {\n    }\n    }\n    }\n\n    ```", "```swift\nvoid Update () {\nif ( Input.deviceOrientation == DeviceOrientation.Portrait )\n{\niPhoneSettings.screenOrientation = iPhoneScreenOrientation.Portrait;\n}\nelse if ( Input.deviceOrientation == DeviceOrientation.LandscapeLeft )\n{\niPhoneSettings.screenOrientation = iPhoneScreenOrientation.LandscapeLeft;\n}\nelse if ( Input.deviceOrientation == DeviceOrientation.LandscapeRight )\n{\niPhoneSettings.screenOrientation = iPhoneScreenOrientation.LandscapeRight;\n}\nelse if ( Input.deviceOrientation == DeviceOrientation.PortraitUpsideDown )\n{\niPhoneSettings.screenOrientation = iPhoneScreenOrientation.PortraitUpsideDown;\n}\n}\n\n```", "```swift\n    void Start ()\n    {\n    if ( iPhoneUtils.isApplicationGenuine )\n    {\n    Application.LoadLevel(\"RegularGame\");\n    }\n    else\n    {\n    Application.LoadLevel(\"DemoLevel\");\n    }\n    }\n\n    ```"]