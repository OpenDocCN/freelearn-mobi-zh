["```kt\n    dependencies {\n    ```", "```kt\n    implementation \"androidx.DataStore:DataStore-preferences:1.x.x\"\n    ```", "```kt\n    }\n    ```", "```kt\n    data class Tasks(\n    ```", "```kt\n        val firstTask: String,\n    ```", "```kt\n        val secondTask: String,\n    ```", "```kt\n        val thirdTask: String\n    ```", "```kt\n    )\n    ```", "```kt\n    enum class TaskDataSource {\n    ```", "```kt\n        PREFERENCES_DATA_STORE\n    ```", "```kt\n    }\n    ```", "```kt\ninterface DataStoreManager {\n    suspend fun saveTasks(tasks: Tasks)\n    fun getTasks(): Flow<Tasks>\n}\n```", "```kt\n    class DataStoreManagerImpl(): DataStoreManager {\n    ```", "```kt\n        override suspend fun saveTasks(tasks: Tasks) {\n    ```", "```kt\n            TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n        override fun getTasks(): Flow<Tasks> {\n    ```", "```kt\n            TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    class DataStoreManagerImpl(\n    ```", "```kt\n        private val tasksPreferenceStore:\n    ```", "```kt\n            DataStore<Preferences>\n    ```", "```kt\n    ) : DataStoreManager {\n    ```", "```kt\n        private val FIRST_TASK =\n    ```", "```kt\n            stringPreferencesKey(\"first_task\")\n    ```", "```kt\n        private val SECOND_TASK =\n    ```", "```kt\n            stringPreferencesKey(\"second_task\")\n    ```", "```kt\n        private val THIRD_TASK =\n    ```", "```kt\n            stringPreferencesKey(\"third_task\")\n    ```", "```kt\n        override suspend fun saveTasks(tasks: Tasks) {\n    ```", "```kt\n            tasksPreferenceStore.edit {\n    ```", "```kt\n            taskPreferenceStore ->\n    ```", "```kt\n                taskPreferenceStore[FIRST_TASK] =\n    ```", "```kt\n                    tasks.firstTask\n    ```", "```kt\n                taskPreferenceStore[SECOND_TASK] =\n    ```", "```kt\n                    tasks.secondTask\n    ```", "```kt\n                taskPreferenceStore[THIRD_TASK] =\n    ```", "```kt\n                    tasks.thirdTask\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n        override fun getTasks(): Flow<Tasks> {\n    ```", "```kt\n            TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getTasks(): Flow<Tasks> = tasksPreferenceStore.data.map { taskPreference ->\n    ```", "```kt\n        Tasks(\n    ```", "```kt\n            firstTask = taskPreference[FIRST_TASK] ?: \"\",\n    ```", "```kt\n            secondTask = taskPreference[SECOND_TASK] ?:\n    ```", "```kt\n            \"\",\n    ```", "```kt\n            thirdTask = taskPreference[THIRD_TASK] ?: \"\"\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\nprivate val FIRST_TASK = stringPreferencesKey(\"first_task\")\nprivate val SECOND_TASK = stringPreferencesKey(\"second_task\")\nprivate val THIRD_TASK = stringPreferencesKey(\"third_task\")\n```", "```kt\n    @HiltAndroidApp\n    ```", "```kt\n    class TaskApp : Application()\n    ```", "```kt\n    <application\n    ```", "```kt\n        android:allowBackup=\"true\"\n    ```", "```kt\n        android:name=\".TaskApp\"\n    ```", "```kt\n        tools:targetApi=\"31\">\n    ```", "```kt\n    ...\n    ```", "```kt\n    class DataStoreManagerImpl @Inject constructor(\n    ```", "```kt\n        private val tasksPreferenceStore:\n    ```", "```kt\n        DataStore<Preferences>\n    ```", "```kt\n    ) : DataStoreManager {\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    class DataStoreModule {\n    ```", "```kt\n        private val Context.tasksPreferenceStore :\n    ```", "```kt\n        DataStore<Preferences> by\n    ```", "```kt\n        preferencesDataStore(name = \"store_tasks\")\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Provides\n    ```", "```kt\n        fun provideTasksPreferenceDataStore(\n    ```", "```kt\n            @ApplicationContext context: Context\n    ```", "```kt\n        ): DataStore<Preferences> =\n    ```", "```kt\n           context.tasksPreferenceStore\n    ```", "```kt\n    }\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    abstract class DataStoreManagerModule {\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Binds\n    ```", "```kt\n        abstract fun\n    ```", "```kt\n            bindDataStoreRepository(DataStoreManagerImpl:\n    ```", "```kt\n                DataStoreManagerImpl): DataStoreManager\n    ```", "```kt\n    }\n    ```", "```kt\n    interface TaskService {\n    ```", "```kt\n        fun getTasksFromPrefDataStore(): Flow<Tasks>\n    ```", "```kt\n        suspend fun addTasks(tasks: Tasks)\n    ```", "```kt\n    }\n    ```", "```kt\n    class TaskServiceImpl @Inject constructor(\n    ```", "```kt\n        private val DataStoreManager: DataStoreManager\n    ```", "```kt\n    ) : TaskService {\n    ```", "```kt\n        override fun getTasksFromPrefDataStore() =\n    ```", "```kt\n                 DataStoreManager.getTasks()\n    ```", "```kt\n        override suspend fun addTasks(tasks: Tasks) {\n    ```", "```kt\n            DataStoreManager.saveTasks(tasks)\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Binds\n    ```", "```kt\n        abstract fun bindTaskService(taskServiceImpl:\n    ```", "```kt\n        TaskServiceImpl): TaskService\n    ```", "```kt\n    }\n    ```", "```kt\n    fun saveTaskData(tasks: Tasks) {\n    ```", "```kt\n        viewModelScope.launch {\n    ```", "```kt\n            Log.d(\"Task\", \"asdf Data was inserted\n    ```", "```kt\n                   correctly\")\n    ```", "```kt\n            taskService.addTasks(tasks)\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    TaskButton(onClick = {\n    ```", "```kt\n        val tasks = Tasks(\n    ```", "```kt\n            firstTask = firstText.value,\n    ```", "```kt\n            secondTask = secondText.value,\n    ```", "```kt\n            thirdTask = thirdText.value\n    ```", "```kt\n        )\n    ```", "```kt\n        taskViewModel.saveTaskData(tasks)},\n    ```", "```kt\n        text = stringResource(id = R.string.save))\n    ```", "```kt\nprivate val Context.tasksPreferenceStore : DataStore<Preferences> by preferencesDataStore(name = \"store_tasks\")\n```", "```kt\n    implementation \"androidx.DataStore:DataStore:1.x.x\n    ```", "```kt\n    implementation \"com.google.protobuf:protobuf-javalite:3.x.x\"\n    ```", "```kt\n    plugins {\n    ```", "```kt\n    ...\n    ```", "```kt\n        id \"com.google.protobuf\" version \"0.8.12\"\n    ```", "```kt\n    }\n    ```", "```kt\n    protobuf {\n    ```", "```kt\n        protoc {\n    ```", "```kt\n            artifact = \"com.google.protobuf:protoc:3.11.0\"\n    ```", "```kt\n        }\n    ```", "```kt\n        generateProtoTasks {\n    ```", "```kt\n            all().each { task ->\n    ```", "```kt\n                task.builtins {\n    ```", "```kt\n                     java {\n    ```", "```kt\n                         option 'lite'\n    ```", "```kt\n                     }\n    ```", "```kt\n                }\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    syntax = \"proto3\";\n    ```", "```kt\n    option java_package =\n    ```", "```kt\n        \"com.madonasyombua.DataStoreexample\";\n    ```", "```kt\n    option java_multiple_files = true;\n    ```", "```kt\n    message TaskPreference {\n    ```", "```kt\n        string first_task = 1;\n    ```", "```kt\n        string second_task = 2;\n    ```", "```kt\n        string third_task = 3;\n    ```", "```kt\n    }\n    ```", "```kt\n    enum class TaskDataSource {\n    ```", "```kt\n        PREFERENCES_DATA_STORE,\n    ```", "```kt\n        PROTO_DATA_STORE\n    ```", "```kt\n    }\n    ```", "```kt\n    interface DataStoreManager {\n    ```", "```kt\n        suspend fun saveTasks(tasks: Tasks)\n    ```", "```kt\n        fun getTasks(): Flow<Tasks>\n    ```", "```kt\n        suspend fun saveTasksToProtoStore(tasks: Tasks)\n    ```", "```kt\n        fun getTasksFromProtoStore(): Flow<Tasks>\n    ```", "```kt\n    }\n    ```", "```kt\n    override suspend fun saveTasksToProtoStore(tasks: Tasks) {\n    ```", "```kt\n        TODO(\"Not yet implemented\")\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getTasksFromProtoStore(): Flow<Tasks> {\n    ```", "```kt\n        TODO(\"Not yet implemented\")\n    ```", "```kt\n    }\n    ```", "```kt\n    object TaskSerializer : Serializer<TaskPreference> {\n    ```", "```kt\n        override val defaultValue: TaskPreference =\n    ```", "```kt\n            TaskPreference.getDefaultInstance()\n    ```", "```kt\n        override suspend fun readFrom(input: InputStream):\n    ```", "```kt\n            TaskPreference{\n    ```", "```kt\n                try {\n    ```", "```kt\n                    return TaskPreference.parseFrom(input)\n    ```", "```kt\n                } catch (exception:\n    ```", "```kt\n                InvalidProtocolBufferException) {\n    ```", "```kt\n                  throw CorruptionException(\"Cannot read\n    ```", "```kt\n                  proto.\", exception)\n    ```", "```kt\n                }\n    ```", "```kt\n        }\n    ```", "```kt\n        override suspend fun writeTo(t: TaskPreference,\n    ```", "```kt\n            output: OutputStream) = t.writeTo(output)\n    ```", "```kt\n    }\n    ```", "```kt\n    private val Context.taskProtoDataStore: DataStore<TaskPreference> by DataStore(\n    ```", "```kt\n        fileName = \"task.pd\",\n    ```", "```kt\n        serializer = TaskSerializer\n    ```", "```kt\n    )\n    ```", "```kt\n    @Singleton\n    ```", "```kt\n    @Provides\n    ```", "```kt\n    fun provideTasksProtoDataStore(\n    ```", "```kt\n        @ApplicationContext context: Context\n    ```", "```kt\n    ):DataStore<TaskPreference> = context.taskProtoDataStore\n    ```", "```kt\n    override suspend fun saveTasksToProtoStore(tasks: Tasks) {\n    ```", "```kt\n        taskProtoDataStore.updateData { taskData ->\n    ```", "```kt\n            taskData.toBuilder()\n    ```", "```kt\n                .setFirstTask(tasks.firstTask)\n    ```", "```kt\n                .setSecondTask(tasks.secondTask)\n    ```", "```kt\n                .setThirdTask(tasks.thirdTask)\n    ```", "```kt\n                .build()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getTasksFromProtoStore(): Flow<Tasks> =\n    ```", "```kt\n        taskProtoDataStore.data.map { tasks ->\n    ```", "```kt\n            Tasks(\n    ```", "```kt\n                tasks.firstTask,\n    ```", "```kt\n                tasks.secondTask,\n    ```", "```kt\n                tasks.thirdTask\n    ```", "```kt\n            )\n    ```", "```kt\n    interface TaskService {\n    ```", "```kt\n        fun getTasksFromPrefDataStore() : Flow<Tasks>\n    ```", "```kt\n        suspend fun addTasks(tasks: Tasks)\n    ```", "```kt\n        fun getTasks(): Flow<Tasks>\n    ```", "```kt\n        fun getTasksFromProtoDataStore(): Flow<Tasks>\n    ```", "```kt\n    }\n    ```", "```kt\n    class TaskServiceImpl @Inject constructor(\n    ```", "```kt\n        private val DataStoreManager: DataStoreManager\n    ```", "```kt\n    ) : TaskService {\n    ```", "```kt\n        override fun getTasksFromPrefDataStore() =\n    ```", "```kt\n            DataStoreManager.getTasks()\n    ```", "```kt\n        override suspend fun addTasks(tasks: Tasks) {\n    ```", "```kt\n            DataStoreManager.saveTasks(tasks)\n    ```", "```kt\n            DataStoreManager.saveTasksToProtoStore(tasks)\n    ```", "```kt\n        }\n    ```", "```kt\n        override fun getTasks(): Flow<Tasks> =\n    ```", "```kt\n            getTasksFromProtoDataStore()\n    ```", "```kt\n        override fun getTasksFromProtoDataStore():\n    ```", "```kt\n            Flow<Tasks> =\n    ```", "```kt\n            DataStoreManager.getTasksFromProtoStore()\n    ```", "```kt\n    }\n    ```", "```kt\n    /* Copyright 2022 Google LLC.\n    ```", "```kt\n       SPDX-License-Identifier: Apache-2.0 */\n    ```", "```kt\n    public interface DataMigration<T> {\n    ```", "```kt\n        public suspend fun shouldMigrate(currentData: T): Boolean\n    ```", "```kt\n        public suspend fun migrate(currentData: T): T\n    ```", "```kt\n            public suspend fun cleanUp()\n    ```", "```kt\n    }\n    ```", "```kt\n    private val Context.migrateOnePreferencesDataStore : DataStore<Preferences> by preferencesDataStore(\n    ```", "```kt\n        name = \"store_tasks\"\n    ```", "```kt\n    )\n    ```", "```kt\n    private val Context.migrationTwoPreferencesDataStore by preferencesDataStore(\n    ```", "```kt\n        name = NEW_DataStore,\n    ```", "```kt\n        produceMigrations = { context ->\n    ```", "```kt\n            listOf(object : DataMigration<Preferences> {\n    ```", "```kt\n                override suspend fun\n    ```", "```kt\n                    shouldMigrate(currentData:\n    ```", "```kt\n                        Preferences) = true\n    ```", "```kt\n                override suspend fun migrate(currentData:\n    ```", "```kt\n                Preferences): Preferences {\n    ```", "```kt\n                    val oldData = context\n    ```", "```kt\n                        .migrateOnePreferencesDataStore\n    ```", "```kt\n                            .data.first().asMap()\n    ```", "```kt\n                    val currentMutablePrefs =\n    ```", "```kt\n                        currentData.toMutablePreferences()\n    ```", "```kt\n                    oldToNew(oldData, currentMutablePrefs)\n    ```", "```kt\n                    return\n    ```", "```kt\n                       currentMutablePrefs.toPreferences()\n    ```", "```kt\n                }\n    ```", "```kt\n                override suspend fun cleanUp() {\n    ```", "```kt\n                    context.migrateOnePreferencesDataStore\n    ```", "```kt\n                        .edit { it.clear() }\n    ```", "```kt\n                }\n    ```", "```kt\n            })\n    ```", "```kt\n        }\n    ```", "```kt\n    )\n    ```", "```kt\n    private fun oldToNew(\n    ```", "```kt\n        oldData: Map<Preferences.Key<*>, Any>,\n    ```", "```kt\n        currentMutablePrefs: MutablePreferences\n    ```", "```kt\n    ) {\n    ```", "```kt\n        oldData.forEach { (key, value) ->\n    ```", "```kt\n            when (value) {\n    ```", "```kt\n                //migrate data types you wish to migrate\n    ```", "```kt\n                ...\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    public suspend fun shouldMigrate(currentData: T):\n        Boolean\n    public suspend fun migrate(currentData: T): T\n    public suspend fun cleanUp()\n```", "```kt\n      class TaskViewModelTest {}\n    ```", "```kt\n    testImplementation \"io.mockk:mockk:1.13.3\"\n    ```", "```kt\n    androidTestImplementation \"io.mockk:mockk-android:1.13.3\"\n    ```", "```kt\n    testImplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2\"\n    ```", "```kt\n    private lateinit var classToTest: TaskViewModel\n    ```", "```kt\n    private val mockTaskService = mockk<TaskService>()\n    ```", "```kt\n    private val dispatcher = TestCoroutineDispatcher()\n    ```", "```kt\n    @Before\n    ```", "```kt\n    fun setUp(){\n    ```", "```kt\n        classToTest = TaskViewModel(mockTaskService)\n    ```", "```kt\n    }\n    ```", "```kt\n    @Before\n    ```", "```kt\n    fun setUp(){\n    ```", "```kt\n        classToTest = TaskViewModel(mockTaskService)\n    ```", "```kt\n        Dispatchers.setMain(dispatcher)\n    ```", "```kt\n    }\n    ```", "```kt\n    @After\n    ```", "```kt\n    fun tearDown() {\n    ```", "```kt\n        Dispatchers.resetMain()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun  `Verify add tasks function adds tasks as needed`() = runBlocking {\n    ```", "```kt\n        val fakeTasks = Tasks(\n    ```", "```kt\n            firstTask = \"finish school work\",\n    ```", "```kt\n            secondTask = \"buy gifts for the holiday\",\n    ```", "```kt\n            thirdTask = \"finish work\"\n    ```", "```kt\n        )\n    ```", "```kt\n        val expected = classToTest.saveTaskData(fakeTasks)\n    ```", "```kt\n        Assert.assertNotNull(expected)\n    ```", "```kt\n    }\n    ```", "```kt\nprivate val coroutineDispatcher: TestCoroutineDispatcher =\n    TestCoroutineDispatcher()\n```"]