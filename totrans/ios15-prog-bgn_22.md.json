["```swift\n    private let filledStarImage = UIImage(named: \n    \"filled-star\")\n    private let halfStarImage = UIImage(named: \n    \"half-star\")\n    private let emptyStarImage = UIImage(named: \n    \"empty-star\")\n    private var totalStars = 5\n    var rating = 0.0\n    ```", "```swift\n    override func draw(_ rect: CGRect) {\n       let context = UIGraphicsGetCurrentContext()\n       context!.setFillColor(UIColor.systemBackground.\n       cgColor)\n       context!.fill(rect)\n       let ratingsViewWidth = rect.size.width\n       let availableWidthForStar = ratingsViewWidth /\n       Double(totalStars)\n       let starSidelength = (availableWidthForStar <= \n       rect.size.height) ? availableWidthForStar : \n       rect.size.height\n       for index in 0..<totalStars {\n          let starOriginX = (availableWidthForStar * \n          Double(index)) + ((availableWidthForStar - \n          starSidelength) / 2)\n          let starOriginY = ((rect.size.height - \n          starSidelength) / 2)\n          let frame = CGRect(x: starOriginX, \n          y: starOriginY, width: starSidelength,\n          height: starSidelength)\n          var starToDraw: UIImage!\n          if (Double(index + 1) <= self.rating) {\n             starToDraw = filledStarImage\n          } else if (Double(index + 1) <= \n          self.rating.rounded()) {\n             starToDraw = halfStarImage\n          } else {\n             starToDraw = emptyStarImage\n          }\n          starToDraw.draw(in: frame)\n       }\n    }\n    ```", "```swift\n    let context = UIGraphicsGetCurrentContext()\n    ```", "```swift\n    context!.setFillColor(UIColor.systemBackground.\n    cgColor)\n    ```", "```swift\n    context!.fill(rect)\n    ```", "```swift\n    let ratingsViewWidth = rect.size.width\n    let availableWidthForStar = ratingsViewWidth / \n    Double(totalStars)\n    let starSidelength = (availableWidthForStar <= \n    rect.size.height) ? availableWidthForStar : \n    rect.size.height\n    ```", "```swift\nfor index in 0..<totalStars {\n```", "```swift\nlet starOriginX = (availableWidthForStar * \nDouble(index)) +  ((availableWidthForStar – \nstarSidelength) / 2\nlet starOriginY = ((rect.size.height - starSidelength)\n/ 2)\nlet frame = CGRect(x: starOriginX, y: starOriginY, \nwidth: starSidelength, height: starSidelength)\n```", "```swift\nvar starToDraw: UIImage!\nif (Double(index + 1) <= self.rating) {\n   starToDraw = filledStarImage\n} else if (Double(index + 1) <= self.rating.rounded())\n{ \n   starToDraw = halfStarImage\n} else {\n   starToDraw = emptyStarImage\n}\n```", "```swift\nstarToDraw.draw(in: frame)\n```", "```swift\n    @IBOutlet var ratingsView: RatingsView!\n    ```", "```swift\n    func createRating() {\n       ratingsView.rating = 3.5\n    }\n    ```", "```swift\n    func initialize() { \n       setupLabels() \n       createMap() \n       createRating()\n    }\n    ```", "```swift\n    override var canBecomeFirstResponder: Bool {\n       true\n    }\n    ```", "```swift\n    override func beginTracking(_ touch: UITouch, with \n    event: UIEvent?) -> Bool {\n       guard self.isEnabled else { \n          return false\n       } \n       super.beginTracking(touch, with: event)\n       handle(with: touch)\n       return true\n    }\n    ```", "```swift\n    override func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool {\n    ```", "```swift\n    guard self.isEnabled else { \n       return false\n    }\n    ```", "```swift\n    super.beginTracking(touch, with: event)\n    ```", "```swift\n    handle(with: touch) \n    ```", "```swift\n    return true\n    ```", "```swift\n    private extension RatingsView {\n       func handle(with touch: UITouch) {\n          let starRectWidth = self.bounds.size.width / \n          Double(totalStars)\n          let location = touch.location(in: self)\n          var value = location.x / starRectWidth\n          if (value + 0.5) < value.rounded(.up) {\n             value = floor(value) + 0.5\n          } else {\n             value = value.rounded(.up)\n          }\n          updateRating(with: value)\n       }\n    }\n    ```", "```swift\n    func updateRating(with newValue: Double) {\n       if (self.rating != newValue && newValue >= 0 && \n       newValue <= Double(totalStars)) { \n          self.rating = newValue \n       }\n    }\n    ```", "```swift\n    var rating = 0.0 {\n       didSet {\n          setNeedsDisplay()\n       }\n    }\n    ```", "```swift\nfunc createRating() { \n   ratingsView.rating = 3.5 \n   ratingsView.isEnabled = true\n}\n```", "```swift\n    @IBAction func unwindReviewCancel(segue:\n    UIStoryboardSegue) {\n    }\n    ```", "```swift\n    @IBOutlet var ratingsView: RatingsView!\n    @IBOutlet var titleTextField: UITextField!\n    @IBOutlet var nameTextField: UITextField!\n    @IBOutlet var reviewTextView: UITextView!\n    ```", "```swift\n    @IBAction func onSaveTapped(_ sender: Any) { \n       print(ratingsView.rating) \n       print(titleTextField.text as Any) \n       print(nameTextField.text as Any) \n       print(reviewTextView.text as Any) \n       dismiss(animated: true, completion: nil)\n    }\n    ```"]