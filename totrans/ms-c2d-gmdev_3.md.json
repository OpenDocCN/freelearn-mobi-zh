["```swift\n#import \"MainScene.h\"\n```", "```swift\nreturn [MainScene scene];\n```", "```swift\n@interface MainScene : CCScene {\n  CGSize winSize;\n}\n+(CCScene*)scene;\n@end\n```", "```swift\n+(CCScene*)scene\n{\n  return [[self alloc] init];\n}\n\n-(id)init\n{\n  if ((self=[super init]))\n  {\n    winSize = [[CCDirector sharedDirector] viewSize];\n\n    //these values range 0 to 1.0, so use float to get ratio\n    CCNode *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:58/255.f green:138/255.f blue:88/255.f]];\n    [self addChild:background];\n  }\n  return self;\n}\n```", "```swift\nCCPhysicsNode *world;\n```", "```swift\n//create the physics simulation world\nworld = [CCPhysicsNode node];\nworld.debugDraw = YES;\nworld.gravity = ccp(0, -300);\n[self addChild:world];\n```", "```swift\n[self setUserInteractionEnabled:YES];\n```", "```swift\n-(void)touchBegan:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n  CGPoint touchPos = [touch locationInNode:self];\n  //create a black square\n  CGFloat width = winSize.width * 0.1f;\n  CCNode *square = [CCNodeColor nodeWithColor:[CCColor colorWithRed:0 \n  green:0 blue:0] width:width height:width];\n  square.position = touchPos;\n  square.anchorPoint = ccp(0.5f,0.5f);\n  [world addChild:square];\n}\n```", "```swift\n//add a physics body to the black square\nCCPhysicsBody *squareBody = [CCPhysicsBody bodyWithRect:CGRectMake(0, 0, width, width) cornerRadius:0];\nsquareBody.elasticity = 0.5f;\nsquare.physicsBody = squareBody;\n```", "```swift\n-(void)addWallWithRect:(CGRect)rect\n{\n  CCPhysicsBody *wallBody = [CCPhysicsBody bodyWithRect:rect cornerRadius:0];\n  wallBody.type = CCPhysicsBodyTypeStatic;\n  wallBody.elasticity = .5f;\n\n  CCNode *wall = [CCNode node];\n  wall.physicsBody = wallBody;\n  [world addChild:wall];\n}\n```", "```swift\n/***** Add Ground, Walls, and Ceiling *****/\n\n//ground\n[self addWallWithRect:CGRectMake(0, 0, winSize.width, 1)];\n\n//left wall\n[self addWallWithRect:CGRectMake(0, 0, 1, winSize.height)];\n\n//right wall\n[self addWallWithRect:CGRectMake(winSize.width, 0, 1, winSize.height)];\n\n//ceiling\n[self addWallWithRect:CGRectMake(0, winSize.height, winSize.width, 1)];\n```", "```swift\n[CCDirector sharedDirector].fixedUpdateInterval = 1.0f/120.f;\n```", "```swift\n#import <CoreMotion/CoreMotion.h>\n```", "```swift\nCMMotionManager *motionManager;\n```", "```swift\n//60 times per second, in theory once per frame\nCGFloat interval = 1/60.f; \nmotionManager = [[CMMotionManager alloc] init];\nmotionManager.accelerometerUpdateInterval = interval;\n[motionManager startAccelerometerUpdates];\n```", "```swift\n[self schedule:@selector(getAccelerometerData:) interval:interval];\n```", "```swift\n-(void)getAccelerometerData:(CCTime)delta\n{\nNSLog(@\"%f\\t%f\\t%f\", \nmotionManager.accelerometerData.acceleration.x, motionManager.accelerometerData.acceleration.y, motionManager.accelerometerData.acceleration.z);\n}\n```", "```swift\n-(void)getAccelerometerData:(CCTime)delta\n{\n  //NSLog(@\"%f\\t%f\\t%f\", motionManager.accelerometerData.acceleration.x, motionManager.accelerometerData.acceleration.y, motionManager.accelerometerData.acceleration.z);\n  [self setGravityFromAcceleration: motionManager.accelerometerData.acceleration];\n}\n\n-(void)setGravityFromAcceleration:(CMAcceleration)accel\n{\n  CGFloat xGravity = 500 * accel.y;\n  CGFloat yGravity = -500 * accel.x;\n  world.gravity = ccp(xGravity, yGravity);\n}\n```", "```swift\nworld.sleepTimeThreshold = 100000; //100,000 seconds, or about 27 hours\n```", "```swift\n@interface MainScene : CCScene <CCPhysicsCollisionDelegate>\n```", "```swift\nworld.collisionDelegate = self;\n```", "```swift\nsquareBody.collisionType = @\"square\";\n```", "```swift\n-(BOOL)ccPhysicsCollisionBegin:(CCPhysicsCollisionPair *)pair square:(CCNode *)firstSquare square:(CCNode *)secondSquare\n{\n  NSLog(@\"squares collided!\");\n  return YES;\n}\n```", "```swift\nwallBody.collisionType = @\"wall\";\n```", "```swift\n-(BOOL)ccPhysicsCollisionBegin:(CCPhysicsCollisionPair *)pair square:(CCNode *)nodeA wall:(CCNode *)nodeB\n{\n  NSLog(@\"square-wall collision!\");\n  return YES;\n}\n```", "```swift\n[squareBody setSensor:YES];\n```"]