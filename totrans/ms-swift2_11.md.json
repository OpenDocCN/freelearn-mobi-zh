["```swift\nfunc swapInts (inout a: Int, inout b: Int) {\n    let tmp = a\n    a = b\n    b = tmp\n}\n\nfunc swapDoubles(inout a: Double, inout b: Double) {\n    let tmp = a\n    a = b\n    b = tmp\n}\n\nfunc swapStrings(inout a: String, inout b: String) {\n    let tmp = a\n    a = b\n    b = tmp\n}\n```", "```swift\nfunc swap<T>(inout a: T, inout b: T) {\n    let tmp = a\n    a = b\n    b = tmp\n}\n```", "```swift\nfunc swap<G>(inout a: G, inout b: G) {\n  //Statements\n}\n\nfunc swap<xyz>(inout a: xyz, inout b: xyz) {\n  //Statements\n}\n```", "```swift\nfunc testGeneric<T,E>(a:T, b:E) {\n\n}\n```", "```swift\nvar a = 5\nvar b = 10\nswap(&a, b: &b)\n\nprint(\"a:  \\(a) b:  \\(b)\")\n```", "```swift\nvar c = \"My String 1\"\nvar d = \"My String 2\"\nswapGeneric(&c, b: &d)\nprint(\"c:  \\(c) d:  \\(d)\")\n```", "```swift\nvar a = 5\nvar c = \"My String 1\"\nswapGeneric(&a, b: &c)\n```", "```swift\nfunc testGeneric<T,E>(a:T, b:E) {\n    print(\"\\(a)  \\(b)\")\n}\n```", "```swift\nfunc genericEqual<T>(a: T, b: T) -> Bool{\n    return a == b\n}\n```", "```swift\nfunc testGenericComparable<T: Comparable>(a: T, b: T) -> Bool{\n    return a >= b\n}\n```", "```swift\nfunc testFunction<T: MyClass, E: MyProtocol>(a: T, b: E) {\n}\n```", "```swift\nclass List<T> {\n}\n```", "```swift\nvar stringList = List<String>()\nvar intList = List<Int>()\nvar customList = List<MyObject>()\n```", "```swift\nstruct GenericStruct<T> {\n\n}\n\nenum GenericEnum<T> {\n\n}\n```", "```swift\nclass List<T> {\n    var items = [T]()\n}\n```", "```swift\nfunc addItem(item: T) {\n    items.append(item)\n}\n```", "```swift\nfunc getItemAtIndex(index: Int) -> T? {\n    if items.count > index {\n        return items[index]\n    } else {\n        return nil\n    }\n}\n```", "```swift\nclass List<T> {\n    var items = [T]()\n\n    func addItem(item: T) {\n        items.append(item)\n    }\n\n    func getItemAtIndex(index: Int) -> T? {\n        if items.count > index {\n            return items[index]\n        } else {\n            return nil\n        }\n    }\n}\n```", "```swift\nvar list = List<String>()\nlist.addItem(\"Hello\")\nlist.addItem(\"World\")\nprint(list.getItemAtIndex(1))\n```", "```swift\nclass MyClass<T,E>{\n\n}\n```", "```swift\nvar mc = MyClass<String, Int>()\n```", "```swift\nclass MyClass<T: Comparable>{}\n```", "```swift\nprotocol QueueProtocol {\n    typealias QueueType\n    mutating func addItem(item: QueueType)\n    mutating func getItem() -> QueueType?\n    func count() -> Int\n}\n```", "```swift\nclass IntQueue: QueueProtocol {\n  var items = [Int]()\n\n  func addItem(item: Int) {\n    items.append(item)\n  }\n\n  func getItem() -> Int? {\n    if items.count > 0 {\n      return items.removeAtIndex(0)\n    }\n    else {\n      return nil\n    }\n  }\n\n  func count() -> Int {\n    return items.count\n  }\n}\n```", "```swift\nvar intQ = IntQueue()\nintQ.addItem(2)\nintQ.addItem(4)\nprint(intQ.getItem())\nintQ.addItem(6)\n```", "```swift\nclass GenericQueue<T>: QueueProtocol {\n    var items = [T]()\n\n    func addItem(item: T) {\n        items.append(item)\n    }\n\n    func getItem() -> T? {\n        if items.count > 0 {\n            return items.removeAtIndex(0)\n        } else {\n            return nil\n        }\n    }\n\n    func count() -> Int {\n        return items.count\n    }\n}\n```", "```swift\nvar intQ2 = GenericQueue<Int>()\nintQ2.addItem(2)\nintQ2.addItem(4)\nprint(intQ2.getItem())\nintQ2.addItem(6)\n```", "```swift\nprotocol WidgetProtocol {\n    //Code\n}\n```", "```swift\nclass MyClass<T: WidgetProtocol> {\n    var myProp: T?\n    func myFunc(myVar: T) {\n        //Code\n    }\n}\n```", "```swift\nclass MyClass {\n    var myProp: WidgetProtocol?\n    func myFunc(myVar: WidgetProtocol) {\n\n    }\n}\n```"]