- en: Working with an API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 API 一起工作
- en: 'When building iOS apps, data can be the most critical part. Typically, the
    apps you make require getting data from an online data source, known as an **Application
    Programming Interface** (**API**). In the previous chapters, we have only worked
    with a plist to supply our data. Using a plist bridges the gap to understanding
    how to work with an API, as you will see shortly. In this chapter, we will work
    with an API that is in **JavaScript Object Notation** (**JSON**) format. This
    format is typical no matter which backend service was used to create the JSON.
    In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 iOS 应用时，数据可能是最关键的部分。通常，你制作的应用需要从在线数据源获取数据，这种数据源被称为**应用程序编程接口**（**API**）。在前几章中，我们只使用
    plist 来提供我们的数据。使用 plist 可以帮助我们理解如何与 API 一起工作，正如你很快就会看到的。在本章中，我们将使用一种以**JavaScript
    对象表示法**（**JSON**）格式的 API。无论使用哪种后端服务创建 JSON，这种格式都是典型的。在本章中，我们将涵盖：
- en: What a JSON file is and the different components of this data feed
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON 文件是什么以及数据源的不同组件
- en: Passing data using segues
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 segues 传递数据
- en: What extensions are and how to use them to clean up your code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是扩展以及如何使用它们来清理你的代码
- en: For our app, we need one class to handle our data, but we need to share it with
    both our Explore View Controller and Map View Controller. Let's first understand
    the responsibility of our API Manager.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用，我们需要一个类来处理我们的数据，但我们需要与我们的 Explore 视图控制器和 Map 视图控制器共享它。让我们首先了解我们的 API
    管理器的职责。
- en: Creating an API Manager
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 API 管理器
- en: In this chapter, we will be building an API Manager. This manager will be responsible
    for anything that has to do with getting data from online. When dealing with data
    online, you will typically get it in a particular format, which you then need
    to convert into something that your app can read.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个 API 管理器。这个管理器将负责与从在线获取数据有关的所有事情。在处理在线数据时，你通常会以特定的格式获取数据，然后你需要将其转换为应用程序可以读取的格式。
- en: What is an API?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 API？
- en: A RESTful API is a web service from which an app can receive data. Typically,
    when you are dealing with APIs, such as YELP, they tend to change often. For our
    purposes, we want to use static files so that we can work on this project without
    having to be concerned about changes to the API. Therefore, most of the data we
    are going to use comes from the site, [http://opentable.herokuapp.com/](http://opentable.herokuapp.com/),
    which is not managed full time and does not change often. The site's API, however,
    is missing some data that we need; therefore, I have updated these files (which
    are in the project files for this chapter) to include that missing data.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API 是一个应用程序可以从其中接收数据的网络服务。通常，当你处理 API 时，例如 YELP，它们往往会经常更改。出于我们的目的，我们希望使用静态文件，这样我们就可以在不担心
    API 变更的情况下工作。因此，我们将使用的大部分数据来自网站 [http://opentable.herokuapp.com/](http://opentable.herokuapp.com/)，该网站不是全天候管理且不经常更改。然而，该网站的
    API 缺少我们需要的某些数据；因此，我已经更新了这些文件（这些文件在本章的项目文件中），以包含缺失的数据。
- en: APIs are typically in JSON format, and working with them is similar to working
    with plists. The transition from one to the other should be pretty seamless. Let's
    get familiar with the JSON format.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: API 通常以 JSON 格式，与它们一起工作与处理 plists 类似。从一种格式到另一种格式的转换应该相当无缝。让我们熟悉 JSON 格式。
- en: Understanding a JSON file
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 JSON 文件
- en: 'Before we write any code, we need to take a look at the structure of a simple
    JSON file. Let''s create a new group inside the `Misc` folder in the `Navigator`
    panel called `JSON`. Then, drag and drop all of the JSON files found in the project
    files for this chapter into the new `JSON` folder, by clicking on Finish in the
    screen that appears. Lastly, open up the `Charleston.json` file and let''s review
    the first part of it, including the first restaurant listing:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码之前，我们需要查看一个简单 JSON 文件的结构。让我们在“Navigator”面板中的“Misc”文件夹内创建一个新的组，命名为“JSON”。然后，通过点击出现的屏幕上的“完成”按钮，将本章项目文件中找到的所有
    JSON 文件拖放到新的“JSON”文件夹中。最后，打开“Charleston.json”文件，让我们回顾它的第一部分，包括第一个餐厅列表：
- en: '![](img/1ba669d0-d3d2-4e86-8fbd-d9391b2b6b78.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1ba669d0-d3d2-4e86-8fbd-d9391b2b6b78.png)'
- en: This file has four nodes inside it, `total_entries`, `per_page`, `current_page`,
    and `restaurants`. When you work with a feed, it will split items up into pages
    so that you are not trying to load all the data at once. This feed tells us that
    there are 67 total pages with 25 restaurants per page and that we are currently
    on page one. We do not need the first three nodes in this book since we are just
    going to load 25 restaurants.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件内部有四个节点，分别是`total_entries`、`per_page`、`current_page`和`restaurants`。当你处理一个数据源时，它会将项目分成页面，这样你就不需要一次性加载所有数据。这个数据源告诉我们总共有67页，每页有25家餐厅，并且我们现在在第1页。由于我们只是要加载25家餐厅，所以这本书中我们不需要前三个节点。
- en: The `restaurant`'s  node, on the other hand, is essential for the purposes of
    this book. The restaurant's node is an array of data, recognizable as such by
    the brackets (`[ ]`) used in the node. If you review the individual items in the
    restaurant's node, you will notice that everything needed for our app's name,
    address, city, and so on, is covered. This structure is the same as that which
    we saw in the plists earlier in this book. If you look at cuisines, you will notice
    that it is wrapped inside brackets (`[ ]`). Again, this is what we had in our
    plist data previously. We have an idea of what a JSON file looks like; let's see
    how we can work with it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相反，`restaurant`节点对于本书的目的至关重要。餐厅的节点是一个数据数组，可以通过节点中使用的括号（`[ ]`）识别出来。如果你查看餐厅节点的各个项目，你会注意到我们应用名称、地址、城市等所需的一切都被涵盖了。这种结构与我们在本书前面看到的plists中的结构相同。如果你查看菜系，你会注意到它被括号（`[
    ]`）包裹着。同样，这也就是我们之前在plist数据中看到的样子。我们已经对JSON文件的外观有了一定的了解；让我们看看我们如何与之交互。
- en: Exploring the API Manager file
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索API Manager文件
- en: 'We just created our `API Manager` folder; now, let''s create the `API Manager`
    file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了`API Manager`文件夹；现在，让我们创建`API Manager`文件：
- en: Right-click on the `Misc` folder in the `Common` folder of the Navigator panel
    and select New File.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板的`Common`文件夹中的`Misc`文件夹上右键单击，并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Swift File. Hit Next after.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS。然后，选择Swift文件。点击下一步。
- en: Name this file `RestaurantAPIManager`, and hit Create.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`RestaurantAPIManager`，然后点击创建。
- en: 'We need to define our class definition first; therefore, add the following
    to the `import` statement:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要定义我们的类定义；因此，将以下内容添加到`import`语句中：
- en: '![](img/64fe9f01-76ea-4d0b-9eff-8dcecb4ec560.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64fe9f01-76ea-4d0b-9eff-8dcecb4ec560.png)'
- en: '**Part A**: Here, we defined the class.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第A部分**：在这里，我们定义了类。'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Part B**: The `loadJSON()` method is known as a type method because it has
    the `static` keyword in front of it. Type methods are called using the dot syntax.
    Static functions cannot be overridden.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第B部分**：`loadJSON()`方法被称为类型方法，因为它前面有`static`关键字。类型方法使用点符号调用。静态函数不能被重写。'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The next bullet list explains what we need to write when we want to call the
    `loadJSON` method inside the `RestaurantAPIManager` file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个项目符号列表解释了当我们想在`RestaurantAPIManager`文件中调用`loadJSON`方法时需要编写什么。
- en: '**Part C**: Calling this method will return an array of dictionary objects.
    If this sounds familiar, it is because our plist data returns the same thing.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第C部分**：调用此方法将返回一个字典对象数组。如果这听起来很熟悉，那是因为我们的plist数据返回相同的内容。'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Part D**: On this line, we are declaring an array of dictionary objects.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第D部分**：在这一行，我们正在声明一个字典对象数组。'
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Part E**: Since we are not loading from the internet, we need to make sure
    to call the right filename. If the path is found and there is nothing wrong with
    the data, we will use the data. Otherwise, we will return an empty array with
    no dictionary objects.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第E部分**：由于我们不是从互联网上加载，我们需要确保调用正确的文件名。如果路径找到且数据没有问题，我们将使用这些数据。否则，我们将返回一个空数组，没有任何字典对象。'
- en: Here, we are using a `do...catch`. To employ it, we must utilize it with what
    is known as a try. We first try to serialize or convert the data from the JSON
    file;  if that is successful, we can then access the information inside that file.
    To obtain the restaurant items in the JSON file (all of which are located inside
    the restaurant's node), we used `json["restaurants"]`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`do...catch`。为了使用它，我们必须使用所谓的try。我们首先尝试将JSON文件中的数据序列化或转换；如果这成功了，我们就可以访问文件中的信息。为了获取JSON文件中的餐厅项目（所有这些项目都位于餐厅节点中），我们使用了`json["restaurants"]`。
- en: Next, we cast this using the `as?` as an array of dictionary objects. Also,
    since our data types are mixed, we used `AnyObject` to accept the dictionary of
    mixed data types. Finally, we set our data to the array of items. We now have
    the same structure, an array of dictionary objects that we had in the `Map` section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`as?`将其转换为字典对象数组。由于我们的数据类型是混合的，我们使用了`AnyObject`来接受混合数据类型的字典。最后，我们将数据设置为项目数组。我们现在有了与`Map`部分相同的结构，即字典对象数组。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Part F**: This `catch` will run only if there is a problem serializing the
    data from the file. If there is a problem, we will return an empty array with
    no dictionary objects. This allows for our app to keep running without crashing.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第F部分**：这个`catch`只有在从文件序列化数据有问题时才会运行。如果有问题，我们将返回一个空数组，没有字典对象。这允许我们的应用继续运行而不会崩溃。'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Part G**: Finally, if all goes well, we return the array of dictionary items
    back.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第G部分**：最后，如果一切顺利，我们将返回字典项数组的返回。'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This entire class is built so that we can pass any name we want; it will return
    data if it finds the file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 整个类都是构建的，以便我们可以传递任何我们想要的名称；如果找到文件，它将返回数据。
- en: Location list
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置列表
- en: Let's review how our app will work. A user will select a cuisine and location.
    Then, the location is passed to the Explore view. The user will get restaurants
    from the selected location filtered by the selected cuisine.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的应用将如何工作。用户将选择一种菜系和位置。然后，将位置传递到探索视图。用户将从所选位置获取经过所选菜系筛选的餐厅。
- en: If this were online, we would pass the location to the API, and the API would
    return the JSON data. As you can see, we are doing the same. When you eventually
    deal with an API, the transition of working with online data will be seamless.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是在线的，我们会将位置传递给API，API会返回JSON数据。如您所见，我们正在做同样的事情。当你最终处理API时，处理在线数据的过渡将是无缝的。
- en: Selecting a location
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择位置
- en: Therefore, as stated earlier, to get data, we need a location. To get the location,
    we need to get it from the `LocationViewController`. When a location is selected,
    we will show a checkmark. We will need this checkmark to update each time a new
    item is set. Finally, when the Done button is tapped, we need to pass this location
    to `ExploreViewController`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如前所述，要获取数据，我们需要一个位置。要获取位置，我们需要从`LocationViewController`中获取它。当选择位置时，我们将显示一个勾选标记。每次设置新项目时，我们都需要更新这个勾选标记。最后，当点击完成按钮时，我们需要将这个位置传递给`ExploreViewController`。
- en: 'Let''s update our `LocationViewController` first. We need a variable to keep
    track of the selected location. Add the following inside the `LocationViewController.swift`
    file, under the constant manager:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先更新`LocationViewController`。我们需要一个变量来跟踪所选位置。在`LocationViewController.swift`文件中的常量管理器下添加以下内容：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we need to create a new extension for `UITableViewDelegate`, as follows.
    Add the following after our `UITableViewDataSource` extension:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为`UITableViewDelegate`创建一个新的扩展，如下所示。在我们的`UITableViewDataSource`扩展之后添加以下内容：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As we discussed earlier in the book, delegates supply the behavior. Here, we
    want a behavior for when the user selects a Table View row and another behavior
    for when the user deselects the row. First, let''s add the selection behavior
    into our new extension by adding the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在书中之前讨论的，代理提供行为。这里，我们希望当用户选择表格视图行时有一个行为，当用户取消选择行时也有一个行为。首先，让我们通过添加以下代码将选择行为添加到我们新的扩展中：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we will get the cell of the selected row and set its `accessoryType`
    to a `checkmark`. Then, we will get the location and set it to the `selectedCity`
    variable. To only see the `checkmark` in our Table View cell, we need to remove
    the disclosure arrow and gray cell selection. Let''s update this by doing the
    following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将获取所选行的单元格并将其`accessoryType`设置为勾选标记。然后，我们将获取位置并将其设置为`selectedCity`变量。为了只在我们的表格视图单元格中看到勾选标记，我们需要移除披露箭头和灰色单元格选择。让我们通过以下方式更新它：
- en: Open `Explore.storyboard`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Explore.storyboard`。
- en: Select the Table View `locationCell` in the Location View Controller.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位置视图控制器中选择表格视图的`locationCell`。
- en: Select the Attributes inspector in the Utilities panel, and update the Selection
    field from Gray to None.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中选择属性检查器，并将选择字段从灰色更新为无。
- en: Next, update the Accessory field from Disclosure Indicator to None.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新访问辅助字段，从披露指示器更改为无。
- en: Adding a Header view
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标题视图
- en: 'Our Explore has a header, and we need to pass data over to it. To do that,
    we need to create a header class for it:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的探索视图有一个标题，我们需要将数据传递给它。为此，我们需要为它创建一个标题类：
- en: Right-click on the Explore folder and select New File.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击探索文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Cocoa Touch Class. Hit Next after.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建新文件模板的屏幕上，在顶部选择 iOS。然后选择 Cocoa Touch Class。点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `ExploreHeaderView`'
  id: totrans-63
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`ExploreHeaderView`
- en: 'Subclass: `UICollectionReusableView`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UICollectionReusableView`
- en: 'Also create XIB: Unchecked'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时创建 XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: 'Add the following to this file:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到该文件中：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, open the `Explore.storyboard` file and under the Identity inspector in
    the Utilities panel, update the Class to `ExploreHeaderView`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `Explore.storyboard` 文件，并在实用工具面板中的身份检查器下，将类更新为 `ExploreHeaderView`。
- en: Now, let's work on passing data from a location to explore and display the selected
    location in our header.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们处理从位置到探索的传数据，并在我们的标题中显示选定的位置。
- en: Passing a selected location back to Explore View
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将选定的位置传回探索视图
- en: 'Now, we need to be able to send the selected city back to our `ExploreViewController`.
    Therefore, we need a selected city, as well as an unwind for the Done button inside
    `ExploreViewController`. First, let''s get our selected city to display in our
    Explore view:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要能够将选定的城市发送回我们的 `ExploreViewController`。因此，我们需要一个选定的城市，以及 `ExploreViewController`
    中完成按钮的撤销操作。首先，让我们将选定的城市显示在我们的探索视图中：
- en: 'Add the following variable under the constant manager in our `ExploreViewController.swift`
    file:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `ExploreViewController.swift` 文件中的常量管理器下添加以下变量：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, open `Explore.storyboard` and select the Explore Header View in the Outline
    view.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `Explore.storyboard` 并在大纲视图中选择探索标题视图。
- en: '![](img/8c228ae7-e49a-440b-adbb-c6788dcd9d86.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c228ae7-e49a-440b-adbb-c6788dcd9d86.png)'
- en: 'Then, select the Connections inspector in the Utilities panel, and click and
    drag from the empty circle `lblLocation` under Outlets to the label in the Explore
    View Controller Header scene:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择实用工具面板中的连接检查器，并从探索视图控制器头部场景中的空圆圈 `lblLocation` 下的输出拖动到标签：
- en: '![](img/08226f33-93c5-4bbd-a825-33e80c63d0df.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08226f33-93c5-4bbd-a825-33e80c63d0df.png)'
- en: 'While we are here, let''s also update this label to say, `PLEASE SELECT A LOCATION`,
    and the label below it to say `EXPLORE`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在这里时，让我们也更新这个标签，使其显示为“请选择一个位置”，以及其下方的标签显示为“探索”：
- en: '![](img/e3a1a8ad-6850-4b0e-8c9c-d032c2388213.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3a1a8ad-6850-4b0e-8c9c-d032c2388213.png)'
- en: Next, let's unwind our Done button in our Explore View Controller.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在探索视图控制器中撤销完成按钮。
- en: Unwinding our Done button
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 撤销完成按钮
- en: 'Earlier in the book, we added an unwind for our Cancel button. Now we need
    to make it so that our Done button can also dismiss the modal, but we also want
    to capture the selected location when the user is done. Let''s add this code next:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期，我们为取消按钮添加了撤销操作。现在我们需要使完成按钮也能关闭模态，同时我们还想在用户完成时捕获选定的位置。让我们添加以下代码：
- en: 'Open the `ExploreViewController.swift` file again and, in the `private` extension
    under the `unwindLocationCancel()` function, add the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开 `ExploreViewController.swift` 文件，并在 `unwindLocationCancel()` 函数下的 `private`
    扩展中添加以下代码：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The code we just added is checking the source of the segue. If its source is
    a class of `LocationViewController`, then we want to grab the selected city and
    set the `selectedCity` variable inside `ExploreViewController` to that city. We
    then use an `if...let` statement to make sure that `selectedCity` is not `nil`;
    if it is not, then we set the label in the header to the currently selected city.
    Now, we need to hook up this `IBAction`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码正在检查 segue 的来源。如果其来源是 `LocationViewController` 的一个类，那么我们想要获取选定的城市并将
    `ExploreViewController` 中的 `selectedCity` 变量设置为该城市。然后我们使用 `if...let` 语句确保 `selectedCity`
    不是 `nil`；如果不是，则将标题中的标签设置为当前选定的城市。现在，我们需要连接这个 `IBAction`。
- en: 'In your `UICollectionViewDataSource` extension, update `collectionView:viewForSupplementaryElementOfKind:atIndexPath:`
    with the following:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `UICollectionViewDataSource` 扩展中，更新 `collectionView:viewForSupplementaryElementOfKind:atIndexPath:`
    为以下内容：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, open `Locations.storyboard`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `Locations.storyboard`。
- en: 'Now, *Ctrl* + drag from the Done button in the Location View Controller to
    Exit in the Location View Controller scene:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，*Ctrl* + 拖动从位置视图控制器中的完成按钮到场景中的退出：
- en: '![](img/31b6309a-a35c-440f-b72b-d3dd331e0951.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31b6309a-a35c-440f-b72b-d3dd331e0951.png)'
- en: 'When you let go, select `unwindLocationDoneWithSegue:` in the menu that appears:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你松开鼠标时，在出现的菜单中选择 `unwindLocationDoneWithSegue:`：
- en: '![](img/2b80d297-c248-464f-921f-7ee0c78c2ebe.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b80d297-c248-464f-921f-7ee0c78c2ebe.png)'
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*). You should now be able to select a location; when you hit Done, the Explore
    Header view should show you the selected location:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。现在你应该能够选择一个位置；当你点击“完成”时，Explore Header 视图应该显示你选定的位置：
- en: '![](img/dae8d5d2-b75e-452c-97c6-bcfb96100e9c.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dae8d5d2-b75e-452c-97c6-bcfb96100e9c.jpg)'
- en: Getting the last selected location
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取最后选定的位置
- en: 'We have a couple of issues that we need to correct under Select a location.
    You will notice that when you click on Select a location, you can check multiple
    locations. We only want the user to be able to select one location. Also, the
    checkmark next to your selected location disappears if you click on Done in Location
    View and then click to choose a location again. We need to set the last selected
    location so that it is saved when you go back to your location list. We can address
    these issues at the same time:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在“选择位置”下，我们有一些问题需要纠正。你会注意到，当你点击“选择位置”时，你可以选择多个位置。我们只想让用户能够选择一个位置。此外，如果你在位置视图中点击“完成”然后再次选择位置，你选定的位置旁边的勾选标记会消失。我们需要设置最后选定的位置，以便当你返回位置列表时能够保存。我们可以同时解决这些问题：
- en: 'Open `Explore.storyboard`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开 `Explore.storyboard`:'
- en: Select the segue that is connected to the `LocationViewController`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择与 `LocationViewController` 相连接的 segue。
- en: 'Then, select the Attributes inspector in the Utilities panel and set Identifier under
    Storyboard Segue to locationList. Then, hit *Enter*:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在实用工具面板中选择属性检查器，并将 Storyboard Segue 下的 Identifier 设置为 locationList。然后，按 *Enter*：
- en: '![](img/f077eeee-f935-4add-935c-5765f42e9f34.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f077eeee-f935-4add-935c-5765f42e9f34.png)'
- en: 'Now, select the segue that is connected to the `RestaurantViewController` and
    set Identifier to `restaurantList`. Then, hit *Enter*:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择与 `RestaurantViewController` 相连接的 segue，并将 Identifier 设置为 `restaurantList`。然后，按
    *Enter*：
- en: '![](img/be2106b9-5c44-4fdd-8c80-428fd97e7c68.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be2106b9-5c44-4fdd-8c80-428fd97e7c68.png)'
- en: 'Next, we need to set up these identifiers. We are going to update the segue
    enum, which we created in the last chapter. Add the following code inside the
    `Segue.swift` file under the `Misc` folder in the `Common` folder:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置这些标识符。我们将更新我们在上一章中创建的 segue 枚举。在 `Common` 文件夹下的 `Misc` 文件夹中的 `Segue.swift`
    文件内添加以下代码：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, open up the `LocationDataManager.swift` file and add the following code
    before the last curly brace:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开 `LocationDataManager.swift` 文件，在最后一个大括号之前添加以下代码：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method will allow us to find the location, and then obtain its index position
    within the array. We will return a tuple, which is a compound type in Swift, meaning
    that it can hold multiple values. Tuples allow you to combine different data types
    into one. The method will check the tuple to see whether or not we found the data.
    If we found the data, then we will use the index position; if not, we will not
    do anything.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此方法将允许我们找到位置，然后获取其在数组中的索引位置。我们将返回一个元组，这是 Swift 中的复合类型，意味着它可以包含多个值。元组允许你将不同的数据类型组合成一个。该方法将检查元组以确定是否找到了数据。如果找到了数据，我们将使用索引位置；如果没有，我们则不执行任何操作。
- en: 'Next, we need to check whether or not a previous location was set. Open up
    the `LocationViewController.swift` file and create the following method after
    the `viewDidLoad()` method:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要检查是否已设置了一个先前位置。打开 `LocationViewController.swift` 文件，并在 `viewDidLoad()`
    方法之后创建以下方法：
- en: '![](img/aa97e540-b16b-4448-84e6-a90d5dba8094.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa97e540-b16b-4448-84e6-a90d5dba8094.png)'
- en: 'Let''s break this method down:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这个方法：
- en: '**Part A**: In the parameters of this method, we are taking in a cell and an
    index path:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part A**: 在此方法的参数中，我们接收一个单元格和一个索引路径：'
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Part B**: Here, we are checking to make sure that the selected city is set.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part B**: 在这里，我们检查确保已设置了选定的城市。'
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Part C**: Then, we are calling the method we created in `LocationDataManager`,
    passing the selected city into the manager, and getting back a tuple of data.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part C**: 然后，我们调用在 `LocationDataManager` 中创建的方法，将选定的城市传递给管理器，并获取一个包含数据的元组。'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Part D**: Next, we are checking to see if data was found in the tuple; if
    so, we are checking to see if the selected row is the same as the position in
    the array. If the row and position are the same, we are directing the cell to
    set its accessoryType to a checkmark; otherwise, the accessoryType will be set
    to none.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part D**: 接下来，我们检查元组中是否找到了数据；如果是，我们检查选定的行是否与数组中的位置相同。如果行和位置相同，我们将指示单元格将其
    accessoryType 设置为勾选标记；否则，accessoryType 将设置为无。'
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Part E**: Finally, if no data is found, we are setting `accessoryType` to
    none. Add the following inside `cellForRowAt()` after we set the text for the
    cell:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分 E**：最后，如果没有找到数据，我们将 `accessoryType` 设置为无。在设置单元格文本后，在 `cellForRowAt()`
    中添加以下内容：'
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Build and run the project by hitting the Play button (or use *cmd* + *R*). You
    should see that you can only select one location now. However, after you select
    the location, if you click on Done in the Location view and then click to show
    locations again, your last selected location is not saved. We still need to address
    that issue, which we will do next.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。你应该看到现在只能选择一个位置。然而，在你选择位置后，如果你在位置视图中点击完成，然后再次点击以显示位置，你最后选择的位置不会被保存。我们仍然需要解决这个问题，我们将在下一步解决。
- en: Passing location and cuisine to the restaurant list
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将位置和菜系传递给餐厅列表
- en: 'Open the `ExploreViewController.swift` file, and inside the `private` extension
    add the following method above the `unwindLocationCancel()` method:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `ExploreViewController.swift` 文件，并在 `private` 扩展中 `unwindLocationCancel()`
    方法之上添加以下方法：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Our `showLocationList()` method will be called whenever our destination view
    has a Navigation Controller. Then, it checks to see if the `topViewController`
    is of the class `LocationViewController`. If either of these two statements is
    `false`, we do nothing. If both are `true`, we check the `selectedCity;`. If it
    is `nil`, then we also do nothing. If the `selectedCity` has a location, we set
    the `selectedCity` variable inside the `LocationViewController` to the `selectedCity`
    in the `ExploreViewController`. This will save the last selected location if we
    return to the locations list after having selected a location earlier.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `showLocationList()` 方法会在我们的目标视图有导航控制器时被调用。然后，它检查 `topViewController` 是否为
    `LocationViewController` 类。如果这两个语句中的任何一个为 `false`，我们就不做任何事情。如果两个都为 `true`，我们检查
    `selectedCity`。如果它是 `nil`，那么我们也不做任何事情。如果 `selectedCity` 有位置，我们将 `LocationViewController`
    中的 `selectedCity` 变量设置为 `ExploreViewController` 中的 `selectedCity`。这将保存我们在之前选择位置后返回位置列表时最后选择的位置。
- en: 'We also need to pass the selected city over to the `RestaurantViewController`.
    Therefore, add the following variables inside the `RestaurantViewController.swift`
    file above your `@IBOutlet var collectionView`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将选中的城市传递给 `RestaurantViewController`。因此，在 `RestaurantViewController.swift`
    文件中 `@IBOutlet var collectionView` 之上添加以下变量：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'While still in the `RestaurantViewController.swift` file, add the following
    code under the `viewDidLoad()` method:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在 `RestaurantViewController.swift` 文件中，在 `viewDidLoad()` 方法下添加以下代码：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `viewDidAppear()` method will get called every time we load the View Controller,
    whereas the `viewDidLoad()` method only gets called once. We can print the `selectedCity`
    variable to verify that we are, in fact, passing the location over correctly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear()` 方法会在每次加载视图控制器时被调用，而 `viewDidLoad()` 方法只会在第一次调用。我们可以打印 `selectedCity`
    变量来验证我们是否正确地传递了位置。'
- en: 'Next, open the `ExploreViewController.swift` file again and add the following
    under the `showLocationList()` method inside :'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次打开 `ExploreViewController.swift` 文件，并在 `showLocationList()` 方法内部添加以下内容：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We now check to see if the segue destination is `RestaurantViewController`,
    and we make sure that `selectedCity` is set in `ExploreViewController`. Next,
    we get the selected `indexPath` of the Collection view. Once we have that, we
    then get the item from the `ExploreDataManager` at the `index` position. Finally,
    we get the name from the item. If we get all those items back, then we pass the
    `selectedCity` and `selectedType` variables to the `RestaurantViewController`.
    If we do not, then we will display an alert, letting the user know that they need
    to select a location first. Let''s create the three methods that will display
    such an alert:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在检查是否目标视图控制器是 `RestaurantViewController`，并确保 `selectedCity` 在 `ExploreViewController`
    中已设置。接下来，我们获取集合视图的选中 `indexPath`。一旦我们有了它，我们就从 `ExploreDataManager` 的 `index` 位置获取项目。最后，我们从项目获取名称。如果我们获取所有这些项目，那么我们将
    `selectedCity` 和 `selectedType` 变量传递给 `RestaurantViewController`。如果没有，我们将显示一个警告框，让用户知道他们需要先选择一个位置。让我们创建三个将显示此类警告的方法：
- en: 'First, we will create the actual alert. While still in the `ExploreViewController`,
    add the following code before `unwindLocationCancel()`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建实际的警告框。仍然在 `ExploreViewController` 中，在 `unwindLocationCancel()` 之前添加以下代码：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we need to check that we have a location; if not, we want to make sure
    that the user cannot go to the restaurant list. Inside the `ExploreViewController`,
    add the following method after the `viewDidLoad()` method:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要检查我们是否有位置；如果没有，我们想要确保用户不能访问餐厅列表。在 `ExploreViewController` 中，在 `viewDidLoad()`
    方法之后添加以下方法：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Here, we check whether the segue equals `restaurantList;`. If it does, we check
    to see if the `selectedCity` variable is set. If we return `true`, then the segue
    will be performed, and we will go to the restaurant list. If we return `false`,
    then we display our alert, letting the users know that they need to select a location
    first.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们检查 segue 是否等于 `restaurantList;`。如果是，我们检查 `selectedCity` 变量是否已设置。如果返回 `true`，则执行
    segue，并将我们导向餐厅列表。如果返回 `false`，则显示我们的警报，让用户知道他们需要先选择一个位置。
- en: 'Lastly, we need to show either the location list or restaurant list, depending
    on whether or not the user chose a location before trying to see the restaurant
    list. Add the following method after `viewDidLoad()`, and before the `shouldPerformSegue`
    method we just added:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要根据用户在尝试查看餐厅列表之前是否选择了位置来显示位置列表或餐厅列表。在 `viewDidLoad()` 方法之后，在刚刚添加的 `shouldPerformSegue`
    方法之前添加以下方法：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `prepare()` method checks which identifier is called. If it is the location
    list, then we call the `showLocationList()` method; if it is the restaurant list,
    then we call the `showRestaurantListing()` method.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepare()` 方法检查哪个标识符被调用。如果是位置列表，则调用 `showLocationList()` 方法；如果是餐厅列表，则调用 `showRestaurantListing()`
    方法。'
- en: 'Now, build and run the project by hitting the Play button (or use *cmd* + *R*).
    If you try to select a cuisine first, you should not be able to go to the restaurant
    list. Instead, you should receive an alert, stating that you need to select a
    location:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过点击播放按钮（或使用 *cmd* + *R*）构建和运行项目。如果你首先尝试选择菜系，你应该无法访问餐厅列表。相反，你应该收到一个警报，指出你需要先选择一个位置：
- en: '![](img/5e9970d4-1084-4194-bf57-fdfa4b84ee4f.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e9970d4-1084-4194-bf57-fdfa4b84ee4f.png)'
- en: If you pick a location, hit Done, and then tap the locations list again, you
    should see your location still selected. Now, if you select a cuisine, you should
    be directed to the restaurant listing and see the selected location printing in
    the Debug panel. If you do not see that panel, you can open it using the toggle
    or *cmd* + *Shift* + *Y* .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择一个位置，点击完成，然后再次点击位置列表，你应该看到你的位置仍然被选中。现在，如果你选择一种菜系，你应该被导向餐厅列表，并在调试面板中看到选中的位置。如果你看不到该面板，你可以通过切换或
    *cmd* + *Shift* + *Y* 打开它。
- en: '![](img/77999151-869f-4e1e-9627-fc12eefdf1f0.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77999151-869f-4e1e-9627-fc12eefdf1f0.png)'
- en: 'Now that we have the location, we need to check our `RestaurantAPIManager`
    for data. Therefore, let''s update our `print` statement inside the `RestaurantViewController`
    by revising the `viewDidAppear()` method to the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了位置信息，我们需要检查我们的 `RestaurantAPIManager` 以获取数据。因此，让我们更新 `RestaurantViewController`
    中的 `print` 语句，通过修改 `viewDidAppear()` 方法如下：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You should now see the type selected, along with an array of dictionary objects,
    in the Debug panel:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该在调试面板中看到选中的类型，以及一个字典对象数组：
- en: '![](img/94899a3b-6f88-480a-9073-383601230f9a.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94899a3b-6f88-480a-9073-383601230f9a.png)'
- en: Now that we have our data, let's get that data to display in our `RestaurantViewController`.
    To do this, we need to set up our cell as well as a restaurant data manager. The
    restaurant data manager, rather than the `RestaurantViewController`, will be the
    class that uses our `RestaurantAPIManager`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据，让我们将数据设置到我们的 `RestaurantViewController` 中显示。为此，我们需要设置单元格以及餐厅数据管理器。餐厅数据管理器，而不是
    `RestaurantViewController`，将是使用我们的 `RestaurantAPIManager` 的类。
- en: Creating our restaurant cell class
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的餐厅单元格类
- en: 'Now, we need to create a file so that we can connect to the cell:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个文件，以便我们可以连接到单元格：
- en: Inside the `Restaurants` folder in the Navigator panel, right-click on the `View`
    folder and select New File.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中的 `Restaurants` 文件夹中，右键单击 `View` 文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then, hit Next.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建新文件的选择模板屏幕上，选择顶部的 iOS，然后选择 Cocoa Touch Class。然后，点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `RestaurantCell`'
  id: totrans-159
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`RestaurantCell`
- en: 'Subclass: `UICollectionViewCell`'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UICollectionViewCell`
- en: 'Also create XIB file: Unchecked'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还创建 XIB 文件：未选中
- en: 'Language: `` `Swift` ``'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`` `Swift` ``
- en: 'Click Next and then Create. Your file should look like the following:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。你的文件应该看起来像以下这样：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Inside the class declaration, add the following:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类声明中，添加以下内容：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save the file.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Now that our file is set up, let's get our outlets connected.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了文件，让我们将我们的输出口连接起来。
- en: Setting up restaurant list cell outlets
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置餐厅列表单元格输出口
- en: 'We need to set up our `restaurantCell` outlets:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置我们的 `restaurantCell` 输出口：
- en: Open `Explore.storyboard` and select our `restaurantCell` again in the Outline
    view.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Explore.storyboard` 并在大纲视图中再次选择我们的 `restaurantCell`。
- en: Now, in the Utilities panel, select the Identity inspector.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在实用工具面板中，选择身份检查器。
- en: Under Custom Class, in the Class drop-down menu, select RestaurantCell and hit
    *Enter* in order connect the Cell to the class.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自定义类下，在类下拉菜单中选择 RestaurantCell 并按 *Enter* 键以将单元格连接到类。
- en: Now, select the Connections inspector.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在请选择连接检查器。
- en: 'Click on and drag from the empty circle `lblTitle` under Outlets to the top
    label in our `restaurantCell`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并从输出口下的空圆圈 `lblTitle` 拖动到 `restaurantCell` 顶部的标签：
- en: '![](img/459cb759-c69b-4723-a20c-490d42223a1b.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/459cb759-c69b-4723-a20c-490d42223a1b.png)'
- en: 'Click on and drag from the empty circle `lblCuisine` under Outlets to the other
    label in our `restaurantCell`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并从输出口下的空圆圈 `lblCuisine` 拖动到 `restaurantCell` 中的另一个标签：
- en: '![](img/a5ce9f0a-c4e7-4d2f-96aa-bc86251daaa0.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5ce9f0a-c4e7-4d2f-96aa-bc86251daaa0.png)'
- en: 'Click on and drag from the empty circle `imgRestaurant` under Outlets to the
    image in our `restaurantCell`:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并从输出口下的空圆圈 `imgRestaurant` 拖动到 `restaurantCell` 中的图片：
- en: '![](img/0c755fdd-659c-4c0d-968e-43d64b3fe119.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c755fdd-659c-4c0d-968e-43d64b3fe119.png)'
- en: Now that we have our `restaurantListCell` outlets set up, let's get some data
    into our cell. We previously created our `RestaurantItem.swift` file; we will
    use this in our restaurant list.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 `restaurantListCell` 输出口，让我们将一些数据放入单元格中。我们之前创建了 `RestaurantItem.swift`
    文件；我们将在餐厅列表中使用这个文件。
- en: Creating a restaurant data manager
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建餐厅数据管理器
- en: 'We need to create a data manager for our restaurants, but before we do that
    we need to update a few things. In Swift 4, we have a more natural way to parse
    JSON using what is called **Decodable**.  We need first to update our `RestaurantItem`,
    but before we get into what this code looks like, our `RestaurantItem` needs to
    conform to Decodable. Open `RestaurantItem`. Open `RestaurantItem` and update
    it to the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们的餐厅创建一个数据管理器，但在我们这样做之前，我们需要更新一些事情。在 Swift 4 中，我们有一个更自然的方式来解析 JSON，这被称为
    **Decodable**。首先，我们需要更新我们的 `RestaurantItem`，但在我们深入了解这段代码之前，我们的 `RestaurantItem`
    需要遵守 Decodable 协议。打开 `RestaurantItem`。打开 `RestaurantItem` 并更新如下：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now we have a `Location` object that returns an `RestaurantItems` array, just
    like our JSON data.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个返回 `RestaurantItems` 数组的 `Location` 对象，就像我们的 JSON 数据一样。
- en: 'Let''s create the `RestaurantDataManager` file now:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建 `RestaurantDataManager` 文件：
- en: Right-click on the `Restaurants` folder and select New File.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Restaurants` 文件夹并选择新建文件。
- en: 'Inside the Choose a template for your new file screen, select iOS at the top
    and then Swift File. Then, hit Next:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕内，顶部选择 iOS，然后选择 Swift 文件。然后，点击下一步：
- en: Name this file `RestaurantDataManager`, and hit Create.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `RestaurantDataManager` 并点击创建。
- en: 'We need to define our class definition first, so add the following under the
    `import` statement in this new file:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先定义我们的类定义，因此在新文件中的 `import` 语句下添加以下内容：
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Inside the class declaration, add the following variable:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在类声明中添加以下变量：
- en: '[PRE33]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we keep our array `private`, since there is no reason to have to access
    this outside of the class.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们保持我们的数组 `private`，因为没有必要在类外部访问这个。
- en: 'Now, let''s add the following three methods:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加以下三个方法：
- en: '[PRE34]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The first method here differs from the one we looked at in `ExploreDataManager`,
    whereas the last two methods here are the same as those in `ExploreDataManager`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里第一个方法与我们之前在 `ExploreDataManager` 中看到的方法不同，而这里的最后两个方法与 `ExploreDataManager`
    中的方法相同。
- en: '![](img/17ef04dd-438b-486e-9764-778fede6ebcf.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17ef04dd-438b-486e-9764-778fede6ebcf.png)'
- en: 'Let''s break these methods down to better understand what we are doing:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这些方法，以便更好地理解我们在做什么：
- en: '**Part A**: In the parameters of this method, we are passing in a cell and
    an index path.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part A**：在这个方法的参数中，我们传递了一个单元格和一个索引路径。'
- en: '[PRE35]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Part B**: This function is pretty long; however, we are simply fetching restaurants
    with a location as a filter. We have a closure block, which will allow us to let
    the function run until it is complete.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Part B**：这个函数相当长；然而，我们只是在用位置作为过滤器获取餐厅。我们有一个闭包块，这将允许函数运行直到完成。'
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Part C**: In this parameter, we are setting a default. If we do not pass
    anything into this parameter, it will use `All`; otherwise, it will use whatever
    we give it.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分C**：在这个参数中，我们设置了一个默认值。如果我们不向这个参数传递任何内容，它将使用`All`；否则，它将使用我们给出的任何内容。'
- en: '[PRE37]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you type your code, Xcode will provide code hints (choices) that it believes
    that you might want. When you type this method, Xcode gives you two hints, one
    that includes the `withFilter` parameter, and one that does not:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写代码时，Xcode会提供它认为你可能想要的代码提示（选项）。当你输入这个方法时，Xcode会给你两个提示，一个包含`withFilter`参数，另一个不包含：
- en: '![](img/b8864c73-93a1-4443-8480-e4d2fe0b67b3.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b8864c73-93a1-4443-8480-e4d2fe0b67b3.png)'
- en: '**Part D**: Here, we get restaurants from the JSON file.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分D**：在这里，我们从JSON文件中获取餐厅。'
- en: '[PRE38]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Part E**: Here, we are filtering the restaurants by cuisine. Since our restaurants
    have multiple cuisines, we must check each cuisine, which is why we use contains.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分E**：在这里，我们正在通过菜系过滤餐厅。由于我们的餐厅有多个菜系，我们必须检查每个菜系，这就是为什么我们使用contains。'
- en: '[PRE39]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Part F**: This is used to tell our method that we are finished.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分F**：这是用来告诉我们的方法我们已经完成的。'
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Part G**: This method tells us how many restaurant items we have.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分G**：这个方法告诉我们我们有多少个餐厅项目。'
- en: '[PRE41]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Part H**: This method allows us to get the restaurant at the index position
    at which it is located.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分H**：这个方法允许我们获取位于索引位置的餐厅。'
- en: '[PRE42]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now we have a greater understanding of our restaurant data manager. We have
    done a lot of code, and some of it may not make full sense, but as long as you
    have a basic understanding then you will be fine.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对餐厅数据管理器有了更深入的了解。我们已经编写了大量的代码，其中一些可能并不完全有意义，但只要你对基本概念有基本的理解，你就没问题。
- en: Now we need to get the data displaying in our restaurant list. One of the most
    common things when displaying data is how to handle a Table View or Collection
    View when there is no data. Some of the filtering we are doing may return no results,
    so we should handle both cases. We are going to do this next.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要获取显示在餐厅列表中的数据。在显示数据时，最常见的事情之一是如何处理没有数据时的Table View或Collection View。我们正在执行的一些过滤可能不会返回任何结果，因此我们应该处理这两种情况。我们将在下一步中这样做。
- en: Handling no data
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理无数据
- en: 'It is common to want to create a custom view that you can reuse, but also have
    a visual representation of it as well. There are two common ways to do this; the
    first way we will do now, and the other we will do later in the book. You can
    create a `UIView` that comes with a **XIB** (pronounced zib or nib). This was
    the common way to create elements before storyboards, and it is still effective
    today. Let''s create one now:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 想要创建一个可重用且具有可视表示的视图是很常见的，有两种常见的方法来做这件事；我们现在将采用第一种方法，而另一种方法将在本书的后面部分介绍。你可以创建一个带有**XIB**（发音为zib或nib）的`UIView`。这是在storyboards之前创建元素的一种常见方法，至今仍然有效。现在让我们创建一个：
- en: Right-click on the `Misc` folder and select New Group and call it `No Data`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Misc`文件夹，选择新建组并命名为`No Data`。
- en: Then, right-click on the `No Data` folder and create a new file.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键点击`No Data`文件夹并创建一个新文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Cocoa Touch Class. Hit Next after.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，顶部选择iOS。然后，选择Cocoa Touch Class。点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `NoDataView`'
  id: totrans-227
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`NoDataView`
- en: 'Subclass: `UIView`'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIView`
- en: 'Language: `Swift`'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: Next, right-click on the `No Data` folder again and create a new file.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，再次右键点击`No Data`文件夹并创建一个新文件。
- en: Inside the Choose a template for your new file screen, select **iOS** at the
    top. Then, select View under User Interface. Hit Next after.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕中，顶部选择**iOS**。然后，在用户界面下选择视图。点击下一步。
- en: Name the file `NoDataView` and hit Create.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`NoDataView`并点击创建。
- en: 'First, open the `NoDataView.swift` file and add the following into this file:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`NoDataView.swift`文件，并将以下内容添加到该文件中：
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Our two `init` methods are required; just simply call `setupView()`. The `loadViewFromNib()`
    method is used to get our XIB file. Our `setupView()` is used to take the NIB
    and add it to the `UIView()`. Finally, we have two methods that set up our two
    labels. The first four methods are boilerplate code that you will write every
    time you want to create a `UIView` with a NIB (XIB) file. Next, let''s get this
    set up:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个`init`方法；只需简单地调用`setupView()`。`loadViewFromNib()`方法用于获取我们的XIB文件。我们的`setupView()`用于将NIB添加到`UIView()`。最后，我们有两个设置两个标签的方法。前四个方法是样板代码，每次你想使用NIB（XIB）文件创建`UIView`时都会编写。接下来，让我们设置以下内容：
- en: Open `NoDataView.xib`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NoDataView.xib`。
- en: Select Files Owner in the Outline. Then, open the Identity inspector and update
    Class to `NoDataView` and hit *Enter.*
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中选择文件所有者。然后，打开身份检查器并将类更新为`NoDataView`并按*Enter*。
- en: Next, in the filter field of the object library, type `label`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在对象库的过滤器字段中输入`label`。
- en: Then, drag out two labels into the view.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将两个标签拖放到视图中。
- en: 'Select one of the labels; then, in the Attributes inspector, update the following
    values:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个标签；然后，在属性检查器中更新以下值：
- en: 'Text: Add `TITLE GOES HERE` into the empty text field under the text'
  id: totrans-242
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本：将`标题放置于此`添加到文本下的空文本字段中
- en: 'Color: `Black`'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色：`黑色`
- en: 'Alignment: `Center`'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐：`居中`
- en: 'Font: `Avenir Next Condensed Bold 26`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体：`Avenir Next Condensed Bold 26`
- en: 'Then in the Size inspector, update the following values:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在大小检查器中更新以下值：
- en: 'Width: `355`'
  id: totrans-247
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`355`
- en: 'Height: `36`'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`36`
- en: 'Select one of the labels; then, in the Attributes inspector, update the following
    values:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个标签；然后，在属性检查器中更新以下值：
- en: 'Text: Add `TITLE GOES HERE` into the empty text field under the text'
  id: totrans-250
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本：将`标题放置于此`添加到文本下的空文本字段中
- en: 'Color: `Black`'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色：`黑色`
- en: 'Alignment: `Center`'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐：`居中`
- en: 'Font: `Avenir Next Condensed Regular 17`'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体：`Avenir Next Condensed Regular 17`
- en: 'Then in the Size inspector, update the following values:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在大小检查器中更新以下值：
- en: 'Width: `355`'
  id: totrans-255
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宽度：`355`
- en: 'Height: `21`'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度：`21`
- en: Select both labels and then the Pin icon. Enter the value of Height (should
    be checked).
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两个标签然后点击固定图标。输入高度值（应该被勾选）。
- en: Now with both labels selected, hit the Stack View icon or you can go to Editor |
    Embed In | Stack View.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在同时选择两个标签，点击堆叠视图图标，或者你可以转到编辑器 | 嵌入 | 堆叠视图。
- en: 'Select the Stack View in the Outline view, and then the Pin icon. Enter the
    following values:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中选择堆叠视图，然后选择固定图标。输入以下值：
- en: 'Right: `10`'
  id: totrans-260
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右：`10`
- en: 'Left: `` `10` ``'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左：`` `10` ``
- en: 'Then, the Align icon. Enter the following values:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，对齐图标。输入以下值：
- en: 'Horizontally in container: (should be checked)'
  id: totrans-263
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中水平放置：（应该被勾选）
- en: 'Vertically in container: (should be checked)'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中垂直放置：（应该被勾选）
- en: Select the Files Owner in the Outline view.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大纲视图中选择文件所有者。
- en: Then, open the Identity inspector and connect `lblTitle` to the label that says
    `TITLE GOES HERE`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开身份检查器并将`lblTitle`连接到显示`标题放置于此`的标签。
- en: Connect `lblDesc` to the other label.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lblDesc`连接到另一个标签。
- en: 'When you are done, you should see the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你应该看到以下内容：
- en: '![](img/0d5fd76a-e155-495c-b5c0-5ba3be44787e.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0d5fd76a-e155-495c-b5c0-5ba3be44787e.png)'
- en: Now, let's finally connect everything. Open the `RestaurantViewController.swift`
    file.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们最终连接一切。打开`RestaurantViewController.swift`文件。
- en: 'Above the `selectedRestaurant` variable, add the following:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`selectedRestaurant`变量上方添加以下内容：
- en: '[PRE44]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Next, add the following method inside the `private` extension:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`private`扩展内部添加以下方法：
- en: '[PRE45]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This method is checking to see if we have a selected location and a filter.
    Then, we run the fetch method we created earlier. If we have items, we make sure
    our background view is `nil`. If not, we will create our `NoDataView` and set
    it to display `No restaurants found`. Finally, we reload the Collection View.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检查我们是否有选定的位置和过滤器。然后，我们运行我们之前创建的获取方法。如果有项目，我们确保我们的背景视图是`nil`。如果没有，我们将创建我们的`NoDataView`并设置它显示`没有餐厅找到`。最后，我们重新加载集合视图。
- en: 'Next, lets update `-collectionView:cellForItemAtIndexPath:` by adding the following:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过添加以下内容来更新`-collectionView:cellForItemAtIndexPath:`：
- en: '[PRE46]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, we are just passing data into our cell. We are displaying the title, cuisine,
    and the image.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是将数据传递到我们的单元格中。我们显示标题、菜系和图片。
- en: 'Finally, update `-collectionView:numberOfItemsInSection:` to the following:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`-collectionView:numberOfItemsInSection:`更新为以下内容：
- en: '[PRE47]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Build and run the project, and you should now see the following either with
    data or without:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行项目，你现在应该看到以下内容，无论是带数据还是不带：
- en: '![](img/3ba090ad-ef49-4193-a6d8-ef862e65f652.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ba090ad-ef49-4193-a6d8-ef862e65f652.png)'
- en: 'Before we wrap it up, let''s add one more thing. When you select a location,
    let''s display it on this view using the new iOS 11 large titles. Add the following
    into the private extension under `createData()`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，让我们再添加一个功能。当你选择一个位置时，让我们使用新的iOS 11大标题在这个视图中显示它。将以下内容添加到`createData()`下的私有扩展中：
- en: '[PRE48]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, call `setupTitle()` after `createData` in the `viewDidAppear()` method.
    Build and run the project again, and you should now see the selected city. When
    you scroll, the large title will appear in the title view:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`viewDidAppear()`方法中调用`setupTitle()`之后，再次构建并运行项目，你现在应该能看到选定的城市。当你滚动时，大标题将出现在标题视图中：
- en: '![](img/981c2be4-45de-4de9-b5f9-9d3582c5c3c0.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/981c2be4-45de-4de9-b5f9-9d3582c5c3c0.png)'
- en: We are done with this chapter; good work. We did a lot, but you should be starting
    to see this app coming to life.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这一章；做得好。我们做了很多，但你应该开始看到这个应用逐渐变得生动起来。
- en: Summary
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Well, we finally have data working in our app. We are not using a service, but
    if we wanted to, it would not be hard to add it. Working with local JSON files
    is the same as working with an API feed. You should feel confident having to do
    either. One thing I love to do is when I know what the feed is like, but I do
    not want to write that portion yet, I will create static JSON files of the feed
    and work with those. This allows me to focus on getting the app to where it needs
    to be, and not be stopped because of the API data layer.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们终于让数据在我们的应用中工作起来了。我们没有使用服务，但如果需要，添加它并不困难。使用本地JSON文件与使用API数据源相同。你应该对执行任一操作都感到自信。我喜欢做的一件事是，当我知道数据源的样子，但不想立即编写那部分代码时，我会创建静态的JSON文件来模拟数据源，并使用这些文件进行工作。这让我能够专注于将应用带到需要的状态，而不会因为API数据层而受阻。
- en: In this chapter, we learned what JSON is and how to use that JSON feed to make
    data for our app. We also looked at how to pass data using segues. Finally, we
    looked at extensions and how they are useful for cleaning up and organizing code.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了什么是JSON以及如何使用该JSON数据源为我们的应用制作数据。我们还探讨了如何通过segues传递数据。最后，我们探讨了扩展以及它们在清理和组织代码方面的有用性。
- en: In the next chapter, we will look at how to display even more data.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何显示更多数据。
