- en: Working with an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building iOS apps, data can be the most critical part. Typically, the
    apps you make require getting data from an online data source, known as an **Application
    Programming Interface** (**API**). In the previous chapters, we have only worked
    with a plist to supply our data. Using a plist bridges the gap to understanding
    how to work with an API, as you will see shortly. In this chapter, we will work
    with an API that is in **JavaScript Object Notation** (**JSON**) format. This
    format is typical no matter which backend service was used to create the JSON.
    In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: What a JSON file is and the different components of this data feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data using segues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What extensions are and how to use them to clean up your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our app, we need one class to handle our data, but we need to share it with
    both our Explore View Controller and Map View Controller. Let's first understand
    the responsibility of our API Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an API Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be building an API Manager. This manager will be responsible
    for anything that has to do with getting data from online. When dealing with data
    online, you will typically get it in a particular format, which you then need
    to convert into something that your app can read.
  prefs: []
  type: TYPE_NORMAL
- en: What is an API?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A RESTful API is a web service from which an app can receive data. Typically,
    when you are dealing with APIs, such as YELP, they tend to change often. For our
    purposes, we want to use static files so that we can work on this project without
    having to be concerned about changes to the API. Therefore, most of the data we
    are going to use comes from the site, [http://opentable.herokuapp.com/](http://opentable.herokuapp.com/),
    which is not managed full time and does not change often. The site's API, however,
    is missing some data that we need; therefore, I have updated these files (which
    are in the project files for this chapter) to include that missing data.
  prefs: []
  type: TYPE_NORMAL
- en: APIs are typically in JSON format, and working with them is similar to working
    with plists. The transition from one to the other should be pretty seamless. Let's
    get familiar with the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding a JSON file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we write any code, we need to take a look at the structure of a simple
    JSON file. Let''s create a new group inside the `Misc` folder in the `Navigator`
    panel called `JSON`. Then, drag and drop all of the JSON files found in the project
    files for this chapter into the new `JSON` folder, by clicking on Finish in the
    screen that appears. Lastly, open up the `Charleston.json` file and let''s review
    the first part of it, including the first restaurant listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ba669d0-d3d2-4e86-8fbd-d9391b2b6b78.png)'
  prefs: []
  type: TYPE_IMG
- en: This file has four nodes inside it, `total_entries`, `per_page`, `current_page`,
    and `restaurants`. When you work with a feed, it will split items up into pages
    so that you are not trying to load all the data at once. This feed tells us that
    there are 67 total pages with 25 restaurants per page and that we are currently
    on page one. We do not need the first three nodes in this book since we are just
    going to load 25 restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: The `restaurant`'s  node, on the other hand, is essential for the purposes of
    this book. The restaurant's node is an array of data, recognizable as such by
    the brackets (`[ ]`) used in the node. If you review the individual items in the
    restaurant's node, you will notice that everything needed for our app's name,
    address, city, and so on, is covered. This structure is the same as that which
    we saw in the plists earlier in this book. If you look at cuisines, you will notice
    that it is wrapped inside brackets (`[ ]`). Again, this is what we had in our
    plist data previously. We have an idea of what a JSON file looks like; let's see
    how we can work with it.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the API Manager file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just created our `API Manager` folder; now, let''s create the `API Manager`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder in the `Common` folder of the Navigator panel
    and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Swift File. Hit Next after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `RestaurantAPIManager`, and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to define our class definition first; therefore, add the following
    to the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64fe9f01-76ea-4d0b-9eff-8dcecb4ec560.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Part A**: Here, we defined the class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: The `loadJSON()` method is known as a type method because it has
    the `static` keyword in front of it. Type methods are called using the dot syntax.
    Static functions cannot be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next bullet list explains what we need to write when we want to call the
    `loadJSON` method inside the `RestaurantAPIManager` file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part C**: Calling this method will return an array of dictionary objects.
    If this sounds familiar, it is because our plist data returns the same thing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: On this line, we are declaring an array of dictionary objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: Since we are not loading from the internet, we need to make sure
    to call the right filename. If the path is found and there is nothing wrong with
    the data, we will use the data. Otherwise, we will return an empty array with
    no dictionary objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we are using a `do...catch`. To employ it, we must utilize it with what
    is known as a try. We first try to serialize or convert the data from the JSON
    file;  if that is successful, we can then access the information inside that file.
    To obtain the restaurant items in the JSON file (all of which are located inside
    the restaurant's node), we used `json["restaurants"]`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we cast this using the `as?` as an array of dictionary objects. Also,
    since our data types are mixed, we used `AnyObject` to accept the dictionary of
    mixed data types. Finally, we set our data to the array of items. We now have
    the same structure, an array of dictionary objects that we had in the `Map` section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Part F**: This `catch` will run only if there is a problem serializing the
    data from the file. If there is a problem, we will return an empty array with
    no dictionary objects. This allows for our app to keep running without crashing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Part G**: Finally, if all goes well, we return the array of dictionary items
    back.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This entire class is built so that we can pass any name we want; it will return
    data if it finds the file.
  prefs: []
  type: TYPE_NORMAL
- en: Location list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's review how our app will work. A user will select a cuisine and location.
    Then, the location is passed to the Explore view. The user will get restaurants
    from the selected location filtered by the selected cuisine.
  prefs: []
  type: TYPE_NORMAL
- en: If this were online, we would pass the location to the API, and the API would
    return the JSON data. As you can see, we are doing the same. When you eventually
    deal with an API, the transition of working with online data will be seamless.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Therefore, as stated earlier, to get data, we need a location. To get the location,
    we need to get it from the `LocationViewController`. When a location is selected,
    we will show a checkmark. We will need this checkmark to update each time a new
    item is set. Finally, when the Done button is tapped, we need to pass this location
    to `ExploreViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our `LocationViewController` first. We need a variable to keep
    track of the selected location. Add the following inside the `LocationViewController.swift`
    file, under the constant manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to create a new extension for `UITableViewDelegate`, as follows.
    Add the following after our `UITableViewDataSource` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As we discussed earlier in the book, delegates supply the behavior. Here, we
    want a behavior for when the user selects a Table View row and another behavior
    for when the user deselects the row. First, let''s add the selection behavior
    into our new extension by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we will get the cell of the selected row and set its `accessoryType`
    to a `checkmark`. Then, we will get the location and set it to the `selectedCity`
    variable. To only see the `checkmark` in our Table View cell, we need to remove
    the disclosure arrow and gray cell selection. Let''s update this by doing the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Explore.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Table View `locationCell` in the Location View Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Attributes inspector in the Utilities panel, and update the Selection
    field from Gray to None.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, update the Accessory field from Disclosure Indicator to None.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a Header view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our Explore has a header, and we need to pass data over to it. To do that,
    we need to create a header class for it:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Explore folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Cocoa Touch Class. Hit Next after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ExploreHeaderView`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionReusableView`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, open the `Explore.storyboard` file and under the Identity inspector in
    the Utilities panel, update the Class to `ExploreHeaderView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's work on passing data from a location to explore and display the selected
    location in our header.
  prefs: []
  type: TYPE_NORMAL
- en: Passing a selected location back to Explore View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to be able to send the selected city back to our `ExploreViewController`.
    Therefore, we need a selected city, as well as an unwind for the Done button inside
    `ExploreViewController`. First, let''s get our selected city to display in our
    Explore view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following variable under the constant manager in our `ExploreViewController.swift`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Next, open `Explore.storyboard` and select the Explore Header View in the Outline
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8c228ae7-e49a-440b-adbb-c6788dcd9d86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the Connections inspector in the Utilities panel, and click and
    drag from the empty circle `lblLocation` under Outlets to the label in the Explore
    View Controller Header scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08226f33-93c5-4bbd-a825-33e80c63d0df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While we are here, let''s also update this label to say, `PLEASE SELECT A LOCATION`,
    and the label below it to say `EXPLORE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3a1a8ad-6850-4b0e-8c9c-d032c2388213.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's unwind our Done button in our Explore View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Unwinding our Done button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier in the book, we added an unwind for our Cancel button. Now we need
    to make it so that our Done button can also dismiss the modal, but we also want
    to capture the selected location when the user is done. Let''s add this code next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ExploreViewController.swift` file again and, in the `private` extension
    under the `unwindLocationCancel()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The code we just added is checking the source of the segue. If its source is
    a class of `LocationViewController`, then we want to grab the selected city and
    set the `selectedCity` variable inside `ExploreViewController` to that city. We
    then use an `if...let` statement to make sure that `selectedCity` is not `nil`;
    if it is not, then we set the label in the header to the currently selected city.
    Now, we need to hook up this `IBAction`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `UICollectionViewDataSource` extension, update `collectionView:viewForSupplementaryElementOfKind:atIndexPath:`
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, open `Locations.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, *Ctrl* + drag from the Done button in the Location View Controller to
    Exit in the Location View Controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31b6309a-a35c-440f-b72b-d3dd331e0951.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you let go, select `unwindLocationDoneWithSegue:` in the menu that appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b80d297-c248-464f-921f-7ee0c78c2ebe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*). You should now be able to select a location; when you hit Done, the Explore
    Header view should show you the selected location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dae8d5d2-b75e-452c-97c6-bcfb96100e9c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting the last selected location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a couple of issues that we need to correct under Select a location.
    You will notice that when you click on Select a location, you can check multiple
    locations. We only want the user to be able to select one location. Also, the
    checkmark next to your selected location disappears if you click on Done in Location
    View and then click to choose a location again. We need to set the last selected
    location so that it is saved when you go back to your location list. We can address
    these issues at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Explore.storyboard`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the segue that is connected to the `LocationViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, select the Attributes inspector in the Utilities panel and set Identifier under
    Storyboard Segue to locationList. Then, hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f077eeee-f935-4add-935c-5765f42e9f34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, select the segue that is connected to the `RestaurantViewController` and
    set Identifier to `restaurantList`. Then, hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be2106b9-5c44-4fdd-8c80-428fd97e7c68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set up these identifiers. We are going to update the segue
    enum, which we created in the last chapter. Add the following code inside the
    `Segue.swift` file under the `Misc` folder in the `Common` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open up the `LocationDataManager.swift` file and add the following code
    before the last curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This method will allow us to find the location, and then obtain its index position
    within the array. We will return a tuple, which is a compound type in Swift, meaning
    that it can hold multiple values. Tuples allow you to combine different data types
    into one. The method will check the tuple to see whether or not we found the data.
    If we found the data, then we will use the index position; if not, we will not
    do anything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to check whether or not a previous location was set. Open up
    the `LocationViewController.swift` file and create the following method after
    the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa97e540-b16b-4448-84e6-a90d5dba8094.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break this method down:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: In the parameters of this method, we are taking in a cell and an
    index path:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: Here, we are checking to make sure that the selected city is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: Then, we are calling the method we created in `LocationDataManager`,
    passing the selected city into the manager, and getting back a tuple of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: Next, we are checking to see if data was found in the tuple; if
    so, we are checking to see if the selected row is the same as the position in
    the array. If the row and position are the same, we are directing the cell to
    set its accessoryType to a checkmark; otherwise, the accessoryType will be set
    to none.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: Finally, if no data is found, we are setting `accessoryType` to
    none. Add the following inside `cellForRowAt()` after we set the text for the
    cell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the project by hitting the Play button (or use *cmd* + *R*). You
    should see that you can only select one location now. However, after you select
    the location, if you click on Done in the Location view and then click to show
    locations again, your last selected location is not saved. We still need to address
    that issue, which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Passing location and cuisine to the restaurant list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `ExploreViewController.swift` file, and inside the `private` extension
    add the following method above the `unwindLocationCancel()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Our `showLocationList()` method will be called whenever our destination view
    has a Navigation Controller. Then, it checks to see if the `topViewController`
    is of the class `LocationViewController`. If either of these two statements is
    `false`, we do nothing. If both are `true`, we check the `selectedCity;`. If it
    is `nil`, then we also do nothing. If the `selectedCity` has a location, we set
    the `selectedCity` variable inside the `LocationViewController` to the `selectedCity`
    in the `ExploreViewController`. This will save the last selected location if we
    return to the locations list after having selected a location earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to pass the selected city over to the `RestaurantViewController`.
    Therefore, add the following variables inside the `RestaurantViewController.swift`
    file above your `@IBOutlet var collectionView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'While still in the `RestaurantViewController.swift` file, add the following
    code under the `viewDidLoad()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `viewDidAppear()` method will get called every time we load the View Controller,
    whereas the `viewDidLoad()` method only gets called once. We can print the `selectedCity`
    variable to verify that we are, in fact, passing the location over correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `ExploreViewController.swift` file again and add the following
    under the `showLocationList()` method inside :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We now check to see if the segue destination is `RestaurantViewController`,
    and we make sure that `selectedCity` is set in `ExploreViewController`. Next,
    we get the selected `indexPath` of the Collection view. Once we have that, we
    then get the item from the `ExploreDataManager` at the `index` position. Finally,
    we get the name from the item. If we get all those items back, then we pass the
    `selectedCity` and `selectedType` variables to the `RestaurantViewController`.
    If we do not, then we will display an alert, letting the user know that they need
    to select a location first. Let''s create the three methods that will display
    such an alert:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create the actual alert. While still in the `ExploreViewController`,
    add the following code before `unwindLocationCancel()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to check that we have a location; if not, we want to make sure
    that the user cannot go to the restaurant list. Inside the `ExploreViewController`,
    add the following method after the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, we check whether the segue equals `restaurantList;`. If it does, we check
    to see if the `selectedCity` variable is set. If we return `true`, then the segue
    will be performed, and we will go to the restaurant list. If we return `false`,
    then we display our alert, letting the users know that they need to select a location
    first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we need to show either the location list or restaurant list, depending
    on whether or not the user chose a location before trying to see the restaurant
    list. Add the following method after `viewDidLoad()`, and before the `shouldPerformSegue`
    method we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `prepare()` method checks which identifier is called. If it is the location
    list, then we call the `showLocationList()` method; if it is the restaurant list,
    then we call the `showRestaurantListing()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build and run the project by hitting the Play button (or use *cmd* + *R*).
    If you try to select a cuisine first, you should not be able to go to the restaurant
    list. Instead, you should receive an alert, stating that you need to select a
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e9970d4-1084-4194-bf57-fdfa4b84ee4f.png)'
  prefs: []
  type: TYPE_IMG
- en: If you pick a location, hit Done, and then tap the locations list again, you
    should see your location still selected. Now, if you select a cuisine, you should
    be directed to the restaurant listing and see the selected location printing in
    the Debug panel. If you do not see that panel, you can open it using the toggle
    or *cmd* + *Shift* + *Y* .
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77999151-869f-4e1e-9627-fc12eefdf1f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the location, we need to check our `RestaurantAPIManager`
    for data. Therefore, let''s update our `print` statement inside the `RestaurantViewController`
    by revising the `viewDidAppear()` method to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see the type selected, along with an array of dictionary objects,
    in the Debug panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94899a3b-6f88-480a-9073-383601230f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our data, let's get that data to display in our `RestaurantViewController`.
    To do this, we need to set up our cell as well as a restaurant data manager. The
    restaurant data manager, rather than the `RestaurantViewController`, will be the
    class that uses our `RestaurantAPIManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our restaurant cell class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to create a file so that we can connect to the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `Restaurants` folder in the Navigator panel, right-click on the `View`
    folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `RestaurantCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionViewCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB file: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `` `Swift` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click Next and then Create. Your file should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the class declaration, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that our file is set up, let's get our outlets connected.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up restaurant list cell outlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to set up our `restaurantCell` outlets:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Explore.storyboard` and select our `restaurantCell` again in the Outline
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Utilities panel, select the Identity inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, select RestaurantCell and hit
    *Enter* in order connect the Cell to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the Connections inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on and drag from the empty circle `lblTitle` under Outlets to the top
    label in our `restaurantCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/459cb759-c69b-4723-a20c-490d42223a1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on and drag from the empty circle `lblCuisine` under Outlets to the other
    label in our `restaurantCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5ce9f0a-c4e7-4d2f-96aa-bc86251daaa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on and drag from the empty circle `imgRestaurant` under Outlets to the
    image in our `restaurantCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c755fdd-659c-4c0d-968e-43d64b3fe119.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our `restaurantListCell` outlets set up, let's get some data
    into our cell. We previously created our `RestaurantItem.swift` file; we will
    use this in our restaurant list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a restaurant data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to create a data manager for our restaurants, but before we do that
    we need to update a few things. In Swift 4, we have a more natural way to parse
    JSON using what is called **Decodable**.  We need first to update our `RestaurantItem`,
    but before we get into what this code looks like, our `RestaurantItem` needs to
    conform to Decodable. Open `RestaurantItem`. Open `RestaurantItem` and update
    it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a `Location` object that returns an `RestaurantItems` array, just
    like our JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `RestaurantDataManager` file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Restaurants` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the Choose a template for your new file screen, select iOS at the top
    and then Swift File. Then, hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `RestaurantDataManager`, and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to define our class definition first, so add the following under the
    `import` statement in this new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the class declaration, add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, we keep our array `private`, since there is no reason to have to access
    this outside of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the following three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The first method here differs from the one we looked at in `ExploreDataManager`,
    whereas the last two methods here are the same as those in `ExploreDataManager`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17ef04dd-438b-486e-9764-778fede6ebcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break these methods down to better understand what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: In the parameters of this method, we are passing in a cell and
    an index path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: This function is pretty long; however, we are simply fetching restaurants
    with a location as a filter. We have a closure block, which will allow us to let
    the function run until it is complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: In this parameter, we are setting a default. If we do not pass
    anything into this parameter, it will use `All`; otherwise, it will use whatever
    we give it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As you type your code, Xcode will provide code hints (choices) that it believes
    that you might want. When you type this method, Xcode gives you two hints, one
    that includes the `withFilter` parameter, and one that does not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8864c73-93a1-4443-8480-e4d2fe0b67b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Part D**: Here, we get restaurants from the JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: Here, we are filtering the restaurants by cuisine. Since our restaurants
    have multiple cuisines, we must check each cuisine, which is why we use contains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Part F**: This is used to tell our method that we are finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Part G**: This method tells us how many restaurant items we have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Part H**: This method allows us to get the restaurant at the index position
    at which it is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a greater understanding of our restaurant data manager. We have
    done a lot of code, and some of it may not make full sense, but as long as you
    have a basic understanding then you will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to get the data displaying in our restaurant list. One of the most
    common things when displaying data is how to handle a Table View or Collection
    View when there is no data. Some of the filtering we are doing may return no results,
    so we should handle both cases. We are going to do this next.
  prefs: []
  type: TYPE_NORMAL
- en: Handling no data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is common to want to create a custom view that you can reuse, but also have
    a visual representation of it as well. There are two common ways to do this; the
    first way we will do now, and the other we will do later in the book. You can
    create a `UIView` that comes with a **XIB** (pronounced zib or nib). This was
    the common way to create elements before storyboards, and it is still effective
    today. Let''s create one now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder and select New Group and call it `No Data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the `No Data` folder and create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top.
    Then, select Cocoa Touch Class. Hit Next after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `NoDataView`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIView`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click on the `No Data` folder again and create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select **iOS** at the
    top. Then, select View under User Interface. Hit Next after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `NoDataView` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, open the `NoDataView.swift` file and add the following into this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Our two `init` methods are required; just simply call `setupView()`. The `loadViewFromNib()`
    method is used to get our XIB file. Our `setupView()` is used to take the NIB
    and add it to the `UIView()`. Finally, we have two methods that set up our two
    labels. The first four methods are boilerplate code that you will write every
    time you want to create a `UIView` with a NIB (XIB) file. Next, let''s get this
    set up:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `NoDataView.xib`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Files Owner in the Outline. Then, open the Identity inspector and update
    Class to `NoDataView` and hit *Enter.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in the filter field of the object library, type `label`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag out two labels into the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select one of the labels; then, in the Attributes inspector, update the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Text: Add `TITLE GOES HERE` into the empty text field under the text'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Color: `Black`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alignment: `Center`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Font: `Avenir Next Condensed Bold 26`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Width: `355`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `36`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select one of the labels; then, in the Attributes inspector, update the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Text: Add `TITLE GOES HERE` into the empty text field under the text'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Color: `Black`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alignment: `Center`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Font: `Avenir Next Condensed Regular 17`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Width: `355`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `21`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select both labels and then the Pin icon. Enter the value of Height (should
    be checked).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now with both labels selected, hit the Stack View icon or you can go to Editor |
    Embed In | Stack View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Stack View in the Outline view, and then the Pin icon. Enter the
    following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right: `10`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `` `10` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, the Align icon. Enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Horizontally in container: (should be checked)'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vertically in container: (should be checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the Files Owner in the Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open the Identity inspector and connect `lblTitle` to the label that says
    `TITLE GOES HERE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect `lblDesc` to the other label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d5fd76a-e155-495c-b5c0-5ba3be44787e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's finally connect everything. Open the `RestaurantViewController.swift`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Above the `selectedRestaurant` variable, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following method inside the `private` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This method is checking to see if we have a selected location and a filter.
    Then, we run the fetch method we created earlier. If we have items, we make sure
    our background view is `nil`. If not, we will create our `NoDataView` and set
    it to display `No restaurants found`. Finally, we reload the Collection View.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, lets update `-collectionView:cellForItemAtIndexPath:` by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are just passing data into our cell. We are displaying the title, cuisine,
    and the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, update `-collectionView:numberOfItemsInSection:` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project, and you should now see the following either with
    data or without:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ba090ad-ef49-4193-a6d8-ef862e65f652.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we wrap it up, let''s add one more thing. When you select a location,
    let''s display it on this view using the new iOS 11 large titles. Add the following
    into the private extension under `createData()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, call `setupTitle()` after `createData` in the `viewDidAppear()` method.
    Build and run the project again, and you should now see the selected city. When
    you scroll, the large title will appear in the title view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/981c2be4-45de-4de9-b5f9-9d3582c5c3c0.png)'
  prefs: []
  type: TYPE_IMG
- en: We are done with this chapter; good work. We did a lot, but you should be starting
    to see this app coming to life.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, we finally have data working in our app. We are not using a service, but
    if we wanted to, it would not be hard to add it. Working with local JSON files
    is the same as working with an API feed. You should feel confident having to do
    either. One thing I love to do is when I know what the feed is like, but I do
    not want to write that portion yet, I will create static JSON files of the feed
    and work with those. This allows me to focus on getting the app to where it needs
    to be, and not be stopped because of the API data layer.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned what JSON is and how to use that JSON feed to make
    data for our app. We also looked at how to pass data using segues. Finally, we
    looked at extensions and how they are useful for cleaning up and organizing code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to display even more data.
  prefs: []
  type: TYPE_NORMAL
