["```\n<dependencies>\n...\n<dependency>\n <groupId>org.springframework.boot</groupId>\n <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n...\n</dependencies>\n```", "```\n\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n  <title>Register</title>\n  <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n  <link rel=\"stylesheet\" \n   href=\"/webjars/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"/>\n\n  <script src=\"img/jquery.min.js\"></script>\n  <script src=\"img/bootstrap.min.js\"></script>\n</head>\n<body>\n  <nav class=\"navbar navbar-default nav-enhanced\">\n    <div class=\"container-fluid container-nav\">\n      <div class=\"navbar-header\">\n        <div class=\"navbar-brand\">\n          Place Reviewer\n        </div>\n      </div>\n      <ul class=\"navbar-nav\" th:if=\"${principal != null}\">\n        <li>\n          <form th:action=\"@{/logout}\" method=\"post\">\n            <button class=\"btn btn-danger\" type=\"submit\">\n              <i class=\"fa fa-power-off\" aria-hidden=\"true\"></i>\n              Sign Out\n            </button>\n          </form>\n        </li>\n      </ul>\n    </div>\n  </nav>\n  <div class=\"container-fluid\" style=\"z-index: 2; position: absolute\">\n    <div class=\"row mt-5\">\n      <div class=\"col-sm-4 col-xs-2\">  </div>\n      <div class=\"col-sm-4 col-xs-8\">\n        <form class=\"form-group col-sm-12 form-vertical form-app\" \n         id=\"form-register\" method=\"post\" \n         th:action=\"@{/users/registrations}\">\n          <div class=\"col-sm-12 mt-2 lead text-center text-primary\">\n            Create an account\n          </div>\n          <hr>\n          <input class=\"form-control\" type=\"text\" name=\"username\" \n           placeholder=\"Username\" required/>\n          <input class=\"form-control mt-2\" type=\"email\" name=\"email\" \n           placeholder=\"Email\" required/>\n          <input class=\"form-control mt-2\" type=\"password\" name=\"password\"\n           placeholder=\"Password\" required/>\n          <span th:if=\"${error != null}\" class=\"mt-2 text-danger\" \n           style=\"font-size: 10px\" th:text=\"${error}\"></span>\n          <button class=\"btn btn-primary form-control mt-2 mb-3\" \n           type=\"submit\">\n            Sign Up!\n          </button>\n        </form>\n      </div>\n      <div class=\"col-sm-4 col-xs-2\"></div>\n    </div>\n  </div>\n  </body>\n</html>\n```", "```\n        <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n```", "```\n        <form class=\"form-group col-sm-12 form-vertical form-app\" \n         id=\"form-register\" method=\"post\" \n         th:action=\"@{/users/registrations}\">\n          ...\n        </form>\n```", "```\n        <span th:text=\"Hello world\"></span>\n```", "```\n        <span th:if=\"${error != null}\" class=\"mt-2 text-danger\" \n         style=\"font-size: 10px\" th:text=\"${error}\"></span>\n```", "```\n<ul class=\"navbar-nav\" th:if=\"${principal != null}\">\n  <li>\n    <form th:action=\"@{/logout}\" method=\"post\">\n      <button class=\"btn btn-danger\" type=\"submit\">\n        <i class=\"fa fa-power-off\" aria-hidden=\"true\"></i> Sign Out\n      </button>\n    </form>\n  </li>\n</ul>\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n    <nav class=\"navbar navbar-default nav-enhanced\" th:fragment=\"navbar\">\n      <div class=\"container-fluid container-nav\">\n        <div class=\"navbar-header\">\n          <div class=\"navbar-brand\">\n            Place Reviewer\n          </div>\n        </div>\n        <ul class=\"navbar-nav\" th:if=\"${principal != null}\">\n          <li>\n            <form th:action=\"@{/logout}\" method=\"post\">\n              <button class=\"btn btn-danger\" type=\"submit\">\n                <i class=\"fa fa-power-off\" aria-hidden=\"true\"></i> Sign Out\n              </button>\n            </form>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  </body>\n</html>\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <title>Register</title>\n    <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n    <link rel=\"stylesheet\" \n     href=\"/webjars/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"/>\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <div th:insert=\"fragments/navbar :: navbar\"></div> \n    <!-- inserting navbar fragment -->\n    <div class=\"container-fluid\" style=\"z-index: 2; position: absolute\">\n      <div class=\"row mt-5\">\n        <div class=\"col-sm-4 col-xs-2\">\n        </div>\n        <div class=\"col-sm-4 col-xs-8\">\n          <form class=\"form-group col-sm-12 form-vertical form-app\" \n           id=\"form-register\" method=\"post\" \n           th:action=\"@{/users/registrations}\">\n            <div class=\"col-sm-12 mt-2 lead text-center text-primary\">\n              Create an account\n            </div>\n            <hr>\n            <input class=\"form-control\" type=\"text\" name=\"username\" \n             placeholder=\"Username\" required/>\n            <input class=\"form-control mt-2\" type=\"email\" name=\"email\" \n             placeholder=\"Email\" required/>\n            <input class=\"form-control mt-2\" type=\"password\" \n             name=\"password\" placeholder=\"Password\" required/>\n            <span th:if=\"${error != null}\" class=\"mt-2 text-danger\" \n             style=\"font-size: 10px\" th:text=\"${error}\"></span>\n            <button class=\"btn btn-primary form-control mt-2 mb-3\" \n             type=\"submit\">\n              Sign Up!\n            </button>\n          </form>\n        </div>\n        <div class=\"col-sm-4 col-xs-2\"></div>\n        </div>\n      </div>\n  </body>\n</html>\n```", "```\npackage com.example.placereviewer.controller\n\nimport org.springframework.stereotype.Controller\nimport org.springframework.web.bind.annotation.GetMapping\n\n@Controller\nclass ApplicationController {\n\n  @GetMapping(\"/register\")\n  fun register(): String {\n    return \"register\"\n  }\n}\n```", "```\n//app.css\n.nav-enhanced {\n  background-color: #00BFFF;\n  border-color: blueviolet;\n  box-shadow: 0 0 3px black;\n}\n\n.container-nav {\n  height: 10%;\n  width: 100%;\n  margin-bottom: 0;\n}\n\n.form-app {\n  background-color: white;\n  box-shadow: 0 0 1px black;\n  margin-top: 50px !important;\n  padding: 10px 0;\n}\n```", "```\npackage com.example.placereviewer.controller\n\nimport com.example.placereviewer.component.UserValidator\nimport com.example.placereviewer.data.model.User\nimport com.example.placereviewer.service.SecurityService\nimport com.example.placereviewer.service.UserService\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.validation.BindingResult\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.ModelAttribute\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestMapping\n\n@Controller\n@RequestMapping(\"/users\")\nclass UserController(val userValidator: UserValidator, \n      val userService: UserService, val securityService: SecurityService) {\n\n  @PostMapping(\"/registrations\")\n  fun create(@ModelAttribute form: User, bindingResult: BindingResult, \n             model: Model): String {\n    userValidator.validate(form, bindingResult)\n\n    if (bindingResult.hasErrors()) {\n      model.addAttribute(\"error\", bindingResult.allErrors.first()\n                                               .defaultMessage)\n      model.addAttribute(\"username\", form.username)\n      model.addAttribute(\"email\", form.email)\n      model.addAttribute(\"password\", form.password)\n\n      return \"register\"\n    }\n\n    userService.register(form.username, form.email, form.password)\n    securityService.autoLogin(form.username, form.password)\n\n    return \"redirect:/home\"\n  }\n}\n```", "```\npackage com.example.placereviewer.component\n\nimport com.example.placereviewer.data.model.User\nimport com.example.placereviewer.data.repository.UserRepository\nimport org.springframework.stereotype.Component\nimport org.springframework.validation.Errors\nimport org.springframework.validation.ValidationUtils\nimport org.springframework.validation.Validator\n\n@Component\nclass UserValidator(private val userRepository: UserRepository) : Validator {\n\n  override fun supports(aClass: Class<*>?): Boolean {\n    return User::class == aClass\n  }\n\n  override fun validate(obj: Any?, errors: Errors) {\n    val user: User = obj as User\n\n```", "```\n\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"username\",\n              \"Empty.userForm.username\", \"Username cannot be empty\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"password\", \n              \"Empty.userForm.password\", \"Password cannot be empty\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"email\", \n              \"Empty.userForm.email\", \"Email cannot be empty\")\n\n```", "```\n\n    if (user.username.length < 6) {\n      errors.rejectValue(\"username\", \"Length.userForm.username\",\n                   \"Username must be at least 6 characters in length\")\n    }\n\n```", "```\n\nif (userRepository.findByUsername(user.username) != null) {\n  errors.rejectValue(\"username\", \"Duplicate.userForm.username\",\n                     \"Username unavailable\")\n}\n\n```", "```\n\n    if (user.password.length < 8) {\n      errors.rejectValue(\"password\", \"Length.userForm.password\",\n                   \"Password must be at least 8 characters in length\")\n    }\n  }\n}\n```", "```\npackage com.example.placereviewer.service\n\ninterface SecurityService {\n  fun findLoggedInUser(): String?\n  fun autoLogin(username: String, password: String)\n}\n```", "```\npackage com.example.placereviewer.service\n\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.stereotype.Service\n\n@Service\nclass SecurityServiceImpl(private val userDetailsService: AppUserDetailsService)\n      : SecurityService {\n\n  @Autowired\n  lateinit var authManager: AuthenticationManager\n\n  override fun findLoggedInUser(): String? {\n    val userDetails = SecurityContextHolder.getContext()\n                                           .authentication.details\n\n    if (userDetails is UserDetails) {\n      return userDetails.username\n    }\n\n    return null\n  }\n\n  override fun autoLogin(username: String, password: String) {\n    val userDetails: UserDetails = userDetailsService\n                                       .loadUserByUsername(username)\n\n    val usernamePasswordAuthenticationToken = \n                UsernamePasswordAuthenticationToken(userDetails, password,\n                                userDetails.authorities)\n\n    authManager.authenticate(usernamePasswordAuthenticationToken)\n\n    if (usernamePasswordAuthenticationToken.isAuthenticated) {\n      SecurityContextHolder.getContext().authentication = \n              usernamePasswordAuthenticationToken\n    }\n  }\n}\n```", "```\nif (bindingResult.hasErrors()) {\n  model.addAttribute(\"error\", bindingResult.allErrors\n                                           .first().defaultMessage)\n  model.addAttribute(\"username\", form.username)\n  model.addAttribute(\"email\", form.email)\n  model.addAttribute(\"password\", form.password)\n\n  return \"register\"\n}\n```", "```\nif (bindingResult.hasErrors()) {\n  with (model) {\n    addAttribute(\"error\", bindingResult.allErrors.first().defaultMessage)\n    addAttribute(\"error\", form.username)\n    addAttribute(\"email\", form.email)\n    addAttribute(\"password\", form.password)\n  }\n  return \"register\"\n}\n```", "```\nuserService.register(form.username, form.email, form.password)\nsecurityService.autoLogin(form.username, form.password)\nreturn \"redirect:/home\"\n```", "```\n<form class=\"form-group col-sm-12 form-vertical form-app\" \n id=\"form-register\" method=\"post\" th:action=\"@{/users/registrations}\">\n  <div class=\"col-sm-12 mt-2 lead text-center text-primary\">\n    Create an account\n  </div>\n  <hr>\n  <!-- utilized model attributes with th:value -->\n  <input class=\"form-control\" type=\"text\" name=\"username\" \n   placeholder=\"Username\" th:value=\"${username}\" required/>\n  <input class=\"form-control mt-2\" type=\"email\" name=\"email\" \n   placeholder=\"Email\" th:value=\"${email}\" required/>\n  <input class=\"form-control mt-2\" type=\"password\" name=\"password\" \n   placeholder=\"Password\" th:value=\"${password}\" required/>\n  <span th:if=\"${error != null}\" class=\"mt-2 text-danger\" \n   style=\"font-size: 10px\" th:text=\"${error}\"></span>\n  <button class=\"btn btn-primary form-control mt-2 mb-3\" type=\"submit\">\n    Sign Up!\n  </button>\n</form>\n```", "```\n<html>\n  <head>\n    <title> Home</title>\n  </head>\n  <body>\n    You have been successfully registered and are now in your home page.\n  </body>\n</html>\n```", "```\npackage com.example.placereviewer.controller\n\nimport com.example.placereviewer.service.ReviewService\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.web.bind.annotation.GetMapping\nimport java.security.Principal\nimport javax.servlet.http.HttpServletRequest\n\n@Controller\nclass ApplicationController(val reviewService: ReviewService) {\n\n  @GetMapping(\"/register\")\n  fun register(): String {\n    return \"register\"\n  }\n\n  @GetMapping(\"/home\")\n  fun home(request: HttpServletRequest, model: Model, \n           principal: Principal): String {\n    val reviews = reviewService.listReviews()\n\n    model.addAttribute(\"reviews\", reviews)\n    model.addAttribute(\"principal\", principal)\n\n    return \"home\"\n  }\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <title>Login</title>\n    <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n    <link rel=\"stylesheet\" \n     href=\"/webjars/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"/>\n\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n  </head>\n  <body>\n  </body>\n</html>\n```", "```\n    <div th:insert=\"fragments/navbar :: navbar\"></div>\n\n    <div class=\"container-fluid\" style=\"z-index: 2; position: absolute\">\n      <div class=\"row mt-5\">\n        <div class=\"col-sm-4 col-xs-2\"></div>\n        <div class=\"col-sm-4 col-xs-8\">\n          <form class=\"form-group col-sm-12 form-vertical form-app\" \n           id=\"form-login\" method=\"post\" th:action=\"@{/login}\">\n            <div class=\"col-sm-12 mt-2 lead text-center text-primary\">\n              Login to your account\n            </div>\n            <hr>\n            <input class=\"form-control\" type=\"text\" name=\"username\" \n             placeholder=\"Username\" required/>\n            <input class=\"form-control mt-2\" type=\"password\" \n             name=\"password\" placeholder=\"Password\" required/>\n            <span th:if=\"${param.error}\" class=\"mt-2 text-danger\" \n             style=\"font-size: 10px\">\n              Invalid username and password combination\n            </span>\n            <button class=\"btn btn-primary form-control mt-2 mb-3\" \n             type=\"submit\">\n              Go!\n            </button>\n          </form>\n          <div class=\"col-sm-12 text-center\" style=\"font-size: 12px\">\n            Don't an account? Register <a href=\"/register\">here</a>\n          </div>\n        </div>\n        <div class=\"col-sm-4 col-xs-2\">\n          <div th:if=\"${param.logout}\" \n           class=\"col-sm-12 text-success text-right\">\n            You have been logged out.\n          </div>\n        </div>\n      </div>\n    </div>\n```", "```\n<span th:if=\"${param.error}\" class=\"mt-2 text-danger\" \n style=\"font-size: 10px\">\n  Invalid username and password combination\n</span>\n```", "```\n<div th:if=\"${param.logout}\" class=\"col-sm-12 text-success text-right\">\n  You have been logged out.\n</div>\n```", "```\n...\n\noverride fun addViewControllers(registry: ViewControllerRegistry?) {\n  registry?.addViewController(\"/login\")?.setViewName(\"login\")\n}\n\n...\n```", "```\n<script type=\"text/javascript\" src=\"img/js?key={{API_KEY}}&libraries=places\"></script>\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <title>Home</title>\n    <!-- Addition of external stylesheets -->\n    <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n    <link rel=\"stylesheet\" \n      href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js\n            /latest/toastr.min.css\">\n    <link rel=\"stylesheet\" \n     href=\"/webjars/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"/>\n    <link rel=\"stylesheet\" \n     href=\"https://maxcdn.bootstrapcdn.com/font-awesome\n           /4.7.0/css/font-awesome.min.css\"/>\n    <link href=\"https://fastcdn.org/Buttons/2.0.0/css/buttons.css\" \n     rel=\"stylesheet\">\n\n    <!-- Inclusion of external Javascript -->\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/toastr.min.js\">\n    </script>\n    <script src=\"img/popper.min.js\">\n    </script>\n    <script src=\"img/bootstrap.min.js\"></script>\n    <script src=\"img/buttons.js\"></script>\n    <script type=\"text/javascript\" \n     src=\"img/>          &libraries=places\">\n  </head>\n</html>\n```", "```\n</script>\n\n    <!-- Definition of internal styles -->\n    <style>\n      #map {\n        height: 400px;\n      }\n\n      .container-review {\n        background-color: white;\n        border-radius: 2px;\n        font-family:sans-serif;\n        box-shadow: 0 0 1px black;\n        border-color: black;\n        padding: 0;\n        min-width: 250px;\n        height: 230px;\n      }\n\n      .review-author {\n        font-size: 15px\n      }\n\n      .review-location {\n        font-size: 12px\n      }\n\n      .review-title {\n        font-size: 13px;\n        text-decoration-style: dotted;\n        height: calc(20 / 100 * 230px);\n      }\n\n      .review-content {\n        font-size: 12px;\n        height: calc(40 / 100 * 230px);\n      }\n\n      .review-header {\n        height: calc(20 / 100 * 230px)\n      }\n\n      hr {\n        margin: 0;\n      }\n\n      .review-footer {\n        height: calc(20 / 100 * 230px);\n      }\n    </style>\n```", "```\n  <!-- Invokes the showNoReviewNotification() function defined in -->\n  <!-- internal Javascript of this file upon document load. -->\n  <body \n    th:onload=\"'javascript:showNoReviewNotification(\n      ' + ${reviews.size() == 0} + '\n    )'\">\n  <div th:insert=\"fragments/navbar :: navbar\"></div>\n  <div class=\"container\">\n    <div class=\"row mt-5\">\n      <!-- Creates view containers for each review retrieved -->\n      <!-- Distinct <div> containers are created for the -->\n      <!-- review author, location, title and body. -->\n      <div th:each=\"review: ${reviews}\" \n       class=\"col-sm-2 container-review mt-4 mr-2\">\n        <div class=\"review-header pt-1\">\n          <div class=\"col-sm-12 review-author text-success\">\n            <b th:text=\"${review.reviewer.username}\"></b>\n          </div>\n          <div th:text=\"${review.placeName}\" \n           class=\"col-sm-12 review-location\">\n          </div>\n          </div>\n          <hr>\n          <b>\n            <div th:text=\"${review.title}\" \n             class=\"col-sm-12 review-title pt-1\">\n            </div>\n          </b>\n          <hr>\n          <div th:text=\"${review.body}\" \n           class=\"col-sm-12 review-content pt-2\">\n          </div>\n          <div class=\"review-footer\">\n            <!-- Creation of distinct DOM \n            <button> elements for the display of reviewed locations. -->\n              <!-- Upon button click, the application renders a modal \n               showing the reviewed location on a map -->\n              <button class=\"col-sm-12 button button-small button-primary\"\n               type=\"button\" data-toggle=\"modal\" data-target=\"#mapModal\" \n               style=\"height: inherit; border-radius: 2px;\" \n               th:onclick=\"'javascript:showLocation(\n                 ' + ${review.latitude} + ',' \n                   + ${review.longitude} + ',\\'' \n                   + ${review.placeId} + '\\'\n               )'\">\n               <i class=\"fa fa-map-o\" aria-hidden=\"true\"></i>\n               View location\n             </button>\n           </div>\n         </div>\n       </div>\n     </div>\n```", "```\n<!-- Modal creation -->\n<div class=\"modal fade\" id=\"mapModal\">\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\">Reviewed location</h5>\n        <button type=\"button\" class=\"close\" \n         data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"container-fluid\">\n          <div id=\"map\"> </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-primary\" \n         data-dismiss=\"modal\">\n          Done\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n```", "```\n\n<span style=\"bottom: 20px; right: 20px; position: fixed\">\n  <form method=\"get\" th:action=\"@{/create-review}\">\n    <button class=\"button button-primary button-circle \n     button-giant navbar-bottom\" type=\"submit\">\n      <i class=\"fa fa-plus\"></i>\n    </button>\n  </form>\n</span>\n```", "```\n     <script>\n       //Shows a toast notification to the user when no review is present\n       function showNoReviewNotification(show) {\n         if (show) {\n           toastr.info('No reviews to see');\n         }\n       }\n\n```", "```\n\nfunction showLocation(latitude, longitude, placeId) {\n  var center = new google.maps.LatLng(latitude, longitude);\n\n  var map = new google.maps.Map(document.getElementById('map'), {\n    center: center,\n    zoom: 15,\n    scrollwheel: false\n  });\n  var service = new google.maps.places.PlacesService(map);\n\n  loadPlaceMarker(service, map, placeId);\n}\n\n```", "```\n\n     function loadPlaceMarker(service, map, placeId) {\n       var request = {\n         placeId: placeId\n       };\n\n       service.getDetails(request, function (place, status) {\n         if (status === google.maps.places.PlacesServiceStatus.OK) {\n           new google.maps.Marker({\n              map: map,\n              title: place.name,\n            place: {\n              placeId: place.place_id,\n              location: place.geometry.location\n            }\n\n          })\n        }\n      });\n    }\n  </script>\n</body>\n```", "```\n<link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n<link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.0.0-beta.3/css/bootstrap.min.css\"/>\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"/>\n<link href=\"https://fastcdn.org/Buttons/2.0.0/css/buttons.css\" rel=\"stylesheet\">\n```", "```\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/toastr.min.js\"></script>\n<script src=\"img/popper.min.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n<script src=\"img/buttons.js\"></script>\n<script type=\"text/javascript\" src=\"img/js?key={{API_KEY}}&libraries=places\"></script>\n```", "```\n<body th:onload=\"'javascript:showNoReviewNotification(' + ${reviews.size() == 0} + ')'\">\n```", "```\nfunction showNoReviewNotification(show) {\n  if (show) {\n    toastr.info('No reviews to see');\n  }\n}\n```", "```\n<!-- Creates view containers for each review retrieved -->\n<!-- Distinct <div> containers are created for the -->\n<!-- review author, location, title and body. -->\n<div th:each=\"review: ${reviews}\" class=\"col-sm-2 container-review mt-4 mr-2\">\n  <div class=\"review-header pt-1\">\n    <div class=\"col-sm-12 review-author text-success\">\n      <b th:text=\"${review.reviewer.username}\"></b>\n    </div>\n    <div th:text=\"${review.placeName}\" class=\"col-sm-12 review-location\">\n    </div>\n  </div>\n  <hr>\n  <b>\n    <div th:text=\"${review.title}\" class=\"col-sm-12 review-title pt-1\">\n    </div>\n  </b>\n  <hr>\n  <div th:text=\"${review.body}\" class=\"col-sm-12 review-content pt-2\">\n  </div>\n  <div class=\"review-footer\">\n    <!-- Creation of distinct DOM <button> elements for the \n     display of reviewed locations. -->\n    <!-- Upon button click, the application renders a modal \n     showing the reviewed location on a map -->\n    <button class=\"col-sm-12 button button-small button-primary\" \n     type=\"button\" data-toggle=\"modal\" data-target=\"#mapModal\" \n     style=\"height: inherit; border-radius: 2px;\"\n     th:onclick=\"'javascript:showLocation(' \n       + ${review.latitude} + ',' \n       + ${review.longitude} + ',\\'' \n       + ${review.placeId} + '\\\n     ')'\">\n      <i class=\"fa fa-map-o\" aria-hidden=\"true\"></i>\n      View location\n    </button>\n  </div>\n</div>\n```", "```\n<div th:each=\"review: ${reviews}\" class=\"col-sm-2 container-review mt-4 mr-2\">\n```", "```\n<div th:text=\"${review.placeName}\" class=\"col-sm-12 review-location\"></div>\n```", "```\n<button class=\"col-sm-12 button button-small button-primary\" type=\"button\"\n data-toggle=\"modal\" data-target=\"#mapModal\" style=\"height: inherit; \n border-radius: 2px;\"\n th:onclick=\"'javascript:showLocation(' \n   + ${review.latitude} + ',' \n   + ${review.longitude} + ',\\'' \n   + ${review.placeId} + '\\\n ')'\">\n  <i class=\"fa fa-map-o\" aria-hidden=\"true\"></i>\n  View location\n</button>\n```", "```\nvar map = new google.maps.Map(document.getElementById('map'), {\n  center: center,\n  zoom: 15,\n  scrollwheel: false\n});\n```", "```\n<form method=\"get\" th:action=\"@{/reviews/new}\">\n  <button class=\"button button-primary button-circle button-giant \n   navbar-bottom\" type=\"submit\"><i class=\"fa fa-plus\"></i></button>\n</form>\n```", "```\n@GetMapping(\"/create-review\")\nfun createReview(model: Model, principal: Principal): String {\n model.addAttribute(\"principal\", principal) \n return \"create-review\"\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <title>New review</title>\n    <!-- Addition of external stylesheets -->\n    <link rel=\"stylesheet\" th:href=\"@{/css/app.css}\"/>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.0.0-beta.3\n                                 /css/bootstrap.min.css\"/>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com\n                            /font-awesome/4.7.0/css/font-awesome.min.css\"/>\n    <link href=\"https://fastcdn.org/Buttons/2.0.0/css/buttons.css\"\n     rel=\"stylesheet\">\n\n    <!-- Inclusion of external Javascript -->\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/popper.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n    <script src=\"img/buttons.js\"></script>\n    <script type=\"text/javascript\" src=\"img/js?key={{API_KEY}}&libraries=places\">\n    </script>\n\n```", "```\n    <!-- Definition of internal styles -->\n    <style>\n      #map {\n        height: 400px;\n      }\n\n      #container-place-data {\n        height: 0;\n        visibility: hidden;\n      }\n\n      #container-place-info {\n        font-size: 14px;\n      }\n\n      #container-selection-status {\n        visibility: hidden;\n      }\n    </style>\n  </head>\n```", "```\n<body>\n  <div th:insert=\"fragments/navbar :: navbar\"> </div>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-sm-12 col-xs-12\">\n        <!-- Review form creation -->\n        <form class=\"form-group col-sm-12 form-vertical form-app\" \n         id=\"form-login\" method=\"post\" th:action=\"@{/reviews}\">\n          <div class=\"col-sm-12 mt-2 lead\">Write your review</div>\n          <div th:if=\"${error != null}\" class=\"text-danger\" \n           th:text=\"${error}\"> </div>\n          <hr>\n          <input class=\"form-control\" type=\"text\" name=\"title\" \n           placeholder=\"Title\" th:value=\"${title}\" required/>\n          <textarea class=\"form-control mt-4\" rows=\"13\" name=\"body\" \n           placeholder=\"Review\" th:value=\"${body}\" required></textarea>\n          <div class=\"form-group\" id=\"container-place-data\">\n            <!-- Input fields for location specific form data -->\n            <!-- Form input data for the fields below are \n             provided by the Google Places API -->\n            <input class=\"form-control\" id=\"place_address\" \n             th:value=\"${placeAddress}\" type=\"text\" name=\"placeAddress\"\n             required/>\n            <input class=\"form-control\" id=\"place_name\" type=\"text\" \n             name=\"placeName\" th:value=\"${placeName}\" required/>\n            <input class=\"form-control\" id=\"place_id\" type=\"text\" \n             name=\"placeId\" th:value=\"${placeId}\" required/>\n            <input id=\"location-lat\" type=\"number\" name=\"latitude\" \n             step=\"any\" th:value=\"${latitude}\" required/>\n            <input id=\"location-lng\" type=\"number\" name=\"longitude\" \n             step=\"any\" th:value=\"${longitude}\" required/>\n          </div>\n          <div class=\"form-group mb-3\">\n            <button class=\"button button-pill\" type=\"button\" \n             data-toggle=\"modal\" data-target=\"#mapModal\">\n              <i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> \n              Select Location\n            </button>\n            <button class=\"button button-pill button-primary\">\n            Submit Review</button>\n            </div>\n            <div class=\"text-success ml-2\" id=\"container-selection-status\">\n            Location selected</div>\n          </form>\n        </div>\n      </div>\n```", "```\n      <!-- Map Modal -->\n      <div class=\"modal fade\" id=\"mapModal\">\n        <div class=\"modal-dialog modal-lg\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\">Select place to review</h5>\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n               aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div class=\"modal-body\">\n              <div class=\"container-fluid\">\n                <div id=\"map\"> </div>\n                  <div class=\"row mt-2\" id=\"container-place-info\">\n                    <div class=\"col-sm-12\" id=\"container-place-name\">\n                      <b>Place Name:</b>\n                    </div>\n                    <div class=\"col-sm-12\" id=\"container-place-address\">\n                      <b>Place Address:</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-primary\" \n                 data-dismiss=\"modal\">Done</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n```", "```\n      <script>\n        // form field reference creation\n        var formattedAddressField = document\n                            .getElementById('place_address');\n        var placeNameField = document.getElementById('place_name');\n        var placeIdField = document.getElementById('place_id');\n        var latitudeField = document.getElementById('location-lat');\n        var longitudeField = document.getElementById('location-lng');\n\n        // container reference creation\n        var containerPlaceName = document.getElementById\n                                 ('container-place-name');\n        var containerPlaceAddress = document.getElementById\n                                 ('container-place-address');\n        var containerSelectionStatus = document.getElementById\n                                 ('container-selection-status');\n```", "```\n        //invoked to initialize Google map\n        function initialize() {\n\n          navigator.geolocation.getCurrentPosition(function(location) {\n            var latitude = location.coords.latitude;\n            var longitude = location.coords.longitude;\n\n            var center = new google.maps.LatLng(latitude, longitude);\n\n            var map = new google.maps.Map(document.getElementById('map'), {\n              center: center,\n              zoom: 15,\n              scrollwheel: false\n            });\n\n            var service = new google.maps.places.PlacesService(map);\n\n            map.addListener('click', function(data) {\n              getPlaceDetailsById(service, data.placeId);\n            });\n          });\n\n        }\n\n```", "```\n\n        function getPlaceDetailsById(service, placeId) {\n          var request = {\n            placeId: placeId\n          };\n\n          service.getDetails(request, function (place, status) {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n              updateViewData(place)\n            }\n          });\n        }\n```", "```\n        //Invoked to update view information\n        function updateViewData(place) {\n          setFormValues(\n            place.formatted_address,\n            place.name,\n            place.place_id,\n            place.geometry.location.lat(),\n            place.geometry.location.lng()\n          );\n\n          setContainerText('<b>Place Name: </b>' + place.name,\n            '<b>Place Address: </b>' + place.formatted_address);\n\n          showSelectionStatusContainer();\n        }    \n```", "```\n\n        function setFormValues(formattedAddress, placeName, placeId,\n                               latitude, longitude) {\n          formattedAddressField.value = formattedAddress;\n          placeNameField.value = placeName;\n          placeIdField.value = placeId;\n          latitudeField.value = latitude;\n          longitudeField.value = longitude;\n        }\n```", "```\n        function showSelectionStatusContainer() {\n          containerSelectionStatus.style.visibility = 'visible'\n        }\n\n        function setContainerText(placeNameText, placeAddressText) {\n          containerPlaceName.innerHTML = placeNameText;\n          containerPlaceAddress.innerHTML = placeAddressText;\n        } \n\n        // Initializes map upon window load completion\n        google.maps.event.addDomListener(window, 'load', initialize);\n    </script>\n  </body>\n</html>\n```", "```\n<button class=\"button button-pill\" type=\"button\" data-toggle=\"modal\" data-target=\"#mapModal\">\n  <i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> Select Location\n</button>\n```", "```\nmap.addListener('click', function(data) {\n  getPlaceDetailsById(service, data.placeId);\n});\n```", "```\npackage com.example.placereviewer.component\n\nimport com.example.placereviewer.data.model.Review\nimport org.springframework.stereotype.Component\nimport org.springframework.validation.Errors\nimport org.springframework.validation.ValidationUtils\nimport org.springframework.validation.Validator\n\n@Component\nclass ReviewValidator: Validator {\n\n  override fun supports(aClass: Class<*>?): Boolean {\n    return Review::class == aClass\n  }\n\n  override fun validate(obj: Any?, errors: Errors) {\n    val review = obj as Review\n\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"title\",\n                         \"Empty.reviewForm.title\", \"Title cannot be empty\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"body\", \n                         \"Empty.reviewForm.body\", \"Body cannot be empty\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"placeName\",\n                         \"Empty.reviewForm.placeName\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"placeAddress\", \n                         \"Empty.reviewForm.placeAddress\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"placeId\",\n                         \"Empty.reviewForm.placeId\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"latitude\", \n                         \"Empty.reviewForm.latitude\")\n    ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"longitude\",\n                         \"Empty.reviewForm.longitude\")\n\n    if (review.title.length < 5) {\n      errors.rejectValue(\"title\", \"Length.reviewForm.title\",\n                         \"Title must be at least 5 characters long\")\n    }\n\n    if (review.body.length < 5) {\n      errors.rejectValue(\"body\", \"Length.reviewForm.body\",\n                         \"Body must be at least 5 characters long\")\n    }\n  }\n}\n```", "```\npackage com.example.placereviewer.controller\n\nimport com.example.placereviewer.component.ReviewValidator\nimport com.example.placereviewer.data.model.Review\nimport com.example.placereviewer.service.ReviewService\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.validation.BindingResult\nimport org.springframework.web.bind.annotation.ModelAttribute\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport javax.servlet.http.HttpServletRequest\n\n@Controller\n@RequestMapping(\"/reviews\")\nclass ReviewController(val reviewValidator: ReviewValidator, \n                       val reviewService: ReviewService) {\n\n  @PostMapping\n  fun create(@ModelAttribute reviewForm: Review, bindingResult: BindingResult,\n             model: Model, request: HttpServletRequest): String {\n    reviewValidator.validate(reviewForm, bindingResult)\n\n    if (!bindingResult.hasErrors()) {\n      val res = reviewService.createReview(request.userPrincipal.name,\n                                            reviewForm)\n\n      if (res) {\n        return \"redirect:/home\"\n      }\n    }\n\n    with (model) {\n      addAttribute(\"error\", bindingResult.allErrors.first().defaultMessage)\n      addAttribute(\"title\", reviewForm.title)\n      addAttribute(\"body\", reviewForm.body)\n      addAttribute(\"placeName\", reviewForm.placeName)\n      addAttribute(\"placeAddress\", reviewForm.placeAddress)\n      addAttribute(\"placeId\", reviewForm.placeId)\n      addAttribute(\"longitude\", reviewForm.longitude)\n      addAttribute(\"latitude\", reviewForm.latitude)\n    }\n\n    return \"create-review\"\n  }\n}\n```", "```\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.12</version>\n  <scope>test</scope>\n  <exclusions>\n    <exclusion>\n      <groupId>org.hamcrest</groupId>\n      <artifactId>hamcrest-core</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n<dependency>\n  <groupId>org.hamcrest</groupId>\n  <artifactId>hamcrest-library</artifactId>\n  <version>1.3</version>\n  <scope>test</scope>\n</dependency>\n```", "```\npackage com.example.placereviewer.config\n\nimport org.springframework.context.annotation.ComponentScan\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\n@ComponentScan(basePackages = [\"com.example.placereviewer\"])\nclass TestConfig\n```", "```\npackage com.example.placereviewer\n\nimport com.example.placereviewer.config.TestConfig\nimport org.junit.runner.RunWith\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.junit4.SpringRunner\n\n@RunWith(SpringRunner::class)\n@SpringBootTest\n@ContextConfiguration(classes = [TestConfig::class])\nclass PlaceReviewerApplicationTests\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.model.User\n\ninterface TestUserService {\n  fun getUser(): User\n}\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.model.User\nimport org.springframework.stereotype.Service\n\n@Service\ninternal class TestUserServiceImpl : TestUserService {\n\n  //Test stub mimicking user retrieval\n  override fun getUser(): User {\n    return User(\n      \"user@gmaiil.com\",\n      \"test.user\",\n      \"password\"\n    )\n  }\n}\n```", "```\npackage com.example.placereviewer\n\nimport com.example.placereviewer.config.TestConfig\nimport com.example.placereviewer.data.model.User\nimport com.example.placereviewer.service.TestUserService\nimport org.hamcrest.Matchers.instanceOf\nimport org.hamcrest.MatcherAssert.assertThat\nimport org.junit.Test\nimport org.junit.runner.RunWith\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.test.context.ContextConfiguration\nimport org.springframework.test.context.junit4.SpringRunner\n\n@RunWith(SpringRunner::class)\n@SpringBootTest\n@ContextConfiguration(classes = [TestConfig::class])\nclass PlaceReviewerApplicationTests {\n\n  @Autowired\n  lateinit var userService: TestUserService\n\n  @Test\n  fun testUserRetrieval() {\n    val user = userService.getUser()\n\n    assertThat(user, instanceOf(User::class.java))\n  }\n}\n```"]