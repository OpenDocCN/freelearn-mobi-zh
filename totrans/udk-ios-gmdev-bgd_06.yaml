- en: Chapter 6. Bringing it All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we created a series of sequences and prefabs giving
    us a solid background for creating different types of assets in our level and
    giving us some more in depth knowledge of using Kismet as well as an introduction
    to Prefabs to help us.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter we are going to expand on the items learned in the previous
    chapters and "bring it all together" to create our game, Urban Warrior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our room, learning about adjusting materials to fit your level's
    needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the best way to rapidly prototype levels using reference and placeholder
    brushes to stand in for art
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss a possible workflow for creating levels using **Geometry Mode**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build our level using pieces we've already built, duplicating work we've already
    done to make building quicker and more streamlined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct different combat scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So with that, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Starting a workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first started using Unreal it took me a lot time to create any type of
    new level. I would keep placing static meshes to hide areas of geometry that I
    missed, or adding in blocking volumes in order to make it actually possible to
    go through some places. One of the key reasons I had problems was that I didn't
    realize how to create a good workflow, and the key to mapping things in CSG super
    easily is **Geometry Mode**. Before we take care of that, let's first get our
    current level ready.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—starting our level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are now building our level from scratch using the pieces that we have built
    in previous chapters. As we already have a basis to draw from let''s start our
    game off. We can start our level as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Editor, select our **PlayerStart** actor. Move it to the left-hand side
    of the first door in our level by using Translation Mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the spawn point for our first enemy to be in front of the door using **Translation
    Mode**. There is a small light blue colored arrow on the actor. The arrow represents
    the direction in which the actor is facing. With that in mind, rotate the enemy's
    position in Rotation mode so it is facing away from the hero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the **PathNode** such that the second enemy is spawned right in front of
    the door through which it comes (the second door to the right).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click on your current floor of the level and move it down by 32 units,
    using the grid snap by pressing the *[* and *]* keys will decrease and increase
    the grid snap points until you get there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **World Properties** by selecting **View** | **World Properties**
    and set the **Kill Z** to **-64** so we won't die when we hit the floor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create three walls to encase our hero at his starting point as well as a ceiling
    above him and floor below him all with a width of **32**. Create the first wall,
    then by holding *Alt* and dragging the wall in the top viewport, duplicate the
    original wall to the other side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In front of our door make a duplicate of our floor by moving it 64 units in
    front, along the axis. Go into **Geometry** mode and hold the *Ctrl* + *Alt* keys
    and drag until you select both the vertices on the left-hand side in the top viewport.
    Drag the floor until it faces the door. Select the two vertices at the top and
    drag it down until it is in front of the door, and do the same for the bottom.
    At this point you should have a box in front of your door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the side viewport and select **Viewport Type** | **Front** to
    place the view into the front mode. Our screen should look like the following
    screenshot by now.![Time for action—starting our level](img/image_1901_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At that point in **Geometry** mode select our box and only click on the top
    right vertex. From there use the translation tool to move it to the left by 64
    degrees coming to the same point as the other vertices at the top, as shown in
    the following image:![Time for action—starting our level](img/image_1901_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the map by selecting **Build** | **Build All**. You should see a ramp
    going into your room that we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the viewport back to its previous position by right-clicking and selecting
    **Viewport Type** | **Side**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *L* in the center of the room to create a light. Selecting the light,
    put it in the direct center of the room in the X, Y, and Z axes. Open the **PointLight
    actor** properties, change its radius to `512`, and its **Falloff Exponent** to
    `16`. Inside the **Light Component** set the light color to a light blue and change
    the brightness to `0.6`. Press *Alt* + *3* to go into Unlit mode until you are
    ready to see the game's lighting, but you will have to build every time you change
    something to see it correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having a good reference can be key when creating new areas or gameplay. Characters
    in Unreal are defaulted to 96 units tall and while we can create a box of that
    size or right-click to get the measuring tape out to adjust, we can just place
    a mesh in our level to give us an idea of human proportions. Note that this is
    the character size of Epic Games' characters, but UDK does not limit the size
    of your characters. If you wish to create your own custom characters you may do
    so, but it is important that no matter what you remain consistent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go into the **Content Browser** and scroll your **Packages** column until you
    can click on **UDK Game**. With that selected type `Iron` in the search bar while
    checking the **Skeletal Mesh** option in the **Object Type** field. Left-click
    on the **IronGuard Skeletal Mesh**. Right-click in our level and place the object
    on top of the ground in our level. Note that you may have to move the mesh and
    adjust your grid spacing to get it just right. The following screenshot shows
    this process.![Time for action—starting our level](img/image_1901_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Having a reference is a great thing, especially if you are trying to recreate
    a real life building, however note that often at times in games you will have
    to compensate for different aspects of the world due to the differences in both
    gameplay and camera work. For example, hallways in games are usually two to three
    times larger than they would really be especially in games that can be multiplayer,
    such as *Left 4 Dead*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Left-click on our new actor and open up its properties by clicking *F4*. Type
    `Hidden` in the search bar and check the **Hidden Game** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we are in the games ourselves we don't need to see our reference, however
    if you'd like to keep our new actor in until you're ready then by all means go
    for it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the walls inside of our room by left-clicking on them in the perspective
    viewport.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the other walls in the room, taking care to remember that the door has
    two parts and a top. You can do this by holding *Ctrl* and clicking on each of
    the elements or right-clicking and selecting **Select Adjacent Walls**, but this
    option may also select the walls outside of the building as well. Also select
    the inside of the door, pressing *Alt* + *W* to hide static meshes to select them,
    remembering to press *Alt* + *W* again when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Content Browser** and pick out a wall material to use. I personally
    used `M_LT_Walls_BSP_Recycle06b` which is located in the **LT_Walls** package.
    Once you have left-clicked on the material you wanted to use, right-click on a
    selected wall in the perspective viewport and select **Add Material : M_LT_Walls_BSP_Recycle06b**.
    The following image shows the material that has been added to the walls:![Time
    for action—starting our level](img/image_1901_06_04.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you may notice that the material may look a bit off in terms of placement
    and how it doesn't match up; that's okay because that is what we're going to fix
    next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *F5* to enter the **Surface** properties menu. The first and easiest step
    is to change our alignment so that the brushes will work together so we have a
    seamless transition between brushes. To do this, find the **Alignment** property,
    click on the **Box** selection and click on **Apply**. Since our object is in
    fact shaped similarly to a box, it makes sense that the material can be applied
    this way, as shown in the following screenshot:![Time for action—starting our
    level](img/image_1901_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, I think that the texture is too small for the room I created; this
    is a simple fix as well. Above the **Alignment** box there is another area of
    the properties called **Scaling**. Under the **Simple** Option select `2.0` and
    click on the **Apply** button. Now our texture is twice as big as it was before.
    The **Scaling** box is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—starting our level](img/image_1901_06_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, we're on the right track, but I want to move the image down and over until
    I get to just the right place I want the texture to be. Panning the material will
    do just that. Adjust the **U** and **V** position of the texture by clicking on
    the buttons until you get the position you want for the material. I personally
    took the silvery part and made it a baseboard of sorts for my room. This is shown
    in the following screenshot:![Time for action—starting our level](img/image_1901_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a ceiling and floor material for your room. I personally used **Material'LT_Floors.BSP.Materials.M_LT_Floors_BSP_Grate_Pipes'**
    for the ceiling and **Material'LT_Floors.BSP.Materials.M_LT_Floors_BSP_Organic05b_TileBreak'**
    for the floor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our new base room completed, click on the door that we created
    on the right and delete it, saying **Yes** to the warning generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the top viewport hold the *Ctrl* + *Alt* keys and drag until you have
    the entire room we created selected. Go to **Geometry** mode and right-click on
    the top right vertices to change the position of our translate tool. Hold *Alt*
    and drag the item to the right-hand side so that it would be where the previous
    door would have been. Right-click and select **Transform** | **Mirror Y Axis**
    and move the room until it creates a room in front of the one that we previously
    created. Delete any extra **PathNodes** or **PlayerStart** actors you may have
    created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and click on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar, saying **yes** when it asks you to save the package.
    The following screenshot shows how our screen would look:![Time for action—starting
    our level](img/image_1901_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Taking the advice of our former selves our very short scenario is a lot more
    guided and our world making the game little closer to building our real game.
    Taking this into consideration we will be able to create a larger environment
    and complete our sample level.
  prefs: []
  type: TYPE_NORMAL
- en: Geometry mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about building a simple room earlier in the book, and when we created
    our doorway in [Chapter 4](ch04.html "Chapter 4. Using Kismet and Matinee"), *Using
    Kismet and Matinee*, we began to explore **Geometry Mode** and how we can use
    it. In much the same way we can use it to create gameplay areas quickly and effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed a grid of sorts in all the viewports other than the perspective
    one. We will be using the grid as a guideline in the creation of our levels in
    much the same way that you could use paper to draw things out, which is something
    some level designers I know do to get the general feel of an area. In order to
    build a general area you need to have this planned ahead of time—things such as
    having a general idea of how you want to place buildings, as well as an idea of
    how you want to guide the traversal of the player.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, pressing the *[* and *]* keys in the editor will decrease
    and increase the grid snap points making the level more or less detailed in your
    brush placement. For the purposes of this book, unless I say differently, I have
    my grid spacing set to 32\. Some people will want to use a smaller area, but I
    argue that when blocking something out we really only care about the big picture
    and getting the overall feel of the area. In case your brush is not aligned to
    the grid you can right-click on the vertices, and it will automatically snap it
    to the grid. If you notice the brush changing to have an **X** on it, which is
    alright, but it is advisable to go to the **Brush Properties** and reapply collision
    to it. This can be extremely useful, especially when working on the things discussed
    in previous chapters to get it to fit in line with the grid you are now using.
    Working with the grid is a fundamental way of making sure that you are not getting
    any holes and/or overlays of your brushes when creating a level. This is another
    way to make sure that your subtractive brushes will work as you intend them to;
    however I never use subtractive brushes if I can at all help it.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to note when using **Geometry** mode: you will not see any changes
    that we make when editing in **Geometry** mode until we build our BSP brushes
    again.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In all of the Unreal Tournament games (and **UTDeathmatch** games like we're
    using), 1 Unreal Unit is equal to 2 centimeters. That means that the 96 Unit character
    is in fact 6 feet tall! That being said, building things to scale can often seem
    much smaller than they really are because of the players field of view(FOV)" but
    it's a nice thing to use as a basis when building from real life.
  prefs: []
  type: TYPE_NORMAL
- en: Some keyboard tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Holding *Ctrl* + *Alt* at the same time and dragging will allow you to select
    all objects that are contained within it. If you are in **Geometry** mode it will
    allow you to select individual/overlapping vertices, allowing you to increase
    or decrease the size of your brushes very easily, which we will be using to create
    our buildings in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful tip is if you hold *Ctrl* and drag the left mouse button anywhere
    in a viewport it will move the brush, actor, and/or vertices that you have selected
    from any position. This is a good way to move objects that may not be far away
    or when you don't have to move the screen and don't want to use the widget that
    is usually used by the object.
  prefs: []
  type: TYPE_NORMAL
- en: If you just left-click on a brush in the perspective viewport it will select
    the face of the object. While this is fine for putting a material on the brush,
    on the other viewports it will select the brush for editing. If you hold *Ctrl*
    + *Shift* and left-click on your map you will notice that you will now select
    the brush that you clicked on. However, it can sometimes not pick the brush that
    you think you're selecting, which is why I primarily use the top and/or side viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Seeing double
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duplicating things that we have already created such as walls or buildings is
    an effective way of blocking out an environment very quickly. We did this in our
    previous example by duplicating the room that we created. What we care about most
    here is creating the best gameplay possible, so we pay less attention to fine
    details and basically want to just block out an area so we can iterate as quickly
    as possible. After all, you'd be a lot more willing to get rid of a huge box than
    a ridiculously detailed office building.
  prefs: []
  type: TYPE_NORMAL
- en: With the brushes we create we can then give the level to your team's environmental
    artist (or you if you are gifted with 3D modeling knowledge), who will in turn
    change the BSP brushes into meshes to place in our level to give it the visual
    flair that we are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: After placing a single brush in our level, you don't really need the builder
    brush again. Unless you are creating something other than a box you can just duplicate
    brushes and mould them using the **Geometry** tool to quickly shape out areas,
    which usually makes it much quicker to build. If you too feel as if you can live
    without the builder brush, you can press the *B* key to toggle the building brush
    on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Building our level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With knowledge of how to start a workflow, we can now apply that knowledge by
    building the rest of our level!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—building our level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the beginning of our level is completed, let''s add simple buildings
    and shapes that we can fill with the scripting we created earlier! This is done
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From the top viewport duplicate one of the walls from the rooms that we made
    previously by left-clicking on it, holding *Alt* and dragging it down, placing
    the top end so that the wall covers up the gap between the two doors. In **Geometry**
    mode grab the two bottom vertices and drag them down to create a square like shape
    and then in the side viewport drag the vertices up in order to create a building.
    This is how our screen would look.![Time for action—building our level](img/image_1901_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that first building created we can build others quite easily. Duplicate
    it by dragging and create three buildings of different sizes to create a blocking
    path leading the player towards the left. The following screenshot shows this.![Time
    for action—building our level](img/image_1901_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not only can we extend and modify brushes, we can also modify volumes! Extend
    our current **Lightmass Importance Volume** and floor by selecting both of the
    objects and dragging them out.![Time for action—building our level](img/image_1901_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click on one of the prefab doors that we have created and create another
    door, a little distance after the player turns left, making sure to lower the
    door down so it fits nicely with the ground. We do not want the door to go as
    far out as the previous version that we created, so select the top six points
    and drag the door over, adjusting the two at the top afterwards, to create an
    even door. However, the KActor of the door itself will not change, so right-click
    on the prefab and select **Convert PrefabInstance into Normal Actors**. From there,
    you can move the door into its proper spot using the top and side viewports as
    your guide, building when necessary to help you visualize what the level looks
    like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate buildings changing the heights, placing one to the north of the new
    door that we added and another north of it to open up a little area for the player
    to explore. This can be seen in the following top viewport screenshot.![Time for
    action—building our level](img/image_1901_06_12.jpg)![Time for action—building
    our level](img/image_1901_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that I purposefully made the building in front of the door's holder to
    show the player that there is a path that can be taken giving the player a sense
    of choice in the level.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, the player can choose one of two paths, which we will converge
    into a large area. Create buildings of different sizes and shapes to fill a center
    courtyard, taking care to make the buildings on the furthest north side the lowest
    of the bunch as that is where we are going to lead the player.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—building our level](img/image_1901_06_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the center of our courtyard place an elevated pedestal by first creating
    a box around 32 units high. Build the map then left-click on the face of the brush
    in the perspective viewport. Change to Scaling mode and shrink the top face. If
    you build the game you will notice that now the brush has slants. Play the game
    to make sure that you can walk up and down on the pedestal before moving forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Elevated ground will draw the player to this position, plus we will place enemies
    there later so it's a good way to draw attention to the area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create ramps leading to the top of the furthest building in much the same way
    we created ramps for our first room. I personally created a ramp forward, then
    a straight part and then another ramp for a left turn. This could be done as a
    fire escape, but we basically want to communicate to the player to go here, as
    shown in the following screenshot:![Time for action—building our level](img/image_1901_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand both your floor and **lightmass Importance Volume** in both the north
    and east directions by selecting the two vertices at the top and dragging north,
    then selecting the two vertices on the right-hand side and dragging them east.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create buildings in order to create an enclosed area leading towards a final
    location which you will leave open and will be four grid squares wide at a grid
    snap of 128.![Time for action—building our level](img/image_1901_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the center of the open space that you have created place the `StaticMesh'ASC_Floor2.SM.Mesh.S_ASC_Floor2_SM_Stairs_Simple_01'`.
    To each of its sides create a ramp shape to cover up its sides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Above the two ramps that you have created create two vertically large pillars.
    On the top of the pillar place another brush that is slanted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a ceiling and a floor to the entrance we've created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the two long pillars that we created and duplicate them within the temple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Past the second pillar create a secondary flight of stairs and a floor ahead
    for its elevated path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In front of the floor place a single wall behind it and walls on the sides of
    the temple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In front of the second flight of stairs place a `StaticMesh'NR_Deco.SM.Mesh.S_NR_Deco_SM_FountainTop03'`
    and above it `ParticleSystem'Castle_Assets.FX.P_FX_Fire_SubUV_01'` and above that
    a spot light (by pressing *L* and clicking inside the viewport where you want
    it to be placed) with a radius of `1024`, a `.3` brightness, and a dark red color.
    Inside the **lightmass** settings change the light source to `32` and duplicate
    the items to the other side of the stairs as well.![Time for action—building our
    level](img/image_1901_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now do a quick texture pass by using `Material'LT_Floors.BSP.Materials.M_LT_Floors_BSP_Dark_TileBreak_02'for`
    the walls and `Material'LT_Floors.BSP.Materials.M_LT_Floors_BSP_Organic05b_TileBreak'`
    for the floor and ceiling of our temple. Select all of the materials and give
    it a simple scaling of `4.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Dominant Directional Light** actor and change its light color to
    dark blue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outside the player's path but in their view, place some `StaticMesh'LT_Mech.SM.Mesh.S_LT_Mech_SM_CityNoRing01'`
    actors to create scenery for our level. Note that this mesh was created for the
    PC multiplayer title Unreal Tournament 3 and has in no way been optimized for
    a mobile game. That being said, don't place more than four in the level or else
    the game will really start to slow down when we test it. The following screenshot
    is what the finished level will look like:![Time for action—building our level](img/image_1901_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our level now has a clear beginning, middle, and end. The goals for the player
    to go to as well as some backdrop and lighting effects are visible. Now all we
    need to do is add our interactive elements and we will have our game completed!
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—powerups and weapon pickups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the tools that level designers have is the ability to reward players
    for traveling certain ways. Promoting exploration and giving players reason to
    go out will make your level much more interesting. Inside the **Actor** classes
    tab there is a class called **UTPickupFactory** with both **Health** and **Weapon**
    pickups. Try to place some goodies in your newly created level. I personally put
    a rocket launcher in the area leading up to the temple.
  prefs: []
  type: TYPE_NORMAL
- en: Combat scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are in fact making a third person shooter, it makes sense that we would
    want to have different combat scenarios in our game. After completing our level's
    layout we will now add the things that will make our level come alive! We went
    over the creation of enemies as well as advice on combat scenarios in the previous
    chapter, so now we will be acting upon these lessons to create our own game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—first combat scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using trigger volumes to spawn enemies and have them interact in
    your environment. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Editor, duplicate the top part of the door that goes into the second
    area and move it so that its front is joined with the building we created with
    the split. Right-click on the actor and select **Convert** | **Convert to Volume**
    | **Trigger Volume**. After this go to the side viewport and adjust the bottom
    vertices so they hit the floor. Hint: Pressing *Alt* + *W* will make the static
    meshes that we''ve placed previously disappear. The following screenshot shows
    this:![Time for action—first combat scenario](img/image_1901_06_19.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate the trigger volume that we have just created and place it directly
    above where this one is. This way, no matter which way the player chooses to go
    something will happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will place two path nodes behind each of the two routes we have created as
    well as two path nodes in the middle. What we are going to do is spawn two enemies
    when the player hits one of these triggers, and the two enemies will travel along
    the path the player first chose, as shown in the following screenshot:![Time for
    action—first combat scenario](img/image_1901_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click on the trigger volume at the top that we created and open Kismet.
    Create a **TriggerVolume Touch** event by choosing **New Event using TriggerVolume_5**
    | **Touch** from the menu that pops up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Left-click on the trigger volume that we created at the bottom and open Kismet.
    Create a **TriggerVolume Touch** event beneath the one that we just created by
    choosing **New Event using TriggerVolume_6** | **Touch** from the menu that pops
    up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Toggle** action by right-clicking and selecting **New Action** |
    **Toggle** | **Toggle**. Connect the **Event** link to the top of the **TriggerVolume_5
    Touch** action. Connect the **Out** output of the **TriggerVolume_6 Touch** action
    to the **Turn Off** input of this Toggle action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another toggle action to turn the other action off if this one is called.
    The following screenshot shows what we've done so far:![Time for action—first
    combat scenario](img/image_1901_06_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the two paths, create two set **Object** actions by selecting **New
    Action** | **Set Variable** | **Object**. Under the **Value** variable link place
    the two top path nodes we created to the top trigger and the bottom two to the
    other. Don't worry about the target yet, we will come to that in a later step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste two copies of the **EnemyAI** subsequence that we created earlier
    right next to each other. Connect the **Out** of both the second **Set Object**
    variable outputs to the **In** of the first **EnemyAI** object and the **Spawned**
    output of the first connects to the **In** of the second. Create an Object variable
    underneath the **Spawned** link for each node and make the two path nodes we placed
    out of player sight as the spawn points for both objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Move To Actor** action by right-clicking and selecting **New Action**
    | **AI** | **Move To Actor**. Underneath the **Target** variable link connect
    the first spawned object that we created. Under **Destination** create an **Object**
    variable and connect it. Connect the **Spawned** output from the **EnemyAI** action
    to the **In** input on the **Move To Actor** action. Also, in the **Set variable**
    actions that we discussed in Step 5 connect the **Target** variable link for the
    first object in each row to this object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now create a second **Move to Actor** action using the **Spawned** variable
    link of the second **EnemyAI** as the **Target** and create a new **Object** variable
    under the **Destination** link, which you will set as the **Target** of the second
    **Set Object** in each path.![Time for action—first combat scenario](img/image_1901_06_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At some point during this tutorial you may see a problem and/or an error in
    your project saying something along the lines of **SeqAct_ActorFactory_0 has no
    spawn points!** In that case, go into Kismet where that problem node is, double
    click on it to select it in the editor and double-click on the **Enemy_AI Sequence**
    it contains. At the **Actor Factory** action click on the plus icon to add a new
    item to the spawn point list and if it isn't filled already click on the arrow
    pointing left in order to fill the value with the object we have selected. Exit
    the subsequence and hook up the items again that were attached to it. When you
    run your game next it should start working again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and click **Close** when
    finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar. The game's preview should look like the following
    screenshot:![Time for action—first combat scenario](img/image_1901_06_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With only a little bit of effort we have easily created a second combat encounter
    in the game that adjusts itself based on player actions.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—creating your own combat encounter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next section I am going to leave as a blank area for you to create some
    kind of combat encounter of your own. You can place pieces of cover, or alternate
    weapons. Try to think of something that will really make someone say, "Wow!" when
    they see it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—end of level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using trigger volumes to spawn enemies and have them interact in
    your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Place a trigger volume in front of the temple that we created earlier. At the
    back of the temple as well as behind the second pillar place path nodes on both
    sides, away from the player's line of sight. This is shown by the top viewport
    screenshot:![Time for action—end of level](img/image_1901_06_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how it will look in the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—end of level](img/image_1901_06_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Press the *P* button to see the paths that have been created by your path nodes.
    If you do not see any lines in-between the two sets of nodes you may have to place
    one or two extra nodes to make sure the enemies' paths are laid out correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Left-click on our trigger volume and create a **Trigger Volume Touch** event
    in Kismet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the two **EnemyAI** and **Move to Actor** actions from the previous
    example and hook it up to the **Trigger Volume Event.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the spawn point links and replace them with the two nodes at the top
    of the temple. Delete the **Destination** links in the **Move to Actor** events
    and have them travel to the path nodes in the front.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate your trigger volume and put it at the top of the temple's hill. Create
    a Touch event with a **Console Command** event with **quit** at the prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and click on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We created a new combat scenario in which the enemies run into cover leaving
    themselves vulnerable while letting the player know that they''re there. We also
    created an end point to the level which allows us to complete the game. The following
    screenshot show this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image_1901_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are some of the problems with creating a level without using grid snaps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Holes in our geometry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Overlapping brushes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Ensuring subtractive brushes work correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. All of the above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What keys do you use in order to increase or decrease grid snaps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. + and .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Left and right arrow keys.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. [ and ].
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. ( and ).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Is it possible to have an event with a Max Trigger Count of 0 (Can be triggered
    as many times as you'd like) to no longer be triggered? If possible, how would
    I do that?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. False, we can't toggle an Event on and off.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. False, the Max Trigger Count has to be positive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. True, we can toggle an Event on and off.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. True, it's done automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now reached the end of our game development section of the book. There
    is plenty of room now for you to make your project your own, add new levels, and
    explore the different aspects of the Unreal Engine; we have built the foundation
    of a truly awesome game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this short period of time we''ve managed to cover quite a lot of things.
    We''ve specifically learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to set up our room learning about adjusting materials to fit your level's
    needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to rapidly prototype out levels using reference and placeholder
    brushes to stand in for art
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A possible workflow for creating levels using **Geometry** mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build our level using pieces we've already built duplicating work we've
    already done to make building quicker and more streamlined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of different combat scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned how to build the level and created all of the gameplay
    sections, in the next chapter I will be showing you how to add a main menu as
    well as play sounds, integrate custom content into your game, discuss optimizing,
    and debug your iOS game project to polish it as much as we can before we put it
    up on the App Store!
  prefs: []
  type: TYPE_NORMAL
