["```swift\nimport QuickLook\n```", "```swift\nlet tapGesture = UITapGestureRecognizer(target: self,\n  action: #selector(presentQuicklook))\nguitarImage.addGestureRecognizer(tapGesture)\n```", "```swift\n@objc func presentQuicklook() {\n   let previewViewController = QLPreviewController()\n   previewViewController.dataSource = self\n   previewViewController.delegate = self\n   present(previewViewController, animated: true,\n     completion: nil)\n}\n```", "```swift\nextension ViewController: QLPreviewControllerDelegate {\n  func previewController(_ controller: QLPreviewController, \n    transitionViewFor item: QLPreviewItem) -> UIView? {\n     return guitarImage\n  }\n}\nextension ViewController: QLPreviewControllerDataSource {\n  func numberOfPreviewItems(in controller: \n    QLPreviewController) -> Int {\n    return 1\n  }\n  func previewController(_ controller: QLPreviewController,\n    previewItemAt index: Int) -> QLPreviewItem {\n    let fileUrl = Bundle.main.url(forResource: \n      \"stratocaster\", withExtension: \"usdz\")!\n    return fileUrl as QLPreviewItem\n  }\n}\n```", "```swift\nif let scene = SKScene(fileNamed: \"GameScene\") {\n    scene.scaleMode = .aspectFill    \n    view.presentScene(scene)\n}\n```", "```swift\nspinnyNode.run(SKAction.repeatForever(SKAction.rotate(byAng\n  le: CGFloat(Double.pi), duration: 1)))\nspinnyNode.run(SKAction.sequence([SKAction.wait(forDuration\n  : 0.5), SKAction.fadeOut(withDuration: 0.5), \n   SKAction.removeFromParent()]))\n```", "```swift\nguard let sceneView = self.view as? SCNView \n  else { return }\n```", "```swift\nlet scene = SCNScene()\nsceneView.scene = scene\nsceneView.allowsCameraControl = true\nsceneView.showsStatistics = true\nsceneView.backgroundColor = UIColor.black\n```", "```swift\nlet cameraNode = SCNNode()\ncameraNode.camera = SCNCamera()\ncameraNode.position = SCNVector3(x: 0, y: 0, z: 15)\nscene.rootNode.addChildNode(cameraNode)\n```", "```swift\nlet ambientLightNode = SCNNode()\nambientLightNode.light = SCNLight()\nambientLightNode.light!.type = .ambient\nambientLightNode.light!.color = UIColor.orange\nscene.rootNode.addChildNode(ambientLightNode)\n```", "```swift\nlet plane = SCNPlane(width: 15, height: 10)\nplane.firstMaterial?.diffuse.contents = UIColor.white\nplane.firstMaterial?.isDoubleSided = true\nplane.cornerRadius = 0.3\n\nlet planeNode = SCNNode(geometry: plane)\nplaneNode.position = SCNVector3(x: 0, y: 0, z: -15)\nscene.rootNode.addChildNode(planeNode)\n```", "```swift\nlet text = SCNText(string: \"Hello, world!\", extrusionDepth:\n  0)\ntext.font = UIFont.systemFont(ofSize: 2.3)\ntext.isWrapped = true\ntext.containerFrame = CGRect(x: -6.5, y: -4, width: 13, \n  height: 8)\ntext.firstMaterial?.diffuse.contents = UIColor.red\nlet textNode = SCNNode(geometry: text)\nplaneNode.addChildNode(textNode)\n```", "```swift\narKitScene.delegate = self\narKitScene.session.delegate = self\n```", "```swift\noverride func viewWillAppear(_ animated: Bool) {\n  super.viewWillAppear(animated)\n  // 1\n  let imageSet = ARReferenceImage.referenceImages(\n    inGroupNamed: \"Art\", bundle: Bundle.main)!\n  // 2\n  let configuration = ARWorldTrackingConfiguration()\n  configuration.planeDetection = [.vertical, .horizontal]\n  configuration.detectionImages = imageSet\n  // 3\n  arKitScene.session.run(configuration, options: [])\n}\n```", "```swift\noverride func viewWillDisappear(_ animated: Bool) {\n  super.viewWillDisappear(animated)\n  arKitScene.session.pause()\n}\n```", "```swift\nfunc placeImageInfo(withNode node: SCNNode, for anchor: \n  ARImageAnchor) {\n  let referenceImage = anchor.referenceImage\n  // 1\n  let infoPlane = SCNPlane(width: 15, height: 10)\n  infoPlane.firstMaterial?.diffuse.contents = UIColor.white\n  infoPlane.firstMaterial?.transparency = 0.5\n  infoPlane.cornerRadius = 0.5\n  // 2\n  let infoNode = SCNNode(geometry: infoPlane)\n  infoNode.localTranslate(by: SCNVector3(0, 10, - \n    referenceImage.physicalSize.height / 2 + 0.5))\n  infoNode.eulerAngles.x = -.pi / 4\n  // 3\n  let textGeometry = SCNText(string:\n  artDescriptions[referenceImage.name ?? \"flowers\"], \n    extrusionDepth: 0.2)\n  textGeometry.firstMaterial?.diffuse.contents = \n    UIColor.red\n  textGeometry.font = UIFont.systemFont(ofSize: 1.3)\n  textGeometry.isWrapped = true\n  textGeometry.containerFrame = CGRect(x: -6.5, y: -4, \n    width: 13, height: 8)\n  let textNode = SCNNode(geometry: textGeometry)\n  // 4\n  node.addChildNode(infoNode)\n  infoNode.addChildNode(textNode)\n}\n```", "```swift\nfunc renderer(_ renderer: SCNSceneRenderer, didAdd node: \n  SCNNode, for anchor: ARAnchor) {\n  if let imageAnchor = anchor as? ARImageAnchor {\n    placeImageInfo(withNode: node, for: imageAnchor)\n  }\n}\n```", "```swift\n func collectionView(_ collectionView: UICollectionView, \n   didSelectItemAt indexPath: IndexPath) {\n  //1\n  guard let camera = \n    arKitScene.session.currentFrame?.camera\n    else { return }\n  //2\n  let hitTestResult = arKitScene.hitTest(CGPoint(x: 0.5, y: \n    0.5), types: [.existingPlane])\n  let firstVerticalPlane = hitTestResult.first(where: { \n    result in\n    guard let planeAnchor = result.anchor as? ARPlaneAnchor\n      else { return false }\n\n    return planeAnchor.alignment == .vertical\n  })\n  //3\n  var translation = matrix_identity_float4x4\n  translation.columns.3.z = - \n    Float(firstVerticalPlane?.distance ?? -1)\n  let cameraTransform = camera.transform\n  let rotation = matrix_float4x4(cameraAdjustmentMatrix)\n  let transform = matrix_multiply(cameraTransform, \n    matrix_multiply(translation, rotation))\n\n  //4\n  let anchor = ARAnchor(transform: transform)\n  imageNodes[anchor.identifier] = UIImage(named: \n    images[indexPath.row])!\n  arKitScene.session.add(anchor: anchor)\n\n  storeWorldMap()\n}\n```", "```swift\nfunc placeCustomImage(_ image: UIImage, withNode node: \n  SCNNode) {\n  let plane = SCNPlane(width: image.size.width / 1000, \n    height: image.size.height / 1000)\n  plane.firstMaterial?.diffuse.contents = image\n\n  node.addChildNode(SCNNode(geometry: plane))\n}\n```", "```swift\nfunc vizualise(_ node: SCNNode, for planeAnchor: \n  ARPlaneAnchor) {\n  let infoPlane = SCNPlane(width: \n   CGFloat(planeAnchor.extent.x), height: \n     CGFloat(planeAnchor.extent.z))\n  infoPlane.firstMaterial?.diffuse.contents = \n    UIColor.orange\n  infoPlane.firstMaterial?.transparency = 0.5\n  infoPlane.cornerRadius = 0.2\n\n  let infoNode = SCNNode(geometry: infoPlane)\n  infoNode.eulerAngles.x = -.pi / 2\n\n  node.addChildNode(infoNode)\n}\n```", "```swift\nfunc renderer(_ renderer: SCNSceneRenderer, didAdd node: \n  SCNNode, for anchor: ARAnchor) {\n  if let imageAnchor = anchor as? ARImageAnchor {\n    placeImageInfo(withNode: node, for: imageAnchor)\n  } else if let customImage = imageNodes[anchor.identifier]\n   {\n    placeCustomImage(customImage, withNode: node)\n  } else if let planeAnchor = anchor as? ARPlaneAnchor {\n    vizualise(node, for: planeAnchor)\n  }\n}\n```"]