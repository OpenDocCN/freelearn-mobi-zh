["```kt\n    implementation \"androidx.room:room-runtime:2.4.2\"\n    kapt \"androidx.room:room-compiler:2.4.2\"\n    implementation \"androidx.room:room-ktx:2.4.2\"\n    ```", "```kt\n    plugins {\n        id 'com.android.application'\n        id 'kotlin-android'\n        id 'kotlin-kapt'\n    }\n    ```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class Restaurant(…)\n    ```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class Restaurant(\n        @ColumnInfo(name = \"r_id\")\n        @SerializedName(\"r_id\")\n        val id: Int,\n        @ColumnInfo(name = \"r_title\")\n        @SerializedName(\"r_title\")\n        val title: String,\n        @ColumnInfo(name = \"r_description\")\n        @SerializedName(\"r_description\")\n        val description: String,\n        var isFavorite: Boolean = false\n    )\n    ```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class Restaurant(\n        @PrimaryKey()\n        @ColumnInfo(name = \"r_id\")\n        @SerializedName(\"r_id\")\n        val id: Int,\n        …)\n    ```", "```kt\n    import androidx.room.*\n    @Dao\n    interface RestaurantsDao { }\n    ```", "```kt\n    @Dao\n    interface RestaurantsDao {\n        @Query(\"SELECT * FROM restaurants\")\n        suspend fun getAll(): List<Restaurant>\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        suspend fun addAll(restaurants: List<Restaurant>)\n    }\n    ```", "```kt\n    @Database(\n        entities = [Restaurant::class], \n        version = 1, \n        exportSchema = false)\n    abstract class RestaurantsDb : RoomDatabase() { }\n    ```", "```kt\n    @Database(…)\n    abstract class RestaurantsDb : RoomDatabase() {\n        abstract val dao: RestaurantsDao\n    }\n    ```", "```kt\n    @Database(…)\n    abstract class RestaurantsDb : RoomDatabase() {\n        abstract val dao: RestaurantsDao\n        companion object {\n    private fun buildDatabase(context: Context): \n                RestaurantsDb =\n                Room.databaseBuilder(\n                    context.applicationContext,\n                    RestaurantsDb::class.java,\n                    \"restaurants_database\")\n                    .fallbackToDestructiveMigration()\n                    .build()\n        }\n    }\n    ```", "```kt\n    companion object {\n        @Volatile\n        private var INSTANCE: RestaurantsDao? = null\n    fun getDaoInstance(context: Context): RestaurantsDao \n        {\n            synchronized(this) {\n                var instance = INSTANCE\n                if (instance == null) {\n                    instance = buildDatabase(context).dao\n                    INSTANCE = instance\n                }\n                return instance\n            }\n        }\n        private fun buildDatabase(…) = …\n    }\n    ```", "```kt\nclass RestaurantsApplication: Application() {\n    init { app = this }\n    companion object {\n        private lateinit var app: RestaurantsApplication\n        fun getAppContext(): Context = \n            app.applicationContext\n    }\n}\n```", "```kt\n    <application\n        android:allowBackup=\"true\"\n        android:name=\".RestaurantsApplication\"\n        android:icon=\"@mipmap/ic_launcher\"\n        …\n        <activity> … </activity>\n    </application>\n    ```", "```kt\n    class RestaurantsViewModel(…) : ViewModel() {\n        private var restInterface: RestaurantsApiService\n        private var restaurantsDao = RestaurantsDb\n            .getDaoInstance(\n                RestaurantsApplication.getAppContext()\n            )\n         ....\n    }\n    ```", "```kt\n    private suspend fun getRemoteRestaurants(): \n        List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            val restaurants = restInterface.getRestaurants()\n            restaurantsDao.addAll(restaurants)\n            return@withContext restaurants\n        }\n    }\n    ```", "```kt\n    private suspend fun getRemoteRestaurants():\n    List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            try {\n                val restaurants = restInterface\n                    .getRestaurants()\n                restaurantsDao.addAll(restaurants)\n                return@withContext restaurants\n            } catch (e: Exception) {\n                when (e) {\n                    is UnknownHostException,\n                    is ConnectException,\n                    is HttpException -> {\n    return@withContext \n                            restaurantsDao.getAll()\n                    }\n                    else -> throw e\n                }\n            }\n        }\n    }\n    ```", "```kt\nprivate suspend fun getAllRestaurants(): \n    List<Restaurant> {  }\n```", "```kt\nprivate fun getRestaurants() {\n    viewModelScope.launch(errorHandler) {\n        val restaurants = getAllRestaurants()\n        state.value = restaurants.restoreSelections()\n    }\n}\n```", "```kt\nfun toggleFavorite(id: Int) {\n    val restaurants = state.value.toMutableList()\n    val itemIndex = restaurants.indexOfFirst { it.id == id }\n    val item = restaurants[itemIndex]\n    restaurants[itemIndex] = item.copy(isFavorite =  \n        !item.isFavorite)\n    storeSelection(restaurants[itemIndex])\n    state.value = restaurants\n}\n```", "```kt\n    @Entity\n    class PartialRestaurant(\n        @ColumnInfo(name = \"r_id\")\n        val id: Int,\n        @ColumnInfo(name = \"is_favorite\")\n        val isFavorite: Boolean)\n    ```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class Restaurant(\n        …\n        val description: String,\n        @ColumnInfo(name = \"is_favorite\")\n        val isFavorite: Boolean = false\n    )\n    ```", "```kt\n    private fun List<Restaurant>.restoreSelections(): … {\n        stateHandle.[…]let { selectedIds ->\n            val restaurantsMap = this.associateBy { it.id }\n                .toMutableMap()\n            selectedIds.forEach { id ->\n    val restaurant = \n                    restaurantsMap[id] ?: return@forEach\n                restaurantsMap[id] =\n                    restaurant.copy(isFavorite = true)\n            }\n            return restaurantsMap.values.toList()\n        }\n        return this\n    }\n    ```", "```kt\n    @Dao\n    interface RestaurantsDao {\n        …\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        suspend fun addAll(restaurants: List<Restaurant>)\n        @Update(entity = Restaurant::class)\n        suspend fun update(partialRestaurant:\n            PartialRestaurant)\n    }\n    ```", "```kt\nprivate suspend fun toggleFavoriteRestaurant(id: Int, oldValue: Boolean) =\n    withContext(Dispatchers.IO) {\n        restaurantsDao.update(\n            PartialRestaurant(\n                id = id,\n                isFavorite = !oldValue\n            )\n        )\n    }\n```", "```kt\n    fun toggleFavorite(id: Int) {\n        …\n        restaurants[itemIndex] = item.copy(isFavorite =  \n           !item.isFavorite)\n        storeSelection(restaurants[itemIndex])\n        state.value = restaurants\n        viewModelScope.launch {\n            toggleFavoriteRestaurant(id, item.isFavorite)\n        }\n    }\n    ```", "```kt\n    java.lang.IllegalStateException: Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number.\n    ```", "```kt\n    @Database(\n        entities = [Restaurant::class],\n        version = 2,\n        exportSchema = false)\n    abstract class RestaurantsDb : RoomDatabase() { .. }\n    ```", "```kt\nprivate suspend fun getAllRestaurants(): List<Restaurant> {\n    return withContext(Dispatchers.IO) {\n        try {\n            val restaurants = restInterface.getRestaurants()\n            restaurantsDao.addAll(restaurants)\n            return@withContext restaurants\n        } catch (e: Exception) {\n            when (e) {\n                is UnknownHostException, […] -> {\n                    return@withContext restaurantsDao.getAll()\n                }\n                else -> throw e\n            }\n        }\n    }\n}\n```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class Restaurant(\n        …\n        @ColumnInfo(name = \"is_favorite\")\n        val isFavorite: Boolean = false)\n    ```", "```kt\n    private suspend fun getAllRestaurants(): \n         List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            try { … } catch (e: Exception) { […] }\n            return@withContext restaurantsDao.getAll()\n        }\n    }\n    ```", "```kt\nreturn withContext(Dispatchers.IO) {\n    try {\n        refreshCache()\n    } catch (e: Exception) { […] }\n    return@withContext restaurantsDao.getAll()\n}\n```", "```kt\n    private suspend fun refreshCache() {\n        val remoteRestaurants = restInterface\n            .getRestaurants()\n        restaurantsDao.addAll(remoteRestaurants)\n    }\n    ```", "```kt\ntry { … } catch (e: Exception) {\n    when (e) {\n        is UnknownHostException, is ConnectException,\n        is HttpException -> {\n            if (restaurantsDao.getAll().isEmpty())\n                throw Exception(\n                    \"Something went wrong. \" +\n                            \"We have no data.\")\n        }\n        else -> throw e\n    }\n}\n```", "```kt\nfun toggleFavorite(id: Int) {\n    …\n    restaurants[itemIndex] = item.copy(isFavorite =\n        !item.isFavorite)\n    storeSelection(restaurants[itemIndex])\n    state.value = restaurants\n    viewModelScope.launch {\n        toggleFavoriteRestaurant(id, item.isFavorite)\n    }\n}\n```", "```kt\n    private suspend fun toggleFavoriteRestaurant(\n        id: Int,\n        oldValue: Boolean\n    ) = withContext(Dispatchers.IO) {\n            restaurantsDao.update(\n               PartialRestaurant(id = id, isFavorite = \n                   !oldValue))\n            restaurantsDao.getAll()\n        }\n    ```", "```kt\n    fun toggleFavorite(id: Int) {\n        val restaurants = state.value.toMutableList()\n        […]\n        storeSelection(restaurants[itemIndex])\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants = \n                toggleFavoriteRestaurant(id, item.isFavorite)\n            state.value = updatedRestaurants\n        }\n    }\n    ```", "```kt\nprivate suspend fun refreshCache() {\n    val remoteRestaurants = restInterface\n        .getRestaurants()\n    restaurantsDao.addAll(remoteRestaurants)\n}\n```", "```kt\n    private suspend fun refreshCache() {\n        val remoteRestaurants = restInterface\n            .getRestaurants()\n        val favoriteRestaurants = restaurantsDao\n            .getAllFavorited()\n        restaurantsDao.addAll(remoteRestaurants)\n        restaurantsDao.updateAll(\n            favoriteRestaurants.map {\n                PartialRestaurant(it.id, true)\n            })\n    }\n    ```", "```kt\n    @Dao\n    interface RestaurantsDao {\n        […]\n        @Update(entity = Restaurant::class)\n    suspend fun updateAll(partialRestaurants: \n            List<PartialRestaurant>)\n    @Query(\"SELECT * FROM restaurants WHERE \n            is_favorite = 1\")\n        suspend fun getAllFavorited(): List<Restaurant>\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() { … }\n    ```", "```kt\n    fun toggleFavorite(id: Int) {\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants =\n                toggleFavoriteRestaurant(id, item.isFavorite)\n            state.value = updatedRestaurants\n        }\n    }\n    ```", "```kt\n    fun toggleFavorite(id: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants =\n                toggleFavoriteRestaurant(id, oldValue)\n            state.value = updatedRestaurants\n        }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            state.value = getAllRestaurants()\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantItem([…],\n            onFavoriteClick: (id: Int, oldValue: Boolean)\n                -> Unit,\n            onItemClick: (id: Int) -> Unit) {\n        ...\n        Card(…) {\n            Row(…) {\n                [...]\n                RestaurantDetails(...)\n                RestaurantIcon(icon, Modifier.weight(0.15f)) \n                {\n                    onFavoriteClick(item.id, item.isFavorite)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n        val viewModel: RestaurantsViewModel = viewModel()\n        LazyColumn(…) {\n            items(viewModel.state.value) { restaurant ->\n                RestaurantItem(\n                    restaurant,\n                    onFavoriteClick = { id, oldValue ->\n                        viewModel\n                            .toggleFavorite(id, oldValue)\n                    },\n                    onItemClick = { id -> onItemClick(id) })\n            }\n        }\n    }\n    ```"]