["```swift\nvar aiActivity = new UIActivityIndicatorView()\n{\nActivityIndicatorViewStyle = UIActivityIndicatorViewStyle.Gray,HidesWhenStopped = true,\n};\n// start the indicator\naiActivity.StartAnimating();\n// stop the indicator\naiActivity.StopAnimating();\n```", "```swift\nvar pvActivity = new UIProgressView()\n{\nBackgroundColor = UIColor.Red,Style = UIProgressViewStyle.Bar,\n};\npvActivity.SetProgress(0, true);\n```", "```swift\nprivate void myTestRoutine()\n{\n    int n = 5;\n    for (int i = 0; I < n; ++i)\n    {\n        Thread.Sleep(1000);\n        using (var pool = new NSAutoreleasePool())\n        {\n            InvokeOnMainThread(delegate\n            {\n                 pvActivity.Progress = (float)(i + 1) / n;\n            });\n        }\n    }\n}\n```", "```swift\nThread t = new Thread(myTestRoutine);\nt.Start();\n```", "```swift\nvar myImage = new UIImageView()\n{\n  ContentMode = UIViewContentMode.ScaleAspectFit;\n  Image = UIImage.FromFile(\"Graphics/helloXamarin.png\"),\n  Frame = new RectangleF(new PointF(20, 20), new SizeF(100, 100)),\n};\n```", "```swift\nUIImageView animation = new UIImageView()\n{\n    Frame = new RectangleF(new PointF(20, 20), newSizeF(100,100)),\n    AnimationDuration = 0.5,\n    AnimationRepeatCount = 0,\n    Center = new PointF(animation.Center.X + 115,animation.Center.Y + 65),\n};\nanimation.AnimationImages = new UIImage[]\n{\n    UIImage.FromFile(\"Graphics/track-1.png\"),UIImage.FromFile(\"Graphics/track-2.png\"),UIImage.FromFile(\"Graphics/track-3.png\"),UIImage.FromFile(\"Graphics/track-4.png\"),UIImage.FromFile(\"Graphics/track-5.png\"),UIImage.FromFile(\"Graphics/track-6.png\")};\nanimation.StartAnimating();\n```", "```swift\nanimation.StopAnimating();\n```", "```swift\nvar web = new UIWebView();\nNSUrl url = new NSUrl(\"http://www.bbc.co.uk\");\nweb.LoadRequest(new NSUrlRequest(url));\n```", "```swift\n        web.LoadStarted += delegate {\n          // start ActivityIndicator here, stops anything else happening\n        };\n        web.LoadFinished += delegate {\n          // stop ActivityIndicator\n        };\n        web.LoadError += delegate {\n          UIAlertView error message\n        };\n        ```", "```swift\n    web.Reload();\n    ```", "```swift\n    web.ScalesPageToFit = true;\n    ```", "```swift\nprivate List<UIView> viewPages = new List<UIView>();\nprivate int numPages = 4;\nprivate float pad = 10, height =400, width = 300;\npublic override void ViewDidLoad()\n{\n     scrollView.Frame = View.Frame;\n     scrollView.PagingEnabled = true;\n     scrollview.ContentSize = new SizeF(numPages * width + pad +\n       2 * pad * (numPages â€“ 1), View.Frame.Height);\n```", "```swift\nprivate UIPageControl pageNumber;\n```", "```swift\nscrollView.Scrolled += delegate {\n    pageNumber.CurrentPage = (int)Math.Round(scrollView.X / width);\n};\n```", "```swift\nsecondView v2 = new secondView();\nv2.Frame = new RectangleF(new PointF(0, 130), newSizeF(320, 250));\nView.AddSubview(v2);\n```", "```swift\npublic class PickerChangedEventArgs : EventArgs\n{\n    public string SelectedValue { get; set; }\n}\n```", "```swift\npublic override void Selected(UIPickerView picker, int row,int component)\n{\n    if (PickerChanged != null)\n    {\n        PickerChanged(this, new PickerChangedEventArgs {\n            SelectedValue = myValues[row] });\n    }\n}\n```", "```swift\nmyPickerViewModel.PickerChanged += (object sender,PickerChangedEventArgs e) => \n{\n    myElement.Value = e.SelectedValue;\n};\n```"]