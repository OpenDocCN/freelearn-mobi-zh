- en: Chapter 3. Hello World
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。你好，世界
- en: In this chapter we will build a new project from scratch and produce the first
    reader created application that we can run on our iOS device. While we have experimented
    with deploying applications to our device before, these were pre-built applications.
    It's time to take the training wheels off and take the environment for a test
    drive.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始构建一个新的项目，并生成第一个由读者创建的应用程序，我们可以在我们的 iOS 设备上运行。虽然我们之前已经尝试过将应用程序部署到我们的设备，但这些是预构建的应用程序。现在是时候摘掉训练轮，测试这个环境了。
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Compose our first scene
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写我们的第一个场景
- en: Test our application in the editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编辑器中测试我们的应用程序
- en: Customize the iOS settings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 iOS 设置
- en: Deploy this application to a device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将此应用程序部署到设备
- en: This is where the fun really starts...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这才是真正的乐趣所在...
- en: Composing our first scene
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个场景
- en: 'In our first application we''re going to follow software development tradition
    and create the typical first program Hello World. As we''re using Unity to create
    our game it seemed to make sense to actually create a 3D world and deploy it to
    our device. When we''re done we should be able to see the earth on our device:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个应用程序中，我们将遵循软件开发传统，创建典型的第一个程序“Hello World”。由于我们使用 Unity 来创建游戏，创建一个 3D
    世界并将其部署到我们的设备似乎是有意义的。完成之后，我们应该能在我们的设备上看到地球：
- en: '![Composing our first scene](img/978-1-84969-040-9_3_1.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![编写我们的第一个场景](img/978-1-84969-040-9_3_1.jpg)'
- en: The final output of our Hello World game
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们“Hello World”游戏的最终输出
- en: Start with the basics
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从基础知识开始
- en: For our first game we're going to start with the basics.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个游戏，我们将从基础知识开始。
- en: Create a scene
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建场景
- en: Create sample objects
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建示例对象
- en: Customize sample objects
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义示例对象
- en: Control the camera
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制摄像机
- en: Deploy to the iOS Device
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署到 iOS 设备
- en: Time for action — Creating a scene
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建场景
- en: Our first step is to create a new Unity Project by selecting **File | New Project**.
    In the Project Directory specify where you would like Unity to create this new
    Project and press the **Create Project** button:![Time for action — Creating a
    scene](img/978-1-84969-040-9_3_2.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第一步是创建一个新的 Unity 项目，通过选择 **文件 | 新项目**。在项目目录中指定你希望 Unity 创建此新项目的位置，然后按 **创建项目**
    按钮：![行动时间 — 创建场景](img/978-1-84969-040-9_3_2.jpg)
- en: Unity bundles common sets of scripts, assets, and other reusable functionality
    into distributable files referred to as Unity Packages. These single file archives
    end with the `.unityPackage` extension and represent the primary mechanism for
    sharing in Unity. We will not be importing any packages into Unity for these first
    applications so don't worry about selecting any of the packages.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 将常见的脚本、资产和其他可重用功能打包成可分发文件，这些文件被称为 Unity 包。这些单个文件归档以 `.unityPackage` 扩展名结尾，并代表
    Unity 中共享的主要机制。对于这些第一个应用程序，我们不会将任何包导入 Unity，所以请不要担心选择任何包。
- en: Most games are broken up into scenes or levels and Unity is designed around
    this concept. A scene in its most basic state is just a container pointing to
    all of all the art assets, scripts, behaviors, and so on. You can, of course,
    put all of your content into one big scene, but that is more suitable for very
    small games or those that stream all of their content from the Internet. With
    the constraints of most iOS devices and the speed of even 3G Internet connections
    it would be impractical to do that so we will focus on level-based design.
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数游戏都被分成场景或级别，Unity 就是围绕这个概念设计的。在最基本的状态下，场景只是一个容器，指向所有的艺术资产、脚本、行为等等。当然，你可以把所有内容都放在一个大的场景中，但这更适合非常小的游戏或那些从互联网上流式传输所有内容的游戏。考虑到大多数
    iOS 设备的约束以及即使是 3G 互联网连接的速度，这样做是不切实际的，所以我们将专注于基于级别的设计。
- en: 'When Unity created our project, it created a default scene for us it simply
    needs to be saved. Unity will put all of the scenes in the `Assets` folder of
    the project. Save the scene as **level1** and you will find that the new level
    is represented in the **Project** view:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Unity 创建我们的项目时，它为我们创建了一个默认场景，只需保存即可。Unity 将将所有场景放入项目的 `Assets` 文件夹中。将场景保存为
    **level1**，你会在 **项目** 视图中看到新的级别表示：
- en: '![Time for action — Creating a scene](img/978-1-84969-040-9_3_3.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 创建场景](img/978-1-84969-040-9_3_3.jpg)'
- en: Once you start creating multiple scenes, you will be able to simply double-click
    on the scene in the **Project** view and it will change the **Scene** view and
    **Game** view to represent the new state.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你开始创建多个场景，你只需在 **项目** 视图中双击场景，它就会更改 **场景** 视图和 **游戏** 视图以表示新的状态。
- en: What just happened?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just created a simple scene for our game. At the moment it's very empty,
    but is ready to be filled with actors, scripts, and other functionality to become
    a real game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的游戏创建了一个简单的场景。目前它非常空旷，但已经准备好填充演员、剧本和其他功能，成为一个真正的游戏。
- en: Time for action — Creating objects in a scene
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在场景中创建对象
- en: Next, we need to create some objects in our scene or we will have a very boring
    game. The first object we need to create is something to represent the ground.
    Yes I know there is no ground in space, but to illustrate some of the available
    features we need the ground.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在我们的场景中创建一些对象，否则我们的游戏将会非常无聊。我们需要创建的第一个对象是代表地面的东西。是的，我知道太空中没有地面，但为了说明一些可用的功能，我们需要地面。
- en: In the **Main Menu**, create a new plane by selecting **GameObject | Create
    Other | Plane**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**主菜单**中，通过选择**GameObject | 创建其他 | 平面**来创建一个新的平面。
- en: We also want to give this Plane a unique name, so in the **Inspector** view
    change the name of the object from Plane to Ground by selecting the **Plane**
    text in the **Inspector** by simply replacing it with **Ground**. Unity will now
    refer to this object as **Ground** as well. This will come in useful later when
    we're trying to do things with the ground plane:![Time for action — Creating objects
    in a scene](img/978-1-84969-040-9_3_4.jpg)
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望给这个平面一个独特的名称，所以请在**检查器**视图中通过选择**平面**文本并将其替换为**地面**来将对象的名称从平面更改为地面。Unity
    现在也将把这个对象称为**地面**。这将在我们稍后尝试对地面平面进行操作时很有用：![行动时间——在场景中创建对象](img/978-1-84969-040-9_3_4.jpg)
- en: In the **Inspector**, increase the size of our ground plane by changing the
    **Scale** to **(100, 1, 100)**. This should give us plenty of room to move around:![Time
    for action — Creating objects in a scene](img/978-1-84969-040-9_3_5.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，通过将**缩放**更改为**(100, 1, 100**)来增加我们地面平面的尺寸。这应该给我们提供足够的空间来移动：![行动时间——在场景中创建对象](img/978-1-84969-040-9_3_5.jpg)
- en: 'One new feature of Unity 3 is the ability to get a quick render of what the
    world looks like from the camera''s perspective without having to play the game.
    In the **Hierarchy** view select the **Main Camera** object and you will see in
    the **Scene** view that there is a **Camera Preview** window that is showing you
    what the camera sees. This window is a real-time preview as well, so as objects
    change in the scene, the **Camera Preview** will update to reflect those changes:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unity 3 的新特性之一是能够从摄像机的视角快速渲染出世界的样子，而无需玩游戏。在**层次结构**视图中选择**主摄像机**对象，你将在**场景**视图中看到一个**相机预览**窗口，它显示摄像机所看到的内容。这个窗口也是一个实时预览，因此当场景中的对象发生变化时，**相机预览**将更新以反映这些变化：
- en: '![Time for action — Creating objects in a scene](img/978-1-84969-040-9_3_6.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间——在场景中创建对象](img/978-1-84969-040-9_3_6.jpg)'
- en: What just happened?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just created a simple ground object for our Hello World scene and explored
    how we can preview the world with the Camera Preview.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的“Hello World”场景创建了一个简单的地面物体，并探讨了如何使用相机预览来预览世界。
- en: Time for action — Let there be light
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——光之出现
- en: One of your most important assets in Unity is lighting. With the right lighting
    effects your game can go from looking pedestrian to revolutionary. Unity has a
    very sophisticated lighting engine that can handle dynamic lights, baking lights
    with the Beast lighting system, and deferred lights.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 中，你最重要的资产之一是光照。有了正确的光照效果，你的游戏可以从看起来很普通变成革命性的。Unity 拥有一个非常复杂的照明引擎，可以处理动态光照、使用
    Beast 照明系统烘焙光照，以及延迟光照。
- en: For now we will create a basic light by selecting **Create | Point light** which
    will add a **Point Light Game** Object to our scene:![Time for action — Let there
    be light](img/978-1-84969-040-9_3_7.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们将通过选择**创建 | 点光源**来创建一个基本的光源，这将向我们的场景添加一个**点光源游戏对象**：![行动时间——光之出现](img/978-1-84969-040-9_3_7.jpg)
- en: Now that you've created your point light, let's position it above the scene
    so that it can reflect on other objects. In the **Inspector**, change the **Position**
    to **(0,5,0)**. This should put it above the scene:![Time for action — Let there
    be light](img/978-1-84969-040-9_3_8.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个点光源，让我们将其放置在场景上方，以便它能够反射到其他对象上。在**检查器**中，将**位置**更改为**(0,5,0**)。这应该将其放置在场景上方：![行动时间——光之出现](img/978-1-84969-040-9_3_8.jpg)
- en: Let's center the editor on this light by pressing the shortcut-key F, which
    will focus the scene on this object:![Time for action — Let there be light](img/978-1-84969-040-9_3_24.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按快捷键 F 将编辑器中心对准这个光源，让我们聚焦于这个对象：![行动时间——光之出现](img/978-1-84969-040-9_3_24.jpg)
- en: Just to make sure our light is bright enough let's set the **Intensity** to
    **4**. You can either use the slider or just enter **4** in the text box next
    to the slider:![Time for action — Let there be light](img/978-1-84969-040-9_3_25.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保我们的灯光足够亮，让我们将**强度**设置为**4**。你可以使用滑块，或者直接在滑块旁边的文本框中输入**4**：![行动时间 — 让有光](img/978-1-84969-040-9_3_25.jpg)
- en: 'You can also see that the intensity of the light has increased as there is
    now more light in the scene:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以看到，由于场景中现在有更多的光线，光线的强度已经增加：
- en: '![Time for action — Let there be light](img/978-1-84969-040-9_3_26.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间 — 让有光](img/978-1-84969-040-9_3_26.jpg)'
- en: 'Select the **Main Camera**, you will see a **Camera Preview** that shows the
    light shining down upon the ground plane:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**主相机**，你将看到一个**相机预览**，显示光线照在地面平面上：
- en: '![Time for action — Let there be light](img/978-1-84969-040-9_3_9.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 让有光](img/978-1-84969-040-9_3_9.jpg)'
- en: What just happened?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have added some lighting to our scene so that we will be able to see what's
    going on in our scene. Remember, that in the absence of lights in the scene there
    won't be much for the gamer to see. While we have created a simple lighting model
    here, you will see that lighting is perhaps one of the most important features
    that you can add to your game as it will provide a significant amount of visual
    fidelity to your objects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为场景添加了一些灯光，这样我们就能看到场景中发生的事情。记住，如果没有灯光，玩家将看不到太多东西。虽然我们在这里创建了一个简单的光照模型，但你将看到，光照可能是你可以添加到你的游戏中的最重要的功能之一，因为它将为你的对象提供大量的视觉保真度。
- en: Time for action — Hello "World"
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — “Hello World”
- en: What good would a Hello World chapter be if we didn't actually put the world
    in it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有在“Hello World”章节中实际放入世界，那么这个章节有什么用呢？
- en: In the **Hierarchy** view, create a **Sphere** with **Create | Sphere**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次视图**中，通过**创建 | 球体**创建一个**球体**。
- en: Rename this Game Object to **World** in the **Inspector**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中将这个游戏对象重命名为**世界**。
- en: Let's move it a little off-center so that we can see the effect lighting has
    on this sphere to **Position** **(-2, 2, 0)**. While this is interesting, this
    doesn't much look like the world:![Time for action — Hello "World"](img/978-1-84969-040-9_3_10.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将它稍微移出中心，以便我们可以看到灯光对这个球体的影响，将其**位置**设置为**(-2, 2, 0)**。虽然这很有趣，但这并不太像我们所处的世界：![行动时间
    — “Hello World”](img/978-1-84969-040-9_3_10.jpg)
- en: In the `Chapter 3` folder you will find a file called `earth.jpg`. Select the
    **Project** view and drag this texture right into the **Project** view. Your Unity
    environment may pause for a moment while Unity imports this file.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`第3章`文件夹中，你会找到一个名为`earth.jpg`的文件。选择**项目视图**，并将这个纹理直接拖动到**项目视图**中。Unity环境可能会暂停片刻，因为Unity正在导入这个文件。
- en: Select the earth texture in the **Project** view and you will see the details
    for this texture:![Time for action — Hello "World"](img/978-1-84969-040-9_3_11.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目视图**中选择地球纹理，你将看到这个纹理的详细信息：![行动时间 — “Hello World”](img/978-1-84969-040-9_3_11.jpg)
- en: It would be nice if we could just plop this texture onto our sphere and have
    a rendering of our world. The Unity developers thought this would be nice as well.
    Consequently, you can drag the earth texture from the **Project** view onto our
    sphere in the **Scene** view and it will automatically texture it.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们能够将这个纹理直接应用到我们的球体上，并渲染出我们的世界，那将非常不错。Unity的开发者也认为这会很好。因此，你可以将地球纹理从**项目视图**拖动到**场景视图**中的我们的球体上，它将自动为其添加纹理。
- en: 'Select the **Scene** view and examine the rendering of our scene. We''re getting
    closer to a true Hello World:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**场景视图**并检查我们场景的渲染。我们越来越接近真正的“Hello World”：
- en: '![Time for action — Hello "World"](img/978-1-84969-040-9_3_12.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — “Hello World”](img/978-1-84969-040-9_3_12.jpg)'
- en: What just happened?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just added the first actor to our game. In this case our actor is a
    very simple sphere model with a texture on it, but we have just performed the
    basic steps that are necessary to get objects into a Unity scene.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们游戏添加了第一个演员。在这种情况下，我们的演员是一个非常简单的带有纹理的球体模型，但我们刚刚执行了将对象放入Unity场景的基本步骤。
- en: Time for action — Controling the camera
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 控制相机
- en: 'This is all very interesting, except that we''re fairly far away from our creation
    and we lack the ability to move around the scene. With traditional iOS devices
    we can accomplish this by accessing the accelerometer within the device:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都非常有趣，但我们离我们的创作相当远，而且我们没有移动场景的能力。通过传统的iOS设备，我们可以通过访问设备内的加速度计来完成这项任务：
- en: '![Time for action — Controling the camera](img/978-1-84969-040-9_3_13.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 控制相机](img/978-1-84969-040-9_3_13.jpg)'
- en: Unity encapsulates all of the functionality of the accelerometer into the `Input`
    class and we can use its attributes and methods to connect to the accelerometer
    and determine what is going on with our device.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 将加速度计的所有功能封装到 `Input` 类中，我们可以使用其属性和方法来连接到加速度计并确定设备上的情况。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Those of you coming from Unity iPhone will notice that all of the Unity Input
    for iOS has been encapsulated in the `Input` class. There is no longer a need
    to use the `iPhoneInput` class.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Unity iPhone 的用户会注意到，所有 Unity iOS 的输入都封装在 `Input` 类中。不再需要使用 `iPhoneInput`
    类。
- en: In the **Project** view create a new JavaScript script by selecting **Create
    | JavaScript**. This will create a new script named `NewBehaviourScript`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 视图中，通过选择 **创建 | JavaScript** 创建一个新的 JavaScript 脚本。这将创建一个名为 `NewBehaviourScript`
    的新脚本。
- en: Double-clicking on this script will open the script in Unity's default editor
    **Unitron**. We will cover the other Unity-provided tools that can be used to
    develop scripts, MonoDevelop, when we deep dive into scripting.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击此脚本将在 Unity 的默认编辑器 **Unitron** 中打开脚本。当我们深入研究脚本时，我们将介绍其他 Unity 提供的用于开发脚本的工具，即
    MonoDevelop。
- en: In the script window we simply enter the code for the script in the `Update`
    function:![Time for action — Controling the camera](img/978-1-84969-040-9_3_14.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本窗口中，我们只需在 `Update` 函数中输入脚本的代码：![行动时间 — 控制相机](img/978-1-84969-040-9_3_14.jpg)
- en: Tip
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 书籍的账户中下载示例代码文件：[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册以直接将文件通过电子邮件发送给你。
- en: Scripts must, generally, be attached to Game Objects to do anything useful.
    In our case we want to move the camera around so we need to attach this script
    to the camera. There are two ways to accomplish this in Unity. As with texturing,
    you could simply drag the script onto the camera.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本通常必须附加到游戏对象才能执行任何有用的操作。在我们的例子中，我们想要移动相机，因此需要将此脚本附加到相机上。在 Unity 中有两种方法可以实现这一点。与纹理化一样，你可以直接将脚本拖放到相机上。
- en: In the **Hierarchy** view select the **Main Camera** object.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 视图中选择 **主相机** 对象。
- en: Then, in the **Project** view drag the script from the **Project** view onto
    either the Camera in the **Inspector** view or onto the object in the **Hierarchy**
    view.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 **项目** 视图中，将脚本从 **项目** 视图中拖动到 **检查器** 视图中的相机或 **层次结构** 视图中的对象上。
- en: The other way to accomplish this task is to select the **Main Camera** in the
    **Hierarchy** view and, subsequently, in the Unity menu bar select **Component
    | Scripts | New Behaviour Script.**
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成此任务的另一种方法是，在 **层次结构** 视图中选择 **主相机**，然后，在 Unity 菜单栏中选择 **组件 | 脚本 | 新行为脚本**。
- en: 'In either case you will find that Unity has added your script to the camera:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何情况下，你会发现 Unity 已经将你的脚本添加到了相机中：
- en: '![Time for action — Controling the camera](img/978-1-84969-040-9_3_23.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 — 控制相机](img/978-1-84969-040-9_3_23.jpg)'
- en: What just happened?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have just examined how scripting is handled in the Unity environment. Every
    part of your gameplay functionality will be implemented as a script and you've
    just seen how simple it is to add these behaviors.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚探讨了在 Unity 环境中如何处理脚本。你的游戏功能中的每一部分都将通过脚本实现，而你刚刚也看到了添加这些行为是多么简单。
- en: Time for action — Deploying to the iOS device
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 部署到 iOS 设备
- en: Now that we've created an application that does something useful, it's time
    to deploy our new creation to our iOS device and explore our scene using the accelerometer.
    As we've run through this process before we can cover these details at a high-level,
    it's important to walk through this again just so that the process feels right.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个有用的应用程序，是时候将我们的新作品部署到我们的 iOS 设备上，并使用加速度计来探索我们的场景。因为我们之前已经运行过这个过程，所以我们可以从高层次上概述这些细节，但再次走一遍这个过程是很重要的，以确保过程感觉正确。
- en: The first thing we need to do is to make sure that we're deploying the right
    type of application. When Unity originally created our new project it created
    it for desktop deployment. We need to change this in the **Build Settings** **(File
    | Build Settings):**![Time for action — Deploying to the iOS device](img/978-1-84969-040-9_3_15.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要确保我们正在部署正确的应用程序类型。当 Unity 最初创建我们的新项目时，它是为桌面部署创建的。我们需要在**构建设置**（**文件 |
    构建设置**）中更改这一点：![执行操作 — 部署到 iOS 设备](img/978-1-84969-040-9_3_15.jpg)
- en: An important step here is to make sure that any scenes that we want included
    in the build on our device are included.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里的一个重要步骤是确保我们想要包含在设备构建中的任何场景都包含在内。
- en: Click on the **Add Current** button and our level1 scene and all of the assets
    necessary for that scene will be included in the application when it is packaged
    for the device.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加当前**按钮，我们的 level1 场景以及该场景所需的全部资源都将包含在为设备打包的应用程序中。
- en: Select the iOS platform as the target platform and click on the **Switch Platform**
    button. Unity will pause for a moment and make the necessary changes to the project
    so that it can be deployed to the new target platform:![Time for action — Deploying
    to the iOS device](img/978-1-84969-040-9_3_16.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 iOS 平台作为目标平台，然后点击**切换平台**按钮。Unity 将暂停片刻，并对项目进行必要的更改，以便它可以部署到新的目标平台：![执行操作
    — 部署到 iOS 设备](img/978-1-84969-040-9_3_16.jpg)
- en: With this done the only thing remaining is to change the build settings for
    the project so that Unity can communicate with XCode and have it construct the
    application for deployment.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成此操作后，唯一剩下的事情就是更改项目的构建设置，以便 Unity 可以与 XCode 通信并构建用于部署的应用程序。
- en: As before, we need to create an **App ID** and deploy a provisioning profile
    to our development machine so that Unity can accomplish this. Enter the **iOS
    Provisioning Portal** and create a new **App ID** for our new application. While
    we could use the same **App ID** we used before, recall that doing so would replace
    our old application with the one we just built:![Time for action — Deploying to
    the iOS device](img/978-1-84969-040-9_3_17.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与之前一样，我们需要创建一个**App ID**并将配置文件部署到我们的开发机器上，以便 Unity 可以完成此操作。进入**iOS 配置文件门户**并为我们的新应用程序创建一个新的**App
    ID**。虽然我们可以使用之前使用的相同**App ID**，但请记住，这样做会替换我们刚刚构建的应用程序：![执行操作 — 部署到 iOS 设备](img/978-1-84969-040-9_3_17.jpg)
- en: Next we need to create another provisioning profile so that we can deploy the
    application to the device:![Time for action — Deploying to the iOS device](img/978-1-84969-040-9_3_18.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建另一个配置文件，以便我们可以将应用程序部署到设备：![执行操作 — 部署到 iOS 设备](img/978-1-84969-040-9_3_18.jpg)
- en: Once the provisioning profile is created you need to download the provisioning
    profile so that XCode can deploy the application to your iOS device:![Time for
    action — Deploying to the iOS device](img/978-1-84969-040-9_3_19.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了配置文件，您需要下载配置文件，以便 XCode 可以将应用程序部署到您的 iOS 设备上：![执行操作 — 部署到 iOS 设备](img/978-1-84969-040-9_3_19.jpg)
- en: Double-clicking on the provisioning profile will open XCode's Organizer and
    deploy the provisioning profile to your device:![Time for action — Deploying to
    the iOS device](img/978-1-84969-040-9_3_20.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击配置文件将打开 XCode 的组织者并将配置文件部署到您的设备：![执行操作 — 部署到 iOS 设备](img/978-1-84969-040-9_3_20.jpg)
- en: With this completed all we need to do is inform Unity of which **App ID** it
    should be using by entering that **App ID** in the **Bundle Identifier:**![Time
    for action — Deploying to the iOS device](img/978-1-84969-040-9_3_21.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成此操作后，我们只需通知 Unity 应使用哪个**App ID**，通过在**包标识符**中输入该**App ID**即可：![执行操作 — 部署到
    iOS 设备](img/978-1-84969-040-9_3_21.jpg)
- en: Tip
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It would be nice to use our own icon rather than using the stock Unity icon.
    The icon that you use should be an asset in your unity project and can be any
    texture you want. Simply drag that texture onto the Default Icon box and Unity
    will do the rest.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用我们自己的图标而不是使用库存的 Unity 图标会更好。您使用的图标应该是您 unity 项目中的一个资源，可以是您想要的任何纹理。只需将那个纹理拖放到默认图标框中，Unity
    就会完成剩余的工作。
- en: With all of these steps completed, the last action we need to perform is invoking
    Unity's Build process so it can have XCode compile our game and install it on
    the phone. We can accomplish this through **File | Build & Run**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，我们最后需要执行的操作是调用 Unity 的构建过程，以便它可以使用 XCode 编译我们的游戏并将其安装在手机上。我们可以通过**文件
    | 构建 & 运行**来完成此操作。
- en: Shortly after you've performed these steps, Unity will start on your iOS device.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您完成这些步骤后不久，Unity 将开始在您的 iOS 设备上运行。
- en: Remember that we have the accelerometer active so as soon as our game starts
    we will start moving around the scene.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们激活了加速度计，所以一旦我们的游戏开始，我们就会开始在场景中移动。
- en: What just happened?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We just built our first game application from scratch. It doesn't do much right
    now, but we have just opened the doorway to building great games for the iOS platform.
    This should also give you a feel for how you would normally interact with the
    Unity environment. Unity is a sandbox where you can add all sorts of assets and
    then create scripts that will allow behaviors for those assets.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚从头开始构建了我们的第一个游戏应用。目前它做不了太多事情，但我们已经打开了为iOS平台构建优秀游戏的大门。这也应该让你对如何通常与Unity环境交互有一个感觉。Unity是一个沙盒，你可以添加各种资产，然后创建脚本，为这些资产赋予行为。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We built an application that actually does something worth showing to people
    in this chapter. While it's not likely to make millions of dollars in sales or
    garner celebrity status, this is a critical milestone for developing games in
    Unity as we have just touched a lot of the game development workflow.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们构建了一个实际上值得在本章向人们展示的应用。虽然它不太可能带来数百万美元的销售收入或获得名人地位，但这对于在Unity中开发游戏来说是一个关键的里程碑，因为我们刚刚接触到了许多游戏开发工作流程。
- en: Now that we've built our first scene, we need to take a tour of the Unity core
    concepts, as without a clear understanding of how Unity works, it will be difficult
    to really take advantage of the environment. The Unity Concepts will form the
    basis of the next chapter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了第一个场景，我们需要浏览一下Unity的核心概念，因为没有对Unity工作原理的清晰理解，我们将很难真正利用这个环境。Unity概念将成为下一章的基础。
