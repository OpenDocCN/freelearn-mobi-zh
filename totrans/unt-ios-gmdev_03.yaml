- en: Chapter 3. Hello World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will build a new project from scratch and produce the first
    reader created application that we can run on our iOS device. While we have experimented
    with deploying applications to our device before, these were pre-built applications.
    It's time to take the training wheels off and take the environment for a test
    drive.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Compose our first scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test our application in the editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the iOS settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy this application to a device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is where the fun really starts...
  prefs: []
  type: TYPE_NORMAL
- en: Composing our first scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our first application we''re going to follow software development tradition
    and create the typical first program Hello World. As we''re using Unity to create
    our game it seemed to make sense to actually create a 3D world and deploy it to
    our device. When we''re done we should be able to see the earth on our device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Composing our first scene](img/978-1-84969-040-9_3_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final output of our Hello World game
  prefs: []
  type: TYPE_NORMAL
- en: Start with the basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our first game we're going to start with the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Create a scene
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create sample objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize sample objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Control the camera
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy to the iOS Device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Time for action — Creating a scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first step is to create a new Unity Project by selecting **File | New Project**.
    In the Project Directory specify where you would like Unity to create this new
    Project and press the **Create Project** button:![Time for action — Creating a
    scene](img/978-1-84969-040-9_3_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity bundles common sets of scripts, assets, and other reusable functionality
    into distributable files referred to as Unity Packages. These single file archives
    end with the `.unityPackage` extension and represent the primary mechanism for
    sharing in Unity. We will not be importing any packages into Unity for these first
    applications so don't worry about selecting any of the packages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most games are broken up into scenes or levels and Unity is designed around
    this concept. A scene in its most basic state is just a container pointing to
    all of all the art assets, scripts, behaviors, and so on. You can, of course,
    put all of your content into one big scene, but that is more suitable for very
    small games or those that stream all of their content from the Internet. With
    the constraints of most iOS devices and the speed of even 3G Internet connections
    it would be impractical to do that so we will focus on level-based design.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When Unity created our project, it created a default scene for us it simply
    needs to be saved. Unity will put all of the scenes in the `Assets` folder of
    the project. Save the scene as **level1** and you will find that the new level
    is represented in the **Project** view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Creating a scene](img/978-1-84969-040-9_3_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you start creating multiple scenes, you will be able to simply double-click
    on the scene in the **Project** view and it will change the **Scene** view and
    **Game** view to represent the new state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created a simple scene for our game. At the moment it's very empty,
    but is ready to be filled with actors, scripts, and other functionality to become
    a real game.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Creating objects in a scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we need to create some objects in our scene or we will have a very boring
    game. The first object we need to create is something to represent the ground.
    Yes I know there is no ground in space, but to illustrate some of the available
    features we need the ground.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Main Menu**, create a new plane by selecting **GameObject | Create
    Other | Plane**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also want to give this Plane a unique name, so in the **Inspector** view
    change the name of the object from Plane to Ground by selecting the **Plane**
    text in the **Inspector** by simply replacing it with **Ground**. Unity will now
    refer to this object as **Ground** as well. This will come in useful later when
    we're trying to do things with the ground plane:![Time for action — Creating objects
    in a scene](img/978-1-84969-040-9_3_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector**, increase the size of our ground plane by changing the
    **Scale** to **(100, 1, 100)**. This should give us plenty of room to move around:![Time
    for action — Creating objects in a scene](img/978-1-84969-040-9_3_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'One new feature of Unity 3 is the ability to get a quick render of what the
    world looks like from the camera''s perspective without having to play the game.
    In the **Hierarchy** view select the **Main Camera** object and you will see in
    the **Scene** view that there is a **Camera Preview** window that is showing you
    what the camera sees. This window is a real-time preview as well, so as objects
    change in the scene, the **Camera Preview** will update to reflect those changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Creating objects in a scene](img/978-1-84969-040-9_3_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created a simple ground object for our Hello World scene and explored
    how we can preview the world with the Camera Preview.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Let there be light
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of your most important assets in Unity is lighting. With the right lighting
    effects your game can go from looking pedestrian to revolutionary. Unity has a
    very sophisticated lighting engine that can handle dynamic lights, baking lights
    with the Beast lighting system, and deferred lights.
  prefs: []
  type: TYPE_NORMAL
- en: For now we will create a basic light by selecting **Create | Point light** which
    will add a **Point Light Game** Object to our scene:![Time for action — Let there
    be light](img/978-1-84969-040-9_3_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you've created your point light, let's position it above the scene
    so that it can reflect on other objects. In the **Inspector**, change the **Position**
    to **(0,5,0)**. This should put it above the scene:![Time for action — Let there
    be light](img/978-1-84969-040-9_3_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's center the editor on this light by pressing the shortcut-key F, which
    will focus the scene on this object:![Time for action — Let there be light](img/978-1-84969-040-9_3_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just to make sure our light is bright enough let's set the **Intensity** to
    **4**. You can either use the slider or just enter **4** in the text box next
    to the slider:![Time for action — Let there be light](img/978-1-84969-040-9_3_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also see that the intensity of the light has increased as there is
    now more light in the scene:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action — Let there be light](img/978-1-84969-040-9_3_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Select the **Main Camera**, you will see a **Camera Preview** that shows the
    light shining down upon the ground plane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Let there be light](img/978-1-84969-040-9_3_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have added some lighting to our scene so that we will be able to see what's
    going on in our scene. Remember, that in the absence of lights in the scene there
    won't be much for the gamer to see. While we have created a simple lighting model
    here, you will see that lighting is perhaps one of the most important features
    that you can add to your game as it will provide a significant amount of visual
    fidelity to your objects.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Hello "World"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What good would a Hello World chapter be if we didn't actually put the world
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, create a **Sphere** with **Create | Sphere**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this Game Object to **World** in the **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's move it a little off-center so that we can see the effect lighting has
    on this sphere to **Position** **(-2, 2, 0)**. While this is interesting, this
    doesn't much look like the world:![Time for action — Hello "World"](img/978-1-84969-040-9_3_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chapter 3` folder you will find a file called `earth.jpg`. Select the
    **Project** view and drag this texture right into the **Project** view. Your Unity
    environment may pause for a moment while Unity imports this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the earth texture in the **Project** view and you will see the details
    for this texture:![Time for action — Hello "World"](img/978-1-84969-040-9_3_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It would be nice if we could just plop this texture onto our sphere and have
    a rendering of our world. The Unity developers thought this would be nice as well.
    Consequently, you can drag the earth texture from the **Project** view onto our
    sphere in the **Scene** view and it will automatically texture it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Scene** view and examine the rendering of our scene. We''re getting
    closer to a true Hello World:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Hello "World"](img/978-1-84969-040-9_3_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just added the first actor to our game. In this case our actor is a
    very simple sphere model with a texture on it, but we have just performed the
    basic steps that are necessary to get objects into a Unity scene.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Controling the camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is all very interesting, except that we''re fairly far away from our creation
    and we lack the ability to move around the scene. With traditional iOS devices
    we can accomplish this by accessing the accelerometer within the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Controling the camera](img/978-1-84969-040-9_3_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unity encapsulates all of the functionality of the accelerometer into the `Input`
    class and we can use its attributes and methods to connect to the accelerometer
    and determine what is going on with our device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Those of you coming from Unity iPhone will notice that all of the Unity Input
    for iOS has been encapsulated in the `Input` class. There is no longer a need
    to use the `iPhoneInput` class.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view create a new JavaScript script by selecting **Create
    | JavaScript**. This will create a new script named `NewBehaviourScript`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-clicking on this script will open the script in Unity's default editor
    **Unitron**. We will cover the other Unity-provided tools that can be used to
    develop scripts, MonoDevelop, when we deep dive into scripting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the script window we simply enter the code for the script in the `Update`
    function:![Time for action — Controling the camera](img/978-1-84969-040-9_3_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scripts must, generally, be attached to Game Objects to do anything useful.
    In our case we want to move the camera around so we need to attach this script
    to the camera. There are two ways to accomplish this in Unity. As with texturing,
    you could simply drag the script onto the camera.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Hierarchy** view select the **Main Camera** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the **Project** view drag the script from the **Project** view onto
    either the Camera in the **Inspector** view or onto the object in the **Hierarchy**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other way to accomplish this task is to select the **Main Camera** in the
    **Hierarchy** view and, subsequently, in the Unity menu bar select **Component
    | Scripts | New Behaviour Script.**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In either case you will find that Unity has added your script to the camera:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action — Controling the camera](img/978-1-84969-040-9_3_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just examined how scripting is handled in the Unity environment. Every
    part of your gameplay functionality will be implemented as a script and you've
    just seen how simple it is to add these behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Deploying to the iOS device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've created an application that does something useful, it's time
    to deploy our new creation to our iOS device and explore our scene using the accelerometer.
    As we've run through this process before we can cover these details at a high-level,
    it's important to walk through this again just so that the process feels right.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is to make sure that we're deploying the right
    type of application. When Unity originally created our new project it created
    it for desktop deployment. We need to change this in the **Build Settings** **(File
    | Build Settings):**![Time for action — Deploying to the iOS device](img/978-1-84969-040-9_3_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An important step here is to make sure that any scenes that we want included
    in the build on our device are included.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add Current** button and our level1 scene and all of the assets
    necessary for that scene will be included in the application when it is packaged
    for the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the iOS platform as the target platform and click on the **Switch Platform**
    button. Unity will pause for a moment and make the necessary changes to the project
    so that it can be deployed to the new target platform:![Time for action — Deploying
    to the iOS device](img/978-1-84969-040-9_3_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this done the only thing remaining is to change the build settings for
    the project so that Unity can communicate with XCode and have it construct the
    application for deployment.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As before, we need to create an **App ID** and deploy a provisioning profile
    to our development machine so that Unity can accomplish this. Enter the **iOS
    Provisioning Portal** and create a new **App ID** for our new application. While
    we could use the same **App ID** we used before, recall that doing so would replace
    our old application with the one we just built:![Time for action — Deploying to
    the iOS device](img/978-1-84969-040-9_3_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to create another provisioning profile so that we can deploy the
    application to the device:![Time for action — Deploying to the iOS device](img/978-1-84969-040-9_3_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the provisioning profile is created you need to download the provisioning
    profile so that XCode can deploy the application to your iOS device:![Time for
    action — Deploying to the iOS device](img/978-1-84969-040-9_3_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-clicking on the provisioning profile will open XCode's Organizer and
    deploy the provisioning profile to your device:![Time for action — Deploying to
    the iOS device](img/978-1-84969-040-9_3_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this completed all we need to do is inform Unity of which **App ID** it
    should be using by entering that **App ID** in the **Bundle Identifier:**![Time
    for action — Deploying to the iOS device](img/978-1-84969-040-9_3_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It would be nice to use our own icon rather than using the stock Unity icon.
    The icon that you use should be an asset in your unity project and can be any
    texture you want. Simply drag that texture onto the Default Icon box and Unity
    will do the rest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With all of these steps completed, the last action we need to perform is invoking
    Unity's Build process so it can have XCode compile our game and install it on
    the phone. We can accomplish this through **File | Build & Run**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shortly after you've performed these steps, Unity will start on your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember that we have the accelerometer active so as soon as our game starts
    we will start moving around the scene.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just built our first game application from scratch. It doesn't do much right
    now, but we have just opened the doorway to building great games for the iOS platform.
    This should also give you a feel for how you would normally interact with the
    Unity environment. Unity is a sandbox where you can add all sorts of assets and
    then create scripts that will allow behaviors for those assets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We built an application that actually does something worth showing to people
    in this chapter. While it's not likely to make millions of dollars in sales or
    garner celebrity status, this is a critical milestone for developing games in
    Unity as we have just touched a lot of the game development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've built our first scene, we need to take a tour of the Unity core
    concepts, as without a clear understanding of how Unity works, it will be difficult
    to really take advantage of the environment. The Unity Concepts will form the
    basis of the next chapter.
  prefs: []
  type: TYPE_NORMAL
