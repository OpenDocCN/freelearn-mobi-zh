["```kt\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n  ext.kotlin_version = '1.1.4-3'\n\n  repositories {\n      mavenCentral()\n  }\n  dependencies {\n      classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n  }\n}\n\napply plugin: 'java'\napply plugin: 'kotlin'\n\nsourceCompatibility = 1.8\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  compile \"org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version\"\n  testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\ncompileKotlin {\n  kotlinOptions.jvmTarget = \"1.8\"\n}\ncompileTestKotlin {\n  kotlinOptions.jvmTarget = \"1.8\"\n}\n```", "```kt\napply plugin: 'application'\nmainClassName = \"HelloWorldKt\"\n```", "```kt\nproject\n   - src\n       - main (root)\n           - kotlin\n           - java\n```", "```kt\nsourceSets {\n   main.kotlin.srcDirs += 'src/main/myKotlin'\n   main.java.srcDirs += 'src/main/myJava'\n}\n```", "```kt\nfun main(args: Array<String>) {\n    println(\"Hello, World!\")\n }\n```", "```kt\n$ kotlinc hello.kt -include-runtime -d hello.jar\n```", "```kt\n$ java -jar hello.jar\n```", "```kt\n$ kotlinc hello.kt -d hello.jar\n```", "```kt\n$ kotlinc -script kotlin_script_file_example.kts\n```", "```kt\nsourceSets {\n   main.java.srcDirs += 'src/main/kotlin/'\n}\n```", "```kt\nfun main(args:Array<String>){\n   println(\"Hello world\")\n}\n```", "```kt\njar {\n   manifest {\n       attributes 'Main-Class': 'HelloWorldKt'\n   }\n   from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }\n}\n```", "```kt\n./gradlew clean jar\n```", "```kt\nmanifest {\n       attributes 'Main-Class': 'HelloWorldKt'\n   }\n```", "```kt\nprintln(\"Just a line\")\n```", "```kt\nprintln(\"Input your first name\")\nvar first_name = readLine()\nprintln(\"Your first name: $first_name\")\n```", "```kt\nprintln(\"Hi $first_name, let us have a quick math test. Enter two numbers separated by space.\")\nval (a, b) = readLine()!!.split(' ').map(String::toInt)\nprintln(\"$a + $b = ${a+b}\")\n```", "```kt\nfun main(args: Array<String>) {\n   println(\"Input your first name\")\n   var first_name = readLine()\n   println(\"Input your last name\")\n   var last_name = readLine()\n   println(\"Hi $first_name $last_name, let us have a quick math test. Enter two numbers separated by space.\")\n   val (a, b) = readLine()!!.split(' ').map(String::toInt)\n  println(\"what is $a + $b ?\")\n  println(\"Your answer is ${if (readLine()!!.toInt() == (a+b)) \"correct\" else \"incorrect\"}\")\n   println(\"Correct answer = ${a+b}\")\n println(\"what is $a * $b ?\")\n   println(\"Your answer is ${if (readLine()!!.toInt() == (a*b)) \"correct\" else \"incorrect\"}\")\n   println(\"Correct answer = ${a*b}\")\n   println(\"Thanks for participating :)\")\n}\n```", "```kt\n/** Prints the given message and newline to the standard output stream. */\n@kotlin.internal.InlineOnly\npublic inline fun println(message: Any?) {\n   System.out.println(message)\n}\n```", "```kt\nprivate static final Logger logger = LoggerFactory.getLogger(CurrentClass.class);\n…\nlogger.info(“Hi, {}”, name);\n```", "```kt\nval logger = LoggerFactory.getLogger(CurrentClass::class)\n…\nlogger.info(“Hi, {}”, name)\n```", "```kt\npublic fun <R : Any> R.logger(): Lazy<Logger> {\n   return lazy { Logger.getLogger(this.javaClass.name) }\n}\n```", "```kt\nclass SomeClass {\n  companion object { val log by logger() }\n\n  fun do_something() {\n      log.info(\"Did Something\")\n  }\n}\n```", "```kt\nSep 25, 2017 10:49:00 PM packageA.SomeClass do_something\nINFO: Did Something\n```", "```kt\nclass SomeActivity : Activity(), AnkoLogger {\n   private fun someMethod() {\n       info(\"London is the capital of Great Britain\")\n       debug(5) // .toString() method will be executed\n       warn(null) // \"null\" will be printed\n   }\n}\n```", "```kt\ninfo(\"String \" + \"concatenation\")\n```", "```kt\ninfo { \"String \" + \"concatenation\" }\n```", "```kt\npublic class ASimpleJavaClass {\n   static void is(){\n       System.out.print(\"Nothing fancy here\");\n   }\n}\n```", "```kt\nfun main(args: Array<String>) {\n   ASimpleJavaClass.`is`()   \n}\n```", "```kt\nclass X {\n   com.very.very.long.prefix.bar.Foo a;\n   org.other.very.very.long.prefix.baz.Foo b;\n   ...\n}\n```", "```kt\nimport foo.Bar // Bar is accessible\nimport bar.Bar as bBar // bBar stands for 'bar.Bar'\n```", "```kt\nBar.methodOfFooBar()\nbBar.methodOfBarBar()\n```", "```kt\npackage packageA\nclass SameClass {\n  companion object {\n      fun methodA(){\n          println(\"Method a\")\n      }\n  }\n}\n```", "```kt\npackage packageB\nclass SameClass {\n  companion object {\n      fun methodB(){\n          println(\"Method b\")\n      }\n  }\n}\n```", "```kt\nimport packageA.SameClass as anotherSameClass\nimport packageB.SameClass\nfun main(args: Array<String>) {\n   anotherSameClass.methodA()\n   SameClass.methodB()\n\n}\n```", "```kt\nfun main(args: Array<String>) {\n  val a=2\n  val b=3\n  print(a or b)\n}\n\n```", "```kt\n 3\n```", "```kt\nfun main(args: Array<String>) {\n  val a=2\n  val b=3\n  print(a and b)\n}\n```", "```kt\n 2\n```", "```kt\nfun main(args: Array<String>) {\n  val a=2\n  val b=3\n  print(a xor b)\n}\n```", "```kt\n 1\n```", "```kt\nfun main(args: Array<String>) {\n    val a=2\n   print(a.inv())}\n```", "```kt\n -3\n```", "```kt\nfun main(args: Array<String>) {\n       println( 5 shl 0)\n       println( 5 shl 1)\n       println( 5 shl 2)\n}\n```", "```kt\n5\n10\n20\n```", "```kt\nfun main(args: Array<String>) {\n       println( 5 shr 0)\n       println( 5 shr 1)\n       println( 5 shr 2)\n}\n```", "```kt\n5\n2\n1\n```", "```kt\nfun main(args: Array<String>) {\n       println( 5 ushr 0)\n       println( 5 ushr 1)\n       println( 5 ushr 2)\n}\n```", "```kt\n5\n2\n1\n```", "```kt\npublic infix fun shr(bitCount: Int): Int\n```", "```kt\nfun main(args: Array<String>) {\n  val str=\"123\"\n  print(str.toLong())\n}\n```", "```kt\n123\n```", "```kt\nfun main(args: Array<String>) {\n  val str=\"123.4\"\n  val str2=\"123\"\n  println(str.toLongOrNull())\n  println(str2.toLongOrNull())\n}\n```", "```kt\n null 123\n```", "```kt\nfun main(args: Array<String>) {\n       val str=\"11111111\"\n       print(str.toLongOrNull(2))   }\n```", "```kt\n 255\n```", "```kt\nfun main(args: Array<String>) {\n      val str=\"377\"\n       print(str.toLongOrNull(8))\n   }\n```", "```kt\n 255\n```", "```kt\nfun main(args: Array<String>) {\n      val str=\"255\"\n       print(str.toLongOrNull(10))\n   }\n```", "```kt\n 255\n```", "```kt\npublic inline fun String.toLong(): Long = java.lang.Long.parseLong(this)\n```", "```kt\npublic inline fun String.toShort(): Short = java.lang.Short.parseShort(this)\n```", "```kt\npublic inline fun String.toInt(): Int = java.lang.Integer.parseInt(this)\n```", "```kt\npublic inline fun String.toLong(radix: Int): Long = java.lang.Long.parseLong(this, checkRadix(radix))\n```", "```kt\nMap<String, String> valuesMap = new HashMap<String, String>();\nvaluesMap.put(\"city\", \"Paris\");\nvaluesMap.put(\"monument\", \"Eiffel Tower\");\nString templateString =\"Enjoyed ${monument} in ${city}.\";\nStrSubstitutorsub=newStrSubstitutor(valuesMap);\nString resolvedString =sub.replace(templateString);\n```", "```kt\n$variableName\n```", "```kt\n${expression}\n```", "```kt\nfun main(args: Array<String>) {\n    val foo = 5;\n    val myString = \"foo = $foo\"\n    println(myString)\n }\n```", "```kt\nfun main(arr: Array<String>){\n  val lang = \"Kotlin\"\n  val str = \"The word Kotlin has ${lang.length} characters.\"\n  println(str)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val a = 5\n    val b = 6\n\n    val myString = \"\"\"\n    ${if (a > b) a else b}\n \"\"\"\n    println(\"Bigger number is: ${myString.trimMargin()}\")\n }\n```", "```kt\nfun main(args: Array<String>) {\n      val str1=\"abcdefghijklmnopqrs\"\n       val str2=\"tuvwxyz\"\n       println(\"str1 equals str2 ? = ${str1.equals(str2)}\")\n       println(\"subsequence is ${str1.subSequence(1,4)}\")\n       println(\"2nd character is ${str1.get(1)}\")\n   }\n```", "```kt\nstr1 equals str2 ? = false\nsubsequence is bcd\n2nd character is b\n```"]