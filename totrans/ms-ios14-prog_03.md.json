["```swift\nimport UIKit\nimport Contacts\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        requestContacts()\n    }\n```", "```swift\nprivate func requestContacts() {\n\n    let store = CNContactStore()\n    let authorizationStatus = CNContactStore.authorizationStatus(for: .contacts)\n\n    if authorizationStatus == .notDetermined {\n        store.requestAccess(for: .contacts) { [weak self] didAuthorize, error in\n            if didAuthorize {\n                self?.retrieveContacts(from: store)\n            }\n        }\n    } else if authorizationStatus == .authorized {\n        retrieveContacts(from: store)\n    }\n\n}\n```", "```swift\nfunc doSomething(completionHandler: (Int) -> Void) {\n    // perform some actions\n    var result = theResultOfSomeAction \n    completionHandler(result)\n}\n```", "```swift\nfunc retrieveContacts(from store: CNContactStore) {\n\n    let containerId = store.defaultContainerIdentifier()\n    let predicate = CNContact.predicateForContactsInContainer(withIdentifier: containerId)\n    let keysToFetch = [CNContactGivenNameKey as CNKeyDescriptor,\n    CNContactFamilyNameKey as CNKeyDescriptor, CNContactImageDataAvailableKey as CNKeyDescriptor,\n    CNContactImageDataKey as CNKeyDescriptor]\n\n    let contacts = try! store.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n}\n```", "```swift\n@IBOutlet weak var tableView: UITableView!\n```", "```swift\nclass ContactCell: UITableViewCell {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var contactImageView: UIImageView!\n}\n```", "```swift\nextension ViewController: UITableViewDelegate, UITableViewDataSource {  \n}\n```", "```swift\nvar contacts = [CNContact]()\n```", "```swift\ncontacts = try! store.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n```", "```swift\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n    return contacts.count\n}\n```", "```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {    \n    let contact = contacts[indexPath.row]\n\n    let cell = UITableViewCell()\n    cell.textLabel?.text = contact.familyName\n\n    return cell\n}\n```", "```swift\noverride func viewDidLoad() {\n    tableView.delegate = self\n    tableView.dataSource = self\n\n    requestContacts()\n}\n```", "```swift\ncontacts = try! store.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\nDispatchQueue.main.async {\nself.tableView.reloadData()\n}\n```", "```swift\nlet contact = contacts[indexPath.row]\n\nguard let cell = tableView.dequeueReusableCell(withIdentifier: \"contactCell\", for: indexPath) as? ContactCell else {\n            return UITableViewCell()\n}\n\ncell.nameLabel.text = contact.givenName\nif let imageData = contact.imageData {\n    cell.conatctImageView.image = UIImage(data: imageData)\n} else {\n    cell.conatctImageView.image = UIImage(systemName: \"person.circle\")\n}\n```", "```swift\ntableView.dequeueReusableCell(withIdentifier: \"contactCell\", for: indexPath) as? ContactCell\n```", "```swift\noverride func prepareForReuse() { \n    super.prepareForReuse()\n    conatctImageView.image = nil\n}\n```", "```swift\nextension ViewController: UITableViewDataSourcePrefetching {\n    func tableView(_ tableView: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {\n\n    }\n}\n```", "```swift\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n\n    let contact = contacts[indexPath.row]\n    let alertController = UIAlertController(title: \"Contact Details\", message: \"Hey \\(contact.givenName)!!\",\n        preferredStyle: .alert)        \n    let dismissAction = UIAlertAction(title: \"Done\", style: .default, handler: { action in\n        tableView.deselectRow(at: indexPath, animated: true)\n    })\n\n    alertController.addAction(dismissAction);\n    present(alertController, animated: true, completion: nil)\n\n}\n```", "```swift\nextension ViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        contacts.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let contact = contacts[indexPath.item]\n\n        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"contactCell\", for: indexPath) as? ContactCell else {\n            return UICollectionViewCell()\n        }\n        cell.setup(contact: contact)\n\n        return cell\n    }\n\n}\n```", "```swift\nclass ContactCell: UICollectionViewCell {\n\n    @IBOutlet weak var familyNameLabel: UILabel!\n    @IBOutlet weak var givenNameLabel: UILabel!\n    @IBOutlet weak var contactImageView: UIImageView!\n\n    func setup(contact: CNContact) {\n        givenNameLabel.text = contact.givenName\n        familyNameLabel.text = contact.familyName\n\n        if let imageData = contact.imageData {\n            conatctImageView.image = UIImage(data: imageData)\n        } else {\n            conatctImageView.image = UIImage(systemName: \"person.circle\")\n        }\n    }\n\n}\n```", "```swift\nextension ViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout\n```", "```swift\nfunc collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize { }\n```", "```swift\nlet width = (collectionView.bounds.size.width / 2) – 10\nreturn CGSize(width: width, height: 180)\n```", "```swift\nreturn collectionView.bounds.size\n```", "```swift\nclass ContactsCollectionViewLayout: UICollectionViewLayout {\n\n    override var collectionViewContentSize: CGSize {\n        return .zero\n    }\n\n    override func prepare() {\n\n    }\n\n    override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -> Bool {\n        return false\n    }\n\n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        return nil\n    }\n\n    override func layoutAttributesForItem(at indexPath: IndexPath) -> UICollectionViewLayoutAttributes? {\n        return nil\n    }\n\n}\n```", "```swift\ncollectionView.collectionViewLayout = ContactsCollectionViewLayout()\n```", "```swift\nfunc collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)\n```", "```swift\nimport SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n    }\n}\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```", "```swift\nText(\"Hello, World!\")\n```", "```swift\nvar body: some View {\n    List {\n        Text(\"Hello, World!\")\n    }\n}\n```", "```swift\n@State var contacts: [String] = [String]()\n\nvar body: some View {\n    List { \n    ForEach(contacts, id: \\.self) { contact in\n        \tText(contact)\n    \t    }\n    }\n}\n```", "```swift\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```", "```swift\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        let mockData = [\"Chris\", \"Andy\", \"Harry\", \"Nathan\", \"Sam\"]\n        return ContentView(contacts: mockData)\n    }\n}\n```", "```swift\nstruct RowView: View {\n\n    @State var name: String\n\n    var body: some View {\n        Text(name)\n    }\n\n}\n```", "```swift\nList {\n    ForEach(contacts, id: \\.self) { contact in\n        RowView(name: contact)\n    }\n}\n```"]