- en: Chapter 3. Navigating a Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have created your first Android Studio project, you will understand
    what is going on. Before you start programming, you need to familiarize yourself
    with the navigation in the project. How is everything structured? Which settings
    can you change in the project? How can you change these settings and what do they
    mean?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is designed to introduce the structure of a project in Android
    Studio. We will start by understanding the project navigation panel. Then, we
    will go through the most important folders in our project—`build`, `gen`, and
    `libs`—and the folders under `src/main`, and you will learn how to change the
    project settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The navigation panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing project properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project navigation panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initially, no project or file is displayed in the main view of Android Studio,
    as you can see in the next screenshot. As Android Studio suggests, press *Alt*
    +*1*, or *cmd 1* if you are using a Mac, to open the project view. You can also
    open it by clicking on the **Project** button on the left edge of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project navigation panel](img/B05459_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Project** view shows the list of the open projects. These projects are
    displayed in a hierarchical view. We can change the type of view from the upper-left
    corner of the project explorer. In the upper-right corner of the **Project** view,
    there are some actions and a drop-down menu to configure the selected type of
    the **Project** view. These actions are highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project navigation panel](img/B05459_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the view selector from the upper-left corner to see the complete list
    of view types that you can select, which the following screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project navigation panel](img/B05459_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the available types of view to navigate through your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project**: This view shows the directory structure of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packages**: It shows only the package structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scratches**: It shows only the scratches files that you created in your project.
    Scratch files are runnable and debuggable files that are used for code prototyping.
    You can create a new scratch file using the menu option by navigating to **Tools**
    | **New Scratch File**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android**: It shows only the folders where you, as a developer, will include
    or edit your application files. This view is very convenient to easily access
    all the files that you really need. These folders are related only to the Android
    application listed in a simplified structure: the `java` classes folder, the `res`
    resources folder, the `manifest` file, and the Gradle scripts. Since the purpose
    of this view type is presenting a simplified structure, it doesn''t match the
    real folder structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scopes** (**Project Files**, **Problems**, **Production**, **Tests**, and
    **Android Instrumentation Tests**): Scopes are subsets of your project files,
    packages, and folders. If you select one of the predefined scopes, you can create
    your own customized scopes from the configuration menu in the upper-right corner
    of the **Project** view. Open the configuration menu and select the **Edit Scopes**
    option. By default, you will see the next predefined scopes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project Files**: This scope shows all the files in your project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Problems**: This scope shows all the files with errors in your project'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production**: This scope shows all the files in your project that are not
    test files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tests**: This scope shows all the test files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Instrumentation Tests**: This scope shows all the instrumented test
    files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right-click on the project name to open the context menu or click on any element
    of the project. As you can see in the following screenshot, from this menu, we
    can:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and add new elements to the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cut, copy, paste, or rename files in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find elements in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze and reformat the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open files in Explorer![The project navigation panel](img/B05459_03_04.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can examine the project structure in the project navigation pane using the
    **Project** view type. The project structure includes a folder with the name of
    our application. This folder contains the application structure and files. The
    most important elements of the application structure are in the `app` directory.
    These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build/`: This is a folder that contains the resources compiled after building
    the application and the classes generated by the Android tools, such as the `R.java`
    file that contains the references to the application resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libs/`: This is a folder that contains the libraries referenced from our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/androidTest/`: This is a folder that contains the test classes of the
    Java classes that need to be tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/main/`: This is a folder that contains the sources of our application.
    All the files you will usually work with are in this folder. The `main` folder
    is subdivided as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java/`: This is a folder that contains the Java classes organized as packages.
    Every class we create will be in our project package namespace (`com.example.myapplication`).
    When we created our first project, we also created its main activity, so the activity
    class should be in this package. The next screenshot shows this main activity
    class inside the project structure:![The project structure](img/B05459_03_05.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/`: This is a folder that contains project resources such as the XML files
    that specify layouts and menus, or the images files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`: This is an essential file in an Android project, which
    is generated automatically when we create the project. This file declares the
    basic information needed by the Android system to run the application: package
    name, version, activities, permissions, intents, or required hardware.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`: This file is the script used to build our application. We will
    discuss how to configure options in this file in the *Gradle* subsection of this
    chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The resources are all non-code assets associated with our application. Elements
    such as images or strings are externalized from the code as resources, making
    it easy to update them without changing the code. Some examples of resources include
    colors, images, graphics, layouts, strings, and styles. The resources are distributed
    to the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`anim/`: This is a folder that contains animation objects as XML files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color/`: This is a folder that contains the color state lists used in our
    application. The color state lists define colors and color changes based on the
    component states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable/`: This is a folder that contains the images and the XML files describing
    the drawable objects used in our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap/`: This is a folder that contains the launcher icons of your app. There
    are different drawable folders categorized into the different screen densities.
    When we created our first project, a default application icon was created as well.
    This icon, named `ic_launcher.png`, is already in these folders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout/`: This is a folder that contains the XML definitions of the views
    and their elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menu/`: This is a folder that contains the XML definitions of the menus for
    the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values/`: This is a folder that contains the XML files that define sets of
    name-value pairs. These values can be colors, strings, or styles. There are different
    values folders that are categorized into different screen options to adapt the
    interface to them; for example, to enlarge the components or the fonts when the
    application is running on a tablet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our basic project contains some basic resources. Therefore, all the folders
    discussed here are not necessarily included by default.
  prefs: []
  type: TYPE_NORMAL
- en: The manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AndroidManifest.xml` file is a mandatory file that contains crucial information
    that the Android system needs about your app. The two essential XML tags that
    the manifest file must contain are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<manifest>`: The root element of the XML file. The `package` attribute defines
    the Java package name of your app, which is the unique identifier of your app.
    Other attributes of this element allow you to set the version code (`android:versionCode`)
    or the version name (`android:versionName`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<application>`: This element in `<manifest>` contains the rest of the elements
    of your app, such as activities (`<activity>`), services (`<service>`), or content
    providers (`<provider>`) elements. You can specify several attributes for this
    element that allow you, for example, to set the app as debuggable (`android:debuggable`),
    set a user-readable label for the app (`android:label`) or set whether your app
    allows backup (`android:allowBackup`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The manifest file also declares the permissions and features that your app
    needs. For example, if your app needs Internet access, the manifest has to add
    it into the manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also present information about the SDK to the Android system using the
    manifest file. Use the `<uses-sdk>` element and its attributes to indicate the
    minimum SDK version that your app supports and your target SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applications in Android Studio are built using **Gradle**. It is a build automation
    tool that is independent of Android Studio, but totally integrated with it. Gradle
    uses an extensible and declarative **domain-specific language** (**DSL**) that
    is based on Groovy, which is an object-oriented programming language for the Java
    platform. A Gradle build file consists of one or more projects, and each project
    contains one or more tasks. A task represents a piece of work to be built. You
    can learn more about Gradle at [http://www.gradle.org/](http://www.gradle.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for the build process is declared in the Gradle build files
    included in the Android projects. As explained previously, in the project structure,
    the build configuration file of the Android application is defined in the `/app/build.gradle`
    file. Some of the main options we can configure in this file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variants**: We can configure different versions of our application using
    the same project, for example, to create demo and paid versions. The variants
    depend on the build type (the `buildTypes` tag) and product flavor configurations
    (the `productFlavors` tag). For example, two build types are `debug` and `release`,
    and two product flavors are demo and paid versions. In your app''s Gradle build
    file, you will find the `buildType` for release:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Dependencies**: We can indicate the local or remote dependencies of our project
    on other modules or libraries. These dependencies are declared under the `dependencies`
    tag. In your app''s Gradle build file, you will find a dependency to the JAR files
    contained in the `lib` folder of your project, and to JUnit, the testing framework:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Manifest entries**: We can override some entries of the Android manifest
    file in the build file, providing a dynamic configuration of the `manifest` file.
    For example, we can override the values of the package name, the minimum SDK,
    or the target SDK. These configurations are defined under the `android/defaultConfig`
    tags:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Signing**: We can activate the application signing for the release version.
    The build system uses a default certificate to sign the debug version of the application.
    We can configure our key and certificate to sign the release version as well.
    These configurations are defined under the `android/signingConfigs` tags. You
    will learn how to sign your app in [Chapter 9](ch09.html "Chapter 9. Preparing
    for Release"), *Preparing for Release*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can navigate to the two dialogs that contain project settings using **File**
    | **Settings** and **File** | **Project Structure**. Both are also available in
    the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project settings](img/B05459_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your project from the project view and navigate to the **Settings**
    menu in **File**. The left-hand-side panel of the **Settings** dialog displays
    the options structured in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appearance & Behavior**: You can change the appearance and behavior of Android
    Studio such as font size, theme, updates, passwords, or scopes management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keymap**: This manages the keyboard shortcuts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor**: This customizes the code editor by selecting colors, using templates
    or changing the encoding. The default encoding is UTF-8\. You will learn more
    about the **Editor** settings in [Chapter 4](ch04.html "Chapter 4. Using the Code
    Editor"), *Using the Code Editor*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: This manages the plugins. You can install and remove plugins,
    enable or disable them, or you can check their version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version Control**: In this section, you can find settings related to version
    control; for example, you can configure the background execution or add files
    to ignore. Version control will be explained in more detail in [Chapter 6](ch06.html
    "Chapter 6. Tools"), *Tools*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**, **Execution**, **Deployment**: In this section, you can configure
    the build tools such as Gradle, the compiler, and the debugger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Languages & Frameworks**: These are settings related to the frameworks used
    in your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**: This section includes the settings related to other tools. You can
    manage the web browsers, the terminal, or add server certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of these settings are general settings, but some others are only for the
    current project. You can differentiate the current project settings by the icon
    that appears next to them, or from the label in the settings header, **For current
    project**, as the next screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project settings](img/B05459_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to these **Settings**, there are further settings in the **Project
    Structure** dialog. Navigate to **File** | **Project Structure** menu. The settings
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SDK Location**: You can change the project SDK. In [Chapter 1](ch01.html
    "Chapter 1. Installing and Configuring Android Studio"), *Installing and Configuring
    Android Studio*, we selected an SDK as the default. In this screen, we can change
    this SDK, just for the current project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: You can change the Gradle version or the plugin and library repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer Services**: You can configure several developer services in your
    app. The available services are the following: **Ads** (AdMob), **Analytics**
    (Google Analytics), **Authentication** (Google Sign-In), **Cloud** (Firebase),
    and **Notifications** (Google Cloud Messaging).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: According to IntelliJ IDEA ([http://www.jetbrains.com/idea/webhelp/module.html](http://www.jetbrains.com/idea/webhelp/module.html)),
    the following is the definition of a module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*"A module is a discrete unit of functionality which you can compile, run,
    test, and debug independently."*'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This **Modules** menu shows a list of the existing modules with their facets.
    The default module we have in our project is the `app` module. The settings tabs
    correspond to the following Gradle build file configurations: **Properties**,
    **Signing**, **Flavors**, **Build Types**, and **Dependencies**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can add new modules to your project by clicking on the add button in the
    upper-left corner of the **Project Structure** dialog. This action will open a
    module selector wizard as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project settings](img/B05459_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can select one of the following module types: **Phone & Tablet Module**,
    **Android Library**, **Android Wear Module**, **Android TV Module**, **Glass Module**,
    **Import Gradle Project**, **Import Eclipse ADT Project**, **Import .JAR/.AAR
    Package**, **Java Library**, or **Google Cloud Module**.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how projects are presented in Android Studio and which folders they contain
    by default when created. We explored the reasons for having those folders and
    examined the `AndroidManifest.xml` file and its purpose. We also went through
    the project settings in the **Preferences** and **Project Structure** dialogs.
    By now, you should know how to manipulate and navigate through a project in Android
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to use the text editor. Proper knowledge
    of the text editor is important in order to improve our programming efficiency.
    You will learn about the editor settings and how to autocomplete code, use pregenerated
    blocks of code, and navigate through the code. You will also learn about some
    useful shortcuts.
  prefs: []
  type: TYPE_NORMAL
