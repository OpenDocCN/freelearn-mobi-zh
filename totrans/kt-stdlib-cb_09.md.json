["```kt\ndata class ColoredText\n@JvmOverloads\nconstructor(\n        var text: String = \"\",\n        var color: Color = defaultColor) {\n\n    companion object {\n        @JvmField\n        val defaultColor = Color.BLUE\n    }\n}\n```", "```kt\ndata class ColoredText\n@JvmOverloads\nconstructor(\n        var text: String = \"\",\n        var color: Color = defaultColor) {\n\n    companion object {\n        @JvmField\n        val defaultColor = Color.BLUE\n\n @JvmStatic\n        fun processText(text: String): String =\n with(text) {\n                    toLowerCase().trim().capitalize()\n                }\n\n    }\n\n}\n```", "```kt\ndata class ColoredText\n@JvmOverloads\nconstructor(\n        var text: String = \"\",\n        var color: Color = defaultColor) {\n\n fun printToConsole() = println(text)\n\n    companion object {\n        @JvmField\n        val defaultColor = Color.BLUE\n\n        @JvmStatic\n        fun processText(text: String): String =\n                with(text) {\n                    toLowerCase().trim().capitalize()\n                }\n    }\n}\n```", "```kt\npublic class JavaApp {\n    public static void main(String... args) {\n        String rawText = \n              \" one Of The Best Programming Skills You Can Have \" +\n              \"Is Knowing When To Walk Away For Awhile. \";\n        String text = ColoredText.processText(rawText);\n        ColoredText myText =\n              new ColoredText(text, ColoredText.defaultColor);\n        myText.printToConsole();\n    }\n}\n```", "```kt\nOne of the best programming skills you can have is knowing when to walk away for awhile.\n```", "```kt\nColoredText.processText(\"sample text\")\n```", "```kt\napply plugin: \"kotlin2js\"\n```", "```kt\ncompileKotlin2Js.kotlinOptions.outputFile = \"${projectDir}/web/js/app.js\"\n\n```", "```kt\nbuild.doLast {\n    configurations.compile.each { File file ->\n        copy {\n            includeEmptyDirs = false\n\n            from zipTree(file.absolutePath)\n            into \"${projectDir}/web/js/lib\"\n            include { fileTreeElement ->\n                def path = fileTreeElement.path\n                path.endsWith(\".js\") && (path.startsWith(\"META-INF/resources/\") || !path.startsWith(\"META-INF/\"))\n            }\n        }\n    }\n}\n```", "```kt\nfun main(args : Array<String>) {}\n```", "```kt\nfun main(args : Array<String>) {}\n\nexternal fun alert(message: Any?): Unit\n```", "```kt\nfun main(args : Array<String>) {\n    showAlert()\n}\n\nfun showAlert() {\n val number: dynamic = js(\"Math.floor(Math.random() * 1000)\")\n val message = \"There were $number viruses found on your computer! \\uD83D\\uDE31\"\n    println(\"showing alert\")\n alert(message)\n}\n\nexternal fun alert(message: Any?): Unit\n```", "```kt\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Test</title>\n</head>\n<body>\n    <script src=\"img/kotlin.js\"></script>\n    <script src=\"img/app.js\"></script>\n</body>\n</html>\n```", "```kt\nfun List<String>.join(): String {\n    return joinToString()\n}\n\nfun List<Int>.join(): String =\n    map { it.toString() }\n            .joinToString()    \n```", "```kt\n@JvmName(\"joinStringList\")\nfun List<String>.join(): String {\n    return joinToString()\n}\n\n@JvmName(\"joinIntList\")\nfun List<Int>.join(): String =\n    map { it.toString() }\n            .joinToString()\n```", "```kt\nfun main(vararg args: String) {\n    println(listOf(1, 2, 3).join())\n    println(listOf(\"a\", \"b\", \"c\").join())\n}\n```", "```kt\n1, 2, 3\na, b, c\n```", "```kt\ndata class A(val a: String = \"a\") {\n    companion object {\n        @JvmStatic\n        fun foo(): String = \"Wooo!\"\n    }    \n}\n```", "```kt\nimport java.lang.StringBuilder as builder\n```", "```kt\nimport java.lang.StringBuilder as builder\n\nfun main(vararg args: String) {\n val text = builder()\n .append(\"Code is like humor. \")\n .append(\"When you have to explain it, \")\n .append(\"it’s bad.\")\n .toString()\n println(text)\n}\n```", "```kt\nCode is like humor. When you have to explain it, it’s bad.\n```", "```kt\ndata class Song(val title: String)\ndata class Artist(val name: String)\n```", "```kt\ntypealias GrouppedSongs<T> = Map<T, List<Song>>\n```", "```kt\nfun getMostPopularArtist(songs: GrouppedSongs<Artist>) =\n    songs.toList().sortedByDescending {it.second.size }.first().first\n```", "```kt\nval songs: GrouppedSongs<Artist> =\n        mapOf(\n                Artist(\"Bob Dylan\") to\n                        listOf(Song(\"Blowing In The Wind\"),\n                               Song(\"To Fall in Love With You\")),\n\n                Artist(\"Louis Armstrong\") to\n                        listOf(Song(\"What A Beautiful World\"))\n        )\n\nprintln(\"${getMostPopularArtist(songs)} is the most popular\")\n```", "```kt\nArtist(name=Bob Dylan) is most popular\n```", "```kt\nint value;\ntry {\n    result = parseInt(input);\n} catch (NumberFormatException e) {\n} finally {\n    result = 0;\n}\n```", "```kt\ntry {\n    parseInt(\"fdsaa\")\n} catch (e: NumberFormatException) {\n    0\n}\n```", "```kt\nval result = try {\n    parseInt(\"fdsaa\")\n} catch (e: NumberFormatException) {\n    0\n}\n```", "```kt\nval result = when(input) {\n    is Int -> input\n    is String -> parseInt(input)\n    else -> 0\n}\n```", "```kt\nfun getRandomNumber(): Number = Random().nextDouble() * 10\n```", "```kt\nprintln(getRandomNumber() as? Int)\nprintln(getRandomNumber() as? Double)\nprintln(getRandomNumber() as? String)\n```", "```kt\nnull\n8.802117014997226\nnull\n```"]