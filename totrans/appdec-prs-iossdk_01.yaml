- en: Chapter 1. Getting Started with Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parse is a cloud-based application development platform, which provides you
    with a scalable and powerful backend service for your application. This platform
    is available for Windows, iOS, Android, JavaScript, and OS X. Parse provides you
    with a Plug and Play service for lots of complex components, such as social media
    integration, push notifications, and data storage with the flexibility of full
    customization. Parse basically emphasizes rapid application development, using
    which you can cut down your development time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using Parse as a backend for our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application setup on the Parse web portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse SDK integration in our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic code structure to get started with Parse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse backend service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional data-based application development process involves the backend
    development, which increases the development time and cost of the applications.
    All the major applications available in the stores are using backend APIs, which
    itself is a complex development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers face the following problems while developing applications in a traditional
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: Large development time and effort
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding servers hike the overall product's cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement of separate development and production servers for hosting and maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More prone to bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application goes down when the server goes down or is under maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To overcome all the drawbacks of traditional application development, developers
    can leverage Parse to create a powerful backend for their application. Parse is
    loaded with lots of features that are frequently needed in mobile application
    development. It reduces the effort, cost, and time for the application's development.
  prefs: []
  type: TYPE_NORMAL
- en: Parse allows you to create your applications without worrying about creating
    the backend of the application. Using Parse, you can create a flexible and powerful
    backend without worrying about server management and investing time in writing
    code for backend servers. Parse provides a complete framework for push notifications,
    social media integration, analytics, and data storage, with flexibility to code
    business logic for the backend with Cloud Code.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of using Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are lots of advantages of using Parse as a backend service. A few of
    them are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rapid application development: Parse allows you to rapidly develop applications
    using native framework components with complete flexibility. It provides a Plug
    and Play facility for all of the complex components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UX-rich applications: Parse allows developers to focus more on creating a great
    user experience and forget about server maintenance and complex infrastructure.
    You can instantly add push notifications, data storage, social integration (and
    more!) the moment you integrate the Parse SDK into your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Powerful data management: Parse handles everything you need to store data securely
    and efficiently on the cloud. You can store basic data types, locations, photos,
    and queries across all of them in just a few lines of code. You can manage, search,
    filter, and update your content with a web-based data browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make your app social: Connect your application''s users via social media sites
    (such as Facebook and Twitter), with just a few lines of code. Parse takes care
    of linking accounts across networks, resetting passwords, and keeping everything
    safe and secure so that you don''t have to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plug and Play push notification: Parse simplifies the effort of adding real-time
    push notifications to an application. You can create, send, and target highly
    effective push notifications via the web-based push console, REST API, or client
    SDKs. You can send millions of notifications every day; you never have to worry
    about scaling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run custom app code: No need of servers anymore to add rich, custom business
    logic to your app''s backend with Parse''s appropriately named Cloud Code. Parse
    provides you Cloud Code Console with Cloud Modules; which virtually integrate
    with any third-party service (such as Twilio, MailGun, CrowdFlower, and many more).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One backend for all: Parse provides native SDKs for iOS, Android, Windows 8,
    Windows Phone 8, OS X, Unity, Xamarin, and JavaScript; this makes it easy to create
    beautiful and powerful apps for all devices and environments. From desktop to
    mobile apps, Parse has an SDK for everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up accounts and applications on Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will help you to set up an account at Parse.com:'
  prefs: []
  type: TYPE_NORMAL
- en: To start developing your applications using Parse, you need to create your application
    on Parse.com. You can set up your account by visiting [https://www.parse.com/apps/quickstart](https://www.parse.com/apps/quickstart).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions and sign up at Parse.com.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create your application by providing a name you wish to integrate with Parse.![Setting
    up accounts and applications on Parse](img/0333OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the application you'll get the **Application ID** and **Client
    Key**:![Setting up accounts and applications on Parse](img/0333OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating Parse in an iOS project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will help you to integrate Parse in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Parse iOS SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need the latest Xcode (v5.0+) and target iOS 4.3 or higher.![Integrating
    Parse in an iOS project](img/0333OS_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the **Copy items into destination group's folder** checkbox is
    checked:![Integrating Parse in an iOS project](img/0333OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the project, it should look like the following screenshot:![Integrating
    Parse in an iOS project](img/0333OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the framework to the project compiled resources. Click on the name of your
    app under (**Quiz** in our case) **Target** | **Quiz**| **Build Phases** tab,
    and then expand **Link Binary With Libraries** as shown in the following screenshot:![Integrating
    Parse in an iOS project](img/0333OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the bottom left of the **Link Binary With Libraries**:![Integrating
    Parse in an iOS project](img/0333OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CoreLocation.framework`![Integrating Parse in an iOS project](img/0333OS_01_09.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoreGraphics.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libz.1.1.3.dylib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MobileCoreServices.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QuartzCore.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Security.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StoreKit.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SystemConfiguration.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioToolbox.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CFNetwork.framework`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our project is configured, it''s time to integrate Parse into our
    application''s code. Perform the following steps to set up the basic code to get
    started with Parse:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `AppDelegate.m` file and add the following `import` statement on the
    top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code inside the `application:didFinishLaunchingWithOptions:`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For tracking statistics when the application opens, add the following line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're targeting iOS versions less than 5.0, you'll need to add the **-fobjc-arc**
    flag to the **Other Linker Flags** entry in your target **Build Settings**:![Setting
    up Parse](img/0333OS_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There you go! You are done with the basic Parse setup in your project. Now you
    are ready to test your first application on Parse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code snippet into your `appDelegate.m` file at the end of
    the `application:didFinishLaunchingWithOptions:` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So what exactly are these previous three lines of code doing? Here is the description:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Line 1: This line simply creates a Parse object with the name `"Demo"`. So,
    if the class name `"Demo"` doesn''t exist on Parse, it will create a new class
    with the name `"Demo"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 2: This line associates your data with a key within the class. We can
    understand this as a row-column relationship of the table. The class name is the
    name of the database table, `"Demo"` in our case, and the `"data column"` ID is
    the name of a column which will hold `"data value"` as its data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Line 3: This line is responsible for actually saving your data on Parse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute your application with the previous lines of code. A new object with
    the name `"Demo"` will be sent to the Parse Cloud and then saved.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the results of the code instantly: Go to the Parse web-based
    **Dashboard**, and then click on your application. Click on the **Data browser**
    tab and you will observe that under the **Classes** section you have a class name
    called **"Demo"**. When you click on the **"Demo"** class you will observe that
    the row is created with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objectId`: This is an automatically generated field by Parse, containing a
    unique identifier, which will act as a Primary Key for your row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data column`: This column was generated by our code; if you notice you will
    see that it holds the value we had sent through the code (`"data value"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createdAt`: This is also an auto-generated field which holds the date and
    time when the row is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`updatedAt`: This is also an auto-generated field, which holds the date and
    time when the row is updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ACL`: This field is for the **Access Control List** and is used for data security.
    We will discuss this field, in detail, in the upcoming chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we've configured the Parse application on the Parse portal, and configured
    the project to send and receive data from Parse.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to set up an application on Parse, including
    some basic code and concepts to get us started with Parse. We started by creating
    an application on Parse. Then, we integrated Parse in your iOS project. Finally,
    we wrote some code to get started with Parse.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Parse objects and queries.
  prefs: []
  type: TYPE_NORMAL
