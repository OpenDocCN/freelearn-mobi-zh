["```swift\n    motion create UserInterfaceApplication    \n\n        Create UserInterfaceApplication\n        Create UserInterfaceApplication/.gitignore\n        Create UserInterfaceApplication/Rakefile\n        Create UserInterfaceApplication/app\n        Create UserInterfaceApplication/app/app_delegate.rb\n        Create UserInterfaceApplication/resources\n        Create UserInterfaceApplication/spec\n        Create UserInterfaceApplication/spec/main_spec.rb\n    ```", "```swift\n    class Tab1Controller < UIViewController\n      def viewDidLoad\n           view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor\n       end \n    end\n    ```", "```swift\n    class Tab2Controller < UIViewController\n        def viewDidLoad\n         view.backgroundColor = UIColor.redColor\n      end\n    end\n    ```", "```swift\n    class Tab3Controller < UIViewController\n        def viewDidLoad\n          view.backgroundColor = UIColor.whiteColor\n       end\n    end\n    ```", "```swift\nclass AppDelegate\n  def application(application, didFinishLaunchingWithOptions:launchOptions)\n        @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n        @window.rootViewController = createTabBar\n        @window.makeKeyAndVisible\n\n    true\n  end\n\n  def createTabBar\n\n    tab_bar_controller = UITabBarController.alloc.init\n    tab_bar_controller.viewControllers = [\n      Tab1Controller.alloc.init,\n      Tab2Controller.alloc.init,\n      Tab3Controller.alloc.init\n    ]\n    tab_bar_controller\n  end\nend\n```", "```swift\n$rake\n\n```", "```swift\n    class Tab1Controller < UIViewController\n      def init\n\n        super\n        self.title = \"Tab 1\"\n        self.tabBarItem.image = UIImage.imageNamed('FirstTab.png') \n        self\n      end\n\n      def viewDidLoad\n           view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor\n       end\n    end\n    ```", "```swift\n    def init\n         super\n\n         self.tabBarItem = UITabBarItem.alloc.initWithTabBarSystemItem(UITabBarSystemItemSearch, tag: 1)\n         self\n       end\n    ```", "```swift\n     def init\n         super\n\n         self.tabBarItem = UITabBarItem.alloc.initWithTabBarSystemItem(UITabBarSystemItemTopRated, tag: 1)\n         self\n       end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\ntab_bar_item.setFinishedSelectedImage(UIImage.imageNamed(\"selectedImage\"), withFinishedUnselectedImage:UIImage.imageNamed(\"UnselectedImage\"))\n```", "```swift\n    self.tabBarItem.image = UIImage.imageNamed('FirstTab.png')\n    ```", "```swift\n    self.tabBarItem.image = UIImage.imageNamed('FirstTab')\n    ```", "```swift\n    tab_bar_controller.tabBar.backgroundImage = UIImage.imageNamed \"bgTabBar\"\n    ```", "```swift\n    def createTabBar\n\n        tab_bar_controller = UITabBarController.alloc.init\n        tab_bar_controller.viewControllers = [\n           UINavigationController.alloc.initWithRootViewController(Tab1Controller.alloc.init),  \n          Tab2Controller.alloc.init,\n          Tab3Controller.alloc.init\n        ]\n        tab_bar_controller\n      end\n    ```", "```swift\n    UINavigationController.alloc.initWithRootViewController(Tab1Controller.alloc.init)\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    class Tab1Controller < UIViewController\n      def init\n        super\n        self.title = \"Tab 1\"\n        self.tabBarItem.image = UIImage.imageNamed('FirstTab.png') \n        self\n      end\n      def viewDidLoad\n         view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor\n\n     setupNavigationBar\n\n       end\n     def setupNavigationBar\n\n     self.navigationController.navigationBar.barStyle = UIBarStyleBlackTranslucent;\n     right_button_item = UIBarButtonItem.alloc.initWithTitle('Add',style:UIBarButtonItemStyleBordered,target: self, action: \"click_add\"  )\n     self.navigationItem.setRightBarButtonItem(right_button_item)\n\n     end \n\n     def click_add\n     @alert_box = UIAlertView.alloc.initWithTitle(\"Add button popup\",\n     message:\"You have pressed the 'Add' button\",\n     delegate: nil,\n     cancelButtonTitle: \"ok\",\n     otherButtonTitles:nil)\n     @alert_box.show\n     end\n\n    end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\nUIBarButtonItem.alloc.initWithTitle('Add',style:UIBarButtonItemStyleBordered,target: self, action: \"click_add\"  )\n```", "```swift\nself.navigationItem.setRightBarButtonItem(right_button_item)\n```", "```swift\nself.navigationItem.setLeftBarButtonItem(button_item)\n```", "```swift\n    app.status_bar_style = :black_translucent\n    ```", "```swift\n    application.setStatusBarStyle(UIStatusBarStyleBlackOpaque, animated:true)\n    ```", "```swift\napplication.setStatusBarHidden(true,  withAnimation:UIStatusBarAnimationSlide)\n```", "```swift\n      def viewDidLoad\n           view.backgroundColor = UIColor.scrollViewTexturedBackgroundColor\n           setupNavigationBar\n     add_form_elements\n       end\n    ```", "```swift\n    def add_form_elements\n        label = UILabel.alloc.init\n        label.frame = [[0, 40], [300, 30]]\n        label.backgroundColor = UIColor.clearColor\n        label.textColor = UIColor.greenColor\n        label.font = UIFont.fontWithName(\"HelveticaNeue-CondensedBold\",size:18)\n        label.text = \"This is sample application\"\n\n        view.addSubview(label)\n    end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n        @textbox = UITextField.alloc.initWithFrame([[10,80],[200,35]])\n        @textbox.borderStyle = UITextBorderStyleRoundedRect\n        @textbox.placeholder = \"Type..\"\n        @textbox.textAlignment = UITextAlignmentCenter\n        view.addSubview(@textbox)\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    @switch = UISwitch.alloc.initWithFrame([[10, 130], [200, 35]])\n        @switch.addTarget(self,action:'switchIsChanged', forControlEvents:UIControlEventValueChanged)\n        view.addSubview(@switch)\n    ```", "```swift\n      def switchIsChanged\n      if @switch.on?\n        #Some code \n      else\n       #some code\n      end \n    ```", "```swift\n    $rake\n\n    ```", "```swift\n       @customSlider = UISlider.alloc.initWithFrame([[10, 160],[200, 35]])\n        #Setting the minimum value of slider \n        @customSlider.minimumValue = 0\n        #Setting the maximum value of slider \n        @customSlider.maximumValue = 1000\n        #Setting the default value of slider \n        @customSlider.value = @customSlider.maximumValue/2 \n        #Setting the action value of slider to sliderValueChanged \n        @customSlider.addTarget(self, action:'sliderValueChanged', forControlEvents:UIControlEventValueChanged)\n        view.addSubview(@customSlider)\n    ```", "```swift\n    def sliderValueChanged\n       #some code\n      end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n      @normalButton = UIButton.buttonWithType(UIButtonTypeRoundedRect)\n      @normalButton.frame = [[10,200],[200,35]]\n      @normalButton.setTitle(\"Click Me\", forState:UIControlStateNormal)\n      @normalButton.setTitle(\"You have clicked me\", forState:UIControlStateHighlighted)\n      @normalButton.setTitle(self, action:'buttonIsPressed', forControlEvents:UIControlEventTouchDown)\n      view.addSubview(@normalButton)\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    class Tab2Controller < UIViewController\n      def init\n        super\n        self.tabBarItem = UITabBarItem.alloc.initWithTabBarSystemItem(UITabBarSystemItemSearch, tag: 1)\n        self\n      end\n      def viewDidLoad\n\n        view.backgroundColor = UIColor.redColor\n       # creating an array of country names\n     @countryNames = ['United States', 'France', 'India', 'China', 'Russia']\n\n     #calling add_label_and_button method to create label and button\n     add_label_and_button\n     #calling create_picker method to create piker\n     @picker = create_picker\n     view.addSubview(@picker)\n\n      end   \n\n     def create_picker\n     picker =  UIPickerView.alloc.initWithFrame(CGRectMake(10,100, 220, 250))\n     picker.hidden = true\n     picker.showsSelectionIndicator = true\n     picker.dataSource = self\n     picker.delegate = self\n     picker\n     end\n\n     def add_label_and_button\n     @label = UILabel.alloc.init\n     @label.frame = [[10, 40], [300, 30]]\n     @label.backgroundColor = UIColor.clearColor\n     @label.text = \"Value\"\n     view.addSubview(@label) \n\n     @button = UIButton.buttonWithType(UIButtonTypeRoundedRect)\n     @button.frame = [[120, 40], [150, 30]]\n     @button.setTitle(\"Show Picker\",forState:UIControlStateNormal)\n     @button\n     @button.addTarget(self,\n     action: 'show_picker',\n     forControlEvents:UIControlEventTouchUpInside) \n     view.addSubview(@button) \n     end\n\n     def show_picker\n     if @picker.isHidden\n     @picker.hidden = false\n     @button.setTitle(\"Hide Picker\",forState:UIControlStateNormal)\n     else\n     @picker.hidden = true \n     @button.setTitle(\"Show Picker\",forState:UIControlStateNormal)\n     end\n     end\n\n     #This method returns number of components in picker.\n     def numberOfComponentsInPickerView(pickerView)\n     1\n     end\n\n     #This method returns number of rows in picker.\n     def pickerView(pickerView,numberOfRowsInComponent:component)\n     @countryNames.count\n     end\n\n     #This method returns value of rows in picker\n     def pickerView(pickerView, titleForRow:row,forComponent:component)\n     @countryNames[row]\n     end\n\n    #This method will be called when some value is selected in picker\n     def pickerView(pickerView, didSelectRow:row, inComponent:component)\n     @label.text = @countryNames[row]\n     end\n\n    end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    picker =  UIPickerView.alloc.initWithFrame(CGRectMake(10,100, 220, 250))\n    picker.hidden = true\n    picker.showsSelectionIndicator = true\n    picker.dataSource = self\n    picker.delegate = self\n    picker\n```", "```swift\n    def numberOfComponentsInPickerView(pickerView)\n      1\n    end\n    ```", "```swift\n    def     pickerView(pickerView,numberOfRowsInComponent:component)\n        @countryNames.count\n        end\n    ```", "```swift\n    def pickerView(pickerView, titleForRow:row,forComponent:component)\n        @countryNames[row]\n      end\n    ```", "```swift\ndef pickerView(pickerView, didSelectRow:row, inComponent:component)\n    @label.text = @countryNames[row]\nEnd\n```", "```swift\n    class AppDelegate\n      def application(application, didFinishLaunchingWithOptions:launchOptions)\n     @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n     @window.makeKeyAndVisible\n     about_tab =  UINavigationController.alloc.initWithRootViewController(AboutController.alloc.init)\n     restro_tab = RestroController.alloc.initWithStyle(UITableViewStylePlain)\n     restro_tab.tabBarItem = UITabBarItem.alloc.initWithTabBarSystemItem(UITabBarSystemItemSearch, tag: 1)\n     @tabbar = UITabBarController.alloc.init \n     @tabbar.viewControllers = [ restro_tab, about_tab]\n     @tabbar.wantsFullScreenLayout = true\n     @window.rootViewController = @tabbar\n        true\n      end\n    end\n    ```", "```swift\n    class AboutController < UIViewController\n    def init\n     if super\n     self.tabBarItem.title = \"About\"\n     self.tabBarItem.image = UIImage.imageNamed('FirstTab.png') \n     end\n    super \n    end\n    def viewDidLoad\n          view.backgroundColor = UIColor.whiteColor\n          @label = UILabel.new\n          @label.text = 'Restro Application'\n          @label.lineBreakMode = UILineBreakModeWordWrap;\n          @label.numberOfLines = 0\n          @label.frame = [[50,50],[250,50]]\n          view.addSubview(@label)\n\n    end\n    end\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    class DetailController <  UIViewController\n     attr_accessor :restaurant \n      def viewDidLoad\n        view.backgroundColor = UIColor.whiteColor\n        show_restaurant_detail\n      end\n      def show_restaurant_detail\n         label = UILabel.alloc.init\n          label.frame = [[120, 20], [300, 30]]\n          label.backgroundColor = UIColor.clearColor\n          label.font = UIFont.fontWithName(\"HelveticaNeue-CondensedBold\",size:22)\n          label.text = @restaurant.name\n          view.addSubview(label)\n\n          image = UIImage.alloc.initWithData(NSData.alloc.initWithContentsOfURL(NSURL.URLWithString(@restaurant.thumb_url_image)))\n          view.addSubview(UIImageView.alloc.initWithImage(image))\n\n          label = UILabel.alloc.init\n           label.frame = [[20, 100], [300, 30]]\n           label.backgroundColor = UIColor.clearColor\n           label.font = UIFont.fontWithName(\"HelveticaNeue-CondensedBold\",size:15)\n           label.text = @restaurant.desc\n           view.addSubview(label)\n      end\n    end\n    ```", "```swift\n      def tableView(tableView, didSelectRowAtIndexPath:indexPath)\n      detail_controller = DetailController.alloc.init\n        detail_controller.restaurant =  @restaurants[indexPath.row]\n        self.navigationController.pushViewController(detail_controller,\n          animated:true)\n      end\n    ```", "```swift\n    RestroController.alloc.initWithStyle(UITableViewStylePlain) \n    ```", "```swift\n    restro_tab = UINavigationController.alloc.initWithRootViewController(RestroController.alloc.initWithStyle(UITableViewStylePlain))\n    ```", "```swift\n    $rake\n\n    ```", "```swift\n    self.navigationItem.titleView = searchBar\n    ```", "```swift\n    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator\n    ```", "```swift\n    $rake\n\n    ```"]