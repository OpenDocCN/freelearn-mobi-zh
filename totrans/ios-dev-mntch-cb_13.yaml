- en: Chapter 13. Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application for different languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizable resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regional formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of the iOS platform and the global software marketplace in
    the form of the application store, Apple has made it easier for developers to
    distribute applications worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: But, users worldwide will not even bother to download and use an application
    that is released in a language they do not understand. To broaden the user base
    for their applications, developers have to localize it. Localization is the process
    of translating text into multiple languages, providing resources specific to multiple
    regions, thus creating an application that will target audiences of different
    cultures.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the best practices to provide translated text
    that will be displayed according to each user's locale preferences. We will also
    see how to provide resources (images, videos) based on these preferences. Finally,
    we will use common .NET practices for formatting dates, currencies, and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application for different languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an application that will support two different
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `MultipleLanguageApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add two labels on the view of `MainController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add two folders to the project. Name them `en.lproj` and `es.lproj` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two text files with a text editor application. Enter the following text
    in the first file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as Localizable.strings inside the en.lproj folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text in the second file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it with the same name, Localizable.strings, inside the es.lproj folder
    this time. Set both files' **Build Action** to **Content.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Localizable.strings` files must be saved in either `UTF8` or `UTF16` encodings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following code in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Through the **settings** application on the simulator, set the language to **English**
    (if it is not set already), and run the application. The message will be displayed
    in English. Try setting the language of the simulator to **Spanish**, and run
    the application again. The message will be displayed in Spanish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make it easy for developers to provide support for multiple languages in
    applications, iOS reads text in different languages from the corresponding language
    folder. In this application, we support both English and Spanish. Their corresponding
    folders are `en.lproj` and `es.lproj`, respectively. When we call the `LocalizedString`
    method, it looks for and parses the file `Localizable.strings` to return the appropriate
    text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the strings files are defined by a set of quoted key/value
    pairs, in a C style syntax, ending each set with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can also provide comments to assist the job of the person
    that will translate the text, even if we do it ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: The `NSLocale.PreferredLanguages` static property returns a string array of
    the user's preferred language identifiers. The first item in this array is the
    currently selected language. If the selected language is **English**, it will
    return `en`; if it is **Spanish**, it will return `es`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NSBundle.PathForResource` method returns the path of the application bundle
    for the parameters we pass to it. We use this path to get the appropriate `NSBundle`
    instance, according to the selected language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then call the `LocalizedString` method to display the appropriate text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter's purpose is dual. It is not only the key to look for to
    return the translated text, but also the text that will be displayed in case the
    specified localization path is not found. The second parameter is the comment,
    or any instruction we want to give to the translator. It is not displayed and
    basically not used. We can pass `null` to this parameter and no error will occur.
    It is wise, however, to always include a comment or instruction, since it will
    help avoid confusion when translating multiple strings.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is advisable to always provide keys that can act as the fallback text to
    be displayed in **English**, in case the language the user has selected is not
    included in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `LocalizedString` method is overloaded. The second overload accepts
    three parameters. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the key to look for. The second parameter is the fallback
    value, in case the specified localization path is not found. The third parameter
    is the name of the file containing the strings, without the `.strings` extension.
    This overload is more helpful, and we can use different keys for our strings that
    will help us identify where that particular string is used in the code. For example,
    in this case, we could set the key in the strings file to `MainController.lblLocalizedOutput:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And use it in our code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This overload also helps us separate our strings into multiple `.strings` files,
    passing the corresponding file name as parameter #3.'
  prefs: []
  type: TYPE_NORMAL
- en: The last overload contains four parameters. The first three are the same as
    the second overload. The fourth parameter is simply the comment we want the particular
    string to have.
  prefs: []
  type: TYPE_NORMAL
- en: Localization in real-world application scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we use the `PathForResource` method to get an instance of the
    current locale bundle. This is because the values returned from the `LocalizedString`
    method are cached. In real-world application scenarios, where the application
    would be downloaded in a specific language and the user would most likely never
    change the language of the device to use it, just calling `NSBundle.MainBundle.LocalizedString`
    would be enough.
  prefs: []
  type: TYPE_NORMAL
- en: Localizable resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A localizable resource is content, such as images, sound files, and so on, which
    is specific to a locale. In this recipe, we will learn how to load and display
    resources, based on the user's localization preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `LocalizableResourcesApp`.
    Add a label and a `UIImageView` on the view of `MainController.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add two folders for **English** and **Spanish** locales to the project. Add
    one image in each folder, with the same filename. Set their **Build Action** to
    **Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator with **English** language selected
    in the **settings** application. The result should be similar to the following
    screenshot:![How to do it...](img/1468EXP_13_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, set the simulator''s language to **Spanish**, and run the application
    again. The Spanish flag should be displayed instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PathForResource` method automatically searches for the appropriate language
    folder and loads the resource specified through its arguments. In this example,
    we pass the method's result to the `UIImage.FromFile` method to load the image
    and assign it to the image view's `Image` property.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from images, we can use the `PathForResource` method to load videos, PDF
    files, and any other localizable resource we need.
  prefs: []
  type: TYPE_NORMAL
- en: More info on localizable resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to make sure that the resource for the specific language folder exists.
    If it does not, an exception will occur. A way to avoid this is to add one universal
    image file in the project and use a `Localizable.strings` file inside each language
    folder containing the paths to the resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To load the appropriate flag, we load the image with the `LocalizedString`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This way, the image `image.jpg` is loaded if the corresponding language folder
    is not found.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating an application for different languages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regional formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regional formatting is how various information, such as currency, date and time,
    and so on, is displayed according to different regions of the world. In this recipe,
    we will discuss how to display formatted numbers and dates according to the user's
    regional formatting settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop and name it `RegionalFormattingApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add five labels on the view of `MainController`. Enter the following code in
    the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the application on the simulator with regional formatting set
    to **United States and Spanish | Spain** under **Settings | General | International
    | Region Format**. The output with the two different regional formats will be
    something like in the following screenshots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_13_03.jpg)![How to do it...](img/1468EXP_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To format dates, currencies, and numbers, we use standard .NET code. For date
    and time, the `DateTime.ToLongDateString` and `DateTime.ToLongTimeString` methods
    return the values according to the locale, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'For currency and numbers, we use C# numerical strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `System.Globalization` namespace is supported in MonoTouch. To display
    the current locale, consider the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that there is one difference between this code and the `NSLocale.CurrentLocale.LocaleIdentifier`.
    The former uses a dash (-), while the latter uses an underscore (_) in the locale
    name.
  prefs: []
  type: TYPE_NORMAL
