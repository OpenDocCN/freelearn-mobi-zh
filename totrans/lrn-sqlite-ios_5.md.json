["```swift\nvar db1 = SQLiteDatabase();\ndb1.open(\"/path/to/database1.sqlite\");\n```", "```swift\nlet datadocuments = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as String\n\nlet databasepath = documents.stringByAppendingPathComponent(\"tester.sqlite\")\n\n// open the database\n\nvar databasedb: DBPointer = nil\n\nif sqlite3_open(path, &databasedb) != SQLITE_OK\n{\n     println(\"error opening database\")\n}\n```", "```swift\n    #import <sqlite3.h>\n    ```", "```swift\n    if sqlite3_exec(databasedb, \"create table if not exists test table (id integer primary key autoincrement, name2 text)\", nil, nil, nil) != SQLITE_OK {\n        let errmsg = String.fromCString(sqlite3_errmsg(db))\n\n        println(\"error creating new table: \\(errmsg)\") }\n    ```", "```swift\n    var statement: DBPointer = nil\n    if sqlite3_prepare_v2(databasedb, \"insert into test (name) values (?)\", -1, &statement, nil) != SQLITE_OK\n    {\n        let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n               println(\"error preparing insert: \\(errmsg)\")\n    } \n\n    if sqlite3_bind_text(statement, 1, \"data\", -1, SQLITE_TRANSIENT) != SQLITE_OK\n    {\n        let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n        println(\"failure binding record data: \\(errmsg)\") }\n\n    if sqlite3_step(statement) != SQLITE_DONE\n    {\n        let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n        println(\"failure inserting record data: \\(errmsg)\") }\n    ```", "```swift\n    let SQLITE_STATIC = sqlite3_destructor_type(DBPointer(bitPattern: 0))\n    let SQLITE_TRANSIENT = sqlite3_destructor_type(DBPointer(bitPattern: -1))\n    ```", "```swift\nvar statement: DBPointer = nil\nif sqlite3_prepare_v2(databasedb, \"insert into testtable (name) values (?)\", -1, &statement, nil) != SQLITE_OK\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(db)) println(\"error preparing the insert: \\(errmsg)\")\n}\nif sqlite3_bind_text(statement, 1, \"Bind1\", -1, SQLITE_TRANSIENT) != SQLITE_OK\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(db)) println(\"failure binding this statement: \\(errmsg)\")\n}\nif sqlite3_step(statement) != SQLITE_DONE\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(db)) println(\"failure on inserting data : \\(errmsg)\") }\n```", "```swift\n#define SQLITE_STATIC((sqlite3_destructor_type)0)\n#define SQLITE_TRANSIENT((sqlite3_destructor_type)-1)4\n```", "```swift\n\"Internal let SQLITE_STATIC = unsafeBitCast(0, sqlite3_destructor_type.self) internal let SQLITE_TRANSIENT = unsafeBitCast(-1, sqlite3_destructor_type.self)\"\n```", "```swift\nif sqlite3_reset(statement) != SQLITE_OK\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n\n    println(\"error resetting prepared statement: \\(errmsg)\")\n}\n\nif sqlite3_bind_null(statement, 1) != SQLITE_OK\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n\n    println(\"failure binding the null value: \\(errmsg)\")\n}\n\nif sqlite3_step(statement) != SQLITE_DONE\n{\n    let errmsg = String.fromCString(sqlite3_errmsg(databasedb))\n\n    println(\"failure inserting null: \\(errmsg)\")\n}\n```", "```swift\nif sqlite3_close(databasedb) != SQLITE_OK\n{\n     println(\"error closing the database\")\n}databasedb = nil\n```"]