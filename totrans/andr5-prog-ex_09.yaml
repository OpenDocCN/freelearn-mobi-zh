- en: Chapter 9. Camera, Video, and Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recent years have brought about great advancements in mobile multimedia technologies,
    with many people not only listening to music and watching movies on their mobile
    devices but using them to produce high quality media of their own. The SDK provides
    APIs that allow us to include both media playback as well as media capture, and
    with the camera APIs being completely overhauled, there has never been a better
    time to be developing Android multimedia apps.
  prefs: []
  type: TYPE_NORMAL
- en: Many multimedia features can be very easily incorporated into our apps by simply
    harnessing the system's native applications such as the camera. Alternatively,
    we can work directly with the APIs and develop apps that handle all the photos
    and videos capturing process themselves, although this is no simple task. One
    thing that is simple to achieve, though, is including the recording and playing
    of multimedia, including audio, within our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Preview images using the native Camera app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically refactor code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save images from the native camera to our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle IO exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a unique filename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add images to the device gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make images private
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture and play back video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add video controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle video interruptions without losing position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package videos with an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play videos from memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stream video from the Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record audio files with a MediaRecorder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play back audio files with a MediaPlayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More often than not, when including image or video capture in our apps, all
    we need to do is take advantage of the fact that the system already has applications
    designed for these purposes and we can call upon them with an Intent, in just
    the same way that we call Activities inside our own apps. We do not even need
    to know which app is called, as the system will automatically seek out the most
    appropriate, even offering the user a choice when one is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will include a photo taking function in our Ancient Britain app that
    harnesses the native Camera application to capture an image, display it in a view
    and save it to a specific directory. We will then make our image available to
    the device gallery and other apps. This is not a short exercise, so we will split
    it into three parts: preparing and refactoring, previewing a camera shot, and
    saving a camera shot.'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save time, we will not set up another button for our camera function. Instead
    we will reuse the ImageView that currently takes the user to the relevant Wikipedia
    page. We will also need to set some permissions and feature uses and add a new
    graphic. Follow these steps to prepare the Ancient Britain app, which we began
    in [Chapter 4](ch04.html "Chapter 4. Managing RecyclerViews and Their Data"),
    *Managing RecyclerViews and Their Data* to incorporate calls to the native camera:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Ancient Britain` project in Android Studio and open the manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include these tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find an icon-sized image, suitable for a camera function, such as the following:![Refactoring
    code](img/B04321_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this in the `res/drawable` directory in file explorer view and replace
    the `web_icon.png` file with the one you just made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `DetailActivity.java` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the following line and right-click on `detailWebLink`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Shift* + *F6* and rename the instance `detailCameraButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the XML reference, renaming it `detail_camera_button`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `web_icon` in the `drawable` folder in the project explorer and rename
    it `camera_icon`.![Refactoring code](img/B04321_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first thing we did here, was apply permissions and feature to the manifest,
    the feature being included here so as to prevent devices without cameras being
    able to find it on the Play store.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are developing for API level 17 or below, you will need to add the permission:
    `android.permission.CAMERA`.'
  prefs: []
  type: TYPE_NORMAL
- en: The refactoring that we did next was not strictly necessary but made the code
    easier to follow and demonstrated just how easy it is to rename things with the
    *F6* key. The effects propagate throughout the project, for example when we renamed
    an XML reference in Java, the corresponding layout file was edited accordingly,
    and there are many handy refactoring tools available through the Refactor menu.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing the camera output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To preview the camera, we need to fire an intent that calls the native camera
    as well as a way of responding when the camera returns to our app. These three
    steps achieve that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add these fields to the `detailActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `onClick()` method of the now, `detailCameraButton` button''s `onClickListener`
    with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Provide the class with the following `onActivityResult()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now run the app. Clicking the camera icon will allow you to take a picture
    which will be displayed in the layout's other `ImageView`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Previewing the camera output](img/B04321_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The intent we create here is called on the `MediaStore` class, using a constant
    that opens the native camera. Note how the Camera Activity is protected by the
    intent's `resolveActivity()` method. If there is no app on the device that can
    fulfill the request and the intent is fired, then the app will crash. The `PacketManager()`
    will contain nothing if no suitable app is found.
  prefs: []
  type: TYPE_NORMAL
- en: When control is handed back to our app, the `onActivityResult()` method is called.
    The `requestCode` is used to check where the camera Activity was called from and
    the `resultCode` to test that it worked. We used the data value pair `data` to
    extract the bitmap the camera returned in its Bundle. This particular image is
    only a thumbnail. The full image is available and next we will see how to store
    it on the SD card.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the camera output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again to save time and extra coding, we will use an existing widget as a button
    to trigger an Intent to save as well as take a photo. We will replace the main
    image view''s `onTouchListener` with an `onClickListener` and call the methods
    we need from there. Follow these steps to see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `detailActivity` class, replace the line `detailImage.setOnTouchListener(listener);`
    in the `onCreate()` method with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `takePhoto()` method to look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the `filename()` method like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onActivityResult()` method, replace the commented `// To complete line
    with this code`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now run and test the app. Tapping the camera icon replaces the main
    image with the one just taken and tapping on the image itself will let you save
    a picture to the device's SD card in the Pictures directory.![Saving the camera
    output](img/B04321_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clearly, the way this example processes user input, is a little on the clumsy
    side. Ideally, we would have added new buttons or even another Activity to handle
    previewing and saving images. We took this approach for the sake of brevity and
    to highlight the processes themselves. The two methods applied warrant a little
    examination themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The `takePhoto()` method fires the same intent as the camera button's `onClick()`
    method. A different request code is used to show how we can call the same external
    Activity but respond differently depending on where it was called from. Android
    generally manages exceptions rather well, but we cannot guarantee the presence
    of a SD card and it makes sense to try to catch this exception. We could create
    a message. If the creation of the File `photoFile` is successful (and it rarely
    isn't), it can be included in our Intent with the line `takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,
    Uri.fromFile(photoFile));`.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a filename, we need to be careful that it does not collide with
    others. Without a lot of precautionary code, this can be done by setting up a
    unique filename, which is done here by appending a timestamp. This method is called
    during our attempt to catch system exceptions and therefore requires the throws
    `IOException` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added some code in the `else` clause of our `onActivityResult()`
    method, which is called after the image is saved and control returned to our app.
    The `ACTION_MEDIA_SCANNER_SCAN_FILE` Intent is a request to the media scanner
    to add it to the media database the next time it is run. This means that our image
    will appear in the native gallery app and be available to any other app that uses
    the media database, such as wallpaper pickers.
  prefs: []
  type: TYPE_NORMAL
- en: If you want your images to be only available from within your app, it is not
    enough simply to omit these lines, as the images are still accessible from any
    file browsing software. To prevent this, use `Environment.getExternalFilesDir()`
    instead of `Environment.getExternalStoragePublicDirectory()`. This will also have
    the effect of deleting these files when your app is uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The media scanner does not necessarily run at predictable times and, when testing,
    you may have to restart your device or emulator to force it to include your file.
  prefs: []
  type: TYPE_NORMAL
- en: Commandeering the platform's camera like this is a wonderfully convenient way
    to incorporate its functionality with a minimum of coding. Of course, it is quite
    possible to recreate a camera or a video app from scratch and we will take a quick
    look at how that can be done shortly. First, let us see how to record and play
    back video in the same way we did here with the camera.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing and playing video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using native apps to capture video content from within our own apps is achieved
    in an almost identical way, to the one we just applied. The main difference is
    that when dealing with video content a lot of the functionality is provided by
    the purpose-built widget, the `VideoView`. We will also add video control buttons
    with the `MediaController` and see how to pause a video when our app is sent to
    the background. Follow these steps to build a simple video app:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the feature uses and permissions we included in the last exercise to the
    manifest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` file and replace the `TextView` with this `VideoView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `MainActivity.java` and add these fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include this code in the `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then the `onActivityResult()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you test the project now, you will be able to record and play back a video.
    However, if the Activity loses focus and restarts, the video will also start from
    the beginning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To rectify this, add these two methods:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you now test the app and interrupt the playback with another app, and then
    return to the Activity, it will resume from where it left off.![Capturing and
    playing video](img/B04321_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Up until step 6, the way we dispatched our intent to capture video was almost
    identical to the method we used for still images, with the exception of the `MediaController`,
    which adds the familiar controls we all associate with video playback. When dealing
    with videos, particularly long ones, the user may wish to pause playback and engage
    with another app. To ensure that the video resumes from the last position when
    the user returns, we had to intercept the Activity lifecycle before the app is
    sent to the background with the `onSaveInstanceState()` method and again when
    it returns with `onRestoreInstanceState()`. We used `VideoView.pause()` and `VideoView.seekTo()`
    here. The following methods are available in `VideoView` for controlling video
    playback:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VideoView.start()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VideoView.pause()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VideoView.resume()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VideoView.seekTo(position)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As useful as it is to be able to provide video recording capabilities in our
    apps, there are often times when we will want to play videos packaged within our
    app, or from an external source such as the device SD card or even streamed from
    the Internet. The example above only requires a few minor adjustments and the
    next section shows how to adapt it to play video from other sources than the camera
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Playing video from memory and the Internet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are countless reasons why we might want to include video content in our
    app or play videos produced by other apps, and in this section we will see how
    to package videos within our app and how to play videos from the device''s storage
    and the Web. The following exercise will take you through how to do each of these:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project that we just worked on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder in the `res` directory called `raw`.![Playing video from
    memory and the Internet](img/B04321_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find a short video file with one of the following formats, name it `movie`,
    and paste it into the `res/raw` folder: `.webm`, `.3gp`, `.mp4`, or `.mkv`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `MainActivity` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `onCreate()` method, comment out the call to `takePhoto()` and add these
    two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If playing an in-app video is what you are after, you can stop here and run
    the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To play a video stored on the device''s SD card, replace the lines you just
    entered with these:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If run, the app will now play the indicated file from the SD card. To stream
    a video, use this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's all there is to it. We stored our in-app video in the `res/raw` directory.
    Although not included, when we create a project, `raw` is a recognized resource
    folder and can be used for storing any file that we do not want compiled when
    the project is built and/or packaged.
  prefs: []
  type: TYPE_NORMAL
- en: The other thing to note about this otherwise straightforward code is how we
    use `VideoView.setVideoPath()` when loading from internal storage or the Web,
    rather than `VideoView.setVideoURI()`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling other apps, such as the camera app, is a very convenient way to incorporate
    such features without a great deal of coding. There are, of course, times when
    we will want a deeper integration of the camera APIs. This requires building the
    camera from the ground up and is beyond the scope of this chapter. However, Android
    5 does introduce a whole new set of camera APIs, the `android.hardware.camera2`,
    which supersedes the `android.hardware.Camera` APIs. **Camera2** allows for some
    exciting new features, such as control over individual cameras and improved storage
    capabilities, and although there is no room to build a camera2 app from scratch
    here, there is a very informative sample, packaged with the SDK, which we will
    now take a look at.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the camera2 APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The camera2 APIs are a lot more sophisticated than their predecessors, but they
    are also a lot more involved. Building a camera app from scratch is far from simple.
    Fortunately, Android packages numerous sample apps within the SDK and there is
    a suitable camera2 sample, that we can take a look at.
  prefs: []
  type: TYPE_NORMAL
- en: Samples can be loaded directly into the Android Studio from the Quick Start
    pane of the startup window **File** | **Import Sample...** from within the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the camera2 APIs](img/B04321_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most camera2 processes begin with the `CameraManager`. This class allows us
    to identify and connect to any cameras attached to the device, as well as determining
    their properties. In the sample, the `Camera2BasicFragment` class is where most
    of the interesting work is done and you can see how a `CameraManager` is used
    in the `openCamera()` method to open a camera, and in `setUpCameraOutputs()` to
    acquire the camera ID and whether it is the front-facing camera using the `CameraCharateristics`
    class. This class can be seen in action in the `setUpCameraOutputs()` method too,
    where it is used to rule out the front-facing camera.
  prefs: []
  type: TYPE_NORMAL
- en: The `CameraDevice` is the class used to represent individual cameras within
    an app, and is used for setting up a `CaptureRequest` and a `CaptureRequestSession`
    for the actual process of taking photos. This also gives us control over functions
    such as auto focus and white balance. The `CameraCaptureSession` is where camera2
    features, such as being able to take multiple images in a burst, are made available.
  prefs: []
  type: TYPE_NORMAL
- en: It is well worth exploring and experimenting with the `Camer2Basic` sample,
    and there is also a `Camera2Video` sample. If you are interested in building a
    camera app from scratch using Android 5 capabilities, then the official documentation
    at [http://developer.android.com/reference/android/hardware/camera2/package-summary.html](http://developer.android.com/reference/android/hardware/camera2/package-summary.html)
    is well worth checking out.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Camera2 APIs, despite their sophistication, have one serious drawback:
    they are the one set of Android 5 APIs that cannot be made backward compatible
    easily. Any app that relies largely on camera and video functions would require
    an necessary amount of alternative code to make it available for older platforms.
    Jelly Bean and KitKat current occupy over three-quarters of the market and look
    likely to make up a significant proportion of your target audience for a good
    time to come. Unless you plan to utilize camera2-specific features, such as capturing
    images in RAW format or taking multiple shots in a burst, you should seriously
    consider using the original Camera APIs, which despite having depreciated are
    still perfectly usable.'
  prefs: []
  type: TYPE_NORMAL
- en: Recording and playing audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw earlier in the chapter how to capture and play multimedia content using
    native apps and the `VideoView`. There is also another very handy tool for recording
    and playing media files, especially audio: the `MediaRecorder` class. The `MediaRecorder`
    allows us to simply set such things as audio source, output location, and format,
    as well as giving us control over play and record functions. In this exercise,
    we will develop a small app that records and plays back audio captured with a
    device''s inbuilt microphone:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find three button-sized media images like those below and place them in your
    `drawable` folder.![Recording and playing audio](img/B04321_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call them Play, Record, and Stop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the manifest files and include these permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a layout similar to the one here:![Recording and playing audio](img/B04321_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `ImageViews` as the buttons and give them the IDs `record_button`, `stop_button`
    and `play_button`. Call the `TextView`, `text_view`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MainActivity` and include these two fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onCreate()` method, add this `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this file path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then these `MediaRecorder` configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Each `ImageView` we created in the layout requires an `OnClickListener` within
    the `onCreate()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ImageView `recordButton`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'ImageView `stopButton`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'ImageView `playButton`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the `play()` method, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now run the app on a handset (as the stock emulators do not yet have
    the microphone functionality) and record and play back audio. The file `recording.3gp`
    can be found in the root directory of the SD card.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `MediaRecorder` class makes light work of recording audio and can also be
    used to record video. Like the `MediaPlayer` class we used to play the audio back,
    this is similarly intuitive to use. The use of `MediaRecorder.release()` is important,
    as without it the system would continue to use resources. We only prepared and
    played the file here, but the `MediaPlayer` can do a lot more and it is well worth
    taking a look at its documentation, which can be found at [http://developer.android.com/reference/android/media/MediaPlayer.html](http://developer.android.com/reference/android/media/MediaPlayer.html).
  prefs: []
  type: TYPE_NORMAL
- en: Again, we used `Environment.getExternalStorageDirectory()` to automatically
    select the user's preferred external storage device and although we took a different
    approach to the way we managed multimedia earlier in the chapter, either method
    can be applied in many situations. The `MediaRecorder` and `MediaPlayer` together
    provide a simple but powerful way to incorporate audio in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multimedia such as audio and video have become an integral part of the way we
    use our mobile devices. Whether it is to create it or consume it, including multimedia
    functionality in our apps gives them greater appeal and usefulness. In this chapter,
    we saw how to incorporate native apps such as the camera into our own apps, saving
    us a great deal of coding in the process. We saw how to capture, record, and play
    back camera images, video, and finally audio.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes not just our exploration of Android 5 multimedia, but also, more
    or less, the programming aspect of this book, as the final chapter looks at how
    we can take our finished product and make it available to the world, and how to
    hopefully turn our hard work into a financial gain. There are one or two exercises
    in the chapter, as we will look at how to make our apps backwards compatible to
    reach a larger number of potential users, and we will return one last time to
    the Ancient Britain app to add a mobile advertisement to it using the Google AdMob
    service.
  prefs: []
  type: TYPE_NORMAL
