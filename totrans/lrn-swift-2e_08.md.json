["```swift\nstruct SimpleError: ErrorType {}\n```", "```swift\nfunc repeatString(\n    string: String,\n    untilLongerThan: Int\n    ) throws -> String\n{\n    // TODO: Implement\n}\n```", "```swift\nfunc repeatString(\n    string: String,\n    untilLongerThan: Int\n    ) throws -> String\n{\n    if string.isEmpty {\n        throw SimpleError()\n    }\n\n    var output = string\n    while output.characters.count <= untilLongerThan {\n        output += string\n    }\n    return output\n}\n```", "```swift\nfunc repeatString(\n    string: String,\n    untilLongerThan: Int\n    ) throws -> String\n{\n    guard !string.isEmpty else {\n        throw SimpleError()\n    }\n\n    var output = string\n    while output.characters.count < untilLongerThan {\n        output += string\n    }\n    return output\n}\n```", "```swift\nlet repeated1 = repeatString(\"Hello\", untilLongerThan: 20)\n// Error: Call can throw but is not market with 'try'\n```", "```swift\nfunc main() {\n// The rest of your playground code\n}\nmain()\n```", "```swift\nlet repeated2 = try! repeatString(\"Hello\", untilLongerThan: 20)\nprint(repeated2) // \"HelloHelloHelloHello\"\n```", "```swift\nlet repeated3 = try? repeatString(\"Hello\", untilLongerThan: 20)\nprint(repeated3) // Optional(\"HelloHelloHelloHello\")\n```", "```swift\nfunc aFailableOptional() throws -> String? {\n    return \"Hello\"\n}\nprint(try? aFailableOptional()) // Optional(Optional(\"Hello\"))\n```", "```swift\nfunc aFailableVoid() throws {\n    print(\"Hello\")\n}\nprint(try? aFailableVoid()) // Optional(())\n```", "```swift\nenum RandomListError: ErrorType {\n    case NegativeListLength\n    case FirstNumberMustBeLower\n}\n```", "```swift\nfunc createRandomListContaininingXNumbers(\n    xNumbers: Int,\n    between low: Int,\n    and high: Int\n    ) throws -> [Int]\n{\n    guard xNumbers >= 0 else {\n        throw RandomListError.NegativeListLength\n    }\n    guard low < high else {\n        throw RandomListError.FirstNumberMustBeLower\n    }\n\n    var output = [Int]()\n    for _ in 0 ..< xNumbers {\n        let rangeSize = high - low + 1\n        let betweenZero = Int(rand()) % rangeSize\n        let number = betweenZero + low\n        output.append(number)\n    }\n    return output\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers(\n        5,\n        between: 5,\n        and: 10\n    )\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers(\n        5,\n        between: 5,\n        and: 10\n    )\n}\ncatch RandomListError.NegativeListLength {\n    print(\"Cannot create with a negative number of elements\")\n}\ncatch RandomListError.FirstNumberMustBeLower {\n    print(\"First number must be lower than second number\")\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers(\n        5,\n        between: 5,\n        and: 10\n    )\n}\ncatch RandomListError.NegativeListLength {\n    print(\"Cannot create with a negative number of elements\")\n}\ncatch RandomListError.FirstNumberMustBeLower {\n    print(\"First number must be lower than second number\")\n}\ncatch let error {\n    print(\"Unknown error: \\(error)\")\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers(\n        5,\n        between: 5,\n        and: 10\n    )\n}\ncatch let error as RandomListError {\n    switch error {\n    case .NegativeListLength:\n        print(\"Cannot create with a negative number of elements\")\n    case .FirstNumberMustBeLower:\n        print(\"First number must be lower than second number\")\n    }\n}\ncatch let error {\n    print(\"Unknown error: \\(error)\")\n}\n```", "```swift\nstruct UserError: ErrorType {\n    let userReadableDescription: String\n    init(_ description: String) {\n        self.userReadableDescription = description\n    }\n}\n\nfunc createRandomListContaininingXNumbers2(\n    xNumbers: Int,\n    between low: Int,\n    and high: Int\n    ) throws -> [Int]\n{\n    guard xNumbers >= 0 else {\n        throw UserError(\n            \"Cannot create with a negative number of elements\"\n        )\n    }\n\n    guard low < high else {\n        throw UserError(\n            \"First number must be lower than second number\"\n        )\n    }\n\n    // ...\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers2(\n        5,\n        between: 5,\n        and: 10\n    )\n}\ncatch let error as UserError {\n    print(error.userReadableDescription)\n}\ncatch let error {\n    print(\"Unknown error: \\(error)\")\n}\n```", "```swift\nprotocol UserErrorType: ErrorType {\n    var userReadableDescription: String {get}\n}\n```", "```swift\nenum RandomListError: String, UserErrorType {\n    case NegativeListLength =\n        \"Cannot create with a negative number of elements\"\n    case FirstNumberMustBeLower =\n        \"First number must be lower than second number\"\n\n    var userReadableDescription: String {\n        return self.rawValue\n    }\n}\n```", "```swift\nfunc createRandomListContaininingXNumbers3(\n    xNumbers: Int,\n    between low: Int,\n    and high: Int\n    ) throws -> [Int]\n{\n    guard xNumbers >= 0 else {\n        throw RandomListError.NegativeListLength\n    }\n    guard low < high else {\n        throw RandomListError.FirstNumberMustBeLower\n    }\n\n    // ...\n}\n```", "```swift\ndo {\n    try createRandomListContaininingXNumbers3(\n        5,\n        between: 5,\n        and: 10\n    )\n}\ncatch RandomListError.NegativeListLength {\n    // Do something else\n}\ncatch let error as UserErrorType {\n    print(error.userReadableDescription)\n}\ncatch let error {\n    print(\"Unknown error: \\(error)\")\n}\n```", "```swift\nfunc parentFunction() throws {\n    try createRandomListContaininingXNumbers3(\n        5,\n        between: 5,\n        and: 10\n    )\n}\n```", "```swift\ndo {\n    try function1()\n    try function2()\n    try function3()\n}\ncatch {\n    print(\"Error\")\n}\n```", "```swift\ndo {\n    try! function1()\n    try? function2()\n    try function3()\n}\ncatch {\n    print(\"Error\")\n}\n```", "```swift\nstruct PersonalChef {\n    func clean() {\n        print(\"Wash dishes\")\n        print(\"Clean counters\")\n    }\n\n    func addIngredients() throws {}\n    func bringToBoil() throws {}\n    func removeFromHeat() throws {}\n    func allowItToSit() throws {}\n\n    func makeCrèmeBrûlée(URL: NSURL) throws {\n        defer {\n            self.clean()\n        }\n\n        try self.addIngredients()\n        try self.bringToBoil()\n        try self.removeFromHeat()\n        try self.allowItToSit()\n    }\n}\n```", "```swift\nstruct Ingredient {\n    let name: String\n}\n\nstruct Pantry {\n    private let ingredients: [Ingredient]\n\n    func openDoor() {}\n    func closeDoor() {}\n\n    func getIngredientNamed(name: String) -> Ingredient? {\n        self.openDoor()\n\n        defer {\n            self.closeDoor()\n        }\n\n        for ingredient in self.ingredients {\n            if ingredient.name == name {\n                return ingredient\n            }\n        }\n        return nil\n    }\n}\n```", "```swift\nfunc multipleDefers() {\n    defer {\n        print(\"C\")\n    }\n    defer {\n        print(\"B\")\n    }\n    defer {\n        print(\"A\")\n    }\n}\nmultipleDefers()\n```"]