["```swift\nimport SwiftUIstruct ContentView: View\n{\n    @State private var salary: String = \"\"\n    var body: some View\n    {\n        NavigationView\n        {\n            VStack\n            {\n                Text( \"Annual Salary\" )\n                    .padding(.bottom, 75.0)\n                TextField( \"\", text: $salary )\n                    .frame( width: 200.0 )\n                    .border( Color.black, width: 1 )\n                    .padding( .bottom, 75.0 )\n                    .keyboardType( .decimalPad )\n                Button\n                { }\n                label:\n                { Text( \"Calculate Tax\" ) }\n                    .buttonStyle( .borderedProminent )\n            }\n            .padding( )\n        }\n    }\n    func GoToResultsView( )\n    {\n        ResultsView( )\n    }\n}\nstruct ContentView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ContentView( )\n    }\n}\n```", "```swift\nNavigationLink( destination: ResultsView( ), label:{\n    Text( \"Calculate Tax\" )\n} )\n```", "```swift\nNavigationLink( destination: ResultsView( ), label:{\n    Text( \"Calculate Tax\" )\n        .bold( )\n        .frame( width: 200, height: 50 )\n        .background( Color.blue )\n        .foregroundColor( Color.white )\n        .cornerRadius( 10 )\n} )\n```", "```swift\n.padding( ).navigationTitle( \"Main Page\" )\n```", "```swift\nText( \"Summary\" )    .font( .system( size: 36 ) )\n    .fontWeight( .bold )\n```", "```swift\n.padding( ).navigationBarTitle( \"Summary\" )\n```", "```swift\nimport SwiftUIstruct ContentView: View\n{\n    @State private var salary: String = \"\"\n    var body: some View\n    {\n        NavigationView\n        {\n            VStack\n            {\n                Text( \"Annual Salary\" )\n                    .padding(.bottom, 75.0)\n                TextField( \"\", text: $salary )\n                    .frame( width: 200.0 )\n                    .border( Color.black, width: 1 )\n                    .padding( .bottom, 75.0 )\n                    .keyboardType( .decimalPad )\n                NavigationLink( destination: ResultsView( ), label:\n                {\n                    Text( \"Calculate Tax\" )\n                        .bold( )\n                        .frame( width: 200, height: 50 )\n                        .background( Color.blue )\n                        .foregroundColor( Color.white )\n                        .cornerRadius( 10 )\n                } )\n            }\n            .padding( )\n            .navigationTitle( \"Main Page\" )\n        }\n    }\n}\nstruct ContentView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ContentView( )\n    }\n}\n```", "```swift\nimport SwiftUIimport SwiftUICharts\nstruct ResultsView: View\n{\n    var taxBreakdown: [Double] = [5, 10, 15]\n    var body: some View\n    {\n        VStack\n        {\n            PieChart( )\n                .data( taxBreakdown )\n                .chartStyle( ChartStyle( backgroundColor: .white,\n                                         foregroundColor: ColorGradient( .blue, .purple ) ) )\n            Text( \"Before Tax\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( \"£100,000.00\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( \"After Tax\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( \"£65,000.00\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Group\n            {\n                Text( \"Post Tax Salary\" )\n                ProgressView( \"\", value: 20, total: 100 )\n                Text( \"Tax\" )\n                ProgressView( \"\", value: 20, total: 100 )\n                Text( \"National Insurance\" )\n                ProgressView( \"\", value: 20, total: 100 )\n            }\n        }\n        .padding( )\n        .navigationBarTitle( \"Summary\" )\n    }\n}\nstruct ResultsView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ResultsView( )\n    }\n}\n```", "```swift\n@State private var isSalaryValid: Bool = false\n```", "```swift\nNavigationLink( destination: ResultsView( ), isActive: $isSalaryValid, label:\n```", "```swift\n.onTapGesture{\n    GoToResultsView( )\n}\n```", "```swift\nfunc GoToResultsView( ){\n    if ( Float( salary ) != nil )\n    {\n        if ( Float( salary )! > 0 )\n        { isSalaryValid = true }\n    }\n}\n```", "```swift\nimport SwiftUIstruct ContentView: View\n{\n    @State private var salary: String = \"\"\n    @State private var isSalaryValid: Bool = false\n    var body: some View\n    {\n        NavigationView\n        {\n            VStack\n            {\n                Text( \"Annual Salary\" )\n                    .padding(.bottom, 75.0)\n                TextField( \"\", text: $salary )\n                    .frame( width: 200.0 )\n                    .border( Color.black, width: 1 )\n                    .padding( .bottom, 75.0 )\n                    .keyboardType( .decimalPad )\n                NavigationLink( destination: ResultsView( ), isActive: $isSalaryValid, label:\n                {\n                    Text( \"Calculate Tax\" )\n                        .bold( )\n                        .frame( width: 200, height: 50 )\n                        .background( Color.blue )\n                        .foregroundColor( Color.white )\n                        .cornerRadius( 10 )\n                        .onTapGesture\n                        {\n                            GoToResultsView( )\n                        }\n                } )\n            }\n            .padding( )\n            .navigationTitle( \"Main Page\" )\n        }\n    }\n    func GoToResultsView( )\n    {\n        if ( Float( salary ) != nil )\n        {\n            if ( Float( salary )! > 0 )\n            { isSalaryValid = true }\n        }\n    }\n}\nstruct ContentView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ContentView( )\n    }\n}\n```", "```swift\n@Binding var salary: String\n```", "```swift\nNavigationLink( destination: ResultsView( salary: $salary ), isActive: $isSalaryValid, label:\n```", "```swift\nstruct ResultsView_Previews: PreviewProvider{\n    static var previews: some View\n    {\n        ResultsView( salary: .constant( \"100\" ) )\n    }\n}\n```", "```swift\nvar body: some View {let salaryNum = Double( salary )!\nvar incomeTax: Double = 0\nif ( salaryNum > 12570 )\n{\n    if ( salaryNum > 37700 )\n    {\n        if ( salaryNum > 150000 )\n        {\n            incomeTax += ( 37700 - 12571 ) * 0.2\n            incomeTax += ( 150000 - 37701 ) * 0.4\n            incomeTax += ( salaryNum - 150000 ) * 0.45\n        }\n        else\n        {\n            incomeTax += ( 37700 - 12571 ) * 0.2\n            incomeTax += ( salaryNum - 37700 ) * 0.4\n        }\n    }\n    else\n    { incomeTax += ( salaryNum - 12570 ) * 0.2 }\n}\nreturn VStack {\n….\n}\n}\n```", "```swift\nlet salaryNum = Double( salary )!var incomeTax: Double = 0\nvar nationalInsuranceTax: Double = 0\n```", "```swift\nnationalInsuranceTax = salaryNum * 0.13\n```", "```swift\nlet postTaxSalary = salaryNum - incomeTax - nationalInsuranceTax\n```", "```swift\nlet salaryString = String( format:\"£%.2F\", salaryNum )let postTaxSalaryString = String( format: \"£%.2F\", postTaxSalary )\nlet incomeTaxString = String( format: \"£%.2F\", incomeTax )\nlet nationalInsuranceTaxSting = String( format: \"£%.2F\",\nnationalInsuranceTax )\n```", "```swift\nlet taxBreakdown: [Double] = [postTaxSalary, incomeTax, nationalInsuranceTax]\n```", "```swift\nText( \"Before Tax\" )    .font( .system( size: 32 ) )\n    .padding(.vertical)\nText( salaryString )\n    .font( .system( size: 32 ) )\n    .padding(.vertical)\nText( \"After Tax\" )\n    .font( .system( size: 32 ) )\n    .padding(.vertical)\nText( postTaxSalaryString )\n    .font( .system( size: 32 ) )\n    .padding(.vertical)\n```", "```swift\nText( \"Post Tax Salary\" )ProgressView( postTaxSalaryString, value: postTaxSalary / salaryNum * 100, total: 100 )\nText( \"Tax\" )\nProgressView( incomeTaxString, value: incomeTax / salaryNum * 100, total: 100 )\nText( \"National Insurance\" )\nProgressView( nationalInsuranceTaxSting, value: 13, total: 100 )\n```", "```swift\nreturn VStack\n```", "```swift\nimport SwiftUIstruct ContentView: View\n{\n    @State private var salary: String = \"\"\n    @State private var isSalaryValid: Bool = false\n    var body: some View\n    {\n        NavigationView\n        {\n            VStack\n            {\n                Text( \"Annual Salary\" )\n                    .padding(.bottom, 75.0)\n                TextField( \"\", text: $salary )\n                    .frame( width: 200.0 )\n                    .border( Color.black, width: 1 )\n                    .padding( .bottom, 75.0 )\n                    .keyboardType( .decimalPad )\n                NavigationLink( destination: ResultsView( salary: $salary ), isActive: $isSalaryValid, label:\n                {\n                    Text( \"Calculate Tax\" )\n                        .bold( )\n                        .frame( width: 200, height: 50 )\n                        .background( Color.blue )\n                        .foregroundColor( Color.white )\n                        .cornerRadius( 10 )\n                        .onTapGesture\n                        {\n                            GoToResultsView( )\n                        }\n                } )\n            }\n            .padding( )\n            .navigationTitle( \"Main Page\" )\n        }\n    }\n    func GoToResultsView( )\n    {\n        if ( nil != Float( salary ) )\n        {\n            if ( Float( salary )! > 0 )\n            { isSalaryValid = true }\n        }\n    }\n}\nstruct ContentView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ContentView( )\n    }\n}\n```", "```swift\nimport SwiftUIimport SwiftUICharts\nstruct ResultsView: View\n{\n    @Binding var salary: String\n    var body: some View\n    {\n        let salaryNum = Double( salary )!\n        var incomeTax: Double = 0\n        var nationalInsuranceTax: Double = 0\n        if ( salaryNum > 12570 )\n        {\n            if ( salaryNum > 37700 )\n            {\n                if ( salaryNum > 150000 )\n                {\n                    incomeTax += ( 37700 - 12571 ) * 0.2\n                    incomeTax += ( 150000 - 37701 ) * 0.4\n                    incomeTax += ( salaryNum - 150000 ) * 0.45\n                }\n                else\n                {\n                    incomeTax += ( 37700 - 12571 ) * 0.2\n                    incomeTax += ( salaryNum - 37700 ) * 0.4\n                }\n            }\n            else\n            { incomeTax += ( salaryNum - 12570 ) * 0.2 }\n        }\n        nationalInsuranceTax = salaryNum * 0.13\n        let postTaxSalary = salaryNum - incomeTax - nationalInsuranceTax\n        let salaryString = String( format:\"£%.2F\", salaryNum )\n        let postTaxSalaryString = String( format: \"£%.2F\", postTaxSalary )\n        let incomeTaxString = String( format: \"£%.2F\", incomeTax )\n        let nationalInsuranceTaxSting = String( format: \"£%.2F\", nationalInsuranceTax )\n        let taxBreakdown: [Double] = [postTaxSalary, incomeTax, nationalInsuranceTax]\n        return VStack\n        {\n            PieChart( )\n                .data( taxBreakdown )\n                .chartStyle( ChartStyle( backgroundColor: .white,\n                                         foregroundColor: ColorGradient( .blue, .purple ) ) )\n            Text( \"Before Tax\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( salaryString )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( \"After Tax\" )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Text( postTaxSalaryString )\n                .font( .system( size: 32 ) )\n                .padding(.vertical)\n            Group\n            {\n                Text( \"Post Tax Salary\" )\n                ProgressView( postTaxSalaryString, value: postTaxSalary / salaryNum * 100, total: 100 )\n                Text( \"Tax\" )\n                ProgressView( incomeTaxString, value: incomeTax / salaryNum * 100, total: 100 )\n                Text( \"National Insurance\" )\n                ProgressView( nationalInsuranceTaxSting, value: 13, total: 100 )\n            }\n        }\n        .padding( )\n        .navigationBarTitle( \"Summary\" )\n    }\n}\nstruct ResultsView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        ResultsView( salary: .constant( \"100\" ) )\n    }\n}\n```", "```swift\nvar salaryNum: Double = 0if ( nil != Double( salary ) )\n{\n    salaryNum = Double( salary )!\n}\n```", "```swift\nimport SwiftUIstruct FrontView: View {\n    @State private var salary: String = \"\"\n    @State private var isSalaryValid: Bool = false\n    @State private var selectedTaxOption: TaxOption = .option1 // Default tax option\n    enum TaxOption: String, CaseIterable {\n        case option1 = \"Income Tax\"\n        case option2 = \"Dividen Tax\"\n        case option3 = \"Corporation Tax\"\n        // You can add more tax options if needed\n    }\n    var body: some View {\n        NavigationView {\n            VStack {\n                Text(\"Annual Salary\")\n                    .padding(.bottom, 75.0)\n                TextField(\"\", text: $salary)\n                    .frame(width: 200.0)\n                    .border(Color.black, width: 1)\n                    .padding(.bottom, 75.0)\n                    .keyboardType(.decimalPad)\n                Picker(\"Tax Option\", selection: $selectedTaxOption) {\n                    ForEach(TaxOption.allCases, id: \\.self) { option in\n                        Text(option.rawValue)\n                    }\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding(.bottom, 75.0)\n                NavigationLink(destination: ResultsView(salary: $salary, taxOption: selectedTaxOption), isActive: $isSalaryValid) {\n                    Text(\"Calculate Tax\")\n                        .bold()\n                        .frame(width: 200, height: 50)\n                        .background(Color.blue)\n                        .foregroundColor(Color.white)\n                        .cornerRadius(10)\n                        .onTapGesture {\n                            goToResultsView()\n                        }\n                }\n            }\n            .padding()\n            .navigationTitle(\"Main Page\")\n        }\n    }\n    func goToResultsView() {\n        if let salaryFloat = Float(salary), salaryFloat > 0 {\n            isSalaryValid = true\n        }\n    }\n}\nstruct ResultsView: View {\n    var salary: String\n    var taxOption: FrontView.TaxOption\n    var body: some View {\n        VStack {\n            Text(\"Results\")\n                .font(.title)\n                .padding()\n            Text(\"Salary: \\(salary)\")\n                .padding()\n            Text(\"Tax Option: \\(taxOption.rawValue)\")\n                .padding()\n            // Calculate and display tax results based on the selected tax option\n            Spacer()\n        }\n        .navigationTitle(\"Results\")\n    }\n}\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        FrontView()\n    }\n}\n```", "```swift\n\nIn this example, I’ve added the `TaxOption` enum to define different tax options. The `selectedTaxOption` property is used to store the selected tax option. I’ve added a picker (using a segmented control style) to allow the user to select the tax option.\n\nWhen the user taps `ResultsView`, where you can calculate and display the tax results based on the selected option.\n\n## Tax geography\n\nTo add the ability to calculate tax breakdowns for different geographies, including countries and states, you can modify `ResultsView` and introduce a selection mechanism for geographies. Here’s an example of how you can modify your code to achieve that:\n\n```", "```swift\n\nIn this example, I’ve introduced the `Geography` enum, which represents different geographies. It can be either a country or a state within a country. The `selectedGeography` property is used to store the selected geography.\n\nIn `FrontView`, I’ve added a picker (using a segmented control style) to allow the user to select the geography. You can add more geography options as needed.\n\nWhen the user taps `ResultsView`, where you can calculate and display the tax breakdown based on the selected geography.\n\nIn `ResultsView`, I’ve added a `displayText` computed property to format and display the selected geography. You can modify the code to calculate and display the tax breakdown based on the selected geography.\n\nNote\n\nThis code provides a basic structure for adding tax breakdowns based on geographies. The actual tax calculations and breakdowns would need to be implemented based on the tax laws and rules of the specific countries and states involved.\n\nHere’s the updated code for `ResultsView` with the tax breakdown based on the given logic and the addition of the `Geography` selection:\n\nResultsView\n\n```"]