["```kt\npublic class UpperBoundary extends GameObj {\n    private Bitmap img;\n\n    public UpperBoundary(Bitmap res, int xc, int yc, int h) {\n        height = h;\n        width = 20;\n\n        this.xc = xc;\n        this.yc = yc;\n\n        dxc = GameView.MOVINGSPEED;\n        img = Bitmap.createBitmap(res, 0, 0, width, height);\n    }\n\n    public void update(){\n        xc += dxc;\n    }\n\n    public void draw(Canvas canvas) {\n        try{\n            canvas.drawBitmap(img, xc, yc, null);\n        } catch(Exception e) {\n        };\n    }\n}\n\n```", "```kt\npublic class LowerBoundary extends GameObj {\n    public LowerBoundary(Bitmap res, int xc, int yc) {\n        height = 200;\n        width = 20;\n    }\n}\n\n```", "```kt\nprivate ArrayList<UpperBoundary> upperBoundary;\nprivate ArrayList<LowerBoundary> lowerBoundary;\n\nprivate int maxBoundaryHeight;\nprivate int minBoundaryHeight;\n\nprivate boolean upBound = true;\nprivate boolean lowBound = true;\n\nprivate int progressDenom = 20;\n\nprivate boolean newGameCreated;\n\n```", "```kt\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\nupperBoundary = new ArrayList<UpperBoundary>();\n lowerBoundary = new ArrayList<LowerBoundary>();\n    }\n\n```", "```kt\npublic void updateUpperBound () {\n    if(playerCharacter.getScore() % 50 == 0){\n        upperBoundary.add(new\n        UpperBoundary(BitmapFactory.decodeResource\n        (getResources(), R.drawable.ground),\n        upperBoundary.get(upperBoundary.size()-1).\n        getXC() + 20, 0, (int)((rnd.nextDouble()*\n        (maxBoundaryHeight))+1)));\n    }\n\n    for(int i=0; i<upperBoundary.size();i++) {\n        upperBoundary.get(i).update();\n        if(upperBoundary.get(i).getXC() < -20){\n            upperBoundary.remove(i);\n\n            if(upperBoundary.get(upperBoundary.size()-1).\n            getHeight() >= maxBoundaryHeight) {\n                upBound = false;\n            }\n\n            if(upperBoundary.get(upperBoundary.size()-1).\n            getHeight() <= minBoundaryHeight) {\n                upBound = true;\n            }\n\n            if(upBound){\n                upperBoundary.add(new \n                UpperBoundary(BitmapFactory.decodeResource\n                (getResources(), R.drawable.ground),\n                upperBoundary.get(upperBoundary.size()-1).\n                getXC() + 20, 0,upperBoundary.get\n                (upperBoundary.size()-1).getHeight()+1));\n            } else {\n                upperBoundary.add(new \n                UpperBoundary(BitmapFactory.decodeResource\n                (getResources(), R.drawable.ground),\n                upperBoundary.get(upperBoundary.size()-1).\n                getXC() + 20, 0, upperBoundary.get\n                (upperBoundary.size()-1).getHeight()-1));\n            }\n        }\n    }\n}\n\npublic void updateLowerBound () {\n    if(playerCharacter.getScore() % 40 == 0) {\n        lowerBoundary.add(new\n        LowerBoundary(BitmapFactory.decodeResource\n        (getResources(),R.drawable.ground),\n        lowerBoundary.get(lowerBoundary.size() - 1).\n        getXC() + 20,(int)((rnd.nextDouble()*\n        maxBoundaryHeight) + (HEIGHT - maxBoundaryHeight))));\n    }\n\n    for(int i=0;i<lowerBoundary.size();i++) {\n        lowerBoundary.get(i).update();\n\n        if(lowerBoundary.get(i).getXC()<-20){\n            lowerBoundary.remove(i);\n\n            if(lowerBoundary.get(lowerBoundary.size()-1).\n            getHeight() >= maxBoundaryHeight) {\n                lowBound = false;\n            }\n\n            if(lowerBoundary.get(lowerBoundary.size()-1).\n            getHeight() <= minBoundaryHeight) {\n                lowBound = true;\n            }\n\n            if(lowBound) {\n                lowerBoundary.add(new\n                LowerBoundary(BitmapFactory.decodeResource\n                (getResources(),R.drawable.ground), \n                lowerBoundary.get(lowerBoundary.size() - 1).\n                getXC() + 20, lowerBoundary.\n                get(lowerBoundary.size() - 1).getYC() + 1));\n            } else {\n                lowerBoundary.add(new\n                LowerBoundary(BitmapFactory.decodeResource\n                (getResources(),R.drawable.ground),\n                lowerBoundary.get(lowerBoundary.size() - 1).\n                getXC() + 20, lowerBoundary.\n                get(lowerBoundary.size() - 1).getYC() - 1));\n            }\n        }\n    }\n}\n\n```", "```kt\nfor(UpperBoundary ub : upperBoundary){\n    ub.draw(canvas);\n}\n\nfor(LowerBoundary lb: lowerBoundary) {\n    lb.draw(canvas);\n}\n\n```", "```kt\nfor(int i=0; i<lowerBoundary.size();i++) {\n    if(collision(lowerBoundary.get(i),playerCharacter)) {\n        playerCharacter.setPlaying(false);\n    }\n}\n\nfor(int i=0; i<upperBoundary.size();i++) {\n    if(collision(upperBoundary.get(i),playerCharacter)) {\n        playerCharacter.setPlaying(false);\n    }\n}\n\n```", "```kt\nthis.updateUpperBound();\nthis.updateLowerBound();\n\nmaxBoundaryHeight = 30+playerCharacter.getScore() / progressDenom;\n\nif(maxBoundaryHeight > HEIGHT/4)maxBoundaryHeight = HEIGHT/4;\nminBoundaryHeight = 5 + playerCharacter.getScore()/progressDenom;\n\n```", "```kt\npublic void newGame () {\n    lowerBoundary.clear();\n    upperBoundary.clear();\n    rocks.clear();\n\n    minBoundaryHeight = 5;\n    maxBoundaryHeight = 30;\n\n    playerCharacter.resetScore();\n    playerCharacter.resetDYC();\n    playerCharacter.setYC(HEIGHT/2);\n\n    for(int i = 0; i * 20 < WIDTH + 40;i++) {\n        if(i == 0) {\n            upperBoundary.add(new\n            UpperBoundary(BitmapFactory.decodeResource\n            (getResources(),R.drawable.ground),\n            i * 20, 0, 10));\n        } else {\n            upperBoundary.add(new\n            UpperBoundary(BitmapFactory.decodeResource\n            (getResources(),R.drawable.ground),\n            i * 20, 0, upperBoundary.get(i - 1).getHeight() + 1));\n         }\n    }\n\n    for(int i = 0; i*20<WIDTH+40;i++) {\n        if(i==0) {\n            lowerBoundary.add(new \n            LowerBoundary(BitmapFactory.decodeResource\n            (getResources(),R.drawable.ground),\n            i * 20, HEIGHT - minBoundaryHeight));\n        } else {\n            lowerBoundary.add(new \n            LowerBoundary(BitmapFactory.decodeResource\n            (getResources(),R.drawable.ground),\n            i * 20, lowerBoundary.get(i - 1).getYC() - 1));\n        }\n    }\n    newGameCreated = true;\n}\n\n```", "```kt\n else {\n    newGameCreated = false;\n    if(!newGameCreated) {\n        newGame();\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback\n{\n    public static final int WIDTH = 1920;\n    public static final int HEIGHT = 1080;\n    public static final int MOVINGSPEED = -5;\n    private MainGameThread mainThread;\n    private BackgroundImage bgImg;\n    private PlayerCharacter playerCharacter;\n    private ArrayList<Rock> rocks;\n //Our new variable names\n    private ArrayList<UpperBoundary> upperBoundary; private ArrayList<LowerBoundary> lowerBoundary;\n private int maxBoundaryHeight; private int minBoundaryHeight;\n private boolean upBound = true; private boolean lowBound = true;\n private int progressDenom = 20;\n\n    private boolean newGameCreated;\n\n    private Random rnd = new Random();\n\n    public GameView(Context context){\n        super(context);\n        //set callback to the surfaceholder to track events\n        getHolder().addCallback(this);\n\n        mainThread = new MainGameThread(getHolder(), this);\n\n        //make gamePanel focusable so it can handle events\n        setFocusable(true);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height){}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder){\n        boolean retry = true;\n        int counter = 0;\n        while(retry && counter <1000){\n            counter++;\n            try{\n                mainThread.setRunning(false);\n                mainThread.join();\n                retry = false;\n            }catch(InterruptedException e){e.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n        bgImg = new \n        BackgroundImage(BitmapFactory.decodeResource\n        (getResources(), R.drawable.background_image));\n\n        playerCharacter = new \n        PlayerCharacter(BitmapFactory.decodeResource\n        (getResources(),R.drawable.player_run),200,246,3);\n\n        rocks = new ArrayList<Rock>();\n //Referencing our upperBoundary and lowerBoundary variables upperBoundary = new ArrayList<UpperBoundary>(); lowerBoundary = new ArrayList<LowerBoundary>();\n\n         //we can safely start the game loop\n         mainThread.setRunning(true);\n         mainThread.start();\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event){\n        if(event.getAction() == MotionEvent.ACTION_DOWN) {\n            if(!playerCharacter.getPlaying()){\n                playerCharacter.setPlaying(true);\n playerCharacter.setUp(true); //minor change            } else {\n                playerCharacter.setUp(true);\n            }\n            return true;\n        }\n\n        if(event.getAction() == MotionEvent.ACTION_UP){\n            playerCharacter.setUp(false);\n            return true;\n        }\n\n        return super.onTouchEvent(event);\n    }\n\n    public void update()\n    {\n        if(playerCharacter.getPlaying()) {\n            bgImg.update();\n            playerCharacter.update();\n this.updateUpperBound(); this.updateLowerBound();\n maxBoundaryHeight = \n            30 + playerCharacter.getScore() / progressDenom;\n if(maxBoundaryHeight > HEIGHT/4)\n                maxBoundaryHeight = HEIGHT/4;\n minBoundaryHeight = \n            5 + playerCharacter.getScore()/progressDenom;\n for(int i=0; i<lowerBoundary.size();i++) { if(collision(lowerBoundary.get(i),\n                playerCharacter)) { playerCharacter.setPlaying(false); } }\n for(int i=0; i<upperBoundary.size();i++) { if(collision(upperBoundary.get(i),\n                playerCharacter)) { playerCharacter.setPlaying(false); } }\n\n            //spawn rocks on screen\n            if(rocks.size() < 2){\n                if(rocks.size() == 0){\n                    rocks.add(new\n                    Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock), \n                    WIDTH + 10, HEIGHT/2, 200, 200,\n                    playerCharacter.getScore(),3));\n                } else {\n                    rocks.add(new\n                    Rock(BitmapFactory.decodeResource\n                    (getResources(), R.drawable.rock), \n                    WIDTH+10, (int) (rnd.nextDouble() *\n                    (HEIGHT - maxBoundaryHeight * 2))\n                    + maxBoundaryHeight, 200, 200,\n                    playerCharacter.getScore(),3));\n                }\n            }\n\n            for(int i=0; i<rocks.size();i++) {\n                rocks.get(i).update();\n                if(collision(rocks.get(i),playerCharacter)) {\n                    rocks.remove(i);\n                    playerCharacter.setPlaying(false);\n                    break;\n                }\n                //remove rocks if they go out of the screen\n                if(rocks.get(i).getXC() < -100) {\n                    rocks.remove(i);\n                    break;\n                }\n\n            }\n        } else {\n            //We created an else block to trigger our newGameCreated \n            variable and to set a new game newGameCreated = false; if(!newGameCreated) { newGame(); }        }\n    }\n\n    public boolean collision(GameObj a, GameObj b) {\n        if(Rect.intersects(a.getRectangle(), b.getRectangle())) {\n            return true;\n        }\n        return false;\n    }\n\n    @Override\n    public void draw(Canvas canvas){\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas != null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n            playerCharacter.draw(canvas);\n\n            for(Rock r : rocks) {\n                r.draw(canvas);\n            }\n //Drawing our upperBoundary for(UpperBoundary ub : upperBoundary){ ub.draw(canvas); } //Drawing our lowerBoundary for(LowerBoundary lb: lowerBoundary) { lb.draw(canvas); }\n\n            canvas.restoreToCount(savedState);\n        }\n    }\n public void updateUpperBound () {\n        //Refer code block above }\n public void updateLowerBound () {\n        //Refer code block above for this }\n public void newGame () {\n        //Refer code block in above part    }\n\n```", "```kt\nprivate int xc;\nprivate int yc;\nprivate int height;\nprivate int width;\nprivate int row;\nprivate AnimationClass ac = new AnimationClass();\nprivate Bitmap spriteSheet;\n\n```", "```kt\npublic ExplosionEffect(Bitmap res, int xc, int yc, int w, int h, int noOfFrames){\n    this.xc = xc;\n    this.yc = yc;\n    this.width = w;\n    this.height = h;\n\n    Bitmap[] img = new Bitmap[noOfFrames];\n\n    spriteSheet = res;\n\n    for(int i = 0; i < img.length; i++) {\n        if(i % 5 == 0 && i > 0)\n            row++;\n        img[i] = Bitmap.createBitmap\n        (spriteSheet, (i - (5 * row)) * width, row * height,\n        width, height);\n    }\n    ac.setFrames(img);\n    ac.setDelay(10);\n}\n\n```", "```kt\npublic void draw(Canvas canvas) {\n    if(!ac.playedOnce()){\n        canvas.drawBitmap(ac.getImage(),xc,yc,null);\n    }\n}\n\npublic void update() {\n    if(!ac.playedOnce()){\n        ac.update();\n    }\n}\n\npublic int getHeight() {\n    return height;\n}\n\n```", "```kt\npublic class ExplosionEffect {\n\n    //refer variables created above\n    public ExplosionEffect(Bitmap res, int xc, int yc, int w, int h, int noOfFrames){\n        this.xc = xc;\n        this.yc = yc;\n        this.width = w;\n        this.height = h;\n\n        Bitmap[] img = new Bitmap[noOfFrames];\n\n        spriteSheet = res;\n\n        for(int i = 0; i < img.length; i++) {\n            if(i % 5 == 0 && i > 0)\n                row++;\n            img[i] = Bitmap.createBitmap\n            (spriteSheet, (i - (5 * row)) * width, row * height,\nwidth, height);\n        }\n        ac.setFrames(img);\n        ac.setDelay(10);\n    }\n\n    public void draw(Canvas canvas) {\n        if(!ac.playedOnce()){\n            canvas.drawBitmap(ac.getImage(),xc,yc,null);\n        }\n    }\n\n    public void update() {\n        if(!ac.playedOnce()){\n            ac.update();\n        }\n    }\n\n    public int getHeight() {\n        return height;\n    }\n}\n\n```"]