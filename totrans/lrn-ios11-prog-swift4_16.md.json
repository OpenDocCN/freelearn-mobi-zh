["```\nclass RestaurantItem: NSObject, MKAnnotation\n```", "```\nvar name: String?\nvar cuisines:[String] = []\nvar latitude: Double?\nvar longitude:Double?\nvar address:String?\nvar postalCode:String?\nvar state:String?\nvar imageURL:String?\n```", "```\nvar coordinate: CLLocationCoordinate2D {\n  guard let lat = latitude, let long = longitude else { return CLLocationCoordinate2D() }\n  return CLLocationCoordinate2D(latitude: lat, longitude: long )\n}\n```", "```\nvar subtitle: String? {\n   if cuisines.isEmpty { return \"\" }\n   else if cuisines.count == 1 { return cuisines.first }\n   else { return cuisines.joined(separator: \", \") }\n}\n```", "```\nvar title: String? {\n   return name\n}\n```", "```\nclass MapDataManager {} \n```", "```\nfileprivate var items:[RestaurantItem] = []\n\nvar annotations:[RestaurantItem] {\n    return items\n}\n```", "```\nfunc fetch(completion:(_ annotations:[RestaurantItem]) -> ()) {\n\n  if items.count > 0 { items.removeAll() }\n        for data in loadData() {\n                        items.append(RestaurantItem(dict: data))\n        }\n\n        completion(items)\n}\n\nfileprivate func loadData() -> [[String:AnyObject]] {\n         guard let path = Bundle.main.path(forResource: \"MapLocations\", ofType: \"plist\"),\n           let items = NSArray(contentsOfFile: path) else { return [[:]] }\n        return items as! [[String : AnyObject]]\n}\n```", "```\n  completion:(_ annotations:[RestaurantItem]) -> ())\n```", "```\nprotocol DataManager {}\n```", "```\nfunc load(file name:String) -> [[String:AnyObject]]\n```", "```\nextension DataManager {}\n```", "```\nfunc load(file name:String) -> [[String:AnyObject]] {\n    guard let path = Bundle.main.path(forResource: name, ofType: \"plist\"),  let items = NSArray(contentsOfFile: path) else { return [[:]] }\n   return items as! [[String : AnyObject]]\n}\n```", "```\nclass MapDataManager: DataManager \n```", "```\nfor data in load(file: \"MapLocations\")\n```", "```\nclass ExploreDataManager: DataManager\n```", "```\nfor data in load(file: \"ExploreData\")\n```", "```\nfunc fetch() {\n    for data in load(file: \"ExploreData\") {\n        items.append(ExploreItem(dict: data))\n    }\n}\n```", "```\nclass MapViewController: UIViewController, MKMapViewDelegate\n```", "```\n@IBOutlet var mapView: MKMapView!\n```", "```\nfunc currentRegion(latDelta:CLLocationDegrees, longDelta:CLLocationDegrees) -> MKCoordinateRegion {\n    guard let item = items.first else { return MKCoordinateRegion() }\n    let span = MKCoordinateSpanMake(latDelta, longDelta)\n    return MKCoordinateRegion(center: item.coordinate, span: span)\n}\n```", "```\nfunc currentRegion(latDelta:CLLocationDegrees, longDelta:CLLocationDegrees) -> MKCoordinateRegion {\n```", "```\nguard let item = items.first else { return MKCoordinateRegion() }\n```", "```\nlet span = MKCoordinateSpanMake(latDelta, longDelta)\n```", "```\nreturn MKCoordinateRegion(center: item.coordinate, span: span)\n```", "```\nlet manager = MapDataManager()\n```", "```\nfunc addMap(_ annotations:[RestaurantItem]) {\n        mapView.setRegion(manager.currentRegion(latDelta: 0.5, longDelta: 0.5), animated: true)\n        mapView.addAnnotations(manager.annotations)\n}\n```", "```\nfunc initialize() {\n    mapView.delegate = self       \n    manager.fetch { (annotations) in\n        addMap(annotations)\n    }\n}\n```", "```\nfunc mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n    let identifier = \"custompin\"\n    guard !annotation.is Kind(of: MKUserLocation.self) else { return nil }\n    var annotationView: MKAnnotationView?\n    if let customAnnotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier) {\n        annotationView = customAnnotationView\n        annotationView?.annotation = annotation\n    }\n    else {\n        let av = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n        av.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)\n        annotationView = av\n    }\n    if let annotationView = annotationView {\n        annotationView.canShowCallout = true\n        annotationView.image = UIImage(named: \"custom-annotation\")\n    }\n    return annotationView\n}\n```", "```\nmapView(_:viewFor:)\n```", "```\nlet identifier = \"custompin\"\n```", "```\nguard !annotation.isKind(of: MKUserLocation.self) else {\n   return nil\n}\n```", "```\nvar annotationView:MKAnnotationView?\n\n```", "```\nif let customAnnotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier) {\n   annotationView = customAnnotationView\n   annotationView?.annotation = annotation\n}\n```", "```\nelse {\n   let av = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n   av.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)\n                 annotationView = av\n}\n```", "```\nif let annotationView = annotationView {\n   annotationView.canShowCallout = true\n   annotationView.image = UIImage(named: \"custom-annotation\")\n}\n```", "```\nreturn annotationView\n```", "```\nenum Segue:String {\n  case showDetail\n  case showRating\n  case showReview\n  case ShowAllReviews\n  case restaurantList\n  case locationList\n  case showPhotoReview\n}\n```", "```\nfunc mapView(_ mapView: MKMapView, annotationView view: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n   self.performSegue(withIdentifier: Segue.showDetail.rawValue, sender: self)\n}\n```", "```\nvar selectedRestaurant:RestaurantItem?\n```", "```\ndump(selectedRestaurant as Any)\n```", "```\n var selectedRestaurant:RestaurantItem?\n```", "```\nguard let annotation = mapView.selectedAnnotations.first else { return }\nselectedRestaurant = annotation as? RestaurantItem\n```", "```\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n  switch segue.identifier! {\n      case Segue.showDetail.rawValue:\n               showRestaurantDetail(segue: segue)\n          default:\n               print(\"Segue not added\")\n   }\n}\n```", "```\nfunc showRestaurantDetail(segue:UIStoryboardSegue) {\n   if let viewController = segue.destination as? RestaurantDetailViewController, let restaurant = selectedRestaurant  {\n          viewController.selectedRestaurant = restaurant\n   }\n}\n```", "```\nlet name = \"Craig\"\nname.characters .count\n```", "```\nextension String {\n   var length: Int {\n          return self.characters.count\n   }\n}\n```", "```\nlet name = \"Craig\"\nname.length\n```", "```\n // MARK: Private Extension\nprivate extension ExploreViewController {\n  // code goes here\n}\n // MARK: UICollectionViewDataSource\nextension ExploreViewController: UICollectionViewDataSource {\n  // code goes here\n}\n```", "```\nfunc initialize() {\n  manager.fetch()\n}\n\n@IBAction func unwindLocationCancel(segue:UIStoryboardSegue){}\n```", "```\nclass ExploreViewController: UIViewController {\n    @IBOutlet weak var collectionView:UICollectionView!\n    let manager = ExploreDataManager()\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        initialize()\n    }\n}\n\n// MARK: Private Extension\nprivate extension ExploreViewController {\n    func initialize() {\n        manager.fetch()\n    }\n\n   @IBAction func unwindLocationCancel(segue:UIStoryboardSegue){}\n}\n```", "```\n // MARK: Private Extension\n\nprivate extension RestaurantViewController {}\n // MARK: UICollectionViewDataSource\n\nextension RestaurantViewController: UICollectionViewDataSource {}\n```", "```\n// MARK: Private Extension\n private extension LocationViewController {}\n\n // MARK: UITableViewDataSource\nextension LocationViewController: UITableViewDataSource {}\n```", "```\n// MARK: Private Extension\nprivate extension MapViewController {}\n\n // MARK: MKMapDelegate\n extension MapViewController: MKMapDelegate {}\n```", "```\nclass NewsListingView: UIViewController, NewsListingViewProtocol, UICollectionViewDelegate, UICollectionViewDataSource, LiveGameNewsViewDelegate, UIGestureRecognizerDelegate\n```"]