["```java\n// Relay pin\nconst int relay_pin = 8;\n\nvoid setup() {\n  pinMode(relay_pin,OUTPUT);\n}\n\nvoid loop() {\n\n  // Activate relay\n  digitalWrite(relay_pin, HIGH);\n\n  // Wait for 5 seconds\n  delay(5000);\n\n   // Deactivate relay\n  digitalWrite(relay_pin, LOW);\n\n  // Wait for 5 seconds\n  delay(5000);\n}\n```", "```java\nconst int relay_pin = 8;\n```", "```java\npinMode(relay_pin,OUTPUT);\n```", "```java\n// Activate relay\ndigitalWrite(relay_pin, HIGH);\n\n// Wait for 5 seconds\ndelay(5000);\n```", "```java\n// Import required libraries\n#include <Adafruit_CC3000.h>\n#include <SPI.h>\n#include <aREST.h>\n\n// Relay state\nconst int relay_pin = 8;\n\n// Define measurement variables\nfloat amplitude_current;\nfloat effective_value;\nfloat effective_voltage = 230.; // Set voltage to 230V (Europe) or 110V (US)\nfloat zero_sensor;\n\n// These are the pins for the CC3000 chip if you are using a breakout board\n#define ADAFRUIT_CC3000_IRQ   3\n#define ADAFRUIT_CC3000_VBAT  5\n#define ADAFRUIT_CC3000_CS    10\n\n// Create CC3000 instance\nAdafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,\n                                         SPI_CLOCK_DIV2);\n// Create aREST instance\naREST rest = aREST();\n\n// Your WiFi SSID and password                                         \n#define WLAN_SSID       \"yourWiFiNetworkName\"\n#define WLAN_PASS       \"yourPassword\"â€©#define WLAN_SECURITY   WLAN_SEC_WPA2\n\n// The port to listen for incoming TCP connections\n#define LISTEN_PORT           80\n\n// Server instance\nAdafruit_CC3000_Server restServer(LISTEN_PORT);\n\n// Variables to be exposed to the API\nint power;\n\nvoid setup(void)\n{  \n  // Start Serial\n  Serial.begin(115200);\n\n  // Init variables and expose them to REST API\n  rest.variable(\"power\",&power);\n\n  // Set relay pin to output\n  pinMode(relay_pin,OUTPUT);\n\n  // Calibrate sensor with null current\n  zero_sensor = getSensorValue(A0);\n\n  // Give name and ID to device\n  rest.set_id(\"001\");\n  rest.set_name(\"smart_lamp\");\n\n  // Set up CC3000 and get connected to the wireless network.\n  if (!cc3000.begin())\n  {\n    while(1);\n  }\n\n  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {\n    while(1);\n  }\n  while (!cc3000.checkDHCP())\n  {\n    delay(100);\n  }\n\n  // Display connection details\n  displayConnectionDetails();\n\n  // Start server\n  restServer.begin();\n  Serial.println(F(\"Listening for connections...\"));\n}\n\nvoid loop() {\n\n  // Perform power measurement\n  float sensor_value = getSensorValue(A0);\n\n  // Convert to current\n  amplitude_current = (float)(sensor_value-zero_sensor)/1024*5/185*1000000;\n  effective_value = amplitude_current/1.414;\n  power = (int)(abs(effective_value*effective_voltage/1000));\n\n  // Handle REST calls\n  Adafruit_CC3000_ClientRef client = restServer.available();\n  rest.handle(client);\n\n}\n\n// Function to display connection details\nbool displayConnectionDetails(void)\n{\n  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;\n\n  if(!cc3000.getIPAddress(&ipAddress, &netmask, &gateway, &dhcpserv, &dnsserv))\n  {\n    Serial.println(F(\"Unable to retrieve the IP Address!\\r\\n\"));\n    return false;\n  }\n  else\n  {\n    Serial.print(F(\"\\nIP Addr: \")); cc3000.printIPdotsRev(ipAddress);\n    Serial.print(F(\"\\nNetmask: \")); cc3000.printIPdotsRev(netmask);\n    Serial.print(F(\"\\nGateway: \")); cc3000.printIPdotsRev(gateway);\n    Serial.print(F(\"\\nDHCPsrv: \")); cc3000.printIPdotsRev(dhcpserv);\n    Serial.print(F(\"\\nDNSserv: \")); cc3000.printIPdotsRev(dnsserv);\n    Serial.println();\n    return true;\n  }\n}\n\n// Get the reading from the current sensor\nfloat getSensorValue(uint8_t pin)\n{\n  uint16_t sensorValue;\n  float avgSensor = 0;\n  uint8_t nb_measurements = 100;\n  for (uint8_t i = 0; i < nb_measurements; i++) {\n    sensorValue = analogRead(pin);\n    avgSensor = avgSensor + float(sensorValue);\n  }    \n  avgSensor = avgSensor/float(nb_measurements);\n  return avgSensor;\n}\n```", "```java\n#include <Adafruit_CC3000.h>\n#include <SPI.h>\n#include <CC3000_MDNS.h>\n#include <aREST.h>\n```", "```java\nconst int relay_pin = 8;\n```", "```java\nfloat amplitude_current;\nfloat effective_value;\nfloat effective_voltage = 230.; // Set voltage to 230V (Europe) or 110V (US)\nfloat zero_sensor;\n```", "```java\n#define ADAFRUIT_CC3000_IRQ   3\n#define ADAFRUIT_CC3000_VBAT  5\n#define ADAFRUIT_CC3000_CS    10\n```", "```java\nAdafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,\n                                         SPI_CLOCK_DIV2);\n```", "```java\naREST rest = aREST();\n```", "```java\n#define WLAN_SSID       \"yourWiFiNetworkName\"\n#define WLAN_PASS       \"yourPassword\"\n#define WLAN_SECURITY   WLAN_SEC_WPA2\n```", "```java\n#define LISTEN_PORT           80\n```", "```java\nAdafruit_CC3000_Server restServer(LISTEN_PORT);\n```", "```java\nint power;\n```", "```java\nSerial.begin(115200);\n```", "```java\nrest.variable(\"power\",&power);\n```", "```java\npinMode(relay_pin,OUTPUT);\n```", "```java\nzero_sensor = getSensorValue(A0);\n```", "```java\nrest.set_id(\"001\");\nrest.set_name(\"smart_lamp\");\n```", "```java\ndisplayConnectionDetails();\n```", "```java\nrestServer.begin();\nSerial.println(F(\"Listening for connections...\"));\n```", "```java\nfloat sensor_value = getSensorValue(A0);\n```", "```java\namplitude_current = (float)(sensor_value-zero_sensor)/1024*5/185*1000000;\neffective_value = amplitude_current/1.414;\npower = (int)(abs(effective_value*effective_voltage/1000));\n```", "```java\nAdafruit_CC3000_ClientRef client = restServer.available();\nrest.handle(client);\n```", "```java\nIP Addr: 192.168.1.130\nNetmask: 255.255.255.0\nGateway: 192.168.1.1\nDHCPsrv: 0.0.0.0\nDNSserv: 192.168.1.1\nListening for connections...\n```", "```java\n192.168.1.130/digital/8/1\n```", "```java\n{\"message\": \"Pin D8 set to 1\", \"id\": \"001\", \"name\": \"smart_lamp\", \"connected\": true}\n```", "```java\n192.168.1.130/digital/8/0\n```", "```java\n192.168.1.130/power\n```", "```java\n{\"power\": 0, \"id\": \"001\", \"name\": \"smart_lamp\", \"connected\": true}\n```", "```java\npublic static final String TAG = MainScreen.class.getSimpleName();\n```", "```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main_screen);\n\n        //Declare our View Variables and assign them to the layout elements\n        Button checkPowerButton = (Button) findViewById(R.id.checkPowerButton);\n        Button openTheGateButton = (Button) findViewById(R.id.openGateButton);\n        Button switchOnButton = (Button) findViewById(R.id.switchOnButton);\n        Button switchOffButton = (Button) findViewById(R.id.switchOffButton);\n\n        checkPowerButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (isNetworkAvailable()) {\n                    checkPowerTask getPowerTask = new checkPowerTask();\n                    getPowerTask.execute();\n                }\n            }\n        });\n\n        openTheGateButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (isNetworkAvailable()) {\n                    SwitchOpenTask switchOpenTask = new SwitchOpenTask();\n                    switchOpenTask.execute();\n                }\n            }\n        });\n\n        switchOnButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (isNetworkAvailable()) {\n                    SwitchOnTask switchOnTask = new SwitchOnTask();\n                    switchOnTask.execute();\n                }\n            }\n        });\n\n        switchOffButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (isNetworkAvailable()) {\n                    SwitchOffTask switchOffTask = new SwitchOffTask();\n                    switchOffTask.execute();\n                }\n            }\n        });\n\n    }\n```", "```java\npublic static final String URL = \"yourip\";\n```", "```java\nprivate class SwitchOpenTask extends AsyncTask<Object,Void,String> {\n\n        @Override\n        protected String doInBackground(Object... arg0) {\n\n            int responseCode = -1;\n\n            try {\n                URL restApiUrl = new URL(\"http:// \" + URL + \"mode/8/o\");\n                HttpURLConnection connection = (HttpURLConnection) restApiUrl.openConnection();\n                connection.connect();\n\n                responseCode = connection.getResponseCode();\n                Log.i(TAG, \"Code\" + responseCode);\n            }\n            catch(MalformedURLException e) {\n                Log.e(TAG, \"Malformed Exception Caught:\", e);\n            }\n            catch(IOException e) {\n                Log.e(TAG, \"IO Exception Caught:\", e);\n                e.printStackTrace();\n            }\n            catch(Exception e){\n                Log.e(TAG, \"Generic Exception Caught:\", e);\n            }\n\n            return \"Code: \" + responseCode;\n\n        }\n\n    }\n\n    private class SwitchOnTask extends AsyncTask<Object,Void,String> {\n\n        @Override\n        protected String doInBackground(Object... arg0) {\n\n            int responseCode = -1;\n\n            try {\n                URL restApiUrl = new URL(\"http://\" + URL + \"/digital/8/1\");\n                HttpURLConnection connection = (HttpURLConnection) restApiUrl.openConnection();\n                connection.connect();\n\n                responseCode = connection.getResponseCode();\n                Log.i(TAG, \"Code\" + responseCode);\n            }\n            catch(MalformedURLException e) {\n                Log.e(TAG, \"Malformed Exception Caught:\", e);\n            }\n            catch(IOException e) {\n                Log.e(TAG, \"IO Exception Caught:\", e);\n                e.printStackTrace();\n            }\n            catch(Exception e){\n                Log.e(TAG, \"Generic Exception Caught:\", e);\n            }\n\n            return \"Code: \" + responseCode;\n\n        }\n\n    }\n\n    private class SwitchOffTask extends AsyncTask<Object,Void,String> {\n\n        @Override\n        protected String doInBackground(Object... arg0) {\n\n            int responseCode = -1;\n\n            try {\n                URL restApiUrl = new URL(\"http://\" + URL + \"/digital/8/0\");\n                HttpURLConnection connection = (HttpURLConnection) restApiUrl.openConnection();\n                connection.connect();\n\n                responseCode = connection.getResponseCode();\n                Log.i(TAG, \"Code\" + responseCode);\n            }\n            catch(MalformedURLException e) {\n                Log.e(TAG, \"Malformed Exception Caught:\", e);\n            }\n            catch(IOException e) {\n                Log.e(TAG, \"IO Exception Caught:\", e);\n                e.printStackTrace();\n            }\n            catch(Exception e){\n                Log.e(TAG, \"Generic Exception Caught:\", e);\n            }\n\n            return \"Code: \" + responseCode;\n\n        }\n\n    }\n\n    private class checkPowerTask extends AsyncTask<Object,Void,String> {\n\n        @Override\n        protected String doInBackground(Object... arg0) {\n\n            int responseCode = -1;\n            String result = null;\n\n            try {\n                URL restApiUrl = new URL(\"http://\" + URL + \"/power\");\n                HttpURLConnection connection = (HttpURLConnection) restApiUrl.openConnection();\n                connection.connect();\n                responseCode = connection.getResponseCode();\n\n                InputStream is = null;\n                //http post request\n                try{\n                    String postQuery = \"http://\" + URL + \"/power\";\n                    HttpClient httpclient = new DefaultHttpClient();\n                    HttpPost httppost = new HttpPost(postQuery);\n                    HttpResponse response = httpclient.execute(httppost);\n                    HttpEntity entity = response.getEntity();\n                    is = entity.getContent();\n                }catch(Exception e){\n                    Log.e(\"log_tag\", \"Error in http connection \"+e.toString());\n                }\n\n                //convert response to string\n                try{\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(is,\"UTF-8\"),8);\n                    StringBuilder sb = new StringBuilder();\n                    String line = null;\n\n                    while ((line = reader.readLine()) != null) {\n                        sb.append(line + \"\\n\");\n                    }\n\n                    is.close();\n\n                    result=sb.toString();\n                    Log.v(TAG,result);\n\n                } catch(Exception e){\n                    Log.e(\"log_tag\", \"Error converting result \"+e.toString());\n                }\n\n                //parse json data\n                try {\n\n                    JSONObject userObject = new JSONObject(result);\n                    final String powerOutputText = userObject.getString(\"power\");\n\n                    activity.runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            TextView powerOutput = (TextView) findViewById(R.id.powerOutput);\n                            powerOutput.setText(powerOutputText + \"W\");\n\n                        }\n                    });\n\n                } catch(JSONException e){\n                    Log.e(TAG, \"JSON Exception Caught:\", e);\n                }\n            }\n            catch(MalformedURLException e) {\n                Log.e(TAG, \"Malformed Exception Caught:\", e);\n            }\n            catch(IOException e) {\n                Log.e(TAG, \"IO Exception Caught:\", e);\n                e.printStackTrace();\n            }\n            catch(Exception e){\n                Log.e(TAG, \"Generic Exception Caught:\", e);\n            }\n\n            return \"Code: \" + responseCode;\n        }\n\n    }\n```", "```java\nprivate boolean isNetworkAvailable() {\n        ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = manager.getActiveNetworkInfo();\n\n        boolean isAvailable = false;\n        if (networkInfo != null && networkInfo.isConnected()) {\n            isAvailable = true;\n        }\n\n        return isAvailable;\n\n    }\n```", "```java\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```", "```java\nandroid:textSize=\"100sp\"\nandroid:textAlignment=\"center\"\n```", "```java\n<TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"100W\"\n        android:textSize=\"100sp\"\n        android:id=\"@+id/powerOutput\"\n        android:textAlignment=\"center\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"78dp\"\n        />\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape >\n    android:shape=\"rectangle\" >\n    <corners\n        android:radius=\"30dp\"/>\n    <solid\n        android:color=\"#FFFFFF\"/>\n    <padding\n        android:left=\"0dp\"\n        android:top=\"0dp\"\n        android:right=\"0dp\"\n        android:bottom=\"0dp\"/>\n    <size\n        android:width=\"120dp\"\n        android:height=\"60dp\"/>\n    <stroke\n        android:width=\"2dp\"\n        android:color=\"#4A90E2\"/>\n</shape>\n```", "```java\nandroid:background=\"@drawable/button\"\n```", "```java\nandroid:textColor=\"#4A90E2\"\n```", "```java\n<string name=\"app_name\">WiFi Lamp Switch</string>\n```"]