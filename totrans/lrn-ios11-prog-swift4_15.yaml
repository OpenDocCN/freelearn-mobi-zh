- en: Getting Started with the List
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表入门
- en: When I started doing iOS development, I first worked with Table Views. At the
    time, Collection Views had not yet been introduced. As you progress in iOS development,
    you will work with a lot of Table and Collection Views. You begin with just the
    basics to get them going and then you slowly progress into more advanced Table
    and Collection Views.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始做iOS开发时，我首先使用的是表格视图。当时，集合视图还没有被引入。随着你在iOS开发中的进步，你将使用很多表格和集合视图。你从最基础的内容开始，然后逐渐过渡到更高级的表格和集合视图。
- en: The reason that I bring this up is that, by the end of this chapter, you may
    feel as though things are not clicking. It is perfectly normal. But the more you
    go through the steps in these chapters, the more they will become second nature
    to you.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到这一点的原因是，到本章结束时，你可能觉得事情似乎没有进展。这是完全正常的。但随着你在这几章中逐步进行，它们将变得越来越自然。
- en: For those of you that have not done iOS development, Table Views are great for
    presenting a list of data. The iPhone's mail app is an example of what a Table
    View typically looks like.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些没有做过iOS开发的人来说，表格视图非常适合展示数据列表。iPhone的邮件应用就是一个典型的表格视图示例。
- en: In this chapter, we are going to work with our first Table View. In our *Let's
    Eat* app, users select a specific location to look for restaurants.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们的第一个表格视图。在我们的*Let's Eat*应用中，用户可以选择一个特定的位置来查找餐厅。
- en: 'We will cover the following in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中介绍以下内容：
- en: Creating our first property list (plist)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个属性列表（plist）
- en: Creating our location data manager
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的位置数据管理器
- en: Cleaning up our file structure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理我们的文件结构
- en: Creating our Location View Controller class
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的位置视图控制器类
- en: We want to get our data to display inside our Table View. Before we start, create
    three new folders inside the Location folder—Controller, View, and Model. As we
    have previously done, right-click on the `Location` folder and hit New Group to
    create a new folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将数据显示在我们的表格视图中。在我们开始之前，在位置文件夹内创建三个新的文件夹——Controller、View和Model。正如我们之前所做的那样，右键点击`Location`文件夹并点击新建组来创建一个新的文件夹。
- en: 'Next, we need to create a Location View Controller class that we can use with
    our `UIViewController`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个位置视图控制器类，我们可以用它与`UIViewController`一起使用：
- en: Right-click on the `Controller` folder you just created and select New File.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击你刚刚创建的`Controller`文件夹，并选择新建文件。
- en: In the Choose a template for your new file screen, select iOS at the top and
    Cocoa Touch Class. Then, hit Next.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”的屏幕上，顶部选择iOS，然后选择Cocoa Touch Class。然后点击下一步。
- en: 'In the Options screen that appears, add the following:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `LocationViewController`'
  id: totrans-16
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`LocationViewController`
- en: 'Subclass: `UIViewController`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还创建XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click on Next and then Create.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: 'Next, we need to connect our View Controller with our class:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将我们的视图控制器与我们的类连接起来：
- en: Select `Locations.storyboard`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Locations.storyboard`。
- en: Then select the View Controller.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后选择视图控制器。
- en: Now, in the Utilities panel, select the Identity inspector.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在实用工具面板中，选择身份检查器。
- en: Under Custom Class, in the Class drop-down menu, select LocationViewController
    and hit *Enter*.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在自定义类下，在类下拉菜单中选择LocationViewController并按*Enter*键。
- en: Connecting our Table View with our Location View Controller
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的表格视图与位置视图控制器连接起来
- en: 'Currently, we have no way to communicate with our Table View and our Location
    View Controller. Let''s see how we can connect these two:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们还没有办法与我们的表格视图和位置视图控制器进行通信。让我们看看我们如何连接这两个：
- en: 'Open the `LocationViewController.swift` file and add the following code after
    the class declaration:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`LocationViewController.swift`文件，并在类声明之后添加以下代码：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save the file by hitting c*md* + *S*. Your file should look like the following,
    with an empty circle next to the variable:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*c*md* + *S*保存文件。你的文件应该看起来像以下这样，变量旁边有一个空圆圈：
- en: '![](img/a0b32985-7dd5-4564-b35b-57d77cd5833b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0b32985-7dd5-4564-b35b-57d77cd5833b.png)'
- en: 'Before we get started, we are going to clean up our `LocationViewController.swift`
    file. Delete everything after `viewDidLoad()`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们将清理我们的`LocationViewController.swift`文件。删除`viewDidLoad()`之后的所有内容：
- en: '![](img/98dcab8c-4a94-48d8-90ab-206be210b37e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98dcab8c-4a94-48d8-90ab-206be210b37e.png)'
- en: Next, let’s connect our table view to the file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将我们的表格视图连接到文件。
- en: Open `Explore.storyboard` again and make sure that you have the Location View
    Controller selected in the Outline view.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开`Explore.storyboard`并确保你在概览视图中选择了位置视图控制器。
- en: 'Then, in the Utilities panel, select Connections inspector. Under the Outlets
    section, you will see an empty circle, tableView:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在实用工具面板中，选择连接检查器。在输出部分下，你会看到一个空圆圈，`tableView`：
- en: '![](img/de1aa60f-0a67-462e-af7f-3751df854d92.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de1aa60f-0a67-462e-af7f-3751df854d92.png)'
- en: 'Click and drag the empty circle to the Table View in the storyboard:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击并拖动空圆圈到故事板中的表格视图：
- en: '![](img/ecd2a21c-46ab-49ee-994d-58e681bd751a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecd2a21c-46ab-49ee-994d-58e681bd751a.png)'
- en: We have now connected our Table View to our Location View Controller.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将表格视图连接到了位置视图控制器。
- en: Digging into our Table View code
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入我们的表格视图代码
- en: 'To get data into our Table View, we must conform to a protocol as we did with
    the Collection View. In this case, we must implement `UITableViewDataSource`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据放入我们的表格视图，我们必须遵守一个协议，就像我们在集合视图中做的那样。在这种情况下，我们必须实现`UITableViewDataSource`：
- en: 'First, we need to update our `class` declaration. We currently have the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更新我们的`class`声明。我们目前有以下内容：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We now need to add `UITableViewDataSource`, as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要添加`UITableViewDataSource`，如下所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Adding the data source and delegate
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加数据源和委托
- en: 'As discussed in the previous chapter, we need to add a data source and delegate
    to our Table View. Table View uses **dynamic cells**, which we are required to
    add:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，我们需要向我们的表格视图添加数据源和委托。表格视图使用**动态单元格**，我们必须添加：
- en: Select Table View in the Outline view, and then Connections inspector in the
    Utilities panel.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在概览视图中选择表格视图，然后在实用工具面板中选择连接检查器。
- en: 'Click on and drag from `dataSource` to the Location View Controller in the
    Outline view:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并从`dataSource`拖动到概览视图中的位置视图控制器：
- en: '![](img/c8015c23-88f1-47dc-ac65-784284b04580.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8015c23-88f1-47dc-ac65-784284b04580.png)'
- en: 'Repeat with the `delegate` property:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`delegate`属性重复操作：
- en: '![](img/3fc7d78b-217d-4d29-9b19-f4829aa07f51.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3fc7d78b-217d-4d29-9b19-f4829aa07f51.png)'
- en: 'In the Utilities panel, select the Attributes inspector, if not already selected,
    and make sure you have the following values:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中，选择属性检查器，如果尚未选择，请确保你有以下值：
- en: 'Style: `Basic`'
  id: totrans-55
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式：`Basic`
- en: 'Identifier: `locationCell`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标识符：`locationCell`
- en: 'Selection: `Gray`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择：`Gray`
- en: 'Accessory: `Disclosure indicator`'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附件：`Disclosure indicator`
- en: 'Next, for us to display anything in `Tableview`, we need to add the `UITableViewDataSource`
    protocol. Our protocol requires that we implement the following three methods.
    Add the following after the closing curly brace of `viewDidLoad()`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了在`Tableview`中显示任何内容，我们需要添加`UITableViewDataSource`协议。我们的协议要求我们实现以下三个方法。在`viewDidLoad()`的闭合花括号之后添加以下内容：
- en: '![](img/46ecb8ae-0d7d-49f6-a9cf-6d60fd28c405.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46ecb8ae-0d7d-49f6-a9cf-6d60fd28c405.png)'
- en: 'Let''s break down the code to understand what we are doing:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码来了解我们在做什么：
- en: '**Part A**: This method tells our Table View how many rows we want to display.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第一部分**：此方法告诉我们的表格视图我们想要显示多少行。'
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Part B**: Here, we tell our Table View that we want to display `15` rows.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第二部分**：在这里，我们告诉我们的表格视图我们想要显示`15`行。'
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Part C**: This method tells our Table View how many sections we want to display.
    Sections in Table Views are typically used as headers, but they can be used however
    you choose.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三部分**：此方法告诉我们的表格视图我们想要显示多少个部分。表格视图中的部分通常用作标题，但你可以按自己的方式使用它们。'
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Part D**: We tell our Table View that we only want one section.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第三部分**：我们告诉我们的表格视图我们只想显示一个部分。'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Part E**: Our third and final method gets called for every item we need.
    Therefore, in our case, it gets called 15 times.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第四部分**：我们的第三个也是最后一个方法为每个我们需要的项目被调用。因此，在我们的情况下，它被调用了15次。'
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Part F**: Here, we create a cell every time *Part E* is called, either by
    taking one from the queue, if available, or by creating a new cell. The identifier,
    `locationCell`, is the name we gave it in the storyboard. Therefore, we are telling
    our Table View that we want to use this cell. If we had multiple Table Views,
    we would reference the identifier for the row and section in which we want the
    cell to display.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第五部分**：在这里，每当*第四部分*被调用时，我们会创建一个单元格，无论是从队列中取一个（如果可用），还是创建一个新的单元格。标识符`locationCell`是我们给它在故事板中起的名字。因此，我们告诉我们的表格视图我们想要使用这个单元格。如果我们有多个表格视图，我们将引用单元格要显示的行和部分的标识符。'
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since we do not have any data yet, we set our label to `A cell`. The `textLabel`
    variable is the default label we got when we selected a basic cell.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有任何数据，我们将我们的标签设置为`A cell`。`textLabel`变量是我们选择基本单元格时得到的默认标签。
- en: '**Part G**: Finally, after each time we create a new cell, we give the cell
    back to the Table View to display that cell.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第G部分**：最后，每次我们创建一个新的单元格后，我们都将单元格返回给表格视图以显示该单元格。'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd*
    + *R*) to see what happens. You should now see `A cell` repeating 15 times:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目，看看会发生什么。现在您应该看到“一个单元格”重复15次：
- en: '![](img/60d51788-464d-46bd-b406-06fb9f72c58b.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/60d51788-464d-46bd-b406-06fb9f72c58b.jpg)'
- en: Adding locations to our Table View
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的表格视图添加位置
- en: 'We now have our Table View displaying data, but we need it to display a list
    of actual locations. Let''s update our Table View to show our list of locations:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了表格视图显示数据，但我们需要它显示实际位置列表。让我们更新我们的表格视图以显示我们的位置列表：
- en: 'Directly under the `tableView` variable, add the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tableView`变量直接下方添加以下内容：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your file should now look like mine:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的文件现在应该看起来像我的一样：
- en: '![](img/ec58a855-49a8-4584-b568-10712d502706.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec58a855-49a8-4584-b568-10712d502706.png)'
- en: 'Next, to update our cell to display the locations, we need to replace the `cell.textLabel?.text
    = "A cell"` line with the following:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了更新我们的单元格以显示位置，我们需要将 `cell.textLabel?.text = "A cell"` 行替换为以下内容：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd* +
    *R*). You should see the following after clicking Select a location in your simulator:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。在您的模拟器中选择位置后，您应该看到以下内容：
- en: '![](img/18a23db4-9ceb-4189-96dd-d32235ce5348.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/18a23db4-9ceb-4189-96dd-d32235ce5348.jpg)'
- en: However, there are a couple of problems. If we add another location to the array,
    it crashes because we are manually setting the value. Also, we are just loading
    this list from an array we built in the app. If we decide to add more locations,
    we would have to update our cell number count as well as our list of locations.
    Therefore, we should instead pull our locations from a plist, as we did in the
    last chapter. Plists provide a place where we can quickly add or remove a location
    from our list.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有几个问题。如果我们向数组中添加另一个位置，它会崩溃，因为我们正在手动设置值。此外，我们只是从这个应用中构建的数组中加载这个列表。如果我们决定添加更多位置，我们还需要更新我们的单元格数量以及位置列表。因此，我们应该从plist中获取我们的位置，就像我们在上一章中所做的那样。Plists提供了一个我们可以快速添加或从列表中删除位置的地方。
- en: Creating our first property list (plist)
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个属性列表（plist）
- en: In the last chapter, we used a provided plist to load our cuisine list. We will
    do the same in this chapter, but now that you are familiar with what a plist is,
    we will create one from scratch together.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用提供的plist来加载我们的菜谱列表。在这一章中，我们将做同样的事情，但现在您已经熟悉了plist是什么，我们将一起从头创建一个。
- en: I use plists all the time, from creating menus to having a file that holds app
    settings such as colors or social media URLs. I find them very useful, especially
    if I need to come back later and update or change things.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '我经常使用plist，从创建菜单到拥有一个包含应用程序设置（如颜色或社交媒体URL）的文件。我发现它们非常有用，特别是如果我在以后需要回来更新或更改东西的话。 '
- en: 'Let''s learn how to create a plist from scratch. To create a plist in Xcode,
    do the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何从头创建plist。要在Xcode中创建plist，请执行以下操作：
- en: Right-click on the `Model` folder inside Location and select New File.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“Location”中的“Model”文件夹，然后选择“新建文件”。
- en: 'In Choose a template for your new file, select iOS at the top, and then type
    `Property` in the filter field:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“为新文件选择模板”中，在顶部选择iOS，然后在过滤器字段中输入“属性”：
- en: '![](img/2c251af0-61bd-4818-ac9d-e45e9e242525.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c251af0-61bd-4818-ac9d-e45e9e242525.png)'
- en: Select Property List and then hit Next.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“属性列表”然后点击下一步。
- en: Name the file Locations and hit Create.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为“Locations”并点击创建。
- en: 'You should now have a file that looks like mine:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该有一个看起来像我一样的文件：
- en: '![](img/b55b32c8-d596-4b1b-aa70-917a61a60a57.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b55b32c8-d596-4b1b-aa70-917a61a60a57.png)'
- en: Adding data to our property list
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的属性列表添加数据
- en: 'As you learned in the previous chapter, our plist has a `Root`; for this new
    file, we created a `Dictionary` as our `Root` type. Since we are going to display
    a list of locations, we need our `Root` to be an `Array`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上一章中学到的，我们的plist有一个“根”；对于这个新文件，我们创建了一个“字典”作为我们的“根”类型。由于我们将要显示位置列表，我们需要我们的“根”是一个“数组”：
- en: 'Click on Dictionary in the plist and change it to Array:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在plist中点击“字典”并将其更改为“数组”：
- en: '![](img/d82da426-1123-4af3-8663-68a5df73c625.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d82da426-1123-4af3-8663-68a5df73c625.png)'
- en: 'You should see a plus next to Array (if the plus button is not displaying,
    just hover your mouse over that line item and it will appear):'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到数组旁边有一个加号（如果加号按钮没有显示，只需将鼠标悬停在那一行上，它就会出现）：
- en: '![](img/a2699eb7-ff5f-4cb0-9abe-6f5192b6aab2.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2699eb7-ff5f-4cb0-9abe-6f5192b6aab2.png)'
- en: 'Click on the plus button and it will add a new item with a String type. Change
    the type to Dictionary:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加号按钮，它将添加一个具有字符串类型的新项目。将类型更改为字典：
- en: '![](img/da6dec79-edcd-45f9-910b-465d05a97adb.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da6dec79-edcd-45f9-910b-465d05a97adb.png)'
- en: Click on the plus button that appears when you hover over Item 0.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在项目 0 上悬停时，点击出现的加号按钮。
- en: 'We now need to update the New Item**.** Update the Key property to say state
    and update the Value property of the new item by entering CO:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要更新新项目**。** 将键属性更新为“州”，并通过输入 CO 更新新项目的值属性：
- en: '![](img/c0b10a33-7d42-42c6-b145-e192ddbe5deb.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0b10a33-7d42-42c6-b145-e192ddbe5deb.png)'
- en: Next, click on the plus button when you hover over state.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当你在“州”上悬停时，点击加号按钮。
- en: 'Update the Key property to say city and update the Value property of the new
    item by entering Aspen:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将键属性更新为“城市”，并通过输入 Aspen 更新新项目的值属性：
- en: '![](img/ab0a6128-8f84-40bb-99f5-644aeed785da.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0a6128-8f84-40bb-99f5-644aeed785da.png)'
- en: 'Next, click on the disclosure arrow for Item 0 to close it:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击项目 0 的展开箭头以关闭它：
- en: '![](img/183c5e4d-dfda-4cc5-a6b5-0b4672c5f459.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/183c5e4d-dfda-4cc5-a6b5-0b4672c5f459.png)'
- en: 'Select Item 0 and then hit *cmd* + *C* to copy and then *cmd* + *V* to paste:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目 0，然后按 *cmd* + *C* 复制，然后按 *cmd* + *V* 粘贴：
- en: '![](img/f760a93c-cf6c-468e-b670-4b9a2a12145a.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f760a93c-cf6c-468e-b670-4b9a2a12145a.png)'
- en: 'Next, open up Item 1 and update the city to Boston and the state to MA:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开项目 1，并将城市更新为波士顿，州更新为 MA：
- en: '![](img/af18427a-052a-4fa6-9f55-92118210ef14.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af18427a-052a-4fa6-9f55-92118210ef14.png)'
- en: 'Continue with the same process by adding the following cities and states:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下城市和州继续使用相同的过程：
- en: '| **Key** | **Type** | **City** | **State** |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **类型** | **城市** | **州** |'
- en: '| Item 2 | String | Charleston | NC |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 项目 2 | 字符串 | 查尔斯顿 | 北卡罗来纳州 |'
- en: '| Item 3 | String | Chicago | IL |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 项目 3 | 字符串 | 芝加哥 | 伊利诺伊州 |'
- en: '| Item 4 | String | Houston | TX |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 项目 4 | 字符串 | 休斯顿 | 德克萨斯州 |'
- en: '| Item 5 | String | Las Vegas | NV |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 项目 5 | 字符串 | 拉斯维加斯 | 内华达州 |'
- en: '| Item 6 | String | Los Angeles | CA |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 项目 6 | 字符串 | 洛杉矶 | 加利福尼亚州 |'
- en: '| Item 7 | String | Miami | FL |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 项目 7 | 字符串 | 迈阿密 | 佛罗里达州 |'
- en: '| Item 8 | String | New Orleans | LA |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 项目 8 | 字符串 | 新奥尔良 | 路易斯安那州 |'
- en: '| Item 9 | String | New York | NY |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 项目 9 | 字符串 | 纽约 | 纽约州 |'
- en: '| Item 10 | String | Philadelphia | PA |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 项目 10 | 字符串 | 费城 | 宾夕法尼亚州 |'
- en: '| Item 11 | String | Portland | OR |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 项目 11 | 字符串 | 波特兰 | 俄勒冈州 |'
- en: '| Item 12 | String | San Antonio | TX |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 项目 12 | 字符串 | 圣安东尼奥 | 德克萨斯州 |'
- en: '| Item 13 | String | San Francisco | CA |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 项目 13 | 字符串 | 旧金山 | 加利福尼亚州 |'
- en: 'When you are done, your file should look like mine:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你的文件应该看起来像我的一样：
- en: '![](img/755deccf-0195-4576-824d-e1e9924c1b5e.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/755deccf-0195-4576-824d-e1e9924c1b5e.png)'
- en: 'We just set up our data source. We now need to create a data manager similar
    to the one that we made in the previous chapter:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚设置了我们的数据源。我们现在需要创建一个类似于上一章中我们创建的数据管理器：
- en: Creating our location data manager
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的位置数据管理器
- en: 'Let''s create the `LocationDataManager` file:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建 `LocationDataManager` 文件：
- en: Right-click on the `Model` folder in the `Location` folder and select New File.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Location` 文件夹中的 `Model` 文件夹，然后选择新建文件。
- en: In Choose a template for your new file, select iOS at the top and then Swift
    File. Then hit Next.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“为您的新文件选择模板”中，在顶部选择 iOS，然后选择 Swift 文件。然后点击下一步。
- en: Name this file `LocationDataManager`, and then hit Create.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `LocationDataManager`，然后点击创建。
- en: 'We need to define our class definition now, so add the following under the
    `import` statement:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要定义我们的类定义，所以在 `import` 语句之下添加以下内容：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inside the class declaration, add the following variable to keep our array
    private, as there is no reason to have to access this outside the class:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类声明内部，添加以下变量以保持我们的数组私有，因为没有理由需要在类外访问它：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s add the following methods after our variable:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的变量之后添加以下方法：
- en: '[PRE14]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These methods are the same as we had in `ExploreDataManager`, except that we
    are getting back an array of dictionary objects from our plist.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法与我们在 `ExploreDataManager` 中拥有的方法相同，只不过我们现在从我们的 plist 中获取一个字典对象的数组。
- en: Working with our data manager
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我们的数据管理器一起工作
- en: We now need to update our `LocationViewController`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要更新我们的 `LocationViewController`。
- en: 'First, because we do not need it anymore, delete the following array that we
    created in the class:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，因为我们不再需要它，所以删除我们在类中创建的以下数组：
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, since we need to create an instance of our data manager in this class,
    add the following above `viewDidLoad()`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，由于我们需要在这个类中创建数据管理器的实例，请在 `viewDidLoad()` 之上添加以下内容：
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside `viewDidLoad()`, we want to fetch the data for the Table View, so add
    the following under `super.viewDidLoad()`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 中，我们想要获取 Table View 的数据，所以请在 `super.viewDidLoad()` 之下添加以下内容：
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, your `viewDidLoad()` should look like the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的 `viewDidLoad()` 应该看起来像以下内容：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For the `numberOfRowsInSection()` method, instead of `15` we will use the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `numberOfRowsInSection()` 方法，我们不会使用 `15`，而是使用以下内容：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Lastly, we need to update our `cellForRowAt`. Replace `cell.textLabel?.text
    = arrLocations[indexPath.item]` with the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要更新我们的 `cellForRowAt`。将 `cell.textLabel?.text = arrLocations[indexPath.item]`
    替换为以下内容：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Your `cellForRowAt` should now look like this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `cellForRowAt` 应该看起来像这样：
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's build and run the project by hitting the Play button (or using *cmd* +
    *R*). We should still see our locations, but now they are coming from our plist.
    Before we finish this chapter, our project navigator is a mess right now. We have
    files just in the main folder. Putting files into the main folder without any
    organization is not something you want to do. Let’s organize our files before
    we add any more.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过点击播放按钮（或使用 *cmd* + *R*）来构建和运行项目。我们应该仍然看到我们的位置，但现在它们来自我们的 plist。在我们完成这一章之前，我们的项目导航器现在一团糟。我们只是在主文件夹中有文件。在没有组织的情况下将文件放入主文件夹不是你想要做的事情。在我们添加更多文件之前，让我们先组织我们的文件。
- en: Creating folders
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件夹
- en: 'Creating folders is easy: all you have to do is right-click on the `LetsEat`
    folder, and you can create a new group. You can also select multiple files and
    put all of the selected items into a new group.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件夹很简单：你只需要在 `LetsEat` 文件夹上右键单击，就可以创建一个新的组。你还可以选择多个文件，并将所有选定的项目放入一个新的组中。
- en: 'We are going to create three folders first, called `Application`, `Misc`, and
    `Controllers`. When you are done you should see the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建三个文件夹，分别命名为 `Application`、`Misc` 和 `Controllers`。当你完成时，你应该会看到以下内容：
- en: '![](img/91c33558-05f5-45ea-885b-35b192224b35.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/91c33558-05f5-45ea-885b-35b192224b35.png)'
- en: 'We are going to move `Info.plist`, `Assets.xcasset`, `App Delegate`, `LaunchScreen.storyboard`,
    and `Main.storyboard` all into the `Application` folder. You can *cmd* + click
    each and then drag them one at a time. When you are done, you should see the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把 `Info.plist`、`Assets.xcasset`、`App Delegate`、`LaunchScreen.storyboard`
    和 `Main.storyboard` 都移动到 `Application` 文件夹中。你可以 *cmd* + 点击每个文件，然后逐个拖动。当你完成时，你应该会看到以下内容：
- en: '![](img/b53ca43e-83a6-4815-8aa6-fb2de4db18ad.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b53ca43e-83a6-4815-8aa6-fb2de4db18ad.png)'
- en: 'Next, you want to create a folder for all of the View Controllers. Inside the
    `Controllers` folder, add the following folders: `Photo Filter`, `Restaurant Details`,
    `Review Form`, `Explore`, `Restaurants`, `Locations`, and `Map`. Then drag each
    storyboard file into each corresponding folder. Drag `ExploreData.plist`, `ExploreItem`,
    `ExploreCell`, and `ExploreDataManager` into the `Explore` folder. Then drag `RestaurantViewController`
    into the `Restaurants` folder. Finally, drag `LocationViewController`, `LocationDataManager`,
    and `Locations.plist` into the `Locations` folder. When you are done, you should
    have the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你想要为所有的 View Controllers 创建一个文件夹。在 `Controllers` 文件夹内，添加以下文件夹：`Photo Filter`、`Restaurant
    Details`、`Review Form`、`Explore`、`Restaurants`、`Locations` 和 `Map`。然后，将每个 storyboard
    文件拖动到相应的文件夹中。将 `ExploreData.plist`、`ExploreItem`、`ExploreCell` 和 `ExploreDataManager`
    拖动到 `Explore` 文件夹中。然后，将 `RestaurantViewController` 拖动到 `Restaurants` 文件夹中。最后，将
    `LocationViewController`、`LocationDataManager` 和 `Locations.plist` 拖动到 `Locations`
    文件夹中。当你完成时，你应该会有以下内容：
- en: '![](img/fe497fcc-f857-468f-9a07-75f99fc0c9e2.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fe497fcc-f857-468f-9a07-75f99fc0c9e2.png)'
- en: Even though we cleaned this area, I do not typically use it to open and find
    files because it takes way too long. To open files, I always use *cmd* + *O* and
    type the name of the file. Opening and closing folders takes forever. You should
    learn this shortcut as it will increase your workflow.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们清理了这个区域，但我通常不会用它来打开和查找文件，因为它需要花费太多时间。为了打开文件，我总是使用 *cmd* + *O* 并输入文件名。打开和关闭文件夹需要花费很长时间。你应该学习这个快捷键，因为它将提高你的工作效率。
- en: For now, this is good enough to move on. We could add more folders as we go,
    but this is a lot better than what we had before.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 目前来说，这样就足够了，我们可以继续添加更多文件夹，但比之前要好得多。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we worked with a Table View that has dynamic cells, which allows
    the Table View to change based on the data. We also worked with unwinding segues.
    Later, we passed data that we need through our segues. Along with segues, we looked
    at plists, learning how to create them as well as how to add data to them. Finally,
    we created our locations data manager, which is responsible for giving data to
    the View Controller.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了一个具有动态单元格的 Table View，这使得 Table View 能够根据数据变化。我们还处理了 unwinding segues。随后，我们通过
    segues 传递了我们所需的数据。与 segues 一起，我们还研究了 plists，学习了如何创建它们以及如何向它们添加数据。最后，我们创建了我们的位置数据管理器，该管理器负责向
    View Controller 提供数据。
- en: In the next chapter, we will work with a Table View that has static cells to
    build out our restaurant detail. Static cells are excellent for forms or detail
    views. We could build out the restaurant detail using a Collection View; however,
    a static Table View will work well and will be less complicated.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用具有静态单元格的 Table View 来构建我们的餐厅详情。静态单元格非常适合用于表单或详情视图。我们可以使用 Collection
    View 来构建餐厅详情；然而，静态 Table View 将会工作得很好，并且会更加简单。
- en: At this point, before moving on to the next chapter, you may want to get the
    starter project for this chapter and try to do it again without using the book
    as your guide. Going back helps solidify your understanding of what you have learned.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，在进入下一章之前，你可能想要获取本章的入门项目，并尝试在不使用书籍作为指南的情况下再次尝试。回顾所学内容有助于巩固你的理解。
