- en: Getting Started with the List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I started doing iOS development, I first worked with Table Views. At the
    time, Collection Views had not yet been introduced. As you progress in iOS development,
    you will work with a lot of Table and Collection Views. You begin with just the
    basics to get them going and then you slowly progress into more advanced Table
    and Collection Views.
  prefs: []
  type: TYPE_NORMAL
- en: The reason that I bring this up is that, by the end of this chapter, you may
    feel as though things are not clicking. It is perfectly normal. But the more you
    go through the steps in these chapters, the more they will become second nature
    to you.
  prefs: []
  type: TYPE_NORMAL
- en: For those of you that have not done iOS development, Table Views are great for
    presenting a list of data. The iPhone's mail app is an example of what a Table
    View typically looks like.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to work with our first Table View. In our *Let's
    Eat* app, users select a specific location to look for restaurants.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first property list (plist)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our location data manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up our file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our Location View Controller class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to get our data to display inside our Table View. Before we start, create
    three new folders inside the Location folder—Controller, View, and Model. As we
    have previously done, right-click on the `Location` folder and hit New Group to
    create a new folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a Location View Controller class that we can use with
    our `UIViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Controller` folder you just created and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `LocationViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to connect our View Controller with our class:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `Locations.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select the View Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Utilities panel, select the Identity inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, select LocationViewController
    and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting our Table View with our Location View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, we have no way to communicate with our Table View and our Location
    View Controller. Let''s see how we can connect these two:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `LocationViewController.swift` file and add the following code after
    the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file by hitting c*md* + *S*. Your file should look like the following,
    with an empty circle next to the variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0b32985-7dd5-4564-b35b-57d77cd5833b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we get started, we are going to clean up our `LocationViewController.swift`
    file. Delete everything after `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98dcab8c-4a94-48d8-90ab-206be210b37e.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let’s connect our table view to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Open `Explore.storyboard` again and make sure that you have the Location View
    Controller selected in the Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, in the Utilities panel, select Connections inspector. Under the Outlets
    section, you will see an empty circle, tableView:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de1aa60f-0a67-462e-af7f-3751df854d92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click and drag the empty circle to the Table View in the storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecd2a21c-46ab-49ee-994d-58e681bd751a.png)'
  prefs: []
  type: TYPE_IMG
- en: We have now connected our Table View to our Location View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Digging into our Table View code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get data into our Table View, we must conform to a protocol as we did with
    the Collection View. In this case, we must implement `UITableViewDataSource`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to update our `class` declaration. We currently have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to add `UITableViewDataSource`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding the data source and delegate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed in the previous chapter, we need to add a data source and delegate
    to our Table View. Table View uses **dynamic cells**, which we are required to
    add:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Table View in the Outline view, and then Connections inspector in the
    Utilities panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on and drag from `dataSource` to the Location View Controller in the
    Outline view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8015c23-88f1-47dc-ac65-784284b04580.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat with the `delegate` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3fc7d78b-217d-4d29-9b19-f4829aa07f51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Utilities panel, select the Attributes inspector, if not already selected,
    and make sure you have the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Style: `Basic`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Identifier: `locationCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Selection: `Gray`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Accessory: `Disclosure indicator`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, for us to display anything in `Tableview`, we need to add the `UITableViewDataSource`
    protocol. Our protocol requires that we implement the following three methods.
    Add the following after the closing curly brace of `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46ecb8ae-0d7d-49f6-a9cf-6d60fd28c405.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down the code to understand what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: This method tells our Table View how many rows we want to display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: Here, we tell our Table View that we want to display `15` rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: This method tells our Table View how many sections we want to display.
    Sections in Table Views are typically used as headers, but they can be used however
    you choose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: We tell our Table View that we only want one section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: Our third and final method gets called for every item we need.
    Therefore, in our case, it gets called 15 times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Part F**: Here, we create a cell every time *Part E* is called, either by
    taking one from the queue, if available, or by creating a new cell. The identifier,
    `locationCell`, is the name we gave it in the storyboard. Therefore, we are telling
    our Table View that we want to use this cell. If we had multiple Table Views,
    we would reference the identifier for the row and section in which we want the
    cell to display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since we do not have any data yet, we set our label to `A cell`. The `textLabel`
    variable is the default label we got when we selected a basic cell.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part G**: Finally, after each time we create a new cell, we give the cell
    back to the Table View to display that cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd*
    + *R*) to see what happens. You should now see `A cell` repeating 15 times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60d51788-464d-46bd-b406-06fb9f72c58b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding locations to our Table View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have our Table View displaying data, but we need it to display a list
    of actual locations. Let''s update our Table View to show our list of locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Directly under the `tableView` variable, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should now look like mine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec58a855-49a8-4584-b568-10712d502706.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, to update our cell to display the locations, we need to replace the `cell.textLabel?.text
    = "A cell"` line with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd* +
    *R*). You should see the following after clicking Select a location in your simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18a23db4-9ceb-4189-96dd-d32235ce5348.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, there are a couple of problems. If we add another location to the array,
    it crashes because we are manually setting the value. Also, we are just loading
    this list from an array we built in the app. If we decide to add more locations,
    we would have to update our cell number count as well as our list of locations.
    Therefore, we should instead pull our locations from a plist, as we did in the
    last chapter. Plists provide a place where we can quickly add or remove a location
    from our list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first property list (plist)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we used a provided plist to load our cuisine list. We will
    do the same in this chapter, but now that you are familiar with what a plist is,
    we will create one from scratch together.
  prefs: []
  type: TYPE_NORMAL
- en: I use plists all the time, from creating menus to having a file that holds app
    settings such as colors or social media URLs. I find them very useful, especially
    if I need to come back later and update or change things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn how to create a plist from scratch. To create a plist in Xcode,
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder inside Location and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Choose a template for your new file, select iOS at the top, and then type
    `Property` in the filter field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c251af0-61bd-4818-ac9d-e45e9e242525.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Property List and then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file Locations and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now have a file that looks like mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b55b32c8-d596-4b1b-aa70-917a61a60a57.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding data to our property list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in the previous chapter, our plist has a `Root`; for this new
    file, we created a `Dictionary` as our `Root` type. Since we are going to display
    a list of locations, we need our `Root` to be an `Array`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Dictionary in the plist and change it to Array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d82da426-1123-4af3-8663-68a5df73c625.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see a plus next to Array (if the plus button is not displaying,
    just hover your mouse over that line item and it will appear):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2699eb7-ff5f-4cb0-9abe-6f5192b6aab2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the plus button and it will add a new item with a String type. Change
    the type to Dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da6dec79-edcd-45f9-910b-465d05a97adb.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the plus button that appears when you hover over Item 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to update the New Item**.** Update the Key property to say state
    and update the Value property of the new item by entering CO:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0b10a33-7d42-42c6-b145-e192ddbe5deb.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, click on the plus button when you hover over state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the Key property to say city and update the Value property of the new
    item by entering Aspen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab0a6128-8f84-40bb-99f5-644aeed785da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on the disclosure arrow for Item 0 to close it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/183c5e4d-dfda-4cc5-a6b5-0b4672c5f459.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Item 0 and then hit *cmd* + *C* to copy and then *cmd* + *V* to paste:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f760a93c-cf6c-468e-b670-4b9a2a12145a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open up Item 1 and update the city to Boston and the state to MA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af18427a-052a-4fa6-9f55-92118210ef14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Continue with the same process by adding the following cities and states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Key** | **Type** | **City** | **State** |'
  prefs: []
  type: TYPE_TB
- en: '| Item 2 | String | Charleston | NC |'
  prefs: []
  type: TYPE_TB
- en: '| Item 3 | String | Chicago | IL |'
  prefs: []
  type: TYPE_TB
- en: '| Item 4 | String | Houston | TX |'
  prefs: []
  type: TYPE_TB
- en: '| Item 5 | String | Las Vegas | NV |'
  prefs: []
  type: TYPE_TB
- en: '| Item 6 | String | Los Angeles | CA |'
  prefs: []
  type: TYPE_TB
- en: '| Item 7 | String | Miami | FL |'
  prefs: []
  type: TYPE_TB
- en: '| Item 8 | String | New Orleans | LA |'
  prefs: []
  type: TYPE_TB
- en: '| Item 9 | String | New York | NY |'
  prefs: []
  type: TYPE_TB
- en: '| Item 10 | String | Philadelphia | PA |'
  prefs: []
  type: TYPE_TB
- en: '| Item 11 | String | Portland | OR |'
  prefs: []
  type: TYPE_TB
- en: '| Item 12 | String | San Antonio | TX |'
  prefs: []
  type: TYPE_TB
- en: '| Item 13 | String | San Francisco | CA |'
  prefs: []
  type: TYPE_TB
- en: 'When you are done, your file should look like mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/755deccf-0195-4576-824d-e1e9924c1b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We just set up our data source. We now need to create a data manager similar
    to the one that we made in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our location data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the `LocationDataManager` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Model` folder in the `Location` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Choose a template for your new file, select iOS at the top and then Swift
    File. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `LocationDataManager`, and then hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to define our class definition now, so add the following under the
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the class declaration, add the following variable to keep our array
    private, as there is no reason to have to access this outside the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the following methods after our variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These methods are the same as we had in `ExploreDataManager`, except that we
    are getting back an array of dictionary objects from our plist.
  prefs: []
  type: TYPE_NORMAL
- en: Working with our data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now need to update our `LocationViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, because we do not need it anymore, delete the following array that we
    created in the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, since we need to create an instance of our data manager in this class,
    add the following above `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `viewDidLoad()`, we want to fetch the data for the Table View, so add
    the following under `super.viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your `viewDidLoad()` should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `numberOfRowsInSection()` method, instead of `15` we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we need to update our `cellForRowAt`. Replace `cell.textLabel?.text
    = arrLocations[indexPath.item]` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `cellForRowAt` should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let's build and run the project by hitting the Play button (or using *cmd* +
    *R*). We should still see our locations, but now they are coming from our plist.
    Before we finish this chapter, our project navigator is a mess right now. We have
    files just in the main folder. Putting files into the main folder without any
    organization is not something you want to do. Let’s organize our files before
    we add any more.
  prefs: []
  type: TYPE_NORMAL
- en: Creating folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating folders is easy: all you have to do is right-click on the `LetsEat`
    folder, and you can create a new group. You can also select multiple files and
    put all of the selected items into a new group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create three folders first, called `Application`, `Misc`, and
    `Controllers`. When you are done you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91c33558-05f5-45ea-885b-35b192224b35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to move `Info.plist`, `Assets.xcasset`, `App Delegate`, `LaunchScreen.storyboard`,
    and `Main.storyboard` all into the `Application` folder. You can *cmd* + click
    each and then drag them one at a time. When you are done, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b53ca43e-83a6-4815-8aa6-fb2de4db18ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you want to create a folder for all of the View Controllers. Inside the
    `Controllers` folder, add the following folders: `Photo Filter`, `Restaurant Details`,
    `Review Form`, `Explore`, `Restaurants`, `Locations`, and `Map`. Then drag each
    storyboard file into each corresponding folder. Drag `ExploreData.plist`, `ExploreItem`,
    `ExploreCell`, and `ExploreDataManager` into the `Explore` folder. Then drag `RestaurantViewController`
    into the `Restaurants` folder. Finally, drag `LocationViewController`, `LocationDataManager`,
    and `Locations.plist` into the `Locations` folder. When you are done, you should
    have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe497fcc-f857-468f-9a07-75f99fc0c9e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Even though we cleaned this area, I do not typically use it to open and find
    files because it takes way too long. To open files, I always use *cmd* + *O* and
    type the name of the file. Opening and closing folders takes forever. You should
    learn this shortcut as it will increase your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: For now, this is good enough to move on. We could add more folders as we go,
    but this is a lot better than what we had before.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we worked with a Table View that has dynamic cells, which allows
    the Table View to change based on the data. We also worked with unwinding segues.
    Later, we passed data that we need through our segues. Along with segues, we looked
    at plists, learning how to create them as well as how to add data to them. Finally,
    we created our locations data manager, which is responsible for giving data to
    the View Controller.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will work with a Table View that has static cells to
    build out our restaurant detail. Static cells are excellent for forms or detail
    views. We could build out the restaurant detail using a Collection View; however,
    a static Table View will work well and will be less complicated.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, before moving on to the next chapter, you may want to get the
    starter project for this chapter and try to do it again without using the book
    as your guide. Going back helps solidify your understanding of what you have learned.
  prefs: []
  type: TYPE_NORMAL
