["```swift\n    @interface AssetsDictionary : NSObject {\n        NSMutableDictionary *_dict;\n    }\n    ```", "```swift\n    @property BOOL verbose;\n    ```", "```swift\n    -(id) registerAsset:(NSString *)name withContent:(id)content;\n    ```", "```swift\n    -(void) unregisterAsset:(NSString *)name;\n    ```", "```swift\n    -(void) clear;\n    ```", "```swift\n    - (id)init\n    {\n        if ((self = [super init])) {\n            _dict = [[NSMutableDictionary alloc] init];\n            _verbose = NO;\n        }\n\n        return self;\n    }\n    ```", "```swift\n    -(id) registerAsset:(NSString *)name withContent:(id)content\n    {\n      id result;\n\n      if ([_dict objectForKey:name] == nil) {\n        [_dict setObject:content forKey:name];\n\n        result = content;\n\n        if (self.verbose) {\n          NSLog(@\"Asset %@ does not exist. Registering.\", name);\n        }\n      } else {\n        result = [_dict objectForKey:name];\n\n        if (self.verbose) {\n          NSLog(@\"Asset %@ already exists. Using cached value.\", name);\n        }\n      }\n\n      return result;\n    }\n    ```", "```swift\n    -(void) unregisterAsset:(NSString *)name\n    {\n        if ([_dict objectForKey:name] != nil) {\n            [_dict removeObjectForKey:name];\n        }\n    }\n    ```", "```swift\n    -(void) clear\n    {\n        [_dict removeAllObjects];\n    }\n    ```", "```swift\n    #import \"AssetsDictionary.h\"\n    ```", "```swift\n    AssetsDictionary* assets = [[AssetsDictionary alloc] init];\n    assets.verbose = YES;\n    [assets registerAsset:@\"myAsset\" withContent:@\"test\"];\n    [assets registerAsset:@\"myAsset\" withContent:@\"test\"];\n    ```", "```swift\n    -(SPTexture *) registerTexture:(NSString *)filename;\n    ```", "```swift\n    -(SPTexture *) registerTexture:(NSString *)filename\n    {\n        if ([_dict objectForKey:filename] == nil) {\n        return (SPTexture *) [self registerAsset:filename withContent:[SPTexture textureWithContentsOfFile:filename]];\n      } else {\n        return (SPTexture *) [self registerAsset:filename withContent:nil];\n      }\n    }\n    ```", "```swift\n    TextureManager* textureAssets = [[TextureManager alloc] init];\n    textureAssets.verbose = YES;\n    [textureAssets registerTexture:@\"Default.png\"];\n    [textureAssets registerTexture:@\"Default.png\"];\n    ```", "```swift\n    -(SPSound *) registerSound:(NSString *)filename;\n    ```", "```swift\n    -(SPSound *) registerSound:(NSString *)filename\n    {\n        if ([_dict objectForKey:filename] == nil) {\n        return (SPSound *) [self registerAsset:filename withContent:[SPSound soundWithContentsOfFile:filename]];\n      } else {\n        return (SPSound *) [self registerAsset:filename withContent:nil];\n      }\n    }\n    ```", "```swift\n    -(NSString *) registerPlainText:(NSString *)filename;\n    ```", "```swift\n    -(NSDictionary *) registerDictionaryFromJSON:(NSString *)filename;\n    ```", "```swift\n    if ([_dict valueForKey:filename] == nil) {\n      NSString *path = [[NSBundle mainBundle] pathForResource:filename];\n      NSString *content = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n\n      return (NSString *) [self registerAsset:filename withContent:content];\n    } else {\n      return (NSString *) [self registerAsset:filename withContent:nil];\n    }\n    ```", "```swift\n    if ([_dict valueForKey:filename] == nil) {\n      NSString *path = [[NSBundle mainBundle] pathForResource:filename];\n\n      NSData *data = [NSData dataWithContentsOfFile:path];\n      NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];\n\n      return (NSDictionary *) [self registerAsset:filename withContent:dict];\n    } else {\n      return (NSDictionary *) [self registerAsset:filename withContent:nil];\n    }\n    ```", "```swift\n    {\n        \"name\": \"example\",\n        \"a\": 5,\n        \"b\": 6\n    }\n    ```", "```swift\n    Hello from text file.\n    ```", "```swift\n    FileManager* fileAssets = [[FileManager alloc] init];\n    fileAssets.verbose = YES;\n    NSDictionary *data = [fileAssets registerDictionaryFromJSON:@\"example.json\"];\n\n    NSLog(@\"Printing values from dictionary:\");\n    NSLog(@\"%@\", data[@\"name\"]);\n    NSLog(@\"%@\", data[@\"a\"]);\n    NSLog(@\"%@\", data[@\"b\"]);\n\n    NSLog(@\"Loading from text file and displaying as a string:\");\n    NSLog(@\"%@\", [fileAssets registerPlainText:@\"example.txt\"]);\n    NSLog(@\"%@\", [fileAssets registerPlainText:@\"example.txt\"]);\n    ```", "```swift\n#import \"AssetsDictionary.h\"\n\n@interface FileManager : AssetsDictionary\n\n-(NSString *) registerPlainText:(NSString *)filename;\n-(NSDictionary *) registerDictionaryFromJSON:(NSString *)filename;\n\n@end\n```", "```swift\n#import \"FileManager.h\"\n\n@implementation FileManager\n\n-(NSString *) registerPlainText:(NSString *)filename\n{\n    if ([_dict valueForKey:filename] == nil) {\n        NSString *path = [[NSBundle mainBundle] pathForResource:filename];\n        NSString *content = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:nil];\n\n        return (NSString *) [self registerAsset:filename withContent:content];\n    } else {\n        return (NSString *) [self registerAsset:filename withContent:nil];\n    }\n}\n\n-(NSDictionary *) registerDictionaryFromJSON:(NSString *)filename\n{\n    if ([_dict valueForKey:filename] == nil) {\n        NSString *path = [[NSBundle mainBundle] pathForResource:filename];\n\n        NSData *data = [NSData dataWithContentsOfFile:path];\n        NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];\n        return (NSDictionary *) [self registerAsset:filename withContent:dict];\n    } else {\n        return (NSDictionary *) [self registerAsset:filename withContent:nil];\n    }\n}\n\n@end\n```", "```swift\n    -(NSString *) registerPlainText:(NSString *)filename\n    {\n        if ([_dict valueForKey:filename] == nil) {\n        NSError *error;\n\n            NSString *path = [[NSBundle mainBundle] pathForResource:filename];\n            NSString *content = [NSString stringWithContentsOfFile:path encoding:NSUTF8StringEncoding error:&error];\n\n        if (error != nil) {\n     NSLog(@\"Error while loading plain text file: %@\", error);\n     }\n\n            return (NSString *) [self registerAsset:filename withContent:content];\n        } else {\n            return (NSString *) [self registerAsset:filename withContent:nil];\n        }\n    }\n    ```", "```swift\n    +(SPTexture *) texture:(NSString *)filename;\n    +(SPSound *) sound:(NSString *)filename;\n    +(NSString *) plainText:(NSString *)filename;\n    +(NSDictionary *) dictionaryFromJSON:(NSString *)filename;\n    ```", "```swift\n    #import \"TextureManager.h\"\n    #import \"SoundManager.h\"\n    #import \"FileManager.h\"\n    ```", "```swift\n    static TextureManager *textureAssets = nil;\n    static SoundManager *soundAssets = nil;\n    static FileManager *fileAssets = nil;\n    ```", "```swift\n    +(void) initialize\n    {\n        if (!textureAssets) {\n            textureAssets = [[TextureManager alloc] init];\n        }\n\n        if (!soundAssets) {\n            soundAssets = [[SoundManager alloc] init];\n        }\n\n        if (!fileAssets) {\n            fileAssets = [[FileManager alloc] init];\n        }\n    }\n    ```", "```swift\n    +(SPTexture *) texture:(NSString *)filename\n    {\n        return [textureAssets registerTexture:filename];\n    }\n\n    +(SPSound *) sound:(NSString *)filename\n    {\n        return [soundAssets registerSound:filename];\n    }\n\n    +(NSString *) plainText:(NSString *)filename\n    {\n        return [fileAssets registerPlainText:filename];\n    }\n\n    +(NSDictionary *) dictionaryFromJSON:(NSString *)filename\n    {\n        return [fileAssets registerDictionaryFromJSON:filename];\n    }\n    ```", "```swift\n    NSDictionary *data = [Assets dictionaryFromJSON:@\"example.json\"];\n\n    NSLog(@\"Printing values from dictionary:\");\n    NSLog(@\"%@\", data[@\"name\"]);\n    NSLog(@\"%@\", data[@\"a\"]);\n    NSLog(@\"%@\", data[@\"b\"]);\n\n    NSLog(@\"Loading from text file and displaying as a string:\");\n    NSLog(@\"%@\", [Assets plainText:@\"example.txt\"]);\n    NSLog(@\"%@\", [Assets plainText:@\"example.txt\"]);\n    ```", "```swift\n#import <Foundation/Foundation.h>\n\n@interface Assets : NSObject\n\n+(SPTexture *) texture:(NSString *)filename;\n+(SPSound *) sound:(NSString *)filename;\n+(NSString *) plainText:(NSString *)filename;\n+(NSDictionary *) dictionaryFromJSON:(NSString *)filename;\n\n@end\n```", "```swift\n#import \"Assets.h\"\n#import \"TextureManager.h\"\n#import \"SoundManager.h\"\n#import \"FileManager.h\"\n\nstatic TextureManager *textureAssets = nil;\nstatic SoundManager *soundAssets = nil;\nstatic FileManager *fileAssets = nil;\n\n@implementation Assets\n\n+(void) initialize\n{\n    if (!textureAssets) {\n        textureAssets = [[TextureManager alloc] init];\n    }\n\n    if (!soundAssets) {\n        soundAssets = [[SoundManager alloc] init];\n    }\n\n    if (!fileAssets) {\n        fileAssets = [[FileManager alloc] init];\n    }\n}\n\n+(SPTexture *) texture:(NSString *)filename\n{\n    return [textureAssets registerTexture:filename];\n}\n\n+(SPSound *) sound:(NSString *)filename\n{\n    return [soundAssets registerSound:filename];\n}\n\n+(NSString *) plainText:(NSString *)filename\n{\n    return [fileAssets registerPlainText:filename];\n}\n\n+(NSDictionary *) dictionaryFromJSON:(NSString *)filename\n{\n    return [fileAssets registerDictionaryFromJSON:filename];\n}\n\n@end\n```", "```swift\n    SPImage* image = [SPImage imageWithTexture:[Assets texture:@\"Default.png\"]]; \n    ```", "```swift\n#import \"Game.h\" \n#import \"Assets.h\"\n\n@implementation Game\n\n- (id)init\n{\n    if ((self = [super init]))\n    {\n        Sparrow.stage.color = 0xffffff;\n\n        SPImage* image = [SPImage imageWithTexture:[Assets texture:@\"Default.png\"]];\n\n    NSDictionary *data = [Assets dictionaryFromJSON:@\"example.json\"];\n\n    NSLog(@\"Printing values from dictionary:\");\n    NSLog(@\"%@\", data[@\"name\"]);\n    NSLog(@\"%@\", data[@\"a\"]);\n    NSLog(@\"%@\", data[@\"b\"]);\n\n    NSLog(@\"Loading from text file and displaying as a string:\");\n    NSLog(@\"%@\", [Assets plainText:@\"example.txt\"]);\n    NSLog(@\"%@\", [Assets plainText:@\"example.txt\"]);\n\n        // Our whole cardboard puppet doll code here\n\n        [self addChild:image];\n    }\n    return self;\n}\n\n@end\n```", "```swift\n    @property SPSprite* guiLayer;\n    ```", "```swift\n    @property NSString* name;\n    ```", "```swift\n    @property id director;\n    ```", "```swift\n    -(id) init\n    {\n        if ((self = [super init])) {\n            self.guiLayer = [[SPSprite alloc] init];\n            self.director = nil;\n            self.name = @\"scene\";\n        }\n\n        return self;\n    }\n    ```", "```swift\n    -(id) initWithName:(NSString *) name\n    {\n        self = [self init];\n        self.name = name;\n\n        return self;\n    }\n    ```", "```swift\n    -(void) addScene:(Scene *)scene;\n    ```", "```swift\n    -(void) addScene:(Scene *)scene withName:(NSString *)name;\n    ```", "```swift\n    -(void) showScene:(NSString *)name;\n    ```", "```swift\n    -(void) addScene:(Scene *)scene withName:(NSString *)name\n    {\n      scene.name = name;\n      _dict[name] = scene;\n\n      scene.director = self;\n      [self addChild:scene];\n    }\n    ```", "```swift\n    -(void) addScene:(Scene *)scene\n    {\n        [self addScene:scene withName:scene.name];\n    }\n    ```", "```swift\n    -(void) showScene:(NSString *)name\n    {\n      for (NSString* sceneName in _dict) {\n        ((Scene *) _dict[sceneName]).visible = NO;\n      }\n\n      if (_dict[name] != nil) {\n        ((Scene *) _dict[name]).visible = YES;\n      }\n    }\n    ```"]