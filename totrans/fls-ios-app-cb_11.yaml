- en: Chapter 11. Rendering Web Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening a web page within Safari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a web page within an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the browsing history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a local web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically generating a local web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing a snapshot of a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web has become such an integral part of our lives that even iOS apps regularly
    use web browser technology to perform certain tasks. This chapter will explore
    the HTML capabilities of AIR for iOS; from simply launching a web page within
    Safari, to more integrated experiences where web content is rendered directly
    within the app itself.
  prefs: []
  type: TYPE_NORMAL
- en: We will primarily focus on the `StageWebView` class introduced in AIR 2.6\.
    However, those using Flash Professional CS5 and AIR 2.0 will find the *Opening
    a web page within Safari* recipe of use.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a web page within Safari
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AIR for iOS makes it possible to display web pages to the user. For many situations,
    the simplest solution is to launch Safari (the device's native web browser) from
    your app. Many applications take this approach and once the user is finished with
    the page, they can move back to their app using the app switcher.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to load a web page into Safari from an AIR for iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter11\recipe1\recipe.fla`
    into Flash Professional and use it as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on the stage is a movie clip with an instance name of `twitterBtn`.
    The movie clip's library symbol is linked to a class named `Button`, which was
    introduced in the *Handling user interaction* recipe from [Chapter 4](ch04.html
    "Chapter 4. Porting Flash Projects to iOS").
  prefs: []
  type: TYPE_NORMAL
- en: Let us write some ActionScript to load [www.twitter.com](http://www.twitter.com)
    into Safari when the button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will utilize the package-level `navigateToURL()` function to launch Safari.
    Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following three import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, listen for the `twitterBtn` movie clip being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add an event listener, which launches Safari and loads Twitter''s website
    into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and name the file `Main.as` when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move back to the FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and test it on your device. Tapping the **twitter** button will
    launch and load [www.twitter.com](http://www.twitter.com) into Safari. If you
    are using iOS 4 or above, then use the app switcher to find and move back to your
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `flash.net` package contains a package-level function named `navigateToURL()`
    that can be used to open a website directly within the Safari browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'It accepts as an argument, a `URLRequest` representing the URL to be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the request has been created, Safari can be launched and the requested
    URL loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `http` URI scheme within the requested URL is important. The `navigateToURL()`
    function can be used to launch many external iOS applications, with Safari being
    just one of them. By prefixing the URL with `http://`, AIR knows to launch Safari.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, being a package-level function, `navigateToURL()` must be explicitly
    added to your class'' list of import statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Your application will be suspended and moved to the background when Safari is
    launched from a device running iOS 4 or above. When the user is finished with
    the web page, it will be their responsibility to resume your app by selecting
    it from the home screen or app switcher. Launching Safari from an iOS 3 device,
    however, will close your app rather than suspend it—multitasking was not introduced
    until iOS 4\. If you plan to support iOS 3, then save your app's state before
    launching Safari.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.net.navigateToURL` and `flash.net.URLRequest`
    within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Handling multitasking, [Chapter 3](ch03.html "Chapter 3. Writing your First
    App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Exiting gracefully from an app, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Saving application state, [Chapter 4](ch04.html "Chapter 4. Porting Flash
    Projects to iOS")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Launching system applications, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a web page within an app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since AIR 2.6, it has been possible to load and display HTML content directly
    within an AIR for iOS app. This is convenient as it prevents the user from having
    to leave the app to view web pages. It also provides other benefits such as tighter
    OAuth (Open Authorization) integration, and the ability to include HTML banner
    ads.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to load a remote web page directly into your app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps covered here are only applicable to those using Flash Professional
    CS5.5 and AIR 2.6 or above. The AIR 2.0 SDK does not provide an API for loading
    HTML within an app.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter11\recipe2\recipe.fla`
    into Flash Professional CS5.5\. The FLA's stage is empty but its AIR for iOS settings
    have already been applied, saving you the effort when it comes to publishing it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be taking advantage of the `StageWebView` class to render a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following two import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `StageWebView` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, use a `StageWebView` instance to load a web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and name the file `Main.as` when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA and deploy the `.ipa` file to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When launched, the [www.yeahbutisitflash.com](http://www.yeahbutisitflash.com)
    website will be loaded and displayed within your app. You will also be able to
    interact with the page. Try it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `StageWebView` class allows both local and remote HTML content to be displayed
    within your app using iOS's native WebKit rendering engine.
  prefs: []
  type: TYPE_NORMAL
- en: '`StageWebView` is not actually a normal display object and, therefore, cannot
    be added to Flash''s display list. Instead it is a window that is drawn on top
    of your application, with items underneath being hidden from view. Unfortunately,
    this means you can''t place display objects on top of a region being used by a
    `StageWebView` object.'
  prefs: []
  type: TYPE_NORMAL
- en: When creating a `StageWebView` object, you must attach it directly to the stage
    and specify a viewport for its HTML content to be rendered within. To achieve
    this, set its `stage` and `viewPort` properties respectively. A `Rectangle` object
    is used to define the size and location of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Once the `StageWebView` object is instantiated and set up, you can load a web
    page by passing a URL to its `loadURL()` method. Use a String to define the URL
    and prefix it with the relevant URI scheme, which for most cases will be `http://`.
    Omitting the URI scheme will prevent the page from loading.
  prefs: []
  type: TYPE_NORMAL
- en: You can hide a `StageWebView` object from view by setting its `stage` property
    to `null`. When you are finished with a `StageWebView` object, call its `dispose()`
    method. Doing so will help the garbage collector reclaim the memory sooner.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.media.StageWebView` within
    Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following information provides additional detail.
  prefs: []
  type: TYPE_NORMAL
- en: Page load events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can determine the success or failure of a page load request by listening
    for the following two events from a `StageWebView` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Event.COMPLETE:` The requested page and its contents have loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ErrorEvent.ERROR:` An error occurred while attempting to load the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A load error can occur for a number of reasons, one of which is the omission
    of the URI scheme from the URL. Details regarding a load error can be obtained
    from the `ErrorEvent` object's `errorID` and `text` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multiple `StageWebView` objects can be created and used simultaneously; however,
    you only have limited control over their depth ordering. While it is not possible
    to dynamically change depths, the one most recently instantiated will sit above
    other `StageWebView` instances. However, Adobe recommends that you avoid overlapping
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The static `StageWebView.isSupported` property can be used to determine whether
    the `StageWebView` class is supported. Although this property returns `true` for
    all iOS devices, you should query it when writing cross-platform code.
  prefs: []
  type: TYPE_NORMAL
- en: Retina web pages within a standard screen resolution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On a Retina display device, a `StageWebView` object will exploit the device's
    higher resolution even if the AIR for iOS app itself is set to use the standard
    non-Retina resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Including banner ads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many developers include HTML banner ads directly within their applications.
    This allows the developer to distribute an app free of charge to the user, and
    generate revenue from the advertisements shown within the app instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `StageWebView` class makes it possible to display banner ads provided by
    services such as AdMob. Take a look at the AdMob website for more information:
    [www.admob.com](http://www.admob.com).'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Third parties such as Twitter and Google permit developers access to their server-side
    APIs. However, many of these APIs provide access to protected data and require
    the use of usernames and passwords. Many of these third parties now use the OAuth
    protocol, which gives users access to data while protecting their account credentials.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you intend to create an app that allows a user to sign in to
    Twitter, then OAuth will be required. To make the process as secure as possible,
    the user will actually sign in from a web page hosted by Twitter, meaning you
    will need to use a `StageWebView` object as part of your client implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'A two-part video tutorial by Adobe Developer Evangelist, Piotr Walczyszyn is
    available from Adobe TV demonstrating how to use OAuth within Adobe AIR applications:
    [http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization](http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization).
    For a more specific mobile example of OAuth using `StageWebView`, take a look
    at this video by Adobe Platform Evangelist, Mark Doherty: [www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support](http://www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support).'
  prefs: []
  type: TYPE_NORMAL
- en: 'An OAuth ActionScript 3.0 library is available at: [http://code.google.com/p/oauth-as3](http://code.google.com/p/oauth-as3).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Navigating the browsing history*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dynamically generating a local web page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Opening a web page within Safari*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Capturing a snapshot of a web page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating the browsing history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a user browses, visited pages are stored in the browsing history stack. The
    `StageWebView` class makes it possible to move through the browsing history and
    also detect when location changes take place.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will take you through the necessary steps to create a simple app
    that allows a user to navigate their page history as they browse.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need Flash Professional CS5.5 for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: An FLA has been provided as a starting point. From the book's accompanying code
    bundle, open `chapter11\recipe3\recipe.fla` into Flash Professional CS5.5.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting on the stage are two movie clips that represent navigation buttons.
    We will use these to move backwards and forwards through the user's history stack.
    The first has an instance name of `backBtn`, while the second is named `forwardBtn`.
  prefs: []
  type: TYPE_NORMAL
- en: Both movie clips are linked to a base class named `Button`. This class was introduced
    in the *Handling user interaction* recipe from [Chapter 4](ch04.html "Chapter 4. Porting
    Flash Projects to iOS").
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us make use of various methods and events related to the `StageWebView`
    class by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `StageWebView` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set up the button movie clips and the `StageWebView`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The StageWebView object's viewport has been positioned below the buttons, and
    a listener has been added for any changes to its URL. The navigation buttons have
    been made invisible as the user's history stack will initially be empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now add a `locationChanged()` method that handles a change to the `StageWebView`
    object''s URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method sets the visibility of each button depending on the user's position
    within the history stack. If they can't navigate further back, then backBtn will
    be hidden. If they can't move forward, then forwardBtn will be hidden.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally add methods that handle each of the buttons being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These two methods move the user either back or forward a page within the browsing
    history depending on the button that was pressed. Similar to the locationChanged()
    method, each button's visibility is also managed by its respective handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the class and name it `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA and deploy the app to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the app and select any of the hyperlinks within the website. After visiting
    several pages, navigate through your history by pressing the navigation buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you browse, pages you visit are stored in the browsing history stack. This
    includes pages you navigate to through hyperlinks or those loaded programmatically
    using `loadURL()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `StageWebView` class provides methods for navigating the browsing history.
    Call the `historyBack()` method to move to the previously visited page, or `historyForward()`
    to move to the next page in the stack. Before making either of these calls, you
    need to determine if there is actually a web page to move to. The `isHistoryBackEnabled`
    property returns `true` if you are able to move back, while `isHistoryForwardEnabled`
    returns `true` if you can move forward.
  prefs: []
  type: TYPE_NORMAL
- en: Both `historyBack()` and `historyForward()` were called in response to the navigation
    buttons being pressed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: We also listened for `LocationChangeEvent.LOCATION_CHANGE`, which is dispatched
    by a `StageWebView` object when its URL has changed. Within this event's handler,
    both `isHistoryBackEnabled` and `isHistoryForwardEnabled` were queried, with the
    value of each used to set the visibility of `backBtn` and `forwardBtn`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information regarding managing the browsing history, perform a search
    for `flash.media.StageWebView` and `flash.events.LocationChangeEvent` within Adobe
    Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let us talk about some other options when dealing with the browsing history.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the current location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can determine the URL of the current page by querying a `StageWebView` object's
    read-only `location` property. The URL will be returned as a string.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and reloading pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `StageWebView` class provides limited control over the loading of a page.
    A `stop()` method is provided for halting the current page load, while the page
    can be reloaded by calling `reload()`.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting when the URL is about to change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to `LOCATION_CHANGE`, there is also `LOCATION_CHANGING`, which indicates
    that a page's URL is about to change. The `LOCATION_CHANGING` event is dispatched
    when a hyperlink is selected or script running within the page changes the URL.
    This event is convenient as you can stop the new URL from loading by calling the
    `LocationChangeEvent` object's `preventDefault()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, first add the following event listener within your constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add a handler for the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Publish and test the app. Your code changes will effectively block any hyperlinks
    that you select.
  prefs: []
  type: TYPE_NORMAL
- en: The `LOCATION_CHANGING` event does not fire after calls to `loadURL(), loadString(),
    historyBack(), historyForward()`, or `reload()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a local web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to remote web pages, it is also possible to load and display local
    HTML files using the `StageWebView` class.
  prefs: []
  type: TYPE_NORMAL
- en: Let us bundle a web page with your application and load it at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires Flash Professional CS5.5 and AIR 2.6 or above.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter11\recipe4\recipe.fla`
    and use it as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Sitting in the same location as the FLA is a folder named `html`, which contains
    the HTML page that has to be loaded by your app. Using Windows Explorer or Finder,
    take a look at the folder's contents. Also in the `index.html` file, you will
    find a PNG image and a style sheet, which are both used by the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will split this recipe into two parts. First we will use the AIR for iOS
    Settings panel to bundle the local HTML with the app. Then we will write the ActionScript
    required to load and render it.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let us start by bundling the HTML content with your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: Move to the AIR for iOS Settings panel by selecting **File** | **AIR for iOS
    Settings** from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click on the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the folder
    icon above the list; browse to and select `chapter11\recipe4\html`. You will now
    see **html** listed within the **Included files** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **OK** to close the **AIR for iOS Settings** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading the bundled HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the HTML now included with your FLA, we can focus on writing ActionScript.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following three additional import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `StageWebView` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, within the constructor, set up and load the local web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and when prompted, name the file `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move back to your FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA and test it on your device. The HTML page will load from
    your device's file system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading a web page stored locally on your device isn't too dissimilar to loading
    a remote page. The only extra step required is to first obtain the native path
    of the local HTML file that you wish to load. Passing a relative path to `StageWebView.loadURL()`
    will result in `ErrorEvent.ERROR` being dispatched.
  prefs: []
  type: TYPE_NORMAL
- en: All iOS apps are stored in their own home directory, and the app itself can
    read from and write to various sub-folders that exist within it. One such sub-folder
    is the Application directory, which is used to store the application and any files
    bundled with it. This is where you will find `index.html` and the other files
    associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AIR SDK provides the `flash.filesystem.File` class, which lets you reference
    commonly used directories including the Application directory. It is then possible
    to refine the path using the `File` class'' `resolvePath()` method. The following
    line of code obtains a reference to our `index.html` file stored within the Application
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `resolvePath()` method returns a `File` object. By calling its `nativePath`
    property, we can obtain a string that can be passed to the `StageWebView` object''s
    `loadURL()` method. The following is the complete line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As with any content you wish to bundle locally with your app, it is important
    that any file you include is sitting somewhere within the FLA's root folder.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.filesystem.File` and `flash.media.StageWebView`
    within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web pages rendered within a `StageWebView` instance don't have to live in perfect
    isolation from your app.
  prefs: []
  type: TYPE_NORMAL
- en: Bi-directional ActionScript/JavaScript communication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although limited, it is possible to perform bi-directional ActionScript/JavaScript
    communication using the `StageWebView` class. Doing so allows data to be passed
    between your app and an HTML page rendered within a `StageWebView` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation outlining the process involved can be found on the personal blog
    of Adobe developer, Sean Voisen: [http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview](http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Dynamically generating a local web page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Referencing an app''s common directories, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically generating a local web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered how to display both remote and local web pages using the `StageWebView`
    class. It is also possible to generate HTML on the fly and render it directly
    within your iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how this is done by dynamically creating a web page that makes use
    of a PNG image and a style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps covered here are only applicable to those using Flash Professional
    CS5.5 and at least version 2.6 of the AIR SDK. AIR 2.0 does not support the `StageWebView`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: We will require the use of the **as3corelib** API. It is a library of invaluable
    ActionScript 3.0 classes and utilities for all kinds of things including hashing,
    image encoding, and string manipulation. For this recipe, we will use the library's
    PNG encoder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The as3corelib API is available from GitHub at: [http://github.com/mikechambers/as3corelib](http://github.com/mikechambers/as3corelib).
    Click on the page''s **Downloads** link and select **as3corelib-.93.zip** from
    the **Download Packages** section. Extract the `.zip` file to your Documents folder
    at: `packt\flash-ios-cookbook\`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are using Windows, then the location of your Documents folder depends
    on the version of Windows you are running. For Windows Vista and Windows 7 it
    can be found at: `C:\Users\<username>\Documents\`. If you are using Windows XP,
    then it is at: `C:\Documents and Settings\<username>\My Documents\`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now open `chapter11\recipe5\recipe.fla` from the book's accompanying code bundle
    into Flash Professional CS5.5\. Sitting within the Library panel is a PNG image
    that has a linkage name of `Image` assigned to it. We will include this image
    within our web page. For the remainder of this recipe, we will work from this
    FLA.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is broken into two main steps. We will start by linking the as3corelib
    API to our FLA. Once that is done, we will make use of the API to write the ActionScript
    that generates the page.
  prefs: []
  type: TYPE_NORMAL
- en: Linking to the as3corelib API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The as3corelib API comes in the form of a `.swc` file that must be statically
    linked to your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **ActionScript Settings** from Flash Professional's drop-down
    menu. This will open the **Advanced ActionScript 3.0 Settings** panel where you
    can add the SWC.![Linking to the as3corelib API](img/1383_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Library path** tab, then click on the **Add New Path** icon, which
    is represented by a **+** symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on the **Browse to SWC file** icon and select the following file
    from your Documents folder: `packt\flash-ios-cookbook\as3corelib-.93\as3corelib-.93\lib\as3corelib.swc`.
    It will be added to a list of SWC files to be included with your app when published.
    Expand its entry by clicking on the icon to the left of its path and ensure that
    its **Link Type** is set to **Merged into code**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Advanced ActionScript 3.0 Settings** panel by clicking on the **OK**
    button at the bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating the HTML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the SWC linked to your FLA, you can now use the API it provides. Let us
    write some ActionScript to generate an HTML file and display it.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a document class and naming it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements, including as3corelib''s PNG encoder class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a `StageWebView` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the class'' constructor, call methods that will create the HTML page
    and load it into a `StageWebView` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the method which creates the HTML page, including the style sheet and
    PNG image that is used by it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `createHtml()` method calls two support methods—writeFile() and `writePng()`.
    Add both to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the method which loads and displays the generated HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and, when prompted, name the file `Main.as`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move back to your FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA and test it on your device. The app will dynamically generate
    the HTML page and display it on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe has made heavy use of Flash's `File` and `FileStream` classes. When
    creating an HTML page on the fly, the generated HTML must first be written to
    the device's file system before being loaded by a `StageWebView` instance. Any
    local resources used by the HTML, such as style sheets and images, must also be
    written to the file system and match the relative paths used by the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the `createHtml()` method, we declared and initialized a string that
    contained our HTML. The following is the generated HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Notice that it references a local style sheet named `styles.css` and an image
    named `image.png`. The image is the PNG from the FLA's library, while a string
    representing the style sheet is also generated within the `createHtml()` method.
  prefs: []
  type: TYPE_NORMAL
- en: All three—the HTML string, style sheet string, and PNG—are written to the same
    directory on the device's file system. This is done by our `writeFile()` and `writePng()`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: When an iOS app is installed, a few common directories are created within the
    app's home directory. One such directory is the Documents directory, which can
    be used to store application-specific data and temporary files. A reference to
    this directory can be obtained from the static `documentsDirectory` property of
    the `flash.filesystem.File` class. This is where we wrote our local web page to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `writeFile()` method creates a specified file within the Documents directory
    and writes a string of data to it. We call this method twice. First to write the
    HTML file and then again to write the style sheet. The file is created by using
    a `File` object to declare its location, then the object is passed to the `open()`
    method of a `FileStream` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `FileStream` object has been opened, the actual file is written by
    calling `writeUTFBytes()and` passing the string to it. A call to `close()` is
    then made to end the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing the PNG file to the Documents directory is performed by the `writePng()`
    method and isn''t too dissimilar to `writeHtml()`. First the bitmap data from
    the `Image` object is encoded in PNG format using the as3corelib library''s `PNGEncoder`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: A `FileStream` object is then used to write the PNG to the file system. The
    HTML and style sheet were both represented by a string. The PNG's data is stored
    within a `ByteArray` object. Therefore, rather than using `writeUTFBytes()`, a
    call to the `FileStream` object's `writeBytes()` method is made instead.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to create a `StageWebView` object and load `index.html` from
    the Documents directory into it. This is taken care of by the `loadHtml()` method.
  prefs: []
  type: TYPE_NORMAL
- en: More information regarding `flash.filesystem.File, flash.filesystem.FileStream`,
    and `flash.utils.ByteArray` can be obtained from Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are a few more considerations when dynamically generating HTML
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning-up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using the app's Documents folder to store temporary files, then remember
    to delete them when finished. This can be done using either the `File` class'
    `deleteFile()` or `deleteFileAsync()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Using loadString()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `StageWebView` class has a `loadString()` method allowing a specified HTML
    string to be displayed. While this approach may seem easier than the steps outlined
    in this recipe, HTML content displayed using `loadString()` cannot load local
    resources, such as image files or style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rendering a local web page*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing a snapshot of a web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to copy the contents of a `StageWebView` object's viewport into
    a bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will capture a snapshot of a web page and display a thumbnail
    of the bitmap below the page's viewport.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps covered in this recipe are only applicable to those using Flash Professional
    CS5.5 and AIR 2.6 or above. Flash Professional CS5 and AIR 2.0 do not provide
    support for the `StageWebView` class.
  prefs: []
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open `chapter11\recipe6\recipe.fla`
    into Flash Professional CS5.5\. The FLA's stage is empty but its AIR for iOS settings
    have already been applied.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to `StageWebView`, we will make use of the `Bitmap` and `BitmapData`
    classes to store and display the snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements and declare a `StageWebView` member variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set up the `StageWebView` object and listen for its
    web page successfully loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add an event handler that grabs a bitmap of the loaded page and displays
    a thumbnail of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the class and name its file `Main.as` when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move back to your FLA and save it too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now publish the FLA and test it on your device. Once the web page loads, a snapshot
    of it will be captured and displayed as a thumbnail at the bottom-left corner
    of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `StageWebView` class provides `drawViewPortToBitmapData()`, which writes
    the pixel data from a `StageWebView` object's viewport into a `BitmapData` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'First a `BitmapData` object needs to be instantiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Then the visible portion of the viewport can be drawn to the `BitmapData` object
    by calling `drawViewPortToBitmapData():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Care must be taken to ensure that the `BitmapData` object's dimensions match
    those of the viewport's. If not, then `drawViewPortToBitmapData()` will throw
    an `ArgumentError` exception. The `StageWebView.viewPort` property returns a `Rectangle`,
    which you can use to determine the viewport's width and height.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information regarding the `flash.display.Bitmap` and `flash.display.BitmapData`
    classes, refer to Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is one practical use for capturing a snapshot of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Overlaying display objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the `StageWebView` object renders on top of Flash's display list, it
    is possible to sit display objects above your HTML content in situations where
    user interaction with the HTML isn't required. This is done by capturing a bitmap
    image of the `StageWebView`, and replacing it with the bitmap. You can then add
    display objects such as buttons, panels, and menus above the bitmap representation.
    To hide a `StageWebView` object from view, set its `stage` property to `null`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Rendering a web page within an app*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
