- en: Chapter 11. Rendering Web Pages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。渲染网页
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Opening a web page within Safari
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Safari 中打开网页
- en: Rendering a web page within an app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用内渲染网页
- en: Navigating the browsing history
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航浏览历史记录
- en: Rendering a local web page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染本地网页
- en: Dynamically generating a local web page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态生成本地网页
- en: Capturing a snapshot of a web page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获网页快照
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The web has become such an integral part of our lives that even iOS apps regularly
    use web browser technology to perform certain tasks. This chapter will explore
    the HTML capabilities of AIR for iOS; from simply launching a web page within
    Safari, to more integrated experiences where web content is rendered directly
    within the app itself.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网已经成为我们生活中不可或缺的一部分，以至于 iOS 应用也经常使用网络浏览器技术来执行某些任务。本章将探讨 AIR for iOS 的 HTML
    功能；从简单地通过 Safari 启动网页，到更集成的体验，其中网页内容直接在应用本身中渲染。
- en: We will primarily focus on the `StageWebView` class introduced in AIR 2.6\.
    However, those using Flash Professional CS5 and AIR 2.0 will find the *Opening
    a web page within Safari* recipe of use.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要关注在 AIR 2.6 中引入的 `StageWebView` 类。然而，那些使用 Flash Professional CS5 和 AIR
    2.0 的人会发现 *在 Safari 中打开网页* 的配方很有用。
- en: Opening a web page within Safari
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Safari 中打开网页
- en: AIR for iOS makes it possible to display web pages to the user. For many situations,
    the simplest solution is to launch Safari (the device's native web browser) from
    your app. Many applications take this approach and once the user is finished with
    the page, they can move back to their app using the app switcher.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AIR for iOS 使得向用户显示网页成为可能。对于许多情况，最简单的解决方案是从您的应用中启动 Safari（设备的原生网络浏览器）。许多应用程序采用这种方法，一旦用户完成页面，他们可以使用应用切换器回到他们的应用。
- en: Let us see how to load a web page into Safari from an AIR for iOS app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从 AIR for iOS 应用中加载网页到 Safari。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: From the book's accompanying code bundle, open `chapter11\recipe1\recipe.fla`
    into Flash Professional and use it as a starting point.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的配套代码包中，将 `chapter11\recipe1\recipe.fla` 打开到 Flash Professional 中，并将其作为起点使用。
- en: Sitting on the stage is a movie clip with an instance name of `twitterBtn`.
    The movie clip's library symbol is linked to a class named `Button`, which was
    introduced in the *Handling user interaction* recipe from [Chapter 4](ch04.html
    "Chapter 4. Porting Flash Projects to iOS").
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段上有一个名为 `twitterBtn` 的动画剪辑。动画剪辑的库符号链接到一个名为 `Button` 的类，该类是在第 4 章 *处理用户交互* 的配方中引入的
    [Chapter 4](ch04.html "第 4 章。将 Flash 项目移植到 iOS")。
- en: Let us write some ActionScript to load [www.twitter.com](http://www.twitter.com)
    into Safari when the button is pressed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些 ActionScript 代码，在按钮被按下时将 [www.twitter.com](http://www.twitter.com) 加载到
    Safari 中。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will utilize the package-level `navigateToURL()` function to launch Safari.
    Carry out the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用包级 `navigateToURL()` 函数来启动 Safari。执行以下步骤：
- en: Create a new document class and name it `Main`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文档类并将其命名为 `Main`。
- en: 'Add the following three import statements to the class:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下三个导入语句添加到类中：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Within the constructor, listen for the `twitterBtn` movie clip being pressed:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，监听 `twitterBtn` 动画剪辑被按下：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now add an event listener, which launches Safari and loads Twitter''s website
    into it:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加一个事件监听器，它将启动 Safari 并将其加载到 Twitter 的网站中：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the class and name the file `Main.as` when prompted.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类并按提示将文件命名为 `Main.as`。
- en: Move back to the FLA and save it too.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 FLA 并也保存它。
- en: Publish the FLA and test it on your device. Tapping the **twitter** button will
    launch and load [www.twitter.com](http://www.twitter.com) into Safari. If you
    are using iOS 4 or above, then use the app switcher to find and move back to your
    app.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布 FLA 并在您的设备上测试它。点击 **twitter** 按钮将在 Safari 中启动并加载 [www.twitter.com](http://www.twitter.com)。如果您使用的是
    iOS 4 或更高版本，请使用应用切换器查找并回到您的应用。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `flash.net` package contains a package-level function named `navigateToURL()`
    that can be used to open a website directly within the Safari browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`flash.net` 包含一个名为 `navigateToURL()` 的包级函数，可以用于在 Safari 浏览器中直接打开网站。'
- en: 'It accepts as an argument, a `URLRequest` representing the URL to be loaded:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它接受一个参数，即表示要加载的 URL 的 `URLRequest`：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the request has been created, Safari can be launched and the requested
    URL loaded:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了请求，就可以启动 Safari 并加载请求的 URL：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `http` URI scheme within the requested URL is important. The `navigateToURL()`
    function can be used to launch many external iOS applications, with Safari being
    just one of them. By prefixing the URL with `http://`, AIR knows to launch Safari.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 请求 URL 中的 `http` URI 方案很重要。`navigateToURL()` 函数可以用来启动许多外部 iOS 应用程序，Safari 只是其中之一。通过在
    URL 前缀添加 `http://`，AIR 知道要启动 Safari。
- en: 'In addition, being a package-level function, `navigateToURL()` must be explicitly
    added to your class'' list of import statements:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，作为包级函数，`navigateToURL()` 必须明确添加到您类的导入语句列表中：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Your application will be suspended and moved to the background when Safari is
    launched from a device running iOS 4 or above. When the user is finished with
    the web page, it will be their responsibility to resume your app by selecting
    it from the home screen or app switcher. Launching Safari from an iOS 3 device,
    however, will close your app rather than suspend it—multitasking was not introduced
    until iOS 4\. If you plan to support iOS 3, then save your app's state before
    launching Safari.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当从运行 iOS 4 或更高版本的设备上启动 Safari 时，您的应用程序将被挂起并移动到后台。当用户完成网页后，他们需要从主屏幕或应用程序切换器中选择您的应用程序以恢复它。然而，从
    iOS 3 设备启动 Safari 将关闭您的应用程序而不是挂起它——多任务处理直到 iOS 4 才被引入。如果您计划支持 iOS 3，则在启动 Safari
    之前保存应用程序的状态。
- en: For more information, perform a search for `flash.net.navigateToURL` and `flash.net.URLRequest`
    within Adobe Community Help.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请在 Adobe Community Help 中搜索 `flash.net.navigateToURL` 和 `flash.net.URLRequest`。
- en: See also
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: '*Rendering a web page within an app*'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用程序内渲染网页*'
- en: '*Handling multitasking, [Chapter 3](ch03.html "Chapter 3. Writing your First
    App")*'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*处理多任务，[第 3 章](ch03.html "第 3 章。编写您的第一个应用程序")*'
- en: '*Exiting gracefully from an app, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*优雅地退出应用程序，[第 3 章](ch03.html "第 3 章。编写您的第一个应用程序")*'
- en: '*Saving application state, [Chapter 4](ch04.html "Chapter 4. Porting Flash
    Projects to iOS")*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保存应用程序状态，[第 4 章](ch04.html "第 4 章。将 Flash 项目移植到 iOS")*'
- en: '*Launching system applications, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*启动系统应用程序，[第 13 章](ch13.html "第 13 章。连接性、持久性和 URI 方案")*'
- en: Rendering a web page within an app
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序内渲染网页
- en: Since AIR 2.6, it has been possible to load and display HTML content directly
    within an AIR for iOS app. This is convenient as it prevents the user from having
    to leave the app to view web pages. It also provides other benefits such as tighter
    OAuth (Open Authorization) integration, and the ability to include HTML banner
    ads.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 AIR 2.6 以来，已经在 AIR for iOS 应用程序中直接加载和显示 HTML 内容成为可能。这很方便，因为它可以防止用户离开应用程序来查看网页。它还提供了其他好处，例如更紧密的
    OAuth（开放授权）集成，以及包含 HTML 横幅广告的能力。
- en: This recipe will show you how to load a remote web page directly into your app.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将向您展示如何直接将远程网页加载到您的应用程序中。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The steps covered here are only applicable to those using Flash Professional
    CS5.5 and AIR 2.6 or above. The AIR 2.0 SDK does not provide an API for loading
    HTML within an app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍的方法仅适用于使用 Flash Professional CS5.5 和 AIR 2.6 或更高版本的用户。AIR 2.0 SDK 不提供在应用程序中加载
    HTML 的 API。
- en: From the book's accompanying code bundle, open `chapter11\recipe2\recipe.fla`
    into Flash Professional CS5.5\. The FLA's stage is empty but its AIR for iOS settings
    have already been applied, saving you the effort when it comes to publishing it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的配套代码包中，将 `chapter11\recipe2\recipe.fla` 打开到 Flash Professional CS5.5 中。FLA
    的舞台是空的，但其 AIR for iOS 设置已经应用，这为您发布时节省了精力。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will be taking advantage of the `StageWebView` class to render a web page.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用 `StageWebView` 类来渲染网页。
- en: Create a document class and name it `Main`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文档类并命名为 `Main`。
- en: 'Add the following two import statements:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下两个导入语句：
- en: '[PRE6]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Declare a `StageWebView` member variable:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个 `StageWebView` 成员变量：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Within the constructor, use a `StageWebView` instance to load a web page:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，使用 `StageWebView` 实例来加载网页：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the class and name the file `Main.as` when prompted.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类并将文件命名为 `Main.as`。
- en: Now publish the FLA and deploy the `.ipa` file to your device.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在发布 FLA 并将 `.ipa` 文件部署到您的设备上。
- en: When launched, the [www.yeahbutisitflash.com](http://www.yeahbutisitflash.com)
    website will be loaded and displayed within your app. You will also be able to
    interact with the page. Try it!
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当启动时，[www.yeahbutisitflash.com](http://www.yeahbutisitflash.com) 网站将被加载并在您的应用程序中显示。您还可以与页面进行交互。试试看！
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `StageWebView` class allows both local and remote HTML content to be displayed
    within your app using iOS's native WebKit rendering engine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView` 类允许在您的应用中使用 iOS 的原生 WebKit 渲染引擎显示本地和远程的 HTML 内容。'
- en: '`StageWebView` is not actually a normal display object and, therefore, cannot
    be added to Flash''s display list. Instead it is a window that is drawn on top
    of your application, with items underneath being hidden from view. Unfortunately,
    this means you can''t place display objects on top of a region being used by a
    `StageWebView` object.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView` 实际上不是一个正常的显示对象，因此不能添加到 Flash 的显示列表中。相反，它是一个绘制在您的应用程序之上的窗口，下面的项目被隐藏。不幸的是，这意味着您不能在
    `StageWebView` 对象使用的区域上放置显示对象。'
- en: When creating a `StageWebView` object, you must attach it directly to the stage
    and specify a viewport for its HTML content to be rendered within. To achieve
    this, set its `stage` and `viewPort` properties respectively. A `Rectangle` object
    is used to define the size and location of the viewport.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `StageWebView` 对象时，您必须直接将其附加到舞台，并指定一个视口以在其中渲染其 HTML 内容。为此，分别设置其 `stage`
    和 `viewPort` 属性。使用 `Rectangle` 对象来定义视口的大小和位置。
- en: Once the `StageWebView` object is instantiated and set up, you can load a web
    page by passing a URL to its `loadURL()` method. Use a String to define the URL
    and prefix it with the relevant URI scheme, which for most cases will be `http://`.
    Omitting the URI scheme will prevent the page from loading.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `StageWebView` 对象被实例化并设置好，您可以通过传递一个 URL 给其 `loadURL()` 方法来加载一个网页。使用一个字符串来定义
    URL，并在其前加上相关的 URI 方案，对于大多数情况将是 `http://`。省略 URI 方案将阻止页面加载。
- en: You can hide a `StageWebView` object from view by setting its `stage` property
    to `null`. When you are finished with a `StageWebView` object, call its `dispose()`
    method. Doing so will help the garbage collector reclaim the memory sooner.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将 `stage` 属性设置为 `null` 来隐藏 `StageWebView` 对象。当您完成使用 `StageWebView` 对象时，调用其
    `dispose()` 方法。这样做将帮助垃圾回收器更快地回收内存。
- en: For more information, perform a search for `flash.media.StageWebView` within
    Adobe Community Help.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请在 Adobe Community Help 中搜索 `flash.media.StageWebView`。
- en: There's more...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The following information provides additional detail.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息提供了更多详细信息。
- en: Page load events
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面加载事件
- en: 'You can determine the success or failure of a page load request by listening
    for the following two events from a `StageWebView` object:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过监听来自 `StageWebView` 对象的以下两个事件来确定页面加载请求的成功或失败：
- en: '`Event.COMPLETE:` The requested page and its contents have loaded'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Event.COMPLETE:` 请求的页面及其内容已加载'
- en: '`ErrorEvent.ERROR:` An error occurred while attempting to load the page'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ErrorEvent.ERROR:` 在尝试加载页面时发生错误'
- en: A load error can occur for a number of reasons, one of which is the omission
    of the URI scheme from the URL. Details regarding a load error can be obtained
    from the `ErrorEvent` object's `errorID` and `text` properties.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多种原因可能会发生加载错误，其中之一是省略了 URL 中的 URI 方案。有关加载错误的详细信息可以从 `ErrorEvent` 对象的 `errorID`
    和 `text` 属性中获取。
- en: Multiple instances
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个实例
- en: Multiple `StageWebView` objects can be created and used simultaneously; however,
    you only have limited control over their depth ordering. While it is not possible
    to dynamically change depths, the one most recently instantiated will sit above
    other `StageWebView` instances. However, Adobe recommends that you avoid overlapping
    instances.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可以同时创建并使用多个 `StageWebView` 对象；然而，您对它们的深度排序控制有限。虽然无法动态更改深度，但最近实例化的对象将位于其他 `StageWebView`
    实例之上。但是，Adobe 建议您避免重叠实例。
- en: Checking for support
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查支持情况
- en: The static `StageWebView.isSupported` property can be used to determine whether
    the `StageWebView` class is supported. Although this property returns `true` for
    all iOS devices, you should query it when writing cross-platform code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 静态的 `StageWebView.isSupported` 属性可以用来确定 `StageWebView` 类是否受支持。尽管这个属性对所有 iOS
    设备都返回 `true`，但在编写跨平台代码时您应该查询它。
- en: Retina web pages within a standard screen resolution
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在标准屏幕分辨率内的 Retina 网页页面
- en: On a Retina display device, a `StageWebView` object will exploit the device's
    higher resolution even if the AIR for iOS app itself is set to use the standard
    non-Retina resolution.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Retina 显示设备上，即使 AIR for iOS 应用本身设置为使用标准的非 Retina 分辨率，`StageWebView` 对象也会利用设备的更高分辨率。
- en: Including banner ads
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含横幅广告
- en: Many developers include HTML banner ads directly within their applications.
    This allows the developer to distribute an app free of charge to the user, and
    generate revenue from the advertisements shown within the app instead.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者直接在他们的应用中包含HTML横幅广告。这允许开发者免费向用户分发应用，并通过应用内显示的广告来生成收入。
- en: 'The `StageWebView` class makes it possible to display banner ads provided by
    services such as AdMob. Take a look at the AdMob website for more information:
    [www.admob.com](http://www.admob.com).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView`类使得显示由AdMob等服务提供的横幅广告成为可能。有关更多信息，请访问AdMob网站：[www.admob.com](http://www.admob.com)。'
- en: OAuth support
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OAuth支持
- en: Third parties such as Twitter and Google permit developers access to their server-side
    APIs. However, many of these APIs provide access to protected data and require
    the use of usernames and passwords. Many of these third parties now use the OAuth
    protocol, which gives users access to data while protecting their account credentials.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方如Twitter和Google允许开发者访问其服务器端API。然而，许多这些API提供对受保护数据的访问，并需要使用用户名和密码。许多第三方现在使用OAuth协议，该协议使用户能够访问数据，同时保护其账户凭证。
- en: For example, if you intend to create an app that allows a user to sign in to
    Twitter, then OAuth will be required. To make the process as secure as possible,
    the user will actually sign in from a web page hosted by Twitter, meaning you
    will need to use a `StageWebView` object as part of your client implementation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您打算创建一个允许用户登录Twitter的应用，那么OAuth将是必需的。为了使过程尽可能安全，用户实际上将从Twitter托管的一个网页上登录，这意味着您需要将`StageWebView`对象作为客户端实现的一部分来使用。
- en: 'A two-part video tutorial by Adobe Developer Evangelist, Piotr Walczyszyn is
    available from Adobe TV demonstrating how to use OAuth within Adobe AIR applications:
    [http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization](http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization).
    For a more specific mobile example of OAuth using `StageWebView`, take a look
    at this video by Adobe Platform Evangelist, Mark Doherty: [www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support](http://www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Adobe开发者传教士Piotr Walczyszyn在Adobe TV上提供了一个两部分的视频教程，演示了如何在Adobe AIR应用中使用OAuth：[http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization](http://tv.adobe.com/watch/adc-presents/introduction-to-oauth-for-secure-user-and-application-authorization)。有关使用`StageWebView`的更具体的移动示例，请查看Adobe平台传教士Mark
    Doherty的视频：[www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support](http://www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support)。
- en: 'An OAuth ActionScript 3.0 library is available at: [http://code.google.com/p/oauth-as3](http://code.google.com/p/oauth-as3).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth ActionScript 3.0 库可在以下地址找到：[http://code.google.com/p/oauth-as3](http://code.google.com/p/oauth-as3).
- en: See also
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Navigating the browsing history*'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*浏览历史记录导航*'
- en: '*Dynamically generating a local web page*'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动态生成本地网页*'
- en: '*Opening a web page within Safari*'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Safari中打开网页*'
- en: '*Capturing a snapshot of a web page*'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*捕获网页快照*'
- en: Navigating the browsing history
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览历史记录导航
- en: As a user browses, visited pages are stored in the browsing history stack. The
    `StageWebView` class makes it possible to move through the browsing history and
    also detect when location changes take place.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户浏览时，访问过的页面会存储在浏览历史记录堆栈中。`StageWebView`类使得浏览历史记录的导航和检测位置变化成为可能。
- en: This recipe will take you through the necessary steps to create a simple app
    that allows a user to navigate their page history as they browse.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将指导您完成创建一个简单应用的必要步骤，该应用允许用户在浏览时导航其页面历史记录。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need Flash Professional CS5.5 for this recipe.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要Flash Professional CS5.5来完成此食谱。
- en: An FLA has been provided as a starting point. From the book's accompanying code
    bundle, open `chapter11\recipe3\recipe.fla` into Flash Professional CS5.5.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 已提供FLA作为起点。从本书的配套代码包中，将`chapter11\recipe3\recipe.fla`打开到Flash Professional CS5.5中。
- en: Sitting on the stage are two movie clips that represent navigation buttons.
    We will use these to move backwards and forwards through the user's history stack.
    The first has an instance name of `backBtn`, while the second is named `forwardBtn`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段上放置了两个代表导航按钮的电影剪辑。我们将使用这些按钮在用户的历史记录堆栈中前后移动。第一个的实例名称为`backBtn`，而第二个命名为`forwardBtn`。
- en: Both movie clips are linked to a base class named `Button`. This class was introduced
    in the *Handling user interaction* recipe from [Chapter 4](ch04.html "Chapter 4. Porting
    Flash Projects to iOS").
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个电影剪辑都链接到一个名为 `Button` 的基类。这个类是在第 4 章 *处理用户交互* 的配方中引入的 [第 4 章](ch04.html "第
    4 章。将 Flash 项目移植到 iOS")。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let us make use of various methods and events related to the `StageWebView`
    class by performing the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤使用与 `StageWebView` 类相关的各种方法和事件：
- en: Create a document class and name it `Main`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文档类，并将其命名为 `Main`。
- en: 'Add the following import statements:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下导入语句：
- en: '[PRE9]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Declare a `StageWebView` member variable:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个 `StageWebView` 成员变量：
- en: '[PRE10]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Within the constructor, set up the button movie clips and the `StageWebView`
    object:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，设置按钮电影剪辑和 `StageWebView` 对象：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The StageWebView object's viewport has been positioned below the buttons, and
    a listener has been added for any changes to its URL. The navigation buttons have
    been made invisible as the user's history stack will initially be empty.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`StageWebView` 对象的视口已定位在按钮下方，并添加了对 URL 变化的监听器。由于用户的浏览历史堆栈最初为空，导航按钮已被设置为不可见。'
- en: 'Now add a `locationChanged()` method that handles a change to the `StageWebView`
    object''s URL:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加一个 `locationChanged()` 方法来处理 `StageWebView` 对象 URL 的变化：
- en: '[PRE12]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method sets the visibility of each button depending on the user's position
    within the history stack. If they can't navigate further back, then backBtn will
    be hidden. If they can't move forward, then forwardBtn will be hidden.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此方法根据用户在历史记录堆栈中的位置设置每个按钮的可见性。如果他们无法进一步后退，则 `backBtn` 将被隐藏。如果他们无法前进，则 `forwardBtn`
    将被隐藏。
- en: 'Finally add methods that handle each of the buttons being pressed:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后添加处理每个按钮被按下的方法：
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: These two methods move the user either back or forward a page within the browsing
    history depending on the button that was pressed. Similar to the locationChanged()
    method, each button's visibility is also managed by its respective handler.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这两个方法根据按下的按钮将用户移动到浏览历史记录中的前一页或后一页。类似于 `locationChanged()` 方法，每个按钮的可见性也由其相应的处理程序管理。
- en: Save the class and name it `Main.as`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类并将其命名为 `Main.as`。
- en: Now publish the FLA and deploy the app to your device.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在发布 FLA 并将应用部署到您的设备上。
- en: Launch the app and select any of the hyperlinks within the website. After visiting
    several pages, navigate through your history by pressing the navigation buttons.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用并选择网站内的任意超链接。访问几页后，通过按导航按钮在历史记录中导航。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you browse, pages you visit are stored in the browsing history stack. This
    includes pages you navigate to through hyperlinks or those loaded programmatically
    using `loadURL()`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览过程中，访问的页面将被存储在浏览历史记录堆栈中。这包括通过超链接导航到的页面或使用 `loadURL()` 程序性加载的页面。
- en: The `StageWebView` class provides methods for navigating the browsing history.
    Call the `historyBack()` method to move to the previously visited page, or `historyForward()`
    to move to the next page in the stack. Before making either of these calls, you
    need to determine if there is actually a web page to move to. The `isHistoryBackEnabled`
    property returns `true` if you are able to move back, while `isHistoryForwardEnabled`
    returns `true` if you can move forward.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView` 类提供了导航浏览历史记录的方法。调用 `historyBack()` 方法可跳转到之前访问的页面，或调用 `historyForward()`
    跳转到堆栈中的下一页。在调用这些方法之前，您需要确定实际上是否有可以移动到的网页。`isHistoryBackEnabled` 属性返回 `true` 表示您能够后退，而
    `isHistoryForwardEnabled` 返回 `true` 表示您能够前进。'
- en: Both `historyBack()` and `historyForward()` were called in response to the navigation
    buttons being pressed by the user.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下导航按钮时，`historyBack()` 和 `historyForward()` 都被调用来响应。
- en: We also listened for `LocationChangeEvent.LOCATION_CHANGE`, which is dispatched
    by a `StageWebView` object when its URL has changed. Within this event's handler,
    both `isHistoryBackEnabled` and `isHistoryForwardEnabled` were queried, with the
    value of each used to set the visibility of `backBtn` and `forwardBtn`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还监听了 `LocationChangeEvent.LOCATION_CHANGE` 事件，该事件由 `StageWebView` 对象在 URL
    发生变化时触发。在此事件的处理程序中，查询了 `isHistoryBackEnabled` 和 `isHistoryForwardEnabled`，每个值都用于设置
    `backBtn` 和 `forwardBtn` 的可见性。
- en: For more information regarding managing the browsing history, perform a search
    for `flash.media.StageWebView` and `flash.events.LocationChangeEvent` within Adobe
    Community Help.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 关于管理浏览历史记录的更多信息，请在 Adobe Community Help 中搜索 `flash.media.StageWebView` 和 `flash.events.LocationChangeEvent`。
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Now let us talk about some other options when dealing with the browsing history.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈处理浏览历史记录时的一些其他选项。
- en: Obtaining the current location
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取当前位置
- en: You can determine the URL of the current page by querying a `StageWebView` object's
    read-only `location` property. The URL will be returned as a string.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查询`StageWebView`对象的只读`location`属性来确定当前页面的URL。URL将以字符串的形式返回。
- en: Stopping and reloading pages
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 停止和重新加载页面
- en: The `StageWebView` class provides limited control over the loading of a page.
    A `stop()` method is provided for halting the current page load, while the page
    can be reloaded by calling `reload()`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView`类在页面加载方面提供了有限的控制。提供了一个`stop()`方法来停止当前页面的加载，而可以通过调用`reload()`来重新加载页面。'
- en: Detecting when the URL is about to change
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测URL即将更改时
- en: In addition to `LOCATION_CHANGE`, there is also `LOCATION_CHANGING`, which indicates
    that a page's URL is about to change. The `LOCATION_CHANGING` event is dispatched
    when a hyperlink is selected or script running within the page changes the URL.
    This event is convenient as you can stop the new URL from loading by calling the
    `LocationChangeEvent` object's `preventDefault()` method.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`LOCATION_CHANGE`，还有一个`LOCATION_CHANGING`事件，表示页面的URL即将更改。当选择超链接或页面内运行的脚本更改URL时，会触发`LOCATION_CHANGING`事件。这个事件很方便，因为你可以通过调用`LocationChangeEvent`对象的`preventDefault()`方法来阻止新URL的加载。
- en: 'To see this in action, first add the following event listener within your constructor:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这个动作，首先在你的构造函数中添加以下事件监听器：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now add a handler for the event:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为该事件添加一个处理程序：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Publish and test the app. Your code changes will effectively block any hyperlinks
    that you select.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 发布并测试应用。你的代码更改将有效地阻止你选择的任何超链接。
- en: The `LOCATION_CHANGING` event does not fire after calls to `loadURL(), loadString(),
    historyBack(), historyForward()`, or `reload()`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`loadURL()`、`loadString()`、`historyBack()`、`historyForward()`或`reload()`之后，`LOCATION_CHANGING`事件不会触发。
- en: See also
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Rendering a web page within an app*'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用内渲染网页*'
- en: Rendering a local web page
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染本地网页
- en: In addition to remote web pages, it is also possible to load and display local
    HTML files using the `StageWebView` class.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 除了远程网页，还可以使用`StageWebView`类加载和显示本地HTML文件。
- en: Let us bundle a web page with your application and load it at runtime.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将网页与应用程序捆绑在一起，并在运行时加载。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires Flash Professional CS5.5 and AIR 2.6 or above.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱需要Flash Professional CS5.5和AIR 2.6或更高版本。
- en: From the book's accompanying code bundle, open `chapter11\recipe4\recipe.fla`
    and use it as a starting point.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 从书籍的配套代码包中打开`chapter11\recipe4\recipe.fla`，并将其作为起点。
- en: Sitting in the same location as the FLA is a folder named `html`, which contains
    the HTML page that has to be loaded by your app. Using Windows Explorer or Finder,
    take a look at the folder's contents. Also in the `index.html` file, you will
    find a PNG image and a style sheet, which are both used by the HTML.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与FLA相同的目录下有一个名为`html`的文件夹，其中包含你的应用必须加载的HTML页面。使用Windows资源管理器或Finder，查看文件夹的内容。在`index.html`文件中，你还会找到一个PNG图像和一个样式表，这两个都是HTML所使用的。
- en: How to do it...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We will split this recipe into two parts. First we will use the AIR for iOS
    Settings panel to bundle the local HTML with the app. Then we will write the ActionScript
    required to load and render it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个菜谱分成两部分。首先，我们将使用AIR for iOS设置面板将本地HTML与应用程序捆绑在一起。然后，我们将编写加载和渲染所需的ActionScript。
- en: Bundling the HTML
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捆绑HTML
- en: Let us start by bundling the HTML content with your FLA.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将HTML内容与FLA捆绑在一起开始。
- en: Move to the AIR for iOS Settings panel by selecting **File** | **AIR for iOS
    Settings** from Flash's drop-down menu.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择Flash的下拉菜单中的**文件** | **AIR for iOS设置**来移动到AIR for iOS设置面板。
- en: If it isn't already selected, click on the panel's **General** tab.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它尚未选中，请点击面板的**常规**选项卡。
- en: At the bottom of the panel is the **Included files** list. Click on the folder
    icon above the list; browse to and select `chapter11\recipe4\html`. You will now
    see **html** listed within the **Included files** list.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面板底部是**包含文件**列表。点击列表上方的文件夹图标；浏览到并选择`chapter11\recipe4\html`。现在你将在**包含文件**列表中看到**html**。
- en: Now click on **OK** to close the **AIR for iOS Settings** panel.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**确定**以关闭**AIR for iOS设置**面板。
- en: Loading the bundled HTML
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载捆绑的HTML
- en: With the HTML now included with your FLA, we can focus on writing ActionScript.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在HTML已经包含在你的FLA中，我们可以专注于编写ActionScript。
- en: Create a new document class and name it `Main`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文档类，并将其命名为`Main`。
- en: 'Add the following three additional import statements to the class:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向类中添加以下三个额外的导入语句：
- en: '[PRE16]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Declare a `StageWebView` member variable:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个 `StageWebView` 成员变量：
- en: '[PRE17]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, within the constructor, set up and load the local web page:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在构造函数中，设置并加载本地网页：
- en: '[PRE18]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save the class and when prompted, name the file `Main.as`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存类并在提示时，将文件命名为 `Main.as`。
- en: Move back to your FLA and save it too.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的 FLA 并保存它。
- en: Now publish the FLA and test it on your device. The HTML page will load from
    your device's file system.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在发布 FLA 并在你的设备上测试它。HTML 页面将从你的设备文件系统加载。
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Loading a web page stored locally on your device isn't too dissimilar to loading
    a remote page. The only extra step required is to first obtain the native path
    of the local HTML file that you wish to load. Passing a relative path to `StageWebView.loadURL()`
    will result in `ErrorEvent.ERROR` being dispatched.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的设备上加载存储的网页与加载远程页面并没有太大区别。唯一需要额外的一步是首先获取你想要加载的本地 HTML 文件的本地路径。将相对路径传递给 `StageWebView.loadURL()`
    将导致 `ErrorEvent.ERROR` 被分发。
- en: All iOS apps are stored in their own home directory, and the app itself can
    read from and write to various sub-folders that exist within it. One such sub-folder
    is the Application directory, which is used to store the application and any files
    bundled with it. This is where you will find `index.html` and the other files
    associated with it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 iOS 应用都存储在其自己的主目录中，应用本身可以读取和写入存在于其中的各种子文件夹。其中一个这样的子文件夹是应用程序目录，用于存储应用程序及其捆绑的任何文件。这就是你将找到
    `index.html` 及其相关文件的地方。
- en: 'The AIR SDK provides the `flash.filesystem.File` class, which lets you reference
    commonly used directories including the Application directory. It is then possible
    to refine the path using the `File` class'' `resolvePath()` method. The following
    line of code obtains a reference to our `index.html` file stored within the Application
    directory:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: AIR SDK 提供了 `flash.filesystem.File` 类，它允许你引用包括应用程序目录在内的常用目录。然后可以使用 `File` 类的
    `resolvePath()` 方法来细化路径。以下代码行获取了存储在应用程序目录中的 `index.html` 文件的引用：
- en: '[PRE19]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `resolvePath()` method returns a `File` object. By calling its `nativePath`
    property, we can obtain a string that can be passed to the `StageWebView` object''s
    `loadURL()` method. The following is the complete line of code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`resolvePath()` 方法返回一个 `File` 对象。通过调用其 `nativePath` 属性，我们可以获得一个可以传递给 `StageWebView`
    对象的 `loadURL()` 方法的字符串。以下是一行完整的代码：'
- en: '[PRE20]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As with any content you wish to bundle locally with your app, it is important
    that any file you include is sitting somewhere within the FLA's root folder.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与你希望与应用捆绑的任何本地内容一样，确保你包含的任何文件都位于 FLA 的根文件夹中。
- en: For more information, perform a search for `flash.filesystem.File` and `flash.media.StageWebView`
    within Adobe Community Help.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，请在 Adobe Community Help 中搜索 `flash.filesystem.File` 和 `flash.media.StageWebView`。
- en: There's more...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Web pages rendered within a `StageWebView` instance don't have to live in perfect
    isolation from your app.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `StageWebView` 实例内渲染的网页不必与你的应用完全隔离。
- en: Bi-directional ActionScript/JavaScript communication
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 双向 ActionScript/JavaScript 通信
- en: Although limited, it is possible to perform bi-directional ActionScript/JavaScript
    communication using the `StageWebView` class. Doing so allows data to be passed
    between your app and an HTML page rendered within a `StageWebView` instance.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有限，但可以使用 `StageWebView` 类执行双向 ActionScript/JavaScript 通信。这样做允许在应用和 `StageWebView`
    实例内渲染的 HTML 页面之间传递数据。
- en: 'Documentation outlining the process involved can be found on the personal blog
    of Adobe developer, Sean Voisen: [http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview](http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 Adobe 开发者 Sean Voisen 的个人博客上找到概述该过程的文档：[http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview](http://sean.voisen.org/blog/2010/10/making-the-most-of-stagewebview)。
- en: See also
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: '*Rendering a web page within an app*'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用内渲染网页*'
- en: '*Dynamically generating a local web page*'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*动态生成本地网页*'
- en: '*Referencing an app''s common directories, [Chapter 13](ch13.html "Chapter 13. Connectivity,
    Persistence, and URI Schemes")*'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*引用应用的常用目录，[第 13 章](ch13.html "第 13 章。连接性、持久性和 URI 方案")*'
- en: Dynamically generating a local web page
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态生成本地网页
- en: We have covered how to display both remote and local web pages using the `StageWebView`
    class. It is also possible to generate HTML on the fly and render it directly
    within your iOS app.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了如何使用`StageWebView`类显示远程和本地网页。还可以在iOS应用程序中动态生成HTML并直接渲染它。
- en: Let us see how this is done by dynamically creating a web page that makes use
    of a PNG image and a style sheet.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过动态创建一个使用PNG图像和样式表的网页来看看这是如何完成的。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The steps covered here are only applicable to those using Flash Professional
    CS5.5 and at least version 2.6 of the AIR SDK. AIR 2.0 does not support the `StageWebView`
    class.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这里介绍的操作仅适用于使用Flash Professional CS5.5和至少AIR SDK 2.6版本的用户。AIR 2.0不支持`StageWebView`类。
- en: We will require the use of the **as3corelib** API. It is a library of invaluable
    ActionScript 3.0 classes and utilities for all kinds of things including hashing,
    image encoding, and string manipulation. For this recipe, we will use the library's
    PNG encoder.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要使用**as3corelib** API。这是一个包含各种不可多得的ActionScript 3.0类和工具的库，包括散列、图像编码和字符串操作。在这个菜谱中，我们将使用库的PNG编码器。
- en: 'The as3corelib API is available from GitHub at: [http://github.com/mikechambers/as3corelib](http://github.com/mikechambers/as3corelib).
    Click on the page''s **Downloads** link and select **as3corelib-.93.zip** from
    the **Download Packages** section. Extract the `.zip` file to your Documents folder
    at: `packt\flash-ios-cookbook\`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: as3corelib API可在GitHub上获取：[http://github.com/mikechambers/as3corelib](http://github.com/mikechambers/as3corelib)。单击页面上的**下载**链接，从**下载包**部分选择**as3corelib-.93.zip**。将`.zip`文件解压缩到您的文档文件夹：`packt\flash-ios-cookbook\`。
- en: Note
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using Windows, then the location of your Documents folder depends
    on the version of Windows you are running. For Windows Vista and Windows 7 it
    can be found at: `C:\Users\<username>\Documents\`. If you are using Windows XP,
    then it is at: `C:\Documents and Settings\<username>\My Documents\`.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows，则您的文档文件夹的位置取决于您运行的Windows版本。对于Windows Vista和Windows 7，它可以在以下位置找到：`C:\Users\<username>\Documents\`。如果您使用的是Windows
    XP，则它位于：`C:\Documents and Settings\<username>\My Documents\`。
- en: Now open `chapter11\recipe5\recipe.fla` from the book's accompanying code bundle
    into Flash Professional CS5.5\. Sitting within the Library panel is a PNG image
    that has a linkage name of `Image` assigned to it. We will include this image
    within our web page. For the remainder of this recipe, we will work from this
    FLA.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在从书籍的配套代码包中打开`chapter11\recipe5\recipe.fla`到Flash Professional CS5.5中。在库面板中有一个被分配了`Image`链接名称的PNG图像。我们将在这个网页中包含这个图像。在接下来的这个菜谱中，我们将从这个FLA开始工作。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This recipe is broken into two main steps. We will start by linking the as3corelib
    API to our FLA. Once that is done, we will make use of the API to write the ActionScript
    that generates the page.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱分为两个主要步骤。我们将首先将as3corelib API链接到我们的FLA。一旦完成，我们将使用API编写生成页面的ActionScript。
- en: Linking to the as3corelib API
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接到as3corelib API
- en: The as3corelib API comes in the form of a `.swc` file that must be statically
    linked to your FLA.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: as3corelib API以`.swc`文件的形式提供，必须将其静态链接到您的FLA。
- en: Select **File** | **ActionScript Settings** from Flash Professional's drop-down
    menu. This will open the **Advanced ActionScript 3.0 Settings** panel where you
    can add the SWC.![Linking to the as3corelib API](img/1383_11_01.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Flash Professional的下拉菜单中选择**文件** | **ActionScript设置**。这将打开**高级ActionScript
    3.0设置**面板，您可以在其中添加SWC。![链接到as3corelib API](img/1383_11_01.jpg)
- en: Select the **Library path** tab, then click on the **Add New Path** icon, which
    is represented by a **+** symbol.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**库路径**选项卡，然后单击表示为**+**符号的**添加新路径**图标。
- en: 'Now click on the **Browse to SWC file** icon and select the following file
    from your Documents folder: `packt\flash-ios-cookbook\as3corelib-.93\as3corelib-.93\lib\as3corelib.swc`.
    It will be added to a list of SWC files to be included with your app when published.
    Expand its entry by clicking on the icon to the left of its path and ensure that
    its **Link Type** is set to **Merged into code**.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**浏览SWC文件**图标，从您的文档文件夹中选择以下文件：`packt\flash-ios-cookbook\as3corelib-.93\as3corelib-.93\lib\as3corelib.swc`。它将被添加到要随应用程序发布的SWC文件列表中。通过单击其路径左侧的图标展开其条目，并确保其**链接类型**设置为**合并到代码**。
- en: Close the **Advanced ActionScript 3.0 Settings** panel by clicking on the **OK**
    button at the bottom.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击底部的**确定**按钮关闭**高级ActionScript 3.0设置**面板。
- en: Generating the HTML
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成HTML
- en: With the SWC linked to your FLA, you can now use the API it provides. Let us
    write some ActionScript to generate an HTML file and display it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 将SWC链接到你的FLA后，你现在可以使用它提供的API。让我们写一些ActionScript来生成一个HTML文件并显示它。
- en: Start by creating a document class and naming it `Main`.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先创建一个文档类，并将其命名为`Main`。
- en: 'Add the following import statements, including as3corelib''s PNG encoder class:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下导入语句，包括as3corelib的PNG编码器类：
- en: '[PRE21]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Declare a `StageWebView` member variable:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`StageWebView`成员变量：
- en: '[PRE22]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Within the class'' constructor, call methods that will create the HTML page
    and load it into a `StageWebView` object:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的构造函数中，调用创建HTML页面并将其加载到`StageWebView`对象中的方法：
- en: '[PRE23]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now add the method which creates the HTML page, including the style sheet and
    PNG image that is used by it:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加创建HTML页面的方法，包括它所使用的样式表和PNG图像：
- en: '[PRE24]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `createHtml()` method calls two support methods—writeFile() and `writePng()`.
    Add both to the class:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createHtml()`方法调用两个支持方法——`writeFile()`和`writePng()`。将这两个方法都添加到类中：'
- en: '[PRE25]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Finally, add the method which loads and displays the generated HTML page:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加加载和显示生成的HTML页面的方法：
- en: '[PRE26]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the class and, when prompted, name the file `Main.as`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这个类，并在提示时将其文件命名为`Main.as`。
- en: Move back to your FLA and save it too.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的FLA并保存它。
- en: Now publish the FLA and test it on your device. The app will dynamically generate
    the HTML page and display it on the screen.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在发布FLA并在你的设备上测试它。应用将动态生成HTML页面并在屏幕上显示。
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe has made heavy use of Flash's `File` and `FileStream` classes. When
    creating an HTML page on the fly, the generated HTML must first be written to
    the device's file system before being loaded by a `StageWebView` instance. Any
    local resources used by the HTML, such as style sheets and images, must also be
    written to the file system and match the relative paths used by the HTML.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方大量使用了Flash的`File`和`FileStream`类。在动态创建HTML页面时，生成的HTML必须首先写入设备的文件系统，然后才能被`StageWebView`实例加载。HTML使用的任何本地资源，如样式表和图像，也必须写入文件系统，并且与HTML使用的相对路径相匹配。
- en: 'Within the `createHtml()` method, we declared and initialized a string that
    contained our HTML. The following is the generated HTML:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createHtml()`方法中，我们声明并初始化了一个包含我们HTML的字符串。以下是由它生成的HTML：
- en: '[PRE27]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice that it references a local style sheet named `styles.css` and an image
    named `image.png`. The image is the PNG from the FLA's library, while a string
    representing the style sheet is also generated within the `createHtml()` method.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它引用了一个名为`styles.css`的本地样式表和一个名为`image.png`的图像。这个图像是FLA库中的PNG，而表示样式表的字符串也是在`createHtml()`方法中生成的。
- en: All three—the HTML string, style sheet string, and PNG—are written to the same
    directory on the device's file system. This is done by our `writeFile()` and `writePng()`
    methods.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: HTML字符串、样式表字符串和PNG都写到了设备的文件系统中的同一目录。这是通过我们的`writeFile()`和`writePng()`方法完成的。
- en: When an iOS app is installed, a few common directories are created within the
    app's home directory. One such directory is the Documents directory, which can
    be used to store application-specific data and temporary files. A reference to
    this directory can be obtained from the static `documentsDirectory` property of
    the `flash.filesystem.File` class. This is where we wrote our local web page to.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当iOS应用安装时，在应用的主目录中创建了一些常见的目录。其中一个这样的目录是Documents目录，可以用来存储应用程序特定的数据和临时文件。可以通过`flash.filesystem.File`类的静态`documentsDirectory`属性来获取对这个目录的引用。这就是我们写入本地网页的地方。
- en: 'The `writeFile()` method creates a specified file within the Documents directory
    and writes a string of data to it. We call this method twice. First to write the
    HTML file and then again to write the style sheet. The file is created by using
    a `File` object to declare its location, then the object is passed to the `open()`
    method of a `FileStream` object:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`writeFile()`方法在Documents目录中创建一个指定的文件，并将数据字符串写入其中。我们调用这个方法两次。首先写入HTML文件，然后再次写入样式表。文件是通过使用`File`对象声明其位置来创建的，然后该对象被传递给`FileStream`对象的`open()`方法：'
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once the `FileStream` object has been opened, the actual file is written by
    calling `writeUTFBytes()and` passing the string to it. A call to `close()` is
    then made to end the process:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`FileStream`对象被打开，实际的文件是通过调用`writeUTFBytes()`并将字符串传递给它来写入的。然后通过调用`close()`来结束这个过程：
- en: '[PRE29]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Writing the PNG file to the Documents directory is performed by the `writePng()`
    method and isn''t too dissimilar to `writeHtml()`. First the bitmap data from
    the `Image` object is encoded in PNG format using the as3corelib library''s `PNGEncoder`
    class:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `writePng()` 方法将 PNG 文件写入 Documents 目录，这与 `writeHtml()` 类似。首先使用 as3corelib
    库的 `PNGEncoder` 类将 `Image` 对象的位图数据编码为 PNG 格式：
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: A `FileStream` object is then used to write the PNG to the file system. The
    HTML and style sheet were both represented by a string. The PNG's data is stored
    within a `ByteArray` object. Therefore, rather than using `writeUTFBytes()`, a
    call to the `FileStream` object's `writeBytes()` method is made instead.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 `FileStream` 对象将 PNG 写入文件系统。HTML 和样式表都由字符串表示。PNG 的数据存储在一个 `ByteArray` 对象中。因此，而不是使用
    `writeUTFBytes()`，我们调用 `FileStream` 对象的 `writeBytes()` 方法。
- en: The final step is to create a `StageWebView` object and load `index.html` from
    the Documents directory into it. This is taken care of by the `loadHtml()` method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建一个 `StageWebView` 对象，并将 Documents 目录中的 `index.html` 加载到其中。这由 `loadHtml()`
    方法处理。
- en: More information regarding `flash.filesystem.File, flash.filesystem.FileStream`,
    and `flash.utils.ByteArray` can be obtained from Adobe Community Help.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `flash.filesystem.File, flash.filesystem.FileStream` 和 `flash.utils.ByteArray`
    的更多信息，可以从 Adobe 社区帮助中获取。
- en: There's more...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The following are a few more considerations when dynamically generating HTML
    content.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在动态生成 HTML 内容时，以下是一些额外的考虑因素。
- en: Cleaning-up
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理
- en: If you are using the app's Documents folder to store temporary files, then remember
    to delete them when finished. This can be done using either the `File` class'
    `deleteFile()` or `deleteFileAsync()` method.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用应用的 Documents 文件夹来存储临时文件，那么请记住在完成后删除它们。这可以通过 `File` 类的 `deleteFile()`
    或 `deleteFileAsync()` 方法完成。
- en: Using loadString()
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 loadString()
- en: The `StageWebView` class has a `loadString()` method allowing a specified HTML
    string to be displayed. While this approach may seem easier than the steps outlined
    in this recipe, HTML content displayed using `loadString()` cannot load local
    resources, such as image files or style sheets.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView` 类有一个 `loadString()` 方法，允许显示指定的 HTML 字符串。虽然这种方法可能比本食谱中概述的步骤更容易，但使用
    `loadString()` 显示的 HTML 内容无法加载本地资源，如图像文件或样式表。'
- en: See also
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Rendering a web page within an app*'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用内渲染网页*'
- en: '*Rendering a local web page*'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用内渲染本地网页*'
- en: Capturing a snapshot of a web page
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获网页快照
- en: It is possible to copy the contents of a `StageWebView` object's viewport into
    a bitmap.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `StageWebView` 对象视口的内 容复制到位图中。
- en: In this recipe, we will capture a snapshot of a web page and display a thumbnail
    of the bitmap below the page's viewport.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将捕获网页快照并在页面视口下方显示位图的缩略图。
- en: Getting ready
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The steps covered in this recipe are only applicable to those using Flash Professional
    CS5.5 and AIR 2.6 or above. Flash Professional CS5 and AIR 2.0 do not provide
    support for the `StageWebView` class.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中涵盖的步骤仅适用于使用 Flash Professional CS5.5 和 AIR 2.6 或更高版本的用户。Flash Professional
    CS5 和 AIR 2.0 不支持 `StageWebView` 类。
- en: From the book's accompanying code bundle, open `chapter11\recipe6\recipe.fla`
    into Flash Professional CS5.5\. The FLA's stage is empty but its AIR for iOS settings
    have already been applied.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 从本书的配套代码包中，将 `chapter11\recipe6\recipe.fla` 打开到 Flash Professional CS5.5 中。FLA
    的舞台是空的，但其 AIR for iOS 设置已经应用。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In addition to `StageWebView`, we will make use of the `Bitmap` and `BitmapData`
    classes to store and display the snapshot.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `StageWebView`，我们还将使用 `Bitmap` 和 `BitmapData` 类来存储和显示快照。
- en: Create a new document class and name it `Main`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文档类，并将其命名为 `Main`。
- en: 'Add the following import statements and declare a `StageWebView` member variable:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下导入语句并声明一个 `StageWebView` 成员变量：
- en: '[PRE31]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Within the constructor, set up the `StageWebView` object and listen for its
    web page successfully loading:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数中，设置 `StageWebView` 对象并监听其网页成功加载：
- en: '[PRE32]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, add an event handler that grabs a bitmap of the loaded page and displays
    a thumbnail of it:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个事件处理器，捕获加载页面的位图并显示其缩略图：
- en: '[PRE33]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Save the class and name its file `Main.as` when prompted.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提示保存类时，将其文件命名为 `Main.as`。
- en: Move back to your FLA and save it too.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 FLA 并保存它。
- en: Now publish the FLA and test it on your device. Once the web page loads, a snapshot
    of it will be captured and displayed as a thumbnail at the bottom-left corner
    of the screen.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在发布 FLA 并在你的设备上测试它。一旦网页加载完成，它的快照将被捕获并显示在屏幕左下角的缩略图位置。
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `StageWebView` class provides `drawViewPortToBitmapData()`, which writes
    the pixel data from a `StageWebView` object's viewport into a `BitmapData` object.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`StageWebView`类提供了`drawViewPortToBitmapData()`方法，该方法将`StageWebView`对象视口中的像素数据写入`BitmapData`对象。'
- en: 'First a `BitmapData` object needs to be instantiated:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要实例化一个`BitmapData`对象：
- en: '[PRE34]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then the visible portion of the viewport can be drawn to the `BitmapData` object
    by calling `drawViewPortToBitmapData():`
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以通过调用`drawViewPortToBitmapData():`将视口的可见部分绘制到`BitmapData`对象上。
- en: '[PRE35]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Care must be taken to ensure that the `BitmapData` object's dimensions match
    those of the viewport's. If not, then `drawViewPortToBitmapData()` will throw
    an `ArgumentError` exception. The `StageWebView.viewPort` property returns a `Rectangle`,
    which you can use to determine the viewport's width and height.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 必须注意确保`BitmapData`对象的尺寸与视口的尺寸相匹配。如果不匹配，则`drawViewPortToBitmapData()`将抛出`ArgumentError`异常。`StageWebView.viewPort`属性返回一个`Rectangle`，您可以使用它来确定视口的宽度和高度。
- en: For additional information regarding the `flash.display.Bitmap` and `flash.display.BitmapData`
    classes, refer to Adobe Community Help.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`flash.display.Bitmap`和`flash.display.BitmapData`类的更多信息，请参阅Adobe社区帮助。
- en: There's more...
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The following is one practical use for capturing a snapshot of a web page.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个捕捉网页快照的实际用途。
- en: Overlaying display objects
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 铺设显示对象
- en: Although the `StageWebView` object renders on top of Flash's display list, it
    is possible to sit display objects above your HTML content in situations where
    user interaction with the HTML isn't required. This is done by capturing a bitmap
    image of the `StageWebView`, and replacing it with the bitmap. You can then add
    display objects such as buttons, panels, and menus above the bitmap representation.
    To hide a `StageWebView` object from view, set its `stage` property to `null`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`StageWebView`对象在Flash的显示列表之上渲染，但在不需要与HTML进行用户交互的情况下，可以在HTML内容之上放置显示对象。这是通过捕获`StageWebView`的位图图像并将其替换为位图来实现的。然后，您可以在位图表示之上添加按钮、面板和菜单等显示对象。要隐藏一个`StageWebView`对象，请将其`stage`属性设置为`null`。
- en: See also
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Rendering a web page within an app*'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在应用内渲染网页*'
