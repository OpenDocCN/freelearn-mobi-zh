["```swift\nstruct WaveView: Shape {\n}\n```", "```swift\nvar yOffset: CGFloat = 0.0\n```", "```swift\nstruct WaveView_Previews: PreviewProvider {\n    static var previews: some View {\n        Group {\n        WaveView(yOffset: 0.7)\n            .stroke(Color.blue, lineWidth: 3)\n            .frame(height: 250)\n        .padding()\n            .previewDisplayName(\"Wave\")\n\n        }\n    }\n}\n```", "```swift\nfunc path(in rect: CGRect) -> Path {\n        var path = Path()\n        path.move(to: .zero)\n        path.addLine(to: CGPoint(x: rect.minX, \n          y: rect.maxY))\n        return path\n    }\n```", "```swift\nfunc path(in rect: CGRect) -> Path {\n        var path = Path()\n        path.move(to: .zero)\n        path.addLine(to: CGPoint(x: rect.minX,\n          y: rect.maxY))\n        path.addLine(to: CGPoint(x: rect.maxX,\n          y: rect.maxY))\n        return path\n    }\n```", "```swift\nfunc path(in rect: CGRect) -> Path {\n        var path = Path()\n        path.move(to: .zero)\n        path.addLine(to: CGPoint(x: rect.minX,\n          y: rect.maxY))\n        path.addLine(to: CGPoint(x: rect.maxX,\n          y: rect.maxY))\n        path.addLine(to: CGPoint(x: rect.maxX,\n          y: rect.minY))\n        return path\n    }\n```", "```swift\nfunc path(in rect: CGRect) -> Path {\n        var path = Path()\n        path.move(to: .zero)\n        path.addLine(to: CGPoint(x: rect.minX,\n          y: rect.maxY))\n        path.addLine(to: CGPoint(x: rect.maxX,\n          y: rect.maxY))\n        path.addLine(to: CGPoint(x: rect.maxX,\n          y: rect.minY))\n        path.addCurve(to: CGPoint(x: rect.minX,\n          y: rect.minY),\ncontrol1: CGPoint(x: rect.maxX * 0.45, \n          y: rect.minY - (rect.maxY * yOffset)),\n        control2: CGPoint(x: rect.maxX * 0.45,\n          y: (rect.maxY * yOffset)))\n        return path\n    }\n```", "```swift\nvar animatableData: CGFloat {\n        get {\n            return yOffset\n        }\n        set {\n            yOffset = newValue\n        }\n    }\n```", "```swift\nstruct WaveCreation: View {\n    var body: some View { \n    }\n}\n```", "```swift\n@Binding var animateOffset: Bool\n    var curveOne: CGFloat\n    var curveTwo: CGFloat\n    var radius: CGFloat\n    var shadowX: CGFloat\n    var shadowY: CGFloat\n    var duration: Double\n```", "```swift\nvar body: some View {\n    WaveView(yOffset: animateOffset ? curveOne : curveTwo)\n        .fill(Color(UIColor.blue))\n        .shadow(color: .gray, radius: radius, x: shadowX,\n          y: shadowY)\n        .animation(Animation.easeInOut(duration:\n          duration).repeatForever(autoreverses: true),\n          value:animateOffset)\n    }\n```", "```swift\n@State private var animateOffset = false\n```", "```swift\n ZStack {\n            //MARK: - BACKGROUND\n            Color.blue\n                 .opacity(0.5)\n                 .edgesIgnoringSafeArea(.all)\n        }\n```", "```swift\n//MARK: - WAVE 1\n    WaveCreation(animateOffset: $animateOffset, curveOne:\n      0.05, curveTwo: -0.05, radius: 50, shadowX: 0,\n      shadowY: 50, duration: 5.0)\n        .opacity(0.8)\n        .offset(y: 575)\n```", "```swift\n  .onAppear() {\n            animateOffset.toggle()\n        }\n```", "```swift\n//MARK: - WAVE 2\n    WaveCreation(animateOffset: $animateOffset, \n      curveOne: -0.07, curveTwo: 0.07, radius: 100,\n      shadowX: 0, shadowY: 10, duration: 4.0)\n.offset(y: 610)\n//MARK: - WAVE 3\n    WaveCreation(animateOffset: $animateOffset, curveOne: 0.1,       curveTwo: -0.1, radius: 30, shadowX: 0, shadowY: 0,       duration: 3.7)\n.offset(y: 645)\n//MARK: - WAVE 4\n    WaveCreation(animateOffset: $animateOffset, \n      curveOne: 0.14, curveTwo: -0.1, radius: 70, \n      shadowX: 0, shadowY: 10, duration: 3.5)\n.offset(y: 705)\n//MARK: - WAVE 5\n    WaveCreation(animateOffset: $animateOffset, \n      curveOne: -0.05, curveTwo: 0.08, radius: 60, \n      shadowX: 0, shadowY: 20, duration: 3.2)\n        .opacity(0.8)\n.offset(y: 740)\n//MARK: - WAVE 6\n    WaveCreation(animateOffset: $animateOffset, \n      curveOne: -0.05, curveTwo: 0.08, radius: 60, \n      shadowX: 0, shadowY: 20, duration: 3.4)\n.offset(y: 800)\n```", "```swift\n@Binding var tiltForwardBackward: Bool\n    @Binding var upAndDown: Bool\n    @Binding var leadingAnchorAnimate: Bool\n    @State private var red = 1.0\n    @State private var green = 1.0\n    @State private var blue = 1.0\n```", "```swift\nstruct BuoyView_Previews: PreviewProvider {\n    static var previews: some View {\n        BuoyView(tiltForwardBackward: .constant(true),\n        upAndDown: .constant(true), leadingAnchorAnimate:\n        .constant(true))\n    }\n}\n```", "```swift\n ZStack {\n           Image(\"buoy\")\n        }\n```", "```swift\n ZStack {\n           Image(\"buoy\").overlay(Rectangle())\n        }\n```", "```swift\n.onAppear() {\n            red = 0.5\n            green = 0.5\n            blue = 0.5\n        }\n```", "```swift\n ZStack {\n           Image(\"buoy\").overlay(Rectangle()\n                .overlay(Color(red: red,green: green,blue:\n                  blue)))\n        }\n```", "```swift\n Image(\"buoy\").overlay(Rectangle()\n     .overlay(Color(red: red,green: green,blue: blue))\n     //adds a corner radius only to the bottom corners of\n       the rectangle\n                .frame(width: 12, height: 17)\n                .position(x: 112.5, y: 19.5))\n                 }\n```", "```swift\n    let cRadius = 8.0\n```", "```swift\nImage(\"buoy\").overlay(Rectangle()\n    .overlay(Color(red: red,green: green,blue: blue))\n    ///add a corner radius only to the bottom corners\n        .padding(.bottom, cRadius)\n        .cornerRadius(cRadius)\n        .padding(.bottom, -cRadius)\n    .frame(width: 12, height: 17)\n    .position(x: 112.5, y: 19.5))\n```", "```swift\n    ///the animation for the blinking light\n    .animation(Animation.easeOut(duration:\n      1).repeatForever(autoreverses: true),value: red)\n```", "```swift\n   ///the animation for the anchor point motion\n    .rotationEffect(.degrees(leadingAnchorAnimate ? 7 :\n      -3), anchor: .leading) \n    .animation(Animation.easeOut(duration:\n      0.9).repeatForever(autoreverses: true),\n      value: leadingAnchorAnimate)\n```", "```swift\n   ///the animation for the tilt forward and backward\n     motion\n    .rotationEffect(.degrees(tiltForwardBackward ? -20 :\n      15))\n    .animation(Animation.easeInOut(duration:\n      1.0).delay(0.2).repeatForever(autoreverses:\n      true),value: tiltForwardBackward)\n```", "```swift\n.offset(y: upAndDown ? -10 : 10)\n```", "```swift\n.onAppear() {\n           leadingAnchorAnimate.toggle()\n             tiltForwardBackward.toggle()\n             upAndDown.toggle()\n            red = 0.5\n            green = 0.5\n            blue = 0.5\n        }\n```", "```swift\n  //MARK: - BUOY\n      BuoyView(tiltForwardBackward: $tiltForwardBackward,\n        upAndDown: $upAndDown, leadingAnchorAnimate:\n        $leadingAnchorAnimnate)\n      .offset(y: 205)\n```", "```swift\nimport AVFoundation\n```", "```swift\nvar audioPlayer: AVAudioPlayer?\n```", "```swift\nfunc playSound(name: String, type: String) {\n    if let path = Bundle.main.path(forResource: sound,\n      ofType: type) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf:\n              URL(fileURLWithPath: path))\n            audioPlayer?.play()\n        } catch {\n            print(\"Could not find and play the sound file\")\n        }\n    }\n}\n```", "```swift\n.onAppear() {\n            animateOffset.toggle()\n            playSound(name: \"buoyBells\", type: \"m4a\")\n        }\n```", "```swift\n       .onDisappear()\n        {\n            audioPlayer?.stop()\n        }\n```"]