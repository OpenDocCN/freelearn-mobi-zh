["```kt\nandroid {\n    ...\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_11\n        targetCompatibility JavaVersion.VERSION_11\n    }\n}\n```", "```kt\n    plugins {\n    ```", "```kt\n        id 'com.google.dagger.Hilt.android' version '2.44'\n    ```", "```kt\n    apply false\n    ```", "```kt\n    }\n    ```", "```kt\n    plugins {\n    ```", "```kt\n        id 'kotlin-kapt'\n    ```", "```kt\n        id 'dagger.Hilt.android.plugin'\n    ```", "```kt\n    }\n    ```", "```kt\n    dependencies {\n    ```", "```kt\n        implementation \"com.google.dagger:Hilt-\n    ```", "```kt\n            android:2.44\"\n    ```", "```kt\n        kapt \"com.google.dagger:Hilt-compiler:2.44\"\n    ```", "```kt\n    }\n    ```", "```kt\n    @HiltAndroidApp\n    ```", "```kt\n    class LoginApp : Application()\n    ```", "```kt\n    <application\n    ```", "```kt\n        android:name=\".LoginApp\"\n    ```", "```kt\n      ...\n    ```", "```kt\n    @AndroidEntryPoint\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n    ```", "```kt\n      ...\n    ```", "```kt\n    class LoginViewModel {...}\n    ```", "```kt\n    @HiltViewModel\n    ```", "```kt\n    class LoginViewModel @Inject constructor(\n    ```", "```kt\n    ): ViewModel(){. . .}\n    ```", "```kt\n    @HiltViewModel\n    ```", "```kt\n    class LoginViewModel @Inject constructor(\n    ```", "```kt\n        stateHandle: SavedStateHandle\n    ```", "```kt\n    ) : ViewModel() {...}\n    ```", "```kt\n    data class AuthenticationState(\n    ```", "```kt\n        val userName: String = \"\",\n    ```", "```kt\n        val password: String = \"\",\n    ```", "```kt\n        val loading: Boolean = false,\n    ```", "```kt\n        var togglePasswordVisibility: Boolean = true\n    ```", "```kt\n    ) {\n    ```", "```kt\n        companion object {\n    ```", "```kt\n            val EMPTY_STATE = AuthenticationState()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    class MutableSavedState<T>(\n    ```", "```kt\n        private val savedStateHandle: SavedStateHandle,\n    ```", "```kt\n        private val key: String,\n    ```", "```kt\n        defValue: T,\n    ```", "```kt\n    ) {\n    ```", "```kt\n     . . .\n    ```", "```kt\n    }\n    ```", "```kt\n    private val username = MutableSavedState(\n    ```", "```kt\n        stateHandle,\n    ```", "```kt\n        \"UserName\",\n    ```", "```kt\n        defValue = \"\"\n    ```", "```kt\n    )\n    ```", "```kt\n    fun userNameChanged(userName: String){\n    ```", "```kt\n        username.value = userName\n    ```", "```kt\n    }\n    ```", "```kt\n    fun <T1, T2, T3, T4, T5, T6, R> combine(\n    ```", "```kt\n        flow: Flow<T1>,\n    ```", "```kt\n        flow2: Flow<T2>,\n    ```", "```kt\n        flow3: Flow<T3>,\n    ```", "```kt\n        flow4: Flow<T4>,\n    ```", "```kt\n        flow5: Flow<T5>,\n    ```", "```kt\n        flow6: Flow<T6>,\n    ```", "```kt\n        transform: suspend (T1, T2, T3, T4, T5, T6) -> R\n    ```", "```kt\n    ): Flow<R> = combine(\n    ```", "```kt\n            combine(flow, flow2, flow3, ::Triple),\n    ```", "```kt\n            combine(flow4, flow5, flow6, ::Triple)\n    ```", "```kt\n    ) { t1, t2 ->\n    ```", "```kt\n        transform(\n    ```", "```kt\n            t1.first,\n    ```", "```kt\n            t1.second,\n    ```", "```kt\n            t1.third,\n    ```", "```kt\n            t2.first,\n    ```", "```kt\n            t2.second,\n    ```", "```kt\n            t2.third\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\nval state = combineFlows(\n    username.flow,\n    password.flow,\n    passwordVisibilityToggle.flow,\n    loadingProgress.flow\n) { username, password, passwordToggle, isLoading ->\n    AuthenticationState(\n        userName = username,\n        password = password,\n        togglePasswordVisibility = passwordToggle,\n        loading = isLoading\n    )\n}.stateIn(. . .)\n```", "```kt\n    .stateIn(\n    ```", "```kt\n       coroutineScope = viewModelScope + dispatchers.main,\n    ```", "```kt\n       initialValue = AuthenticationState.EMPTY_STATE\n    ```", "```kt\n    )\n    ```", "```kt\n    fun <T> Flow<T>.stateIn(\n    ```", "```kt\n        coroutineScope: CoroutineScope,\n    ```", "```kt\n        initialValue: T\n    ```", "```kt\n    ): StateFlow<T> = stateIn(\n    ```", "```kt\n        scope = coroutineScope,\n    ```", "```kt\n        started = SharingStarted.WhileSubscribed(5000),\n    ```", "```kt\n        initialValue = initialValue\n    ```", "```kt\n    )\n    ```", "```kt\n    class SampleLoginDispatchers(\n    ```", "```kt\n        val default: CoroutineDispatcher,\n    ```", "```kt\n        val main: CoroutineDispatcher,\n    ```", "```kt\n        val io: CoroutineDispatcher\n    ```", "```kt\n    ) {\n    ```", "```kt\n        companion object {\n    ```", "```kt\n            fun createTestDispatchers(coroutineDispatcher:\n    ```", "```kt\n            CoroutineDispatcher): SampleLoginDispatchers {\n    ```", "```kt\n                return SampleLoginDispatchers(\n    ```", "```kt\n                    default = coroutineDispatcher,\n    ```", "```kt\n                    main = coroutineDispatcher,\n    ```", "```kt\n                    io = coroutineDispatcher\n    ```", "```kt\n                )\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    object AppModule {\n    ```", "```kt\n        @Provides\n    ```", "```kt\n        fun provideSlimeDispatchers():\n    ```", "```kt\n        SampleLoginDispatchers {\n    ```", "```kt\n            return SampleLoginDispatchers(\n    ```", "```kt\n            default = Dispatchers.Default,\n    ```", "```kt\n            main = Dispatchers.Main,\n    ```", "```kt\n            io = Dispatchers.IO\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun LoginContent(\n    ```", "```kt\n        modifier: Modifier = Modifier,\n    ```", "```kt\n        uiState: AuthenticationState,\n    ```", "```kt\n        onUsernameUpdated: (String) -> Unit,\n    ```", "```kt\n        onPasswordUpdated: (String) -> Unit,\n    ```", "```kt\n        onLogin: () -> Unit,\n    ```", "```kt\n        passwordToggleVisibility: (Boolean) -> Unit\n    ```", "```kt\n    ){\n    ```", "```kt\n    . . .\n    ```", "```kt\n    UserNameField(authState = uiState, onValueChanged =\n    ```", "```kt\n    onUsernameUpdated)\n    ```", "```kt\n    PasswordInputField(\n    ```", "```kt\n        text = stringResource(id = R.string.password),\n    ```", "```kt\n        authState = uiState,\n    ```", "```kt\n        onValueChanged = onPasswordUpdated,\n    ```", "```kt\n        passwordToggleVisibility =\n    ```", "```kt\n            passwordToggleVisibility\n    ```", "```kt\n    )\n    ```", "```kt\n    LoginButton(\n    ```", "```kt\n        text = stringResource(id = R.string.sign_in),\n    ```", "```kt\n        enabled = if (uiState.isValidForm()) {\n    ```", "```kt\n            !uiState.loading\n    ```", "```kt\n        } else {\n    ```", "```kt\n            false\n    ```", "```kt\n        },\n    ```", "```kt\n        onLoginClicked = {\n    ```", "```kt\n            onLogin.invoke()\n    ```", "```kt\n        },\n    ```", "```kt\n        isLoading = uiState.loading\n    ```", "```kt\n    ). . .}\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun LoginContentScreen(\n    ```", "```kt\n        loginViewModel: LoginViewModel,\n    ```", "```kt\n        onRegisterNavigateTo: () -> Unit\n    ```", "```kt\n    ) {\n    ```", "```kt\n        val viewState by\n    ```", "```kt\n            loginViewModel.state.collectAsState()\n    ```", "```kt\n        LoginContent(\n    ```", "```kt\n            uiState = viewState,\n    ```", "```kt\n            onUsernameUpdated =\n    ```", "```kt\n                loginViewModel::userNameChanged,\n    ```", "```kt\n             onPasswordUpdated =\n    ```", "```kt\n                loginViewModel::passwordChanged,\n    ```", "```kt\n             onLogin = loginViewModel::login,\n    ```", "```kt\n             passwordToggleVisibility =\n    ```", "```kt\n                 loginViewModel::passwordVisibility,\n    ```", "```kt\n             onRegister = onRegisterNavigateTo\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    LoginContentScreen(loginViewModel = HiltViewModel(), onRegisterNavigateTo = {. . .}\n    ```", "```kt\n    <androidx.Compose.ui.platform.ComposeView\n    ```", "```kt\n        android:id=\"@+id/alert_dialog\"\n    ```", "```kt\n        android:layout_width=\"match_parent\"\n    ```", "```kt\n        android:layout_height=\"match_parent\"/>\n    ```", "```kt\n    buildFeatures{\n    ```", "```kt\n        viewBinding true\n    ```", "```kt\n    }\n    ```", "```kt\n    class MainActivity : AppCompatActivity() {\n    ```", "```kt\n        private lateinit var activityBinding:\n    ```", "```kt\n        ActivityMainBinding\n    ```", "```kt\n        override fun onCreate(savedInstanceState: Bundle?)\n    ```", "```kt\n        {\n    ```", "```kt\n            super.onCreate(savedInstanceState)\n    ```", "```kt\n            activityBinding =\n    ```", "```kt\n               ActivityMainBinding.inflate(layoutInflater)\n    ```", "```kt\n            setContentView(activityBinding.root)\n    ```", "```kt\n            activityBinding.alertDialog.setContent {\n    ```", "```kt\n                GreetingAlertDialog()\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun SimpleAlertDialog() {\n    ```", "```kt\n        AlertDialog(\n    ```", "```kt\n            onDismissRequest = { },\n    ```", "```kt\n            confirmButton = {\n    ```", "```kt\n                TextButton(onClick = {})\n    ```", "```kt\n                { Text(text = \"OK\") }\n    ```", "```kt\n            },\n    ```", "```kt\n            dismissButton = {\n    ```", "```kt\n                TextButton(onClick = {})\n    ```", "```kt\n                { Text(text = \"OK\") }\n    ```", "```kt\n            },\n    ```", "```kt\n            title = { Text(text = \"Hello\") },\n    ```", "```kt\n            text = { Text(text = \"Hello, and thank you for\n    ```", "```kt\n            being part of the Android community\") }\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    class ComposeAlertDialogComponent @JvmOverloads constructor(\n    ```", "```kt\n        context: Context,\n    ```", "```kt\n        attrs: AttributeSet? = null,\n    ```", "```kt\n        defStyle: Int = 0\n    ```", "```kt\n    ) : AbstractComposeView(context, attrs, defStyle) {\n    ```", "```kt\n            @Composable\n    ```", "```kt\n        override fun Content() {\n    ```", "```kt\n            GreetingAlertDialog()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun UserDetails(\n    ```", "```kt\n        name: String,\n    ```", "```kt\n        gender: String,\n    ```", "```kt\n    ) {\n    ```", "```kt\n        Box() {\n    ```", "```kt\n            Text(name)\n    ```", "```kt\n            Spacer()\n    ```", "```kt\n            Text(gender)\n    ```", "```kt\n        }}\n    ```", "```kt\n    object TestTags {\n    ```", "```kt\n        object LoginContent {\n    ```", "```kt\n            const val SIGN_IN_BUTTON = \"sign_in_button\"\n    ```", "```kt\n            const val LOGO_IMAGE = \"logo_image_button\"\n    ```", "```kt\n            const val ANDROID_TEXT = \"community_text\"\n    ```", "```kt\n            const val USERNAME_FIELD = \"username_fields\"\n    ```", "```kt\n            const val PASSWORD_FIELD = \"password_fields\"\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    Image(\n    ```", "```kt\n        modifier = modifier.testTag(LOGO_IMAGE),\n    ```", "```kt\n        painter = painterResource(id =\n    ```", "```kt\n            R.drawable.ic_launcher_foreground),\n    ```", "```kt\n        contentDescription = \"Logo\"\n    ```", "```kt\n    )\n    ```", "```kt\n    @get:Rule\n    ```", "```kt\n    val ComposeRuleTest = createAndroidComposeRule<MainActivity>()\n    ```", "```kt\n    private fun initCompose() {\n    ```", "```kt\n        ComposeRuleTest.activity.setContent {\n    ```", "```kt\n            SampleLoginTheme {\n    ```", "```kt\n                LoginContent()\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun assertSignInButtonIsDisplayed(){\n    ```", "```kt\n        initCompose()\n    ```", "```kt\n        ComposeRuleTest.onNodeWithTag(SIGN_IN_BUTTON,\n    ```", "```kt\n        true).assertIsDisplayed()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun assertUserInputFieldIsDisplayed(){\n    ```", "```kt\n        initCompose()\n    ```", "```kt\n        ComposeRuleTest.onNodeWithTag(USERNAME_FIELD,\n    ```", "```kt\n        true).assertIsDisplayed()\n    ```", "```kt\n    }\n    ```", "```kt\n    repositories {\n    ```", "```kt\n      mavenCentral()\n    ```", "```kt\n    }\n    ```", "```kt\n    dependencies {\n    ```", "```kt\n      testImplementation 'app.cash.turbine:turbine:0.x.x'\n    ```", "```kt\n    }\n    ```", "```kt\n    class LoginViewModelTest {\n    ```", "```kt\n       private lateinit var loginViewModel: LoginViewModel\n    ```", "```kt\n       @Before\n    ```", "```kt\n       fun setUp(){\n    ```", "```kt\n          loginViewModel = LoginViewModel(\n    ```", "```kt\n             dispatchers =\n    ```", "```kt\n             SampleLoginDispatchers.createTestDispatchers(\n    ```", "```kt\n             UnconfinedTestDispatcher()),\n    ```", "```kt\n             stateHandle = SavedStateHandle()\n    ```", "```kt\n          )\n    ```", "```kt\n       }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun `test authentication state changes`() = runTest {...}\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun `test authentication state changes`() = runTest {\n    ```", "```kt\n        loginViewModel.userNameChanged(\"Madona\")\n    ```", "```kt\n        loginViewModel.passwordChanged(\"home\")\n    ```", "```kt\n        loginViewModel.passwordVisibility(true)\n    ```", "```kt\n        loginViewModel.state.test {\n    ```", "```kt\n            val stateChange = awaitItem()\n    ```", "```kt\n            Truth.assertThat(stateChange).isEqualTo(\n    ```", "```kt\n                AuthenticationState(\n    ```", "```kt\n                    userName = \"Madona\",\n    ```", "```kt\n                    password = \"home\",\n    ```", "```kt\n                    togglePasswordVisibility = true\n    ```", "```kt\n                )\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```"]