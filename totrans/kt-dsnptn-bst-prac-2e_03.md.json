["```kt\nval myFavoriteMovies = listOf(\"Black Hawk Down\", \"Blade   Runner\")\n```", "```kt\nval yourFavoriteMovies = listOf(...)\n```", "```kt\nval myFavoriteQuickAndAngryMovies = listOf()\n```", "```kt\nval yourFavoriteQuickAndAngryMovies = listOf()\n```", "```kt\nobject NoMoviesList\n```", "```kt\nval myFavoriteQuickAndAngryMovies = NoMoviesList\n```", "```kt\nval yourFavoriteQuickAndAngryMovies = NoMoviesList\n```", "```kt\nprintln(myFavoriteQuickAndAngryMovies === \n```", "```kt\n    yourFavoriteQuickAndAngryMovies) // true\n```", "```kt\nfun printMovies(movies: List<String>) {\n```", "```kt\n    for (m in movies) {\n```", "```kt\n        println(m)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n// Prints each movie on a newline    \n```", "```kt\nprintMovies(myFavoriteMovies) \n```", "```kt\nprintMovies(myFavoriteQuickAndAngryMovies) \n```", "```kt\n// Type mismatch: inferred type is NoMoviesList but // List<String> was expected\n```", "```kt\nobject NoMoviesList : List<String>\n```", "```kt\nobject NoMoviesList : List<String> {\n```", "```kt\n    override val size = 0\n```", "```kt\n    override fun contains(element: String) = false \n```", "```kt\n    ... /\n```", "```kt\n}\n```", "```kt\nprintMovies(emptyList())\n```", "```kt\nobject Logger {\n```", "```kt\n    init {\n```", "```kt\n        println(\"I was accessed for the first time\")\n```", "```kt\n        // Initialization logic goes here\n```", "```kt\n    }\n```", "```kt\n    // More code goes here\n```", "```kt\n}\n```", "```kt\n// More pieces here\n```", "```kt\nval notations = listOf(\"pa8\", \"qc3\", ...)\n```", "```kt\nval pieces = mutableListOf<ChessPiece>()\n```", "```kt\nfor (n in notations) {\n```", "```kt\n    pieces.add(createPiece(n))\n```", "```kt\n}\n```", "```kt\nprintln(pieces)\n```", "```kt\ninterface ChessPiece {\n```", "```kt\n    val file: Char\n```", "```kt\n    val rank: Char\n```", "```kt\n}\n```", "```kt\ndata class Pawn(\n```", "```kt\n    override val file: Char,\n```", "```kt\n    override val rank: Char\n```", "```kt\n) : ChessPiece\n```", "```kt\ndata class Queen(\n```", "```kt\n    override val file: Char,\n```", "```kt\n    override val rank: Char\n```", "```kt\n) : ChessPiece\n```", "```kt\nfun createPiece(notation: String): ChessPiece {\n```", "```kt\n    val (type, file, rank) = notation.toCharArray()\n```", "```kt\n    return when (type) {\n```", "```kt\n        'q' -> Queen(file, rank)\n```", "```kt\n        'p' -> Pawn(file, rank)\n```", "```kt\n        // ...\n```", "```kt\n        else -> throw RuntimeException(\"Unknown piece: $type\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval type = notation.toCharArray()[0]\n```", "```kt\nval file = notation.toCharArray()[1]\n```", "```kt\nval rank = notation.toCharArray()[2]\n```", "```kt\nLong l1 = new Long(\"1\"); // constructor\n```", "```kt\nLong l2 = Long.valueOf(\"1\"); // static factory method\n```", "```kt\nclass Server(port: Long) {\n```", "```kt\n    init {\n```", "```kt\n        println(\"Server started on port $port\")\n```", "```kt\n    }\n```", "```kt\n    companion object {\n```", "```kt\n        fun withPort(port: Long) = Server(port)\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nServer.withPort(8080) // Server started on port 8080\n```", "```kt\nServer(8080) // Won't compile, constructor is private\n```", "```kt\nclass Server private constructor(port: Long) {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nval server = Server(8080))  // Doesn't compile\n```", "```kt\nval server = Server.withPort(8080) // Works!\n```", "```kt\nserver: \n```", "```kt\n    port: 8080\n```", "```kt\nenvironment: production\n```", "```kt\ninterface Property {\n```", "```kt\n    val name: String\n```", "```kt\n    val value: Any\n```", "```kt\n}\n```", "```kt\ninterface ServerConfiguration {\n```", "```kt\n    val properties: List<Property>\n```", "```kt\n}\n```", "```kt\ndata class PropertyImpl(\n```", "```kt\n    override val name: String,\n```", "```kt\n    override val value: Any\n```", "```kt\n) : Property\n```", "```kt\ndata class ServerConfigurationImpl(\n```", "```kt\n    override val properties: List<Property>\n```", "```kt\n) : ServerConfiguration\n```", "```kt\nfun property(prop: String): Property {\n```", "```kt\n    val (name, value) = prop.split(\":\")\n```", "```kt\n    return when (name) {\n```", "```kt\n        \"port\" -> PropertyImpl(name, value.trim().toInt())\n```", "```kt\n        \"environment\" -> PropertyImpl(name, value.trim())\n```", "```kt\n        else -> throw RuntimeException(\"Unknown property:           $name\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval portProperty = property(\"port: 8080\")\n```", "```kt\nval environment = property(\"environment: production\") \n```", "```kt\nval port: Int = portProperty.value\n```", "```kt\n// Type mismatch: inferred type is Any but Int was expected\n```", "```kt\nval port: Int = portProperty.value as Int\n```", "```kt\nval port: Int? = portProperty.value as? Int\n```", "```kt\ndata class IntProperty(\n```", "```kt\n    override val name: String,\n```", "```kt\n    override val value: Int\n```", "```kt\n) : Property\n```", "```kt\ndata class StringProperty(\n```", "```kt\n    override val name: String,\n```", "```kt\n    override val value: String\n```", "```kt\n) : Property\n```", "```kt\nfun property(prop: String): Property {\n```", "```kt\n    val (name, value) = prop.split(\":\")\n```", "```kt\n    return when (name) {\n```", "```kt\n        \"port\" -> IntProperty(name, value.trim().toInt())\n```", "```kt\n        \"environment\" -> StringProperty(name, value.trim())\n```", "```kt\n        else -> throw RuntimeException(\"Unknown property:           $name\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval portProperty = Parser.property(\"port: 8080\")\n```", "```kt\nval port: Int = portProperty.value \n```", "```kt\n> Type mismatch: inferred type is Any but Int was expected\n```", "```kt\nprintln(portProperty is IntProperty) // true\n```", "```kt\nif (portProperty is IntProperty) {\n```", "```kt\n    val port: Int = portProperty.value // works!\n```", "```kt\n}\n```", "```kt\nval port: Int? = portProperty.value as? Int\n```", "```kt\nif (port != null) {\n```", "```kt\n    val port: Int = port\n```", "```kt\n}\n```", "```kt\nval portOrNull: Int? = portProperty.value as? Int\n```", "```kt\nif (portOrNull != null) {\n```", "```kt\n    val port: Int = portOrNull // works\n```", "```kt\n}\n```", "```kt\nfun server(propertyStrings: List<String>): \n```", "```kt\n  ServerConfiguration {\n```", "```kt\n    val parsedProperties = mutableListOf<Property>()\n```", "```kt\n    for (p in propertyStrings) {\n```", "```kt\n        parsedProperties += property(p)\n```", "```kt\n    }\n```", "```kt\n    return ServerConfigurationImpl(parsedProperties)\n```", "```kt\n}\n```", "```kt\nprintln(server(listOf(\"port: 8080\", \"environment: \n```", "```kt\n  production\")))\n```", "```kt\n> ServerConfigurationImpl(properties=[IntProperty(name=port, value=8080), StringProperty(name=environment, value=production)])\n```", "```kt\nclass Parser {\n```", "```kt\n    companion object {\n```", "```kt\n        fun property(prop: String): Property {\n```", "```kt\n           ...\n```", "```kt\n        }\n```", "```kt\n        fun server(propertyStrings: List<String>): ...{\n```", "```kt\n           ...        \n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ninterface Parser {\n```", "```kt\n    fun property(prop: String): Property\n```", "```kt\n    fun server(propertyStrings: List<String>):       ServerConfiguration\n```", "```kt\n}\n```", "```kt\nclass YamlParser : Parser {\n```", "```kt\n    // Implementation specific to YAML files\n```", "```kt\n}\n```", "```kt\nclass JsonParser : Parser {\n```", "```kt\n    // Implementation specific to JSON files\n```", "```kt\n}\n```", "```kt\ndata class Mail_V1(\n```", "```kt\n    val to: List<String>,\n```", "```kt\n    val cc: List<String>?,\n```", "```kt\n    val title: String?,\n```", "```kt\n    val message: String?,\n```", "```kt\n    val important: Boolean,\n```", "```kt\n)\n```", "```kt\nval mail = Mail_V1(\n```", "```kt\n    listOf(\"manager@company.com\"),    // To\n```", "```kt\n    null,                             // CC\n```", "```kt\n    \"Ping \",                          // Title\n```", "```kt\n    null,                             // Message,\n```", "```kt\n    true))                            // Important\n```", "```kt\nclass MailBuilder {\n```", "```kt\n    private var to: List<String> = listOf()\n```", "```kt\n    private var cc: List<String> = listOf()\n```", "```kt\n    private var title: String = \"\"\n```", "```kt\n    private var message: String = \"\"\n```", "```kt\n    private var important: Boolean = false\n```", "```kt\n    class Mail internal constructor(\n```", "```kt\n        val to: List<String>,\n```", "```kt\n        val cc: List<String>?,\n```", "```kt\n        val title: String?,\n```", "```kt\n        val message: String?,\n```", "```kt\n        val important: Boolean\n```", "```kt\n    )\n```", "```kt\n    ... // More code will come here soon\n```", "```kt\n}\n```", "```kt\nfun build(): Mail {\n```", "```kt\n    if (to.isEmpty()) {\n```", "```kt\n        throw RuntimeException(\"To property is empty\")\n```", "```kt\n    }\n```", "```kt\n    return Mail(to, cc, title, message, important)\n```", "```kt\n}\n```", "```kt\nfun message(message: String): MailBuilder {\n```", "```kt\n    this.message = message\n```", "```kt\n    return this\n```", "```kt\n}\n```", "```kt\n// More functions for each of the properties\n```", "```kt\nval email = MailBuilder(\"hello@hello.com\").title(\"What's   up?\").build()\n```", "```kt\ndata class Mail_V2(\n```", "```kt\n    val to: List<String>,\n```", "```kt\n    private var _message: String? = null,\n```", "```kt\n    private var _cc: List<String>? = null,\n```", "```kt\n    private var _title: String? = null,\n```", "```kt\n    private var _important: Boolean? = null\n```", "```kt\n) {\n```", "```kt\n    fun message(message: String) = apply {\n```", "```kt\n        _message = message\n```", "```kt\n    }\n```", "```kt\n    // Pattern repeats for every other field\n```", "```kt\n    //...\n```", "```kt\n}\n```", "```kt\nfun message(message: String): MailBuilder {\n```", "```kt\n    this.message = message\n```", "```kt\n    return this\n```", "```kt\n}\n```", "```kt\nval mailV2 = Mail_V2(listOf(\"manager@company.com\")).message(\"Ping\")\n```", "```kt\nval mail = Mail_V2(\"hello@mail.com\").apply {\n```", "```kt\n    message = \"Something\" \n```", "```kt\n    title = \"Apply\"\n```", "```kt\n}\n```", "```kt\ndata class Mail_V3(\n```", "```kt\n    val to: List<String>,\n```", "```kt\n    val cc: List<String> = listOf(),\n```", "```kt\n    val title: String = \"\",\n```", "```kt\n    val message: String = \"\",\n```", "```kt\n    val important: Boolean = false\n```", "```kt\n)\n```", "```kt\nval mail = Mail_V3(listOf(\"manager@company.com\"), listOf(), \"Ping\")\n```", "```kt\nval mail = Mail_V3(title = \"Hello\", message = \"There\", to = listOf(\"my@dear.cat\"))\n```", "```kt\ndata class User(\n```", "```kt\n    val name: String,\n```", "```kt\n    val role: Role,\n```", "```kt\n    val permissions: Set<String>,\n```", "```kt\n) {\n```", "```kt\n    fun hasPermission(permission: String) = permission in       permissions\n```", "```kt\n}\n```", "```kt\nenum class Role {\n```", "```kt\n    ADMIN,\n```", "```kt\n    SUPER_ADMIN,\n```", "```kt\n    REGULAR_USER\n```", "```kt\n}\n```", "```kt\n// In real application this would be a database of users\n```", "```kt\nval allUsers = mutableListOf<User>()\n```", "```kt\nfun createUser(name: String, role: Role) {\n```", "```kt\n    for (u in allUsers) {\n```", "```kt\n        if (u.role == role) {\n```", "```kt\n            allUsers += User(name, role, u.permissions)\n```", "```kt\n            return\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    // Handle case that no other user with such a role exists\n```", "```kt\n}\n```", "```kt\ndata class User(\n```", "```kt\n    val name: String,\n```", "```kt\n    val role: Role,\n```", "```kt\n    val permissions: Set<String>,\n```", "```kt\n    val tasks: List<String>,\n```", "```kt\n) {\n```", "```kt\n   ...\n```", "```kt\n}\n```", "```kt\nallUsers += User(name, role, u.permissions, u.tasks)\n```", "```kt\ndata class User(\n```", "```kt\n    val name: String,\n```", "```kt\n    val role: Role,\n```", "```kt\n    private val permissions: Set<String>,\n```", "```kt\n    val tasks: List<String>,\n```", "```kt\n) {\n```", "```kt\n   ...\n```", "```kt\n}\n```", "```kt\n// Name argument is underscored here simply not to confuse \n```", "```kt\n// it with the property of the same name in the User object\n```", "```kt\nfun createUser(_name: String, role: Role) {\n```", "```kt\n    for (u in allUsers) {\n```", "```kt\n        if (u.role == role) {\n```", "```kt\n            allUsers += u.copy(name = _name)\n```", "```kt\n            return\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    // Handle case that no other user with such a role exists\n```", "```kt\n}\n```"]