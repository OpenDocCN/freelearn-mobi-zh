- en: Chapter 3. Exploring Various Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A framework is a collection of resources. It collects a static library and
    its header files into a single structure that Xcode can easily include into our
    projects. A framework is a dynamic library. In iOS, there are two kinds of frameworks:
    public frameworks and private frameworks. From iOS 3.1, all private and public
    libraries are combined into a big cache file. There are a lot of frameworks provided
    by Apple for different functionalities. The extension of the framework is `.framework`.
    For every unique feature, a framework is defined—for example, for using maps a
    `MapKit` framework is available, and for location, a `CoreLocation` framework
    is available. Various frameworks are present at the `<Xcode.app>Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/<iOS_SDK>/System/Library/Frameworks`
    directory, where `Xcode.app` is our application path (where we saved our app).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Framework descriptions in a tabular form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databases in iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activities to understand every topic in a better way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generally, frameworks are bundles that contain a linkable library (`.dylib`)
    and associated resources and headers for development. Each framework contains
    sample code and other resources associated with it. There are a number of frameworks
    provided by Apple. Frameworks are listed in the following table with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Accelerate.framework` | This framework handles the math, DSP, large numbers,
    and image processing. |'
  prefs: []
  type: TYPE_TB
- en: '| `Accounts.framework` | This framework provides access to accounts in the
    `Accounts` database. It allows creation of accounts if none exist. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddressBook.framework` | This framework provides access to the `AddressBook`
    database. |'
  prefs: []
  type: TYPE_TB
- en: '| `AddressBookUI.framework` | This framework contains classes for displaying
    the system-defined people Picker and editor interfaces. |'
  prefs: []
  type: TYPE_TB
- en: '| `AdSupport.framework` | This framework provides access to the identifiers
    to serve adverts and a flag that indicates if limited tracking is on. |'
  prefs: []
  type: TYPE_TB
- en: '| `AssetsLibrary.framework` | This framework gives access to user photos and
    videos. |'
  prefs: []
  type: TYPE_TB
- en: '| `AudioToolbox.framework` | This framework provides an interface for recording,
    playing, and audio streaming. |'
  prefs: []
  type: TYPE_TB
- en: '| `AudioUnit.framework` | This framework is used to load audio units and their
    uses. |'
  prefs: []
  type: TYPE_TB
- en: '| `AVFoundation.framework` | This framework is used for playing and recording
    audio and video. |'
  prefs: []
  type: TYPE_TB
- en: '| `CFNetwork.framework` | This framework is used to access networks through
    Wi-Fi or cellular networks. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreAudio.framework` | This framework provides the datatypes used for Core
    Audio. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreBluetooth.framework` | This framework provides access to Bluetooth (hardware).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreData.framework` | This framework contains the interface for application
    data model. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreFoundation.framework` | This framework provides software services and
    basic management of data. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreGraphics.framework` | This framework contains the API for the Quartz
    engine and gives a 2D view. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreImage.framework` | This framework is the interface used to manipulate
    images and video. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreLocation.framework` | This framework is the interface used to determine
    the user''s location. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreMedia.framework` | This framework includes the low-level routines for
    manipulating audio and video. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreMIDI.framework` | This framework includes the low-level routines for
    handling MIDI data. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreMotion.framework` | This framework is the interface to access accelerometer
    and gyrometric data. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreTelephony.framework` | This framework allows access to Carrier information
    and information related to the current call. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreText.framework` | This framework contains a text layout and rendering
    engine. |'
  prefs: []
  type: TYPE_TB
- en: '| `CoreVideo.framework` | This framework includes low-level routines for using
    audio and video. It is advised to not use it directly. |'
  prefs: []
  type: TYPE_TB
- en: '| `EventKit.framework` | This framework interface is used to access the calendar
    and events. |'
  prefs: []
  type: TYPE_TB
- en: '| `EventKitUI.framework` | This framework contains classes for displaying the
    calendar''s interface. |'
  prefs: []
  type: TYPE_TB
- en: '| `ExternalAccessory.framework` | This framework is an interface used to communicate
    with the attached hardware. |'
  prefs: []
  type: TYPE_TB
- en: '| `Foundation.framework` | This framework contains the interface for managing
    Strings, Arrays, collections, and low-level datatypes. |'
  prefs: []
  type: TYPE_TB
- en: '| `GameController.framework` | This framework is the interface to communicate
    with game-related hardware. |'
  prefs: []
  type: TYPE_TB
- en: '| `GameKit.framework` | This framework is used for peer-to-peer connection
    and to create social games. |'
  prefs: []
  type: TYPE_TB
- en: '| `GLKit.framework` | This framework is used for building the OpenGL ES application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GSS.framework` | This framework provides security-related services. |'
  prefs: []
  type: TYPE_TB
- en: '| `iAd.framework` | This framework is used to display advertisements. |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageIO.framework` | This framework contains classes to read and write image
    data. |'
  prefs: []
  type: TYPE_TB
- en: '| `IOKit.framework` | This framework is a low-level framework and is used to
    communicate with the kernel and the hardware. |'
  prefs: []
  type: TYPE_TB
- en: '| `JavaScriptCore` | This framework contains files for evaluating JavaScript
    code and parsing JSON. |'
  prefs: []
  type: TYPE_TB
- en: '| `MapKit.framework` | This framework is used for embedding a map in our application
    and to use reverse geocoding. |'
  prefs: []
  type: TYPE_TB
- en: '| `MediaAccessibility.framework` | This framework was defined in iOS 7\. It
    manages the presentation of closed-caption content in media files. |'
  prefs: []
  type: TYPE_TB
- en: '| `MediaPlayer.framework` | This framework contains the interface for playing
    a video in full screen mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `MediaToolbox.framework` | This framework contains the interface for playing
    audio content. |'
  prefs: []
  type: TYPE_TB
- en: '| `MessageUI.framework` | The framework contains the interface for composing
    e-mails. |'
  prefs: []
  type: TYPE_TB
- en: '| `MobileCoreServices.framework` | This framework defines UTIs supported by
    the system. |'
  prefs: []
  type: TYPE_TB
- en: '| `MultipeerConnectivity.framework` | This framework was introduced in iOS
    7\. It is responsible for implementing peer-to-peer networking between devices.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `NewsstandKit.framework` | This framework provides the interface for downloading
    magazines and newspapers in the background. |'
  prefs: []
  type: TYPE_TB
- en: '| `OpenAL.framework` | This framework contains the interface for the cross-platform
    audio library. |'
  prefs: []
  type: TYPE_TB
- en: '| `OpenGLES.framework` | This framework provides the interface for the OpenGL
    ES library and contains classes that are used for 2D and 3D graphics. |'
  prefs: []
  type: TYPE_TB
- en: '| `PassKit.framework` | This framework contains interfaces for creating digital
    passes to replace things such as tickets, membership cards, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `QuickLook.framework` | This provides the interface for previewing a file.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SafariServices.framework` | This framework was introduced in iOS 7\. It
    supports the creation of reading list items in Safari. |'
  prefs: []
  type: TYPE_TB
- en: '| `Security.framework` | This framework provides the interface for managing
    keys, trust policies, and certificates. |'
  prefs: []
  type: TYPE_TB
- en: '| `Social.framework` | This framework contains the interface to communicate
    or integrate social network services. |'
  prefs: []
  type: TYPE_TB
- en: '| `SpriteKit.framework` | This framework was introduced in iOS 7\. It facilitates
    the creation of sprite-based animations. |'
  prefs: []
  type: TYPE_TB
- en: '| `StoreKit.framework` | This framework is responsible for handling financial
    transactions associated with the app. |'
  prefs: []
  type: TYPE_TB
- en: '| `SystemConfiguration.framework` | This framework contains the interfaces
    for determining whether the network is available or not. |'
  prefs: []
  type: TYPE_TB
- en: '| `Twitter.framework` | This framework contains the interface for sending tweets.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `UIKit.framework` | This framework contains the classes for iOS UI components
    and for the user interface layer of applications. |'
  prefs: []
  type: TYPE_TB
- en: '| `VideoToolbox.framework` | This framework contains the interfaces used by
    the device. It is advised to not use it directly. |'
  prefs: []
  type: TYPE_TB
- en: These are the various frameworks provided by Apple and we can use them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring various UI components with libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve already learned about UI in the previous chapter. Now we can start
    by exploring some UI components and the frameworks. We will make a simple `Student
    Registration` app by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, create a new single view project in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to storyboard and navigate to **Editor** | **Embed In** | **Navigation
    Controller**, as shown in the following screenshot:![Exploring various UI components
    with libraries](img/1829OT_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your storyboard looks like this:![Exploring various UI components with libraries](img/1829OT_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the navigation bar of the second view by clicking on it and rename it
    to `Student Registration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one button to the view (name it `Add Student`) and set the color of the
    button text and background of the button from the Inspector panel on the right-hand
    side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for a new view controller in the interface builder and drag it beside
    the second view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a new view controller, we need to add new class files. Go to **File** at
    the top of Xcode and then navigate to **File** | **New** | **File...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create a new **Objective-C class** file and give a suitable name to the
    class (for example, `StudentRegistration`), as shown in the following screenshot:![Exploring
    various UI components with libraries](img/1829OT_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the storyboard, select our third view, and give it a name that is similar
    to our new Objective-C class from the inspector element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the button, select the **Action** option, drag to the new view
    (the third view), and select **Push**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, drag four text fields in the third view as shown in the following screenshot.
    Select one text field and go to the inspector panel where you will find an option
    **Placeholder**. Here, enter text for all the text fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the bar button from the interface builder and drag it to the bar of the
    third view and name it (for example, `Save`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By following the preceding steps, our storyboard will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring various UI components with libraries](img/1829OT_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is our simple UI, but this time we need to stretch our UI component. We
    can change the color of our navigation bar for better visibility. To change our
    navigation bar color, we need to apply the following code. We can insert the following
    code in the `didFinishLaunchingWithOptions:` method of `AppDelegate.m`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need some changes in our `StudentRegistration-Info.plist` file. Make
    the changes according to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring various UI components with libraries](img/1829OT_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After running our project, the output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring various UI components with libraries](img/1829OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, tap on the **+ Add Student** button; it will push our app to another view
    and our screen will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring various UI components with libraries](img/1829OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Database integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Databases are a way to save our data in computer memory. A database is a set
    of data held in computers, and can be accessible in many ways. In iOS, there is
    mainly only one type of database: **SQLite**.'
  prefs: []
  type: TYPE_NORMAL
- en: SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SQLite is an embedded implementation of SQL. SQLite is an in-process library
    that implements a self-contained, zero-configuration, server-less, and transactional
    SQL database engine. The source code for SQLite exists in the public domain and
    is free for both private and commercial purposes. SQLite is available for several
    programming languages such as C, C++, Java, and so on. It is also available in
    several operating systems such as iOS, Android, Symbian, Blackberry, and so on.
    SQLite is used for handling data files or creating data files in iOS. It can be
    easily performed by using SQL queries. SQLite works on the principle of RDBMS
    in which data is stored in a table and the relationship is also stored inside
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can use SQLite in our project, a library and a framework are provided
    by Apple: `ibsqlite3.dylib` and `sqlite3.h` respectively. There are several functions
    of SQLite. The important functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sqlite3_open()`: This function creates and opens an empty database. If the
    database already exists, it will only open the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlite3_close()`: This function is used to close an opened SQLite database
    connection. It will free all the resources associated with the database connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlite3_prepare_v2()`: This function is needed to compile the SQL statement
    into byte code. It basically transforms a SQL statement in to an executable piece
    of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlite3_step()`: This function will call a previously prepared SQL statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlite3_finalize()`: This function deletes a previously prepared SQL statement
    from memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sqlite3_exec()`: This combines the functionality of `sqlite3_prepare_v2()`,
    `sqlite3_step()`, and `sqlite3_finalize()` into a single function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s carry out a small activity to understand SQLite in a better way. We
    will extend the previous app. Open that app and proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Project Settings** | **General**. Now, scroll down and click on **+**
    to add framework. Search for SQLite framework and click on **Add**, as shown in
    the following screenshot:![SQLite](img/1829OT_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the following header file for SQLite in the new class that we added
    in the previous steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make an object for SQLite in the interface part as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, link all the text fields and the **Save** button to the `.h` file of the
    newly added class file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to the `Save` method in the `.m` file and write the following code
    for SQLite integration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run your app, insert text in all the text fields, and click on **Save**,
    as shown in the following screenshot. In the console, the output will be **Database
    SAVED**.![SQLite](img/1829OT_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the **Save** button will clear all our text fields (as shown in
    the following screenshot) and save our inputs to the database:![SQLite](img/1829OT_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is all there is to integrating a SQLite database with our App.
  prefs: []
  type: TYPE_NORMAL
- en: Core Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's used in thousands of applications and by millions of people, both on iOS
    and OS X. Core Data is maintained by Apple and is very well documented. It's a
    mature framework. Core Data takes advantage of the Objective-C language and its
    runtime, and easily integrates with the Core Foundation framework. The result
    is an easy-to-use framework for managing an object graph that is easy to use and
    is very efficient in terms of memory usage. Core Data is a powerful framework
    provided by Apple to include data in applications. It is even more preferable
    because it doesn't use processes and can easily maintain the relation between
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple defines a framework for Core Data known as `CoreData.framework`. Before
    using Core Data in our app, we need to add this framework in our project. Core
    Data is itself not a database of our application; it is a framework that manages
    an object graph. With Core Data, we can easily trace the objects in our apps to
    the table records in the database without firing any SQL query. In Core Data,
    we need to add three different instances to deal with the database, which are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Persistent store coordinator**: As the name suggests, it is a coordinator
    that coordinates between managing object contexts and low-level files saved in
    our database (SQLite file). We cannot use it directly; it will only be used while
    setting up `NSManageObjectContext`. Creating linkage for persistent store coordinates
    automatically creates linkage for SQLite files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managed object context**: We can think of it as a scratch pad (a small, fast
    memory for the temporary storage of data). When we fetch objects from a persistent
    store, we get temporary copies into the scratch pad. Then we can use and modify
    those objects however we like without saving those data; the persistence remains
    unchanged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NSManageObjectModel**: A managed object model is an instance of the `NSManagedObjectModel`
    class. It describes a schema (contains definitions) for objects (also called entities).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s understand Core Data with an activity:'
  prefs: []
  type: TYPE_NORMAL
- en: To create the example application project, launch Xcode and select the option
    to create a new project. In the new project window, select the **Empty Application**
    option. In the **Product Name** field, enter `CoreData`, enable the **Use Core
    Data** checkbox, and click on **Next** to select a location to store the project
    files, as shown in the following screenshot:![Core Data](img/1829OT_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to the usual files that are present when creating a new project,
    this time an additional file named `CoreData.xcdatamodeld` is also created. This
    is the file where the entity descriptions for our data model are going to be stored.
    The entity description defines the model for our data, much in the way a schema
    defines the model of a database table. To create the entity for the `CoreData`
    application, select the `CoreData.xcdatamodeld` file to load the entity editor,
    as shown in the following screenshot:![Core Data](img/1829OT_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new entity, click on the **Add Entity** button located in the bottom
    panel. Double-click on the new **Entity** item that appears beneath the **Entities**
    heading and change the entity name to `Contacts`. With the entity created, the
    next step is to add some attributes that represent the data that is to be stored.
    To do so, click on the **Add Attribute** button. In the **Attributes** pane, name
    the attribute as `name` and set the type to `String`. Repeat these steps to add
    two other String attributes named `address` and `phone` respectively, as shown
    in the following screenshot:![Core Data](img/1829OT_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to create our own storyboard file and view controller class. To
    add a storyboard file, navigate to **File** | **New** | **File…** and, in the
    resulting dialog, select the **User Interface** category from beneath **iOS**
    in the left-hand-side panel. In the main panel, select the **Storyboard** option
    and click on **Next**, as shown in the following screenshot:![Core Data](img/1829OT_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the storyboard as `Main` (as shown in the following screenshot), select
    a location in the project for the new file, and then click on **Create**.![Core
    Data](img/1829OT_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, edit the `AppDelegate.m` file and modify the `didFinishLaunchingWithOptions`
    method so that it simply returns `YES` instead of creating a window for the application
    (since we are now using a storyboard file for the user interface, this is no longer
    needed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we need a new Objective-C file. So add a new file from the menu and name
    it `CoreDataViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In storyboard, drag `ViewController` from the interface builder and design it
    as shown in the following screenshot:![Core Data](img/1829OT_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't forget to give a name to this view from the inspector editor on the right-hand
    side of Xcode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it is time to make connections between the storyboard and the newly added
    Objective-C file, (`CoreDataViewController.h`). We also need to import the `AppDelegate.h`
    class to our new class as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our `.h` class probably looks the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Core Data](img/1829OT_03_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When the user touches the **Save** button, the `Save` method is called. It
    is within this method, therefore, that we must implement the code to obtain the
    managed object context, and create and store managed objects containing the data
    entered by the user. Select the `CoreDataViewController.m` file, scroll down to
    the template `Save` method, and implement the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final step is to build and run the application. Click on the **Run** button
    located in the toolbar of the main Xcode project window and enter the example
    text in to the text fields, as shown in the following screenshot:![Core Data](img/1829OT_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After tapping on the **Save** button, our data is saved in the database and
    our label is changed into **Contact saved**, as shown in the following screenshot:![Core
    Data](img/1829OT_03_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Social integration in our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integration of social sites in an app is very common nowadays. In iOS 6, a
    new framework is introduced known as **Social.framework**. The social framework
    lets us integrate social networking services such as Facebook and Twitter in our
    application. We don''t have to download any SDK or use any API; Social framework
    handles everything. One class is important for integrating social networking services:
    `SLComposeViewController`. The `SLComposeViewController` class presents a standard
    view for users to compose tweet or Facebook posts. This class also allows users
    to share location without any additional code.'
  prefs: []
  type: TYPE_NORMAL
- en: The work of the `SLComposeViewController` class is to get the Twitter or Facebook
    screen on our device to enable sharing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in order to handle the API and connection, another class is available
    in Social framework: `SLRequest`. The `SLRequest` class allows iOS applications
    to interact directly with social network APIs through HTTP-based requests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s carry out one simple activity to understand social integration in a
    better way:'
  prefs: []
  type: TYPE_NORMAL
- en: Again, continue with the previous project. Open that project and add one new
    Objective-C class as we did earlier and name it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new view controller near or below the third view controller and add two
    buttons named `Tweet` and `Facebook` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add one more button in the second view below the **Add Student** button and
    name it (for example, `Share on Facebook or Twitter`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, give the new view (the fourth view) the same name as the new class in the
    inspector element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Share on Facebook or Twitter** button and choose the action and
    link it to the fourth (new) view. Storyboard will look like this:![Social integration
    in our application](img/1829OT_03_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link both the buttons (**Tweet** and **Facebook**) to the new class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new framework, `Social.framework`, to our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the header to the new class `.h` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the new class `.m` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the project. The output will look like the following screenshot:![Social
    integration in our application](img/1829OT_03_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Share on Facebook or Twitter** button. The output will be as
    follows:![Social integration in our application](img/1829OT_03_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Tweet** button. The output will look like this:![Social
    integration in our application](img/1829OT_03_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This output appears because we didn't manage the settings in the simulator.
    When you set your account in **Settings**, it will able to post our tweet on Twitter;
    or when we run it on the actual device, it will work properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, click on the **Facebook** button, the output will be as follows:![Social
    integration in our application](img/1829OT_03_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This activity is only for sharing something on our post. For creating a login
    we need Facebook SDK. Logging in with Facebook not only allows you to attach a
    social characteristic into your app, but it can also be used as a login system
    instead of creating a custom one. To create a Facebook login, we need to download
    the Facebook SDK from [https://developers.facebook.com/docs/ios](https://developers.facebook.com/docs/ios).
    There are a lot of classes available in this SDK. Most tasks are handled by those
    classes. Developers don't have to bother about everything. They are only required
    to add the login view to the view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity is a little complex and the method is also long, so you can go
    through the link: [http://www.appcoda.com/ios-programming-facebook-login-sdk/](http://www.appcoda.com/ios-programming-facebook-login-sdk/)
    and get appropriate examples of Facebook login. Follow the steps given in the
    link and you will get an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Social integration in our application](img/1829OT_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned some more about the UI and how to integrate frameworks
    in your project. You also made a simple app, `Student Registration`, by exploring
    each section. And, at the end of the chapter, you created a fully-loaded app with
    a UI and its functionalities. You also learned about databases with social media
    integration.
  prefs: []
  type: TYPE_NORMAL
- en: In next chapter, you will learn about new frameworks and APIs and various new
    concepts.
  prefs: []
  type: TYPE_NORMAL
