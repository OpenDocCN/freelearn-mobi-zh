["```kt\n<!-- A simple bean definition -->\n<bean id = \"...\" class = \"...\">\n<!-- collaborators and configuration-->\n</bean>\n\n<!-- A bean example with prototype scope -->\n<bean id = \"...\" class = \"...\" scope = \"prototype\"> <!-- collaborators and configuration-->\n</bean>\n\n<!-- A bean definition with initialization function -->\n<bean id = \"...\" class = \"...\" init-function = \"...\">\n<!-- collaborators and configuration-->\n</bean>\n\n<!-- A bean definition with destruction function -->\n<bean id = \"...\" class = \"...\" destroy-function = \"...\">\n<!-- collaborators and configuration for this bean go here -->\n</bean>\n```", "```kt\n<!-- A bean example with singleton scope -->\n<bean id = \"...\" class = \"...\" scope = \"singleton\"/>\n<!-- You can remove the scope for the singleton -->\n<bean id = \"...\" class = \"...\"/>\n```", "```kt\nclass UserGreeting {\n    private var globalGreeting: String? = \"Sasuke Uchiha\"\n\n    fun setGreeting(greeting: String) {\n        globalGreeting = greeting\n    }\n\n    fun getGreeting() {\n        println(\"Welcome, \" + globalGreeting!! + \"!!\")\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val context = ClassPathXmlApplicationContext(\"Beans.xml\")\n\n// first object\n    val objectA = context.getBean(\"userGreeting\", UserGreeting::class.java)\n\n// set a value for greeting\n    objectA.setGreeting(\"Naruto Uzumaki\")\n\n    objectA.getGreeting()\n\n    val objectB = context.getBean(\"userGreeting\", UserGreeting::class.java)\n    objectB.getGreeting()\n}\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns = \"http://www.springframework.org/schema/beans\"\n       xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <bean id=\"userGreeting\" class =\"ktPackage.UserGreeting\" scope=\"singleton\"/>\n\n</beans>\n```", "```kt\nWelcome, Naruto Uzumaki!!  <--- value of objectA \nWelcome, Naruto Uzumaki!!  <--- value of objectB \n```", "```kt\n<!-- A bean example with prototype scope -->\n<bean id = \"...\" class = \"...\" scope = \"prototype\"/>\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns = \"http://www.springframework.org/schema/beans\"\n       xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <bean id=\"userGreeting\" class =\"ktPackage.UserGreeting\" scope=\"prototype\"/>\n\n</beans>\n```", "```kt\nWelcome, Naruto Uzumaki!!  <--- value of objectA \nWelcome, Sasuke Uchiha!!  <--- value of objectB \n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns = \"http://www.springframework.org/schema/beans\"\n       xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation = \"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <bean id=\"userGreeting\" class =\"ktPackage.UserGreeting\" init-function = \"afterPropertiesSet\" \n destroy-function = \"destroy\"/>\n\n</beans>\n```", "```kt\nclass UserGreeting {\n    private var globalGreeting: String? = \"Sasuke Uchiha\"\n\n    fun setGreeting(greeting: String) {\n        globalGreeting = greeting\n    }\n\n    fun getGreeting() {\n        println(\"Welcome, \" + globalGreeting!! + \"!!\")\n    }\n\n fun afterPropertiesSet(){\n println(\"Bean is going to start.\")\n }\n\n fun destroy(){\n println(\"Bean is going to destroy.\")\n }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val context = ClassPathXmlApplicationContext(\"Beans.xml\")\n    val objectA = context.getBean(\"userGreeting\", UserGreeting::class.java)\n\n    objectA.setGreeting(\"Naruto Uzumaki\")\n    objectA.getGreeting()\n    context.registerShutdownHook()\n}\n```", "```kt\nBean is going to start.\nWelcome, Naruto Uzumaki!!\nBean is going to destroy.\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!--Constructor-based Dependency Injection Example Start-->\n    <bean id=\"userGreeting\" class=\"ktPackage.UserGreeting\">\n <constructor-arg ref=\"userSurname\" />\n    </bean>\n <bean id=\"userSurname\" class=\"ktPackage.UserSurname\"/>\n    <!--Constructor-based Dependency Injection Example End-->\n</beans>\n```", "```kt\nclass UserSurname {\n init {\n println(\"This is init of UserSurname\")\n }\n\n fun getSurname(){\n println(\"This is the surname of user\")\n }\n}\n```", "```kt\n// added a constractor of UserSurname\nclass UserGreeting(surname: UserSurname) {\n    private var userSurname: UserSurname ?= surname\n init {\n println(\"It is a constructor for user's surname\")\n }\n\n    private var globalGreeting: String? = \"Sasuke Uchiha\"\n\n    fun setGreeting(greeting: String) {\n        globalGreeting = greeting\n    }\n\n    fun getGreeting() {\n        println(\"Welcome, \" + globalGreeting!! + \"!!\")\n    }\n\n    fun afterPropertiesSet(){\n        println(\"Bean is going to start.\")\n    }\n\n    fun destroy(){\n        println(\"Bean is going to destroy.\")\n    }\n\n    fun getUserSurname(){\n userSurname?.getSurname()\n }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val context = ClassPathXmlApplicationContext(\"Beans.xml\")\n    val objectA = context.getBean(\"userGreeting\", UserGreeting::class.java)\n objectA.getUserSurname()\n\n//    objectA.setGreeting(\"Naruto Uzumaki\")\n//    objectA.getGreeting()\n//    context.registerShutdownHook()\n}\n```", "```kt\nThis is init of UserSurname                <------ init from UserSurname.kt\nIt is a constructor for user's surname     <------ init from UserGreeting.kt\nThis is the surname of user                <------ getUserSurname() of UserGreeting.kt\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n<!--Setter Injection Example Start-->\n    <bean id=\"userGreeting\" class=\"ktPackage.UserGreeting\">\n        <property name=\"userSurnameClass\" ref=\"userSurname\"/>\n    </bean>\n    <bean id=\"userSurname\" class=\"ktPackage.UserSurname\"/>\n    <!--Setter Injection Example End-->\n</beans>\n```", "```kt\nclass UserGreeting {\n    private var userSurname: UserSurname? = null\n\n    fun setUserSurnameClass(surname: UserSurname) {\n userSurname = surname\n }\n\n fun getUserSurnameClass(): UserSurname? {\n return userSurname\n    }\n\n    private var globalGreeting: String? = \"Sasuke Uchiha\"\n\n    fun setGreeting(greeting: String) {\n        globalGreeting = greeting\n    }\n\n    fun getGreeting() {\n        println(\"Welcome, \" + globalGreeting!! + \"!!\")\n    }\n\n    fun afterPropertiesSet() {\n        println(\"Bean is going to start.\")\n    }\n\n    fun destroy() {\n        println(\"Bean is going to destroy.\")\n    }\n\n    fun getUserSurname() {\n        userSurname?.getSurname()\n    }\n}\n```", "```kt\nThis is init of UserSurname\nSetting User Surname in UserGreeting\nThis is the surname of user\n```", "```kt\n<bean id=\"app\" class=\"App\">\n<property name=\"name\" value=\"\"/>\n</bean>\n<!-- If we need to pass an empty string or null as a value -->\n<bean id=\"app\" class=\"App\">\n<property name=\"name\"><null/></property>\n</bean>\n```", "```kt\n<bean id=\"app\" class=\"App\" autowire=\"byName\"/>\n```", "```kt\n<bean id=\"app\" class=\"App\" autowire=\"byType\"/>\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!--Beans Auto-Wiring Example Start-->\n    <bean id=\"userGreeting\" class=\"ktPackage.UserGreeting\" autowire=\"byType\"/>\n    <bean id=\"userSurname\" class=\"ktPackage.UserSurname\" autowire-candidate=\"true\"/>\n    <bean id=\"xxxxx\" class=\"ktPackage.XXXX\" autowire-candidate=\"false\"/> <!--demoClass-->\n    <bean id=\"yyyyy\" class=\"ktPackage.YYYY\" autowire-candidate=\"false\"/> <!--demoClass-->\n    <!--SBeans Auto-Wiring Example End-->\n</beans>\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\">\n\n    <!--Beans Auto-Wiring Example Start-->\n    <bean id=\"userGreeting\" class=\"ktPackage.UserGreeting\" autowire=\"byName\"/>\n    <bean id=\"mainService\" class=\"ktPackage.UserSurname\"/>\n    <bean id=\"xxxxx\" class=\"ktPackage.XXXX\"/> <!--demoClass-->\n    <bean id=\"yyyyy\" class=\"ktPackage.YYYY\"/> <!--demoClass-->\n    <!--SBeans Auto-Wiring Example End-->\n</beans>\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans \n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context\n   http://www.springframework.org/schema/context/spring-context.xsd\">\n\n     <context:annotation-config/>\n   <!-- bean definitions will be from here -->\n</beans>\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context\n   http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>  <!--after this tag, we have to write the beans-->\n\n    <bean id=\"users\" class=\"requiredAnnotation.UsersForReq\">\n <property name=\"name\" value=\"Naruto Uzumaki\"/>\n        <property name=\"village\" value=\"Konohagakure\"/>\n    </bean>\n</beans>\n```", "```kt\nclass Users{\n    private var village: String? = null\n    private var name: String? = null\n\n @Required    fun setVillage(village: String?) {\n        this.village = village\n    }\n\n    fun getVillage(): String? {\n        return village\n    }\n\n @Required    fun setName(name: String) {\n        this.name = name\n    }\n\n    fun getName(): String? {\n        return name\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val context = ClassPathXmlApplicationContext(\"requiredAnnotation/beans_for_req.xml\")\n    val users = context.getBean(\"users\") as UsersForReq\n\n    println(\"Name: \"+users.getName())\n    println(\"Village: \"+users.getVillage())\n}\n```", "```kt\nName: Naruto Uzumaki\nVillage: Konohagakure\n```", "```kt\nclass User(val name: String,\n            val id: String)\n\nclass Users{\n    @Autowired\n    val user:User ?= null\n}\n```", "```kt\nclass UsersForAutowired{\n    private lateinit var userDetails: UserDetails\n\n    @Autowired\n    fun setUserDetails(userDetails: UserDetails){\n        this.userDetails = userDetails\n    }\n\n    fun getUserDetails(){\n        this.userDetails.getDetails()\n    }\n}\n```", "```kt\nclass UserDetails{\n    init {\n        println(\"This class has all the details of the user\")\n    }\n\n    fun getDetails(){\n        println(\"Name: Naruto Uzumaki\")\n        println(\"Village: Konohagakure\")\n    }\n}\n```", "```kt\nThis class has all the details of the user\nName: Naruto Uzumaki\nVillage: Konohagakure\n\n```", "```kt\nclass UsersForAutowired{\n    init {\n println(\"UsersForAutowired constructor.\" )\n }\n\n @Autowired\n    private lateinit var userDetails: UserDetails\n\n    fun getUserDetails(){\n        this.userDetails.getDetails()\n    }\n}\n```", "```kt\nUsersForAutowired constructor.\nThis class has all the details of the user\nName: Naruto Uzumaki\nVillage: Konohagakure\n```", "```kt\nclass UsersForAutowired @Autowired constructor(private var userDetails: UserDetails) {\n    init {\n        println(\"UsersForAutowired constructor.\")\n    }\n\n    fun getUserDetails() {\n        this.userDetails.getDetails()\n    }\n}\n```", "```kt\nThis class has all the details of the user\nUsersForAutowired constructor.\nName: Naruto Uzumaki\nVillage: Konohagakure\n```", "```kt\n<?xml version = \"1.0\" encoding = \"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n   http://www.springframework.org/schema/context\n   http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>  <!--after this tag, you have to write the beans-->\n\n    <!-- Definition for Fighters bean without constructor-arg  -->\n    <bean id=\"fighters\" class=\"qualifierAnnotation.Fighters\"/>\n\n    <!--fighter 1-->\n    <bean id=\"fighter1\" class=\"qualifierAnnotation.UsersForQualifier\">\n        <property name=\"name\" value=\"Naruto Uzumaki\"/>\n        <property name=\"village\" value=\"Konohagakure\"/>\n    </bean>\n\n <!--fighter 2-->\n    <bean id=\"fighter2\" class=\"qualifierAnnotation.UsersForQualifier\">\n        <property name=\"name\" value=\"Gaara\"/>\n        <property name=\"village\" value=\"Sunagakure\"/>\n    </bean>\n</beans>\n```", "```kt\nfun main(args: Array<String>) {\n    val context = ClassPathXmlApplicationContext(\"qualifierAnnotation/beans_for_qualifier.xml\")\n    val fighters = context.getBean(\"fighters\") as Fighters\n    fighters.getName()\n    fighters.getVillage()\n}\n```", "```kt\nclass UsersForQualifier{\n    private var village: String? = null\n    private var name: String? = null\n\n    fun setVillage(village: String?) {\n        this.village = village\n    }\n\n    fun getVillage(): String? {\n        return village\n    }\n\n    fun setName(name: String) {\n        this.name = name\n    }\n\n    fun getName(): String? {\n        return name\n    }\n}\n```", "```kt\nclass Fighters {\n    @Autowired\n @Qualifier(\"fighter1\")\n    lateinit var usersForQualifier: UsersForQualifier\n\n    init {\n        println(\"Fighters constructor.\")\n    }\n\n    fun getName() {\n        println(\"Name: \" + usersForQualifier.getName())\n    }\n\n    fun getVillage() {\n        println(\"Village: \" + usersForQualifier.getVillage())\n    }\n}\n```", "```kt\nFighters constructor.\nName: Naruto Uzumaki\nVillage: Konohagakure\n```", "```kt\n @Qualifier(\"fighter2\")\n```", "```kt\nFighters constructor.\nName: Gaara\nVillage: Sunagakure\n```", "```kt\n@Configuration\nopen class CodeBasedConfiguration{\n @Bean\n  open fun mainApp(): MainApp{\n      return MainApp()\n  }\n}\n```", "```kt\n<beans>\n  <bean id = \"mainApp\" class = \"MainApp\"/>\n</beans>\n```", "```kt\n@Configuration\nopen class GreetingConfigurationConfBean{\n @Bean\n  open fun greeting(): GreetingConfBean{\n      return GreetingConfBean()\n  }\n}\n```", "```kt\nclass GreetingConfBean{\n    private var users: String? = null\n    fun setUsers(users: String) {\n        this.users = users\n    }\n    fun getUsers() {\n        println(\"Welcome, $users!!\")\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val applicationContext = AnnotationConfigApplicationContext(GreetingConfigurationConfBean::class.java)\n\n    val greeting = applicationContext.getBean(GreetingConfBean::class.java)\n greeting.setUsers(\"Naruto Uzumaki\")\n    greeting.getUsers()\n}\n```", "```kt\nWelcome, Naruto Uzumaki!!\n```", "```kt\n@Configuration\nopen class GreetingConfigurationDIBean{\n    @Bean\n    open fun greeting(): GreetingDIBean {\n        return GreetingDIBean(getUserDetails())\n    }\n\n @Bean\n    open fun getUserDetails(): GreetingDetailsDIBean {\n        return GreetingDetailsDIBean()\n    }\n}\n```", "```kt\nclass GreetingDIBean (private val userDetails: GreetingDetailsDIBean){\n    init {\n        println(\"Inside DependenciesInjectBean.GreetingDIBean constructor.\")\n    }\n\n    fun getGreeting() {\n        userDetails.getGreetingDetails()\n    }\n}\n```", "```kt\nclass GreetingDetailsDIBean{\n    init {\n        println(\"This class has all the details of the user\")\n    }\n\n    fun getGreetingDetails(){\n        println(\"Welcome, Naruto Uzumaki!!\")\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val applicationContext = AnnotationConfigApplicationContext(GreetingConfigurationDIBean::class.java)\n\n    val greeting = applicationContext.getBean(GreetingDIBean::class.java)\n    greeting.getGreeting()\n}\n```", "```kt\nThis class has all the details of the user\nInside Greeting constructor.\nWelcome, Naruto Uzumaki!!\n```", "```kt\nclass Foo{\n    init {\n        println(\"This is class Foo\")\n    }\n}\nclass Boo{\n    init {\n        println(\"This is class Boo\")\n    }\n}\n```", "```kt\n@Configuration class ConfigFoo {\n @Bean    fun foo(): Foo{\n        return Foo()\n    }\n}\n\n@Configuration\n@Import(ConfigFoo::class)\nclass ConfigBoo {\n @Bean    fun foo(): Boo {\n        return Boo()\n    }\n}\n```", "```kt\nval applicationContext = AnnotationConfigApplicationContext(ConfigBoo::class.java, ConfigFoo::class.java)\n```", "```kt\nval applicationContext = AnnotationConfigApplicationContext(ConfigBoo::class.java)\n```", "```kt\nfun main(args: Array<String>) {\n    val applicationContext = AnnotationConfigApplicationContext(ConfigBoo::class.java)\n\n    //both beans Boo and Foo will be available...\n    val boo: Boo = applicationContext.getBean(Boo::class.java)\n    val foo: Foo = applicationContext.getBean(Foo::class.java)\n}\n```", "```kt\nThis is class Boo\nThis is class Foo\n```", "```kt\n<bean id=\"userGreeting\" class=\"ktPackage.UserGreeting\" init-method=\"afterPropertiesSet\" destroy-method=\"destroy\"/>\n```", "```kt\nfun main(args: Array<String>) {\n    val applicationContext = AnnotationConfigApplicationContext(ConfigFoo::class.java)\n\n    val foo: Foo = applicationContext.getBean(Foo::class.java)\n    applicationContext.registerShutdownHook()\n}\n```", "```kt\nclass Foo{\n    fun init(){\n        println(\"Foo is initializing...\")\n    }\n\n    fun destroy(){\n        println(\"Foo is destroying...\")\n    }\n}\n```", "```kt\n@Configuration\nopen class ConfigFoo {\n    @Bean(initMethod = \"init\", destroyMethod = \"destroy\")\n    open fun foo(): Foo {\n        return Foo()\n    }\n}\n```", "```kt\nFoo is initializing...\nFoo is destroying...\n```", "```kt\n@Configuration public class ConfigFoo {\n   @Bean @Scope(\"prototype\") public Foo foo() {\n      return new Foo();\n   }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n     ----\n     ----\n    <properties>\n <springframework.version>5.0.8.RELEASE</springframework.version>\n        <kotlin.version>1.3.0</kotlin.version>\n        <jstl.version>1.2</jstl.version>\n    </properties>\n\n    <dependencies>\n <!--Spring dependencies-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        ----\n        ----\n        ----\n\n <!--We need to add the following Kotlin dependencies-->\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib-jdk8</artifactId>\n        </dependency>\n    </dependencies>\n\n    <build>\n    <plugins>\n        ----\n        ----\n    </plugins>\n    </build>\n</project>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/mvc\n        http://www.springframework.org/schema/mvc/spring-mvc.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <mvc:annotation-driven />\n <context:component-scan\n            base-package=\"mvckotlin\" />\n    <mvc:default-servlet-handler />\n\n    <bean id=\"viewResolver\"\n          class=\"org.springframework.web.servlet.view.UrlBasedViewResolver\">\n        <property name=\"viewClass\"\n                  value=\"org.springframework.web.servlet.view.JstlView\" />\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n        <property name=\"suffix\" value=\".jsp\" />\n    </bean>\n</beans>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <display-name>spring-mvc-kotlin</display-name>\n    <welcome-file-list>\n        <welcome-file>index.jsp</welcome-file>\n        <welcome-file>default.jsp</welcome-file>\n        <welcome-file>default.html</welcome-file>\n        <welcome-file>index.html</welcome-file>\n\n    </welcome-file-list>\n    <servlet>\n <servlet-name>spring-mvc-kotlin</servlet-name>        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n <servlet-name>spring-mvc-kotlin</servlet-name>        <url-pattern>/index.jsp</url-pattern>\n        <url-pattern>/greeting.jsp</url-pattern>\n    </servlet-mapping>\n</web-app>\n```", "```kt\n@Controller class MVCKotlinAppController {\n    @RequestMapping(\"/greeting\")\n    fun greetingMessage(): ModelAndView {\n        val message =\n            \"<div style='text-align:center;'>\" +\n                \"<h3>Welcome to Learn Spring for Android Application Development</h3>\" +\n            \"</div>\"\n        return ModelAndView(\"greeting\", \"message\", message)\n    }\n}\n```", "```kt\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"kotlin\" %>\n<html>\n<head>\n    <title>Spring MVC Kotlin</title>\n</head>\n<body>\n<br>\n<div style=\"text-align: center\">\n    <h2>\n        Hey You..!! This is your 1st Spring MCV Tutorial..<br> <br>\n    </h2>\n    <h3>\n        <a href=\"greeting.html\">Click here to See Welcome Message... </a>(to\n        check Spring MVC Controller... @RequestMapping(\"/greeting\"))\n    </h3>\n</div>\n</body>\n</html>\n```", "```kt\n<html>\n<head>\n    <title>Spring MVC Kotlin</title>\n</head>\n<body>\n${message}\n</body>\n</html>\n```", "```kt\n@RestController\nclass HtmlController {\n @GetMapping(\"/\")\n    fun blog(model: Model): String {\n        model[\"title\"] = \"Greeting\"\n        return \"index\"\n    }\n}\n```", "```kt\n@SpringBootApplication class SpringBootKotlinApplication\n\nfun main(args: Array<String>) {\n   runApplication<SpringBootKotlinApplication>(*args)\n}\n```", "```kt\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <title>Spring Boot Kotlin</title>\n</head>\n<body>\n   <p>Welcome, Naruto. This project is based on Spring Boot in Kotlin</p>\n</body>\n</html>\n```"]