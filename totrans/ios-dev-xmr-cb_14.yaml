- en: Chapter 14. Deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ad hoc distribution bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an app for the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting an app to the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will walk through all the required steps for preparing and
    installing the appropriate certificates on the development computer. We will also
    learn how to create the provisioning profiles that will allow us to deploy the
    app to a device, whether it is our own or someone else's, or send it to beta testers
    for installation on their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will see how to prepare the app for App Store submission and the
    process for its final release to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Creating profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go through a step-by-step guide to creating and installing
    the appropriate certificates and provisioning profiles that are required for deploying
    an app to the device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps will guide you through the process of creating your developer
    certificate and appropriate provisioning profiles for an app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the developer certificate, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the iOS Developer website at [http://developer.apple.com/ios](http://developer.apple.com/ios).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the iOS **Provisioning Portal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Certificates, Identifiers & Profiles** from the menu on the right-hand
    side and click on **Certificates** on the next page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus (**+**) button on the right-hand side to add a new certificate.
    The following screenshot shows the settings page for the new certificate:![How
    to do it...](img/8924OT_14_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iOS App Development** and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next page provides information on creating a **Certificate Signing Request**
    (**CSR**) on your Mac. Follow the instructions to create a CSR and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, upload the CSR file and click on **Generate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the certificate is generated, you will have the option of downloading
    it. Download it and double-click on the `.cer` file to install it. Keychain Access
    will open, showing the installed certificates on the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that the certificate is installed, we need to set up Xamarin Studio to
    be able to use it. If you haven''t already done so, close Keychain Access, as
    we don''t need it. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Preferences** (*Cmd* + *,*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Developer Accounts** option, click on the plus button to add your
    Apple Developer account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your Apple Developer account credentials and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot displays Xamarin Studio''s **Preferences** window
    with a developer account already added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/8924OT_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have issued and installed our developer certificate, we need to
    register the devices we will be using for debugging by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Back in **Certificates, Identifiers & Profiles** of the Apple Developer portal,
    click on **Devices** on the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button (**+**) to add a new device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the device. If you are testing on multiple devices that do
    not belong to you, you will only be able to tell them apart by this name, so make
    sure it is something that will help you identify the device, for example, `Mike's
    iPhone 5s`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the device's **Unique Device Identifier** (**UDID**). You can find a device's
    UDID by connecting the device on your Mac and opening iTunes. Under the device's
    **Summary** tab, clicking on the serial number will display the UDID. Right-click
    on it and click on **Copy**. You can now paste it in the UDID field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue**. The device is now added to your Apple Developer account
    and can be used for debugging and testing with your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created a development profile, set up Xamarin Studio, and added at least
    one device to our Apple Developer account. The next stage is to create an App
    ID and a provisioning profile, which will allow our app to be installed on a device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create an App ID:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Certificates, Identifiers & Profiles** page, click on **App IDs** on
    the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button (**+**) on the right-hand side to create a new App
    ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **App ID Description** section, enter a name for the App ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an **App ID Prefix**. If there is no available prefix, select **Generate
    New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **App ID Suffix** section, enter a bundle ID. As the instructions suggest,
    it is a good practice to use a reverse-domain name style string (for example,
    `com.mycompany.myapp`) for a bundle ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue**, and the App ID is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are almost there. Now, it''s time for the provisioning profile. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Provisioning Profiles** on the left-hand side of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the plus (**+**) button on the right-hand side to create a new provisioning
    profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **iOS App Development** option and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next page, select the App ID to which the provisioning profile will be
    bound and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting an App ID, we need to select the developer certificate. After
    selecting the developer certificate we created earlier, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to select the devices that the app can be installed on. Select one
    or more devices and click on **Continue**. It is important to note that the app
    will not be installed to devices that are not included here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to give a name to the provisioning profile. Enter your preferred
    name and click on the **Generate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the provisioning profile is generated, we have the option of downloading
    it. Download and double-click on the `.mobileprovision` file to install it on
    your machine. Xcode will now open, with the **Organizer** window showing all the
    installed provisioning profiles on the machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're done. We have successfully prepared our machine for iOS development and
    all the necessary provisioning profiles that will allow us to debug our app on
    a device!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process described in this recipe will allow you to deploy and debug your
    app on a device connected to your Mac. It will not allow you to distribute your
    app to beta testers or to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: The developer certificate is the certificate that allows the compilation of
    apps that will be deployed to devices. It is only meant for development, and one
    developer certificate corresponds to the enrollment of one iOS Developer Program.
  prefs: []
  type: TYPE_NORMAL
- en: Each provisioning profile holds information on what devices it can be installed
    on. An Apple Developer enrolled to the iOS Developer Program can add up to 100
    devices and include them in a provisioning profile.
  prefs: []
  type: TYPE_NORMAL
- en: The App ID is the identifier of your app. Create one App ID for each of your
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: The provisioning profile is the electronic signature that allows your app to
    be deployed to the device. Each provisioning profile corresponds to one app and
    holds all the appropriate permissions that will allow the app to execute on the
    device(s) included in it and the App ID information. It is also what distinguishes
    an app for development or distribution. Provisioning profiles are issued with
    an expiration time. At the time of writing this book, the duration of a provisioning
    profile is 1 year.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To compile and debug an app on the device, select the developer certificate
    and provisioning profile in Xamarin Studio under the **iPhone Bundle Signing**
    node in project options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/8924OT_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This has to be done for each build configuration (**Debug**, **Release**, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: Under the **iPhone Application** node, set the **Display name**, **Bundle Identifier**,
    and **Bundle version** fields for your app. If you leave them blank, Xamarin Studio
    will set their values to default. Specifically, the **Bundle Identifier** field
    will be set to the one that is included in the App ID. However, if you set the
    **Bundle Identifier** field to something other than what is declared in the App
    ID, an error on compilation will occur.
  prefs: []
  type: TYPE_NORMAL
- en: Expiration of provisioning profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a provisioning profile expires, the app does not work on the device any
    longer. You can either renew the existing profile or create a new one and install
    it on the device again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an ad hoc distribution bundle* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Compiling an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Development
    Tools"), *Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ad hoc distribution bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a bundle of our app. We will be
    able to send this bundle to beta testers so that they can test it on their devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an ad hoc distribution bundle, make sure you have created an App ID
    on the iOS Provisioning Portal for your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process of creating ad hoc provisioning profiles is similar to the process
    of creating development distribution profiles. The following steps will guide
    you through the process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a distribution certificate. For distributing apps to various devices
    that are not connected to your Mac, but also for submitting to the App Store,
    you need a distribution certificate to be installed. Follow the same steps described
    in the previous recipe for creating a developer certificate. This time though,
    select **App Store and Ad-Hoc** under the **Production** section when adding a
    new certificate. All the other required steps are the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a distribution provisioning profile. Follow the same steps described
    in the previous recipe to create a provisioning profile. This time though, select
    the **Ad Hoc** option in the **Distribution** section, instead of **iOS App Development**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the provisioning profile and double-click on it to install it on your
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have all the distribution certificates and provisioning profiles
    ready, we need to create our ad hoc build by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Xamarin Studio. In this example, the `RegionalFormattingApp`
    project is used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Ad-Hoc** in the solution configuration combo box in the top-left corner,
    as shown in the following screenshot:![How to do it...](img/8924OT_14_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the project options, and under the **iPhone Bundle Signing** option, select
    the distribution certificate and provisioning profile in the list. Just make sure
    that you are selecting the certificate and provisioning profile for the **Ad-Hoc**
    configuration. In the following screenshot, the distribution certificate has been
    selected:![How to do it...](img/8924OT_14_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **iOS IPA Options**, make sure that **Build ad-hoc/enterprise package
    (IPA)** is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Build** | **Rebuild All** on the menu bar to create the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The distribution build of our app is ready! It is time to share it with our
    testers. The following steps will guide you through the process:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Mac, open Finder and navigate to the `bin` folder of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `iPhone/Ad-Hoc` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now send the `*.ipa` file, along with the provisioning profile file
    (`*.mobileprovision`) to the tester(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tester(s) will be able to install the app by dragging-and-dropping both
    files in iTunes and syncing them with the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For distributing apps, we need a distribution certificate. Just like the developer
    certificate, the distribution certificate is created once, but can be transferred
    to another Mac if needed.
  prefs: []
  type: TYPE_NORMAL
- en: The creation process of the ad hoc distribution provisioning profile is the
    same as the process of creating development provisioning profiles. The only difference
    is that we have the option of the type of distribution, which is either **App
    Store** or **Ad Hoc**. The `*.ipa` file is a file that is recognized by iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is also a third-party service that makes the distribution process very
    easy. You can create teams and upload different builds, notify your testers through
    e-mail whenever there is a new build, and most importantly, skip the iTunes syncing.
    You can find all the information at [http://www.testflightapp.com](http://www.testflightapp.com).
    Note that TestFlight is for distribution only. The necessary certificates and
    provisioning profiles will still have to be created.
  prefs: []
  type: TYPE_NORMAL
- en: Syncing ad hoc app bundles with iTunes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different users have different settings set up in their iTunes application.
    In case a user syncs the device and cannot find the app on the device, make sure
    the app is selected for syncing under the **Apps** tab of the selected device
    in iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating profiles* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an app for the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss the important steps we need to take for preparing
    an app for the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps in the previous recipes to create an App Store distribution
    profile for your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One very important step in the preparation of the App Store regards the images
    that should be included in your app.
  prefs: []
  type: TYPE_NORMAL
- en: The most important image is the app icon. This is the icon that will represent
    your app on the users' devices. Depending on the target device, the dimensions
    of the icon should be different. Xamarin Studio makes this process easy by providing
    specific slots for assigning the icon for each target device/platform. For example,
    the icon size for an iPhone 3s is different from the size for an iPhone 4s, as
    is the icon for an iPhone 5 or a later device running on iOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide you through the process:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the `Info.plist` file of your project to open the file in the
    embedded editor. The following screenshot shows all the available options for
    app icons in a universal (iPhone and iPad) app:![How to do it...](img/8924OT_14_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on each corresponding icon to assign the icon. The icons must be in the
    PNG format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have set the app icon, we need to set a launch image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The launch image is the first thing that is displayed when an app starts. Prepare
    a launch image in at least two dimensions for the iPhone and iPod Touch apps:
    320 x 480 pixels for the lower resolution version, 640 x 960 pixels for the higher
    resolution version, and 640 x 1136 pixels for the 4-inch devices (iPhone 5, iPhone
    5s, and so on).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the corresponding box in the `Info.plist` editor to set the launch
    image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have to set the iTunes Artwork image. This is a 512 x 512 and 1024 x
    1024 image that will be displayed on our app's page on iTunes. It can be whatever
    you want; however, a good practice is to make it the same as the app icon. Just
    click on the corresponding button in the `Info.plist` file to assign the iTunes
    Artwork images.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application icons are very important. It is what the user will see on the
    device's screen and tap to start your app. Although all app icons appear as buttons
    with rounded corners and a lighting effect, you should not include these graphical
    features in your icons. These graphical features are automatically rendered upon
    app submission to the App Store. The icons should be perfect squares. Also, always
    provide a background for the icons. Do not use transparencies, because any transparencies
    on the icon will be displayed with black color, potentially destroying your intended
    icon appearance.
  prefs: []
  type: TYPE_NORMAL
- en: The launch image is displayed first when the app starts. When a screen goes
    blank at startup, it means there is no launch image. According to Apple's **iOS
    Human Interface Guidelines** ([https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/index.html)),
    this image should be the first screen that is loaded when the app completes the
    launch process and is ready to accept input. It should only contain the static
    content of the first screen and not the content that is likely to change, like
    localized text.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not mandatory to create your app icon for each available slot in the editor.
    In fact, even if you just create only one low-resolution icon, it will be acceptable,
    and you will be able to upload your app to the App Store. Its quality though,
    when installed on a high-resolution device such as the iPad Air, is not going
    to be top-notch. This is not good for the reputation of both the app and its developer,
    unfortunately.
  prefs: []
  type: TYPE_NORMAL
- en: The 4-inch screen launch image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you may have already noticed, the `Info.plist` editor has a launch image
    already set for retina (4-inch) screens, which is a plain black background. This
    is because when the iPhone 5 was first launched, it was a device with a screen
    height that was different from that of the previous models.
  prefs: []
  type: TYPE_NORMAL
- en: The way Apple chose to help developers easily support the taller screen required
    developers to include a launch image in the dimensions of the new screen. This
    way, iOS automatically sizes the view controllers to the new screen size upon
    startup. By including this blank launch image by default, Xamarin Studio makes
    our life easier so that all our projects appear properly on the 4-inch devices.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating profiles* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting an app to the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go through the required steps to submit an app to the
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to have your zipped distribution app bundle ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for submitting your app to the App Store:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare up to five screenshots that display various aspects of your app. For
    iPhone/iPod Touch apps, the dimensions should be 640 x 1136 px for portrait and
    1136 x 640 px for landscape orientations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare the text that best describes your app. Try to include the most significant
    features. Remember, the description is what the users will read before downloading
    the app, so the more appealing it is, the better.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Prepare keywords that will help your app climb on top of the search results.
    Both app description and keywords are required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: iTunes Connect is the developer portal for managing and submitting apps (among
    other App Store-related stuff). Log in to iTunes Connect ([http://itunesconnect.apple.com](http://itunesconnect.apple.com))
    with your Apple Developer ID. Click on the **Manage your Applications** link.
    Then, click on the **Add New App** button on the top-left corner. Follow the steps
    to complete the app's preparation on the portal. When you finish, make sure the
    app's status is **Waiting for Upload**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have created a new app on the portal, you can upload the zipped app
    bundle with the Application Loader. It is installed by default with Xcode, and
    can be found under `/Developer/Application/Utilities`, or by searching through
    the Spotlight.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you start Application Loader, it will ask you to log in with your Apple
    Developer ID. After logging in, you will be presented with the following window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/8924OT_14_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the **Deliver Your App** button, and it will connect to iTunes Connect,
    find the apps you have in the **Waiting for Upload** status, and load them in
    the list box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will then be presented with a summary view of your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose...** button, and a dialog box will appear that will allow
    you to select the zipped app bundle. After selecting it, proceed with the upload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are all set! If all steps have been completed correctly, the app will be
    uploaded, and it will be under review for release on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: App screenshots can be in JPG, TIF, or PNG formats, in RGB color, and at a resolution
    of at least 72 DPI.
  prefs: []
  type: TYPE_NORMAL
- en: However, the images are important only when users are already viewing your app
    in the App Store. The keywords and description are the parameters that will allow
    your app to come up higher on search results and make the user decide whether
    the app is worth the download. Regarding the keywords, choose them wisely. Do
    not include as many as you can; fewer keywords that reflect the key aspects of
    the app are always better.
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect is the developer portal for managing applications, reviewing
    financial data, app downloads, and it includes the contracts and agreements a
    developer needs to sign. Make sure you read and accept the contracts, or else
    you will not be able to proceed with the app's preparation process. During this
    process, you are required to provide the necessary information, for your app it
    includes, the price range if it is a paid app, the countries in which it will
    be available, as well as the release date for it if you do not want it to be released
    automatically as soon as it has passed through the App Store review process.
  prefs: []
  type: TYPE_NORMAL
- en: When everything is set up correctly and the app's status is **Waiting for Upload**,
    you can then run the Application Loader to upload it. Periodically and with each
    release of iOS and iOS SDK versions, various components or procedures change.
    Always make sure that your iOS SDK version is up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At some point in the app's preparation process, you will be required to enter
    a **Stock Keeping Unit** (**SKU**) number. This number is a unique identifier
    for each product or service. It can be any number you want, but keep a specific
    pattern to keep track of the identifiers, for example, when you develop additional
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing an app for the App Store* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
