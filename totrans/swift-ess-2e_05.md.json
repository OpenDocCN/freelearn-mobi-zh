["```swift\nimport UIKit\nclass SampleTable: UITableViewController {\n  var items = [\n    (\"First\", \"A first item\"),\n    (\"Second\", \"A second item\"),\n  ]\n  required init?(coder:NSCoder) {\n    super.init(coder:coder)\n  }\n  override func tableView(tableView: UITableView,\n    numberOfRowsInSection section:Int) -> Int {\n    return items.count\n  }\n  override func tableView(tableView: UITableView,\n    cellForRowAtIndexPath indexPath: NSIndexPath)\n     -> UITableViewCell {\n    let cell = tableView.\n     dequeueReusableCellWithIdentifier(\"prototypeCell\")!\n\n    // configure labels\n    return cell\n  }\n}\n```", "```swift\nlet titleLabel = cell.viewWithTag(1) as! UILabel\nlet subtitleLabel = cell.viewWithTag(2) as! UILabel\n```", "```swift\nlet (title,subtitle) = items[indexPath.row]\ntitleLabel.text = title\nsubtitleLabel.text = subtitle\n```", "```swift\nimport UIKit\nclass CounterView: UIView {\n  @IBOutlet weak var label:UILabel!\n  @IBAction func change(sender:AnyObject) {\n    let count = (sender as! UIStepper).value\n    label.text = \"Count is \\(count)\"\n  }\n}\n```", "```swift\nclass SampleTable: UITableViewController {\n  override func viewDidLoad() {\n    let xib = UINib(nibName:\"CounterView\", bundle:nil)\n    // continued\n```", "```swift\n    // continued from before\n    let objects = xib.instantiateWithOwner(self, options:nil)\n    // continued\n```", "```swift\n    // continued from before\n    let counter = objects.first as? UIView\n    tableView.tableHeaderView = counter\n  }\n```", "```swift\ntableView.tableFooterView = \n  xib.instantiateWithOwner(self,options:nil).first as? UIView\n```", "```swift\noverride func intrinsicContentSize() -> CGSize {\n  let height = max(50,label.intrinsicContentSize().height)\n  let width = max(300,label.intrinsicContentSize().width)\n  return CGSize(width: width, height: height)\n}\n```", "```swift\nimport UIKit\nclass TwoLabels: UIView {\n  var left:UILabel = UILabel()\n  var right:UILabel = UILabel()\n  required init?(coder:NSCoder) {\n    super.init(coder:coder)\n    setupView()\n  }\n  override init(frame:CGRect) {\n    super.init(frame:frame)\n    setupView()\n  }\n  // ...\n}\n```", "```swift\nfunc setupView() {\n  addSubview(left)\n  addSubview(right)\n  configureView()\n}\nfunc configureView() {\n  left.text = \"Left\"\n  right.text = \"Right\"\n}\n```", "```swift\nfunc setupView() {\n  // addSubview etc\n  setNeedsUpdateConstraints()\n}\n```", "```swift\noverride func updateConstraints() {\n  translatesAutoresizingMaskIntoConstraints = false\n  left.translatesAutoresizingMaskIntoConstraints = false\n  right.translatesAutoresizingMaskIntoConstraints = false\n  removeConstraints(constraints)\n  // add constraints here\n}\n```", "```swift\n// object.property = otherObject.property * multiplier + constant\n```", "```swift\n// left.width = right.width * 1 + 0\nlet equalWidths = NSLayoutConstraint(\n  item: left,\n  attribute: .Width,\n  relatedBy: .Equal,\n  toItem: right,\n  attribute: .Width,\n  multiplier: 1,\n  constant: 0)\naddConstraint(equalWidths)\n```", "```swift\noverride func updateConstraints() {\n  // …\n  let options = NSLayoutFormatOptions()\n  let namedViews = [\"left\":left,\"right\":right]\n  addConstraints(NSLayoutConstraint.\n    constraintsWithVisualFormat(\"H:|-[left]-[right]-|\",\n      options: options, metrics: nil, views: namedViews))\n  addConstraints(NSLayoutConstraint.\n    constraintsWithVisualFormat(\"V:|-[left]-|\",\n      options: options, metrics: nil, views: namedViews))\n  addConstraints(NSLayoutConstraint.\n    constraintsWithVisualFormat(\"V:|-[right]-|\",\n      options: options, metrics: nil, views: namedViews))\n  super.updateConstraints()\n}\n```", "```swift\nlet footer = UITableViewHeaderFooterView()\nfooter.contentView.addSubview(TwoLabels(frame:CGRect.zero))\ntableView.tableFooterView = footer\n```", "```swift\nimport UIKit\nclass SquaresView: UIView {\n  required init?(coder: NSCoder) {\n    super.init(coder:coder)\n    setupView()\n  }\n  override init(frame: CGRect) {\n    super.init(frame:frame)\n    setupView()\n  }\n  func setupView() {\n  }\n  override func drawRect(rect: CGRect) {\n    // drawing code goes here\n  }\n}\n```", "```swift\noverride func drawRect(rect: CGRect) {\n  let context = UIGraphicsGetCurrentContext()\n  let red = UIColor.redColor().CGColor\n  CGContextSetStrokeColorWithColor(context, red)\n  CGContextStrokeRect(context, \n    CGRect(x:50, y:50, width:100, height:100))\n}\n```", "```swift\nUIColor.greenColor().setFill()\nUIColor.blackColor().setStroke()\nCGContextFillRect(context,\n  CGRect(x:75, y:75, width:50, height:50))\nCGContextStrokeRect(context,\n  CGRect(x:75, y:75, width:50, height:50))\n```", "```swift\nfunc setupView() {\n  contentMode = .Redraw\n}\noverride func drawRect(rect: CGRect) {\n  let context = UIGraphicsGetCurrentContext()\n  let red = UIColor.redColor().CGColor\n  CGContextSetStrokeColorWithColor(context,red)\n  CGContextStrokeRect(context,\n    CGRect(x:center.x-50, y:center.y-50, width:100, height:100))\n  UIColor.greenColor().setFill()\n  UIColor.blackColor().setStroke()\n  CGContextFillRect(context,\n    CGRect(x:center.x-25, y:center.y-25, width:50, height:50))\n  CGContextStrokeRect(context,\n    CGRect(x:center.x-25, y:center.y-25, width:50, height:50))\n}\n```", "```swift\nimport UIKit\nclass ProgressView: UIView {\n  required init?(coder: NSCoder) {\n    super.init(coder:coder)\n    setupView()\n  }\n  override init(frame: CGRect) {\n    super.init(frame:frame)\n    setupView()\n  }\n  func setupView() {\n    configureView()\n  }\n  func configureView() {\n  }\n}\n```", "```swift\nlet circle = CAShapeLayer()\nfunc setupView() {\n  circle.strokeColor = UIColor.blackColor().CGColor\n  circle.fillColor = nil\n  self.layer.addSublayer(circle)\n  configureView()\n}\n```", "```swift\nfunc configureView() {\n  let rect = self.bounds\n  circle.path = UIBezierPath(ovalInRect: rect).CGPath\n}\n```", "```swift\nclass ProgressView: UIView {\n  let square = CAShapeLayer()\n  let circle = CAShapeLayer()\n  let black = UIColor.blackColor().CGColor\n}\n```", "```swift\nfunc setupView() {\n  for layer in [square, circle] {\n    layer.strokeColor = black\n    layer.fillColor = nil\n    self.layer.addSublayer(layer)\n  }\n  configureView()\n}\n```", "```swift\nfunc configureView() {\n  let rect = self.bounds\n  let sq = rect.insetBy(dx: rect.width/3, dy: rect.height/3)\n  square.fillColor = black\n  square.path = UIBezierPath(rect: sq).CGPath\n  circle.path = UIBezierPath(ovalInRect: rect).CGPath\n}\n```", "```swift\nclass ProgressView: UIView {\n  let progress = CAShapeLayer()\n  var progressAmount: CGFloat = 0.5\n  …\n  func setupView() {\n    for layer in [progress, square, circle] {\n      …\n    }\n    progress.lineWidth = 10\n    progress.strokeColor = UIColor.redColor().CGColor\n    configureView()\n  }\n  func configureView() {\n    …\n    let radius = min(rect.width, rect.height) / 2\n    let center = CGPoint(x:rect.midX, y:rect.midY)\n    progress.path = UIBezierPath(\n      arcCenter: center,\n      radius: radius,\n      startAngle: CGFloat(-M_PI_2),\n      endAngle: CGFloat(3*M_PI_2),\n      clockwise: true\n    ).CGPath\n    progress.strokeStart = 0\n    progress.strokeEnd = progressAmount\n  }\n}\n```", "```swift\nclass ProgressView: UIView {\n  let mask = CAShapeLayer()\n  func configureView() {\n    … \n    mask.path = UIBezierPath(ovalInRect:rect).CGPath\n    progress.mask = mask\n  }\n}\n```", "```swift\n@IBDesignable class ProgressView: UIView {\n  … \n  override func layoutSubviews() {\n    setupView()\n  }\n}\n```", "```swift\n@IBDesignable class ProgressView: UIView {\n  @IBInspectable var progressAmount: CGFloat = 0.5 \n  …\n}\n```", "```swift\n@IBAction func setProgress(sender:AnyObject) {\n  switch sender {\n    case let slider as UISlider: progressAmount =\n      CGFloat(slider.value)\n    case let stepper as UIStepper: progressAmount = \n      CGFloat(stepper.value)\n    default: break\n  }\n}\n```", "```swift\n@IBInspectable var progressAmount: CGFloat = 0.5 {\n  didSet {\n    setNeedsLayout()\n  }\n}\n```"]