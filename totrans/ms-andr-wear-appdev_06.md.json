["```java\ncompile \"com.android.support:support-v4:20.0.+\" \n\n```", "```java\nimport android.support.v4.app.NotificationCompat; \nimport android.support.v4.app.NotificationManagerCompat; \nimport android.support.v4.app.NotificationCompat.WearableExtender; \n\n```", "```java\n// Get an instance of the NotificationManager service \nNotificationManagerCompat notificationManager = NotificationManagerCompat.from(mContext); \n\n// Issue the notification with notification manager \nnotificationManager.notify(notificationId, notif); \n\n```", "```java\ncompile 'com.google.android.gms:play-services-location:9.0.2' \n\n```", "```java\ncompile 'com.android.support:support-v13:23.4.0' \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<manifest   \n  package=\"com.siddique.androidwear.today\"> \n\n  <uses-sdk  android:minSdkVersion = \"18\" android:targetSdkVersion=\"22\"/> \n\n  <uses-permission  android:name = \"android.permission.INTERNET\"/> \n\n  <uses-permission  android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> \n\n<application \n  android:allowBackup=\"true\" \n  android:icon=\"@mipmap/ic_launcher\" \n  android:label=\"@string/app_name\" \n  android:supportsRtl=\"true\" \n  android:theme=\"@style/AppTheme\"> \n  <meta-data \n    android:name=\"com.google.android.gms.version\" \n    android:value=\"@integer/google_play_services_version\" \n  /> \n\n  <activity \n    android:name=\".TodayMobileActivity\" \n    android:configChanges=\"keyboardHidden|orientation|screenSize\" \n    android:label=\"@string/app_name\" \n    android:windowSoftInputMode=\"stateHidden\"> \n  </activity> \n\n<!— Listens for incoming messages from Wearable devices —> \n  <service android:name=\".HandheldListenerService\"> \n    <intent-filter> \n\n      <action  android:name=\"com.google.android.gms.wearable.DATA_CHANGED\"/> \n      <action  android:name=\"com.google.android.gms.wearable.MESSAGE_RECEIVED\"/> \n\n      data \n        android:host=\"*\" \n        android:pathPrefix=\"/today\" \n        android:scheme=\"wear\" /> \n    </intent-filter> \n  </service> \n\n  <activity \n    android:name=\".TodoMobileActivity\" \n    android:label=\"@string/title_activity_todo_mobile\" \n    android:theme=\"@style/AppTheme.NoActionBar\"> \n    <intent-filter> \n      <action android:name=\"android.intent.action.MAIN\" /> \n\n  <category android:name=\"android.intent.category.LAUNCHER\" /> \n    </intent-filter> \n  </activity> \n\n  <service \n    android:name=\".GeofenceTransitionsIntentService\" \n    android:exported=\"false\"> \n  </service> \n  </application> \n</manifest> \n\n```", "```java\npublic class TodoMobileActivity extends AppCompatActivity implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener \n{ \n  private ListView mTaskListView; \n  private ArrayAdapter<String> mAdapter; \n\n    public static final String TAG =  TodoMobileActivity.class.getName(); \n  private List<Geofence> geofenceList; \n  private PendingIntent mGeofencePendingIntent;   private GoogleApiClient mGoogleApiClient; \n\n  @Override \n  protected void onCreate(Bundle savedInstanceState) \n  { \n    super.onCreate(savedInstanceState); \n    setContentView(R.layout.activity_todo_mobile); \n    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n    setSupportActionBar(toolbar); \n\n    mTaskListView = (ListView) findViewById(R.id.list_todo);     refreshItems(); \n\n    FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.addTodo); \n    if (fab != null) { \n    fab.setOnClickListener(new View.OnClickListener() \n    { \n      @Override       public void onClick(View view) \n      { \n        LayoutInflater inflater = (LayoutInflater)  getSystemService(Context.LAYOUT_INFLATER_SERVICE); \n        final View addTodoItemView =  inflater.inflate(R.layout.add_todo_item, null); \n\n        final Spinner spinner = (Spinner)  addTodoItemView.findViewById(R.id.todoItemType); \n        ArrayAdapter<CharSequence> adapter =  ArrayAdapter.createFromResource(TodoMobileActivity.this,  R.array.todoItemTypes, android.R.layout.simple_spinner_item); \n        adapter.setDropDownViewResource( android.R.layout.simple_spinner_dropdown_item); \n        spinner.setAdapter(adapter); \n\n        AlertDialog dialog = new  AlertDialog.Builder(TodoMobileActivity.this) \n       .setTitle(\"Add a new todo item\")        .setView(addTodoItemView)        .setPositiveButton(\"Add\", new  DialogInterface.OnClickListener() \n        { \n          @Override \n          public void onClick(DialogInterface dialog, int which) \n          { \n            EditText taskEditText = (EditText)  addTodoItemView.findViewById(R.id.todoItem); \n            Log.i(TAG, \"Todo Item = \" + taskEditText.getText()); \n\n            Spinner todoItemTypeSpinner = (Spinner)  addTodoItemView.findViewById(R.id.todoItemType); \n            String todoItemType = (String)  todoItemTypeSpinner.getSelectedItem(); \n            Log.i(TAG, \"Todo Item type = \" + todoItemType); \n\n            String task = String.valueOf(taskEditText.getText()); \n            Set<String> todoItems =  TodoItems.readItems(TodoMobileActivity.this, todoItemType);             todoItems.add(task); \n            TodoItems.saveItems(TodoMobileActivity.this, todoItemType, todoItems); \n            refreshItems(); \n          } \n        }) \n        .setNegativeButton(\"Cancel\", null) \n        .create(); \n         dialog.show(); \n      } \n    }); \n  } \n\n  if(null == mGoogleApiClient) \n  { \n    mGoogleApiClient = new GoogleApiClient.Builder(this) \n    .addApi(LocationServices.API) \n    .addConnectionCallbacks(this) \n    .addOnConnectionFailedListener(this) \n    .build(); \n     Log.i(TAG, \"GoogleApiClient created\"); \n  } \n\n  if(!mGoogleApiClient.isConnected()) \n  { \n    mGoogleApiClient.connect(); \n    Log.i(TAG, \"Connecting to GoogleApiClient..\"); \n  } \n} \n\nprivate void createGeofences() \n{ \n  Log.i(TAG, \"Creating geo fences\"); \n  geofenceList = new ArrayList<Geofence>(); \n  geofenceList.add(new SimpleGeofence( \n    Constants.HOME_GEOFENCE_ID, \n    Constants.HOME_LATITUDE, \n    Constants.HOME_LONGITUDE).toGeofence()); \n\n  geofenceList.add(new SimpleGeofence( \n    Constants.WORK_GEOFENCE_ID, \n    Constants.WORK_LATITUDE, \n    Constants.WORK_LONGITUDE).toGeofence()); \n} \n\nprivate void refreshItems() \n{ \n  ArrayList<String> taskList = new ArrayList<>(); \n\n  String[] todoItemTypes = \ngetResources().getStringArray(R.array.todoItemTypes); \n  for (String todoItemType : todoItemTypes) \n  { \n    Set<String> todoItems = TodoItems.readItems(this, \ntodoItemType); \n    for (String todoItem : todoItems) \n    { \n      taskList.add(todoItemType + \" - \" + todoItem); \n    } \n  } \n\n  if (mAdapter == null) { \n    mAdapter = new ArrayAdapter<>(this, \n    R.layout.item_todo, \n    R.id.task_title, \n    taskList); \n    mTaskListView.setAdapter(mAdapter);   } \n  else \n  { \n    mAdapter.clear(); \n    mAdapter.addAll(taskList); \n    mAdapter.notifyDataSetChanged(); \n  } \n} \n\npublic void deleteTodoItem(View view) \n{ \n  View parent = (View) view.getParent(); \n  TextView textView = (TextView)  parent.findViewById(R.id.task_title); \n\n  String removingItem = (String) textView.getText(); \n  Log.i(TAG, \"Removing Item = \" + removingItem); \n\n  String[] todoItemTypes =  getResources().getStringArray(R.array.todoItemTypes); \n  TodoItems.removeItem(this, todoItemTypes, removingItem); \n  refreshItems(); \n} \n\n@Override public void onConnected(@Nullable Bundle bundle) \n{ \n  if(mGoogleApiClient != null) \n  { \n    mGeofencePendingIntent = getGeofenceTransitionPendingIntent(); \n    createGeofences(); \n    Log.i(TAG, \"Adding geofences to API location services\"); \n     LocationServices.GeofencingApi.addGeofences(mGoogleApiClient, geofenceList,mGeofencePendingIntent);   } \n} \n\nprivate PendingIntent getGeofenceTransitionPendingIntent() \n{ \n  Intent intent = new Intent(this,  GeofenceTransitionsIntentService.class); \n  return PendingIntent.getService(this, 0, intent,  PendingIntent.FLAG_UPDATE_CURRENT); \n} \n\n@Override public void onConnectionSuspended(int i) \n{ \n  Log.i(TAG, \"onConnectionSuspended called\"); \n} \n\n@Override public void onConnectionFailed(@NonNull ConnectionResult connectionResult) \n{ \n  Log.i(TAG, \"onConnectionFailed called\");   } \n} \n\n```", "```java\npublic class GeofenceTransitionsIntentService extends IntentService \n{ \n  private static final String TAG =  GeofenceTransitionsIntentService.class.getName(); \n\n  public GeofenceTransitionsIntentService() \n  { \n    super(GeofenceTransitionsIntentService.class.getSimpleName()); \n  } \n\n  @Override \n  public void onCreate() \n  { \n    super.onCreate(); \n  }  \n  /* \n  *Handles incoming intents.* \n  * @param intent The Intent sent by Location Services. This Intent is provided to Location \n  *Services (inside a PendingIntent) when addGeofences() is called. \n  */ \n  @Override \n  protected void onHandleIntent(Intent intent) \n  { \n    Log.i(TAG, \"Location changed \" + intent); \n    GeofencingEvent geoFenceEvent =  GeofencingEvent.fromIntent(intent); \n    if (geoFenceEvent.hasError()) \n    { \n      int errorCode = geoFenceEvent.getErrorCode(); \n      Log.e(TAG, \"Location Services error: \" + errorCode); \n    } \n    else \n    { \n      int transitionType = geoFenceEvent.getGeofenceTransition(); \n     // Get an instance of the NotificationManager service \n     NotificationManagerCompat notificationManager =  NotificationManagerCompat.from(this); \n\n    Log.i(TAG, \"Notifying home todo items\"); \n    String triggeredGeoFenceId =  geoFenceEvent.getTriggeringGeofences().get(0) \n   .getRequestId(); \n    switch (triggeredGeoFenceId) \n    { \n      case Constants.HOME_GEOFENCE_ID: \n      if (Geofence.GEOFENCE_TRANSITION_ENTER == transitionType)  \n      { \n        Log.i(TAG, \"Notifying home todo items\"); \n        notifyTodoItems(notificationManager, \"Home\", Constants.HOME_TODO_NOTIFICATION_ID, R.drawable.white_house); \n      } \n      break; \n\n      case Constants.WORK_GEOFENCE_ID: \n        if (Geofence.GEOFENCE_TRANSITION_ENTER == transitionType) \n        { \n          Log.i(TAG, \"Notifying work todo items\"); \n          notifyTodoItems(notificationManager, \"Work\", Constants.WORK_TODO_NOTIFICATION_ID, R.drawable.capitol_hill); \n        } \n        break; \n      } \n    } \n  } \n\n  private void notifyTodoItems(NotificationManagerCompat notificationManager, String todoItemType, int notificationId, int background) \n{ \n  Set<String> todoItems = TodoItems.readItems(this, todoItemType); \n  Intent viewIntent = new Intent(this, TodoMobileActivity.class); \n  PendingIntent viewPendingIntent =  PendingIntent.getActivity(this, 0, viewIntent,  PendingIntent.FLAG_UPDATE_CURRENT); \n\n  NotificationCompat.Builder notificationBuilder =  new NotificationCompat.Builder(this) \n  .setSmallIcon(R.drawable.ic_today_notification) \n  .setLargeIcon(BitmapFactory.decodeResource( \n  getResources(), background)) \n  .setContentTitle(todoItems.size() + \" \" + todoItemType + \" todo  items found!\")   .setContentText(todoItems.toString()    ) \n  .setContentIntent(viewPendingIntent); \n\n// Build the notification and issues it with notification manager. \n  notificationManager.notify(notificationId,  notificationBuilder.build()); \n  } \n} \n\n```"]