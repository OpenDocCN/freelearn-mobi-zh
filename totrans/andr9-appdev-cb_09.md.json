["```kt\n<Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nButton button = findViewById(R.id.button);\nbutton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Toast.makeText(MainActivity.this, \"Click\", Toast.LENGTH_SHORT).show();\n    }\n});\nbutton.setOnLongClickListener(new View.OnLongClickListener() {\n    @Override\n    public boolean onLongClick(View v) {\n        Toast.makeText(MainActivity.this, \"Long Press\", Toast.LENGTH_SHORT).show();\n        return true;\n    }\n});\n```", "```kt\nandroid:onClick=\"\" \n```", "```kt\npublic void onClick(View v) {} \n```", "```kt\nbutton.setOn \n```", "```kt\nprivate GestureDetectorCompat mGestureDetector; \n```", "```kt\nprivate class GestureListener extends GestureDetector.SimpleOnGestureListener {\n    @Override\n    public boolean onSingleTapConfirmed(MotionEvent e) {\n        Toast.makeText(MainActivity.this, \"onSingleTapConfirmed\", Toast.LENGTH_SHORT).show();\n        return super.onSingleTapConfirmed(e);\n    }\n    @Override\n    public boolean onDoubleTap(MotionEvent e) {\n        Toast.makeText(MainActivity.this, \"onDoubleTap\", Toast.LENGTH_SHORT).show();\n        return super.onDoubleTap(e);\n    }\n}\n```", "```kt\npublic boolean onTouchEvent(MotionEvent event) {\n    mGestureDetector.onTouchEvent(event);\n    return super.onTouchEvent(event);\n}\n```", "```kt\nmGestureDetector = new GestureDetectorCompat(this, new  GestureListener());\n```", "```kt\n<android.support.v7.widget.AppCompatImageView\n    android:id=\"@+id/imageView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:src=\"img/ic_launcher\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nprivate ScaleGestureDetector mScaleGestureDetector;\nprivate float mScaleFactor = 1.0f;\nprivate AppCompatImageView mImageView;\n```", "```kt\npublic boolean onTouchEvent(MotionEvent motionEvent) { \n    mScaleGestureDetector.onTouchEvent(motionEvent); \n    return true; \n} \n```", "```kt\nprivate class ScaleListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {\n    @Override\n    public boolean onScale(ScaleGestureDetector scaleGestureDetector) {\n        mScaleFactor *= scaleGestureDetector.getScaleFactor();\n        mScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 10.0f));\n        mImageView.setScaleX(mScaleFactor);\n        mImageView.setScaleY(mScaleFactor);\n        return true;\n    }\n} \n```", "```kt\nmImageView=findViewById(R.id.imageView);\nmScaleGestureDetector = new ScaleGestureDetector(this, new ScaleListener());\n```", "```kt\nmScaleFactor = Math.max(0.1f, Math.min(mScaleFactor, 10.0f)); \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n    <android.support.v4.widget.SwipeRefreshLayout\n        android:id=\"@+id/swipeRefresh\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n        <ListView\n            android:id=\"@android:id/list\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\" />\n    </android.support.v4.widget.SwipeRefreshLayout>\n</RelativeLayout>\n```", "```kt\nSwipeRefreshLayout mSwipeRefreshLayout;\nListView mListView;\nList mArrayList = new ArrayList<>();\nprivate int mRefreshCount=0;\n```", "```kt\nprivate void refreshList() {\n    mRefreshCount++;\n    mArrayList.add(\"Refresh: \" + mRefreshCount);\n    ListAdapter countryAdapter = new ArrayAdapter<String>(this, \n            android.R.layout.simple_list_item_1, mArrayList);\n    mListView.setAdapter(countryAdapter);\n    mSwipeRefreshLayout.setRefreshing(false);\n}\n```", "```kt\nmSwipeRefreshLayout = findViewById(R.id.swipeRefresh);\nmSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\n    @Override\n    public void onRefresh() {\n        refreshList();\n    }\n});\nmListView = findViewById(android.R.id.list);\nfinal String[] countries = new String[]{\"China\", \"France\", \"Germany\", \"India\",\n        \"Russia\", \"United Kingdom\", \"United States\"};\nmArrayList = new ArrayList<>(Arrays.asList(countries));\nListAdapter countryAdapter = new ArrayAdapter<String>(this,\n        android.R.layout.simple_list_item_1, mArrayList);\nmListView.setAdapter(countryAdapter);\n```", "```kt\n<menu  > \n    <item \n        android:id=\"@+id/menu_refresh\" \n        android:showAsAction=\"never\" \n        android:title=\"@string/menu_refresh\"/> \n</menu> \n```", "```kt\nSwipeRefreshLayout.setRefreshing(true); \n```", "```kt\n<uses-feature android:name=\"android.hardware.sensor.compass\" android:required=\"true\"/>\n```", "```kt\n<ListView\n    android:id=\"@+id/list\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nListView listView = findViewById(R.id.list);\nList sensorList = new ArrayList<String>();\n\nList<Sensor> sensors = ((SensorManager) getSystemService(Context.SENSOR_SERVICE))\n        .getSensorList(Sensor.TYPE_ALL);\nfor (Sensor sensor : sensors ) {\n    sensorList.add(sensor.getName());\n}\nListAdapter sensorAdapter = new ArrayAdapter<String>(this,\n        android.R.layout.simple_list_item_1, sensorList);\nlistView.setAdapter(sensorAdapter);\n```", "```kt\nList<Sensor> sensors = ((SensorManager) getSystemService(\n     Context.SENSOR_SERVICE)).getSensorList(Sensor.TYPE_ALL);\n```", "```kt\nList<Sensor> sensors = sensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER); \n```", "```kt\nSensorManager sensorManager =  ((SensorManager) getSystemService(Context.SENSOR_SERVICE));\nif (sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null){\n    //Sensor is available - do something here \n}\n```", "```kt\n<TextView\n    android:id=\"@+id/textView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"0\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nprivate SensorManager mSensorManager; \nprivate Sensor mSensor; \nprivate TextView mTextView; \n```", "```kt\nprivate SensorEventListener mSensorListener = new SensorEventListener() {\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        mTextView.setText(String.valueOf(event.values[0]));\n    }\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        //Nothing to do\n    }\n};\n```", "```kt\n@Override\nprotected void onResume() {\n    super.onResume();\n    mSensorManager.registerListener(mSensorListener, mSensor, SensorManager.SENSOR_DELAY_NORMAL);\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    mSensorManager.unregisterListener(mSensorListener);\n}\n```", "```kt\nmTextView = (TextView)findViewById(R.id.textView);\nmSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\nmSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);\n```", "```kt\nandroid:configChanges=\"keyboardHidden|orientation|screenSize\" \n```", "```kt\nonConfigurationChanged (Configuration newConfig) \n```", "```kt\n<Button\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Check Orientation\"\n    android:id=\"@+id/button\"\n    android:onClick=\"checkOrientation\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\npublic void checkOrientation(View view){\n    int orientation = getResources()\n            .getConfiguration().orientation;\n    switch (orientation) {\n        case Configuration.ORIENTATION_LANDSCAPE:\n            Toast.makeText(MainActivity.this, \"ORIENTATION_LANDSCAPE\", \n                    Toast.LENGTH_SHORT).show();\n            break;\n        case Configuration.ORIENTATION_PORTRAIT:\n            Toast.makeText(MainActivity.this, \"ORIENTATION_PORTRAIT\", \n                    Toast.LENGTH_SHORT).show();\n            break;\n        case Configuration.ORIENTATION_UNDEFINED:\n            Toast.makeText(MainActivity.this, \"ORIENTATION_UNDEFINED\", \n                    Toast.LENGTH_SHORT).show();\n            break;\n    }\n}\n```", "```kt\ngetResources().getConfiguration().orientation \n```", "```kt\nint rotation = getWindowManager().getDefaultDisplay().getRotation();\n```"]