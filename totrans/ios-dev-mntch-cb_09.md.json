["```swift\n    private NSObject orientationObserver;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    UIDevice.CurrentDevice. BeginGeneratingDeviceOrientationNotifications();\n    this.orientationObserver = NSNotificationCenter.DefaultCenter. AddObserver(UIDevice.OrientationDidChangeNotification, delegate {\n    this.lblOrientation.Text = UIDevice.CurrentDevice.Orientation.ToString();\n    } );\n    }\n    public override void ViewDidUnload (){\n    base.ViewDidUnload ();\n    NSNotificationCenter.DefaultCenter. RemoveObserver(this.orientationObserver);\n    UIDevice.CurrentDevice. EndGeneratingDeviceOrientationNotifications();\n    }\n\n    ```", "```swift\nUIDevice.CurrentDevice. BeginGeneratingDeviceOrientationNotifications();\n\n```", "```swift\nthis.orientationObserver = NSNotificationCenter.DefaultCenter. AddObserver(UIDevice.OrientationDidChangeNotification, delegate {\nthis.lblOrientation.Text = UIDevice.CurrentDevice.Orientation.ToString();\n} );\n\n```", "```swift\nNSNotificationCenter.DefaultCenter. RemoveObserver(this.orientationObserver);\nUIDevice.CurrentDevice.EndGeneratingDeviceOrientationNotifications();\n\n```", "```swift\n    public override bool ShouldAutorotateToInterfaceOrientation ( UIInterfaceOrientation toInterfaceOrientation){\n    return true;\n    }\n    public override void DidRotate ( UIInterfaceOrientation fromInterfaceOrientation){\n    base.DidRotate (fromInterfaceOrientation);\n    this.lblOutput.Text = this.InterfaceOrientation.ToString();\n    }\n\n    ```", "```swift\npublic override bool ShouldAutorotateToInterfaceOrientation ( UIInterfaceOrientation toInterfaceOrientation)\n\n```", "```swift\nthis.lblOutput.Text = this.InterfaceOrientation.ToString();\n\n```", "```swift\npublic override bool ShouldAutorotateToInterfaceOrientation ( UIInterfaceOrientation toInterfaceOrientation){\nreturn toInterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || toInterfaceOrientation == UIInterfaceOrientation.LandscapeRight;\n}\n\n```", "```swift\n    private NSObject proximityObserver;\n\n    ```", "```swift\n    UIDevice.CurrentDevice.ProximityMonitoringEnabled = true;\n    if (UIDevice.CurrentDevice.ProximityMonitoringEnabled){\n    this.proximityObserver = NSNotificationCenter.DefaultCenter. AddObserver(UIDevice.ProximityStateDidChangeNotification, delegate(NSNotification ntf) {\n    Console.WriteLine(\"Proximity state: {0}\", UIDevice.CurrentDevice.ProximityState);\n    } );\n    }\n\n    ```", "```swift\n    if (UIDevice.CurrentDevice.ProximityMonitoringEnabled){\n    NSNotificationCenter.DefaultCenter. RemoveObserver(this.proximityObserver);\n    UIDevice.CurrentDevice.ProximityMonitoringEnabled = false;\n    }\n\n    ```", "```swift\nUIDevice.CurrentDevice.ProximityMonitoringEnabled = true;\n\n```", "```swift\nif (UIDevice.CurrentDevice.ProximityMonitoringEnabled)\n\n```", "```swift\nthis.proximityObserver = NSNotificationCenter.DefaultCenter. AddObserver(UIDevice.ProximityStateDidChangeNotification, delegate(NSNotification ntf) {\nConsole.WriteLine(\"Proximity state: {0}\", UIDevice.CurrentDevice.ProximityState);\n} );\n\n```", "```swift\n    private NSObject batteryStateChangeObserver;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    UIDevice.CurrentDevice.BatteryMonitoringEnabled = true;\n    this.batteryStateChangeObserver = NSNotificationCenter. DefaultCenter.AddObserver(UIDevice. BatteryStateDidChangeNotification, delegate (NSNotification ntf) {\n    this.lblOutput.Text = string.Format(\"Battery state: {0}\", UIDevice.CurrentDevice.BatteryState);\n    } );\n    }\n\n    ```", "```swift\nUIDevice.CurrentDevice.BatteryMonitoringEnabled = true;\n\n```", "```swift\nthis.lblOutput.Text = string.Format(\"Battery state: {0}\", UIDevice.CurrentDevice.BatteryState);\n\n```", "```swift\nprivate NSObject batterLevelChangeObserver;\n//...\nthis.batterLevelChangeObserver = NSNotificationCenter.DefaultCenter .AddObserver(UIDevice.BatteryLevelDidChangeNotification, delegate(NSNotification ntf) {\nthis.lblOutput.Text = string.Format(\"Battery level: {0}\", UIDevice.CurrentDevice.BatteryLevel);\n} );\n\n```", "```swift\n    public override bool CanBecomeFirstResponder{\n    get { return true; }\n    }\n    public override void ViewDidAppear (bool animated){\n    base.ViewDidAppear (animated);\n    this.BecomeFirstResponder();\n    }\n    public override void MotionBegan (UIEventSubtype motion, UIEvent evt){\n    base.MotionBegan (motion, evt);\n    this.lblOutput.Text = \"Motion started!\";\n    }\n    public override void MotionEnded (UIEventSubtype motion, UIEvent evt){\n    base.MotionEnded (motion, evt);\n    this.lblOutput.Text = \"Motion ended!\";\n    }\n    public override void MotionCancelled (UIEventSubtype motion, UIEvent evt){\n    base.MotionCancelled (motion, evt);\n    this.lblOutput.Text = \"Motion cancelled!\";\n    }\n\n    ```", "```swift\npublic override bool CanBecomeFirstResponder{\nget { return true; }\n}\n\n```", "```swift\npublic override void ViewDidAppear (bool animated){\nbase.ViewDidAppear (animated);\nthis.BecomeFirstResponder();\n}\n\n```", "```swift\n    public override void TouchesMoved (NSSet touches, UIEvent evt){\n    base.TouchesMoved (touches, evt);\n    UITouch touch = touches.AnyObject as UITouch;\n    UIColor currentColor = this.View.BackgroundColor;\n    float red, green, blue, alpha;\n    currentColor.GetRGBA(out red, out green, out blue, out alpha);\n    PointF previousLocation = touch.PreviousLocationInView(this.View);\n    PointF touchLocation = touch.LocationInView(this.View);\n    if (previousLocation.X != touchLocation.X){\n    this.lblOutput.Text = \"Changing background color...\";\n    float colorValue = touchLocation.X / this.View.Bounds.Width;\n    this.View.BackgroundColor = UIColor.FromRGB(colorValue, colorValue, colorValue);\n    }\n    }\n\n    ```", "```swift\nUITouch touch = touches.AnyObject as UITouch;\n\n```", "```swift\nPointF previousLocation = touch.PreviousLocationInView(this.View);\nPointF touchLocation = touch.LocationInView(this.View);\n\n```", "```swift\nUITouch[] allTouches = touches.ToArray<UITouch>();\n\n```", "```swift\n    using MonoTouch.ObjCRuntime;\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    UIPinchGestureRecognizer pinchGesture = new UIPinchGestureRecognizer(this, new Selector(\"PinchHandler:\"));\n    this.View.AddGestureRecognizer(pinchGesture);\n    }\n    [Export(\"PinchHandler:\")]\n    private void PinchHandler(UIGestureRecognizer gesture){\n    UIPinchGestureRecognizer pinch = gesture as UIPinchGestureRecognizer;\n    switch (pinch.State)\n    {\n    case UIGestureRecognizerState.Began:\n    this.lblOutput.Text = \"Pinch began!\";\n    break;\n    case UIGestureRecognizerState.Changed:\n    this.lblOutput.Text = \"Pinch changed!\";\n    break;\n    case UIGestureRecognizerState.Ended:\n    this.lblOutput.Text = \"Pinch ended!\";\n    break;\n    }\n    }\n\n    ```", "```swift\nUIPinchGestureRecognizer pinchGesture = new UIPinchGestureRecognizer(this, new Selector(\"PinchHandler:\"));\n\n```", "```swift\n[Export(\"PinchHandler:\")]\nprivate void PinchHandler(UIGestureRecognizer gesture)\n\n```", "```swift\n    private class DragLowerLeftGesture : UIGestureRecognizer{\n    public DragLowerLeftGesture(NSObject target, Selector action) : base(target, action){}\n    private PointF startLocation;\n    private RectangleF lowerLeftCornerRect;\n    public override UIGestureRecognizerState State{\n    get{\n    return base.State;\n    } set{\n    base.State = value;\n    }\n    }\n    public override void TouchesBegan (NSSet touches, UIEvent evt){\n    base.TouchesBegan (touches, evt);\n    UITouch touch = touches.AnyObject as UITouch;\n    this.startLocation = touch.LocationInView(this.View);\n    RectangleF viewBounds = this.View.Bounds;\n    this.lowerLeftCornerRect = new RectangleF(0f, viewBounds.Height - 50f, 50f, 50f);\n    if (this.lowerLeftCornerRect.Contains(this.startLocation)){\n    this.State = UIGestureRecognizerState.Failed;\n    } else{\n    this.State = UIGestureRecognizerState.Began;\n    }\n    }\n    public override void TouchesMoved (NSSet touches, UIEvent evt){\n    base.TouchesMoved (touches, evt);\n    this.State = UIGestureRecognizerState.Changed;\n    }\n    public override void TouchesEnded (NSSet touches, UIEvent evt){\n    base.TouchesEnded (touches, evt);\n    UITouch touch = touches.AnyObject as UITouch;\n    PointF touchLocation = touch.LocationInView(this.View);\n    if (this.lowerLeftCornerRect.Contains(touchLocation)){\n    this.State = UIGestureRecognizerState.Ended;\n    } else{\n    this.State = UIGestureRecognizerState.Failed;\n    }\n    }\n    }\n\n    ```", "```swift\nprivate class DragLowerLeftGesture : UIGestureRecognizer\n\n```", "```swift\n    this.buttonStop.Enabled = false;\n    UIAccelerometer.SharedAccelerometer.UpdateInterval = 1 / 10;\n    this.buttonStart.TouchUpInside += delegate {\n    this.buttonStart.Enabled = false;\n    UIAccelerometer.SharedAccelerometer.Acceleration += this.Acceleration_Received;\n    this.buttonStop.Enabled = true;\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.buttonStop.Enabled = false;\n    UIAccelerometer.SharedAccelerometer.Acceleration -= this.Acceleration_Received;\n    this.buttonStart.Enabled = true;\n    } ;\n\n    ```", "```swift\n    private void Acceleration_Received (object sender, UIAccelerometerEventArgs e){\n    this.lblOutput.Text = string.Format(\"X: {0}\\nY: {1}\\nZ: {2}\", e.Acceleration.X, e.Acceleration.Y, e.Acceleration.Z);\n    }\n\n    ```", "```swift\nUIAccelerometer.SharedAccelerometer.Acceleration += this.Acceleration_Received;\n\n```", "```swift\nUIAccelerometer.SharedAccelerometer.UpdateInterval = 1 / 10;\n\n```", "```swift\nUIAccelerometer.SharedAccelerometer.Acceleration -= this.Acceleration_Received;\n\n```", "```swift\n    private CMMotionManager motionManager;\n\n    ```", "```swift\n    this.motionManager = new CMMotionManager();\n    this.motionManager.GyroUpdateInterval = 1 / 10;\n    this.buttonStart.TouchUpInside += delegate {\n    this.motionManager.StartGyroUpdates(NSOperationQueue.MainQueue, this.GyroData_Received);\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.motionManager.StopGyroUpdates();\n    } ;\n\n    ```", "```swift\n    private void GyroData_Received(CMGyroData gyroData, NSError error){\n    Console.WriteLine(\"rotation rate x: {0}, y: {1}, z: {2}\", gyroData.RotationRate.x, gyroData.RotationRate.y, gyroData.RotationRate.z);\n    }\n\n    ```", "```swift\nprivate CMMotionManager motionManager;\n//...\nthis.motionManager = new CMMotionManager();\n\n```", "```swift\nthis.motionManager.GyroUpdateInterval = 1 / 10;\n\n```", "```swift\nthis.motionManager.StartGyroUpdates(NSOperationQueue.MainQueue, this.GyroData_Received);\n\n```", "```swift\nprivate void GyroData_Received(CMGyroData gyroData, NSError error)\n\n```", "```swift\nConsole.WriteLine(\"rotation rate x: {0}, y: {1}, z: {2}\", gyroData.RotationRate.x, gyroData.RotationRate.y, gyroData.RotationRate.z);\n\n```", "```swift\npublic static double RadiansToDegrees (double radians){\nreturn (radians * 180 / Math.PI);\n}\n\n```"]