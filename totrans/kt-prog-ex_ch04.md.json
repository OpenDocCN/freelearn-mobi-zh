["```\nbrew search postgres\n```", "```\nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=create-drop\n```", "```\ncreatedb -h localhost --username=<username> --password messenger-api\n```", "```\nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.datasource.url=jdbc:postgresql://localhost:5432/messenger-api\nspring.datasource.username=<username>\nspring.datasource.password=<password>\n```", "```\npackage com.example.messenger.api.models\n\nimport org.hibernate.validator.constraints.Length\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\nimport javax.validation.constraints.Pattern\nimport javax.validation.constraints.Size\n\n@Entity\n@Table(name = \"`user`\")\n@EntityListeners(UserListener::class)\nclass User(\n  @Column(unique = true)\n  @Size(min = 2)\n  var username: String = \"\",\n  @Size(min = 11)\n  @Pattern(regexp=\"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{4})$\")\n  var phoneNumber: String = \"\",\n  @Size(min = 60, max = 60)\n  var password: String = \"\",\n  var status: String = \"\",\n  @Pattern(regexp = \"\\\\A(activated|deactivated)\\\\z\")\n  var accountStatus: String = \"activated\"\n)\n```", "```\n@Entity\n@Table(name = \"`user`\")\n@EntityListeners(UserListener::class)\nclass User(\n  @Column(unique = true)\n  @Size(min = 2)\n  var username: String = \"\",\n  @Size(min = 8, max = 15)\n  @Column(unique = true)\n  @Pattern(regexp = \"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{4})$\")\n  var phoneNumber: String = \"\",\n  @Size(min = 60, max = 60)\n  var password: String = \"\",\n  var status: String = \"available\",\n  @Pattern(regexp = \"\\\\A(activated|deactivated)\\\\z\")\n  var accountStatus: String = \"activated\",\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  var id: Long = 0,\n  @DateTimeFormat\n  var createdAt: Date = Date.from(Instant.now())\n)\n```", "```\npackage com.example.messenger.api.listeners\n\nimport com.example.messenger.api.models.User\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport javax.persistence.PrePersist\nimport javax.persistence.PreUpdate\n\nclass UserListener {\n\n  @PrePersist\n  @PreUpdate\n  fun hashPassword(user: User) {\n    user.password = BCryptPasswordEncoder().encode(user.password)\n  }\n}\n```", "```\npackage com.example.messenger.api.models\n\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\n\n@Entity\nclass Message(\n  @ManyToOne(optional = false)\n  @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\n  var sender: User? = null,\n  @ManyToOne(optional = false)\n  @JoinColumn(name = \"recipient_id\", referencedColumnName = \"id\")\n  var recipient: User? = null,\n  var body: String? = \"\",\n  @ManyToOne(optional = false)\n  @JoinColumn(name=\"conversation_id\", referencedColumnName = \"id\")\n  var conversation: Conversation? = null,\n  @Id @GeneratedValue(strategy = GenerationType.AUTO) var id: Long = 0,\n  @DateTimeFormat\n  var createdAt: Date = Date.from(Instant.now())\n)\n```", "```\n@JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\nvar sender: User? = null\n```", "```\npackage com.example.messenger.api.models\n\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\n\n@Entity\nclass Conversation(\n  @ManyToOne(optional = false)\n  @JoinColumn(name = \"sender_id\", referencedColumnName = \"id\")\n  var sender: User? = null,\n  @ManyToOne(optional = false)\n  @JoinColumn(name = \"recipient_id\", referencedColumnName = \"id\")\n  var recipient: User? = null,\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  var id: Long = 0,\n  @DateTimeFormat\n  val createdAt: Date = Date.from(Instant.now())\n) {\n\n  @OneToMany(mappedBy = \"conversation\", targetEntity = Message::class)\n  private var messages: Collection<Message>? = null\n}\n```", "```\npackage com.example.messenger.api.models\n\nimport com.example.messenger.api.listeners.UserListener\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\nimport javax.validation.constraints.Pattern\nimport javax.validation.constraints.Size\n\n@Entity\n@Table(name = \"`user`\")\n@EntityListeners(UserListener::class)\nclass User(\n  @Column(unique = true)\n  @Size(min = 2)\n  var username: String = \"\",\n  @Size(min = 8, max = 15)\n  @Column(unique = true)\n  @Pattern(regexp = \"^\\\\(?(\\\\d{3})\\\\)?[- ]?(\\\\d{3})[- ]?(\\\\d{4})$\")\n  var phoneNumber: String = \"\",\n  @Size(min = 60, max = 60)\n  var password: String = \"\",\n  var status: String = \"available\",\n  @Pattern(regexp = \"\\\\A(activated|deactivated)\\\\z\")\n  var accountStatus: String = \"activated\",\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  var id: Long = 0,\n  @DateTimeFormat\n  var createdAt: Date = Date.from(Instant.now())\n) {\n  //collection of sent messages\n  @OneToMany(mappedBy = \"sender\", targetEntity = Message::class)\n  private var sentMessages: Collection<Message>? = null\n\n  //collection of received messages\n  @OneToMany(mappedBy = \"recipient\", targetEntity = Message::class)\n  private var receivedMessages: Collection<Message>? = null\n}\n```", "```\npackage com.example.messenger.api.repositories\n\nimport com.example.messenger.api.models.User\nimport org.springframework.data.repository.CrudRepository\n\ninterface UserRepository : CrudRepository<User, Long> {\n\n  fun findByUsername(username: String): User?\n\n  fun findByPhoneNumber(phoneNumber: String): User?\n}\n```", "```\npackage com.example.messenger.api.repositories\n\nimport com.example.messenger.api.models.Message\nimport org.springframework.data.repository.CrudRepository\n\ninterface MessageRepository : CrudRepository<Message, Long> {\n  fun findByConversationId(conversationId: Long): List<Message>\n}\n```", "```\npackage com.example.messenger.api.repositories\n\nimport com.example.messenger.api.models.Conversation\nimport org.springframework.data.repository.CrudRepository\n\ninterface ConversationRepository : CrudRepository<Conversation, Long> {\n    fun findBySenderId(id: Long): List<Conversation>\n\n    fun findByRecipientId(id: Long): List<Conversation>\n\n    fun findBySenderIdAndRecipientId(senderId: Long,\n        recipientId: Long): Conversation?\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.models.User\n\ninterface UserService {\n  fun attemptRegistration(userDetails: User): User\n\n  fun listUsers(currentUser): List<User>\n\n  fun retrieveUserData(username: String): User?\n\n  fun retrieveUserData(id: Long): User?\n\n  fun usernameExists(username: String): Boolean\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.exceptions.InvalidUserIdException\nimport com.example.messenger.api.exceptions.UserStatusEmptyException\nimport com.example.messenger.api.exceptions.UsernameUnavailableException\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass UserServiceImpl(val repository: UserRepository) : UserService {\n  @Throws(UsernameUnavailableException::class)\n  override fun attemptRegistration(userDetails: User): User {\n    if (!usernameExists(userDetails.username)) {\n      val user = User()\n      user.username = userDetails.username\n      user.phoneNumber = userDetails.phoneNumber\n      user.password = userDetails.password\n      repository.save(user)\n      obscurePassword(user)\n      return user\n    }\n    throw UsernameUnavailableException(\"The username \n                  ${userDetails.username} is unavailable.\")\n  }\n\n  @Throws(UserStatusEmptyException::class)\n  fun updateUserStatus(currentUser: User, updateDetails: User): User {\n    if (!updateDetails.status.isEmpty()) {\n      currentUser.status = updateDetails.status\n      repository.save(currentUser)\n      return  currentUser\n    }\n    throw UserStatusEmptyException()\n  }\n\n  override fun listUsers(currentUser: User): List<User> {\n    return repository.findAll().mapTo(ArrayList(), { it })\n                     .filter{ it != currentUser }\n  }\n\n  override fun retrieveUserData(username: String): User? {\n    val user = repository.findByUsername(username)\n    obscurePassword(user)\n    return user\n  }\n\n  @Throws(InvalidUserIdException::class)\n  override fun retrieveUserData(id: Long): User {\n    val userOptional = repository.findById(id)\n    if (userOptional.isPresent) {\n      val user = userOptional.get()\n      obscurePassword(user)\n      return user\n    }\n    throw InvalidUserIdException(\"A user with an id of '$id' \n                                 does not exist.\")\n  }\n\n  override fun usernameExists(username: String): Boolean {\n    return repository.findByUsername(username) != null\n  }\n\n  private fun obscurePassword(user: User?) {\n    user?.password = \"XXX XXXX XXX\"\n  }\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.models.Message\nimport com.example.messenger.api.models.User\n\ninterface MessageService {\n\n  fun sendMessage(sender: User, recipientId: Long, \n                  messageText: String): Message\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.exceptions.MessageEmptyException\nimport com.example.messenger.api.exceptions.MessageRecipientInvalidException\nimport com.example.messenger.api.models.Conversation\nimport com.example.messenger.api.models.Message\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.ConversationRepository\nimport com.example.messenger.api.repositories.MessageRepository\nimport com.example.messenger.api.repositories.UserRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass MessageServiceImpl(val repository: MessageRepository,\n             val conversationRepository: ConversationRepository,\n             val conversationService: ConversationService,\n             val userRepository: UserRepository) : MessageService {\n\n  @Throws(MessageEmptyException::class, \n          MessageRecipientInvalidException::class)\n  override fun sendMessage(sender: User, recipientId: Long, \n                           messageText: String): Message {\n    val optional = userRepository.findById(recipientId)\n\n      if (optional.isPresent) {\n        val recipient = optional.get()\n\n        if (!messageText.isEmpty()) {\n          val conversation: Conversation = if (conversationService\n                     .conversationExists(sender, recipient)) {\n            conversationService.getConversation(sender, recipient) \n                               as Conversation\n          } else {\n            conversationService.createConversation(sender, recipient)\n          }\n          conversationRepository.save(conversation)\n\n          val message = Message(sender, recipient, messageText, \n                                conversation)\n          repository.save(message)\n          return message\n        }\n      } else {\n        throw MessageRecipientInvalidException(\"The recipient id \n                              '$recipientId' is invalid.\")\n      }\n      throw MessageEmptyException()\n    }\n  }\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.models.Conversation\nimport com.example.messenger.api.models.User\n\ninterface ConversationService {\n\n  fun createConversation(userA: User, userB: User): Conversation\n  fun conversationExists(userA: User, userB: User): Boolean\n  fun getConversation(userA: User, userB: User): Conversation?\n  fun retrieveThread(conversationId: Long): Conversation\n  fun listUserConversations(userId: Long): List<Conversation>\n  fun nameSecondParty(conversation: Conversation, userId: Long): String\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.exceptions.ConversationIdInvalidException\nimport com.example.messenger.api.models.Conversation\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.ConversationRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass ConversationServiceImpl(val repository: ConversationRepository) :\n      ConversationService {\n\n  override fun createConversation(userA: User, userB: User):\n               Conversation {\n    val conversation = Conversation(userA, userB)\n    repository.save(conversation)\n    return  conversation\n  }\n\n  override fun conversationExists(userA: User, userB: User): Boolean {\n    return if (repository.findBySenderIdAndRecipientId\n               (userA.id, userB.id) != null)\n    true\n    else repository.findBySenderIdAndRecipientId\n               (userB.id, userA.id) != null\n  }\n\n  override fun getConversation(userA: User, userB: User): Conversation? {\n    return when {\n      repository.findBySenderIdAndRecipientId(userA.id,\n                               userB.id) != null ->\n      repository.findBySenderIdAndRecipientId(userA.id, userB.id)\n      repository.findBySenderIdAndRecipientId(userB.id, \n                               userA.id) != null ->\n      repository.findBySenderIdAndRecipientId(userB.id, userA.id)\n      else -> null\n    }\n\n  }\n}\n```", "```\noverride fun retrieveThread(conversationId: Long): Conversation {\n  val conversation = repository.findById(conversationId)\n\n  if (conversation.isPresent) {\n    return conversation.get()\n  }\n  throw ConversationIdInvalidException(\"Invalid conversation id \n                                        '$conversationId'\")\n}\n\noverride fun listUserConversations(userId: Long): \n               ArrayList<Conversation> {\n  val conversationList: ArrayList<Conversation> = ArrayList()\n  conversationList.addAll(repository.findBySenderId(userId))\n  conversationList.addAll(repository.findByRecipientId(userId))\n\n  return conversationList\n}\n\noverride fun nameSecondParty(conversation: Conversation,\n                             userId: Long): String {\n  return if (conversation.sender?.id == userId) {\n    conversation.recipient?.username as String\n  } else {\n    conversation.sender?.username as String\n  }\n}\n```", "```\npackage com.example.messenger.api.exceptions\n\nclass UsernameUnavailableException(override val message: String) : RuntimeException()\n\nclass InvalidUserIdException(override val message: String) : RuntimeException()\n\nclass MessageEmptyException(override val message: String = \"A message cannot be empty.\") : RuntimeException()\n\nclass MessageRecipientInvalidException(override val message: String) : RuntimeException()\n\nclass ConversationIdInvalidException(override val message: String) : RuntimeException()\n\nclass UserDeactivatedException(override val message: String) : RuntimeException()\n\nclass UserStatusEmptyException(override val message: String = \"A user's status cannot be empty\") : RuntimeException()\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.constants.ErrorResponse\nimport com.example.messenger.api.constants.ResponseConstants\nimport com.example.messenger.api.exceptions.InvalidUserIdException\nimport com.example.messenger.api.exceptions.UserStatusEmptyException\nimport com.example.messenger.api.exceptions.UsernameUnavailableException\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.ControllerAdvice\nimport org.springframework.web.bind.annotation.ExceptionHandler\n\n@ControllerAdvice\nclass UserControllerAdvice {\n\n  @ExceptionHandler(UsernameUnavailableException::class)\n  fun usernameUnavailable(usernameUnavailableException: \n                          UsernameUnavailableException):\n      ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(ResponseConstants.USERNAME_UNAVAILABLE\n                      .value, usernameUnavailableException.message)\n    return ResponseEntity.unprocessableEntity().body(res)\n  }\n\n  @ExceptionHandler(InvalidUserIdException::class)\n  fun invalidId(invalidUserIdException: InvalidUserIdException):\n      ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(ResponseConstants.INVALID_USER_ID.value,\n                            invalidUserIdException.message)\n    return ResponseEntity.badRequest().body(res)\n  }\n\n  @ExceptionHandler(UserStatusEmptyException::class)\n  fun statusEmpty(userStatusEmptyException: UserStatusEmptyException):\n      ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(ResponseConstants.EMPTY_STATUS.value,\n                            userStatusEmptyException.message)\n    return ResponseEntity.unprocessableEntity().body(res)\n  }\n}\n```", "```\npackage com.example.messenger.api.constants\n\nclass ErrorResponse(val errorCode: String, val errorMessage: String)\n```", "```\npackage com.example.messenger.api.constants\n\nenum class ResponseConstants(val value: String) {\n  SUCCESS(\"success\"), ERROR(\"error\"),\n  USERNAME_UNAVAILABLE(\"USR_0001\"),\n  INVALID_USER_ID(\"USR_002\"),\n  EMPTY_STATUS(\"USR_003\"),\n  MESSAGE_EMPTY(\"MES_001\"),\n  MESSAGE_RECIPIENT_INVALID(\"MES_002\"),\n  ACCOUNT_DEACTIVATED(\"GLO_001\")\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.constants.ErrorResponse\nimport com.example.messenger.api.constants.ResponseConstants\nimport com.example.messenger.api.exceptions.MessageEmptyException\nimport com.example.messenger.api.exceptions.MessageRecipientInvalidException\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.ControllerAdvice\nimport org.springframework.web.bind.annotation.ExceptionHandler\n\n@ControllerAdvice\nclass MessageControllerAdvice {\n  @ExceptionHandler(MessageEmptyException::class)\n  fun messageEmpty(messageEmptyException: MessageEmptyException): \n      ResponseEntity<ErrorResponse> {\n    //ErrorResponse object creation\n    val res = ErrorResponse(ResponseConstants.MESSAGE_EMPTY.value,\n                            messageEmptyException.message)\n\n    // Returning ResponseEntity containing appropriate ErrorResponse\n    return ResponseEntity.unprocessableEntity().body(res)\n  }\n\n  @ExceptionHandler(MessageRecipientInvalidException::class)\n    fun messageRecipientInvalid(messageRecipientInvalidException: \n                                MessageRecipientInvalidException):\n        ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(ResponseConstants.MESSAGE_RECIPIENT_INVALID\n                     .value, messageRecipientInvalidException.message)\n    return ResponseEntity.unprocessableEntity().body(res)\n  }\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.constants.ErrorResponse\nimport com.example.messenger.api.exceptions.ConversationIdInvalidException\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.ControllerAdvice\nimport org.springframework.web.bind.annotation.ExceptionHandler\n\n@ControllerAdvice\nclass ConversationControllerAdvice {\n  @ExceptionHandler\n  fun conversationIdInvalidException(conversationIdInvalidException:\n          ConversationIdInvalidException): ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(\"\", conversationIdInvalidException.message)\n    return ResponseEntity.unprocessableEntity().body(res)\n  }\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.constants.ErrorResponse\nimport com.example.messenger.api.constants.ResponseConstants\nimport com.example.messenger.api.exceptions.UserDeactivatedException\nimport org.springframework.http.HttpStatus\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.ControllerAdvice\nimport org.springframework.web.bind.annotation.ExceptionHandler\n\n@ControllerAdvice\nclass RestControllerAdvice {\n\n  @ExceptionHandler(UserDeactivatedException::class)\n  fun userDeactivated(userDeactivatedException: \n                      UserDeactivatedException): \n      ResponseEntity<ErrorResponse> {\n    val res = ErrorResponse(ResponseConstants.ACCOUNT_DEACTIVATED\n                     .value, userDeactivatedException.message)\n\n    // Return an HTTP 403 unauthorized error response\n    return ResponseEntity(res, HttpStatus.UNAUTHORIZED)\n  }\n}\n```", "```\n<dependencies> \n  ...\n  <dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt</artifactId>\n    <version>0.7.0</version>\n  </dependency>\n</dependencies>\n```", "```\npackage com.example.messenger.api.config\n\nimport com.example.messenger.api.filters.JWTAuthenticationFilter\nimport com.example.messenger.api.filters.JWTLoginFilter\nimport com.example.messenger.api.services.AppUserDetailsService\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.http.HttpMethod\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter\n\n@Configuration\n@EnableWebSecurity\nclass WebSecurityConfig(val userDetailsService: AppUserDetailsService)\n         : WebSecurityConfigurerAdapter() {\n\n  @Throws(Exception::class)\n  override fun configure(http: HttpSecurity) {\n    http.csrf().disable().authorizeRequests()\n        .antMatchers(HttpMethod.POST, \"/users/registrations\")\n        .permitAll()\n        .antMatchers(HttpMethod.POST, \"/login\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n\n```", "```\n        .addFilterBefore(JWTLoginFilter(\"/login\",\n                authenticationManager()),\n                UsernamePasswordAuthenticationFilter::class.java)\n```", "```\n       .addFilterBefore(JWTAuthenticationFilter(),\n                UsernamePasswordAuthenticationFilter::class.java)\n  }\n\n  @Throws(Exception::class)\n  override fun configure(auth: AuthenticationManagerBuilder) {\n    auth.userDetailsService<UserDetailsService>(userDetailsService)\n        .passwordEncoder(BCryptPasswordEncoder())\n  }\n}\n```", "```\npackage com.example.messenger.api.filters\n\nimport com.example.messenger.api.security.AccountCredentials\nimport com.example.messenger.api.services.TokenAuthenticationService\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.AuthenticationException\nimport org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher\n\nimport javax.servlet.FilterChain\nimport javax.servlet.ServletException\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nimport java.io.IOException\n\nclass JWTLoginFilter(url: String, authManager: AuthenticationManager) :\n    AbstractAuthenticationProcessingFilter(AntPathRequestMatcher(url)){\n\n  init {\n    authenticationManager = authManager\n  }\n\n  @Throws(AuthenticationException::class, IOException::class,\n          ServletException::class)\n  override fun attemptAuthentication( req: HttpServletRequest,\n                      res: HttpServletResponse): Authentication{\n    val credentials = ObjectMapper()\n        .readValue(req.inputStream, AccountCredentials::class.java)\n    return authenticationManager.authenticate(\n      UsernamePasswordAuthenticationToken(\n        credentials.username,\n        credentials.password,\n        emptyList()\n      )\n    )\n  }\n\n  @Throws(IOException::class, ServletException::class)\n  override fun successfulAuthentication(\n               req: HttpServletRequest,\n               res: HttpServletResponse, chain: FilterChain,\n               auth: Authentication) {\n    TokenAuthenticationService.addAuthentication(res, auth.name)\n  }\n}\n```", "```\npackage com.example.messenger.api.security\n\nclass AccountCredentials {\n  lateinit var username: String\n  lateinit var password: String\n}\n```", "```\npackage com.example.messenger.api.services\nimport io.jsonwebtoken.Jwts\nimport io.jsonwebtoken.SignatureAlgorithm\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.Authentication\nimport org.springframework.security.core.GrantedAuthority\n\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\nimport java.util.Date\n\nimport java.util.Collections.emptyList\n\ninternal object TokenAuthenticationService {\n  private val TOKEN_EXPIRY: Long = 864000000\n  private val SECRET = \"$78gr43g7g8feb8we\"\n  private val TOKEN_PREFIX = \"Bearer\"\n  private val AUTHORIZATION_HEADER_KEY = \"Authorization\"\n\n  fun addAuthentication(res: HttpServletResponse, username: String) {\n    val JWT = Jwts.builder()\n                  .setSubject(username)\n                  .setExpiration(Date(System.currentTimeMillis() +\n                                      TOKEN_EXPIRY))\n                  .signWith(SignatureAlgorithm.HS512, SECRET)\n                  .compact()\n    res.addHeader(AUTHORIZATION_HEADER_KEY, \"$TOKEN_PREFIX $JWT\")\n  }\n\n  fun getAuthentication(request: HttpServletRequest): Authentication? {\n    val token = request.getHeader(AUTHORIZATION_HEADER_KEY)\n    if (token != null) {\n\n```", "```\n      val user = Jwts.parser().setSigningKey(SECRET)\n                     .parseClaimsJws(token.replace(TOKEN_PREFIX, \"\"))\n                     .body.subject\n\n      if (user != null)\n        return UsernamePasswordAuthenticationToken(user, null,\n                               emptyList<GrantedAuthority>())\n    }\n    return null\n  }\n}\n```", "```\npackage com.example.messenger.api.filters\n\nimport com.example.messenger.api.services.TokenAuthenticationService\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.web.filter.GenericFilterBean\nimport javax.servlet.FilterChain\nimport javax.servlet.ServletException\nimport javax.servlet.ServletRequest\nimport javax.servlet.ServletResponse\nimport javax.servlet.http.HttpServletRequest\nimport java.io.IOException\n\nclass JWTAuthenticationFilter : GenericFilterBean() {\n\n  @Throws(IOException::class, ServletException::class)\n  override fun doFilter(request: ServletRequest,\n                        response: ServletResponse,\n                        filterChain: FilterChain) {\n    val authentication = TokenAuthenticationService\n              .getAuthentication(request as HttpServletRequest)\n    SecurityContextHolder.getContext().authentication = authentication\n    filterChain.doFilter(request, response)\n  }\n}\n```", "```\npackage com.example.messenger.api.services\n\nimport com.example.messenger.api.repositories.UserRepository\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport org.springframework.security.core.userdetails.User\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.core.userdetails.UsernameNotFoundException\nimport org.springframework.stereotype.Component\nimport java.util.ArrayList\n\n@Component\nclass AppUserDetailsService(val userRepository: UserRepository) : UserDetailsService {\n\n  @Throws(UsernameNotFoundException::class)\n  override fun loadUserByUsername(username: String): UserDetails {\n    val user = userRepository.findByUsername(username) ?:\n               throw UsernameNotFoundException(\"A user with the \n                             username $username doesn't exist\")\n\n    return User(user.username, user.password,\n                ArrayList<GrantedAuthority>())\n  }\n}\n```", "```\npackage com.example.messenger.api.controllers\n\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport com.example.messenger.api.services.UserServiceImpl\nimport org.springframework.http.ResponseEntity\nimport org.springframework.validation.annotation.Validated\nimport org.springframework.web.bind.annotation.*\nimport javax.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping(\"/users\")\nclass UserController(val userService: UserServiceImpl, \n                     val userRepository: UserRepository) {\n\n  @PostMapping\n  @RequestMapping(\"/registrations\")\n  fun create(@Validated @RequestBody userDetails: User):\n             ResponseEntity<User> {\n    val user = userService.attemptRegistration(userDetails)\n    return ResponseEntity.ok(user)\n  }\n}\n```", "```\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"username\":\"kevin.stacey\",\n  \"phoneNumber\":\"5472457893\",\n  \"password\":\"Hello123\"}'\n http://localhost:8080/users/registrations\n```", "```\n{\n  \"username\":\"kevin.stacey\",\n  \"phoneNumber\":\"5472457893\",\n  \"password\":\"XXX XXXX XXX\",\n  \"status\":\"available\",\n  \"accountStatus\":\"activated\",\n  \"id\":6,\"createdAt\":1508579448634\n}\n```", "```\npackage com.example.messenger.api.helpers.objects\n\ndata class UserVO(\n  val id: Long,\n  val username: String,\n  val phoneNumber: String,\n  val status: String,\n  val createdAt: String\n)\n```", "```\npackage com.example.messenger.api.helpers.objects\n\ndata class UserVO(\n  val id: Long,\n  val username: String,\n  val phoneNumber: String,\n  val status: String,\n  val createdAt: String\n)\n\ndata class UserListVO(\n  val users: List<UserVO>\n)\n\ndata class MessageVO(\n  val id: Long,\n  val senderId: Long?,\n  val recipientId: Long?,\n  val conversationId: Long?,\n  val body: String?,\n  val createdAt: String\n)\n\ndata class ConversationVO(\n  val conversationId: Long,\n  val secondPartyUsername: String,\n  val messages: ArrayList<MessageVO>\n)\n\ndata class ConversationListVO(\n  val conversations: List<ConversationVO>\n)\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.helpers.objects.UserListVO\nimport com.example.messenger.api.helpers.objects.UserVO\nimport com.example.messenger.api.models.User\nimport org.springframework.stereotype.Component\n\n@Component\nclass UserAssembler {\n\n  fun toUserVO(user: User): UserVO {\n    return UserVO(user.id, user.username, user.phoneNumber,\n                  user.status, user.createdAt.toString())\n  }\n\n  fun toUserListVO(users: List<User>): UserListVO {\n    val userVOList = users.map { toUserVO(it) }\n    return  UserListVO(userVOList)\n  }\n}\n```", "```\npackage com.example.messenger.api.controllers\n\nimport com.example.messenger.api.components.UserAssembler\nimport com.example.messenger.api.helpers.objects.UserVO\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport com.example.messenger.api.services.UserServiceImpl\nimport org.springframework.http.ResponseEntity\nimport org.springframework.validation.annotation.Validated\nimport org.springframework.web.bind.annotation.*\nimport javax.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping(\"/users\")\nclass UserController(val userService: UserServiceImpl,\n                     val userAssembler: UserAssembler, \n                     val userRepository: UserRepository) {\n\n  @PostMapping\n  @RequestMapping(\"/registrations\")\n  fun create(@Validated @RequestBody userDetails: User): \n             ResponseEntity<UserVO> {\n    val user = userService.attemptRegistration(userDetails)\n    return ResponseEntity.ok(userAssembler.toUserVO(user))\n  }\n}\n```", "```\n{\n  \"id\":6,\n  \"username\":\"kevin.stacey\",\n  \"phoneNumber\":\"5472457893\",\n  \"status\":\"available\",\n  \"createdAt\":\"Sat Oct 21 11:11:36 WAT 2017\"\n}\n```", "```\npackage com.example.messenger.api.controllers\n\nimport com.example.messenger.api.components.UserAssembler\nimport com.example.messenger.api.helpers.objects.UserListVO\nimport com.example.messenger.api.helpers.objects.UserVO\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport com.example.messenger.api.services.UserServiceImpl\nimport org.springframework.http.ResponseEntity\nimport org.springframework.validation.annotation.Validated\nimport org.springframework.web.bind.annotation.*\nimport javax.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping(\"/users\")\nclass UserController(val userService: UserServiceImpl,\n                     val userAssembler: UserAssembler, \n                     val userRepository: UserRepository) {\n\n  @PostMapping\n  @RequestMapping(\"/registrations\")\n  fun create(@Validated @RequestBody userDetails: User): \n             ResponseEntity<UserVO> {\n    val user = userService.attemptRegistration(userDetails)\n    return ResponseEntity.ok(userAssembler.toUserVO(user))\n  }\n\n  @GetMapping\n  @RequestMapping(\"/{user_id}\")\n  fun show(@PathVariable(\"user_id\") userId: Long):\n           ResponseEntity<UserVO> {\n    val user = userService.retrieveUserData(userId)\n    return ResponseEntity.ok(userAssembler.toUserVO(user))\n  }\n\n  @GetMapping\n  @RequestMapping(\"/details\")\n  fun echoDetails(request: HttpServletRequest): ResponseEntity<UserVO>{\n    val user = userRepository.findByUsername\n               (request.userPrincipal.name) as User\n    return ResponseEntity.ok(userAssembler.toUserVO(user))\n  }\n\n  @GetMapping\n  fun index(request: HttpServletRequest): ResponseEntity<UserListVO> {\n    val user = userRepository.findByUsername\n               (request.userPrincipal.name) as User\n    val users = userService.listUsers(user)\n\n    return ResponseEntity.ok(userAssembler.toUserListVO(users))\n  }\n\n  @PutMapping\n  fun update(@RequestBody updateDetails: User,\n      request: HttpServletRequest): ResponseEntity<UserVO> {\n    val currentUser = userRepository.findByUsername\n                      (request.userPrincipal.name)\n    userService.updateUserStatus(currentUser as User, updateDetails)\n    return ResponseEntity.ok(userAssembler.toUserVO(currentUser))\n  }\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.helpers.objects.MessageVO\nimport com.example.messenger.api.models.Message\nimport org.springframework.stereotype.Component\n\n@Component\nclass MessageAssembler {\n  fun toMessageVO(message: Message): MessageVO {\n    return MessageVO(message.id, message.sender?.id,\n                     message.recipient?.id, message.conversation?.id,\n                     message.body, message.createdAt.toString())\n  }\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.helpers.objects.ConversationListVO\nimport com.example.messenger.api.helpers.objects.ConversationVO\nimport com.example.messenger.api.helpers.objects.MessageVO\nimport com.example.messenger.api.models.Conversation\nimport com.example.messenger.api.services.ConversationServiceImpl\nimport org.springframework.stereotype.Component\n\n@Component\nclass ConversationAssembler(val conversationService: \n                            ConversationServiceImpl, \n                            val messageAssembler: MessageAssembler) {\n\n  fun toConversationVO(conversation: Conversation, userId: Long): ConversationVO {\n    val conversationMessages: ArrayList<MessageVO> = ArrayList()\n    conversation.messages.mapTo(conversationMessages) {\n      messageAssembler.toMessageVO(it)\n    }\n    return ConversationVO(conversation.id, conversationService\n                          .nameSecondParty(conversation, userId),\n                          conversationMessages)\n  }\n\n  fun toConversationListVO(conversations: ArrayList<Conversation>,\n                           userId: Long): ConversationListVO {\n    val conversationVOList = conversations.map { toConversationVO(it,\n                                                 userId) }\n    return  ConversationListVO(conversationVOList)\n  }\n}\n```", "```\npackage com.example.messenger.api.controllers\n\nimport com.example.messenger.api.components.MessageAssembler\nimport com.example.messenger.api.helpers.objects.MessageVO\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport com.example.messenger.api.services.MessageServiceImpl\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.*\nimport javax.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping(\"/messages\")\nclass MessageController(val messageService: MessageServiceImpl,\n                        val userRepository: UserRepository, \n                        val messageAssembler: MessageAssembler) {\n\n  @PostMapping\n  fun create(@RequestBody messageDetails: MessageRequest, \n             request: HttpServletRequest): ResponseEntity<MessageVO> {\n    val principal = request.userPrincipal\n    val sender = userRepository.findByUsername(principal.name) as User\n    val message = messageService.sendMessage(sender,\n                  messageDetails.recipientId, messageDetails.message)\n    return ResponseEntity.ok(messageAssembler.toMessageVO(message))\n  }\n\n  data class MessageRequest(val recipientId: Long, val message: String)\n}\n```", "```\npackage com.example.messenger.api.controllers\n\nimport com.example.messenger.api.components.ConversationAssembler\nimport com.example.messenger.api.helpers.objects.ConversationListVO\nimport com.example.messenger.api.helpers.objects.ConversationVO\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport com.example.messenger.api.services.ConversationServiceImpl\nimport org.springframework.http.ResponseEntity\nimport org.springframework.web.bind.annotation.*\nimport javax.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping(\"/conversations\")\nclass ConversationController(\n  val conversationService: ConversationServiceImpl,\n  val conversationAssembler: ConversationAssembler,\n  val userRepository: UserRepository\n) {\n\n  @GetMapping\n  fun list(request: HttpServletRequest): ResponseEntity<ConversationListVO> {\n    val user = userRepository.findByUsername(request\n                   .userPrincipal.name) as User\n    val conversations = conversationService.listUserConversations\n                     (user.id)\n    return ResponseEntity.ok(conversationAssembler\n                       .toConversationListVO(conversations, user.id))\n  }\n\n  @GetMapping\n  @RequestMapping(\"/{conversation_id}\")\n  fun show(@PathVariable(name = \"conversation_id\") conversationId: Long,\n         request: HttpServletRequest): ResponseEntity<ConversationVO> {\n    val user = userRepository.findByUsername(request\n                         .userPrincipal.name) as User\n    val conversationThread = conversationService.retrieveThread\n                           (conversationId)\n    return ResponseEntity.ok(conversationAssembler\n                   .toConversationVO(conversationThread, user.id))\n  }\n}\n```", "```\npackage com.example.messenger.api.components\n\nimport com.example.messenger.api.exceptions.UserDeactivatedException\nimport com.example.messenger.api.models.User\nimport com.example.messenger.api.repositories.UserRepository\nimport org.springframework.stereotype.Component\nimport org.springframework.web.servlet.handler.HandlerInterceptorAdapter\nimport java.security.Principal\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\n\n@Component\nclass AccountValidityInterceptor(val userRepository: UserRepository) : \n      HandlerInterceptorAdapter() {\n\n  @Throws(UserDeactivatedException::class)\n  override fun preHandle(request: HttpServletRequest, \n           response: HttpServletResponse, handler: Any?): Boolean {\n    val principal: Principal? = request.userPrincipal\n\n    if (principal != null) {\n      val user = userRepository.findByUsername(principal.name) \n                 as User\n\n      if (user.accountStatus == \"deactivated\") {\n        throw UserDeactivatedException(\"The account of this user has\n                                        been deactivated.\")\n      }\n    }\n    return super.preHandle(request, response, handler)\n  }\n}\n```", "```\npackage com.example.messenger.api.config\n\nimport com.example.messenger.api.components.AccountValidityInterceptor\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer\n\n@Configuration\nclass AppConfig : WebMvcConfigurer {\n\n  @Autowired\n  lateinit var accountValidityInterceptor: AccountValidityInterceptor\n\n  override fun addInterceptors(registry: InterceptorRegistry) {\n    registry.addInterceptor(accountValidityInterceptor)\n    super.addInterceptors(registry)\n  }\n}\n```", "```\nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.datasource.url=jdbc:postgresql://<endpoint>/MessengerDB\nspring.datasource.username=<master_username>\nspring.datasource.password=<password>\n```"]