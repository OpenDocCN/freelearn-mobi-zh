- en: Anko Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Anko library for Anko layouts in Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating user-interface programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the old code of XML layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the provided AnkoComponent interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting theme for Android views in Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting layout parameters for Anko views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding listeners to Anko views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting XML layouts into DSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting XML files into DSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing Snackbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing Toasts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing views using synthetic properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing views of view groups using extension functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anko is a Kotlin library that makes Android development a lot faster and easier.
    It also makes the code clean and concise. Most of us are used to writing XML layouts
    for UI in Android, which is redundant and neither type safe nor null safe. It
    also eats CPU time and battery to parse XML on a device. Some who programmatically
    write layouts know how large the code becomes, and it is also very difficult to
    maintain.
  prefs: []
  type: TYPE_NORMAL
- en: With Anko, we can use DSL to define layouts. The advantages of using DSL is
    that they are easy to read and write and they have no runtime overhead. If you
    are familiar with Android development and XML layouts, this chapter will help
    you quickly get started with Anko layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Anko library for Anko layouts in Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and foremost thing to do to start using any library is adding its
    dependencies to our project so as to be able to use its methods and functionalities
    in our project. In this recipe, we will explore how to add dependencies of Anko
    layouts to our project using gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write the code, as it is the latest right
    now. You can get started by creating a new project in Kotlin with a blank activity
    in Android Studio 3+ as we won't be using any code from other recipes. You also
    need an intermediate understanding of Android development.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will add Anko to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add all Anko features and components in one go by adding the following
    line to our `build.gradle` dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `$anko_version` is the latest version of Anko. You can replace it with
    the latest version of Anko at this time.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, sync your `build.gradle` file. Now, Anko dependencies have been
    added to your project. Let''s check this by simply using Anko commons to create
    and show an alert dialog. Create a button in your activity by defining it in your
    XML layout and adding `onClickListener` on it, clicking on which should run the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If on clicking the button, an alert shows up that we successfully added Anko
    library in our project, this is how the alert dialog looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95d25970-98af-4373-b94c-5d9008010679.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: However, most of the time we just need to add a single feature of Anko to our
    project. For example, Anko layouts in this case. So let's try to add just Anko
    layouts library to our project. Remove the previous code from `build.gradle` and
    your `Activity` and let's start over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now add the following lines to your project''s app-level `build.gradle` dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Sync your `build.gradle` and if there are no errors, you can now use Anko layouts
    in your project. At this point, we should also add dependencies of Anko coroutines,
    as we will obviously need listeners on our layouts. You can add those dependencies
    by adding the following lines to your `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Done! Now, let''s check whether everything is working perfectly. To do that,
    let''s add a basic DSL layout to our main activity. Check out the following code
    of the `onCreate()` method of our target activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the app on your phone; if the layout works correctly, that is, you
    have a button on your screen with text HELLO WORLD BUTTON!, then we have successfully
    added Anko layouts dependencies to our project. This is how our layout looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/400a93a9-857e-493e-a527-b1b50375d247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, on clicking on the button, we get a toast like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/40644d34-7e53-4a7f-a3f9-74106ff1d2ec.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By adding project dependencies in our `build.gradle` file, the amazing gradle
    takes care of what libraries and dependencies are needed by our project. The dependencies
    are located by gradle on our machine or in a remote repository, and any transitive
    dependencies are automatically included. Gradle makes adding project dependencies
    extremely easy and  quick, and we can invest most of our time in creating our
    amazing software, rather than maintaining and resolving dependencies that becomes
    extremely difficult in large projects with lots of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do not use Gradle and do not want to use it in your project, you can
    directly add Anko's library JAR from the **jcenter repository** ([https://jcenter.bintray.com/org/jetbrains/anko/](https://jcenter.bintray.com/org/jetbrains/anko/))
    as library dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating user-interface programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing UI in XML is not type safe or null safe, and it also eats CPU and battery.
    Writing UI programmatically (especially in Java) becomes bulky and unmanageable
    for large and complex UIs. That is when Anko layouts come to the rescue. We can
    easily create layouts in DSL using Anko layouts, and it also has no runtime overhead.
    In this recipe, we will see how to create layouts using DSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*, in this
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with a simple example where we use Anko to create a layout for
    our target activity (the activity in which you want to create a layout):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code for the `onCreate()` method that you need to put in your target
    activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, in the preceding code, we want to create a basic "contact us" form.
    For this, we have created a vertical linear layout with a 20 dip padding and,
    inside the vertical linear layout, we have added two edit texts for name and message,
    respectively. On clicking on the button, we take the data and show the user a
    confirmation that the message has been recorded through toast. This is how part
    of the screen looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13c8cc9e-f05b-4991-a1e6-2863d647df53.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Anko layouts DSL is a great way to build UI in fewer lines of code. It is simple
    to read and write, and it's clean and concise. It has no runtime overhead as there
    is in XML layouts. Anko layouts support XML too, and you can use custom components
    and also use coroutines for listeners. You can also get a preview of the DSL layout
    in Android Studio when using `AnkoComponent` interface, which we will learn later
    in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s try another example where we fit the preceding layout in a coordinator
    layout with a toolbar. To be able to use a coordinator layout, we need to add
    dependencies for Anko design support library. Add the following lines to your
    `build.gradle` and sync your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a lot of artifacts by Anko for various Android support libraries
    out there. The following is the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now what we need is a coordinator layout that fits the whole width and height
    of the parent and, inside it, we need an app bar with a toolbar and below the
    app bar we need our vertical layout from earlier. I suggest that you try to code
    this one on your own before checking out my method, which is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`lparams` used in the preceding function is the extension function used to
    add layout parameter to a view. This is how the layout looks in our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bcc64095-494e-47c4-8b98-60eabc6a28ae.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating layouts using DSL is a bit similar to XML itself, which is intentional,
    given the previous experience of developers with XML, and it also gives us the
    power to calculate things on the fly, while dynamically adding views.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML Parsing is done at compile time (except for a few things). It introduces
    CPU and battery overheads. For very complex layouts, it also introduces latency
    in the app and at times, severely affects user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In Anko layouts, the DSL builds the layout at runtime and hence we can include
    anything. It also avoids runtime overhead, and we can avoid null pointer exception.
    Also, we do not need casting and can dodge the `findViewById` calls as well.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the old code of XML layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best thing about Anko layouts is the flexibility to be able to work with
    our XML layouts as well. Also, Anko makes things easier by providing us view properties.
    In this recipe, we will see how to use XML layouts and still be able to improve
    things using Anko Layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+ as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*, in this
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will learn how to work with XML layouts, along with
    Anko layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by first having an old XML file to work on. Add the following
    code to an XML layout that you will add as the content view of your target activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Traditionally, we used `findViewById()` and `onClickListener()` in our activity
    to manipulate properties of the elements of layout and handle events. However,
    with Anko layouts, this becomes as easy as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding is the `onCreate()` method of the target activity. Note that the
    `find()` method is a lot simpler than `findViewById()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can get and set view properties and also attach listeners to view events.
    Another thing is that the Kotlin''s Android extension functions also let us deal
    with views without using the `find` method. Check out the following code, whereby
    it becomes super easy to get and set view properties using synthetic extension
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `name`, `message`, and `btn_send` are the IDs of the views in XML layout,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anko provides us with these extension functions and properties that make it
    easier to access the views. Some of these functions and properties are prearranged
    into type-safe builders that are generated using Android JAR files.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is worth understanding how Kotlin's synthetic properties work. Kotlin generates
    some extra code that helps us use our views like properties, naming the variables
    similar to that  of the ID of the view. Basically, it is running `findViewById()`
    the first time we try to access a view as property and storing it in cache so
    that all the consecutive calls to the same view invoke `findCachedViewById()`,
    thus making the access a lot faster.
  prefs: []
  type: TYPE_NORMAL
- en: Using the provided AnkoComponent interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can define an activity's layout DSL directly in the `onCreate()` method,
    but it is sometimes convenient to separate UI into another class. In this recipe,
    we will see how to use the `AnkoComponent` interface to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+ as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the given steps, we will learn how to work with the AnkoComponent interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding our UI in a different class that implements the `AnkoComponent`
    interface like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the preceding class implements the `AnkoComponent` interface. We
    need to override the `createView()` method and return DSL layout from it. Now,
    let''s see how to get this layout and set it to our activity. Check out the modified
    `onCreate()` method in our activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s try to access these views inside our activity, which we should
    be able to do if the layout has been properly set to our activity. We will access
    them just as we would have accessed a view from XML layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The next image is how the screen will look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ac986b5-5853-4125-9aeb-a664d30efc4b.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, on entering the details and clicking on the button, we see the toast,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c4f479b-13d1-44a8-b29f-18d4d93ff86a.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `verticalLayout` (which is a vertical linear layout) block is an extension
    function provided by Anko, which creates a new view instance and adds it to the
    parent. There are such extension functions for every view in the Android framework.
    For example, we used button and edit text as well in the preceding example. We
    can also use it as `button()`, which accepts a string parameter for text on the
    button or `button{}` if we want to set any properties on that view.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we use the `AnkoComponent` interface for creating our DSL in another class,
    we can also preview our layout DSL using the Anko support plugin.
  prefs: []
  type: TYPE_NORMAL
- en: For doing so, first add Anko support plugin from plugins in Android Studio settings.
    After that, put the cursor somewhere inside the `MainActivityUI` declaration,
    open the Anko Layout Preview tool window by clicking on View|Tool Windows|Anko
    Layout Preview, and press Refresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the layout preview is not being rendered properly, rebuild the project.
    This is how the window looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89494c5e-aa01-46f5-a39d-f5675d954d92.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting theme for Android views in Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Android apps won't be so beautiful if we won't be able to style our views.
    Anko layouts give us the power to apply custom themes to our views. In this recipe,
    we will learn how to create themed views in Anko.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the given steps, we will learn how to set the theme for Android views using
    Anko:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by first creating a style for a button. Custom styles are created
    in `styles.xml` inside the `res/values/` directory. Let''s create a button style
    and name it `newButton`. Add the following code in `styles.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use this style to create a themed button in our target activity.
    Let''s keep our UI in another class using the `AnkoComponent` interface. The following
    is how we create a button with a custom theme in a DSL layout (focus on the bold
    parts of the code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, to set this layout of our activity, we add the `LayoutActivity().setContentView(this)`
    line in the `onCreate()` method, as follows (focus on the bold parts of the code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how the top part of our app screen looks, with themed button
    taking background color as the accent color as defined in our `colors.xml` file
    in the `res/values/` directory. The text color is white, just as we set in our
    custom style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa224439-0019-41fd-a6ab-4bec9c3ba685.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is how we set themes on views, by appending themed keywords before the
    view name and making it camel case. We pass the theme as a parameter to the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Themed views are also Kotlin extension functions provided by Anko layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Setting layout parameters for Anko views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without layout parameters, there is not much we can do with our layouts. In
    this recipe, we will see how to use layout parameters with views in our layout
    DSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will learn how to set the layout parameters for
    Anko views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with creating our view in an external class that inherits from
    the `AnkoComponent` interface. To add layout parameters to a view (which we add
    using the extension functions provided by Anko), we use the `lparams()` extension
    function, which we add at the end of our view block in DSL, and is something like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try a simple example with vertical layouts; check out the following
    code block (focus on the bold parts of the code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `themedEditText` and `themedButton` extension functions are provided by
    Anko to create an edit text and button with theme. If you do not wish to use themed
    views, simply call `editText()` and `button()` without passing the theme as a
    parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8f5c45a-b5bd-4c55-98dc-066fe7b0e503.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go through another example where we have a toolbar with the title of
    the page in it. Check out the next example that uses coordinator layout, app bar
    layout, and toolbar. The given code generates the layout as shown in the screenshot
    following the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how the layout looks in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9d7e371-cd4e-4066-9c30-8c3567c14e18.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`lparams` is also an Anko extension function that is added to views, and we
    can define layout parameters as properties. If you omit width and/or height while
    using `lparams()`, their values automatically default to `wrapContent`, just like
    in XML. The parameters passed are named arguments. Some of the properties are `horizontalMargin`,
    `verticalMargin`, and `margin`. For different layouts, we have different layout
    parameters, just as in XML. For example, for relative layout, we have `alignParentBottom()`, `alignParentTop()`, `alignParentStart()`,`leftOf(viewIdOfReferenceView)`,`topOf(viewIdOfReferenceView)` and
    so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following example, which has the relative layout as root layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the preceding layout looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3d9375a-f000-462e-8451-c24a3885ed22.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding listeners to Anko views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have event listeners on views in Android. Let's understand how Anko makes
    this easier by providing us with listener helpers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will learn how to add an event listener to Anko
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple example where we listen for click events on a button.
    Here''s the code for attaching an `onClick` listener on a button with the `btn_send` ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is the same as this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create a layout having a button and a rating bar. We will attach
    an `onLongPress` listener on the button and an `onRatingBarChange` listener on
    the rating bar. Check out this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Focus on the bold text in the preceding code. We can attach listeners by directly
    putting them inside the defined views. This is how our layout looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3ae98ad-9b75-44c7-9632-e1a10e0a98f7.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On long-pressing the button in the preceding screen with text SEND, we see
    a toast just as expected. Check out the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2c65883-314f-4693-82fe-682536df04a2.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, if we choose a rating from the rating bar, we get a toast for the
    rating that we chose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e419135c-3718-4975-a0c0-eed669200a16.jpeg)  ![](img/8fd219c1-7963-4e9d-9f93-a04814ce2d6e.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also keep the listeners separate from the layout, as in the following
    code. However, we do need the ID of the view we are setting the listener on for
    this to work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anko provides event listeners as extension functions to help ease the process
    of adding event listeners. We can also pass coroutines to these listener helpers
    and partially define listeners that have a lot of methods, that is, we can define
    each listener method separately and then they are merged by Anko if they are on
    the same view.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coroutines are used for writing asynchronous non-blocking code. You can also
    say that coroutines are threads managed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting XML layouts into DSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes a situation may arise where we might need to include an XML layout
    inside a DSL layout. Anko provides a solution for this. In this recipe, we will
    understand how to include XML layouts into DSL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+ as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will learn how to insert an XML layout into a DSL
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To include an XML layout in a DSL, we use the `include()` method. We can add
    view properties to the view created using the `include()` method by simply adding
    `{}` and defining our view properties inside it. We can also add layout parameters
    to the view, just as we do it in DSL views. Check out the syntax given here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a layout in XML, which we will then include in our DSL layout.
    Let''s create a button in a linear layout and save it in a file called `test.xml`.
    Check out the following code for the layout that we will save in `text.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how our `test.xml` XML layout looks, a button with `10dp`
    space around it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4db591eb-9f93-410c-b939-9587190c813f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you need to try to include the layout you just created in a DSL layout
    on your own. You can add the DSL layout to the activity''s `onCreate()` method
    or in an external class that implements the `AnkoComponent` interface. Check out
    the following code for DSL layout (focus on the bold text in the given code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our layout looks after we include `test.xml` in our DSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a9882dd-1c6a-450e-a8c7-94ed845f05bd.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can attach listeners and get/set properties of included views by accessing
    them using Kotlin''s synthetic properties, using Anko''s `find()` method, or using
    the `findViewById()`. Each of the preceding methods needs the view to have an
    ID. Check out the following code for attaching an on-click listener on the button
    in `test.xml` that has a `btn_test` ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'I have imported all views from `test.xml` by importing the synthetic properties
    of `test.xml`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Converting XML files into DSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are already an Anko fan and would love to port your old projects' XML
    to DSL without doing it manually, then this recipe will help you learn how to
    go about doing that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a blank activity and working on the XML layout to
    have something to convert to DSL. I have the following XML layout that I will
    convert to DSL next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Showing Snackbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Snackbars are a great way to show feedback and messages to the users. Snackbars
    show a message at the bottom of a mobile or lower-left on larger devices. They
    can also have an action button. They automatically disappear after the timeout
    or after user interaction or if the user swipes on the snackbar.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a787462-2070-41ea-b6be-b5dad2112ea5.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will learn how to easily show a Snackbar using Anko layouts.
    Showing Snackbars in the traditional way is a bit long; Anko makes it simpler
    to quickly show snackbars. Let's see how.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the below steps, we will learn how to show a snackbar using Anko library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a few buttons, each for different snackbars. We will create a
    snackbar inside the `onClick` listener of each button. Here are the syntaxes of
    some snackbars. I suggest you try to code this on your own before moving to the
    solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Check out one possible solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the layout looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7568c19d-9994-4e89-a016-ddd5b36d760a.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot is how a snackbar without an action button looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d50ce622-f5b4-4088-a528-5a692466ad5f.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the one with an action button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/076740a7-48f0-45e9-bab6-3bf02031e1d2.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Showing Toasts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Toasts are used to show feedback or message as a popup in android. Toasts automatically
    disappear after their timeout. Showing toasts in Anko is extremely easy. Let's
    see how.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a few buttons in our layout, clicking on them will show a toast:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the syntax of toasts using Anko:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: I suggest that you try showing toasts on the click of a button on your own,
    before moving on to the solution. Let's make a layout with three buttons that
    show toast on clicking using the preceding syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is one way of creating a layout with three buttons where we have
    put our code to show toast inside `onClick` listener of the buttons. You can also
    put your layout in an external class that implements the `AnkoComponent` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how our layout looks, and how the toasts appear on clicking
    on buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/febd8d08-1b88-45c1-9bb5-46cfbf5841b6.jpeg)   ![](img/e547fbb8-eac8-4238-bc54-c56b7f2b59ef.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing views using synthetic properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So we know how Anko makes handling views and layouts easy, but Kotlin makes
    accessing views and getting/setting properties of views real fun. If you have
    tried using `findViewById()`, you already know how error-prone clunky code it
    is. There are a lot of libraries out there that provide a solution to this, but
    Kotlin provides a built-in plugin for this issue. Let's understand how to use
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko layouts dependencies to
    your project (follow the recipe *Setting up Anko library for Anko layouts in gradle*,in
    this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will learn how to access views using synthetic properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with an XML layout and an activity that uses this XML layout.
    Start with creating a blank activity and create an XML layout that you wish to
    work with. I am working with the following layout file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To use synthetic properties of a view, we need to import them inside the activity,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how we can directly use view ID to provide reference to our
    view and get/set properties of the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our layout looks and works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4beab0f-4f11-4d22-a267-4ebb13ebda87.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Accessing views of view groups using extension functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use extension functions to add new behaviors to a class that we may not
    even have access to. We can also add extension functions to view groups. One such
    view group is recycler view. Let's see how we can access views of a recycler view
    using extension functions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+, as we won't
    be using any code from other recipes. You also need an intermediate understanding
    of Android development.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kotlin has some operators that we can use on a class. We will be overloading
    one of these operators to get views of our view group:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access views of a view group by overloading the `get` operator like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in order to get a view from the view group, we can use either of the following
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, use the following method because we used operator overloading,
    and `el.get(index)` matches with the array-like `el[index]` operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extension functions provide the ability to add new functionalities to a class
    without modifying the class or inheriting it or using any design pattern. Extension
    functions are resolved statically and bear no connection with the class they extend.
  prefs: []
  type: TYPE_NORMAL
- en: By operator overloading, Kotlin gives us the ability to provide implementations
    of a predefined set of operators. To overload an operator, we can use a member
    function or an extension function, which we used in the preceding case.
  prefs: []
  type: TYPE_NORMAL
