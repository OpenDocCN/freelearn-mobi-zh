- en: Chapter 6. Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 工具
- en: In the previous chapter, you learned about the useful services that Google provides,
    which can be used by developers to improve their applications. Now, you will learn
    about tools available in Android Studio that make your life easier. Have you wondered
    how to manage the Android platforms? Do you want to have your project clearly
    documented? Are you working as a group of developers and need a version control
    manager integrated with Android Studio?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了谷歌提供的有用服务，开发者可以使用这些服务来改进他们的应用程序。现在，您将了解Android Studio中可用的工具，这些工具可以让您的生活更轻松。您是否想过如何管理Android平台？您是否希望您的项目有清晰的文档？您是否作为一组开发者工作，并需要与Android
    Studio集成的版本控制管理器？
- en: 'This chapter describes the most important additional tools provided in Android
    Studio: Android SDK tools, Javadoc, and version control integration. First, you
    will learn about the SDK Manager available in Android Studio from which you''ll
    be able to examine, update, and install different components for our project.
    Next, we will review the **Android Virtual Device** (**AVD**) Manager, where we
    can edit the virtual devices in which we will be testing our project. You will
    also learn how to have complete documentation using the Javadoc tool, how to have
    version control using the systems available in Android Studio, and how to handle
    your project tasks.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Android Studio中提供的最重要的附加工具：Android SDK工具、Javadoc和版本控制集成。首先，您将了解Android
    Studio中的SDK管理器，您可以通过它检查、更新和安装我们项目的不同组件。接下来，我们将回顾**Android虚拟设备**（**AVD**）管理器，在那里我们可以编辑我们将用于测试项目的虚拟设备。您还将学习如何使用Javadoc工具获得完整的文档，如何使用Android
    Studio中可用的系统进行版本控制，以及如何处理您的项目任务。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: SDK Manager
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK管理器
- en: AVD Manager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AVD管理器
- en: Javadoc
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Javadoc
- en: Version control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Tasks and contexts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务和上下文
- en: Software Development Kit Manager
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发工具包管理器
- en: The SDK Manager is an Android tool accessible from Android Studio to control
    our Android SDK installation. From this tool, we can examine the Android platforms
    installed in our system, update them, install new platforms, or install some other
    components such as Google Play services or Android Support Library.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SDK管理器是Android Studio中的一个工具，可用于控制我们的Android SDK安装。从这个工具中，我们可以检查系统中安装的Android平台，更新它们，安装新平台，或者安装其他组件，如Google
    Play服务或Android支持库。
- en: 'To open the SDK Manager from Android Studio, navigate to **Tools** | **Android**
    | **SDK Manager**. You can also click on the shortcut from the toolbar. The SDK
    Manager is an independent Android tool that has been integrated in Android Studio
    default settings at **Appearance & Behavior** | **System Settings** | **Android
    SDK**, as shown in the next screenshot:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Android Studio打开SDK管理器，请导航到**工具** | **Android** | **SDK管理器**。您也可以从工具栏中单击快捷方式。SDK管理器是一个独立的Android工具，它已集成在Android
    Studio默认设置中的**外观和行为** | **系统设置** | **Android SDK**，如下一张截图所示：
- en: '![Software Development Kit Manager](img/B05459_06_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![软件开发工具包管理器](img/B05459_06_01.jpg)'
- en: 'The SDK path configured in Android Studio is displayed at the top of the manager.
    You can change its path by clicking on the **Edit** button. The SDK Manager displays
    the list of available **SDK Platforms** packages with the following properties:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio中配置的SDK路径显示在管理器的顶部。您可以通过单击**编辑**按钮来更改其路径。SDK管理器显示具有以下属性的可用**SDK平台**包列表：
- en: '**Name**: This is the name of the container that aggregates related packages.
    Check the **Show Package Details** checkbox under the list of packages to see
    the details of the container.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：这是聚合相关包的容器名称。在包列表下勾选**显示包详细信息**复选框，以查看容器的详细信息。'
- en: '**API level**: This is the API number in which the package was added.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API级别**：这是包添加时的API编号。'
- en: '**Revision**: This is the package revision or version.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修订版**：这是包修订版或版本。'
- en: '**Status**: This is the status of the package on your system. The status can
    be *Not installed*, *Installed*, *Update available*, *Not compatible*, or *Obsolete*.
    If the **Show Package Details** checkbox is unchecked, then the status can also
    be *Partially installed*. With **Show Package Details** unchecked, a container
    package is considered *Installed* when both the **SDK Platform** and **Sources
    for Android SDK** packages are installed. If there is only one of these packages
    installed, the container package status is *Partially installed*.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：这是软件包在您系统中的状态。状态可以是**未安装**、**已安装**、**有更新可用**、**不兼容**或**过时**。如果未勾选**显示软件包详细信息**复选框，状态还可以是**部分安装**。当**SDK平台**和**Android
    SDK源**软件包都安装时，未勾选**显示软件包详细信息**的情况下，容器软件包被视为**已安装**。如果只有其中之一安装，容器软件包的状态为**部分安装**。'
- en: In the SDK Tools tab, you can manage the available SDK developer tools such
    as **Android SDK Platform-tools**, **Android Support Library**, or **Google Play
    services**, which will be explained in [Chapter 7](ch07.html "Chapter 7. Google
    Play Services"), *Google Play Services*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SDK工具**选项卡中，您可以管理可用的SDK开发者工具，例如**Android SDK平台工具**、**Android支持库**或**Google
    Play服务**，这些将在[第7章](ch07.html "第7章。Google Play服务")中解释，*Google Play服务*。
- en: In the **SDK Update Sites** tab, we can examine the list of official sites that
    provide add-ons and extra packages. We can add our custom external sites using
    the **Add** button at the bottom of the list.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在**SDK更新站点**选项卡中，我们可以检查提供附加组件和额外软件包的官方站点列表。我们可以使用列表底部的**添加**按钮添加自定义外部站点。
- en: Click on the **Launch Standalone SDK Manager** button at the bottom of the screen
    to open the standalone SDK Manager. This manager was the only option available
    in old versions of Android Studio. From the standalone SDK Manager, the SDK platforms
    and tools are listed like in the integrated SDK Manager, but we can also find
    some more options to filter and select the packages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 点击屏幕底部的**启动独立SDK管理器**按钮以打开独立的SDK管理器。在Android Studio的旧版本中，这是唯一可用的选项。从独立的SDK管理器中，SDK平台和工具的列表与集成SDK管理器中的列表类似，但我们还可以找到一些更多选项来过滤和选择软件包。
- en: The packages can be filtered by their state using the checkboxes under the list.
    These options are also accessible from the **Packages** menu at the top.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用列表下方的复选框根据其状态过滤软件包。这些选项也可以从顶部的**软件包**菜单中访问。
- en: 'Next to the name of the packages, there is a checkbox to select the packages
    we want to install, update, or delete. As shown in the next screenshot, the packages
    that are installed in our system and also have an update available are checked
    by default:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件包名称旁边有一个复选框，用于选择我们想要安装、更新或删除的软件包。如图所示，在系统中已安装且也有更新可用的软件包默认勾选：
- en: '![Software Development Kit Manager](img/B05459_06_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![软件开发工具包管理器](img/B05459_06_02.jpg)'
- en: 'If there is a new Android platform version that is not installed, its packages
    will also be checked, as shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有未安装的新Android平台版本，其软件包也将被检查，如下面的截图所示：
- en: '![Software Development Kit Manager](img/B05459_06_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![软件开发工具包管理器](img/B05459_06_03.jpg)'
- en: The total number of selected packages to be installed or updated is indicated
    in the text of the button at the bottom of the dialog. The button under it indicates
    the total number of selected packages to be deleted. You can delete packages that
    are deprecated or packages that you do not need anymore.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装或更新的所选软件包总数在对话框底部的按钮文本中指示。其下的按钮指示要删除的所选软件包总数。您可以删除已弃用或不再需要的软件包。
- en: Check the packages that need to be updated and also check the last Android platform.
    In addition, you should check the minimum platform supported by our application
    (Android 4.1.2, API 16) to be able to test our application in a virtual device
    using this version. Click on the **Install** button.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选需要更新的软件包，并勾选最后一个Android平台。此外，您还应该勾选我们应用程序支持的最小平台（Android 4.1.2，API 16），以便能够使用此版本在虚拟设备上测试我们的应用程序。点击**安装**按钮。
- en: In the next dialog, we have to accept the package licenses. Check the **Accept
    License** radio button and click on the **Install** button. The installation or
    update of the packages will start showing its progress. First, the manager downloads
    the packages, then it unzips them, and, finally, it installs them.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个对话框中，我们必须接受软件包许可协议。勾选**接受许可**单选按钮，然后点击**安装**按钮。软件包的安装或更新将开始显示其进度。首先，管理器下载软件包，然后解压缩它们，最后安装它们。
- en: Remember to check the SDK Manager from time to time for updates.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 记得定期检查SDK管理器以获取更新。
- en: The AVD Manager
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AVD 管理器
- en: The **AVD Manager** is an Android tool accessible from Android Studio to manage
    the Android virtual devices that will be executed in the Android emulator.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**AVD 管理器**是Android Studio中可访问的Android工具，用于管理将在Android模拟器中执行的手机虚拟设备。'
- en: To open the AVD Manager from Android Studio, navigate to **Tools** | **Android**
    | **AVD Manager**. You can also click on the shortcut from the toolbar. The AVD
    Manager displays the list of the existing virtual devices. Since we have not created
    any virtual devices, the list will initially be empty. To create our first virtual
    device, click on the **Create Virtual Device** button to open the configuration
    dialog.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Android Studio打开AVD管理器，请导航到**工具** | **Android** | **AVD 管理器**。您也可以从工具栏中点击快捷方式。AVD管理器显示现有虚拟设备的列表。由于我们尚未创建任何虚拟设备，列表最初将是空的。要创建我们的第一个虚拟设备，请单击**创建虚拟设备**按钮以打开配置对话框。
- en: 'The first step is to select the hardware configuration of the virtual device.
    The device definitions are listed on the left-hand side of the window. Device
    definitions can be classified into one of these categories: **Phone**, **Tablet**,
    **Wear**, or **TV**. Select one of them in the **Phone** category, such as Nexus
    6, to examine its details on the right-hand side, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是选择虚拟设备的硬件配置。设备定义列在窗口的左侧。设备定义可以分为以下类别之一：**手机**、**平板**、**穿戴**或**电视**。在**手机**类别中选择一个，例如Nexus
    6，以查看右侧的详细信息，如下面的截图所示：
- en: '![The AVD Manager](img/B05459_06_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![AVD 管理器](img/B05459_06_04.jpg)'
- en: We can also configure our own hardware device definitions from the AVD Manager.
    We can create a new definition using the **New Hardware Profile** button. The
    **Clone Device…** button creates a duplicate of an existing device.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从AVD管理器配置自己的硬件设备定义。我们可以使用**新建硬件配置文件**按钮创建一个新的定义。**克隆设备…**按钮创建现有设备的副本。
- en: 'Click on the **New Hardware Profile** button to examine the existing configuration
    parameters. The parameters that define a device are:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**新建硬件配置文件**按钮以检查现有配置参数。定义设备的参数包括：
- en: '**Device Name**: This is the name of the device.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备名称**：这是设备的名称。'
- en: '**Device Type**: This is the device type, which can be a **Phone/Tablet**,
    **Android Wear**, or **Android TV**.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备类型**：这是设备类型，可以是**手机/平板**、**Android Wear**或**Android TV**。'
- en: '**Screensize**: This is screen size in inches. This value determines the size
    category of the device. Type a value of `4.0` and notice how the **Size** value
    (on the right-hand side) becomes **normal**, as the following screenshot shows:![The
    AVD Manager](img/B05459_06_05.jpg)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕尺寸**：这是屏幕尺寸，以英寸为单位。此值决定了设备的尺寸类别。输入`4.0`的值，注意右侧的**尺寸**值（尺寸）变为**正常**，如下面的截图所示：![AVD
    管理器](img/B05459_06_05.jpg)'
- en: 'Now, type a value of `7.0` and the **Size** field changes its value to **large**,
    as the following screenshot shows:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，输入`7.0`的值，**尺寸**字段将更改其值到**大**，如下面的截图所示：
- en: '![The AVD Manager](img/B05459_06_06.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![AVD 管理器](img/B05459_06_06.jpg)'
- en: This parameter, along with the screen resolution, also determines the **Density**
    category.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此参数，连同屏幕分辨率，也决定了**密度**类别。
- en: '**Resolution**: This is the screen resolution in pixels. This value determines
    the density category of the device. For a screen size of `4.0` inches, type a
    value of `768 x 1280` and note how the **Density** value becomes **360 dpi**.
    Change the screen size to `6.0` inches and the **Density** value changes to **hdpi**.
    Now, change the resolution to `480 x 800` and the **Density** value will be **mdpi**.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率**：这是屏幕分辨率，以像素为单位。此值决定了设备的密度类别。对于4.0英寸的屏幕尺寸，输入`768 x 1280`的值，并注意**密度**值变为**360
    dpi**。将屏幕尺寸更改为`6.0`英寸，**密度**值将更改为**hdpi**。现在，将分辨率更改为`480 x 800`，**密度**值将是**mdpi**。'
- en: '**RAM**: This is the RAM memory size of the device.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAM**：这是设备的RAM内存大小。'
- en: '**Input**: This configures software and hardware inputs. The **Has Hardware
    Buttons** checkbox indicates whether the **Back**, **Home**, or **Menu** buttons
    of the device are available via software or hardware. The **Has Hardware Keyboard**
    checkbox indicates whether the keyboard is available via software or hardware.
    The **Navigation Style** selector enables the navigation controls via Directional
    Pad (**D-Pad**), **Trackball**, or **Wheel**.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：这配置软件和硬件输入。**有硬件按钮**复选框表示设备的**返回**、**主页**或**菜单**按钮是否通过软件或硬件可用。**有硬件键盘**复选框表示键盘是否通过软件或硬件可用。**导航样式**选择器通过方向垫（**D-Pad**）、**轨迹球**或**滚轮**启用导航控件。'
- en: '**Supported device states**: This checks the allowed states, which are **Portrait**
    and **Landscape**.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持的设备状态**：这检查允许的状态，即**纵向**和**横向**。'
- en: '**Cameras**: This checks whether the device has a **Front-facing camera** or
    a **Back-facing camera**.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摄像头**：这检查设备是否有**前置摄像头**或**后置摄像头**。'
- en: '**Sensors**: These are the sensors available in the device. They are **Accelerometer**,
    **Gyroscope**, **GPS**, and **Proximity Sensor**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传感器**：这些是设备中可用的传感器。它们是**加速度计**、**陀螺仪**、**GPS**和**接近传感器**。'
- en: '**Default Skin**: This selects additional hardware controls.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认皮肤**：这选择额外的硬件控件。'
- en: Create a new device with a screen size of 5.5 inches, a resolution of 1080 x
    1920, a RAM value of 2048 MiB, software buttons (leave input boxes unchecked),
    and both portrait and landscape states enabled. Name it `My Device`. Then, click
    on the **Finish** button. The hardware definition has been added to the list of
    configurations. If you right-click on the new hardware profile, you can edit it,
    clone it, export it, or delete it. Hardware profiles are exported using a XML
    format.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个屏幕大小为5.5英寸，分辨率为1080 x 1920，RAM值为2048 MiB，软件按钮（留空输入框未勾选），并启用横竖屏两种状态的设备。命名为`My
    Device`。然后，点击**完成**按钮。硬件定义已添加到配置列表中。如果您右键单击新的硬件配置文件，您可以编辑它、克隆它、导出它或删除它。硬件配置文件使用XML格式导出。
- en: Click on the **Next** button to continue the creation of a new virtual device.
    The next step is to select the virtual device system image and the target Android
    platform. Each platform has its own architecture. The system images are listed
    on the left-hand panel and the details of a selected system image are shown in
    the right-hand panel. If a **Recommendation** message appears in the detail panel
    as shown in the next screenshot, follow the recommendation and select a different
    image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续创建新的虚拟设备。下一步是选择虚拟设备系统镜像和目标Android平台。每个平台都有自己的架构。系统镜像列在左侧面板上，所选系统镜像的详细信息显示在右侧面板上。如果详细面板中显示**推荐**消息，如下一张截图所示，请遵循推荐并选择不同的镜像。
- en: '![The AVD Manager](img/B05459_06_07.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![AVD管理器](img/B05459_06_07.jpg)'
- en: Along with **Release Name** of a system image, there is a **Download** button.
    Select one of the **Recommended** images of the Marshmallow (API level 23) release
    with Google APIs and click on the **Download** button. Wait until the installation
    is finished and click on the **Next** button.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了系统镜像的**发布名称**外，还有一个**下载**按钮。选择Marshmallow（API级别23）发布中带有Google API的**推荐**镜像之一，然后点击**下载**按钮。等待安装完成，然后点击**下一步**按钮。
- en: 'The last step is to verify the configuration of the virtual device. Enter the
    name of the AVD in the **AVD Name** field. Give the virtual device a meaningful
    name to recognize it easily, such as `AVD_nexus6_api23`. Click on the **Show Advanced
    Settings** button. The settings that we can configure for the virtual device are
    the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是验证虚拟设备的配置。在**AVD名称**字段中输入AVD的名称。给虚拟设备一个有意义的名称以便于识别，例如`AVD_nexus6_api23`。点击**显示高级设置**按钮。我们可以为虚拟设备配置的设置如下：
- en: '**Startup size and orientation**: Select a scale for the screen and the initial
    orientation of the device. We recommend selecting the **Auto** scale.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动大小和方向**：选择屏幕大小和设备的初始方向。我们建议选择**自动**缩放。'
- en: '**Camera**: Select this if the emulator has a front camera or a back camera.
    The camera can be **Emulated** (which emulates that the device is actually capturing
    a video with the camera) or can be real (by the use of a **Webcam** from the computer).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摄像头**：如果模拟器有前置摄像头或后置摄像头，请选择此选项。摄像头可以是**模拟的**（模拟设备实际上使用摄像头录制视频）或真实（通过计算机上的**网络摄像头**）。'
- en: '**Network**: Select the speed of the simulated network and the delay in processing
    data across the network. This is useful for testing your app with low connections
    or missing responses.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：选择模拟网络的速率和处理网络数据延迟。这对于测试低连接或缺失响应的应用程序很有用。'
- en: '**Emulated Performance**: Select how graphics are rendered in the device. They
    can be rendered using your computer''s graphics (**Hardware**) or they can be
    emulated in software (**Software**). We recommend selecting the **Auto** option.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟性能**：选择设备中图形的渲染方式。它们可以使用你的计算机的图形（**硬件**）或通过软件模拟（**软件**）。我们建议选择**自动**选项。'
- en: '**Memory and Storage**: Select the memory parameters of the virtual device.
    Leave the default values as they are, but, if a warning message is shown, follow
    the instructions of that message. For example, select **1536M** for the **RAM**
    memory and **64** for the **VM Heap**. The **Internal Storage** option can also
    be configured, for example, **200 MiB**. Select the size of **SD Card** or select
    a file to behave as the SD card.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存和存储**：选择虚拟设备的内存参数。保留默认值不变，但如果显示警告信息，请遵循该信息的说明。例如，选择**1536M**作为**RAM**内存，**64**作为**VM
    Heap**。**内部存储**选项也可以配置，例如，**200 MiB**。选择**SD 卡**的大小或选择一个文件作为 SD 卡使用。'
- en: '**Device Frame**: Select this if additional hardware controls are displayed
    in the emulator.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备框架**：如果模拟器中显示额外的硬件控制，请选择此选项。'
- en: '**Keyboard**: Select this if a hardware keyboard is displayed in the emulator.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘**：如果模拟器中显示硬件键盘，请选择此选项。'
- en: 'Click on **Finish**. The new virtual device is now listed in the AVD Manager.
    On the **Actions** section of the recently created virtual device, you can find
    the following actions:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**完成**。新的虚拟设备现在列在 AVD 管理器中。在最近创建的虚拟设备的**操作**部分，你可以找到以下操作：
- en: '**Start** icon: This runs the virtual device.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动**图标：这将运行虚拟设备。'
- en: '**Edit** icon: This edits the virtual device configuration.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**图标：这将编辑虚拟设备的配置。'
- en: '**Duplicate**: This creates a new device configuration displaying the last
    step of the creation process. You can change its configuration parameters and
    then verify the new device.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制**：这将创建一个新的设备配置，显示创建过程的最后一步。你可以更改其配置参数，然后验证新的设备。'
- en: '**Wipe Data**: This removes the user files from the virtual device.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**擦除数据**：这将从虚拟设备中删除用户文件。'
- en: '**Show on Disk**: This opens the virtual device directory in your system.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示在磁盘上**：这将打开系统中的虚拟设备目录。'
- en: '**View Details**: This opens a dialog detailing the virtual device''s characteristics.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看详情**：这将打开一个对话框，详细说明虚拟设备的特性。'
- en: '**Delete**: This deletes the virtual device.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：这将删除虚拟设备。'
- en: '**Stop**: This stops the virtual device.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停止**：这将停止虚拟设备。'
- en: 'A **Download** button in the **Actions** section, like in the next screenshot,
    means that the system image of that AVD is missing. Click on the **Download**
    button to install it in your system:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作**部分中，如下一张截图所示，有一个**下载**按钮，表示该 AVD 的系统镜像缺失。点击**下载**按钮将其安装到你的系统中：'
- en: '![The AVD Manager](img/B05459_06_08.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![AVD 管理器](img/B05459_06_08.jpg)'
- en: 'The recently created AVD will also be listed in the device selector of the
    graphical editor of a layout. In Android Studio, open the main layout with the
    graphical editor and click on the list of the devices. As the following screenshot
    shows, our custom device definition appears and we can select it to preview the
    layout:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最近创建的 AVD 也会列在布局图形编辑器的设备选择器中。在 Android Studio 中，使用图形编辑器打开主布局，并点击设备列表。如图所示，我们的自定义设备定义出现，我们可以选择它来预览布局：
- en: '![The AVD Manager](img/B05459_06_09.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![AVD 管理器](img/B05459_06_09.jpg)'
- en: The Android emulator
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 模拟器
- en: Now that we have one AVD created in the AVD Manager, we can run it on the Android
    emulator. Open the AVD Manager and click on the **Start** button of the AVD. The
    emulator will be opened, as shown in the next screenshot. Wait until it is completely
    loaded and then you will be able to try it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在 AVD 管理器中创建了一个 AVD，我们可以在 Android 模拟器上运行它。打开 AVD 管理器并点击 AVD 的**启动**按钮。模拟器将打开，如下一张截图所示。等待它完全加载后，你就可以尝试使用了。
- en: '![The Android emulator](img/B05459_06_10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Android 模拟器](img/B05459_06_10.jpg)'
- en: 'Next to the emulator, to its right-hand side, there is a bar with actions:
    power button, volume up and down, rotate left and right, take screenshot, zoom,
    back button, home button, overview button, and the extended controls.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器旁边，在其右侧，有一个包含操作的条：电源按钮、音量加减、左右旋转、截图、缩放、后退按钮、主页按钮、概览按钮和扩展控制。
- en: 'Click on the **More** option to open the next extended controls:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**更多**选项以打开下一组扩展控制：
- en: '**Location**: This emulates the location of the device by setting latitude,
    longitude, and altitude. You can also emulate a series of location changes. Unfortunately,
    no map is provided to easily select a location, but you can use Google Maps to
    get the latitude and longitude of the locations you want to emulate. This mechanism
    is useful if your app displays a map or depends on the user''s location to trigger
    a specific action. To try this feature, open the Google Maps app on the virtual
    device. Enter some coordinates in the **Extended controls** and click on **SEND**.
    Observe how Google Maps draws your location in the one you entered as the following
    screenshot shows:![The Android emulator](img/B05459_06_11.jpg)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**: 这通过设置纬度、经度和海拔来模拟设备的地理位置。您还可以模拟一系列的位置变化。遗憾的是，没有提供地图以便轻松选择位置，但您可以使用Google
    Maps获取您想要模拟的位置的纬度和经度。如果您的应用显示地图或依赖于用户的位置来触发特定操作，此机制非常有用。要尝试此功能，请在虚拟设备上打开Google
    Maps应用。在**扩展控制**中输入一些坐标，然后点击**发送**。观察Google Maps如何绘制您输入的位置，如下截图所示：![Android模拟器](img/B05459_06_11.jpg)'
- en: '**Cellular**: This emulates the speed of the network (**Full**, **HSDAP**,
    **UMTS**, and so on). This also emulates **Data status** and **Voice status**.
    This mechanism is useful, if your app depends on external data, to examine how
    it works with slow network connections. Try this feature by changing the **Network
    type** to **EDGE** and note how it changes in the emulator:![The Android emulator](img/B05459_06_12.jpg)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蜂窝网络**: 这模拟网络的速率（**全速**、**HSDPA**、**UMTS**等）。这还模拟**数据状态**和**语音状态**。如果您的应用依赖于外部数据，此机制非常有用，可以检查它如何与慢速网络连接一起工作。通过将**网络类型**更改为**EDGE**来尝试此功能，并注意在模拟器中的变化：![Android模拟器](img/B05459_06_12.jpg)'
- en: '**Battery**: This emulates the battery charge level, if the device is connected
    to a charger, the battery health, or the battery status. This mechanism is useful
    if your app changes its behavior depending on the battery status. For example,
    if the battery level is low, you can avoid unnecessary network requests to reduce
    battery consumption. If you change the **Charge level** to **10%** and the **Charger
    connection** to **None**, the emulator displays a low battery notification:![The
    Android emulator](img/B05459_06_13.jpg)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电池**: 这模拟电池的充电水平，如果设备连接到充电器，则模拟电池健康状态或电池状态。如果您的应用根据电池状态改变其行为，此机制非常有用。例如，如果电池电量低，您可以避免不必要的网络请求以减少电池消耗。如果您将**充电水平**更改为**10%**并将**充电器连接**设置为**无**，模拟器将显示低电量通知：![Android模拟器](img/B05459_06_13.jpg)'
- en: '**Phone**: This emulates a phone call or a SMS message. This mechanism is useful,
    for example, to examine how your app recovers from interruptions. To try this
    feature, click on the **CALL DEVICE** button and see how the device receives the
    call, as the next screenshot shows:![The Android emulator](img/B05459_06_14.jpg)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话**: 这模拟电话通话或短信消息。例如，要检查您的应用如何从中断中恢复，此机制非常有用。要尝试此功能，请点击**呼叫设备**按钮，并观察设备如何接收通话，如下截图所示：![Android模拟器](img/B05459_06_14.jpg)'
- en: '**Directional pad**: This emulates a directional pad.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向键**: 这模拟了一个方向键。'
- en: '**Fingerprint**: This emulates a finger touching the fingerprint sensor. This
    mechanism is useful if your app has a fingerprint security step, for example,
    to make a payment. To try this feature, open the Android **Settings** in the virtual
    device, go to **Security**, and click on **Fingerprint**. Follow the steps to
    add a fingerprint. You will get to the step, shown in the next screenshot, in
    which you need put your finger on the sensor:![The Android emulator](img/B05459_06_15.jpg)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指纹**: 这模拟手指触摸指纹传感器。如果您的应用具有指纹安全步骤，例如进行支付，此机制非常有用。要尝试此功能，请在虚拟设备上打开Android
    **设置**，进入**安全**，然后点击**指纹**。按照以下截图所示的步骤添加指纹。您将到达需要将手指放在传感器上的步骤：![Android模拟器](img/B05459_06_15.jpg)'
- en: 'Click on the **TOUCH SENSOR** button from the **Extended controls**. The fingerprint
    will be added as shown in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从**扩展控制**中点击**触摸传感器**按钮。指纹将按以下截图所示添加：
- en: '![The Android emulator](img/B05459_06_16.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Android模拟器](img/B05459_06_16.jpg)'
- en: Click on the power button to lock the device and click it again to unlock it.
    The fingerprint is then required. Click on the **TOUCH SENSOR** button using the
    same fingerprint and the device will be unlocked.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击电源按钮以锁定设备，然后再次点击以解锁它。随后需要指纹验证。使用相同的指纹点击**触摸传感器**按钮，设备将被解锁。
- en: '**Settings**: These are the settings of the emulator. For example, you can
    change the folder to save the screenshots or if you want to send crash reports.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：这些是模拟器的设置。例如，您可以更改保存截图的文件夹，或者如果您想发送崩溃报告。'
- en: '**Help**: This contains **Keyboard shortcuts**, **Emulator help**, and **About**.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**：这包含**键盘快捷键**、**模拟器帮助**和**关于**。'
- en: 'Finally, if you selected an emulated camera when you created the device definition,
    you can test it by opening the camera app in the emulator. Open it and note how
    a random video appears as if the camera was capturing it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您在创建设备定义时选择了模拟摄像头，您可以通过在模拟器中打开摄像头应用程序来测试它。打开它，并注意随机视频如何像摄像头正在捕获它一样出现：
- en: '![The Android emulator](img/B05459_06_17.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Android 模拟器](img/B05459_06_17.jpg)'
- en: Generating Javadoc
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 Javadoc
- en: 'Javadoc is a utility to document Java code in HTML format. The Javadoc documentation
    is generated from comments and tags added to Java classes or methods. The comments
    start with the `/**` string and end with `*/`. Inside these comments, tags can
    be added. The following tags, in the same order as they should be added, are available
    in Javadoc:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc 是一个用于以 HTML 格式文档化 Java 代码的实用程序。Javadoc 文档是从添加到 Java 类或方法的注释和标签生成的。注释以`/**`字符串开始，以`*/`结束。在这些注释内部，可以添加标签。以下标签，按应添加的顺序排列，在
    Javadoc 中可用：
- en: '`@author`: This indicates the author or authors of the code.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@author`：这表示代码的作者或作者。'
- en: '`@version`: This indicates the version of the class or method. Used for classes
    and interfaces.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@version`：这表示类或方法的版本。用于类和接口。'
- en: '`@param`: This describes a method parameter. Only used in methods and constructors.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@param`：这描述了方法参数。仅在方法和构造函数中使用。'
- en: '`@return`: This describes the return object of a method. Only used in methods
    that do not return `void`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@return`：这描述了方法的返回对象。仅在不需要返回`void`的方法中使用。'
- en: '`@throws`: This describes an exception that can be thrown by the method. Equivalent
    to `@exception`.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@throws`：这描述了方法可能抛出的异常。等同于`@exception`。'
- en: '`@see`: This indicates a reference, which can be an URL, another element in
    the documentation, or just some text.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@see`：这表示一个引用，可以是 URL、文档中的另一个元素或只是一些文本。'
- en: '`@serial`: This indicates if a field is serializable.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@serial`：这表示字段是否可序列化。'
- en: '`@deprecated`: This indicates that a method is deprecated and there is a replacement.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@deprecated`：这表示一个方法已过时，并有一个替代方案。'
- en: The use of Javadoc is integrated in Android Studio. We can use code completion
    when typing Javadoc comments. Javadoc documentation will appear in the pop-up
    tool tips of the code elements.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中，Javadoc 的使用是集成的。我们可以在输入 Javadoc 注释时使用代码补全。Javadoc 文档将显示在代码元素的弹出工具提示中。
- en: 'To generate a complete Javadoc, we have to write the Javadoc comments about
    our classes and methods. Open the main activity of our project to add the Javadoc
    comments to the `onAcceptClick` method we created in [Chapter 5](ch05.html "Chapter 5. Creating
    User Interfaces"), *Creating User Interfaces*. Place the caret on the line before
    the method declaration, type `/**`, and press *Enter*. The Javadoc comments are
    automatically inserted containing the available information from the method declaration:
    parameters and return type. In this case, there is no return type, so the automatically
    generated Javadoc is the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成完整的 Javadoc，我们必须编写关于我们的类和方法的 Javadoc 注释。打开我们项目的MainActivity，将 Javadoc 注释添加到我们在[第5章](ch05.html
    "第5章。创建用户界面")中创建的`onAcceptClick`方法。在方法声明之前的行上放置光标，输入`/**`，然后按*Enter*。Javadoc 注释将自动插入，包含来自方法声明的可用信息：参数和返回类型。在这种情况下，没有返回类型，因此自动生成的
    Javadoc 如下所示：
- en: '[PRE0]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first line of the documentation comments is the method description. Then,
    it explains each parameter and the return type. The method should now look like
    this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 文档注释的第一行是方法描述。然后，它解释每个参数和返回类型。现在，方法应看起来像这样：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This information about the method will now be displayed as its documentation
    in the emerging dialogs. The following screenshot shows the dialog that should
    appear over the method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的信息现在将作为其文档显示在出现的对话框中。以下截图显示了应出现在方法上方的对话框：
- en: '![Generating Javadoc](img/B05459_06_18.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![生成 Javadoc](img/B05459_06_18.jpg)'
- en: To generate the Javadoc documentation, navigate to **Tools** | **Generate Javadoc...**.
    A dialog showing the Javadoc options will be opened. We can select the scope,
    if we want to include test or library sources, the output directory, and the visibility
    of the included elements. Related to the format of documentation, we can create
    a hierarchy tree, a navigation bar, and an index if needed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成Javadoc文档，请转到**工具** | **生成Javadoc...**。将打开显示Javadoc选项的对话框。我们可以选择范围，如果我们想包括测试或库源，输出目录以及包含元素的可见性。关于文档格式，如果需要，我们可以创建层次结构树、导航栏和索引。
- en: Check **Current File** as scope to generate just the documentation of our main
    activity. Select an output directory from your system. Reduce the visibility to
    **public** and click on the **OK** button. The Javadoc documentation in HTML format
    has been created in the output directory. The `index.html` file is the start point.
    Open the `index.html` file and navigate through the documentation to open the
    `MyActivity` class, like in the following screenshot. Note that the `onCreate`
    method, whose visibility is protected, does not appear, as we reduced the visibility
    of the generated Javadoc to **public** elements.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将**当前文件**作为范围以生成我们主活动的文档。从您的系统中选择一个输出目录。将可见性降低到**公共**并点击**确定**按钮。HTML格式的Javadoc文档已创建在输出目录中。`index.html`文件是起点。打开`index.html`文件并浏览文档以打开`MyActivity`类，如下面的截图所示。请注意，由于我们将生成的Javadoc的可见性降低到**公共**元素，因此`onCreate`方法（其可见性为受保护的）没有显示。
- en: '![Generating Javadoc](img/B05459_06_19.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![生成Javadoc](img/B05459_06_19.jpg)'
- en: Tasks and contexts
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务和上下文
- en: 'Android Studio integrates several issue tracking systems. An issue tracking
    system is a software tool that manages lists of issues. Some issue tracking systems
    supported by Android Studio are the following: Jira, YouTrack, Lighthouse, Mantis,
    Trello, or Bugzilla.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio集成了多个问题跟踪系统。问题跟踪系统是一种管理问题列表的软件工具。Android Studio支持的一些问题跟踪系统包括：Jira、YouTrack、Lighthouse、Mantis、Trello或Bugzilla。
- en: To integrate one of these tracking systems into your project using Android Studio,
    navigate to **Tools** | **Tasks & Contexts** | **Configure Servers...**. Click
    on the **Add** button and select one of the available systems. You need to enter
    the server URL, the authentication values, and some additional parameters depending
    on the system type.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Android Studio将其中一个跟踪系统集成到您的项目中，请转到**工具** | **任务与上下文** | **配置服务器...**。点击**添加**按钮并选择一个可用的系统。您需要输入服务器URL、身份验证值以及根据系统类型的一些附加参数。
- en: From the **Tasks & Contexts** menu you will find the actions to manage the tasks,
    such as switching among tasks, creating a new task, closing the current task,
    or editing the current task.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在**任务与上下文**菜单中，您可以找到管理任务的操作，例如在任务之间切换、创建新任务、关闭当前任务或编辑当前任务。
- en: A task is identified by its name and is usually attached to an issue in your
    issue tracking system. A task can also be associated with a context, which defines
    a set of files that will be opened in the editor when you work on it. You can
    create, load, or clear a context from the **Tasks & Contexts** menu.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 任务通过其名称识别，通常与您问题跟踪系统中的一个问题相关联。任务还可以与上下文相关联，它定义了当您在此任务上工作时将在编辑器中打开的一组文件。您可以从**任务与上下文**菜单创建、加载或清除上下文。
- en: 'Let''s create a task. Navigate to **Tools** | **Tasks & Contexts** | **+ Open
    Task...**. Type the name, for example, `My first task`, and click on **Create
    New Task ''My first task''**. The creation dialog will be displayed as in the
    next screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个任务。转到**工具** | **任务与上下文** | **+ 打开任务...**。输入名称，例如，`我的第一个任务`，然后点击**创建新任务
    '我的第一个任务'**。创建对话框将显示如下截图：
- en: '![Tasks and contexts](img/B05459_06_20.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![任务和上下文](img/B05459_06_20.jpg)'
- en: When you create a new task, you can clear the context and create a new branch
    in your VCS. Click **OK** to finish the creation. If you check the **Clear current
    context** option, all the files that were open in the editor are now closed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建新任务时，您可以清除上下文并在您的VCS中创建一个新的分支。点击**确定**完成创建。如果您选中**清除当前上下文**选项，则现在编辑器中打开的所有文件都将关闭。
- en: 'In the toolbar of Android Studio there is a new item, a drop-down list with
    your tasks. As shown in the next screenshot, our current task is the recently
    created **My first task**. Note the existence of a previous task, the **Default
    task**:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio的工具栏中有一个新项目，一个包含您任务的下拉列表。如图所示，我们的当前任务是最近创建的**我的第一个任务**。请注意存在一个先前任务，**默认任务**：
- en: '![Tasks and contexts](img/B05459_06_21.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![任务和上下文](img/B05459_06_21.jpg)'
- en: When you are ready to close a task, navigate to **Tools** | **Tasks & Contexts**
    | **Close Active Task...**. In the close task dialog, you can commit the changes
    and merge the current branch.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好关闭任务时，请导航到 **工具** | **任务与上下文** | **关闭活动任务...**。在关闭任务对话框中，你可以提交更改并合并当前分支。
- en: Version control systems
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: 'Android Studio integrates some **version control systems** (**VCS**): GitHub,
    CVS, Git, Google Cloud, Mercurial, and Subversion. To enable version control integration,
    navigate to **VCS** | **Enable Version Control Integration...** and select the
    type of system. Now, some more options will be added to the **VCS** menu:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 集成了一些 **版本控制系统**（**VCS**）：GitHub、CVS、Git、Google Cloud、Mercurial
    和 Subversion。要启用版本控制集成，请导航到 **VCS** | **启用版本控制集成...** 并选择系统类型。现在，一些更多选项将被添加到 **VCS**
    菜单中：
- en: To update the entire project, navigate to **VCS** | **Update Project...**
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新整个项目，请导航到 **VCS** | **更新项目...**
- en: To commit all the changes to the project, navigate to **VCS** | **Commit Changes...**
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提交项目中的所有更改，请导航到 **VCS** | **提交更改...**
- en: The first step is to do the checkout from the version control system. Navigate
    to **VCS** | **Checkout from Version Control**, click on the add icon, and type
    the repository URL or the repository configuration.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是从版本控制系统进行检出。导航到 **VCS** | **从版本控制检出**，点击添加图标，并输入存储库 URL 或存储库配置。
- en: The version control actions can also be applied to individual files. Right-click
    on any file of the project and select the **Subversion** section. From the emerging
    menu, we can add the file to the repository, add it to the ignore list, browse
    the changes, revert the changes, or lock it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制操作也可以应用于单个文件。在项目的任何文件上右键单击，然后选择 **Subversion** 部分。从出现的菜单中，我们可以将文件添加到存储库，将其添加到忽略列表，浏览更改，撤销更改或锁定它。
- en: 'A simpler way to control the file versions is using the **Local History** option.
    Open the main activity file in the editor and navigate to **VCS** | **Local History**
    | **Show History**. The file history dialog will be opened. On the left-hand side
    of the dialog, the available versions of the file are listed. Select an older
    version to compare it to the current version of the file. The differences between
    the older version and the current version are highlighted. Gray color is used
    to indicate a block of deleted code, blue color to highlight the text that has
    changed, and green color to indicate the newly inserted text. From the top icons,
    we can revert the changes and configure the whitespaces visualization. The following
    screenshot shows the comparison between two versions of our main activity. We
    can observe how the method we recently added—the `onAcceptClick` method—is highlighted
    in green:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **本地历史记录** 选项是控制文件版本的一个更简单的方法。在编辑器中打开主活动文件，然后导航到 **VCS** | **本地历史记录** | **显示历史记录**。文件历史记录对话框将被打开。在对话框的左侧，列出了文件的可用版本。选择一个较旧的版本，以将其与文件的当前版本进行比较。较旧版本与当前版本之间的差异会被突出显示。灰色用于表示已删除的代码块，蓝色用于突出显示已更改的文本，绿色用于表示新插入的文本。从顶部的图标中，我们可以撤销更改并配置空白可视化。以下截图显示了我们的主活动两个版本的比较。我们可以观察到我们最近添加的方法——`onAcceptClick`
    方法——以绿色突出显示：
- en: '![Version control systems](img/B05459_06_22.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![版本控制系统](img/B05459_06_22.jpg)'
- en: We can also examine the local history of a specific block of code. Close the
    dialog, select some lines of code from the editor, and navigate to **VCS** | **Local
    History** | **Show History for Selection**. The same history dialog will be opened,
    but, this time, it displays the versions of the selected code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查特定代码块的本地区历史记录。关闭对话框，从编辑器中选择一些代码行，然后导航到 **VCS** | **本地历史记录** | **显示选择的历史记录**。将打开相同的历史记录对话框，但这次它显示所选代码的版本。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By the end of this chapter, you have the knowledge required to use the Android
    SDK Manager tool to install, update, or examine available platforms for your project.
    You can create a new AVD and edit it whenever necessary. Creating complete documentation
    for our project should no longer be a problem using Javadoc and we should also
    be able to work with a VCS integrated in Android Studio.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将拥有使用 Android SDK 管理器工具安装、更新或检查项目可用平台所需的知识。你可以在需要时创建新的 AVD 并对其进行编辑。使用
    Javadoc 为我们的项目创建完整的文档应该不再成为问题，我们还应该能够与集成在 Android Studio 中的版本控制系统（VCS）一起工作。
- en: In the next chapter, you will learn about the available Google Play services
    and how to integrate them with your project using Android Studio. We will also
    see how to install and integrate different libraries available with Google technology,
    such as Google Maps, Google Cloud Messaging, and more.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解可用的 Google Play 服务以及如何使用 Android Studio 将它们集成到你的项目中。我们还将探讨如何安装和集成与
    Google 技术一起提供的不同库，例如 Google Maps、Google Cloud Messaging 以及更多。
