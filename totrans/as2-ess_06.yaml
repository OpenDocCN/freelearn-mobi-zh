- en: Chapter 6. Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the useful services that Google provides,
    which can be used by developers to improve their applications. Now, you will learn
    about tools available in Android Studio that make your life easier. Have you wondered
    how to manage the Android platforms? Do you want to have your project clearly
    documented? Are you working as a group of developers and need a version control
    manager integrated with Android Studio?
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter describes the most important additional tools provided in Android
    Studio: Android SDK tools, Javadoc, and version control integration. First, you
    will learn about the SDK Manager available in Android Studio from which you''ll
    be able to examine, update, and install different components for our project.
    Next, we will review the **Android Virtual Device** (**AVD**) Manager, where we
    can edit the virtual devices in which we will be testing our project. You will
    also learn how to have complete documentation using the Javadoc tool, how to have
    version control using the systems available in Android Studio, and how to handle
    your project tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: SDK Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AVD Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javadoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks and contexts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software Development Kit Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDK Manager is an Android tool accessible from Android Studio to control
    our Android SDK installation. From this tool, we can examine the Android platforms
    installed in our system, update them, install new platforms, or install some other
    components such as Google Play services or Android Support Library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the SDK Manager from Android Studio, navigate to **Tools** | **Android**
    | **SDK Manager**. You can also click on the shortcut from the toolbar. The SDK
    Manager is an independent Android tool that has been integrated in Android Studio
    default settings at **Appearance & Behavior** | **System Settings** | **Android
    SDK**, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software Development Kit Manager](img/B05459_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The SDK path configured in Android Studio is displayed at the top of the manager.
    You can change its path by clicking on the **Edit** button. The SDK Manager displays
    the list of available **SDK Platforms** packages with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: This is the name of the container that aggregates related packages.
    Check the **Show Package Details** checkbox under the list of packages to see
    the details of the container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API level**: This is the API number in which the package was added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Revision**: This is the package revision or version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: This is the status of the package on your system. The status can
    be *Not installed*, *Installed*, *Update available*, *Not compatible*, or *Obsolete*.
    If the **Show Package Details** checkbox is unchecked, then the status can also
    be *Partially installed*. With **Show Package Details** unchecked, a container
    package is considered *Installed* when both the **SDK Platform** and **Sources
    for Android SDK** packages are installed. If there is only one of these packages
    installed, the container package status is *Partially installed*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the SDK Tools tab, you can manage the available SDK developer tools such
    as **Android SDK Platform-tools**, **Android Support Library**, or **Google Play
    services**, which will be explained in [Chapter 7](ch07.html "Chapter 7. Google
    Play Services"), *Google Play Services*.
  prefs: []
  type: TYPE_NORMAL
- en: In the **SDK Update Sites** tab, we can examine the list of official sites that
    provide add-ons and extra packages. We can add our custom external sites using
    the **Add** button at the bottom of the list.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Launch Standalone SDK Manager** button at the bottom of the screen
    to open the standalone SDK Manager. This manager was the only option available
    in old versions of Android Studio. From the standalone SDK Manager, the SDK platforms
    and tools are listed like in the integrated SDK Manager, but we can also find
    some more options to filter and select the packages.
  prefs: []
  type: TYPE_NORMAL
- en: The packages can be filtered by their state using the checkboxes under the list.
    These options are also accessible from the **Packages** menu at the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the name of the packages, there is a checkbox to select the packages
    we want to install, update, or delete. As shown in the next screenshot, the packages
    that are installed in our system and also have an update available are checked
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software Development Kit Manager](img/B05459_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If there is a new Android platform version that is not installed, its packages
    will also be checked, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software Development Kit Manager](img/B05459_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The total number of selected packages to be installed or updated is indicated
    in the text of the button at the bottom of the dialog. The button under it indicates
    the total number of selected packages to be deleted. You can delete packages that
    are deprecated or packages that you do not need anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Check the packages that need to be updated and also check the last Android platform.
    In addition, you should check the minimum platform supported by our application
    (Android 4.1.2, API 16) to be able to test our application in a virtual device
    using this version. Click on the **Install** button.
  prefs: []
  type: TYPE_NORMAL
- en: In the next dialog, we have to accept the package licenses. Check the **Accept
    License** radio button and click on the **Install** button. The installation or
    update of the packages will start showing its progress. First, the manager downloads
    the packages, then it unzips them, and, finally, it installs them.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to check the SDK Manager from time to time for updates.
  prefs: []
  type: TYPE_NORMAL
- en: The AVD Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **AVD Manager** is an Android tool accessible from Android Studio to manage
    the Android virtual devices that will be executed in the Android emulator.
  prefs: []
  type: TYPE_NORMAL
- en: To open the AVD Manager from Android Studio, navigate to **Tools** | **Android**
    | **AVD Manager**. You can also click on the shortcut from the toolbar. The AVD
    Manager displays the list of the existing virtual devices. Since we have not created
    any virtual devices, the list will initially be empty. To create our first virtual
    device, click on the **Create Virtual Device** button to open the configuration
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to select the hardware configuration of the virtual device.
    The device definitions are listed on the left-hand side of the window. Device
    definitions can be classified into one of these categories: **Phone**, **Tablet**,
    **Wear**, or **TV**. Select one of them in the **Phone** category, such as Nexus
    6, to examine its details on the right-hand side, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The AVD Manager](img/B05459_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also configure our own hardware device definitions from the AVD Manager.
    We can create a new definition using the **New Hardware Profile** button. The
    **Clone Device…** button creates a duplicate of an existing device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **New Hardware Profile** button to examine the existing configuration
    parameters. The parameters that define a device are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Device Name**: This is the name of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device Type**: This is the device type, which can be a **Phone/Tablet**,
    **Android Wear**, or **Android TV**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screensize**: This is screen size in inches. This value determines the size
    category of the device. Type a value of `4.0` and notice how the **Size** value
    (on the right-hand side) becomes **normal**, as the following screenshot shows:![The
    AVD Manager](img/B05459_06_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, type a value of `7.0` and the **Size** field changes its value to **large**,
    as the following screenshot shows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The AVD Manager](img/B05459_06_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: This parameter, along with the screen resolution, also determines the **Density**
    category.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Resolution**: This is the screen resolution in pixels. This value determines
    the density category of the device. For a screen size of `4.0` inches, type a
    value of `768 x 1280` and note how the **Density** value becomes **360 dpi**.
    Change the screen size to `6.0` inches and the **Density** value changes to **hdpi**.
    Now, change the resolution to `480 x 800` and the **Density** value will be **mdpi**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM**: This is the RAM memory size of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: This configures software and hardware inputs. The **Has Hardware
    Buttons** checkbox indicates whether the **Back**, **Home**, or **Menu** buttons
    of the device are available via software or hardware. The **Has Hardware Keyboard**
    checkbox indicates whether the keyboard is available via software or hardware.
    The **Navigation Style** selector enables the navigation controls via Directional
    Pad (**D-Pad**), **Trackball**, or **Wheel**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported device states**: This checks the allowed states, which are **Portrait**
    and **Landscape**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cameras**: This checks whether the device has a **Front-facing camera** or
    a **Back-facing camera**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensors**: These are the sensors available in the device. They are **Accelerometer**,
    **Gyroscope**, **GPS**, and **Proximity Sensor**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Skin**: This selects additional hardware controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new device with a screen size of 5.5 inches, a resolution of 1080 x
    1920, a RAM value of 2048 MiB, software buttons (leave input boxes unchecked),
    and both portrait and landscape states enabled. Name it `My Device`. Then, click
    on the **Finish** button. The hardware definition has been added to the list of
    configurations. If you right-click on the new hardware profile, you can edit it,
    clone it, export it, or delete it. Hardware profiles are exported using a XML
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue the creation of a new virtual device.
    The next step is to select the virtual device system image and the target Android
    platform. Each platform has its own architecture. The system images are listed
    on the left-hand panel and the details of a selected system image are shown in
    the right-hand panel. If a **Recommendation** message appears in the detail panel
    as shown in the next screenshot, follow the recommendation and select a different
    image.
  prefs: []
  type: TYPE_NORMAL
- en: '![The AVD Manager](img/B05459_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Along with **Release Name** of a system image, there is a **Download** button.
    Select one of the **Recommended** images of the Marshmallow (API level 23) release
    with Google APIs and click on the **Download** button. Wait until the installation
    is finished and click on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to verify the configuration of the virtual device. Enter the
    name of the AVD in the **AVD Name** field. Give the virtual device a meaningful
    name to recognize it easily, such as `AVD_nexus6_api23`. Click on the **Show Advanced
    Settings** button. The settings that we can configure for the virtual device are
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Startup size and orientation**: Select a scale for the screen and the initial
    orientation of the device. We recommend selecting the **Auto** scale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera**: Select this if the emulator has a front camera or a back camera.
    The camera can be **Emulated** (which emulates that the device is actually capturing
    a video with the camera) or can be real (by the use of a **Webcam** from the computer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: Select the speed of the simulated network and the delay in processing
    data across the network. This is useful for testing your app with low connections
    or missing responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulated Performance**: Select how graphics are rendered in the device. They
    can be rendered using your computer''s graphics (**Hardware**) or they can be
    emulated in software (**Software**). We recommend selecting the **Auto** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory and Storage**: Select the memory parameters of the virtual device.
    Leave the default values as they are, but, if a warning message is shown, follow
    the instructions of that message. For example, select **1536M** for the **RAM**
    memory and **64** for the **VM Heap**. The **Internal Storage** option can also
    be configured, for example, **200 MiB**. Select the size of **SD Card** or select
    a file to behave as the SD card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device Frame**: Select this if additional hardware controls are displayed
    in the emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyboard**: Select this if a hardware keyboard is displayed in the emulator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Finish**. The new virtual device is now listed in the AVD Manager.
    On the **Actions** section of the recently created virtual device, you can find
    the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Start** icon: This runs the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit** icon: This edits the virtual device configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplicate**: This creates a new device configuration displaying the last
    step of the creation process. You can change its configuration parameters and
    then verify the new device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wipe Data**: This removes the user files from the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show on Disk**: This opens the virtual device directory in your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Details**: This opens a dialog detailing the virtual device''s characteristics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: This deletes the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop**: This stops the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **Download** button in the **Actions** section, like in the next screenshot,
    means that the system image of that AVD is missing. Click on the **Download**
    button to install it in your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The AVD Manager](img/B05459_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The recently created AVD will also be listed in the device selector of the
    graphical editor of a layout. In Android Studio, open the main layout with the
    graphical editor and click on the list of the devices. As the following screenshot
    shows, our custom device definition appears and we can select it to preview the
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The AVD Manager](img/B05459_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Android emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have one AVD created in the AVD Manager, we can run it on the Android
    emulator. Open the AVD Manager and click on the **Start** button of the AVD. The
    emulator will be opened, as shown in the next screenshot. Wait until it is completely
    loaded and then you will be able to try it.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android emulator](img/B05459_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next to the emulator, to its right-hand side, there is a bar with actions:
    power button, volume up and down, rotate left and right, take screenshot, zoom,
    back button, home button, overview button, and the extended controls.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **More** option to open the next extended controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Location**: This emulates the location of the device by setting latitude,
    longitude, and altitude. You can also emulate a series of location changes. Unfortunately,
    no map is provided to easily select a location, but you can use Google Maps to
    get the latitude and longitude of the locations you want to emulate. This mechanism
    is useful if your app displays a map or depends on the user''s location to trigger
    a specific action. To try this feature, open the Google Maps app on the virtual
    device. Enter some coordinates in the **Extended controls** and click on **SEND**.
    Observe how Google Maps draws your location in the one you entered as the following
    screenshot shows:![The Android emulator](img/B05459_06_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cellular**: This emulates the speed of the network (**Full**, **HSDAP**,
    **UMTS**, and so on). This also emulates **Data status** and **Voice status**.
    This mechanism is useful, if your app depends on external data, to examine how
    it works with slow network connections. Try this feature by changing the **Network
    type** to **EDGE** and note how it changes in the emulator:![The Android emulator](img/B05459_06_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Battery**: This emulates the battery charge level, if the device is connected
    to a charger, the battery health, or the battery status. This mechanism is useful
    if your app changes its behavior depending on the battery status. For example,
    if the battery level is low, you can avoid unnecessary network requests to reduce
    battery consumption. If you change the **Charge level** to **10%** and the **Charger
    connection** to **None**, the emulator displays a low battery notification:![The
    Android emulator](img/B05459_06_13.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Phone**: This emulates a phone call or a SMS message. This mechanism is useful,
    for example, to examine how your app recovers from interruptions. To try this
    feature, click on the **CALL DEVICE** button and see how the device receives the
    call, as the next screenshot shows:![The Android emulator](img/B05459_06_14.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directional pad**: This emulates a directional pad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fingerprint**: This emulates a finger touching the fingerprint sensor. This
    mechanism is useful if your app has a fingerprint security step, for example,
    to make a payment. To try this feature, open the Android **Settings** in the virtual
    device, go to **Security**, and click on **Fingerprint**. Follow the steps to
    add a fingerprint. You will get to the step, shown in the next screenshot, in
    which you need put your finger on the sensor:![The Android emulator](img/B05459_06_15.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the **TOUCH SENSOR** button from the **Extended controls**. The fingerprint
    will be added as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Android emulator](img/B05459_06_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the power button to lock the device and click it again to unlock it.
    The fingerprint is then required. Click on the **TOUCH SENSOR** button using the
    same fingerprint and the device will be unlocked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Settings**: These are the settings of the emulator. For example, you can
    change the folder to save the screenshots or if you want to send crash reports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Help**: This contains **Keyboard shortcuts**, **Emulator help**, and **About**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, if you selected an emulated camera when you created the device definition,
    you can test it by opening the camera app in the emulator. Open it and note how
    a random video appears as if the camera was capturing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android emulator](img/B05459_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating Javadoc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Javadoc is a utility to document Java code in HTML format. The Javadoc documentation
    is generated from comments and tags added to Java classes or methods. The comments
    start with the `/**` string and end with `*/`. Inside these comments, tags can
    be added. The following tags, in the same order as they should be added, are available
    in Javadoc:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@author`: This indicates the author or authors of the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@version`: This indicates the version of the class or method. Used for classes
    and interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@param`: This describes a method parameter. Only used in methods and constructors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@return`: This describes the return object of a method. Only used in methods
    that do not return `void`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@throws`: This describes an exception that can be thrown by the method. Equivalent
    to `@exception`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@see`: This indicates a reference, which can be an URL, another element in
    the documentation, or just some text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@serial`: This indicates if a field is serializable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@deprecated`: This indicates that a method is deprecated and there is a replacement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of Javadoc is integrated in Android Studio. We can use code completion
    when typing Javadoc comments. Javadoc documentation will appear in the pop-up
    tool tips of the code elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a complete Javadoc, we have to write the Javadoc comments about
    our classes and methods. Open the main activity of our project to add the Javadoc
    comments to the `onAcceptClick` method we created in [Chapter 5](ch05.html "Chapter 5. Creating
    User Interfaces"), *Creating User Interfaces*. Place the caret on the line before
    the method declaration, type `/**`, and press *Enter*. The Javadoc comments are
    automatically inserted containing the available information from the method declaration:
    parameters and return type. In this case, there is no return type, so the automatically
    generated Javadoc is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line of the documentation comments is the method description. Then,
    it explains each parameter and the return type. The method should now look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This information about the method will now be displayed as its documentation
    in the emerging dialogs. The following screenshot shows the dialog that should
    appear over the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating Javadoc](img/B05459_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To generate the Javadoc documentation, navigate to **Tools** | **Generate Javadoc...**.
    A dialog showing the Javadoc options will be opened. We can select the scope,
    if we want to include test or library sources, the output directory, and the visibility
    of the included elements. Related to the format of documentation, we can create
    a hierarchy tree, a navigation bar, and an index if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Check **Current File** as scope to generate just the documentation of our main
    activity. Select an output directory from your system. Reduce the visibility to
    **public** and click on the **OK** button. The Javadoc documentation in HTML format
    has been created in the output directory. The `index.html` file is the start point.
    Open the `index.html` file and navigate through the documentation to open the
    `MyActivity` class, like in the following screenshot. Note that the `onCreate`
    method, whose visibility is protected, does not appear, as we reduced the visibility
    of the generated Javadoc to **public** elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating Javadoc](img/B05459_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tasks and contexts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Studio integrates several issue tracking systems. An issue tracking
    system is a software tool that manages lists of issues. Some issue tracking systems
    supported by Android Studio are the following: Jira, YouTrack, Lighthouse, Mantis,
    Trello, or Bugzilla.'
  prefs: []
  type: TYPE_NORMAL
- en: To integrate one of these tracking systems into your project using Android Studio,
    navigate to **Tools** | **Tasks & Contexts** | **Configure Servers...**. Click
    on the **Add** button and select one of the available systems. You need to enter
    the server URL, the authentication values, and some additional parameters depending
    on the system type.
  prefs: []
  type: TYPE_NORMAL
- en: From the **Tasks & Contexts** menu you will find the actions to manage the tasks,
    such as switching among tasks, creating a new task, closing the current task,
    or editing the current task.
  prefs: []
  type: TYPE_NORMAL
- en: A task is identified by its name and is usually attached to an issue in your
    issue tracking system. A task can also be associated with a context, which defines
    a set of files that will be opened in the editor when you work on it. You can
    create, load, or clear a context from the **Tasks & Contexts** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a task. Navigate to **Tools** | **Tasks & Contexts** | **+ Open
    Task...**. Type the name, for example, `My first task`, and click on **Create
    New Task ''My first task''**. The creation dialog will be displayed as in the
    next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tasks and contexts](img/B05459_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you create a new task, you can clear the context and create a new branch
    in your VCS. Click **OK** to finish the creation. If you check the **Clear current
    context** option, all the files that were open in the editor are now closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the toolbar of Android Studio there is a new item, a drop-down list with
    your tasks. As shown in the next screenshot, our current task is the recently
    created **My first task**. Note the existence of a previous task, the **Default
    task**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tasks and contexts](img/B05459_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you are ready to close a task, navigate to **Tools** | **Tasks & Contexts**
    | **Close Active Task...**. In the close task dialog, you can commit the changes
    and merge the current branch.
  prefs: []
  type: TYPE_NORMAL
- en: Version control systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Studio integrates some **version control systems** (**VCS**): GitHub,
    CVS, Git, Google Cloud, Mercurial, and Subversion. To enable version control integration,
    navigate to **VCS** | **Enable Version Control Integration...** and select the
    type of system. Now, some more options will be added to the **VCS** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: To update the entire project, navigate to **VCS** | **Update Project...**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To commit all the changes to the project, navigate to **VCS** | **Commit Changes...**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first step is to do the checkout from the version control system. Navigate
    to **VCS** | **Checkout from Version Control**, click on the add icon, and type
    the repository URL or the repository configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The version control actions can also be applied to individual files. Right-click
    on any file of the project and select the **Subversion** section. From the emerging
    menu, we can add the file to the repository, add it to the ignore list, browse
    the changes, revert the changes, or lock it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simpler way to control the file versions is using the **Local History** option.
    Open the main activity file in the editor and navigate to **VCS** | **Local History**
    | **Show History**. The file history dialog will be opened. On the left-hand side
    of the dialog, the available versions of the file are listed. Select an older
    version to compare it to the current version of the file. The differences between
    the older version and the current version are highlighted. Gray color is used
    to indicate a block of deleted code, blue color to highlight the text that has
    changed, and green color to indicate the newly inserted text. From the top icons,
    we can revert the changes and configure the whitespaces visualization. The following
    screenshot shows the comparison between two versions of our main activity. We
    can observe how the method we recently added—the `onAcceptClick` method—is highlighted
    in green:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Version control systems](img/B05459_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also examine the local history of a specific block of code. Close the
    dialog, select some lines of code from the editor, and navigate to **VCS** | **Local
    History** | **Show History for Selection**. The same history dialog will be opened,
    but, this time, it displays the versions of the selected code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you have the knowledge required to use the Android
    SDK Manager tool to install, update, or examine available platforms for your project.
    You can create a new AVD and edit it whenever necessary. Creating complete documentation
    for our project should no longer be a problem using Javadoc and we should also
    be able to work with a VCS integrated in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the available Google Play services
    and how to integrate them with your project using Android Studio. We will also
    see how to install and integrate different libraries available with Google technology,
    such as Google Maps, Google Cloud Messaging, and more.
  prefs: []
  type: TYPE_NORMAL
