["```kt\n    \"com.unity.purchasing\": \"4.1.5\",\n    ```", "```kt\n     public bool rewardCalled = false;\n    // To account for a bug in Unity Advertisements 4.0.1\n    // with Google\n    // Play we have to add a way for UnityAdsShowComplete\n    // to be\n    // called by ourselves as well if it isn't called by\n    // Unity\n    IEnumerator RewardRoutine(string placementId)\n    {\n        rewardCalled = false;\n        yield return new WaitForSecondsRealtime(0.25f);\n        while (Advertisement.isShowing)\n        {\n            yield return null;\n        }\n        Debug.Log(\"Done\");\n        // If reward wasn't called yet, call it\n        if(!rewardCalled)\n        {\n            OnUnityAdsShowComplete(placementId,\n                UnityAdsShowCompletionState.COMPLETED);\n        }\n    }\n    ```", "```kt\n    /// <summary>\n    /// Will load and display an ad on the screen\n    /// </summary>\n    public void ShowAd()\n    {\n        // Add fix for Unity Ads bug\n        StartCoroutine(RewardRoutine(GetAdID()));\n        // Display it after it is loaded\n        Advertisement.Show(GetAdID(), instance);\n    }\n    ```", "```kt\n    /// <summary>\n    /// Unity Ads must be initialized, or else ads will\n    /// not work properly\n    /// </summary>\n    private void Start()\n    {\n        /* No need to initialize if it already is done */\n        if (!Advertisement.isInitialized || instance ==\n            null)\n        {\n            instance = this;\n            // Use the functions provided by this to allow\n            // custom\n            Advertisement.Initialize(gameId, testMode);\n            // Load an Ad to play\n            Advertisement.Load(GetAdID());\n        }\n    }\n    ```", "```kt\n    /// <summary>\n    /// This callback method handles logic for the ad\n    /// finishing.\n    /// </summary>\n    /// <param name=\"placementId\">The identifier for\n    /// the Ad Unit showing the content</param>\n    /// <param name=\"showCompletionState\">Indicates\n    /// the final state of the ad (whether the ad was\n        /// skipped or completed).</param>\n        public void OnUnityAdsShowComplete(string\n            placementId, UnityAdsShowCompletionState\n                showCompletionState)\n        {\n            if(!rewardCalled)\n            {\n                if (obstacle != null &&\n                    showCompletionState ==\n                    UnityAdsShowCompletionState.COMPLETED)\n                {\n                    obstacle.Continue();\n                }\n                /* Unpause game when ad is over */\n                PauseScreenBehaviour.paused = false;\n                Time.timeScale = 1f;\n                rewardCalled = true;\n                // Load an Ad to play\n    Advertisement.Load(GetAdID());\n            }\n        }\n    ```", "```kt\nprotected override void Start()\n{\n    /* Initialize Ads if needed */\n    base.Start();\n    //if (!UnityAdController.showAds)\n    //{\n    //    /* If not showing ads, just start the game\n    //    */\n    //    SetPauseMenu(false);\n    //}\n    // Can no longer show ads at the Start of the game\n    SetPauseMenu(false);\n}\n```", "```kt\n    /// <summary>\n    /// Will load a new scene upon being called\n    /// </summary>\n    /// <param name=\"levelName\">The name of the level we\n    /// want to go to</param>\n    public void LoadLevel(string levelName)\n    {\n        /* Can no longer show an ad upon starting gameplay\n        */\n        try\n        {\n            if (UnityAdController.showAds && levelName !=\n                \"Gameplay\")\n            {\n                /* Show an ad */\n                UnityAdController.instance.ShowAd();\n            }\n            else\n            {\n                Time.timeScale = 1f;\n            }\n        }\n        catch { }\n        SceneManager.LoadScene(levelName);\n    }\n    ```"]