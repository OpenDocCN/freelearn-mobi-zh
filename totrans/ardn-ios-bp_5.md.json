["```swift\nFor IR Scope: \n+4500 -4350 … \n\nFor Arduino sketch: \nunsigned int raw[68] = {4500,4350,600,1650,600,1600,600,1600,…};\n```", "```swift\nvoid volumeUp() {\n  irsend.sendRaw(up, VOLUME_UP_BUFFER_LEN, 38);\n  delay(20);\n}\n\nvoid volumeDown() {\n  irsend.sendRaw(down, VOLUME_DOWN_BUFFER_LEN, 38);\n  delay(20);\n  irsend.sendRaw(down, VOLUME_DOWN_BUFFER_LEN, 38);\n  delay(20);\n}\n```", "```swift\n@interface VolumeControllerViewController ()\n\n@property (strong, nonatomic) IBOutlet UISlider     *volumeSlider;\n\n@end\n\nand with:\n- (IBAction)switchChanged:(UISwitch *)sender {\n…\n}\n- (IBAction)volumeChanged:(UISlider *)sender {\n…\n}\n```", "```swift\n@interface VolumeControllerViewController ()\n\n@property (strong, nonatomic) IBOutlet UISlider  *volumeSlider;\n\n@property (strong, nonatomic) CBCentralManager   *centralManager;\n@property (strong, nonatomic) CBPeripheral       *arduinoDevice;\n@property (strong, nonatomic) CBCharacteristic   *sendCharacteristic;\n\n@property (nonatomic,strong) AVAudioEngine       *audioEngine;\n\n@property float                                  actualVolumeDb;\n@property float                                  desiredVolumeDb;\n@property float                                  desiredVolumeMinDb;\n@property float                                  desiredVolumeMaxDb;\n\n@property NSUInteger                             increaseVolumeDelay;\n\n@end\n```", "```swift\n    _audioEngine = [[AVAudioEngine alloc] init];\n    AVAudioInputNode *input = [_audioEngine inputNode];\n```", "```swift\n#import <AVFoundation/AVFoundation.h>\n#import <Accelerate/Accelerate.h>\n```", "```swift\n[input installTapOnBus:0 bufferSize:8192 format:[input inputFormatForBus:0] block:^(AVAudioPCMBuffer* buffer, AVAudioTime* when) {\n…\n…\n}];\n```", "```swift\nfor (UInt32 i = 0; i < buffer.audioBufferList->mNumberBuffers; i++) {\n\n    Float32 *data = buffer.audioBufferList->mBuffers[i].mData;\n    UInt32 numFrames = buffer.audioBufferList->mBuffers[i].mDataByteSize / sizeof(Float32);\n\n  // Squares all the data values\n    vDSP_vsq(data, 1, data, 1, numFrames*buffer.audioBufferList->mNumberBuffers);\n\n            // Mean value of the squared data values: power of the signal\n    float meanVal = 0.0;\n    vDSP_meanv(data, 1, &meanVal, numFrames*buffer.audioBufferList->mNumberBuffers);\n\n    // Signal power in Decibel\n    float meanValDb = 10 * log10(meanVal);\n\n    _actualVolumeDb = _actualVolumeDb + 0.2*(meanValDb - _actualVolumeDb);\n\n    if (fabsf(_actualVolumeDb) < _desiredVolumeMinDb && _centralManager.state == CBCentralManagerStatePoweredOn && _sendCharacteristic != nil) {\n\n        //printf(\"Decrease volume\\n\");\n\n        NSData* data=[@\"D\" dataUsingEncoding:NSUTF8StringEncoding];\n        [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n\n        _increaseVolumeDelay = 0;\n    }\n\n    if (fabsf(_actualVolumeDb) > _desiredVolumeMaxDb && _centralManager.state == CBCentralManagerStatePoweredOn && _sendCharacteristic != nil) {\n\n        _increaseVolumeDelay++;\n    }\n\n    if (_increaseVolumeDelay > 10) {\n\n        //printf(\"Increase volume\\n\");\n\n        _increaseVolumeDelay = 0;\n\n        NSData* data=[@\"I\" dataUsingEncoding:NSUTF8StringEncoding];\n                [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n            }\n        }\n```", "```swift\n-(void)viewDidAppear:(BOOL)animated {\n\n     [super viewDidAppear:animated];\n\n    NSError* error = nil;\n\n    [self connect];\n\n    _actualVolumeDb = 0;\n    [_audioEngine startAndReturnError:&error];\n\n    if (error) {\n        NSLog(@\"Error %@\",[error description]);\n    }\n\n}\n```", "```swift\n-(void)viewDidDisappear:(BOOL)animated {\n\n     [self viewDidDisappear:animated];\n\n    [self disconnect];\n\n    [_audioEngine pause];\n}\n```", "```swift\n- (IBAction)switchChanged:(UISwitch *)sender {\n\n    NSError* error = nil;\n\n    if (sender.on) {\n        [_audioEngine startAndReturnError:&error];\n\n        if (error) {\n            NSLog(@\"Error %@\",[error description]);\n        }\n        _volumeSlider.enabled = YES;\n    }\n    else {\n        [_audioEngine stop];\n        _volumeSlider.enabled = NO;\n    }\n}\n```", "```swift\n- (IBAction)volumeChanged:(UISlider *)sender {\n\n    _desiredVolumeDb = 50.*(1-sender.value);\n    _desiredVolumeMaxDb = _desiredVolumeDb + 2;\n    _desiredVolumeMinDb = _desiredVolumeDb - 3;\n}\n```", "```swift\n    For IR Scope: \n    +4500 -4350 … \n\n    For Arduino sketch: \n    unsigned int raw[68] = {4500,4350,600,1650,600,1600,600,1600,…};\n    ```", "```swift\n    unsigned int up[68] = {9000, 4450, …..,};\n    ```", "```swift\n    unsigned int down[68] = {9000, 4400, ….,};\n    ```"]