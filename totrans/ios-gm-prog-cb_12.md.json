["```swift\n        #import <GameKit/GameKit.h>\n        ```", "```swift\n        typedef enum {\n            KNetworkPacketCodePlayerAllotment,\n            KNetworkPacketCodePlayerMove,\n            KNetworkPacketCodePlayerLost,\n        } NetworkPacketCode;\n        ```", "```swift\n        typedef struct {\n            CGPoint\t\ttankPreviousPosition;\n            CGPoint\t\ttankPosition;\n            CGPoint\t\ttankDestination;\n            CGFloat\t\ttankRotation;\n            CGFloat\t\ttankDirection;\n        } TankInfo;\n        ```", "```swift\n        const float kTankSpeed = 1.0f;\n        const float kTankTurnSpeed = 0.1f;\n        ```", "```swift\n        // Blue is the First and Red is the Second Player\n        #define kFirstPlayerLabelText  @\"You're Blue\"\n        #define kSecondPlayerLabelText @\"You're Red\"\n        ```", "```swift\n        #define kGameWonText           @\"You Won\"\n        #define kGameLostText          @\"You Lost\"\n        ```", "```swift\n    TankInfo tankStatsForLocal;\n\n    @property (nonatomic, strong) SKSpriteNode* redTankSprite;\n    @property (nonatomic, strong) SKSpriteNode* blueTankSprite;\n    @property (nonatomic, strong) SKShapeNode* blueFinishLine;\n    @property (nonatomic, strong) SKShapeNode* redFinishLine;\n    @property (nonatomic, strong) SKSpriteNode* localTankSprite;\n    @property (nonatomic, strong) SKSpriteNode* remoteTankSprite;\n    ```", "```swift\n    - (void)addGameBackground\n    {\n        SKSpriteNode *gameBGNode =\n        [SKSpriteNode spriteNodeWithImageNamed:@\"Background.png\"];\n        {\n            gameBGNode.position =\n            CGPointMake(self.frame.size.width/2,self.frame.size.height/2);\n            gameBGNode.zPosition = 0;\n            [self addChild:gameBGNode];\n        }\n    }\n    ```", "```swift\n    - (void)addBlueTank\n    {\n        self.blueTankSprite = [SKSpriteNode spriteNodeWithImageNamed:@\"BlueTank.png\"];\n        self.blueTankSprite.position = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.95);\n        self.blueTankSprite.zRotation = M_PI;\n        self.blueTankSprite.zPosition = 2;\n\n        [self addChild:self.blueTankSprite];\n    }\n\n    - (void)addRedTank\n    {\n        self.redTankSprite = [SKSpriteNode spriteNodeWithImageNamed:@\"RedTank.png\"];\n        self.redTankSprite.position = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.05);\n        self.redTankSprite.zRotation = 0.0;\n        self.redTankSprite.zPosition = 2;\n\n        [self addChild:self.redTankSprite];\n    }\n    ```", "```swift\n    - (void)addBLueFinishLine\n    {\n        CGRect frame = CGRectMake(0, self.frame.size.height * 0.15, self.frame.size.width, 1);\n\n        self.blueFinishLine = [SKShapeNode shapeNodeWithRect:frame];\n        {\n            self.blueFinishLine.strokeColor = [UIColor blueColor];\n            self.blueFinishLine.zPosition = 2;\n            [self addChild:self.blueFinishLine];\n        }\n    }\n\n    - (void)addRedFinishLine\n    {\n        CGRect frame = CGRectMake(0, self.frame.size.height * 0.85, self.frame.size.width, 1);\n\n        self.redFinishLine = [SKShapeNode shapeNodeWithRect:frame];\n        {\n            self.redFinishLine.strokeColor = [UIColor redColor];\n            self.redFinishLine.zPosition = 1;\n            [self addChild:self.redFinishLine];\n        }\n    }\n    ```", "```swift\n    #pragma mark - Game Updation Methods\n\n    - (void)resetLocalTanksAndInfoToInitialState\n    {\n        if (self.localTankSprite == self.blueTankSprite && self.remoteTankSprite == self.redTankSprite)\n        {\n            tankStatsForLocal.tankPosition = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.95);\n            tankStatsForLocal.tankRotation = M_PI;\n            self.localTankSprite.position = tankStatsForLocal.tankPosition;\n            self.localTankSprite.zRotation = tankStatsForLocal.tankRotation;\n\n            self.remoteTankSprite.position = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.05);\n            self.remoteTankSprite.zRotation = 0.0;\n        }\n        else if (self.localTankSprite == self.redTankSprite && self.remoteTankSprite == self.blueTankSprite)\n        {\n            tankStatsForLocal.tankPosition = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.05);\n            tankStatsForLocal.tankRotation = 0.0;\n            self.localTankSprite.position = tankStatsForLocal.tankPosition;\n            self.localTankSprite.zRotation = tankStatsForLocal.tankRotation;\n\n            self.remoteTankSprite.position = CGPointMake(self.frame.size.width/2,self.frame.size.height * 0.95);\n            self.remoteTankSprite.zRotation = M_PI;\n        }\n    }\n    ```", "```swift\n    - (void)hideGameInfoLabelWithAnimation\n    {\n        SKAction* gameInfoLabelHoldAnimationCallBack = [SKAction customActionWithDuration:2.0\n             actionBlock:^(SKNode *node,CGFloat elapsedTime)\n         {\n         }];\n\n        SKAction* gameInfoLabelFadeOutAnimation = [SKAction fadeOutWithDuration:1.0];\n\n        SKAction* gameInfoLabelRemoveAnimationCallBack = [SKAction customActionWithDuration:0.0actionBlock:^(SKNode *node,CGFloat elapsedTime)\n         {\n             [node removeFromParent];\n             self.gameInfoLabel = nil;\n         }];\n\n        NSArray* gameLabelAnimationsSequence = [NSArray arrayWithObjects:gameInfoLabelHoldAnimationCallBack,gameInfoLabelFadeOutAnimation,gameInfoLabelRemoveAnimationCallBack, nil];\n        SKAction* gameInfoSequenceAnimation = [SKAction sequence:gameLabelAnimationsSequence];\n        [self.gameInfoLabel runAction:gameInfoSequenceAnimation];\n    }\n    ```", "```swift\n    - (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID {\n        // Data has been received from a peer.\n\n       // Do something with the received data, on the main thread\n        [[NSOperationQueue mainQueue]  addOperationWithBlock:^{\n\n            // Process the data       \n          unsigned char *incomingPacket = (unsigned char *)[data bytes];\n          int *pIntData = (int *)&incomingPacket[0];\n          NetworkPacketCode packetCode = (NetworkPacketCode)pIntData[1];\n\n          switch( packetCode ) {\n            case KNetworkPacketCodePlayerAllotment:\n              {\n                    NSInteger gameUniqueId = pIntData[2];\n                   if (gameUniqueIdForPlayerAllocation > gameUniqueId)\n                    {\n                       self.gameInfoLabel.text = kFirstPlayerLabelText;\n                        self.localTankSprite = self.blueTankSprite;\n                        self.remoteTankSprite = self.redTankSprite;\n                    }\n                    else\n                    {\n                        self.gameInfoLabel.text = kSecondPlayerLabelText;\n                        self.localTankSprite = self.redTankSprite;\n                        self.remoteTankSprite = self.blueTankSprite;\n                    }\n                    [self resetLocalTanksAndInfoToInitialState];\n                    break;\n                }\n                case KNetworkPacketCodePlayerMove:\n                {\n                    break;\n                }\n                case KNetworkPacketCodePlayerLost:\n                {\n                    break;\n                }\n                default:\n                break;\n            }\n        }];\n    }\n    ```", "```swift\n    - (void)startGame\n    {\n        if (self.gameState == kGameStatePlayerAllotment)\n        {\n            self.gameState = kGameStatePlaying;\n            [self hideGameInfoLabelWithAnimation];\n        }\n    }\n    ```", "```swift\n    -(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event\n    - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event\n    -(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event\n    ```", "```swift\n    UITouch *thumb = [[event allTouches] anyObject];\n    CGPoint thumbPoint = [thumb locationInNode:self];\n    // hold to move, second finger to fire\n    if(thumb.tapCount==0) {\n       tankStatsForLocal.tankDestination = thumbPoint;\n       tankStatsForLocal.tankDirection = atan2( thumbPoint.y - tankStatsForLocal.tankPosition.y, thumbPoint.x - tankStatsForLocal.tankPosition.x ) - (M_PI/2.0);\n       // keep us 0-359\n       if(tankStatsForLocal.tankDirection < 0)\n         tankStatsForLocal.tankDirection += (2.0*M_PI);\n       else if(tankStatsForLocal.tankDirection > (2.0*M_PI))\n         tankStatsForLocal.tankDirection -= (2.0*M_PI)\n\n        [self updateLocalTank];\n    }\n    ```", "```swift\n    - (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event\n    {\n        if (self.gameState == kGameStatePlaying)\n        {\n            if([touches count] == 1)\n            {\n                UITouch *thumb = [[event allTouches] anyObject];\n                CGPoint thumbPoint = [thumb locationInNode:self];\n\n                tankStatsForLocal.tankDestination = thumbPoint;\n                tankStatsForLocal.tankDirection = atan2( thumbPoint.y - tankStatsForLocal.tankPosition.y,\n                      thumbPoint.x - tankStatsForLocal.tankPosition.x ) - (M_PI/2.0);\n\n                // keep us 0-359\n                if(tankStatsForLocal.tankDirection < 0)\n                    tankStatsForLocal.tankDirection += (2.0*M_PI);\n                else if(tankStatsForLocal.tankDirection > (2.0*M_PI))\n                    tankStatsForLocal.tankDirection -= (2.0*M_PI);\n\n                [self updateLocalTank];\n            }\n        }\n    }\n    ```", "```swift\n    -(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event\n    {\n        if (self.gameState == kGameStatePlaying)\n        {\n            if([touches count] == [[event touchesForView:self.view] count])\n            {\n                tankStatsForLocal.tankDestination = tankStatsForLocal.tankPosition;\n                tankStatsForLocal.tankDirection = tankStatsForLocal.tankRotation;\n\n                [self updateLocalTank];\n            }\n        }\n    }\n    ```", "```swift\n    - (void)updateLocalTank\n    {    \n\n        if( (fabs(tankStatsForLocal.tankPosition.x - tankStatsForLocal.tankDestination.x)>kTankSpeed) ||\n           (fabs(tankStatsForLocal.tankPosition.y - tankStatsForLocal.tankDestination.y)>kTankSpeed) ) {\n\n            // check facing\n            float ad = tankStatsForLocal.tankDirection - tankStatsForLocal.tankRotation;\n\n            if(fabs(ad) > kTankTurnSpeed) {\n\n                // we need to turn, work out which way (find the closest 180)\n                while(ad > M_PI) {\n                    ad -= (2.0 * M_PI);\n                }\n                while(ad < -M_PI) {\n                    ad += (2.0 * M_PI);\n                }\n\n                if(ad < 0) {\n                    tankStatsForLocal.tankRotation -= kTankTurnSpeed;\n                    if(tankStatsForLocal.tankRotation < 0)\n                        tankStatsForLocal.tankRotation += (2.0*M_PI);\n                } else if(ad > 0) {\n                    tankStatsForLocal.tankRotation += kTankTurnSpeed;\n                    if(tankStatsForLocal.tankRotation > (2.0*M_PI))\n                 \t       tankStatsForLocal.tankRotation -= (2.0*M_PI);\n                }\n            } else {\n\n                tankStatsForLocal.tankRotation = tankStatsForLocal.tankDirection;\n                // if facing move along line towards destination\n                float dx = tankStatsForLocal.tankPosition.x - tankStatsForLocal.tankDestination.x;\n                float dy = tankStatsForLocal.tankPosition.y - tankStatsForLocal.tankDestination.y;\n                float at = atan2( dy, dx );\n                // 1.0 is the \"speed\"\n                tankStatsForLocal.tankPosition.x -= kTankSpeed * cos(at);\n                tankStatsForLocal.tankPosition.y -= kTankSpeed * sin(at);\n            }\n        } else {\n\n            tankStatsForLocal.tankPosition.x = tankStatsForLocal.tankDestination.x;\n            tankStatsForLocal.tankPosition.y = tankStatsForLocal.tankDestination.y;\n        }\n\n        tankStatsForLocal.tankPreviousPosition = self.localTankSprite.position;\n\n        self.localTankSprite.position = tankStatsForLocal.tankPosition;\n        self.localTankSprite.zRotation = tankStatsForLocal.tankRotation;\n\n        // Send NetworkPacket for syncing the data at both the players\n\n        [self sendNetworkPacketToPeerId:self.gamePeerID\n        forPacketCode:KNetworkPacketCodePlayerMove\n                               withData:&tankStatsForLocal\n                               ofLength:sizeof(TankInfo)\n                               reliable:YES];\n    }\n    ```", "```swift\n    case KNetworkPacketCodePlayerMove:\n    {\n       // received move event from other player, update other player's position/destination info\n       TankInfo *ts = (TankInfo *)&incomingPacket[8];\n       self.remoteTankSprite.position = ts->tankPosition;\n       self.remoteTankSprite.zRotation = ts->tankRotation;\n       break;\n    }\n    ```", "```swift\n    #pragma mark - Update Loop Method\n\n    -(void)update:(CFTimeInterval)currentTime {\n        /* Called before each frame is rendered */\n\n        CGRect blueFinishLineFrame =\n        CGRectMake(0, self.frame.size.height * 0.15, self.frame.size.width, 1);\n\n        CGRect redFinishLineFrame = CGRectMake(0, self.frame.size.height * 0.85, self.frame.size.width, 1);\n\n        if (self.localTankSprite == self.blueTankSprite && CGRectIntersectsRect(self.localTankSprite.frame, blueFinishLineFrame))\n        {\n            self.gameState = kGameStateComplete;\n\n            [self addGameInfoLabelWithText:kGameWonText];\n\n            [self restartGameAfterSomeTime];\n\n            [self sendNetworkPacketToPeerId:self.gamePeerID\n                            forPacketCode:KNetworkPacketCodePlayerLost\n                                   withData:nil\n                                   ofLength:0\n                                   reliable:YES];\n        }\n        else if(self.localTankSprite == self.redTankSprite && CGRectIntersectsRect(self.localTankSprite.frame, redFinishLineFrame))\n        {\n            self.gameState = kGameStateComplete;\n\n            [self addGameInfoLabelWithText:kGameWonText];\n\n            [self restartGameAfterSomeTime];\n\n            [self sendNetworkPacketToPeerId:self.gamePeerID\n                              forPacketCode:KNetworkPacketCodePlayerLost\n                                   withData:nil\n                                   ofLength:0\n                                   reliable:YES];\n        }\n    }\n    ```", "```swift\n    case KNetworkPacketCodePlayerLost:\n    {\n       self.gameState = kGameStateComplete;\n       [self addGameInfoLabelWithText:kGameLostText];\n       [self restartGameAfterSomeTime];\n       break;\n    }\n    ```", "```swift\n    - (void)restartGameAfterSomeTime\n    {\n        [NSTimer scheduledTimerWithTimeInterval:2.0\n                              target:self\n                              selector:@selector(restartGame)\n                              userInfo:nil\n                              repeats:NO];\n    }\n\n    - (void)restartGame\n    {\n        gameUniqueIdForPlayerAllocation = arc4random();\n\n        self.gameState = kGameStatePlayerToConnect;\n        self.gameInfoLabel.text = kConnectingDevicesText;\n        [self resetLocalTanksAndInfoToInitialState];\n    }\n    ```", "```swift\n    - (void)showNetworkDisconnectAlertView\n    {\n        UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@\"Network Disconnected\"\n                 message:@\"Sorry due some network problem devices are disconnected. To start game again kill apps in both devices and restart the app!!\"\n                    delegate:self\n                    cancelButtonTitle:@\"OK\"\n                    otherButtonTitles:nil, nil];\n\n        [alertView show];\n    }\n\n    - (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n    {\n        // do nothing\n    }\n    ```", "```swift\n    else if (state == MCSessionStateNotConnected)\n        {\n            NSLog(@\"state == MCSessionStateNotConnected\");\n\n            if (self.gameState == kGameStatePlaying)\n            {\n                [self showNetworkDisconnectAlertView];\n            }\n        }\n    ```"]