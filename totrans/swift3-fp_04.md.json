["```swift\nenum MLSTeam {\n    case montreal\n    case toronto\n    case newYork\n    case columbus\n    case losAngeles\n    case seattle\n}\n\nlet theTeam = MLSTeam.montreal\n\n```", "```swift\nenum MLSTeam {\n    case montreal, toronto, newYork, columbus, losAngeles, Seattle\n}\n\nvar theTeam = MLSTeam.montreal\n\n```", "```swift\ntheTeam = .newYork\n\n```", "```swift\nenum Length {\n    case us(Double)\n    case metric(Double)\n}\n\nlet lengthMetric = Length.metric(1.6)\n\n```", "```swift\nenum HttpError: Int {\n    case badRequest = 400\n    case unauthorized = 401\n    case forbidden = 403\n}\n\n```", "```swift\nlet possibleError = HttpError(rawValue: 400)\nprint(possibleError)\n\n```", "```swift\nenum Dimension {\n    case us(Double, Double)\n    case metric(Double, Double)\n}\n\n```", "```swift\nlet sizeMetric = Dimension.metric(5.0, 4.0)\n\n```", "```swift\nenum NHLTeam {\n    case canadiens\n    case senators\n    case rangers\n    case penguins\n    case blackHawks\n    case capitals\n}\n\nenum MLSTeam {\n    case montreal\n    case toronto\n    case newYork\n    case columbus\n    case losAngeles\n    case seattle\n}\n\nstruct HockeyAndSoccerTeams {\n    var hockey: NHLTeam\n    var soccer: MLSTeam\n}\n\n```", "```swift\nenum HockeyAndSoccerTeams {\n    case Value(hockey: NHLTeam, soccer: MLSTeam)\n}\n\n```", "```swift\nenum Tree {\n    case empty\n    case leaf(Int)\n    indirect case node(Tree, Tree)\n}\n\nlet ourTree = Tree.node(Tree.leaf(1), Tree.node(Tree.leaf(2),\n  Tree.leaf(3)))\nprint(ourTree)\n\n```", "```swift\nfunc searchInTree(_ search: Int, tree: Tree) -> Bool {\n    switch tree {\n    case .leaf(let x):\n        return x == search\n    case .node(let l as Tree, let r as Tree):\n        return searchInTree(search, tree:l) || searchInTree(search, tree:r)\n    default:\n        return false\n    }\n}\n\nlet isFound = searchInTree(3, tree: ourTree) // will return true\nprint(isFound)\n\n```", "```swift\nlet theTeam = MLSTeam.montreal\n\nswitch theTeam {\ncase .montreal:\n    print(\"Montreal Impact\")\ncase .toronto:\n    print(\"Toronto FC\")\ncase .newYork:\n    print(\"Newyork Redbulls\")\ncase .columbus:\n    print(\"Columbus Crew\")\ncase .losAngeles:\n    print(\"LA Galaxy\")\ncase .seattle:\n    print(\"Seattle Sounders\")\n}\n\n```", "```swift\nfunc convertDimension(dimension: Dimension) -> Dimension {\n    switch dimension {\n    case let .us(length, width):\n        return .metric(length * 0.304, width * 0.304)\n    case let .metric(length, width):\n        return .us(length * 3.280, width * 3.280)\n    }\n}\n\nlet convertedDimension = convertDimension(dimension:\n  Dimension.metric(5.0, 4.0))\n\n```", "```swift\nfunc convertDimension(dimension: Dimension) -> Dimension {\n    switch dimension {\n    case let .us(length, width):\n        return .metric(length * 0.304, width * 0.304)\n    default:\n        return .us(0.0, 0.0)\n    }\n}\n\n```", "```swift\nfor _ in 1...5 {\n    print(\"The value in range is ignored\")\n}\n\n```", "```swift\nlet anOptionalString: String? = nil\n\nswitch anOptionalString {\n    case _?: print (\"Some\")\n    case nil: print (\"None\")\n}\n\n```", "```swift\nlet twoNumbers = (3.14, 1.618)\n\nswitch twoNumbers {\n    case (_, let phi): print(\"pi: \\(phi)\")\n}\n\n```", "```swift\nlet position = (5, 7)\n\nswitch position {\n    case let (x, y):\n        print(\"x:\\(x), y:\\(y)\")\n}\n\n```", "```swift\nlet ourConstant = 7\n\nswitch ourConstant {\n    case 7: print(\"7\")\n    default: print(\"a value\")\n}\n\n```", "```swift\nlet name = \"John\"\nlet age: Int? = 27\nlet address: String? = \"New York, New York, US\"\n\nswitch (name, age, address) {\n    case (let name, _?, _ as String):\n        print(name)\n    default: ()\n}\n\n```", "```swift\nlet dimension = Dimension.metric(9.0, 6.0)\n\nfunc convertDimensions(dimension: Dimension) -> Dimension {\n    switch dimension {\n    case let .us(length, width):\n        return .metric(length * 0.304, width * 0.304)\n    case let .metric(length, width):\n        return .us(length * 3.280, width * 3.280)\n    }\n}\n\nprint(convertDimensions(dimension: dimension))\n\n```", "```swift\nlet anOptionalString: String? = nil\n\nswitch anOptionalString {\n    case let something?: print(\"\\(something)\")\n    case nil: print (\"None\")\n}\n\n```", "```swift\nlet anyValue: Any = 7\n\nswitch anyValue {\n    case is Int: print(anyValue + 3)\n    case let ourValue as Int: print(ourValue + 3)\n    default: ()\n}\n\n```", "```swift\nlet anyValue: Any = 7 \n\nswitch anyValue { \n     case is Double: print(anyValue) \n     case let ourValue as Int: print(ourValue + 3) \n     default: () \n} \n\n```", "```swift\nlet position = (3, 5)\n\nswitch position {\n    case (0, 0):\n        print(\"(0, 0) is at the origin.\")\n    case (-4...4, -6...6):\n        print(\"(\\(position.0), \\(position.1)) is near the origin.\")\n    default:\n        print(\"The position is:(\\(position.0), \\(position.1)).\")\n}\n\n```", "```swift\nfunc ~=(pattern: String, value: Int) -> Bool {\n    return pattern == \"\\(value)\"\n}\n\nswitch position {\n    case (\"0\", \"0\"):\n        print(\"(0, 0) is at the origin.\")\n    default:\n        print(\"The position is: (\\(position.0), \\(position.1)).\")\n}\n\n```"]