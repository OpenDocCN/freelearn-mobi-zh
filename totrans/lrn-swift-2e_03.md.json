["```swift\nstruct Contact {\n    var firstName: String = \"First\"\n    var lastName: String = \"Last\"\n}\n```", "```swift\nlet someone = Contact()\n```", "```swift\nstruct Contact2 {\n    var firstName: String\n    var lastName: String\n}\n\nlet someone2 = Contact2(firstName: \"Sarah\", lastName: \"Smith\")\n```", "```swift\nprint(\"\\(someone.firstName) \\(someone.lastName)\")\n```", "```swift\nstruct Contact {\n    static let UnitedStatesPhonePrefix = \"+1\" // \"First Last\"\n}\n```", "```swift\nprint(Contact.UnitedStatesPhonePrefix) // \"+1\"\n```", "```swift\nstruct Ball {\n    var radius: Double\n    var color: String\n    var elasticity: Double\n}\n```", "```swift\nBall() // Missing argument for parameter 'radius' in call\n```", "```swift\nstruct Contact {\n    var firstName: String = \"First\"\n    var lastName: String = \"Last\"\n\n    func printFullName() {\n        print(\"\\(self.firstName) \\(self.lastName)\")\n    }\n}\n```", "```swift\nsomeone.printFullName()\n```", "```swift\nstruct Ball {\n    var radius: Double\n    var color: String\n    var elasticity: Double\n\n    func growByAmount(amount: Double) {\n        // Error: Left side of mutating operator\n        // isn't mutable: 'self' is immutable\n        self.radius += amount\n    }\n}\n```", "```swift\nmutating func growByAmount(amount: Double) {\n    self.radius += amount\n}\n```", "```swift\nstruct Contact {\n    static let UnitedStatesPhonePrefix = \"+1\"\n\n    static func printAvailablePhonePrefixes() {\n        print(self.UnitedStatesPhonePrefix)\n    }\n}\n\nContact.printAvailablePhonePrefixes() // \"+1\"\n```", "```swift\nfunc printFullName() {\n    print(\"\\(firstName) \\(lastName)\")\n}\n\nstatic func printAvailablePhonePrefixes() {\n    print(UnitedStatesPhonePrefix)\n}\n```", "```swift\nfunc printFirstName() {\n    let firstName = \"Fake\"\n    print(\"\\(self.firstName) \\(firstName)\") // \"First Fake\"\n}\n```", "```swift\nstruct Ball {\n    var radius: Double\n    var diameter: Double {\n        get {\n            return self.radius * 2\n        }\n    }\n}\n\nvar ball = Ball(radius: 2)\nprint(ball.diameter) // 4.0\n```", "```swift\nvar diameter: Double {\n    get {\n        return self.radius * 2\n    }\n    set {\n        self.radius = diameter / 2\n    }\n}\n\nvar ball = Ball(radius: 2)\nball.diameter = 16\nprint(ball.radius) // 8.0\n```", "```swift\nvar volume: Double {\n    return self.radius * self.radius * self.radius * 4/3 * 4.13\n}\n```", "```swift\nvar radius: Double {\n    willSet {\n        print(\"changing from \\(self.radius) to \\(newValue)\")\n    }\n    didSet {\n        print(\"changed from \\(oldValue) to \\(self.radius)\")\n    }\n}\n```", "```swift\nstruct Ball {\n    var radius: Double {\n        didSet {\n            self.diameter = self.radius * 2\n        }\n    }\n    var diameter: Double {\n        didSet {\n            self.radius = self.diameter /  2\n        }\n    }\n}\n```", "```swift\nstruct MovieAssignment {\n    var movies: [String:String]\n\n    subscript(invitee: String) -> String? {\n        get {\n            return self.movies[invitee]\n        }\n\n        set {\n            self.movies[invitee] = newValue\n        }\n    }\n}\n```", "```swift\nvar assignment = MovieAssignment(movies: [:])\nassignment[\"Sarah\"] = \"Modern Family\"\nprint(assignment[\"Sarah\"]) // \"Modern Family\"\n```", "```swift\nstruct MovieAssignment {\n    var movies: [String:String]\n\n    subscript(invitee: String) -> String? {\n        return self.movies[invitee]\n    }\n}\n```", "```swift\nstruct MovieAssignment {\n    subscript(param1: String, param2: Int) -> Int {\n        return 0\n    }\n}\n\nprint(assignment[\"Sarah\", 2])\n```", "```swift\ninit(contact: Contact) {\n    self.firstName = contact.firstName\n    self.lastName = contact.lastName\n}\n```", "```swift\nstruct Contact4 {\n    var firstName: String\n    var lastName: String\n\n    init(contact: Contact4) {\n        self.firstName = contact.firstName\n    }// Error: Return from initializer without\n     // initializing all stored properties\n}\n```", "```swift\nstruct Contact4 {\n    var firstName: String\n    var lastName: String = \"Last\"\n\n    init(contact: Contact4) {\n        self.firstName = contact.firstName\n    }\n}\n```", "```swift\nstruct Contact3 {\n    var firstName: String\n    var lastName: String\n\n    init(contact: Contact3) {\n        self.firstName = contact.firstName\n        self.lastName = contact.lastName\n    }\n\n    init(firstName: String, lastName: String) {\n        self.firstName = firstName\n        self.lastName = lastName\n    }\n}\nvar sarah = Contact3(firstName: \"Sarah\", lastName: \"Smith\")\nvar sarahCopy = Contact3(contact: sarah)\nvar other = Contact3(firstName: \"First\", lastName: \"Last\")\n```", "```swift\ninit(contact: Contact4) {\n    self.init(\n        firstName: sarah.firstName,\n        lastName: sarah.lastName\n    )\n}\n```", "```swift\ninit(contact: Contact4) {\n    self.print()\n    // Use of 'self' in delegating initializer\n    // before self.init is called\n    self.init(\n        firstName: contact.firstName,\n        lastName: contact.lastName\n     )\n}\n```", "```swift\ninit(contact: Contact4) {\n    self.init(\n        firstName: contact.firstName,\n        lastName: contact.lastName\n    )\n    self.print()\n}\n```", "```swift\nclass Building {\n    let squareFootage: Int\n\n    init(squareFootage: Int) {\n        self.squareFootage = squareFootage\n    }\n}\nvar aBuilding = Building(squareFootage: 1000)\n```", "```swift\nclass House: Building {\n    let numberOfBedrooms: Int\n    let numberOfBathrooms: Double\n\n    init(\n        squareFootage: Int,\n        numberOfBedrooms: Int,\n        numberOfBathrooms: Double\n        )\n    {\n        self.numberOfBedrooms = numberOfBedrooms\n        self.numberOfBathrooms = numberOfBathrooms\n\n        super.init(squareFootage: squareFootage)\n    }\n}\n```", "```swift\nvar aHouse = House(\n    squareFootage: 800,\n    numberOfBedrooms: 2,\n    numberOfBathrooms: 1\n)\nprint(aHouse.squareFootage)\nprint(aHouse.numberOfBedrooms)\n```", "```swift\nclass House: Building {\n    let numberOfBedrooms: Int\n    let numberOfBathrooms: Double\n\n    override init(squareFootage: Int) {\n        self.numberOfBedrooms = 0\n        self.numberOfBathrooms = 0\n        super.init(squareFootage: squareFootage)\n    }\n}\n```", "```swift\nclass Building {\n    let squareFootage: Int\n\n    required init(squareFootage: Int) {\n        self.squareFootage = squareFootage\n    }\n}\n```", "```swift\nclass House: Building {\n    let numberOfBedrooms: Int\n    let numberOfBathrooms: Double\n\n    init(\n        squareFootage: Int,\n        numberOfBedrooms: Int,\n        numberOfBathrooms: Double\n        )\n    {\n        self.numberOfBedrooms = numberOfBedrooms\n        self.numberOfBathrooms = numberOfBathrooms\n\n        super.init(squareFootage: squareFootage)\n    }\n\n    // 'required' initializer 'init(squareFootage:)' must be\n    // provided by subclass of 'Building'\n}\n```", "```swift\nrequired init(squareFootage: Int) {\n    self.numberOfBedrooms = 0\n    self.numberOfBathrooms = 0\n    super.init(squareFootage: squareFootage)\n}\n```", "```swift\nclass Building {\n    // ...\n\n    convenience init(otherBuilding: Building) {\n        self.init(squareFootage: otherBuilding.squareFootage)\n    }\n}\nvar aBuilding = Building(squareFootage: 1000)\nvar defaultBuilding = Building(otherBuilding: aBuilding)\n```", "```swift\nclass House: Building {\n\n    // ...\n\n    init() {\n        self.numberOfBedrooms = 0\n        self.numberOfBathrooms = 0\n        super.init() // Missing argument for parameter 'squareFootage' in call\n    }\n}\n```", "```swift\nclass Building {\n    // ...\n\n    func clean() {\n        print(\n            \"Scrub \\(self.squareFootage) square feet of floors\"\n        )\n    }\n}\n\nclass House: Building {\n    // ...\n\n    override func clean() {\n        print(\"Make \\(self.numberOfBedrooms) beds\")\n        print(\"Clean \\(self.numberOfBathrooms) bathrooms\")\n    }\n}\n```", "```swift\noverride func clean() {\n    super.clean()\n\n    print(\"Make \\(self.numberOfBedrooms) beds\")\n    print(\"Clean \\(self.numberOfBathrooms) bathrooms\")\n}\n```", "```swift\nclass Building {\n    // ...\n\n    var estimatedEnergyCost: Int {\n        return squareFootage / 10\n    }\n}\n\nclass House: Building {\n    // ...\n\n    override var estimatedEnergyCost: Int {\n        return 100 + super.estimatedEnergyCost\n    }\n}\n```", "```swift\nfunc totalSquareFootageOfBuildings(buildings: [Building]) -> Int {\n    var sum = 0\n    for building in buildings {\n        sum += building.squareFootage\n    }\n    return sum\n}\n\nvar buildings = [\n    House(squareFootage: 1000),\n    Building(squareFootage: 1200),\n    House(squareFootage: 900)\n]\nprint(totalSquareFootageOfBuildings(buildings)) // 3100\n```", "```swift\nvar someBuilding: Building = House(squareFootage: 1000)\n```", "```swift\nvar someBuilding2 = House(squareFootage: 1000) as Building\n```", "```swift\nvar house = someBuilding as! House\nprint(house.numberOfBathrooms)\n```", "```swift\nvar anotherHouse = aBuilding as! House // Execution was interrupted\n```", "```swift\nif let house = someBuilding as? House {\n    // someBuilding is of type House\n    print(house.numberOfBathrooms)\n}\nelse {\n    print(\"someBuilding is not a house\")\n}\n```", "```swift\nenum PrimaryColor {\n    case Red\n    case Green\n    case Blue\n}\n```", "```swift\nvar color = PrimaryColor.Green\n```", "```swift\nvar color = PrimaryColor.Green\ncolor = .Red\n```", "```swift\nif color == PrimaryColor.Red {\n}\nelse if color == .Blue {\n}\n```", "```swift\nswitch color {\n    case .Red:\n        print(\"color is red\")\n    case .Green:\n        print(\"color is green\")\n    case .Blue:\n        print(\"color is blue\")\n}\n```", "```swift\nenum USCoins: Int {\n    case Quarter = 25\n    case Dime = 10\n    case Nickel = 5\n    case Penny = 1\n}\n```", "```swift\nprint(\"A Quarter is worth \\(USCoins.Quarter.rawValue) cents.\")\n```", "```swift\nenum Height {\n    case Imperial(feet: Int, inches: Double)\n    case Metric(meters: Double)\n    case Other(String)\n}\nvar height1 = Height.Imperial(feet: 6, inches: 2)\nvar height2 = Height.Metric(meters: 1.72)\nvar height3 = Height.Other(\"1.9 × 10-16 light years\")\n```", "```swift\nswitch height1 {\n    case .Imperial(let feet, var inches):\n        print(\"\\(feet)ft \\(inches)in\")\n    case let .Metric(meters):\n        print(\"\\(meters) meters\")\n    case var .Other(text):\n        print(text)\n}\n```", "```swift\nswitch height1 {\n    case .Imperial(let feet, var inches) where feet > 1:\n        print(\"\\(feet)ft \\(inches)in\")\n    case let .Metric(meters) where meters > 0.3:\n        print(\"\\(meters) meters\")\n    case var .Other(text):\n        print(text)\n    default:\n        print(\"Too Small\")\n}\n```", "```swift\nswitch height1 {\n    case .Imperial(_, _):\n        print(\"Imperial\")\n    case .Metric(_):\n        print(\"Metric\")\n    case .Other(_):\n        print(\"Other\")\n}\n```", "```swift\nenum Distance {\n    case Imperial(feet: Int, inches: Double)\n    case Metric(meters: Double)\n\n    func meters() -> Double {\n        switch self {\n            case let .Imperial(feet, inches):\n                return Double(feet)*0.3048+inches*0.3048/12\n            case let .Metric(meters):\n                return meters\n        }\n    }\n}\nvar distance1 = Distance.Imperial(feet: 6, inches: 2)\ndistance1.meters() // 1.8796\n```", "```swift\n// Invitee.swift\nstruct Invitee {\n    let name: String\n\n    func askToBringShowFromGenre(genre: ShowGenre) {\n        print(\"\\(self.name), bring a \\(genre.name) show\")\n        print(\"\\(genre.example) is a great \\(genre.name)\")\n    }\n\n    func askToBringThemselves() {\n        print(\"\\(self.name), just bring yourself\")\n    }\n}\n```", "```swift\n// ShowGenre.swift\nstruct ShowGenre {\n    let name: String\n    let example: String\n}\n```", "```swift\n// InviteList.swift\nstruct InviteList {\n    var invited: [Invitee] = []\n    var pendingInvitees: [Invitee]\n\n    init(invitees: [Invitee]) {\n        srand(UInt32(clock()))\n        self.pendingInvitees = invitees\n    }\n}\n```", "```swift\n// InviteList.swift\nstruct InviteList {\n\n    // ...\n\n    // Move invitee from pendingInvitees to invited\n    //\n    // Must be mutating because we are changing the contents of\n    // our array properties\n    mutating func invitedPendingInviteeAtIndex(index: Int) {\n        // Removing an item from an array returns that item\n        let invitee = self.pendingInvitees.removeAtIndex(index)\n        self.invited.append(invitee)\n    }\n}\n```", "```swift\n// InviteList.swift\nstruct InviteList {\n\n    // ...\n\n    // Must be mutating because it calls another mutating method\n    mutating func askRandomInviteeToBringGenre(genre: ShowGenre) {\n        if self.pendingInvitees.count > 0 {\n            let randomIndex = Int(rand()) % self.pendingInvitees.count\n            let invitee = self.pendingInvitees[randomIndex]\n            invitee.askToBringShowFromGenre(genre)\n            self.invitedPendingInviteeAtIndex(randomIndex)\n        }\n    }\n}\n```", "```swift\n// InviteList.swift\nstruct InviteList {\n\n    // ...\n\n    // Must be mutating because it calls another mutating method\n    mutating func inviteeRemainingInvitees() {\n        while self.pendingInvitees.count > 0 {\n            let invitee = self.pendingInvitees[0]\n            invitee.askToBringThemselves()\n            self.invitedPendingInviteeAtIndex(0)\n        }\n    }\n}\n```", "```swift\nvar inviteeList = InviteList(invitees: [\n    Invitee(name: \"Sarah\"),\n    Invitee(name: \"Jamison\"),\n    Invitee(name: \"Marcos\"),\n    Invitee(name: \"Roana\"),\n    Invitee(name: \"Neena\"),\n])\n\nlet genres = [\n    ShowGenre(name: \"Comedy\", example: \"Modern Family\"),\n    ShowGenre(name: \"Drama\", example: \"Breaking Bad\"),\n    ShowGenre(name: \"Variety\", example: \"The Colbert Report\"),\n]\n\nfor genre in genres {\n    inviteeList.askRandomInviteeToBringGenre(genre)\n}\ninviteeList.inviteeRemainingInvitees()\n```", "```swift\nextension Building {\n    var report: String {\n        return \"This building is \\(self.squareFootage) sq ft\"\n    }\n\n    func isLargerThanOtherBuilding(building: Building) -> Bool {\n        return self.squareFootage > building.squareFootage\n    }\n}\n```", "```swift\nextension String {\n    func repeatNTimes(nTimes: Int) -> String {\n        var output = \"\"\n        for _ in 0..<nTimes {\n            output += self\n        }\n        return output\n    }\n}\n\"-\".repeatNTimes(4) // ----\n```", "```swift\nvar outer = \"Hello\"\nif outer == \"Hello\" {\n    var inner = \"World\"\n    print(outer)\n    print(inner)\n}\nprint(outer)\nprint(inner) // Error: Use of unresolved identifier 'inner'\n```", "```swift\nclass OuterClass {\n    struct InnerStruct {\n    }\n}\n```", "```swift\nvar inner = OuterClass.InnerStruct()\n```", "```swift\nprivate var mySecretString = \"Hello World\"\nprivate struct MyPrivateStruct {\n    private var privateProperty: String\n    private func privateMethod() {\n    }\n}\n```"]