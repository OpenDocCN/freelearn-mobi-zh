["```kt\n    implementation 'android.navigation:navigation-compose:2.5.2'\n    ```", "```kt\n    sealed class Destination(val route: String, val icon: Int, val title: String) {...}\n    ```", "```kt\n    sealed class Destination(val route: String, val icon: Int, val title: String) {\n    ```", "```kt\n        object Transaction : Destination(\n    ```", "```kt\n            route = \"transactions\", icon =\n    ```", "```kt\n                R.drawable.ic_baseline_wallet,\n    ```", "```kt\n                title = \"Transactions\"\n    ```", "```kt\n        )\n    ```", "```kt\n        object Budgets : Destination(\n    ```", "```kt\n            route = \"budget\", icon =\n    ```", "```kt\n                R.drawable.ic_baseline_budget,\n    ```", "```kt\n                title = \"Budget\"\n    ```", "```kt\n        )\n    ```", "```kt\n        object Tasks : Destination(route = \"tasks\", icon =\n    ```", "```kt\n            R.drawable.ic_add_task, title = \"Tasks\")\n    ```", "```kt\n        object Settings : Destination(\n    ```", "```kt\n            route = \"settings\", icon =\n    ```", "```kt\n                R.drawable.ic_settings,\n    ```", "```kt\n                title = \"Settings\"\n    ```", "```kt\n        )\n    ```", "```kt\n        companion object {\n    ```", "```kt\n            val toList = listOf(Transaction, Budgets,\n    ```", "```kt\n            Tasks, Settings)\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun Transaction(){\n    ```", "```kt\n        Column(\n    ```", "```kt\n            modifier = Modifier\n    ```", "```kt\n                .fillMaxSize()\n    ```", "```kt\n                .wrapContentSize(Alignment.Center)\n    ```", "```kt\n        ) {\n    ```", "```kt\n        ...\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun BottomNavigationBar(navController: NavController, appItems: List<Destination>) {\n    ```", "```kt\n        BottomNavigation(\n    ```", "```kt\n            backgroundColor = colorResource(id =\n    ```", "```kt\n                R.color.purple_700),\n    ```", "```kt\n                contentColor = Color.White\n    ```", "```kt\n        ) {\n    ```", "```kt\n        ...\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun AppNavigation(navController: NavHostController) {\n    ```", "```kt\n        NavHost(navController, startDestination =\n    ```", "```kt\n        Destination.Transaction.route) {\n    ```", "```kt\n            composable(Destination.Transaction.route) {\n    ```", "```kt\n                Transaction()\n    ```", "```kt\n            }\n    ```", "```kt\n            composable(Destination.Budgets.route) {\n    ```", "```kt\n                Budget()\n    ```", "```kt\n            }\n    ```", "```kt\n            composable(Destination.Tasks.route) {\n    ```", "```kt\n                Tasks()\n    ```", "```kt\n            }\n    ```", "```kt\n            composable(Destination.Settings.route) {\n    ```", "```kt\n                Settings()\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun AppScreen() {\n    ```", "```kt\n        val navController = rememberNavController()\n    ```", "```kt\n        Scaffold(\n    ```", "```kt\n            bottomBar = {\n    ```", "```kt\n                BottomNavigationBar(navController =\n    ```", "```kt\n                navController, appItems =\n    ```", "```kt\n                Destination.toList) },\n    ```", "```kt\n            content = { padding ->\n    ```", "```kt\n                Box(modifier = Modifier.padding(padding))\n    ```", "```kt\n                {\n    ```", "```kt\n                    AppNavigation(navController =\n    ```", "```kt\n                        navController)\n    ```", "```kt\n                }\n    ```", "```kt\n            }\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\nval navController = rememberNavController()\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu >\n    <item\n        android:id=\"@+id/transaction_home\"\n        android:icon=\"@drawable/card\"\n        android:title=\"@string/transactions\"/>\n    <item\n         android:id=\"@+id/budget_home\"\n         android:icon=\"@drawable/ic_shopping_basket_black_\n             24dp\"\n         android:title=\"@string/budgets\"\n    />\n...\n</menu>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<navigation \n    app:startDestination=\"@+id/transaction_home\">\n    <fragment\n        android:id=\"@+id/transaction_home\"\n        android:name=\"com.fragments.TransactionsFragment\"\n        android:label=\"@string/title_transcation\"\n        tools:layout=\"@layout/fragment_transactions\" >\n        <action\n            android:id=\"@+id/action_transaction_home_to_\n                budget_home\"\n            app:destination=\"@id/budget_home\" />\n    </fragment>\n    <fragment\n        android:id=\"@+id/budget_home\"\n        android:name=\"com.fragments.BudgetsFragment\"\n        android:label=\"@string/title_budget\"\n        tools:layout=\"@layout/fragment_budget\" >\n        <action\n            android:id=\"@+id/action_budget_home_to_tasks_\n                home\"\n            app:destination=\"@id/tasks_home\" />\n    </fragment>\n</navigation>\n```", "```kt\n    sealed class Destination (val route: String){\n    ```", "```kt\n        object Main: Destination(\"main_route\")\n    ```", "```kt\n        object LoginScreen: Destination(\"login_screen\")\n    ```", "```kt\n        object RegisterScreen:\n    ```", "```kt\n            Destination(\"register_screen\")\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun LoginContent(\n    ```", "```kt\n        ...\n    ```", "```kt\n        onRegister: () -> Unit\n    ```", "```kt\n    ) {\n    ```", "```kt\n    ClickableText(\n    ```", "```kt\n        modifier = Modifier.padding(top = 12.dp),\n    ```", "```kt\n        text = AnnotatedString(stringResource(id =\n    ```", "```kt\n            R.string.register)),\n    ```", "```kt\n        onClick = { onRegister.invoke() },\n    ```", "```kt\n        style = TextStyle(\n    ```", "```kt\n           colorResource(id = R.color.purple_700),\n    ```", "```kt\n           fontSize = 16.sp\n    ```", "```kt\n        )\n    ```", "```kt\n    )\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun PasswordInputField(\n    ```", "```kt\n        text: String\n    ```", "```kt\n    ) {\n    ```", "```kt\n        OutlinedTextField(\n    ```", "```kt\n            label = { Text(text = text) },\n    ```", "```kt\n    ...\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun Navigation(navController: NavHostController) {\n    ```", "```kt\n        NavHost(navController, startDestination =\n    ```", "```kt\n        Destination.LoginScreen.route) {\n    ```", "```kt\n            composable(Destination.LoginScreen.route) {\n    ```", "```kt\n                LoginContentScreen(loginViewModel =\n    ```", "```kt\n                    hiltViewModel(),\n    ```", "```kt\n                onRegisterNavigateTo = {\n    ```", "```kt\n                    navController.navigate(\n    ```", "```kt\n                        Destination.RegisterScreen.route)\n    ```", "```kt\n                })\n    ```", "```kt\n            }\n    ```", "```kt\n            composable(Destination.RegisterScreen.route) {\n    ```", "```kt\n                RegisterContentScreen(registerViewModel =\n    ```", "```kt\n                    hiltViewModel())\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    PasswordInputField(\n    ```", "```kt\n        text = stringResource(id = R.string.password),\n    ```", "```kt\n        authState = uiState,\n    ```", "```kt\n        onValueChanged = onPasswordUpdated,\n    ```", "```kt\n        passwordToggleVisibility =\n    ```", "```kt\n            passwordToggleVisibility)\n    ```", "```kt\n    @AndroidEntryPoint\n    ```", "```kt\n    class MainActivity : ComponentActivity() {\n    ```", "```kt\n        override fun onCreate(savedInstanceState: Bundle?)\n    ```", "```kt\n        {\n    ```", "```kt\n            super.onCreate(savedInstanceState)\n    ```", "```kt\n            setContent {\n    ```", "```kt\n                SampleLoginTheme {\n    ```", "```kt\n                    // A surface container using the\n    ```", "```kt\n                       'background' color from the theme\n    ```", "```kt\n                    Surface(\n    ```", "```kt\n                        modifier = Modifier.fillMaxSize(),\n    ```", "```kt\n                        color =\n    ```", "```kt\n                           MaterialTheme.colors.background\n    ```", "```kt\n                    ) {\n    ```", "```kt\n                        val navController =\n    ```", "```kt\n                            rememberNavController()\n    ```", "```kt\n                        Navigation(navController =\n    ```", "```kt\n                            navController)\n    ```", "```kt\n                    }\n    ```", "```kt\n                }\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\nAnimatedNavHost(\n    modifier = Modifier\n        .padding(padding),\n    navController = navController,\n    startDestination = Destination.LoginScreen.route,\n    route = Destination.LoginScreen.route,\n    enterTransition = { fadeIn(animationSpec = tween(2000)) },\n    exitTransition = { fadeOut(animationSpec = tween(200))\n    }\n)\n```", "```kt\n    SearchScreen(\n    ```", "```kt\n        viewModel = hiltViewModel(),\n    ```", "```kt\n        navigateToRepositoryScreen = { orgName ->\n    ```", "```kt\n            navController.navigate(\n    ```", "```kt\n                Destination.BrowseRepositoryScreen.route +\n    ```", "```kt\n                \"/\" + orgName\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n    )\n    ```", "```kt\n    composable(\n    ```", "```kt\n        route = Destination.BrowseRepositoryScreen.route +\n    ```", "```kt\n                \"/{org_name}\",\n    ```", "```kt\n        arguments = listOf(navArgument(\"org_name\") { type\n    ```", "```kt\n            = NavType.StringType }),\n    ```", "```kt\n        enterTransition = { scaleIn(tween(700)) },\n    ```", "```kt\n        exitTransition = { scaleOut(tween(700)) },\n    ```", "```kt\n    ) {\n    ```", "```kt\n        BrowseRepositoryScreen(\n    ```", "```kt\n            viewModel = hiltViewModel(),\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\nnavController.navigate(Destination.BrowseScreen.route + \"/\" + orgName)\n```", "```kt\n    <activity>\n    ```", "```kt\n        <intent-filter>\n    ```", "```kt\n          ...\n    ```", "```kt\n          <data android:scheme=\"https\"\n    ```", "```kt\n          android:host=\"www.yourcompanieslink.com\" />\n    ```", "```kt\n        </intent-filter>\n    ```", "```kt\n    </activity>\n    ```", "```kt\n    val uri = \"www.yourcompanieslink.com\"\n    ```", "```kt\n    composable(deepLinks = listOf(navDeepLink { uriPattern = \"$uri/{id}\" }))\n    ```", "```kt\n    {...}\n    ```", "```kt\noverride fun onNewIntent(intent: Intent) {\n    super.onNewIntent(intent)\n    navigationController.handleDeepLink(intent)\n}\n```", "```kt\n    @Composable\n    ```", "```kt\n    fun contentLoginForTest(\n    ```", "```kt\n        uiState: AuthenticationState =\n    ```", "```kt\n        AuthenticationState(),\n    ```", "```kt\n        onUsernameUpdated : (String) -> Unit = {},\n    ```", "```kt\n        onPasswordUpdated :(String) -> Unit = {},\n    ```", "```kt\n        onLogin : () -> Unit = {},\n    ```", "```kt\n        passwordToggleVisibility: (Boolean) -> Unit = {},\n    ```", "```kt\n        onRegisterNavigateTo: () -> Unit = {}\n    ```", "```kt\n    ) {\n    ```", "```kt\n        LoginContent(\n    ```", "```kt\n            uiState = uiState,\n    ```", "```kt\n            onUsernameUpdated = onUsernameUpdated,\n    ```", "```kt\n            onPasswordUpdated = onPasswordUpdated,\n    ```", "```kt\n            onLogin = onLogin,\n    ```", "```kt\n            passwordToggleVisibility =\n    ```", "```kt\n                passwordToggleVisibility,\n    ```", "```kt\n            onRegister = onRegisterNavigateTo\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    private fun initCompose() {\n    ```", "```kt\n        composeRuleTest.activity.setContent {\n    ```", "```kt\n            SampleLoginTheme {\n    ```", "```kt\n                contentLoginForTest()\n    ```", "```kt\n                launchRegisterScreenWithNavGraph()\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    const val REGISTER_USER = \"register_user\"\n    ```", "```kt\n    private fun launchRegisterScreenWithNavGraph() {\n    ```", "```kt\n        composeRuleTest.activity.setContent {\n    ```", "```kt\n            SampleLoginTheme {\n    ```", "```kt\n                navController = rememberNavController()\n    ```", "```kt\n                NavHost(\n    ```", "```kt\n                    navController = navController,\n    ```", "```kt\n                    startDestination =\n    ```", "```kt\n                        Destination.LoginScreen.route\n    ```", "```kt\n                ) {\n    ```", "```kt\n                    composable(Destination.LoginScreen\n    ```", "```kt\n                    .route) {\n    ```", "```kt\n                    LoginContentScreen(\n    ```", "```kt\n                    onRegisterNavigateTo = {\n    ```", "```kt\n                        navController.navigate(\n    ```", "```kt\n                            Destination.RegisterScreen\n    ```", "```kt\n                            .route)\n    ```", "```kt\n                    }, loginViewModel = hiltViewModel())\n    ```", "```kt\n                    }\n    ```", "```kt\n                    composable(\n    ```", "```kt\n                        Destination.RegisterScreen\n    ```", "```kt\n                        .route) {\n    ```", "```kt\n                            RegisterContentScreen(\n    ```", "```kt\n                                hiltViewModel())\n    ```", "```kt\n                        }\n    ```", "```kt\n                }\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun assertRegisterClickableButtonNavigatesToRegisterScreen() {\n    ```", "```kt\n        initCompose()\n    ```", "```kt\n        composeRuleTest.onNodeWithTag(\n    ```", "```kt\n            TestTags.LoginContent.REGISTER_USER)\n    ```", "```kt\n                .performClick(\n    ```", "```kt\n        )\n    ```", "```kt\n        val route =\n    ```", "```kt\n            navController.currentDestination?.route\n    ```", "```kt\n        assert(route.equals(\n    ```", "```kt\n            Destination.RegisterScreen.route))\n    ```", "```kt\n    }\n    ```"]