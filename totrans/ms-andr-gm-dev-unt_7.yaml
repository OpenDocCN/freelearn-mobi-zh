- en: Gamestats, Social, IAP, and Ad Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are done with gameplay we can now see how to run the app on a device.
    We also have an introduction to Unity Ads and In App purchase tools that are already
    included. We will also include game achievements, and finally, we will see how
    to upload the APK to the app store and publish the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Running the app on a device/emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Developer Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding achievements to the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving game stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IAP purchases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding social media integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the app on the device/ emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run an app on a device, you have to get the Android SDK and also the **Java
    Development Kit** (**JDK**) and set the location of the **Software Development
    Kit** (**SDK**) in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us first download the Android SDK. You can download the SDK from [https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html).
    Go to the bottom of the page and download the command-line tool. You can download
    Android Studio, but only if you are going to use Android Studio for development,
    which in this case we are not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_001.png)'
  prefs: []
  type: TYPE_IMG
- en: Download it for your operating system. In my case, I will be showing you how
    to do it on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the folder, create a new folder, in `C:` drive and call it
    `AndroidSDK` and copy the `Tools` folder into it. In the `Tools` folder, right-click
    on the `Android.bat` file and run it as an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an interface as follows. In the packages under `Tools` folder,
    you will need to download Android SDK Tools, Android SDK Platform-tools, and Android
    SDK Build-tools by selecting the respective checkbox as shown as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Android SDK version, select the version that is running on your phone.
    If you have a Google Pixel, you are probably running on Android version 7.1 or
    7.0\. I have Google Nexus 5 phone and it is running Android version 6.0, so I
    am required to install it. If you are running on an older version of Android,
    check which version of the SDK is required for your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will also need to install things under the Extras folder, which will
    be required later anyway. You will need to check the Android Support Repository,
    Google Play Services, Google Repository, and also Google USB Driver options from
    the list to connect your device for installation to start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select all the options, accept the terms, and click the install button for
    the installation to start:'
  prefs: []
  type: TYPE_NORMAL
- en: While that is getting installed, let's also download the JDK. To download the
    SDK go to this link [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
    and download the version for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_006.png)'
  prefs: []
  type: TYPE_IMG
- en: There is no need to download demos and samples. Once downloaded, install it
    at the default location.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to download the Unity Android module. Go to File | Build
    Settings and select the Android in the Platform section. It will say *No Android
    Module* *Loaded*. Click on the Open Download page. Once you click the button,
    the download should start and once downloaded, it should be inside the `Downloads`
    folder. You can also download it from [http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe](http://download.unity3d.com/download_unity/38b4efef76f0/TargetSupportInstaller/UnitySetup-Android-Support-for-Editor-5.5.0f3.exe).
    Make sure you change the version number to the one that you are currently running.
    Once downloaded, open the Unity project and then double-click on the Android module
    to install the required package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to Build Settings and select the Android platform and click on the Switch
    Platform button at the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have to set the path for the `AndroidSDK` folder and JDK in Unity. Go
    to Edit menu and open Preferences under the External tools option, then browse
    to the SDK and JDK locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_008.png)'
  prefs: []
  type: TYPE_IMG
- en: The Android SDK location is at `C:/ AndroidSDK` and for the JDK it is located
    at `C:/Program Files/Java/jdk1.8.0_121`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have to prepare the Android device, enable the Developer Options mode
    in the device, and enable USB debugging. On the device, go to Settings and About
    Phone and at the bottom you will find the Build Number, tap on it seven times.
    It will then tell you that you are a developer now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press back key and go into Developer Options. Enable the USB debugging and
    Stay awake options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_010.png)'
  prefs: []
  type: TYPE_IMG
- en: And that should be it. Now your device is ready to build on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Android Developer Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, to test/publish your game or to add achievements, you will need to upload
    your app to the Android's Developer Console. It has a one-time fee of 25 USD.
    Once paid, you can publish and test as many games/apps as you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have your Gmail ID ready, head on to [https://play.google.com/apps/publish/signup/#](https://play.google.com/apps/publish/signup/);
    to sign up as an Android developer. The following window will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_011.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Continue to payment button and have your credit card ready. Once
    payment is made, you will have access to the Developer Console. Congratulations!
    You are an Android developer now.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be greeted with the following screen. I already have some games and
    apps on the android store, so your existing apps will show up here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'While we are here, let us create a new app. Click on the + Create application
    button on the top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the dialog box, specify the language and title of the game here. Next specify
    the details in the Title and Short description fields and then click on the Save
    Draft button at the top-right corner of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next click on the APK tab on the left, as we will have to upload an APK to
    add achievements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Upload your first APK to Production. Now we have to upload the APK
    to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_016.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's us go back to Unity and build the APK so that we can upload to the Developer
    Console. In Unity, go to Edit | Build Settings and click on the PlayerSettings
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Under PlayerSettings, type in the details in the Company Name and Product Name
    fields. Don't worry about icons now; we will add them later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Other Settings section, add a bundle identifier. This is always the
    reverse order of your company website followed by the product name. Add the version
    number, which is 1.0\. The bundle version code can be 1\. Lastly add the minimum
    Android API level that the application can support. I have chosen Marshmallow,
    but the lower the number is, the better, so the application can be enjoyed by
    people even with older phones running older android versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_017.png)'
  prefs: []
  type: TYPE_IMG
- en: Next under Publishing Settings section, we will have to create a new keystore.
    Type in the password in the Keystore password field and confirm the password.
    Now click on the Browse Keystore button and select where you want to store the
    Keystore. Keep it in a safe place as you might need this file later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next under the Key section, instead of Unsigned (debug) option, click on it
    and select the Create a new key option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next fill in the required details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_019.png)'
  prefs: []
  type: TYPE_IMG
- en: Create an alias, which is usually the name of the product. Create a password
    for the key and then confirm it. Add in your first name, last name, company address
    and company name, city, state, and country location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now select the alias and type in the password for the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can create an APK to upload. Go to Build Settings and click Build. It
    will ask for a location to save the APK, specify a location and name. Remember
    the location and name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now go back to the Developer Console. Drag and drop the `build.apk` file onto
    where it says Drop your APK file here, or select file. Once you select the file
    to upload it will begin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you go to the ALL APPLICATIONS page, you will see our Punchypunch application
    listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_023.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let us add some achievements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding achievements in the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Developer Console, click on the GAME SERVICES tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here click on + Add new game on the top right. Type in the game name and the
    genre and click on the Continue button at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_025.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the ACHIEVEMENTS tab, and then click Add achievement tab. You need
    to add at least five achievements for it to work.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type in a name and add a small description. For our example, I am going to
    add achievements for the number of times the user has played the game. So for
    playing the game the 1st time, 5th time, 50th, 100th, and 1000th time, I want
    an achievement to pop up each time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_027.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add a new achievement and all the achievements in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Get Resources button on the bottom and select the Android tab
    in the window. Now, copy all the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next go to the Testing tab and click on the Add testers button. Here add in
    the e-mail address that you will be using to log in to your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you are ready to test the achievements on the device. Go to Unity and go
    to Window | Google Play Services | Setup | Android Setup...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_031.png)'
  prefs: []
  type: TYPE_IMG
- en: In the window, let the Directory to save constants field be set to `Assets`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the details in Constants class name component and finally paste the
    code you copied from Get Resources tab here, and click on the Setup button at
    the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_032.png)'
  prefs: []
  type: TYPE_IMG
- en: Now when the MainMenu loads, we have to activate Google Play Services and whenever
    an achievement is hit, we have to send a notification telling Google Play Services
    that the achievement has been met.
  prefs: []
  type: TYPE_NORMAL
- en: 'So in the Project menu open the MainMenu scene. In the `Project`/`Scripts`
    folder create a new script called `MainMenuScript`. In the script, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At the top of the class, add the `GooglePlayGames`, `UnityEngine.SocialPlatform`,
    and `System.Collections.Generic` namespaces. In the class, create a `isUserAthenticated`
    Boolean and initialize it to `false`. In the `Update` function, we will check
    if the user is logged into Google Play Services; otherwise, we will wait until
    the user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: We activate the Google Play Services and then enable Debug mode. In the `Update` function,
    we check if the user is logged in. If the user is logged in, we change our Boolean
    variable to `true`, or else we log out saying that the user didn't log in. Attach
    this script as a component to the `MainCamera` component in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now plug in your device to the computer and go to Build Settings and press
    Build and Run. It will connect to the Google Play Services, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_033.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will ask you to log in with your e-mail address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_034.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are logged in, it will give you a welcome message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_035.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to store information in the achievement that is actually achieved at the
    gameover condition, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the class add a global integer called `gameplayCount`. When the game is over
    this variable is incremented.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the value of the `gameplayCount` variable, the `if` statements
    are made and the `Social.ProgressReport` function is called. It takes three parameters.
    The first being is name of the achievement that is stored in the class that was
    created, the second is the progress level, in this case we will call this when
    100% progress is made on the achievement, and the third is a call back function.
  prefs: []
  type: TYPE_NORMAL
- en: Now build and run the game again. Now when you finish the game, you will get
    the notification that you played for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will open the achievements window to see all the achievements. In the
    MainMenu scene, we have a button that we created to show the achievement.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `buttonClick` class, create a new function called `openAchievements`.
    It is created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Social.showAchievementsUI()` function opens the Achievements window. Now
    on the Achievement button call this function when the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Build and run your project again and click the Achievement button on the main
    menu and the Achievements window will pop up, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_037.png)'
  prefs: []
  type: TYPE_IMG
- en: But there is a bit of a problem here. The game only remembers all the information
    when you play the game; once you close the game, it forgets the information. Let's
    now see how to store game information on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Saving game stats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Saving game information is actually very easy. This method works on all devices.
    The `PlayerPrefs` function can save and load player information on the system.
    All you have to pass in is a key that you will save and retrieve the data and
    a value that you want to store.
  prefs: []
  type: TYPE_NORMAL
- en: 'So in your `gameScript`, when you increment the value of `gameplayCount` variable
    and add the following code after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now the value of `gameplayCount` will be stored in the `GameplayCount` key.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve information, you will use the `GetInt` function of `PlayerPrefs`
    to get the value stored in the key. So, before you increment the `gameplayCount`
    variable, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now the value stored in the key in the system for `GameplayCount` is retrieved
    and stored in a local variable called `gameplayCount`.
  prefs: []
  type: TYPE_NORMAL
- en: You are now incrementing this value and then saving the new value in the system.
    Now the system will remember the number of times you have played the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'For convenience, I have created a button in the Options menu, using which I
    reset the value of the `GameplayCount` key to `0` whenever the button is pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_038.png)'
  prefs: []
  type: TYPE_IMG
- en: I also added a home button so that I can go back to the main menu. Let us now
    see how to add ad integration.
  prefs: []
  type: TYPE_NORMAL
- en: Ad integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Unity, it is very easy to integrate ads in your games using Unity Ads. In
    Unity, go to Windows | Services and a new tab will open on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_039.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Services tab, log in with your Unity login and password that you obtained
    while registering on Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Create button. This will show the different services that are
    available to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_040.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the SERVICES tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_041.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Flip the switch on the top right corner to enable it. If the game is targeted
    at kids under 13 click the checkbox and click on the Continue button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_042.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Android as the target platform, and check the Enable test mode option,
    so that we can test it before we publish the game. Now, in the `gamescript` class,
    at the top of the class add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'All we have to do is call the `ShowAd` function when we want to show an ad.
    We don''t want to show an ad when the player has an achievement as we also don''t
    want to show the ad every time we call the `ShowAd` function in the `else` statement,
    when achievements are showing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We call the show ad function if `gameplayCount` is divisible by 3\. Then, all
    the magic happens inside the `ShowAd` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `ShowAd` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes ads are not available at the moment to show, it might be while playing
    or restarting the game that the ad will start playing. We don't want that so we
    first check if there is an ad to show so we calling `Advertisement.Isready`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is an ad that is ready, we call the `Advertisement.Show` function,
    and we specify the type of ad we want to show, which is a video. We add in a callback
    function that will tell us what the player did while watching an ad or if the
    ad played at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'So add a new function called `adViewResult` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We check if the ad has finished playing, skipped, or failed. In each case we
    log out the information. Build and run the game. Now a test ad should show as
    per our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_043.png)'
  prefs: []
  type: TYPE_IMG
- en: Let us see how to add In-App purchases, so that if the player wants to disable
    the ad they can make a purchase to disable the ad.
  prefs: []
  type: TYPE_NORMAL
- en: In-App purchasing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Services` tab in Unity, click on `In- App Purchasing` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_044.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again flip the switch on the top right against the IN-APP PURCHASING to
    enable it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_045.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Import button to import the IAP library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_046.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we create a new class that will handle In-App purchases; we will call
    this class `IAPManager`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this add the following code. The code has been taken from the Unity example
    site, which has a detailed and commented code showing what each function does.
    The code can be accessed from [https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game](https://unity3d.com/learn/tutorials/topics/ads-analytics/integrating-unity-iap-your-game):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_047.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code has been modified for our purpose. As this is a long code, I have
    added comments with numbers, which I will explain later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Products can be of three types: consumable, nonconsumable, and subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: Consumables can be used only once after which you cannot purchase it again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonconsumables can be purchased again and again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A subscription product is subscription-based like Netflix, which you pay for
    every month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are four key steps to remember when setting the product. They are commented
    in the code as 1, 2, 3, and 4.
  prefs: []
  type: TYPE_NORMAL
- en: First, we set a string that should be the same as what we set in the Android
    store.
  prefs: []
  type: TYPE_NORMAL
- en: In the initialized `Purchasing` function we have to specify our product as the
    product needs to be present when the store is built. The store is built every
    time you click on the store icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Builder will add the product to the store. Specify the product name and
    type of product here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create our own function, which will called when we want to buy a product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This intern will call the BuyProductID function in which we pass the product
    name that will initiate the purchase of the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally in the initiated function we check if the product was purchased. We
    set a key so that if the product was purchased the no ads button doesn''t show
    any more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now on the MainMenu scene, create a new button on top-right and in the `buttonClick` script,
    add a function that will call the `BuyRemoveAds` function in the `IAPManager`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Also on the `mainMenu` class add a button object for the Ad remove button and
    disable it if the `noads` key is equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mainMenu` script should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to do one final thing. We actually need to add the product in the Developer
    Console. Go to All Application | PunchyPunch and click on In-app products option
    in the list. Now click on + Add new product button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_048.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the box, select Managed product option and in the Product ID field, add
    removeads. This is the same as the string we set in the `IAPManager` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_049.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add a title and description in the Title and Description fields respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_050.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on Add a price button at the bottom and in the Default price field,
    type in the price. In my case it is INR, so I will add an appropriate value and
    click on the Apply button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the app will show up on the In-App products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_052.png)'
  prefs: []
  type: TYPE_IMG
- en: You can build and run the app now, but in-app purchases can only be tested once
    the app has been published. So we will see how it works in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding social media integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let us setup a Facebook share integration. Go to [https://developers.facebook.com/](https://developers.facebook.com/)
    that will open the Facebook developer site. Log in with your Facebook login and
    password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_053.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on My Apps box on the top and select the Add a New App option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_054.png)'
  prefs: []
  type: TYPE_IMG
- en: Type in the name of the game in the Display Name field. Add your contact e-mail
    address and select Apps for Pages option in the Category list. Then click on the
    Create App ID button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In settings click on + Add Platform button at the bottom and choose Android.
    Add the package name for the app and add in the Class Name field, which will also
    be in the reverse website name with the class name at the end. When we create
    a manager in Unity, we have to make sure that the class name matches this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_055.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also get an App ID, copy this information as this will be required.
    Next on the top-right corner, there is a button called DOCs, click it as we will
    need to download the Facebook SDK for Unity. Click on Unity SDK from the list
    and the SDK will start downloading:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_056.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the SDK is downloaded, make sure your current unity project is open and
    import the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_057.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check all the boxes and click on the Import button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_058.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see that there is a new Facebook tab on your project, click on it
    and select Edit Settings options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_059.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Inspector type, the App Name (Optional) and App ID [?] fields are as
    it appears on the Facebook Developer Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_060.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, create a new class called `fbManager`. In the class, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the `Awake` function, first we check whether Facebook SDK is initialized.
    If not then we initialize it and we activate the app.
  prefs: []
  type: TYPE_NORMAL
- en: The `Share` function is the function that we will call when the Facebook button
    is pressed from the main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Once the button is pressed, the function will check whether the user is logged
    in. If they are logged in then the post is made using the `sharelink` function.
    We pass in the content title, a link to the website, and a description. We also
    provide a call back function that will check if the post was made or not.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is not logged in then, we log in using the `loginWithPermissions`
    function. We also pass in a call back function that will check if the user has
    logged in. Once the user is logged in the function will call the share function.
  prefs: []
  type: TYPE_NORMAL
- en: While sharing if it was cancelled the `onShare` call back function will specify
    if there is an error, otherwise it will post a message. Now create a new button
    in the MainMenu for Facebook sharing and call the `Share` function once the button
    is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to install **openSSL** as it is a requirement for Facebook. Download
    and install OpenSSL from [https://code.google.com/archive/p/openssl-for-windows/downloads](https://code.google.com/archive/p/openssl-for-windows/downloads).
    Download, unzip, and install it. Next, go to Start and search for `Environment
    Variables`. Open it.
  prefs: []
  type: TYPE_NORMAL
- en: Under the System Variables section, look for the path and press Edit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Edit Environment Variables, click New and type in the OpenSSL binary
    location. Click OK. Next click New again and add the JDK binary location. Click
    OK and exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You might get build errors as when you installed Facebook SDK there might be
    older versions of `support-annotations-23.4.0.jar` and `support-v4-23.4.0.aar` library
    present. You will have to manually go into the Facebook Android library folder
    and delete these files. So go to the location and delete the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_062.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now build and run the application and click on the Facebook button on the main
    menu that you created. Once logged in you are ready to post on Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_063.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we will look at Twitter sharing. Twitter sharing is really easy. Create
    one more button on the MainMenu for calling Twitter share and attach a function
    that will get called once the button is pressed. I created a function called `openTwitter`
    in the `buttonClick` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You will create strings that will store values for app store links, the twitter
    tweet intent address link, a description, and a message. Then you will call `Application.OpenURL`
    and pass the information as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when you build the application and press the Twitter button, you will
    be able to share a tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_07_064.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we added sound and added touch input as we have only worked
    with mouse clicks all this time.
  prefs: []
  type: TYPE_NORMAL
- en: We also created a developer account and made the app itself ready. We saw how
    to run the app on a device. We also created the app on the store and uploaded
    the APK to the store. We added achievements by saving the number of times we played
    the game. We added IAP and ads so that we can monetize the game. In the next chapter,
    we will finally publish the game.
  prefs: []
  type: TYPE_NORMAL
