- en: Chapter 8. Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。调试
- en: The debugging environment is one of the most important features of an IDE. Using
    a debugging tool allows you to easily optimize your application and improve its
    performance. Do you want to use a debug tool while programming in Android Studio?
    Android Studio includes the **Dalvik Debug Monitor Server** (**DDMS**) debugging
    tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试环境是集成开发环境（IDE）最重要的功能之一。使用调试工具可以让你轻松优化应用程序并提高其性能。你希望在 Android Studio 编程时使用调试工具吗？Android
    Studio 包含了 **Dalvik 调试监控服务器**（**DDMS**）调试工具。
- en: In this chapter, you will start by learning about the **run** and **debug**
    options and how to emulate your application in one of the Android virtual devices
    you learned to create in a previous chapter. You will learn about the **Debugger**,
    **Console**, and **LogCat** tabs in depth. You will also learn how to use breakpoints
    when using the debugger. We will end this chapter with information about each
    tab available in the advanced debugger tool included in Android Studio DDMS and
    the Hierarchy View.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将从学习 **运行** 和 **调试** 选项以及如何在之前章节中创建的 Android 虚拟设备中模拟应用程序开始。您将深入了解 **调试器**、**控制台**
    和 **日志输出** 选项卡。您还将学习在使用调试器时如何使用断点。我们将以关于 Android Studio DDMS 中包含的高级调试工具的每个选项卡的信息结束本章，以及层次视图。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论以下主题：
- en: Debugging
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: LogCat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志输出
- en: Instant run
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即时运行
- en: Device Monitor tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备监控工具
- en: Hierarchy View
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层次视图
- en: Running and debugging
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和调试
- en: Android applications can be run from Android Studio in a real device using a
    USB connection or in a virtual device using the emulator. Virtual devices make
    it possible to test our applications on different types of hardware and software
    configurations. In this chapter, we will use the emulator to run and debug our
    application because of its simplicity and flexibility.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用程序可以通过 USB 连接在真实设备上或在虚拟设备中使用模拟器运行。虚拟设备使我们能够在不同的硬件和软件配置上测试我们的应用程序。在本章中，我们将使用模拟器来运行和调试我们的应用程序，因为它简单且灵活。
- en: To run an application directly, navigate to **Run** | **Run 'app'**. You can
    also click on the play icon from the toolbar. To debug an application, navigate
    to **Run** | **Debug 'app'** or click on the bug icon from the toolbar. If your
    app is already running, you can start the debug mode by navigating to **Run**
    | **Attach debugger to Android process**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接运行应用程序，请导航到 **运行** | **运行 'app'**。您也可以从工具栏中点击播放图标。要调试应用程序，请导航到 **运行** | **调试
    'app'** 或从工具栏中点击虫子图标。如果您的应用程序已经运行，您可以通过导航到 **运行** | **附加调试器到 Android 进程** 来启动调试模式。
- en: When we select the **Debug 'app'** option, a dialog to choose the device is
    opened. The **Connected Devices** section is used to choose a running device;
    the current connected devices are listed, real or virtual. The **Available Emulators**
    section is used to launch a new instance of the emulator; the available virtual
    devices are listed. You can also create a new emulator from this dialog using
    the **Create New Emulator** button. This option will open the virtual device configuration
    dialog that was explained in [Chapter 6](ch06.html "Chapter 6. Tools"), *Tools*.
    One last option in this dialog is the **Use same selection for future launches**
    checkbox. Check this if you want to skip this step in future.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择 **调试 'app'** 选项时，会打开一个选择设备的对话框。**已连接设备**部分用于选择正在运行的设备；列出了当前连接的设备，无论是真实设备还是虚拟设备。**可用模拟器**部分用于启动模拟器的新实例；列出了可用的虚拟设备。您也可以使用
    **创建新模拟器** 按钮从该对话框创建新的模拟器。此选项将打开 [第 6 章](ch06.html "第 6 章。工具") 中解释的虚拟设备配置对话框。此对话框中的最后一个选项是
    **为将来启动使用相同选择** 复选框。如果您想在未来跳过此步骤，请选中此复选框。
- en: Select the virtual device created in [Chapter 6](ch06.html "Chapter 6. Tools"),
    *Tools*, from the **Available Emulators** section as shown in the following screenshot
    and click **OK**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **可用模拟器** 部分选择在 [第 6 章](ch06.html "第 6 章。工具") 中创建的虚拟设备，如以下截图所示，然后点击 **确定**。
- en: '![Running and debugging](img/B05459_08_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![运行和调试](img/B05459_08_01.jpg)'
- en: The emulator will be launched. The next time we run or debug the application,
    the emulator will be running, so we will select it from the **Connected Devices**
    section.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器将被启动。下次我们运行或调试应用程序时，模拟器将正在运行，因此我们将从 **已连接设备** 部分选择它。
- en: 'While debugging, you will note that, at the bottom of Android Studio as shown
    in the next screenshot, there is a new panel, **Debug**, which contains two tabs:
    **Debugger** and **Console**. The **Android Monitor** tab contains two other tools:
    **LogCat** and **Monitors**.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试过程中，您会注意到，在下一张截图所示的 Android Studio 的底部，有一个新的面板，**调试**，其中包含两个选项卡：**调试器**和**控制台**。**Android
    Monitor** 选项卡包含另外两个工具：**日志输出**和**监视器**。
- en: '![Running and debugging](img/B05459_08_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![运行和调试](img/B05459_08_02.jpg)'
- en: Console
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台
- en: '**Console** displays the events that are taking place while the emulator is
    being launched or while it is running. Open it to examine the messages and check
    that the emulator and the application are being correctly executed. The actions
    that should appear are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**显示在启动或运行模拟器时发生的事件。打开它以检查消息并确认模拟器和应用程序正在正确执行。应该出现的操作是：'
- en: '**Waiting for device**: This is the starting point when the emulator is being
    launched.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待设备**：这是启动模拟器时的起点。'
- en: '**Uploading file** (the `adb push` command): This event states that the application
    is packed and stored in the device.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上传文件**（`adb push` 命令）：此事件表示应用程序被打包并存储在设备中。'
- en: '**Installing** (the `adb shell pm` install command): This event states that
    the application is being installed in the device. After the installation, a success
    message should be printed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**（`adb shell pm` install 命令）：此事件表示应用程序正在设备中安装。安装后，应打印出成功消息。'
- en: '**Launching application** (the `adb shell am start` command): This event takes
    place when the application starts to execute.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动应用程序**（`adb shell am start` 命令）：此事件发生在应用程序开始执行时。'
- en: '**Waiting for process**: This event takes place when the application is running
    and the debug system tries to connect to the application process in the device.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**等待进程**：此事件发生在应用程序正在运行且调试系统试图连接到设备中的应用程序进程时。'
- en: After the success of the previous steps, the application will be visible in
    the emulator. Test it by typing any name in the text input and clicking on the
    **Accept** button. The greeting message should change.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一步骤成功后，应用程序将在模拟器中可见。通过在文本输入中键入任何名称并点击**接受**按钮来测试它。问候消息应该会改变。
- en: Debugger
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试器
- en: '**Debugger** manages the breakpoints, controls the execution of the code, and
    shows information about the variables. To add a breakpoint in your code, just
    click on the left edge of a line of code. A red point will appear next to the
    line of code to indicate the breakpoint. To delete the breakpoint, click on it.
    If you right-click on a breakpoint, more options become available in a small dialog,
    in which you can click on the **More to open the Breakpoints** window, which is
    shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试器**管理断点、控制代码执行并显示变量的信息。要在您的代码中添加断点，只需单击代码行的左侧边缘。一个红色点将出现在代码行旁边以指示断点。要删除断点，请单击它。如果您右键单击一个断点，一个小对话框中将出现更多选项，您可以在其中点击**更多**以打开显示在下图中所示的**断点**窗口：'
- en: '![Debugger](img/B05459_08_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_03.jpg)'
- en: You can also open the **Breakpoints** window by navigating to **Run** | **View
    Breakpoints...**. In the left-side panel of the **Breakpoints** window, all the
    breakpoints of your app are listed. You can add new breakpoints, remove them,
    or enable and disable them. You can enable **Exception Breakpoints**, which will
    be triggered when an exception is thrown while your app is running. If you select
    one breakpoint from the left-side panel, you can configure it using the right-side
    panel. For example, you can set a condition for the breakpoint, log a message
    to console, or remove it once it is hit.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过导航到 **运行** | **查看断点...** 来打开 **断点** 窗口。在 **断点** 窗口的左侧面板中，列出了您应用程序的所有断点。您可以添加新的断点、删除它们或启用和禁用它们。您可以启用
    **异常断点**，当您的应用程序运行时抛出异常时，它将被触发。如果您从左侧面板中选择一个断点，您可以使用右侧面板对其进行配置。例如，您可以为断点设置条件、将消息记录到控制台，或者一旦触发就将其删除。
- en: 'Add a breakpoint in the conditional statement of the `onAcceptClick` method
    of our main activity and debug the application again, as shown:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们主活动的 `onAcceptClick` 方法中的条件语句中添加一个断点，然后再次调试应用程序，如下所示：
- en: '![Debugger](img/B05459_08_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_04.jpg)'
- en: Enter your name in the application and click on the **Accept** button. When
    the execution gets to the breakpoint, it pauses, and the **Debugger** tab is opened.
    Since we added the breakpoint in the conditional statement before assigning the
    text, our greeting message has not changed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用中输入你的名字并点击**接受**按钮。当执行到达断点时，它会暂停，并打开**调试器**标签页。由于我们在分配文本之前在条件语句中添加了断点，所以我们的问候信息没有改变。
- en: 'From the debugger tab, we can examine the method call hierarchy and the state
    of the variables at that point of execution. The available variables are the parameter
    of the `v` method, the `TextView` and `EditText` objects obtained by the `findViewById`
    method, and the reference to the current activity (`this`). Expand the `EditText`
    object named `etName`, as shown in the following screenshot, and search for the
    `mText` property. This property should contain the name you typed before:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从调试器标签页，我们可以检查方法调用层次和执行点处的变量状态。可用的变量包括`v`方法的参数、通过`findViewById`方法获得的`TextView`和`EditText`对象，以及当前活动的引用（`this`）。展开名为`etName`的`EditText`对象，如图所示，并搜索`mText`属性。这个属性应该包含你之前输入的名字：
- en: '![Debugger](img/B05459_08_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_05.jpg)'
- en: 'Right-click on the `EditText` object to open a menu with more options and select
    **Evaluate Expression...**. The **Evaluate Expression** dialog allows you to query
    methods in the context of the selected object. For example, type `etName.getText()`
    and press *Enter* to evaluate the expression. The result of the expression will
    be displayed like in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 右键点击`EditText`对象以打开一个包含更多选项的菜单，并选择**评估表达式...**。**评估表达式**对话框允许你在所选对象的环境中查询方法。例如，输入`etName.getText()`并按*Enter*键来评估表达式。表达式的结果将显示如下截图：
- en: '![Debugger](img/B05459_08_06.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_06.jpg)'
- en: 'When the execution of your app is stopped in a breakpoint, you can do the following
    actions:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用执行在断点处停止时，你可以执行以下操作：
- en: To execute the next line of code without stepping into the method call, you
    can navigate to **Run** | **Step Over**, click on the button in the top toolbar
    of the **Debug** panel, or press the keyboard shortcut indicated for this option,
    usually the *F8* key.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行下一行代码而不进入方法调用，你可以导航到**运行** | **步过**，点击**调试**面板顶部工具栏中的按钮，或者按此选项指示的键盘快捷键，通常是*F8*键。
- en: To step into the method call, you can navigate to **Run** | **Step Into**, click
    on the button in the top toolbar of the **Debug** panel, or press *F7*.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要进入方法调用，你可以导航到**运行** | **进入**，点击**调试**面板顶部工具栏中的按钮，或者按*F7*键。
- en: To choose the method you want to step into, navigate to **Run** | **Smart Step
    Into** or press *Shift* +*F7*.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要选择你想要进入的方法，你可以导航到**运行** | **智能进入**或按*Shift* + *F7*。
- en: To step to the cursor position in your code, you can navigate to **Run** | **Run
    to Cursor**, click on the button in the top toolbar of the **Debug** panel, or
    press *Alt* + *F9*.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将光标位置移动到你的代码中，你可以导航到**运行** | **运行到光标**，点击**调试**面板顶部工具栏中的按钮，或者按*Alt* + *F9*。
- en: To resume the execution until the next breakpoint, you can navigate to **Run**
    | **Resume Program**, click on the button in the left-side toolbar of the **Debug**
    panel, or press *F9*.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要恢复执行直到下一个断点，你可以导航到**运行** | **恢复程序**，点击**调试**面板左侧工具栏中的按钮，或者按*F9*键。
- en: To stop the execution, you can navigate to **Run** | **Stop**, click on the
    button in left-side toolbar of the **Debug** panel, or press *Ctrl* + *F2* (*Cmd*
    + *F2* on OS X).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要停止执行，你可以导航到**运行** | **停止**，点击**调试**面板左侧工具栏中的按钮，或者按*Ctrl* + *F2*（在OS X上为*Cmd*
    + *F2*）。
- en: These options, among others, are also available from the debugger tab as icon
    shortcuts.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项以及其他选项也可以从调试器标签页作为图标快捷方式使用。
- en: Expand the `tvGreeting` object to check the value of its `mText` property. Now,
    step over the conditional statement and the call of the `setText` method. Note
    how the value of the `mText` property has changed, which is shown in the next
    screenshot. Finally, resume the execution so the greeting message changes in the
    device screen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 展开名为`tvGreeting`的对象以检查其`mText`属性的值。现在，跳过条件语句和`setText`方法的调用。注意`mText`属性的值是如何变化的，这将在下一个截图中显示。最后，恢复执行以便设备屏幕上的问候信息发生变化。
- en: '![Debugger](img/B05459_08_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_07.jpg)'
- en: 'Create a new breakpoint inside the `if` clause. We can add a condition to the
    endpoint so the execution is only paused when the name typed by the user is `"no
    name"`, otherwise, the execution will continue as usual. The following screenshot
    of the **Breakpoints** window shows the breakpoint details:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`子句内创建一个新的断点。我们可以添加一个条件到断点端点，这样只有当用户输入的名称是`"no name"`时，执行才会暂停，否则执行将像往常一样继续。以下**断点**窗口的截图显示了断点详情：
- en: '![Debugger](img/B05459_08_08.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![调试器](img/B05459_08_08.jpg)'
- en: 'In the **Condition** field of the breakpoint, add the following condition that
    compares the text typed by the user in the name field (`etName`):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在断点的**条件**字段中，添加以下条件，该条件比较用户在名称字段（`etName`）中输入的文本：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, if you write your name in the app, no breakpoint will suspend the execution.
    If you type `"no name"`, execution will be suspended at the recently created breakpoint.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在应用程序中输入你的名字，没有断点会暂停执行。如果你输入`"no name"`，执行将在最近创建的断点处暂停。
- en: LogCat
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LogCat
- en: '**LogCat** is the Android logging system that displays all the log messages
    generated by the Android system in the running device. Log messages have several
    levels of significance. From the **LogCat** tab, we can filter the log messages
    by these levels. For example, if we select the information level as the filter,
    the messages from **information**, **warning**, and **error** levels will be displayed.
    The levels are shown in the following diagram:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**LogCat**是Android日志系统，它显示运行设备上Android系统生成的所有日志消息。日志消息有多个重要性级别。从**LogCat**标签页，我们可以通过这些级别过滤日志消息。例如，如果我们选择信息级别作为过滤器，那么来自**信息**、**警告**和**错误**级别的消息将会显示。级别在以下图表中显示：'
- en: '![LogCat](img/B05459_08_09.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![LogCat](img/B05459_08_09.jpg)'
- en: 'To print log messages from our code, we need to import the `Log` class. This
    class has a method for each level: the `v` method for verbose, the `d` method
    for debug, the `i` method for information, the `w` method for warning, and the
    `e` method for the error level. These methods receive two string parameters. The
    first string parameter usually identifies the source class of the message and
    the second string parameter identifies the message itself. To identify the source
    class, we recommend using a constant, static string tag. However, in the next
    example, we directly use the string to simplify the code. Add the following log
    messages to the `onAcceptClick` method of our main activity:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的代码中打印日志消息，我们需要导入`Log`类。这个类为每个级别都有一个方法：`v`方法用于详细输出，`d`方法用于调试，`i`方法用于信息，`w`方法用于警告，`e`方法用于错误级别。这些方法接收两个字符串参数。第一个字符串参数通常用于标识消息的源类，第二个字符串参数用于标识消息本身。为了标识源类，我们建议使用一个常量、静态字符串标签。然而，在下一个示例中，我们直接使用字符串以简化代码。将以下日志消息添加到主活动的`onAcceptClick`方法中：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have a log message to inform us about the name obtained from the user input
    and a log message to print a warning if the user did not type a name. Remove any
    breakpoint we previously created and then debug the application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个日志消息用于通知我们用户输入获取的名称，还有一个日志消息用于在用户没有输入名称时打印警告。移除我们之前创建的所有断点，然后调试应用程序。
- en: 'The **LogCat** tab in the **Android Monitor** has by default printed the log
    messages generated by the current application. Reading the messages of your application
    can sometimes be complex and you need to filter the messages. In the **LogCat**
    tab, there is an expandable list where you can filter the log messages by their
    level of significance. You can also use the search field to look for certain log
    messages. There is another expandable list to configure some extra filters: the
    **No Filters** option displays all the logs generated by the device; the **Show
    only selected application** option displays the logs generated only by your app;
    and the **Edit Filter Configuration** option allows you to create a more complex
    filter. Select **Edit Filter Configuration** to examine this option. A dialog
    to create filters is opened as shown in the next screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Android Monitor**中的**LogCat**标签页默认打印了当前应用程序生成的日志消息。阅读应用程序的消息有时可能很复杂，你需要过滤这些消息。在**LogCat**标签页中，有一个可展开的列表，你可以通过其重要性级别过滤日志消息。你还可以使用搜索字段查找特定的日志消息。还有一个可展开的列表来配置一些额外的过滤器：**无过滤器**选项显示设备生成的所有日志；**仅显示所选应用程序**选项显示仅由你的应用程序生成的日志；**编辑过滤器配置**选项允许你创建更复杂的过滤器。选择**编辑过滤器配置**来检查此选项。将打开一个创建过滤器的对话框，如图所示：'
- en: '![LogCat](img/B05459_08_10.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![LogCat](img/B05459_08_10.jpg)'
- en: Log messages can be filtered using regular expressions by their **Log Tag**,
    their **Log Message**, or by the name of the package that printed them. Logs can
    also be filtered by the **process ID** (**PID**) or by their level.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 日志消息可以通过它们的**日志标签**、**日志消息**或打印它们的包名进行过滤。日志还可以通过**进程ID**（**PID**）或它们的级别进行过滤。
- en: 'Create a new filter named `MyApplication`, filter it by **Package Name** writing
    `com.example.myapplication` (our application package name), and click on **OK**.
    Now, the **LogCat** log has been filtered and it is easier to read our messages.
    Now, perform the following steps:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`MyApplication`的新过滤器，通过**包名**写入`com.example.myapplication`（我们的应用程序包名），然后点击**确定**。现在，**日志猫**日志已经被过滤，更容易阅读我们的消息。现在，执行以下步骤：
- en: Focus on the **Emulator** window, enter a name in the application, and click
    on **Accept**. Observe how our log message is printed in the **LogCat** view.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将焦点放在**模拟器**窗口上，在应用程序中输入一个名称，然后点击**接受**。观察我们的日志消息是如何在**日志猫**视图中打印出来的。
- en: Delete your name from the application and click on **Accept**. This time, a
    warning message is printed. Notice the different colors used for each type of
    message.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从应用程序中删除您的名称，然后点击**接受**。这次，会打印出一个警告消息。注意每种消息所使用的不同颜色。
- en: Monitors
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控器
- en: 'The **Monitors** panel is available at the bottom-right corner of Android Studio.
    Select the device or emulator running your application, and select the process
    corresponding to your application from the two top expandable lists. There are
    four monitors available:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控器**面板位于Android Studio的右下角。选择运行您应用程序的设备或模拟器，并从两个顶部可展开的列表中选择与您的应用程序相对应的进程。有四个监控器可用：'
- en: '**Memory**: This shows the free and allocated memory of the selected application
    over time, as shown in the following screenshot:![Monitors](img/B05459_08_11.jpg)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：这显示了所选应用程序随时间变化的可用和已分配内存，如下面的截图所示：![监控器](img/B05459_08_11.jpg)'
- en: '**CPU**: This shows the CPU usage in real time of your app, as shown in the
    following screenshot:![Monitors](img/B05459_08_12.jpg)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU**：这显示了应用程序的实时CPU使用情况，如下面的截图所示：![监控器](img/B05459_08_12.jpg)'
- en: '**Network**: This shows the network usage of your app, as shown in the following
    screenshot:![Monitors](img/B05459_08_13.jpg)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：这显示了应用程序的网络使用情况，如下面的截图所示：![监控器](img/B05459_08_13.jpg)'
- en: '**GPU**: This shows the GPU usage of your app, indicating the time to execute,
    process, prepare, and draw the frames, as shown in the following screenshot:![Monitors](img/B05459_08_14.jpg)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU**：这显示了应用程序的GPU使用情况，表示执行、处理、准备和绘制帧的时间，如下面的截图所示：![监控器](img/B05459_08_14.jpg)'
- en: Instant run
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 即时运行
- en: Instant run is a new feature introduced in Android Studio 2.0 that allows you
    to update your app while it is running on a device without building a new APK.
    This feature reduces deployment time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 即时运行是Android Studio 2.0中引入的新功能，允许您在应用程序在设备上运行时更新它，而无需构建新的APK。此功能减少了部署时间。
- en: Instant run requires SDK 15 or higher, though it's recommended to use SDK 21
    or higher. You will also need to have your Android Plugin for Gradle updated to
    version 2.0 or higher. Instant run works for both the emulator and a real device.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即时运行需要SDK 15或更高版本，尽管建议使用SDK 21或更高版本。您还需要将Android Plugin for Gradle更新到2.0或更高版本。即时运行适用于模拟器和真实设备。
- en: 'After the first deployment of your app, you will note that the run/debug icon
    has changed and has an additional thunderbolt icon, such as the debug icon in
    the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序首次部署后，您会注意到运行/调试图标已更改，并有一个额外的闪电图标，如下面的截图所示：
- en: '![Instant run](img/B05459_08_15.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_15.jpg)'
- en: 'The next time you click on the **Debug** button, Android Studio will analyze
    the changes in your code to make the deployment of your app faster, instead of
    creating a new APK and doing a full deployment. There are three types of updates
    depending on the code that needs to be pushed to the app:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下次您点击**调试**按钮时，Android Studio将分析代码中的更改，以使应用程序的部署更快，而不是创建一个新的APK并进行完整部署。根据需要推送到应用程序的代码，有三种类型的更新：
- en: '**Hot swap**: This is the fastest swap. This type of swap is done if you change
    the code of an existing method. Android Studio will create a stub method with
    the new code and restart the current activity.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热交换**：这是最快的交换方式。如果您更改现有方法的代码，则会执行此类型的交换。Android Studio将创建一个具有新代码的存根方法并重新启动当前活动。'
- en: 'If you do not want Android Studio to restart the current activity after a hot
    swap, you can disable this behavior in the settings screen. Instant run settings
    are in the **Build, Execution, Deployment** section of the main settings. The
    following screenshot shows the instant run settings screen:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你不想在热插拔后Android Studio重启当前活动，你可以在设置屏幕中禁用此行为。即时运行设置位于主设置中的**构建、执行、部署**部分。以下截图显示了即时运行设置屏幕：
- en: '![Instant run](img/B05459_08_16.jpg)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_16.jpg)'
- en: You can disable the restart of the activity by disabling the **Restart activity
    on code changes** option.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过禁用**代码更改时重启活动**选项来禁用活动的重启。
- en: '**Warm swap**: This type of swap is done if you change or remove an existing
    resource. Android Studio will always restart the current activity and you can''t
    disable this behavior.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热交换**：如果你更改或删除了现有资源，则会执行此类型的交换。Android Studio将始终重启当前活动，并且你不能禁用此行为。'
- en: '**Cold swap**: This is the slowest swap and it requires API 21 or higher. If
    the device runs an API lower than 21, Android Studio will create a new APK and
    perform a full deployment. This type of swap is done if changes in the code are
    structural, such as changing the parent class, the implemented interfaces, a field,
    or a method signature. Android Studio will restart your app in a cold swap.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冷交换**：这是最慢的交换，需要API 21或更高版本。如果设备运行的API低于21，Android Studio将创建一个新的APK并执行完整部署。如果代码更改是结构性的，例如更改父类、实现的接口、字段或方法签名，则会执行此类型的交换。Android
    Studio将在冷交换中重启你的应用。'
- en: Android Studio will deploy a new build if you change the app manifest or anything
    that affects the app manifest, such as a resource referenced in the manifest.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更改了应用清单或影响应用清单的任何内容，例如清单中引用的资源，Android Studio将部署一个新的构建。
- en: 'Change some code in your app, for example, change the `Hello` text message
    to a `Goodbye` message:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用中更改一些代码，例如，将`Hello`文本消息更改为`Goodbye`消息：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click on the **Debug** button with the thunderbolt. Since you changed the code
    in a method, Android Studio will do a hot swap. You will notice a flicker while
    the current activity restarts.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击带有闪电的**调试**按钮。由于你更改了方法中的代码，Android Studio将执行热插拔。你会在当前活动重启时注意到闪烁。
- en: 'When the hot swap is finished, a message is displayed in the bottom part of
    Android Studio, as you can see in the next screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当热插拔完成后，Android Studio底部部分会显示一条消息，如下一张截图所示：
- en: '![Instant run](img/B05459_08_17.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_17.jpg)'
- en: 'As you can read in the message, the code changes were applied and the current
    activity was restarted. Type a name and click on `ACCEPT`. The text message is
    the `Goodbye` one:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如消息中所示，代码更改已应用，当前活动已重启。输入一个名称并点击`接受`。文本消息现在是`Goodbye`：
- en: '![Instant run](img/B05459_08_18.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_18.jpg)'
- en: 'Disable the **Restart activity on code changes** option from the settings to
    observe the differences. Change the code back to the `Hello` text message and
    debug the app. There is no flicker now and, when the hot swap is finished, the
    message displayed in Android Studio is now different:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从设置中禁用**代码更改时重启活动**选项以观察差异。将代码改回`Hello`文本消息并调试应用。现在没有闪烁，当热插拔完成后，Android Studio中显示的消息现在不同：
- en: '![Instant run](img/B05459_08_19.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_19.jpg)'
- en: 'When the hot swap is finished, a message is also displayed in the emulator,
    like in the following screenshot. In this case, the message shown is: *Applied
    code changes without activity restart*.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当热插拔完成后，模拟器中也会显示一条消息，如下一张截图所示。在这种情况下，显示的消息是：*应用代码更改，未重启活动*。
- en: '![Instant run](img/B05459_08_20.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_20.jpg)'
- en: 'Now change a resource, for example, change the hint of the `EditText` to the
    following one:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更改一个资源，例如，将`EditText`的提示更改为以下内容：
- en: '[PRE3]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Click on the **Debug** button with the thunderbolt. Since you changed a resource,
    Android Studio will do a warm swap this time. You will notice that the current
    activity restarts again. The same message displays in the bottom part of Android
    Studio:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 点击带有闪电的**调试**按钮。由于你更改了一个资源，这次Android Studio将执行热交换。你会注意到当前活动再次重启。底部部分显示相同的消息：
- en: '![Instant run](img/B05459_08_21.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![即时运行](img/B05459_08_21.jpg)'
- en: If you want to disable instant run completely, you can do it from the settings
    screen by unmarking the **Enable Instant Run to hot swap code/resource changes
    on deploy (default enabled)** option.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想完全禁用即时运行，你可以从设置屏幕中通过取消勾选**启用即时运行以在部署时热交换代码/资源更改（默认启用）**选项来实现。
- en: Android Device Monitor
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android设备监控器
- en: The DDMS is a more advanced debugging tool available in the SDK. The DDMS can
    be accessed from Android Studio through the **Android Device Monitor** tool. This
    tool is able to monitor both a real device and the emulator.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: DDMS是SDK中提供的更高级的调试工具。DDMS可以通过Android Studio中的**Android设备监控器**工具访问。该工具能够监控真实设备和模拟器。
- en: To open the DDMS perspective, navigate to **Tools** | **Android** | **Android
    Device Monitor**. You can also click on the Android Device Monitor icon from the
    toolbar. A new window will be opened with the DDMS perspective.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开DDMS视角，导航到**工具** | **Android** | **Android设备监控器**。您也可以从工具栏中点击Android设备监控器图标。将打开一个新窗口，其中包含DDMS视角。
- en: In the left part of the window, the list of connected devices is shown. Currently,
    just our virtual device is listed. In the **Devices** section, the list of the
    processes running on each device is also presented. We should be able to locate
    our application in the processes of the device we launched before. From the toolbar
    of the **Devices** section, we can stop a process using the Stop sign icon. We
    can also take a screen capture of the virtual device by clicking on the Camera
    icon. Some of the other options will be explained later.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的左侧部分，显示了连接设备的列表。目前，只列出了我们的虚拟设备。在**设备**部分，也展示了每个设备上运行的进程列表。我们应该能够定位到我们在之前启动的设备上的应用程序。从**设备**部分的工具栏中，我们可以使用停止标志图标停止一个进程。我们还可以通过点击相机图标来对虚拟设备进行屏幕截图。其他一些选项将在稍后解释。
- en: 'In the right part of the window, detailed information about the device is provided.
    This information is divided into seven tabs: **Threads**, **Heap**, **Allocation
    Tracker**, **Network Statistics**, **File Explorer**, **Emulator Control**, and
    **System Information**. **LogCat**, which has also been integrated in the DDMS
    perspective, is placed at the bottom part of the window.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口的右侧部分，提供了有关设备的详细信息。这些信息分为七个标签页：**线程**、**堆**、**分配跟踪器**、**网络统计**、**文件资源管理器**、**模拟器控制**和**系统信息**。DDMS视角中已集成的**日志输出**位于窗口的底部部分。
- en: Threads
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: 'The **Threads** tab displays the list of threads that belong to the selected
    process. Select our application process from the **Devices** section. The process
    is identified by the package name, in this case `com.example.myapplication`, click
    on the **Update Threads** icon button from the toolbar of the **Devices** section
    and the threads will be loaded in the content of the tab:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程**标签显示属于所选进程的线程列表。从**设备**部分选择我们的应用程序进程。进程通过包名标识，在本例中为`com.example.myapplication`，然后从**设备**部分的工具栏中点击**更新线程**图标按钮，线程将被加载到标签页的内容中：'
- en: '![Threads](img/B05459_08_22.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![线程](img/B05459_08_22.jpg)'
- en: The first columns are the IDs of the threads. The **Status** column indicates
    the thread state, **utime** indicates the total time spent by the thread executing
    the user code, **stime** indicates the total time spent by the thread executing
    system code, and **Name** indicates the name of the thread. The threads that interest
    us are those that spend time executing our user code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列是线程的ID。**状态**列表示线程的状态，**utime**表示线程执行用户代码所花费的总时间，**stime**表示线程执行系统代码所花费的总时间，而**名称**表示线程的名称。我们感兴趣的线程是那些花费时间执行我们用户代码的线程。
- en: This **Threads** tool is useful if we create threads in our application apart
    from the main thread. We can check if they are being executed at a certain point
    of the application and whether their execution time is moderate or not.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在应用程序中创建除主线程之外的线程，这个**线程**工具很有用。我们可以检查它们是否在应用程序的某个点上执行，以及它们的执行时间是否适中。
- en: Method profiling
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法分析
- en: 'Method profiling is a tool to measure the performance of methods execution
    in the selected process. The measured parameters are the number of calls and the
    CPU time spent while executing. There are the following two types of spent time:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 方法分析是一种测量所选进程中方法执行性能的工具。测量的参数是调用次数和执行过程中所花费的CPU时间。有以下两种类型的时间消耗：
- en: '**Exclusive time**: This is the time spent in the execution of a method.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独占时间**：这是方法执行所花费的时间。'
- en: '**Inclusive time**: This is the total time spent on the execution of a method.
    This measure includes the time spent by any called methods inside the method.
    These called functions are known as its **children methods**.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含时间**：这是方法执行所花费的总时间。这个度量包括方法内部任何被调用的方法所花费的时间。这些被调用的函数被称为其**子方法**。'
- en: To collect the method profiling data, select our application process from the
    **Devices** section and click on the **Start Method Profiling** icon from the
    toolbar of the **Devices** section, next to the **Update Threads** icon. A dialog
    to select the profiling option that you prefer is displayed. **Sample based profiling**
    profiles with less runtime performance impact using a sampling frequency, which
    can be configured. Sample-based profiling is available in Android 4.4 and later.
    **Trace based profiling** profiles the entry and exit of all the methods.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要收集方法分析数据，从**设备**部分选择我们的应用程序进程，并点击**设备**部分的工具栏中的**开始方法分析**图标，紧邻**更新线程**图标。将显示一个对话框，让您选择您喜欢的分析选项。**基于样本的分析**使用采样频率进行分析，这种分析对运行时性能的影响较小，可以进行配置。基于样本的分析在Android
    4.4及更高版本中可用。**基于跟踪的分析**分析所有方法的进入和退出。
- en: Perform some actions in the application; for example, in our example application,
    type a name and click on the **Accept** button in order to execute the `onAcceptClick`
    method of the main activity. Stop the method profiling by clicking on the **Stop
    Method Profiling** icon button.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中执行一些操作；例如，在我们的示例应用程序中，输入一个名称并点击**接受**按钮以执行主活动的`onAcceptClick`方法。通过点击**停止方法分析**图标按钮来停止方法分析。
- en: When the method profiling is stopped, a new tab with the resultant trace is
    opened in the DDMS perspective. On the top of this new tab, the method calls are
    represented in a time graph; each row belongs to a thread. On the bottom of the
    trace, the summary of the time spent in a method is represented in a table.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法分析停止时，在DDMS视图中打开一个新的标签，显示结果跟踪。在新标签的顶部，方法调用以时间图的形式表示；每一行属于一个线程。在跟踪的底部，方法花费的时间总结以表格形式表示。
- en: 'Order the methods by their name to search for our `onAcceptClick` method (`com.example.myapplication.MainActivity.onAcceptClick`).
    Click on it to expand the detailed information about its execution. Now, note
    the following facts:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 按名称排序方法以搜索我们的`onAcceptClick`方法（`com.example.myapplication.MainActivity.onAcceptClick`）。点击它以展开其执行的详细信息。现在，注意以下事实：
- en: The children methods called inside the `onAcceptClick` method are listed. We
    can see the `EditText.getText` method, the `Activity.findViewById` method, and
    the `TextView.setText` method, which we indeed directly call inside the method,
    as shown in the next screenshot.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`onAcceptClick`方法内部调用的子方法列出来。我们可以看到`EditText.getText`方法、`Activity.findViewById`方法和`TextView.setText`方法，我们确实在方法内部直接调用了这些方法，如下一张截图所示。
- en: The number of calls is detailed in the **Calls/Total** column. For example,
    we can see that the `Activity.findViewById` method is called twice (**2/2** value)—one
    call to find the `TextView` object and a second call to find the `EditText` object.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用/总数**列详细说明了调用次数。例如，我们可以看到`Activity.findViewById`方法被调用了两次（**2/2**值）——一次用于找到`TextView`对象，另一次用于找到`EditText`对象。'
- en: The **Exclusive time** columns have no values for the parent or children methods
    due to their own definition of this type of measured time:![Method profiling](img/B05459_08_23.jpg)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独占时间**列对于父或子方法没有值，因为它们自己定义了这种测量时间的类型：![方法分析](img/B05459_08_23.jpg)'
- en: Method profiling is very useful to detect methods that spend too much time on
    their execution and to subsequently optimize them. We can identify the most expensive
    methods to avoid unnecessary calls to them.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 方法分析非常有用，可以检测执行时间过长的方法，并随后对其进行优化。我们可以识别最昂贵的操作，以避免对它们进行不必要的调用。
- en: Heap
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆
- en: The **Heap** tab displays the heap memory usage information and the statistics
    of the selected process. Select the application process and click on the **Update
    Heap** icon button from the toolbar of the **Devices** section to enable it. The
    heap information is shown after a **garbage collector** (**GC**) execution. To
    force it, click on the **Cause GC** button or the garbage icon from the toolbar
    of the **Devices** section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆**标签显示堆内存使用信息和所选进程的统计信息。选择应用程序进程，并从**设备**部分的工具栏中点击**更新堆**图标按钮来启用它。垃圾收集器（**GC**）执行后，将显示堆信息。要强制执行，请点击**触发GC**按钮或从**设备**部分的工具栏中的垃圾图标。'
- en: 'The first table displays the summary of the heap usage: the total size, the
    allocated space, the free space, and the number of allocated objects. The **Stats**
    table gives the following detail of the objects allocated in the heap by type:
    the number of objects (**Count** column), the total size of those objects (**Total
    Size** column), the size of the smallest (**Smallest** column) and largest objects
    (**Largest** column), the median size (**Median** column), and the average size
    (**Average** column). Select one of the types to load the bottom bar graph.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张表格显示了堆使用的摘要：总大小、已分配空间、空闲空间和已分配对象的数量。**统计**表格提供了堆中按类型分配的对象的以下详细信息：对象数量（**计数**列）、这些对象的总大小（**总大小**列）、最小对象的大小（**最小**列）和最大对象的大小（**最大**列）、中值大小（**中值**列）和平均大小（**平均**列）。选择一种类型以加载底部的条形图。
- en: 'The graph shows the count of the objects of a type by size, in bytes. If we
    right-click on the graph, we can change its properties (title, colors, font, labels,
    and so on) and save it as an image in the PNG format:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示了按大小（以字节为单位）计数的对象数量。如果我们右键单击图表，我们可以更改其属性（标题、颜色、字体、标签等）并将其保存为PNG格式的图像：
- en: '![Heap](img/B05459_08_24.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![堆](img/B05459_08_24.jpg)'
- en: Allocation Tracker
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配跟踪器
- en: The **Allocation Tracker** tab displays the memory allocations of the selected
    process. Select the application process and click on the **Start Tracking** button
    to start tracking the memory information. Then, click on the **Get Allocations**
    button to get the list of allocated objects.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**分配跟踪器**选项卡显示了所选进程的内存分配。选择应用程序进程并点击**开始跟踪**按钮以开始跟踪内存信息。然后，点击**获取分配**按钮以获取已分配对象的列表。'
- en: We can use the filter on the top of the tab to filter the objects allocated
    in our own classes. Type our package name `com.example.myapplication` in the filter.
    For each object, the table shows its allocation size (**Allocation Size**), the
    thread (**Thread**), the object or class (**Allocated Class**), and the method
    in which the object was allocated (**Allocated in**). Click on any object to see
    more information, for example, the line number that allocated it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用选项卡顶部的过滤器来过滤我们自己的类中分配的对象。在过滤器中输入我们的包名`com.example.myapplication`。对于每个对象，表格显示了其分配大小（**分配大小**）、线程（**线程**）、对象或类（**分配类**）以及对象被分配的方法（**分配在**）。点击任何对象以查看更多信息，例如，分配它的行号。
- en: 'As you can see in the next screenshot, a `java.lang.StringBuilder` object was
    allocated in the `onAcceptClick` of the main activity. In the bottom part, you
    can check the details of its allocation:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在下一张截图中所见，在主活动的`onAcceptClick`中分配了一个`java.lang.StringBuilder`对象。在底部部分，您可以检查其分配的详细信息：
- en: '![Allocation Tracker](img/B05459_08_25.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![分配跟踪器](img/B05459_08_25.jpg)'
- en: Finally, click on the **Stop Tracking** button.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击**停止跟踪**按钮。
- en: The allocation tracker is very useful to examine the objects that are being
    allocated when doing certain interactions in our application, in order to improve
    memory usage.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 分配跟踪器对于检查我们在应用程序中进行某些交互时分配的对象非常有用，以便改进内存使用。
- en: Network Statistics
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络统计
- en: The **Network Statistics** tab displays how our application uses the network's
    resources. To get the network statistics of any application that uses the network,
    click on the **Start** button. The data transfers will begin to appear in the
    graph.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络统计**选项卡显示了我们的应用程序如何使用网络资源。要获取任何使用网络的网络统计信息，请点击**开始**按钮。数据传输将开始在图表中显示。'
- en: The network statistics are useful to optimize the network requests in our code
    and control the data transferred at a certain point of the execution.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 网络统计信息对于优化我们代码中的网络请求和控制执行过程中的数据传输非常有用。
- en: File Explorer
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件资源管理器
- en: The **File Explorer** tab exposes the whole filesystem of the device. We can
    examine the size, date, or permissions of each element. Navigate to `/data/app/`
    to search for our `com.example.myapplication.apk` application package file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件资源管理器**选项卡展示了设备的整个文件系统。我们可以检查每个元素的大小、日期或权限。导航到`/data/app/`以搜索我们的`com.example.myapplication.apk`应用程序包文件。'
- en: Emulator Control
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟器控制
- en: 'The **Emulator Control** tab allows us to emulate some special states or activities
    in the virtual device. We can test our application in different environments and
    situations to check whether it behaves as expected. If our application has features
    that depend on the device''s physical location, we can use mock locations. Some
    of these special states are:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟控制**选项卡允许我们在虚拟设备中模拟一些特殊状态或活动。我们可以在不同的环境和情况下测试我们的应用程序，以检查其是否按预期运行。如果我们的应用程序具有依赖于设备物理位置的功能，我们可以使用模拟位置。以下是一些这些特殊状态：'
- en: '**Telephony Status**: This allows you to choose the voice and data status and
    its speed and latency'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话状态**：此功能允许您选择语音和数据状态及其速度和延迟'
- en: '**Telephony Actions**: This is used to simulate an incoming call or SMS'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电话操作**：此功能用于模拟来电或短信'
- en: '**Location Controls**: This is used to set the geolocation of the device'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置控制**：此功能用于设置设备的地理位置'
- en: System Information
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统信息
- en: The **System Information** tab presents the frame render time, total CPU load,
    and total memory usage of the device as graphs. We can search for our application
    and easily compare it with the rest of the processes running on the device.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**系统信息**选项卡以图表形式显示了设备的帧渲染时间、总CPU负载和总内存使用情况。我们可以搜索我们的应用程序，并轻松地将其与设备上运行的其余进程进行比较。'
- en: We can change the properties of the graphs such as colors, font, and title and
    we can save them as images in PNG format. To open these options, right-click on
    the graph elements.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改图表的属性，如颜色、字体和标题，并将它们保存为PNG格式的图像。要打开这些选项，请右键单击图表元素。
- en: 'Open the CPU load and save the graph while our application is running in the
    foreground. Then, close the application and update the CPU load by clicking on
    the **Update from Device** button. Note the difference between both graphs and
    the growth of the idle percentage, as shown in the following screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序在前台运行时，打开CPU负载并保存图表。然后，关闭应用程序，通过单击**从设备更新**按钮来更新CPU负载。注意两个图表之间的差异以及空闲百分比的增长，如下面的截图所示：
- en: '![System Information](img/B05459_08_26.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![系统信息](img/B05459_08_26.jpg)'
- en: Hierarchy View
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层次视图
- en: 'Android Device Monitor contains a second perspective apart from the DDMS—the
    **Hierarchy View**. On the top bar of the Android Device, you can change from
    one perspective to the other. The two options in the top bar are shown in the
    next screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Android设备监视器除了DDMS之外还包含第二个视角——**层次视图**。在Android设备顶部栏中，您可以从一个视角切换到另一个视角。顶部栏中的两个选项在下一张截图中显示：
- en: '![Hierarchy View](img/B05459_08_27.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![层次视图](img/B05459_08_27.jpg)'
- en: 'Open the **Hierarchy View** perspective and select your app from the left-side
    list. In the left-side panel, click on the following icon (the **Load the view
    hierarchy into the tree view** action):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**层次视图**视角，并从左侧列表中选择您的应用程序。在左侧面板中，单击以下图标（**将视图层次结构加载到树视图中**操作）：
- en: '![Hierarchy View](img/B05459_08_28.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![层次视图](img/B05459_08_28.jpg)'
- en: 'The view hierarchy is loaded as shown in the next screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 视图层次结构按如下截图所示加载：
- en: '![Hierarchy View](img/B05459_08_29.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![层次视图](img/B05459_08_29.jpg)'
- en: 'There are three different panels:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个不同的面板：
- en: '**Tree Overview**: This panel shows the overview of the complete view hierarchy.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树形概览**：此面板显示了完整视图层次结构的概览。'
- en: '**Tree View**: This panel shows in detail a specific area of the view hierarchy.
    At the bottom of the hierarchy, we can find the `TextView` with the ID `textView_greeting`,
    the `EditText` with the ID `editText_name`, and the `Button` with the ID `button_accept`.
    The parent of all of them is the `RelativeLayout`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**树形视图**：此面板详细显示了视图层次结构的一个特定区域。在层次结构的底部，我们可以找到ID为`textView_greeting`的`TextView`，ID为`editText_name`的`EditText`，以及ID为`button_accept`的`Button`。它们的父视图是`RelativeLayout`。'
- en: '**Layout View**: This panel shows the layout view.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局视图**：此面板显示布局视图。'
- en: 'If you select one of the view elements, you can see its details. The following
    screenshot shows the details of the `button_accept` button:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择其中一个视图元素，您可以看到其详细信息。以下截图显示了`button_accept`按钮的详细信息：
- en: '![Hierarchy View](img/B05459_08_30.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![层次视图](img/B05459_08_30.jpg)'
- en: Open the **View Properties** tab from the left-side panel. You can check the
    properties of the button, such as the `mText` property, the value of which is
    `Accept`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从左侧面板打开**视图属性**选项卡。您可以检查按钮的属性，例如`mText`属性，其值为`Accept`。
- en: On the top of the **Tree View** panel, there are some actions like saving the
    tree view as a PNG image or capturing the window layers as a Photoshop file.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在**树视图**面板的顶部，有一些操作，比如将树视图保存为PNG图像或捕获窗口层为Photoshop文件。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now you know the different launch options for your application as well as how
    to use the console and the **LogCat** for debugging. We also saw how to debug
    an application and interpret the data provided by the DDMS in each of the tabs
    available.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了你应用程序的不同启动选项，以及如何使用控制台和**LogCat**进行调试。我们还看到了如何调试应用程序以及如何解释DDMS在每个可用标签页提供的数据。
- en: In the next chapter, we will prepare our application for its release using Android
    Studio. First, you will learn about the necessary steps to prepare the application
    before building it in the release mode. You will also learn how applications are
    compressed in `APK` files and how to generate your own `APK` file. Finally, you
    will learn how to get your certificate as a developer and how to generate a signed
    `APK` file, making it ready for release.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Android Studio为我们的应用程序发布做准备。首先，你将学习在发布模式下构建应用程序之前需要准备应用程序的必要步骤。你还将了解应用程序是如何在`APK`文件中压缩的，以及如何生成你自己的`APK`文件。最后，你将学习如何作为开发者获取你的证书以及如何生成一个已签名的`APK`文件，使其准备好发布。
