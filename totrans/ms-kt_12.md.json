["```kt\n    mockWebServer = \"5.0.0-alpha.2\"\n    coroutinesTest = \"1.7.3\"\n    truth = \"1.1.5\"\n    ```", "```kt\n    test-mock-webserver = { module = \"com.squareup.okhttp3:mockwebserver\", version.ref = \"mockWebServer\" }\n    test-coroutines = { module = \"org.jetbrains.kotlinx:kotlinx-coroutines-test\", version.ref = \"coroutinesTest\" }\n    test-truth = { module = \"com.google.truth:truth\", version.ref = \"truth\" }\n    ```", "```kt\n    test = [\"test-mock-webserver\", \"test-coroutines\", \"test-truth\"]\n    ```", "```kt\n    testImplementation(libs.bundles.test)\n    ```", "```kt\n    [\n      {\n        \"_id\": \"eLjLV4oegWGFv9MH\",\n        \"mimetype\": \"image/png\",\n        \"size\": 39927,\n        \"tags\": [\n          \"cute\",\n          \"pyret\"\n        ]\n      },\n      {\n        \"_id\": \"PA2gYEbMCzaiDrWv\",\n        \"mimetype\": \"image/jpeg\",\n        \"size\": 59064,\n        \"tags\": [\n          \"cute\",\n          \"best\",\n          \"siberian\",\n          \"fluffy\"\n        ]\n      },\n      {\n        \"_id\": \"8PKU6iXscrogXrHm\",\n        \"mimetype\": \"image/jpeg\",\n        \"size\": 60129,\n        \"tags\": [\n          \"cute\",\n          \"fat\",\n          \"ragdoll\",\n          \"beautiful\",\n          \"sleeping\"\n        ]\n      }\n    ]\n    ```", "```kt\n    import com.google.common.io.Resources\n    import okhttp3.mockwebserver.Dispatcher\n    import okhttp3.mockwebserver.MockResponse\n    import okhttp3.mockwebserver.RecordedRequest\n    import java.io.File\n    import java.net.HttpURLConnection\n    class MockRequestDispatcher : Dispatcher() {\n        override fun dispatch(request: RecordedRequest): MockResponse {\n            return when (request.path) {\n                \"/cats?tag=cute\" -> {\n                    MockResponse()\n                        .setResponseCode(HttpURLConnection.HTTP_OK)\n                        .setBody(getJson(\"catsresponse.json\"))\n                }\n                else -> throw IllegalArgumentException(\"Unknown Request Path ${request.path}\")\n            }\n        }\n        private fun getJson(path: String): String {\n            val uri = Resources.getResource(path)\n            val file = File(uri.path)\n            return String(file.readBytes())\n        }\n    }\n    ```", "```kt\n    class CatsAPITest {\n        private lateinit var mockWebServer: MockWebServer\n        private lateinit var catsAPI: CatsAPI\n        @Before\n        fun setup() {\n            // Setup MockWebServer\n            mockWebServer = MockWebServer()\n            mockWebServer.dispatcher = MockRequestDispatcher()\n            mockWebServer.start()\n            // Setup Retrofit\n            val json = Json {\n                ignoreUnknownKeys = true\n                isLenient = true\n            }\n            val retrofit = Retrofit.Builder()\n                .baseUrl(mockWebServer.url(\"/\"))\n                .addConverterFactory(\n                    json.asConverterFactory(\n                        contentType = \"application/json\".toMediaType()\n                    )\n                )\n                .build()\n            catsAPI = retrofit.create(CatsAPI::class.java)\n        }\n        @Test\n        fun `fetchCats() returns a list of cats`() = runTest {\n            val response = catsAPI.fetchCats(\"cute\")\n            assert(response.isSuccessful)\n        }\n        @After\n        @Throws(IOException::class)\n        fun tearDown() {\n            mockWebServer.shutdown()\n        }\n    }\n    ```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass CatDaoTest {\n    private lateinit var database: CatDatabase\n    private lateinit var catDao: CatDao\n    @Before\n    fun createDatabase() {\n        database = Room.inMemoryDatabaseBuilder(\n            ApplicationProvider.getApplicationContext(),\n            CatDatabase::class.java\n        ).allowMainThreadQueries().build()\n        catDao = database.catDao()\n    }\n    @After\n    fun closeDatabase() {\n        database.close()\n    }\n}\n```", "```kt\n    @Test\n    fun testInsertAndReadCat() = runTest {\n        // Given a cat\n        val cat = CatEntity(\n            id = \"1\",\n            owner = \"John Doe\",\n            tags = listOf(\"cute\", \"fluffy\"),\n            createdAt = \"2021-07-01T00:00:00.000Z\",\n            updatedAt = \"2021-07-01T00:00:00.000Z\",\n            isFavorite = false\n        )\n        // Insert the cat to the database\n        catDao.insert(cat)\n        // Then the cat is in the database\n        val cats = catDao.getCats()\n        assert(cats.first().contains(cat))\n    }\n    ```", "```kt\n    @Test\n    fun testAddCatToFavorites() = runTest {\n        // Given a cat\n        val cat = CatEntity(\n            id = \"1\",\n            owner = \"John Doe\",\n            tags = listOf(\"cute\", \"fluffy\"),\n            createdAt = \"2021-07-01T00:00:00.000Z\",\n            updatedAt = \"2021-07-01T00:00:00.000Z\",\n            isFavorite = false\n        )\n        // Insert the cat to the database\n        catDao.insert(cat)\n        // Favorite the cat\n        catDao.update(cat.copy(isFavorite = true))\n        // Assert that the cat is in the favorite list\n        val favoriteCats = catDao.getFavoriteCats()\n        assert(favoriteCats.first().contains(cat.copy(isFavorite = true)))\n    }\n    ```", "```kt\n    mockk = \"1.13.3\"\n    ```", "```kt\n    test-mockk = { module = \"io.mockk:mockk\", version.ref = \"mockk\" }\n    ```", "```kt\n    test = [\"test-mock-webserver\", \"test-coroutines\", \"test-truth\", \"test-mockk\"]\n    ```", "```kt\n    class PetsViewModelTest {\n        private val petsRepository = mockk<PetsRepository>(relaxed = true)\n        private lateinit var petsViewModel: PetsViewModel\n        @Before\n        fun setup() {\n            Dispatchers.setMain(Dispatchers.Unconfined)\n            petsViewModel = PetsViewModel(petsRepository)\n        }\n        @After\n        fun tearDown() {\n            Dispatchers.resetMain()\n        }\n    }\n    ```", "```kt\n@Test\nfun testGetPets() = runTest {\n    val cats = listOf(\n        Cat(\n            id = \"1\",\n            owner = \"John Doe\",\n            tags = listOf(\"cute\", \"fluffy\"),\n            createdAt = \"2021-07-01T00:00:00.000Z\",\n            updatedAt = \"2021-07-01T00:00:00.000Z\",\n            isFavorite = false\n        )\n    )\n    // Given\n    coEvery { petsRepository.getPets() } returns flowOf(cats)\n    // When\n    petsViewModel.getPets()\n    coVerify { petsRepository.getPets() }\n    // Then\n    val uiState = petsViewModel.petsUIState.value\n    assertEquals(cats, uiState.pets)\n}\n```", "```kt\nElevatedCard(\n    modifier = Modifier\n        .fillMaxWidth()\n        .padding(6.dp)\n        .testTag(\"PetListItemCard\"),\n) {\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .padding(bottom = 10.dp)\n            .testTag(\"PetListItemColumn\")\n            .clickable {\n                onPetClicked(cat)\n            }\n    ) {\n        AsyncImage(\n            model = \"https://cataas.com/cat/${cat.id}\",\n            contentDescription = \"Cute cat\",\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(200.dp),\n            contentScale = ContentScale.FillWidth\n        )\n        Row(\n            modifier = Modifier\n                .padding(start = 6.dp, end = 6.dp)\n                .fillMaxWidth(),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            FlowRow(\n                modifier = Modifier\n                    .padding(start = 6.dp, end = 6.dp)\n            ) {\n                repeat(cat.tags.size) {\n                    SuggestionChip(\n                        modifier = Modifier\n                            .padding(start = 3.dp, end = 3.dp),\n                        onClick = { },\n                        label = {\n                            Text(text = cat.tags[it])\n                        }\n                    )\n                }\n            }\n            Icon(\n                modifier = Modifier\n                    .testTag(\"PetListItemFavoriteIcon\")\n                    .clickable {\n                        onFavoriteClicked(cat.copy(isFavorite = !cat.isFavorite))\n                    },\n                imageVector = if (cat.isFavorite) {\n                    Icons.Default.Favorite\n                } else {\n                    Icons.Default.FavoriteBorder\n                },\n                contentDescription = \"Favorite\",\n                tint = if (cat.isFavorite) {\n                    Color.Red\n                } else {\n                    Color.Gray\n                }\n            )\n        }\n    }\n}\n```", "```kt\nclass PetListItemTest {\n    @get:Rule\n    val composeTestRule = createComposeRule()\n    @Test\n    fun testPetListItem() {\n        with(composeTestRule) {\n            setContent {\n                PetListItem(\n                    cat = Cat(\n                        id = \"1\",\n                        owner = \"John Doe\",\n                        tags = listOf(\"cute\", \"fluffy\"),\n                        createdAt = \"2021-07-01T00:00:00.000Z\",\n                        updatedAt = \"2021-07-01T00:00:00.000Z\",\n                        isFavorite = false\n                    ),\n                    onPetClicked = { },\n                    onFavoriteClicked = {})\n            }\n            // Assertions using tags\n            onNodeWithTag(\"PetListItemCard\").assertExists()\n            onNodeWithTag(\"PetListItemColumn\").assertExists()\n            onNodeWithTag(\"PetListItemFavoriteIcon\").assertExists()\n            // Assertions using text\n            onNodeWithText(\"fluffy\").assertIsDisplayed()\n            onNodeWithContentDescription(\"Favorite\").assertIsDisplayed()\n            onNodeWithContentDescription(\"Cute cat\").assertIsDisplayed()\n            // Actions\n            onNodeWithTag(\"PetListItemFavoriteIcon\").performClick()\n        }\n    }\n}\n```"]