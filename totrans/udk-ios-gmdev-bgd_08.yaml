- en: Chapter 8. Publishing and Monetizing Your Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have our game in a finished state with a fully featured level and we
    have playtested it and refined it on the computer, but at some point you''re going
    to want to get the game on your iOS device. This chapter will be all about that:
    getting the game first on our own iOS device, and then going all the way to publishing
    on the App Store.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the process of getting your game onto an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go through the process of deploying the game on your own iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize our game's icons when viewed from our device as well as the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the playtesting process and learn how to do playtesting sessions of
    your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the current royalties model Epic Games has in place for UDK-developed
    iOS titles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to link Game Center into our games for a fuller social experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore using in-game ads for monetization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go through the process of uploading your game on the iTunes store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a lot of stuff to go through, so at the very least I will give you an overview
    of the most used options available and what UDK has in place to make things happen.
    So with that, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Before the magic happens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very soon we will have your game running on your device and it will be fantastic,
    but before we get to that point, there are a few things we have to make sure of
    at first. First of all, you will need to own an iOS device (which we will assume
    you have) in order to test it out first. You will need to set up provisioning
    for your game, which we will discuss later, and finally, you will also need to
    have a developer account, which we will talk about first.
  prefs: []
  type: TYPE_NORMAL
- en: Registering as an iOS developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to put a game in the App Store using UDK you must first be a registered
    iOS developer. The process is relatively painless, however at the time of this
    writing Apple charges $99 a year for the privilege of being a developer. If at
    any time you let your subscription end, all of the apps you've created will be
    removed as well. If you are not a developer yet, you will need to register at
    [https://developer.apple.com/programs/ios/](http://https://developer.apple.com/programs/ios/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering as an iOS developer](img/image_1901_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On that page you will see a button that says **Enroll Now**. From there, Apple
    has done a good job to make it as simple as possible by filling information out
    and following the menus. Upon completion, you will have a developer account.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up provisioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to even test games on an iOS device you are required to have the correct
    generation of keys, certificates, and mobile profiles which is what is called
    **provisioning**. Apple requires that any device that runs any app must be set
    up with a provisioning profile. The **Unreal iOS Configuration Wizard** makes
    the process of setting up the provisioning process easier, though it still requires
    the use of the iOS provisioning portal on Apple's developer website for certain
    aspects.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—creating new provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get our game on our own iOS device, we need to create a provisioning
    profile. With that in mind, let's get it started!
  prefs: []
  type: TYPE_NORMAL
- en: Connect your iOS device to your computer via USB. Make sure you have enough
    free space on your device to install the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To the left-hand side of the **Mobile Previewer** button, you should see an
    icon that looks like a mobile device with a red arrow pointing upwards. If this
    is the first time you are doing this, the **Unreal iOS Configuration Wizard**
    should come up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If, for any reason, it doesn''t appear, you can also find it in the `\Binaries\IPhone`
    folder inside your UDK Installation with the name `IPhonePackager.exe`. You can
    also run it from the **Unreal Frontend**, but that will be discussed later in
    the chapter. This is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating new provisioning](img/image_1901_08_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: From the menu click on the **Create certificate request and a key pair..**.
    button to bring up a new menu. Fill in the fields with the information requested,
    making sure to use the e-mail you registered as an iOS developer in the **Email
    Address** field and the **Common Name** being your first and last name or your
    company name. As you finish something, you will notice green checkmarks showing
    up as shown in the following screenshot:![Time for action—creating new provisioning](img/image_1901_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Generate a key pair..**. button to create a key pair file. This
    will open up a file-saving dialog, which will allow you to save the file in a
    known folder. As this will be the same for all of your projects it would be a
    good idea to place it in your UDK installation folder in something like `C:\UDK\Developer
    Files`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterwards click on the **Generate Certificate Request** button which will also
    create a file for you to save. Save it in the same directory you created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While this method will work now in allowing us to run the game on our own iOS
    device, we will be required to import the certificate file into our keychain on
    a Mac computer when you want to publish your app on the App Store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The following steps assume you have Firefox or Safari as your web browser. While
    it may work fine using others, if you have a problem I would use either of these
    two options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up your web browser and visit the Apple developer's site at [https://developer.apple.com/](http://https://developer.apple.com/)
    and click on the **iOS Dev Center** option. The following screenshot shows this:![Time
    for action—creating new provisioning](img/image_1901_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Log in** button and enter in your credentials. When the **iOS
    Dev Center** comes up, click on the **iOS Provisioning Portal** link on the toolbar
    at right-hand side as shown in the following screenshot:![Time for action—creating
    new provisioning](img/image_1901_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On **the iOS Provisioning Portal** page, there will be a picture of an iPhone
    beside some text with a button underneath it saying **Launch Assistant**. Click
    on that button. The following screen will appear:![Time for action—creating new
    provisioning](img/image_1901_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new setup should start. Click on the **Continue** button to start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point you need to create an **App ID**, which is an identifier that
    will allow iOS to communicate with your app, such as for push notifications. You
    will need to also choose a display name for the app, which is the readable name
    which will be used in various places. Once you type an **App ID**, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to specify what device you will be playing the game on. Enter
    a description for the device, such as `iPad`. Underneath you will see a place
    to enter your **Device ID**. While it is possible to obtain the **Device ID**
    using Xcode on a Mac, it may be simpler at this time to just open up **iTunes**
    and find the ID there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up **iTunes**. Click on your device to bring up its menu. From there click
    on the **Serial Number** option to change the value to show its identifier (UDID).
    After it is shown click on **Edit** | **Copy Identifier** (UDID). Refer to the
    following screenshot:![Time for action—creating new provisioning](img/image_1901_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the code into your **Device ID** property in the previous menu and hit
    **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be brought to the **Generate Certificate Signing Request** step.
    Hit continue to skip this page as we already created a **Certificate Request**
    inside of the **Configuration Wizard** earlier in step 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the **Submit Certificate Signing Request** step click on the **Browse** button
    and locate the certificate (the `.csr` file) inside the folder, where you placed
    it during step 5 and hit **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point you will be asked for a **Profile Description**. This is a name
    that will be used to identify a particular provision, such as if you had an iPhone
    and an iPad and wanted to try the game on both. With that finished, click on the
    **Generate** button. This is shown in the following screenshot:![Time for action—creating
    new provisioning](img/image_1901_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the next page fully loads, your provisioning profile will be completed.
    Once the large green checkmark appears on the bottom step, click on **Continue.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button on the next screen and save the file into the
    same place you put the other two files we created this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have completed the download, click on the **Continue** button. Click
    on **Continue** again to pass the **Download & Install Your Provisioning Profile**
    as we won't need it now, but we will when we want to submit our game to the App
    Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this step you should see **Download & Install Your Development Certificate**.
    We need this as well, so save the file into our important files' folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the file is completed, click on **Continue**. Click on **Continue** again
    to pass the **Download & Install Your Development Certificate** as we won't need
    it now, but we will when we want to submit our game to the **App Store**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue past the **Install your iOS application with Xcode** page as we will
    not be using it when creating a game with UDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point you should have completed the **Provisioning Assistant**, and
    we can click on **Done** on the next page to exit the assistant. This is shown
    in the following screenshot:![Time for action—creating new provisioning](img/image_1901_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the **Unreal iOS Configuration Wizard** go to the **New User** tab.
    Click on the **Import a mobile provision...** button to import the provisioning
    file that you saved in our important documents' folder. It should be the only
    file of its type the folder. This is shown in the following screenshot:![Time
    for action—creating new provisioning](img/image_1901_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Import a certificate...** to import the developer certificate.
    Once selected, it will ask you to import the key pair file that you made when
    generating the certificate request. Click on **OK** and select the key pair file.
    At this point, we should have two green checkmarks on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Edit Info.plist overrides...** button to open the **Customize Info.plist**
    window. Under **Bundle Display Name**, type the name you want your game to be
    on the iOS device. You will want to use a small name to make sure that it will
    fit within the space the OS will provide, something like `Urban Warrior` would
    work. In **Bundle Name** type a condensed version of the name. This is what iOS
    will use to identify the app, I used `Urban Warrior`. In **Bundle Identifier**
    type the same thing that was used in the provisioning file, as stated in the packager
    dialog. Click on **Save Changes**. This is shown in to the following screenshot:![Time
    for action—creating new provisioning](img/image_1901_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all of the checkmarks completed, click on the **Ready to Package** button.
    If you got to this page by clicking on the icon I mentioned earlier, the game
    should be pushed to your device after a period of time. Otherwise, click on the
    **Install on iOS device** button. After a period of time you should see a popup
    telling you that the game has been deployed. This can be seen in the following
    screenshot:![Time for action—creating new provisioning](img/image_1901_08_12.jpg)![Time
    for action—creating new provisioning](img/image_1901_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the game is pushed to your device open up your iPad and touch the icon
    of your game **Urban Warrior** as shown in the previous screenshot. You will see
    the following screenshot:![Time for action—creating new provisioning](img/image_1901_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our game is now on our very own iOS device. It took a lot of steps to get there,
    but we finally made it! Every time I get to play something that I created on a
    new console, I always get a warm feeling inside of accomplishment, and I hope
    you're feeling the same. Congratulations on getting this far, you are now officially
    an iOS Developer!
  prefs: []
  type: TYPE_NORMAL
- en: Custom Graphics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While Epic provides graphics to be used with their games being used on iOS,
    one of the easy things we can do to make our game more our own is by customizing
    the graphics shown on the iOS version of our game. iOS apps use a collection of
    different icon images of many different sizes to support the large variety of
    items that we support. Replacing these images with your own custom images will
    make it so that when you package the game, using either the **Unreal Frontend**
    or the **Install on iOS Device** command, it will use those assets. The folder
    that contains those assets would be at `UDKGame/Build/IPhone/Resources/Graphics/`.
    As of the time of writing, if you are creating a **Universal App** these are the
    possible graphics you can/should use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Image Size (px) | File Name | Used For |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 512x512 | `iTunesArtwork` | Ad Hoc iTunes |'
  prefs: []
  type: TYPE_TB
- en: '| 57x57 | `Icon.png` | App Store and the Home screen on iPhone/iPod touch |'
  prefs: []
  type: TYPE_TB
- en: '| 114x114 | `Icon@2x.png` | Home screen for iPhone 4 High Resolution |'
  prefs: []
  type: TYPE_TB
- en: '| 72x72 | `Icon-72.png` | App Store and Home screen on iPad |'
  prefs: []
  type: TYPE_TB
- en: '| 50x50 | `Icon-Small-50.png` | Spotlight on iPad |'
  prefs: []
  type: TYPE_TB
- en: '| 29x29 | `Icon-Small.png` | Settings on iPad and iPhone, and spotlight on
    iPhone |'
  prefs: []
  type: TYPE_TB
- en: '| 58x58 | `Icon-Small@2x.png` | Spotlight and settings for iPhone 4 High Resolution
    |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the latest up-to-date knowledge on the sizes for icons that you are required
    to have or would need to use for different devices visit [https://developer.apple.com/library/ios/#qa/qa2010/qa1686.html](http://https://developer.apple.com/library/ios/#qa/qa2010/qa1686.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating icons, I find it easier to start from something large and then
    work down in size, in order to not have any pixelation in my artwork. I took the
    liberty of making some sample icons that you are free to use in your own projects.
    Here''s an example of what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom Graphics](img/image_1901_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Playtesting on the device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we have played our game using the Mobile Previewer with and without
    the aid of the UDK Remote, but it is an entirely different thing to actually play
    the game on your own device. For one thing your hands are now on the screen so
    **HUD** elements that you created may be hard to see, such as the buttons we created.
    It is also a very good idea to have other people playtest your game and give you
    feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Why playtest?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Playtesting** is one of the most important things in deciding the success
    of a video game. However it is an area that is often way overlooked during the
    game creation process so I want to stress how important it is to do. Playtesters
    are the voice of how a normal person is going to react to your game. It is important
    that you take what they say seriously. They are also the people that are going
    to find and exploit anything they can get their hands on within your world, and
    you will find things that you never thought were possible in your game.'
  prefs: []
  type: TYPE_NORMAL
- en: When building your project, it is incredibly important to prototype as early
    as you can and get a feel if what you are working on is actually fun to your target
    audience. There is no secret formula to create fun (and thankfully so because
    game designers would be out of a job) but you can apply principles that you have
    learned from other products, as well as your own creativity to see if it works.
    That being said, you should playtest your game more than any other person before
    you set the game in front of your gaming group. After all, if your gaming group
    doesn't like what you're doing, chances are your App Store reviews aren't going
    to be as amazing as you think they'd be.
  prefs: []
  type: TYPE_NORMAL
- en: How to playtest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Large companies devote a large amount of resources into their playtesting, creating
    labs with cameras that record a playtester from many different angles, as well
    as recording input and player behavior, trying to turn it into a science. But,
    unlike those companies, I know for a fact that I can't afford to do that, so instead
    I go with the next best thing. There are a lot of different ways to conduct a
    playtesting session.
  prefs: []
  type: TYPE_NORMAL
- en: When I do playtesting sessions myself, I typically have a questionnaire that
    I have players fill out after they have played the game. A lot of the questions
    are circling a number from 1-10 talking about if the game was too difficult, the
    goals were hard to understand, and other assorted things that you want to figure
    out. I also leave a large blank at the end of additional thoughts, as those who
    are heavily invested will no doubt have tons of things to say to you.
  prefs: []
  type: TYPE_NORMAL
- en: For those who are still in school, I find a very easy way to get people to play
    your game is ordering a couple pizzas and giving someone a slice for playing your
    game. You could create your own website and have visitors fill out a questionnaire
    after playing your game. There are also many online communities of people who
    are always eager to try new games out and give feedback such as ModDB/IndieDB,
    at [http://www.moddb.com/](http://www.moddb.com/) and [http://www.indiedb.com/](http://www.indiedb.com/)
    though it may be an issue for getting iOS specific feedback. At the very least
    talking to friends and handing them your iPad is another way to get someone to
    play your game, though your friends and family may be biased in their reviews.
  prefs: []
  type: TYPE_NORMAL
- en: It is also very important that you have people play your game without your input.
    Most designers believe that they have covered every possible thing in their rulebook,
    but it is almost guaranteed that something has been forgotten. In level design
    it is important to see what directions that players go in and if they are being
    guided in the correct way. At no point in a game should players feel stupid. Having
    games that are not complete is a sure way of making a player feel that they just
    wasted their money on an incomplete product. There have been times that I have
    played a game that had no way to actually win if you followed the rules included.
  prefs: []
  type: TYPE_NORMAL
- en: Try to have a thick skin, and thank everyone for their feedback; not everyone
    is going to like your game, but if you see a trend forming chances are you may
    want to adjust the game. Playtesters are going to suggest changes and it will
    be your decision whether or not those changes are really worth having or not.
    There are times when it is for a player's own good or for balance's sake that
    things are the way they are. Another important thing to remember is to playtest
    often, as you need to see if the changes you made are helping or not and rinse
    and repeat until you're satisfied to publish.
  prefs: []
  type: TYPE_NORMAL
- en: Commercialization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With your project mostly finished it may be a good time to look at the possibilities
    of commercialization of your game. As this book is a beginner's book, I will not
    delve too much into specifics for implementing all of the features possible for
    these services; it would be large enough for its own book, but I will be going
    over what can be done and give some resources for any budding developer that just
    has to have *x* feature in their game.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that most of these features will require UnrealScript input of some sort
    into your game in order to implement it, and as this book does not cover UnrealScript
    you will have to do a lot of research on your own, but the links I've given are
    what I used to learn it so I feel quite certain that you can do the same as well.
  prefs: []
  type: TYPE_NORMAL
- en: Licensing UDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: UDK is free to use for non-commercial or educational purposes. If you are going
    to use the UDK for any commercial purpose, or have ads of any kind in your game
    you have to apply for a license with Epic Games at [http://www.udk.com/licensing](http://www.udk.com/licensing).
    The terms of the license as of writing is $99 up-front with a 0% royalty for the
    company's first $50,000 in revenue and 25% for all remaining gained revenue. As
    we are publishing our game on iOS, Apple takes a cut of the cost receiving 30%
    leaving you with 70% of the profits. If your app gained $100 of sales but you
    only received 70%, the royalty is calculated on the $70 that you did receive.
    And while it may seem like 25% may be a lot, if you sold your app at $1 it would
    take you selling 71,428 apps to get that mark.
  prefs: []
  type: TYPE_NORMAL
- en: In-game advertisements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Those who want to make their game free to download while still wanting to make
    a profit, could add in-game advertisements to their game. Apple has an entire
    network called **iAd** which can be added to your game with only a few lines of
    code. It is important to note that you will have to purchase a license for UDK
    in order to distribute your game with Ads and the revenue that you generate with
    those ads is revenue. For more information about adding ads to your game visit
    [http://udn.epicgames.com/Three/InGameAds.html](http://udn.epicgames.com/Three/InGameAds.html).
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the other ways to make money on your game is by having certain things
    unlocked, by making purchases after a game is purchased. An example of this could
    be access to certain levels and/or features. One thing to be careful about is
    the fact that people may complain about not getting a full version of the game
    in this way. A possible solution for this is to have in-app purchases for purely
    cosmetic things, such as a different character or outfit.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about implementing a micro-transaction system into your
    game visit [http://udn.epicgames.com/Three/MicroTransactions.html](http://udn.epicgames.com/Three/MicroTransactions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Bringing everyone together with Game Center
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Game Center** is Apple''s online gaming network. Gamers with iOS devices
    can use this service in order to compete against each other for achievements,
    play multiplayer, and even voice chat with each other.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add Game Center to your game, simply go to the `IPhoneEngine.ini` file located
    in your UDK folder at `\UDKGame\Config\IPhone\` and set the value of `bDisableGameCenter`
    to false as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: However, if you plan on using leader boards or achievements, it is a little
    more complicated as you will need to dive into UnrealScript, to implement the
    ability to get an achievement in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information visit [http://udn.epicgames.com/Three/GameCenter.html](http://udn.epicgames.com/Three/GameCenter.html).
  prefs: []
  type: TYPE_NORMAL
- en: iCloud integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple's **iCloud** is a form of storage that saves data that can be accessed
    from any iOS device that a person owns. This could be a prime way of creating
    save files for your game, saving the player's progress.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information visit [http://udn.epicgames.com/Three/CloudDocumentStorage.html](http://udn.epicgames.com/Three/CloudDocumentStorage.html).
  prefs: []
  type: TYPE_NORMAL
- en: Facebook/Twitter integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another feature that the iOS version of UDK has is the ability to tweet or post
    on your Facebook page. It can make full use of Facebook's API being able to retrieve
    your friends list and many other things. To find out more about either of these
    two things, visit [http://udn.epicgames.com/Three/TwitterIntegration.html](http://udn.epicgames.com/Three/TwitterIntegration.html)
    or [http://udn.epicgames.com/Three/FacebookIntegration.html](http://udn.epicgames.com/Three/FacebookIntegration.html)
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing our game to the world
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our game is in peak shape, and is the next big iOS hit, let's publish
    it for the world to see; or at least Apple's approval staff. At this point, you
    will be required to have a Mac computer in order to complete the process.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—requesting a Distribution Certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first action to take is to create a distribution provisioning. This is different
    from the one we created earlier because it will be used for placement on multiple
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **iOS Provisioning Portal** page on the Apple developer's site and
    instead of using the launcher click on **Certificates** on the left-hand side
    toolbar as shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Distribution** tab and request a new distribution certificate
    by clicking the **Request Certificate** button on the right-hand side of that
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll to the bottom of the page and find the `.csr` file that we created earlier
    and click the **Submit** button. We will then return to the **Distribution** tab
    from before and after a period you will see the certificate say **Issued**. This
    is shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch tabs to **Development** and back to **Distribution**. Upon coming back
    you will notice that the **Actions** tab has a download button. Click on it and
    save the file to the same place as the rest of our files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next we need to create a **Distribution Profile**. Click on the **Provisioning**
    section of the **iOS Provisioning Portal** and the **Distribution** tab in much
    the same way we did before. Click on the **New Profile** button to bring us to
    the **Create iOS Distribution Provisioning Profile** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Distribution** method at **App Store**. The **Ad Hoc** option is
    there if you are trying to distribute the app on your own, such as if you were
    creating an internal application for your business.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Profile Name** type a name to identify the profile to you in the **iOS
    Provisioning Profile**, like `Urban Warrior Provision`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Distribution Certificate** should list the certificate that we created previously.
    Under **App ID** select our app, and leave devices blank as it is only used in
    **Ad Hoc** distribution.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button and it will take you back to the **Distribution**
    tab of the **Provisioning** home page. This is shown in the following screenshot:![Time
    for action—requesting a Distribution Certificate](img/image_1901_08_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the page you will see the **Provision** with a status of **Pending**. Switch
    to the **Development** tab and back to **Distribution** and you will notice it
    will now be displayed as **Active.** Download the file to our folder of items.
    This is shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **iPhonePackager** tool by going to your `Binaries\IPhone` folder inside
    your UDK installation by double-clicking on the file `IPhonePackager.exe`. This
    is shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The program should start with the **Advanced Tools** tab highlighted. Click
    on **Provision and certificate tools...** to bring up the **Signing Tool**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, click on **Import a mobile provision...** to import the distribution
    file using the file dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next click on **Import a certificate...** and use the file dialog to locate
    your distribution certificate (probably named `ios_distribution.cer`). After that
    a message box will ask you for your key file. Click on **OK** and then select
    your key pair file. Click on **Refresh List** to see the certificate to be displayed.
    This is shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure UDK is closed and open the **Unreal Frontend** by going to your **Binaries**
    folder in your UDK installation and double-clicking on the `UnrealFrontend.exe`
    application. Make sure that the editor program is closed as well because if it
    isn't, then you are almost guaranteed to have errors in the next few steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the large button on the right-hand side side of your **Frontend** that
    says something similar to **UDKGame on PC(Shipping 32)** | **Cook/Make/Sync with
    ...** From the options in the menu, select the **IPhone** for the **Platform,
    Shipping_32** for the **Game Config, ReleaseScript** for the **Script Config**,
    and **Shipping_32** for the **Cook/Make Config**. Click on **OK** to save your
    settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are completely finished with your game, it would be a good idea to
    use the **FinalReleaseScript** option as it will run better due to removing assert
    checks and log information. Refer to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—requesting a Distribution Certificate](img/image_1901_08_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the **Mobile** section underneath the large button, change the **Packaging
    Mode** to **Distribution.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add...** button and type the name of all the levels that you want
    to have in your game clicking **Add Selected Maps** to add the map to your game.
    This is shown in the following screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the **Override Default** option is checked and select your first level
    to be your first level to play. This is shown in the following screenshot:![Time
    for action—requesting a Distribution Certificate](img/image_1901_08_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you would not like to use the **Override Default** option, you can also set
    the default level in the `DefaultEngine.ini` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click underneath the **Deploy** button and select **Step Enabled** to skip deploying
    to your device, as a distribution build can't be put on your normal device. If
    you would like to have a full build on your device, change the **Packaging Mode**
    to **Default**. This is shown in the following screenshot:![Time for action—requesting
    a Distribution Certificate](img/image_1901_08_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all of the options set, click on the arrow beside the word start and select
    **Clean and Full Recook** and wait for the commands to all execute. This is shown
    in the following screenshot:![Time for action—requesting a Distribution Certificate](img/image_1901_08_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything went well, you should have a `.ipa` file named `Distro_UDKGame`
    inside you `\Binaries\IPhone\Shipping-iphoneos\UDKGame` which you will want to
    save to a jump drive or similar, because we will need it when we move to our Mac
    computer section of this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back on Firefox/Safari, we next need to go to the **iTunes Connect** section
    of the **iOS Dev Center** which is located directly beneath the **iOS Provisioning
    Portal** that we used before. This is shown in the following screenshot:![Time
    for action—requesting a Distribution Certificate](img/image_1901_08_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in with your credentials, if it asks you to and agree to the **Terms of
    Service**. On the main page click on the **Manage your Applications** selection
    which is the first button on the right-hand side of your screen. This is shown
    in the following screenshot:![Time for action—requesting a Distribution Certificate](img/image_1901_08_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add New App** button on the top on the left-hand side. If this
    is your first application, you will be brought to the **New Application** page,
    where you need to come up with a company name, so be careful, because once you
    create it you are stuck with it, so be sure it is what you want.![Time for action—requesting
    a Distribution Certificate](img/image_1901_08_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next you will have a number of different things to fill out. Under **Default
    Language** set it as English. Under **App Name** type the name of the app you
    would like, such as `Urban Warrior`. Under **SKU Number** type any number, but
    remember that every game that you create has to have a different number associated
    with it. Under **Bundle ID** select the **Bundle ID** that we created previously
    and in the **Bundle ID Suffix** type value that will match your `info.plist` file,
    which you set previously in the `IPhonePackager` in the **Edit Info.plist overrides...**
    section on the **New User** tab. Once completed hit **Continue**. This is shown
    in the following screenshot:![Time for action—requesting a Distribution Certificate](img/image_1901_08_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select a date and price tier for your application to use, as well as a discount
    for educational purchasers if you would like there to be one. You may also select
    specific App Stores you would like to sell your app to. Remember if you do not
    set your price tier to free, you will have to pay UDK a licensing fee. Once you
    are finished click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, there are plenty of metadata options to fill out that are
    specific to the game that you are working so them with your best judgment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be required to upload images and screenshots of your game for both
    the iPhone/iPod Touch and iPad as well as a large icon that is 512(x)512.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A tip is to take screenshots from your actual device, by holding the power and
    home keys at the same time for a brief period and releasing. You should see the
    screen flash and in the **Photos** app you should see a picture of what you were
    doing. You can e-mail this picture to yourself ahead of time, to upload at this
    section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you are finished click on the **Save** button to save the app's information.
    This will take you to the **App Summary** page for the app. This is shown in the
    following screenshot:![Time for action—requesting a Distribution Certificate](img/image_1901_08_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **View Details** button to go to the **App Details** page and from
    there click on **Ready to Upload Binary**. The menu will ask if you used cryptography
    at all to use your product in which you'll answer No and then hit **Save**. The
    menu will now show that you are ready to upload your binary using **Application
    Loader**; click on **Continue** and you'll be brought back to the main screen.
    Click on the **App Summary** text on the top left-hand side and then at the app
    summary page click on **Done** on the bottom right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your Mac computer and there is where we will complete the rest of the
    tutorial.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Xcode if you haven't already by using the App Store. You will see the
    next screenshot:![Time for action—requesting a Distribution Certificate](img/image_1901_08_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Download and install the Application Loader** program by going to the **iTunes
    Connect** section of the site and clicking on **Download Application Loader**
    on the bottom tool bar. This is shown in the following screenshot:![Time for action—requesting
    a Distribution Certificate](img/image_1901_08_33.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After **Application Loader** is installed, open up **Spotlight** by pressing
    **Command** + *Space* and type the name of the program until it shows up and then
    click on it. This is shown in the following screenshot:![Time for action—requesting
    a Distribution Certificate](img/image_1901_08_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Application Loader** opened enter your credentials and press **Next**.
    This is shown in the next screenshot:![Time for action—requesting a Distribution
    Certificate](img/image_1901_08_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deliver Your App** button. From the menu that shows up, select
    your app and select the **Next** button. In the **Application Information** section
    click on the **Choose...** button and select your `.ipa` file and wait for it
    to complete.![Time for action—requesting a Distribution Certificate](img/image_1901_08_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the upload completes click on **Next** and then **Done**. Feel free to
    log back in to **iTunes Connect** and go to the **Manage Your Applications** page
    to confirm that the app has been uploaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now submitted our app to Apple for review! You will get progress e-mails
    as the application passes through various phases of automated checking, finally
    reaching **Waiting for Review**, which means it is now in the process of getting
    reviewed by Apple. If anything happens you will get an e-mail, but the status
    will also be updated on the **iTunes Connect** website. Each time something is
    incorrect, you will have to hit **Ready to Upload** on the **iTunes Connect**
    website before the **Application Loader** can be used again.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a firm handle on how to push our games to the App Store we''ve now covered
    everything that I set out to show you how to do within the confines of this book.
    We''ve specifically learned:'
  prefs: []
  type: TYPE_NORMAL
- en: About the process of getting your game onto an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process of deploying the game on your own iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to customize our game's icons when viewed from our device as well as the
    App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The playtesting process and learn how to do playtesting sessions of your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current royalties model Epic Games has in place for UDK-developed iOS titles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to link Game Center into our games for a fuller social experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the use of in-game ads for monetization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process of uploading your game on the iTunes store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's hard to believe that in such a short time you've manage to complete so
    many different things! With the knowledge that you gained from this book you have
    all of the tools and knowledge to create some truly great projects. UDK is quite
    an amazing engine, and I know first-hand how much you can get out of it. So future
    app-creator, I wish you good luck and I'll see you in the App Store!
  prefs: []
  type: TYPE_NORMAL
