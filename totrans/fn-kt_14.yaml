- en: Kotlin's Quick Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for people that are already familiar with the way Kotlin
    works. But if you are completely new to the language, worry not, we have you covered
    with everything that you need to read, understand, and take full advantage of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to use Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Kotlin control structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and running Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll cover a comprehensive set of options to write and run Kotlin, from the
    easiest to the most professional.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin online
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nothing to install, just open Kotlin ([https://try.kotlinlang.org/](https://try.kotlinlang.org/)).
    Kotlin online includes everything that you need to write and run simple Koltin
    programs, including JVM and JavaScript compilation options. You can even create
    and save your programs if you have an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ef4e300-334a-44ae-8d90-a6913668c320.png)'
  prefs: []
  type: TYPE_IMG
- en: On your console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For anything serious and destined to be in production code, the online option
    isn't optimal. Let's explore how to install it on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing SDKMAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most accessible option to install Kotlin is to use SDKMAN, a tool used to
    install and update JVM tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install SDKMAN (if you don''t have it installed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once SDKMAN is installed, we can use it to install Kotlin and keep it updated,
    among other tools such as Gradle and Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kotlin through SDKMAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Kotlin through SDKMAN, you just need to type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we have Kotlin commands in our console.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin's REPL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To play with Kotlin''s REPL, you can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can type and execute Kotlin expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To exit Kotlin's REPL, you can type `:quit`
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and executing Kotlin files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several editors that support Kotlin—Micro, Vim, NeoVim, Atom, and
    VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'My go-to-use editor is Micro, ([https://micro-editor.github.io/index.html](https://micro-editor.github.io/index.html)).
    It is a fast and easy-to-use editor (sort of an over-powered Nano):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42b8965a-b890-42fe-863c-53b66c57f70d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your favourite editor, create a file named `hello.kt` and type the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in your console, compile your program with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute it, type this in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any project that goes beyond a couple of files, a build tool becomes a necessity.
    A build tool offers you a pragmatic way to compile, manage libraries, and package
    and execute applications. Gradle ([https://docs.gradle.org/current/release-notes.html](https://docs.gradle.org/current/release-notes.html))
    is a build tool that supports many languages, including Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: Install Gradle through SDKMAN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Gradle through SDKMAN, you just need type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we have the `gradle` command available in our console.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a distributable Gradle command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Gradle is a great tool, it isn't easy to share code that depends on
    Gradle to be built. The potential users of our open source project may not have
    installed Gradle or even the same Gradle version as we have. Luckily for us, Gradle
    provides a way to create a distributable Gradle utility or command.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new, clean directory, type this in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This command creates a `gradlew` script that can be executed. The first time
    that you run the command, it downloads all the necessary Gradle files and then
    it becomes a repeatable command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Gradle project file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Gradle to work, we must have a `build.gradle` file. In this file, we'll
    set different options and settings for Gradle to use and run.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our basic `Hello World` program, our file must look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Typically, in a `build.gradle` file we define some plugins (Gradle plugins define
    support for languages and frameworks), repositories to download dependencies,
    the dependencies themselves, and other options.
  prefs: []
  type: TYPE_NORMAL
- en: In this file we define two plugins—one for Kotlin and other to define our project
    as an application with a starter point or main class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our Hello World code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default position where Gradle searches for Kotlin files is in the `src/main/kotlin`
    directory. We''ll place our `hello.kt` file in  the `src/main/kotlin/com/packtpub/appendix` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can compile and run in one go with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we defined that our default task is `run` and our main class is `com.packtpub.appendix.HelloKt`,
    just by running `./gradlew` we can build and run our peogram.
  prefs: []
  type: TYPE_NORMAL
- en: Using IntelliJ IDEA or Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IntelliJ IDEA and Android Studio (which is based on the open source version
    of IntelliJ IDEA) are fantastic IDEs for Kotlin (and other languages, such as
    Java, Scala, Groovy, and others). Both offer autocomplete, formatting and support
    for Gradle and Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both IDEs are very well documented, and you can read more about Kotlin support
    on their websites:'
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA ([http://kotlinlang.org/docs/tutorials/getting-started.html](http://kotlinlang.org/docs/tutorials/getting-started.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio ([https://developer.android.com/kotlin/get-started.html](https://developer.android.com/kotlin/get-started.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Gradle files with IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can import our Gradle project inside IntelliJ IDEA. Once we start IDEA,
    we can open our `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bc9f41c-3da4-4da7-9708-73cffd31f2b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A dialog will appear that will ask whether you want to open it as a file or
    as a project. Click on Open As Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d1f6b74-3c16-4e0d-9f95-0e25a10b2ab9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have a JDK installed and set it on IntelliJ IDEA, you just need to click
    OK. If you don''t have a JDK configured, then do it (IntelliJ IDEA will guide
    you through) and then continue with OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06e95ab8-d324-4b1f-97fc-eaedeb4d5a38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can edit and work on our project using all the IntelliJ IDEA features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b257addd-5568-413d-acbd-505e719a66bf.png)'
  prefs: []
  type: TYPE_IMG
- en: You can open all the example code from this book in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Kotlin syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin syntax will look familiar to developers with experience of other languages
    based on C style syntax, such as C, Java, Scala, Groovy, and TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: General features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Various Kotlin features are common among other JVM Languages. If you have experience
    of Java, you'll feel at home with Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packages are sets of files (usually defined in the same directory) that define
    logic units, for example, controllers, and repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set a file in a particular package, use the `package` keyword in the first
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Ideally, a file inside the package `com.packt.functionalkotlin` should be in
    the directory `com/packt/functionalkotlin`. It makes files easier to find but
    isn't mandatory in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: String concatenation and interpolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'String concatenation in Kotlin uses the plus (`+`) operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'String interpolation is an easy way to do complex concatenations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the symbol dollar (`$`) lets you use simple values inside a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For anything more complex than just using values, you can use a dollar symbol
    with braces (`${... }`):'
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Single-line comments use a double slash (`//`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Block comments use a slash and asterisk to open the block (`/*`) and an asterisk
    and slash to close (`*/`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Control structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are four basic control structures in Kotlin—`if`, `when`, `for`, and `while`.
  prefs: []
  type: TYPE_NORMAL
- en: if expression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`if` in Kotlin looks exactly like any other C-style language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In Kotlin, `if` (and `when`) is an expression. It means that the `if` statement
    returns a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Kotlin doesn''t have ternary expressions, but an `if` expression can be written
    in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: when expression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike other C-style languages, Kotlin doesn''t have a `switch` statement,
    but a `when` expression that is a lot more flexible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '`when` are expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And they also can be used to replace `if` expression:'
  prefs: []
  type: TYPE_NORMAL
- en: for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`for` loops can iterate over anything that provides an iterator (for example,
    collections and ranges):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: while and do loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`while` and `do` loops are standard C-style loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have all the basic pieces you have everything that you need to
    read and understand the contents of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Going further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to advance your Kotlin knowledge and understanding, the best way
    to go forward is to try the Kotlin Koans.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin Koans is a tutorial that will lead you step by step from a rookie to
    a very competent Kotlin programmer in a few days, and even better, it's free.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can try Kotlin Koans at [https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt](https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6dce1905-6acf-4632-8d37-0a4d80e69be0.png)'
  prefs: []
  type: TYPE_IMG
