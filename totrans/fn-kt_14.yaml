- en: Kotlin's Quick Start
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin快速入门
- en: This book is intended for people that are already familiar with the way Kotlin
    works. But if you are completely new to the language, worry not, we have you covered
    with everything that you need to read, understand, and take full advantage of
    this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在为已经熟悉Kotlin工作方式的人编写。但如果你对这个语言完全陌生，不用担心，我们为你提供了阅读、理解和充分利用本书所需的一切。
- en: 'In this appendix, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将涵盖以下主题：
- en: Different ways to use Kotlin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kotlin的不同方式
- en: Basic Kotlin control structures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin的基本控制结构
- en: Other resources
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他资源
- en: Writing and running Kotlin
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和运行Kotlin
- en: We'll cover a comprehensive set of options to write and run Kotlin, from the
    easiest to the most professional.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖一套全面的选项来编写和运行Kotlin，从最简单的到最专业的。
- en: Kotlin online
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin在线
- en: 'Nothing to install, just open Kotlin ([https://try.kotlinlang.org/](https://try.kotlinlang.org/)).
    Kotlin online includes everything that you need to write and run simple Koltin
    programs, including JVM and JavaScript compilation options. You can even create
    and save your programs if you have an account:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 没有需要安装的，只需打开Kotlin ([https://try.kotlinlang.org/](https://try.kotlinlang.org/))。Kotlin在线包含了编写和运行简单Kotlin程序所需的一切，包括JVM和JavaScript编译选项。如果你有账户，你甚至可以创建和保存你的程序：
- en: '![](img/5ef4e300-334a-44ae-8d90-a6913668c320.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ef4e300-334a-44ae-8d90-a6913668c320.png)'
- en: On your console
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的控制台中
- en: For anything serious and destined to be in production code, the online option
    isn't optimal. Let's explore how to install it on your machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何严肃且打算用于生产代码的内容，在线选项并不是最佳选择。让我们来探讨如何在你的机器上安装它。
- en: Installing SDKMAN
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SDKMAN
- en: The most accessible option to install Kotlin is to use SDKMAN, a tool used to
    install and update JVM tools.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Kotlin最便捷的选项是使用SDKMAN，这是一个用于安装和更新JVM工具的工具。
- en: 'Use the following command to install SDKMAN (if you don''t have it installed):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装SDKMAN（如果你还没有安装）：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once SDKMAN is installed, we can use it to install Kotlin and keep it updated,
    among other tools such as Gradle and Maven.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦SDKMAN安装完成，我们就可以使用它来安装Kotlin并保持其更新，以及其他工具，如Gradle和Maven。
- en: Installing Kotlin through SDKMAN
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过SDKMAN安装Kotlin
- en: 'To install Kotlin through SDKMAN, you just need to type the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过SDKMAN安装Kotlin，你只需输入以下内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we have Kotlin commands in our console.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的控制台中有了Kotlin命令。
- en: Kotlin's REPL
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin的REPL
- en: 'To play with Kotlin''s REPL, you can type the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要与Kotlin的REPL互动，你可以输入以下内容：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now you can type and execute Kotlin expressions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以输入并执行Kotlin表达式：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To exit Kotlin's REPL, you can type `:quit`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要退出Kotlin的REPL，你可以输入`:quit`
- en: Compiling and executing Kotlin files
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和执行Kotlin文件
- en: There are several editors that support Kotlin—Micro, Vim, NeoVim, Atom, and
    VS Code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 支持Kotlin的编辑器有多个——Micro、Vim、NeoVim、Atom和VS Code。
- en: 'My go-to-use editor is Micro, ([https://micro-editor.github.io/index.html](https://micro-editor.github.io/index.html)).
    It is a fast and easy-to-use editor (sort of an over-powered Nano):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我首选使用的编辑器是Micro，([https://micro-editor.github.io/index.html](https://micro-editor.github.io/index.html))。它是一个快速且易于使用的编辑器（有点像超强大的Nano）：
- en: '![](img/42b8965a-b890-42fe-863c-53b66c57f70d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42b8965a-b890-42fe-863c-53b66c57f70d.png)'
- en: 'In your favourite editor, create a file named `hello.kt` and type the following
    code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜欢的编辑器中，创建一个名为`hello.kt`的文件，并输入以下代码：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now in your console, compile your program with this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在你的控制台中，使用以下命令编译你的程序：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To execute it, type this in your console:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行它，请在你的控制台中输入以下内容：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using Gradle
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gradle
- en: For any project that goes beyond a couple of files, a build tool becomes a necessity.
    A build tool offers you a pragmatic way to compile, manage libraries, and package
    and execute applications. Gradle ([https://docs.gradle.org/current/release-notes.html](https://docs.gradle.org/current/release-notes.html))
    is a build tool that supports many languages, including Kotlin.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何超过几个文件的任何项目，构建工具都成为必需品。构建工具为你提供了一种实用方式来编译、管理库以及打包和执行应用程序。Gradle ([https://docs.gradle.org/current/release-notes.html](https://docs.gradle.org/current/release-notes.html))
    是一个支持多种语言的构建工具，包括Kotlin。
- en: Install Gradle through SDKMAN
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过SDKMAN安装Gradle
- en: 'To install Gradle through SDKMAN, you just need type the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过SDKMAN安装Gradle，你只需输入以下内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we have the `gradle` command available in our console.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们的控制台中有了`gradle`命令。
- en: Creating a distributable Gradle command
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可分发的Gradle命令
- en: Although Gradle is a great tool, it isn't easy to share code that depends on
    Gradle to be built. The potential users of our open source project may not have
    installed Gradle or even the same Gradle version as we have. Luckily for us, Gradle
    provides a way to create a distributable Gradle utility or command.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Gradle 是一个伟大的工具，但共享依赖于 Gradle 构建的代码并不容易。我们开源项目的潜在用户可能没有安装 Gradle，甚至可能没有我们相同的
    Gradle 版本。幸运的是，Gradle 提供了一种创建可分发 Gradle 工具或命令的方法。
- en: 'In a new, clean directory, type this in your console:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新、干净的目录中，在您的控制台输入以下内容：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This command creates a `gradlew` script that can be executed. The first time
    that you run the command, it downloads all the necessary Gradle files and then
    it becomes a repeatable command.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建了一个可执行的 `gradlew` 脚本。第一次运行此命令时，它会下载所有必要的 Gradle 文件，然后成为一个可重复执行的命令。
- en: Creating a Gradle project file
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Gradle 项目文件
- en: For Gradle to work, we must have a `build.gradle` file. In this file, we'll
    set different options and settings for Gradle to use and run.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了 Gradle 能够工作，我们必须有一个 `build.gradle` 文件。在这个文件中，我们将为 Gradle 设置不同的选项和设置，以便其使用和运行。
- en: 'For our basic `Hello World` program, our file must look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的基本 `Hello World` 程序，我们的文件必须看起来像这样：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Typically, in a `build.gradle` file we define some plugins (Gradle plugins define
    support for languages and frameworks), repositories to download dependencies,
    the dependencies themselves, and other options.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在 `build.gradle` 文件中，我们定义一些插件（Gradle 插件定义了对语言和框架的支持），存储库以下载依赖项，依赖项本身，以及其他选项。
- en: In this file we define two plugins—one for Kotlin and other to define our project
    as an application with a starter point or main class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们定义了两个插件——一个用于 Kotlin，另一个用于将我们的项目定义为具有起始点或主类的应用程序。
- en: Creating our Hello World code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的 Hello World 代码
- en: 'The default position where Gradle searches for Kotlin files is in the `src/main/kotlin`
    directory. We''ll place our `hello.kt` file in  the `src/main/kotlin/com/packtpub/appendix` directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 默认搜索 Kotlin 文件的目录位置是 `src/main/kotlin`。我们将 `hello.kt` 文件放置在 `src/main/kotlin/com/packtpub/appendix`
    目录中：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And now we can compile and run in one go with the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令一次性编译和运行：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As we defined that our default task is `run` and our main class is `com.packtpub.appendix.HelloKt`,
    just by running `./gradlew` we can build and run our peogram.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已定义默认任务为 `run` 且主类为 `com.packtpub.appendix.HelloKt`，只需运行 `./gradlew` 就可以构建并运行我们的程序。
- en: Using IntelliJ IDEA or Android Studio
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDEA 或 Android Studio
- en: IntelliJ IDEA and Android Studio (which is based on the open source version
    of IntelliJ IDEA) are fantastic IDEs for Kotlin (and other languages, such as
    Java, Scala, Groovy, and others). Both offer autocomplete, formatting and support
    for Gradle and Maven.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA 和 Android Studio（它基于 IntelliJ IDEA 的开源版本）是 Kotlin（以及其他语言，如 Java、Scala、Groovy
    等）的出色 IDE。两者都提供自动完成、格式化和对 Gradle 和 Maven 的支持。
- en: 'Both IDEs are very well documented, and you can read more about Kotlin support
    on their websites:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 IDE 都有很好的文档，你可以在它们的网站上了解更多关于 Kotlin 的支持信息：
- en: IntelliJ IDEA ([http://kotlinlang.org/docs/tutorials/getting-started.html](http://kotlinlang.org/docs/tutorials/getting-started.html))
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IntelliJ IDEA ([http://kotlinlang.org/docs/tutorials/getting-started.html](http://kotlinlang.org/docs/tutorials/getting-started.html))
- en: Android Studio ([https://developer.android.com/kotlin/get-started.html](https://developer.android.com/kotlin/get-started.html))
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio ([https://developer.android.com/kotlin/get-started.html](https://developer.android.com/kotlin/get-started.html))
- en: Importing Gradle files with IntelliJ IDEA
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDEA 导入 Gradle 文件
- en: 'We can import our Gradle project inside IntelliJ IDEA. Once we start IDEA,
    we can open our `build.gradle` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 IntelliJ IDEA 中导入我们的 Gradle 项目。一旦启动 IDEA，我们就可以打开我们的 `build.gradle` 文件：
- en: '![](img/7bc9f41c-3da4-4da7-9708-73cffd31f2b4.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bc9f41c-3da4-4da7-9708-73cffd31f2b4.png)'
- en: 'A dialog will appear that will ask whether you want to open it as a file or
    as a project. Click on Open As Project:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将会弹出一个对话框，询问您是否想将其作为文件或项目打开。点击“打开为项目”：
- en: '![](img/8d1f6b74-3c16-4e0d-9f95-0e25a10b2ab9.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d1f6b74-3c16-4e0d-9f95-0e25a10b2ab9.png)'
- en: 'If you have a JDK installed and set it on IntelliJ IDEA, you just need to click
    OK. If you don''t have a JDK configured, then do it (IntelliJ IDEA will guide
    you through) and then continue with OK:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装 JDK 并在 IntelliJ IDEA 中设置，只需点击“确定”。如果您没有配置 JDK，那么请进行配置（IntelliJ IDEA 将引导您完成配置）然后继续点击“确定”：
- en: '![](img/06e95ab8-d324-4b1f-97fc-eaedeb4d5a38.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06e95ab8-d324-4b1f-97fc-eaedeb4d5a38.png)'
- en: 'Now we can edit and work on our project using all the IntelliJ IDEA features:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 IntelliJ IDEA 的所有功能来编辑和我们的项目：
- en: '![](img/b257addd-5568-413d-acbd-505e719a66bf.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b257addd-5568-413d-acbd-505e719a66bf.png)'
- en: You can open all the example code from this book in the same way.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用同样的方式打开这本书中的所有示例代码。
- en: Basic Kotlin syntax
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本 Kotlin 语法
- en: Kotlin syntax will look familiar to developers with experience of other languages
    based on C style syntax, such as C, Java, Scala, Groovy, and TypeScript.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有 C 风格语法（如 C、Java、Scala、Groovy 和 TypeScript）经验的开发者来说，Kotlin 语法看起来很熟悉。
- en: General features
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通用特性
- en: Various Kotlin features are common among other JVM Languages. If you have experience
    of Java, you'll feel at home with Kotlin.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 各种 Kotlin 功能在 JVM 语言中都很常见。如果你有 Java 的经验，你会觉得 Kotlin 很亲切。
- en: Packages
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包
- en: Packages are sets of files (usually defined in the same directory) that define
    logic units, for example, controllers, and repositories.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 包是一组文件（通常定义在同一个目录中），用于定义逻辑单元，例如控制器和存储库。
- en: 'To set a file in a particular package, use the `package` keyword in the first
    line:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置特定包中的文件，请在第一行使用 `package` 关键字：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ideally, a file inside the package `com.packt.functionalkotlin` should be in
    the directory `com/packt/functionalkotlin`. It makes files easier to find but
    isn't mandatory in Kotlin.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，包 `com.packt.functionalkotlin` 内的文件应该位于目录 `com/packt/functionalkotlin`
    中。这使文件更容易找到，但在 Kotlin 中不是强制性的。
- en: String concatenation and interpolation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串连接和插值
- en: 'String concatenation in Kotlin uses the plus (`+`) operator:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 中的字符串连接使用加号（`+`）运算符：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'String interpolation is an easy way to do complex concatenations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值是进行复杂连接的简单方法：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using the symbol dollar (`$`) lets you use simple values inside a string:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用符号美元（`$`）让你可以在字符串内部使用简单值：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For anything more complex than just using values, you can use a dollar symbol
    with braces (`${... }`):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于比仅仅使用值更复杂的情况，你可以使用带有大括号的美元符号（`${... }`）：
- en: Comments
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: 'Single-line comments use a double slash (`//`):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 单行注释使用双斜杠（`//`）：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Block comments use a slash and asterisk to open the block (`/*`) and an asterisk
    and slash to close (`*/`):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 块注释使用斜杠和星号来打开块（`/*`）以及星号和斜杠来关闭（`*/`）：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Control structures
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制结构
- en: There are four basic control structures in Kotlin—`if`, `when`, `for`, and `while`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 有四种基本的控制结构——`if`、`when`、`for` 和 `while`。
- en: if expression
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if 表达式
- en: '`if` in Kotlin looks exactly like any other C-style language:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 中的 `if` 看起来与任何其他 C 风格语言完全一样：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In Kotlin, `if` (and `when`) is an expression. It means that the `if` statement
    returns a value:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中，`if`（以及 `when`）是一个表达式。这意味着 `if` 语句会返回一个值：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Kotlin doesn''t have ternary expressions, but an `if` expression can be written
    in a single line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 没有三元表达式，但可以用单行写一个 `if` 表达式：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: when expression
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: when 表达式
- en: 'Unlike other C-style languages, Kotlin doesn''t have a `switch` statement,
    but a `when` expression that is a lot more flexible:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 C 风格语言不同，Kotlin 没有使用 `switch` 语句，但有一个更加灵活的 `when` 表达式：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`when` are expressions:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`when` 是表达式：'
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And they also can be used to replace `if` expression:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也可以用来替换 `if` 表达式：
- en: for loop
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for 循环
- en: '`for` loops can iterate over anything that provides an iterator (for example,
    collections and ranges):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环可以遍历任何提供迭代器的对象（例如，集合和范围）：'
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: while and do loops
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while 和 do 循环
- en: '`while` and `do` loops are standard C-style loops:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 和 `do` 循环是标准的 C 风格循环：'
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now that you have all the basic pieces you have everything that you need to
    read and understand the contents of this book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了所有基本的部分，你就有了一切阅读和理解这本书内容所需的东西。
- en: Going further
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步学习
- en: If you want to advance your Kotlin knowledge and understanding, the best way
    to go forward is to try the Kotlin Koans.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要提升你的 Kotlin 知识和理解，前进的最佳方式是尝试 Kotlin Koans。
- en: Kotlin Koans is a tutorial that will lead you step by step from a rookie to
    a very competent Kotlin programmer in a few days, and even better, it's free.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin Koans 是一个教程，它将引导你在几天内从初学者逐步成为一名非常熟练的 Kotlin 程序员，而且更好的是，它是免费的。
- en: 'You can try Kotlin Koans at [https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt](https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt](https://try.kotlinlang.org/#/Kotlin%20Koans/Introduction/Hello,%20world!/Task.kt)
    尝试 Kotlin Koans：
- en: '![](img/6dce1905-6acf-4632-8d37-0a4d80e69be0.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6dce1905-6acf-4632-8d37-0a4d80e69be0.png)'
