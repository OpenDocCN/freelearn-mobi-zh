["```kt\ndependencies { \n... \n    compile 'com.android.support:recyclerview-v7:23.1.1' \n    compile 'com.android.support:cardview-v7:23.1.1' \n    compile 'com.squareup.retrofit:retrofit:2.0.0-beta3' \n    compile 'com.squareup.picasso:picasso:2.5.2' \n    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2' \n    compile 'com.squareup.okhttp:okhttp:2.4.0' \n    compile 'net.hockeyapp.android:HockeySDK:3.6.2' \n} \n```", "```kt\nplatform :ios, '8.0' \nuse_frameworks! \ntarget 'example-project' do \n    pod 'ZXingObjC', '~>3.0' \n    pod 'JSONJoy-Swift', '~> 1.0.0' \n    pod 'SwiftHTTP', '~> 1.0.0' \nend \n```", "```kt\n$ gem install cocoapods\n$ pod install \n```", "```kt\nlet client = SODAClient(domain: \"data.sfgov.org\", token: \"<your token>\") \n```", "```kt\nfunc refresh (sender: AnyObject!) { \n...         \n        let cngQuery = client.queryDataset(\"wwmu-gmzc\")         \n        cngQuery.orderAscending(\"title\").get { res in \n            switch res { \n            case .Dataset (let data): \n                self.data = data \n... \n        } \n    } \n```", "```kt\n  override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) ->   \n    UITableViewCell { \n\n        let c = tableView.dequeueReusableCellWithIdentifier(cellId) as UITableViewCell! \n\n        let item = data[indexPath.row] \n        let name = item[\"title\"]! as! String         \n        c.textLabel?.text = name \n\n        if (item[\"locations\"] != nil){ \n            let street = item[\"locations\"]! as! String \n            c.detailTextLabel?.text = street \n        }  \n        return c \n    } \n```", "```kt\nfunc updateWithData(data: [[String: AnyObject]]!, animated: Bool) {         \n    self.data = data         \n     if (!isViewLoaded()) { \n       return \n     } \n\n     if mapView.annotations.count > 0 { \n       let ex = mapView.annotations \n       mapView.removeAnnotations(ex) \n     } \n\n     var anns : [MKAnnotation] = [] \n     for item in data { \n        var location = item[\"locations\"]  as? String \n        if (location != nil){  \n           location  = location! + \" San Fransisco, CA\" \n           print(location)  \n           let geocoder:CLGeocoder = CLGeocoder(); \n           geocoder.geocodeAddressString(location!) { (placemarks:       \n             [CLPlacemark]?, error: NSError?) -> Void in \n\n           print(placemarks?.count)  \n           if placemarks?.count > 0 { \n           let topResult:CLPlacemark = placemarks![0]; \n           let placemark: MKPlacemark = MKPlacemark(placemark:  \n             topResult); \n\n           let a = MKPointAnnotation() \n           a.coordinate = placemark.coordinate; \n           a.title = item[\"title\"] as! NSString as String \n           a.title = a.title! + \" \" + (item[\"locations\"] as!  \n             NSString as String) \n           anns.append(a);  \n\n           if (error == nil && a.coordinate.latitude != 0 &&       \n             a.coordinate.longitude != 0){ \n                self.mapView.addAnnotation(a); \n           } \n\n    } \n  }                 \n        let w = 1.0  \n        let r = MKCoordinateRegionMakeWithDistance(       \n          CLLocationCoordinate2D(latitude: 37.79666680533*w,  \n          longitude: -122.39826411049*w), 40000, 40000) \n        self.mapView.setRegion(r, animated: false) \n    } \n} \n```", "```kt\n$ gem install cocoapods\n```", "```kt\n$ pod init  \n```", "```kt\n    use_frameworks!\n    target 'SODAKit' do\n    end\n    target 'SODATests' do\n    end\n    target 'SODASample' do\n       pod 'UberRides'\n    end\n\n```", "```kt\n$ pod install\n```", "```kt\n<key>UberClientID</key> \n    <string>your uber client id</string> \n    <key>UberCallbackURI</key> \n    <string></string> \n    <key>LSApplicationQueriesSchemes</key> \n    <array> \n        <string>uber</string> \n    </array> \n```", "```kt\nimport UIKit \nimport UberRides \n\n@UIApplicationMain \nclass AppDelegate: UIResponder, UIApplicationDelegate { \n\n  var window: UIWindow?  \n\n  func application(application: UIApplication,    \n   didFinishLaunchingWithOptions launchOptions: [NSObject:  \n    AnyObject]?) -> Bool { \n\n     // If true, all requests will hit the sandbox     \n     Configuration.setSandboxEnabled(true)         \n     return true \n   } \n```", "```kt\nimport MapKit \nimport UberRides \nimport CoreLocation \n```", "```kt\noverride func tableView(tableView: UITableView!,    \n  didSelectRowAtIndexPath indexPath: NSIndexPath!) { \n\n  let item = data[indexPath.row] \n  var location = item[\"locations\"]  as? String; \n  if (location != nil){ \n\n      location  = location! + \" San Fransisco, CA\" \n      let geocoder:CLGeocoder = CLGeocoder(); \n\n      geocoder.geocodeAddressString(location!) { (placemarks:     \n       [CLPlacemark]?, error: NSError?) -> Void in \n\n        if placemarks?.count > 0 { \n\n          let topResult:CLPlacemark = placemarks![0]; \n          let placemark: MKPlacemark = MKPlacemark(placemark: \n           topResult); \n\n          if (error == nil && placemark.coordinate.latitude != 0 &&  \n           placemark.coordinate.longitude != 0){ \n\n             let behavior = RideRequestViewRequestingBehavior(   \n              presentingViewController: self) \n\n             let dropOffLocationlocation = CLLocation( \n              latitude: placemark.coordinate.latitude,  \n              longitude: placemark.coordinate.longitude) \n\n             let parameters = RideParametersBuilder().  \n               setDropoffLocation( dropOffLocationlocation).build() \n\n             let button = RideRequestButton(rideParameters:  \n               parameters, requestingBehavior: behavior) \n\n             self.view.addSubview(button) \n           } \n        } \n     }         \n} \n```", "```kt\n\"Title\":\"Basic Instinct\",\"Year\":\"1992\",\"Rated\":\"R\",\"Released\":\"20 Mar 1992\",\"Runtime\":\"127 min\",\"Genre\":\"Drama, Mystery, Thriller\",\"Director\":\"Paul Verhoeven\",\"Writer\":\"Joe Eszterhas\",\"Actors\":\"Michael Douglas, Sharon Stone, George Dzundza, Jeanne Tripplehorn\",\"Plot\":\"A violent, suspended police detective investigates a brutal murder, in which a seductive woman could be involved.\",\"Language\":\"English\",\"Country\":\"France, USA\",\"Awards\":\"Nominated for 2 Oscars. Another 5 wins & 18 nominations.\",\"Poster\":\"http://ia.media-imdb.com/images/M/MV5BMTcxMjY2NzcyMV5BMl5BanBnXkFtZTYwMjAxNTQ5._V1_SX300.jpg\",\"Metascore\":\"41\",\"imdbRating\":\"6.9\",\"imdbVotes\":\"131,796\",\"  \n```"]