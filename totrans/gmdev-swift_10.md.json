["```swift\n    import GameKit\n    ```", "```swift\n    // (We pass in the menuScene instance so we can create a  \n    // leaderboard button in the menu when the player is\n    // authenticated with Game Center)\n    func authenticateLocalPlayer(menuScene:MenuScene) {\n        // Create a new Game Center localPlayer instance:\n        let localPlayer = GKLocalPlayer.localPlayer();\n        // Create a function to check if they authenticated\n        // or show them the log in screen:\n        localPlayer.authenticateHandler = {\n            (viewController : UIViewController!,error : NSError!) -> Void in\n            if viewController != nil {\n                // They are not logged in, show the log in: self.presentViewController(viewController, animated: true, completion: nil)\n            }\n            else if localPlayer.authenticated {\n                // They authenticated successfully!\n                // We will be back later to create a // leaderboard button in the MenuScene\n            }\n            else {\n                // Not able to authenticate, skip Game Center \n            }\n        }\n    }\n    ```", "```swift\n    authenticateLocalPlayer(menuScene)\n    ```", "```swift\n    import GameKit\n    ```", "```swift\n    class MenuScene: SKScene, GKGameCenterControllerDelegate {\n    ```", "```swift\n    func createLeaderboardButton() {\n        // Add some text to open the leaderboard\n        let leaderboardText = SKLabelNode(fontNamed: \"AvenirNext\")\n        leaderboardText.text = \"Leaderboard\"\n        leaderboardText.name = \"LeaderboardBtn\"\n        leaderboardText.position = CGPoint(x: 0, y: -100)\n        leaderboardText.fontSize = 20\n        self.addChild(leaderboardText)\n    }\n    ```", "```swift\n    // If they're logged in, create the leaderboard button\n    // (This will only apply to players returning to the menu)\n    if GKLocalPlayer.localPlayer().authenticated {\n        createLeaderboardButton()\n    }\n    ```", "```swift\n    func showLeaderboard() {\n        // A new instance of a game center view controller:\n        let gameCenter = GKGameCenterViewController()\n        // Set this scene as the delegate (helps enable the // done button in the game center)\n        gameCenter.gameCenterDelegate = self\n        // Show the leaderboards when the game center opens:\n        gameCenter.viewState = \n            GKGameCenterViewControllerState.Leaderboards\n        // Find the current view controller:\n        if let gameViewController = \n            self.view?.window?.rootViewController {\n            // Display the new Game Center view controller:\n            gameViewController.showViewController(gameCenter, sender: self)\n            gameViewController.navigationController?\n               .pushViewController(gameCenter, animated: true)\n        }\n    }\n    ```", "```swift\n    // This hides the game center when the user taps 'done'\n    func gameCenterViewControllerDidFinish (gameCenterViewController: \n            GKGameCenterViewController!) {\n        gameCenterViewController.dismissViewControllerAnimated( true, completion: nil)\n    }\n    ```", "```swift\n    if nodeTouched.name == \"StartBtn\" { \n        self.view?.presentScene(GameScene(size: self.size))\n    }\n    else if nodeTouched.name == \"LeaderboardBtn\" {\n     showLeaderboard()\n    }\n\n    ```", "```swift\n    else if localPlayer.authenticated {\n        // They authenticated successfully\n     menuScene.createLeaderboardButton()\n    }\n    ```", "```swift\n    import GameKit\n    ```", "```swift\n    func updateLeaderboard() {\n        if GKLocalPlayer.localPlayer().authenticated {\n            // Create a new score object, with our leaderboard: \n            let score = GKScore(leaderboardIdentifier: \n                \"pierre_penguin_coins\")\n            // Set the score value to our coin score:\n            score.value = Int64(self.coinsCollected)\n            // Report the score (wrap the score in an array)\n            GKScore.reportScores([score], withCompletionHandler: \n                {(error : NSError!) -> Void in\n                // The error handler was used more in previous \n                // versions of iOS, it would be unusual to // receive an error now:\n                    if error != nil {\n                        println(error)\n                    }\n            })\n        }\n    }\n    ```", "```swift\n    // Push their score to the leaderboard:\n    updateLeaderboard()\n    ```", "```swift\n    import GameKit\n    ```", "```swift\n    func checkForAchievements() {\n        if GKLocalPlayer.localPlayer().authenticated {\n            // Check if they earned 500 coins in this game:\n            if self.coinsCollected >= 500 {\n                let achieve = GKAchievement(identifier: \"500_coins\")\n                // Show a notification that they earned it:\n                achieve.showsCompletionBanner = true\n                achieve.percentComplete = 100\n                // Report the achievement! GKAchievement.reportAchievements([achieve], withCompletionHandler: \n                        {(error:NSError!) -> Void in\n                            if error != nil {\n                                println(error)\n                            }\n                })\n            }\n        }\n    }\n    ```", "```swift\n    // Check if they earned the achievement:\n    checkForAchievements()\n    ```"]