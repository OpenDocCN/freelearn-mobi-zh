["```java\npublic class Loader<DataType>\n```", "```java\nprotected void onStartLoading()\nprotected void onStopLoading()\nprotected void onForceLoad()\nprotected void onReset()\nprotected void onCancelLoad()\n```", "```java\nLoaderManager getLoaderManager()\n// android.support.v4\nLoaderManager getSupportLoaderManager();\n```", "```java\nLoader<D> initLoader(int id, Bundle args,\n                     LoaderManager.LoaderCallbacks<D> callback)\n\nLoader<D> restartLoader(int id,Bundle args, \n                        LoaderManager.LoaderCallbacks<D> callback)\nLoader<D> getLoader(int id);\nvoid destroyLoader(int id);\n```", "```java\nLoader<D> onCreateLoader(int id, Bundle args)\nvoid onLoadFinished(Loader<D> loader, D data)\nvoid onLoaderReset(Loader<D> loader)\n```", "```java\npublic class WhoIsOnlineActivity extends FragmentActivity\n  implements LoaderCallbacks<List<String>> {\n  public static final int WHO_IS_ONLINE_LOADER_ID = 1;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n   ...\n    final LoaderManager lm =  getSupportLoaderManager();\n    final Bundle bundle =new Bundle();\n    bundle.putString(\"chatRoom\", \"Developers\");\n    initButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n lm.initLoader(WHO_IS_ONLINE_LOADER_ID, bundle,\n WhoIsOnlineActivity.this);\n      }\n    });\n    restartButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n lm.restartLoader(WHO_IS_ONLINE_LOADER_ID, bundle,\n WhoIsOnlineActivity.this);\n      }\n    });\n    destroyButton.setOnClickListener(new View.OnClickListener() {\n      @Override\n      public void onClick(View v) {\n lm.destroyLoader(WHO_IS_ONLINE_LOADER_ID);\n      }\n    });\n }\n}\n```", "```java\n@Override\npublic Loader<List<String>> onCreateLoader(int id, Bundle args) {\n  Loader res = null;\n  switch (id) {\n    case WHO_IS_ONLINE_LOADER_ID:\n      res = new WhosOnlineLoader(this,\n                                 args.getString(\"chatRoom\"));\n      break;\n  }\n  return res;\n}\n```", "```java\n@Override\npublic void onLoadFinished(Loader<List<String>> loader,\n                  List<String> users) {\n     switch (loader.getId()) {\n       case WHO_IS_ONLINE_LOADER_ID:\n      ListView listView = (ListView) findViewById(R.id.list);\n      ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n        android.R.layout.simple_list_item_1,\n        android.R.id.text1,\n        users);\n      listView.setAdapter(adapter);\n      break;\n    }\n  }\n```", "```java\n@Override\npublic void onLoaderReset(Loader<List<String>> loader) {\n  ...\n  ListView listView = (ListView)findViewById(R.id.list);\n  listView.setAdapter(null);\n}\n```", "```java\npublic class WhosOnlineLoader extends Loader<List<String>> {\n\n  private final String mChatRoom;\n  private List<String> mResult = null;\n\n  public WhosOnlineLoader(Context context, String chatRoom) {\n    super(context);\n    this.mChatRoom = chatRoom;\n  }\n  @Override\n  protected void onStartLoading() {\n    Log.i(\"WhoIsOnlineLoader\", \"onStarting WhoIsOnlineLoader[\"\n          + Integer.toHexString(hashCode()) + \"]\");\n    ...\n    forceLoad();   \n  }\n  // Elided for brevity\n  @Override\n  public void deliverResult(List<String> data) {\n    Log.i(\"WhoIsOnlineLoader\", \"DeliverResult WhoIsOnlineLoader[\"\n          + Integer.toHexString(hashCode()) + \"]\");\n    ...\n    super.deliverResult(data);   \n  }\n  @Override\n  protected void onReset() {\n    Log.i(\"WhoIsOnlineLoader\", \"onReset WhoIsOnlineLoader[\"\n          + Integer.toHexString(hashCode()) + \"]\");\n    onStopLoading();\n    ...\n  }\n\n}\n```", "```java\nI ... LoaderManager.init [1]\nI ... LoaderCallbacks.onCreateLoader[1]\nI ... Loader.new[ee07113]\nI ... Loader.onStarting[ee07113]\nI ... Loader.onForceload[ee07113]\nI ... Loader.deliverResult[ee07113]\nI ... LoaderCallbacks.onLoadFinished[1]\n```", "```java\nI ... LoaderManager.restart [1]\nI ... LoaderCallbacks.onCreateLoader[1]\nI ... Loader.new[fb61f50]\nI ... Loader.onStarting[fb61f50]\nI ... Loader.onForceload[fb61f50]\nI ... Loader.deliverResult[fb61f50]\nI ... LoaderCallbacks.onLoadFinished[1]\nI ... Loader.onReset[ee07113]\nI ... Loader.onStopping[ee07113]\n\n```", "```java\nI ... LoaderManager.destroy [1]\nI ... LoaderCallbacks.onLoaderReset[1]\nI ... Loader.onAbandon[fb61f50]\nI ... Loader.onReset[fb61f50]\nI ... Loader.onStopping[fb61f50]\n\n```", "```java\npublic class BitcoinExchangeRateLoader extends\n  AsyncTaskLoader<Double> {\n  // ...\n}\n```", "```java\nprivate Double       mExchangeRate = null;\nprivate final long   mRefreshinterval;\nprivate final String mCurrency;\n\nBitcoinExchangeRateLoader(Context ctx,\n                          String currency,\n                          int refreshinterval) {\n  super(ctx);\n  this.mRefreshinterval = refreshinterval;\n  this.mCurrency = currency;\n}\n```", "```java\n@Override\npublic Double loadInBackground() {\n  //...\n}\n```", "```java\npublic Double loadInBackground() {\n  Double result = null;\n  StringBuilder builder = new StringBuilder();\n  URL url = new URL(\"https://blockchain.info/ticker\");\n\n  // Create a Connection to the remote Website\n  HttpURLConnection conn = (HttpURLConnection)\n                           url.openConnection();\n  ...\n  conn.setRequestMethod(\"GET\");\n  conn.setDoInput(true); \n  conn.connect();\n  // ! Read the response with the exchange rate to a String\n  ...â€©  // Decode the Response Received by Blockchain Website\n  JSONObject obj = new JSONObject(builder.toString());\n  result = obj.getJSONObject(mCurrency)\n                      .getDouble(\"last\");\n  return result;\n}\n```", "```java\n@Override\npublic void deliverResult(Double result) {\n  this.mExchangeRate = result;\n  super.deliverResult(result);\n}\n```", "```java\n@Override\nprotected void onStartLoading() {\n\n  if (mExchangeRate != null) {\n    // If we currently have a result available, deliver it\n    // immediately.\n    deliverResult(mExchangeRate);\n  }\n  if (takeContentChanged() || mExchangeRate == null) {\n    // If the exchange rate has changed since the last time\n    // it was  loaded or is not currently available, start a load.\n    forceLoad();\n  }\n}\n```", "```java\n@Override\nprotected void onReset() {\n  // Ensure the loader is stopped\n  onStopLoading();\n  mExchangeRate = null; \n}\n```", "```java\n@Override\nprotected void onStopLoading() {\n  // Attempt to cancel the current load task.\n  cancelLoad();\n}\n```", "```java\n@Override\npublic void onCanceled(Double data) {\n   // For our data there is nothing to release, at this method\n   // we should release the resources associated with 'data'.\n}\n```", "```java\n    public class BitcoinExchangeRateLoader extends\n                 AsyncTaskLoader<Double> { \n\n      private Handler mHandler;\n\n     // Use to force a exchange rate value change\n      private final Runnable refreshRunnable = new Runnable() {\n        @Override\n        public void run() { onContentChanged(); }\n      };\n\n      BitcoinExchangeRateLoader(Context ctx,\n                                String currency,\n                                int refreshinterval) {\n        ...\n        this.mHandler = new Handler();   \n      }\n    }\n    ```", "```java\n    @Override\n    protected void onForceLoad() {\n      mHandler.removeCallbacks(refreshRunnable);\n\n      if (!isReset())\n        mHandler.postDelayed(refreshRunnable, mRefreshinterval);\n    }\n    ```", "```java\n      @Override\n        public void onCanceled(Double data) {\n           ...\n           onContentChanged();\n        }\n    ```", "```java\n    @Override\n    protected void onReset() {\n      ...\n      mHandler.removeCallbacks(refreshRunnable);\n    }\n    ```", "```java\npublic class BitcoinExchangeRateFragment extends Fragment \nimplements LoaderManager.LoaderCallbacks<Double> {\n\n  @Override\n  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    LoaderManager lm = getActivity().getSupportLoaderManager();\n    Bundle bundle = new Bundle();\n    bundle.putString(CURRENNCY_KEY, \"EUR\");\n    bundle.putInt(REFRESH_INTERNAL, 5000);\n    lm.initLoader(BITCOIN_EXRATE_LOADER_ID, bundle,\n                   BitcoinExchangeRateFragment.this);\n  }\n  ...\n}\n```", "```java\npublic Loader<Double> onCreateLoader(int id, Bundle args) {\n  Loader res = null;\n  switch (id) {\n  case BITCOIN_EXRATE_LOADER_ID:\n    res = new BitcoinExchangeRateLoader(getActivity(),\n          args.getString(CURRENNCY_KEY),\n          args.getInt(REFRESH_INTERNAL));\n    break;\n  }\n  return res;\n}\n```", "```java\n@Override\npublic void onLoadFinished(Loader<Double> loader, Double data) {\n  switch (loader.getId()) {\n  case BITCOIN_EXRATE_LOADER_ID:\n    TextView tv  = (TextView) getView().\n                   findViewById(R.id.temperature);\n    tv.setText(data.toString());\n    break;\n  }\n}\n```", "```java\npublic void setUpdateThrottle(long delayMS)\n```", "```java\n@Override\npublic Loader<Cursor> onCreateLoader(int id, Bundle args) {\n  String[] columns = new String[] {\n    MediaStore.Audio.Albums._ID,\n    MediaStore.Audio.Albums.ARTIST,\n    MediaStore.Audio.Albums.ALBUM\n  };\n  return new CursorLoader(this, \n    MediaStore.Audio.Albums.EXTERNAL_CONTENT_URI,\n    columns, // projection\n    null, // selection\n    null, // selectionArgs\n    null // sortOrder\n  );\n}\n```", "```java\npublic class AlbumListActivitySimple extends FragmentActivity\n  implements LoaderCallbacks<Cursor> {\n\n  public static final int ALBUM_LIST_LOADER = \"album_list\".\n                                                 hashCode();\n  private SimpleCursorAdapter mAdapter;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.phone_list_layout);\n    GridView grid = (GridView) findViewById(R.id.album_grid);\n    mAdapter = new AlbumCursorAdapter(getApplicationContext());\n    grid.setAdapter(mAdapter);\n\n    // Prepare the loader. \n    // Either re-connect with an existing one, or start a new one.\n    getSupportLoaderManager().\n      initLoader(ALBUM_LIST_LOADER,\n                 null,\n                 AlbumListActivitySimple.this);\n  }\n\n  @Override\n  public void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n    // Swap the new cursor in.  (The framework will take\n    //  care of closing the old cursor once we return.)\n    mAdapter.changeCursor(data);\n  }\n\n  @Override\n  public void onLoaderReset(Loader<Cursor> loader) {\n    // This is called when the last Cursor provided to\n    // onLoadFinished() above is about to be closed. \n    //  We need to make sure we are no longer using it.\n    mAdapter.changeCursor(null);\n  }\n}\n```", "```java\npublic static class AlbumCursorAdapter extends SimpleCursorAdapter {\n  private static String[] FIELDS = new String[] {\n    MediaStore.Audio.Albums.ARTIST,\n    MediaStore.Audio.Albums.ALBUM\n  };\n  private static int[] VIEWS = new int[] {\n    R.id.album_artist, R.id.album_name\n  };\n\n  public AlbumCursorAdapter(Context context) {\n    super(context, R.layout.album_item,\n          null, FIELDS, VIEWS, 0);\n  }\n}\n```", "```java\npublic class AlbumArtworkLoader extends AsyncTaskLoader<Bitmap> {\n\n  private int mAlbumId = -1; // The album Identifier\n  Bitmap mData = null;\n\n  public AlbumArtworkLoader(Context context, int albumId) {\n    super(context);\n    this.mAlbumId = albumId;\n  }\n```", "```java\n  public void setAlbumId(int newAlbumId) {\n\n    if (  isDifferentMedia(newAlbumId) || mData == null ) {\n\n      // Album Id change will force the artwork reload\n      this.mAlbumId = newAlbumId;\n      onContentChanged();     \n\n    } else if (!isDifferentMedia(newAlbumId) ) {\n      // we already have the Bitmap for this album\n      deliverResult(mData);\n    }\n  }\n```", "```java\n@Override\nprotected void onStartLoading() {\n\n  if (mData != null) {\n    deliverResult(mData);\n  }\n  if (takeContentChanged() || mData == null) {\n    forceLoad();\n  }\n}\n```", "```java\npublic class AlbumCursorAdapter extends CursorAdapter {\n\n    Context ctx;\n    private LayoutInflater inf;\n    private LoaderManager mgr;\n    private List<Integer> ids;\n    private int count;\n\n    public AlbumCursorAdapter(Context ctx, LoaderManager mgr) {\n        super(ctx.getApplicationContext(), null, true);\n        this.ctx = ctx;\n        this.mgr = mgr;\n        inf = (LayoutInflater) ctx.\n                getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        ids = new ArrayList<Integer>();\n    }\n\n    @Override\n    public View newView(Context context, Cursor cursor, ViewGroup parent) {\n      ..\n    }\n\n    @Override\n    public void bindView(View view, Context context, Cursor cursor) {\n      ...\n    }\n```", "```java\n@Override\npublic View newView(Context context, Cursor cursor,\n                    ViewGroup parent) {\n\n  View view = (View) inf.inflate(R.layout.album_item,\n                                 parent, false);\n  ImageView imageView = (ImageView) view.\n                                    findViewById(R.id.album_art);\n        ...\n  int viewId = AlbumCursorAdapter.class.hashCode() + count++;\n  view.setId(viewId);\n  mgr.initLoader(viewId, null,\n                 new ArtworkLoaderCallbacks(ctx, imageView));\n  ids.add(viewId);\n  return view;\n}\n```", "```java\n@Override\npublic void bindView(View view, Context context, Cursor cursor) {\n  ImageView imageView = (ImageView) view.\n                           findViewById(R.id.album_art);\n  imageView.setImageBitmap(null);\n\n  Loader<?> loader = mgr.getLoader(view.getId());\n  AlbumArtworkLoader artworkLoader = (AlbumArtworkLoader) loader;\n  int albumId = cursor.getInt(\n     cursor.getColumnIndex(MediaStore.Audio.Albums._ID));\n  ...\n  // Sets the album id bound to this imageView,\n  // this could force the loader to retrieve a new image\n  artworkLoader.setAlbumId(albumId);\n\n}\n```", "```java\n public void destroyLoaders() {\n   for (Integer id : ids) {\n     mgr.destroyLoader(id);\n   }\n }\n```", "```java\npublic static class ArtworkLoaderCallbacks implements\n  LoaderManager.LoaderCallbacks<Bitmap> {\n\n  private Context context;\n  private ImageView image;\n\n  public ArtworkLoaderCallbacks(Context context,\n                                ImageView image) {\n    this.context = context.getApplicationContext();\n    this.image = image;\n  }\n\n  @Override\n  public Loader<Bitmap> onCreateLoader(int i, Bundle bundle) {\n    return new AlbumArtworkLoader(context);\n  }\n\n  @Override\n  public void onLoadFinished(Loader<Bitmap> loader, Bitmap b) {\n    image.setImageBitmap(b);\n  }\n\n  @Override\n  public void onLoaderReset(Loader<Bitmap> loader) {}\n}\n```", "```java\n@Override\nprotected void onStop() {\n  super.onStop();\n  if (isFinishing()) {\n    // Destroy the main album list Loader\n    getSupportLoaderManager().destroyLoader(ALBUM_LIST_LOADER);\n    // Destroy album artwork loaders\n    mAdapter.destroyLoaders();\n  }\n}\n```"]