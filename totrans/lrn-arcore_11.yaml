- en: Performance Tips and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能技巧和故障排除
- en: 'This will be the end of our journey of exploring **ARCore** and augmented reality.
    In this chapter, we will look at general performance tips for AR and mobile apps
    specifically. Then, we will cover a number of troubleshooting solutions to use
    when and/or if you encounter any problems. We will speak about the possible specific
    issues you may encounter as well as more general patterns to follow if you encounter
    problems. Here''s a summary of the main topics we will cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是探索**ARCore**和增强现实之旅的结束。在本章中，我们将探讨AR和移动应用程序的一般性能技巧。然后，我们将介绍一些故障排除解决方案，以备你遇到任何问题时使用。我们将讨论你可能会遇到的具体问题，以及如果你遇到问题时应遵循的更一般模式。以下是本章我们将涵盖的主要主题摘要：
- en: Diagnosing performance
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断性能
- en: Chrome DevTools
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chrome DevTools
- en: Android Profiler
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Profiler
- en: Unity editor
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity编辑器
- en: Tips for better performance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高性能的技巧
- en: General troubleshooting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般故障排除
- en: Troubleshooting tips
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除技巧
- en: As you likely have already noted many times throughout this book, AR apps require
    a high level of performance in order to provide a compelling user experience.
    In the next section, we will look at how we can diagnose performance with each
    of our platforms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如你很可能在本书中多次注意到的，AR应用程序需要高水平的性能才能提供引人入胜的用户体验。在下一节中，我们将探讨我们如何使用每个平台来诊断性能。
- en: Diagnosing performance
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 诊断性能
- en: In this section, we will look at the specific steps you will need to take in
    order to diagnose performance for each of our development platforms (web, Android,
    and Unity). It is often easy to lose track of performance, especially when working
    with new or unfamiliar technologies. Therefore, you often want to include some
    form of performance assessment as part of your development process, perhaps even
    implementing some minimum frame rate warnings for when your app is rendering at
    subpar performance or frame rates. Before we get into designing a performance
    test though, we want to understand how to track performance in each platform,
    starting with the web using **Chrome DevTools** in the next section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看你需要采取的具体步骤来诊断我们每个开发平台（Web、Android和Unity）的性能。在处理新或不熟悉的技术时，很容易失去对性能的跟踪。因此，你通常希望将某种形式的性能评估作为开发过程的一部分，甚至可能为当你的应用程序以低于标准的性能或帧率渲染时实施一些最低帧率警告。然而，在我们开始设计性能测试之前，我们想要了解如何在每个平台上跟踪性能，从下一节开始，我们将使用**Chrome
    DevTools**来跟踪Web平台。
- en: Chrome DevTools
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome DevTools
- en: 'One of the pleasures you will have when developing web projects with ARCore
    is the ease of debugging with Chrome. In fact, if you were doing a comparison,
    web project performance tooling would be ranked #2 on our platform list due to
    the capabilities of Chrome DevTools. Let''s open up the `spawn-at-surface.html`
    web example from [Chapter 5](3bd45362-4747-4f1c-a313-d6ccf5f6b8fc.xhtml), *Real-World
    Motion Tracking*, and perform the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用ARCore开发Web项目时，你将享受到使用Chrome进行调试的便利。实际上，如果你进行比较，由于Chrome DevTools的功能，Web项目性能工具在我们的平台列表中排名第二。让我们打开来自[第5章](3bd45362-4747-4f1c-a313-d6ccf5f6b8fc.xhtml)，“现实世界运动跟踪”的`spawn-at-surface.html`
    Web示例，并执行以下步骤：
- en: Start `http-server` on port `9999` in the `Android` folder, just like we did previously.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Android`文件夹中启动`http-server`，端口为`9999`，就像我们之前做的那样。
- en: Pick an **endpoint** that matches your local network and write or copy it for
    later. Remember that your device and development machine need to be on the same
    network for this to work.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个与你的本地网络匹配的**端点**，并为其编写或复制以便稍后使用。记住，你的设备和开发机器需要处于同一网络中才能使这生效。
- en: Launch the WebARCore app on your device and navigate to your selected endpoint.
    This will often look something like `http://192.168.*.*:9999`, where the `*.*`
    will be replaced by your development machine's specific IP.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的设备上启动WebARCore应用程序，并导航到你的选定端点。这通常看起来像`http://192.168.*.*:9999`，其中`*.*`将被你的开发机器的特定IP地址替换。
- en: With WebARCore, navigate to **`http://[YOUR IP]:9999/three.ar.js/examples/spawn-at-surface.html`**.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用WebARCore，导航到**`http://[YOUR IP]:9999/three.ar.js/examples/spawn-at-surface.html`**。
- en: Connect your device to your dev machine, either remotely or with a USB cable.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的设备连接到你的开发机器，无论是通过远程连接还是通过USB线缆。
- en: Return to your machine and launch Chrome. Open the Developers tools with *Ctrl *+ *Shift *+ *I* (*command* +
    *option* + *I* on Mac).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回你的机器并启动Chrome。使用*Ctrl* + *Shift* + *I*（在Mac上为*command* + *option* + *I*）打开开发者工具。
- en: Click on the Remote Devices tab and select your device. Then, click on the Inspect
    button to open another Chrome window with `WebView` of the app running on your
    device.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击远程设备选项卡并选择你的设备。然后，点击检查按钮以打开另一个包含设备上运行的应用 `WebView` 的 Chrome 窗口。
- en: 'Click on the Performance tab and then select the Record button to start Profiling,
    as shown in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击性能选项卡，然后选择记录按钮以开始性能分析，如下截图所示：
- en: '![](img/e8451014-ae7d-46f2-af0b-e8dd95e689f2.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8451014-ae7d-46f2-af0b-e8dd95e689f2.png)'
- en: Starting performance profiling with DevTools
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DevTools 开始性能分析
- en: Let the app run in your device with the Profiler running for around 30 seconds
    and then click on Stop. After you stop capturing the data, a profile session will
    expand in the Timeline window.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让应用在你的设备上运行，同时性能分析器运行大约 30 秒，然后点击停止。停止捕获数据后，配置会话将在时间轴窗口中展开。
- en: If you find that the Profiling session keeps crashing, disable the Screenshots
    feature by unchecking the box at the top of the window.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现性能分析会话不断崩溃，请通过取消勾选窗口顶部的复选框来禁用截图功能。
- en: 'Click on the Call Tree tab at the top of the Summary window, as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在摘要窗口顶部点击调用树选项卡，如下所示：
- en: '![](img/fefbf502-b106-4207-b3e9-98872567d780.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fefbf502-b106-4207-b3e9-98872567d780.png)'
- en: Profile session timeline
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 性能分析会话时间轴
- en: The Call Tree tab is where you can quickly identify function calls or sections
    of code that may be causing performance issues. In our example, we have drilled
    into the `update` function and can see that the bulk of the time spent inside
    this function is building the projection matrix with a call to `updateProjectionMatrix`.
    Since this call resides within the `three.ar.js` library, it is not something
    we will concern ourselves with.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用树选项卡是你可以快速识别可能导致性能问题的函数调用或代码段的地方。在我们的例子中，我们深入到了 `update` 函数，并可以看到在这个函数内部花费的大部分时间是用
    `updateProjectionMatrix` 调用来构建投影矩阵。由于这个调用位于 `three.ar.js` 库中，这不是我们关心的东西。
- en: Feel free to continue testing and profiling. Try setting several Andy models
    and see what impact this has on performance.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随意继续测试和性能分析。尝试设置几个 Andy 模型并看看这对性能有什么影响。
- en: With any performance profiling, the thing you will want to quickly identify
    is spikes or areas where you see data peak. Identifying why these spikes take
    place will help you understand what activities can impact performance. Placing
    an Andy, for instance, will cause a spike due to the instantiation of a model
    into the scene. You will also want to closely watch how the app recovers from
    a spike. Does the app, for instance, fully recover, or only recover partially?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何性能分析中，你希望快速识别的是峰值或数据波峰出现的区域。确定这些峰值发生的原因将帮助你理解哪些活动可能影响性能。例如，放置一个 Andy 将由于将模型实例化到场景中而引起峰值。你还需要密切关注应用如何从峰值中恢复。例如，应用是完全恢复，还是只部分恢复？
- en: If you are transferring data or doing **AJAX** calls in your web app, then you
    will also want to monitor Network performance. The Network tab has a tool interface
    similar to that of the Performance tab.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在你的 Web 应用中进行数据传输或执行 **AJAX** 调用，那么你还需要监控网络性能。网络选项卡具有与性能选项卡类似的工具界面。
- en: After identifying spikes, you will want to expand your view to cover the whole
    session. Then, you can expand the Call Tree and identify the most time-consuming
    methods. Chances are that if your app is spending 80% of its time in a single
    function, then you need to be very careful about what operations take place in
    that function. Finding and optimizing expensive methods can often get you very
    quick gains in app performance. While the tools are different, the same principles
    apply for all our development platforms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在识别到峰值后，你将希望扩展你的视图以覆盖整个会话。然后，你可以展开调用树并识别最耗时的方法。如果你的应用在单个函数中花费了 80% 的时间，那么你需要非常小心该函数中进行的操作。找到并优化昂贵的函数通常可以让你在应用性能上获得快速提升。虽然工具不同，但相同的原理适用于我们所有的开发平台。
- en: We have just started to scratch the surface for what is possible with the DevTools.
    If you are doing any amount of web development, you will quickly get up to speed
    with these tools. In the next section, we will cover the Android profiling tools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是刚刚开始探索 DevTools 的可能性。如果你进行任何数量的 Web 开发，你将很快熟悉这些工具。在下一节中，我们将介绍 Android 性能分析工具。
- en: Android Profiler
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 性能分析器
- en: 'Android Studio has great performance profiling tools; after all, it provides
    the closest metal-to-metal interface with your mobile Android device. However,
    it is not as simple to use as the DevTools and therefore comes a close third in
    comparison to other profiling tools. We will use one of the sample Android projects
    we worked with. Open up Android Studio and either of the `java_arcore_hello_ar` or
    `android (TensorFlow example)` sample projects, and perform the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 拥有出色的性能分析工具；毕竟，它提供了与你的移动 Android 设备最接近的金属到金属接口。然而，它的使用并不像 DevTools
    那样简单，因此在与其他性能分析工具的比较中排名第三。我们将使用我们合作过的其中一个 Android 示例项目。打开 Android Studio，并选择 `java_arcore_hello_ar`
    或 `android (TensorFlow 示例)` 示例项目之一，并执行以下步骤：
- en: Connect your device and build the app to your device. Wait for the app to start
    running on the device.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接你的设备并将应用程序构建到设备上。等待应用程序在设备上开始运行。
- en: 'From the menu, select View | Tool Windows | Android Profiler. This will open
    a profiling tool window, as shown in the following screenshot:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择视图 | 工具窗口 | Android Profiler。这将打开一个性能分析工具窗口，如下面的截图所示：
- en: '![](img/fa46e5dc-4bd1-4323-bcf9-438fdbb8b5e2.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa46e5dc-4bd1-4323-bcf9-438fdbb8b5e2.png)'
- en: Android Profiler capturing a real-time session
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Android 性能分析器捕获实时会话
- en: 'As the app runs, watch the MEMORY and CPU usage. You can click on any point
    in the plots in order to expand the view and look at the call stack and various
    other views of the code execution, as illustrated in the following screenshot:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序运行时，观察内存和 CPU 使用情况。你可以点击图表中的任何一点来扩展视图，查看调用堆栈和代码执行的多种其他视图，如下面的截图所示：
- en: '![](img/8d0747f2-b782-492f-abe7-7280b2b96a52.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d0747f2-b782-492f-abe7-7280b2b96a52.png)'
- en: Inspecting the real-time profiling session
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 检查实时性能分析会话
- en: You can also record sessions for later inspection by pressing the Record button
    at the top of the Profiler window.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过在性能分析窗口顶部按下记录按钮来记录会话以供后续检查。
- en: At this point, you can look for performance spikes or the general overall performance
    of various function calls using Android Profiler, just like you did with Chrome.
    The Android tools are more difficult to learn and use, but they're well worth
    the effort if you are doing any serious Android/Java development. In the next
    section, we look at our final way to profile performance, with Unity.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可以使用 Android Profiler 寻找性能峰值或各种函数调用的总体性能，就像你在 Chrome 中做的那样。Android 工具的学习和使用可能比较困难，但如果你在进行任何严肃的
    Android/Java 开发，它们是值得努力的。在下一节中，我们将探讨使用 Unity 的最后一种性能分析方式。
- en: Unity Profiler
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 性能分析器
- en: 'Unity is a powerful tool with a very powerful profiler tool that is a pleasure
    to work with and explore, not just for profiling, but it also provides an insight
    into the inner workings of Unity. Open up the Unity editor to one of the sample
    projects we have worked with. For this example, we will use `HoloCore` from [Chapter
    10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed Reality*, but
    feel free to use another app if you prefer. With the editor open, perform the
    following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 是一个功能强大的工具，拥有一个非常强大的性能分析工具，使用起来非常愉快，不仅可以用于性能分析，还可以深入了解 Unity 的内部工作原理。打开
    Unity 编辑器中的一个我们合作过的示例项目。对于这个例子，我们将使用来自第 10 章 [混合现实中的混合](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml)的
    `HoloCore`，但如果你更喜欢其他应用程序，请随意使用。在打开编辑器后，执行以下步骤：
- en: From the menu, select Window | Profiler. The window will open undocked. Drag
    the window over by the tab and drop it beside the Game window tab to dock it on
    the right. Normally, we would dock the Profiler beside the Inspector so that you
    can watch the profiling while running a game in the editor. Since we can't run
    ARCore apps in the editor, for now, we will give the Profiler more room by docking
    it next to the Game window.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择窗口 | 性能分析器。窗口将未停靠打开。通过标签拖动窗口，并将其拖到游戏窗口标签旁边以停靠。通常，我们会将性能分析器停靠在检查器旁边，以便你在编辑器中运行游戏时可以观察性能分析。由于我们无法在编辑器中运行
    ARCore 应用程序，因此现在我们将通过将其停靠在游戏窗口旁边为性能分析器腾出更多空间。
- en: 'Open the Build Settings dialog and check whether the Development Build and
    Autoconnect Profiler settings are enabled, as shown in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开构建设置对话框，检查是否启用了开发构建和自动连接性能分析器设置，如下面的截图所示：
- en: '![](img/98483f0e-ef93-497c-9c83-2f68d17591d3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98483f0e-ef93-497c-9c83-2f68d17591d3.png)'
- en: Setting Development Build settings
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设置开发构建设置
- en: Connect your device with a USB, build, and run. Leave the app running on your
    device.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 连接你的设备，构建并运行。让应用程序在设备上继续运行。
- en: 'Return to the editor and open the Active Player dropdown and select AndroidPlayer(ADB@127.0.0.1:someport),
    as shown here:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回编辑器并打开活动播放器下拉菜单，选择AndroidPlayer(ADB@127.0.0.1:someport)，如图所示：
- en: '![](img/bd08fbe6-b491-496f-ba73-603fa8d5136a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd08fbe6-b491-496f-ba73-603fa8d5136a.png)'
- en: Unity Profiler capturing session from Android device
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Profiler从Android设备捕获会话
- en: Click on one of the spikes, as shown in the preceding screenshot. With the CPU
    panel selected, direct your attention to the bottom Details panel.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击前一个屏幕截图所示的一个峰值。当CPU面板被选中时，将注意力集中在底部的详细面板上。
- en: 'Use the dropdown to select Timeline, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下拉菜单选择时间线，如下所示：
- en: '![](img/aa1553c1-4630-42de-9a0e-fb85651a177c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aa1553c1-4630-42de-9a0e-fb85651a177c.png)'
- en: Inspecting the details of a profiling session
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 检查性能分析会话的详细信息
- en: There is plethora of useful information here, and it can certainly be overwhelming
    at first. Fortunately, the Unity interface is self-documenting, and you can quickly
    get a sense of what is good or bad. We will go over what areas to watch for in
    more detail later, but for now, pay attention to the Rendering time and Total
    Allocated Memory. For rendering times, you will usually see a number in ms or
    milliseconds in time and FPS or frames per second. A good rule is to ensure that
    your frame rate stays above 30 FPS. A memory can equally be critical when building
    for mobile apps.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里有很多有用的信息，一开始可能会让人感到不知所措。幸运的是，Unity界面是自文档化的，你可以快速了解什么是好的或坏的。我们将在稍后更详细地介绍需要注意哪些区域，但现在，请注意渲染时间和总分配内存。对于渲染时间，你通常会看到以毫秒（ms）或每秒毫秒（milliseconds）为单位的时间，以及每秒帧数（FPS）或每秒帧数。一个好的规则是确保你的帧率保持在30
    FPS以上。当为移动应用构建时，内存同样可能至关重要。
- en: When you are profiling, put the app under stress by changing between reality
    modes, if you are using `HoloCore`, for instance. Then, continue drilling into
    the various detail panels and watch how values change at various points of the
    app session.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在进行性能分析时，如果你使用的是`HoloCore`，例如，通过改变现实模式来对应用施加压力。然后，继续深入到各个详细面板，并观察应用会话中不同点的值如何变化。
- en: The Unity tools provide the most powerful and intuitive interface for profiling
    your app. While we barely scraped the power of all the tools we looked at, you
    will note that they all bear a strong resemblance. Of course, this is not by accident
    and after you learn the ins and outs of performance profiling an app on one platform,
    a number of those skills will carry over. In the next section, we will look at
    a list of tips for better app performance.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Unity工具提供了用于性能分析应用的最强大和直观的界面。虽然我们几乎只是触及了我们查看的所有工具的威力，但你将注意到它们都具有强烈的相似性。当然，这不是偶然的，在你学会在一个平台上对应用进行性能分析的所有细节之后，其中许多技能将会迁移。在下一节中，我们将查看一系列关于提高应用性能的技巧。
- en: Tips for managing better performance
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理更好性能的技巧
- en: 'Now that we have a grasp on how to profile our apps, let''s take a look at
    the primary items that will impact performance. The order of these items is ordered
    by general importance, but the individual requirements of your app may alter these
    priorities. Feel free to consult the following checklist the next time you need
    or want to profile your app:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了如何对应用进行性能分析，让我们来看看将影响性能的主要项目。这些项目的顺序按一般重要性排序，但你的应用的具体需求可能会改变这些优先级。下次你需要或想要对应用进行性能分析时，请随时参考以下清单：
- en: '**Rendering (includes all CPU and memory resources responsible for rendering
    a frame)**:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染（包括负责渲染帧的所有CPU和内存资源）**：'
- en: '**Render loop (CPU performance)**: Check the timing of the `render` function
    and watch for any expensive calls. Ensure that you minimize any object instantiation,
    logging, or inner loops. Remember that the render function, typically called `Update`,
    will be called 30 times per second or more. All the tools we looked at will let
    you perform this vital task.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染循环（CPU性能）**：检查`render`函数的执行时间，并留意任何昂贵的调用。确保最小化任何对象实例化、日志记录或内部循环。记住，渲染函数，通常称为`Update`，每秒将被调用30次或更多。我们查看的所有工具都将让您执行这项至关重要的任务。'
- en: '**Frame rate (render time)**: Outside of optimizing your code, the frame rate
    will often be dictated by the complexity and number of objects we are rendering.
    As such, you may want to go as low as optimizing shaders, but many times, you
    can get great performance gains by reducing the number of triangles or complexity
    of your models. In a mobile app, this means looking for low poly simple models
    as assets. Another useful option is to build various **Levels Of Detail** (**LOD**)
    for your model and use the appropriate version for the appropriate detail level.
    Unity provides an excellent set of free and paid assets for LOD optimization that
    can make this task easy.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帧率（渲染时间）**：除了优化代码之外，帧率通常由我们渲染的复杂性和对象数量决定。因此，你可能想要尽可能优化着色器，但很多时候，通过减少三角形的数量或模型的复杂性，你可以获得很大的性能提升。在移动应用中，这意味着寻找低多边形简单模型作为资源。另一个有用的选项是为你的模型构建各种**细节级别**（**LOD**），并使用适合相应细节级别的适当版本。Unity提供了一套免费和付费的LOD优化资源，可以简化这项任务。'
- en: '**Lighting** **and materials**: Not only will the complexity of a model impact
    performance but also the textures or materials (shaders) and lights you are using
    to render the model. Ensure that you limit the size of textures or ensure that
    all your shaders have a fallback or simplification. You will also want to simplify
    lighting where possible.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光照**和**材质**：不仅模型的复杂性会影响性能，你用来渲染模型的纹理或材质（着色器）以及灯光也会影响。确保你限制纹理的大小，或者确保所有着色器都有回退或简化版本。你还可以尽可能简化光照。'
- en: '**Memory (graphics)**: As a general rule, the more memory your app is using,
    the more expensive a frame will be to render. Of course, there are exceptions,
    but watching the memory can pinpoint potential issues or even memory leaks. A
    high memory will often point to models, textures, or other assets that may need
    optimization.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存（图形）**：一般来说，你的应用使用的内存越多，渲染一帧的成本就越高。当然，也有例外，但监控内存可以定位潜在的问题或甚至内存泄漏。高内存消耗通常指向可能需要优化的模型、纹理或其他资源。'
- en: '**Loading (the process of adding, replacing, or updating new content in the
    scene)**:'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载（在场景中添加、替换或更新新内容的过程）**：'
- en: '**Object instantiation**: Large complex meshes with multiple detailed textures
    will require extra load times. You will often want to cache or preload objects
    in order to reduce interruptions during loading. For most of our examples, this
    wasn''t an issue, but a good example of where this was a problem was in [Chapter
    10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed Reality*, where
    we used the 3D map.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象实例化**：具有多个详细纹理的大型复杂网格将需要额外的加载时间。你通常会想要缓存或预加载对象，以减少加载过程中的中断。在我们的大多数示例中，这并不是一个问题，但一个很好的例子是在[第10章](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml)，*在混合现实中的混合*，我们使用了3D地图。'
- en: '**Streaming**:Streaming is a great way to load media resources such as audio
    or video to play just the content you need. In Unity, setting a resource to stream
    instead of loading completely is fairly easy and can be done at the resource definition,
    as shown in the following screenshot:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流式传输**：流式传输是一种将媒体资源（如音频或视频）加载到播放所需内容的绝佳方式。在Unity中，将资源设置为流而不是完全加载相对简单，可以在资源定义时完成，如下面的截图所示：'
- en: '![](img/cced39d4-097f-4a5a-bdce-d91f7f0324e8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cced39d4-097f-4a5a-bdce-d91f7f0324e8.png)'
- en: Enabling streaming on an audio resource
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在音频资源上启用流式传输
- en: '**Garbage collection**: All of our platforms manage object lifetime through
    some form of garbage collection while the app is running. Keeping the number of
    objects you create and destroy to a minimum will alleviate pressure on the GC.
    If the GC fills up quickly, this will often trigger an expensive collection operation,
    which may freeze your app. You can reduce object instantiation and collection
    by creating object pooling. Object pooling is where you keep a stock of objects
    in memory, adding and removing objects from the scene as you need.'
  id: totrans-75
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垃圾回收**：在我们所有的平台上，当应用运行时，都会通过某种形式的垃圾回收来管理对象的生命周期。将创建和销毁的对象数量保持在最低限度可以减轻垃圾回收的压力。如果垃圾回收很快填满，这通常会触发一个昂贵的回收操作，这可能会冻结你的应用。你可以通过创建对象池来减少对象的实例化和回收。对象池就是你在内存中保留一批对象，根据需要从场景中添加和移除对象。'
- en: '**Interaction (includes any activity by the user or the environment, be it
    physical or artificial)**:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互（包括用户或环境的任何活动，无论是物理的还是人工的）**：'
- en: '**Environment detection**: This is a requirement more specific to AR apps and
    crucial to ARCore. If you are planning to augment detection of point clouds or
    planes, ensure that you optimize this code as much as possible.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境检测**：这是一个更具体于 AR 应用程序的要求，对于 ARCore 来说是至关重要的。如果你计划增强点云或平面的检测，请确保尽可能优化此代码。'
- en: '**Object interaction (physics)**: Limit the number of objects that you need
    to test for ray casting or collisions. You can do this by tagging your objects
    and then filter the tags. In Unity, this feature is built in, but it is fairly
    easy to implement for other platforms.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象交互（物理）**：限制你需要测试的用于射线投射或碰撞的对象数量。你可以通过标记你的对象然后过滤标签来实现这一点。在 Unity 中，这个功能是内置的，但对于其他平台来说实现起来相当简单。'
- en: '**AI (machine learning)**: If your app needs to do any AI for an **non-player
    character** (**NPC**) or other agent, then you may want to limit any expensive
    calls for AI or learning. Instead of running your AI for every frame, you may
    want to limit it to every fifth or tenth frame, for instance. Often, this has
    the added benefit of making the AI more realistic or smarter, since it appears
    to think for a short period before action.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AI（机器学习）**：如果你的应用程序需要为**非玩家角色**（NPC）或其他代理执行任何 AI，那么你可能想限制任何昂贵的 AI 或学习调用。例如，你可能会想将
    AI 限制在每第五或第十帧运行，而不是每帧都运行。通常，这还有额外的优势，即使 AI 更真实或更智能，因为它似乎在采取行动之前会短暂地思考。'
- en: The preceding list is a good place to start when looking for possible performance
    problems, and it should suit you well as a guide for any platform you need to
    profile. In the next section, we will cover some general troubleshooting tips
    that you can use for each platform when developing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找可能存在的性能问题时，前面的列表是一个很好的起点，并且它应该很好地作为你需要分析的平台指南。在下一节中，我们将介绍一些通用的故障排除技巧，这些技巧可以在开发过程中应用于每个平台。
- en: General troubleshooting
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般故障排除
- en: 'We learned the basics of the debugging process for each platform, but we never
    covered any techniques for debugging or troubleshooting. Just like profiling,
    there is a basic guide or list that you can follow to make you more efficient
    when troubleshooting. Use the following list of steps to help you troubleshoot
    your next issue:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了每个平台的调试过程的基础，但我们从未介绍过任何调试或故障排除的技术。就像分析一样，有一个基本的指南或列表可以遵循，以使你在故障排除时更加高效。使用以下步骤列表来帮助你解决下一个问题：
- en: '**Console**: The first place to look is for any errors that are being reported
    to the console. All our platforms provide a console, and you should be familiar
    with accessing it on your platform of choice. Does the error make sense? Are you
    able to pinpoint the section of code or item causing the issue?'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**控制台**：首先需要查看的是控制台报告的任何错误。我们所有的平台都提供了控制台，你应该熟悉在你的选择平台上如何访问它。错误有意义吗？你能否确定导致问题的代码部分或项目？'
- en: '**Google**: If you see an obscure console message and are not quite sure what
    it does, then Google it. You don''t want to Google the entire message, but just
    extract five or six key words in the phrase and use those. You may also want to
    add words to cover your platform; for instance, Java, Android, or, Unity C#.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Google**: 如果你看到一条晦涩的控制台消息，并且不确定它是什么意思，那么就去谷歌搜索。你不需要搜索整个消息，只需提取短语中的五到六个关键词并使用这些关键词。你可能还需要添加一些词来覆盖你的平台；例如，Java、Android
    或 Unity C#。'
- en: '**Logging**: Instrument your code by injecting logging statements in key areas
    of your code. If your code is not reporting errors to the console, put in logging
    to let you know where the code flows. This can help you determine if and when
    key sections of code are being run.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志记录**：通过在代码的关键区域注入日志语句来对你的代码进行工具化。如果你的代码没有向控制台报告错误，请添加日志以便你知道代码的流向。这可以帮助你确定关键代码部分是否被运行。'
- en: '**Replicate**: Isolate the problem and try to replicate it in a new project
    or test app. If you are unable to isolate the code, you have a bigger issue, and
    you should probably refactor. Generally, unless the issue requires a workaround
    or is something more serious, replicating the project can solidify your understanding
    of the issues. Replicating an issue cannot only help you solve the problem, but
    it can also help you refactor and clean your code.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**复现**：隔离问题并尝试在一个新的项目或测试应用中复现它。如果你无法隔离代码，你可能有一个更大的问题，你可能需要重构。通常，除非问题需要解决方案或更严重，否则复现项目可以巩固你对问题的理解。复现问题不仅可以帮助你解决问题，还可以帮助你重构和清理代码。'
- en: '**Post it**: If you still don''t have a resolution after replicating the problem
    then look for the appropriate forum and post your issue. Ensure that you provide
    your replicated sample when you post your issue. It will often be the first thing
    someone will likely ask you for, especially if the problem is complex. Also, showing
    that you spent time replicating the problem will make your post more credible
    and avoid the wasted time of responding to simple questions.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布它**：如果你在复制问题后仍然没有找到解决方案，那么请寻找合适的论坛并发布你的问题。确保你在发布问题时提供复制的样本。这通常会是人们首先要求你的东西，特别是如果问题很复杂。此外，展示你已经花费时间复制问题会使你的帖子更具可信度，并避免回答简单问题所浪费的时间。'
- en: '**Work around it**: If you can''t resolve your issue, then work around it.
    Sometimes, resolving your issue is not possible or just too expensive and time
    consuming. Then, you will need to come up with another way to either build the
    feature or alter it. This will often require going back to the designer or visionary,
    if your project has one, and consulting them for some possible workarounds.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**绕过它**：如果你无法解决你的问题，那么就绕过它。有时，解决问题是不可能的，或者成本太高，耗时太长。那么，你需要想出另一种方法来构建功能或修改它。这通常需要回到设计师或愿景者那里，如果你的项目有这样的人的话，并咨询他们可能的解决方案。'
- en: The preceding list is again a good place to start when you encounter an issue.
    If you have been developing software for some time, you will likely have your
    own process, but the preceding list is probably not much different from yours.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到问题时，上述列表又是一个好的起点。如果你已经开发软件一段时间了，你可能会有自己的流程，但上述列表可能与你的大致相同。
- en: Troubleshooting code
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除代码
- en: 'For those of you with less experience in troubleshooting code, follow this
    simple exercise:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些在代码故障排除方面经验较少的你们，请遵循以下简单练习：
- en: Open the Unity editor to a new blank project and starting scene.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unity编辑器到一个新的空白项目和起始场景。
- en: Create a Cube object in the scene.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建一个立方体对象。
- en: 'Select the Cube and in the Inspector window, click on Add Component. Select
    New Script and the set the name to `Test` and then click on Create and Addto add
    the script to the object, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择立方体，在检查器窗口中，点击“添加组件”。选择“新脚本”，将名称设置为`Test`，然后点击“创建并添加”将脚本添加到对象中，如下所示：
- en: '![](img/5a5550b7-8989-4ee9-ab8e-bbcce08ef624.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a5550b7-8989-4ee9-ab8e-bbcce08ef624.png)'
- en: Creating a new script with Add Component
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“添加组件”创建一个新的脚本。
- en: This will create a script in the root `Assets` folder. It's not the best place
    to drop a script, but this method is useful for creating quick test scripts.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在根`Assets`文件夹中创建一个脚本。这不是放置脚本的最佳位置，但这种方法对于创建快速测试脚本很有用。
- en: Try to avoid writing replication/test or proof of concept code in your main
    development project. Keep your main project as clean as possible. If you are building
    anything commercial, you will most certainly want to go through the extra effort
    of validating every asset or resource in your project or at least the ones you
    are responsible for. It is a useful team exercise to go through your references
    and assets on a regular basis, perhaps once a month or more frequently if you
    are making multiple changes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量避免在你的主要开发项目中编写复制/测试或概念验证代码。尽量保持你的主要项目尽可能干净。如果你正在构建任何商业产品，你肯定会想通过额外的努力验证你的项目中的每个资产或资源，至少是你负责的那些。定期检查你的参考和资产是一个有用的团队练习，可能每月一次，如果你正在做出多次更改，可能更频繁。
- en: 'Open the `Test` script in an editor of your choice and add the following highlighted
    lines of code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你选择的编辑器中打开`Test`脚本，并添加以下突出显示的代码行：
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This script simply tracks a `GameObject` called `monster` and determines when
    its `x` position exceeds `5`. When it does, the script destroys its parent object
    with `Destroy(this)`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此脚本简单地跟踪一个名为`monster`的`GameObject`，并确定其`x`位置是否超过`5`。当它超过时，脚本使用`Destroy(this)`销毁其父对象。
- en: Save the file and return to Unity.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并返回Unity。
- en: Add another Cube to the scene and rename it to `Monster`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中添加另一个立方体并将其重命名为`Monster`。
- en: Press the Play button at the top of the editor to start the scene.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器的顶部按下播放按钮以开始场景。
- en: 'Click on the Console window to bring it to the top. Watch the stream of errors,
    as illustrated in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击控制台窗口将其带到最前面。观察错误流，如下截图所示：
- en: '![](img/bcaded55-5c24-4d27-b033-c7cab761f00f.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bcaded55-5c24-4d27-b033-c7cab761f00f.png)'
- en: Console window showing a stream of errors
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 显示错误流的控制台窗口
- en: So, the general error message we are seeing is UnassignedReferenceException.
    Quickly Google that text to see what comes back in the results. Did that give
    you any more insights other than the message on the Console?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，我们看到的通用错误信息是UnassignedReferenceException。快速谷歌搜索这个文本，看看结果中有什么。这给你带来了比控制台上的消息更多的洞察力吗？
- en: 'Chances are that you may have already solved the issue, but let''s continue
    as if we are still stumped. Say, for instance, the Google result was far less
    helpful. Follow along to continue our troubleshooting (debugging) process:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你已经解决了这个问题，但让我们继续假设我们仍然困惑。比如说，谷歌的结果不太有帮助。继续跟随我们的故障排除（调试）过程：
- en: 'Our next step is logging. Add the following line of code just inside the `Update`
    method:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下一步是记录日志。在`Update`方法中添加以下代码行：
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This line of code outputs a debug message to the Console.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这行代码将调试信息输出到控制台。
- en: Of course, running the code again will replicate the same issue, which also
    means that you just replicated the problem, and cover the next step in a single
    line of code.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，再次运行代码将重现相同的问题，这也意味着你只是复制了问题，并在一行代码中覆盖了下一步。
- en: While logging is good, it can also be bad, for performance and anyone trying
    to hack your game. You can usually control the level of logging you want to output
    for each environment. As a general rule though, try to avoid excessive logging
    unless the information is required or useful.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然日志记录是好的，但它也可能不好，对性能和试图破解你的游戏的人来说都是如此。你通常可以控制为每个环境输出你想要的日志级别。然而，作为一般规则，除非信息是必需的或有用的，否则尽量避免过多的日志记录。
- en: At this point in our example, it should be self-explanatory as to what the issue
    is, but of course, this isn't always the case. When that happens, if you have
    exhausted all other paths, then post the problem to an appropriate forum. If nothing
    comes back in time, then you may need to move on and work around the problem.
    Strangely enough, it is often not unusual to be halfway through writing a workaround
    to realize your mistake. It happens, and the best advice is to just move on. Failure
    is a great way to learn and the more you fail, the more you learn.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，此时应该很明显知道问题是什么，但当然，情况并不总是如此。当你已经尝试了所有其他途径时，如果问题仍未解决，那么你可以将问题发布到适当的论坛。如果长时间没有回复，那么你可能需要继续前进并绕过这个问题。奇怪的是，在编写绕过问题的解决方案一半时意识到错误的情况并不少见。这种情况会发生，最好的建议就是继续前进。失败是学习的好方法，你失败得越多，你学到的就越多。
- en: In Canada, you are taught how to winter drive in the ice and snow by going out
    to a parking lot and spinning around and losing control. While this can certainly
    be lot of fun, it teaches the driver how to lose control under controlled poor
    weather conditions. This not only gives the driver more confidence, it also reinforces
    how to control a vehicle when it loses traction under high speeds. Then, when
    the driver does lose control, they can attempt to avoid or minimize damage. Unit
    testing your code is not like learning how to winter drive. It tests the limits
    of your code so that you can be sure what will happen if something works or fails.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在加拿大，你通过去停车场旋转并失去控制来学习如何在冰雪中驾驶。虽然这确实可以带来很多乐趣，但它教会了驾驶员如何在可控的恶劣天气条件下失去控制。这不仅给了驾驶员更多的信心，还加强了在高速度下车辆失去牵引力时的控制方法。然后，当驾驶员真的失去控制时，他们可以尝试避免或最小化损害。对你的代码进行单元测试并不像学习如何在冰雪中驾驶。它测试了代码的极限，这样你就可以确信如果某件事成功或失败会发生什么。
- en: Most developers struggle with the concept of adding unit test code to their
    game or graphics projects. In fact, the practice is discouraged by the lack of
    tools or knowledge available. Unit testing or rigorously testing your code is
    never a waste of time, and using a testing framework for your platform will go
    a long way to make this an easier task. Now whether you decide to write unit tests
    for your code or not is up to you, but you should learn how to unit test. The
    practice of just learning how to test your code will open your eyes to a world
    of possibilities.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者都难以理解在游戏或图形项目中添加单元测试代码的概念。实际上，由于缺乏工具或知识，这种做法是被劝阻的。单元测试或严格测试你的代码永远不会是浪费时间，而且为你的平台使用测试框架将大大简化这项任务。现在，无论你决定是否为你的代码编写单元测试，这完全取决于你，但你应该学习如何进行单元测试。仅仅学习如何测试你的代码就会让你眼界大开，看到一片新的可能性世界。
- en: The more you code and develop games or other applications, the better you will
    get at troubleshooting errors. There is no substitute for practical experience.
    In the next section, we will look at more specific troubleshooting items that
    you may have encountered during the course of the book.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你编写的代码越多，开发的游戏或其他应用程序越多，你在故障排除错误方面就会变得越好。实践经验是无法替代的。在下一节中，我们将探讨您在阅读本书过程中可能遇到的更多具体故障排除项目。
- en: Exercises
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Complete the following exercises on your own:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 独立完成以下练习：
- en: Alter the `if` statement that checks the monster's position so that the code
    avoids the error entirely.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改检查怪物位置的`if`语句，以便代码完全避免错误。
- en: Are you able to fix the unassigned reference issue in code? Hint—check out the
    `GameObject.Find` method.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能修复代码中的未分配引用问题吗？提示——查看`GameObject.Find`方法。
- en: Write a monster script that moves its block using the keyboard or mouse as input.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个使用键盘或鼠标作为输入来移动其块的怪物脚本。
- en: Troubleshooting tips
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除技巧
- en: 'There is a lot that can go wrong when working with any new technology, not
    only because of your lack of familiarity, but it may also happen that the technology
    may not be prepared to do all the things it claims it can do. Here''s a table
    of common issues you may encounter while working through the book:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用任何新技术时，可能会出现很多问题，这不仅是因为你对它的不熟悉，还可能是因为这项技术可能没有准备好做它声称能做的事情。以下是在阅读本书时可能会遇到的一些常见问题的表格：
- en: '| **Platform** | **Issue** | **Resolution** |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | **问题** | **解决方案** |'
- en: '| Web | Unable to load page or find server | Check whether you are using the
    correct endpoint for your machine. If you have a few choices, try a different
    option. Confirm that your system does not have a firewall running that could be
    blocking the communication. Try disabling your firewall (temporarily) and try
    again. If this resolves the issue, then make an exception in your firewall for
    port `9999` or whatever port you used. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| Web | 无法加载页面或找到服务器 | 检查您是否正在使用适合您机器的正确端点。如果您有几个选择，尝试不同的选项。确认您的系统没有运行可能阻止通信的防火墙。尝试暂时禁用防火墙并再次尝试。如果这解决了问题，那么在防火墙中为端口`9999`或您使用的任何端口创建一个例外。|'
- en: '| Web | ARCore displays an error message on the page | Ensure that the ARCore
    service is installed and you are using the WebARCore enabled browser for your
    platform. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| Web | ARCore在页面上显示错误消息 | 确保ARCore服务已安装，并且您正在使用适用于您平台的WebARCore启用浏览器。|'
- en: '| Web | Missing references | Ensure that you check that the path you are using
    to load content or scripts is correct. You can do this easily in Chrome by checking
    the Sources tab. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| Web | 缺少引用 | 确保您检查的内容或脚本加载路径是否正确。您可以在Chrome中通过检查“源”标签轻松完成此操作。|'
- en: '| Android | Unable to build or missing references | Android Studio is very
    helpful, but it sometimes needs to load a lot of references. In this case, you
    just need to be patient and load everything the project requires. If you are building
    your project from scratch, you will need to refer to a good tutorial on Android
    project setup to do it right. If you find that you are still missing references,
    then create a new project and try again. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| Android | 无法构建或缺少引用 | Android Studio非常有帮助，但它有时需要加载大量的引用。在这种情况下，您只需要有耐心，加载项目所需的所有内容。如果您是从头开始构建项目，您需要参考关于Android项目设置的优质教程来正确完成。如果您发现您仍然缺少引用，那么请创建一个新的项目并再次尝试。|'
- en: '| Android/Unity | Unable to connect to device | This rarely happens anymore,
    but it can happen on occasion. Unplug and plug your device back in or run `adb
    devices` at a console or shell window. If you are connecting remotely, you may
    have to reconfigure the device by reconnecting the USB and resetting the connection.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| Android/Unity | 无法连接到设备 | 这种情况很少发生，但偶尔也会发生。请拔掉并重新插入您的设备，或在控制台或shell窗口中运行`adb
    devices`。如果您正在远程连接，您可能需要通过重新连接USB并重置连接来重新配置设备。|'
- en: '| Unity | All compiler errors have to be fixed before you enter the play mode
    | Check the console for any red error messages. Double-click on any messages to
    be taken to the syntax error in the code. Do your best to resolve or remove the
    syntax error. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| Unity | 在进入播放模式之前必须修复所有编译错误 | 检查控制台是否有任何红色错误消息。双击任何消息将跳转到代码中的语法错误。尽力解决或删除语法错误。|'
- en: '| Unity | Unable to build | Check for any compiler errors and ensure that your
    scenes are added to the build with the Build Settings dialog. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| Unity | 无法构建 | 检查是否有任何编译错误，并确保您的场景已通过构建设置对话框添加到构建中。|'
- en: '| Unity | Build stalls | If you are connected to a device and the cable disconnects
    momentarily, this can cause the build to lock or just stop. Usually, just clicking
    on Cancel will exit the build process, and you can just start again. On occasion,
    very rarely, you may need to restart Unity. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| Unity | 构建停滞 | 如果你连接到设备并且电缆暂时断开，这可能会导致构建锁定或停止。通常，只需点击“取消”即可退出构建过程，然后你可以重新开始。偶尔，非常罕见的情况下，你可能需要重新启动Unity。
    |'
- en: The preceding table should help you resolve more of the common show stopper
    issues you may encounter while traversing the book. If you encounter something
    outside this list, certainly consult Google or your other favorite search engine.
    You will often find that just rebuilding the project will teach you where you
    went wrong.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表格应该能帮助你解决你在阅读本书过程中可能遇到的更多常见问题。如果你遇到的问题不在列表中，当然可以咨询Google或其他你喜欢的搜索引擎。你经常会发现，仅仅重新构建项目就能教会你哪里出了错。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This is the last chapter of our book, and we spent our time well, learning about
    performance and troubleshooting. We first covered the use of the various performance
    profiling tools you may use for each of our platforms. Then, we covered a set
    of very basic tips for increasing your app's performance, which covered everything
    from frame rate to asset size. This led us to cover tips for troubleshooting basic
    problems and, more specifically, coding issues. We finished off with a table of
    helpful troubleshooting tips that you can use to consult if you encounter more
    specific troublesome problems.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的最后一章，我们花了很多时间学习性能和故障排除。我们首先介绍了你可以在每个平台上使用的各种性能分析工具。然后，我们介绍了一系列非常基本的提高应用程序性能的技巧，涵盖了从帧率到资产大小的一切。这使我们能够介绍解决基本问题的技巧，以及更具体地说，是编码问题。最后，我们提供了一个有用的故障排除技巧表，如果你遇到更具体的问题，可以参考这个表。
- en: Now that you have completed this book, you have just started your journey into
    discovering AR and MR. There are plenty of more good books from Packt on AR, web
    development, Android development, and, of course, Unity. Readers are also encouraged
    to seek out your local meetups on AR/VR or if there is none, create their own.
    Seeing what others are doing for AR or even VR development can encourage new ideas
    and best practices. We all, really are, just beginning an exciting journey into
    a new computing interface that will radically change our lives in the years to
    come. With the ongoing development of wearable mainstream commercial glasses coming
    around the corner, you should also be poised for many more changes to come in
    AR.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了这本书，你刚刚开始踏上探索增强现实（AR）和混合现实（MR）的旅程。Packt出版社在AR、网络开发、Android开发和当然还有Unity方面有更多优秀的书籍。我们也鼓励读者们寻找你们当地的AR/VR聚会，如果没有的话，也可以自己创建一个。看到别人在AR或甚至VR开发中所做的事情可以激发新的想法和最佳实践。我们所有人，实际上都刚刚开始了一段激动人心的旅程，进入一个将彻底改变我们未来生活的全新计算界面。随着可穿戴主流商用眼镜的持续发展，你也将准备好迎接AR领域更多的变化。
