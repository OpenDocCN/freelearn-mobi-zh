["```kt\n    fun main(args: Array<String>) { \n      Observable.range(1,10) \n        .subscribe { \n           runBlocking { delay(200) } \n           println(\"Observable1 Item Received $it\") \n         } \n\n      Observable.range(21,10) \n        .subscribe { \n           runBlocking { delay(100) } \n           println(\"Observable2 Item Received $it\") \n        } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      Observable.range(1, 10) \n       .subscribeOn(Schedulers.computation())//(1) \n       .subscribe { \n          runBlocking { delay(200) } \n          println(\"Observable1 Item Received $it\") \n        } \n\n       Observable.range(21, 10) \n         .subscribeOn(Schedulers.computation())//(2) \n         .subscribe { \n            runBlocking { delay(100) } \n            println(\"Observable2 Item Received $it\") \n          } \n       runBlocking { delay(2100) }//(3) \n    }\n```", "```kt\n    fun main(args: Array<String>) { \n\n      async(CommonPool) { \n        Observable.range(1, 10) \n          .subscribeOn(Schedulers.single())//(1) \n          .subscribe { \n             runBlocking { delay(200) } \n             println(\"Observable1 Item Received $it\") \n           } \n\n         Observable.range(21, 10) \n           .subscribeOn(Schedulers.single())//(2) \n           .subscribe { \n              runBlocking { delay(100) } \n              println(\"Observable2 Item Received $it\") \n            } \n\n          for (i in 1..10) { \n            delay(100) \n            println(\"Blocking Thread $i\") \n          } \n        } \n\n       runBlocking { delay(6000) } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n\n      async(CommonPool) { \n        Observable.range(1, 10) \n          .subscribeOn(Schedulers.trampoline())//(1) \n          .subscribe { \n              runBlocking { delay(200) } \n              println(\"Observable1 Item Received $it\") \n          } \n\n          Observable.range(21, 10) \n            .subscribeOn(Schedulers.trampoline())//(2) \n            .subscribe { \n               runBlocking { delay(100) } \n               println(\"Observable2 Item Received $it\") \n             } \n\n          for (i in 1..10) { \n            delay(100) \n            println(\"Blocking Thread $i\") \n          } \n       } \n\n       runBlocking { delay(6000) } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n\n      val executor:Executor = Executors.newFixedThreadPool(2)//(1) \n      val scheduler:Scheduler = Schedulers.from(executor)//(2) \n\n      Observable.range(1, 10) \n        .subscribeOn(scheduler)//(3) \n        .subscribe { \n           runBlocking { delay(200) } \n           println(\"Observable1 Item Received $it -\n           ${Thread.currentThread().name}\") \n         } \n\n      Observable.range(21, 10) \n        .subscribeOn(scheduler)//(4) \n        .subscribe { \n            runBlocking { delay(100) } \n            println(\"Observable2 Item Received $it -\n            ${Thread.currentThread().name}\") \n         } \n\n       Observable.range(51, 10) \n         .subscribeOn(scheduler)//(5) \n         .subscribe { \n             runBlocking { delay(100) } \n             println(\"Observable3 Item Received $it - \n             ${Thread.currentThread().name}\") \n          } \n          runBlocking { delay(10000) }//(6) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\") \n        .toObservable() \n        .map { \n           item-> \n           println(\"Mapping $item ${Thread.currentThread().name}\") \n           return@map item.toInt() \n        } \n        .subscribe { \n           item -> println(\"Received $item \n           ${Thread.currentThread().name}\") \n        } \n\n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\") \n        .toObservable() \n        .map { \n           item-> \n           println(\"Mapping $item - ${Thread.currentThread().name}\") \n           return@map item.toInt() \n         } \n         .subscribeOn(Schedulers.computation())//(1) \n         .subscribe { \n            item -> println(\"Received $item - \n            ${Thread.currentThread().name}\") \n         } \n\n         runBlocking { delay(1000) } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      listOf(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\") \n        .toObservable() \n        .observeOn(Schedulers.computation())//(1) \n        .map { \n           item-> \n           println(\"Mapping $item - ${Thread.currentThread().name}\") \n           return@map item.toInt() \n         } \n         .observeOn(Schedulers.io())//(2) \n         .subscribe { \n            item -> println(\"Received $item - \n            ${Thread.currentThread().name}\") \n         } \n\n         runBlocking { delay(1000) } \n    } \n```"]