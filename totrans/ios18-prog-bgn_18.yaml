- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Data into Table Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the **Model-View-Controller** (**MVC**)
    design pattern and table views. You also reviewed the table view in the Journal
    List screen. At this point, the Journal List screen displays cells that do not
    contain any data. As shown in the app tour in *Chapter 10*, *Setting Up the User
    Interface*, it should display a list of journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’re going to implement the model objects for the Journal
    List screen to make it display a list of journal entries. You’ll start by learning
    about the model objects that you will use. Then, you’ll create a Swift class that
    can store journal entry instances. After that, you’ll create a static method that
    can return sample journal entry instances. This array will then be used as the
    data source for the table view on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to create model objects,
    how to create sample data, and how to configure view controllers to populate table
    views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding model objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a class to represent a journal entry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sample data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a collection view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will continue working on the `JRNL` project that you modified in *Chapter
    13*, *Modifying App Screens*. The resource files and completed Xcode project for
    this chapter are in the `Chapter15` folder of the code bundle for this book, which
    can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/TmQOr3Qy954](https://youtu.be/TmQOr3Qy954%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by examining the model objects required to store journal entry data
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding model objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you learned in *Chapter 14*, *Getting Started with MVC and Table Views*,
    a common design pattern for iOS apps is Model-View-Controller, or MVC. To recap,
    MVC divides an app into three different parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This handles data storage, representation, and data processing tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This is anything that is on the screen that the user can interact
    with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This manages the flow of information between the model and
    the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s revisit the design of the Journal List screen that you saw during the
    app tour, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: Simulator showing the Journal List screen from the app tour'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and the Journal List screen will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_15_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: Simulator showing the Journal List screen from your app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all the cells currently display placeholders. Based on the MVC
    design pattern, you have partly completed the implementation of the views required
    (the table view) and the controller (the `JournalListViewController` class). You
    will need to create a custom `UITableViewCell` instance to manage what your table
    view cell will display, and you need to add model objects that will provide the
    journal entry data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each journal entry will store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The date the entry was made
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rating value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Title text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Body text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional geographical location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *Chapter 14*, *Getting Started with MVC and Table Views*, you used an array
    of `String` arrays to represent journal entries. However, a `String` array can
    only store strings, and you must be able to store data types other than `String`.
    To resolve this, you will create a class named `JournalEntry` to store all the
    data required by a journal entry. Next, you will create a static method that returns
    sample data stored in `JournalEntry` instances. After that, you will create a
    custom `UITableView` class to manage the data displayed by the table view cells.
    Finally, you will modify the `JournalListViewController` class so that it can
    provide data for the table view to display.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class to represent a journal entry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a model object that can represent a journal entry in your app, you
    will add a new file to your project, `JournalEntry.swift`, and declare a `JournalEntry`
    class that has the required properties for a journal entry. Before you do so,
    you’ll configure your project to use Swift 6 and change the main project folder
    to a group. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JRNL** icon. Click the **JRNL** target
    and click **Build Settings**. Scroll down to **Swift Compiler – Language** and
    set **Swift Language Version** to **Swift 6**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: Editor area showing Build Settings with Swift 6 set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the blue **JRNL** project folder under the **JRNL** icon and
    choose **Convert to Group**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.4: Pop-up menu with Convert to Group selected'
  prefs: []
  type: TYPE_NORMAL
- en: The folder color will change from blue to dark gray. Making the folder a group
    will allow you to rearrange the order of the files in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the differences between folders and groups in Xcode, visit:
    [https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project](https://developer.apple.com/documentation/xcode/managing-files-and-folders-in-your-xcode-project).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reorder the files in the group until they look like the screenshot below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: Project navigator showing reordered files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the **JournalListViewController** file in the Project navigator
    and select **New Group from Selection**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.6: Pop-up menu with New Group from Selection selected'
  prefs: []
  type: TYPE_NORMAL
- en: This will create a new group containing the `JournalListViewController` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the placeholder text for the group name with `Journal List Screen`
    and press *Return*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.7: Project navigator showing the Journal List Screen group'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now create groups for the model and view objects used in the Journal
    List screen. Right-click the **Journal List Screen** group and choose **New Group**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.8: Pop-up menu with New Group selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the placeholder text with `Model` and press *Return*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.9: Project navigator showing the Model group'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another folder by repeating *Step 3* and replacing the placeholder text
    with `View`. The Project navigator should look like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.10: Project navigator showing the View and Model groups'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll now create a file that will contain the implementation of the `JournalEntry`
    class. Right-click the **Model** folder and choose **New File from Template...**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.11: Pop-up menu with New File from Template… selected'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.12: Choose a template for your new file: screen with Swift File selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name the file `JournalEntry` and then click **Create**. The file will appear
    in the Project navigator and its contents will appear in the **Editor** area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.13: Editor area showing the contents of the JournalEntry file'
  prefs: []
  type: TYPE_NORMAL
- en: The only line in this file is an `import` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `import` statement allows you to import other code libraries into your
    project, giving you the ability to use classes, properties, and methods from them.
    Foundation is one of Apple’s core frameworks, and you can learn more about it
    here: [https://developer.apple.com/documentation/foundation](https://developer.apple.com/documentation/foundation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `import` statement to import `UIKit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`UIKit` provides the infrastructure required for iOS apps. You can read more
    about it here: [https://developer.apple.com/documentation/uikit](https://developer.apple.com/documentation/uikit).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code after the `import` statement to declare a class named
    `JournalEntry`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after the opening curly brace of the `JournalEntry`
    class to add the desired properties for this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: The `date` property is of type `Date` and will store the date the journal entry
    was made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `rating` property is of type `Int` and will store the number of stars for
    the journal entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `title` property is of type `String` and will store the title text of the
    journal entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `body` property is of type `String` and will store the body text of the
    journal entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `photo` property is of type `UIImage?` and will store a photo. This is an
    optional property because not all journal entries require a photo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lat` and `long` properties are of type `Double?` and will store the location
    where the journal entry was made. These are optional properties because not all
    journal entries require a location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An error will appear because your class does not have an initializer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to implement an initializer after the `longitude` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Classes are covered in *Chapter 7*, *Classes, Structures, and Enumerations*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The initializer for the `JournalEntry` class has arguments for an `Int` value,
    two `String` values, an optional `UIImage` value, and two optional `Double` values.
    The default value for all the optional values is `nil`. The question mark after
    the `init` keyword means that this is a **failable initializer**; it will not
    create a `JournalEntry` instance if certain conditions are not met.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The initializer will fail to create a `JournalEntry` instance if any or all
    of the following conditions return `true`; `title` is empty, `body` is empty,
    `rating` is less than `0`, and `rating` is greater than `5`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The current date is assigned to the `date` property when the `JournalEntry`
    instance is created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This assigns the argument values to the corresponding properties of the `JournalEntry`
    instance. Note the use of `self` to differentiate properties from arguments having
    the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MARK: -` statements make it easy to navigate through your code. Click
    the last part of the path that is visible under the toolbar, and you will see
    both **Properties** and **Initialization** sections displayed in a menu. This
    enables you to easily go to these sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.14: Menu showing the Properties and Initialization sections'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have a class, `JournalEntry`, that can store all the details
    of a single journal entry. In the next section, you’ll create a static method
    that returns sample `JournalEntry` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Creating sample data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in *Chapter 14*, *Getting Started with MVC and Table Views*, you
    can use an array as the data source for a table view. You will now create an extension
    containing a static method that will return an array containing three sample journal
    entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `JournalEntry` file in the Project navigator, and type in the following
    after all other code in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This extension contains a `createSampleJournalEntryData()` method that creates
    three `UIImage` instances using the symbols from Apple’s `SFSymbols` library,
    creates three `JournalEntry` instances, adds them to an array, and returns the
    array. The `static` keyword means that it is a method on the `JournalEntry` type
    instead of a `JournalEntry` instance method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about type and instance methods, see this link: [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/methods/)'
  prefs: []
  type: TYPE_NORMAL
- en: You have now completed the implementation of the `JournalEntry` class. You have
    also added a static method that will generate three sample journal entries. In
    the next section, you’ll modify the `JournalListViewController` class to use the
    array returned by this method to populate the table view.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in a table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 14*, *Getting Started with MVC and Table Views*, you used a table
    view cell configuration to set the data to be displayed by the table view cells.
    You will not be able to do the same here because you are using a custom table
    view cell that you implemented in *Chapter 13*, *Modifying App Screens*.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far in this chapter, you’ve implemented a static method that returns an
    array containing three `JournalEntry` instances. You will now modify the `JournalListViewController`
    class to use that array as the data source for the table view on the Journal List
    screen. To do so, you will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom `UITableViewCell` instance and assign it as the identity for
    the `journalCell` table view cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `JournalListViewController` class to get sample data from the `createSampleJourneyEntryData`
    static method and assign it to a `journalEntries` array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the data source methods in the `JournalListViewController` class to populate
    the table view cells using data from the `journalEntries` array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll begin by creating a custom `UITableViewCell` instance in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom UITableViewCell subclass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the table view on the Journal List screen displays 10 table view
    cells that do not contain any data. You need a way to set the values for the image
    view and the labels in the table view cells, so you will create a new `UITableViewCell`
    subclass, `JournalEntryTableViewCell`, for this purpose. You will assign this
    class as the identity of the table view cells in the Journal List screen. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project navigator, right-click on the **View** folder and select **New
    File from Template...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class**, then click
    **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.15: Choose a template for your new file screen'
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Cocoa Touch Class** template will allow you to set the superclass
    and automatically insert boilerplate code for the class that you will create.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Choose options for your new file** screen will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.16: Choose options for your new file screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure the class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class**: `JournalListTableViewCell`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subclass**: `UITableViewCell`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Also create XIB**: Unchecked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: `Swift`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Next** when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create**, and a new file, `JournalListTableViewCell`, will be added
    to the **View** group in your project. Inside it you will see the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all the code from the `JournalListTableViewCell` class declaration as
    shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create three properties corresponding to the subviews of the `journalCell`
    table view cell, type in the following code between the curly braces of the `JournalEntry`
    class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The implementation of the `JournalListTableViewCell` class is complete. You’ll
    now assign this class as the identity of the `journalCell` table view cell. Click
    the **Main** storyboard file in the Project navigator and click **journalCell**
    under the **Journal Scene** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.17: Document outline showing journalCell selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button. In the **Custom Class** section, set **Class**
    to `JournalListTableViewCell`. This sets a `JournalListTableViewCell` instance
    as the custom table view subclass for `journalCell`. Press *Return* when this
    is done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.18: Identity inspector showing Class settings for journalCell'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve just declared and defined the `JournalListTableViewCell` class and assigned
    it as the custom table view cell subclass for the `journalCell` table view cell.
    In the next section, you’ll connect this class to the image view and the labels
    in the `journalCell` table view cell, so you can control what they display.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the outlets in journalCell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage what is being displayed by the table view cells in the Journal List
    screen, you’ll use the Connections inspector to connect the image view and labels
    in the `journalCell` table view cell to outlets in the `JournalListTableViewCell`
    class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With **journalCell** selected in the document outline, click the Connections
    inspector to display its outlets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.19: Connections inspector showing outlets for journalCell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **photoImageView** outlet to the image view in the table view
    cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.20: Connections inspector showing photoImageView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: Drag from the **dateLabel** outlet to the top label in the table view cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.21: Connections inspector showing dateLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **titleLabel** outlet to the bottom label in the table view cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.22: Connections inspector showing titleLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  prefs: []
  type: TYPE_NORMAL
- en: The `journalCell` table view cell in the `Main` storyboard file has now been
    set up with a custom table view subclass, `JournalListTableViewCell`. The outlets
    for the table view cell’s image view and labels have also been created and assigned.
    Now you will be able to set the `photoImageView`, `dateLabel`, and `titleLabel`
    outlets to display a photo, a date, and a title in each cell when the app is run.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll update the table view data source methods in the
    `JournalListViewController` class to provide the number of table view cells to
    be displayed in the table view, as well as to provide the journal entry photo,
    date, and title for each cell.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the data source methods in JournalListViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data source methods in the `JournalListViewController` class are currently
    set to display 10 table view cells, with each cell containing an image view displaying
    a smiley face and two labels. You’ll update them to get the number of cells to
    display, and the data to put in each cell, from the `SampleJournalEntryData` instance.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **JournalListViewController** file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rearrange the code in the `JournalListViewController` class so that the `tableView`
    outlet and the `viewDidLoad()` method are located before the table view delegate
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `MARK` statement before the property declarations as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `MARK` statement before the `viewDidLoad()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `MARK` statement before the table view data source methods as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `MARK` statement before `UnwindNewEntryCancel(segue:)` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the code in `JournalListViewController` appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following code after the `tableView` outlet declaration to create
    a `journalEntries` property, which will contain an array of `JournalEntry` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `private` keyword restricts the use of the `journalEntries` array to the
    `JournalListViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Access Control in Swift at this link: [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/accesscontrol/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad()` method as shown to populate the `journalEntries`
    array when the app is launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `createSampleJournalEntryData()` method will create three `JournalEntry`
    instances and assign them to the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `tableView(_:numberOfRowsInSection:)` as shown here. This will make
    the table view display a `journalCell` for each element in the `journalEntries`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `tableView(_:cellForRowAt:)` as shown to set the image view and labels
    for each cell using data from the corresponding element in the `journalEntries`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This statement specifies the cell that is dequeued is cast as an instance of
    `JournalListTableViewCell`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `as!` operator at this link: [https://developer.apple.com/swift/blog/?id=23](https://developer.apple.com/swift/blog/?id=23).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the `JournalEntry` instance that corresponds to the current
    cell in the table view. In other words, the first table view cell in the table
    view corresponds to the first `JournalEntry` instance in the `journalEntries`
    array, the second table view cell corresponds to the second `JournalEntry` instance,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the photo from the `JournalEntry` instance and assigns it
    to the image of the `journalCell` instance’s `photoImageView` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the date from the `JournalEntry` instance, formats it into
    a string, and assigns it to the text for the `journalCell` instance’s `dateLabel`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the string stored in `title` from the `JournalEntry` instance
    and assigns it to the text for the `journalCell` instance’s `titleLabel` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This statement returns the populated `journalCell` instance for display in the
    table view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the app. You’ll see the table view in the Journal List screen
    display text and images for each `JournalEntry` instance in the `journalEntries`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_15_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.23: Simulator showing the Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: Tapping on a row displays the Journal Entry Detail screen, but this screen does
    not display any data from the selected journal entry yet. You will address this
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! At this point, the Journal List screen displays text and images
    from the `journalEntries` array. But you can’t add or remove journal entries from
    the `journalEntries` array yet. You will learn how to do this in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you implemented the model objects for the Journal List screen
    to make it display a list of journal entries. You learned about the model objects
    that you will use, created a Swift class that can be used to store journal entry
    instances, and created a static method returning sample journal entries. You then
    created a custom instance of `UITableViewCell` for your table view and used the
    method returning sample journal entries to populate an array. This array is then
    used as the data source for the table view in the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to create model objects, how to create sample data, and how
    to configure view controllers to populate table views using that sample data.
    This will be useful should you wish to create your own apps that use table views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to add and remove journal entries from
    the Journal List screen. You’ll also learn how to pass data between view controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
