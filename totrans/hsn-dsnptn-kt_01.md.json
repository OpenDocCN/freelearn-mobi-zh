["```kt\nSystem.out.println(\"Hello\"); //<- This is a semicolon System.out.println(\"World\"); //<- I still see you, semicolon \n```", "```kt\nprintln(\"Hello\") //<- No semicolon here\nprintln(\"World\") //<- Not here\n```", "```kt\npackage me.soshin.controllers\n```", "```kt\nString s = \"Hello World\";\n```", "```kt\nval s = \"Hello World\"\n```", "```kt\nvar s = \"I'm a string\"\ns = 1 // s is a String\n```", "```kt\nfinal String s = \"Hi\";\ns = \"Bye\"; // Doesn't work\n```", "```kt\nval s = \"Hi\"\ns = \"Bye\" // Doesn't work\n```", "```kt\nvar s = \"Hi\"\ns = \"Bye\" // Works now\n```", "```kt\nString s1 = \"ABC\";\nString s2 = new String(s1);\n\nSystem.out.println(s1 == s2); // false\n```", "```kt\nval s1 = \"ABC\"\nval s2 = String(s1.toCharArray())\n\nprintln(s1 == s2) // true\n```", "```kt\nprintln(s1 === s2) // false\n```", "```kt\nString s = \"Hello\";\n...\ns = null;\nSystem.out.println(s.length); // Causes NullPointerException\n```", "```kt\npublic class Printer {    \n    public static void printLength(final String s) {\n       System.out.println(s.length);\n    }\n}\n```", "```kt\nPrinter.printLength(null); // Again, NullPointerException\n```", "```kt\nif (optional.isPresent()) {\n    System.out.println(optional.get());\n}\n```", "```kt\noptional.ifPresent(System.out::println);\n```", "```kt\nval s : String = null // Won't compile\n```", "```kt\nfun printLength(s: String) {\n    println(s.length)\n}\n```", "```kt\nprintLength(null) // Null can not be a value of a non-null type String\n```", "```kt\nval notSoSafe : String? = null\n```", "```kt\npublic class MyFirstClass {\n```", "```kt\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello world\");\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    println(\"Hello, world!\")\n}\n```", "```kt\nfun getGreeting(): String {\n    return \"Hello, world!\"\n}\n\nfun main(args: Array<String>) {\n    println(getGreeting())\n}\n```", "```kt\npublic String getUnixSocketPolling(boolean isBsd) {\n    String value = null;\n    if (isBsd) {\n        value = \"kqueue\";\n    }\n    else {\n        value = \"epoll\";\n    }\n\n    return value;\n}\n```", "```kt\nfun getUnixSocketPolling(isBsd : Boolean) : String {\n    val value = if (isBsd) {\n        \"kqueue\"\n    } else {\n        \"epoll\"\n    }\n    return value\n}\n```", "```kt\nfun getUnixSocketPolling(isBsd : Boolean) = if (isBsd) \"kqueue\" else \"epoll\"\n```", "```kt\nfun suggestGift(amount : Int) : String {\n    return when (amount) {\n        in (0..10) -> \"a book\"\n        in (10..100) -> \"a guitar\"\n        else -> if (amount < 0) \"no gift\" else \"anything!\"\n    }\n}\n```", "```kt\nprintln(\"I would suggest: ${suggestGift(10)} \")\n```", "```kt\nI would suggest: a book\n```", "```kt\nval gift = suggestGift(100)\nprintln(\"I would suggest: $gift \")\n```", "```kt\nI would suggest: a guitar\n```", "```kt\nclass Player {\n}\n```", "```kt\n// Kotlin figured out you want to create a new player\nval p = Player() \n```", "```kt\nclass Player // Totally fine\n```", "```kt\nabstract class AbstractDungeonMaster {\n    abstract val gameName: String\n\n    fun startGame() {\n        println(\"Game $gameName has started!\")\n    }\n}\n\ninterface Dragon\n```", "```kt\ninterface Greeter {\n fun sayHello() {\n println(\"Hello\")\n }\n}\n```", "```kt\nclass DungeonMaster: Greeter, AbstractDungeonMaster() {\n    override val gameName: String\n        get() = \"Dungeon of the Beholder\"\n}\n```", "```kt\nval p = DungeonMaster()\np.sayHello()  // From Greeter interface\np.startGame() // From AbstractDungeonMaster abstract class\n```", "```kt\nHello\nGame Dungeon of the Beholder has started!\n```", "```kt\nabstract class AbstractDungeonMaster(private val gameName : String) {\n    fun startGame() {\n        println(\"Game $gameName has started!\")\n    }\n}\n```", "```kt\nopen class DungeonMaster(gameName: String):\n        Greeter, AbstractDungeonMaster(gameName)\n```", "```kt\nopen fun startGame() {\n    // Everything else stays the same\n}\n```", "```kt\nclass EvilDungeonMaster(private val awfulGame: String) : DungeonMaster(awfulGame) {\n    override fun sayHello() {\n        println(\"Prepare to die! Muwahaha!!!\")\n    }\n\n    override fun startGame() {\n        println(\"$awfulGame will be your last!\")\n    }\n}\n```", "```kt\npublic class Person {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // More methods come here\n}\n```", "```kt\npublic class ImmutablePerson {\n    private String name;\n\n    public ImmutablePerson(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```", "```kt\npublic class PublicPerson {\n    public String name;\n}\n```", "```kt\nclass Person() {\n    var name : String = \"\"\n}\n```", "```kt\nclass Person {\n    var name : String = \"\"\n    set(value) {\n        field = value.toUpperCase()\n    }\n}\n```", "```kt\ndata class User (val username : String, val password : String)\n```", "```kt\nfinal String word = \"Word\";\nfor (int i = 0; i < word.length; i++) {\n\n}\n```", "```kt\nval word = \"Word\";\nfor (i in 0..(word.length-1)) {\n    println(word[i])\n}\n```", "```kt\nval word = \"Word\";\nfor (i in 0 until word.length) {\n    println(word[i])\n}\n```", "```kt\nval word = \"Word\";\nfor (i in (word.length-1)..0) {\n    println(word[i])\n} // Doesn't print anything\n```", "```kt\nval word = \"Word\";\nfor (i in (word.length-1) downTo 0) {\n    println(word[i])\n}\n```", "```kt\nd\nr\no\nW\n```", "```kt\nfinal String word = \"Word\";\n\nfor (Character c : word.toCharArray()) {\n    System.out.println(c);\n}\n```", "```kt\nval word = \"Word\"\n\nfor (c in word) {\n    println(c)\n}\n```", "```kt\nvar x = 0\nwhile (x < 10) { \n   x++ \n   println(x)\n}\n```", "```kt\nvar x = 5\n   do { \n      println(x)\n      x--\n} while (x > 0)\n```", "```kt\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n```"]