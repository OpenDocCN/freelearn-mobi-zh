["```swift\n    MainViewController mainController = new MainViewController ();\n    window.RootViewController = mainController;\n    ```", "```swift\nMainViewController mainController = new MainViewController ();\n```", "```swift\nwindow.RootViewController = mainController.\n```", "```swift\npublic override void ViewDidLoad ()\n{\n  this.myLabel.Text = \"View loaded!\";\n}\n```", "```swift\n    MainController mainController = new MainController();\n    mainController.Title = \"Main View\";\n    UINavigationController navController = new UINavigationController(mainController);\n    window.RootViewController = navController;\n    ```", "```swift\n    this.buttonFirstView.TouchUpInside += (sender, e) => {\n\n            ViewController1 v1 = new ViewController1();\n            v1.Title = \"First View\";\n            this.NavigationController.PushViewController(v1, true);\n\n          } ;\n          this.buttonSecondView.TouchUpInside += (sender, e) => {\n\n            ViewController2 v2 = new ViewController2();v2.Title = \"Second View\";\n            this.NavigationController.PushViewController(v2, true);\n\n            };\n    ```", "```swift\n    this.buttonPop.TouchUpInside += (sender, e) => {\n      this.NavigationController.PopToRootViewController(true);\n    };\n    ```", "```swift\nthis.NavigationController.PushViewController (v1, true);\n```", "```swift\nUINavigationController navController = new UINavigationController(mainController);\n```", "```swift\nthis.NavigationController.PopToRootViewController (true);\n```", "```swift\n    this.View.BackgroundColor = UIColor.Blue;\n    ```", "```swift\n    this.View.BackgroundColor = UIColor.Yellow;\n    ```", "```swift\n    MainController mainController = new MainController();\n    SettingsController settingsController = new SettingsController();\n    UITabBarController tabController = new UITabBarController();\n    tabController.SetViewControllers(new UIViewController[] {\n      mainController,\n      settingsController\n    }, true);\n    tabController.TabBar.Items[0].Title = \"Main\";\n    tabController.TabBar.Items[1].Title = \"Settings\";\n    window.RootViewController = tabController;\n    ```", "```swift\ntabController.SetViewControllers(new UIViewController[] {\n  mainController,\n  settingsController\n}, true);\n```", "```swift\ntabController.TabBar.Items[0].Title = \"Main\";\n```", "```swift\ntabController.ViewControllerSelected += (sender, e) => {\n  // Do something with e.ViewController.\n};\n```", "```swift\n    this.buttonPresent.TouchUpInside += async (s, e) => {\n      ModalController modalController = new ModalController();\n      await this.PresentViewControllerAsync(modalController, true);\n    };\n    ```", "```swift\n\n      this.buttonDismiss.TouchUpInside += async (s, e) => {\n        await this.DismissViewControllerAsync (true);\n      };\n    ```", "```swift\n    MainController mainController = new MainController();\n    window.RootViewController = mainController;\n    ```", "```swift\nthis.buttonPresent.TouchUpInside += async (s, e) => {\n  ModalController modal = new ModalController ();\n  await this.PresentViewControllerAsync (modal, true);\n};\n```", "```swift\nawait this.DismissViewControllerAsync (true);\n```", "```swift\nmodalController.ModalTransitionStyle = UIModalTransitionStyle.FlipHorizontal;\n```", "```swift\n    using System;\n    using MonoTouch.UIKit;\n    using MonoTouch.Foundation;\n    using System.Drawing;\n\n    namespace CustomControllerApp {\n    public class BaseController : UIViewController {\n\n      //Constructor\n      public BaseController (string nibName, NSBundle bundle) : base(nibName, bundle) {}\n\n      public override void TouchesMoved (NSSet touches, UIEventevt)\n      {\n        base.TouchesMoved (touches, evt);\n        // Capture the position of touches\n        UITouch touch = touches.AnyObject as UITouch;\n        if (null != touch) {\n          PointF locationInView = touch.LocationInView (this.View);\n          Console.WriteLine (\"Touch coordinates: {0}\", locationInView);\n      }\n    }\n    ```", "```swift\n    DerivedController derivedController = new DerivedController();\n    window.RootViewController = derivedController;\n    ```", "```swift\npublic BaseController (string nibName, NSBundle bundle) : base(nibName, bundle) {}\n```", "```swift\n[Outlet(\"btnStart\")]\npublic UIButton BtnStart {\n  get { return base.btnStart; }\n  set { base.btnStart = value; }\n}\n```", "```swift\n    Console.WriteLine(\"Main controller received memory warning!\");\n    ```", "```swift\n    MainController mainController = new MainController();\n    window.RootViewController = mainController;\n    ```", "```swift\n    2013-12-04 08:09:47.695 EfficientControllerApp[1383:80b] Received memory warning.\n    2013-12-04 08:09:47.709 EfficientControllerApp[1383:80b] Main controller received memory warning!\n    ```", "```swift\npublic override void ReceiveMemoryWarning(UIApplication application)\n{  //...    }\n```", "```swift\n    public UIToolbar MyToolbar {\n      get { return this.myToolbar; }\n    }\n    ```", "```swift\n    public class SplitControllerDelegate : UISplitViewControllerDelegate\n      {\n        public SplitControllerDelegate (SecondController controller)\n        {  \n          this.secondController = controller;\n        }\n        private SecondController secondController;\n        public override void WillHideViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc)\n        {\n          barButtonItem.Title = \"First\";\n          this.secondController.MyToolbar.SetItems (new UIBarButtonItem[] { barButtonItem }, true);\n        }\n        public override void WillShowViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button)\n        {\n          this.secondController.MyToolbar.SetItems (new UIBarButtonItem[0], true);\n        }\n      }\n    ```", "```swift\n    FirstController firstController = new FirstController();\n    SecondController secondController = new SecondController();\n    UISplitViewController splitController = new UISplitViewController();\n    splitController.ViewControllers = new UIViewController[] {\n        firstController,\n        secondController\n      };\n      splitController.Delegate = new SplitControllerDelegate(secondController);\n      window.RootViewController = splitController;\n    ```", "```swift\npublic override void WillHideViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc)\n{\n  barButtonItem.Title = \"First\";\n  this.secondController.MyToolbar.SetItems (new UIBarButtonItem[] { barButtonItem }, true);\n}\n```", "```swift\npublic override void WillShowViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button)\n{\n  this.secondController.Toolbar.SetItems (new UIBarButtonItem[0], true);\n}\n```", "```swift\n        [Register(\"FirstController\")]\n        public class FirstController : UIViewController\n        { //..\n        ```", "```swift\n        [Register(\"SecondController\")]\n        public class SecondController : UIViewController\n        { //..\n        ```", "```swift\n    public FirstController(IntPtr handle) : base(handle)\n    {} \n    ```", "```swift\n    UIStoryboard storyboard = UIStoryboard.FromName(\"MainStoryboard\", NSBundle.MainBundle);\n    UINavigationController navController = (UINavigationController)storyboard.InstantiateInitialViewController();\n    window.RootViewController = navController;\n    ```", "```swift\nUIStoryboard storyboard = UIStoryboard.FromName(\"MainStoryboard\", NSBundle.MainBundle);\n```", "```swift\nUINavigationController navController = (UINavigationController)storyboard.InstantiateInitialViewController();\n```", "```swift\nthis.PerformSegue(\"MyPushSegue\", null);\n```", "```swift\npublic override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)\n{\n    base.PrepareForSegue (segue, sender);\n\n    if (segue.Identifier == \"MyPushSegue\")\n    {\n      SecondController secondController = \n        (SecondController)segue.DestinationViewController;\n      // Create a public method or property in SecondController \n      // for passing data to it.\n    }//end if\n}\n```", "```swift\n    [Register(\"ModalController\")]\n    public class ModalController : UIViewController\n    {\n      public ModalController (IntPtr handle) : base(handle)\n      {\n      }\n    }\n    ```", "```swift\n    [Action(\"unwindFromModalController:\")]\n    public void UnwindFromModalController(UIStoryboardSegue segue)\n    {\n    }\n    ```", "```swift\n[Action(\"unwindFromModalController:\")]\npublic void UnwindFromModalController(UIStoryboardSegue segue) {}\n```", "```swift\n//..\nModalControllermodalController = (ModalController)segue.SourceViewController;\n```"]