- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Getting Started with Core Location and MapKit
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Core Location和MapKit
- en: In the previous chapter, you learned how to pass data from the Add New Journal
    Entry screen to the Journal List screen, and from the Journal List screen to the
    Journal Entry Detail screen. You also learned about the `UITextFieldDelegate`
    and `UITextViewDelegate` methods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何从“添加新日志条目”屏幕传递数据到日志列表屏幕，以及从日志列表屏幕传递数据到日志条目详情屏幕。你还学习了`UITextFieldDelegate`和`UITextViewDelegate`方法。
- en: In this chapter, you’ll learn how to get your device location using Apple’s
    **Core Location** framework, and how to set map regions, display map annotations,
    and create map snapshots using Apple’s **MapKit** framework. This will come in
    handy if you’re planning to build apps that use maps, such as *Apple Maps* or
    *Waze*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用苹果的**Core Location**框架获取设备位置，以及如何使用苹果的**MapKit**框架设置地图区域、显示地图标注和创建地图快照。如果你计划构建使用地图的应用程序，例如*Apple
    Maps*或*Waze*，这将非常有用。
- en: First, you’ll modify the Add New Journal Entry screen so that the user can add
    their current location to a new journal entry. Next, you’ll create a `MapViewController`
    class (a view controller for the Map screen) and configure it to display a map
    region centered on your location. Then, you’ll update the `JournalEntry` class
    to conform to the **MKAnnotation** protocol, which lets you add journal entries
    as map annotations to a map. After that, you’ll modify the `MapViewController`
    class to display a pin for each journal entry within the map region that you set
    earlier. You’ll configure the pins to display callouts and configure buttons in
    the callouts to display the Journal Entry Detail screen when tapped. Finally,
    you’ll modify the `JournalEntryViewController` class to display a map snapshot
    showing the location where the journal entry was made in the Journal Entry Detail
    screen.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将修改“添加新日志条目”屏幕，以便用户可以将他们的当前位置添加到新的日志条目中。接下来，你将创建一个`MapViewController`类（地图屏幕的视图控制器）并配置它以显示以你的位置为中心的地图区域。然后，你将更新`JournalEntry`类以符合**MKAnnotation**协议，这允许你将日志条目作为地图标注添加到地图中。之后，你将修改`MapViewController`类以在之前设置的地图区域内显示每个日志条目的标记。你将配置标记以显示呼出视图，并在呼出视图中配置按钮，以便在点击时显示日志条目详情屏幕。最后，你将修改`JournalEntryViewController`类，在日志条目详情屏幕中显示显示日志条目制作位置的地图快照。
- en: By the end of this chapter, you’ll have learned how to use Core Location to
    get your device location and how to use MapKit to specify a map region, add map
    annotation views to a map, and create map snapshots.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何使用Core Location获取设备位置，以及如何使用MapKit指定地图区域、将地图标注视图添加到地图中，以及创建地图快照。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Getting your device location using the Core Location framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Core Location框架获取设备位置
- en: Updating the `JournalEntry` class to conform to the `MKAnnotation` protocol
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`JournalEntry`类更新为符合`MKAnnotation`协议
- en: Displaying annotation views on the Map screen
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图屏幕上显示标注视图
- en: Displaying a map snapshot on the Journal Entry Detail screen
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在日志条目详情屏幕上显示地图快照
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在上一章中修改的`JRNL`项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter17` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的Xcode项目位于本书代码包的`Chapter17`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://youtu.be/6WE5Ed6jIWk](https://youtu.be/6WE5Ed6jIWk%0D)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/6WE5Ed6jIWk](https://youtu.be/6WE5Ed6jIWk%0D)'
- en: In the next section, you’ll learn how the Core Location framework is used to
    get your device location.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何使用Core Location框架获取设备位置。
- en: Getting your device location using the Core Location framework
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Core Location框架获取设备位置
- en: Every iPhone has multiple means of determining its location, including Wi-Fi,
    GPS, Bluetooth, magnetometer, barometer, and cellular hardware. Apple created
    the Core Location framework to gather location data using all available components
    on an iOS device.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个iPhone都有多种确定其位置的方式，包括Wi-Fi、GPS、蓝牙、磁力计、气压计和蜂窝硬件。Apple创建了Core Location框架，以使用iOS设备上所有可用的组件来收集位置数据。
- en: To learn more about Core Location, see [https://developer.apple.com/documentation/corelocation](https://developer.apple.com/documentation/corelocation).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Core Location的信息，请参阅[https://developer.apple.com/documentation/corelocation](https://developer.apple.com/documentation/corelocation)。
- en: To configure your app to use Core Location, you will need to create an instance
    of `CLLocationManager`, which is used to configure, start, and stop location services.
    Next, you will create an instance of `CLLocationUpdate`, a structure that contains
    location information delivered by the Core Location framework. Calling the `CLLocationUpdate`
    type’s `liveUpdates` method tells Core Location to start delivering location updates
    containing the user’s location, authorization status, and location availability.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置您的应用程序使用Core Location，您需要创建一个`CLLocationManager`实例，该实例用于配置、启动和停止位置服务。接下来，您将创建一个`CLLocationUpdate`实例，这是一个包含由Core
    Location框架提供的位置信息的结构。调用`CLLocationUpdate`类型的`liveUpdates`方法告诉Core Location开始提供包含用户位置、授权状态和位置可用性的位置更新。
- en: To learn more about the `CLLocationManager` class, see [https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services](https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`CLLocationManager`类的信息，请参阅[https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services](https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services)。
- en: 'You can watch Apple’s WWDC 2023 video on streamlined location updates here:
    [https://developer.apple.com/videos/play/wwdc2023/10180/](https://developer.apple.com/videos/play/wwdc2023/10180/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处观看Apple的WWDC 2023视频，了解简化的位置更新：[https://developer.apple.com/videos/play/wwdc2023/10180/](https://developer.apple.com/videos/play/wwdc2023/10180/)。
- en: Since location information is considered sensitive user data, you’ll also need
    to obtain authorization to use location services. You can also check the authorization
    status of location updates delivered by the `CLLocationUpdate` type’s `liveUpdates`
    method.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于位置信息被视为敏感用户数据，您还需要获得授权才能使用位置服务。您还可以检查由`CLLocationUpdate`类型的`liveUpdates`方法提供的位置更新授权状态。
- en: To learn more about requesting authorization to use location services, see [https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services](https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于请求使用位置服务的授权信息，请参阅[https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services](https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services)。
- en: 'You can watch Apple’s WWDC 2024 video on *What’s new in location authorization*
    here: [https://developer.apple.com/videos/play/wwdc2024/10212/](https://developer.apple.com/videos/play/wwdc2024/10212/).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处观看Apple的WWDC 2024视频，了解**位置授权的新功能**：[https://developer.apple.com/videos/play/wwdc2024/10212/](https://developer.apple.com/videos/play/wwdc2024/10212/)。
- en: In the next section, you’ll modify the `AddJournalEntryViewController` class
    so that the user can assign a location when they create a new journal entry.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将修改`AddJournalEntryViewController`类，以便用户在创建新的日记条目时可以分配位置。
- en: Modifying the AddJournalEntryViewController class
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改`AddJournalEntryViewController`类
- en: 'At present, the Add New Journal Entry screen has a **Get Location** switch,
    but it doesn’t do anything yet. You’ll add an outlet to the `AddJournalEntryViewController`
    class for this switch and modify it to add your location to the `JournalEntry`
    instance when the switch is on. Follow these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，添加新日记条目屏幕有一个**获取位置**开关，但目前它还没有任何作用。您将为这个开关在`AddJournalEntryViewController`类中添加一个输出端口，并在开关打开时将其修改为将位置添加到`JournalEntry`实例。请按照以下步骤操作：
- en: 'In the Project navigator, click the `AddJournalEntryViewController` file. In
    this file, add an `import` statement after the `import UIKit` statement to import
    the Core Location framework:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击`AddJournalEntryViewController`文件。在此文件中，在`import UIKit`语句之后添加一个`import`语句以导入Core
    Location框架：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add an extension for the `AddJournalEntryViewController` class after all other
    code in the file:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中的所有其他代码之后添加一个`AddJournalEntryViewController`类的扩展：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You’ll implement code to ask for permission to use the user’s private data and
    to determine the user’s location in this extension later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在稍后在这个扩展中实现请求使用用户私人数据并确定用户位置的代码。
- en: 'Add outlets for the Get Location switch and the label next to it after all
    the other outlets in the `AddJournalEntryViewController` class:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddJournalEntryViewController`类中，在其他所有输出端口之后，添加用于获取位置开关及其旁边的标签的输出端口：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add properties to store an instance of the `CLLocationManager` class, an asynchronous
    task that will manage location updates, and the current device location after
    all other property declarations:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有其他属性声明之后，添加用于存储`CLLocationManager`类实例、一个将管理位置更新的异步任务以及当前设备位置的属性：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All these properties are `private` as they will only be used within this class.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些属性都是`private`的，因为它们将仅在此类中使用。
- en: 'Implement a method to determine the user’s location in the `AddJournalEntryViewController`
    extension before the closing curly brace:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddJournalEntryViewController`扩展中，在闭合花括号之前实现一个用于确定用户位置的方法：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s break this down:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This statement asks the user for permission to use their location information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句请求用户允许使用他们的位置信息。
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This statement assigns an asynchronous task that will continuously obtain location
    updates to the `locationTask` property.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句将一个将不断获取位置更新的异步任务分配给`locationTask`属性。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This statement gets the updates provided by `CLLocation.liveUpdates()` and assigns
    each to an `update` instance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句获取`CLLocation.liveUpdates()`提供的更新，并将每个更新分配给一个`update`实例。
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This statement gets the user location from the `update` instance and calls the
    `updateCurrentLocation` method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句从`update`实例获取用户位置并调用`updateCurrentLocation`方法。
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This statement will call the `failedToGetLocation(message:)` method if the user
    did not give authorization to use their private data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有授权使用他们的私人数据，此语句将调用`failedToGetLocation(message:)`方法。
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This statement will call the `failedToGetLocation(message:)` method if the user’s
    location is not available.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户的位置信息不可用，此语句将调用`failedToGetLocation(message:)`方法。
- en: You will see error messages because the methods called by `fetchUserLocation()`
    have not been implemented yet.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到错误消息，因为`fetchUserLocation()`调用的方法尚未实现。
- en: 'Before the closing curly brace of the `AddJournalEntryViewController` extension,
    implement the `updateCurrentLocation(_:)` method called by the `fetchUserLocation(`)
    class:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddJournalEntryViewController`扩展的闭合花括号之前，实现由`fetchUserLocation(`)类调用的`updateCurrentLocation(_:)`方法：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This method first gets the timestamp of `location`. This location may be an
    old, cached location, and not actually the current location, so the timestamp
    is compared with the current date and time. If the duration is less than 30 seconds,
    this indicates that the user’s location is current. In this case, the asynchronous
    task assigned to `locationTask` is canceled, the Get Location switch label’s text
    is set to `Done`, and the `currentLocation` property is set to this location.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法首先获取`location`的时间戳。此位置可能是一个旧的、缓存的地址，而不是实际的位置，因此时间戳与当前日期和时间进行比较。如果持续时间小于30秒，这表明用户的位置是当前的。在这种情况下，取消分配给`locationTask`的异步任务，将获取位置开关标签的文本设置为`完成`，并将`currentLocation`属性设置为这个位置。
- en: 'Before the closing curly brace of the `AddJournalEntryViewController` extension,
    implement the `failedToGetLocation(message:)` method called by the `fetchUserLocation(`)
    class:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddJournalEntryViewController`扩展的闭合花括号之前，实现由`fetchUserLocation(`)类调用的`failedToGetLocation(message:)`方法：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method will cancel the asynchronous task assigned to `locationTask`, reset
    the values of the Get Location switch and label to their initial values, and display
    an alert configured with an appropriate error message.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将取消分配给`locationTask`的异步任务，将获取位置开关和标签的值重置为其初始值，并显示一个配置了适当错误消息的警告。
- en: 'In the `AddJournalEntryViewController` class, implement an action to be performed
    when the Get Location switch’s value is changed before the closing curly brace:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AddJournalEntryViewController`类中，在闭合花括号之前实现一个动作，当获取位置开关的值改变时执行：
- en: '[PRE13]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the Get Location switch is turned on, the switch label text is set to `Getting
    location...` and the `fetchUserLocation()` method is called. If the switch is
    turned off, `currentLocation` will be set to `nil`, the switch label text is reset
    to `Get location`, and the asynchronous task assigned to `locationTask` is canceled.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果获取位置开关处于开启状态，开关标签文本设置为`获取位置...`，并调用`fetchUserLocation()`方法。如果开关处于关闭状态，`currentLocation`将被设置为`nil`，开关标签文本重置为`获取位置`，并且分配给`locationTask`的异步任务被取消。
- en: 'Modify the `prepare(for:sender:)` method to add location information to the
    `JournalEntry` instance:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`prepare(for:sender:)`方法以向`JournalEntry`实例添加位置信息：
- en: '[PRE14]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modify the `updateSaveButtonState()` method to enable the **Save** button only
    after the location has been found if the Get Location switch is on:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`updateSaveButtonState()`方法，以便在获取位置开关开启后仅当找到位置时启用**保存**按钮：
- en: '[PRE15]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Call `updateSaveButtonState()` in `updateCurrentLocation(_:)` so that the **Save**
    button state will be updated once the location has been found:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`updateCurrentLocation(_:)`中调用`updateSaveButtonState()`，以便在找到位置后更新**保存**按钮的状态：
- en: '[PRE16]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the Project navigator, click the `Main` storyboard file. Click **New Entry
    Scene** in the document outline.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Main`故事板文件。在文档大纲中点击**新条目场景**。
- en: 'Most journal entries will probably not require a location, so you will set
    the default value for the Get Location switch to **off**. Click the Get Location
    switch and click the Attributes inspector button. Under **Switch**, set **State**
    to **Off**:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数日记条目可能不需要位置，因此您将获取位置开关的默认值设置为**关闭**。点击获取位置开关并点击属性检查器按钮。在**开关**下，将**状态**设置为**关闭**：
- en: '![](img/B31371_17_01.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_01.png)'
- en: 'Figure 17.1: Attributes inspector showing the Get Location switch state set
    to Off'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1：属性检查器显示将获取位置开关状态设置为关闭
- en: 'Click **New Entry Scene** in the document outline and click the Connections
    inspector button. Connect the **getLocationSwitch** outlet to the Get Location
    switch in **New Entry Scene**:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中点击**新条目场景**，然后点击连接检查器按钮。将**getLocationSwitch**出口连接到**新条目场景**中的获取位置开关：
- en: '![](img/B31371_17_02.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_02.png)'
- en: 'Figure 17.2: Connections inspector showing the getLocationSwitch outlet'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：连接检查器显示getLocatioSwitch出口
- en: 'Connect the **getLocationSwitchLabel** outlet to the label next to the Get
    Location switch in **New Entry Scene**:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**getLocationSwitchLabel**出口连接到**新条目场景**中获取位置开关旁边的标签：
- en: '![](img/B31371_17_03.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_03.png)'
- en: 'Figure 17.3: Connections inspector showing the getLocationSwitchLabel outlet'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3：连接检查器显示getLocatioSwitchLabel出口
- en: 'Connect the **locationSwitchValueChanged** action to the Get Location switch,
    and choose **Value Changed** from the pop-up menu:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**locationSwitchValueChanged**动作连接到获取位置开关，并从弹出菜单中选择**值已更改**：
- en: '![](img/B31371_17_04.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_04.png)'
- en: 'Figure 17.4: Attributes inspector showing the getLocationSwitchValueChanged
    outlet'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4：属性检查器显示getLocatioSwitchValueChanged出口
- en: You have completed modifying the `AddJournalEntryViewController` class. In the
    next section, you’ll learn how to configure your app to access user data.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您已完成对`AddJournalEntryViewController`类的修改。在下一节中，您将学习如何配置应用程序以访问用户数据。
- en: Modifying the Info.plist file
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改Info.plist文件
- en: 'Since your app uses user data, you will need to ask the user for permission
    to use it. To do so, you will add a new setting to your app’s `Info.plist` file.
    Follow these steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您的应用程序使用用户数据，您需要请求用户允许使用它。为此，您需要在应用程序的`Info.plist`文件中添加一个新的设置。按照以下步骤操作：
- en: 'In the Project navigator, click the `Info.plist` file. If you move your pointer
    over the **Information Property List** row, you’ll see a small **+** button. Click
    it to create a new row:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Info.plist`文件。如果将指针移至**信息属性列表**行，您将看到一个小的**+**按钮。点击它以创建一个新行：
- en: '![](img/B31371_17_05.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_05.png)'
- en: 'Figure 17.5: Editor area showing contents of Info.plist'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5：编辑区域显示Info.plist的内容
- en: 'In the new row, set the **Key** to **Privacy - Location When In Use Usage Description**
    and set the **Value** to `This app uses your location for journal entries`. Your
    `Info.plist` file should look like the following when you’re done:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新行中，将**键**设置为**Privacy - Location When In Use Usage Description**，并将**值**设置为`此应用程序使用您的位置来记录日记条目`。完成操作后，您的`Info.plist`文件应如下所示：
- en: '![](img/B31371_17_06.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_06.png)'
- en: 'Figure 17.6: Info.plist with a new row added'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6：添加新行后的Info.plist
- en: 'Launch Simulator and choose **Location** | **Apple** from Simulator’s **Features**
    menu to simulate a location:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动模拟器并从模拟器的**功能**菜单中选择**位置** | **苹果**来模拟一个位置：
- en: '![](img/B31371_17_07.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_07.png)'
- en: 'Figure 17.7: Location | Apple selected from Simulator’s Features menu'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7：从模拟器的功能菜单中选择位置 | 苹果
- en: 'Build and run your app and click the **+** button to display the Add New Journal
    Entry screen. When prompted, tap the **Allow While Using App** button:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，点击**+**按钮以显示新建日记条目屏幕。当提示时，点击**允许在应用使用时**按钮：
- en: '![](img/B31371_17_08.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_08.png)'
- en: 'Figure 17.8: Alert showing Allow While Using App highlighted'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.8：显示允许在应用使用时高亮的警告
- en: Note that this alert will appear the first time you launch your app during this
    chapter, and the setting you picked will be used by default during subsequent
    launches.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个警告将在本章第一次启动你的应用时出现，你选择的设置将在后续启动中默认使用。
- en: 'Enter the journal entry title and body, and set the Get Location switch to
    on:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入日记条目的标题和正文，并将获取位置开关设置为开启：
- en: '![](img/B31371_17_09.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_09.png)'
- en: 'Figure 17.9: Add New Journal Entry screen showing the Get Location switch'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.9：显示获取位置开关的新建日记条目屏幕
- en: Once the location has been determined, the label next to the Get Location switch
    will display **Done**, and the **Save** button will be active.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了位置，获取位置开关旁边的标签将显示**完成**，并且**保存**按钮将变为活动状态。
- en: Click **Save**. You will be returned to the Journal List screen.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。你将被返回到日记列表屏幕。
- en: At this point, the Get Location switch and the label next to it have been connected
    to outlets in the `AddJournalEntryViewController` class, the method for getting
    the device location has been assigned to the Get Location switch, and all the
    code required to add your location to the new `JournalEntry` instance has been
    added. Great!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，获取位置开关及其旁边的标签已经连接到`AddJournalEntryViewController`类中的输出，获取设备位置的函数已经分配给获取位置开关，并且已经添加了将你的位置添加到新的`JournalEntry`实例所需的所有代码。太棒了！
- en: In the next section, you’ll create a view controller for the Map screen and
    configure it to display your current device location.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将创建一个地图屏幕的视图控制器，并配置它以显示当前设备的位置。
- en: Creating the MapViewController class
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建MapViewController类
- en: In *Chapter 12*, *Finishing Up Your User Interface*, you added a map view to
    the Map screen. A map view is an instance of the `MKMapView` class. You can see
    what it looks like in the Apple Maps app.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第12章**，*完成用户界面*中，你已经在地图屏幕中添加了一个地图视图。地图视图是`MKMapView`类的一个实例。你可以在苹果地图应用中看到它的样子。
- en: To learn more about `MKMapView`, see [https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`MKMapView`的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview)。
- en: When you build and run your app, you will see a map on the screen. The part
    of the map that is visible onscreen can be specified by setting the map view’s
    `region` property.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建并运行你的应用时，你将在屏幕上看到一个地图。你可以通过设置地图视图的`region`属性来指定屏幕上可见的地图部分。
- en: To learn more about regions and how to make them, see [https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于区域及其创建方法的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region)。
- en: 'You’ll create a new class, `MapViewController`, to be the view controller for
    the Map screen, and you’ll use Core Location to determine the center point of
    the map region that will be displayed. Follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个新的类，`MapViewController`，作为地图屏幕的视图控制器，并使用Core Location来确定将要显示的地图区域的中心点。按照以下步骤操作：
- en: Create a new group inside your project by right-clicking the **JRNL** group
    and choosing **New Group**. Name this group `Map Screen` and move it so it is
    below the **Journal Entry Detail Screen** group.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**JRNL**组上右键单击并选择**新建组**，在你的项目中创建一个新的组。将此组命名为`Map Screen`，并将其移动到**日记条目详情屏幕**组下方。
- en: Right-click on the **Map Screen** group and select **New File From Template...**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**地图屏幕**组并选择**从模板新建文件...**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch 类**并点击**下一步**。'
- en: 'Configure the class with the following details:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下详细信息配置该类：
- en: '**Class**: `MapViewController`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：`MapViewController`'
- en: '**Subclass**: `UIViewController`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子类**：`UIViewController`'
- en: '**Also create XIB**: Unchecked'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**也创建XIB**：未勾选'
- en: '**Language**: **Swift**'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：**Swift**'
- en: Click **Next** when you’re done.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后点击**下一步**。
- en: Click **Create**. The `MapViewController` file appears in the Project navigator,
    and its contents appear in the Editor area.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。`MapViewController`文件出现在项目导航器中，其内容出现在编辑器区域：
- en: 'Add code to import the `Core Location` and `MapKit` frameworks after the existing
    `import` statement:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`import`语句之后添加代码以导入`Core Location`和`MapKit`框架：
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add a new extension for the `MapViewController` class after all other code
    in the file:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件中的所有其他代码之后为`MapViewController`类添加一个新的扩展：
- en: '[PRE18]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You’ll implement code to ask for permission to use the user’s private data and
    to determine the user’s location in this extension later.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本扩展中实现代码以请求使用用户的私人数据并确定用户的位置：
- en: 'In the `MapViewController` class, add an outlet for the map view after the
    opening curly brace:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MapViewController`类中，在开括号之后添加一个用于地图视图的输出：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add properties to hold a `CLLocationManager` instance and an asynchronous task
    after the `mapView` property:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mapView`属性之后添加属性以保存`CLLocationManager`实例和异步任务：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Implement a method to determine the user’s location in the `MapViewController`
    extension before the closing curly brace:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MapViewController`扩展中闭括号之前实现一个确定用户位置的方法：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method is similar to the `fetchUserLocation()` method you implemented in
    the `AddJournalEntryViewController` extension. First, it will ask for permission
    to use private user data and set the title of the Map screen to `Getting location...`.
    Next, an asynchronous task to continuously determine the user’s location will
    be assigned to `locationTask`, and if the user’s location is found, the map will
    be updated to show the user’s location. Otherwise, an alert with an appropriate
    error message will be displayed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与你在`AddJournalEntryViewController`扩展中实现的`fetchUserLocation()`方法类似。首先，它将请求使用私人用户数据的权限并将地图屏幕的标题设置为`Getting
    location...`。接下来，将一个异步任务分配给`locationTask`，以连续确定用户的位置。如果找到用户的位置，地图将更新以显示用户的位置。否则，将显示一个带有适当错误消息的警报：
- en: Note that since the methods called by `fetchUserLocation()` have not been implemented
    yet, you will see error messages.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于`fetchUserLocation()`调用的方法尚未实现，你将看到错误消息：
- en: 'Implement the missing methods in the `MapViewController` extension before the
    closing curly brace:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在闭括号之前在`MapViewController`扩展中实现缺失的方法：
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These methods are similar to the `updateCurrentLocation(location:)` and `failedToGetLocation(message:)`
    methods you implemented earlier in the `AddJournalEntryViewControlle`r extension.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法与你在`AddJournalEntryViewController`扩展中之前实现的`updateCurrentLocation(location:)`和`failedToGetLocation(message:)`方法类似：
- en: The `updateMapWithLocation(location:)` method will set the title of the Map
    screen to `Map`, create a map region centered on the user’s location, and assign
    it as the region for the `mapView` property.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateMapWithLocation(location:)`方法将设置地图屏幕的标题为`Map`，创建一个以用户位置为中心的地图区域，并将其分配给`mapView`属性：'
- en: The `failedToGetLocation(message:)` method will set the title of the Map screen
    to `Location not found` and display an appropriate error message if permission
    to use user data was denied or if the location is unavailable.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拒绝使用用户数据或位置不可用，`failedToGetLocation(message:)`方法将设置地图屏幕的标题为`Location not found`并显示适当的错误消息：
- en: 'Modify the `viewDidLoad()` method for the `MapViewController` class to call
    `fetchUserLocation()` as shown:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`MapViewController`类的`viewDidLoad()`方法，如所示调用`fetchUserLocation()`：
- en: '[PRE23]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Click the `Main` storyboard file in the Project navigator and click the first
    **Map Scene** in the document outline. Click the Identity inspector button, and
    under **Custom Class**, set **Class** to `MapViewController`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Main`故事板文件，然后点击文档大纲中的第一个**Map Scene**。点击身份检查器按钮，在**自定义类**下将**类**设置为`MapViewController`：
- en: '![](img/B31371_17_10.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_10.png)'
- en: 'Figure 17.10: Identity inspector settings for Map scene'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10：地图场景的身份检查器设置
- en: 'Click the Connections inspector to display all the outlets for **Map Scene**.
    Drag from the **mapView** outlet to the map view in **Map Scene**:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接检查器以显示**Map Scene**的所有输出。从**mapView**输出拖动到**Map Scene**中的地图视图：
- en: '![](img/B31371_17_11.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_11.png)'
- en: 'Figure 17.11: Connections inspector showing the mapView outlet'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.11：连接检查器显示mapView输出
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你犯了错误，你可以点击**x**来断开连接，然后再次从输出拖动到UI元素：
- en: 'Build and run your app, and verify that **Apple** is selected from Simulator’s
    **Features** | **Location** menu. Tap the **Map** tab button to display a map
    region centered on the location you selected, which, in this case, is the Apple
    campus:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，并确保从模拟器的**功能** | **位置**菜单中选择了**Apple**。点击**地图**标签按钮以显示一个以你选择的地点为中心的地图区域，在这个例子中，是苹果公司园区：
- en: '![](img/B31371_17_12.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_12.png)'
- en: 'Figure 17.12: Simulator showing a map centered on your location'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.12：模拟器显示以你的位置为中心的地图
- en: You can simulate any location in Simulator by choosing **Features** | **Location**
    | **Custom Location** and entering the longitude and latitude of the desired location.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过选择**功能** | **位置** | **自定义位置**并在其中输入所需位置的经纬度来在模拟器中模拟任何位置。
- en: Since `viewDidLoad()` is only called once when the `MapViewController` instance
    loads its view, the map will not be updated if the user’s location changes after
    it was initially set. Also, you’ll notice that it takes a long time for the location
    to be determined if you’re running the app on an actual iOS device. You’ll address
    both of these issues in the next chapter.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`viewDidLoad()`在`MapViewController`实例加载视图时只调用一次，因此如果用户的位置在最初设置后发生变化，地图将不会更新。此外，如果你在实际的iOS设备上运行应用，你会发现确定位置需要很长时间。你将在下一章中解决这两个问题。
- en: You have successfully created a new view controller for the Map screen and configured
    it to display a map region centered on your device location. Excellent! In the
    next section, you’ll learn about the `MKAnnotation` protocol, and how to make
    a class conform to it.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功为地图屏幕创建了一个新的视图控制器，并配置它显示以你的设备位置为中心的地图区域。太棒了！在下一节中，你将了解`MKAnnotation`协议，以及如何使一个类符合它。
- en: Updating the JournalEntry class to conform to the MKAnnotation protocol
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将JournalEntry类更新为符合MKAnnotation协议
- en: 'When you use the *Maps* app on iPhone, you can tap and hold on the map to drop
    a pin:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在iPhone上的*地图*应用中操作时，你可以点击并按住地图来放置一个标记：
- en: '![](img/B31371_17_13.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_13.png)'
- en: 'Figure 17.13: Maps app showing a dropped pin'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.13：地图应用显示放置的标记
- en: To add a pin to a map view for your own apps, you need a class that conforms
    to the `MKAnnotation` protocol. This protocol allows you to associate an instance
    of that class with a specific location.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的应用中为地图视图添加标记，你需要一个符合`MKAnnotation`协议的类。此协议允许你将此类的一个实例与特定位置关联。
- en: To learn more about the `MKAnnotation` protocol, see [https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`MKAnnotation`协议的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation)。
- en: Any class can adopt the `MKAnnotation` protocol by implementing a `coordinate`
    property, which contains a location. Optional `MKAnnotation` protocol properties
    are `title`, a string containing the annotation’s title, and `subtitle`, a string
    containing the annotation’s subtitle.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类都可以通过实现包含位置的`coordinate`属性来采用`MKAnnotation`协议。可选的`MKAnnotation`协议属性包括`title`，它包含注释的标题，以及`subtitle`，它包含注释的副标题。
- en: When an instance of a class conforming to the `MKAnnotation` protocol is in
    the region of the map that is visible onscreen, the map view asks its delegate
    (usually a view controller) to provide a corresponding instance of the `MKAnnotationView`
    class. This instance appears as a pin on the map.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当符合`MKAnnotation`协议的类的实例位于屏幕上可见的地图区域时，地图视图会要求其代理（通常是视图控制器）提供一个相应的`MKAnnotationView`类的实例。此实例在地图上显示为一个标记。
- en: To learn more about `MKAnnotationView`, see [https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`MKAnnotationView`的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview)。
- en: If the user scrolls the map and the `MKAnnotationView` instance goes off screen,
    it will be put into a reuse queue and recycled later, like the way table view
    cells and collection view cells are recycled.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户滚动地图并且`MKAnnotationView`实例离开屏幕，它将被放入重用队列并在稍后回收，就像表格视图单元格和集合视图单元格被回收一样。
- en: 'To represent journal entry locations on the Map screen, you will modify the
    `JournalEntry` class to make it conform to the `MKAnnotation` protocol. This class
    will have a `coordinate` property to store the journal entry’s location, a `title`
    property to store the journal entry date, and a `subtitle` property to store the
    journal entry title. You will use the `JournalEntry` instance’s `latitude` and
    `longitude` properties to compute the value that will be assigned to the `coordinate`
    property. Follow these steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要在地图屏幕上表示日志条目位置，你需要修改 `JournalEntry` 类以使其符合 `MKAnnotation` 协议。这个类将有一个 `coordinate`
    属性来存储日志条目的位置，一个 `title` 属性来存储日志条目日期，以及一个 `subtitle` 属性来存储日志条目标题。你将使用 `JournalEntry`
    实例的 `latitude` 和 `longitude` 属性来计算分配给 `coordinate` 属性的值。按照以下步骤操作：
- en: 'In the Project navigator, click the `JournalEntry` file (inside the **Journal
    List Screen** | **Model** group). Type the following after the `import UIKit`
    statement to import the `MapKit` framework:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 `JournalEntry` 文件（位于 **Journal List Screen** | **Model** 组内）。在 `import
    UIKit` 语句之后输入以下内容以导入 `MapKit` 框架：
- en: '[PRE24]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This lets you use the `MKAnnotation` protocol in your code.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你在代码中使用 `MKAnnotation` 协议。
- en: The `MKAnnotation` protocol has an optional `title` property, which you will
    use later. You will change the name of the `title` property in the `JournalEntry`
    class to `entryTitle` so you don’t have two properties with the same name. Right-click
    on the `title` property and choose **Refactor | Rename** from the pop-up menu.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MKAnnotation` 协议有一个可选的 `title` 属性，你将在稍后使用。你将把 `JournalEntry` 类中的 `title` 属性名称改为
    `entryTitle`，这样你就不需要两个具有相同名称的属性。右键单击 `title` 属性，从弹出菜单中选择 **重构 | 重命名**。'
- en: 'Set the new name to `entryTitle`, as shown, and click **Rename**:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新名称设置为 `entryTitle`，如图所示，然后点击 **重命名**：
- en: '![](img/B31371_17_14.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_14.png)'
- en: 'Figure 17.14: Refactoring the title property to entryTitle'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.14：将标题属性重命名为 entryTitle
- en: 'Modify the `JournalEntry` class declaration as follows to make it a subclass
    of the `NSObject` class and to adopt the `MKAnnotation` protocol:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `JournalEntry` 类声明修改如下，使其成为 `NSObject` 类的子类并采用 `MKAnnotation` 协议：
- en: '[PRE25]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You’ll see an error because you have not yet implemented the `coordinate` property,
    which is required to conform to the `MKAnnotation` protocol. Type the following
    after the initializer:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个错误，因为你还没有实现 `coordinate` 属性，这是符合 `MKAnnotation` 协议所必需的。在初始化器之后输入以下内容：
- en: '[PRE26]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `coordinate` property is of the `CLLocationCoordinate2D` type, and it holds
    a geographical location. The value of the `coordinate` property is not assigned
    directly; the `guard` statement gets the latitude and longitude values from the
    `latitude` and `longitude` properties, which are then used to create the value
    for the `coordinate` property. Such properties are called **computed properties**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`coordinate` 属性是 `CLLocationCoordinate2D` 类型，它包含一个地理位置。`coordinate` 属性的值不是直接分配的；`guard`
    语句从 `latitude` 和 `longitude` 属性获取纬度和经度值，然后使用这些值来创建 `coordinate` 属性的值。这样的属性被称为
    **计算属性**。'
- en: 'To implement the optional `title` property, type the following after the `coordinate`
    property:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现可选的 `title` 属性，在 `coordinate` 属性之后输入以下内容：
- en: '[PRE27]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is a computed property that returns the journal entry date formatted as
    a string.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个计算属性，返回格式化为字符串的日志条目日期。
- en: 'To implement the optional `subtitle` property, type the following after the
    `title` property:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现可选的 `subtitle` 属性，在 `title` 属性之后输入以下内容：
- en: '[PRE28]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is a computed property that returns the journal entry title.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个计算属性，返回日志条目标题。
- en: At this point, you’ve modified the `JournalEntry` class to conform to the `MKAnnotation`
    protocol. In the next section, you’ll modify the `MapViewController` class to
    add an array of `JournalEntry` instances to a map view, and any instance within
    the region displayed by the map view will appear as a pin on the Map screen.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经修改了 `JournalEntry` 类以符合 `MKAnnotation` 协议。在下一节中，你将修改 `MapViewController`
    类，向地图视图中添加一个 `JournalEntry` 实例数组，并且地图视图显示区域内的任何实例都将出现在地图屏幕上的一个标记上。
- en: Displaying annotation views on the Map screen
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在地图屏幕上显示注释视图
- en: 'The Map screen at present displays a map region centered on your device location.
    Now that the map region has been set, you can determine which `JournalEntry` instances
    are in this region based on their `coordinate` property. Remember that the `JournalEntry`
    class conforms to `MKAnnotation`. As the view controller for the map view, the
    `MapViewController` class is responsible for providing an `MKAnnotationView` instance
    for any `MKAnnotation` instance within this region. You will now modify the `MapViewController`
    class to get an array of `JournalEntry` instances from the `SampleJournalEntryData`
    structure and add it to the map view. Follow these steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当前地图屏幕显示以您的设备位置为中心的地图区域。现在地图区域已设置，您可以根据其 `coordinate` 属性确定哪些 `JournalEntry`
    实例位于此区域。请记住，`JournalEntry` 类符合 `MKAnnotation`。作为地图视图的视图控制器，`MapViewController`
    类负责为该区域内的任何 `MKAnnotation` 实例提供 `MKAnnotationView` 实例。您现在将修改 `MapViewController`
    类，从 `SampleJournalEntryData` 结构中获取 `JournalEntry` 实例的数组并将其添加到地图视图中。按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalEntry** file. In the `createSampleJournalEntryData()`
    method, modify the statement that creates the `journalEntry2` instance as shown:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalEntry** 文件。在 `createSampleJournalEntryData()` 方法中，修改创建 `journalEntry2`
    实例的语句，如下所示：
- en: '[PRE29]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This instance now has values for its `latitude` and `longitude` properties,
    which will be used to set its `coordinate` property. The values used are for a
    location close to the Apple campus, which you will set in Simulator when you run
    the app.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此实例现在具有 `latitude` 和 `longitude` 属性的值，这些值将用于设置其 `coordinate` 属性。使用的值是靠近苹果公司校园的位置，您将在运行应用时在模拟器中设置。
- en: You can use whatever location you wish, but you will need to make sure that
    the location is close to the center point of the map, otherwise, the pin will
    not be displayed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何您想要的地点，但您需要确保该地点靠近地图的中心点，否则，针将不会显示。
- en: 'In the Project navigator, click the **MapViewController** file. Add an extension
    after all other code in the file to make the `MapViewController` class conform
    to the `MKMapViewDelegate` protocol:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **MapViewController** 文件。在文件中的所有其他代码之后添加一个扩展，使 `MapViewController`
    类符合 `MKMapViewDelegate` 协议：
- en: '[PRE30]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Just after the `locationTask` property declaration, add the following code
    to create a private property, `annotations`, that will hold an array of `JournalItem`
    instances:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `locationTask` 属性声明之后，添加以下代码以创建一个私有属性 `annotations`，该属性将包含 `JournalItem` 实例的数组：
- en: '[PRE31]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There is currently no connection between the Journal List and Map screens. This
    means that any journal entries that you add using the Add New Journal Entry screen
    will not appear on the Map screen. You will create a shared instance that will
    be used by both view controllers in the next chapter.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目前日记列表和地图屏幕之间没有连接。这意味着您使用添加新日记条目屏幕添加的任何日记条目都不会出现在地图屏幕上。您将在下一章创建一个共享实例，该实例将由两个视图控制器使用。
- en: 'In the `viewDidLoad()` method, set the map view’s `delegate` property to an
    instance of `MapViewController` before the closing curly brace:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 方法中，在闭合花括号之前，将地图视图的 `delegate` 属性设置为 `MapViewController` 实例：
- en: '[PRE32]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'On the next line, populate the `journalEntries` array by calling the `sampleJournalEntryData`
    structure’s `createSampleJournalEntryData()` method:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，通过调用 `sampleJournalEntryData` 结构的 `createSampleJournalEntryData()` 方法来填充
    `journalEntries` 数组：
- en: '[PRE33]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'On the next line, add the following statement to add all the sample journal
    entries (which conform to the `MKAnnotation` protocol) to the map view:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，添加以下语句以将所有示例日记条目（符合 `MKAnnotation` 协议）添加到地图视图中：
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The map view’s delegate (the `MapViewController` class in this case) will now
    automatically provide an `MKAnnotationView` instance for every `JournalItem` instance
    within the map region displayed on the Map screen.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 地图视图的代理（在本例中为 `MapViewController` 类）现在将自动为地图屏幕上显示的地图区域内的每个 `JournalItem` 实例提供一个
    `MKAnnotationView` 实例。
- en: 'Build and run your app, and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin (`MKAnnotationView`
    instance) on the Map screen:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行您的应用，并使用模拟器的 **Features** | **Location** 菜单验证位置是否已设置为 **Apple**。您应该在地图屏幕上看到一个单独的针（`MKAnnotationView`
    实例）：
- en: '![](img/B31371_17_15.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_15.png)'
- en: 'Figure 17.15: iOS Simulator showing a standard MKAnnotationView instance'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.15：iOS 模拟器显示标准 MKAnnotationView 实例
- en: The Map screen can now display pins, but tapping a pin just makes it bigger.
    You will add code to make pins display a callout with a button in the next section.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 地图屏幕现在可以显示图钉，但点击图钉只会使其变大。你将在下一节中添加代码，使图钉显示带有按钮的呼出窗口。
- en: Since `viewDidLoad()` is only called once when the `MapViewController` instance
    loads its view, any journal entries with locations added to the `journalEntries`
    array after that will not be added as annotations to the map. You’ll address this
    issue in the next chapter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`viewDidLoad()`方法仅在`MapViewController`实例加载其视图时调用一次，因此在此之后添加到`journalEntries`数组中的任何带有位置的日记条目都不会作为注释添加到地图上。你将在下一章中解决这个问题。
- en: Configuring a pin to display a callout
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置图钉以显示呼出窗口
- en: 'Currently, the Map screen displays standard `MKAnnotationView` instances, which
    look like pins. Tapping a pin just makes it bigger. An `MKAnnotationView` instance
    can be configured to display callout bubbles when tapped. To make it do so, you
    will implement the `mapView(_:viewFor:)` method, an optional `MKMapViewDelegate`
    protocol method. Follow these steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，地图屏幕显示标准的`MKAnnotationView`实例，看起来像图钉。点击图钉只会使其变大。`MKAnnotationView`实例可以被配置为在点击时显示呼出气泡。为了实现这一点，你需要实现`mapView(_:viewFor:)`方法，这是一个可选的`MKMapViewDelegate`协议方法。按照以下步骤操作：
- en: 'Click the **MapViewController** file in the Project navigator. In the `MKMapViewDelegate`
    extension, add the following method after the opening curly brace:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击**MapViewController**文件。在`MKMapViewDelegate`扩展中，在开括号之后添加以下方法：
- en: '[PRE35]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let’s break this down:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE36]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is one of the methods specified in the `MKMapViewDelegate` protocol. It’s
    triggered when an `MKAnnotation` instance is within the map region, and it returns
    an `MKAnnotationView` instance, which the user will see on the screen.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`MKMapViewDelegate`协议中指定的方法之一。当`MKAnnotation`实例位于地图区域内时，它会触发，并返回一个`MKAnnotationView`实例，用户将在屏幕上看到它。
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: A constant, `identifier`, is assigned the `"MapAnnotation"` string. This will
    be the reuse identifier for the `MKAnnotationView` instance.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个常量`identifier`赋值为`"MapAnnotation"`字符串。这将作为`MKAnnotationView`实例的重用标识符。
- en: '[PRE38]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This `guard` statement checks to see if the annotation is a `JournalEntry` instance,
    and returns `nil` if it is not.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`guard`语句检查注解是否是`JournalEntry`实例，如果不是，则返回`nil`。
- en: '[PRE39]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This `if` statement checks to see whether there is an existing `MKAnnotationView`
    instance that was initially visible but is no longer on the screen. If there is,
    it can be reused and is assigned to the `annotationView` constant. The `JournalItem`
    instance is then assigned to the `annotation` property of `annotationView` and
    the `annotationView` is returned.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`if`语句检查是否存在一个最初可见但现在不在屏幕上的现有`MKAnnotationView`实例。如果存在，它可以被重用，并分配给`annotationView`常量。然后，`JournalItem`实例被分配给`annotationView`的`annotation`属性，并返回`annotationView`。
- en: '[PRE40]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `else` clause is executed if there are no existing `MKAnnotationView` instances
    that can be reused. A new `MKAnnotationView` instance is created with the reuse
    identifier specified earlier (`MapAnnotation`).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有可以重用的现有`MKAnnotationView`实例，将执行`else`子句。使用之前指定的重用标识符（`MapAnnotation`）创建一个新的`MKAnnotationView`实例。
- en: '[PRE41]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `MKAnnotationView` instance is configured with a callout. When you tap a
    pin on the map, a callout bubble will appear showing the title (journal entry
    date), subtitle (journal entry title), and a button. You’ll program the button
    later to present the Journal Entry Detail screen.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`MKAnnotationView`实例被配置了呼出窗口。当你点击地图上的图钉时，会出现一个呼出气泡，显示标题（日记条目日期）、副标题（日记条目标题）和一个按钮。你将在稍后编程按钮以显示日记条目详情屏幕。'
- en: '[PRE42]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The custom `MKAnnotationView` instance is returned.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 返回自定义的`MKAnnotationView`实例。
- en: To learn more about the `mapView(_:viewFor:)` method, see [https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`mapView(_:viewFor:)`方法的信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview)。
- en: 'Build and run your app, and set the location to **Apple** using Simulator’s
    **Features** | **Location** menu. You should see a single pin on the Map screen.
    Tap the pin to display a callout:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，并在模拟器的**功能** | **位置**菜单中将位置设置为**Apple**。你应该在地图屏幕上看到一个单独的图钉。点击图钉以显示一个呼出窗口：
- en: '![](img/B31371_17_16.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_16.png)'
- en: 'Figure 17.16: iOS Simulator showing a callout when a pin is tapped'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.16：iOS模拟器显示在点击图钉时出现的呼出窗口
- en: You have successfully created a custom `MKAnnotationView` that displays a callout
    when tapped, but tapping the button in the callout bubble doesn’t do anything
    yet. You’ll configure the button to present the Journal Entry Detail screen in
    the next section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功创建了一个自定义的 `MKAnnotationView`，当点击时会显示一个呼出窗口，但点击呼出气泡中的按钮目前还没有任何反应。您将在下一节中配置按钮以显示日记条目详情屏幕。
- en: Going from the Map screen to the Journal Entry Detail screen
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从地图屏幕转到日记条目详情屏幕
- en: At this point, the Map screen now displays an `MKAnnotationView` instance, and
    tapping it displays a callout bubble showing journal entry details. The button
    in the callout bubble doesn’t work yet, though.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，地图屏幕现在显示了一个 `MKAnnotationView` 实例，点击它会显示一个显示日记条目详情的呼出气泡。尽管呼出气泡中的按钮目前还不能工作。
- en: 'To present the Journal Entry Detail screen from the callout button, you’ll
    add a segue between the Map screen and the Journal Entry Detail screen and you
    will implement the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, an optional `MKMapViewDelegate` protocol method, to perform that segue
    when the callout button is tapped. Follow these steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要从呼出按钮显示日记条目详情屏幕，您将在地图屏幕和日记条目详情屏幕之间添加一个转换，并实现可选的 `MKMapViewDelegate` 协议方法 `mapView(_:annotationView:calloutAccessoryControlTapped:)`，以便在点击呼出按钮时执行该转换。按照以下步骤操作：
- en: 'In the Project navigator, click the **Main** storyboard file. Find the **Map**
    icon under **Map Scene** in the document outline. *Ctrl* + *Drag* from the **Map**
    icon to the **Entry Detail** **Scene** and choose **Show** from the pop-up menu
    to add a segue between the **Map** **Scene** and the **Entry Detail** **Scene**:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 **Main** 故事板文件。在文档大纲中找到 **Map Scene** 下的 **Map** 图标。*Ctrl* + *拖动*
    从 **Map** 图标到 **Entry Detail** **Scene** 并从弹出菜单中选择 **Show** 以在 **Map** **Scene**
    和 **Entry Detail** **Scene** 之间添加一个转换：
- en: '![](img/B31371_17_17.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_17.png)'
- en: 'Figure 17.17: Segue pop-up menu'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.17：转换弹出菜单
- en: 'You will set an identifier for this segue so that the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method knows which segue to perform. Select the segue connecting the **Map** **Scene**
    to the **Entry Detail** **Scene**:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将为这个转换设置一个标识符，以便 `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    方法知道要执行哪个转换。选择连接到 **Map** **Scene** 和 **Entry Detail** **Scene** 的转换：
- en: '![](img/B31371_17_18.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_18.png)'
- en: 'Figure 17.18: Segue between Map scene and Entry Detail scene'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.18：地图场景和条目详情场景之间的转换
- en: 'In the Attributes inspector, under **Storyboard Segue**, set **Identifier**
    to `showMapDetail`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性检查器中，在 **Storyboard Segue** 下，将 **Identifier** 设置为 `showMapDetail`：
- en: '![](img/B31371_17_19.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_19.png)'
- en: 'Figure 17.19: Attributes inspector settings for the showDetail segue'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.19：showDetail 转换的属性检查器设置
- en: 'Click the **MapViewController** file in the Project navigator. In the `MapViewController`
    class, add a property to store a journal entry after all other property declarations:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 **MapViewController** 文件。在 `MapViewController` 类中，在所有其他属性声明之后添加一个属性以存储日记条目：
- en: '[PRE43]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This property will store the `JournalEntry` instance for the `MKAnnotationView`
    instance that was tapped.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将存储被点击的 `MKAnnotationView` 实例的 `JournalEntry` 实例。
- en: 'Add `mapView(_:annotationView:calloutAccessoryControlTapped:)` after the `mapView(_:viewFor:)`
    method:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mapView(_:viewFor:)` 方法之后添加 `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    方法：
- en: '[PRE44]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This method is triggered when the user taps the callout bubble button. The annotation
    for the annotation view will be assigned to the `selectedAnnotation` property,
    and the segue with the `showMapDetail` identifier will be performed, which presents
    the Journal Entry Detail screen.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击呼出气泡按钮时，会触发此方法。将分配给呼出视图的注释将赋值给 `selectedAnnotation` 属性，并且带有 `showMapDetail`
    标识符的转换将被执行，这将显示日记条目详情屏幕。
- en: To learn more about the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, see [https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `mapView(_:annotationView:calloutAccessoryControlTapped:)` 方法的知识，请参阅
    [https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview)。
- en: Build and run your app and set the location to **Apple** using Simulator’s **Features**
    | **Location** menu. You should see a single pin on the Map screen. Tap the pin
    to display a callout and tap the button inside the callout.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序，并使用模拟器的 **Features** | **Location** 菜单将位置设置为 **Apple**。您应该在地图屏幕上看到一个单独的图钉。点击图钉以显示呼出窗口，并点击呼出窗口内的按钮。
- en: 'The Journal Entry Detail screen appears, but it does not contain any details
    about the journal entry:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志条目详情屏幕出现，但它不包含任何关于日志条目的详细信息：
- en: '![](img/B31371_17_20.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_20.png)'
- en: 'Figure 17.20: iOS Simulator showing a blank Journal Entry Detail screen'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.20：iOS模拟器显示一个空白的日志条目详情屏幕
- en: 'To make the Journal Entry Detail screen display the details of a journal entry,
    you will use the `prepare(for:sender:)` method to pass the selected journal entry
    to the Journal Entry Detail screen’s view controller. In the `MapViewController`
    class, uncomment and modify the `prepare(for:sender:)` method as shown:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使日志条目详情屏幕显示日志条目的详细信息，你将使用`prepare(for:sender:)`方法将选定的日志条目传递到日志条目详情屏幕的视图控制器。在`MapViewController`类中，取消注释并修改`prepare(for:sender:)`方法，如下所示：
- en: '[PRE45]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As you have learned before, the prepare`(for:sender:)` method is executed by
    a view controller before transitioning to another view controller. In this case,
    this method is called before the Map screen transitions to the Journal Entry Detail
    screen. If the segue’s identifier is `showMapDetail` and the segue destination
    is a `JournalEntryDetailViewController` instance, `selectedAnnotation` will be
    assigned to the `selectedJournalEntry` property for the `JournalEntryDetailViewController`
    instance.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所学的，`prepare`(for:sender:)方法是在视图控制器切换到另一个视图控制器之前由视图控制器执行的。在这种情况下，此方法是在地图屏幕切换到日志条目详情屏幕之前被调用的。如果转场标识符是`showMapDetail`，并且转场目标是`JournalEntryDetailViewController`实例，则`selectedAnnotation`将被分配给`JournalEntryDetailViewController`实例的`selectedJournalEntry`属性。
- en: Build and run your app and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin on the
    Map screen. Tap the pin to display a callout and tap the button inside the callout.
    The Journal Entry Detail screen appears, and it displays the details of the journal
    entry that you tapped on the Map screen.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用，并使用模拟器的**功能** | **位置**菜单验证位置是否已设置为**Apple**。你应该在地图屏幕上看到一个单个图钉。点击图钉以显示呼叫框，并在呼叫框内点击按钮。日志条目详情屏幕出现，并显示你在地图屏幕上点击的日志条目的详细信息。
- en: '![](img/B31371_17_21.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_17_21.png)'
- en: 'Figure 17.21: Simulator showing the Journal Entry Detail screen'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.21：模拟器显示日志条目详情屏幕
- en: You have connected the Journal Entry Detail screen to the Map screen, and have
    successfully passed data from a selected journal entry on the Map screen to the
    Journal Entry Detail screen. Fantastic! In the next section, you’ll configure
    the Journal Entry Detail screen to display a map snapshot of the journal entry’s
    location.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经将日志条目详情屏幕连接到地图屏幕，并且已成功从地图屏幕上选定的日志条目传递数据到日志条目详情屏幕。太棒了！在下一节中，你将配置日志条目详情屏幕以显示日志条目位置的地图快照。
- en: Displaying a map snapshot on the Journal Entry Detail screen
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在日志条目详情屏幕上显示地图快照
- en: The Map screen currently displays a single pin representing a journal entry.
    When you tap the pin on the Map screen and tap the callout button, the details
    of the journal entry are displayed on the Journal Entry Detail screen, but the
    second image view on the Journal Entry Detail screen currently displays a placeholder
    map image. You can capture a map region and convert it into an image using the
    `MKMapSnapshotter` class.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当前地图屏幕显示一个代表日志条目的单个图钉。当你点击地图屏幕上的图钉并点击呼叫按钮时，日志条目的详细信息将在日志条目详情屏幕上显示，但当前日志条目详情屏幕上的第二个图像视图显示的是一个占位符地图图像。你可以使用`MKMapSnapshotter`类捕获地图区域并将其转换为图像。
- en: For more information on the `MKMapSnapshotter` class, see [https://developer.apple.com/documentation/mapkit/mkmapsnapshotter](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`MKMapSnapshotter`类的更多信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapsnapshotter](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter)。
- en: To configure the region and appearance of the map that is captured in the snapshot,
    an `MKMapSnapshotter.Options` object is used.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置快照中捕获的地图的区域和外观，使用`MKMapSnapshotter.Options`对象。
- en: For more information on the `MKMapSnapshotter.Options` object, see [https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`MKMapSnapshotter.Options`对象的更多信息，请参阅[https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options)。
- en: 'You will connect the second image view in the **Entry Detail Scene** to an
    outlet in the `JournalEntryDetailViewController` class and replace the placeholder
    image with a map snapshot showing the location of the journal entry. Follow these
    steps:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在**条目详情场景**中的第二个图像视图中连接到`JournalEntryDetailViewController`类中的一个出口，并用显示日记条目位置的地图快照替换占位符图像。按照以下步骤操作：
- en: 'In the Project navigator, click the `JournalEntryDetailViewController` file.
    Type the following after the `import UIKit` statement to import the `MapKit` framework:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击`JournalEntryDetailViewController`文件。在`import UIKit`语句之后输入以下内容以导入`MapKit`框架：
- en: '[PRE46]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add the following outlet after all other outlets in the `JournalEntryDetailViewController`
    class:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`JournalEntryDetailViewController`类中的所有其他出口之后添加以下出口：
- en: '[PRE47]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add a method to generate the map snapshot before the closing curly brace:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在闭合花括号之前添加一个生成地图快照的方法：
- en: '[PRE48]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This method checks to see if `journalEntry` has values in its `latitude` and
    `longitude` properties. If it does, then an `MKMapSnapShotter.Options` object
    is created, configured, and assigned to an `MKMapSnapshotter` object. The `MKMapSnapshotter`
    object is then used to generate the map snapshot, which will be assigned to the
    `image` property of the `mapImageView` property.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检查`journalEntry`的`latitude`和`longitude`属性是否有值。如果有，则创建、配置并分配一个`MKMapSnapShotter.Options`对象给一个`MKMapSnapshotter`对象。然后使用`MKMapSnapshotter`对象生成地图快照，该快照将被分配给`mapImageView`属性的`image`属性。
- en: 'Call the `getMapSnapshot()` method in the `viewDidLoad()` method before the
    closing curly brace:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`viewDidLoad()`方法中调用`getMapSnapshot()`方法，在闭合花括号之前：
- en: '[PRE49]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the Project navigator, click the **Main** storyboard file and click **Entry
    Detail** **Scene** in the document outline. Click the Connections inspector button
    and connect the **mapImageView** outlet to the second image view in the **Entry
    Detail** **Scene**:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击**主**故事板文件，并在文档大纲中点击**条目详情** **场景**。点击连接检查器按钮，将**mapImageView**出口连接到**条目详情**
    **场景**中的第二个图像视图：
- en: '![](img/B31371_17_22.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_22.png)'
- en: 'Figure 17.22: Connections inspector showing the mapImageView outlet'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.22：连接检查器显示地图ImageView出口
- en: It may be easier to drag to the image view in the document outline.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档大纲中的图像视图中拖动可能更容易。
- en: 'Build and run your app and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin on the
    Map screen. Tap the pin to display a callout and tap the button inside the callout.
    The Journal Entry Detail screen appears, and it displays the details of the journal
    entry that you tapped on the Map screen. Scroll down and you will see the map
    snapshot in the second image view:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序，并使用模拟器的**功能** | **位置**菜单验证位置是否已设置为**苹果**。您应该在地图屏幕上看到一个单独的图钉。点击图钉以显示呼出窗口，并点击呼出窗口内的按钮。日记条目详情屏幕出现，并显示您在地图屏幕上点击的日记条目的详细信息。向下滚动，您将在第二个图像视图中看到地图快照：
- en: '![](img/B31371_17_23.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_17_23.png)'
- en: 'Figure 17.23: Simulator showing the Journal Entry Detail screen with a map
    snapshot'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.23：模拟器显示带有地图快照的日记条目详情屏幕
- en: The Journal Entry Detail screen can now display the map snapshot showing the
    location of a journal entry. Cool!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 现在日记条目详情屏幕可以显示显示日记条目位置的地图快照。酷！
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you modified the Add New Journal Entry screen so that the user
    can add their current location to a new journal entry. Next, you created a `MapViewController`
    class and configured it to display a custom map region centered on your location.
    Then, you updated the `JournalEntry` class to conform to the `MKAnnotation` protocol.
    After that, you modified the `MapViewController` class to display a pin for each
    journal entry within the map region. You configured the pins to display callouts
    and configured buttons in the callouts to display the Journal Entry Detail screen
    when tapped. Finally, you modified the `JournalEntryViewController` class to display
    a map snapshot for the journal entry on the Journal Entry Detail screen.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您修改了添加新日记条目屏幕，以便用户可以将他们的当前位置添加到新的日记条目中。然后，您创建了一个`MapViewController`类，并配置它显示以您的位置为中心的自定义地图区域。然后，您更新了`JournalEntry`类以符合`MKAnnotation`协议。之后，您修改了`MapViewController`类以在地图区域内显示每个日记条目的图钉。您配置了图钉以显示呼出窗口，并在呼出窗口中配置了按钮，以便在点击时显示日记条目详情屏幕。最后，您修改了`JournalEntryViewController`类以在日记条目详情屏幕上显示日记条目的地图快照。
- en: You now know how to get your device location using Apple’s Core Location framework,
    how to create custom map regions and display map annotations using Apple’s MapKit
    framework, and how to create map snapshots, which will come in handy if you’re
    planning to build apps that use maps, such as *Apple Maps* or *Waze*.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道了如何使用苹果的Core Location框架获取设备位置，如何使用苹果的MapKit框架创建自定义地图区域并显示地图标注，以及如何创建地图快照，这对于你计划构建使用地图的应用程序，如*苹果地图*或*Waze*，将非常有用。
- en: In the next chapter, you’ll learn how to create a shared data instance, and
    how to load and save data from JSON files.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何创建共享数据实例，以及如何从JSON文件中加载数据和保存数据。
- en: Join us on Discord!
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家以及作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过Ask Me Anything（问我任何问题）环节与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
