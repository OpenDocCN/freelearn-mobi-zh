- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Core Location and MapKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to pass data from the Add New Journal
    Entry screen to the Journal List screen, and from the Journal List screen to the
    Journal Entry Detail screen. You also learned about the `UITextFieldDelegate`
    and `UITextViewDelegate` methods.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to get your device location using Apple’s
    **Core Location** framework, and how to set map regions, display map annotations,
    and create map snapshots using Apple’s **MapKit** framework. This will come in
    handy if you’re planning to build apps that use maps, such as *Apple Maps* or
    *Waze*.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll modify the Add New Journal Entry screen so that the user can add
    their current location to a new journal entry. Next, you’ll create a `MapViewController`
    class (a view controller for the Map screen) and configure it to display a map
    region centered on your location. Then, you’ll update the `JournalEntry` class
    to conform to the **MKAnnotation** protocol, which lets you add journal entries
    as map annotations to a map. After that, you’ll modify the `MapViewController`
    class to display a pin for each journal entry within the map region that you set
    earlier. You’ll configure the pins to display callouts and configure buttons in
    the callouts to display the Journal Entry Detail screen when tapped. Finally,
    you’ll modify the `JournalEntryViewController` class to display a map snapshot
    showing the location where the journal entry was made in the Journal Entry Detail
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to use Core Location to
    get your device location and how to use MapKit to specify a map region, add map
    annotation views to a map, and create map snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting your device location using the Core Location framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the `JournalEntry` class to conform to the `MKAnnotation` protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying annotation views on the Map screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a map snapshot on the Journal Entry Detail screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter17` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/6WE5Ed6jIWk](https://youtu.be/6WE5Ed6jIWk%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn how the Core Location framework is used to
    get your device location.
  prefs: []
  type: TYPE_NORMAL
- en: Getting your device location using the Core Location framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every iPhone has multiple means of determining its location, including Wi-Fi,
    GPS, Bluetooth, magnetometer, barometer, and cellular hardware. Apple created
    the Core Location framework to gather location data using all available components
    on an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Core Location, see [https://developer.apple.com/documentation/corelocation](https://developer.apple.com/documentation/corelocation).
  prefs: []
  type: TYPE_NORMAL
- en: To configure your app to use Core Location, you will need to create an instance
    of `CLLocationManager`, which is used to configure, start, and stop location services.
    Next, you will create an instance of `CLLocationUpdate`, a structure that contains
    location information delivered by the Core Location framework. Calling the `CLLocationUpdate`
    type’s `liveUpdates` method tells Core Location to start delivering location updates
    containing the user’s location, authorization status, and location availability.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `CLLocationManager` class, see [https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services](https://developer.apple.com/documentation/corelocation/configuring_your_app_to_use_location_services).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can watch Apple’s WWDC 2023 video on streamlined location updates here:
    [https://developer.apple.com/videos/play/wwdc2023/10180/](https://developer.apple.com/videos/play/wwdc2023/10180/).'
  prefs: []
  type: TYPE_NORMAL
- en: Since location information is considered sensitive user data, you’ll also need
    to obtain authorization to use location services. You can also check the authorization
    status of location updates delivered by the `CLLocationUpdate` type’s `liveUpdates`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about requesting authorization to use location services, see [https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services](https://developer.apple.com/documentation/corelocation/requesting_authorization_to_use_location_services).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can watch Apple’s WWDC 2024 video on *What’s new in location authorization*
    here: [https://developer.apple.com/videos/play/wwdc2024/10212/](https://developer.apple.com/videos/play/wwdc2024/10212/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll modify the `AddJournalEntryViewController` class
    so that the user can assign a location when they create a new journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the AddJournalEntryViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the Add New Journal Entry screen has a **Get Location** switch,
    but it doesn’t do anything yet. You’ll add an outlet to the `AddJournalEntryViewController`
    class for this switch and modify it to add your location to the `JournalEntry`
    instance when the switch is on. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the `AddJournalEntryViewController` file. In
    this file, add an `import` statement after the `import UIKit` statement to import
    the Core Location framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an extension for the `AddJournalEntryViewController` class after all other
    code in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll implement code to ask for permission to use the user’s private data and
    to determine the user’s location in this extension later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add outlets for the Get Location switch and the label next to it after all
    the other outlets in the `AddJournalEntryViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add properties to store an instance of the `CLLocationManager` class, an asynchronous
    task that will manage location updates, and the current device location after
    all other property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All these properties are `private` as they will only be used within this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a method to determine the user’s location in the `AddJournalEntryViewController`
    extension before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This statement asks the user for permission to use their location information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This statement assigns an asynchronous task that will continuously obtain location
    updates to the `locationTask` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the updates provided by `CLLocation.liveUpdates()` and assigns
    each to an `update` instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the user location from the `update` instance and calls the
    `updateCurrentLocation` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This statement will call the `failedToGetLocation(message:)` method if the user
    did not give authorization to use their private data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This statement will call the `failedToGetLocation(message:)` method if the user’s
    location is not available.
  prefs: []
  type: TYPE_NORMAL
- en: You will see error messages because the methods called by `fetchUserLocation()`
    have not been implemented yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the closing curly brace of the `AddJournalEntryViewController` extension,
    implement the `updateCurrentLocation(_:)` method called by the `fetchUserLocation(`)
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method first gets the timestamp of `location`. This location may be an
    old, cached location, and not actually the current location, so the timestamp
    is compared with the current date and time. If the duration is less than 30 seconds,
    this indicates that the user’s location is current. In this case, the asynchronous
    task assigned to `locationTask` is canceled, the Get Location switch label’s text
    is set to `Done`, and the `currentLocation` property is set to this location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the closing curly brace of the `AddJournalEntryViewController` extension,
    implement the `failedToGetLocation(message:)` method called by the `fetchUserLocation(`)
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will cancel the asynchronous task assigned to `locationTask`, reset
    the values of the Get Location switch and label to their initial values, and display
    an alert configured with an appropriate error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `AddJournalEntryViewController` class, implement an action to be performed
    when the Get Location switch’s value is changed before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the Get Location switch is turned on, the switch label text is set to `Getting
    location...` and the `fetchUserLocation()` method is called. If the switch is
    turned off, `currentLocation` will be set to `nil`, the switch label text is reset
    to `Get location`, and the asynchronous task assigned to `locationTask` is canceled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `prepare(for:sender:)` method to add location information to the
    `JournalEntry` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `updateSaveButtonState()` method to enable the **Save** button only
    after the location has been found if the Get Location switch is on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call `updateSaveButtonState()` in `updateCurrentLocation(_:)` so that the **Save**
    button state will be updated once the location has been found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Project navigator, click the `Main` storyboard file. Click **New Entry
    Scene** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Most journal entries will probably not require a location, so you will set
    the default value for the Get Location switch to **off**. Click the Get Location
    switch and click the Attributes inspector button. Under **Switch**, set **State**
    to **Off**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: Attributes inspector showing the Get Location switch state set
    to Off'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **New Entry Scene** in the document outline and click the Connections
    inspector button. Connect the **getLocationSwitch** outlet to the Get Location
    switch in **New Entry Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: Connections inspector showing the getLocationSwitch outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the **getLocationSwitchLabel** outlet to the label next to the Get
    Location switch in **New Entry Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: Connections inspector showing the getLocationSwitchLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the **locationSwitchValueChanged** action to the Get Location switch,
    and choose **Value Changed** from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Attributes inspector showing the getLocationSwitchValueChanged
    outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed modifying the `AddJournalEntryViewController` class. In the
    next section, you’ll learn how to configure your app to access user data.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Info.plist file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since your app uses user data, you will need to ask the user for permission
    to use it. To do so, you will add a new setting to your app’s `Info.plist` file.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the `Info.plist` file. If you move your pointer
    over the **Information Property List** row, you’ll see a small **+** button. Click
    it to create a new row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Editor area showing contents of Info.plist'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the new row, set the **Key** to **Privacy - Location When In Use Usage Description**
    and set the **Value** to `This app uses your location for journal entries`. Your
    `Info.plist` file should look like the following when you’re done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: Info.plist with a new row added'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Simulator and choose **Location** | **Apple** from Simulator’s **Features**
    menu to simulate a location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Location | Apple selected from Simulator’s Features menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and click the **+** button to display the Add New Journal
    Entry screen. When prompted, tap the **Allow While Using App** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: Alert showing Allow While Using App highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: Note that this alert will appear the first time you launch your app during this
    chapter, and the setting you picked will be used by default during subsequent
    launches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the journal entry title and body, and set the Get Location switch to
    on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: Add New Journal Entry screen showing the Get Location switch'
  prefs: []
  type: TYPE_NORMAL
- en: Once the location has been determined, the label next to the Get Location switch
    will display **Done**, and the **Save** button will be active.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save**. You will be returned to the Journal List screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, the Get Location switch and the label next to it have been connected
    to outlets in the `AddJournalEntryViewController` class, the method for getting
    the device location has been assigned to the Get Location switch, and all the
    code required to add your location to the new `JournalEntry` instance has been
    added. Great!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll create a view controller for the Map screen and
    configure it to display your current device location.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MapViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Chapter 12*, *Finishing Up Your User Interface*, you added a map view to
    the Map screen. A map view is an instance of the `MKMapView` class. You can see
    what it looks like in the Apple Maps app.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MKMapView`, see [https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview).
  prefs: []
  type: TYPE_NORMAL
- en: When you build and run your app, you will see a map on the screen. The part
    of the map that is visible onscreen can be specified by setting the map view’s
    `region` property.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about regions and how to make them, see [https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region).
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll create a new class, `MapViewController`, to be the view controller for
    the Map screen, and you’ll use Core Location to determine the center point of
    the map region that will be displayed. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new group inside your project by right-clicking the **JRNL** group
    and choosing **New Group**. Name this group `Map Screen` and move it so it is
    below the **Journal Entry Detail Screen** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Map Screen** group and select **New File From Template...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the class with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Class**: `MapViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subclass**: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Also create XIB**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: **Swift**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Next** when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**. The `MapViewController` file appears in the Project navigator,
    and its contents appear in the Editor area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add code to import the `Core Location` and `MapKit` frameworks after the existing
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new extension for the `MapViewController` class after all other code
    in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll implement code to ask for permission to use the user’s private data and
    to determine the user’s location in this extension later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MapViewController` class, add an outlet for the map view after the
    opening curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add properties to hold a `CLLocationManager` instance and an asynchronous task
    after the `mapView` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a method to determine the user’s location in the `MapViewController`
    extension before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is similar to the `fetchUserLocation()` method you implemented in
    the `AddJournalEntryViewController` extension. First, it will ask for permission
    to use private user data and set the title of the Map screen to `Getting location...`.
    Next, an asynchronous task to continuously determine the user’s location will
    be assigned to `locationTask`, and if the user’s location is found, the map will
    be updated to show the user’s location. Otherwise, an alert with an appropriate
    error message will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Note that since the methods called by `fetchUserLocation()` have not been implemented
    yet, you will see error messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the missing methods in the `MapViewController` extension before the
    closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These methods are similar to the `updateCurrentLocation(location:)` and `failedToGetLocation(message:)`
    methods you implemented earlier in the `AddJournalEntryViewControlle`r extension.
  prefs: []
  type: TYPE_NORMAL
- en: The `updateMapWithLocation(location:)` method will set the title of the Map
    screen to `Map`, create a map region centered on the user’s location, and assign
    it as the region for the `mapView` property.
  prefs: []
  type: TYPE_NORMAL
- en: The `failedToGetLocation(message:)` method will set the title of the Map screen
    to `Location not found` and display an appropriate error message if permission
    to use user data was denied or if the location is unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad()` method for the `MapViewController` class to call
    `fetchUserLocation()` as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `Main` storyboard file in the Project navigator and click the first
    **Map Scene** in the document outline. Click the Identity inspector button, and
    under **Custom Class**, set **Class** to `MapViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: Identity inspector settings for Map scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Connections inspector to display all the outlets for **Map Scene**.
    Drag from the **mapView** outlet to the map view in **Map Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.11: Connections inspector showing the mapView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and verify that **Apple** is selected from Simulator’s
    **Features** | **Location** menu. Tap the **Map** tab button to display a map
    region centered on the location you selected, which, in this case, is the Apple
    campus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.12: Simulator showing a map centered on your location'
  prefs: []
  type: TYPE_NORMAL
- en: You can simulate any location in Simulator by choosing **Features** | **Location**
    | **Custom Location** and entering the longitude and latitude of the desired location.
  prefs: []
  type: TYPE_NORMAL
- en: Since `viewDidLoad()` is only called once when the `MapViewController` instance
    loads its view, the map will not be updated if the user’s location changes after
    it was initially set. Also, you’ll notice that it takes a long time for the location
    to be determined if you’re running the app on an actual iOS device. You’ll address
    both of these issues in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a new view controller for the Map screen and configured
    it to display a map region centered on your device location. Excellent! In the
    next section, you’ll learn about the `MKAnnotation` protocol, and how to make
    a class conform to it.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the JournalEntry class to conform to the MKAnnotation protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use the *Maps* app on iPhone, you can tap and hold on the map to drop
    a pin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_17_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.13: Maps app showing a dropped pin'
  prefs: []
  type: TYPE_NORMAL
- en: To add a pin to a map view for your own apps, you need a class that conforms
    to the `MKAnnotation` protocol. This protocol allows you to associate an instance
    of that class with a specific location.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `MKAnnotation` protocol, see [https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation).
  prefs: []
  type: TYPE_NORMAL
- en: Any class can adopt the `MKAnnotation` protocol by implementing a `coordinate`
    property, which contains a location. Optional `MKAnnotation` protocol properties
    are `title`, a string containing the annotation’s title, and `subtitle`, a string
    containing the annotation’s subtitle.
  prefs: []
  type: TYPE_NORMAL
- en: When an instance of a class conforming to the `MKAnnotation` protocol is in
    the region of the map that is visible onscreen, the map view asks its delegate
    (usually a view controller) to provide a corresponding instance of the `MKAnnotationView`
    class. This instance appears as a pin on the map.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MKAnnotationView`, see [https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview).
  prefs: []
  type: TYPE_NORMAL
- en: If the user scrolls the map and the `MKAnnotationView` instance goes off screen,
    it will be put into a reuse queue and recycled later, like the way table view
    cells and collection view cells are recycled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To represent journal entry locations on the Map screen, you will modify the
    `JournalEntry` class to make it conform to the `MKAnnotation` protocol. This class
    will have a `coordinate` property to store the journal entry’s location, a `title`
    property to store the journal entry date, and a `subtitle` property to store the
    journal entry title. You will use the `JournalEntry` instance’s `latitude` and
    `longitude` properties to compute the value that will be assigned to the `coordinate`
    property. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the `JournalEntry` file (inside the **Journal
    List Screen** | **Model** group). Type the following after the `import UIKit`
    statement to import the `MapKit` framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This lets you use the `MKAnnotation` protocol in your code.
  prefs: []
  type: TYPE_NORMAL
- en: The `MKAnnotation` protocol has an optional `title` property, which you will
    use later. You will change the name of the `title` property in the `JournalEntry`
    class to `entryTitle` so you don’t have two properties with the same name. Right-click
    on the `title` property and choose **Refactor | Rename** from the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the new name to `entryTitle`, as shown, and click **Rename**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.14: Refactoring the title property to entryTitle'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `JournalEntry` class declaration as follows to make it a subclass
    of the `NSObject` class and to adopt the `MKAnnotation` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see an error because you have not yet implemented the `coordinate` property,
    which is required to conform to the `MKAnnotation` protocol. Type the following
    after the initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `coordinate` property is of the `CLLocationCoordinate2D` type, and it holds
    a geographical location. The value of the `coordinate` property is not assigned
    directly; the `guard` statement gets the latitude and longitude values from the
    `latitude` and `longitude` properties, which are then used to create the value
    for the `coordinate` property. Such properties are called **computed properties**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the optional `title` property, type the following after the `coordinate`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a computed property that returns the journal entry date formatted as
    a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the optional `subtitle` property, type the following after the
    `title` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a computed property that returns the journal entry title.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you’ve modified the `JournalEntry` class to conform to the `MKAnnotation`
    protocol. In the next section, you’ll modify the `MapViewController` class to
    add an array of `JournalEntry` instances to a map view, and any instance within
    the region displayed by the map view will appear as a pin on the Map screen.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying annotation views on the Map screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Map screen at present displays a map region centered on your device location.
    Now that the map region has been set, you can determine which `JournalEntry` instances
    are in this region based on their `coordinate` property. Remember that the `JournalEntry`
    class conforms to `MKAnnotation`. As the view controller for the map view, the
    `MapViewController` class is responsible for providing an `MKAnnotationView` instance
    for any `MKAnnotation` instance within this region. You will now modify the `MapViewController`
    class to get an array of `JournalEntry` instances from the `SampleJournalEntryData`
    structure and add it to the map view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntry** file. In the `createSampleJournalEntryData()`
    method, modify the statement that creates the `journalEntry2` instance as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This instance now has values for its `latitude` and `longitude` properties,
    which will be used to set its `coordinate` property. The values used are for a
    location close to the Apple campus, which you will set in Simulator when you run
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: You can use whatever location you wish, but you will need to make sure that
    the location is close to the center point of the map, otherwise, the pin will
    not be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **MapViewController** file. Add an extension
    after all other code in the file to make the `MapViewController` class conform
    to the `MKMapViewDelegate` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just after the `locationTask` property declaration, add the following code
    to create a private property, `annotations`, that will hold an array of `JournalItem`
    instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is currently no connection between the Journal List and Map screens. This
    means that any journal entries that you add using the Add New Journal Entry screen
    will not appear on the Map screen. You will create a shared instance that will
    be used by both view controllers in the next chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `viewDidLoad()` method, set the map view’s `delegate` property to an
    instance of `MapViewController` before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the next line, populate the `journalEntries` array by calling the `sampleJournalEntryData`
    structure’s `createSampleJournalEntryData()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the next line, add the following statement to add all the sample journal
    entries (which conform to the `MKAnnotation` protocol) to the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The map view’s delegate (the `MapViewController` class in this case) will now
    automatically provide an `MKAnnotationView` instance for every `JournalItem` instance
    within the map region displayed on the Map screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin (`MKAnnotationView`
    instance) on the Map screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.15: iOS Simulator showing a standard MKAnnotationView instance'
  prefs: []
  type: TYPE_NORMAL
- en: The Map screen can now display pins, but tapping a pin just makes it bigger.
    You will add code to make pins display a callout with a button in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Since `viewDidLoad()` is only called once when the `MapViewController` instance
    loads its view, any journal entries with locations added to the `journalEntries`
    array after that will not be added as annotations to the map. You’ll address this
    issue in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a pin to display a callout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the Map screen displays standard `MKAnnotationView` instances, which
    look like pins. Tapping a pin just makes it bigger. An `MKAnnotationView` instance
    can be configured to display callout bubbles when tapped. To make it do so, you
    will implement the `mapView(_:viewFor:)` method, an optional `MKMapViewDelegate`
    protocol method. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **MapViewController** file in the Project navigator. In the `MKMapViewDelegate`
    extension, add the following method after the opening curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This is one of the methods specified in the `MKMapViewDelegate` protocol. It’s
    triggered when an `MKAnnotation` instance is within the map region, and it returns
    an `MKAnnotationView` instance, which the user will see on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: A constant, `identifier`, is assigned the `"MapAnnotation"` string. This will
    be the reuse identifier for the `MKAnnotationView` instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This `guard` statement checks to see if the annotation is a `JournalEntry` instance,
    and returns `nil` if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This `if` statement checks to see whether there is an existing `MKAnnotationView`
    instance that was initially visible but is no longer on the screen. If there is,
    it can be reused and is assigned to the `annotationView` constant. The `JournalItem`
    instance is then assigned to the `annotation` property of `annotationView` and
    the `annotationView` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `else` clause is executed if there are no existing `MKAnnotationView` instances
    that can be reused. A new `MKAnnotationView` instance is created with the reuse
    identifier specified earlier (`MapAnnotation`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `MKAnnotationView` instance is configured with a callout. When you tap a
    pin on the map, a callout bubble will appear showing the title (journal entry
    date), subtitle (journal entry title), and a button. You’ll program the button
    later to present the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The custom `MKAnnotationView` instance is returned.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `mapView(_:viewFor:)` method, see [https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1452045-mapview).
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and set the location to **Apple** using Simulator’s
    **Features** | **Location** menu. You should see a single pin on the Map screen.
    Tap the pin to display a callout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.16: iOS Simulator showing a callout when a pin is tapped'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a custom `MKAnnotationView` that displays a callout
    when tapped, but tapping the button in the callout bubble doesn’t do anything
    yet. You’ll configure the button to present the Journal Entry Detail screen in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Going from the Map screen to the Journal Entry Detail screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, the Map screen now displays an `MKAnnotationView` instance, and
    tapping it displays a callout bubble showing journal entry details. The button
    in the callout bubble doesn’t work yet, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'To present the Journal Entry Detail screen from the callout button, you’ll
    add a segue between the Map screen and the Journal Entry Detail screen and you
    will implement the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, an optional `MKMapViewDelegate` protocol method, to perform that segue
    when the callout button is tapped. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **Main** storyboard file. Find the **Map**
    icon under **Map Scene** in the document outline. *Ctrl* + *Drag* from the **Map**
    icon to the **Entry Detail** **Scene** and choose **Show** from the pop-up menu
    to add a segue between the **Map** **Scene** and the **Entry Detail** **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.17: Segue pop-up menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will set an identifier for this segue so that the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method knows which segue to perform. Select the segue connecting the **Map** **Scene**
    to the **Entry Detail** **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.18: Segue between Map scene and Entry Detail scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, under **Storyboard Segue**, set **Identifier**
    to `showMapDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.19: Attributes inspector settings for the showDetail segue'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **MapViewController** file in the Project navigator. In the `MapViewController`
    class, add a property to store a journal entry after all other property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This property will store the `JournalEntry` instance for the `MKAnnotationView`
    instance that was tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `mapView(_:annotationView:calloutAccessoryControlTapped:)` after the `mapView(_:viewFor:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is triggered when the user taps the callout bubble button. The annotation
    for the annotation view will be assigned to the `selectedAnnotation` property,
    and the segue with the `showMapDetail` identifier will be performed, which presents
    the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, see [https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview](https://developer.apple.com/documentation/mapkit/mkmapviewdelegate/1616211-mapview).
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app and set the location to **Apple** using Simulator’s **Features**
    | **Location** menu. You should see a single pin on the Map screen. Tap the pin
    to display a callout and tap the button inside the callout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Journal Entry Detail screen appears, but it does not contain any details
    about the journal entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.20: iOS Simulator showing a blank Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the Journal Entry Detail screen display the details of a journal entry,
    you will use the `prepare(for:sender:)` method to pass the selected journal entry
    to the Journal Entry Detail screen’s view controller. In the `MapViewController`
    class, uncomment and modify the `prepare(for:sender:)` method as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you have learned before, the prepare`(for:sender:)` method is executed by
    a view controller before transitioning to another view controller. In this case,
    this method is called before the Map screen transitions to the Journal Entry Detail
    screen. If the segue’s identifier is `showMapDetail` and the segue destination
    is a `JournalEntryDetailViewController` instance, `selectedAnnotation` will be
    assigned to the `selectedJournalEntry` property for the `JournalEntryDetailViewController`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin on the
    Map screen. Tap the pin to display a callout and tap the button inside the callout.
    The Journal Entry Detail screen appears, and it displays the details of the journal
    entry that you tapped on the Map screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.21: Simulator showing the Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have connected the Journal Entry Detail screen to the Map screen, and have
    successfully passed data from a selected journal entry on the Map screen to the
    Journal Entry Detail screen. Fantastic! In the next section, you’ll configure
    the Journal Entry Detail screen to display a map snapshot of the journal entry’s
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a map snapshot on the Journal Entry Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Map screen currently displays a single pin representing a journal entry.
    When you tap the pin on the Map screen and tap the callout button, the details
    of the journal entry are displayed on the Journal Entry Detail screen, but the
    second image view on the Journal Entry Detail screen currently displays a placeholder
    map image. You can capture a map region and convert it into an image using the
    `MKMapSnapshotter` class.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `MKMapSnapshotter` class, see [https://developer.apple.com/documentation/mapkit/mkmapsnapshotter](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter).
  prefs: []
  type: TYPE_NORMAL
- en: To configure the region and appearance of the map that is captured in the snapshot,
    an `MKMapSnapshotter.Options` object is used.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `MKMapSnapshotter.Options` object, see [https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options](https://developer.apple.com/documentation/mapkit/mkmapsnapshotter/options).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will connect the second image view in the **Entry Detail Scene** to an
    outlet in the `JournalEntryDetailViewController` class and replace the placeholder
    image with a map snapshot showing the location of the journal entry. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the `JournalEntryDetailViewController` file.
    Type the following after the `import UIKit` statement to import the `MapKit` framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following outlet after all other outlets in the `JournalEntryDetailViewController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to generate the map snapshot before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method checks to see if `journalEntry` has values in its `latitude` and
    `longitude` properties. If it does, then an `MKMapSnapShotter.Options` object
    is created, configured, and assigned to an `MKMapSnapshotter` object. The `MKMapSnapshotter`
    object is then used to generate the map snapshot, which will be assigned to the
    `image` property of the `mapImageView` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call the `getMapSnapshot()` method in the `viewDidLoad()` method before the
    closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Project navigator, click the **Main** storyboard file and click **Entry
    Detail** **Scene** in the document outline. Click the Connections inspector button
    and connect the **mapImageView** outlet to the second image view in the **Entry
    Detail** **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.22: Connections inspector showing the mapImageView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: It may be easier to drag to the image view in the document outline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and verify the location has been set to **Apple** using
    Simulator’s **Features** | **Location** menu. You should see a single pin on the
    Map screen. Tap the pin to display a callout and tap the button inside the callout.
    The Journal Entry Detail screen appears, and it displays the details of the journal
    entry that you tapped on the Map screen. Scroll down and you will see the map
    snapshot in the second image view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_17_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.23: Simulator showing the Journal Entry Detail screen with a map
    snapshot'
  prefs: []
  type: TYPE_NORMAL
- en: The Journal Entry Detail screen can now display the map snapshot showing the
    location of a journal entry. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you modified the Add New Journal Entry screen so that the user
    can add their current location to a new journal entry. Next, you created a `MapViewController`
    class and configured it to display a custom map region centered on your location.
    Then, you updated the `JournalEntry` class to conform to the `MKAnnotation` protocol.
    After that, you modified the `MapViewController` class to display a pin for each
    journal entry within the map region. You configured the pins to display callouts
    and configured buttons in the callouts to display the Journal Entry Detail screen
    when tapped. Finally, you modified the `JournalEntryViewController` class to display
    a map snapshot for the journal entry on the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to get your device location using Apple’s Core Location framework,
    how to create custom map regions and display map annotations using Apple’s MapKit
    framework, and how to create map snapshots, which will come in handy if you’re
    planning to build apps that use maps, such as *Apple Maps* or *Waze*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to create a shared data instance, and
    how to load and save data from JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
