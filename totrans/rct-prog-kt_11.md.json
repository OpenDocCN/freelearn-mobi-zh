["```kt\n    compile('org.springframework.boot:spring-boot-starter-data-jpa') \n```", "```kt\n    ## Spring DATASOURCE (DataSourceAutoConfiguration &    \n    DataSourceProperties) \n    spring.datasource.url = jdbc:mysql://localhost:3306/tododb \n    spring.datasource.username = root \n    spring.datasource.password = password \n\n    ## Hibernate Properties \n\n    # The SQL dialect makes Hibernate generate better\n    SQL for the chosen database \n    spring.jpa.properties.hibernate.dialect =    \n    org.hibernate.dialect.MySQL5Dialect \n\n    # Hibernate ddl auto (create, create-drop, validate, update) \n    spring.jpa.hibernate.ddl-auto = update \n```", "```kt\n    @Entity \n    data class Todo ( \n      @Id @GeneratedValue(strategy = GenerationType.AUTO) \n      var id:Int = 0, \n\n      @get: NotBlank \n      var todoDescription:String, \n\n      @get: NotBlank \n      var todoTargetDate:String, \n\n      @get: NotBlank \n      var status:String \n    ) { \n        constructor():this( \n        0,\"\",\"\",\"\" \n        ) \n       } \n```", "```kt\n    @Repository \n    interface TodoRepository: JpaRepository<Todo,Int> \n```", "```kt\n    data class ResponseModel ( \n      val error_code:String, \n      val error_message:String, \n      val data:List<Todo> = listOf() \n    ) { \n        constructor(error_code: String,error_message:\n        String,todo: Todo) \n        :this(error_code,error_message, listOf(todo)) \n      } \n```", "```kt\n    @RestController \n    @RequestMapping(\"/api\") \n    class TodoController(private val todoRepository: TodoRepository) { \n\n      @RequestMapping(\"/get_todo\", method = \n     arrayOf(RequestMethod.POST)) \n      fun getTodos() = ResponseModel(\"0\",\"\", todoRepository.findAll()) \n\n      @RequestMapping(\"/add_todo\", method = \n      arrayOf(RequestMethod.POST)) \n      fun addTodo(@Valid @RequestBody todo:Todo) = \n      ResponseEntity.ok().body(ResponseModel\n      (\"0\",\"\",todoRepository.save(todo))) \n\n      @RequestMapping(\"/edit_todo\", method = \n      arrayOf(RequestMethod.POST)) \n      fun editTodo(@Valid @RequestBody todo:Todo):ResponseModel { \n        val optionalTodo = todoRepository.findById(todo.id) \n        if(optionalTodo.isPresent) { \n            return ResponseModel(\"0\", \"Edit \n            Successful\",todoRepository.save(todo)) \n        } else { \n            return ResponseModel(\"1\", \"Invalid Todo ID\" ) \n        } \n      } \n\n      @RequestMapping(\"/add_todos\", method = \n      arrayOf(RequestMethod.POST)) \n      fun addTodos(@Valid @RequestBody todos:List<Todo>) \n            = ResponseEntity.ok().body(ResponseModel\n            (\"0\",\"\",todoRepository.saveAll(todos))) \n\n     @RequestMapping(\"/delete_todo/{id}\", method = \n     arrayOf(RequestMethod.DELETE)) \n     fun deleteTodo(@PathVariable(\"id\") id:Int):ResponseModel { \n        val optionalTodo = todoRepository.findById(id) \n        if(optionalTodo.isPresent) { \n            todoRepository.delete(optionalTodo.get()) \n            return ResponseModel(\"0\", \"Successfully Deleted\") \n        } else { \n            return ResponseModel(\"1\", \"Invalid Todo\" ) \n        } \n     } \n\n    } \n```", "```kt\n    { \n      \"error_code\": \"0\", \n      \"error_message\": \"\", \n      \"data\": [ \n        { \n            \"id\": 1, \n            \"todoDescription\": \"Trial Edit\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        }, \n        { \n            \"id\": 2, \n            \"todoDescription\": \"Added 2\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        }, \n        { \n            \"id\": 3, \n            \"todoDescription\": \"Edited 3\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        }, \n        { \n            \"id\": 4, \n            \"todoDescription\": \"Added 4\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        }, \n        { \n            \"id\": 5, \n            \"todoDescription\": \"Added 5\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        }, \n        { \n            \"id\": 7, \n            \"todoDescription\": \"Added 7\", \n            \"todoTargetDate\": \"2018/02/28\", \n            \"status\": \"due\" \n        } \n      ] \n    } \n```", "```kt\n    @RequestMapping(\"/add_todo\", method = arrayOf(RequestMethod.POST)) \n    fun addTodo(@Valid @RequestBody todo:Todo) = \n\n      ResponseEntity.ok().body(ResponseModel\n      (\"0\",\"\",todoRepository.save(todo))) \n```", "```kt\n    { \n      \"error_code\": \"0\", \n      \"error_message\": \"\", \n      \"data\": [ \n        { \n          \"id\": 8, \n          \"todoDescription\": \"Added 8\", \n          \"todoTargetDate\": \"2018/02/28\", \n          \"status\": \"due\" \n        } \n      ] \n    } \n```", "```kt\n    @RequestMapping(\"/delete_todo/{id}\", method =    \n    arrayOf(RequestMethod.DELETE)) \n    fun deleteTodo(@PathVariable(\"id\") id:Int):ResponseModel { \n      val optionalTodo = todoRepository.findById(id) \n      if(optionalTodo.isPresent) { \n         todoRepository.delete(optionalTodo.get()) \n         return ResponseModel(\"0\", \"Successfully Deleted\") \n      } else { \n         return ResponseModel(\"1\", \"Invalid Todo\" ) \n      } \n    } \n```", "```kt\n    { \n      \"error_code\": \"0\", \n      \"error_message\": \"Successfully Deleted\", \n      \"data\": [] \n    } \n```", "```kt\n    { \n      \"error_code\": \"1\", \n      \"error_message\": \"Invalid Todo\", \n      \"data\": [] \n    } \n```", "```kt\n    compile 'io.projectreactor:reactor-core:3.1.1.RELEASE' \n```", "```kt\n    <dependency> \n      <groupId>io.projectreactor</groupId> \n      <artifactId>reactor-core</artifactId> \n      <version>3.1.1.RELEASE</version> \n    </dependency>\n```", "```kt\n    fun main(args: Array<String>) { \n      val flux = Flux.just(\"Item 1\",\"Item 2\",\"Item 3\") \n      flux.subscribe(object:Consumer<String>{ \n        override fun accept(item: String) { \n            println(\"Got Next $item\") \n        } \n     }) \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n\n      val consumer = object : Consumer<String> {//(1) \n        override fun accept(item: String) { \n            println(\"Got $item\") \n        } \n      } \n\n      val emptyMono = Mono.empty<String>()//(2) \n      emptyMono \n        .log() \n        .subscribe(consumer) \n\n      val emptyMono2 = Mono.justOrEmpty<String>(null)//(3) \n      emptyMono2 \n        .log() \n        .subscribe(consumer) \n\n      val monoWithData = Mono.justOrEmpty<String>(\"A String\")//(4) \n      monoWithData \n        .log() \n        .subscribe(consumer) \n\n      val monoByExtension = \"Another String\".toMono()//(5) \n      monoByExtension \n        .log() \n        .subscribe(consumer) \n     } \n```"]