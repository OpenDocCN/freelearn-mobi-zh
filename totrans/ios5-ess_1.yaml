- en: Chapter 1. What's New in iOS5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the exciting world of iOS 5, the latest release of Apple's mobile
    operating system, which is packed with some great new features and improvements
    to the way things are done. The release of the iPhone 4, back in 2010, took the
    world by storm. Developers around the world have been embracing the new features,
    such as incorporating AirPlay features within their applications, making use of
    the retina display to provide crisp and high-definition graphics within their
    applications and games, as well as the accelerometer and gyroscope.
  prefs: []
  type: TYPE_NORMAL
- en: When Apple hosted their annual World Wide Developer Conference in June 2011,
    they introduced more than 200 new features, as well as an updated SDK that features
    over 1,500 new development APIs. This opened up a lot of ideas for many new applications
    and the way we do things currently, to be done differently. Some of the great
    new feature highlights are the ability to support the way in which notification
    messages are handled by using the new **Notification Center**, messaging has been
    greatly improved by using the new **iMessage** messaging application, and finally,
    the ability to organize and purchase all of your newspaper and magazine subscriptions
    using the new **Newsstand** application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will gain an insight into some of the fantastic new features
    and enhancements that have been incorporated into the latest iOS 5 release. We
    will also look at how to go about downloading and installing the Xcode developer
    tools and **Software Development Kit** (**SDK**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Get introduced to some of the new features that come with iOS 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the Xcode development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a simple application using the features of the Newsstand framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a simple application that sends an e-mail, using the `MessageUI` framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the Xcode development tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a exciting journey ahead of us, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in iOS 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the release of Apples iOS operating system back in June 2007, they have
    incorporated many new features and improvements within each release build of its
    operating system. In iOS 4, we saw this came with over 1,500 new APIs, as well
    as some high quality enhancements and improvements.
  prefs: []
  type: TYPE_NORMAL
- en: In iOS 5, Apple has introduced over 200 new features and improvements, as well
    as 1,500 new APIs and updates to its SDK, to include new features relating to
    Core Image, Twitter integration, and the Newsstand Kit.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, the Xcode 4 development environment has also undergone some
    improvements to allow your applications to be compiled with the new LLVM compiler
    3.0 that supports **Automatic Reference Counting** (**ARC**). Hence, you rarely
    need to retain or release your objects, as ARC does most of the work for you.
    In some cases, you will still need to use retain/release. Storyboard support has
    also been integrated into Interface Builder, which allows you to design multiple-view
    workflows for each of your views.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, debugging OpenGL ES projects are a lot easier, as these have been integrated
    into the Xcode debugging interface.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will focus in detail on some of the new features
    that come with iOS 5.
  prefs: []
  type: TYPE_NORMAL
- en: Reminders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A neat new feature that comes as part of this release is the **Reminders App**.
    A good way to think of reminders would be to think of them as to-do lists. Reminders
    can prove to be a life-saver, as they give you the flexibility to organize your
    day-to-day tasks, and come complete with the ability to add due dates and locations.
  prefs: []
  type: TYPE_NORMAL
- en: When you set up your reminders to use locations, you can specify to be reminded
    on a specific day or location, as well as being reminded either when you arrive
    or leave the location. They make use of your mobile phone's GPS, similar to how
    your car's navigation system works, and are designed to alert you as soon as you
    approach the designated area. Let's take an example, say for instance, you wanted
    to buy a new printer and some additional ink, you set up your reminder to automatically
    send you an alert as soon as you pulled into your local stores, parking lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, another thing to mention about reminders: since these have been integrated
    into iOS 5, they have been designed to work well with other applications. For
    example, Apple iCal, Microsoft Outlook, and iCloud. This has been done to ensure
    that any changes you make will automatically update on all of your devices and
    calendars.'
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots shows a list of items that have been added to a to-do
    list, and then shows how you can configure and specify when to be reminded. You
    can choose to be reminded when you leave or arrive at a particular location. The
    final screenshot shows the reminder pop-up when the specified time has been reached.
    Additional items can be added to the list by selecting the **+** plus sign, as
    highlighted by a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Reminders](img/2267EXP_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notification Center
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notifications play an important role in an iPhone user's everyday life. Notifications
    come in the form of pop-ups to inform you that a new e-mail has arrived, of new
    SMS text messages, of friend requests from social networking sites, notifications
    when your phone credit falls below a certain amount, and much more. With the Notification
    Center application, you don't need to worry about locating that e-mail, SMS text
    message, or friend request. It has been made simple enough for you to keep track
    of all of these forms of notifications in one convenient location.
  prefs: []
  type: TYPE_NORMAL
- en: The Notification Center can be accessed by simply placing your finger anywhere
    at the top of the screen and swiping in a downward motion. There are many different
    notifications to choose from when you are in this view. For instance, you can
    choose to see the current weather forecast, your stock shares, calendar entries
    of upcoming appointments, and so on. As new notifications come through, they will
    be added and will appear at the top of the list for easier access, without interrupting
    what you're doing.
  prefs: []
  type: TYPE_NORMAL
- en: You can also act upon Notifications through the **lock** screen on your iOS
    device; these appear categorized within a table view, so that you can act on them
    quickly by simply sliding the panel to unlock and take you to the relevant application.
    For example, if you receive a message, this will open up the **iMessage** application.
    As you can see, the Notification Center provides you with a much better way of
    staying on top of your life's activities.
  prefs: []
  type: TYPE_NORMAL
- en: '![Notification Center](img/2267EXP_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Newsstand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Newsstand** is a central place, where iOS users can access their subscribed
    magazines and newspapers. Unlike iBooks, where book publishers supply `.epub`
    files or similar documents, Newsstand publishers will have to create an iOS application
    (or adapt their existing application). Think of it like a cross between the shelf
    seen in the iBooks application and applications folders on the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: To make use of the new features, publishers must invoke the newly added **Newsstand
    Kit framework**. There are some simple settings that need to be configured to
    allow your application to recognize that it is a magazine or a newspaper, so that
    it can be placed within the Newsstand application, instead of running as a standalone
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming section, we will proceed to download and install the iOS 5 SDK.
    If you have already installed this, you can skip this section altogether and proceed
    to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting and installing the iOS 5 SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start to build our iOS applications, you must first sign up as
    a registered iOS Developer at [http://developer.apple.com/programs/ios/](http://developer.apple.com/programs/ios/).
    The registration process is free and provides you with access to the iOS SDK and
    other developer resources that are really useful for getting you started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have signed up, you can then download the iOS SDK, as shown in the
    following screenshot. It may be worthwhile making sure that your machine satisfies
    the following system requirements prior to your downloading the iOS SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Only Intel Macs are supported, so if you have another processor type (such as
    the older G4 or G5 Macs), you're out of luck
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have updated your system with the latest Mac OS X software updates for either
    OS X Lion or Snow Leopard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to develop applications for the iPad and iPod Touch, you can still
    use the iOS SDK, as they use the same **operating system** (OS) as the iPhone
    does. This SDK allows you to create universal applications that will work with
    both the iPhone and iPad running on iOS 4 and above.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting and installing the iOS 5 SDK](img/2267EXP_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have downloaded the SDK, you can proceed with installing it. You will
    be required to accept a few licensing agreements. You will then be presented with
    a screen to specify the destination folder in which to install the SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting and installing the iOS 5 SDK](img/2267EXP_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you select the default settings during the installation phase, the various
    tools (explained in detail later) will be installed in the `/Developer/Applications`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation process takes you through the custom installation option screens.
    You probably would have seen similar screens to this if you have installed other
    Mac software. The following screenshot shows what you will see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting and installing the iOS 5 SDK](img/2267EXP_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These options give you a little more control over the installation process.
    For example, you are able to specify the folder location to install Xcode, as
    well as settings for a variety of other options.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS 5 SDK comes as part of the Xcode Developer Tools download, which you'll
    find at [https://developer.apple.com/devcenter/ios/index.action](http://https://developer.apple.com/devcenter/ios/index.action).
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDK consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Xcode:** This is the main **Integrated Development Environment** (**IDE**)
    that enables you to manage, edit, and debug your projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dashcode:** This enables you to develop web-based iOS applications and Dashboard
    widgets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS Simulator:** This is a Cocoa-based application that provides a software
    simulator to simulate an iOS device on your Mac OS X'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instruments:** These are the analysis tools that help you optimize your applications
    and monitor for memory leaks in real-time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot displays a list of the various tools that are installed
    as part of the default settings, during the installation phase. These are installed
    in the `/Developer/Applications` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting and installing the iOS 5 SDK](img/2267EXP_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at how we can use the power of the Newsstand
    Kit framework to enable developers to develop an application that will add items
    to our Newsstand, rather than this being launched as a separate iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MyMagazineArticle application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can proceed with creating our `MyMagazineArticle` application, we
    must first launch the Xcode4.2 development environment. Double-click on the Xcode
    icon located in the `/Developer/Applications` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use Spotlight to search for this: simply type `Xcode`
    into the search box and Xcode should be displayed in the list at the top. When
    Xcode is launched, you should see the **Welcome to Xcode** screen, as shown in
    the following screenshot.'
  prefs: []
  type: TYPE_NORMAL
- en: It may be worth docking the Xcode icon to your Mac OS X launch bar for easy
    access, as we will be using it a lot throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the MyMagazineArticle application](img/2267EXP_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is very simple to create the MyMagazineArticle application in Xcode. Just
    follow the steps listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Create a new Xcode project**, then select **iOS Application** on the
    left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Page-Based Application** template from the **Project** template
    dialog-box.![Creating the MyMagazineArticle application](img/2267EXP_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Next** button to proceed to the next step in the wizard.
    This will allow you to enter in the **Product Name** and your **Company Identifier**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The company identifier for your App needs to be unique. Apple recommends that
    you use the reverse-domain style (for example, `com.DomainName.AppName)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating the MyMagazineArticle application](img/2267EXP_01_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Enter in `MyMagazineArticle` for the **Product Name**, and enter a unique identifier
    in the **Company Identifier** field, ensuring that you have selected **iPhone**
    from the **Device Family** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Next** button to proceed to the final step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the folder location where you would like to save your project.![Creating
    the MyMagazineArticle application](img/2267EXP_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save your project at the location specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your project has been created, you will be presented with the Xcode development
    interface, along with the project files that the template created for you, within
    the **Project Navigator** window.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Newsstand Kit framework to our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our project, we need to add the Newsstand Kit framework
    to our project. This is an important framework that provides us with the ability
    to make our application appear within the Newsstand application, provided in the
    latest iOS 5release.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this framework and any other frameworks to your project, select the
    **Project Navigator Group**, and then follow the simple steps outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project within the **Project Navigator Window**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your project target from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Binary with Libraries** disclosure triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down within the list and select the **NewsstandKit.framework**, and click
    on the **Add** button to add the item to our project. You can use the **+** button
    to add the library that you want to add; to remove a framework, highlight it from
    the group, and then click on the button. There is also the ability to search for
    the framework, if you can't find it in the list shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are still confused on how to go about adding the `NewsstandKit.framework`,
    you can refer to the following screenshot, which highlights what parts you need
    to select (highlighted by a rectangle).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Adding the Newsstand Kit framework to our project](img/2267EXP_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding properties to our application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have added the `NewsstandKit.framework` to our project, our next
    step is to start adding some properties to make our application show up within
    the Newsstand application.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike other iOS applications, Newsstand applications that you create will only
    appear in the Newsstand application, and not displayed within the user's home
    screen like iOS applications currently do. Instead of displaying the application
    icon, the application will display a cover and some additional information provided
    by Newsstand. When a user taps the cover of your application, it will automatically
    launch your application and present them with information pertaining to that article.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application that uses the Newsstand Kit requires communication between
    your application and the servers that host your content. Your servers are responsible
    for notifying the application when any new updates or releases are available,
    typically using a **push** notification.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on push notifications, refer to the Apple Developer Connection
    documentation which can be found at the following address: [http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction/Introduction.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make our application act like a Newsstand application, and make
    it appear on the shelf, three steps are required. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the Newsstand Kit framework to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the **UINewsstandApp** key within your **MyMagazineArticle-Info.plist**
    file to indicate that it supports Newsstand. This can be achieved by clicking
    on the **MyMagazineArticle-Info.plist** file, then right-clicking within the center
    of the panel, and selecting **Add Row** from the pop-up list, as shown in the
    following screenshot:![Adding properties to our application](img/2267EXP_01_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the **Required background modes** key with the newsstand-content value,
    for the application to be launched in the background so that it can start downloading
    the latest content. This can be achieved by clicking on the MyMagazineArticle-Info.plist
    file, and then right-clicking within the center of the panel and selecting Add
    Row from the pop-up list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the options that are needed to be assigned to,
    make it appear within the Newsstand folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding properties to our application](img/2267EXP_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If your Newsstand application includes the required background modes key within
    the **newsstand-content** value, located within the **MyMagazineArticle-Info.plist**
    file, your newsstand application will be launched in the background, so that it
    can start downloading the latest version of your magazine or newspaper article.
  prefs: []
  type: TYPE_NORMAL
- en: The download process is self-managed, and is taken care of by the system, which
    then notifies your application when the content has been fully downloaded and
    made available.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make our application appear within the newsstand folder, you will
    need to create an array entry **CFBundleIconFiles** under the **CFBundlePrimaryIcons**
    to include your standard application icon.
  prefs: []
  type: TYPE_NORMAL
- en: You then need to create your **UINewsstandIcon** with a **CFBundle** in there
    as well, as this is where you set your newspaper or magazine covers and specify
    the binding type, which gives your application an icon shape and its binding edge.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, it shows how we can customize our application to
    have it show as a newspaper, by changing the **UINewsstandBindingType** property
    to **UINewsstandBindingTypeNewspaper:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding properties to our application](img/2267EXP_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have created these entries within your application's `.plist` file,
    by making sure that you have added the actual icon `.png` files to your project,
    you will be ready to compile, build, and run your application. The following screenshot
    will be displayed, which shows that our application has been successfully added
    as part of the **Newsstand** folder application, with its icon changed to display
    as a newspaper article.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding properties to our application](img/2267EXP_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When adding icons to your project, it is important to take note of the size.
    This is dependent whether or not you are developing this for an iPhone or iPad.
    In the following table, this lists the name, size, and platform that the icons
    pertain to.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Image name** | **Size (pixels)** | **iOS Platform** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon.png` | `57x57` | Universal application icon |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon-72.png` | `72x72` | iPad |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon-64.png` | `64x64` | iPad |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon-32.png` | `32x32` | iPad/iPhone |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon-24.png` | `24x24` | iPad/iPhone |'
  prefs: []
  type: TYPE_TB
- en: '| `Icon-16.png` | `16x16` | iPad/iPhone |'
  prefs: []
  type: TYPE_TB
- en: If we change the **UINewsstandBindingType** property back to **UINewsstandBindingTypeMagazine**,
    it will display our icon as a magazine cover.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding properties to our application](img/2267EXP_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have modified this entry within your application's `.plist` file, you
    will be ready to compile, build, and run this application. The following screenshot
    will be displayed, which shows that our application has successfully been added
    as part of the **Newsstand** folder application, with its icon changed to display
    as a **Magazine** cover.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding properties to our application](img/2267EXP_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So there you have it. As you can see, by adding some simple properties to your
    applications `.plist` file, you can customize your application to either have
    its icon displayed as a magazine cover, or as a newspaper article.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important thing to mention is that Newsstand applications must include the
    **UINewsstandApp** key within your project's **.plist** file, to indicate that
    it supports the Newsstand feature. If this is not done, your application will
    appear as a normal application that will be displayed on the user's home screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MyEmailApp application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending an e-mail from within your application ensures that you don't need to
    re-launch your application after sending the e-mail. This can be a good thing,
    as it makes your application user-friendly, enabling the user to keep using your
    application without having to re-launch it.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will be using the `MessageUI` framework to create a simple
    application that will allow in-app sending of e-mails, without the user having
    to exit your application and then re-launch it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also look at how we can automatically fill the **To, Subject**, and
    **Message Body** fields, before finally seeing how we can access and customize
    the navigation bar color to suit your application. To see how we can achieve this,
    just follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, choose the **Single View Application** template from the project template
    dialog box:![Creating the MyEmailApp application](img/2267EXP_01_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step within the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for your project by filling in the **Product Name** and **Company
    Identifier** fields.![Creating the MyEmailApp application](img/2267EXP_01_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `MyEmailApp` for the **Product Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that **iPhone** is selected from the **Device Family** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next**, to proceed to the final step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the folder location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save your project at the location specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the MessageUI framework to our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have created our project, we need to add the `MessageUI` Framework
    to our project. This is an important framework that will provide us with the ability
    to send an e-mail message.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this framework, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project within the **Project Navigator Window**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select your project target from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Libraries** with **Libraries** disclosure triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, scroll down within the list and select the `MessageUI.framework`, and
    click on the **Add** button to add the item to our project. You can use the **+**
    button to add the library that you want to add; to remove a framework, highlight
    it from the group, and then click on the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are still confused as to how to go about adding the **MessageUI.framework**,
    you can refer to the following image, which highlights what parts you need to
    select (highlighted by a rectangle).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Adding the MessageUI framework to our project](img/2267EXP_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building TheMyEmailApp user interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will start to build our user interface for the `MyEmailApp`.
    We will need to include the header file information for the `MessageUI` framework,
    which we added in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exposes all of the function methods and parameter calls. To see how this
    can be achieved, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have added the required framework, our next step is to import the
    framework header file into our `MyEmailAppViewController.h` header file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, under the resources folder, open the `MyEmailAppViewController.xib` file,
    then drag a `UIButton` control from the **Object Library**, and set the buttons
    caption to display `Send Email` through its text property, or you can double-click
    on the button and type in the `Send Email` text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create the method action event that will execute when this button
    has been pressed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `MyEmailAppViewController.m` implementation file, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates an MFMailComposeViewController object, and sets ourself up as the
    delegate, so that we can receive the callbacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to dismiss our e-mail window view once we have sent our message. For
    this to happen, we need to implement a delegate handler to our mail compose view
    controller `MFMailComposeViewControllerDelegate`. This sets up your applications
    view-controller as the delegate, so that it can be notified when the user either
    sends or cancels the e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MyEmailAppViewController.h` interface file, and then add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now need to implement a callback method, which will be used to dismiss the
    view controller when the user sends or cancels the e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `MyEmailAppViewController.m` implementation file, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Auto-populating fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, we have added enough program logic to allow our application to function
    correctly, but this doesn't allow for certain fields to be auto-populated, so
    these will need to be manually filled in. To do this, we first need to add some
    additional code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MyEmailAppViewController.m` implementation file, and add the following
    code to the `composeEmail` method, as shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is also the option to change the color of the navigation bar that is located
    at the top of the e-mail window. To achieve this, we need to use the `setTintColor`
    method of the `navigationBar` control. You will need to add this to the `composeEmail`
    method, just before the line that reads `[self presentModalViewController:controller:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this section, we have successfully added the code to pre-fill our e-mail
    composition sheet with default item details, and looked at how we can set the
    color of our navigation bar. In the next section, we will take a look at how to
    build and run our application.
  prefs: []
  type: TYPE_NORMAL
- en: Building and running the MyEmailApp application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have implemented the previous code, it is time to compile, build,
    and run your application to see how it all works. The following screenshot below
    displays the `MyEmailApp` application running within the iOS simulator, with all
    of the fields populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and running the MyEmailApp application](img/2267EXP_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, there you have it. You have successfully built an application using the
    `MessageUI` framework that sends a new e-mail message. When you press the **Send
    Email** button, it displays the compose new e-mail view controller window directly
    within your application, with all fields pre-populated, and the navigation bar
    is colored appropriately. The action sheet that is shown in the last screenshot
    gets displayed when you press the **Cancel** button.
  prefs: []
  type: TYPE_NORMAL
- en: iMessage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**iMessage** is an integrated add-on to the existing Messages application that
    we have come to know and love. iMessage allows you to easily send text messages,
    photos, videos, or other content to an individual or a group of people on other
    iOS devices running iOS 5 over Wi-Fi or 3G.'
  prefs: []
  type: TYPE_NORMAL
- en: These messages are also automatically pushed to all of your other iOS devices,
    thus making it easier to maintain one conversation across all devices. When sending
    messages using iMessage, your phone automatically checks to see if the phone number
    of the person that you are sending is running iOS 5, if this is the case, it will
    send them an iMessage message rather than a standard SMS text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Up to this point, your address book will be updated and a small blue chat bubble
    will appear next to the name of the contact to indicate that they can receive
    iMessages. If the person is not running iOS 5, then the address book will be updated
    with a green chat bubble. In the following screenshot, it displays the iMessages
    feature, and displays the conversations in small blue bubbles to indicate that
    both people are running iOS 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iMessage](img/2267EXP_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bullet points below summarize some of the advantages of using iMessage,
    as opposed to the standard messaging component.
  prefs: []
  type: TYPE_NORMAL
- en: iMessage brings the Message application for all iOS devices running iOS 5 the
    iPhone, iPod touch, and iPad. Messages are pushed to all your devices, so if you
    start a conversion on your iPhone, you are able to continue and pick it upon any
    iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iMessage service is built into the Message application, so users can send unlimited
    text, photos, videos, contacts, locations, and group messages for free, to their
    family and friends who have an iOS device. It is worth mentioning that, while
    this feature doesn't incur any text messaging fees, it does use your bandwidth
    allocation, and depending on how much you use, it might cost you more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iMessage easily allows you to find out if someone is responding to your message
    in the form of an ellipsis, as seen on applications such as an instant messenger.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iMessage optionally allows you to track your messages with delivery receipt
    and read receipt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can send messages over Wi-Fi as well as over 3G.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages that are sent through iMessage are encrypted over the air.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iPhone Camera
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another component within the iPhone that has been updated in this latest release,
    is the **iPhone Camera**. Since the camera is the most widely used application
    to capture those special and unexpected moments, Apple has made this more accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'This application can now be accessed directly from your iPhone''s lock screen,
    and features several improvements, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Grid lines:** These are very helpful for determining if the camera is leveled
    to ensure that you take a perfect shot every time, by using things in the horizon
    or edges of buildings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pinch-to-zoom gestures:** This feature enables you to manually zoom in and
    out, directly, within the camera application, rather than using the slider at
    the bottom of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single-tap focus:** This feature allows you to lock the focus and the exposure
    to one area of the screen. Simply tap your finger anywhere on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exposure locks to compose a picture on the fly:** This feature allows you
    to lock the focus and the exposure of your image, by simply placing and holding
    your finger on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There have also been new photo editing improvements added to the **Photos**
    application, to enable you to manipulate your images, to either crop or rotate
    your image, or provide photo enhancements, such as removal of red-eye from your
    photos, all done directly within the Photos application
  prefs: []
  type: TYPE_NORMAL
- en: If you are using iCloud (we will be covering this in [Chapter 2](ch02.html "Chapter 2. Using
    iCloud and the Storage APIs"), *Using iCloud and the Storage APIs)*, it is also
    possible to automatically load new photos onto your computer's desktop, should
    you prefer to edit them there using your preferred photo-editing tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![iPhone Camera](img/2267EXP_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: PC Free
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the new **PC Free** feature that comes with iOS 5, users can set up and
    activate their devices without the need of a computer. Any new iOS software updates
    are deployed directly to your iOS devices, as well as any purchases made on your
    device from iTunes or the App Store. These are transferred securely over Wi-Fi
    using **Secure Sockets Layer** (**SSL**) back to your iTunes library.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have properly set up and configured iCloud, your backups and restores
    will automatically be done for you, and stored within the Cloud, making it easier
    for you to deploy any iOS updates to each of your iOS devices or computers that
    use the same Apple ID.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot displays options on how to set up your phone, restore
    your device from and iCloud backup, or from your iTunes library. Once this is
    done, you will receive a final **Thank You** screen, where you can start using
    your iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: '![PC Free](img/2267EXP_01_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wi-Fi sync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In iOS 5, Apple has provided an easier way for its users to wirelessly synchronize
    all of your iOS devices over a shared Wi-Fi connection directly back to your Mac
    or PC, without the need of having it connected directly to your computer, as you
    would have done previously.
  prefs: []
  type: TYPE_NORMAL
- en: What happens is that, each time you decide to charge your iOS device, it will
    automatically search for any new purchases or items that have been added to your
    device and then automatically synchronize this back to your iTunes library.
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, you will always have a back up copy of all of your movies, precious
    home videos, and photo albums in one place, which can be accessed anytime you
    want them.
  prefs: []
  type: TYPE_NORMAL
- en: Multitasking gestures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unfortunately, these never made it in the iOS 4 release; they were only included
    in the iOS 4 SDK for developers, but ended-up working really well on the iPad.
    In iOS 5, this has been greatly improved and includes a number of added features
    to make accessing content a lot easier. The engineers at Apple have made it simpler,
    and a lot easier to navigate around in as little moves as possible. They have
    also added shortcut menus to help you get around even quicker on the iPad.
  prefs: []
  type: TYPE_NORMAL
- en: These are achieved by using four or five fingers, and swiping upwards to reveal
    the multitasking bar and using the pinch motion to return to the **Home** screen.
    There has even been support added relating to swiping left or right, to switch
    between your applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![Multitasking gestures](img/2267EXP_01_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Removing the Xcode developer tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Should you ever wish to uninstall Xcode (in the event that something went wrong
    during installation, or you just want to uninstall the Xcode developer tools),
    it is a very straightforward process. Open an instance of the terminal window
    and run the `uninstall-devtools` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`<Xcode>` is the directory where the tools are installed. For typical installations,
    the full path is `/Developer/Library/uninstall-devtools`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`<sudo>` is a system admin command that will require you to enter in the administrator
    password before proceeding.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you proceed, make sure this is what you really intend to do, as once
    it's gone, it's permanently deleted. In any event, you can always choose to reinstall
    the Xcode developer tools. It is worth checking that the `/Developer/Library/Xcode/`
    folder has also been removed. If not, just move it to the trash.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the new features of iOS 5, and how to go about
    downloading and installing the iOS 5 SDK, as well as familiarizing ourselves with
    some of the Xcode development tools.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on, and looked at how to build a simple Newsstand application,
    using the Newsstand Kit framework, to show how we can add newspapers and magazines
    to the Newsstand application folder. Next, we looked at how we can use the `MessageUI`
    framework to build a simple e-mail application, and learned how we can customize
    the navigation bar UI to set the background color.
  prefs: []
  type: TYPE_NORMAL
- en: To end the chapter, we looked at the steps involved on how to uninstall the
    Xcode developer tools, using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn what **iCloud** exactly is that we keep hearing
    so much about it, and we will focus on the storage APIs that comes as part of
    iCloud. We will take a look at how to create an iCloud application to store documents
    and key-value data within the Cloud, how to perform a backup to the Cloud, and
    then finally look at how we can handle file-version conflicts.
  prefs: []
  type: TYPE_NORMAL
