["```swift\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions{\n   // Override point for customization after \n   // application launch.\n   return YES;\n}\n}\n```", "```swift\n    //  BooksViewController.h\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import  <UIKit/UIKit.h>\n    #import \"Books.h\"\n\n    @interface BooksViewController : UITableViewController\n    {\n     NSManagedObjectContext     *managedObjectContext;\n     NSFetchedResultsController *fetchedResultsController;\n     NSArray                          *fetchedObjects;\n       IBOutlet UIBarButtonItem *btnAdd;\n       IBOutlet UIBarButtonItem *btnSortOrder;\n       IBOutlet UIBarButtonItem *btnConnect;\n       IBOutlet UIBarButtonItem *btnTransfer;\n\n       // Fields for our btnAdd UIAlertView dialog\n     UITextField *bookTitle;\n     UITextField *bookAuthor;\n     UITextField *bookPublisher;\n    }\n     // Core Data session objects\n     @property (strong, nonatomic) NSManagedObjectContext \n     *managedObjectContext;\n     @property (strong, nonatomic) \n     NSFetchedResultsController *fetchedResultsController;\n\n       // Property getters and setters for our UI\n       @property (strong, nonatomic) IBOutlet UIBarButtonItem         \n       *btnAdd;\n       @property (strong, nonatomic) IBOutlet UIBarButtonItem     \n       *btnSortOrder;\n       @property (strong, nonatomic) IBOutlet UIBarButtonItem   \n       *btnConnect;\n       @property (strong, nonatomic) IBOutlet UIBarButtonItem   \n       *btnTransfer;\n\n    // Create the class instance methods\n    -(void)populateBookDetails;\n\n    - (IBAction)btnAdd:(id)sender;\n    - (IBAction)btnSortOrder:(id)sender;\n    - (IBAction)btnConnect:(id)sender;\n    - (IBAction)btnTransfer:(id)sender;\n\n    @end\n    ```", "```swift\n    //  AppDelegate.m\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  \"AppDelegate.h\"\n    #import \"BooksViewController.h\"\n\n    @implementationAppDelegate\n\n    @synthesize managedObjectContext = _managedObjectContext;\n    @synthesize managedObjectModel = _managedObjectModel;\n    @synthesize persistentStoreCoordinator = \n    _persistentStoreCoordinator;\n    ```", "```swift\n    - (BOOL)application:(UIApplication *)application \n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n     // Point our Books View Controller to our data-model\n     UINavigationController *navigationController = \n     (UINavigationController *)\n     self.window.rootViewController;\n     BooksViewController *booksViewController = \n     [[navigationController\n     viewControllers]objectAtIndex:0];\n     booksViewController.managedObjectContext = \n     self.managedObjectContext;\n      return YES;\n    }\n    ```", "```swift\n    //  BooksViewController.m\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import \"BooksViewController.h\"\n\n    @implementation BooksViewController\n\n    @synthesize fetchedResultsController;\n    @synthesize managedObjectContext;\n    @synthesize btnAdd;\n    @synthesize btnSortOrder;\n    @synthesize btnConnect;\n    @synthesize btnTransfer;\n\n    ```", "```swift\n    #pragma mark - View lifecycle\n    - (void)viewDidLoad {\n    [super viewDidLoad];\n    // Initialize and reload Book Details.\n    self.title = @\"Book Details\";\n    [self populateBookDetails];\n    }\n    #pragma mark reloads our book details when our view reappears\n    - (void)viewDidAppear:(BOOL)animated {\n    [super viewDidAppear:animated];\n    [self populateBookDetails];\n    }\n    ```", "```swift\n    #pragma mark Populate our table view with our database records\n    -(void)populateBookDetails {\n       // Define our table/entity name to use\n       NSEntityDescription *entity = [NSEntityDescription\n       entityForName:@\"Books\" \n       inManagedObjectContext:managedObjectContext];\n\n       // Set up the fetch request\n       NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];\n       [fetchRequest setEntity:entity];\n\n       // Define how we are to sort the records\n       NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] \n       initWithKey:@\"displayOrder\" ascending:YES];\n       NSArray *sortDescriptors = [NSArray\n       arrayWithObject:sortDescriptor];\n       [fetchRequest setSortDescriptors:sortDescriptors];\n       // Define the FetchResults controller\n       fetchedResultsController = [[NSFetchedResultsControlleralloc] \n       initWithFetchRequest:fetchRequest\n       managedObjectContext:managedObjectContext\n       sectionNameKeyPath:nil cacheName:@\"Root\"];\n\n       // Fetch the records and handle any errors \n       NSError *error = nil;\n       if (![[self fetchedResultsController] performFetch:&error]) {\n          NSLog(@\"There was an error retrieving the book \n          details.\");\n        }     \n       // Number of rows to populate our Table View controller with.\n       fetchedObjects = fetchedResultsController.fetchedObjects;   \n       [self.tableView reloadData];\n    }\n    #pragma mark - Table view data source\n    -(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{\n        // Return the number of sections.\n    return 1;\n    }\n    #pragma mark Return the number of rows in the section.\n    - (NSInteger)tableView:(UITableView *)tableView\n       numberOfRowsInSection:(NSInteger)section {\n       return [fetchedObjects count];\n    }\n    #pragma mark populate our tableview for each book added\n    - (UITableViewCell *)tableView:(UITableView *)tableView\n      cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n      static NSString *CellIdentifier = @\"BookCell\";\n      Books *bookDetails;\n\n      // Populate our tableView with all items from our resultset\n      bookDetails = [fetchedResultsController\n      objectAtIndexPath:indexPath];\n\n      UITableViewCell *cell = [tableView\n      dequeueReusableCellWithIdentifier:CellIdentifier];\n      if (cell == nil) {\n          cell = [[UITableViewCell alloc] \n          initWithStyle:UITableViewCellStyleSubtitle\n          reuseIdentifier:CellIdentifier];\n      }\n      // Configure the cell...\n      cell.textLabel.text = bookDetails.title;\n      cell.detailTextLabel.text = bookDetails.author;\n      cell.showsReorderControl = YES;\n      [tableView setAllowsSelection:YES];\n      return cell;\n    }\n    ```", "```swift\n    #pragma mark method called when the user presses the Add button\n    -(IBAction)btnAdd:(id)sender{\n       UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Add \n       Book Details\" message:@\"\\n\\n\\n\\n\" delegate:self\n       cancelButtonTitle:@\"Cancel\" otherButtonTitles:@\"OK\", nil];\n       bookTitle = [[UITextField alloc]\n       initWithFrame:CGRectMake(12.0, 45.0, 260.0, 25.0)];\n       [bookTitle setPlaceholder:@\"Book Title:\"];\n       [bookTitle setBackgroundColor:[UIColor whiteColor]];\n       [alert addSubview:bookTitle];\n       bookAuthor = [[UITextField alloc] \n       initWithFrame:CGRectMake(12.0, 80.0, 260.0, 25.0)];\n       [bookAuthor setPlaceholder:@\"Author:\"];\n       [bookAuthor setBackgroundColor:[UIColor whiteColor]];\n       [alert addSubview:bookAuthor];\n       bookPublisher = [[UITextField alloc] \n       initWithFrame:CGRectMake(12.0, 80.0+35.0, 260.0, 25.0)];\n       [bookPublisher setPlaceholder:@\"Publisher:\"];\n       [bookPublisher setBackgroundColor:[UIColor whiteColor]];\n       [alert addSubview:bookPublisher];\n\n       // Show our Alert Dialog\n       [alert show];\n    }\n    ```", "```swift\n    #pragma mark method called and uses the data entered by the btnAdd method\n    -(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\n       NSString *title = [alertView buttonTitleAtIndex:buttonIndex];\n       if ([title isEqualToString:@\"OK\"]) {\n          // Set a pointer to our Books database table schema\n          Books *book = (Books *)[NSEntityDescription\n          insertNewObjectForEntityForName:@\"Books\" \n          inManagedObjectContext:managedObjectContext];\n\n          NSMutableArray *array = [[fetchedResultsController\n          fetchedObjects] mutableCopy];\n\n          // Assign our text fields to each of their attributes\n          [book setTitle:bookTitle.text];\n          [book setAuthor:bookAuthor.text];\n          [book setPublisher:bookPublisher.text];\n          [book setValue:[NSNumber numberWithInt:[array count] == 0 ? \n          0 : ([array count] + 1)] forKey:@\"displayOrder\"];\n\n          NSError *error;\n          if (![managedObjectContext save:&error]) {\n             // Record could not be saved error message\n             UIAlertView *alertView = [[UIAlertView alloc] \n             initWithTitle:@\"Book Details\"\n             message:@\"There was a problem saving the book details.\"\n             delegate:self\n             cancelButtonTitle:@\"OK\"\n             otherButtonTitles:nil];\n\n             [alertView show];\n          }\n          [self populateBookDetails];\n       }\n    }\n    ```", "```swift\n    - (void)tableView:(UITableView *)tableViewcommitEditingStyle:(UITa\n    bleViewCellEditingStyle)editingStyleforRowAtIndexPath:(NSIndexPa\n    th *)indexPath {\n       if (editingStyle == UITableViewCellEditingStyleDelete) {\n          // Turn on table view animations\n          [self.tableView beginUpdates];\n\n          // Get the item to delete from our row\n        Books *itemToDelete = [fetchedResultsController\n        objectAtIndexPath:indexPath];\n       // Delete the item in Core Data\n       [self.managedObjectContext deleteObject:itemToDelete];\n\n       // Commit the deletion\n          NSError *error;\n          if (![self.managedObjectContext save:&error]) {\n             NSLog(@\"There was a problem deleting the Book %@\",[error \n             domain]);\n          }\n          // Delete the (now empty) row on the table\n          [self.tableView deleteRowsAtIndexPaths:[NSArray\n          arrayWithObject:indexPath] \n          withRowAnimation:UITableViewRowAnimationFade];\n\n          [self populateBookDetails];\n\n          // Turn off table animations\n          [self.tableView endUpdates];\n        }\n        // Finally, reload data in view\n        [self.tableView reloadData];\n    }\n    ```", "```swift\n    #pragma mark method called when the user presses the Display Order button\n    - (IBAction)btnSortOrder:(id)sender {\n       if ([btnSortOrder.title isEqualToString:@\"Sort Order\"]){\n          self.tableView.editing = YES;\n          [btnSortOrder setTitle:@\"Done\"];\n       }\n       else if ([btnSortOrder.title isEqualToString:@\"Done\"]) {\n          [btnSortOrder setTitle:@\"Sort Order\"];\n          self.tableView.editing = NO;\n       }\n    }\n    ```", "```swift\n    #pragma mark method to allow for rows to be moved around.\n    - (BOOL)tableView:(UITableView *)sender canMoveRowAtIndexPath:(NSIndexPath *)indexPath {\n       return YES;\n    }\n    #pragma mark Change the order of the data.\n    - (void)tableView:(UITableView *)sender \n    moveRowAtIndexPath:(NSIndexPath *)sourcePath\n    toIndexPath:(NSIndexPath *)destinationPath\n    {\n       NSMutableArray *array = [[fetchedResultsController\n       fetchedObjects] mutableCopy];\n\n       id objectToMove = [array objectAtIndex:sourcePath.row];\n       [array removeObjectAtIndex:sourcePath.row];\n       [array insertObject:objectToMove atIndex:destinationPath.row];\n\n       for (int i=0; i<[array count]; i++) {\n          [(NSManagedObject *)[array objectAtIndex:i] \n          setValue:[NSNumber numberWithInt:i] \n          forKey:@\"displayOrder\"];\n       }\n       NSError *error;\n       BOOL success = [[self managedObjectContext] save:&error];\n       if (!success) {\n          // Handle error\n          NSLog(@\"There was a problem updating the display order \n               %@\",[error domain]);\n       }\n    }\n    ```", "```swift\n    //  BooksViewController.h\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import <UIKit/UIKit.h>\n    #import \"Books.h\"\n\n    @interface BooksViewController : UITableViewController\n    <UISearchBarDelegate>{\n    ...\n        ...\n    IBOutlet UISearchBar *filteredResults;\n    }\n        ...\n        ...\n    // Property getters and setters for our UI\n    @property (strong, nonatomic) IBOutlet UISearchBar       *filteredResults;\n    ```", "```swift\n    //\n    //  BooksViewController.m\n    //  BooksLibrary\n    //\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    //\n\n    #import \"BooksViewController.h\"\n\n    @implementation BooksViewController\n\n    @synthesize   fetchedResultsController;\n    @synthesize   managedObjectContext;\n    @synthesize   btnAdd;\n    @synthesize   btnSortOrder;\n    @synthesize   btnConnect;\n    @synthesize   btnTransfer;\n    @synthesize filteredResults;\n\n    #pragma mark method called by the UISearchBar Delegates\n    -(void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar {\n       // Only show the Search Bar's cancel button while in edit mode\n       filteredResults.showsCancelButton= YES;\n       filteredResults.autocorrectionType = \n       UITextAutocorrectionTypeNo;\n    }\n    #pragma mark Hides our Search Bar's cancel button when not in edit mode\n    -(void)searchBarTextDidEndEditing:(UISearchBar *)searchBar {\n       filteredResults.showsCancelButton = NO;\n    }\n    #pragma mark reload our contact details\n    -(void)searchBarCancelButtonClicked:(UISearchBar *)searchBar {\n        [self populateBookDetails];\n    }\n    #pragma mark use an NSPredicate combined with the fetchedResultsController to perform the search\n    -(void)searchBarSearchButtonClicked:(UISearchBar *)theSearchBar {\n       if (![destinationSearchBar.text isEqualToString:@\"\"]) {\n          NSPredicate *predicate =[NSPredicate\n          predicateWithFormat:@\"publisher contains[cd] %@\", \n          self.filteredResults.text];\n          [fetchedResultsController.fetchRequest\n          setPredicate:predicate];\n    }\n    else {\n          // We have hit the cancel button, reload our TableView\n          [filteredResults resignFirstResponder];\n          [self.tableView reloadData];\n          return;\n    }\n    NSError *error = nil;\n    if (![[self fetchedResultsController] performFetch:&error]) {\n        // Handle the error that was caught by the exception\n        NSLog(@\"Unresolved error %@, %@\", error, [error \n        userInfo]);\n        exit(-1);\n    } \n    // Return the number of rows to populate our Table View \n    // controller with.\n    fetchedObjects = fetchedResultsController.fetchedObjects;\n\n    // reload the TableView Controller and hide the keyboard.\n    [filteredResults resignFirstResponder];\n    [self.tableView  reloadData];\n\n    // Display the total number of matching records found.\n      NSString *searchResults = [[NSString alloc] \n      initWithFormat:@\"%d matching record(s) \n      found.\",[fetchedObjects count]];\n      UIAlertView *alertView = [[UIAlertView alloc]\n      initWithTitle:@\"Search Results\" \n      message:searchResults\n      delegate:self\n      cancelButtonTitle:@\"OK\" \n      otherButtonTitles:nil];\n\n      [alertView show];   \n    }\n    ```", "```swift\n       UIAlertView *alert = [[UIAlertView alloc] \n       initWithTitle:@\"Add Book Details\" message:@\"\\n\\n\\n\\n\" \n       delegate:self cancelButtonTitle:@\"Cancel\" \n       otherButtonTitles:@\"OK\", nil];\n       bookTitle = [[UITextField alloc] \n       initWithFrame:CGRectMake(12.0, 45.0, 260.0, 25.0)];\n       [bookTitle setPlaceholder:@\"Book Title:\"];\n       [bookTitle setBackgroundColor:[UIColor whiteColor]];\n     bookTitle.keyboardType = UIKeyboardTypeAlphabet;\n       [alertaddSubview:bookTitle];\n    ```", "```swift\n    //  BooksViewController.h\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  <UIKit/UIKit.h>\n    #import <GameKit/GameKit.h>\n    #import  \"Books.h\"\n\n    @interface BooksViewController : UITableViewController\n    <UISearchBarDelegate, GKSessionDelegate, GKPeerPickerControllerDelegate>{\n    ...\n        ...\n     GKSession              *currentSession;\n     GKPeerPickerController *peerPicker;\n     NSString               *itemSelected;\n    }\n        ...\n        ...\n    // Bluetooth session objects\n    @property (strong, nonatomic) GKSession *currentSession;\n\n    ```", "```swift\n    //\n    //  BooksViewController.m\n    //  BooksLibrary\n    //\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    //\n\n    #import \"BooksViewController.h\"\n\n    @implementation BooksViewController\n\n    @synthesize fetchedResultsController;\n    @synthesize managedObjectContext;\n    @synthesize btnAdd;\n    @synthesize btnSortOrder;\n    @synthesize btnConnect;\n    @synthesize btnTransfer;\n    @synthesize currentSession;\n    @synthesize filteredResults;\n\n    ```", "```swift\n    #pragma mark called when the user presses the Connect button\n    - (IBAction)btnConnect:(id)sender {\n       if ([btnConnect.title isEqualToString:@\"Connect\"]) {\n          [btnConnect setTitle:@\"Disconnect\"];\n          peerPicker = [[GKPeerPickerController alloc]init];\n          peerPicker.delegate = self;\n          peerPicker.connectionTypesMask = \n          GKPeerPickerConnectionTypeNearby;\n          [peerPicker show];\n          btnTransfer.enabled = YES;\n       }\n       else if ([btnConnect.title isEqualToString:@\"Disconnect\"]) {\n          [btnConnectsetTitle:@\"Connect\"];\n          [self.currentSession disconnectFromAllPeers];\n          currentSession = nil;\n          btnTransfer.enabled = NO;\n       }\n    }\n    ```", "```swift\n    #pragma mark called when the user presses the Transfer button\n    - (IBAction)btnTransfer:(id)sender {\n       // Converts an NSString object to NSData\n       NSData *data;\n       data = [itemSelected\n       dataUsingEncoding:NSASCIIStringEncoding];\n\n       [self.currentSession sendDataToAllPeers:data\n       withDataMode:(GKSendDataReliable) error:nil];\n    }\n    ```", "```swift\n    #pragma mark Handle Bluetooth capabilities using the GameKit framework.\n    -(void)peerPickerController:(GKPeerPickerController *)picker didConnectPeer:(NSString *)peerIDtoSession:(GKSession *)session{\n       self.currentSession = session;\n       session.delegate = self;\n       [sessionsetDataReceiveHandler:self withContext:nil];\n       picker.delegate = nil;\n       [picker dismiss];\n    }\n    #pragma mark Called when a connection has been made to Bluetooth,\n    #pragma mark details are added to the database on the receiving iOS device.\n    -(void)receiveData:(NSData *)data fromPeer:(NSString *)peer inSession:(GKSession *)session context:(void *)context {\n       // Convert our NSData type to NSString\n       NSString *strData;\n       strData = [[NSString alloc] initWithData:data\n       encoding:NSASCIIStringEncoding];\n\n       // Split out our data and place the contents into an array.\n       NSArray  *stringComponents = [strData\n       componentsSeparatedByString:@\"~\"];\n       NSMutableArray *myArray = [[NSMutableArray alloc] \n        initWithCapacity:1000];\n       [myArray addObjectsFromArray:stringComponents];\n\n       // Insert the passed record details into our database.\n       Books *bookDetails = (Books *)[NSEntityDescription\n       insertNewObjectForEntityForName:@\"Books\" \n       inManagedObjectContext:managedObjectContext];\n\n       [bookDetails setTitle:[myArray objectAtIndex:0]];\n       [bookDetails setPublisher:[myArray objectAtIndex:1]];\n       [bookDetails setAuthor:[myArray objectAtIndex:2]];\n       [bookDetails setDisplayOrder:[myArray objectAtIndex:3]];\n\n       NSError *error;\n       if (![managedObjectContext save:&error]) {\n           // Display error message stating that record not saved.\n           UIAlertView *alertView = [[UIAlertView alloc] \n           initWithTitle:@\"Book Library Details\" \n           message:@\"There was a problem saving the book details.\"\n           delegate:self\n           cancelButtonTitle:@\"OK\" \n           otherButtonTitles:nil];\n           [alertView show];   \n       }\n       // Reload our book details from our database\n       [self populateBookDetails];\n    }\n    #pragma mark called when user cancels the Bluetooth connection\n    -(void)peerPickerControllerDidCancel:(GKPeerPickerController *)picker {\n       [btnTransfer setTitle:@\"Transfer Book\"];\n       peerPicker = nil;\n       peerPicker.delegate = nil;\n       [peerPicker dismiss];\n    }\n    #pragma mark called when a change in state has been detected.\n    -(void)session:(GKSession *)session peer:(NSString *)peerIDdidChangeState:(GKPeerConnectionState)state {\n       NSString *GKPeerStateInfo;\n       switch (state) {\n          case GKPeerStateAvailable: \n               GKPeerStateInfo = @\"Wi-Fi is Available\";      \n               break;\n          case GKPeerStateUnavailable:  \n               GKPeerStateInfo = @\"Wi-Fi is not Available\";  \n               break;\n          case GKPeerStateConnecting:   \n               GKPeerStateInfo = @\"Establishing Connection\";\n            break;\n          case GKPeerStateConnected:    \n               GKPeerStateInfo = @\"Connection Successful\"; \n               break;\n          case GKPeerStateDisconnected: \n               GKPeerStateInfo = @\"Disconnected from Session\";\n                 currentSession = nil; \n               break;\n       }\n       // Display the current connection state.\n       NSLog(@\"Connection State: %@\", GKPeerStateInfo);\n    }\n    #pragma mark - Table view delegate\n    - (void)tableView:(UITableView *)tableViewdidSelectRowAtIndexPath:(NSIndexPath *)indexPath {\n       // Get the currently selected item from our resultset\n       Books *bookDetails = [fetchedResultsController\n       objectAtIndexPath:indexPath];\n      // Get the currently selected item within our tableView\n      itemSelected =[NSString stringWithFormat:@\"%@~%@~%@~%@\",\n                bookDetails.title,\n                bookDetails.publisher,\n                bookDetails.author,\n                bookDetails.displayOrder];\n    }\n    ```", "```swift\n    //  BooksViewController.h\n    //  BooksLibrary\n    //  Created by Steven F Daniel on 03/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  <UIKit/UIKit.h>\n    #import  <GameKit/GameKit.h>\n    #import <MessageUI/MessageUI.h>\n    #import  \"Books.h\"\n\n    @interface BooksViewController : UITableViewController<UISearchBarDelegate, GKSessionDelegate, GKPeerPickerControllerDelegate, MFMailComposeViewControllerDelegate>\n\n    // Create the class instance methods\n    -(void)sendEmail:(NSArray *)bookDetails;\n\n    ```", "```swift\n    #pragma mark sends an email for the chosen book details \n    - (void)sendEmail:(NSArray *)bookDetails {\n\n    MFMailComposeViewController *mailComposer = \n    [[MFMailComposeViewController alloc] init];\n    mailComposer.mailComposeDelegate = self;\n\n    // Check to make sure that we are set up to send mail\n    if ([MFMailComposeViewController canSendMail]) {\n        [mailComposer setToRecipients:[NSArray\n        arrayWithObjects:@\"youremail@yourdomain.com\",nil]];\n        [mailComposer setSubject:@\"Book Details\"];\n        // Book Details for the body of our email message\n        NSString *bookItem = [NSString\n        stringWithFormat:@\"Title:%@\\nPublisher:\n        %@\\nAuthor:%@\\nSort Order:%@\",\n                   [bookDetails objectAtIndex:0],\n                   [bookDetails objectAtIndex:1],\n                   [bookDetails objectAtIndex:2],\n                   [bookDetails objectAtIndex:3]];\n\n          [mailComposer setMessageBody:bookItem isHTML:NO];\n          [mailComposer.navigationBar setTintColor:[UIColor\n           blueColor]];\n           mailComposer.modalPresentationStyle = \n           UIModalPresentationFormSheet;\n           [self presentViewController:mailComposer animated:YES\n           completion:nil];\n       }\n       else {\n          // Error sending the email message, so notify the user.\n          UIAlertView *alertMessage = [[UIAlertView alloc] \n          initWithTitle:@\"Failure\"\n          message:@\"Your device hasn't been set up for email\"\n          delegate:nil\n          cancelButtonTitle:@\"OK\"\n          otherButtonTitles: nil];\n          [alertMessage show];\n       }\n    }\n    #pragma mark Dismiss our Mail Controller when the user finishes\n    - (void) mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error {\n       NSString *emailMsg = nil;\n\n        // Notifies users about errors associated with the interface\n       switch (result) {\n               case MFMailComposeResultCancelled: \n                    emailMsg = @\"Email cancelled\"; break;\n               case MFMailComposeResultSent:      \n                    emailMsg = @\"Email sent Successfully\"; break;\n               case MFMailComposeResultFailed:    \n                    emailMsg = @\"Email sending failure\";   break;\n               default:                           \n                    emailMsg = @\"Problem sending Email\"; break;\n       }\n       // Display the alert dialog based on the message\n       UIAlertView *alert = [[UIAlertView alloc]\n                      initWithTitle: @\"Book Details Email\"\n                      message: emailMsg\n                      delegate: nil\n                      cancelButtonTitle:@\"OK\"\n                      otherButtonTitles:nil];\n       [alert show];\n\n       // make the MFMailComposeViewController disappear\n       [self dismissViewControllerAnimated:YES completion:nil];\n    }\n    ```", "```swift\n    -(void)receiveData:(NSData *)data fromPeer:(NSString *)peer inSession:(GKSession *)session context:(void *)context\n    {\n       // Convert our NSData type to NSString\n       ...\n       ...\n\n       NSError *error;\n       if (![managedObjectContext save:&error]) {\n          ...\n       }\n       else {\n          // Send an email for the received book details\n     [self sendEmail:myArray];\n       }\n       ...\n    }\n    ```"]