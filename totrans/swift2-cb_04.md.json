["```swift\n    private var myLogInstance:Log = Log()\n    class Log {\n        private var handle:NSFileHandle\n\n        class func getInstance() -> Log{\n                return myLogInstance\n        }\n\n        private init(){\n            var path:String = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as String\n            let fullpath = path.stringByAppendingPathComponent(\"application.log\")\n            NSFileManager.defaultManager().createFileAtPath(fullpath, contents: nil, attributes: nil)\n            self.handle=NSFileHandle(forWritingAtPath:fullpath)!\n        }\n\n        private func getCurrentTime() -> String{\n            let date = NSDate()\n            let calendar = NSCalendar.currentCalendar()\n            let components = calendar.components(.CalendarUnitHour | .CalendarUnitMinute | .CalendarUnitSecond, fromDate: date)\n            let hour:Int = components.hour\n            let minutes = components.minute\n            let seconds = components.second\n            return String(format: \"%02d:%02d:%02d\",hour, minutes, seconds)\n        }\n\n        func info(message:String){\n          let finalMessage = \"INFO: \\(self.getCurrentTime()):\\(message)\\n\"\n          handle.writeData(finalMessage.dataUsingEncoding (NSUTF8StringEncoding, allowLossyConversion: false)!)\n            handle.synchronizeFile()\n        }\n\n        func error(message:String){\n            let finalMessage = \"ERROR:\\(self.getCurrentTime()):\\(message)\\n\"\n            handle.writeData(message.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!)\n        }\n\n        deinit{\n            handle.closeFile()\n        }\n    }\n    ```", "```swift\n    var chosenOperator:Character = \"+\"\n             @IBOutlet var firstNumber: UITextField!\n    @IBOutlet var labelResult: UILabel!\n    @IBOutlet var secondNumber: UITextField!\n    ```", "```swift\n    @IBAction func operatorChanged(sender: UISegmentedControl) {\n            switch sender.selectedSegmentIndex {\n            case 0:\n                chosenOperator = \"+\"\n            case 1:\n                chosenOperator = \"-\"\n            case 2:\n                chosenOperator = \"*\"\n            case 3:\n                chosenOperator = \"/\"\n            default:\n                Log.getInstance().error(\"Invalid value \\(sender.selectedSegmentIndex)\")\n                return\n            }\n            Log.getInstance().info(\"User has chosen the following operator: \\(chosenOperator)\")\n        }\n\n        @IBAction func displayResult(sender: UIButton)\n        {\n            var number1:Double?\n            var number2:Double?\n            number1=(firstNumber.text as NSString).doubleValue\n            number2=(secondNumber.text as NSString).doubleValue\n\n            switch chosenOperator{\n            case \"+\":\n                labelResult.text = \"\\(number1! + number2!)\"\n                Log.getInstance().info(\"\\(number1!) + \\(number2!) = \\(number1! + number2!)\")\n            case \"-\":\n                labelResult.text = \"\\(number1! - number2!)\"\n                Log.getInstance().info(\"\\(number1!) - \\(number2!) = \\(number1! + number2!)\")\n            case \"*\":\n                labelResult.text = \"\\(number1! * number2!)\"\n                Log.getInstance().info(\"\\(number1!) * \\(number2!) = \\(number1! + number2!)\")\n            case \"/\":\n                if number2! == 0.0 {\n                    Log.getInstance().error(\"Trying to divide by zero\")\n                    let alert = UIAlertController(title: \"Error\", message: \"Cant divide by zero\", preferredStyle:.Alert)\n                    self.presentViewController(alert, animated: true, completion: nil)\n                }else {\n                    labelResult.text = \"\\(number1!)/\\(number2!)\"\n                    Log.getInstance().info(\"\\(number1!) / \\(number2!) = \\(number1! + number2!)\")\n                }\n            default:\n                break;\n            }   \n        }\n    ```", "```swift\n    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        print(NSHomeDirectory())\n        Log.getInstance().info(\"Application has started\")\n        return true\n    }\n    func applicationDidEnterBackground(application: UIApplication) {\n        Log.getInstance().info(\"Application has gone to background\")\n    }\n    func applicationDidBecomeActive(application: UIApplication) {\n        Log.getInstance().info(\"Application has become active\")\n    }\n    ```", "```swift\nif myLogInstance == nil { myLogInstance = Log() } return myLogInstance\n```", "```swift\n    import Foundation\n    import UIKit\n\n    enum NoteStep {\n        case NOTE_C,\n        NOTE_D,\n        NOTE_E\n    }\n    protocol NoteProtocol {\n        var sound:String?{\n            get set\n        }\n        var image:UIImage?{\n            get set\n        }\n        var step: NoteStep {\n            get set\n        }\n        var location:CGPoint {\n            get set\n        }\n        func play()\n    }\n    ```", "```swift\n    import Foundation\n    import UIKit\n    import AVFoundation\n\n    class MusicalNote: NoteProtocol{\n        lazy private var _player = AVAudioPlayer()\n        private var _sound:String?\n        var sound:String? {\n            get { return _sound }\n            set(newSound){ self._sound = newSound }\n        }\n\n        private var _image:UIImage?\n        var image:UIImage?{\n            get{ return _image}\n            set(newImage){ self._image = newImage }\n        }\n\n        private var _step:NoteStep\n        var step: NoteStep {\n            get{ return _step }\n            set(newStep){ self._step = newStep }\n        }\n\n        private var _location:CGPoint\n        var location:CGPoint {\n            get { return _location }\n            set(newLocation){ self._location = newLocation }\n        }\n\n        func play(){\n            if let mySound = _sound {\n                var urlSound = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(mySound, ofType: \"mp3\")!)\n                self._player = AVAudioPlayer(contentsOfURL: urlSound, error: nil)\n                self._player.prepareToPlay()\n                self._player.play()\n            }\n        }\n\n        init(_ step:NoteStep = .NOTE_C){\n            self._location = CGPointZero\n            self._step = step\n        }\n    }\n    ```", "```swift\n    protocol AbstractNoteFactory {\n        func createNote(noteStep:NoteStep, order:Int) -> NoteProtocol\n    }\n    ```", "```swift\n    import UIKit\n    class SilenceFactory: AbstractNoteFactory {\n        func createNote(noteStep:NoteStep, order:Int) -> \n          NoteProtocol{\n            var note = MusicalNote(noteStep)\n            note.image = UIImage(named: \"quarter_rest.png\")\n            note.sound = nil\n            note.step = noteStep\n            var x = CGFloat(120) + CGFloat(40 * order)\n            note.location = CGPointMake(x, 25)\n            return note\n        }\n    }\n    ```", "```swift\n    class PianoNoteFactory: AbstractNoteFactory {\n        func createNote(noteStep:NoteStep, order:Int) -> NoteProtocol{\n            var note = MusicalNote(noteStep)\n            note.step = noteStep\n            var x:CGFloat = CGFloat(120.0) + CGFloat(40.0) * CGFloat(order)\n\n            switch noteStep {\n            case .NOTE_C:\n                note.image = UIImage(named: \"cnote.png\")\n                note.location = CGPointMake( CGFloat(x), 57)\n                note.sound = \"piano_c\"\n            case .NOTE_D:\n                note.image = UIImage(named: \"dnote.png\")\n                note.location = CGPointMake( CGFloat(x), 44)\n                note.sound = \"piano_d\"\n            case .NOTE_E:\n                note.image = UIImage(named: \"dnote.png\")\n                note.location = CGPointMake( CGFloat(x), 36)\n                note.sound = \"piano_e\"\n            }\n            return note\n        }\n    }\n    ```", "```swift\n    class DrumNoteFactory: AbstractNoteFactory {\n        func createNote(noteStep:NoteStep, order:Int) -> NoteProtocol{\n            var note = MusicalNote(noteStep)\n            note.step = noteStep\n            var x:CGFloat = CGFloat(120.0) + CGFloat(40.0) * CGFloat(order)\n\n            switch noteStep {\n            case .NOTE_C:\n                note.image = UIImage(named: \"cdrum.png\")\n                note.location = CGPointMake( CGFloat(x), 57)\n                note.sound = \"bighit\"\n            case .NOTE_D:\n                note.image = UIImage(named: \"ddrum.png\")\n                note.location = CGPointMake( CGFloat(x), 46)\n                note.sound = \"cymbal\"\n            case .NOTE_E:\n                note.image = UIImage(named: \"ddrum.png\")\n                note.location = CGPointMake( CGFloat(x), 38)\n                note.sound = \"hithat\"\n            }\n            return note\n        }\n    }\n    ```", "```swift\n        @IBOutlet var segmentedControl: UISegmentedControl!\n        @IBOutlet var playButton: UIButton!\n        @IBOutlet var staff: UIImageView!\n        var notes = [NoteProtocol]()\n        var factory:AbstractNoteFactory = SilenceFactory()\n        var timer:NSTimer?\n        var pos = 0\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            let recognizer = UITapGestureRecognizer(target: self, action:Selector(\"handleTap:\"))\n            self.view.addGestureRecognizer(recognizer)\n        }\n    ```", "```swift\n        func handleTap(recognizer:UITapGestureRecognizer) {\n            let point = recognizer.locationInView(staff)\n            var noteStep:NoteStep = .NOTE_C\n            switch point.y {\n            case 105...125:\n                noteStep = .NOTE_C\n            case 95...105:\n                noteStep = .NOTE_D\n            case 80...95:\n                noteStep = .NOTE_E\n            default:\n                return\n            }\n            var note = factory.createNote(noteStep, order: notes.count)\n            notes.append(note)\n            var imageView = UIImageView(frame: CGRect(origin: note.location, size: note.image!.size))\n            imageView.image = note.image\n            staff.addSubview(imageView)\n            if notes.count == 10 {\n                self.segmentedControl.hidden = true\n                self.playButton.hidden = false\n            }\n        }\n    ```", "```swift\n        @IBAction func changeFactory(sender: UISegmentedControl) {\n            switch sender.selectedSegmentIndex {\n            case 0:\n                factory = SilenceFactory()\n            case 1:\n                factory = PianoNoteFactory()\n            case 2:\n                factory = DrumNoteFactory()\n            default:\n                break;\n            }\n        }\n    ```", "```swift\n        @IBAction func playMusic(sender: UIButton) {\n            playButton.enabled = false\n            timer = NSTimer.scheduledTimerWithTimeInterval(0.5, target: self, selector: Selector(\"playNote\"), userInfo: nil, repeats: true)\n            timer?.fire()\n        }\n        func playNote(){\n            notes[pos].play()\n            pos++\n            if pos >= notes.count {\n                timer?.invalidate()\n                pos = 0\n                playButton.enabled = true\n            }\n        }\n    ```", "```swift\n    class DoorLock {\n        enum Status {\n            case OPENED, CLOSED\n        }\n        private var _status = Status.OPENED\n        var status:Status {\n            return _status\n        }\n        func open(){\n            _status = .OPENED\n        }\n        func close(){\n            _status = .CLOSED\n        }\n    }\n    ```", "```swift\n    class ClothesLine {\n        enum Status {\n            case COLLECTED,\n                LINED\n        }\n        private var _status = Status.LINED\n        var status:Status {\n            return _status\n        }\n        func collect(){\n            _status = .COLLECTED\n        }\n        func line(){\n            _status = .LINED\n        }\n    }\n    ```", "```swift\n    class Window {\n        enum Status {\n            case OPENED, CLOSED(times:Int)\n        }\n        private var _status = Status.OPENED\n        var status:Status {\n            return _status\n        }\n        func open(){\n            switch _status{\n            case .CLOSED(var times):\n                times = times - 1\n                if times == 0{\n                    _status = .OPENED\n                }else{\n                    _status = .CLOSED(times:times)\n                }\n            default:\n                _status = .OPENED\n            }\n        }\n        func close(){\n            switch _status{\n            case .CLOSED(var times):\n                times = times + 1\n                _status = .CLOSED(times:times)\n            default:\n                _status = .CLOSED(times:1)\n            }\n        }\n    }\n    ```", "```swift\n    class Radar{\n        class RadarObserver{\n            var onSomeoneAproaches: ()->Void\n            var onSomeoneHasGoneAway: () -> Void\n\n            init(){\n                self.onSomeoneAproaches = { () -> Void in\n                }\n                self.onSomeoneHasGoneAway = {() -> Void in\n                }\n            }\n        }\n    var observers = [RadarObserver]()\n        func addObserver(observer: RadarObserver){\n            observers.append(observer)\n        }\n    ```", "```swift\n        func detectedSomeone(){\n            for observer in observers {\n                observer.onSomeoneAproaches()\n            }\n        }\n        func someoneHasGoneAway(){\n            for observer in observers {\n                observer.onSomeoneHasGoneAway()\n            }\n        }\n    }\n    ```", "```swift\n    class Barometer{\n        class BarometerObserver{\n            var onItsGoingToRain:() -> Void\n            var onRainHasFinished:() -> Void\n\n            init() {\n                self.onItsGoingToRain = { () -> Void in\n                }\n                self.onRainHasFinished = { () -> Void in\n                }\n            }\n        }\n        private var observers = [BarometerObserver]()\n        func addObserver(observer: BarometerObserver){\n            observers.append(observer)\n        }\n        func removeObserver(observer:BarometerObserver){\n            var index: Int?\n            for (i,object) in observers.enumerate(){\n                if object === observer{\n                    index = i\n                    break\n                }\n            }\n            if let indexFound = index{\n                observers.removeAtIndex(indexFound)\n            }\n        }\n        func detectedRain(){\n            for observer in observers {\n                observer.onItsGoingToRain()\n            }\n        }\n\n        func detectedNoRain(){\n            for observer in observers {\n                observer.onRainHasFinished()\n            }\n        }\n    }\n    ```", "```swift\n        @IBOutlet var labelWindow1: UILabel!\n        @IBOutlet var labelWindow2: UILabel!\n        @IBOutlet var labelDoorLock: UILabel!\n        @IBOutlet var labelClothesLine: UILabel!\n        @IBOutlet var labelLastAction: UILabel!\n        @IBOutlet var buttonStart: UIButton!\n    ```", "```swift\n        var radar = Radar()\n        var barometer = Barometer()\n        var window1 = Window()\n        var window2 = Window()\n        var doorLock = DoorLock()\n        var clothesLine = ClothesLine()\n        var actions=[String]()\n        var timer:NSTimer?\n    ```", "```swift\n        private func updateLabels(){\n            switch self.window1.status {\n            case .CLOSED:\n                self.labelWindow1.text = \"Window 1 Status: CLOSED\"\n            default:\n                self.labelWindow1.text = \"Window 1 Status: OPENED\"\n            }\n\n            switch self.window2.status {\n            case .CLOSED:\n                self.labelWindow2.text = \"Window 2 Status: CLOSED\"\n            default:\n                self.labelWindow2.text = \"Window 2 Status: OPENED\"\n            }\n\n            switch self.doorLock.status {\n            case .CLOSED:\n                self.labelDoorLock.text = \"Door Lock Status: CLOSED\"\n            default:\n                self.labelDoorLock.text = \"Door Lock Status: OPENED\"\n            }\n\n            switch self.clothesLine.status {\n            case .COLLECTED:\n                self.labelClothesLine.text = \"Clothes Status: LINED\"\n            default:\n                self.labelClothesLine.text = \"Clothes Status: COLLECTED\"\n            }\n        }\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            var radarObserver = Radar.RadarObserver()\n            radarObserver.onSomeoneAproaches = { () -> Void in\n                self.window1.close()\n                self.updateLabels()\n            }\n\n            radarObserver.onSomeoneHasGoneAway = {\n                () -> Void in\n                self.window1.open()\n                self.updateLabels()\n            }\n            radar.addObserver(radarObserver)\n\n            radarObserver = Radar.RadarObserver()\n            radarObserver.onSomeoneAproaches = { () -> Void in\n                self.window2.close()\n                self.updateLabels()\n            }\n            radarObserver.onSomeoneHasGoneAway = {\n                () -> Void in\n                self.window2.open()\n                self.updateLabels()\n            }\n            radar.addObserver(radarObserver)\n    }\n    …\n    ```", "```swift\n        func tick(){\n            var action = actions.first\n            actions.removeAtIndex(0)\n            if actions.count == 0 {\n                buttonStart.enabled = true\n                timer?.invalidate()\n            }\n\n            if action == \"someoneapproches\"{\n                radar.detectedSomeone()\n            }else if action == \"someoneleaves\"{\n                radar.someoneHasGoneAway()\n            }else if action == \"startrainning\" {\n                barometer.detectedRain()\n            }else if action == \"rainfinishes\" {\n                barometer.detectedNoRain()\n            }\n\n            labelLastAction.text = action\n        }\n\n        @IBAction func start(sender: AnyObject) {\n            buttonStart.enabled = false\n            actions = [\"someoneapproches\",\"someoneleaves\", \"someoneapproches\",\"someoneapproches\", \"startrainning\",\"someoneleaves\",\"someoneleaves\", \"rainfinishes\"]\n            timer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: Selector(\"tick\"), userInfo: nil, repeats: true)\n            timer!.fire()\n        }\n    ```", "```swift\n    class BasePizza {\n        private var _price:Double\n        var price:Double {\n            get {\n                return _price\n            }\n        }\n        var name:String\n\n        init(name:String, price:Double){\n            self.name = name\n            self._price = price\n        }\n    }\n    ```", "```swift\n    class SimplePizza : BasePizza{\n        init() {\n            super.init(name: \"SimplePizza\", price: 4.50)\n        }\n    }\n\n    class Peperoni: BasePizza{\n        init() {\n            super.init(name: \"Peperoni\", price: 7.50)\n        }\n    }\n\n    class ChickenFiesta:BasePizza {\n        init() {\n            super.init(name: \"ChickenFiesta\", price: 7.50)\n        }\n    }\n    ```", "```swift\n    class BasePizzaDecorator:BasePizza {\n        var decoratedPizza:BasePizza?\n        init(name:String, price:Double, decoratedPizza:BasePizza){\n            self.decoratedPizza = decoratedPizza\n            super.init(name: name, price: price)\n        }\n\n        override var price:Double {\n            get {\n                return super.price + decoratedPizza!.price\n            }\n        }\n    }\n    ```", "```swift\n    class Jalapeño:BasePizzaDecorator {\n        init(decoratedPizza:BasePizza){\n            super.init(name: \"Jalapeño\", price: 1.20, decoratedPizza: decoratedPizza)\n        }\n    }\n\n    class Cheese:BasePizzaDecorator {\n        init(decoratedPizza:BasePizza){\n            super.init(name: \"Cheese\", price: 1.30, decoratedPizza: decoratedPizza)\n        }\n    }\n\n    class Mushroom:BasePizzaDecorator {\n        init(decoratedPizza:BasePizza){\n            super.init(name: \"Mushroom\", price: 1.10, decoratedPizza: decoratedPizza)\n        }\n    }\n    class Olive:BasePizzaDecorator {\n        init(decoratedPizza:BasePizza){\n            super.init(name: \"Olive\", price: 1.10, decoratedPizza: decoratedPizza)\n        }\n    }\n    ```", "```swift\n        var myDeliciousPizza: BasePizza?\n        @IBOutlet var totalLabel: UILabel!\n        @IBOutlet var ingredientsList: UITextView!\n    ```", "```swift\n        override func viewDidAppear(animated: Bool) {\n            var choosePizzaType = UIAlertController(title: \"Pizza\", message: \"Choose your pizza\", preferredStyle: .ActionSheet)\n            choosePizzaType.addAction(UIAlertAction(title: \"Simple\", style: .Default, handler: { (action) in\n                self.myDeliciousPizza = SimplePizza()\n                self.refreshPrice()\n            }))\n\n            choosePizzaType.addAction(UIAlertAction(title: \"Peperoni\", style: .Default, handler: { (action) in\n                self.myDeliciousPizza = Peperoni()\n                self.refreshPrice()\n            }))\n\n            choosePizzaType.addAction(UIAlertAction(title: \"Chicken Fiesta \\u{1F389}\", style: .Default, handler: { (action) in\n                self.myDeliciousPizza = ChickenFiesta()\n                self.refreshPrice()\n            }))\n\n            self.presentViewController(choosePizzaType, animated: true){   }\n        }\n    ```", "```swift\n        func refreshPrice(){\n            self.totalLabel.text = \"Total: \\(myDeliciousPizza!.price)\"\n        }\n    ```", "```swift\n        @IBAction func addJalapeño(sender: UIButton) {\n            myDeliciousPizza = Jalapeño(decoratedPizza: myDeliciousPizza!)\n            self.ingredientsList.text = self.ingredientsList.text + \"Jalapeño\\n\"\n            self.refreshPrice()\n        }\n\n        @IBAction func addCheese(sender: UIButton) {\n            myDeliciousPizza = Cheese(decoratedPizza: myDeliciousPizza!)\n            self.ingredientsList.text = self.ingredientsList.text + \"Cheese\\n\"\n            self.refreshPrice()\n        }\n\n        @IBAction func addOlives(sender: UIButton) {\n            myDeliciousPizza = Olive(decoratedPizza: myDeliciousPizza!)\n            self.ingredientsList.text = self.ingredientsList.text + \"Olive\\n\"\n            self.refreshPrice()\n        }\n\n        @IBAction func addMushrooms(sender: UIButton) {\n            myDeliciousPizza = Mushroom(decoratedPizza: myDeliciousPizza!)\n            self.ingredientsList.text = self.ingredientsList.text + \"Mushrooms\\n\"\n            self.refreshPrice()\n        }\n    ```", "```swift\n    protocol Flyable {\n           var topSpeed: Int { get }\n       }\n\n       protocol Transportable {\n           var seatCount: Int { get }\n       }\n\n       struct Plane: Flyable, Transportable {\n           var topSpeed = 650\n           var seatCount = 220\n       }\n    ```", "```swift\n    extension Flyable {\n        func isFasterThan(item: Flyable) -> Bool {\n            return self.topSpeed > item.topSpeed\n        }\n    }\n\n    let commercialPlane = Plane()\n    let jetPlane = Plane(topSpeed: 850, seatCount: 20)\n\n    commercialPlane.isFasterThan(jetPlane)\n    ```", "```swift\n    extension Flyable where Self: Transportable {\n        func containsMorePassengers(item: Self) -> Bool {\n            return self.seatCount > item.seatCount\n        }\n    }\n\n    commercialPlane.containsMorePassengers(jetPlane)\n    ```", "```swift\n    extension CollectionType where Self.Generator.Element: Flyable {\n        func averageTopSpeed() -> Int {\n            var total = 0, count = 0\n            for item in self {\n                total += item.topSpeed\n                count++\n            }\n            return (total/count)\n        }\n    }\n\n    let planes = [commercialPlane, jetPlane, Plane()]\n    planes.averageTopSpeed()\n    ```"]