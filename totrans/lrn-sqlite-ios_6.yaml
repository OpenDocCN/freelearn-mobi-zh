- en: Chapter 6. Using Swift with iOS and SQLite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will look at using the new programming language from Apple
    called **Swift**. It is a new language created by Apple and has very powerful
    features to perform a variety of tasks and is now open source. Apple released
    it, and it has grown so fast that in the months and years to come, it will be
    the de facto standard for coding using Apple devices. You will see how Swift works
    with iOS, Xcode, and SQLite.
  prefs: []
  type: TYPE_NORMAL
- en: It has been an extraordinary journey since Swift was announced at the WWDC 2014
    in San Francisco. In 2015, Apple announced that Swift would be open source. The
    language itself allows you to write high-level code and even low-level code with
    ease. It is a culmination of languages, such as Python, C, and Objective-C, making
    it faster and easier, and it's available on a number of platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Can you imagine what is going to happen in the next few years? Design patterns
    and skills are developing at a fast rate, and applications will be rewritten and
    deployed using the new language.
  prefs: []
  type: TYPE_NORMAL
- en: We will show you how to install Xcode to work with Swift and any SQLite libraries.
    There will be a few examples of how to get the new language to work with SQLite
    and Xcode. The examples and information given in this chapter will allow you,
    as a beginner, to get to grips with learning this new language and gaining new
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: Basic requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All f#Apple development is completed on a Mac. You will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A MAC computer with the Maverick or Yosemite operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Xcode application development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good understanding of object-oriented programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basic understanding of the Swift language, from the Swift reference guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For reference information, you can check out the *Apple Developer Guide* at
    [https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides).
  prefs: []
  type: TYPE_NORMAL
- en: A positive attitude to learning and developing your skills is very important.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an Xcode Project with Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode has been impacted with release fixes and enhances to the Swift language.
    So, sometimes, code that used to work easily now requires some coding changes
    before the compiler is happy with it. This is something that will always happen
    with a changing code base for a new language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening Xcode. The best version of Xcode is the latest one, available
    from the Apple App Store at [https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/).
    Install Xcode, and when everything is set up, launch Xcode and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project (*Cmd*+*Shift*+*N*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the template selector, make sure **iOS** | **Application** is selected. Choose
    the **Single View Application** template to start the process:![Starting an Xcode
    Project with Swift](img/4725_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are then prompted to add the project name, so add a name like `Test Swift
    Project`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add in the company name as `Voxstar Ltd` or your company's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add in the organizer identifier, in our case `com.voxstar.testswiftproject`,
    which will identify a name for your apps and that is how it will be recognized
    by Apple.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, for the computer language, select Swift instead of Objective-C, which
    is what we are using in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the devices, select **iPhone**, also ensure that the **Use Core Data** option
    is not selected. See the following screenshot as an example:![Starting an Xcode
    Project with Swift](img/4725_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to continue this process. Thereafter, you have
    to store the location of your project files; we suggest you use the location where
    the main `.swift` directory is stored, as shown in the following screenshot. For
    this example, use the `Documents` directory, select and click on **Next**, and
    a new directory called `Test Swift App` will be created. The following screenshots
    show the directory and project information within:![Starting an Xcode Project
    with Swift](img/4725_06_03.jpg)![Starting an Xcode Project with Swift](img/4725_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **Create** button is clicked on, the project details page is displayed,
    as shown in the following screenshot. A set of standard files, templates, and
    components are used as part of Xcode:![Starting an Xcode Project with Swift](img/4725_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To show what the standard app using an iPhone would look like, click on the
    Play button and watch the default screen and the output from the iPhone 6 simulator:![Starting
    an Xcode Project with Swift](img/4725_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, the first main entry place for the Swift application is the `AppDelegate.swift`
    file. This file is located in the application directory. Under the application
    directory, there will be a directory with the name of the app, and this is where
    the `AppDelegate.swift` file is located. In Xcode, click on it to open and you
    will find an array of information. This information will start with the standard
    comments that use your name and company details as part of the setup.
  prefs: []
  type: TYPE_NORMAL
- en: The main piece of information thereafter is the `import UIKit` statement. If
    you have developed in Objective-C before, this statement will be obvious and very
    familiar and reconcilable.
  prefs: []
  type: TYPE_NORMAL
- en: The UIKit will provide the essential infrastructure and backbone to manage and
    build these iOS Swift applications. It will contain the necessary user interface
    and other architecture to even handle and interact with the rest of the app. It
    provides support for motion-based events and handling touch events as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will also support a model for iCloud support in addition to handling web
    and text content. It will support Apple and a push notification service. Further
    information can be obtained from the Developer Apple site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting an Xcode Project with Swift](img/4725_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike Objective-C or other standard programming languages, Swift does not have
    a `main` function or file. Instead, you just mention the `@UIApplicationMain`
    statement in the main Swift file and all the relevant components are included.
    This line of code may never need to change, unless there is a major update or
    change.
  prefs: []
  type: TYPE_NORMAL
- en: Using the SQLite 3 Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before starting to code, you must add a specific library for SQLite. Within
    Xcode, ensure that the **General** tab is selected and visible. At the end of
    the page, look out for the **Linked Frameworks and Libraries** section. View and
    click on the icon with the plus sign, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A modal window will appear; please enter the word `sqlite`, and from the list
    of information, select the **libsqlite3.dylib** option, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting it, click on the **Add** button to move forward.
  prefs: []
  type: TYPE_NORMAL
- en: As part of this chapter, we will use **FMDB** and an Objective-C wrapper around
    SQLite to show the database SQLite with Swift. **FMDB** stands for **Flying Meat
    Database**, and it easily interacts with SQLite and actually saves time and effort.
    For example, the FMDB will be linked to one SQLite database and will be there
    for the execution of SQL queries. The output is `FMResultsSet`, which shows results
    for queries executed on the FMDB.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class of `FMDatabaseQueue` is there to handle updates, queries, and multiple
    threading.
  prefs: []
  type: TYPE_NORMAL
- en: The FMDB approach with an application that performs the SQL commands of `Insert`,
    `Select`, `Delete`, and `Update` will be used on a table called `Mortgage`. The
    `Mortgage` table will have a **Name** field and a **Mortgage Roll Number** field
    for the account details, as a very simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the actual user design using the View controller
    scene tool within Xcode to create the basic screen layout. This will outline and
    show the resulting action to be followed and executed when a button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many tools to manage the SQLite database, and one of these is the
    **SQLite Manager Add-on** in the Firefox browser, to administer the database.
    The add-on can be obtained from [https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The add-on product has some of the following features for administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: Manage the SQLite database on your machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a tree view of database objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are easy and helpful dialogs that are easy to manage as well, for example,
    triggers, views, and tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A platform to execute SQL queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export tables or views in UTF-8/UTF-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to execute multiple SQL statements in the **Execute** tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open Firefox and install the extensions from the aforementioned link. The following
    screenshot shows how the extension is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **Install Now** button, the add-on is installed. Then
    go to **Tools** | **Menu Option** and you will find **SQLite Manager**. Once you
    click on that option, the following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to add data to the system, the database must be created.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the **Install Now** button, the add-on is installed. Once
    you go to **Tools** | **Menu Option**, you will see the **SQLite Manager** option.
    When you click on that option, the following screen is seen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the new database and ensure that a table is created for this small test
    application with SQLite. In this scenario, we have a database called `Mortgagedata.sqlite`,
    and a table called `Mortgage_data` with two fields: `mortgage_rollno` and `mortgage_name`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the screens to call up **SQL Manager** in Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **SQL Manager** option to create a database, a pop up
    will be displayed where the user enters the database name, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, after the database is created, the user has to select a disk directory
    to store the database in, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to create a table, as shown in the preceding screenshot, with
    two rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the SQLite 3 Library](img/4725_06_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot now shows what the table structure looks like before
    further work is carried out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, a class, that is a subclass of `NSObject`, has to be created. Call this
    class `Mortgage_data` and set up its properties as per the requirements of this
    test scenario. These properties will form part of the database schema and foundations
    for your small database and table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using FMDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FMDB is a SQLite library written on top of SQLite to handle database operations
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Since FMDB is built in Objective-C, a bridging header is required to link it
    up with the simple app. A `.h` file has to be included, which is `FMDatabase.h`.
  prefs: []
  type: TYPE_NORMAL
- en: This is required to ensure that the linking works for the Objective-C and Swift
    technology produce the results we want. Next, we need to create a database in
    SQLite Manager and copy it to the right place.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, we show the function to copy a database. In this instance,
    we need to create and use a function called `copyFile`, which will copy the files
    to the application's document directory. Methods such as `applicationDidFinishLaunch`
    work with `AppDelegate` by passing the database name in, as part of the requirements
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When using the FMDB way of interacting with SQLite, a class called `ModelManager`
    is created as part of `NSObject{}`, so that a variety of functions can reside,
    or be inserted, within it. This is mandatory and is shown in the next code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, you will see that after the database object has been
    copied, it needs to be initialized, a Swift file has to be named and added to
    the `ModelManager`, and a shared instance of the type of `ModelManager` has to
    be defined out of the `class` block, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, set up the database object for the FMDB, namely, the `FMDatabase` object,
    and together with the database object, set up and reset it as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part of the process is to interrogate the database with the following
    command, the `insert` command, as an example wrapped in the assigned value `Mortage_Inserted`.
    The other class, like `ModelManager`, will have the `Mobile_data` method added
    to it. The `ModelManager` method is then trying to open the `Mortgage` database
    by using the method for opening, namely, the `FMDatabase` class. Then the `executeUpdate`
    method is allocated and used as part of the `FMDatabase` class to push and pass
    down the SQL query and the input parameters. To finish this off, part of the operation,
    the `close` method, is used. See the following code on how the database is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Insert Button` has an action method; call this method to send through
    the `Mortage_data` class, which holds the `mortgage_rollno` and `mortgage_name`
    field names, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'FMDB is well documented and popular on the Internet. Next, the actual SQL query
    is passed through the `executeUpdate` method, which is part of the `FMDatabase`
    class and is linked up as parameters, as part of an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows how the `@IBAction` function is called using the `btnUpdateClicked`
    function with the relevant fields and text information, to perform the update
    based on the click of the button called `btnUpdateClicked`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform the `delete` operation, use the `DeleteMortgateData` method. First,
    the `ModelManager` class is used to open the database, using the `FMDatabase`
    class as utilized previously. Thereafter, again use the `executeUpdate` method,
    and using an argument, pass the SQL `delete` query and close the database by invoking
    the `close` method, as defined in the `FMDatabase` class. Details of this operation
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As previously used, the same `ModelManager` method is used for SQL operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next operation is the `SelectMortgageData` operation, which will be added
    to the `ModelManager` method. This will open the database by using the `open`
    method within the `FMDatabase` class. This is then followed by the `executeQuery`
    method, using the `FMDatabase` class, which accepts the input SQL query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following method is called from the previous action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The SQLite scheme using Firefox can be viewed as shown in the following screenshot.
    Go to Firefox, and under the **Tools** menu, invoke **SQLite Manager**. Click
    on the **Mortgage Manager** table and you can see the structure of the table,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FMDB](img/4725_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An alternate method for using FMDB this way is to use it directly in the Swift
    programming language, as shown in the following code. When setting up Xcode with
    Swift, you will be prompted for the bridging component for linking them up, but
    it can be done as described here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is added in the place where the `IBAction` is set up. The method will
    require the use of the `SaveMortgageData` action method, which will open the database,
    take text/information from the data fields, build an SQL database, and execute
    the statement. Once the operation is complete, the database will be closed. Then
    the text fields will be initialized, ready for the next input. Therefore, the
    `IBAction` method using the default template will have to be modified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After using this creation process and method for an application that is created
    with Swift and SQLite, you can see how the basic components and the `SQLite 3`
    library have been successfully added to the new project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you had a quick look at how Xcode works with Swift. This chapter
    showed you some examples and ideas, and exposed the app development environment
    Xcode to you. We used the FMDB classes and methods to access the database and
    perform a variety of commands. There are some basic, but intuitive examples of
    how Swift works with iOS. Apple wrote this language to become the next leap in
    development for all developers in the next 20 years. It has also become open source
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will find out how Xcode can be used with PhoneGap and
    HTML5, and the use of SQL statements, embedded in HTML5, compiled with PhoneGap,
    and run as an app.
  prefs: []
  type: TYPE_NORMAL
