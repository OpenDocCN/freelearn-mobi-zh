- en: Chapter 6. Using Swift with iOS and SQLite
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。使用Swift与iOS和SQLite
- en: In this chapter, you will look at using the new programming language from Apple
    called **Swift**. It is a new language created by Apple and has very powerful
    features to perform a variety of tasks and is now open source. Apple released
    it, and it has grown so fast that in the months and years to come, it will be
    the de facto standard for coding using Apple devices. You will see how Swift works
    with iOS, Xcode, and SQLite.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解如何使用苹果公司新推出的编程语言**Swift**。这是一种由苹果公司创建的新语言，具有非常强大的功能来执行各种任务，并且现在已开源。苹果公司发布了它，并且它发展得如此迅速，以至于在接下来的几个月和几年里，它将成为使用苹果设备编码的事实标准。你将看到Swift如何与iOS、Xcode和SQLite协同工作。
- en: It has been an extraordinary journey since Swift was announced at the WWDC 2014
    in San Francisco. In 2015, Apple announced that Swift would be open source. The
    language itself allows you to write high-level code and even low-level code with
    ease. It is a culmination of languages, such as Python, C, and Objective-C, making
    it faster and easier, and it's available on a number of platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Swift在2014年旧金山的WWDC上宣布以来，这已经是一次非凡的旅程。2015年，苹果宣布Swift将开源。这种语言本身允许你轻松编写高级代码，甚至低级代码。它是Python、C和Objective-C等语言的集大成者，使其更快、更简单，并且可在多个平台上使用。
- en: Can you imagine what is going to happen in the next few years? Design patterns
    and skills are developing at a fast rate, and applications will be rewritten and
    deployed using the new language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想象未来几年会发生什么吗？设计模式和技能正在快速发展，应用程序将使用新语言重写和部署。
- en: We will show you how to install Xcode to work with Swift and any SQLite libraries.
    There will be a few examples of how to get the new language to work with SQLite
    and Xcode. The examples and information given in this chapter will allow you,
    as a beginner, to get to grips with learning this new language and gaining new
    skills.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何安装Xcode以使用Swift和任何SQLite库。我们将提供一些示例，说明如何使新语言与SQLite和Xcode协同工作。本章中提供的示例和信息将帮助您作为初学者掌握学习这种新语言并获得新技能。
- en: Basic requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本要求
- en: 'All f#Apple development is completed on a Mac. You will require the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所有#Apple开发都是在Mac上完成的。你需要以下内容：
- en: A MAC computer with the Maverick or Yosemite operating system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台运行Maverick或Yosemite操作系统的MAC电脑
- en: The Xcode application development environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode应用程序开发环境
- en: A good understanding of object-oriented programming
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对面向对象编程有良好的理解
- en: A basic understanding of the Swift language, from the Swift reference guide
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Swift语言有基本理解，请参阅Swift参考指南
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For reference information, you can check out the *Apple Developer Guide* at
    [https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如需参考信息，您可以查看[https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides](https://developer.apple.com/library/ios/navigation/#section=Resource%20Types&topic=Guides)上的*Apple
    Developer Guide*。
- en: A positive attitude to learning and developing your skills is very important.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对学习和提升技能持有积极的态度非常重要。
- en: Starting an Xcode Project with Swift
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swift启动Xcode项目
- en: Xcode has been impacted with release fixes and enhances to the Swift language.
    So, sometimes, code that used to work easily now requires some coding changes
    before the compiler is happy with it. This is something that will always happen
    with a changing code base for a new language.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode受到了发布修复和Swift语言的增强影响。因此，有时之前容易工作的代码现在需要一些编码更改，编译器才会满意。这对于新语言不断变化的代码库来说，是一直都会发生的事情。
- en: 'Start by opening Xcode. The best version of Xcode is the latest one, available
    from the Apple App Store at [https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/).
    Install Xcode, and when everything is set up, launch Xcode and follow these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先打开Xcode。最好的Xcode版本是最新版本，可在苹果App Store的[https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/)下载。安装Xcode，设置完成后，启动Xcode并按照以下步骤操作：
- en: Create a new project (*Cmd*+*Shift*+*N*).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的项目（*Cmd*+*Shift*+*N*）。
- en: In the template selector, make sure **iOS** | **Application** is selected. Choose
    the **Single View Application** template to start the process:![Starting an Xcode
    Project with Swift](img/4725_06_01.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板选择器中，确保**iOS** | **Application**被选中。选择**Single View Application**模板以开始过程：![使用Swift启动Xcode项目](img/4725_06_01.jpg)
- en: You are then prompted to add the project name, so add a name like `Test Swift
    Project`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后你会被提示添加项目名称，所以添加一个像`Test Swift Project`这样的名称。
- en: Next, add in the company name as `Voxstar Ltd` or your company's name.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加公司名称为`Voxstar Ltd`或你的公司名称。
- en: Next, add in the organizer identifier, in our case `com.voxstar.testswiftproject`,
    which will identify a name for your apps and that is how it will be recognized
    by Apple.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加组织者标识符，在我们的例子中是`com.voxstar.testswiftproject`，这将标识你的应用程序名称，并且这就是它将被Apple识别的方式。
- en: Next, for the computer language, select Swift instead of Objective-C, which
    is what we are using in this chapter.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对于计算机语言，选择Swift而不是Objective-C，这是我们本章所使用的。
- en: For the devices, select **iPhone**, also ensure that the **Use Core Data** option
    is not selected. See the following screenshot as an example:![Starting an Xcode
    Project with Swift](img/4725_06_02.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于设备，选择**iPhone**，同时确保未选择**使用Core Data**选项。以下截图作为示例：![使用Swift启动Xcode项目](img/4725_06_02.jpg)
- en: Click on the **Next** button to continue this process. Thereafter, you have
    to store the location of your project files; we suggest you use the location where
    the main `.swift` directory is stored, as shown in the following screenshot. For
    this example, use the `Documents` directory, select and click on **Next**, and
    a new directory called `Test Swift App` will be created. The following screenshots
    show the directory and project information within:![Starting an Xcode Project
    with Swift](img/4725_06_03.jpg)![Starting an Xcode Project with Swift](img/4725_06_04.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮继续此过程。之后，你必须存储项目文件的地址；我们建议你使用存储主`.swift`目录的位置，如下面的截图所示。对于本例，使用`Documents`目录，选择并点击**下一步**，将创建一个名为`Test
    Swift App`的新目录。以下截图显示了目录和项目信息：![使用Swift启动Xcode项目](img/4725_06_03.jpg)![使用Swift启动Xcode项目](img/4725_06_04.jpg)
- en: Once the **Create** button is clicked on, the project details page is displayed,
    as shown in the following screenshot. A set of standard files, templates, and
    components are used as part of Xcode:![Starting an Xcode Project with Swift](img/4725_06_05.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击**创建**按钮，项目详情页面就会显示，如下面的截图所示。Xcode使用一组标准文件、模板和组件作为其一部分：![使用Swift启动Xcode项目](img/4725_06_05.jpg)
- en: To show what the standard app using an iPhone would look like, click on the
    Play button and watch the default screen and the output from the iPhone 6 simulator:![Starting
    an Xcode Project with Swift](img/4725_06_06.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示使用iPhone的标准应用程序的外观，请点击播放按钮，并观看默认屏幕和iPhone 6模拟器的输出：![使用Swift启动Xcode项目](img/4725_06_06.jpg)
- en: However, the first main entry place for the Swift application is the `AppDelegate.swift`
    file. This file is located in the application directory. Under the application
    directory, there will be a directory with the name of the app, and this is where
    the `AppDelegate.swift` file is located. In Xcode, click on it to open and you
    will find an array of information. This information will start with the standard
    comments that use your name and company details as part of the setup.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Swift应用程序的第一个主要入口点是`AppDelegate.swift`文件。此文件位于应用程序目录中。在应用程序目录下，将有一个以应用程序命名的目录，这就是`AppDelegate.swift`文件所在的位置。在Xcode中点击它以打开，你将找到一系列信息。这些信息将从使用你的姓名和公司详情作为设置部分的标准注释开始。
- en: The main piece of information thereafter is the `import UIKit` statement. If
    you have developed in Objective-C before, this statement will be obvious and very
    familiar and reconcilable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此后的主要信息是`import UIKit`语句。如果你之前使用过Objective-C进行开发，这个语句将非常明显、非常熟悉且易于理解。
- en: The UIKit will provide the essential infrastructure and backbone to manage and
    build these iOS Swift applications. It will contain the necessary user interface
    and other architecture to even handle and interact with the rest of the app. It
    provides support for motion-based events and handling touch events as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: UIKit将提供管理并构建这些iOS Swift应用程序的基本基础设施和骨干。它将包含必要的用户界面和其他架构，甚至可以处理和与应用程序的其他部分进行交互。它还支持基于运动的事件处理和触摸事件处理。
- en: 'It will also support a model for iCloud support in addition to handling web
    and text content. It will support Apple and a push notification service. Further
    information can be obtained from the Developer Apple site:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它还将支持处理网页和文本内容的同时，提供iCloud支持的模式。它还将支持Apple推送通知服务。更多详细信息可以在开发者Apple网站上获得：
- en: '![Starting an Xcode Project with Swift](img/4725_06_07.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用Swift启动Xcode项目](img/4725_06_07.jpg)'
- en: Unlike Objective-C or other standard programming languages, Swift does not have
    a `main` function or file. Instead, you just mention the `@UIApplicationMain`
    statement in the main Swift file and all the relevant components are included.
    This line of code may never need to change, unless there is a major update or
    change.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Objective-C 或其他标准编程语言不同，Swift 没有 `main` 函数或文件。相反，你只需在主 Swift 文件中提及 `@UIApplicationMain`
    语句，所有相关组件都会被包含进来。这一行代码可能永远不需要更改，除非有重大更新或更改。
- en: Using the SQLite 3 Library
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SQLite 3 库
- en: 'Before starting to code, you must add a specific library for SQLite. Within
    Xcode, ensure that the **General** tab is selected and visible. At the end of
    the page, look out for the **Linked Frameworks and Libraries** section. View and
    click on the icon with the plus sign, as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，您必须为 SQLite 添加一个特定的库。在 Xcode 中，确保选择并可见 **通用** 选项卡。在页面底部，寻找 **链接的框架和库**
    部分。查看并点击带有加号图标的图标，如下面的截图所示：
- en: '![Using the SQLite 3 Library](img/4725_06_08.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_08.jpg)'
- en: 'A modal window will appear; please enter the word `sqlite`, and from the list
    of information, select the **libsqlite3.dylib** option, as shown in the following
    screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将会弹出一个模态窗口；请输入单词 `sqlite`，然后从信息列表中选择 **libsqlite3.dylib** 选项，如下面的截图所示：
- en: '![Using the SQLite 3 Library](img/4725_06_09.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_09.jpg)'
- en: After selecting it, click on the **Add** button to move forward.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 选择后，点击 **添加** 按钮继续。
- en: As part of this chapter, we will use **FMDB** and an Objective-C wrapper around
    SQLite to show the database SQLite with Swift. **FMDB** stands for **Flying Meat
    Database**, and it easily interacts with SQLite and actually saves time and effort.
    For example, the FMDB will be linked to one SQLite database and will be there
    for the execution of SQL queries. The output is `FMResultsSet`, which shows results
    for queries executed on the FMDB.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为本章的一部分，我们将使用 **FMDB** 和围绕 SQLite 的 Objective-C 包装器来展示使用 Swift 的数据库 SQLite。**FMDB**
    代表 **Flying Meat Database**，它易于与 SQLite 交互，实际上可以节省时间和精力。例如，FMDB 将链接到一个 SQLite
    数据库，并用于执行 SQL 查询。输出是 `FMResultsSet`，它显示了在 FMDB 上执行的查询结果。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The class of `FMDatabaseQueue` is there to handle updates, queries, and multiple
    threading.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`FMDatabaseQueue` 类用于处理更新、查询和多重线程。'
- en: The FMDB approach with an application that performs the SQL commands of `Insert`,
    `Select`, `Delete`, and `Update` will be used on a table called `Mortgage`. The
    `Mortgage` table will have a **Name** field and a **Mortgage Roll Number** field
    for the account details, as a very simple example.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 FMDB 方法在名为 `Mortgage` 的表上执行 `Insert`、`Select`、`Delete` 和 `Update` 的 SQL
    命令。`Mortgage` 表将有一个 **名称** 字段和一个 **抵押卷号** 字段，用于账户详情，作为一个非常简单的例子。
- en: 'The following is a screenshot of the actual user design using the View controller
    scene tool within Xcode to create the basic screen layout. This will outline and
    show the resulting action to be followed and executed when a button is clicked:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是使用 Xcode 内部的视图控制器场景工具创建的基本屏幕布局的实际用户设计。这将概述并显示在按钮被点击时将遵循和执行的操作：
- en: '![Using the SQLite 3 Library](img/4725_06_010.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_010.jpg)'
- en: There are many tools to manage the SQLite database, and one of these is the
    **SQLite Manager Add-on** in the Firefox browser, to administer the database.
    The add-on can be obtained from [https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可以管理 SQLite 数据库，其中之一是 Firefox 浏览器中的 **SQLite Manager Add-on**，用于管理数据库。该插件可以从
    [https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/)
    获取。
- en: 'The add-on product has some of the following features for administrators:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件产品为管理员提供以下一些功能：
- en: Manage the SQLite database on your machine
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理您机器上的 SQLite 数据库
- en: Get a tree view of database objects
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取数据库对象的树形视图
- en: There are easy and helpful dialogs that are easy to manage as well, for example,
    triggers, views, and tables
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时还有一些易于管理且有用的对话框，例如触发器、视图和表
- en: A platform to execute SQL queries
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行 SQL 查询的平台
- en: Export tables or views in UTF-8/UTF-16
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 UTF-8/UTF-16 格式导出表或视图
- en: It is also possible to execute multiple SQL statements in the **Execute** tab
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **执行** 选项卡中也可以执行多个 SQL 语句
- en: 'Open Firefox and install the extensions from the aforementioned link. The following
    screenshot shows how the extension is installed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Firefox 并从上述链接安装扩展。以下截图显示了扩展的安装方式：
- en: '![Using the SQLite 3 Library](img/4725_06_011.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_011.jpg)'
- en: 'When you click on the **Install Now** button, the add-on is installed. Then
    go to **Tools** | **Menu Option** and you will find **SQLite Manager**. Once you
    click on that option, the following screen will appear:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**立即安装**按钮时，插件将被安装。然后转到**工具** | **菜单选项**，你将找到**SQLite 管理器**。一旦点击该选项，就会出现以下屏幕：
- en: '![Using the SQLite 3 Library](img/4725_06_012.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_012.jpg)'
- en: In order to add data to the system, the database must be created.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向系统中添加数据，必须创建数据库。
- en: When you click on the **Install Now** button, the add-on is installed. Once
    you go to **Tools** | **Menu Option**, you will see the **SQLite Manager** option.
    When you click on that option, the following screen is seen.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**立即安装**按钮时，插件将被安装。一旦转到**工具** | **菜单选项**，你将看到**SQLite 管理器**选项。当你点击该选项时，就会出现以下屏幕。
- en: 'Create the new database and ensure that a table is created for this small test
    application with SQLite. In this scenario, we have a database called `Mortgagedata.sqlite`,
    and a table called `Mortgage_data` with two fields: `mortgage_rollno` and `mortgage_name`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的数据库并确保为这个小型测试应用程序使用 SQLite 创建一个表。在这个场景中，我们有一个名为 `Mortgagedata.sqlite` 的数据库，一个名为
    `Mortgage_data` 的表，包含两个字段：`mortgage_rollno` 和 `mortgage_name`。
- en: 'The following screenshot shows the screens to call up **SQL Manager** in Firefox:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了在 Firefox 中调用**SQL 管理器**的屏幕：
- en: '![Using the SQLite 3 Library](img/4725_06_013.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_013.jpg)'
- en: 'When you click on the **SQL Manager** option to create a database, a pop up
    will be displayed where the user enters the database name, as shown in the following
    screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**SQL 管理器**选项来创建数据库时，会弹出一个窗口，用户在此输入数据库名称，如下截图所示：
- en: '![Using the SQLite 3 Library](img/4725_06_014.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_014.jpg)'
- en: 'Next, after the database is created, the user has to select a disk directory
    to store the database in, as shown in the next screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在数据库创建后，用户必须选择一个磁盘目录来存储数据库，如下截图所示：
- en: '![Using the SQLite 3 Library](img/4725_06_015.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_015.jpg)'
- en: 'Next, you need to create a table, as shown in the preceding screenshot, with
    two rows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要创建一个表，如下截图所示，包含两行：
- en: '![Using the SQLite 3 Library](img/4725_06_016.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SQLite 3 库](img/4725_06_016.jpg)'
- en: The preceding screenshot now shows what the table structure looks like before
    further work is carried out.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前截图所示，这是在进一步工作之前表结构的样子。
- en: 'Next, a class, that is a subclass of `NSObject`, has to be created. Call this
    class `Mortgage_data` and set up its properties as per the requirements of this
    test scenario. These properties will form part of the database schema and foundations
    for your small database and table:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要创建一个类，这是一个 `NSObject` 的子类。将此类命名为 `Mortgage_data` 并根据此测试场景的要求设置其属性。这些属性将构成数据库模式以及你小型数据库和表的基础：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using FMDB
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 FMDB
- en: FMDB is a SQLite library written on top of SQLite to handle database operations
    easier.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: FMDB 是一个基于 SQLite 编写的 SQLite 库，用于简化数据库操作。
- en: Since FMDB is built in Objective-C, a bridging header is required to link it
    up with the simple app. A `.h` file has to be included, which is `FMDatabase.h`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 FMDB 是在 Objective-C 中构建的，因此需要一个桥接头才能将其与简单应用程序链接起来。必须包含一个 `.h` 文件，即 `FMDatabase.h`。
- en: This is required to ensure that the linking works for the Objective-C and Swift
    technology produce the results we want. Next, we need to create a database in
    SQLite Manager and copy it to the right place.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了确保 Objective-C 和 Swift 技术的链接能够产生我们想要的结果。接下来，我们需要在 SQLite 管理器中创建数据库并将其复制到正确的位置。
- en: In the following code, we show the function to copy a database. In this instance,
    we need to create and use a function called `copyFile`, which will copy the files
    to the application's document directory. Methods such as `applicationDidFinishLaunch`
    work with `AppDelegate` by passing the database name in, as part of the requirements
    argument.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们展示了复制数据库的函数。在这个例子中，我们需要创建并使用一个名为 `copyFile` 的函数，该函数将文件复制到应用程序的文档目录。例如，`applicationDidFinishLaunch`
    方法通过将数据库名称作为要求参数的一部分传递给 `AppDelegate` 来与 `AppDelegate` 一起工作。
- en: 'See the following class:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下类：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When using the FMDB way of interacting with SQLite, a class called `ModelManager`
    is created as part of `NSObject{}`, so that a variety of functions can reside,
    or be inserted, within it. This is mandatory and is shown in the next code snippet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用FMDB与SQLite交互的方式时，创建了一个名为`ModelManager`的类作为`NSObject{}`的一部分，以便在其中驻留或插入各种功能。这是强制性的，并在下一个代码片段中展示。
- en: 'In the following code, you will see that after the database object has been
    copied, it needs to be initialized, a Swift file has to be named and added to
    the `ModelManager`, and a shared instance of the type of `ModelManager` has to
    be defined out of the `class` block, as shown in the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，您将看到在数据库对象被复制之后，需要对其进行初始化，必须为Swift文件命名并添加到`ModelManager`中，并且必须在`class`块之外定义`ModelManager`类型的共享实例，如下所示：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, set up the database object for the FMDB, namely, the `FMDatabase` object,
    and together with the database object, set up and reset it as shown in the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为FMDB设置数据库对象，即`FMDatabase`对象，并与数据库对象一起设置和重置，如下所示：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next part of the process is to interrogate the database with the following
    command, the `insert` command, as an example wrapped in the assigned value `Mortage_Inserted`.
    The other class, like `ModelManager`, will have the `Mobile_data` method added
    to it. The `ModelManager` method is then trying to open the `Mortgage` database
    by using the method for opening, namely, the `FMDatabase` class. Then the `executeUpdate`
    method is allocated and used as part of the `FMDatabase` class to push and pass
    down the SQL query and the input parameters. To finish this off, part of the operation,
    the `close` method, is used. See the following code on how the database is connected:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个步骤是使用以下命令查询数据库，即`insert`命令，作为一个示例，它被分配的值`Mortgage_Inserted`所包裹。其他类，如`ModelManager`，将添加`Mobile_data`方法。然后`ModelManager`方法尝试通过打开方法，即`FMDatabase`类，来打开`Mortgage`数据库。接着分配并使用`executeUpdate`方法作为`FMDatabase`类的一部分，以推送和传递SQL查询和输入参数。为了完成这一部分操作，使用`close`方法。以下代码展示了如何连接数据库：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Insert Button` has an action method; call this method to send through
    the `Mortage_data` class, which holds the `mortgage_rollno` and `mortgage_name`
    field names, as shown in the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Insert Button`有一个动作方法；调用此方法通过`Mortage_data`类发送，该类包含`mortgage_rollno`和`mortgage_name`字段名，如下所示：'
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'FMDB is well documented and popular on the Internet. Next, the actual SQL query
    is passed through the `executeUpdate` method, which is part of the `FMDatabase`
    class and is linked up as parameters, as part of an argument:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: FMDB在互联网上得到了很好的文档记录并且很受欢迎。接下来，实际的SQL查询通过`executeUpdate`方法传递，这是`FMDatabase`类的一部分，并作为参数链接起来，作为参数的一部分：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code shows how the `@IBAction` function is called using the `btnUpdateClicked`
    function with the relevant fields and text information, to perform the update
    based on the click of the button called `btnUpdateClicked`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用`btnUpdateClicked`函数以及相关字段和文本信息调用`@IBAction`函数，以根据名为`btnUpdateClicked`的按钮点击执行更新操作：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To perform the `delete` operation, use the `DeleteMortgateData` method. First,
    the `ModelManager` class is used to open the database, using the `FMDatabase`
    class as utilized previously. Thereafter, again use the `executeUpdate` method,
    and using an argument, pass the SQL `delete` query and close the database by invoking
    the `close` method, as defined in the `FMDatabase` class. Details of this operation
    are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行`delete`操作，使用`DeleteMortgateData`方法。首先，使用`FMDatabase`类作为之前使用的方式打开数据库。之后，再次使用`executeUpdate`方法，并通过参数传递SQL
    `delete`查询，通过调用`FMDatabase`类中定义的`close`方法关闭数据库。此操作的详细信息如下：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As previously used, the same `ModelManager` method is used for SQL operations:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用相同的`ModelManager`方法进行SQL操作：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next operation is the `SelectMortgageData` operation, which will be added
    to the `ModelManager` method. This will open the database by using the `open`
    method within the `FMDatabase` class. This is then followed by the `executeQuery`
    method, using the `FMDatabase` class, which accepts the input SQL query:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个操作是`SelectMortgageData`操作，它将被添加到`ModelManager`方法中。这将使用`FMDatabase`类中的`open`方法打开数据库。然后是使用`FMDatabase`类的`executeQuery`方法，它接受输入的SQL查询：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following method is called from the previous action:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法是从上一个动作中调用的：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The SQLite scheme using Firefox can be viewed as shown in the following screenshot.
    Go to Firefox, and under the **Tools** menu, invoke **SQLite Manager**. Click
    on the **Mortgage Manager** table and you can see the structure of the table,
    as shown in the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Firefox查看SQLite方案，如图所示。打开Firefox，在**工具**菜单下，调用**SQLite Manager**。点击**Mortgage
    Manager**表，您可以看到表的结构，如图所示：
- en: '![Using FMDB](img/4725_06_17.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![使用FMDB](img/4725_06_17.jpg)'
- en: An alternate method for using FMDB this way is to use it directly in the Swift
    programming language, as shown in the following code. When setting up Xcode with
    Swift, you will be prompted for the bridging component for linking them up, but
    it can be done as described here.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FMDB的另一种方法是直接在Swift编程语言中使用，如下面的代码所示。在设置Xcode与Swift时，您将被提示输入桥接组件以将它们链接起来，但可以按照以下描述完成。
- en: 'The code is added in the place where the `IBAction` is set up. The method will
    require the use of the `SaveMortgageData` action method, which will open the database,
    take text/information from the data fields, build an SQL database, and execute
    the statement. Once the operation is complete, the database will be closed. Then
    the text fields will be initialized, ready for the next input. Therefore, the
    `IBAction` method using the default template will have to be modified as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 代码被添加到设置`IBAction`的地方。这个方法将需要使用`SaveMortgageData`动作方法，该方法将打开数据库，从数据字段中获取文本/信息，构建一个SQL数据库，并执行语句。一旦操作完成，数据库将被关闭。然后文本字段将被初始化，准备接收下一个输入。因此，使用默认模板的`IBAction`方法需要按照以下方式修改：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After using this creation process and method for an application that is created
    with Swift and SQLite, you can see how the basic components and the `SQLite 3`
    library have been successfully added to the new project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此创建过程和方法创建了一个使用Swift和SQLite的应用程序之后，您可以看到基本组件和`SQLite 3`库已成功添加到新项目中。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you had a quick look at how Xcode works with Swift. This chapter
    showed you some examples and ideas, and exposed the app development environment
    Xcode to you. We used the FMDB classes and methods to access the database and
    perform a variety of commands. There are some basic, but intuitive examples of
    how Swift works with iOS. Apple wrote this language to become the next leap in
    development for all developers in the next 20 years. It has also become open source
    as well.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您快速了解了Xcode如何与Swift协同工作。本章向您展示了一些示例和想法，并介绍了应用开发环境Xcode。我们使用了FMDB类和方法来访问数据库并执行各种命令。这里有一些关于Swift如何与iOS协同工作的基本但直观的示例。苹果公司编写这门语言是为了成为未来20年内所有开发者的下一个发展飞跃。它也已经成为开源语言。
- en: In the next chapter, you will find out how Xcode can be used with PhoneGap and
    HTML5, and the use of SQL statements, embedded in HTML5, compiled with PhoneGap,
    and run as an app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解到如何使用Xcode与PhoneGap和HTML5协同工作，以及SQL语句在HTML5中的使用，通过PhoneGap编译，并作为应用运行。
