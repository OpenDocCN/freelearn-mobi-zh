["```swift\nlet button = UIButton(frame: CGRect(x: 0, y: 0, width: 100, height: 50))\nbutton.setTitle(\"Button\", for: .normal)\nbutton.setTitleColor(.black, for: .normal)\nbutton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\nview.addSubview(button)\n```", "```swift\nimport SwiftUI\nstruct ContentView: View {\n    var body: some View {\n        Button(action: {\n            // action to be performed when button is tapped\n        }) {\n            Text(\"Button\")\n                .font(.title)\n                .foregroundColor(.black)\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    @State private var name: String = \"Bella\"\n}\n```", "```swift\nstruct ContentView: View {\n    @State private var name: String = \"Bella\"\n    var body: some View {\n        Text(\"Hello, \\(name)\")\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    @State private var name: String = \"Bella\"\n        var body: some View {\n        VStack {\n            Text(\"Hello, \\(name)\")\n            Button(action: {\n                name = \"Jack\"\n            }) {\n                Text(\"Change name\")\n            }\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            Image(systemName: \"globe\")\n                .imageScale(.large)\n                .foregroundColor(.accentColor)\n            Text(\"Hello, world!\")\n        }\n        .padding()\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        get {\n            return VStack {\n                Image(systemName: \"globe\")\n                    .imageScale(.large)\n                    .foregroundColor(.accentColor)\n                Text(\"Hello, world!\")\n            }\n            .padding()\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    @State var myText = \"\"\n    @State var changeText = false\n    var body: some View {\n        Text(myText)\n            .padding()\n        Button(\"Button\") {\n            changeText.toggle()\n            if changeText {\n                myText = \"Hello SwiftUI!\"\n            } else {\n                myText = \"Hello World!\"\n            }\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    @State var myText = \"\"\n    @State var changeText = false\n\n    var body: some View {\n        VStack {\n            Text(myText)\n                .padding()\n          Button(\"Button\") {\n                changeText.toggle()\n                if changeText {\n                    myText = \"Hello SwiftUI!\"\n                } else {\n                    myText = \"Hello World!\"\n                }\n            }\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n   var body: some View {\n        VStack(alignment: .leading) {\n      Text(\"Hi, I'm child one in this vertical stack\")\n      Text(\"Hi, I'm child two in this vertical stack\")\n      Text(\"Hi, I'm child three in this vertical stack\")\n      Text(\"Hi, I'm child four in this vertical stack, I'm the         best\")\n        }\n    }}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            Text(\"Hi, I'm child one in this vertical stack\")\n            Text(\"Hi, I'm child two in this vertical stack\")\n            Text(\"Hi, I'm child three in this vertical stack\")\n            Text(\"Hi, I'm child four in this vertical stack,               I'm the best\")\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        HStack() {\n            Text(\"0\")\n            Text(\"1\")\n            Text(\"2\")\n            Text(\"3\")\n            Text(\"4\")\n            Text(\"5\")\n            Text(\"6\")\n            Text(\"7\")\n            Text(\"8\")\n            Text(\"9\")\n        }.font(.headline)\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        HStack() {\n            Text(\"0\")\n            Text(\"1\")\n            Text(\"2\")\n            Text(\"3\")\n            Text(\"4\").font(.title)\n            Text(\"5\")\n            Text(\"6\")\n            Text(\"7\")\n            Text(\"8\")\n            Text(\"9\")\n        }.font(.headline)\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        ZStack() {\n            Image(systemName: \"rectangle.inset.filled.and.              person.filled\")\n                .renderingMode(.original)\n                .resizable()\n                .frame(width: 350, height: 250)\n\n            Text(\"SwiftUI\")\n                .font(.system(size: 50))\n                .foregroundColor(.yellow)\n                .padding(.trailing, 80)\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            ZStack() {\n                Image(systemName: \"cloud.moon.rain.fill\")\n                    .foregroundColor(Color(.systemOrange))\n                    .font(.system (size: 150))\n                Text(\"Stormy\").bold()\n                    .font(.system(size: 30))\n                    .offset(x: -15, y: -5)\n                    .foregroundColor(.indigo)\n            }\n            HStack() {\n                Image(systemName: \"tornado\")\n                    .foregroundColor(Color(.systemBlue))\n                    .font(.system (size: 50))\n\n                VStack(alignment: .leading) {\n                    Text(\"Be prepared for anything\")\n                        .font(.system(size: 25))\n                        .fontWeight(.bold)\n\n                    Text(\"With the Stormy Weather app\")\n                        .font(.system(size: 16))\n                }\n            }\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        HStack {\n            Text(\"Hello\")\n            Spacer()\n            Text(\"World\")\n        }.padding()\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            Text(\"Hi, I'm child one in this vertical stack\")\n            Text(\"Hi, I'm child two in this vertical stack\")\n            Text(\"Hi, I'm child three in this vertical stack\")\n            Text(\"Hi, I'm child four in this vertical stack\")\n            Divider().background(Color.black)\n\n            Text(\"Hi, I'm child five in this vertical stack\")\n            Text(\"Hi, I'm child six in this vertical stack\")\n            Text(\"Hi, I'm child seven in this vertical stack\")\n            Text(\"Hi, I'm child eight in this vertical stack\")\n        }.padding()\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            Text(\"Hi, I'm child one in this vertical stack\")\n            Text(\"Hi, I'm child two in this vertical stack\")\n            Text(\"Hi, I'm child three in this vertical stack\")\n            Text(\"Hi, I'm child four in this vertical stack\")\n\n            Divider().frame(height: 200).frame(width:               3).background(Color.blue)\n            Divider().frame(height:200).frame(width:               3).background(Color.blue).offset(x: 300, y: 0)\n\n            Text(\"Hi, I'm child five in this vertical stack\")\n            Text(\"Hi, I'm child six in this vertical stack\")\n            Text(\"Hi, I'm child seven in this vertical stack\")\n            Text(\"Hi, I'm child eight in this vertical stack\")\n        }.padding()\n    }      \n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack(alignment: .leading, spacing: 10) {\n            Text(\"Hi, I'm child one in this vertical stack\")\n            Text(\"Hi, I'm child two in this vertical stack\")\n            Text(\"Hi, I'm child three in this vertical stack\")\n            Text(\"Hi, I'm child four in this vertical stack\")\n            Divider().frame(height: 20).frame(width: 300).              background(Color.blue)\n\n            Text(\"Hi, I'm child five in this vertical stack\")\n            Text(\"Hi, I'm child six in this vertical stack\")\n            Text(\"Hi, I'm child seven in this vertical stack\")\n            Text(\"Hi, I'm child eight in this vertical stack\")\n        }.padding()\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack{\n            VStack(alignment: .leading, spacing: 10) {\n                Text(\"There is padding all around this view\")\n                Text(\"There is padding all around this view\")\n                Text(\"There is padding all around this view\")\n                Text(\"There is padding all around this view\")\n\n            }.background(Color.yellow)\n                .padding(30)\n                .background(Color.red)\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack{\n            VStack(alignment: .leading, spacing: 10) {\n                Text(\"The leading edge has been padded\")\n            }.padding(.leading, 75)\n        }\n    }\n} \n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        VStack{\n            VStack(alignment: .leading, spacing: 10) {\n                Text(\"I'm padded on the leading edge\").padding                   (.leading, 75)\n                Text(\"I'm padded on the trailing edge\").padding                   (.trailing, 75)\n                Text(\"I'm padded on the leading edge\").padding                   (.leading, 75)\n                Text(\"I'm padded on the trailing edge\").padding                   (.trailing, 75)\n                Text(\"I'm padded on the leading edge\").padding                   (.leading, 75)\n                Text(\"I'm padded on the trailing edge\").padding                   (.trailing, 75)\n                Text(\"I'm padded on the leading edge\").padding                   (.leading, 75)\n                Text(\"I'm padded on the trailing edge\").padding                   (.trailing, 75)\n            }\n        }\n    }\n}\n```", "```swift\nButton(action: {\n    // this block of code will be run when the button is       clicked\n    print(\"Button was clicked!\")\n}) {\n    Text(\"Button\")\n}\n```", "```swift\nstruct MyView: View {\n    var body: some View {\n        Text(\"Hello, SwiftUI!\")\n            .onAppear {\n                // this block of code will run when the view                   appears\n                print(\"The view appeared!\")\n            }\n    }\n}\n```", "```swift\nfunc doSomething(completion: () -> Void) {\n    // Do some work!\n    print(\"Work complete\")\n    completion()\n}\n```", "```swift\ndoSomething {\n    // this block of code will run when the \"completion\"       closure is called\n    print(\"completion closure called!\")\n}\n```", "```swift\nText(\"Hello, World!\")\n    .onAppear {\n        // this block of code will be executed when the view           appears\n        print(\"View appeared!\")\n    }\n```", "```swift\nGeometryReader(content: _)\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n           GeometryReader {_ in\n            //empty geometry reader\n        }.background(Color.yellow)\n     }\n  }\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        GeometryReader {_ in\n             Image(systemName: \"tornado\")\n             Image(systemName: \"tornado\")\n             Image(systemName: \"tornado\")\n               }.background(Color.yellow)\n            .font(.largeTitle)\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View          \n GeometryReader { geometryProxy in\n            Image(\"swiftui_icon\")\n                .resizable()\n                .scaledToFit()\n                .frame(width: geometryProxy.size.width / 2,                   height: geometryProxy.size.height / 4)\n                .background(Color.gray)\n        }\n    }\n}\n```", "```swift\n struct ContentView: View {\n    var body: some View {\n\nGeometryReader { geometryProxy in\n            //top right position\n            VStack {\n                Image(systemName: \"tornado\")\n                .imageScale(.large)\n            Text(\"Top Right\")\n                .font(.title)\n            }.position(x: geometryProxy.size.width - 80, y:               geometryProxy.size.height / 40)\n\n            //bottom left position\n            VStack {\n                Image(systemName: \"tornado\")\n                .imageScale(.large)\n\n            Text(\"Bottom Left\")\n                .font(.title)\n            }.position(x: geometryProxy.size.width - 300,y:               geometryProxy.size.height - 40)\n        }.background(Color.accentColor)\n        .foregroundColor(.white)\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        GeometryReader { geometryProxy in\n            VStack {\n                Image(\"SwiftUIIcon\")\n                    .resizable()\n                    .scaledToFit()\n                Text(\"Global\").font(.title)\n                Text(\"X, Y \\(geometryProxy.frame(in:                   CoordinateSpace.global).origin.x, specifier:                   \"(%.f,\") \\(geometryProxy.frame(in: .global).                  origin.y, specifier: \"%.f)\")\")\n                Text(\"Local\").font(.title)\n                Text(\"X, Y  \\(geometryProxy.frame(in: .local).                  origin.x, specifier: \"(%.f\") \\(geometryProxy.                  frame(in: .local).origin.y, specifier:                   \"%.f)\")\")\n            }\n        }.frame(height: 250)\n    }\n}\n```", "```swift\nText(\"minX: \\(geometryProxy.frame(in: .local).minX))\")\nText(\"minX: \\(geometryProxy.frame(in: .local).midX))\")\nText(\"maxX: \\(geometryProxy.frame(in: .local).maxX))\")\nText(\"minX: \\(geometryProxy.frame(in: .global).minY))\")\nText(\"minX: \\(geometryProxy.frame(in: .global).midY))\")\nText(\"maxX: \\(geometryProxy.frame(in: .global).maxY))\")\n```", "```swift\nstruct ContentView: View {\n    var body: some View {\n        GeometryReader { geometryProxy in\n            VStack() {\n                Spacer()\n                Text(\"Local Values\").font(.title2).bold()\n                HStack() {\n                    Text(\"minX: \\(Int(geometryProxy.frame(in:                       .local).minX))\")\n                    Spacer()\n                    Text(\"midX: \\(Int(geometryProxy.frame(in:                       .local).midX))\")\n                    Spacer()\n                    Text(\"maxX: \\(Int(geometryProxy.frame(in:                       .local).maxX))\")\n                }\n\n                Divider().background(Color.black)\n\n                Text(\"Global Values\").font(.title2).bold()\n                HStack() {\n                    Text(\"minX: \\(Int(geometryProxy.frame(in:                       .global).minX))\")\n                    Spacer()\n                    Text(\"midX: \\(Int(geometryProxy.frame(in:                       .global).midX))\")\n                    Spacer()\n                    Text(\"maxX: \\(Int(geometryProxy.frame(in:                       .global).maxX))\")\n                }\n                Spacer()\n\n            }.padding(.horizontal)\n        }\n    }\n}\n```"]