["```kt\n    using UnityEngine; \n    using System.Collections; \n\n    public class playerScript : MonoBehaviour { \n        private Animator anim; \n\n        // Use this for initialization \n        void Start () { \n            anim = GetComponent<Animator>(); \n        } // start \n\n        // Update is called once per frame \n        void Update () { \n\n            //Defending \n            if (Input.GetButtonDown(\"Fire2\")){ \n                // Debug.Log(\"Jump pressed\"); \n                anim.SetBool(\"bIsDefending\", true); \n            } else if (Input.GetButtonUp(\"Fire2\")) { \n                anim.SetBool(\"bIsDefending\", false); \n            } \n\n            //Attacking \n            if (Input.GetButtonDown(\"Fire1\")){ \n                anim.SetBool(\"bIsDefending\", false); \n                anim.SetTrigger(\"tIsPunching\"); \n                //Debug.Log(\"Fire pressed\"); \n            } \n        } // update \n    } \n\n```", "```kt\n    using UnityEngine; \n    using System.Collections; \n\n    public class enemy : MonoBehaviour { \n\n    private Animator anim; \n\n    int myTick = 0; \n    int currentTick = 0; \n    int prevTick = 0; \n    int nextTick = 0; \n    int patternLength = 0; \n    int patterCount = 0; \n\n    int[] pattern = new[] {10, 10, 10,30, 60, 10, 40, 60, 120, 30, \n                           10, 10,10, 60, 60, 120, 30, 10, 10, 10}; \n    // Use this for initialization \n\n```", "```kt\n    void Start () { \n\n    anim = GetComponent<Animator>(); \n    anim.SetBool(\"bIsDefending\", true); \n\n    Shuffle(pattern); \n\n    patternLength = pattern.Length; \n    nextTick = pattern[0]; \n\n    } // start \n\n```", "```kt\n    // Update is called once per frame \n    void Update () { \n\n        myTick++; \n        currentTick = myTick;        \n\n        if (currentTick == prevTick + nextTick) { \n            int choice = Random.Range(1, 3); \n\n            switch (choice) { \n\n                //will punch \n                case 1: anim.SetBool(\"bIsDefending\", false); \n                    anim.SetTrigger(\"tIsPunching\"); \n                    break; \n\n                //will defend \n                case 2: anim.SetBool(\"bIsDefending\", true); \n                    break; \n\n                //will be idle  \n                case 3: anim.SetBool(\"bIsDefending\", false); break; \n            } \n\n            prevTick = currentTick; \n            nextTick = pattern[patterCount]; \n\n            if ((patterCount + 1) >= pattern.Length){ \n                patterCount = 0; \n                Shuffle(pattern); \n            } \n            else { \n                patterCount++; \n            } \n        } \n    } // Update \n\n```", "```kt\n    void Shuffle(int[] a){ \n\n        for (inti = a.Length - 1; i> 0; i--){ \n            int rnd = Random.Range(0, i); \n            int temp = a[i]; \n            a[i] = a[rnd]; \n            a[rnd] = temp; \n        } \n\n        for (inti = 0; i<a.Length; i++){ \n            Debug.Log(a[i]); \n        } \n     } // shuffle    \n\n```", "```kt\n    public GameObject enemy; \n\n```", "```kt\n    Animator eAnim = enemy.GetComponent<Animator>(); \n\n```", "```kt\n    // Getting Hit \n    if (eAnim.GetBool(\"tIsPunching\")){ \n        if (anim.GetBool(\"bIsDefending\") == false){ \n            //Debug.Log(\"I got hit\"); \n            anim.SetTrigger(\"tGotHit\"); \n        } \n    }  \n\n```", "```kt\n    public GameObject player; \n\n```", "```kt\n    Animator pAnim = player.GetComponent<Animator>(); \n\n    // Getting Hit \n    if (pAnim.GetBool(\"tIsPunching\")) { \n        if (anim.GetBool(\"bIsDefending\") == false) { \n            //Debug.Log(\"I got hit\"); \n            anim.SetTrigger(\"tGotHit\"); \n        } \n    } \n\n```", "```kt\n    float totalTime = 0.0f; \n    float timeSinceLastHit = 0.0f; \n    float hitTimeInterval = 30.0f * .016f; \n\n```", "```kt\n    totalTime += Time.deltaTime; \n\n```", "```kt\n    // Attacking \n    if (totalTime>= timeSinceLastHit + hitTimeInterval){ \n        if (Input.GetButtonDown(\"Fire1\")){ \n            anim.SetBool(\"bIsDefending\", false); \n            anim.SetTrigger(\"tIsPunching\"); \n\n            timeSinceLastHit = totalTime; \n            //Debug.Log(\"Fire pressed\"); \n        } \n    } \n\n```"]