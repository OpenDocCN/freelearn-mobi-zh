["```swift\nprivate let adaptiveColumns =[\n    GridItem( .adaptive( minimum: 300 ) )\n]\n@State private var isClicked: Bool = false\n@State private var imageFile: String = \"\"\n@State private var imageName: String = \"\"\n@State private var imageDate: String = \"\"\n@State private var imageDescription: String = \"\"\n```", "```swift\nvar body: some View{\n    NavigationView\n    {\n        ScrollView\n        {\n            LazyVGrid( columns: adaptiveColumns, spacing: 20 )\n            {\n                ForEach( images.indices )\n                { i in\n                    NavigationLink( destination: EnhancedView( imageFile: $imageFile, imageName: $imageName, imageDate: $imageDate, imageDescription: $imageDescription ), isActive: $isClicked, label:\n                        {\n                        Image( images[i] )\n                            .resizable( )\n                            .scaledToFill( )\n                            .frame( width: 300, height: 300 )\n                            .onTapGesture {\n                                imageFile = images[i]\n                                imageName = \"FireDEV Podcast\"\n                                imageDate = \"22/09/2022\"\n                                imageDescription = \"Aspiring entrepreneurs and industry professionals alike can learn a lot from a fireside chat with interesting people in the industry. From small indie developers to CEOs of major companies, these chats provide an opportunity to gain insight into the unique stories of success that have led these individuals to their current positions. Through conversations about their experiences and challenges, we can gain valuable knowledge about their successes, failures, and the strategies they used to reach their goals. We can also gain insight into their motivations and the values that drive their decisions. By engaging in a fireside chat with these industry leaders, we can gain a better understanding of the industry and the people within it, and gain valuable knowledge that can help us to reach our own goals.\"\n                                isClicked = true\n                            }\n                    } )\n                }\n            }\n        }\n    }\n    .navigationViewStyle( StackNavigationViewStyle( ) )\n}\n```", "```swift\nImage( images[i] )    .resizable( )\n    .scaledToFill( )\n    .frame( width: 300, height: 300 )\n    .onTapGesture {\n        imageFile = images[i]\n        imageName = \"FireDEV Podcast\"\n        imageDate = \"22/09/2022\"\n        imageDescription = \"Aspiring entrepreneurs and industry professionals alike can learn a lot from a fireside chat with interesting people in the industry. From small indie developers to CEOs of major companies, these chats provide an opportunity to gain insight into the unique stories of success that have led these individuals to their current positions. Through conversations about their experiences and challenges, we can gain valuable knowledge about their successes, failures, and the strategies they used to reach their goals. We can also gain insight into their motivations and the values that drive their decisions. By engaging in a fireside chat with these industry leaders, we can gain a better understanding of the industry and the people within it, and gain valuable knowledge that can help us to reach our own goals.\"\n        isClicked = true\n    }\n```", "```swift\nimport SwiftUIstruct HighlightView: View\n{\n    private let images: [String] =\n    [\n        \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\"\n    ]\n    private let adaptiveColumns =\n    [\n        GridItem( .adaptive( minimum: 300 ) )\n    ]\n    @State private var isClicked: Bool = false\n    @State private var imageFile: String = \"\"\n    @State private var imageName: String = \"\"\n    @State private var imageDate: String = \"\"\n    @State private var imageDescription: String = \"\"\n    var body: some View\n    {\n        NavigationView\n        {\n            ScrollView\n            {\n                LazyVGrid( columns: adaptiveColumns, spacing: 20 )\n                {\n                    ForEach( images.indices )\n                    { i in\n                        NavigationLink( destination: EnhancedView( imageFile: $imageFile, imageName: $imageName, imageDate: $imageDate, imageDescription: $imageDescription ), isActive: $isClicked, label:\n                            {\n                            Image( images[i] )\n                                .resizable( )\n                                .scaledToFill( )\n                                .frame( width: 300, height: 300 )\n                                .onTapGesture {\n                                    imageFile = images[i]\n                                    imageName = \"FireDEV Podcast\"\n                                    imageDate = \"22/09/2022\"\n                                    imageDescription = \"Aspiring entrepreneurs and industry professionals alike can learn a lot from a fireside chat with interesting people in the industry. From small indie developers to CEOs of major companies, these chats provide an opportunity to gain insight into the unique stories of success that have led these individuals to their current positions. Through conversations about their experiences and challenges, we can gain valuable knowledge about their successes, failures, and the strategies they used to reach their goals. We can also gain insight into their motivations and the values that drive their decisions. By engaging in a fireside chat with these industry leaders, we can gain a better understanding of the industry and the people within it, and gain valuable knowledge that can help us to reach our own goals.\"\n                                    isClicked = true\n                                }\n                        } )\n                    }\n                }\n            }\n        }\n        .navigationViewStyle( StackNavigationViewStyle( ) )\n    }\n}\nstruct ContentView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        HighlightView( )\n    }\n}\n```", "```swift\nstruct DeviceRotationViewModifier: ViewModifier{\n    let action: ( UIDeviceOrientation ) -> Void\n    func body( content: Content ) -> some View\n    {\n        content\n            .onAppear( )\n            .onReceive( NotificationCenter.default.publisher( for: UIDevice.orientationDidChangeNotification ) )\n                { _ in\n                    action( UIDevice.current.orientation )\n                }\n    }\n}\nextension View\n{\n    func onRotate( perform action: @escaping ( UIDeviceOrientation ) -> Void ) -> some View\n        {\n            self.modifier( DeviceRotationViewModifier( action: action ) )\n        }\n}\n```", "```swift\n@Binding var imageFile: String@Binding var imageName: String\n@Binding var imageDate: String\n@Binding var imageDescription: String\n```", "```swift\n@State private var orientation = UIDeviceOrientation.unknownlet screenSize: CGRect = UIScreen.main.bounds\n```", "```swift\nGroup{\n    if ( orientation.isLandscape )\n    {\n        LazyHStack\n        {\n            VStack\n            {\n                Image( imageFile )\n                    .resizable( )\n                    .scaledToFit( )\n            }.frame( width: screenSize.width * 0.5 )\n            VStack\n            {\n                Text( imageName )\n                    .fontWeight(.bold)\n                Text( imageDate )\n                Text( imageDescription )\n            }.frame( width: screenSize.width * 0.5 )\n        }\n    }\n    else\n    {\n        LazyVStack\n        {\n            VStack\n            {\n                Image( imageFile )\n                    .resizable( )\n                    .scaledToFit( )\n            }.frame( height: screenSize.height * 0.5 )\n            VStack\n            {\n                Text( imageName )\n                    .fontWeight( .bold )\n                Text( imageDate )\n                Text( imageDescription )\n            }.frame( height: screenSize.height * 0.5 )\n        }\n    }\n}\n.onRotate\n{ newOrientation in\n    orientation = newOrientation\n}\n```", "```swift\nif ( orientation.isLandscape )\n```", "```swift\nLazyHStack\n```", "```swift\nVStack{\n    Image( imageFile )\n        .resizable( )\n        .scaledToFit( )\n}.frame( width: screenSize.width * 0.5 )\nVStack\n{\n    Text( imageName )\n        .fontWeight(.bold)\n    Text( imageDate )\n    Text( imageDescription )\n}.frame( width: screenSize.width * 0.5 )\n```", "```swift\n.onRotate{ newOrientation in\n    orientation = newOrientation\n}\n```", "```swift\nstruct EnhancedView_Previews: PreviewProvider{\n    static var previews: some View\n    {\n        EnhancedView( imageFile: .constant( \"\" ), imageName: .constant( \"\" ), imageDate: .constant( \"\" ), imageDescription: .constant( \"\" ) )\n    }\n}\n```", "```swift\nimport SwiftUIstruct EnhancedView: View\n{\n    @Binding var imageFile: String\n    @Binding var imageName: String\n    @Binding var imageDate: String\n    @Binding var imageDescription: String\n    @State private var orientation = UIDeviceOrientation.unknown\n    @State private var isFullScreen: Bool = false\n    let screenSize: CGRect = UIScreen.main.bounds\n    var body: some View\n    {\n        Group\n        {\n            if isFullScreen {\n                Image(imageFile)\n                    .resizable()\n                    .scaledToFit()\n                    .edgesIgnoringSafeArea(.all)\n                    .onTapGesture {\n                        self.isFullScreen.toggle()\n                    }\n            }\n            else if orientation.isLandscape {\n                LazyHStack\n                {\n                    VStack\n                    {\n                        Image(imageFile)\n                            .resizable()\n                            .scaledToFit()\n                            .onTapGesture {\n                                self.isFullScreen.toggle()\n                            }\n                    }.frame(width: screenSize.width * 0.5)\n                    VStack\n                    {\n                        Text(imageName)\n                            .fontWeight(.bold)\n                        Text(imageDate)\n                        Text(imageDescription)\n                    }.frame(width: screenSize.width * 0.5)\n                }\n            }\n            else {\n                LazyVStack\n                {\n                    VStack\n                    {\n                        Image(imageFile)\n                            .resizable()\n                            .scaledToFit()\n                            .onTapGesture {\n                                self.isFullScreen.toggle()\n                            }\n                    }.frame(height: screenSize.height * 0.5)\n                    VStack\n                    {\n                        Text(imageName)\n                            .fontWeight(.bold)\n                        Text(imageDate)\n                        Text(imageDescription)\n                    }.frame(height: screenSize.height * 0.5)\n                }\n            }\n        }\n    }\n}\nstruct EnhancedView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        EnhancedView(imageFile: .constant(\"\"), imageName: .constant(\"\"), imageDate: .constant(\"\"), imageDescription: .constant(\"\"))\n    }\n}\n```", "```swift\nimport SwiftUI// Data structure representing an image collection\nstruct ImageCollection {\n    let name: String\n    let images: [String]\n}\nstruct HighlightView: View {\n    // Sample data\n    private let collections: [ImageCollection] = [\n        ImageCollection(name: \"Collection 1\", images: [\"FireDEV\", \"FireDEV\", \"FireDEV\"]),\n        ImageCollection(name: \"Collection 2\", images: [\"FireDEV\", \"FireDEV\", \"FireDEV\", \"FireDEV\"]),\n        ImageCollection(name: \"Collection 3\", images: [\"FireDEV\", \"FireDEV\"])\n    ]\n    private let adaptiveColumns = [GridItem(.adaptive(minimum: 300))]\n    @State private var isClicked: Bool = false\n    @State private var imageFile: String = \"\"\n    @State private var imageName: String = \"\"\n    @State private var imageDate: String = \"\"\n    @State private var imageDescription: String = \"\"\n    @State private var selectedCollection: ImageCollection?\n    var body: some View {\n        NavigationView {\n            GeometryReader { geometry in\n                if geometry.size.width > geometry.size.height {\n                    // Horizontal mode, show side panel\n                    HStack {\n                        // Side Panel\n                        List(collections, id: \\.name) { collection in\n                            Button(action: {\n                                selectedCollection = collection\n                            }) {\n                                Text(collection.name)\n                            }\n                        }\n                        .frame(width: geometry.size.width * 0.25)\n                        // Images\n                        ScrollView {\n                            LazyVGrid(columns: adaptiveColumns, spacing: 20) {\n                                if let images = selectedCollection?.images {\n                                    ForEach(0..<images.count, id: \\.self) { i in\n                                        Image(images[i])\n                                            .resizable()\n                                            .scaledToFill()\n                                            .frame(width: 300, height: 300)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // Vertical mode, just show images\n                    ScrollView {\n                        LazyVGrid(columns: adaptiveColumns, spacing: 20) {\n                            if let images = selectedCollection?.images {\n                                ForEach(0..<images.count, id: \\.self) { i in\n                                    Image(images[i])\n                                        .resizable()\n                                        .scaledToFill()\n                                        .frame(width: 300, height: 300)\n                                }\n                            }\n                        }\n                    }\n                    .onAppear {\n                        // Select the first collection by default\n                        if selectedCollection == nil {\n                            selectedCollection = collections.first\n                        }\n                    }\n                }\n            }\n        }\n        .navigationViewStyle(StackNavigationViewStyle())\n    }\n}\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        HighlightView()\n    }\n}\n```"]