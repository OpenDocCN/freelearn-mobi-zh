["```swift\nstruct ContentView: View {\n   var body: some View { \n      Text(\"Lets Eat\").padding()\n   }\n}\n```", "```swift\n    struct ContentView: View {\n       var body: some View { \n          \"Lets Eat\" string, and both text views are enclosed in a VStack view. A VStack view contains subviews that are arranged vertically, and it is similar to a vertically oriented stack view.\n    ```", "```swift\n    struct ContentView: View {\n       var body: some View { \n          VStack {\n             Text(\"The Tap Trailhouse\").padding()\n             Text(\"Brewery, Burgers, American\")\n          }\n       }\n    }\n    ```", "```swift\n    struct ContentView: View {\n       var body: some View { \n          VStack {\n             Text(\"The Tap Trailhouse\").padding()\n             Text(\"Brewery, Burgers, American\")\n             systemName. This parameter allows you to choose one of the images in Apple's SF Symbols library. You'll replace this SF Symbols image with a photo later.Important InformationYou can learn more about the SF Symbols library here: [https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/).\n    ```", "```swift\n    struct ContentView: View {\n       var body: some View { \n          VStack {\n             Text(\"The Tap Trailhouse\")\n                .font(.headline)\n             Text(\"Brewery, Burgers, American\")\n                .font(.subheadline)\n                .foregroundColor(.secondary)\n             Image(systemName: \"photo\")\n          }\n       }\n    }\n    ```", "```swift\n    struct ContentView: View {\n       var body: some View {\n          HStack {\n             VStack {\n                Text(\"The Tap Trailhouse\")\n                   .font(.headline)\n                Text(\"Brewery, Burgers, American\")\n                   .font(.subheadline)\n                   .foregroundColor(.secondary)\n                Image(systemName: \"photo\")\n             }\n          }\n       }\n    }\n    ```", "```swift\n    HStack {\n       Spacer()\n       VStack {\n          Text(\"The Tap Trailhouse\")\n             .font(.headline)\n          Text(\"Brewery, Burgers, American\")\n             .font(.subheadline)\n             .foregroundColor(.secondary)\n          Image(systemName: \"photo\")\n       }\n       Spacer()\n    }\n    ```", "```swift\n    struct ContentView: View {\n       var body: some View {\n          HStack view is no longer needed. Note that no delegates and data sources are required to display data in the list.\n    ```", "```swift\n    import Foundation\n    import MapKit\n    struct RestaurantItem: Identifiable {\n       var id = UUID()\n       var name: String\n       var address: String\n       var city: String\n       var cuisines: [String] = []\n       var lat: CLLocationDegrees\n       var long: CLLocationDegrees\n       var imageURLString: String\n       var title: String {\n          return name\n       }\n       var subtitle: String {\n          if cuisines.isEmpty { return \"\" }\n          else if cuisines.count == 1 { return \n          cuisines.first! }\n          else { return cuisines.joined(\n          separator: \", \")}\n       }\n    }\n    let testData = [\n    RestaurantItem(name: \"The Tap Trailhouse\", address: \"17 Union St\", city: \"Boston\", cuisines: [\"Brewery\",\"Burgers\",\"American\"], lat: 42.360847, long: -71.056819, imageURLString: \"https://resizer.otstatic.com/v2/profiles/legacy/145237.jpg\"),\n    RestaurantItem(name: \"o ya\", address: \"9 East Street\", city: \"Boston\", cuisines: [\"Japanese\",\"Sushi\",\"Int'l\"], lat: 42.351353, long: -71.056941, imageURLString: \"https://resizer.otstatic.com/v2/profiles/legacy/28066\"),\n    RestaurantItem(name: \"Skipjack's Boston\", address: \"199 Clarendon St.\", city: \"Boston\", cuisines: [\"American\", \"Burgers\",\"Brewery\"], lat: 42.349887, long: -71.07484, imageURLString: \"https://resizer.otstatic.com/v2/profiles/legacy/11656\"),\n    RestaurantItem(name: \"The Elephant Walk\", address: \"900 Beacon Street\", city: \"Boston\", cuisines: [\"Panasian\", \"Vietnamese\",\"Int'l\"], lat: 42.346541, long: -71.105827, imageURLString: \"https://resizer.otstatic.com/v2/profiles/legacy/1635\"),\n    RestaurantItem(name: \"Metropolis Cafe\", address: \"584 Tremont Street\", city: \"Boston\", cuisines: [\"Mediterranean\", \"Int'l\",\"Tapas\"], lat: 42.3432, long: -71.0727, imageURLString: \"https://resizer.otstatic.com/v2/profiles/legacy/2829\")\n    ]\n    ```", "```swift\n    struct ContentView: View {\n       var restaurantItems: [RestaurantItem] = []\n       var body: some View {\n    ```", "```swift\n    struct ContentView: View {\n       var restaurantItems: [RestaurantItem] = []\n       var body: some View {\n          List(ContentView structure stores an array of RestaurantItem instances in the restaurantItems property. This array is passed to the list. For every item in the restaurantItems array, a view is created and assigned with data from the item's properties. The image for each restaurant is downloaded from the URL stored in the item's imageURLString property, and displayed using the new AsyncImage view introduced in iOS 15\\. Since there are five items in the array, five views appear in the canvas. Important InformationYou can learn more about the `AsyncImage` view at this link:[https://developer.apple.com/documentation/swiftui/asyncimage](https://developer.apple.com/documentation/swiftui/asyncimage)The `ContentView_Previews` structure passes in the `testData` array (stored in the `RestaurantItem` file) to the `ContentView` structure, which is then used to populate the view.\n    ```", "```swift\n          .mask(RoundedRectangle(cornerRadius: 9))\n       }\n       Spacer()\n    }.navigationTitle(\"Boston, MA\")    \n    ```", "```swift\n       var body: some View {\n          NavigationView { \n             List(restaurantItems) { restaurantItem in\n                RestaurantCell()\n             }.navigationTitle(\"Boston, MA\")\n          }\n       }\n    }\n    struct ContentView_Previews: PreviewProvider {\n       static var previews: some View {\n          ContentView(restaurantItems: testData)\n       }\n    }\n    struct RestaurantCell: View {\n       var body: some View {\n          NavigationLink(destination:\n    ```", "```swift\n    struct RestaurantCell: View {\n       var restaurantItem: RestaurantItem\n    ```", "```swift\n    struct ContentView: View {\n       var restaurantItems: [RestaurantItem] = []\n       var body: some View {\n          NavigationView {\n             List(restaurantItems) { restaurantItem in \n                RestaurantCell(restaurantItem: \n                restaurantItem)\n             }.navigationTitle(\"Boston, MA\"\n          }\n       }\n    }\n    ```", "```swift\n    import SwiftUI\n    UIViewRepresentable protocol is a wrapper that allows you to use any UIKit view in your SwiftUI view hierarchy.Important InformationTo learn more about the `UIViewRepresentable` protocol, visit this link: [https://developer.apple.com/documentation/swiftui/uiviewrepresentable](https://developer.apple.com/documentation/swiftui/uiviewrepresentable).\n    ```", "```swift\n    struct MapView: UIViewRepresentable {\n    func makeUIView(context: Context) -> MKMapView { \n          MKMapView(frame: .zero)\n       }\n    }\n    ```", "```swift\n    func updateUIView(_ uiView: MKMapView, context: \n    Context) {\n       let coordinate = CLLocationCoordinate2D\n       (latitude: 42.360847, longitude: -71.056819)\n       let span = MKCoordinateSpan(latitudeDelta: \n       0.001, longitudeDelta: 0.001)\n       let region = MKCoordinateRegion(center: \n       coordinate, span: span)\n       uiView.setRegion(region, animated: true)\n    }\n    ```", "```swift\n    struct MapView: UIViewRepresentable {\n       var lat: CLLocationDegrees\n       var long: CLLocationDegrees\n    ```", "```swift\n    func updateUIView(_ view: MKMapView, context: Context) {\n       let coordinate = CLLocationCoordinate2D( \n       latitude: lat, longitude: long)\n    ```", "```swift\n    struct MapView_Previews: PreviewProvider {\n       static var previews: some View {\n          MapView(lat: 42.360847, long: -71.056819)\n       }\n    }\n    ```", "```swift\n    import SwiftUI\n    struct RestaurantDetail: View {  \n       RestaurantDetail structure contains a Vstack view enclosing a map view and a second Vstack view. The map view displays a map showing the restaurant's location. The second Vstack view encloses four text views. These display the restaurant's name, cuisines, address, and city. A Spacer object pushes the first Vstack view to the top of the screen. A RestaurantItem instance is assigned to the selectedRestaurant property, and data from this instance is used to populate the RestaurantDetail structure's views.To create the preview in the canvas, the `RestaurantDetail_Previews` structure passes in the first `RestaurantItem` instance in the `testData` array. Note that the `RestaurantDetail` instance is enclosed in a `NavigationView` instance to make the navigation bar appear in the preview.\n    ```", "```swift\n    var body: some View {\n        NavigationLink(destination: \n        RestaurantDetail(selectedRestaurant: \n        restaurantItem )){\n            Spacer()\n    ```", "```swift\nstruct ContentView: View {\n   var restaurantItems: [RestaurantItem] = testData\n   var body: some View {\n```"]