["```swift\nlet phrase: String = \"The quick brown fox jumps over the lazy dog\" \nlet numberOfFoxes: Int = 1 \nlet numberOfAnimals: Int = 2 \n\nlet averageCharactersPerWord: Float = (3+5+5+3+5+4+3+4+3) / 9 \nprint(averageCharactersPerWord) // 3.8888888 \n\n/* \nphrase = \"The quick brown ? jumps over the lazy ?\" // Doesn't compile \n*/ \n\nvar anotherPhrase = phrase \nanotherPhrase = \"The quick brown  jumps over the lazy \" \nprint(phrase) // \"The quick brown fox jumps over the lazy dog\"\nprint(anotherPhrase) // \"The quick brown  jumps over the lazy \"\n\nvar phraseInfo = \"The phrase\" + \" has: \" \nprint(phraseInfo) // \"The phrase has: \" \n\nphraseInfo = phraseInfo + \"\\(numberOfFoxes) fox and \\\n  (numberOfAnimals) animals\" \nprint(phraseInfo) // \"The phrase has: 1 fox and 2 animals\" \n\nprint(\"Number of characters in phrase: \\(phrase.count)\")\n\nlet multilineExplanation = \"\"\"\nWhy is the following phrase often used?\n\"The quick brown fox jumps over the lazy dog\"\nThis phrase contains every letter in the alphabet.\n\"\"\" \n\nlet phrasesAreEqual = phrase == anotherPhrase \nprint(phrasesAreEqual) // false \n\nlet phraseHas43Characters = phrase.count == 40 + 3 \nprint(phraseHas43Characters) // true \n\n```", "```swift\n let phrase: String = \"The quick brown fox jumps over the lazy dog\"\n```", "```swift\nlet numberOfFoxes: Int = 1 \nlet numberOfAnimals: Int = 2 \n```", "```swift\nlet averageCharactersPerWord: Float = (3+5+5+3+5+4+3+4+3) / 9 \n```", "```swift\nprint(averageCharactersPerWord)\n```", "```swift\n/* \nphrase = \"The quick brown ? jumps over the lazy ?\" // Doesn't compile \n*/\n```", "```swift\nvar anotherPhrase = phrase \n```", "```swift\nanotherPhrase = \"The quick brown  jumps over the lazy \"\n```", "```swift\nprint(phrase) // \"The quick brown fox jumps over the lazy dog\" \nprint(anotherPhrase) // \"The quick brown  jumps over the lazy \"\n```", "```swift\nvar phraseInfo = \"The phrase\" + \" has: \" \nprint(phraseInfo) // \"The phrase has: \"\n```", "```swift\nphraseInfo = phraseInfo + \"\\(numberOfFoxes) fox and \\(numberOfAnimals)\n  animals\" \nprint(phraseInfo) // \"The phrase has: 1 fox and 2 animals\" \n```", "```swift\nprint(\"Number of characters in phrase: \\(phrase.count)\") \n```", "```swift\nlet multilineExplanation = \"\"\"\nWhy is the following phrase often used?\n\"The quick brown fox jumps over the lazy dog\"\nThis phrase contains every letter in the alphabet.\n\"\"\"\n```", "```swift\nlet phrasesAreEqual: Bool = phrase == anotherPhrase \nprint(phrasesAreEqual) // false \n```", "```swift\nlet phraseHas43Characters: Bool = phrase.characters.count == 40 + 3  \nprint(phraseHas43Characters) // true \n```", "```swift\nlet clearlyAString: String = \"This is a string literal\" \n```", "```swift\nlet clearlyAString = \"This is a string literal\" \n```", "```swift\nvar dayOfTheWeek: String = \"Monday\" \ndayOfTheWeek = \"Tuesday\" \ndayOfTheWeek = \"Wednesday\" \ndayOfTheWeek = nil \n```", "```swift\n// Start of the game\nvar numberOfFingersHeldUpByFinn: Int?\n// Finn's hand behind his back\nnumberOfFingersHeldUpByFinn = nil\n// Finn shows his hand\nnumberOfFingersHeldUpByFinn = 3\n// Finn puts hand back behind his back\nnumberOfFingersHeldUpByFinn = nil\n// Finn shows his hand\nnumberOfFingersHeldUpByFinn = 1\nprint(numberOfFingersHeldUpByFinn)\n// End of the game\nlet lastNumberOfFingersHeldUpByFinn: Int = numberOfFingersHeldUpByFinn!\n```", "```swift\nvar numberOfFingersHeldUpByFinn: Int? \n```", "```swift\nnumberOfFingersHeldUpByFinn = nil \n```", "```swift\nnumberOfFingersHeldUpByFinn = 3 \n```", "```swift\nnumberOfFingersHeldUpByFinn = \"three\" // Doesn't compile because \"three\" isn't an Int or nil\n```", "```swift\nnumberOfFingersHeldUpByFinn = nil  \n```", "```swift\nnumberOfFingersHeldUpByFinn = 1 \nprint(numberOfFingersHeldUpByFinn)  \n```", "```swift\nprint(numberOfFingersHeldUpByFinn ?? \"Unknown\")\n```", "```swift\nlet lastNumberOfFingersHeldUpByFinn: Int = numberOfFingersHeldUpByFinn! \n```", "```swift\nlet lastNumberOfFingersHeldUpByFinn: Int = numberOfFingersHeldUpByFinn \n  // Does not compile \n```", "```swift\n// Start of the game \nvar numberOfFingersHeldUpByFinn: Int? \n// Hand behind his back \nnumberOfFingersHeldUpByFinn = nil \nprint(numberOfFingersHeldUpByFinn) // nil \n// End of the game \nlet lastNumberOfFingersHeldUpByFinn: Int = numberOfFingersHeldUpByFinn! \n```", "```swift\nvar legalName: String!  \n// At birth \nlegalName = nil \n// At birth registration \nlegalName = \"Alissa Jones\" \n// At enrolling in school \nprint(legalName) \n// At enrolling in college \nprint(legalName) \n// Registering Marriage \nlegalName = \"Alissa Moon\" \n// When meeting new people \nprint(legalName) \n```", "```swift\nlet legalName: String!  \n```", "```swift\nvar input: Int! = 5 // Int! \nprint(input) // 5 \nvar output1 = input // Int? \nprint(output1 as Any) // Optional(5) \nvar output2 = input + 1 // Int \nprint(output2) // 5\n```", "```swift\nfunc nameOfFunction(parameterLabel1 parameter1: ParameterType1, parameterLabel2 parameter2: ParameterType2,...) -> OutputType { \n\n   // Function's implementation \n   // If the function has an output type,  \n   // the function must return a valid value \n   return output \n}\n```", "```swift\n// Input parameters and output \nfunc fullName(givenName: String, \n              middleName: String, \n              familyName: String) -> String {\n\n    return \"\\(givenName) \\(middleName) \\(familyName)\" \n} \n```", "```swift\nlet myFullName = fullName(givenName: \"Keith\", \n                          middleName: \"David\", \n                          familyName: \"Moon\") \n\nprint(myFullName) // Keith David Moon \n```", "```swift\n// Input parameters, with a side effect and no output \nfunc printFullName(givenName: String, \n                   middleName: String, \n                   familyName: String) { \n\n    print(\"\\(givenName) \\(middleName) \\(familyName)\") \n} \n```", "```swift\nprintFullName(givenName: \"Keith\", middleName: \"David\", familyName: \n  \"Moon\") \n```", "```swift\n// No inputs, with an output \nfunc authorsFullName() -> String { \n\n    return fullName(givenName: \"Keith\", \n                    middleName: \"David\",\n                    familyName: \"Moon\") \n}\n```", "```swift\nlet authorOfThisBook = authorsFullName()\n```", "```swift\n// No inputs, no output \nfunc printAuthorsFullName() { \n\n    let author = authorsFullName() \n    print(author) \n}\n```", "```swift\nprintAuthorsFullName()\n```", "```swift\nfunc fullName(givenName: String, \n              middleName: String, \n              familyName: String = \"Moon\") -> String { \n\n    return \"\\(givenName) \\(middleName) \\(familyName)\" \n}\n```", "```swift\nlet keith = fullName(givenName: \"Keith\", middleName: \"David\") \nlet alissa = fullName(givenName: \"Alissa\", middleName: \"May\") \nlet laura = fullName(givenName: \"Laura\", \n                     middleName: \"May\", \n                     familyName: \"Jones\") \nprint(keith) // Keith David Moon \nprint(alissa) // Alissa May Moon \nprint(laura)  // Laura May Jones \n```", "```swift\nfunc combine(_ givenName: String, _ familyName: String) -> String {\n    return \"\\(givenName) \\(familyName)\" \n} \n\nfunc combine(_ integer1: Int, _ integer2: Int) -> Int { \n    return integer1+integer2 \n} \n\nlet combinedString = combine(\"Finnley\", \"Moon\") \nlet combinedInt = combine(5, 10) \nprint(combinedString) // Finnley Moon \nprint(combinedInt) // 15 \n```", "```swift\nclass Person { \n\n}\n```", "```swift\nlet givenName: String \nlet middleName: String \nlet familyName: String \nvar countryOfResidence: String = \"UK\"\n```", "```swift\ninit(givenName: String, middleName: String, familyName: String) { \n    self.givenName = givenName\n    self.middleName = middleName\n    self.familyName = familyName\n}\n```", "```swift\nvar displayString: String { \n    return \"\\(self.fullName()) - Location: \\\n      (self.countryOfResidence)\"\n} \n```", "```swift\nfunc fullName() -> String { \n    return \"\\(givenName) \\(middleName) \\(familyName)\" \n} \n```", "```swift\nfinal class Friend: Person { \n\n} \n```", "```swift\nvar whereWeMet: String? \n\noverride var displayString: String { \n    let meetingPlace = whereWeMet ?? \"Don't know where we met\"\n    return \"\\(super.displayString) - \\(meetingPlace)\" \n} \n```", "```swift\nfinal class Family: Person { \n\n}\n```", "```swift\nfinal class Family: Person { \n\n    let relationship: String \n\n    init(givenName: String, \n         middleName: String, \n         familyName: String = \"Moon\",\n         relationship: String) { \n\n        self.relationship = relationship \n        super.init(givenName: givenName, \n                   middleName: middleName, \n                   familyName: familyName) \n    } \n} \n```", "```swift\noverride var displayString: String { \n\n    return \"\\(super.displayString) - \\(relationship)\" \n} \n```", "```swift\nlet steve = Person(givenName: \"Steven\", \n                    middleName: \"Paul\", \n                    familyName: \"Jobs\") \n\nlet richard = Friend(givenName: \"Richard\", \n                     middleName: \"Adrian\", \n                     familyName: \"Das\") \nrichard.whereWeMet = \"Worked together at Travel Supermarket\" \n\nlet finnley = Family(givenName: \"Finnley\", \n                     middleName: \"David\", \n                     relationship: \"Son\") \n\nlet dave = Family(givenName: \"Dave\", \n                  middleName: \"deRidder\", \n                  familyName: \"Jones\", \n                  relationship: \"Father-In-Law\") \ndave.countryOfResidence = \"US\" \n\nprint(steve.displayString) \n// Steven Paul Jobs \n\nprint(richard.displayString) \n// Richard Adrian Das - Worked together at Travel Supermarket \n\nprint(finnley.displayString) \n// Finnley David Moon - Son \n\nprint(dave.displayString) \n// Dave deRidder Jones - Father-In-Law\n```", "```swift\nclass Person {\n     //...\n}\n```", "```swift\nclass Person {\n    let givenName: String\n    let middleName: String\n    let familyName: String\n    var countryOfResidence: String = \"UK\"\n    //...\n}\n```", "```swift\nclass Person { \n    let givenName: String \n    let middleName: String \n    let familyName: String \n    var countryOfResidence: String = \"UK\" \n\n    init(givenName: String, middleName: String, familyName: String) { \n        self.givenName = givenName \n        self.middleName = middleName \n        self.familyName = familyName \n    } \n    //... \n} \n```", "```swift\nclass Person { \n    let givenName: String \n    let middleName: String \n    let familyName: String \n    var countryOfResidence: String \n\n    init(givenName: String, \n         middleName: String, \n         familyName: String, \n         countryOfResidence: String = \"UK\") { \n\n        self.givenName = givenName \n        self.middleName = middleName \n        self.familyName = familyName \n        self.countryOfResidence = countryOfResidence \n    } \n    //... \n} \n\n```", "```swift\nclass Person { \n    //... \n    var displayString: String { \n        return \"\\(self.fullName()) - Location: \\\n          (self.countryOfResidence)\" \n    } \n    //... \n} \n```", "```swift\nvar displayString: String { \n    return \"\\(fullName()) - Location: \\(countryOfResidence)\" \n} \n```", "```swift\n\nclass Person { \n    //... \n    func fullName() -> String { \n        return \"\\(givenName) \\(middleName) \\(familyName))\" \n    } \n    //... \n}\n```", "```swift\n\nfinal class Friend: Person { \n    var whereWeMet: String? \n    //... \n} \n```", "```swift\nfinal class Friend: Person { \n    //... \n    override var displayString: String { \n\n        let meetingPlace = whereWeMet ?? \"Don't know where we met\"\n        return \"\\(super.displayString) - \\(meetingPlace)\" \n    } \n} \n```", "```swift\nfinal class Family: Person {\n\n    let relationship: String\n\n    init(givenName: String, \n         middleName: String, \n         familyName: String = \"Moon\", \n         relationship: String) {\n\n        self.relationship = relationship\n        super.init(givenName: givenName, \n                   middleName: middleName, \n                   familyName: familyName)\n    }\n    //...\n}\n```", "```swift\nlet steve = Person(givenName: \"Steven\", \n                   middleName: \"Paul\", \n                   familyName: \"Jobs\") \n\nlet richard = Friend(givenName: \"Richard\", \n                     middleName: \"Adrian\", \n                     familyName: \"Das\") \nrichard.whereWeMet = \"Worked together at Travel Supermarket\" \n\nlet finnley = Family(givenName: \"Finnley\", \n                     middleName: \"David\", \n                     relationship: \"Son\") \n\nlet dave = Family(givenName: \"Dave\", \n                  middleName: \"deRidder\", \n                  familyName: \"Jones\", \n                  relationship: \"Father-In-Law\") \ndave.countryOfResidence = \"US\" \n\nprint(steve.displayString) \n// Steven Paul Jobs \n\nprint(richard.displayString) \n// Richard Adrian Das - Worked together at Travel Supermarket \n\nprint(finnley.displayString) \n// Finnley David Moon - Son \n\nprint(dave.displayString) \n// Dave deRidder Jones - Father-In-Law\n```", "```swift\nlet steve = Person.init(givenName: \"Steven\", \n                        middleName: \"Paul\", \n                        familyName: \"Jobs\") \n```", "```swift\nclass MovieReview { \n    let movieTitle: String \n    var starRating: Int // Rating out of 5 \n    init(movieTitle: String, starRating: Int) { \n        self.movieTitle = movieTitle \n        self.starRating = starRating \n    } \n} \n\n// Write a review \nlet shawshankReviewOnYourWebsite = MovieReview(movieTitle: \"Shawshank \n  Redemption\", starRating: 3)     \n\n// Post it to social media \nlet referenceToReviewOnTwitter = shawshankReviewOnYourWebsite \nlet referenceToReviewOnFacebook = shawshankReviewOnYourWebsite \n\nprint(referenceToReviewOnTwitter.starRating) // 3 \nprint(referenceToReviewOnFacebook.starRating) // 3 \n\n// Reconsider the review  \nshawshankReviewOnYourWebsite.starRating = 5 \n\n// The change is visible from anywhere with a reference to the object  \nprint(referenceToReviewOnTwitter.starRating) // 5 \nprint(referenceToReviewOnFacebook.starRating) // 5\n```", "```swift\nstruct PersonName { \n\n} \n```", "```swift\nstruct PersonName { \n    let givenName: String \n    let middleName: String \n    var familyName: String \n} \n```", "```swift\nfunc fullName() -> String { \n    return \"\\(givenName) \\(middleName) \\(familyName)\" \n}\n```", "```swift\nmutating func change(familyName: String) { \n    self.familyName = familyName \n}\n```", "```swift\nvar alissasName = PersonName(givenName: \"Alissa\", \n                             middleName: \"May\", \n                             familyName: \"Jones\")\n```", "```swift\nmutating func change(familyName: String) { \n    self.familyName = familyName \n} \n```", "```swift\nlet alissasBirthName = PersonName(givenName: \"Alissa\", \n                                  middleName: \"May\", \n                                  familyName: \"Jones\") \nprint(alissasBirthName.fullName()) // Alissa May Jones \nvar alissasCurrentName = alissasBirthName \nprint(alissasCurrentName.fullName()) // Alissa May Jones \n```", "```swift\nalissasCurrentName.change(familyName: \"Moon\") \nprint(alissasBirthName.fullName()) // Alissa May Jones \nprint(alissasCurrentName.fullName()) // Alissa May Moon \n```", "```swift\nclass Person { \n\n    let birthName: PersonName \n    var currentName: PersonName \n    var countryOfResidence: String \n\n    init(name: PersonName, countryOfResidence: String = \"UK\") { \n        birthName = name \n        currentName = name \n        self.countryOfResidence = countryOfResidence \n    } \n\n    var displayString: String { \n        return \"\\(currentName.fullName()) - Location: \\\n          (countryOfResidence)\" \n    } \n} \n```", "```swift\nvar name = PersonName(givenName: \"Alissa\", middleName: \"May\", familyName: \"Jones\") \nlet alissa = Person(name: name) \nprint(alissa.currentName.fullName()) // Alissa May Jones \n```", "```swift\nalissa.birthName.change(familyName: \"Moon\") // Does not compile. \n  // Compiler tells you to change let to var \n```", "```swift\nprint(alissa.birthName.fullName()) // Alissa May Jones \nprint(alissa.currentName.fullName()) // Alissa May Jones \nalissa.currentName.change(familyName: \"Moon\") \nprint(alissa.birthName.fullName()) // Alissa May Jones \nprint(alissa.currentName.fullName()) // Alissa May Moon \n```", "```swift\nenum ComparisonResult : Int { \n    case orderedAscending \n    case orderedSame \n    case orderedDescending \n} \n```", "```swift\nenum Title { \n    case mr \n    case mrs \n    case mister \n    case miss \n    case dr \n    case prof \n    case other \n} \n```", "```swift\nlet title1 = Title.mr\n```", "```swift\nlet title2: Title \ntitle2 = .mr\n```", "```swift\nenum CompassPoint { \n    case North, South, East, West \n} \n```", "```swift\nenum Title: String { \n    case mr = \"Mr\" \n    case mrs = \"Mrs\" \n    case mister = \"Master\" \n    case miss = \"Miss\" \n    case dr = \"Dr\" \n    case prof = \"Prof\" \n    case other // Inferred as \"other\" \n} \n```", "```swift\nenum Rating: Int { \n    case worst   // Infered as 0 \n    case bad     // Infered as 1 \n    case average // Infered as 2 \n    case good    // Infered as 3 \n    case best    // Infered as 4 \n} \n```", "```swift\nlet title1 = Title.mr \nprint(title1.rawValue) // \"Mr\" \n```", "```swift\nenum Title: String { \n    case mr = \"Mr\" \n    case mrs = \"Mrs\" \n    case mister = \"Master\" \n    case miss = \"Miss\" \n    case dr = \"Dr\" \n    case prof = \"Prof\" \n    case other // Inferred as \"other\" \n\n    func isProfessional() -> Bool { \n        return self == Title.dr || self == Title.prof \n    }\n}\n```", "```swift\nenum Title: String { \n    case mr = \"Mr\" \n    case mrs = \"Mrs\" \n    case mister = \"Master\" \n    case miss = \"Miss\" \n    case dr = \"Dr\" \n    case prof = \"Prof\" \n    case other // Inferred as \"other\" \n\n    var isProfessional: Bool { \n        return self == Title.dr || self == Title.prof \n    } \n} \n```", "```swift\nlet loganTitle = Title.mr\nlet xavierTitle = Title.prof\nprint(loganTitle.isProfessional) // false\nprint(xavierTitle.isProfessional) // true\n```", "```swift\nenum Title { \n    case mr \n    case mrs \n    case mister \n    case miss \n    case dr \n    case prof \n    case other(String) \n} \n```", "```swift\nlet mister: Title = .mr\nlet dame: Title = .other(\"Dame\")\n```", "```swift\nstruct PersonName { \n    let givenName: String \n    let middleName: String \n    var familyName: String \n\n    func fullName() -> String { \n        return \"\\(givenName) \\(middleName) \\(familyName)\" \n    } \n\n    mutating func change(familyName: String) { \n        self.familyName = familyName \n    } \n} \n\nclass Person { \n\n    let birthName: PersonName \n    var currentName: PersonName \n    var countryOfResidence: String \n\n    init(name: PersonName, countryOfResidence: String = \"UK\") { \n        birthName = name \n        currentName = name \n        self.countryOfResidence = countryOfResidence \n    } \n\n    var displayString: String { \n        return \"\\(currentName.fullName()) - Location: \\\n          (countryOfResidence)\" \n    } \n} \n```", "```swift\n// No input, no output \nlet printAuthorsDetails: () -> Void = { \n    let name = PersonName(givenName: \"Keith\", \n                          middleName: \"David\", \n                          familyName: \"Moon\") \n    let author = Person(name: name) \n    print(author.displayString) \n} \nprintAuthorsDetails() // \"Keith David Moon - Location: UK\" \n```", "```swift\n// No input, Person output \nlet createAuthor: () -> Person = { \n    let name = PersonName(givenName: \"Keith\", \n                          middleName: \"David\", \n                          familyName: \"Moon\") \n    let author = Person(name: name) \n    return author \n} \nlet author = createAuthor() \nprint(author.displayString) // \"Keith David Moon - Location: UK\" \n```", "```swift\n// String inputs, no output \nlet printPersonsDetails: (String, String, String) -> Void = { given, \n  middle, family in \n    let name = PersonName(givenName: given, \n                          middleName: middle, \n                          familyName: family) \n    let author = Person(name: name) \n    print(author.displayString) \n} \nprintPersonsDetails(\"Kathleen\", \"Mary\", \"Moon\") \n// \"Kathleen Mary Moon - Location: UK\" \n```", "```swift\n// String inputs, Person output \nlet createPerson: (String, String, String) -> Person = { given, \n  middle, family in \n    let name = PersonName(givenName: given, \n                          middleName: middle, \n                          familyName: family) \n    let person = Person(name: name) \n    return person \n} \nlet felix = createPerson(\"Felix\", \"Robert\", \"Moon\") \nprint(felix.displayString) // \"Felix Robert Moon - Location: UK\"\n```", "```swift\n// No input, no output \nlet printAuthorsDetails: () -> Void = { \n    let name = PersonName(givenName: \"Keith\", middleName: \"David\", \n      familyName: \"Moon\") \n    let author = Person(name: name) \n    print(author.displayString) \n} \n```", "```swift\nprintAuthorsDetails() // \"Keith David Moon - Location: UK\" \n```", "```swift\n// No input, Person output \nlet createAuthor: () -> Person = { \n    let name = PersonName(givenName: \"Keith\", middleName: \"David\", \n      familyName: \"Moon\") \n    let author = Person(name: name) \n    return author \n} \nlet author: Person = createAuthor() \nprint(author.displayString) // \"Keith David Moon - Location: UK\" \n```", "```swift\nlet author = createAuthor() \nprint(author.displayString) // \"Keith David Moon - Location: UK\"\n```", "```swift\n// String inputs, no output \nlet printPersonsDetails: (String, String, String) -> Void = { given, \n  middle, family in \n    let name = PersonName(givenName: given, middleName: middle, \n      familyName: family) \n    let author = Person(name: name) \n    print(author.displayString) \n} \nprintPersonsDetails(\"Kathleen\", \"Mary\", \"Moon\") // \"Kathleen Mary Moon \n  - Location: UK\" \n```", "```swift\n(String, String, String) -> Void \n```", "```swift\ngiven, middle, family in \n```", "```swift\n// String inputs, Person output \nlet createPerson: (String, String, String) -> Person = { given, middle, \n  family in \n    let name = PersonName(givenName: given, \n                          middleName: middle, \n                          familyName: family) \n    let person = Person(name: name) \n    return person \n} \nlet felix = createPerson(\"Felix\", \"Robert\", \"Moon\") \nprint(felix.displayString) // \"Felix Robert Moon - Location: UK\"\n```", "```swift\nclass Person { \n    //.... \n    var saveHandler: ((Bool) -> Void)? \n\n    func saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n        saveHandler = handler \n        // Send person information to remove database \n        // Once remote save is complete, it calls saveComplete(Bool) \n        // We'll fake it for the moment, and assume the save is \n          // complete.\n        saveComplete(success: true)\n    } \n\n    func saveComplete(success: Bool) { \n        saveHandler?(success) \n    } \n} \n```", "```swift\nvar saveHandler: ((Bool) -> Void)? \n```", "```swift\nfunc saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n    saveHandler = handler \n    // Send person information to remove database \n    // Once remote save is complete, it calls saveComplete(Bool)\n    // We'll fake it for the moment, and assume the save is complete.\n    saveComplete(success: true) \n}\n```", "```swift\nfunc saveComplete(success: Bool) { \n    saveHandler?(success) \n} \n```", "```swift\nlet fox = createPerson(\"Fox\", \"Richard\", \"Moon\") \nfox.saveToRemoteDatabase(handler: { success in \n    print(\"Saved finished. Successful: \\(success)\") \n}) \n```", "```swift\nlet fox = createPerson(\"Fox\", \"Richard\", \"Moon\") \nfox.saveToRemoteDatabase() { success in \n    print(\"Saved finished. Successful: \\(success)\") \n} \n```", "```swift\nprotocol Saveable {\n      var saveNeeded: Bool { get set }\n      func saveToRemoteDatabase(handler: @escaping (Bool) -> Void)\n}\n```", "```swift\nclass Person: Saveable { \n    //.... \n    var saveHandler: ((Bool) -> Void)? \n    var saveNeeded: Bool = true  \n\n    func saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n         saveHandler = handler \n         // Send person information to remove database    \n         // Once remote save is complete, it calls \n           // saveComplete(Bool) \n         // We'll fake it for the moment, and assume the save is \n           // complete.\n         saveComplete(success: true)\n    } \n\n    func saveComplete(success: Bool) { \n        saveHandler?(success) \n    } \n} \n```", "```swift\nvar saveNeeded: Bool { get set }\n```", "```swift\nfunc saveToRemoteDatabase(handler: @escaping (Bool) -> Void)\n```", "```swift\nclass Person: Saveable { \n    //.... \n    var saveHandler: ((Bool) -> Void)? \n\n    func saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n        saveHandler = handler \n        // Send person information to remove database \n        // Once remote save is complete, it calls saveComplete(Bool) \n        // We'll fake it for the moment, and assume the save is \n          // complete.\n        saveComplete(success: true)\n    } \n\n    func saveComplete(success: Bool) { \n        saveHandler?(success) \n    } \n} \n```", "```swift\nclass Person: Saveable { \n    //.... \n    var saveHandler: ((Bool) -> Void)? \n    var saveNeeded: Bool = true  \n\n    func saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n         saveHandler = handler \n         // Send person information to remove database    \n         // Once remote save is complete, it calls saveComplete(Bool) \n         // We'll fake it for the moment, and assume the save is \n           // complete.\n         saveComplete(success: true)\n    } \n\n    func saveComplete(success: Bool) { \n        saveHandler?(success) \n    } \n} \n```", "```swift\nclass Reminder: Saveable { \n\n    var dateOfReminder: String // There is a better way to store dates, \n      // but this suffice currently.  \n    var reminderDetail: String // eg. Ali's birthday \n\n    init(date: String, detail: String) { \n        dateOfReminder = date \n        reminderDetail = detail \n    } \n    var saveHandler: ((Bool) -> Void)? \n    var saveNeeded: Bool = true \n\n    func saveToRemoteDatabase(handler: @escaping (Bool) -> Void) { \n        saveHandler = handler \n        // Send reminder information to remove database \n        // Once remote save is complete, it calls \n          // saveComplete(success: Bool) \n        // We'll fake it for the moment, and assume the save is \n          // complete.\n        saveComplete(success: true)\n    } \n\n    func saveComplete(success: Bool) { \n        saveHandler?(success) \n    } \n} \n```", "```swift\nclass SaveManager { \n    func save(_ thingToSave: Saveable) { \n        thingToSave.saveToRemoteDatabase { success in \n            print(\"Saved! Success: \\(success)\") \n        } \n    } \n} \nlet nick = createPerson(\"Nick\", \"Edward\", \"Moon\") // This closure was \n  // covered in the previous recipe\nlet birthdayReminder = Reminder(date: \"12/06/2008\", detail: \"Nick's \n  Birthday\")\nlet saveManager = SaveManager()\nsaveManager.save(nick) \nsaveManager.save(birthdayReminder) \n```"]