- en: Chapter 1. The Anatomy of an Android App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We live in an age where technologies are being developed and have become more
    and more accessible than ever before. The rise of the mobile computing platform
    has taken the technology evolution to a new high. The phones and tablets are getting
    smarter day by day and becoming the alternatives to a traditional PC. In this
    fiercely competitive world of mobile computing, every traditional PC manufacturers
    to small start-ups are in the race brining the devices of various form factors.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will show you how to take advantage of your existing C# skills
    to write applications that run on Android powered devices. While most of this
    book will be focused on learning how to develop Android apps using C# and Xamarin.Android,
    we will start with a more general discussion of Android. What is Android? How
    does Android facilitate the task of creating great mobile apps? This chapter will
    help you answer these questions by providing a base-level understanding of the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the Android platform
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android platform versions and feature releases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android applications (building blocks)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android platform
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android platform has been one of the most powerful, evolving, and advanced
    mobile operating systems developed in recent years, which provides various services
    and features, that helps developers to build rich mobile applications. Android
    is an open source operating system currently developed and maintained by Google.
    Due to its open source nature, it has a larger community base of developers and
    device manufacturers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The Android operating system was primarily designed for low powered computing
    phones, but later, its base was widen to various form factors, including smartphones,
    tablets, Android TV, and Wearables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Versions of Android
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android operating system has evolved with a series of frequent updates since
    its initial beta release in November 2007\. Identifying the version of the Android
    platform can be somewhat confusing; there is a version number, API level, and
    nickname, and these are sometimes used interchangeably.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The version number represents a release of the platform. Sometimes, a new release
    is created to deliver new capabilities, while sometimes it is created to fix bugs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: The API level is an integer value that represents a set of capabilities. As
    the API level increases, new capabilities are delivered to the developer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists all the major Android platform releases in the reverse
    chronological order:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Platform version
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: API level
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Release date
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Feature updates
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 5.1 (Lollipop)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '22'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 03/09/2015
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Stability and performance improvements over Lollipop.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds multiple SIM card support.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5.0 (Lollipop)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '21'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 11/12/2014
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Introduced new runtime ART that replaced Dalvik.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete UI overhaul with an introduction to material design.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved lock screen notification.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated the media API for better camera capture and media playback.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the project Volta to increase the battery life.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4W, 4.4W.1, 4.4W.2 (KitKat Wearables)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '20'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 06/25/2014
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Initial release for the Android Wear platform's smart watches.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fork of same Android 4.4 KitKat code branch with added wearable extensions.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.4.x (KitKat)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '19'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 10/31/2013
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The default interface is made white instead of blue.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added wireless printing capability.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for translucent navigation and status bars.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability for apps to use immersive mode to allow navigation and status bars hidden
    while maintaining user interaction.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action overflow menu buttons are always visible, even for the devices with the
    hardware Menu key.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New framework (property animation) for UI transitions.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in screen recording feature.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced **Android Runtime** (**ART**) as a new experimental runtime environment.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other security enhancements and bug fixes.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.3.x (Jelly Bean)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '18'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 07/24/2013
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Supports restricted access mode for new user profiles.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced a platform support for Khronos OpenGL ES 3.0, providing better performance
    for 2D and 3D graphics rendering.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth low energy support.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimized location and sensor capabilities, including hardware geo fencing optimizations.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many security enhancements, performance enhancements, and bug fixes.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.2, 4.2.2 (Jelly Bean)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '17'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 11/13/2012
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Improved the hardware-accelerated 2D renderer to make the animation smoother.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced the interactive screensaver mode called Daydream.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a presentation window and external display support.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full native support for **right-to-left** (**RTL**) layouts.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numerous bug fixes.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.1, 4.1.x (Jelly Bean)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 07/09/2012
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Faster and smoother interface.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bi-directional text and other language support.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced expandable notification.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the new activity launcher animation via `ActivityOptions`.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved `WebView` to provide better HTML5 video viewing and canvas animation.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.0.3, 4.0.4 (Ice Cream Sandwich)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '15'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 12/16/2011
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Bug fixes and stability improvements.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New APIs, including a social stream API in the Contacts provider.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better camera performance.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smoother screen rotation.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.0, 4.0.1, 4.0.2 (Ice Cream Sandwich)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '14'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 10/19/2011
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Major interface overhaul with the new Roboto font family.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unified the UI framework to work for phones, tablets, and more.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock screen improvements with the ability to access apps from lock screen.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced the new voice input engine.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved media streaming capabilities.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to shut down applications from the recent apps list with a swipe.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware acceleration of the UI.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.2.x (Honeycomb)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '13'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 07/15/2011
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Optimizations for a wider range of tablets.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added a system-wide sync facility that made the SD card files accessible to
    apps from the system media store.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes and other minor improvements.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.1 (Honeycomb)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '12'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 05/10/2011
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity API for USB accessories.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various UI framework updates.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resizable home screen app widgets.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for an HTTP proxy for each connected Wi-Fi access point.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-performance Wi-Fi lock, maintaining high-performance Wi-Fi connections
    when the device's screen is off.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated the animation framework class with `ViewPropertyAnimator` and animating
    background color.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.0 (Honeycomb)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '11'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 02/22/2011
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Added a new user interface, which optimized tablets.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced an action bar, giving access to contextual quick actions at the top
    of the screen.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the fragment, a self-contained container that can be embedded in an activity.
    It has its own life cycle callback and is used to design tablets.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added the system-wide clipboard.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved the status bar notification to support more content-rich notifications.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added new animation frameworks.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.3.3, 2.3.7 (Gingerbread)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '10'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 02/02/2011
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Improvements and bug fixes.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.3, 2.3.1, 2.3.2 (Gingerbread)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '9'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 12/06/2010
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Updated the user interface design for simplicity and speed.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for **Near Field Communication** (**NFC**).
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for extra-large screen sizes and resolutions.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native support for more sensors, including gyroscopes and barometers.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduced the concurrent garbage collection for improved app responsiveness
    and smoother animation.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.2.x (Froyo)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '8'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 05/20/2010
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Improved speed, memory, and performance optimizations.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved application speed using the JIT compilation.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for the **Android Cloud to Device Messaging** (**C2DM**) service.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for installing applications to the SD card memory.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USB tethering and Wi-Fi hotspot functionality.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bug fixes and security patch updates.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.1 (Eclair)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '7'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 01/12/2010
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Minor API changes and bug fixes.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.0.1 (Eclair)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '6'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 12/03/2009
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Minor API changes and bug fixes.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.0 (Donut)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '5'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 10/26/2009
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Updated camera features, including flash, digital zoom, white balance, color
    effect, and scene mode.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimized hardware speed and UI overhaul.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MotionEvent` class enhanced to track multi-touch events.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanded account sync, allowing users to add multiple accounts to a device.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.6 (Donut)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '4'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 09/15/2009
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Multilingual speech synthesis engine added to convert a text to speech.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated support for CDMA/EVDO, 802.1x, VPNs technologies.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.5 (Cupcake)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '3'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 04/27/2009
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Added third-party keyboard support with text prediction and user dictionary.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video recording and playback in MPEG-4 and 3GP formats.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added copy and paste features in the web browser.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animated screen transitions.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Home screen widget support.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1.1'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 02/09/2009
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: First Android platform update.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated the Map application.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-call screen timeout default is now longer when using the speakerphone.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for saving attachments from MMS.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds support for marquee in layouts.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various bug fixes.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '1.0'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 09/23/2008
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: First commercial version of the Android platform.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Included apps such as Android Market, Gmail, Camera, Calendar, Contacts, Google
    Talk, Map, Media Player, Picture, Settings, and Browser.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi and Bluetooth support.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instant messaging, text messaging, and MMS support.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Android platform is comprised of applications, operating systems, runtime,
    middleware, services, and libraries. The following diagram provides a high-level
    view of how each layer in the Android platform is organized, and the subsequent
    sections provide a brief description of each major component:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/E5ZZ97vm.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: The Linux kernel
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android is a Linux-based operating system designed and customized primarily
    for mobile devices, such as smartphones and tablets. Positioned at the bottom
    of the Android stack, the Linux kernel provides the interface between device hardware
    and Android software layers. The latest versions of Android are based on the Linux
    kernel version 3.4 or above (version 2.6 for versions prior to Android 4.0).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: The Linux kernel provides some of the core system services such as memory management,
    process and task management, power management, networking stack, and various device
    drivers to interact with the device hardware.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Native libraries
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android is delivered with a set of native libraries written in C/C++, which
    provide various types of services. These libraries predominantly come from the
    open source community.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: The Android runtime
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android apps run within the **Dalvik Virtual Machine** (**Dalvik VM**),
    which is similar to a Java VM but has been optimized for devices with limited
    memory and processing capacity.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android apps are initially compiled to the Java byte code using the Java
    compiler, but they have an additional compilation step that transforms the Java
    byte code to the Dalvik byte code using a process called the **Just in Time**
    (**JIT**) compilation. The output produced by the JIT compiler is suitable to
    run within the Dalvik VM:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/xxjTzrxi.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: Dalvik is delivered with the Android core libraries. These libraries do not
    align with a specific Java platform (JSE, JEE, or JME) but rather act as a hybrid
    platform most closely aligned with JSE, minus the user interface-focused components,
    AWT and Swing. The **Android Application Framework** (**AAF**) provides an alternate
    means of creating user interfaces.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Although Dalvik worked pretty well, the downside is that there is a huge lag
    every time the application is launched. That's where the new virtual machine,
    ART, comes in.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: ART is precursor to Dalvik. It is the new application runtime introduced in
    Android 4.4 (KitKat) as a new experimental runtime environment and is implemented
    fully in Android 5.0 (Lollipop). This is primarily designed for performance and
    an improved app start up time. The primary difference between ART and Dalvik is
    the compilation approach. While Dalvik uses JIT, ART employs a new concept called
    **Ahead-of-Time** (**AOT**). What this means is that new apps are getting compiled
    during installation, before they are even launched. To learn more about ART, you
    can refer to [https://source.android.com/devices/tech/dalvik/](https://source.android.com/devices/tech/dalvik/).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The application framework
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application framework is the part of the Android platform, which is most
    familiar to developers. It is delivered as a set of Java libraries and allows
    you to build user interfaces, interact with device capabilities such as the camera
    or location services, load and work with various types of application resources,
    and perform many more useful tasks. Here are some of the major services:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**ActivityManager**: This service is responsible for the activity life cycle,
    state management, and controls the activity stack. Later, in this chapter, we
    will learn more about the activity life cycle.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WindowManager**: This service is responsible for managing the z-order list
    of screens. Each activity is attached to a window that is used to display the
    content on the screen, which is controlled by `WindowManager`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content providers**: This provides an interface to publish and share data
    between applications.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View system**: This provides a set of UI controls to build an application
    user interface.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NotificationManage**: This service manages application alerts and notifications.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource** Manager: This service provides access to resources, such as user
    interface layout, strings, color, dimensions, and so on.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PackageManager**: This holds the metadata of all the installed applications
    on the device.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TelephonyManager**: This provides information on the telephone services available
    on the device, such as status and subscriber information, to the application.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LocationManager**: This provides access to system location services.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application layer
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the top of the stack sits the humble application, the component that actually
    delivers value to the user. Android comes with a set of applications that provide
    base functionality such as managing contacts, using the phone, checking e-mails,
    and browsing the web. The key to Android's success is the vast array of third-party
    applications that can be installed, which allow users to do things, such as stream
    live sports events, edit a movie captured on the phone, interact with friends
    through their favorite social media site, and much more.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: The building blocks of the Android application
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's spend some time discussing applications—those things we write that
    provide value to the user. The Android applications are made up of various types
    of classes and resources. The following sections describe the different building
    blocks that an application can be composed of.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: The Android packages (.apk)
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applications are delivered for installation in an Android package format. An
    Android package is created as the result of compiling an Android app and is an
    archive file with an `.apk` extension.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'An Android package contains all of the code and the supporting files required
    to run a single application, including the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Dalvik executables (`.dex` files)
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native libraries
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application manifest
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Android packages can be installed directly via e-mails, URLs, or memory
    cards. They can also be installed indirectly through app stores such as Google
    Play.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: The application manifest
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the Android applications have a manifest file (`AndroidManifest.xml`) that
    tells the Android platform everything it needs to know to successfully run the
    application, including the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Minimum API level required by the application
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware/software features used or required by the application
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permissions required by the application such as location or camera
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial screen (Android activity) to start with when the application is
    launched
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to install the application in the external memory
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries, other than AAF, required by the application and so on
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activities
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most fundamental parts of an Android application is an activity.
    An activity represents a single screen with a user interface through which a user
    can interact with the application. A single application is composed of many activities.
    For example, a phone book application can have multiple activities representing
    different functions, such as list contacts, add contacts, capture contact photos,
    and so on.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: A user interacts with an activity through one or more Views, which are described
    later in this chapter. If you are familiar with the **Model-View-Controller**
    (**MVC**) pattern, you would have noticed that the activities fulfill the role
    of the controller.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: The life cycle of an activity
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Activities have a well-defined life cycle that can be described in terms of
    states, transitions, and events. The following diagram provides a graphical view
    of the life cycle of an activity:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/uFpzoHIM.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: 'The states depicted in the preceding diagram are derived, which means that
    there is no `State` variable on an activity that explicitly identifies one of
    these states, but the state is implied and useful for discussion. The following
    table describes the behavior of an activity based on its state:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: State
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`Running`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: The activity has been created and initialized and is visible and available to
    the user for interaction.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`Paused`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The activity view is being partially blocked by another activity.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '`Stopped`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The activity is no longer visible to the user. The activity has not been destroyed,
    and the state is retained but it is placed in the background and no processing
    is allowed.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The events of an activity
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During the transition between states, a series of events are called on the
    activity. These events provide developers a platform for various types of processing.
    The following table describes the different event callbacks and typically, the
    processing done in the application during each callback:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Event
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Called
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Typical processing
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '`onCreate`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: When an activity is created, generally from a user choosing to start the app
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: This creates Views
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This initializes variables
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allocates long-lived resources
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStart`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: After `onCreate` and right before an activity becomes visible to the user
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: This allocates resources
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResume`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Before an activity is ready to start interacting with a user and immediately
    after the `onStart` callback
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: This initializes UI widgets for viewing
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This starts animations or videos
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This starts listening for GPS updates
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onPause`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: When an activity's view has become partially blocked and is not the focus of
    input
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: This commits unsaved updates
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This pauses animations or videos
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This stops listening for GPS updates
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStop`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: When an activity's view is no longer visible to the user
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: This releases resources
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onRestart`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: An activity is being placed back in the foreground, generally, because the user
    has selected the back button
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: This allocates resources
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroy`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Before the activity is destroyed
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: This cleans up resources that may have been allocated by an activity
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Something that is not obvious to developers and new to Android is the way the
    framework deals with device orientation changes. By default, when the orientation
    of a device is changed from portrait to landscape, Android destroys and recreates
    existing activities to help ensure that the most appropriate layout is used for
    the current device orientation.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: If needed, this behavior can be overridden and activities can be retained. We
    will discuss special considerations in dealing with state and other processing
    concerns related to this topic in Chapter 6, *Making Your App Orientation-aware*.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Fragments
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A fragment is a reusable user interface component, introduced since Android
    3.0 (API level 11), and is primarily intended to build dynamic and modular user
    interfaces for different screen sizes. A fragment is always embedded in an activity,
    and like any other view, it lives in a `ViewGroup` (**ViewGroups** are explained
    in more detail later in this chapter) inside the view hierarchy. Like an activity,
    a fragment defines its own layout and has its own life cycle callbacks. When designing
    your application to support multiple form factors, fragments can be reused to
    optimize the user experience based on the available screen space.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Let's examine how fragments can be used to develop a modular user interface
    with the following example.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure depicts the wireframe of a newsreader application, designed
    to work on both smartphone and tablet devices. As a tablet has more screen space,
    the news list and the details are presented as split views in a single activity,
    whereas the phone uses two different activities for this:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/XkseWZq2.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
- en: 'The Android smartphone uses two activities: **ActivityA** containing **FragmentA**
    is used to show the news list and **ActivityB** containing **FragmentB** is used
    to show the details of the selected news. In a tablet, we have a single activity
    **ActivityA** that contains both **FragmentA** and **FragmentB.**'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: As you can see here, **FragmentA** and **FragmentB** are the same implementation
    and are reused in different layout configurations to provide a different user
    experience on both the phone and tablet.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: The fragment life cycle
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike the activity life cycle, understanding the fragment life cycle can be
    a bit tricky. In the following section, we will dig more into the fragment behavior
    and its life cycle methods.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: The Android fragment has its own life cycle method, which is very similar to
    an activity. It contains all of the activity life cycle methods and is supplied
    with some additional callback methods. Fragments are always embedded in an activity,
    so its callbacks are directly affected due to the host activities' life cycle.
    For example, if the host activity receives `onStop()`, all the attached fragments
    also receive the `onStop()` callback.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram provides a graphical view of the fragment life cycle:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/wePfR5c7.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at each of the fragment life cycle events that gets called:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`onInflate`: This event is called only if we define a fragment directly in
    an activity layout using the `fragment` tag, and while the content view of the
    activity is being inflated (typically, when `setContentView()` is called on an
    activity). This method passes `AttributeSet` that holds all the fragment attributes
    passed from the `fragment` tag. These attributes can be stored for later use.
    At this stage, the fragment is not even associated with an activity, and hence,
    we cannot perform any user interface-related tasks.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onAttach`: This is called once the fragment instance is associated with an
    activity.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreate`: This event is called after `onAttach` and before `onCreateView`;
    when the fragment instance is created or recreated. At this point, the base activity
    that holds this fragment is in the process of being created. At this point, you
    may use a background thread to get data for the fragment to use.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreateView`: At this point, the fragment instantiates its user interface
    and loads the view object hierarchy it contains. This method passes three arguments:
    `LayoutInflater`, `ViewGroup`, and `bundle`. The `LayoutInflater` argument can
    be used to inflate any layout for a fragment. A `bundle` specifies whether the
    fragment is created freshly or recreated. If it is recreated from the previous
    saved state, then the bundle will be non-null.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onActivityCreated`: This method is called when the activity that contains
    the fragment has been created, and the fragment''s view hierarchy is instantiated.
    At this point, you can access the view by its ID using the `findViewById()` method
    and make any changes before it is visible to the user.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStart`: This method is tied to the activity `onStart()` callback and is
    called when the fragment becomes visible to the user. At this point, the fragment
    is visible but not available for user interaction just yet.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResume`: This method is called before the fragment is ready to start interacting
    with a user. At this point, the fragment is said to be running and the user is
    free to perform any operations on the app.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onPause`: This method is tied to the activity `onPause()` callback and is
    called when the fragment is taken out of the foreground.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onStop`: This method is tied to the activity `onStop()` callback and called
    when the fragment is not visible.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroyView`: This method tells the fragment that the view created from
    `onCreateView()` is now detached from the fragment. This callback is called after
    `onStop()` and before the `onDestroy()` method.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDestroy`: This method is called when the fragment is no longer in use. This
    is called after `onStop()` and before `onDetach()`.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDetach`: This method is called after `onDestroy()`, and when the fragment
    is no longer attached to an activity.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Services are application components that run in the background to perform long-running
    operations with no direct access to the user interface. A typical long-running
    task can be periodic downloading of data from the Internet, persisting multiple
    records in a database, performing file I/O, fetching a phone contacts list, and
    so on. Such long-running tasks can be implemented using services to provide a
    smooth user experience by letting the user interact with other activities, while
    long-running jobs are being processed in the background.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Content providers
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content providers manage access to a central repository of data such as contacts.
    It provides you with a standard interface through which the other applications
    can access and manage the data repository.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Broadcast receivers
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Broadcast receivers are components that perform some type of processing in response
    to system-wide broadcasts. Broadcasts are generally initiated by the system for
    events such as low battery, taking a picture, or turning on Bluetooth. Applications
    may also choose to send broadcasts; a content provider might send a broadcast
    when data, such as a contact, has been updated. While broadcast receivers do not
    have a user interface, they may indirectly cause updates to a status.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Views and ViewGroups
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everything that you see in an Android app is a View; buttons, labels, text boxes,
    and radio buttons are all examples of Views. Views are organized in a hierarchy
    using various types of ViewGroups. A ViewGroup is a special kind of View that
    is used to arrange (layout) other Views on the screen.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Declarative versus programmatic View creation
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Views and ViewGroups can be created using two different methods: programmatically
    or declaratively. When using a programmatic approach, a developer makes API calls
    to create and position each individual View on the screen. When using a declarative
    approach, a developer creates XML layout files that specify how Views should be
    arranged. The declarative method enjoys several advantages stated as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: It provides better separation of the visual design of an application from the
    processing logic
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows multiple layouts to be created to support multiple devices or device
    configurations with a single code base
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development tools, such as Android Studio and the Android plugins for Eclipse
    and Xamarin Studio Android designer, allow you to view the user interface as you
    build it, without the need to compile and execute your application after each
    change
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While most developers prefer the declarative method of View creation; in practice,
    some combination of programmatic and declarative methods is often required.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: User interface widgets
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android provides a comprehensive set of user interface widgets that can be used
    to build a rich user experience. All of these widgets are subtypes of a View and
    can be organized into sophisticated layouts using various types of ViewGroups.
    All of the user interface widgets can be found in the `android.widget` package
    within the application framework.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts some of the basic Android widgets:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ThiUXqjF.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
- en: Common layouts
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The application framework has a number of subclasses of `ViewGroup`, each of
    which provides a unique and useful way of organizing content:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dWevjEtX.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram depicts some of the common layout managers available in
    Android. Layout managers are the `ViewGroup` classes that act as containers to
    host child views or layouts. Each of these standard layout managers provides a
    specific strategy to manage the size and position of its children. For example,
    the `LinearLayout` class places its children either horizontally or vertically,
    one view adjacent to the other.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the different types of layout managers available
    in Android:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Scenario
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Linear layout
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: This organizes its children into a single horizontal or vertical row and creates
    a scrollbar when required.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Use this when widget positions flow horizontally or vertically.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Relative layout
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: This organizes child objects relative to each other or to the parent.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Use this when widget positions can best be described in relationship to another
    widget (to the left of) or the boundary area of the parent (right side, centered).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Table layout
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: This organizes its children into rows and columns.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Use this when widget positions would naturally fit into rows and columns. This
    is great when multiple columns of entry and labels are needed.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: For complex layout scenarios, Android allows layouts to be nested. Deeply nested
    layouts can have an impact on the performance and should be avoided if possible.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Adapter layouts
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For layouts that are driven by a dynamic data source, the application framework
    has a set of classes derived from `AdapterView`:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/AN5eT7Jh.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram depicts two of the most common adapter layouts:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '**ListView**: This organizes content from the data source into a scrolling
    single column list'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GridView**: This organizes content from the data source into a grid of columns
    and rows'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML layout files
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a UI using a declarative method, Android provides an XML vocabulary
    with tags that define the various types of elements that can compose a View. The
    concept behind Android XML layout files is very similar to the way HTML tags are
    used to define web pages or Microsoft''s XAML tags are used to define **Windows
    Presentation Foundation** (**WPF**) user interfaces. The following example shows
    a simple View using a linear layout and containing a search entry field and search
    button:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Element and attribute names
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Care has been taken to align the names for elements and attributes in the XML
    vocabulary with class and method names from the application framework. In the
    previous example, the element names `LinearLayout`, `TextView`, and `Button` correspond
    to class names in the application framework. Likewise, in the `Button` element,
    the `android:text` attribute corresponds to the `setText()` setter on the class.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: The View and layout identifiers
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each View can have a unique integer ID associated with it and can be used to
    reference the View from within an application''s code. In the XML file, the ID
    is specified as a user-friendly text name. For example, consider the following
    line of code:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the `@` operator tells the parser that it should treat the
    remainder of the string as an ID resource; the `+` symbol tells the parser that
    this is a new resource name that should be added to the resource file, `R.java`.
    The resource file defines integer constants that can be used to reference resources.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Using XML layouts from activities
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'XML layouts can easily be loaded by an application at runtime. This task is
    generally performed from within the `onCreate()` method of an activity using the
    `setContentView()` method. For example, consider the following line of code:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Intents
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Intents are messages that can be sent to the various types of components in
    an Android app in order to request some type of action to be performed. Intents
    may be used to accomplish any of the following:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Start an activity with the option of receiving a result
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start or stop a service
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notify the component of conditions, such as low battery or time zone change
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request an action from another app, such as request the map app to display a
    location or request that the camera app take a picture and save it
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating an Android application involves more than simply writing code. A rich
    mobile app requires things such as images, audio files, animations, menus, and
    style, just to name a few. The application framework provides APIs that can be
    used to load and utilize the various types of resources with your Android apps.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: The R.java file
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Resources are generally referenced from within an application using an integer
    constant that is automatically assigned when the resource is added to the project
    and compiled. These constants are placed in a Java source file named `R.java`.
    The following example shows the `R.java` class from a simple application:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 资源通常通过在应用程序中使用一个整数常量来引用，该常量在资源被添加到项目并编译时自动分配。这些常量放置在一个名为`R.java`的Java源文件中。以下示例展示了来自一个简单应用程序的`R.java`类：
- en: '[PRE3]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Summary
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have provided a concise and adequate introduction to the
    Android platform and the Android application's building blocks. We have also seen
    how the Android platform has evolved with rich features being added to each platform
    releases.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了一个简洁且充分的介绍，包括Android平台及其Android应用程序构建块。我们还了解了Android平台是如何随着每个平台版本的发布而不断进化，并增加了丰富的功能。
- en: In the next chapter, we will turn our attention to Xamarin.Android and the facilities
    it provides to allow the Android development with .NET and C#.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注Xamarin.Android及其提供的功能，这些功能允许使用.NET和C#进行Android开发。
