- en: Chapter 7. Designing for Multiple Screen Sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In early 2011, Android Honeycomb 3.0 (API level 11) was released specifically
    to support larger screen-sized tablets. Since then, the Android ecosystem has
    exploded and all subsequent Android releases have been targeted to offer more
    screen sizes, including smart phones, tablets, and Google TV.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will walk you through dealing with multiple screen sizes and making
    your application compatible to work with smart phones and tablets. In the course
    of this chapter, we will extend the `POIApp` we have been developing and optimize
    it for Android tablets. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Android tablets ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and managing fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making `POIApp` compatible with Android tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with `ListFragment` to display the POI list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the multi-pane layout for tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding alternative layouts for Android tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `DialogFragment` to display dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with fragments for older Android devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retaining the fragment state on device configuration changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Android tablets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first ever Android tablet was released in 2011 with Android Version 3.0\.
    However, all subsequent Android releases were targeted to support a range of screen
    sizes, including small, medium, and large ones. Due to its open nature, the Android
    ecosystem has a variety of device manufacturers, and hence, there are devices
    with different screen sizes and densities.
  prefs: []
  type: TYPE_NORMAL
- en: Applications built for Android smart phones can run on tablets without making
    any changes. However, if the UI is not optimized, it will give you a disagreeable
    user experience. Developers must take the extra space as an opportunity and use
    it efficiently to design a UI that can display more information on larger screens.
    For example, the Gmail application in the Android phone will have two activities
    for displaying the recent e-mail list and details of a selected e-mail. However,
    the same app in the tablet displays the e-mail list and the details on the same
    page, using the multi-pane split view layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key things to be considered while designing user interfaces for Android
    applications are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Screen size**: This is the actual physical screen size of the device; generally,
    grouped into small, normal, large, and extra large. Although there is no official
    confirmation on the minimum and maximum screen sizes, they usually range from
    2.55 to 10.1 inches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen density**: This is the number of pixels present in the physical area
    of the screen, which is represented as dpi (dots per inch). High-density screens
    have more pixels than low-density screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resolution**: This is the number of pixels present on the device screen.
    It is usually defined as `width x height`. For example, the resolution for a Nexus
    5 device is `1080 x 1920`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen orientation**: A device''s orientation could be either in landscape
    or portrait mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Android tablet emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have built the `POIApp` to display the list of POIs fetched from
    the server and tested it on the Android smart phone. Before we begin with extending
    the `POIApp` to support Android tablets, let's create a new emulator instance
    for the Android tablet and run the existing `POIApp` built so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create an emulator for the tablet, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to **Tools** and open **Google Emulator Manager**.
    This will open the AVD manager window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a new emulator, click on the **Create** button, in the right-hand
    side pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **AVD Name** field to `Nexus10`, select **Nexus 10** from the **Device**
    drop-down menu, set the **Target** field to `Android 4.4.x`, if needed, uncheck
    the **Hardware keyboard present** option, and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the **Target** setting specifies the version of the Android platform
    and the API level that will be used for the emulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the configurations such as the **AVD name**, **Device**, **Skin**, **Target**,
    **Memory Options**, and so on, as shown in the following screenshot:![](img/dGehWnxQ.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're using third-party emulator solutions, such as Xamarin Android Player
    or Genymotion, you can download either the Nexus 7 or Nexus 10 simulator for testing
    purposes in the tablet configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now start the Nexus 10 emulator created in the previous steps and run the existing
    `POIApp` built so far. The following screenshot depicts the UI of the `POIApp`
    on the tablet that has not been optimized for larger screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/SBTOtSYO.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the additional screen real estate, the UI elements can be organized in
    various locations to make the app look nicer. Currently, the `POIApp` is using
    two activities for displaying the POI list and POI details. For tablets, we can
    use a multi-pane split layout to display both the POI list and details in the
    same activity by sharing the same screen space. Android activities are meant to
    be for single purposes and they don't allow embedding one activity inside another.
    The Android fragment can be used to solve this problem. A fragment is a reusable
    user interface component used to build dynamic and modular user interfaces for
    different screen sizes. An activity can contain one fragment or multiple fragments.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fragments are reusable pieces of a user interface component that provide flexibility
    to the application design. As you have already learnt from Chapter 1, *The Anatomy
    of an Android App*, fragments are reusable mini-activities, such as UI components,
    that can manage their own life cycles. Fragments are always intended to work without
    depending on another activity or fragment. Like an `Activity` class, a fragment
    class needs to extend from the `Fragment` class. To make things even easier, Android
    provides some of the additional specialized fragment subclasses such as `ListFragment`,
    `DialogFragment`, and `PreferenceFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: The following table shows the list of fragment subclasses and their purposes.
    You may also extend any of the following fragment subclasses to create your own
    fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '`ListFragment`'
  prefs: []
  type: TYPE_NORMAL
- en: This displays a list of data items from different sources, such as an array,
    a cursor, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '`DialogFragment`'
  prefs: []
  type: TYPE_NORMAL
- en: This displays a fragment as a floating dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: '`PreferenceFragment`'
  prefs: []
  type: TYPE_NORMAL
- en: This displays the hierarchical app preferences list. The preferences are saved
    when any changes are made by a user. The Nexus device settings screen design follows
    the `PreferenceFragment` pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new fragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A fragment can be seen as a modular component of an activity, which maintains
    its own life cycle, that handles user events and can be added to or removed from
    a running activity. The process of creating a fragment is very similar to creating
    an activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create and add a fragment in Android:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step toward creating a fragment is to define its layout. Like the
    activity layout, you can either use the drag-and-drop interface builder available
    in Xamarin Studio, or you may use the XML code editor to create the layouts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new class that directly extends the `Fragment` class or its subclasses.
    The following code snippet extends the `Fragment` base class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now implement the necessary fragment methods. To begin with, let's override
    the `OnCreateView()` method. This method adds the fragment to the view hierarchy
    and returns a `View` instance that represents the fragment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The fragments UI can be created in two ways: by declaring the XML layout and
    inflating the fragment layout inside `OnCreateView()`, or by creating all the
    interfaces dynamically. For simplicity, the XML declarative approach is always
    preferred:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Optionally, you may override other fragment life cycles such as `OnPause()`,
    `OnResume()`, and so on, to control other life cycle event callbacks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let''s add the fragments to the activity. This can be done in two
    ways: either by declaratively adding the activity layout, or by adding it programmatically.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following code snippet to add the fragment by declaring the `&lt;fragment&gt;`
    tag in the activity layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the fragment dynamically, you need to first create a fragment placeholder
    container layout and assign an ID to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have specified the `ViewGroup` in which the fragment will be added
    dynamically, you can use the `FragmentTransaction` instance to add, remove, and
    replace the transactions. Use the following snippets to get the instance of `FragmentTransaction`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then use the `Add()`, `Remove()`, and `Replace()` methods by passing
    the instance of the fragment and the ID of the `View` to which the fragment will
    be added. Once the fragment transactions are completed, you must call the `Commit()`
    method for the changes to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So far, you have a fair idea of how to work with fragments; let's now proceed
    to make the `POIApp` work with fragments and reuse the fragments to optimize the
    tablet's layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Making POIApp compatible with Android tablets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered a lot of ground on the fragment basics and life cycle
    in Chapter 1, *The Anatomy of an Android App*. I recommend that you read the concepts
    if you haven't gone through them already. Let's now go through the steps to create
    and manage fragments and build the `POIApp` to support the multi-pane tablet layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the `POIApp` is using two activities: `POIListActivity` for displaying
    the list of POIs, and `POIDetailsActivity` for displaying the details. Now we
    will create two new fragments: `POIListFragment` and `POIDetailFragment`, which
    will be reused for both the smart phone and multi-pane tablet layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/iZ5oaLuk.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice the following points in the preceding screenshot, which will be implemented
    in the rest of the sections in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The phone layout contains two activities; `POIListActivity` and `POIDetailsActivity`,
    that host `POIListFragment` and `POIDetailFragment` respectively. Here, the activities
    will work like placeholders to hold fragments. Most of the application logic is
    to be moved from an activity to fragments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `POIListFragment` will contain the logic to initialize the list view, download
    the data using methods declared in the `POIService` class, and prepare the UI.
    Currently, the same logic is placed on `POIListActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `POIDetailFragment` will contain the logic to display the details of the
    selected POI and the ability to create, update, and delete the POI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tablet real estate is comparatively larger, and hence its layout can hold
    both `POIListFragment` and `POIDetailFragment` on a single activity. This allows
    us to reuse the fragments and enables different user experiences on different
    screen sizes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following sections in this chapter will guide you through how to use fragments
    to build the `POIApp` using the multi-pane split view layout for Android tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Using fragments for displaying POIDetails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make things simple, we will move step by step. First, let's create
    a new fragment to display the details of the POI, and this will enable you to
    edit, update, and delete the POI. Currently, the `POIDetailActivity` activity
    contains the same logic. At this point, let's keep it simple and not complicate
    things by thinking about the multi-pane tablet layout.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the POIDetailsFragment layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin with creating a new layout file for the POI details fragment and
    name it `POIDetailFragment.axml`:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Resources/Layout` folder in the **Solution** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Add** and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog box, click on **Android** and select **Layout**,
    enter `POIDetailFragment` in the **Name** field, and select **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that we will not make any changes to the POI details screen layout. So,
    let's just copy the layout XML source code from `POIDetail.axml` and paste it
    into the newly created `POIDetailFragment.axml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the POIDetailFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the POI details fragment layout ready, we need a corresponding
    fragment. To create `POIDetailFragment`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `POIApp` project in the **Solution** pad, right-click on it, and
    navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **New File** dialog box, click on **Android** and select **Fragment**,
    enter `POIDetailFragment` in the **Name** field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `POIDetailFragment` created in the previous steps will contain the logic
    to display the details of the POI and enables various actions, such as create,
    update, and delete the POI. Currently, the business logic is in `POIDetailsActivity`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare the following set of private variables for each of the input widgets
    we created in the layout. Add the following listing to your `POIDetailFragment`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnAttach()` method and save the reference of the `activity` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnCreateView()` method, inflate the fragment layout, and bind
    each variable to its corresponding user interface widget by calling the `FindViewById&lt;T&gt;`
    method and the `UpdateUI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy and paste the `UpdateUI()`, `SavePOI()`, `DeletePOI()`, and `ConfirmDelete()`
    methods' code from the `POIDetailsActivity` class to the `POIDetailFragment` class.
    You will get a compilation error wherever this keyword is used. Replace this with
    the activity instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now copy both the `CreateOrUpdatePOIAsync()` and `DeletePOIAsync()` methods
    from `POIDetailsActivity` to the `POIDetailFragment` class. Here, you will again
    notice a compilation error near the `Finish()` method and the `Toast` initialization.
    For the `Toast` instantiation, replace this with the activity instance and replace
    `Finish()` with `activity.Finish()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s override the `OnCreate()` method. Here, we will retrieve the details
    of the POI sent to `POIDetailFragment`. Each fragment has an `Arguments` property
    that contains the data bundles. As with activities, we can use a series of `GetXXX()`
    methods, where `XXX` represents the type of the value of a name/value pair:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with the save and delete actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `POIDetailFragment` displays the details of the selected POI to the user
    and also retains the ability to save a new or delete an existing POI. The save
    and delete actions are to be added to the action bar in `POIDetailFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide you through what is needed to add the actions
    in the `POIDetailFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the action bar button work on the fragments, you need to first enable
    this option by calling the `SetHasOptionsMenu ()` method and passing the `bool`
    value `true`. The `bool` value represents whether or not the fragment wants to
    contribute in order to populate the menu items. Add the following block to `OnCreateView()`
    before the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Chapter 5, *Adding a Details View*, we have already added the menu declaration
    to the `POIDetailMenu.xml` file. The `POIDetailFragment` will continue to use
    the same menu XML declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the fragment version of the `OnCreateOptionsMenu()` and `OnOptionsItemSelected()`
    methods in `POIDetailFragment`, and add the following code blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that in the previous code blocks, we are not making any changes to the
    logic while populating the `save` and `delete` actions. It is just the copy of
    the same code, which was used in the `POIDetailActivity` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Override the `OnPrepareOptionsMenu()` method in `POIDetailFragment` to disable
    the delete action while a new POI is being created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following listing shows how to disable the delete action when a new POI
    is being created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding the POIDetailFragment to POIDetailActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are ready with the `POIDetailFragment`, we can add it to `POIDetailActivity`
    to make it fully functional. As discussed earlier in this chapter, a fragment
    can be added to an activity in two ways: using a declarative approach, or by dynamically
    inflating the layout. For `POIDetailActivity`, we will add the fragment dynamically.'
  prefs: []
  type: TYPE_NORMAL
- en: The following sections will take you through the code refactoring process of
    adding `POIDetailFragment` to the `POIDetailActivity` activity.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the POI details activity layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have placed the entire details view layout in the `POIDetailFragment`
    layout, the `POIDetail` activity layout will have a simple container that can
    host the fragment. For this purpose, we can use `FrameLayout`.
  prefs: []
  type: TYPE_NORMAL
- en: '`FrameLayout` is a special kind of a layout manager, generally used to display
    a single item. When multiple views are added, they are placed in a stack with
    the most recently added child on the top.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make the following changes to the POI details activity layout and add
    a dummy view that acts as a placeholder to hold the fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Resources/POIDetail.axml` file, and in the **Document Outline** view,
    click on **ScrollView** and then click on **Delete**. Notice that the layout will
    be empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **FrameLayout** in the **Toolbox** and drag it to the simulator window
    to add it as a root element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **FrameLayout** in the **Document Outline** view and then click on
    the **Properties** window. Set the view ID to `poiDetailLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Source** tab in the layout editor and notice that the following
    code is generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Refactoring POIDetailActivity to add POIDetailFragment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, the `POIDetailFragment` contains the logic we wrote earlier to perform
    the add, update, or delete operations in `POIDetailActivity`. Now let''s refactor
    `POIDetailActivity` to thin out the logic and just add `POIDetailFragment` to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `POIDetailActivity` class from the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select all of the code and delete everything except the basic activity template.
    For the sake of simplicity, you may replace the whole `POIDetailActivity` class
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now it is time to add `POIDetailFragment` to `Activity`. Let's first initialize
    the `POIDetailFragment` and pass the POI details data received from `POIListActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display the details of the selected POI, the `POIDetailFragment` expects
    the POI data to be passed to it. Like any other activity, data bundles can be
    passed to a fragment using its `Arguments` property. The `Arguments` property
    has its own set of the `PutXX()` and `GetXX()` methods (`XX` represents the data
    types, such as string, double, and so on) that are used to send and retrieve data
    from fragments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code snippet to the `OnCreate()` callback right after the
    `SetContentView()` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `POIDetailActivity` layout contains a placeholder layout where the `POIDetailFragment`
    will be added. The `FragmentTransaction` class can be used to perform any of the
    fragment transactions, such as adding, replacing, or deleting fragments. Instantiate
    the fragment transaction to add `POIDetailFragment` to the `POIDetailActivity`
    view hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's now build and run the app in a simulator. Notice that you will see the
    same output that we built in Chapter 5, *Adding a Details View*. Now we are using
    `POIDetailFragment` that holds the logic to add, update, and delete POIs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same `POIDetailFragment` will be reused while creating the multi-pane split
    view layout for the tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Using the list fragment for displaying the POI list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have created a fragment using the `Fragment` subclass to display
    the details of the point of interest. Let's now use a specialized `ListFragment`
    class to create a new fragment to display the POI list fetched from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ListFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start creating the `POIListFragment`, let''s understand the following
    key concepts of `ListFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ListFragment` is a specialized `Fragment` subclass used to display the list
    of items from different data sources, such as an array or a cursor, that hold
    the query results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListFragment` provides a default layout that contains a single list view.
    However, it can be customized using your own custom layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While using a custom layout for `ListFragment`, your layout must contain a `ListView`
    object with the ID `@android:id/list`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like the normal `ListView`, the list fragment needs the instance of an adapter
    to operate on. It exposes a public `ListAdapter` property to set the list adapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can override `OnListItemClick()`, provided `ListFragment` allows you to
    detect user-click events on the list items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the POIListFragment layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, in our example, the `POIDetailsFragment` will contain a `ListView` that
    takes the full width and height of the parent and a `ProgressBar` to the center
    of the screen. We will now create a custom layout for `ListFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by creating a new layout file for the POI list fragment and name
    it `POIListFragment.axml`.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Resources/Layout` folder in the **Solution** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Add** and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog box, click on **Android** and select **Android Layout**,
    enter `POIListFragment` in the **Name** field, and select **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the layout XML source code from `POIList.axml` and paste it in to the newly
    created `POIListFragment.axml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that we are declaring the custom layout for `ListFragment`. We must change
    the list view ID to `@android:id/list`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `POILsitFragment.axml` file will have the following code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating the fragment to display the POI list using POIListFragment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the layout ready for the `POIListFragment`, let's move ahead
    to create a new fragment to display the list of POIs. Note that we are not making
    any significant changes to the logic we have written for `POIListActivity`. Instead,
    we will refactor the same logic to work with fragments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create `POIListFragment` and make it fully functional:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `POIApp` in the **Solution** pad, right-click on **Add**, and select
    **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog box, click on **Android** and select **New file**,
    enter `POIListFragment` in the **Name** field, and select **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extend it from `ListFragment` and implement `OnCreateView()` to inflate the
    POI list fragment layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the list fragments with the custom layout need to have a `ListView`
    object declaration with the ID `@android:id/list`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare the following set of private variables to hold the instance of the
    list adapter, progress bar, and list of POIs, after the download is complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnAttach()` method and save the reference of the `activity` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code blocks to the `OnCreateView()` method before the `return`
    statements to initialize the progress bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method named `DownloadPoisListAsync` (the same as declared in
    `POIListActivity`). We will be using the same logic we wrote earlier for `POIListActivity`
    with a small modification as follows. You will get a compilation error wherever
    the `this` keyword is used. Replace `this` with the `activity` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that in the preceding code blocks, we use the `ListAdapter` property
    defined in the `ListFragment` class to set the adapter instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Override the `OnResume()` life cycle method and call `DownloadPoisListAsync()`
    to start the download when a fragment is resumed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that `POIListFragment` contributes to the action bar menu items and enables
    this option for the fragment by adding the following statement to `OnCreateView()`
    before the `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the fragment version of the `OnCreateOptionsMenu` and `OnOptionsItemSelected`
    methods and paste in the following code. We are just reusing the same logic from
    `POIListActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnListItemClick()` method from `ListFragment` to detect the list
    row click action. The following code block is a copy of the same logic we wrote
    for the `POIClicked()` method in `POIListActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, the list fragment will display the list of POIs and is ready
    to be added to `POIListActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding POIListFragment to POIListActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For `POIListFragment` to work, it has to be added to `POIListActivity`. In the
    previous section, you learned how to add the fragment dynamically. Now let's add
    the `POIListFragment` using a declarative approach.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the POI list activity layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A fragment can be added to an activity view hierarchy using the `&lt;fragment&gt;`
    tag declaration in its layout. The `layout_width` and `layout_height` attributes
    of the `&lt;fragment&gt;` tag are used to control the `LayoutParams` provided
    when attaching the fragment's view to the activity layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the following changes to the POI list activity layout (`POIList.axml`)
    to add `POIListFragment` statically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The value of the `&lt;fragment&gt;` attribute should be a fully qualified fragment
    class name. The `class` attribute indicates that the specified fragment class
    will be attached to the activity's content layout.
  prefs: []
  type: TYPE_NORMAL
- en: Adding POIListFragment to POIListActivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we are ready with `POIListFragment`, and we have attached it to the
    POI list activity content layout, we do not have to do anything much inside `POIListActivity`.
    Update the existing `POIListActivity` class with the following code blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we have done a great deal of work by creating two fragments that hold
    the logic to download and display the POI details. Now it''s time to compile and
    run the app. Compile and run the application on the Android emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/jsNKGobJ.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the app will download the data from the POI web service and display
    the list of POIs on the scrollable list view. It works in exactly the same way
    as it did when we built it in Chapter 5, *Adding a Details View*, but now it works
    with fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multi-pane layout for tablets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you have a fair idea of how fragments work, and we have refactored the
    existing `POIApp` to work with fragments. The following sections will walk you
    through the key steps required to build the multi-pane layout and make the application
    compatible with Android tablets.
  prefs: []
  type: TYPE_NORMAL
- en: In Chatper 6, *Making App Orientation Aware*, we discussed the various configuration
    qualifiers to be considered while adding alternative layouts in Android. One of
    the qualifiers is the device's screen size. The Android powered device sizes ranges
    from small, normal, large, xlarge to layout-xxlarge. Since Android 3.2, Android
    has recommended that you use the `sw&lt;N&gt;dp` configuration qualifier to define
    an extra large layout for a tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that we require at least `600dp` of screen width to build a multi-pane
    layout for the `POIApp`. For this, we need add a new `layout-sw600dp` subdirectory
    under the `Resources` directory. The Android runtime will pick the layout placed
    under this directory if the device configuration matches `600dp` of width.
  prefs: []
  type: TYPE_NORMAL
- en: For tablet configuration, the `POIListActivity` layout will host both `POIListFragment`
    and the `POIDetailFragment` in a single activity. The POI list fragment will be
    placed to the left of the screen covering 40 percent of the total width, and the
    details fragment is docked to the right, covering the remaining 60 percent of
    the total width.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Studio provides an easy-to-use layout designer that allows you to alternatively
    add layouts for various device configurations without any hassle. You don't need
    to remember or manually add the different folder names for different configuration
    qualifiers. The designer takes care of creating, editing, and deleting alternative
    layouts for different configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following section shows the usages of the Xamarin Studio layout designer
    to add alternative layouts for Android tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `POIList.axml` layout file and click on the **Content** tab to open
    the layout designer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Alternative Layouts** button located in the top-left corner.
    This enables a special editor to manage the alternative layouts. The following
    screenshot depicts the special editor provided in Xamarin Studio to edit and manage
    the alternative layouts for different configurations:![](img/zOfxWkZc.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+New Version** button to add another version of the layout for
    a given configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open a dialog asking for different configuration parameters. For now,
    we will consider the minimum width for the tablet layout to be `600dp`. Enter
    the smallest screen width value as `600`, and then click on **Add**:![](img/mW606wsD.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that a new folder with the name `layout-sw600dp`, and that a new version
    of the `POIList` layout will be created in the Project Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `sw600dp` layout to edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **FrameLayout** in the **Toolbox** and drag it to the simulator window
    to add it as a root element. This will be used to add `POIDetailFragment` dynamically
    when a user selects any POI from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **FrameLayout** in the **Document Outline** view and then click on
    the **Properties** window. Set the view ID to `poiDetailLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have a list fragment and a frame layout in the screen. Let's assign 40
    percent of the screen width for the list to appear and 60 percent for the details
    layout. This can be done using the `weight` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `listFragment` from the **Document Outline** view and change the weight
    property to `2` and the `layout_width` property to `0dp`. This allows the weight
    property to decide the width of the view. Now, select `detailsLayout` from the
    document outline view, and change the weight property to `3` and the `layout_width`
    property to `0dp`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set the **Padding left**and **Padding right** properties to `20dp` for both
    `listFragment` and `detailsLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the layout built so far:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/Z73UBBUs.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Click on the **Source** tab and notice that the following code gets generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Updating the POIApp to support the multi-pane split layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an Android tablet, the POI activity layout is declared to host both the POI
    list and POI details fragments by sharing the same screen space. The `POIListFragment`
    is statically added to the layout, and `POIDetailFragment` will be added dynamically
    when a user selects any POI item from the list. The `FrameLayout` with the `detailsLayout`
    ID is used as a placeholder to host the `POIDetailFragment`. However, in mobile
    devices, when a user clicks on any POI list item, it will continue to start `POIDetailActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will take you through the changes required to make the
    `POIApp` work for the multi-pane layout in Android powered tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to find out if the device is running in the multi-pane mode.
    This is useful in order to understand whether you want to start a new activity
    or update the fragment content in the same activity. Let''s declare a static Boolean
    variable that holds the information about whether or not an app is running in
    the dual mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `detailsLayout` is not `null` and visible, then we can assume that the
    device is running in the multi-pane view mode. Add the following code blocks to
    your `POIListActivity` in the `OnCreate()` method to initialize the `isDualMode`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Currently, the new action in `POIListFragment` takes the user to `POIDetailActivity`.
    Now for tablets, instead of invoking another activity, the `POIDetailFragment`
    will be shown on the right-hand side of the same activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code blocks to the `OnOptionsItemSelected()` method under
    a new action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that, as we are not passing any details of the POI, the `POIDetailsFragment`
    will show the empty fields and allow the user to add a new POI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As in the previous steps, we need the same implementation in the `OnListItemClick()`
    method. When a user clicks on the POI list item, instead of taking them to another
    activity, the POI details will be shown on the same activity in the right-hand
    details pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `OnListItemClick()` method with the following code snippets:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are almost done! Let''s now run the `POIApp` in the Android tablet emulator.
    You will notice that the POI app shows the multi-pane layout, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/SpXNlUS6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with DialogFragment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we already covered how to use the fragment and `ListFragment`
    to optimize layout for Android tablets. Let's now discuss another specialized
    fragment subclass, `DialogFragment`. The current implementation of the `POIApp`
    uses `AlertDialog` to display the confirmation dialog to a user before deleting
    the POI. In this section, we will replace the `AlertDialog` implementation with
    `DialogFragment`.
  prefs: []
  type: TYPE_NORMAL
- en: '`DialogFragment` is used to display a fragment as a floating dialog window
    that pops up on top of the current window. `DialogFragment` is the subclass of
    fragment and was introduced in Android 3.0 API level 11\. Google recommends that
    you use `DialogFragment` for implementing the dialog because of the following
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Like normal fragments, `DialogFragment` manages its own life cycle. Events such
    as the user pressing the device's Back button or rotating the screen are handled
    in `DialogFragment`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `DialogFragment` UI can be reused and embedded inside another activity. For
    example, if you wish your dialog to appear differently on different screen sizes,
    you can embed the `DialogFragment` inside the activity layout, which is similar
    to normal fragments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although `DialogFragment` was introduced in Android 3.0, Google has released
    the Android support library, using which you can use the `DialogFragment` class
    for devices running on Android 1.6 or higher. The subsequent section (fragment
    for older Android devices) will describe how to add the Android Support Library
    to the Xamarin Studio solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keeping the preceding points in mind, we will replace the `AlertDialog` and
    use `DialogFragment` in the `POIDetailFragment` class. Creating a dialog fragment
    is similar to the process of creating normal fragments. You need to first create
    a class that inherits from `DialogFragment` and overrides one of the following
    methods to provide the view hierarchy for your dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnCreateView()`: This method is used to inflate the layout for the dialog.
    It is the same as the `Fragment.OnCreateView()` callback. If you want your fragment
    UI to be reusable / embedded inside another view, you must override `OnCreateView()`
    and inflate the layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnCreateDialog()`: This method returns an instance of `Dialog`. This method
    is called automatically while creating the layout for the dialog. As we have already
    used `AlertDialog` in the `POIApp`; in this example, we will override the `OnCreateDialog()`
    to create the `DialogFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps will show you how use the `DialogFragment` class to show
    the **Delete** confirmation dialog to a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new fragment class and name it `DeleteDialogFragment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inherit the `DeleteDialogFragment` class from `DialogFragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnCreateDialog()` method and add the following code snippets.
    The code blocks used in the `OnCreateDialog()` method are similar to the code
    we used in `POIDetailFragment` in the `DeletePOI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have constructed a basic version of `DialogFragment`. Now we need to initialize
    the fragment and use the `FragmentTransaction` to display the dialog box. Add
    the following code snippets to the `POIDetailFragment DeletePOI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Like any other fragment, the operations on the dialog fragments are done using
    fragment transactions. The `Show()` method is used to add the dialog fragment
    to the activity view hierarchy and then commit the transaction. This takes two
    parameters: an instance of the fragment transaction, and a tag. The string value
    tag can be used later to retrieve the fragment instance from the fragment manager.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now run and test the `POIApp`. Notice that the dialog fragment works great.
    However, it doesn't display the name of the POI that the user wants to delete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To display the name of the POI in the **Delete** confirmation dialog, we need
    to pass the POI name to `DeleteDialogFragment`. This can be accomplished using
    the fragment `Arguments` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code snippets to the `DeletePOI()` method after the fragment
    initialization and before calling `dialogFragment.Show()`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to make the following changes to the `DeleteDialogFragment` class
    in the `OnCreateDialog()` method to retrieve and display the name of the POI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `POIApp` and notice that the **Delete** confirmation dialog now displays
    the name of the POI to be deleted. However, when you click on the **OK** button,
    the dialog is dismissed but the `delete` action is not working. We will pass the
    event callback from the fragment dialog to the `POIDetailFragment`. This can be
    easily accomplished using the `TargetFragment` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While adding the dialog fragment, we need to provide the target fragment information
    to the dialog by calling the `SetTargetFragment()` method. This method accepts
    two parameters: an instance of fragments that is the target of the dialog, and
    an optional integer request code.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following code snippet shows the changes required in the `DeletePOI()`
    method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can access the instance of POIDetailsFragment from the dialog fragment
    using the `TargetFragment` property, and call the `DeletePOIAsync()` method to
    initiate the delete POI web service request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code shows what should be present in the `DeleteDialogFragment`
    class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run and test the `POIApp`. Notice that the `DeletePOI` is fully functional
    with `FragmentDialog`.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments for older Android devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier, the Fragment API was added in Android 3.0 API level
    11\. In the `POIApp` example discussed so far, I have assumed that the user who
    tests my application will be using Android 3.0 or later. However, if your business
    demands that you support your app for older devices, then you can still take advantage
    of the new Fragment API classes.
  prefs: []
  type: TYPE_NORMAL
- en: As there is some portion of the market still running on 3.0, Google provides
    support libraries that allow you to implement fragments while maintaining backward
    compatibility. The Fragment features are available in the V4 support library,
    and it works in Android 1.6 API level 4.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot directly use the `Fragment` class as we have used it in this chapter.
    You have to add the Support package to your solution. For users of Xamarin Studio
    5.9.x or above, while creating a new solution, you can select **Maximum Compatibility**
    for the targeted platform selection to include support packages in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can add Android support packages by navigating to **Packages**
    | **Add packages**. This will open the NuGet package browser, as shown in the
    following screenshot. You can search for Support packages and click on the **Add
    Package** button to add the selected package to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/iPwO3foe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the Android Support packages are added to the project, you can start
    implementing the fragment features for older Android devices. The Support package
    fragment classes work pretty much similar to the native Android 3.0 compatible
    fragment classes. However, the following are some of the changes required by your
    app for using the supported compatible APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: Your activity that will host the support fragment must extend now and inherit
    from `Support.V4.App.FragmentActivity`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `Support.V4.App.Fragment` instead of `Android.App.Fragment`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `SupportFragmentManager` instead of `FragmentManager`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling configuration changes with fragments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Chapter 6, *Making Your App Orientation-aware*, we discussed how Android
    activities respond to device configuration changes. In this section, we will take
    a look at the fragment behavior in the event of configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: Like activities, fragment provides the `OnSaveInstanceState()` method that can
    be used to save the state of your fragment. This works in pretty much the same
    way as its activity counterpart. The `OnSaveInstanceState()` method supplies a
    `Bundle` instance into which we can dump the data bundles. The saved fragment
    instance can be retrieved from the `OnCreate()`, `OnActivityCreated()`, or `OnCreateView()`
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide you through saving and retaining the POI list
    scroll position when the device configuration changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the index of the first visible list item and save it to a bundle in the
    `OnSaveInstanceState()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, the string `scroll_position` is used as the key
    to save the current scroll position of `ListView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Restore the saved list''s scrolling position in `OnCreate()`. Note that we
    have to use the same key that we used to save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code snippet to the `DownloadPoisListAsync()` method in the
    `POIListFragment` class. This queues a message to scroll the POI list view to
    the previously saved scroll position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the app on the Android device or emulator. Change your device
    orientation and notice that the list view scroll position is now retained.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered a lot of ground on creating and managing fragments,
    including the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Fragment` class and what it does, and creating and managing fragments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use a declarative approach for adding fragments to activities using the
    `&lt;fragment&gt;` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ListFragment` with `ListAdapter` to populate the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add alternative layout resources from Xamarin Studio layout designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to reuse the fragments to create a multi-pane split view layout for Android
    tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a dialog using `DialogFragment`, and create its view hierarchy
    using the `OnCreateDialog()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the `POIApp` layout to support large-screen Android tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with configuration changes to save and retain the fragment state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next chapter will guide you to deal with data persistence using SQLite in
    Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following references:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://android-developers.blogspot.in/2012/11/designing-for-tablets-were-here-to-help.html](http://android-developers.blogspot.in/2012/11/designing-for-tablets-were-here-to-help.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/distribute/essentials/quality/tablets.html](https://developer.android.com/distribute/essentials/quality/tablets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developer.xamarin.com/guides/android/user_interface/designer_overview/part_3_-_alternative_layout_views/](http://developer.xamarin.com/guides/android/user_interface/designer_overview/part_3_-_alternative_layout_views/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
