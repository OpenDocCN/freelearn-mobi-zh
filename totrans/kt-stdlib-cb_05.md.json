["```kt\nclass Printer(val textFormattingStrategy: (String) -> String) {\n    fun printText(text: String) {\n        val processedText = textFormattingStrategy(text)\n        println(processedText)\n    }\n}\n```", "```kt\nval lowerCaseFormattingStrategy: (String) -> String = {\n    it.toLowerCase()\n}\n\nval upperCaseFormattingStrategy: (String) -> String = {\n    it.toUpperCase()\n}\n```", "```kt\nval lowerCasePrinter = Printer(lowerCaseFormattingStrategy)\nval upperCasePrinter = Printer(upperCaseFormattingStrategy)\n```", "```kt\nval text = \"This functional-style Strategy pattern looks tasty!\"\n\nlowerCasePrinter.printText(text)\nupperCasePrinter.printText(text)\n```", "```kt\nthis functional-style strategy pattern looks tasty!\nTHIS FUNCTIONAL-STYLE STRATEGY PATTERN LOOKS TASTY!\n```", "```kt\nclass Magazine(val number: Int,\n               title: String,\n               pageCount: Int) : Publication\n```", "```kt\nclass Magazine(val number: Int,\n               val publication: Publication) :\n        Publication by publication\n```", "```kt\ninterface Rentable {\n    var currentUser: Optional<User>\n\n    fun availableToRent() = !currentUser.isPresent\n\n    fun doRent(user: User): Boolean {\n        return if (availableToRent()) {\n            currentUser = Optional.of(user)\n            true\n        } else {\n            false\n        }\n    }\n}\n```", "```kt\nclass Book(val publicationDate: Instant,\n           val author: String,\n           val publication: Publication) :\n        Publication by publication, Rentable {\n\n    override var currentUser: Optional<User> = Optional.empty()\n}\n```", "```kt\nclass Member(val currentRentals: List<Rentable>,\n             name: String,\n             isActive: Boolean,\n             user: User) : User by user\n\nclass Librarian(user: User) : User by user\n```", "```kt\nclass BasePublication(override val title: String, \n                      override val pageCount: Int): Publication\n```", "```kt\nval book = Book(Instant.now(), \"Sam\", \n        BasePublication(\"Kotlin Standard Library Cookbook\",\n         Integer.MAX_VALUE))\n\nprintln(\"${book.title} written by ${book.author} has ${book.pageCount} pages.\")\n```", "```kt\nKotlin Standard Library Cookbook written by Sam has 2147483647 pages.\n```", "```kt\nclass MyClass {\n    var property: String by MyDelegate\n}\n```", "```kt\ndependencies {\n    implementation 'com.google.code.gson:gson:2.8.4'\n}\n```", "```kt\ndata class Client(private val data: Map<String, Any>)\n```", "```kt\ndata class CreditCard(val holderName: String,\n                      val number: String,\n                      val cvcCode: String,\n                      val expiration: Long)\n```", "```kt\ndata class Client(private val data: Map<String, Any>) {\n    val name: String by data\n    val email: String by data\n    val creditCards: List<CreditCard> by data\n}\n```", "```kt\ndata class Client(private val data: Map<String, Any>) {\n    val name: String by data\n    val email: String by data\n    val creditCards: List<CreditCard> by data\n\n    /**\n     * Function for serializing instance of Client class into\n       JSON format\n     */\n    fun toJson(): String = gson.toJson(data)\n\n    companion object {\n        private val gson = Gson()\n\n        /**\n         * Utility function for instantiating Client class from\n           JSON string\n         */\n        fun fromJson(json: String): Client {\n            val mapType = object : TypeToken<Map<String,\n             Any>>() {}.type\n            val data: Map<String, Any> = gson.fromJson(json,\n             mapType)\n            return Client(data)\n        }\n    }\n}\n```", "```kt\nval SAMPLE_CLIENT_MAP = mapOf(\"name\" to \"Mark Zuck\",\n        \"email\" to \"mark@fb.com\",\n        \"creditCards\" to listOf(\n                CreditCard(\"Mark Zuckerberg\", \"123345456789\", \"123\",\n                 1527330705017),\n                CreditCard(\"Mark Zuckerberg\", \"987654321\", \"321\",\n                 1527330719816))\n)\nval client1 = Client(SAMPLE_CLIENT_MAP)\n```", "```kt\n@Language(\"JSON\")\nconst val SAMPLE_CLIENT_JSON =\n        \"{\\n  \\\"name\\\": \\\"Mark Zuck\\\",\n          \\n  \\\"email\\\": \\\"mark@fb.com\\\",\n          \\n  \\\"creditCards\\\": [\n          \\n    {\n          \\n      \\\"holderName\\\": \\\"Mark Zuckerber\\\",\n          \\n      \\\"number\\\": \\\"123345456789\\\",\n          \\n      \\\"cvc\\\": \\\"123\\\",\n          \\n      \\\"expiration\\\": 1527330705017\n          \\n    },\n          \\n    {\n          \\n      \\\"holderName\\\": \\\"Mark Zuckerber\\\",\n          \\n      \\\"number\\\": \\\"987654321\\\",\n          \\n      \\\"cvc\\\": \\\"321\\\",\n          \\n      \\\"expiration\\\": 1527330719816\n          \\n    }\n          \\n  ]\n          \\n}\"\nval client2 = Client.fromJson(SAMPLE_CLIENT_JSON)\n```", "```kt\nprintln(\"name: ${client1.name}, mail: ${client1.email}, cards: ${client1.creditCards}\")\nprintln(\"name: ${client2.name}, email: ${client2.email}, cards: ${client2.creditCards}\")\n```", "```kt\nname: Mark Zuck, email: mark@fb.com, cards: [{holderName=Mark Zuckerber, number=123345456789, cvc=123, expiration=1.527330705017E12}, {holderName=Mark Zuckerber, number=987654321, cvc=321, expiration=1.527330719816E12}]\n\nname: Mark Zuck, email: mark@fb.com, cards: [CreditCard(holderName=Mark Zuckerberg, number=123345456789, cvcCode=123, expiration=1527330705017), CreditCard(holderName=Mark Zuckerberg, number=987654321, cvcCode=321, expiration=1527330719816)]\n```", "```kt\nval initialValue = 1\n```", "```kt\nval initialValue = 1\nval changesListener: (KProperty<*>, Int, Int) -> Unit =\n { _, _: Int, newValue: Int -> println(\"Current temperature: $newValue\") }\n```", "```kt\nval initialValue = 1\nval changesListener: (KProperty<*>, Int, Int) -> Unit =\n        { _, _: Int, newValue: Int -> println(\"Current temperature: $newValue\") }\nvar temperature: Int by Delegates.observable(initialValue, changesListener)\n```", "```kt\ntemperature = 10\ntemperature = 11\ntemperature = 12\ntemperature = 30\n```", "```kt\nCurrent temperature: 10\nCurrent temperature: 11\nCurrent temperature: 12\nCurrent temperature: 30\n```", "```kt\nval initialValue = 1\n```", "```kt\nval initialTemperature = 1\nval updateCondition: (KProperty<*>, Int, Int) -> Boolean =\n { _, oldValue: Int, newValue: Int -> Math.abs(oldValue - newValue) >= 10 }\n```", "```kt\nval initialTemperature = 1\nval updateCondition: (KProperty<*>, Int, Int) -> Boolean =\n        { _, oldValue: Int, newValue: Int -> Math.abs(oldValue - newValue) >= 10 }\nvar temperature: Int by Delegates.vetoable(initialTemperature, updateCondition)\n```", "```kt\n{ _, oldValue: Int, newValue: Int -> Math.abs(oldValue - newValue) >= 10 }\n```", "```kt\ntemperature = 10\nprintln(\"Current temperature: $temperature\")\n\ntemperature = 11\nprintln(\"Current temperature: $temperature\")\n\ntemperature = 12\nprintln(\"Current temperature: $temperature\")\n\ntemperature = 30\nprintln(\"Current temperature: $temperature\")\n```", "```kt\nCurrent temperature: 1\nCurrent temperature: 11\nCurrent temperature: 11\nCurrent temperature: 30\n```", "```kt\nclass ObservableVetoable<T>(initialValue: T,\n                          val updatePrecondition: (old: T, new: T)\n                           -> Boolean,\n                          val updateListener: (old: T, new: T)\n                           -> Unit) :\n        ObservableProperty<T>(initialValue = initialValue) {\n\n    override fun beforeChange(property: KProperty<*>,\n                              oldValue: T,\n                              newValue: T): Boolean =\n            updatePrecondition(oldValue, newValue)\n\n    override fun afterChange(property: KProperty<*>,\n                             oldValue: T,\n                             newValue: T) = \n            updateListener(oldValue, newValue)\n}\n```", "```kt\nval initialTemperature = 1\nval updatePrecondition: (Int, Int) -> Boolean =\n        { oldValue, newValue -> Math.abs(oldValue - newValue) >= 10 }\n\nval updateListener: (Int, Int) -> Unit = { _, newValue -> println(newValue) }\n```", "```kt\nvar temperature: Int by ObservableVetoable(initialTemperature, \n                                           updatePrecondition, \n                                           updateListener)\n```", "```kt\npublic override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n    val oldValue = this.value\n    if (!beforeChange(property, oldValue, value)) {\n        return\n    }\n    this.value = value\n    afterChange(property, oldValue, value)\n}\n```", "```kt\ntemperature = 11\ntemperature = 12\ntemperature = 13\ntemperature = 14\ntemperature = 30\n```", "```kt\n11\n30\n```", "```kt\nclass CoffeeMaker {\n    init {\n        println(\"I'm being created right now... Ready to make some\n         coffee!\")\n    }\n\n    fun makeEspresso() {\n        println(\"Un espresso, per favore!\")\n    }\n\n    fun makeAmericano() {\n        print(\"Un caffè americano, per favore!\")\n    }\n}\n```", "```kt\nval coffeeMaker: CoffeeMaker by lazy { CoffeeMaker() }\n```", "```kt\nval coffeMaker: CoffeeMaker by lazy { CoffeeMaker() }\nprintln(\"Is the CoffeMaker created already?\")\n\n```", "```kt\ncoffeMaker.makeEspresso()\ncoffeMaker.makeAmericano()\n```", "```kt\nIs the CoffeMaker created already?\nI'm being created right now... Ready to make some coffe!\nUn espresso, per favore!\nUn caffè americano, per favore!\n```", "```kt\npublic interface Lazy<out T> {\n    public val value: T\n    public fun isInitialized(): Boolean\n}\n```", "```kt\nclass Dialog {\n    lateinit var title: String\n    lateinit var message: String\n    lateinit var messageColor: String\n    lateinit var image: ByteArray\n\n    fun show() = println(\"Dialog...\\n$this\")\n\n    override fun toString() = \"Title: $title \\nImage: $image \\nMessage:\n     $message\"\n}\n```", "```kt\nval dialog: Dialog = \n    dialog {\n        title {\n            \"Title\"\n        }\n        message {\n            text = \"Message\"\n            color = \"#FF0000\"\n        }\n        image {\n            File(\"path\")\n        }\n    }\n```", "```kt\nclass DialogBuilder() {\n private var titleHolder = \"-\"\n  private var messageHolder = StyleableText(\"-\", \"#000\")\n private var imageHolder: File = File.createTempFile(\"empty\", \"\")\n\n  class StyleableText(\n var text: String = \"\",\n      var color: String = \"#000\"\n  )\n}\n```", "```kt\nclass DialogBuilder() {\n  private var titleHolder = \"-\"\n  private var messageHolder = StyleableText(\"-\", \"#000\")\n  private var imageHolder: File = File.createTempFile(\"empty\", \"\")\n\n  fun title(block: () -> String) {\n titleHolder = block()\n }\n\n fun message(block: StyleableText.() -> Unit) {\n messageHolder.apply { block() }\n  }\n\n fun image(block: File.() -> Unit) {\n imageHolder.apply { block() }\n  }\n\n  class StyleableText(\n      var text: String = \"\",\n      var color: String = \"#000\"\n  )\n}\n```", "```kt\nclass DialogBuilder() {\n  private var titleHolder = \"-\"\n  private var messageHolder = StyleableText(\"-\", \"#000\")\n  private var imageHolder: File = File.createTempFile(\"empty\", \"\")\n\n  fun title(block: () -> String) {\n      titleHolder = block()\n  }\n\n  fun message(block: StyleableText.() -> Unit) {\n      messageHolder.apply { block() }\n  }\n\n  fun image(block: File.() -> Unit) {\n      imageHolder.apply { block() }\n  }\n\n  fun build(): Dialog = Dialog().apply {\n      title = titleHolder\n      message = messageHolder.text\n      messageColor = messageHolder.color\n\n      imageHolder.apply {\n          image = readBytes()\n } }\n\n  class StyleableText(\n      var text: String = \"\",\n      var color: String = \"#000\"\n  )\n}\n```", "```kt\nclass DialogBuilder() {\n  private var titleHolder = \"-\"\n  private var messageHolder = StyleableText(\"-\", \"#000\")\n  private var imageHolder: File = File.createTempFile(\"empty\", \"\")\n\n  constructor(initBlock: DialogBuilder.() -> Unit): this() {\n initBlock()\n }\n\n  fun title(block: () -> String) {\n      titleHolder = block()\n  }\n\n  fun message(block: StyleableText.() -> Unit) {\n      messageHolder.apply { block() }\n  }\n\n  fun image(block: File.() -> Unit) {\n      imageHolder.apply { block() }\n  }\n\n  fun build(): Dialog = Dialog().apply {\n      title = titleHolder\n      message = messageHolder.text\n      messageColor = messageHolder.color\n\n      imageHolder.apply {\n          image = readBytes()\n      }\n  }\n\n  class StyleableText(\n      var text: String = \"\",\n      var color: String = \"#000\"\n  )\n}\n```", "```kt\nfun dialog(block: DialogBuilder.() -> Unit): Dialog =            DialogBuilder(block).build()\n```", "```kt\nval dialog =\n        dialog {\n            title {\n                \"Warning!\"\n            }\n            message {\n                text = \"You have 99999 viruses on your computer!\"\n                color = \"#FF0000\"\n            }\n            image {\n                File.createTempFile(\"red_alert\", \"png\")\n            }\n        }\n```", "```kt\nDialog...\nTitle: Warning! \nImage: [B@548c4f57 \nMessage: You have 99999 viruses on your computer!\n```", "```kt\nfun message(block: StyleableText.() -> Unit) {\n    messageHolder.apply { block() }\n}\n```", "```kt\nconstructor(initBlock: DialogBuilder.() -> Unit): this() {\n    initBlock()\n}\n```", "```kt\nval result =\n        html {\n            head {\n                title { +\"HTML encoding with Kotlin\" }\n            }\n            body {\n                h1 { \"HTML encoding with Kotlin\" }\n                p { +\"this format can be used as an alternative to HTML\" }\n\n                // an element with attributes and text content\n                a(href = \"http://jetbrains.com/kotlin\") { +\"Kotlin\" }\n            }\n        }\nprintln(result)\n```", "```kt\n<html>   \n    <head>     \n        <title>HTML encoding with Kotlin</title>   \n    </head>   \n    <body>     \n        <h1>HTML encoding with Kotlin</h1>     \n        <p>this format can be used as an alternative to HTML</p>     \n        <a href=\"http://jetbrains.com/kotlin\">Kotlin</a>   \n    </body>\n</html>\n```"]