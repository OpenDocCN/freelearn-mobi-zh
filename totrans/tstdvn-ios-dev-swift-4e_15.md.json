["```swift\n    // AppSetupTests.swift\n    import XCTest\n    @testable import ToDo\n    class AppSetupTests: XCTestCase {\n      func test_application_shouldSetupRoot() {\n        let application = UIApplication.shared\n        let scene = application.connectedScenes.first\n        as? UIWindowScene\n        let root =\n          scene?.windows.first?.rootViewController\n        XCTAssert(root is ToDoItemsListViewController)\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    override func setUpWithError() throws {\n      let storyboard = UIStoryboard(name: \"Main\", bundle:\n        nil)\n      sut = try XCTUnwrap(\n        storyboard.instantiateViewController(\n          withIdentifier: \"ToDoItemsListViewController\")\n        as? ToDoItemsListViewController\n      )\n      toDoItemStoreMock = ToDoItemStoreProtocolMock()\n      sut.toDoItemStore = toDoItemStoreMock\n      sut.loadViewIfNeeded()\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    import UIKit\n\n    protocol Coordinator {\n      func start()\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    class AppCoordinator: Coordinator {\n      private let window: UIWindow?\n      private let viewController: UIViewController\n      init(window: UIWindow?) {\n        self.window = window\n        let storyboard = UIStoryboard(name: \"Main\",\n          bundle: nil)\n        viewController =\n          storyboard.instantiateViewController(\n          withIdentifier: \"ToDoItemsListViewController\")\n      }\n      func start() {\n        window?.rootViewController = viewController\n      }\n    }\n    ```", "```swift\n    // SceneDelegate.swift\n    var appCoordinator: AppCoordinator?\n    ```", "```swift\n    // SceneDelegate.swift\n    func scene(_ scene: UIScene,\n      willConnectTo session: UISceneSession,\n      options connectionOptions:\n      UIScene.ConnectionOptions) {\n      guard let scene = (scene as? UIWindowScene) else {\n        return\n      }\n      window = UIWindow(windowScene: scene)\n      let coordinator = AppCoordinator(\n        window: window)\n      coordinator.start()\n      appCoordinator = coordinator\n      window?.makeKeyAndVisible()\n    }\n    ```", "```swift\n    // AppSetupTests.swift\n    func test_application_shouldSetupRoot() throws {\n      let application = UIApplication.shared\n      let scene = application.connectedScenes.first\n      as? UIWindowScene\n      let root = scene?.windows.first?.rootViewController\n      let nav = try XCTUnwrap(root as?\n        UINavigationController)\n      XCTAssert(nav.topViewController\n        is ToDoItemsListViewController)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    private let navigationController:\n      UINavigationController\n    ```", "```swift\n    // AppCoordinator.swift\n    init(window: UIWindow?,\n      navigationController: UINavigationController =\n      UINavigationController()) {\n      self.window = window\n      self.navigationController = navigationController\n      let storyboard = UIStoryboard(name: \"Main\", bundle:\n        nil)\n      viewController =\n        storyboard.instantiateViewController(\n        withIdentifier: \"ToDoItemsListViewController\")\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    func start() {\n      navigationController.pushViewController\n       (viewController,\n        animated: false)\n      window?.rootViewController = navigationController\n    }\n    ```", "```swift\n    // AppCoordinator.swift \n    extension AppCoordinator:  \n      ToDoItemsListViewControllerProtocol { \n\n      func selectToDoItem(_ viewController:\n        UIViewController, \n        item: ToDoItem) { \n      } \n    }  \n    ```", "```swift\n    // NavigationControllerMock.swift \n    import UIKit \n\n    class NavigationControllerMock: UINavigationController { \n      var lastPushedViewController: UIViewController? \n\n      override func pushViewController( \n        _ viewController: UIViewController, \n        animated: Bool) {   \n          lastPushedViewController = viewController \n          super.pushViewController(viewController, \n            animated: animated) \n        } \n    } \n    ```", "```swift\n    // AppCoordinatorTests.swift \n    var sut: AppCoordinator! \n    var navigationControllerMock: \n    NavigationControllerMock! \n    var window: UIWindow!\n    ```", "```swift\n    // AppCoordinatorTests.swift \n    override func setUpWithError() throws { \n      window = UIWindow(frame: CGRect(x: 0, \n        y: 0, \n        width: 200, \n        height: 200)) \n      navigationControllerMock =\n        NavigationControllerMock() \n      sut = AppCoordinator( \n        window: window, \n        navigationController: navigationControllerMock) \n    } \n    ```", "```swift\n    // AppCoordinatorTests.swift \n    override func tearDownWithError() throws { \n      sut = nil \n      navigationControllerMock = nil \n      window = nil \n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_start_shouldSetDelegate() throws {\n      sut.start()\n      let listViewController = try XCTUnwrap(\n        navigationControllerMock.lastPushedViewController\n        as? ToDoItemsListViewController)\n      XCTAssertIdentical(\n        listViewController.delegate as? AppCoordinator,\n        sut)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    if let listViewController =\n      viewController as? ToDoItemsListViewController {\n      listViewController.delegate = self\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_start_shouldAssignItemStore() throws {\n      sut.start()\n      let listViewController = try XCTUnwrap(\n        navigationControllerMock.lastPushedViewController\n        as? ToDoItemsListViewController)\n      XCTAssertNotNil(listViewController.toDoItemStore)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    let toDoItemStore: ToDoItemStore\n    ```", "```swift\n    // AppCoordinator.swift\n    toDoItemStore = ToDoItemStore()\n    ```", "```swift\n    // AppCoordinator.swift\n    func start() {\n      navigationController.pushViewController\n        (viewController,\n         animated: false)\n      window?.rootViewController = navigationController\n      if let listViewController =\n          viewController as? ToDoItemsListViewController {\n        listViewController.delegate = self\n        listViewController.toDoItemStore = toDoItemStore\n      }\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_selectToDoItem_pushesDetails() throws {\n      let dummyViewController = UIViewController()\n      let item = ToDoItem(title: \"dummy title\")\n      sut.selectToDoItem(dummyViewController, item: item)\n      let detail = try XCTUnwrap(\n        navigationControllerMock.lastPushedViewController\n        as? ToDoItemDetailsViewController)\n      XCTAssertEqual(detail.toDoItem, item)\n    }\n    ```", "```swift\n    // AppCoordinator.swift \n    func selectToDoItem(_ viewController:\n      UIViewController, \n      item: ToDoItem) { \n\n      let storyboard = UIStoryboard(name: \"Main\", bundle:\n        nil) \n      guard let next =\n        storyboard.instantiateViewController( \n        withIdentifier: \"ToDoItemDetailsViewController\") \n          as? ToDoItemDetailsViewController else { \n                return \n              } \n\n      next.loadViewIfNeeded() \n      next.toDoItem = item \n\n      navigationController.pushViewController(next, \n        animated: true) \n    } \n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_selectToDoItem_shouldSetItemStore() throws {\n      let dummyViewController = UIViewController()\n      let item = ToDoItem(title: \"dummy title\")\n      sut.selectToDoItem(dummyViewController, item: item)\n      let detail = try XCTUnwrap(\n        navigationControllerMock.lastPushedViewController\n        as? ToDoItemDetailsViewController)\n      XCTAssertIdentical(\n        detail.toDoItemStore as? ToDoItemStore,\n        sut.toDoItemStore)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    next.loadViewIfNeeded()\n    next.toDoItem = item\n    next.toDoItemStore = toDoItemStore\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func addToDoItem(\n      _ viewController: UIViewController)\n    ```", "```swift\n    // AppCoordinator.swift\n    func addToDoItem(_ viewController: UIViewController) {\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerProtocolMock.swift\n    var addToDoItemCallCount = 0\n    func addToDoItem(_ viewController: UIViewController) {\n      addToDoItemCallCount += 1\n    }\n    ```", "```swift\n    // ViewControllerMock.swift\n    import UIKit\n    class ViewControllerMock: UIViewController {\n      var lastPresented: UIViewController?\n      override func present(\n        _ viewControllerToPresent: UIViewController,\n        animated flag: Bool,\n        completion: (() -> Void)? = nil) {\n        lastPresented = viewControllerToPresent\n        super.present(viewControllerToPresent,\n          animated: flag,\n          completion: completion)\n      }\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_addToDoItem_shouldPresentInputView() throws\n     {\n      let viewControllerMock = ViewControllerMock()\n      sut.addToDoItem(viewControllerMock)\n      let lastPresented = try XCTUnwrap(\n        viewControllerMock.lastPresented\n        as? UIHostingController<ToDoItemInputView>)\n      XCTAssertIdentical(\n        lastPresented.rootView.delegate as?\n        AppCoordinator,\n        sut)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    func addToDoItem(_ viewController: UIViewController) {\n      let data = ToDoItemData()\n      let next = UIHostingController(\n        rootView: ToDoItemInputView(data: data,\n          apiClient: APIClient(),\n          delegate: self))\n      viewController.present(next, animated: true)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    extension AppCoordinator: ToDoItemInputViewDelegate {\n      func addToDoItem(with: ToDoItemData,\n        coordinate: Coordinate?) {\n      }\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_navigationBarButton_shouldCallDelegate()\n     throws {\n      let delegateMock =\n      ToDoItemsListViewControllerProtocolMock()\n      sut.delegate = delegateMock\n      let addButton =\n        sut.navigationItem.rightBarButtonItem\n      let target = try XCTUnwrap(addButton?.target)\n      let action = try XCTUnwrap(addButton?.action)\n      _ = target.perform(action, with: addButton)\n      XCTAssertEqual(delegateMock.addToDoItemCallCount, 1)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    let addItem = UIBarButtonItem(barButtonSystemItem:\n      .add,\n      target: self,\n      action: #selector(add(_:)))\n    navigationItem.rightBarButtonItem = addItem\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    @objc func add(_ sender: UIBarButtonItem) {\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    @objc func add(_ sender: UIBarButtonItem) {\n      delegate?.addToDoItem(self)\n    } \n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_addToDoItemWith_shouldCallToDoItemStore()\n     throws {\n      let toDoItemData = ToDoItemData()\n      toDoItemData.title = \"dummy title\"\n      let receivedItems =\n      try wait(for: sut.toDoItemStore.itemPublisher,\n        afterChange: {\n        sut.addToDoItem(with: toDoItemData, coordinate:\n          nil)\n      })\n      XCTAssertEqual(receivedItems.first?.title, \n        toDoItemData.title)\n    }\n    ```", "```swift\n    // AppCoordinator.swift\n    init(window: UIWindow?,\n     navigationController: UINavigationController =\n         UINavigationController(),\n         toDoItemStore: ToDoItemStore = ToDoItemStore()) {\n      self.window = window\n      self.navigationController = navigationController\n      self.toDoItemStore = toDoItemStore\n      let storyboard = UIStoryboard(name: \"Main\", bundle:\n        nil)\n      viewController = \n        storyboard.instantiateViewController(\n        withIdentifier: \"ToDoItemsListViewController\")\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    override func setUpWithError() throws {\n      window = UIWindow(frame: CGRect(x: 0,\n        y: 0,\n        width: 200,\n        height: 200))\n      navigationControllerMock =\n        NavigationControllerMock()\n      sut = AppCoordinator(\n        window: window,\n        navigationController: navigationControllerMock,\n        toDoItemStore: ToDoItemStore(fileName:\n          \"dummy_store\"))\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    let url = FileManager.default\n      .documentsURL(name: \"dummy_store\")\n    try? FileManager.default.removeItem(at: url)\n    ```", "```swift\n    // AppCoordinator.swift\n    func addToDoItem(with item: ToDoItemData,\n      coordinate: Coordinate?) {\n      let location = Location(name: item.locationName,\n        coordinate: coordinate)\n      let toDoItem = ToDoItem(\n        title: item.title,\n        itemDescription: item.itemDescription,\n        timestamp: item.date.timeIntervalSince1970,\n        location: location)\n      toDoItemStore.add(toDoItem)\n    }\n    ```", "```swift\n    // ToDoItemCell.swift\n    override init(style: UITableViewCell.CellStyle,\n      reuseIdentifier: String?) {\n      titleLabel = UILabel()\n      dateLabel = UILabel()\n      dateLabel.textAlignment = .right\n      locationLabel = UILabel()\n      let titleLocation = UIStackView(\n        arrangedSubviews: [titleLabel, locationLabel])\n      titleLocation.axis = .vertical\n      let stackView = UIStackView(\n        arrangedSubviews: [titleLocation, dateLabel])\n      stackView\n        .translatesAutoresizingMaskIntoConstraints = false\n      super.init(style: style,\n        reuseIdentifier: reuseIdentifier)\n      contentView.addSubview(stackView)\n      NSLayoutConstraint.activate([\n       stackView.topAnchor.constraint(\n          equalTo: contentView.topAnchor, constant: 5),\n       stackView.leadingAnchor.constraint(\n        equalTo: contentView.leadingAnchor, constant: 16),\n       stackView.bottomAnchor.constraint(\n        equalTo: contentView.bottomAnchor, constant: -5),\n       stackView.trailingAnchor.constraint(\n        equalTo: contentView.trailingAnchor, constant: -\n        16),\n      ])\n    }\n    ```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_dateFormatter_shouldNotBeNone() {\n      XCTAssertNotEqual(sut.dateFormatter.dateStyle,\n        .none)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    super.viewDidLoad()\n    dateFormatter.dateStyle = .short\n    ```", "```swift\n    // NavigationControllerMock.swift\n    var dismissCallCount = 0\n    override func dismiss(animated flag: Bool,\n      completion: (() -> Void)? = nil) {\n      dismissCallCount += 1\n      super.dismiss(animated: flag,\n         completion: completion)\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    func test_addToDoItemWith_shouldDismissInput() {\n      let toDoItemData = ToDoItemData()\n      toDoItemData.title = \"dummy title\"\n      sut.addToDoItem(with: toDoItemData,\n        coordinate: nil)\n      XCTAssertEqual(\n        navigationControllerMock.dismissCallCount, 1)\n    }\n    ```", "```swift\n    // AppCoordinatorTests.swift\n    navigationController.dismiss(animated: true)\n    ```", "```swift\n// ToDoItemDetailsViewController.swift\nlet dateFormatter: DateFormatter = {\n  let formatter = DateFormatter()\n  formatter.dateStyle = .short\n  return formatter\n}()\n```", "```swift\n    // ToDoItemsListViewControllerTests.swift\n    func test_didSelectCellAt_shouldCallDelegate() throws\n     {\n      let delegateMock =\n        ToDoItemsListViewControllerProtocolMock()\n      sut.delegate = delegateMock\n      var doneItem = ToDoItem(title: \"done item\")\n      doneItem.done = true\n      let toDoItem = ToDoItem(title: \"to-do item\")\n      toDoItemStoreMock.itemPublisher\n        .send([doneItem, toDoItem])\n      let tableView = try XCTUnwrap(sut.tableView)\n      let indexPath = IndexPath(row: 0, section: 0)\n      tableView.delegate?.tableView?(\n        tableView,\n        didSelectRowAt: indexPath)\n      XCTAssertEqual(\n       delegateMock.selectToDoItemReceivedArguments?.item,\n        toDoItem)\n    }\n    ```", "```swift\n    // ToDoItemsListViewController.swift\n    func tableView(_ tableView: UITableView,\n      didSelectRowAt indexPath: IndexPath) {\n      let item: ToDoItem\n      switch indexPath.section {\n        case 0:\n          let filteredItems = items.filter({ false ==\n            $0.done })\n          item = filteredItems[indexPath.row]\n        default:\n          let filteredItems = items.filter({ true ==\n            $0.done })\n          item = filteredItems[indexPath.row]\n      }\n      delegate?.selectToDoItem(self, item: item)\n    }\n    ```", "```swift\n// ToDoItemsListViewController.swift\noverride func viewDidAppear(_ animated: Bool) {\n  super.viewDidAppear(animated)\n  token = toDoItemStore?.itemPublisher\n    .sink(receiveValue: { [weak self] items in\n      self?.items = items\n      self?.update(with: items)\n    })\n}\noverride func viewWillDisappear(_ animated: Bool) {\n  super.viewWillDisappear(animated)\n  token?.cancel()\n}\n```"]