["```swift\nval prefs = getSharedPreferences(\"my-prefs-file\",\nContext.MODE_PRIVATE)\n```", "```swift\n    val editor = prefs.edit()\n    editor.putBoolean(\"my_key_1\", true)\n    editor.putString(\"my_key_2\", \"my string\")\n    editor.putLong(\"my_key_3\", 1L)\n    editor.apply()\n```", "```swift\n    val editor = prefs.edit()\n    editor.clear()\n    editor.apply()\n```", "```swift\n    prefs.getBoolean(\"my_key_1\", false)\n    prefs.getString(\"my_key_2\", \"\")\n    prefs.getLong(\"my_key_3\", 0L)\n```", "```swift\n        implementation \"androidx.lifecycle:\n            lifecycle-viewmodel-ktx:2.5.1\"\n        implementation \"androidx.lifecycle:\n            lifecycle-livedata-ktx:2.5.1\"\n    ```", "```swift\n    const val KEY_TEXT = \"keyText\"\n    class PreferenceWrapper(private val sharedPreferences:\n    SharedPreferences) {\n        private val textLiveData =\n            MutableLiveData<String>()\n        init {\n            sharedPreferences\n            .registerOnSharedPreferenceChangeListener {\n            _, key ->\n                when (key) {\n                    KEY_TEXT -> {\n                        textLiveData.postValue(\n                        sharedPreferences\n                        .getString(KEY_TEXT, \"\"))\n                    }\n                }\n            }\n        }\n    }\n    ```", "```swift\n    class PreferenceApplication : Application() {\n        lateinit var preferenceWrapper: PreferenceWrapper\n        override fun onCreate() {\n            super.onCreate()\n            preferenceWrapper =\n                PreferenceWrapper(getSharedPreferences(\n                \"prefs\", Context.MODE_PRIVATE))\n        }\n    }\n    ```", "```swift\n    android:name=\".PreferenceApplication\"\n    ```", "```swift\n    class PreferenceViewModel(private val\n    preferenceWrapper: PreferenceWrapper) : ViewModel() {\n        fun saveText(text: String) {\n            preferenceWrapper.saveText(text)\n        }\n        fun getText(): LiveData<String> {\n            return preferenceWrapper.getText()\n        }\n    }\n    ```", "```swift\n        <TextView\n            android:id=\"@+id/activity_main_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"50dp\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <EditText\n            android:id=\"@+id/activity_main_edit_text\"\n            android:layout_width=\"200dp\"\n            android:layout_height=\"wrap_content\"\n            android:inputType=\"none\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\n                \"@id/activity_main_text_view\" />\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            preferenceViewModel.getText().observe(this,\n            Observer {\n                findViewById<TextView>(\n                R.id.activity_main_text_view) .text = it\n            })\n            findViewById<Button>(R.id.activity_main_button\n            ) .setOnClickListener {\n                preferenceViewModel.saveText(findViewById\n                <EditText> (R.id.activity_main_edit_text)\n                .text.toString())\n            }\n        }\n    }\n    ```", "```swift\nval Context.dataStore: DataStore<Preferences> by\npreferencesDataStore(name = \"myDataStore\")\nval KEY_MY_INT = intPreferencesKey(\"my_int_key\")\nval KEY_MY_BOOLEAN =\n    booleanPreferencesKey(\"my_boolean_key\")\nval KEY_MY_STRING = stringPreferencesKey(\"my_string_key\")\nclass MyAppSettings(private val context: Context) {\n    val myIntValue: Flow<Int> = context.dataStore.data\n        .map { preferences ->\n            preferences[KEY_MY_INT] ?: 0\n        }\n    val myBooleanValue: Flow<Boolean> =\n        context.dataStore.data\n        .map { preferences ->\n            preferences[KEY_MY_BOOLEAN] ?: false\n        }\n    val myStringValue: Flow<String> =\n        context.dataStore.data\n        .map { preferences ->\n            preferences[KEY_MY_STRING] ?: \"\"\n        }\n}\n```", "```swift\nclass MyAppSettings(private val context: Context) {\n    …\n    suspend fun saveMyIntValue(intValue: Int) {\n        context.dataStore.edit { preferences ->\n            preferences[KEY_MY_INT] = intValue\n        }\n    }\n    suspend fun saveMyBooleanValue(booleanValue: Boolean) {\n        context.dataStore.edit { preferences ->\n            preferences[KEY_MY_BOOLEAN] = booleanValue\n        }\n    }\n    suspend fun saveMyStringValue(stringValue: String) {\n        context.dataStore.edit { preferences ->\n            preferences[KEY_MY_STRING] = stringValue\n        }\n    }\n}\n```", "```swift\n        implementation \"androidx.datastore:\n            datastore-preferences:1.0.0\"\n        implementation \"androidx.lifecycle:\n            lifecycle-viewmodel-ktx:2.5.1\"\n        implementation \"androidx.lifecycle:\n            lifecycle-livedata-ktx:2.5.1\"\n    ```", "```swift\n    val Context.dataStore: DataStore<Preferences> by\n    preferencesDataStore(name = \"settingsStore\")\n    val KEY_TEXT = stringPreferencesKey(\"key_text\")\n    class SettingsStore(private val context: Context) {\n        val text: Flow<String> = context.dataStore.data\n            .map { preferences ->\n                preferences[KEY_TEXT] ?: \"\"\n            }\n        suspend fun saveText(text: String) {\n            context.dataStore.edit { preferences ->\n                preferences[KEY_TEXT] = text\n            }\n        }\n    }\n    ```", "```swift\n    class SettingsViewModel(private val settingsStore:\n    SettingsStore) : ViewModel() {\n        private val _textLiveData =\n            MutableLiveData<String>()\n        val textLiveData: LiveData<String> = _textLiveData\n        init {\n            viewModelScope.launch {\n                settingsStore.text.collect {\n                    _textLiveData.value = it\n                }\n            }\n        }\n        fun saveText(text: String) {\n            viewModelScope.launch {\n                settingsStore.saveText(text)\n            }\n        }\n    }\n    ```", "```swift\n    class SettingsApplication : Application() {\n        lateinit var settingsStore: SettingsStore\n        override fun onCreate() {\n            super.onCreate()\n            settingsStore = SettingsStore(this)\n        }\n    }\n    ```", "```swift\n    android:name=\".SettingsApplication\"\n    ```", "```swift\n        <TextView\n            android:id=\"@+id/activity_main_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"50dp\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <EditText\n            android:id=\"@+id/activity_main_edit_text\"\n            android:layout_width=\"200dp\"\n            android:layout_height=\"wrap_content\"\n            android:inputType=\"none\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\n                \"@id/activity_main_text_view\" />\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            val preferenceWrapper =\n                (application as SettingsApplication)\n                .settingsStore\n            val preferenceViewModel =\n                ViewModelProvider(this, object :\n                ViewModelProvider.Factory {\n                    override fun <T : ViewModel>\n                    create(modelClass: Class<T>): T {\n                        return SettingsViewModel(\n                        preferenceWrapper) as T\n                }\n            }).get(SettingsViewModel::class.java)\n        }\n    }\n    ```", "```swift\n        val cacheDir = context.cacheDir\n        val fileToReadFrom = File(cacheDir, \"my-file.txt\")\n        val size = fileToReadFrom.length().toInt()\n        val bytes = ByteArray(size)\n        val tmpBuff = ByteArray(size)\n        val fis = FileInputStream(fileToReadFrom)\n        try {\n            var read = fis.read(bytes, 0, size)\n            if (read < size) {\n                var remain = size - read\n                while (remain > 0) {\n                    read = fis.read(tmpBuff, 0, remain)\n                    System.arraycopy(tmpBuff, 0, bytes,\n                        size - remain, read)\n                    remain -= read\n                }\n            }\n        } catch (e: IOException) {\n            throw e\n        } finally {\n            fis.close()\n        }\n```", "```swift\n        val bytesToWrite = ByteArray(100)\n        val cacheDir = context.cacheDir\n        val fileToWriteIn = File(cacheDir, \"my-file.txt\")\n        try {\n            if (!fileToWriteIn.exists()) {\n                fileToWriteIn.createNewFile()\n            }\n            val fos = FileOutputStream(fileToWriteIn)\n            fos.write(bytesToWrite)\n            fos.close()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n```", "```swift\n<paths\nxmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <files-path name=\"my-visible-name\" path=\"/\n    my-folder-name\" />\n</paths>\n```", "```swift\n        val assetManager = context.assets\n        val root = \"\"\n        val files = assetManager.list(root)\n        files?.forEach {\n            val inputStream = assetManager.open(root + it)\n        }\n```", "```swift\n        implementation 'commons-io:commons-io:2.6'\n    ```", "```swift\n    class AssetFileManager(private val assetManager:\n    AssetManager) {\n        fun getMyAppFileInputStream() =\n            assetManager.open(\"my-app-file.txt\")\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <paths>\n        <external-files-path name=\"docs\" path=\"docs/\"/>\n    </paths>\n    ```", "```swift\n            <provider\n                android:name=\n                    \"androidx.core.content.FileProvider\"\n                android:authorities=\n                    \"com.android.testable.files\"\n                android:exported=\"false\"\n                android:grantUriPermissions=\"true\">\n                <meta-data\n                    android:name=\"android.support\n                        .FILE_PROVIDER_PATHS\"\n                    android:resource=\"@xml/\n                        file_provider_paths\" />\n            </provider>\n    ```", "```swift\n    class ProviderFileManager(\n    ) {\n        fun writeStream(name: String, inputStream:\n        InputStream) {\n            executor.execute {\n                val fileToSave = File(getDocsFolder(),\n                name)\n                val outputStream =\n                    context.contentResolver\n                    .openOutputStream(fileToUriMapper\n                    .getUriFromFile(context, fileToSave),\n                    \"rw\")\n                IOUtils.copy(inputStream, outputStream)\n            }\n        }\n    }\n    ```", "```swift\n    class FileToUriMapper {\n        fun getUriFromFile(context: Context, file: File):\n        Uri {\n            return FileProvider.getUriForFile(context,\n            \"com.android.testable.files\", file)\n        }\n    }\n    ```", "```swift\n        <string name=\"file_provider\">FileProvider</string>\n        <string name=\"saf\">SAF</string>\n    ```", "```swift\n        <Button\n            android:id=\"@+id/activity_main_file_provider\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"200dp\"\n            android:text=\"@string/file_provider\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n        <Button\n            android:id=\"@+id/activity_main_saf\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"50dp\"\n            android:text=\"@string/saf\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\n                \"@id/activity_main_file_provider\" />\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            findViewById<Button>(\n            R.id.activity_main_file_provider)\n            .setOnClickListener {\n                val newFileName = \"Copied.txt\"\n                providerFileManager.writeStream(\n                    newFileName, assetFileManager\n                    .getMyAppFileInputStream())\n            }\n        }\n    }\n    ```", "```swift\n      val createDocumentResult =\n          registerForActivityResult(\n          ActivityResultContracts.CreateDocument(\n          \"text/plain\")) { uri ->\n              uri?.let {\n                  val newFileName = \"Copied.txt\"\n                  providerFileManager\n                  .writeStreamFromUri(newFileName,\n                  assetFileManager\n                  .getMyAppFileInputStream(), uri)\n              }\n            }\n        findViewById<Button>(R.id.activity_main_saf)\n        .setOnClickListener {\n            createDocumentResult.launch(\"Copied.txt\")\n        }\n```", "```swift\n        fun writeStreamFromUri(name: String, inputStream:\n        InputStream, uri:Uri){\n            executor.execute {\n                val outputStream =\n                    context.contentResolver\n                    .openOutputStream(uri, \"rw\")\n                IOUtils.copy(inputStream, outputStream)\n            }\n        }\n    ```", "```swift\n        val imageCaptureLauncher =\n            registerForActivityResult(\n            ActivityResultContracts.TakePicture()){\n            }\n        imageCaptureLauncher.launch(photoUri)\n```", "```swift\n          val intent = Intent(Intent.ACTION_MEDIA_SCANNER_\n          SCAN_FILE)\n          intent.data = photoUri\n          sendBroadcast(intent)\n    ```", "```swift\n            val paths = arrayOf(\"path1\", \"path2\")\n            val mimeTypes= arrayOf(\"type1\", \"type2\")\n            MediaScannerConnection.scanFile(context,paths,\n                mimeTypes) { path, uri ->\n            }\n    ```", "```swift\n            val contentValues = ContentValues()\n            contentValues.put(MediaStore.Images\n                .ImageColumns.TITLE, \"my title\")\n            contentValues.put(MediaStore.Images\n                .ImageColumns .DATE_ADDED, timeInMillis)\n            contentValues.put(MediaStore.Images\n                .ImageColumns .MIME_TYPE, \"image/*\")\n            contentValues.put(MediaStore.Images\n                .ImageColumns .DATA, \"my-path\")\n            val newUri =\n                contentResolver.insert(MediaStore.Video\n                .Media.EXTERNAL_CONTENT_URI,\n                contentValues)\n    newUri?.let {\n        val outputStream = contentResolver\n        .openOutputStream(newUri)\n        // Copy content in outputstream\n    }\n    ```", "```swift\n        implementation 'commons-io:commons-io:2.6'\n    ```", "```swift\n    <uses-permission\n        android:name=\"android.permission\n        .WRITE_EXTERNAL_STORAGE\"\n        android:maxSdkVersion=\"28\" />\n    ```", "```swift\n    class FileHelper(private val context: Context) {\n        fun getUriFromFile(file: File): Uri {\n            return FileProvider.getUriForFile(context,\n            \"com.android.testable.camera\", file)\n        }\n        fun getPicturesFolder(): String =\n            Environment.DIRECTORY_PICTURES\n        fun getVideosFolder(): String =\n            Environment.DIRECTORY_MOVIES\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <paths>\n        <external-path\n            name=\"photos\"\n            path=\"Android/data/com.android.testable\n            .myapplication/files/Pictures\" />\n        <external-path\n            name=\"videos\"\n            path=\"Android/data/com.android.testable\n            .myapplication/files/Movies\" />\n    </paths>\n    ```", "```swift\n        <provider\n            android:name=\n                \"androidx.core.content.FileProvider\"\n            android:authorities=\n                \"com.android.testable.camera\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\">\n            <meta-data\n                android:name=\"android.support\n                .FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/\n                file_provider_paths\" />\n        </provider>\n```", "```swift\n    data class FileInfo(\n        val uri: Uri,\n        val file: File,\n        val name: String,\n        val relativePath:String,\n        val mimeType:String\n    )\n    ```", "```swift\n    class MediaContentHelper {\n        fun getImageContentUri(): Uri =\n            if (android.os.Build.VERSION.SDK_INT >=\n            android.os.Build.VERSION_CODES.Q) {\n                MediaStore.Images.Media.getContentUri\n                (MediaStore.VOLUME_EXTERNAL_PRIMARY)\n            } else {\n                MediaStore.Images.Media\n                .EXTERNAL_CONTENT_URI\n            }\n        fun generateImageContentValues(fileInfo:\n        FileInfo) = ContentValues().apply {\n            this.put(MediaStore.Images.Media\n            .DISPLAY_NAME, fileInfo.name)\n        if (android.os.Build.VERSION.SDK_INT >=\n            android.os.Build.VERSION_CODES.Q) {\n                this.put(MediaStore.Images.Media\n                .RELATIVE_PATH, fileInfo.relativePath)\n        }\n        this.put(MediaStore.Images.Media .MIME_TYPE,\n            fileInfo.mimeType)\n    }\n```", "```swift\n        class ProviderFileManager(\n        ) {\n            fun generatePhotoUri(time: Long): FileInfo {\n                val name = \"img_$time.jpg\"\n                val file = File(\n                    context.getExternalFilesDir(\n                    fileHelper .getPicturesFolder()), name\n                )\n                return FileInfo(\n                    fileHelper.getUriFromFile(file),\n                    file, name,\n                    fileHelper.getPicturesFolder(),\n                    \"image/jpeg\"\n                )\n            }\n    ```", "```swift\n        <string name=\"photo\">Photo</string>\n        <string name=\"video\">Video</string>\n    ```", "```swift\n        <Button\n            android:id=\"@+id/photo_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/photo\" />\n        <Button\n            android:id=\"@+id/video_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"5dp\"\n            android:text=\"@string/video\" />\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n            private lateinit var providerFileManager:\n                ProviderFileManager\n            private var photoInfo: FileInfo? = null\n            private var videoInfo: FileInfo? = null\n            private var isCapturingVideo = false\n        override fun onCreate(savedInstanceState:\n        Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            providerFileManager =\n                ProviderFileManager(applicationContext,\n                FileHelper(applicationContext),\n                contentResolver, Executors\n                .newSingleThreadExecutor(),\n                MediaContentHelper()\n                )\n    ```", "```swift\n{\n    \"message\": [\n        \"https://images.dog.ceo/breeds/hound-\n        afghan/n02088094_4837.jpg\",\n        \"https://images.dog.ceo/breeds/hound-\n        basset/n02088238_13908.jpg\",\n        \"https://images.dog.ceo/breeds/hound-\n        ibizan/n02091244_3939.jpg\"\n    ],\n    \"status\": \"success\"\n}\n```"]