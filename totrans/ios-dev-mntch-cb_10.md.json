["```swift\nusing MonoTouch.CoreLocation;\n\n```", "```swift\n    private CLLocationManager locationManager;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.locationManager = new CLLocationManager();\n    this.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n    this.locationManager.Failed += this.LocationManager_Failed;\n    this.buttonStart.TouchUpInside += delegate {\n    this.lblOutput.Text = \"Determining location...\";\n    this.locationManager.StartUpdatingLocation();\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.locationManager.StopUpdatingLocation();\n    this.lblOutput.Text = \"Location update stopped.\";\n    } ;\n    }\n    private void LocationManager_Failed (object sender, NSErrorEventArgs e){\n    this.lblOutput.Text = string.Format(\"Location update failed! Error message: {0}\", e.Error.LocalizedDescription);\n    }\n    private void LocationManager_UpdatedLocation (object sender, CLLocationUpdatedEventArgs e){\n    double latitude = Math.Round(e.NewLocation.Coordinate. Latitude, 4);\n    double longitude = Math.Round(e.NewLocation.Coordinate. Longitude, 4);\n    double accuracy = Math.Round(e.NewLocation. HorizontalAccuracy, 0);\n    this.lblOutput.Text = string.Format(\"Latitude: {0}\\nLongitude: {1},\\nAccuracy: {2}m\", latitude, longitude, accuracy);\n    }\n\n    ```", "```swift\nthis.locationManager = new CLLocationManager();\nthis.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n\n```", "```swift\nthis.locationManager.Failed += this.LocationManager_Failed;\n\n```", "```swift\nthis.locationManager.StartUpdatingLocation();\n\n```", "```swift\nthis.locationManager.StopUpdatingLocation();\n\n```", "```swift\ndouble latitude = Math.Round(e.NewLocation.Coordinate.Latitude, 4);\ndouble longitude = Math.Round(e.NewLocation.Coordinate.Longitude, 4);\ndouble accuracy = Math.Round(e.NewLocation.HorizontalAccuracy, 0);\n\n```", "```swift\nif (CLLocationManager.LocationServicesEnabled) {\n// Initialize the location manager\n//...\n}\n\n```", "```swift\n    this.locationManager = new CLLocationManager();\n    this.locationManager.UpdatedHeading += this.LocationManager_UpdatedHeading;\n    this.buttonStart.TouchUpInside += delegate {\n    this.lblOutput.Text = \"Starting updating heading...\";\n    this.locationManager.StartUpdatingHeading();\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.locationManager.StopUpdatingHeading();\n    this.lblOutput.Text = \"Stopped updating heading.\";\n    } ;\n\n    ```", "```swift\n    private void LocationManager_UpdatedHeading (object sender, CLHeadingUpdatedEventArgs e){\n    this.lblOutput.Text = string.Format(\"Magnetic heading: {0}\", Math.Round(e.NewHeading.MagneticHeading, 1));\n    }\n\n    ```", "```swift\nthis.locationManager.UpdatedHeading += this.LocationManager_UpdatedHeading;\n\n```", "```swift\nthis.locationManager.StartUpdatingHeading();\n\n```", "```swift\nthis.lblOutput.Text = string.Format(\"Magnetic heading: {0}\", Math.Round(e.NewHeading.MagneticHeading, 1));\n\n```", "```swift\nthis.locationManager.StopUpdatingHeading();\n\n```", "```swift\nif (CLLocationManager.HeadingAvailable) {\n// Start updating heading\n//...\n}\n\n```", "```swift\n    private CLLocationManager locationManager;\n    private CLRegion region;\n\n    ```", "```swift\n    this.locationManager.RegionEntered += this.LocationManager_RegionEntered;\n    this.locationManager.RegionLeft += this.LocationManager_RegionLeft;\n    this.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n\n    ```", "```swift\n    private void LocationManager_UpdatedLocation (object sender, CLLocationUpdatedEventArgs e){\n    if (e.NewLocation.HorizontalAccuracy < 100){\n    this.region = new CLRegion(e.NewLocation.Coordinate, 100, \"Home\");\n    this.locationManager.StartMonitoring(this.region, 65);\n    this.locationManager.StopUpdatingLocation();\n    }\n    }\n    private void LocationManager_RegionLeft (object sender, CLRegionEventArgs e){\n    this.lblOutput.Text = string.Format(\"{0} region left.\", e.Region.Identifier);\n    }\n    private void LocationManager_RegionEntered (object sender, CLRegionEventArgs e){\n    this.lblOutput.Text = string.Format(\"{0} region entered.\", e.Region.Identifier);\n    }\n\n    ```", "```swift\n    this.locationManager.StartUpdatingLocation();\n\n    ```", "```swift\n    this.locationManager.StopMonitoring(this.region);\n\n    ```", "```swift\nthis.locationManager.RegionEntered += this.LocationManager_RegionEntered;\nthis.locationManager.RegionLeft += this.LocationManager_RegionLeft;\nthis.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n\n```", "```swift\nif (e.NewLocation.HorizontalAccuracy < 100)\n\n```", "```swift\nthis.region = new CLRegion(e.NewLocation.Coordinate, 100, \"Home\");\n\n```", "```swift\nthis.locationManager.StartMonitoring(this.region, 65);\n\n```", "```swift\nif (CLLocationManager.RegionMonitoringAvailable) {\n// Start monitoring a region\n//...\n}\n\n```", "```swift\n    this.locationManager = new CLLocationManager();\n    this.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n    this.buttonStart.TouchUpInside += delegate {\n    this.lblOutput.Text = \"Starting monitoring significant location changes...\";\n    this.locationManager. StartMonitoringSignificantLocationChanges();\n    } ;\n    this.buttonStop.TouchUpInside += delegate {\n    this.locationManager.StopMonitoringSignificantLocationChanges();\n    this.lblOutput.Text = \"Stopped monitoring significant location changes.\";\n    } ;\n\n    ```", "```swift\n    private void LocationManager_UpdatedLocation (object sender, CLLocationUpdatedEventArgs e){\n    double latitude = Math.Round(e.NewLocation.Coordinate. Latitude, 4);\n    double longitude = Math.Round(e.NewLocation.Coordinate. Longitude, 4);\n    double accuracy = Math.Round(e.NewLocation. HorizontalAccuracy, 0);\n    this.lblOutput.Text = string.Format(\"Latitude: {0}\\nLongitude: {1}\\nAccuracy: {2}\", latitude, longitude, accuracy);\n    }\n\n    ```", "```swift\nthis.locationManager.StartMonitoringSignificantLocationChanges();\n\n```", "```swift\nthis.locationManager.UpdatedLocation += this.LocationManager_UpdatedLocation;\n//...\nprivate void LocationManager_UpdatedLocation (object sender, CLLocationUpdatedEventArgs e){\n//...\n}\n\n```", "```swift\nif (CLLocationManager.SignificantLocationChangeMonitoringAvailable) {\n// Start monitoring for significant location changes.\n//...\n}\n\n```", "```swift\n    Console.WriteLine(\"{0}:\\n\\t{1} \", DateTime.Now, this.lblOutput.Text);\n\n    ```", "```swift\nif (null != options){\nif (options.ContainsKey (UIApplication.LaunchOptionsLocationKey)){\nConsole.WriteLine (\"Woken from location service!\");\nCLLocationManager locationManager = new CLLocationManager();\nlocationManager.UpdatedLocation += this.LocationUpdatedHandler;\nlocationManager.StartMonitoringSignificantLocationChanges();\n}\n}\n\n```", "```swift\n    using MonoTouch.MapKit;\n    using MonoTouch.CoreLocation;\n\n    ```", "```swift\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.mapView.ShowsUserLocation = true;\n    this.mapView.RegionChanged += this.MapView_RegionChanged;\n    }\n    private void MapView_RegionChanged (object sender, MKMapViewChangeEventArgs e){\n    if (this.mapView.UserLocation.Location != null){\n    CLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\n    Console.WriteLine(\"Current coordinates: LAT: {0}, LON: {1}\", mapCoordinate.Latitude, mapCoordinate.Longitude);\n    }\n    }\n\n    ```", "```swift\nthis.mapView.ShowsUserLocation = true;\n\n```", "```swift\nthis.mapView.RegionChanged += this.MapView_RegionChanged;\n\n```", "```swift\nif (this.mapView.UserLocation.Location != null){\nCLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\nConsole.WriteLine(\"Current coordinates: LAT: {0}, LON: {1}\", mapCoordinate.Latitude, mapCoordinate.Longitude);\n}\n\n```", "```swift\nCLLocationCoordinate2D mapCoordinates = new CLLocationCoordinate2D(0, 0);\nthis.mapView.SetCenterCoordinate(mapCoordinates, true);\n\n```", "```swift\nthis.mapView.SetRegion(MKCoordinateRegion.FromDistance( mapCoordinates, 1000, 1000), true);\n\n```", "```swift\n    private MKReverseGeocoder reverseGeocoder;\n    public override void ViewDidLoad (){\n    base.ViewDidLoad ();\n    this.mapView.ShowsUserLocation = true;\n    this.buttonGeocode.TouchUpInside += delegate {\n    this.lblOutput.Text = \"Reverse geocoding location...\";\n    this.buttonGeocode.Enabled = false;\n    CLLocationCoordinate2D currentLocation = this.mapView.UserLocation.Location.Coordinate;\n    this.mapView.SetRegion(MKCoordinateRegion.FromDistance( currentLocation, 1000, 1000), true);\n    this.reverseGeocoder = new MKReverseGeocoder(currentLocation);\n    this.reverseGeocoder.Delegate = new ReverseGeocoderDelegate(this);\n    this.reverseGeocoder.Start();\n    } ;\n    }\n\n    ```", "```swift\n    private class ReverseGeocoderDelegate : MKReverseGeocoderDelegate{\n    public ReverseGeocoderDelegate(MainController parentController){\n    this.parentController = parentController;\n    }\n    private MainController parentController;\n    public override void FoundWithPlacemark (MKReverseGeocoder geocoder, MKPlacemark placemark){\n     this.parentController.lblOutput.Text = string.Format( \"Locality: {0}\\nAdministrative area: {1}\\nCountry: {2}\", placemark.Locality, placemark.AdministrativeArea, placemark.Country); \n    geocoder.Dispose();\n    this.parentController.buttonGeocode.Enabled = true;\n    }\n    public override void FailedWithError (MKReverseGeocoder geocoder, NSError error){\n    this.parentController.lblOutput.Text = string.Format( \"Reverse geocoding failed with error: {0}\", error.LocalizedDescription);\n    this.parentController.buttonGeocode.Enabled = true;\n    }\n    }\n\n    ```", "```swift\nprivate MKReverseGeocoder reverseGeocoder;\n\n```", "```swift\nprivate class ReverseGeocoderDelegate : MKReverseGeocoderDelegate\n\n```", "```swift\npublic override void FoundWithPlacemark (MKReverseGeocoder geocoder, MKPlacemark placemark)\n\n```", "```swift\npublic override void FailedWithError (MKReverseGeocoder geocoder, NSError error)\n\n```", "```swift\nthis.reverseGeocoder = new MKReverseGeocoder(currentLocation);\n\n```", "```swift\nthis.reverseGeocoder.Delegate = new ReverseGeocoderDelegate(this);\nthis.reverseGeocoder.Start();\n\n```", "```swift\n    this.mapView.ShowsUserLocation = true;\n    this.mapView.Delegate = new MapViewDelegate();\n    this.buttonAddPin.TouchUpInside += delegate {\n    CLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\n    this.mapView.SetRegion(MKCoordinateRegion.FromDistance( mapCoordinate, 1000, 1000), true);\n    MKPointAnnotation myAnnotation = new MKPointAnnotation();\n    myAnnotation.Coordinate = mapCoordinate;\n    myAnnotation.Title = \"MyAnnotation\";\n    myAnnotation.Subtitle = \"Standard annotation\";\n    this.mapView.AddAnnotation(myAnnotation);\n    } ;\n\n    ```", "```swift\n    private class MapViewDelegate : MKMapViewDelegate{\n    public override MKAnnotationView GetViewForAnnotation (MKMapView mapView, NSObject annotation){\n    if (annotation is MKUserLocation){\n    return null;\n    } else{\n    string reuseIdentifier = \"MyAnnotation\";\n    MKPinAnnotationView pinView = mapView.DequeueReusableAnnotation(reuseIdentifier) as MKPinAnnotationView;\n    if (null == pinView){\n    pinView = new MKPinAnnotationView(annotation, reuseIdentifier);\n    pinView.PinColor = MKPinAnnotationColor.Purple;\n    pinView.AnimatesDrop = true;\n    pinView.CanShowCallout = true;\n    }\n    return pinView;\n    }\n    }\n    }\n\n    ```", "```swift\nMKPointAnnotation myAnnotation = new MKPointAnnotation();\nmyAnnotation.Coordinate = mapCoordinate;\nmyAnnotation.Title = \"MyAnnotation\";\nmyAnnotation.Subtitle = \"Standard annotation\";\nthis.mapView.AddAnnotation(myAnnotation);\n\n```", "```swift\npublic override MKAnnotationView GetViewForAnnotation (MKMapView mapView, NSObject annotation)\n\n```", "```swift\nif (annotation is MKUserLocation)\n\n```", "```swift\nMKPinAnnotationView pinView = mapView.DequeueReusableAnnotation( reuseIdentifier) as MKPinAnnotationView;\n\n```", "```swift\npinView = new MKPinAnnotationView(annotation, reuseIdentifier);\npinView.PinColor = MKPinAnnotationColor.Purple;\npinView.AnimatesDrop = true;\npinView.CanShowCallout = true;\n\n```", "```swift\nreturn pinView;\n\n```", "```swift\n    this.mapView.ShowsUserLocation = true;\n    this.mapView.Delegate = new MapViewDelegate();\n    this.buttonAddOverlay.TouchUpInside += delegate {\n    CLLocationCoordinate2D mapCoordinate = this.mapView.UserLocation.Location.Coordinate;\n    this.mapView.SetRegion(MKCoordinateRegion.FromDistance( mapCoordinate, 1000, 1000), true);\n    MKCircle circleOverlay = MKCircle.Circle(mapCoordinate, 250);\n    this.mapView.AddOverlay(circleOverlay);\n    } ;\n\n    ```", "```swift\n    private class MapViewDelegate : MKMapViewDelegate{\n    public override MKOverlayView GetViewForOverlay (MKMapView mapView, NSObject overlay){\n    MKCircle circleOverlay = overlay as MKCircle;\n    if (null != circleOverlay){\n    MKCircleView circleView = new MKCircleView(circleOverlay);\n    circleView.FillColor = UIColor.FromRGBA( 1.0f, 0.5f, 0.5f, 0.5f);\n    circleView.StrokeColor = UIColor.Red;\n    circleView.LineWidth = 2f;\n    return circleView;\n    } else{\n    return null;\n    }\n    }\n    }\n\n    ```", "```swift\nMKCircle circleOverlay = MKCircle.Circle(mapCoordinate, 250);\n\n```", "```swift\nthis.mapView.AddOverlay(circleOverlay);\n\n```", "```swift\npublic override MKOverlayView GetViewForOverlay (MKMapView mapView, NSObject overlay)\n\n```", "```swift\nMKCircle circleOverlay = overlay as MKCircle;\nif (null != circleOverlay)\n\n```", "```swift\nMKCircleView circleView = new MKCircleView(circleOverlay);\ncircleView.FillColor = UIColor.FromRGBA(1.0f, 0.5f, 0.5f, 0.5f);\ncircleView.StrokeColor = UIColor.Red;\ncircleView.LineWidth = 2f;\nreturn circleView;\n\n```"]