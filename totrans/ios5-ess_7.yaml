- en: Chapter 7. Making your Applications Run Smoothly using Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well done for making it to the final chapter of this book. In this chapter,
    we will focus on how we can effectively use **Instruments** within our applications
    to track down areas within our iOS applications that could be affecting the overall
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: These types of issues could potentially cause our applications to run slowly
    or even crash on the user's iOS device. We will take a look into each of the different
    types of built-in instruments, which come as a part of the Instruments application,
    and how we can use the **System Trace** for iOS instruments to help you track
    down system calls, memory, and threads within your code that may be affecting
    the application's performance on your iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: We then take a look at how we can configure instruments to display data differently
    within the trace document that is being reported.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Instruments environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to add and profile against different instrument sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to check performance of your iOS applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing other components of the Instruments family
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the new Instruments included with Xcode 4.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have got quite a bit to cover. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Instruments application is a powerful tool that enables you to collect information
    about the performance of your application over time. Through the use of the Instruments
    application, you can gather information based on a variety of different types
    of data, and view them side-by-side at the same time. This will therefore allow
    you to spot trends which would be hard to spot otherwise, and this can be used
    to see code running by your program along with the corresponding memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: The Instruments application comes with a standard library, which you can use
    to examine various aspects of your code. You can configure Instruments to gather
    data about the same process or about different processes on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each instrument collects and displays different types of information relating
    to file access, memory usage, Network connections, and so on. The following screenshot
    shows the Instruments application profiling our `MapKitExample`, using a number
    of different types of instruments to monitor the system behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Instruments](img/2267_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following information in the table outlines each feature of the Instruments
    application, and provides a description about what each part covers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Instruments feature** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Instruments Pane | This section lists all of the instruments, which have
    been added for those that you want to profile against. New instruments can be
    added by selecting and then dragging each one from the instruments library into
    this pane. Items within this pane can also be deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| Track Pane | This section displays a graphical summary of the data returned
    by the current instruments. Each instrument has its own track, which provides
    a chart of the data that is collected by that instrument. The information within
    this pane is read-only. |'
  prefs: []
  type: TYPE_TB
- en: '| Detail Pane | This section shows the details of the data collected by each
    of the instruments. It displays the set of events gathered and used to create
    the graphical view in the track pane. Depending on the type of instrument, information
    that is represented within this pane can be customized to represent the data differently.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Extended Detail Pane | This section shows you detailed information about
    the item that is currently selected in the Detail pane. This pane displays the
    complete stack trace, timestamp, and other instrument-specific data gathered for
    the given event. |'
  prefs: []
  type: TYPE_TB
- en: '| Navigation Bar | This shows you where you are, and the steps you took to
    get there. It includes two menus the active instrument menu and the detail view
    menu. You can click on the entries within the navigation bar to select the active
    instrument, and the level and type of information in the detail view. |'
  prefs: []
  type: TYPE_TB
- en: The Instruments trace document toolbar allows you to add and control instruments,
    open view, and configure the track pane.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Instruments](img/2267_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table provides an explanation for each of the different controls
    on the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Toolbar item** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Pause/Resume** button | Pauses the gathering of trace data during a recording.
    Selecting this option does not actually stop the recording; it just simply stops
    the instruments from gathering data while a recording is in progress. When the
    **Pause** button has been pressed, in the track pane it will show a gap in the
    trace data to highlight this. |'
  prefs: []
  type: TYPE_TB
- en: '| **Record/Stop** button | Starts or stops the recording process. You use this
    button to begin gathering trace data for your application. |'
  prefs: []
  type: TYPE_TB
- en: '| **Loop** button | Enables you to set whether the recorder should loop during
    playback, to repeat the recorded steps continuously. This can be useful if you
    want to gather multiple runs for a given set of steps. |'
  prefs: []
  type: TYPE_TB
- en: '| **Target** menu | Selects the trace target for the document. This is the
    process for which data is gathered. |'
  prefs: []
  type: TYPE_TB
- en: '| **Inspection Range** control | This enables you to select a time range in
    the track pane. When this has been set, the instrument displays only the data
    collected within the specified time period. Using the buttons with this control
    enable you to set the start and end points of the inspection range, and to clear
    the current range. |'
  prefs: []
  type: TYPE_TB
- en: '| **Time/Run** control | Shows the time elapsed by the current document trace.
    If the trace document contains multiple data runs associated with it, you can
    use the arrow controls to choose which run data you want to display in the track
    pane. |'
  prefs: []
  type: TYPE_TB
- en: '| **View** control | Hides or shows the Instruments pane, Detail pane, and
    Extended View pane. This control makes it easier to only focus on the area in
    which you are interested in. |'
  prefs: []
  type: TYPE_TB
- en: '| **Library** button | Hides or shows the instrument library window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Search** field | This option filters information within the Detail pane,
    based on a search term that you enter. |'
  prefs: []
  type: TYPE_TB
- en: The Instruments application comes part of the Xcode 4 Tools installation, and
    can be found located within the`<Root>/Developer/Applications` folder, where`<Root>`
    is the installation folder where Xcode 4 is installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing iOS applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One common use for Instruments is the performance of a system trace on your
    application. This nifty new Instrument, which has been added to the release of
    Xcode 4.2, helps you track down system calls, memory, and threads which may be
    affecting application performance on your iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: To show the use of the System Trace for iOS Instruments, we will use the `MapKitExample`
    that we created back in [Chapter 6](ch06.html "Chapter 6. Xcode Tools - Improvements"),
    *Xcode Tools Improvements*. There are many ways in which you can start the instruments
    application; you can run Instruments and then have it launch the iOS application,
    or you can use the tools under the **Product** menu from within Xcode. The next
    section shows you how to run and profilie `theMapKitExample` application project.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the MapKitExample project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we proceed to profile our `MapKitExample` project, we must first launch
    the Xcode development environment. This can be located in the `/Xcode4/Applications`
    folder. Alternatively, you can use spotlight to search for Xcode, by typing Xcode
    into the search box window.
  prefs: []
  type: TYPE_NORMAL
- en: Choose **File | Open** or *Command* + *O*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click into the **MapKitExample** folder, and select the **MapKitExample.xcodeproj**
    file.![Loading the MapKitExample project](img/2267_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Open** button to continue to load and open the file into the
    Xcode workspace environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to start running and profiling our application, which will be used
    to perform a system trace on what threads and systems calls are being processed.
  prefs: []
  type: TYPE_NORMAL
- en: Running and profiling the project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run the Instruments application from within the Xcode environment, select
    the **Build For Profiling** option under the **Build For** menu, or by using the
    keyboard shortcut *Shift* + *Command* + *I*, and then select the **Profile** option
    from the **Product** menu to launch the Instruments application. Similarly, you
    can use the keyboard shortcut *Command* + *I.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Running and profiling the project](img/2267_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this option has been selected, you will eventually see the Instruments
    application window display on your screen. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running and profiling the project](img/2267_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table gives an overview of each of the templates available, and
    required for iOS development:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Template** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Blank** | Creates an empty trace document to which you can add your own
    combinations of instruments. |'
  prefs: []
  type: TYPE_TB
- en: '| **Time Profiler** | Performs low-overhead and time-based sampling of one
    or all processes. |'
  prefs: []
  type: TYPE_TB
- en: '| **System Trace** | Provides you with the ability to profile against different
    aspects of the operating system which could be affecting application performance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Activity Monitor** | This monitors overall CPU, memory, disk, and network
    activity. |'
  prefs: []
  type: TYPE_TB
- en: '| **Automation** | Automates user interface tests within your application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Energy Diagnostics** | Displays diagnostics information regarding the amount
    of energy being used on the device for GPU activity, display brightness, sleep/wake,
    bluetooth, Wi-Fi, and GPS. |'
  prefs: []
  type: TYPE_TB
- en: '| **Network Connections** | With this instrument, it''s possible to see how
    much data is flowing over each connection, for each application, as well as interesting
    statistics, such as round trip times and retransmission requests. You can use
    this information to help reduce network traffic and energy consumption. |'
  prefs: []
  type: TYPE_TB
- en: '| **Allocations** | Monitors memory and object-allocation patterns within your
    program. |'
  prefs: []
  type: TYPE_TB
- en: '| **Leaks** | Detects memory leaks within your application. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threads** | Analyzes thread state transitions within a process, including
    running and terminated threads, thread state, and associated back traces. |'
  prefs: []
  type: TYPE_TB
- en: '| **File Activity** | Monitors an application''s interaction with the file
    system. |'
  prefs: []
  type: TYPE_TB
- en: The type of instrument that we want to use for this example is the **System
    Trace Instrument**. Select the **System Trace** option and then click on the **Profile**
    button to proceed to load the **Instruments Trace Document** window, and start
    profiling our `MapKitExample` application.
  prefs: []
  type: TYPE_NORMAL
- en: Your application will then be analyzed, and each system call and thread that
    has been made to memory will be profiled. These also include **Virtual Memory**
    (**VM**) operations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running and profiling the project](img/2267_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that after a number of seconds have passed, your trace information
    is displayed. This contains information relating to the thread and system calls,
    and their duration that your application is currently making. Other information,
    such as Virtual VM faults, is also recorded.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose to stop the application from profiling by clicking on the red
    record button, since the Instruments application has already done its full analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The following list items shows the comparison between the various different
    types of faults you will encounter while developing iOS applications, along with
    their explanations.
  prefs: []
  type: TYPE_NORMAL
- en: VM faults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Virtual memory** (VM) is an auxiliary storage that is located on a computer''s
    hard disk that the operating system uses when the **Random Access Memory** (RAM)
    is full. It used for all normal computer applications. Many computers do not have
    their virtual memory set properly, and as a result, are not getting maximum performance,
    resulting in a system fault.'
  prefs: []
  type: TYPE_NORMAL
- en: Memory leaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **memory leak** occurs when memory is allocated by an application, but never
    released.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this code snippet, we allocate `500` strings inside a loop to demonstrate
    ways in which memory leaks can happen. The code allocates memory for each new
    string `MemStatus` each time it goes through the loop, and lets the pointer to
    each string that gets allocated go out of scope. As you can see, the memory that
    gets allocated never gets released, causing your application to run slowly, and
    even potentially causing it to crash or simply hang.
  prefs: []
  type: TYPE_NORMAL
- en: Run-time errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These types of errors cause your application to stop executing. It can be caused
    by an unhandled exception due to an *out of memory* issue, or *you are writing
    some data out to a database*, or *you may have exceeded the maximum allowable
    size that a field can handle*.
  prefs: []
  type: TYPE_NORMAL
- en: Compile-time errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These types of errors are the most obvious, simply because your program will
    not compile (and therefore won't run) until all of them are fixed. Generally,
    these come from typographical errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Objective-C compile in Xcode is case-sensitive, which means that `UIcolor`
    and `UIColor` are treated differently. For example, in Objective-C, the compiler
    can understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you type in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The compiler will call it a compile-time error, because you've specified a language-specific
    (syntax) that it can't recognize.
  prefs: []
  type: TYPE_NORMAL
- en: The **Trace Highlights** section of the Instruments window shows a set of useful
    graphs, based on the information that has been profiled. It contains graphs that
    show the overall usage used by the system, as well as the number of Threads and
    System calls, and VM calls.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the colors within this view indicates information related to each of
    the different tracks, and to which library each method belongs. Single-clicking
    on any of the charts will take you into a summary view, showing an overall break-down
    into each section, including call stack views, duration, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compile-time errors](img/2267_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is also the ability to change and have each of the chart colors displayed
    in a different color. This can be done by clicking on the **Scheduling** button
    icon, as shown in this screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: To change any of the colors, click on each color from the pop-up list. This
    will display the color wheel to the left of the instruments window, where you
    can change the corresponding color value within the color wheel provided.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compile-time errors](img/2267_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we looked at how to go about running and profiling an existing
    project using the Instruments application to help track-down issues with performance
    within our application, by using the System Trace for iOS instrument.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at the different views available within the Instruments application,
    and how to represent the trace document results as a color-coded graph through
    the Trace Highlights view, to indicate which section each method belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and configuring Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Instruments application comes with a wide-range of built-in instruments
    to make your job easier, by using them to gather data from one or more processes.
    Most of these instruments require little configuration to use, and are simply
    added to your trace document to start gathering trace data. We will look at how
    we add and configure instruments into an existing trace document.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Instruments library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Instruments library displays all the instruments that you can use and add
    to your trace document. The library contains all of the built-in instruments that
    come with the installation of Xcode 4, as well as any custom instruments that
    you have already created.
  prefs: []
  type: TYPE_NORMAL
- en: To open the **Instruments** window, click on the **Library** button from within
    your trace document window or choose **Window | Library** from the menu bar. Alternatively,
    you can use the *Command* + *L* keyboard shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Instruments library](img/2267_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from this screenshot, the Instruments **Library** list contains
    a massive number of instruments, which can grow over time especially when you
    start adding your own custom-built instruments.
  prefs: []
  type: TYPE_NORMAL
- en: The library list provides several options for organizing and finding the instrument
    that you are looking for, by using the different view modes. **View modes** help
    you to decide the amount of information that should be displayed at any one time,
    and the amount of space you want that instrument group to occupy.
  prefs: []
  type: TYPE_NORMAL
- en: In the following table, we describe the view modes supported by the Instruments
    **Library**.
  prefs: []
  type: TYPE_NORMAL
- en: '| **View mode types** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **View Icons** | This setting displays only the icon representing each instrument
    |'
  prefs: []
  type: TYPE_TB
- en: '| **View Icons And Labels** | This setting displays the icon with the name
    of the instrument |'
  prefs: []
  type: TYPE_TB
- en: '| **View Icons And Descriptions** | This setting displays the icon, name, and
    full description of each of the instruments |'
  prefs: []
  type: TYPE_TB
- en: '| **View Small Icons And Labels** | This setting displays the name of the instrument,
    with a small version of its icon |'
  prefs: []
  type: TYPE_TB
- en: In addition to setting the view mode of the Instruments **Library**, instruments
    can be organized into groups, which makes it easier to identify which instrument
    relates to which group. This is shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Locating an Instrument within the Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to locate an instrument within the Instrument **Library**.
    One common way is to use the group selection criteria controls, which is located
    at the top of the **Library** window, and can be used to select one or more groups
    to limit the amount of instruments that are displayed within the **Library** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you drag the split bar between the pop-up menu and the instrument pane downwards,
    you will notice that the pop-up menu changes from a single selection to an outline
    view, so that you can select multiple groups, by holding down the *Command* key
    combinations, and then selecting the desired groups to display with your mouse,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Locating an Instrument within the Library](img/2267_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another way to filter the contents of the Instruments **Library** window is
    to use the **Search** field, which is located at the bottom of the **Library**
    window. By using this **Search** field, you can quickly narrow-down and display
    only those instruments that have the search keyword within their name, description,
    category, list, or keywords.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, all instruments that contain the search string
    `file` are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Locating an Instrument within the Library](img/2267_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding and removing instruments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There will be times when you want to trace your application against other instruments
    within the Instruments **library**. This could be because you want to check to
    see how your application is performing on the device, and how much battery is
    being consumed by your application.
  prefs: []
  type: TYPE_NORMAL
- en: You can add as many instruments to your trace document as you wish, but be aware
    that not all instruments included in the library are capable of tracking a wide-range
    of system processes; you will find that some can only track a single process.
    To get around this, you can add multiple instances of the instrument, and assign
    each one to a different process. By doing it this way, you gather similar information
    for multiple programs running simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an instrument to the trace document, select the instrument from the
    Instrument **Library**, and then drag it either to the **Instruments** pane or
    directly onto the track pane of your trace document, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding and removing instruments](img/2267_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To remove an instrument from the trace document, select the instrument that
    you would like to remove from the **Instruments** pane, and then press the *Delete*
    key on your keyboard. You will then receive a confirmation message. Click on the
    **OK** button to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding and removing instruments](img/2267_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at how we go about configuring an instrument
    that you have added to your trace document.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring an instrument
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will find that most of the instruments that you add to your trace document
    are ready-to-use, out of the box. However, some instruments can be configured
    using the **Instruments Inspector** and vary depending on the type of instrument
    being configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will notice that most instruments contain options for configuring the contents
    of the track pane, while only a small handful contain additional functionality
    for determining what type of information is gathered by the instrument. To configure
    an instrument, select the instrument from the **Instruments** pane and then click
    on the **Instrument Inspector Icon**, which is located to the right of the instrument.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring an instrument](img/2267_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the **Instrument Inspector Icon** is clicked, it displays the inspector
    configuration dialog box next to the instrument name. To dismiss the inspector,
    click on the close button highlighted by an **X**. You can similarly use the *Command*
    + *I* and **File | Get Info** commands to close this window also. Depending on
    the type of instrument that is being configured, they can either be configured
    before, during, or after the data within your trace document has been recorded.
  prefs: []
  type: TYPE_NORMAL
- en: The **Zoom** control can be found in most of the inspector controls for those
    instruments, which you configure. This feature controls the magnification of the
    trace data that is displayed within the track pane, and adjusts the height of
    the instrument within the track pane. Alternatively, you can use the **View |
    Decrease Deck Size** and **View | Increase Deck Size** menu options to do the
    same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Other components of the Instruments family explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are other instruments, which come with the Instruments application, apart
    from tracking down memory leaks and allocation objects. Although not every instrument
    works with iOS applications, the list of instruments pertaining to which type
    is explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Instrument** | **Platform** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Activity Monitor | iOS /Simulator | Correlates the system workload with the
    virtual memory size. |'
  prefs: []
  type: TYPE_TB
- en: '| Allocations | iOS / Simulator | This can be used to take snapshots of the
    heap, as applications perform their tasks. If taken at two different points in
    time, it can be used to identify situations where memory is being lost, not leaked.The
    test case would be to take a snapshot, do something in the application, and then
    undo that something, returning the state of the application to its prior point.
    If the memory allocated in the heap is the same, no worries. It''s a simple and
    repeatable test scenario of performing a task, and returning the application to
    its state prior to performing the task. |'
  prefs: []
  type: TYPE_TB
- en: '| Automation | iOS / Simulator | Used to automate user interface tests in your
    iOS application. |'
  prefs: []
  type: TYPE_TB
- en: '| Core Animation | iOS | Measures the number of Core Animation frames-per-second
    in a process running on an iOS device, through visual hints that help you understand
    how content is rendered on the screen. |'
  prefs: []
  type: TYPE_TB
- en: '| CPU Sampler | iOS / Simulator | Correlates the overall system workload with
    the work being done specifically by your application. |'
  prefs: []
  type: TYPE_TB
- en: '| Energy Diagnostics | iOS | Displays diagnostics information regarding the
    amount of energy being used on the device for GPU activity, display brightness,
    sleep/wake, bluetooth, WiFi, and GPS. |'
  prefs: []
  type: TYPE_TB
- en: '| File Activity | Simulator | Examines file usage patterns in the system, by
    monitoring when files open, close, read, and write operations to files. It also
    monitors changes in the file system itself, relating to permission and owner changes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Leaks | iOS / Simulator | This instrument looks for situations where memory
    has been allocated, but is no longer able to be used. These memory leaks can lead
    to the application crashing or being shut-down. |'
  prefs: []
  type: TYPE_TB
- en: '| OpenGL ES Driver | iOS | Determines how efficiently you are using OpenGL
    and the GPU on iOS devices. |'
  prefs: []
  type: TYPE_TB
- en: '| System Usage | iOS | Records calls to functions that operate on files within
    a process on the iOS device. |'
  prefs: []
  type: TYPE_TB
- en: '| Threads | Simulator | Analyzes state transitions within a process, including
    both running and terminating threads, thread state, and associated back traces.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Time Profiler | iOS / Simulator | Performs low-overhead and time-based sampling
    of one or all processes. |'
  prefs: []
  type: TYPE_TB
- en: '| Zombies | Simulator | The Zombies instrument keeps an empty or ''dead'' object
    alive (in a sense) in place of objects that have already been released. These
    ''dead'' objects are later accessed by the faulty application logic and halt execution
    of the application without crashing. The ''zombie'' objects receive the call,
    and point the instrument to the exact location where the application would normally
    crash. |'
  prefs: []
  type: TYPE_TB
- en: What's new in Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Instruments application which comes with Xcode contains a wide range of
    built-in instruments to make your job easier, and to gather and display data for
    one or more processes. In Xcode 4.2, a collection of new instruments has been
    added and these are explained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Time Profiler with CPU strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Time profiler instrument** illustrates how much time is being spent in
    each code segment. This allows developers to prioritize which bit of logic needs
    to be re-factored prior to release. Although this can be run using the iOS simulator,
    it is recommended to run this on the iOS devices, as the performance will vary
    greatly between the two.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time Profiler with CPU strategy](img/2267_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Within the Time Profiler instrument, you can use the buttons at the left end
    of this bar to display the track view pane, using one of three strategies shown
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **View mode types** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CPU strategy | This setting displays CPU activity on each active core. This
    strategy can help you determine if your application has achieved concurrency.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Instruments strategy | This setting displays CPU activity in a single track.
    This is the default strategy. |'
  prefs: []
  type: TYPE_TB
- en: '| Threads strategy | This setting displays the CPU activity per-individual-thread.
    |'
  prefs: []
  type: TYPE_TB
- en: The Time Profiler instrument also provides developers with the ability to run
    the applications that they are developing on the iPad 2 and iPhone 4/4S. You can
    use the CPU strategy feature to measure activity on each CPU core.
  prefs: []
  type: TYPE_NORMAL
- en: This is highlighted by the red rectangle, show in the previous screenshot. If
    your application supports concurrency, this should show evidence of activity on
    both of the iPad 2 cores at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CPU strategy feature is currently only available in the Time Profiler instrument.
  prefs: []
  type: TYPE_NORMAL
- en: There is also the ability to configure the Time Profiler instrument to limit
    the number of active processor cores. This is to allow you to configure your application
    to see how it will perform on systems running with fewer cores. An example of
    this would be, for instance, if you had a MacBook Pro running with four active
    core processors, but you wanted to limit this to work with two active core processors,
    to see how this would profile on a MacBook Pro running two cores.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your CPU supports multi-threading, this is also referred to as **hyper-threading**.
    This means that for each physical core, there is a second logical core. Take for
    example: if you have a system that has hyper-threading enabled, and running with
    four physical cores, this will result in the system running with a total of eight
    cores.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time Profiler with CPU strategy](img/2267_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot shows you how to go about configuring the total number of active-processor
    cores. This screen can be accessed through the **Instruments | Preferences** menu
    option, or alternatively, you can use the *Command* + key combination.
  prefs: []
  type: TYPE_NORMAL
- en: From this screen, click on the **General** pane, and then select or deselect
    the **Hardware Multi-Threading** checkbox from the **Active Processor Cores**,
    provided that this feature is supported by your system. You can also use the slider
    to specify the number of active cores to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any changes made to the number of active cores doesn't turn off any of the processor
    cores-instead, the Instruments application tells the system not to schedule work
    on the cores that are made inactive.
  prefs: []
  type: TYPE_NORMAL
- en: System Trace for iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **System Trace for iOS** instrument gives you the ability to profile against
    different aspects of the operating system which could be affecting application
    performance. This provides information on any system calls, thread scheduling,
    and **Virtual Memory** (**VM**) operations.
  prefs: []
  type: TYPE_NORMAL
- en: An example of where this instrument could be useful, would be when you want
    to find out why your code is not executing on the CPU in a timely fashion, or
    if you are a game developer, and you wanted to find out why your applications,
    frame-rate has dropped unexpectedly.
  prefs: []
  type: TYPE_NORMAL
- en: In Instruments 4.2, you can use the System Trace tool to profile both iOS and
    Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how to use this type of instrument, refer to the section
    named *Tracing iOS applications*, located within this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Network Connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Network Connections** instrument gives you the ability to inspect how
    your iOS application is using TCP/IP and UDP/IP connections. When you use this
    instrument, it automatically takes a snapshot of all open ports available, and
    reports their cumulative network activity within the detail view, to see how much
    data is flowing over each connection and for each application.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot displays the **Connection Summary** section of the
    detail view, and shows the incoming and outgoing network connections, as well
    as all of the open connections for all processes.
  prefs: []
  type: TYPE_NORMAL
- en: You will also see that you are provided with the ability to view statistic,
    such as round trip times and re-transmission requests to help reduce network traffic
    and energy consumption.
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Connections](img/2267_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The detail view also allows you to choose from the following display views;
    these are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **View mode types** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Process** summary | This setting aggregates the cumulative data for each
    process only. |'
  prefs: []
  type: TYPE_TB
- en: '| **Interface** summary | This setting aggregates the data by network. |'
  prefs: []
  type: TYPE_TB
- en: 'You can also choose to have the details view display a set of useful graphs,
    by selecting the **Trace Highlights** option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network Connections](img/2267_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot shows the **Port Activity** and the **Process Activity** comparisons.
    The **Port Activity** feature measures the incoming and outgoing connections.
    The **Process Activity** feature measures the activity used by the application.
  prefs: []
  type: TYPE_NORMAL
- en: Network activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Network Activity** instrument helps you bridge the gap between networking
    (cellular and Wi-Fi) and energy usage. You can use this instrument to track the
    device-wide volume of data flow through each network interface alongside an energy
    usage level taken directly from the battery, as well as correlate network activity
    with energy usage in iOS devices, and is also included as part of the Energy Diagnostics
    template for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the **Energy Diagnostics** trace document,
    with the run results that show the different **Energy Usage** levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network activity](img/2267_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you run this for the first time, you will notice that the network activity
    is frequent enough to keep the process active, which will result in much greater
    energy consumption. If you were to run this again, you will notice that the same
    data is transmitted in larger, but less frequent bursts, allowing the application
    to sleep between transmissions.
  prefs: []
  type: TYPE_NORMAL
- en: The **Energy Diagnostics** instrument is the most exciting tool that Apple gave
    to developers. This instrument will help you identify optimum use of the iOS device
    resources, by enabling you to test your application as close to real-world scenarios
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The data collected can later be analyzed to see how much of the device's battery
    life each function consumes, and it will tell the developer how long each of the
    device's various components are used. If you need to know the user's location,
    it will tell you which devices were turned on and for how long. **GPS** is a particular
    resource that consumes much of the device's battery life. Turning off **location
    services** once a location has been obtained is ideal.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are interested in reading more about Instruments, you can refer to the
    *Instruments User Guide Documentation*, at the following link provided: [http://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on the new additions to the Xcode Instruments application,
    and how we can use this brilliant tool to ensure that our application runs smoothly,
    free from bottlenecks that could potentially affect the performance of an application.
  prefs: []
  type: TYPE_NORMAL
- en: We took a look into each of the different types of built-in instruments that
    become part of the Instruments application, in particular the Systems Trace for
    iOS instrument. This helps track-down system calls, memory, and threads that may
    be affecting application performance on your iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: We ended the chapter looking at how we can configure instruments to represent
    data differently within the trace document.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope you have enjoyed reading it as much as I did writing it. This is certainly
    not the end of the road for you. There is a lot of stuff to explore in the world
    of Xcode and iPhone. Don''t worry! You won''t be on your own. There are many developers
    out there who are more than willing to help you in case you get stuck at any point
    in time: [http://developer.apple.com/devforums/](http://developer.apple.com/devforums/).'
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with your Xcode journey. I hope to see your application on the Apple
    App Store soon!
  prefs: []
  type: TYPE_NORMAL
