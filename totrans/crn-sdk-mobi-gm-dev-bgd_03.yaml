- en: 'Chapter 3. Building our First Game: Breakout'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 构建我们的第一个游戏：Breakout
- en: Up until now, we have gone through some important basics of programming in Lua
    and applying some code to run in the Corona simulator. Knowing the terminology
    is a small part of learning how to make an application. We'll need to take a step
    further and get some hands on experience on what it's like to structure a project
    from beginning to finish. We're going to accomplish this by creating our first
    game from scratch. This will push you further into understanding larger chunks
    of code and applying some game logic to make a functional game.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Lua编程的一些重要基础知识，并在Corona模拟器中应用了一些代码。了解术语只是学习如何制作应用程序的一部分。我们需要更进一步，亲身体验从开始到结束构建项目的感觉。我们将通过从头开始创建我们的第一个游戏来实现这一点。这将帮助你更深入地理解代码块，并应用一些游戏逻辑来制作一个功能性的游戏。
- en: 'By the end of this chapter, you will understand the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将理解以下内容：
- en: Structuring game files in a Corona project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Corona项目中组织游戏文件
- en: Creating variables for the game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为游戏创建变量
- en: Adding game objects to the screen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏对象添加到屏幕上
- en: Making an alert message
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个警告消息
- en: Displaying score and level number
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示得分和关卡编号
- en: Let the fun begin!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让乐趣开始吧！
- en: Breakout—bringing back old-school gaming
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Breakout——重温经典游戏
- en: 'You have probably seen many forms of the game Breakout in the past couple of
    decades, especially during the Atari days. To give you a good idea of what the
    game is about, here is a brief editorial by Big Fish Games about the history of
    Breakout: [http://www.bigfishgames.com/blog/the-history-of-breakout/](http://www.bigfishgames.com/blog/the-history-of-breakout/).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在过去几十年中看到过许多形式的Breakout游戏，尤其是在雅达利时代。为了给你一个关于游戏内容的良好印象，这里有一篇Big Fish Games关于Breakout历史的简要评论：[http://www.bigfishgames.com/blog/the-history-of-breakout/](http://www.bigfishgames.com/blog/the-history-of-breakout/)。
- en: '![Breakout—bringing back old-school gaming](img/1888_03_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Breakout——重温经典游戏](img/1888_03_01.jpg)'
- en: On the game screen, there are several columns and rows of bricks placed near
    the top of the screen. A ball travels across the screen, bouncing off the top
    and side walls of the screen. When a brick is hit, the ball bounces away and the
    brick is destroyed. The player loses the round when the ball touches the bottom
    of the screen. To prevent this from happening, the player has a movable paddle
    to bounce the ball upward, keeping it in play.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏屏幕上，有几列和几行砖块放置在屏幕顶部附近。一个球在屏幕上滚动，反弹到屏幕的顶部和侧面墙壁。当球击中砖块时，球会弹开，砖块被摧毁。当球触碰到屏幕底部时，玩家就会输掉这一轮。为了防止这种情况发生，玩家有一个可移动的球拍来将球弹回上方，保持游戏进行。
- en: We're going to be creating a clone using touch events and the accelerometer
    for paddle movement that will be controlled by the player. We'll be adding some
    physics to the ball so it can bounce throughout the screen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个克隆版本，使用触摸事件和加速度计来控制球拍移动，这将由玩家控制。我们将为球添加一些物理属性，使其可以在整个屏幕上弹跳。
- en: In the next chapter, we'll be adding the movement of the game objects, collision
    detection, score keeping, and win/lose conditions. Right now, we're going to focus
    on how to set up the game template of Breakout.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将添加游戏对象的移动、碰撞检测、得分和胜负条件。现在，我们将专注于如何设置Breakout的游戏模板。
- en: Understanding Corona physics API
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Corona物理API
- en: Corona has made it convenient to add physics to your games, especially if you've
    never worked on one before. The engine uses **Box2D** and takes only a few lines
    to incorporate it into your application than what it normally takes to have it
    set up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Corona使得向游戏中添加物理属性变得方便，尤其是如果你之前从未接触过。该引擎使用**Box2D**，将其集成到应用程序中只需几行代码，比通常设置它所需的时间要少。
- en: Working with the physics engine in Corona is fairly easy. You use display objects
    and set them as a physical body in your code. Images, sprites, and vector shapes
    can be turned into a physical object. This is substantial in visualizing how you
    want your objects to react in an environment you have created. You can see results
    right away rather than guessing how they might act in a physical world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在Corona中使用物理引擎相对简单。你使用显示对象并在代码中将它们设置为物理体。图像、精灵和矢量形状可以被转换成物理对象。这有助于可视化你希望对象在创建的环境中如何反应。你可以立即看到结果，而不是猜测它们在物理世界中的行为。
- en: Setting up the physics world
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置物理世界
- en: 'Making the physics engine available in your app requires the following line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用中使物理引擎可用需要以下行：
- en: '`local physics = require "physics"`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`local physics = require "physics"`'
- en: Starting, pausing, and stopping physics
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始、暂停和停止物理效果
- en: 'There are three main functions that affect the physics simulation:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要函数会影响物理模拟：
- en: '`physics.start():` This will start or resume the physical environment. It is
    usually activated at the beginning of the application for physics bodies to take
    effect.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.start():` 这将启动或恢复物理环境。通常在应用程序开始时激活，以便物理物体生效。'
- en: '`physics.pause():` This stops the physics engine temporarily.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.pause():` 这将暂时停止物理引擎。'
- en: '`physics.stop():`This basically destroys the physical world altogether.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.stop():` 这基本上会完全摧毁物理世界。'
- en: physics.setGravity
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setGravity
- en: This function returns the x and y parameters of the global gravity vector, in
    units of meter per second square (acceleration units). The default is (0, 9.8)
    to simulate standard Earth gravity, pointing downwards on the y-axis. For example,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回全局重力向量的 x 和 y 参数，单位为每秒平方米（加速度单位）。默认值为 (0, 9.8) 以模拟标准地球重力，指向 y 轴的下方。例如，
- en: 'Syntax: `physics.setGravity(gx, gy)`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`physics.setGravity(gx, gy)`
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: physics.getGravity
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.getGravity
- en: This function returns the x and y parameters of the global gravity vector, in
    units of meter per second square (acceleration units).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回全局重力向量的 x 和 y 参数，单位为每秒平方米（加速度单位）。
- en: 'Syntax: `gx, gy = physics.getGravity()`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`gx, gy = physics.getGravity()`
- en: Tilt-based gravity
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于倾斜的重力
- en: 'When you have physics.setGravity(gx, gy) and accelerometer API applied, implementing
    tilt-based dynamic gravity is simple. The following is an example of creating
    the tilt-based function:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你应用了 physics.setGravity(gx, gy) 和加速度计 API，实现基于倾斜的动态重力变得简单。以下是一个创建基于倾斜函数的示例：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The accelerometer is not present in the Corona Simulator; a device build must
    be created to see the effect.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计在 Corona 模拟器中不存在；必须创建设备构建才能看到效果。
- en: physics.setScale
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setScale
- en: This function sets the internal pixels-per-meter ratio used in converting between
    the onscreen Corona coordinates and simulated physics coordinates. This should
    be done before any physical objects are instantiated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置用于在屏幕 Corona 坐标和模拟物理坐标之间转换的内部像素每米比率。这应该在实例化任何物理对象之前完成。
- en: The default scaling value is 30\. For devices of higher resolution like iPad,
    Android, or iPhone 4, you may wish to increase this value to 60 or more.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认缩放值是 30。对于分辨率更高的设备，如 iPad、Android 或 iPhone 4，你可能希望将此值增加到 60 或更多。
- en: 'Syntax: `physics.setScale( value )`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`physics.setScale( value )`
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: physics.setDrawMode
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setDrawMode
- en: There are three rendering modes for the physics engine. This can be altered
    at any time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 物理引擎有三个渲染模式。这可以在任何时候进行更改。
- en: 'Syntax: `physics.setDrawMode( mode )`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`physics.setDrawMode( mode )`
- en: '`physics.setDrawMode( "debug" ):` This mode shows collision engine outlines
    only![physics.setDrawMode](img/1888_03_02.jpg)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode( "debug" ):` 此模式仅显示碰撞引擎轮廓![physics.setDrawMode](img/1888_03_02.jpg)'
- en: '`physics.setDrawMode( "hybrid" ):` This mode overlays collision outlines on
    normal Corona objects![physics.setDrawMode](img/1888_03_03.jpg)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode( "hybrid" ):` 此模式在正常 Corona 对象上叠加碰撞轮廓![physics.setDrawMode](img/1888_03_03.jpg)'
- en: '`physics.setDrawMode( "normal" ):` This mode is the default Corona renderer,
    with no collision outlines![physics.setDrawMode](img/1888_03_04.jpg)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`physics.setDrawMode( "normal" ):` 此模式是默认的 Corona 渲染器，没有碰撞轮廓![physics.setDrawMode](img/1888_03_04.jpg)'
- en: 'The physics data is displayed using color-coded vector graphics, which reflect
    different object types and attributes:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 物理数据使用彩色矢量图形显示，反映了不同对象类型和属性：
- en: '**Orange**—dynamic physics bodies (the default body type)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**橙色**——动态物理物体（默认物体类型）'
- en: '**Dark blue**—kinematic physics bodies'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深蓝色**——运动学物理物体'
- en: '**Green**—static physics bodies such as the ground or walls'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绿色**——静态物理物体，如地面或墙壁'
- en: '**Gray**—a body that is *sleeping* due to lack of activity'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灰色**——由于缺乏活动而处于**休眠状态**的物体'
- en: '**Light blue**—joints'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浅蓝色**——关节'
- en: physics.setPositionIterations
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setPositionIterations
- en: This function sets the accuracy of the engine's position calculations. The default
    value is `8`, meaning that the engine will iterate through eight position approximations
    per frame for every object but will increase processor engagement, so it should
    be handled carefully because it might slow down the application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置引擎位置计算的精度。默认值为 `8`，意味着引擎将每帧迭代八个位置近似值，每个对象，但会增加处理器占用，因此应谨慎处理，因为它可能会减慢应用程序的运行速度。
- en: 'Syntax: `physics.setPositionIterations( value )`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`physics.setPositionIterations( value )`
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: physics.setVelocityIterations
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: physics.setVelocityIterations
- en: This function sets the accuracy of the engine's velocity calculations. The default
    value is `3`, meaning that the engine will iterate through three velocity approximations
    per frame for every object but will increase processor engagement, so it should
    be handled carefully because it might slow down the application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置引擎速度计算的精度。默认值是 `3`，这意味着引擎将为每个对象在每个帧中迭代三个速度近似值，但这会增加处理器的占用，因此应该小心处理，因为它可能会减慢应用程序的运行速度。
- en: 'Syntax: `physics.setVelocityIterations( value )`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`physics.setVelocityIterations( value )`
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Configuring the application
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用程序
- en: This tutorial is compatible for both iOS and Android devices. The graphics have
    been designed to accommodate the varying screen dimensions of both platforms.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程适用于 iOS 和 Android 设备。图形已被设计以适应这两个平台的屏幕尺寸变化。
- en: Build configuration
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建配置
- en: By default, all items displayed on all device screens are shown in portrait
    mode. We'll be creating this game specifically in landscape mode, so we'll have
    to alter some build settings and configure how all the items on screen will be
    displayed. Playing the game in landscape mode will actually add more player interactivity
    since the paddle will have more screen space to move about and less airtime for
    the ball.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有设备屏幕上显示的所有项目都以竖屏模式显示。我们将专门在横屏模式下创建这款游戏，因此我们需要修改一些构建设置并配置屏幕上所有项目的显示方式。在横屏模式下玩游戏实际上会增加玩家的交互性，因为挡板将有更多的屏幕空间移动，而球体将拥有更少的时间在空中。
- en: Time for action—adding build.settings file
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加 build.settings 文件
- en: Build-time properties can be provided in an optional `build.settings` file,
    which uses Lua syntax. The `build.settings` file is used to set application orientation
    and auto-rotation behavior, along with a variety of platform-specific build parameters.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时属性可以通过可选的 `build.settings` 文件提供，该文件使用 Lua 语法。`build.settings` 文件用于设置应用程序的方向和自动旋转行为，以及各种平台特定的构建参数。
- en: Create a new project folder on your desktop called `Breakout`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的桌面上创建一个新的项目文件夹，命名为 `Breakout`。
- en: In your preferred text editor, make a new file called `build.settings` and save
    it to your project folder.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的文本编辑器中，创建一个名为 `build.settings` 的新文件，并将其保存到您的项目文件夹中。
- en: 'Type in the following lines:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下行：
- en: '[PRE5]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save and close. The `build.settings` file is completed.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭。`build.settings` 文件已完成。
- en: What just happened?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The default orientation setting determines the initial launch orientation on
    the device, and also the initial orientation of the Corona simulator.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方向设置决定了设备上的初始启动方向，以及 Corona 模拟器的初始方向。
- en: The default orientation doesn't affect Android devices. The orientation is initialized
    to the actual orientation of the device (unless only one orientation is specified).
    Also, the only supported orientations are `landscapeRight` and portrait. On a
    device, you can flip to either `landscapeRight` or `landscapeLeft`, but the operating
    system only reports one flavor of landscape, and Corona's orientation event chooses
    `landscapeRight`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认方向不会影响 Android 设备。方向初始化为设备的实际方向（除非只指定了一个方向）。此外，唯一支持的旋转方向是 `landscapeRight`
    和竖屏。在设备上，您可以切换到 `landscapeRight` 或 `landscapeLeft`，但操作系统只会报告一种横屏，Corona 的方向事件选择
    `landscapeRight`。
- en: We have created this application to work with landscape orientations, supporting
    `landscapeRight`. We have set this orientation as its default so it won't switch
    to `landscapeLeft` or even any portrait mode. While working on an iOS device,
    if the `build.settings` aren't set before launching the application, it will go
    to the default portrait mode.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建此应用程序以支持横屏方向，支持 `landscapeRight`。我们已将其设置为默认方向，因此它不会切换到 `landscapeLeft`
    或任何竖屏模式。当在 iOS 设备上工作时，如果在启动应用程序之前未设置 `build.settings`，它将进入默认的竖屏模式。
- en: Runtime configuration
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时配置
- en: Currently our project is not scaled to display evenly for cross-platform development.
    The contents will still display on the device, but most likely not in the correct
    aspect ratio.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的项目尚未缩放以均匀显示跨平台开发。内容仍将在设备上显示，但很可能会不在正确的宽高比中。
- en: For example, iPhone projects are designed for a 320 pixel wide screen and can
    be up scaled to the 480 pixel wide screen for Android devices. This makes porting
    easier, since the code and art assets do not need to be revised.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，iPhone 项目是为 320 像素宽的屏幕设计的，可以升级到 480 像素宽的屏幕以适应 Android 设备。这使得移植变得更容易，因为代码和艺术资源不需要修改。
- en: Corona can target builds made for iPhone 4 and other current iOS devices that
    display double resolution art assets while remaining iOS 3.0-compatible. This
    means that pre-iPhone 4 content will no longer upscale automatically to the larger
    iPhone 4 screen resolution. As iOS development progresses, content scaling will
    generally be required in new iPhone apps to be compatible with devices such as
    the iPhone 3GS and lower.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Corona可以针对为iPhone 4和其他当前iOS设备制作的构建，这些设备显示双倍分辨率的艺术资源，同时保持iOS 3.0兼容性。这意味着iPhone
    4之前的旧内容将不再自动放大到更大的iPhone 4屏幕分辨率。随着iOS开发的进步，内容缩放通常在新iPhone应用中是必需的，以兼容iPhone 3GS和更低的设备。
- en: Time for action—adding config.lua file
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动手实践——添加config.lua文件
- en: If no content size is specified, the content width and height returned will
    be the same as the physical screen width and height of the device. If you specify
    a different content width and height in `config.lua`, the content width and height
    will take on those values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定内容大小，则返回的内容宽度和高度将与设备的物理屏幕宽度和高度相同。如果您在`config.lua`中指定不同的内容宽度和高度，则内容宽度和高度将采用这些值。
- en: In your text editor, create a new file called `config.lua` and save it to your
    project folder.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中，创建一个名为`config.lua`的新文件，并将其保存到您的项目文件夹中。
- en: 'Type in the following lines:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下行：
- en: '[PRE6]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save and close your file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭你的文件。
- en: What just happened?
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The content width and height allow you to choose a virtual screen size that
    is independent of the physical device screen size. We have set the size to target
    the original iPhone since it displays the smallest dimensions across all the devices
    on both iOS and Android platforms. The original iPhone has dimensions of 320 x
    480\. With this configuration, it'll still scale evenly for the iPad, which has
    dimensions of 768 x 1024.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 内容宽度和高度允许您选择一个虚拟屏幕大小，该大小独立于物理设备屏幕大小。我们已将大小设置为针对原始iPhone，因为它在iOS和Android平台上所有设备中显示的最小尺寸。原始iPhone的尺寸为320
    x 480。使用此配置，它仍然会均匀缩放到iPad，其尺寸为768 x 1024。
- en: The scale used for this application is set to `letterbox`. It will uniformly
    scale up content as much as possible, while still showing all content on the screen.
    This will create a widescreen look, which will be compatible with the Droid, which
    has a longer screen than the iPhone 3GS.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此应用中使用的缩放比例设置为`letterbox`。它将尽可能均匀地放大内容，同时仍然在屏幕上显示所有内容。这将创建一个宽屏外观，与屏幕比iPhone
    3GS更长的Droid兼容。
- en: We set `fps = 60`. By default, the frame rate is 30 fps. In this application,
    this will make the movement of the ball appear faster and allow us to increase
    the speed conveniently. We can stretch the frame rate to a maximum of 60 fps that
    Corona can allow.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`fps`设置为`60`。默认情况下，帧率为30 fps。在此应用中，这将使球的移动看起来更快，并允许我们方便地提高速度。我们可以将帧率扩展到Corona允许的最大60
    fps。
- en: Building the application
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用
- en: 'Now that we have configured our application to landscape mode and set the display
    contents to scale on multiple devices, we''re ready to start designing the game.
    Before we start writing some code for the game, we need to add in some art assets
    that will be displayed on the screen. You can find them in the `Chapter 3 Resources`
    folder. You can download the project files accompanying this book from the Packt
    website. The following files that you''ll need to add to your `Breakout` project
    folder are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将应用配置为横幅模式，并将显示内容设置为在多台设备上缩放，我们准备开始设计游戏。在我们开始编写游戏代码之前，我们需要添加一些将在屏幕上显示的艺术资源。您可以在`第3章资源`文件夹中找到它们。您可以从Packt网站下载本书附带的项目文件。以下是需要添加到您的`Breakout`项目文件夹中的文件如下：
- en: alertBox.png
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: alertBox.png
- en: bg.png
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bg.png
- en: mmScreen.png
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mmScreen.png
- en: ball.png
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ball.png
- en: paddle.png
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: paddle.png
- en: brick.png
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: brick.png
- en: playbtn.png
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: playbtn.png
- en: Displaying groups
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示组
- en: An important function we'll be introducing in this game is `display.newGroup().`
    Groups allow you to add and remove child display objects. Initially, there are
    no children in a group. The local origin is at the parent object's origin; the
    reference point is initialised to this local origin. You can easily organize your
    display objects in separate groups and refer to them by their group name. For
    example, in Breakout, we'll combine menu items such as the **Title** screen and
    **Play** button in a group called `menuScreenGroup`. Every time we access `menuScreenGroup,`
    any display object defined by the group name will be called.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个游戏中，我们将介绍一个重要的函数 `display.newGroup()`。组允许您添加和删除子显示对象。最初，组中没有子对象。局部原点位于父对象的原点；参考点初始化为此局部原点。您可以轻松地将显示对象组织到不同的组中，并通过它们的组名来引用它们。例如，在
    Breakout 中，我们将菜单项（如**标题**屏幕和**播放**按钮）组合到一个名为 `menuScreenGroup` 的组中。每次我们访问 `menuScreenGroup`
    时，任何由组名定义的显示对象都将被调用。
- en: display.newGroup()
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: display.newGroup()
- en: This function creates a group in which you can add and remove child display
    objects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数创建一个组，您可以在其中添加和删除子显示对象。
- en: 'Syntax: `display.newGroup()`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`display.newGroup()`
- en: 'Example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Working with system functions
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用系统函数
- en: The system functions we're going to introduce in this chapter will return information
    about the system (get device information, current orientation) and control system
    functions (enabling Multi-touch, controlling the idle time, Accelerometer, GPS).
    We'll be using the following system functions to return environment information
    on which our application will be running and the response frequency for accelerometer
    events.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将要介绍的系统函数将返回有关系统（获取设备信息、当前方向）和控制系统函数（启用多点触控、控制空闲时间、加速度计、GPS）的信息。我们将使用以下系统函数来返回应用程序运行的环境信息以及加速度计事件的响应频率。
- en: system.getInfo()
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: system.getInfo()
- en: This function returns information about the system on which the application
    is running.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回有关应用程序运行在的系统信息。
- en: 'Syntax: `system.getInfo( param )`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`system.getInfo( param )`
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Valid values for parameters are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的有效值如下：
- en: '`"name"`—returns the name. For example, on the iTouch, this would be the name
    of the phone as it appears in iTunes, *Pat''s iTouch*.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"name"`—返回名称。例如，在 iTouch 上，这将是在 iTunes 中显示的电话名称，*Pat 的 iTouch*。'
- en: '`"model"`—returns the device type. These include:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"model"`—返回设备类型。这些包括：'
- en: '"iPhone"'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"iPhone"'
- en: '"iPad"'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"iPad"'
- en: '"iPhone Simulator"'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"iPhone Simulator"'
- en: '"Nexus One"'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Nexus One"'
- en: '"Droid"'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Droid"'
- en: '"myTouch"'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"myTouch"'
- en: '"Galaxy Tab"'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Galaxy Tab"'
- en: '`"deviceID"`—returns the unique id of the device.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"deviceID"`—返回设备的唯一 ID。'
- en: '`"environment"`—returns the environment that the app is running in. These include:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"environment"`—返回应用程序运行的环境。这些包括：'
- en: '`"simulator":` The Corona Simulator'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"simulator"`：Corona 模拟器'
- en: '`"device":` iOS, Android device, and the Xcode Simulator'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"device"`：iOS、Android 设备和 Xcode 模拟器'
- en: '`"platformName"`—returns the platform name (the OS name), that is, one of the
    following:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"platformName"`—返回平台名称（操作系统名称），即以下之一：'
- en: Mac OS X (Corona Simulator on Mac)
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X（Mac 上的 Corona 模拟器）
- en: Win (Corona Simulator on Windows))
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Win（Windows 上的 Corona 模拟器）
- en: iPhone OS (all iOS devices))
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: iPhone OS（所有 iOS 设备）
- en: Android (all Android devices))
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android（所有 Android 设备）
- en: '`"platformVersion"`—returns a string representation of the platform version.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"platformVersion"`—返回平台版本的字符串表示。'
- en: '`"version"`—returns the version of Corona used.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"version"`—返回使用的 Corona 版本。'
- en: '`"build"`—returns the Corona build string.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"build"`—返回 Corona 构建字符串。'
- en: '`"textureMemoryUsed"`—returns the texture memory usage in bytes.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"textureMemoryUsed"`—以字节为单位返回纹理内存使用情况。'
- en: '`"maxTextureSize"`—returns the maximum texture width or height supported by
    the device.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"maxTextureSize"`—返回设备支持的纹理最大宽度或高度。'
- en: '`"architectureInfo"`—returns a string describing the underlying CPU architecture
    of the device you are running on.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"architectureInfo"`—返回描述您正在运行的设备底层 CPU 架构的字符串。'
- en: system.setAccelerometerInterval()
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: system.setAccelerometerInterval()
- en: This function sets the frequency of accelerometer events. The minimum frequency
    is 10 Hz and the maximum is 100 Hz on the iPhone. Accelerometer events are a significant
    drain on battery; so only increase the frequency when you need faster responses
    in games. Always try to lower the frequency whenever possible to conserve battery
    life.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数设置加速度计事件的频率。iPhone 上的最小频率是 10 Hz，最大频率是 100 Hz。加速度计事件对电池的消耗很大；因此，只有在需要更快响应的游戏中才增加频率。始终尽可能降低频率以节省电池寿命。
- en: 'Syntax: `system.setAccelerometerInterval( frequency )`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 语法：`system.setAccelerometerInterval( frequency )`
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The function sets the sample interval in Hertz. Hertz is cycles per second,
    the number of measurements to take per second. If you set the frequency to 75,
    then the system will take 75 measurements per second.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 函数设置样本间隔（赫兹）。赫兹是每秒的周期数，每秒要进行的测量次数。如果你将频率设置为 75，则系统将每秒进行 75 次测量。
- en: After you have added the assets from the Chapter 3 Resources folder into your
    project folder, let's begin writing some code!
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将第 3 章资源文件夹中的资产添加到你的项目文件夹后，让我们开始编写一些代码！
- en: Time for action—creating variables for the game
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——为游戏创建变量
- en: For any application to start we'll need to make a `main.lua` file. This has
    been discussed in the previous chapter when we worked with some sample code and
    ran it with the simulator.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动任何应用程序，我们需要创建一个`main.lua`文件。这在上一章中已经讨论过，当时我们使用了一些示例代码并在模拟器中运行它。
- en: 'The code will be structured accordingly in your `main.lua` by the time the
    game is completed:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏完成时，代码将根据你的`main.lua`文件进行相应地结构化：
- en: '`Necessary Classes` (For example: physics or ui)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`必要的类`（例如：物理或ui）'
- en: '`Variables and Constants`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`变量和常量`'
- en: '`Main Function`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`主函数`'
- en: '`Object Methods`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`对象方法`'
- en: '`Call Main Function` (This always has to be called or your application will
    not run)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`调用主函数`（这总是必须调用，否则你的应用程序将无法运行）'
- en: Formatting your code to make it look like the preceding structure is good practice
    on keeping things organized and running your application efficiently.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化你的代码以使其看起来像前面的结构是保持事物组织良好并高效运行应用程序的良好实践。
- en: In this section, we'll be introducing the display group that will show the **Main
    Menu** screen and a **Play** button that the user will be able to interact with
    to move on to the **Main Game** screen. All in-game elements such as the paddle,
    ball, brick objects, and heads-up display elements follow after the player interacts
    with the **Play** button. We'll also be introducing win and lose conditions that
    will be referred to as the `alertDisplayGroup`. All these game elements will be
    initialized in the beginning of our code.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍将显示主菜单屏幕和一个用户可以与之交互以进入主游戏屏幕的**Play**按钮的显示组。所有游戏元素，如桨、球、砖块对象和抬头显示元素，都在玩家点击**Play**按钮后跟随。我们还将介绍将被称为`alertDisplayGroup`的赢和输条件。所有这些游戏元素将在我们代码的开始部分初始化。
- en: Create a new `main.lua` file in your text editor and save it to your project
    folder.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中创建一个新的`main.lua`文件并将其保存到你的项目文件夹中。
- en: We're going to hide the status bar (specifically for iOS devices) and load the
    physics engine. Corona uses the Box2D engine that is already built into the SDK.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将隐藏状态栏（特别是针对 iOS 设备）并加载物理引擎。Corona 使用已内置到 SDK 中的 Box2D 引擎。
- en: '[PRE10]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'More information on the Corona Physics API can be found on the Corona website
    at: [http://developer.anscamobile.com/content/game-edition-box2d-physics-engine](http://developer.anscamobile.com/content/game-edition-box2d-physics-engine).'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于 Corona 物理API的信息可以在 Corona 网站上找到：[http://developer.anscamobile.com/content/game-edition-box2d-physics-engine](http://developer.anscamobile.com/content/game-edition-box2d-physics-engine)。
- en: 'The Box2D physics engine used in Corona SDK was written by Erin Catto of Blizzard
    Entertainment. More information on Box2D can be found at: [http://box2d.org/manual.pdf](http://box2d.org/manual.pdf).'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Corona SDK 中使用的 Box2D 物理引擎是由暴雪娱乐的 Erin Catto 编写的。更多关于 Box2D 的信息可以在[http://box2d.org/manual.pdf](http://box2d.org/manual.pdf)找到。
- en: Add in the menu screen objects.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加菜单屏幕对象。
- en: '[PRE11]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add in the in-game screen objects.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加游戏屏幕对象。
- en: '[PRE12]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Add in HUD elements for the score and level.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加分数和等级的 HUD 元素。
- en: '[PRE13]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The HUD is also known as the heads-up display. It is a method of visually representing
    character information on the game screen.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HUD 也称为抬头显示。它是一种在游戏屏幕上视觉表示角色信息的方法。
- en: Next, we'll add in the alert display group for the win/lose conditions.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加用于赢/输条件的警告显示组。
- en: '[PRE14]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The following variables hold the values for the bricks display group, score,
    ball velocity, and in game events.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下变量包含砖块显示组、分数、球的速度和在游戏事件中的值。
- en: '[PRE15]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Accelerometer events can only be tested on a device, so we're going to add a
    variable for touch events on the paddle by calling the`"simulator"` environment.
    This is so we can test the paddle movement in the Corona simulator. If you were
    to test the application on a device, the event listeners for touch and accelerometer
    on the paddle won't conflict.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加速度计事件只能在设备上测试，因此我们将通过调用`"simulator"`环境为挡板添加一个触摸事件变量。这样我们就可以在Corona模拟器中测试挡板移动。如果你要在设备上测试应用程序，挡板上的触摸和加速度计事件监听器不会冲突。
- en: '[PRE16]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Lastly, add in the `main()` function. This will start our application.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加`main()`函数。这将启动我们的应用程序。
- en: '[PRE17]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What just happened?
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `display.setStatusBar(display.HiddenStatusBar)` is only applicable to iOS
    devices. It hides the appearance of the status bar.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`display.setStatusBar(display.HiddenStatusBar)`仅适用于iOS设备。它隐藏了状态栏的显示。'
- en: A new Corona API we added to this game is the physics engine. We'll be adding
    physics parameters to the main game objects (paddle, ball, and bricks) for collision
    detection. Having `setGravity(0,0)` will allow the ball to bounce throughout the
    playing field freely.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个游戏添加了一个新的Corona API，即物理引擎。我们将为主要的游戏对象（挡板、球和砖块）添加物理参数以进行碰撞检测。设置`setGravity(0,0)`将允许球在游戏场地上自由弹跳。
- en: '`local menuScreenGroup, local alertDisplayGroup`, and `local bricks` are all
    forms of display groups we can separate and organize our display objects to. For
    example, `local menuScreenGroup` is designated for the objects that show up on
    the **Main Menu** screen; that way they can be removed as a group and not as individual
    objects.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`local menuScreenGroup`、`local alertDisplayGroup`和`local bricks`都是我们可以分离和组织显示对象的显示组形式。例如，`local
    menuScreenGroup`是为显示在**主菜单**屏幕上的对象指定的；这样它们就可以作为一个组而不是单个对象被移除。'
- en: Some of the variables added already have values that are applied to certain
    game objects. There is already a set velocity for the ball using `local vx = 3`
    and `local vy = -3`. The x and y velocity determines how the ball moves on the
    game screen. Depending on the position the ball collides with an object, the ball
    will follow a continuous path. The `brickWidth` and `brickHeight` have a value
    that will stay constant throughout the application so we can line the brick objects
    evenly onscreen.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 已经添加的一些变量已经有了应用于某些游戏对象的值。球已经使用`local vx = 3`和`local vy = -3`设置了速度。x和y速度决定了球在游戏屏幕上的移动方式。根据球与对象的碰撞位置，球将沿着连续的路径移动。`brickWidth`和`brickHeight`有一个值将在整个应用程序中保持不变，这样我们就可以在屏幕上均匀地排列砖块对象。
- en: '`local gameEvent = " "` will store the game events such as`"win", "lose"`,
    and`"finished"`. When a function checks the game status for any of these events,
    it will display the proper condition onscreen.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`local gameEvent = " "`将存储游戏事件，如`"win"`、`"lose"`和`"finished"`。当函数检查任何这些事件的任何游戏状态时，它将在屏幕上显示正确的条件。'
- en: We have added some system functions as well. We created `local isSimulator =
    "simulator" == system.getInfo("environment")` so that it returns information about
    the system on which the application is running. This will be directed to the paddle
    touch events so that we can test the application in the simulator. If the build
    was to be ported on a device, you would only be able to use the accelerometer
    to move the paddle. The simulator can't test accelerometer events. The other system
    function is `system.setAccelerometerInterval( 100 )`. It sets the frequency of
    accelerometer events. The minimum frequency is 10 Hz and the maximum is 100 Hz
    on the iPhone.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一些系统函数。我们创建了`local isSimulator = "simulator" == system.getInfo("environment")`，以便它返回有关应用程序运行系统的信息。这将用于挡板触摸事件，以便我们可以在模拟器中测试应用程序。如果构建要移植到设备上，你将只能使用加速度计来移动挡板。模拟器无法测试加速度计事件。另一个系统函数是`system.setAccelerometerInterval(
    100 )`。它设置加速度计事件的频率。在iPhone上，最小频率是10 Hz，最大频率是100 Hz。
- en: The empty function `main()` set will start out the display hierarchy. Think
    of it as a storyboard. The first thing you see is an introduction and then some
    action happens in the middle that tells you about the main content. In this case,
    the main content is the gameplay. The last thing you see is some kind of ending
    or closure to tie the story altogether. The ending is the display of the win/lose
    conditions at the end of a level.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 空函数`main()`集合将开始显示层次结构。把它想象成一个剧本。你首先看到的是介绍，然后中间发生一些动作，告诉你主要内容。在这种情况下，主要内容是游戏玩法。最后你看到的是某种结局或闭合，以将整个故事串联起来。结局是在关卡结束时显示胜负条件。
- en: Understanding events and listeners
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件和监听器
- en: Events are sent to listeners. Functions or objects can be event listeners. When
    an event occurs, the listener is called by a table representing the event. All
    events will have a property name that identifies the kind of event.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 事件被发送到监听器。函数或对象可以是事件监听器。当事件发生时，监听器通过表示事件的表被调用。所有事件都将有一个属性名称来标识事件的类型。
- en: Register events
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册事件
- en: 'Display objects and global Runtime objects can be event listeners. You can
    add and remove listeners for events using the following object methods:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 显示对象和全局 Runtime 对象可以是事件监听器。您可以使用以下对象方法添加和删除事件监听器：
- en: '`object:addEventListener( ):` It adds a listener to the object''s list of listeners.
    When the named event occurs, the listener will be invoked and be supplied with
    a table representing the event.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:addEventListener( )`：它向对象的监听器列表中添加一个监听器。当发生命名事件时，监听器将被调用，并带有表示事件的表作为参数。'
- en: '`object:removeEventListener( ):` It removes the specified listener from the
    object''s list of listeners so that it no longer is notified of events corresponding
    to the specified event.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object:removeEventListener( )`：它从对象的监听器列表中删除指定的监听器，因此它不再会收到与指定事件对应的任何事件通知。'
- en: In the following example, an image display object registers to receive a touch
    event. Touch events are not broadcast globally. Display objects that register
    for the event and lie underneath it will be candidates for receiving the touch.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，一个图像显示对象注册以接收触摸事件。触摸事件不会全局广播。注册了事件并位于其下方的显示对象将是接收触摸的候选对象。
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Runtime events are sent by the system. They broadcast to all listeners. The
    following is an example of registering for an `enterFrame` event:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时事件由系统发送。它们向所有监听器广播。以下是为 `enterFrame` 事件注册的示例：
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Runtime events
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时事件
- en: 'The application we''re creating uses runtime events. Runtime events have no
    specific target and are only sent to the global Runtime. They broadcast to all
    registered listeners. The following events all have string names and will be applied
    to the Breakout game:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建的应用程序使用运行时事件。运行时事件没有特定的目标，并且只发送到全局 Runtime。它们向所有已注册的监听器广播。以下所有事件都具有字符串名称，并将应用于
    Breakout 游戏：
- en: enterFrame
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: enterFrame
- en: '`enterFrame` events occur at the frame interval of the application. They are
    only sent to the global Runtime object. For example, if the frame rate is 30fps,
    then it will occur approximately 30 times per second.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`enterFrame` 事件发生在应用程序的帧间隔中。它们只发送到全局 Runtime 对象。例如，如果帧率为 30fps，那么它将每秒大约发生 30
    次。'
- en: 'Properties are available in this event:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件中可用属性：
- en: '`event.name` is the string`"enterFrame".`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"enterFrame"`。'
- en: '`event.time` is the time in milliseconds since the start of the application.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.time` 是自应用程序开始以来的时间（以毫秒为单位）。'
- en: accelerometer
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速度计
- en: Accelerometer events let you detect movements and determine the device's orientation
    in relation to gravity. These events are only sent to devices that support accelerometer.
    They are only sent to the global Runtime object.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计事件允许您检测运动并确定设备相对于重力的方向。这些事件仅发送到支持加速度计的设备。它们只发送到全局 Runtime 对象。
- en: 'The following properties are available for this event:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件有以下属性可用：
- en: '`event.name` is the string`"accelerometer".`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"accelerometer"`。'
- en: '`event.xGravity` is the acceleration due to gravity in the x-direction.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xGravity` 是 x 方向的重力加速度。'
- en: '`event.yGravity` is the acceleration due to gravity in the y-direction.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yGravity` 是 y 方向的重力加速度。'
- en: '`event.zGravity` is the acceleration due to gravity in the z-direction.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.zGravity` 是 z 方向的重力加速度。'
- en: '`event.xInstant` is the instantaneous acceleration in the x-direction.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xInstant` 是 x 方向的瞬时加速度。'
- en: '`event.yInstant` is the instantaneous acceleration in the y-direction.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yInstant` 是 y 方向的瞬时加速度。'
- en: '`event.zInstant` is the instantaneous acceleration in the z-direction.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.zInstant` 是 z 方向的瞬时加速度。'
- en: '`event.isShake` is true when the user shakes the device.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.isShake` 为真时，用户正在摇动设备。'
- en: Touch events
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触摸事件
- en: When the user's finger touches the screen, a hit event is generated and dispatched
    to display objects in the display hierarchy. Only those objects that intersect
    with the location of the finger on the screen will receive the event.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户的指尖触摸屏幕时，会生成一个击中事件并将其派发到显示层次结构中的显示对象。只有与屏幕上指尖位置相交的对象才会接收到该事件。
- en: touch (single touch)
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触摸（单点触摸）
- en: Touch events are a special kind of hit event. When a user's finger touches the
    screen, they are starting a sequence of touch events, each with different phases.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸事件是一种特殊类型的命中事件。当用户的指尖触摸屏幕时，他们开始了一系列的触摸事件，每个事件都有不同的阶段。
- en: '`event.name` is the string`"touch".`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"touch"`。'
- en: '`event.x` is the x-position in screen coordinates of the touch.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.x` 是触摸在屏幕坐标中的 x 位置。'
- en: '`event.y` is the y-position in screen coordinates of the touch.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.y` 是触摸在屏幕坐标中的 y 位置。'
- en: '`event.xStart` is the x-position of the touch from the`"began"` phase of the
    touch sequence.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.xStart` 是触摸从触摸序列的 `"began"` 阶段开始的 x 位置。'
- en: '`event.yStart` is the y-position of the touch from the`"began"` phase of the
    touch sequence.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.yStart` 是触摸从触摸序列的 `"began"` 阶段开始的 y 位置。'
- en: '`event.phase` is a string identifying where in the touch sequence the event
    occurred:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.phase` 是一个字符串，用于标识事件在触摸序列中的位置：'
- en: '`"began"` a finger touched the screen.'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"began"` 指的是手指触摸了屏幕。'
- en: '`"moved"` a finger moved on the screen.'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"moved"` 指的是手指在屏幕上移动。'
- en: '`"ended"` a finger was lifted from the screen.'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"ended"` 指的是手指从屏幕上抬起。'
- en: '`"cancelled"` the system cancelled tracking of the touch.'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"cancelled"` 系统取消了触摸跟踪。'
- en: tap
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触摸
- en: tap generates a hit event when the user touches the screen. The event is dispatched
    to display objects in the display hierarchy. This is similar to the `touch` event
    except a hit count (number of taps) is available in the event callback.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸在用户触摸屏幕时生成一个命中事件。事件被分发到显示层次结构中的显示对象。这与 `touch` 事件类似，除了事件回调中可用的是命中计数（触摸次数）。
- en: '`event.name` is the string`"tap"`.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.name` 是字符串 `"tap"`。'
- en: '`event.numTaps` returns the number of taps on the screen.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.numTaps` 返回屏幕上的触摸次数。'
- en: '`event.x` is the x-position in screen coordinates of the tap.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.x` 是触摸的 x 位置在屏幕坐标中。'
- en: '`event.y` is the y-position in screen coordinates of the tap.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`event.y` 是触摸的 y 位置在屏幕坐标中。'
- en: Transitions
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: In this chapter, we'll be touching base with `transition.to()` and `transition.from()`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 `transition.to()` 和 `transition.from()`。
- en: '`transition.to():` It animates a display object''s properties over time using
    the `easing` transitions.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition.to()`: 它使用 `easing` 过渡在一段时间内动画化显示对象的属性。'
- en: 'Syntax: `handle = transition.to( target, params )`'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法：`handle = transition.to( target, params )`
- en: '`transition.from():` It is similar to `transition.to()` except the starting
    property values are specified in the function''s parameter table and the final
    values are the corresponding property values in the target prior to the call.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transition.from()`: 它与 `transition.to()` 类似，除了函数的参数表中指定了起始属性值，而最终值是调用之前目标中的相应属性值。'
- en: 'Syntax: `handle = transition.from( target, params )`'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语法：`handle = transition.from( target, params )`
- en: 'The parameters used are:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用的参数包括：
- en: '`target` - A display object that will be the target of the transition.'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`target` - 将成为过渡目标的一个显示对象。'
- en: '`params` - A table that specifies the properties of the display object, which
    will be animated, and one or more of the following optional non-animated properties:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`params` - 一个表，指定了将被动画化的显示对象的属性，以及一个或多个以下可选的非动画属性：'
- en: '`params.time:` It specifies the duration of the transition in milliseconds.
    By default, the duration is 500 ms (0.5 seconds).'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.time:` 它指定了过渡的持续时间（以毫秒为单位）。默认情况下，持续时间是 500 毫秒（0.5 秒）。'
- en: '`params.transition:` It is by default `easing.linear`.'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.transition:` 默认是 `easing.linear`。'
- en: '`params.delay:` It specifies the delay, in milliseconds, (none by default)
    before the tween begins.'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delay:` 它指定了补间动画开始前的延迟时间（默认无延迟）。'
- en: '`params.delta:` It is a boolean specifying whether non-control parameters are
    interpreted as final ending values or as changes in value. The default is `nil`
    meaning false.'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.delta:` 它是一个布尔值，指定非控制参数是否被解释为最终结束值或作为值的改变。默认是 `nil`，表示 false。'
- en: '`params.onStart:` It is a function or table listener called before the tween
    begins.'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onStart:` 它是在补间动画开始前调用的函数或表监听器。'
- en: '`params.onComplete:` It is a function or table listener called after the tween
    completes.'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params.onComplete:` 它是在补间动画完成后调用的函数或表监听器。'
- en: 'For example:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE20]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding example shows how two display objects transition throughout the
    space on a device screen. The `square` display object from it's current position
    will move to a new location of x = 250 and y = 400 in 1500 milliseconds. The `square2`
    display object will transition from x = 275 and y = 0 to it's initial location
    in 1500 milliseconds.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例展示了两个显示对象如何在设备屏幕上的空间中过渡。`square`显示对象将从当前位置移动到x = 250和y = 400的新位置，耗时1500毫秒。`square2`显示对象将从x
    = 275和y = 0的位置过渡到其初始位置，耗时1500毫秒。
- en: Creating menu screens
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建菜单屏幕
- en: Having menu screens allows the player to transition through different parts
    of your application. Typically a game will start out with some kind of screen
    displaying the game title with an interactive user interface button labeled **Play**
    or **Start** to give the player the option to play the game. It is standard in
    any mobile application to have a menu screen before transitioning to the main
    content.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有菜单屏幕可以让玩家在不同的应用程序部分之间进行切换。通常，游戏开始时会显示一个带有交互式用户界面按钮的屏幕，按钮上标有**Play**或**Start**，以便玩家可以选择玩游戏。在任何移动应用程序中，在切换到主要内容之前都有一个菜单屏幕是标准的。
- en: Time for action—adding the main menu screen
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加主菜单屏幕
- en: The **Main Menu** screen will be the first thing in our menu system that the
    player interacts with after the application is launched. It's a great way to introduce
    the title of the game and also it gives the player an idea of what type of gaming
    environment they should expect. We wouldn't want the player to jump abruptly into
    the app without any proper notification. It's important to allow the player to
    prepare for what is to come when they launch the app.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**主菜单**屏幕将是玩家在应用程序启动后与菜单系统交互的第一个东西。这是介绍游戏标题的好方法，同时也让玩家对应该期待的游戏环境有一个概念。我们不想让玩家在没有适当通知的情况下突然进入应用程序。当玩家启动应用程序时，让他们为即将发生的事情做好准备是很重要的。'
- en: 'We''re going to create a function called `mainMenu()` to introduce the title
    screen. So after `function main()` ends, add in the following lines:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`mainMenu()`的函数来介绍标题屏幕。所以，在`function main()`结束之后，添加以下行：
- en: '[PRE21]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We'll be adding in a display group and two display objects to this function.
    One display object is the image that will represent the **Main Menu** screen and
    the other will be a UI button called **Play**. Add them inside of `function mainMenu()`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这个函数中添加一个显示组和两个显示对象。一个显示对象将代表**主菜单**屏幕的图像，另一个将是一个名为**Play**的UI按钮。在`function
    mainMenu()`内部添加它们。
- en: '[PRE22]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Remember the empty `main()` function set? We need to call `mainMenu()inside`
    of it. The entire function should look like this:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得那个空的`main()`函数吗？我们需要在它里面调用`mainMenu()`。整个函数应该看起来像这样：
- en: '[PRE23]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: After the `mainMenu()` function, we're going to create another function called
    `loadGame()`. It will initiate the event from `playbtn` to transition to the main
    game screen. The event will change the alpha of `menuScreenGroup` to `0`, which
    makes it appear invisible on the screen. Complete the transition by calling the
    `addGameScreen()` function (`addGameScreen()` will be discussed later in the chapter
    in *Adding Game Objects* section).
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mainMenu()`函数之后，我们将创建另一个名为`loadGame()`的函数。它将启动从`playbtn`到主游戏屏幕的事件转换。该事件将`menuScreenGroup`的alpha值更改为`0`，使其在屏幕上不可见。通过调用`addGameScreen()`函数完成过渡（`addGameScreen()`将在本章的*添加游戏对象*部分中讨论）。
- en: '[PRE24]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we need to add in an event listener to `playBtn` so when it is tapped,
    it will call the `loadGame()` function. Add the following line in the `mainMenu()`
    function after the last method:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为`playBtn`添加一个事件监听器，以便在它被点击时，将调用`loadGame()`函数。在`mainMenu()`函数的最后一种方法之后添加以下行：
- en: '[PRE25]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Run the project in the simulator. You should see the **Main Menu** screen display
    **Breakout** and the **Play** button.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模拟器中运行项目。你应该会看到**主菜单**屏幕显示**Breakout**和**Play**按钮。
- en: What just happened?
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Creating a **Main Menu** screen only requires a couple of blocks of code. For
    `loadGame(event)`, we set a parameter called `event`. When the `if` statement
    is called, it takes `playbutton`, which references the display object `playBtn`
    and checks to see if it is true. Since it is, the `menuScreenGroup` will be removed
    from the stage and wil call on the `addGameScreen()` function. At the same time
    the event listener for `playBtn` is removed from the scene.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个**主菜单**屏幕只需要几块代码。对于`loadGame(event)`，我们设置了一个名为`event`的参数。当调用`if`语句时，它将`playbutton`作为参数，该参数引用显示对象`playBtn`并检查它是否为真。由于它是真的，`menuScreenGroup`将从舞台中移除，并调用`addGameScreen()`函数。同时，`playBtn`的事件监听器也将从场景中移除。
- en: Have a go hero—creating a help screen
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试创建一个帮助屏幕
- en: Right now the design of the menu system is set up so that it goes from the **Main
    Menu** screen and then transitions to the **Gameplay** screen. You have the option
    to extend the menu screens without jumping into the game right away. After the
    **Main Menu** screen, we can add an additional **Help Menu** screen that will
    explain the player how to play the game.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 目前菜单系统的设计是这样的，它从**主菜单**屏幕开始，然后过渡到**游戏玩法**屏幕。你可以选择扩展菜单屏幕而不立即进入游戏。在**主菜单**屏幕之后，我们可以添加一个额外的**帮助菜单**屏幕，该屏幕将向玩家解释如何玩游戏。
- en: Create a new image in your preferred image editing program and write out steps
    on how to play the game. You can then create a new button called **Next** and
    add both art assets to your project folder. In your code, you'll have to create
    a new function and event listener for your **Next** button that will transition
    to the gameplay screen.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜欢的图像编辑程序中创建一个新图像，并写出如何玩游戏的步骤。然后创建一个名为**下一步**的新按钮，并将这两个艺术资源添加到你的项目文件夹中。在你的代码中，你需要创建一个新的函数和**下一步**按钮的事件监听器，以便过渡到游戏玩法屏幕。
- en: Creating the gameplay scene
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建游戏玩法场景
- en: Now that we have a menu system in place, we can start on the gameplay elements
    of the application. We'll start adding all of the main game objects that the player
    will interact with. One thing to think about when adding in game objects is their
    placement on the screen. Given that this game will be played in landscape mode,
    we have to remember that there is plenty of space available in the x-direction
    and a smaller amount in the y-direction. Based on the original design of the game,
    the bottom wall of the screen causes the player to lose the level or turn if the
    ball lands in that area. So if you were to pinpoint an area to place the paddle
    object, we wouldn't set it near the top of the screen. It makes more sense for
    the paddle to be as close to the bottom of the screen to protect the ball better.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了菜单系统，我们可以开始构建应用程序的游戏玩法元素。我们将开始添加玩家将与之交互的所有主要游戏对象。在添加游戏对象时，需要考虑的是它们在屏幕上的位置。鉴于这款游戏将以横屏模式进行，我们必须记住在x方向上有足够的空间，而在y方向上空间较小。根据游戏的原设计，屏幕的底部墙壁会导致玩家在球落在该区域时失去关卡或转向。所以如果你要确定放置挡板对象的位置，我们不会将其设置在屏幕顶部。将挡板设置在屏幕底部更合理，这样可以更好地保护球。
- en: Time for action—adding game objects
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加游戏对象
- en: Let's add in the display objects the player will see while in gameplay.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加玩家在游戏过程中将看到的显示对象。
- en: 'After the `loadGame()` function, we''re going to create another function that
    will display all our game objects on screen. The following lines will display
    the art assets that were created for this tutorial:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`loadGame()`函数之后，我们将创建另一个函数，该函数将在屏幕上显示所有游戏对象。以下行将显示为这个教程创建的艺术资源：
- en: '[PRE26]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Next, we'll add in the text that will display the score and level number during
    the game.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加在游戏过程中显示的分数和关卡编号的文本。
- en: '[PRE27]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To build the first game level we're going to call the `gameLevel1()` function,
    which will be explained later in this chapter. Don't forget to close the `addGameScreen()`
    function with `end`.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建第一个游戏关卡，我们需要调用`gameLevel1()`函数，这个函数将在本章后面进行解释。别忘了用`end`关闭`addGameScreen()`函数。
- en: '[PRE28]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What just happened?
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `addGameScreen()` function displays all the game objects shown during gameplay.
    We have added the `background, paddle`, and `ball` from the art assets provided
    for this chapter.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`addGameScreen()`函数显示了游戏过程中显示的所有游戏对象。我们添加了本章提供的艺术资源中的`background`、`paddle`和`ball`。'
- en: We have added text for the score and level at the top of the game screen. `scoreNum`
    is initially set to `0`. We'll discuss in the next chapter how we will update
    the score number when a brick collision is made. `levelNum` starts at `1` and
    updates when the level is completed and moves on to the next one.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在游戏屏幕顶部添加了分数和级别的文本。`scoreNum` 初始设置为 `0`。我们将在下一章讨论如何在砖块碰撞时更新分数数字。`levelNum`
    从 `1` 开始，并在完成级别并进入下一个级别时更新。
- en: We ended the function by calling `gameLevel1()` which will be implemented in
    the next section to start the first level.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过调用 `gameLevel1()` 结束了函数，该函数将在下一节中实现，以开始第一级。
- en: Time for action—building bricks
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——构建砖块
- en: The bricks are the last of the game objects we need to add in for this application.
    We'll be creating two different levels for this game. Each one will have a different
    brick layout from the other.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 砖块是我们需要添加到这个应用程序中的最后一个游戏对象。我们将为这个游戏创建两个不同的级别。每个级别都将具有与其他级别不同的砖块布局。
- en: We're going to create the function for the first level. Let's create a new function,
    `gameLevel1()`. We will also set the `currentLevel = 1` since the application
    begins at **Level 1**. Then we'll add in the `bricks` display group and set it
    `toFront()` so that it appears in front of the game background.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建第一级的函数。让我们创建一个新的函数 `gameLevel1()`。我们还将设置 `currentLevel = 1`，因为应用程序从 **Level
    1** 开始。然后我们将添加 `bricks` 显示组并将其设置为 `toFront()`，使其出现在游戏背景之前。
- en: '[PRE29]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The method, `object:toFront( )` moves the target object to the visual front
    of its parent group (object.parent). In this case, we are setting the `bricks`
    group to appear as the front most display group during gameplay so it appears
    in front of the background image.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 方法 `object:toFront( )` 将目标对象移动到其父组（object.parent）的可视前端。在这种情况下，我们将 `bricks` 组设置为在游戏过程中显示为最前面的显示组，因此它出现在背景图像之前。
- en: Next, add some local variables that will show how many rows and columns of bricks
    will be displayed on screen and where in the playing field each brick will be
    placed.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一些局部变量，以显示将在屏幕上显示多少行和列的砖块以及每个砖块在游戏场中的放置位置。
- en: '[PRE30]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Create double `for` loops, one for `numOfRows` and the other for `numOfColumns`.
    Create a brick instance placed according to its width, height, and the number
    corresponding to `numOfRows` and `numOfColumns`. The art asset for the brick display
    object is provided with this chapter. Afterwards, close the function with `end`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建双重 `for` 循环，一个用于 `numOfRows`，另一个用于 `numOfColumns`。创建一个根据其宽度、高度和 `numOfRows`
    和 `numOfColumns` 对应的数字放置的砖块实例。砖块显示对象的美术资源由本章提供。之后，使用 `end` 关闭函数。
- en: '[PRE31]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The set up for **Level 2** is similar to how **Level 1** is arranged. The code
    is almost the same except our new function is called `gameLevel2(), currentLevel
    = 2`, and the values for `numOfRows` and `numOfColumns` have different values.
    Add this block after the `gameLevel1()` function.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Level 2** 的设置与 **Level 1** 的排列方式相似。代码几乎相同，除了我们新的函数被命名为 `gameLevel2()`，`currentLevel
    = 2`，以及 `numOfRows` 和 `numOfColumns` 的值不同。在 `gameLevel1()` 函数之后添加此块。'
- en: '[PRE32]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save your file and relaunch the simulator. You'll be able to interact with the
    **Play** button and see the transition from the **Main Menu** screen to the game
    screen. You will see the game layout for **Level 1** displayed on screen.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的文件并重新启动模拟器。您将能够与 **Play** 按钮交互，并看到从 **主菜单** 屏幕到游戏屏幕的过渡。您将在屏幕上看到 **Level
    1** 的游戏布局。
- en: What just happened?
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `bricks` display group is set `bricks:toFront()`. This means that the group
    will always be put in front of the display hierarchy apart from the `background,
    paddle`, and `ball` display objects.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`bricks` 显示组被设置为 `bricks:toFront()`。这意味着除了 `background`、`paddle` 和 `ball` 显示对象外，该组将始终位于显示层次结构的前面。'
- en: '`gameLevel1()` has set values for the amount of brick objects displayed in
    the playing field. They will be centered based on the `contentWidth` of the device
    shell and set at 50 in the y-direction. The brick group is placed near the top
    left-hand corner by `brickPlacement` and takes the middle of the screen and subtracts
    it by half the width of all the brick objects put together. Then we add 20 more
    pixels in the x-direction to center it with the paddle.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`gameLevel1()` 为游戏场中显示的砖块对象数量设置了值。它们将根据设备外壳的 `contentWidth` 居中，并在 y 方向上设置为
    50。砖块组通过 `brickPlacement` 放置在右上角附近，占据屏幕中间，并减去所有砖块对象总宽度的一半。然后我们在 x 方向上再添加 20 个像素，使其与桨居中对齐。'
- en: We created double `for` loops for `numOfRows` and `numOfColumns`, which start
    the creation of the brick objects from the left-hand corner of the screen.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`numOfRows`和`numOfColumns`创建了双重`for`循环，从屏幕的左上角开始创建砖块对象。
- en: 'Notice that the `brick` display object is given the name`"brick"`. Just remember
    that`"brick"` cannot be used the same way as `brick` when calling the object.`"brick"`
    is an instance of `brick`. It is merely used as a string when event parameters
    are called on. For example:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`brick`显示对象被命名为`"brick"`。只需记住，当调用对象时`"brick"`不能像`brick`那样使用。`"brick"`是`brick`的一个实例。它仅在被调用事件参数时用作字符串。例如：
- en: '[PRE33]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The physics body of `brick` is set to`"static"` so it is not affected by gravity
    pulling down. And then it is added to `bricks` group under `bricks.insert(bricks,
    brick)`.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`brick`的物理体被设置为`"static"`，因此它不受重力下拉的影响。然后它被添加到`bricks`组下的`bricks.insert(bricks,
    brick)`。'
- en: Have a go hero—focused platform gaming
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄—专注的平台游戏
- en: Upon completing this chapter and the following, feel free to redesign the display
    images to focus on a specific platform. For example, you can easily convert the
    code to be compatible with all iOS devices. This can be done by converting display
    objects to `display.newImageRect( [parentGroup,] filename [, baseDirectory] w,
    h )` so you can substitute higher resolution images on devices with retina display,
    (that is iPhone 4/iPod Touch 4G). Remember that you'll have to adjust your configuration
    settings to have the changes applied. This pertains to adding the `@2x` image
    suffix (or your preferred suffix naming convention) to your `config.lua` file.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一章和下一章后，您可以自由地重新设计显示图像，以专注于特定的平台。例如，您可以轻松地将代码转换为与所有iOS设备兼容。这可以通过将显示对象转换为`display.newImageRect(
    [parentGroup,] filename [, baseDirectory] w, h )`来实现，这样您就可以在具有视网膜显示屏的设备上替换更高分辨率的图像（即iPhone
    4/iPod Touch 4G）。请记住，您必须调整配置设置以应用更改。这涉及到在`config.lua`文件中添加`@2x`图像后缀（或您首选的命名约定）。
- en: Red alert!
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 红色警报！
- en: In every game there is some kind of message that tells you the status of your
    progress when the main action has ended. For this application, we need a way to
    let the player know if they have won or lost a round, how they can play again
    or when the game is officially completed.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一场游戏中，都有些消息告诉你主要行动结束后你的进度状态。对于这个应用程序，我们需要一种方式让玩家知道他们是否赢得或输掉了一轮，他们如何再次玩游戏，或者游戏何时正式结束。
- en: Time for action—displaying game messages
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间—显示游戏消息
- en: 'Let''s set up some win/lose notifications so we can display these events occur
    in game:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一些胜负通知，以便我们可以在游戏中显示这些事件发生：
- en: Create a new function called `alertScreen()` and pass two parameters called
    `title` and `message`. Add in a new display object called `alertbox` and have
    it transition from an `xScale` and `yScale` of 0.5 using `easing.outExpo`.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`alertScreen()`的新函数，并传递两个名为`title`和`message`的参数。添加一个新的显示对象`alertbox`，并使用`easing.outExpo`将其从`xScale`和`yScale`的0.5过渡。
- en: '[PRE34]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Store the `title` parameter in the text object called `conditionDisplay`.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`title`参数存储在名为`conditionDisplay`的文本对象中。
- en: '[PRE35]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Store the `message` parameter in the text object called `messageText`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`message`参数存储在名为`messageText`的文本对象中。
- en: '[PRE36]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a new display group called `alertDisplayGroup` and insert all the objects
    into the group. Close the function.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的显示组`alertDisplayGroup`，并将所有对象插入到该组中。关闭函数。
- en: '[PRE37]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save your file and run the project in the simulator. The functionality of the
    **Play** button still goes to the gameplay screen for **Level 1**. None of the
    objects have movement at the moment. We'll be adding touch events, ball movement,
    and collisions in the next chapter. All the game objects should be laid out like
    in the following screenshot:![Time for action—displaying game messages](img/1888_03_05.jpg)
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的文件并在模拟器中运行项目。**播放**按钮的功能仍然会跳转到**第1级**的游戏屏幕。目前没有任何对象有移动。我们将在下一章中添加触摸事件、球体移动和碰撞。所有游戏对象都应该像以下截图所示排列：![行动时间—显示游戏消息](img/1888_03_05.jpg)
- en: What just happened?
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have set up the alert system for the game, but it is not operable at the
    moment until we add in more game functions to set the game objects in motion.
    The next chapter will demonstrate how the `alertScreen()` function passes two
    parameters, `title` and `message`. An `alertBox` display object is added as a
    background to the alert texts when they pop up after a condition occurs. When
    the `alertBox` pops up, it transitions from 0.5 of the `xScale` and `yScale` to
    full image scale in 500 milliseconds. That is basically the equivalent of half
    a second.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了游戏警报系统，但目前尚未启用，直到我们添加更多游戏功能来设置游戏对象。下一章将演示`alertScreen()`函数传递两个参数，`title`和`message`。当条件发生时，`alertBox`显示对象作为警报文本的背景出现。当`alertBox`弹出时，它从`xScale`和`yScale`的0.5过渡到完整的图像缩放，这基本上相当于半秒。
- en: The `conditionDisplay` object passes the `title` parameter. This will be the
    text that displays, **You Win** or **You Lose**.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`conditionDisplay` 对象传递了 `title` 参数。这将是要显示的文本，**你赢了**或**你输了**。'
- en: The `messageText` object passes the `message` parameter. The text with this
    parameter displays a message such as **Play Again** or **Continue** after a condition
    is reached.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`messageText` 对象传递了 `message` 参数。带有此参数的文本会在条件满足后显示消息，例如**再玩一次**或**继续**。'
- en: All the objects in this function are then inserted into `alertDisplayGroup =
    display.newGroup()`. It will act as one group instead of individual objects when
    it will appear on and off the stage.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数中的所有对象随后被插入到`alertDisplayGroup = display.newGroup()`中。当它出现在舞台上或消失时，将作为一个整体而不是单个对象。
- en: When running the code in the simulator; if errors pop up in your terminal window,
    be sure to check the line(s) causing the errors. Sometimes a simple capitalization
    error or even a comma or quotation mark that is missing can keep your app from
    running in the simulator. Make sure you're aware of those common mistakes. They
    can be easily overlooked.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中运行代码时；如果你的终端窗口中出现错误，请确保检查导致错误的行。有时一个简单的大小写错误，甚至是一个缺失的逗号或引号，都可能使你的应用程序在模拟器中无法运行。确保你了解这些常见的错误。它们很容易被忽视。
- en: You can refer to the `Breakout - Part 1` folder in the `Chapter 3` folder to
    see how the first half of the code for this tutorial is set up.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考`Chapter 3`文件夹中的`Breakout - Part 1`文件夹，看看这个教程代码的前半部分是如何设置的。
- en: Pop quiz—building a game
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答——构建游戏
- en: When adding the physics engine in your code, which functions are valid to add
    to your application?
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在代码中添加物理引擎时，哪些函数是有效的，可以添加到你的应用程序中？
- en: a. `physics.start()`
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `physics.start()`
- en: b. `physics.pause()`
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `physics.pause()`
- en: c. `physics.stop()`
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `physics.stop()`
- en: d. None of the above
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上皆非
- en: Which is correct when adding an event listener?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加事件监听器时，哪个是正确的？
- en: a. `button:addeventlistener("touch", listener )`
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `button:addeventlistener("touch", listener )`
- en: b. `button:AddEventListener("touch", listener )`
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `button:AddEventListener("touch", listener )`
- en: c. `button:addEventListener(touch, listener )`
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `button:addEventListener(touch, listener )`
- en: d. `button:addEventListener("touch", listener )`
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. `button:addEventListener("touch", listener )`
- en: What is the correct way to have the following display object transition to x
    = 300, y = 150, have the alpha changed to 0.5, in 2 seconds?
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确的方式是将以下显示对象过渡到x = 300, y = 150，alpha变为0.5，需要2秒吗？
- en: '[PRE38]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: a. `transition.to( square, { time=2000, x=300, y=150, alpha=0.5 } )`
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `transition.to( square, { time=2000, x=300, y=150, alpha=0.5 } )`
- en: b. `transition.from( square, { time=2000, x=300, y=150, alpha=0.5 } )`
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `transition.from( square, { time=2000, x=300, y=150, alpha=0.5 } )`
- en: c. `transition.to( square, { time=2, x=300, y=150, alpha=0.5 } )`
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `transition.to( square, { time=2, x=300, y=150, alpha=0.5 } )`
- en: d. None of the above
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上皆非
- en: Summary
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have completed the first half of this game tutorial. Understanding how to
    structure a Corona project properly makes it easier to keep your code organized
    and tracks your assets better. We have gotten a taste of working with blocks of
    code that pertain to a small dose of the game logic needed to allow the application
    to run.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这个游戏教程的前半部分。正确地构建Corona项目结构可以使你的代码组织更清晰，更好地跟踪你的资源。我们已经体验了与涉及游戏逻辑的小块代码一起工作的感觉，这是允许应用程序运行所必需的。
- en: 'So far we have:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们有：
- en: Specified the build configuration on displaying the content for Android and
    iOS devices
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定了在显示Android和iOS设备内容时的构建配置。
- en: Introduced the main variables and constants that will run in the application
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍了将在应用程序中运行的变量和常量。
- en: Instantiated the physics engine and began to apply them to the game objects
    that require physical bodies
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例化了物理引擎，并开始将其应用于需要物理体的游戏对象。
- en: Created transitions between menus to gameplay screens
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了菜单与游戏屏幕之间的过渡
- en: Added display objects and game messages to the screen
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向屏幕添加了显示对象和游戏信息
- en: It's quite an accomplishment of how much we've done so far, including learning
    some new API in the process of coding the application. We still have a lot more
    to add before the game can be fully functional. We still have a lot more to add
    before the game can be fully functional.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经取得了很多成就，包括在编写应用程序的过程中学习了一些新的API。在游戏完全功能化之前，我们还有很多东西要添加。在游戏完全功能化之前，我们还有很多东西要添加。
- en: In the next chapter, we'll be finishing the last half of this game tutorial.
    We'll be working with collision detection of the paddle, ball, brick, and wall
    objects. Also, we'll learn how to update the score when a brick is removed from
    the scene and get our win/lose conditions active as well. We're in the home stretch.
    Let's keep going!
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完成这个游戏教程的最后半部分。我们将处理挡板、球、砖块和墙壁对象的碰撞检测。此外，我们还将学习如何在场景中移除砖块时更新分数，并激活我们的胜负条件。我们已经进入冲刺阶段。让我们继续前进！
