["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- card_claim_capture_info.xml -->\n<android.support.v7.widget.CardView\n\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"wrap_content\">\n\n  <android.support.constraint.ConstraintLayout\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:layout_margin=\"@dimen/grid_spacer1\">\n       <android.support.design.widget.TextInputLayout\n           android:id=\"@+id/description_layout\"\n           android:layout_width=\"0dp\"\n           android:layout_height=\"wrap_content\"\n           android:layout_marginEnd=\"8dp\"\n           app:layout_constraintEnd_toStartOf=\"@+id/amount_layout\"\n           app:layout_constraintStart_toStartOf=\"parent\"\n           app:layout_constraintTop_toTopOf=\"parent\">\n```", "```kt\n<!-- content_capture_claim.xml -->\n<include layout=\"@layout/card_claim_capture_info\"/>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge >\n   <TextView\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:text=\"@string/label_date\"\n       android:textAppearance=\"@style/TextAppearance.AppCompat.Caption\"\n       android:textColor=\"@color/colorAccent\" />\n   <TextView\n       style=\"@style/Widget.AppCompat.EditText\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"@dimen/grid_spacer1\" />\n</merge>\n```", "```kt\nprivate TextView label;\nprivate DatePickerWrapper wrapper;\n```", "```kt\nvoid initialize(final Context context) {\n   setOrientation(VERTICAL);\n}\n```", "```kt\nLayoutInflater.from(context).inflate(\n  R.layout.widget_date_picker, this, true);\n```", "```kt\nlabel = (TextView) getChildAt(0);\nwrapper = new DatePickerWrapper((TextView) getChildAt(1));\n```", "```kt\npublic DatePickerLayout(Context context) {\n  super(context);\n  initialize(context);\n}\n\npublic DatePickerLayout(Context context, AttributeSet attrs) {\n  super(context, attrs);\n  initialize(context);\n}\n\npublic DatePickerLayout(\n    Context context, AttributeSet attrs, int defStyleAttr) {\n  super(context, attrs, defStyleAttr);\n  initialize(context);\n}\n```", "```kt\npublic void setDate(final Date date) {\n   wrapper.setDate(date);\n}\n\npublic Date getDate() {\n   return wrapper.getDate();\n}\n\npublic void setLabel(final CharSequence text) {\n   label.setText(text);\n}\n\npublic void setLabel(final int resid) {\n   label.setText(resid);\n}\n\npublic CharSequence getLabel() {\n   return label.getText();\n}\n```", "```kt\nprivate static class SavedState extends BaseSavedState {\n   final long timestamp;\n   final CharSequence label;\n\n   public SavedState(\n           final Parcelable superState,\n           final long timestamp,\n           final CharSequence label) {\n\n       super(superState);\n       this.timestamp = timestamp;\n       this.label = label;\n   }\n}\n```", "```kt\nSavedState(final Parcel in) {\n  super(in);\n  this.timestamp = in.readLong();\n  this.label = TextUtils.CHAR_SEQUENCE_CREATOR\n      .createFromParcel(in);\n}\n```", "```kt\n@Override\npublic void writeToParcel(final Parcel out, final int flags) {\n   super.writeToParcel(out, flags);\n   out.writeLong(timestamp);\n   TextUtils.writeToParcel(label, out, flags);\n}\n```", "```kt\npublic static final Parcelable.Creator<SavedState> CREATOR =\n      new Parcelable.Creator<SavedState>() {\n  @Override\n  public SavedState createFromParcel(final Parcel source) {\n    return new SavedState(source);\n  }\n\n  @Override\n  public SavedState[] newArray(int size) {\n    return new SavedState[size];\n  }\n};\n```", "```kt\n@Override\nprotected Parcelable onSaveInstanceState() {\n  return new SavedState(\n      super.onSaveInstanceState(),\n      getDate().getTime(), getLabel());\n}\n```", "```kt\n@Override\nprotected void onRestoreInstanceState(final Parcelable state) {\n   final SavedState savedState = (SavedState) state;\n   super.onRestoreInstanceState(savedState.getSuperState());\n   setDate(new Date(savedState.timestamp));\n   setLabel(savedState.label);\n}\n```", "```kt\n<com.packtpub.claim.widget.DatePickerLayout\n   android:id=\"@+id/date\"\n   android:layout_width=\"0dp\"\n   android:layout_height=\"wrap_content\"\n   android:layout_marginTop=\"8dp\"\n   app:layout_constraintEnd_toEndOf=\"parent\"\n   app:layout_constraintStart_toStartOf=\"parent\"\n   app:layout_constraintTop_toBottomOf=\"@+id/description_layout\" />\n```", "```kt\nprivate DatePickerLayout selectedDate;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  // …\n  selectedDate = new DatePickerWrapper(    // remove this line\n      (TextView) findViewById(R.id.date)); // remove this line\n  selectedDate = (DatePickerLayout) findViewById(R.id.date);\n  // …\n}\n```", "```kt\npublic enum Type {\n  IMAGE,\n  UNKNOWN;\n\n  public static Type safe(final Type type) {\n    // Use a ternary to replace null with UNKNOWN\n    return type != null ? type : UNKNOWN;\n  }\n}\n```", "```kt\nFile file;\nType type;\n\npublic Attachment(final File file, final Type type) {\n this.file = file;\n this.type = Type.safe(type);\n}\n\npublic File getFile() { return file; }\npublic void setFile(final File file) {\n  this.file = file;\n}\n\npublic Type getType() { return type; }\npublic void setType(final Type type) {\n  this.type = Type.safe(type);\n}\n```", "```kt\nprotected Attachment(final Parcel in) {\n  file = new File(in.readString());\n  type = Type.values()[in.readInt()];\n}\n\n@Override\npublic void writeToParcel(final Parcel dest, final int flags) {\n  dest.writeString(file.getAbsolutePath());\n  dest.writeInt(type.ordinal());\n}\n\n@Override\npublic int describeContents() { return 0; }\n```", "```kt\npublic static final Creator<Attachment> CREATOR = new Creator<Attachment>() {\n  @Override\n  public Attachment createFromParcel(final Parcel in) {\n    return new Attachment(in);\n  }\n\n  @Override\n  public Attachment[] newArray(final int size) {\n    return new Attachment[size];\n  }\n};\n```", "```kt\nACCOMMODATION(R.id.accommodation),\nFOOD(R.id.food),\nTRANSPORT(R.id.transport),\nENTERTAINMENT(R.id.entertainment),\nBUSINESS(R.id.business),\nOTHER(R.id.other);\n```", "```kt\n@IdRes\nprivate final int idResource;\n\nCategory(@IdRes final int idResource) {\n  this.idResource = idResource;\n}\n\n@IdRes\npublic int getIdResource() {\n  return idResource;\n}\n```", "```kt\npublic static Category forIdResource(@IdRes final int id) {\n  for (final Category c : values()) {\n    if (c.idResource == id) {\n      return c;\n    }\n  }\n\n  throw new IllegalArgumentException(\"No category for ID: \" + id);\n}\n```", "```kt\nString description;\ndouble amount;\nDate timestamp;\nCategory category;\nList<Attachment> attachments = new ArrayList<>();\n\npublic ClaimItem() {}\n```", "```kt\npublic String getDescription() { return description; }\npublic void setDescription(final String description) {\n  this.description = description;\n}\npublic double getAmount() { return amount; }\npublic void setAmount(final double amount) {\n  this.amount = amount;\n}\npublic Date getTimestamp() { return timestamp; }\npublic void setTimestamp(final Date timestamp) {\n  this.timestamp = timestamp;\n}\npublic Category getCategory() { return category; }\npublic void setCategory(final Category category) {\n  this.category = category;\n}\n```", "```kt\npublic void addAttachment(final Attachment attachment) {\n  if ((attachment != null) && !attachments.contains(attachment)) {\n   attachments.add(attachment);\n  }\n}\n\npublic void removeAttachment(final Attachment attachment) {\n  attachments.remove(attachment);\n}\n\npublic List<Attachment> getAttachments() {\n  return Collections.unmodifiableList(attachments);\n}\n```", "```kt\nprotected ClaimItem(final Parcel in) {\n  description = in.readString();\n  amount = in.readDouble();\n\n  final long time = in.readLong();\n  timestamp = time != -1 ? new Date(time) : null;\n\n  final int categoryOrd = in.readInt();\n  category = categoryOrd != -1\n      ? Category.values()[categoryOrd]\n      : null;\n\n  in.readTypedList(attachments, Attachment.CREATOR);\n}\n\n@Override\npublic void writeToParcel(final Parcel dest, final int flags) {\n  dest.writeString(description);\n  dest.writeDouble(amount);\n  dest.writeLong(timestamp != null ? timestamp.getTime() : -1);\n  dest.writeInt(category != null ? category.ordinal() : -1);\n  dest.writeTypedList(attachments);\n}\n\n@Override\npublic int describeContents() { return 0; }\n\npublic static final Creator<ClaimItem> CREATOR = new Creator<ClaimItem>() {\n  @Override\n  public ClaimItem createFromParcel(Parcel in) {\n  return new ClaimItem(in);\n  }\n\n  @Override\n  public ClaimItem[] newArray(int size) {\n  return new ClaimItem[size];\n  }\n};\n```", "```kt\n<LinearLayout\n\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"match_parent\"\n   android:orientation=\"vertical\"\n   tools:context=\"com.packtpub.claim.ui.CategoryPickerFragment\">\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:orientation=\"vertical\">\n\n  <RadioGroup\n      android:id=\"@+id/categories\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"horizontal\">\n\n      <RadioButton\n          android:id=\"@+id/accommodation\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:layout_marginEnd=\"@dimen/grid_spacer1\"\n          android:layout_marginRight=\"@dimen/grid_spacer1\"\n          android:button=\"@drawable/ic_category_hotel\"\n          android:contentDescription=\"@string/description_accommodation\" />\n\n      <!-- ... -->\n  </RadioGroup>\n\n  <TextView\n      android:id=\"@+id/selected_category\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:textAppearance=\"@style/TextAppearance.AppCompat.Medium\" />\n</LinearLayout>\n```", "```kt\n<android.support.v7.widget.CardView\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"wrap_content\"\n  android:layout_marginTop=\"@dimen/grid_spacer1\">\n\n  <fragment\n      class=\"com.packtpub.claim.ui.CategoryPickerFragment\"\n      android:id=\"@+id/categories\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:layout_margin=\"@dimen/grid_spacer1\"/>\n\n</android.support.v7.widget.CardView>\n```", "```kt\nprivate RadioGroup categories;\nprivate TextView categoryLabel;\n```", "```kt\npublic View onCreateView(\n      final LayoutInflater inflater,\n      final @Nullable ViewGroup container,\n      final @Nullable Bundle savedInstanceState) {\n\n  final View picker = inflater.inflate(\n      R.layout.fragment_category_picker,\n      container,\n      false\n  );\n\n  categories = (RadioGroup) picker.findViewById(R.id.categories);\n  categoryLabel = (TextView) picker.findViewById(\n      R.id.selected_category);\n  categories.setOnCheckedChangeListener(\n      new IconPickerWrapper(categoryLabel));\n  categories.check(R.id.other);\n  return picker;\n}\n```", "```kt\npublic Category getSelectedCategory() {\n  return Category.forIdResource(\n      categories.getCheckedRadioButtonId());\n}\n\npublic void setSelectedCategory(final Category category){\n  categories.check(category.getIdResource());\n}\n```", "```kt\nprivate CategoryPickerFragment categories;\n```", "```kt\ncategories = (RadioGroup) findViewById(R.id.categories);\ncategories.setOnCheckedChangeListener(\n    new IconPickerWrapper(\n        (TextView) findViewById(R.id.selected_category)\n    )\n);\ncategories.check(R.id.other);\n```", "```kt\nfinal FragmentManager fragmentManager = getSupportFragmentManager();\ncategories = (CategoryPickerFragment)\n    fragmentManager.findFragmentById(R.id.categories);\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<merge \n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <ImageView\n      android:scaleType=\"fitCenter\"\n      android:layout_margin=\"@dimen/grid_spacer1\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"/>\n</merge>\n```", "```kt\nprivate Attachment attachment;\nprivate ImageView preview;\n```", "```kt\npublic AttachmentPreview(Context context) {\n  super(context);\n  initialize(context);\n}\n\npublic AttachmentPreview(Context context, AttributeSet attrs) {\n  super(context, attrs);\n  initialize(context);\n}\n\npublic AttachmentPreview(\n    Context context,\n    AttributeSet attrs,\n    int defStyleAttr) {\n  super(context, attrs, defStyleAttr);\n  initialize(context);\n}\n\nvoid initialize(final Context context) {\n  LayoutInflater.from(context).inflate(\n      R.layout.widget_attachment_preview, this, true);\n  preview = (ImageView) getChildAt(0);\n}\n```", "```kt\npublic Attachment getAttachment() { return attachment; }\n```", "```kt\npublic void setAttachment(final Attachment attachment) {\n  this.attachment = attachment;\n  preview.setImageDrawable(null);\n\n  if (attachment != null) {\n    new UpdatePreviewCommand().exec(attachment);\n  }\n}\n\nprivate class UpdatePreviewCommand\n    extends ActionCommand<Attachment, Drawable> {\n\n  @Override\n  public Drawable onBackground(\n      final Attachment attachment)\n      throws Exception {\n\n    switch (attachment.getType()) {\n      case IMAGE:\n        return new BitmapDrawable(\n            getResources(),\n            attachment.getFile().getAbsolutePath()\n        );\n    }\n\n    return getResources().getDrawable(\n        R.drawable.ic_unknown_file_type);\n  }\n\n  @Override\n  public void onForeground(final Drawable value) {\n    preview.setImageDrawable(value);\n  }\n}\n```", "```kt\nprivate List<Attachment> attachments = Collections.emptyList();\n\npublic int getCount() {\n  return attachments.size();\n}\n\npublic void setAttachments(final List<Attachment> attachments) {\n  this.attachments = attachments != null\n          ? attachments\n          : Collections.<Attachment>emptyList();\n  notifyDataSetChanged();\n}\n```", "```kt\npublic Object instantiateItem(final ViewGroup container, final int position) {\n  final AttachmentPreview preview =\n      new AttachmentPreview(container.getContext());\n  preview.setAttachment(attachments.get(position));\n  container.addView(preview);\n  return attachments.get(position);\n}\n```", "```kt\npublic void destroyItem(\n    final ViewGroup container,\n    final int position,\n    final Object object) {\n  for (int i = 0; i < container.getChildCount(); i++) {\n    final AttachmentPreview preview =\n        ((AttachmentPreview) container.getChildAt(i));\n    if (preview.getAttachment() == object) {\n      container.removeViewAt(i);\n      break;\n    }\n  }\n}\n```", "```kt\npublic boolean isViewFromObject(final View view, final Object o) {\n  return (view instanceof AttachmentPreview)\n      && (((AttachmentPreview) view).getAttachment() == o);\n}\n```", "```kt\npublic abstract class CreateAttachmentCommand\n    extends ActionCommand<Uri, Attachment> {\n```", "```kt\nprivate final File dir;\nprivate final ContentResolver resolver;\n\npublic CreateAttachmentCommand(\n      final File dir,\n      final ContentResolver resolver) {\n\n  this.dir = dir;\n  this.resolver = resolver;\n}\n```", "```kt\nFile makeFile(final Uri value) throws IOException {\n  final File outputFile =\n      new File(dir, UUID.randomUUID().toString());\n  final InputStream input = resolver.openInputStream(value);\n  final FileOutputStream output = new FileOutputStream(outputFile);\n  try {\n      final byte[] buffer = new byte[10 * 1024];\n      int bytesRead = 0;\n      while ((bytesRead = input.read(buffer)) != -1) {\n          output.write(buffer, 0, bytesRead);\n      }\n      output.flush();\n  } finally {\n      output.close();\n      input.close();\n  }\n  return outputFile;\n}\n```", "```kt\npublic Attachment onBackground(final Uri value) throws Exception {\n   final File file = makeFile(value);\n```", "```kt\n  final String type = resolver.getType(value);\n  if (type != null\n      && type.startsWith(\"image/\")\n      && BitmapFactory.decodeFile(file.getAbsolutePath()) != null)\n  {\n    return new Attachment(file, Attachment.Type.IMAGE);\n  } else {\n    return new Attachment(file, Attachment.Type.UNKNOWN);\n  }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.v4.view.ViewPager\n\n  android:id=\"@+id/attachments\"\n  android:layout_width=\"wrap_content\"\n  android:layout_height=\"wrap_content\"\n  android:layout_weight=\"1\"\n  android:clipChildren=\"false\"\n  android:clipToPadding=\"false\"\n  tools:context=\".ui.attachments.AttachmentPagerFragment\"/>\n```", "```kt\nprivate static final int REQUEST_ATTACH_FILE = 1;\nprivate static final int REQUEST_ATTACH_PERMISSION = 1001;\n```", "```kt\nprivate final AttachmentPreviewAdapter adapter = new AttachmentPreviewAdapter();\n```", "```kt\nprivate ActionCommand<Uri, Attachment> attachFileCommand;\nprivate ViewPager pager;\n```", "```kt\nprivate ClaimItem claimItem;\n\npublic void setClaimItem(final ClaimItem claimItem) {\n  this.claimItem = claimItem;\n  onAttachmentsChanged();\n}\n\npublic void onAttachmentsChanged() {\n  adapter.setAttachments(\n      claimItem != null\n          ? claimItem.getAttachments()\n          : null\n  );\n  pager.setCurrentItem(adapter.getCount() - 1);\n}\n```", "```kt\npublic void onCreate(final @Nullable Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   final File attachmentsDir =\n      getContext().getDir(\"attachments\", Context.MODE_PRIVATE);\n   attachFileCommand = new CreateAttachmentCommand(\n       attachmentsDir,\n       getContext().getContentResolver()) {\n       @Override\n       public void onForeground(final Attachment value) {\n           if (claimItem != null) {\n               claimItem.addAttachment(value);\n               onAttachmentsChanged();\n           }\n       }\n   };\n}\n```", "```kt\npublic void onDestroy() {\n   super.onDestroy();\n   claimItem = null;\n}\n```", "```kt\npublic View onCreateView(\n       final LayoutInflater inflater,\n       final @Nullable ViewGroup container,\n       final @Nullable Bundle savedInstanceState) {\n\n  pager = (ViewPager) inflater.inflate(\n      R.layout.fragment_attachment_pager, container, false);\n  pager.setPageMargin(\n      getResources().getDimensionPixelSize(R.dimen.grid_spacer1));\n  pager.setAdapter(adapter);\n\n  return pager;\n}\n```", "```kt\npublic void onAttachClick() {\n  final int permissionStatus = ContextCompat.checkSelfPermission(\n      getContext(),\n      Manifest.permission.READ_EXTERNAL_STORAGE);\n\n  if (permissionStatus != PackageManager.PERMISSION_GRANTED) {\n    ActivityCompat.requestPermissions(\n        getActivity(),\n        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\n        REQUEST_ATTACH_PERMISSION);\n    return;\n  }\n\n  final Intent attach = new Intent(Intent.ACTION_GET_CONTENT)\n      .addCategory(Intent.CATEGORY_OPENABLE)\n      .setType(\"*/*\");\n\n  startActivityForResult(attach, REQUEST_ATTACH_FILE);\n}\n```", "```kt\nToast.makeText(this, data.getDataString(), Toast.LENGTH_SHORT).show();\nattachFileCommand.exec(data.getData());\n```", "```kt\n<fragment\n   android:id=\"@+id/attachments\"\n   class=\"com.packtpub.claim.ui.attachments.AttachmentPagerFragment\"\n   android:layout_width=\"match_parent\"\n   android:layout_height=\"0dp\"\n   android:layout_marginTop=\"@dimen/grid_spacer1\"\n   android:layout_weight=\"1\" />\n```", "```kt\nprivate AttachmentPagerFragment attachments;\n// ...\nprotected void onCreate(Bundle savedInstanceState) {\n   // ...\n   final FragmentManager fragmentManager =\n       getSupportFragmentManager();\n   categories = (CategoryPickerFragment)\n       fragmentManager.findFragmentById(R.id.categories);\n attachments = (AttachmentPagerFragment)\n       fragmentManager.findFragmentById(R.id.attachments);\n```", "```kt\n@Override\npublic void onClick(View v) {\n  switch (v.getId()) {\n    case R.id.attach:\n      attachments.onAttachClick();\n      break;\n  }\n}\n```", "```kt\npublic static final String EXTRA_CLAIM_ITEM = \"com.packtpub.claim.extras.CLAIM_ITEM\";\n```", "```kt\nprivate static final String KEY_CLAIM_ITEM = \"com.packtpub.claim.ClaimItem\";\n```", "```kt\nprivate EditText description;\nprivate EditText amount;\n\nprivate DatePickerLayout selectedDate;\nprivate CategoryPickerFragment categories;\nprivate AttachmentPagerFragment attachments;\n\nprivate ClaimItem claimItem;\n```", "```kt\ndescription = (EditText) findViewById(R.id.description);\namount = (EditText) findViewById(R.id.amount);\nselectedDate = (DatePickerLayout) findViewById(R.id.date);\n\nfinal FragmentManager fragmentManager = getSupportFragmentManager();\nattachments = (AttachmentPagerFragment) fragmentManager.findFragmentById(R.id.attachments);\ncategories = (CategoryPickerFragment) fragmentManager.findFragmentById(R.id.categories);\n```", "```kt\nif (savedInstanceState != null) {\n   claimItem = savedInstanceState.getParcelable(KEY_CLAIM_ITEM);\n} else if (getIntent().hasExtra(EXTRA_CLAIM_ITEM)) {\n   claimItem = getIntent().getParcelableExtra(EXTRA_CLAIM_ITEM);\n}\n```", "```kt\nif (claimItem == null) {\n  claimItem = new ClaimItem();\n} else {\n  description.setText(claimItem.getDescription());\n  amount.setText(String.format(\"%f\", claimItem.getAmount()));\n  selectedDate.setDate(claimItem.getTimestamp());\n}\n\nattachments.setClaimItem(claimItem);\n```", "```kt\nvoid captureClaimItem() {\n  claimItem.setDescription(description.getText().toString());\n  if (!TextUtils.isEmpty(amount.getText())) {\n    claimItem.setAmount(\n        Double.parseDouble(amount.getText().toString()));\n  }\n  claimItem.setTimestamp(selectedDate.getDate());\n  claimItem.setCategory(categories.getSelectedCategory());\n}\n```", "```kt\nprotected void onSaveInstanceState(final Bundle outState) {\n  super.onSaveInstanceState(outState);\n  captureClaimItem(); // make sure the ClaimItem is up-to-date\n  outState.putParcelable(KEY_CLAIM_ITEM, claimItem);\n}\n```", "```kt\npublic void finish() {\n  captureClaimItem();\n  setResult(\n      RESULT_OK,\n      new Intent().putExtra(EXTRA_CLAIM_ITEM, claimItem)\n  );\n  super.finish();\n}\n```", "```kt\n@Override\npublic boolean onOptionsItemSelected(final MenuItem item) {\n  switch (item.getItemId()) {\n    case android.R.id.home:\n      finish();\n      break;\n    default:\n      return false;\n  }\n\n  return true;\n}\n```", "```kt\n<path\n   android:fillColor=\"#FFFFFFFF\"\n```"]