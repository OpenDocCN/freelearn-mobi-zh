- en: Getting Started with Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before developing any applications, it is ideal to understand the installation
    process for that system. In this chapter, we will first look at how to install
    Flutter on your system and choose the right IDE. We will then move on to exploring
    a sample app that displays the basic `Hello World` on our screen. Before we look
    at how to debug and test our application, we will take a quick look at what **Hot
    Reload** is.
  prefs: []
  type: TYPE_NORMAL
- en: To Develop iOS applications, I would recommend using a Mac. We can always use
    and test applications only on Android and use macOS when deploying those applications.
    However, problems are always around the corner, so testing the application on
    the respective platform during building will be highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Flutter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a suitable IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring a sample application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the Flutter tools and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and executing tests in Flutter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Flutter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started with our main application and get Flutter installed onto your
    system. Depending on the operating system you are using, you can follow the given
    steps to install Flutter on your system. We will take a look at installing Flutter
    on Windows, Mac, and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Flutter on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Flutter on Windows, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Flutter from [https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded file and place it in your desired folder on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate and run `flutter_console.bat` to start the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then need to download and set up Node.js; you can download it from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we will need to download and install Git For Windows 2.x: [https://gitforwindows.org/](https://gitforwindows.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Flutter on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Flutter on Mac, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Flutter for Mac from [https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded file and place it in your desired folder on your system
    using the ``$ export PATH=`pwd`/flutter/bin:$PATH`` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `$ flutter doctor` to verify that everything is set up in the right way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then need to download and set up Node.js; you can download it from [https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the following commands: `bash`, `curl`, `git 2.x`, `mkdir`, `rm`,
    `unzip`, and `which`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will need to download and install Git: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Flutter on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install Flutter on Linux, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Flutter from [https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz](https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded file and place it in your chosen folder on your system
    using `$ tar xf ~/Downloads/flutter_linux_v1.2.1-stable.tar.xz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, add Flutter to your path using ``$ export PATH="$PATH:`pwd`/flutter/bin"``.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then need to download and set up Node.js; you can download it from [https://git-scm.com/download/linux](https://git-scm.com/download/linux).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here are the commands we will use: `bash`, `curl`, `git 2.x`, `mkdir`, `rm`,
    `unzip`, `which`, and `xz-utils`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with IDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Flutter, it's best to use Android Studio/IntelliJ or **Visual Studio **(**VS**)
    code with Mac/Windows as your operating systems. These IDEs are the best you can
    find for developing mobile applications. But to use these with Flutter, we will
    need to use a few plugins.
  prefs: []
  type: TYPE_NORMAL
- en: We will need a plugin for the Dart compiler, another for code analysis, and
    another for the Flutter developer workflow (building, running, and debugging).
  prefs: []
  type: TYPE_NORMAL
- en: These plugins can be installed on both Android studio and VS code. All you need
    to do is search for them in the corresponding plugin sections. The IDEs not only
    provide the option of these fantastic plugins to support your development. Let's
    take a look at some quick tips you can use when developing your application.
  prefs: []
  type: TYPE_NORMAL
- en: Some quick tips for using your desired IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using the Flutter plugin, there is a very good option that can be used
    while developing your application; it is called the **quickfix** option. To use
    this, press *Alt* + *Enter* (*Ctrl* + *.* on VS code) and a popup will be displayed
    with some quickfixes. Lets take a look at how it looks on screen. The following
    screenshot shows what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faebb8f0-67da-495c-8081-fa951e16178c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, the quickfix gives an option to add a padding:
    a center widget, wrapping it using a column or a row, and wrapping it with a new
    widget.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a very useful option as it will help you save a lot of time during the
    development of the application, considering you will be nesting several widgets.
    While you do this, keeping the code clean is not an easy task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great thing that can be done using the quickfix option is that you
    can order the children in a column to swap a widget with their parents or remove
    a widget completely but quickly. The following screenshot shows these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eff7439d-ad80-4b57-bf80-85e06a4bdae6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Speaking of nesting, a very useful option from the plugin is the presence of
    some fake comments at the end of each widget. This helps you understand the tree
    of the widgets you are composing at a single glance. The following screenshot
    shows what those fake comments look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f6467a1-1365-4773-bc82-aa7360c24ef6.png)'
  prefs: []
  type: TYPE_IMG
- en: These few tips may not seem very useful at first, but once you start developing
    applications with Flutter, they will be essential and will help you work more
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring a sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how the code in Flutter looks and explore its elements.
    First, let's create a new project; this way, Flutter-cli will create a sample
    app for us to explore. Before we start looking at the code, here is the GitHub
    repository dedicated to this book: [https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app](https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the Flutter code looks; let''s explore its
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2da0d6fe-249e-4e23-8ddb-ae6bd2fabfc3.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the entry point of the application is the `main` function in
    which you can see the call to the `runApp`<q>*.* </q>This is the first line that
    is executed; its task is to set up the Flutter framework and run the selected
    application. When we set up the application, initially, it is a normal stateless
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we come to the `Build` method. It is displayed in the previous screenshot
    as `Widget build(BuildContext context)` . The `Build` method is the one that returns
    the `MaterialAPP`, sets the title, and sets a general theme. In addition to this,
    the `Build` method also sets the routing of an application and the home screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on, let''s take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee7935ce-6154-4175-9f0c-5ce394710346.png)'
  prefs: []
  type: TYPE_IMG
- en: The sample application that we are working on is composed of a Scaffold with
    a counter that is incremented with the pressure of a **Floating Action Button**
    (**FAB**). As we can see in the preceding screenshot, there is no `setText` here. The
    counter is described by just one variable that is updated by the handler of the `onPressed` action
    of the FAB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move on and look at the most important line in the code: line 49 in
    the previous screenshot. In Flutter, you use the `setState()`method to update
    the UI and sync it with the underlying variables. In this case, we are incrementing
    the `_counter`variable, and, at the same time, we also want the application to
    render the text showing the number. These are a few of the elements you will be
    able to use when you create a sample project in Flutter. We''ll take a look at
    one of the best features of Flutter in the next section: Hot Reload.'
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you begin the actual development of your application in Flutter, it is
    good to know what features of Flutter you can use to make life easier. Hot Reload
    is one such feature; it will make development much easier. How is it going to
    do that? Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how Hot Reload is a blessing, let''s consider a normal development
    flow, where you are building a tab for setting up a page of your application.
    When you navigate to your tab, you find out that a certain text is too small.
    Usually, you would have to go back and change the font size in the code and then
    navigate back to the point and check whether the size is now correct. If not,
    you do the same thing again: you go back to change the font size in the code,
    come back to the point, and check whether it is now correct. You will have to
    do this again and again until you figure out the right font size.'
  prefs: []
  type: TYPE_NORMAL
- en: This is very time-consuming and frustrating, right? But in Flutter, we won't
    have to do this, because we have the Hot Reload feature. In this particular situation,
    all you will have to do is edit the font size and press ⌘+S. Once you do this,
    your app will show the updated version of the code! We will not have to recompile
    or navigate to that specific screen again and again.
  prefs: []
  type: TYPE_NORMAL
- en: How is that even possible? Hot Reload uses the JIT compiling feature of Dart.
    The edited code is injected into the application running in debug mode in a matter
    of milliseconds, keeping the state in its memory.
  prefs: []
  type: TYPE_NORMAL
- en: This is an amazing feature for developers, as it changes the way the development
    workflow works. You will have the opportunity here to write the code in a different
    way, and this helps you make more modifications in your UI code, without being
    afraid of rigorous work.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging an application is one of the most important things to learn about
    when learning to develop any application. Debugging will help you identify and
    work on errors in your code. Errors are always around the corner, and knowing
    how to deal with them is essential. To understand debugging in Flutter, we will
    have to understand these three concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dart analyzer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dart observatory **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual debugging**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see in detail what they are and how they help with debugging in detail
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Dart analyzer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dart analyzer checks your Dart code for errors. It is essentially a linter of
    Dart, a simple wrapper around the `dartanalyzer` tool. Dart analyzer is also included
    in the Flutter plugin for Android Studio and VS code, so you won't have to worry
    about including it separately in your IDE.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create a file named `analysis_options.yaml`andspecify some additional
    options that will raise errors/warnings and will help you write better Flutter
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Dart observatory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dart observatory is a tool dedicated to debugging and analyzing Flutter
    apps. To put a breakpoint and run the app step by step, you can use the help of
    an IDE. An alternative is the `debugger()` statement. This line will break the
    execution in the point where you put it. It''s also possible to specify a condition,
    and the app will stop only if the condition is true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are running a Flutter application, you will see a line in the console,
    specifying the observatory URL. The line will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can perform a number of things by navigating to this URL. You can open the
    obeservatory, use it to profile the app, examine the heap, allocate memory, and
    so on. This is a really powerful tool; you can find more information on this at [https://dart-lang.github.io/observatory/](https://dart-lang.github.io/observatory/).
  prefs: []
  type: TYPE_NORMAL
- en: Visual debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are going to be cases where we will need to debug the layout of our application.
    We might need to align some widgets in a particular way, or sometimes we might
    not know whether the space between widgets is a margin or padding. In such instances,
    we will need to visually debug our application. To debug in such instances, enable
    the `debugPaintSize` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, set the `debugPaintSizeEnabled` variable to `true` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c45c133c-ea8c-4b9d-b007-88f9d8346558.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, every widget gets colored in and
    can be easily distinguished now.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very powerful feature and can help you with visual debugging, especially
    if you are not that "pixel perfect" frontend developer.
  prefs: []
  type: TYPE_NORMAL
- en: Material grid variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at another visual debugging variable: it''s called the **material
    grid**. Here, you will declare your MaterialApp by setting `debugShowMaterialGrid` to `true`! Your
    application will be overlayed by the material pixel grid—which is perfect to study
    the app layout. The following is how your application would then look:'
  prefs: []
  type: TYPE_NORMAL
- en: The showPerformanceOverlay variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next useful option is `showPerformanceOverlay`. By setting it to `true`,
    you will see the performance of your application displayed in the form of a graph
    on the upper part of the graph. There will be two graphs displayed on your screen,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95645447-fbcd-4374-bb66-b7ea40b16ceb.png)'
  prefs: []
  type: TYPE_IMG
- en: The upper graph shows the time spent by the GPU thread, and the bottom one shows
    the time spent by the CPU thread. They will also display whether the app is running
    at less than 60Hz; in this case, you might have some performance issues. This
    feature will help you understand the performance of your application and to verify
    whether it is running as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to use this feature only in **release **mode. In debug mode, the performance
    is intentionally reduced to have Hot Reload available and raise more warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Flutter widget inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are a web developer, you could easily miss the **inspect**option in
    many browsers. Flutter brings it back to you in the form of a Flutter widget inspector.
    It is yet another feature that will help you visually debug your application.
    Let''s take a look at a screenshot that displays it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2cbf93d-5e9c-42af-b6dc-2404bbf493bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the Flutter widget inspector that we can find in our Android studio.
    There are many options that this feature presents to us; some of them are shortcuts
    to the features we mentioned in the visual debugging section. To trigger the inspector,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the S<q>elect widget </q>option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, click on a widget on your device. The widget you click on will be selected
    and highlighted on the widget tree, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0a5bbc2-0c19-4367-b69a-62b1c822787c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once it is triggered and you can see the widget tree, you can take a look at
    the widget composition and understand whether there is anything wrong in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: We took a look at debugging and also visually debugging our application. Debugging
    is a good way to find out whether there are any errors in your application. Another
    good way to find any anomalies or issues in the working of your application is
    by testing your application. We'll take a look at testing your Flutter application
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a Flutter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your app gets bigger and bigger, a good set of tests may help you save time,
    as tests can find new bugs that could appear with normal modifications. Even performing **Test
    Driven Development** (**TDD**) is a good idea, as it can help you define a structure
    of your project and write less but more efficient code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Flutter, there are mainly three kinds of automated testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Widget testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration testing**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, a unit test is a type of testing that is used to test
    a single unit of code. This small unit could be a function, a method, or a class.
    Generally, in unit testing, we won't need to write on a disk, render to a screen,
    or receive external input. Unit tests must be as small as possible, so remove
    any possible external dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tests are low maintenance and low in cost, and are very quick in terms
    of the time they take to execute. The only drawback of unit testing is that you
    can never completely reply on it, as it does not test the system as a whole. For
    this reason, there are other kinds of testing that should be used. Let''s take
    a look at how to perform this type of testing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `pubspec.yaml` into your testing framework, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the test code in `test/unit_test.dart`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the test by running `flutter test test/unit_test.dart` in the project folder.
    Alternatively, you can run `flutter test` to run all the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unit tests are run in a local Dart VM with a headless version of the Flutter
    engine.This makes the process faster because it doesn't need to boot a real Flutter
    engine or compile a real application.
  prefs: []
  type: TYPE_NORMAL
- en: Widget testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Widget testing is also known as **component testing**. As its name suggests,
    it is used for testing a single widget, and the goal of this test is to verify
    whether the widget works and looks as expected.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, you can use the `WidgetTester` utility for multiple things
    while testing, such as sending input to a widget, finding a component in the widget
    tree, verifying values, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how a widget test looks in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: While testing, if you need to see the UI, you can always use the `debugDumpApp()` function
    or run the test using `flutter tun test/widget_test.dart`. In this way, you will
    also be able to interact with the widgets during testing.
  prefs: []
  type: TYPE_NORMAL
- en: Integration testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's take a look at integration testing. This type of testing is used
    for testing the whole application or a big part of the application. Integration
    testing can be used to verify that the app does everything as expected or to test
    the performance of the code. Integration tests are run on a real device or an
    emulator, but they can't be run with a headless version of Dart VM like as it
    can in widget testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s get started with writing and running the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `flutter_driver`package to `pubspec`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Enable the Flutter driver extension and add a call to the `enableFlutterDriverExtension()`function in `main.dart`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the integration test by using the `flutter drive` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have installed the tools to use Flutter; we then became
    familiar with IDE for our use and looked at Hot Reload, one of the best features
    in Flutter. We then learned about two essential concepts that are required in
    every application development workflow, that is, debugging and testing.
  prefs: []
  type: TYPE_NORMAL
- en: These concepts are going to help us get started with Flutter and start building
    our applications with it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we'll dive into the widget world and learn the different
    kinds of widgets that the widget catalog holds for us.
  prefs: []
  type: TYPE_NORMAL
