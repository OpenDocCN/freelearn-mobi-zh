- en: Getting Started with Flutter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flutter 入门
- en: Before developing any applications, it is ideal to understand the installation
    process for that system. In this chapter, we will first look at how to install
    Flutter on your system and choose the right IDE. We will then move on to exploring
    a sample app that displays the basic `Hello World` on our screen. Before we look
    at how to debug and test our application, we will take a quick look at what **Hot
    Reload** is.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何应用程序之前，了解该系统的安装过程是理想的。在本章中，我们将首先查看如何在您的系统上安装 Flutter 并选择合适的 IDE。然后，我们将继续探索一个在屏幕上显示基本
    `Hello World` 的示例应用程序。在我们查看如何调试和测试我们的应用程序之前，我们将快速了解一下什么是 **热重载**。
- en: To Develop iOS applications, I would recommend using a Mac. We can always use
    and test applications only on Android and use macOS when deploying those applications.
    However, problems are always around the corner, so testing the application on
    the respective platform during building will be highly recommended.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发 iOS 应用程序，我建议使用 Mac。我们始终可以在 Android 上使用和测试应用程序，并在部署这些应用程序时使用 macOS。然而，问题总是接踵而至，因此在构建过程中在相应平台上测试应用程序将非常推荐。
- en: 'In this chapter, we will will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing Flutter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Flutter
- en: Choosing a suitable IDE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择合适的 IDE
- en: Exploring a sample application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索示例应用程序
- en: Hot Reload
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热重载
- en: Looking at the Flutter tools and how to use them
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Flutter 工具及其使用方法
- en: Writing and executing tests in Flutter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Flutter 中编写和执行测试
- en: Installing Flutter
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Flutter
- en: Let's get started with our main application and get Flutter installed onto your
    system. Depending on the operating system you are using, you can follow the given
    steps to install Flutter on your system. We will take a look at installing Flutter
    on Windows, Mac, and Linux.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的主要应用开始，并在您的系统上安装 Flutter。根据您使用的操作系统，您可以按照以下步骤在您的系统上安装 Flutter。我们将查看如何在
    Windows、Mac 和 Linux 上安装 Flutter。
- en: Installing Flutter on Windows
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Flutter
- en: 'To install Flutter on Windows, follow these steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上安装 Flutter，请按照以下步骤操作：
- en: Download Flutter from [https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/windows/flutter_windows_v1.2.1-stable.zip)
    下载 Flutter。
- en: Extract the downloaded file and place it in your desired folder on your system.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的文件，并将其放置在您系统上的目标文件夹中。
- en: Locate and run `flutter_console.bat` to start the installation.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并运行 `flutter_console.bat` 以开始安装。
- en: We will then need to download and set up Node.js; you can download it from [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要下载和设置 Node.js；您可以从 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    下载它。
- en: Finally, we will need to download and install Git For Windows 2.x: [https://gitforwindows.org/](https://gitforwindows.org/).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要下载和安装 Git For Windows 2.x：[https://gitforwindows.org/](https://gitforwindows.org/)
- en: Installing Flutter on Mac
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Flutter
- en: 'To install Flutter on Mac, follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Mac 上安装 Flutter，请按照以下步骤操作：
- en: Download Flutter for Mac from [https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip](https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_v1.2.1-stable.zip)
    下载 Flutter for Mac。
- en: Extract the downloaded file and place it in your desired folder on your system
    using the ``$ export PATH=`pwd`/flutter/bin:$PATH`` command.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的文件，并使用 ```$ export PATH=`pwd`/flutter/bin:$PATH`` 命令将其放置在您系统上的目标文件夹中。
- en: Run `$ flutter doctor` to verify that everything is set up in the right way.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `$ flutter doctor` 以验证一切是否已正确设置。
- en: We then need to download and set up Node.js; you can download it from [https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要下载和设置 Node.js；您可以从 [https://www.npmjs.com/get-npm](https://www.npmjs.com/get-npm)
    下载它。
- en: We will use the following commands: `bash`, `curl`, `git 2.x`, `mkdir`, `rm`,
    `unzip`, and `which`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下命令：`bash`、`curl`、`git 2.x`、`mkdir`、`rm`、`unzip` 和 `which`。
- en: Finally, we will need to download and install Git: [https://git-scm.com/download/mac](https://git-scm.com/download/mac)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要下载和安装 Git：[https://git-scm.com/download/mac](https://git-scm.com/download/mac)
- en: Installing Flutter on Linux
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Flutter
- en: 'To install Flutter on Linux, follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 上安装 Flutter，请按照以下步骤操作：
- en: Download Flutter from [https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz](https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz](https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.2.1-stable.tar.xz)
    下载 Flutter。
- en: Extract the downloaded file and place it in your chosen folder on your system
    using `$ tar xf ~/Downloads/flutter_linux_v1.2.1-stable.tar.xz`.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩下载的文件，并将其放置在您系统上选择的文件夹中，使用 `$ tar xf ~/Downloads/flutter_linux_v1.2.1-stable.tar.xz`。
- en: Then, add Flutter to your path using ``$ export PATH="$PATH:`pwd`/flutter/bin"``.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令将 Flutter 添加到您的路径：`$ export PATH="$PATH:`pwd`/flutter/bin"`.
- en: We will then need to download and set up Node.js; you can download it from [https://git-scm.com/download/linux](https://git-scm.com/download/linux).
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要下载并设置 Node.js；您可以从 [https://git-scm.com/download/linux](https://git-scm.com/download/linux)
    下载。
- en: Here are the commands we will use: `bash`, `curl`, `git 2.x`, `mkdir`, `rm`,
    `unzip`, `which`, and `xz-utils`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将要使用的命令：`bash`、`curl`、`git 2.x`、`mkdir`、`rm`、`unzip`、`which` 和 `xz-utils`。
- en: Getting familiar with IDEs
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉 IDE
- en: For Flutter, it's best to use Android Studio/IntelliJ or **Visual Studio **(**VS**)
    code with Mac/Windows as your operating systems. These IDEs are the best you can
    find for developing mobile applications. But to use these with Flutter, we will
    need to use a few plugins.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Flutter，最好使用 Android Studio/IntelliJ 或 **Visual Studio**（**VS**）代码，操作系统为
    Mac/Windows。这些 IDE 是您能找到的用于开发移动应用的最佳选择。但是，为了使用这些 IDE 与 Flutter 一起，我们需要使用一些插件。
- en: We will need a plugin for the Dart compiler, another for code analysis, and
    another for the Flutter developer workflow (building, running, and debugging).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 Dart 编译器的插件，另一个用于代码分析，还有一个用于 Flutter 开发者工作流程（构建、运行和调试）的插件。
- en: These plugins can be installed on both Android studio and VS code. All you need
    to do is search for them in the corresponding plugin sections. The IDEs not only
    provide the option of these fantastic plugins to support your development. Let's
    take a look at some quick tips you can use when developing your application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件可以在 Android Studio 和 VS code 上安装。您只需在相应的插件部分中搜索它们即可。这些 IDE 不仅提供了这些出色的插件选项来支持您的开发。让我们看看在开发应用程序时您可以使用的快速提示。
- en: Some quick tips for using your desired IDE
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用您想要的 IDE 的快速提示
- en: 'When using the Flutter plugin, there is a very good option that can be used
    while developing your application; it is called the **quickfix** option. To use
    this, press *Alt* + *Enter* (*Ctrl* + *.* on VS code) and a popup will be displayed
    with some quickfixes. Lets take a look at how it looks on screen. The following
    screenshot shows what it looks like:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Flutter 插件时，有一个非常好的选项可以在开发应用程序时使用；它被称为 **快速修复** 选项。要使用它，请按 *Alt* + *Enter*（在
    VS code 上为 *Ctrl* + *.*）并会显示一个包含一些快速修复的弹出窗口。让我们看看它在屏幕上的样子。以下截图显示了它的外观：
- en: '![](img/faebb8f0-67da-495c-8081-fa951e16178c.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/faebb8f0-67da-495c-8081-fa951e16178c.png)'
- en: 'In the preceding screenshot, the quickfix gives an option to add a padding:
    a center widget, wrapping it using a column or a row, and wrapping it with a new
    widget.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，快速修复提供了一个添加填充的选项：一个居中的 widget，使用 column 或 row 包裹它，并用新的 widget 包裹它。
- en: This is a very useful option as it will help you save a lot of time during the
    development of the application, considering you will be nesting several widgets.
    While you do this, keeping the code clean is not an easy task.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的选项，因为它将在您嵌套多个 widget 的开发过程中帮助您节省大量时间。同时，保持代码整洁并不是一件容易的事情。
- en: 'Another great thing that can be done using the quickfix option is that you
    can order the children in a column to swap a widget with their parents or remove
    a widget completely but quickly. The following screenshot shows these options:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快速修复选项还可以做的一件很棒的事情是，您可以按列顺序排列子项以交换与父项的 widget 或完全快速地删除 widget。以下截图显示了这些选项：
- en: '![](img/eff7439d-ad80-4b57-bf80-85e06a4bdae6.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eff7439d-ad80-4b57-bf80-85e06a4bdae6.png)'
- en: 'Speaking of nesting, a very useful option from the plugin is the presence of
    some fake comments at the end of each widget. This helps you understand the tree
    of the widgets you are composing at a single glance. The following screenshot
    shows what those fake comments look like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到嵌套，插件中的一个非常有用的选项是在每个 widget 的末尾存在一些假注释。这有助于您一眼就能理解您所组成的 widget 树。以下截图显示了这些假注释的外观：
- en: '![](img/6f6467a1-1365-4773-bc82-aa7360c24ef6.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f6467a1-1365-4773-bc82-aa7360c24ef6.png)'
- en: These few tips may not seem very useful at first, but once you start developing
    applications with Flutter, they will be essential and will help you work more
    quickly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些小贴士一开始可能看起来并不十分有用，但一旦你开始使用 Flutter 开发应用程序，它们将变得至关重要，并帮助你更快地工作。
- en: Exploring a sample app
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索示例应用程序
- en: Let's take a look at how the code in Flutter looks and explore its elements.
    First, let's create a new project; this way, Flutter-cli will create a sample
    app for us to explore. Before we start looking at the code, here is the GitHub
    repository dedicated to this book: [https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app](https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Flutter 中的代码是如何看起来，并探索其元素。首先，让我们创建一个新的项目；这样，Flutter-cli 将为我们创建一个示例应用程序以供探索。在我们开始查看代码之前，这是本书的
    GitHub 仓库：[https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app](https://github.com/PacktPublishing/Flutter-Quick-Start-Guide/tree/master/sample_app)。
- en: 'The following screenshot shows how the Flutter code looks; let''s explore its
    elements:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Flutter 代码的外观；让我们探索其元素：
- en: '![](img/2da0d6fe-249e-4e23-8ddb-ae6bd2fabfc3.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2da0d6fe-249e-4e23-8ddb-ae6bd2fabfc3.png)'
- en: As you can see, the entry point of the application is the `main` function in
    which you can see the call to the `runApp`<q>*.* </q>This is the first line that
    is executed; its task is to set up the Flutter framework and run the selected
    application. When we set up the application, initially, it is a normal stateless
    widget.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，应用程序的入口点是 `main` 函数，其中你可以看到对 `runApp` 的调用。这是第一条被执行的命令；其任务是设置 Flutter 框架并运行所选应用程序。当我们设置应用程序时，最初，它是一个普通的无状态小部件。
- en: Next, we come to the `Build` method. It is displayed in the previous screenshot
    as `Widget build(BuildContext context)` . The `Build` method is the one that returns
    the `MaterialAPP`, sets the title, and sets a general theme. In addition to this,
    the `Build` method also sets the routing of an application and the home screen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来到 `Build` 方法。它在之前的截图中被显示为 `Widget build(BuildContext context)`。`Build`
    方法是返回 `MaterialAPP`、设置标题和设置通用主题的方法。除此之外，`Build` 方法还设置了应用程序的路由和主页。
- en: 'Moving on, let''s take a look at the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看以下截图：
- en: '![](img/ee7935ce-6154-4175-9f0c-5ce394710346.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee7935ce-6154-4175-9f0c-5ce394710346.png)'
- en: The sample application that we are working on is composed of a Scaffold with
    a counter that is incremented with the pressure of a **Floating Action Button**
    (**FAB**). As we can see in the preceding screenshot, there is no `setText` here. The
    counter is described by just one variable that is updated by the handler of the `onPressed` action
    of the FAB.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在开发的示例应用程序由一个带有计数器的 Scaffold 组成，该计数器通过一个 **浮动操作按钮**（**FAB**）的压力来增加。正如我们在前面的截图中所见，这里没有
    `setText`。计数器仅由一个变量描述，该变量通过 FAB 的 `onPressed` 动作的处理器进行更新。
- en: 'Let''s move on and look at the most important line in the code: line 49 in
    the previous screenshot. In Flutter, you use the `setState()`method to update
    the UI and sync it with the underlying variables. In this case, we are incrementing
    the `_counter`variable, and, at the same time, we also want the application to
    render the text showing the number. These are a few of the elements you will be
    able to use when you create a sample project in Flutter. We''ll take a look at
    one of the best features of Flutter in the next section: Hot Reload.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，看看代码中最重要的一行：前一个截图中的第 49 行。在 Flutter 中，你使用 `setState()` 方法来更新 UI 并与底层变量同步。在这种情况下，我们正在增加
    `_counter` 变量，同时，我们还想让应用程序渲染显示数字的文本。这些是在你创建 Flutter 示例项目时能够使用的一些元素。我们将在下一节中查看
    Flutter 的最佳特性之一：热重载。
- en: Hot Reload
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热重载
- en: Before you begin the actual development of your application in Flutter, it is
    good to know what features of Flutter you can use to make life easier. Hot Reload
    is one such feature; it will make development much easier. How is it going to
    do that? Let's take a look.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始实际在 Flutter 中开发应用程序之前，了解你可以使用哪些 Flutter 特性来使生活更轻松是很好的。热重载就是这样一种特性；它将使开发变得更加容易。它是如何做到这一点的呢？让我们看看。
- en: 'To understand how Hot Reload is a blessing, let''s consider a normal development
    flow, where you are building a tab for setting up a page of your application.
    When you navigate to your tab, you find out that a certain text is too small.
    Usually, you would have to go back and change the font size in the code and then
    navigate back to the point and check whether the size is now correct. If not,
    you do the same thing again: you go back to change the font size in the code,
    come back to the point, and check whether it is now correct. You will have to
    do this again and again until you figure out the right font size.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解热重载是如何成为祝福的，让我们考虑一个正常的开发流程，其中您正在构建一个用于设置应用程序页面的标签。当您导航到您的标签时，您发现某些文本太小。通常，您必须返回并更改代码中的字体大小，然后返回到该点并检查大小是否现在正确。如果不正确，您会再次这样做：返回到代码中更改字体大小，回到该点，并检查它现在是否正确。您将不得不反复这样做，直到您找到正确的字体大小。
- en: This is very time-consuming and frustrating, right? But in Flutter, we won't
    have to do this, because we have the Hot Reload feature. In this particular situation,
    all you will have to do is edit the font size and press ⌘+S. Once you do this,
    your app will show the updated version of the code! We will not have to recompile
    or navigate to that specific screen again and again.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常耗时且令人沮丧的，对吧？但在 Flutter 中，我们不必这样做，因为我们有热重载功能。在这种情况下，您只需编辑字体大小并按 ⌘+S。一旦这样做，您的应用将显示代码的更新版本！我们不必重新编译或反复导航到那个特定的屏幕。
- en: How is that even possible? Hot Reload uses the JIT compiling feature of Dart.
    The edited code is injected into the application running in debug mode in a matter
    of milliseconds, keeping the state in its memory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这怎么可能呢？热重载使用 Dart 的 JIT 编译功能。编辑的代码将在毫秒内注入到以调试模式运行的应用中，保持其状态在内存中。
- en: This is an amazing feature for developers, as it changes the way the development
    workflow works. You will have the opportunity here to write the code in a different
    way, and this helps you make more modifications in your UI code, without being
    afraid of rigorous work.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这对开发者来说是一个惊人的特性，因为它改变了开发工作流程的方式。您在这里有机会以不同的方式编写代码，这有助于您在不害怕严格工作的情况下对 UI 代码进行更多修改。
- en: Debugging an application
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试应用程序
- en: 'Debugging an application is one of the most important things to learn about
    when learning to develop any application. Debugging will help you identify and
    work on errors in your code. Errors are always around the corner, and knowing
    how to deal with them is essential. To understand debugging in Flutter, we will
    have to understand these three concepts:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习开发任何应用程序时，调试是了解的最重要的事情之一。调试将帮助您识别并处理代码中的错误。错误总是潜伏在角落，了解如何处理它们是至关重要的。为了理解
    Flutter 中的调试，我们必须了解以下三个概念：
- en: '**Dart analyzer**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dart 分析器**'
- en: '**Dart observatory **'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dart 观测站**'
- en: '**Visual debugging**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视觉调试**'
- en: We will see in detail what they are and how they help with debugging in detail
    in the following sections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细说明它们是什么以及它们如何帮助进行调试。
- en: Dart analyzer
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dart 分析器
- en: Dart analyzer checks your Dart code for errors. It is essentially a linter of
    Dart, a simple wrapper around the `dartanalyzer` tool. Dart analyzer is also included
    in the Flutter plugin for Android Studio and VS code, so you won't have to worry
    about including it separately in your IDE.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Dart 分析器检查 Dart 代码中的错误。它本质上是一个 Dart 的 linter，是 `dartanalyzer` 工具的简单包装。Dart 分析器也包含在
    Flutter 插件中，适用于 Android Studio 和 VS code，因此您不必担心在您的 IDE 中单独包含它。
- en: We can also create a file named `analysis_options.yaml`andspecify some additional
    options that will raise errors/warnings and will help you write better Flutter
    code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个名为 `analysis_options.yaml` 的文件，并指定一些额外的选项，这将引发错误/警告，并帮助您编写更好的 Flutter
    代码。
- en: Dart observatory
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dart 观测站
- en: 'The dart observatory is a tool dedicated to debugging and analyzing Flutter
    apps. To put a breakpoint and run the app step by step, you can use the help of
    an IDE. An alternative is the `debugger()` statement. This line will break the
    execution in the point where you put it. It''s also possible to specify a condition,
    and the app will stop only if the condition is true:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Dart 观测站是一个专门用于调试和分析 Flutter 应用的工具。要设置断点并逐步运行应用，您可以使用 IDE 的帮助。另一种选择是使用 `debugger()`
    语句。这一行将在您放置它的位置中断执行。您还可以指定一个条件，并且只有当条件为真时，应用才会停止：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When you are running a Flutter application, you will see a line in the console,
    specifying the observatory URL. The line will look as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行Flutter应用程序时，你将在控制台看到一个指定观察器URL的行。该行看起来如下：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can perform a number of things by navigating to this URL. You can open the
    obeservatory, use it to profile the app, examine the heap, allocate memory, and
    so on. This is a really powerful tool; you can find more information on this at [https://dart-lang.github.io/observatory/](https://dart-lang.github.io/observatory/).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过导航到这个URL执行许多操作。你可以打开观察器，使用它来分析应用程序，检查堆栈，分配内存等等。这是一个非常强大的工具；你可以在[https://dart-lang.github.io/observatory/](https://dart-lang.github.io/observatory/)上找到更多关于它的信息。
- en: Visual debugging
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视觉调试
- en: There are going to be cases where we will need to debug the layout of our application.
    We might need to align some widgets in a particular way, or sometimes we might
    not know whether the space between widgets is a margin or padding. In such instances,
    we will need to visually debug our application. To debug in such instances, enable
    the `debugPaintSize` option.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将会有一些情况，我们需要调试我们应用程序的布局。我们可能需要以某种特定方式对一些小部件进行对齐，或者有时我们可能不知道小部件之间的空间是边距还是填充。在这种情况下，我们需要对应用程序进行视觉调试。在这种情况下进行调试时，启用`debugPaintSize`选项。
- en: 'To do so, set the `debugPaintSizeEnabled` variable to `true` as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，将`debugPaintSizeEnabled`变量设置为`true`，如下所示：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following output will be displayed:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将会显示以下输出：
- en: '![](img/c45c133c-ea8c-4b9d-b007-88f9d8346558.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c45c133c-ea8c-4b9d-b007-88f9d8346558.png)'
- en: As you can see in the previous screenshot, every widget gets colored in and
    can be easily distinguished now.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，每个小部件都被着色，现在可以很容易地区分了。
- en: This is a very powerful feature and can help you with visual debugging, especially
    if you are not that "pixel perfect" frontend developer.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的功能，可以帮助你进行视觉调试，尤其是如果你不是一个那么“像素完美”的前端开发者。
- en: Material grid variable
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料网格变量
- en: 'Let''s take a look at another visual debugging variable: it''s called the **material
    grid**. Here, you will declare your MaterialApp by setting `debugShowMaterialGrid` to `true`! Your
    application will be overlayed by the material pixel grid—which is perfect to study
    the app layout. The following is how your application would then look:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个视觉调试变量：它被称为**材料网格**。在这里，你将通过将`debugShowMaterialGrid`设置为`true`来声明你的`MaterialApp`！你的应用程序将被材料像素网格覆盖——这对于研究应用程序布局非常完美。以下是你应用程序的外观：
- en: The showPerformanceOverlay variable
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: showPerformanceOverlay变量
- en: 'The next useful option is `showPerformanceOverlay`. By setting it to `true`,
    you will see the performance of your application displayed in the form of a graph
    on the upper part of the graph. There will be two graphs displayed on your screen,
    as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个有用的选项是`showPerformanceOverlay`。通过将其设置为`true`，你将在图表的上半部分看到应用程序的性能以图表的形式显示。你的屏幕上将会显示两个图表，如下面的截图所示：
- en: '![](img/95645447-fbcd-4374-bb66-b7ea40b16ceb.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/95645447-fbcd-4374-bb66-b7ea40b16ceb.png)'
- en: The upper graph shows the time spent by the GPU thread, and the bottom one shows
    the time spent by the CPU thread. They will also display whether the app is running
    at less than 60Hz; in this case, you might have some performance issues. This
    feature will help you understand the performance of your application and to verify
    whether it is running as expected.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了GPU线程花费的时间，下图显示了CPU线程花费的时间。它们还会显示应用程序是否以低于60Hz的速度运行；在这种情况下，你可能有一些性能问题。这个功能将帮助你了解应用程序的性能，并验证它是否按预期运行。
- en: Be sure to use this feature only in **release **mode. In debug mode, the performance
    is intentionally reduced to have Hot Reload available and raise more warnings.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必仅在**发布**模式下使用此功能。在调试模式下，性能有意降低以提供热重载并引发更多警告。
- en: Flutter widget inspector
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flutter小部件检查器
- en: 'If you are a web developer, you could easily miss the **inspect**option in
    many browsers. Flutter brings it back to you in the form of a Flutter widget inspector.
    It is yet another feature that will help you visually debug your application.
    Let''s take a look at a screenshot that displays it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个网页开发者，你可能会在许多浏览器中轻易错过**检查**选项。Flutter以Flutter小部件检查器的形式将其带回给你。这是另一个帮助你进行视觉调试应用程序的功能。让我们看看一个显示它的截图：
- en: '![](img/e2cbf93d-5e9c-42af-b6dc-2404bbf493bb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e2cbf93d-5e9c-42af-b6dc-2404bbf493bb.png)'
- en: 'This is the Flutter widget inspector that we can find in our Android studio.
    There are many options that this feature presents to us; some of them are shortcuts
    to the features we mentioned in the visual debugging section. To trigger the inspector,
    perform the following steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在Android Studio中可以找到的Flutter小部件检查器。这个功能为我们提供了许多选项；其中一些是视觉调试部分中提到的功能的快捷键。要触发检查器，请执行以下步骤：
- en: Click on the S<q>elect widget </q>option.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 S<q>elect widget </q>选项。
- en: 'Then, click on a widget on your device. The widget you click on will be selected
    and highlighted on the widget tree, as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击你的设备上的一个小部件。你点击的小部件将在小部件树中被选中并突出显示，如下所示：
- en: '![](img/b0a5bbc2-0c19-4367-b69a-62b1c822787c.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0a5bbc2-0c19-4367-b69a-62b1c822787c.png)'
- en: Once it is triggered and you can see the widget tree, you can take a look at
    the widget composition and understand whether there is anything wrong in the layout.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发，你可以看到小部件树，你可以查看小部件组合并了解布局中是否有任何问题。
- en: We took a look at debugging and also visually debugging our application. Debugging
    is a good way to find out whether there are any errors in your application. Another
    good way to find any anomalies or issues in the working of your application is
    by testing your application. We'll take a look at testing your Flutter application
    in the next section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了调试以及应用的可视化调试。调试是找出你的应用中是否存在错误的好方法。另一种找出应用工作过程中任何异常或问题的好方法是测试你的应用。在下一节中，我们将探讨如何测试你的Flutter应用。
- en: Testing a Flutter application
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Flutter应用
- en: As your app gets bigger and bigger, a good set of tests may help you save time,
    as tests can find new bugs that could appear with normal modifications. Even performing **Test
    Driven Development** (**TDD**) is a good idea, as it can help you define a structure
    of your project and write less but more efficient code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的应用越来越大，一套好的测试可以帮助你节省时间，因为测试可以发现正常修改中可能出现的新错误。甚至执行**测试驱动开发**（**TDD**）也是一个好主意，因为它可以帮助你定义项目结构并编写更少但更高效的代码。
- en: 'In Flutter, there are mainly three kinds of automated testing:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flutter中，主要有三种自动化测试：
- en: '**Unit testing**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**'
- en: '**Widget testing**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小部件测试**'
- en: '**Integration testing**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**'
- en: Let's take a look at them in detail.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看它们。
- en: Unit testing
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**单元测试**'
- en: As the name suggests, a unit test is a type of testing that is used to test
    a single unit of code. This small unit could be a function, a method, or a class.
    Generally, in unit testing, we won't need to write on a disk, render to a screen,
    or receive external input. Unit tests must be as small as possible, so remove
    any possible external dependencies.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，单元测试是一种用于测试单个代码单元的测试类型。这个小的单元可能是一个函数、一个方法或一个类。通常，在单元测试中，我们不需要写入磁盘、渲染到屏幕或接收外部输入。单元测试必须尽可能小，因此移除任何可能的外部依赖。
- en: 'These tests are low maintenance and low in cost, and are very quick in terms
    of the time they take to execute. The only drawback of unit testing is that you
    can never completely reply on it, as it does not test the system as a whole. For
    this reason, there are other kinds of testing that should be used. Let''s take
    a look at how to perform this type of testing:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试维护成本低，成本也低，并且在执行时间上非常快。单元测试的唯一缺点是，你永远不能完全依赖它，因为它并不测试整个系统。因此，应该使用其他类型的测试。让我们看看如何进行这种类型的测试：
- en: 'Import `pubspec.yaml` into your testing framework, as follows:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pubspec.yaml`导入到你的测试框架中，如下所示：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Write the test code in `test/unit_test.dart`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`test/unit_test.dart`中编写测试代码：
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the test by running `flutter test test/unit_test.dart` in the project folder.
    Alternatively, you can run `flutter test` to run all the tests.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中运行`flutter test test/unit_test.dart`来运行测试。或者，你可以运行`flutter test`来运行所有测试。
- en: Unit tests are run in a local Dart VM with a headless version of the Flutter
    engine.This makes the process faster because it doesn't need to boot a real Flutter
    engine or compile a real application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是在本地Dart VM上运行的，使用Flutter引擎的无头版本。这使得过程更快，因为它不需要启动真实的Flutter引擎或编译真实的应用程序。
- en: Widget testing
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件测试
- en: Widget testing is also known as **component testing**. As its name suggests,
    it is used for testing a single widget, and the goal of this test is to verify
    whether the widget works and looks as expected.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件测试也称为**组件测试**。正如其名所示，它用于测试单个小部件，这种测试的目标是验证小部件是否按预期工作并显示。
- en: In addition to this, you can use the `WidgetTester` utility for multiple things
    while testing, such as sending input to a widget, finding a component in the widget
    tree, verifying values, and so on.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以在测试期间使用`WidgetTester`实用工具进行多件事情，例如向组件发送输入、在组件树中查找组件、验证值等等。
- en: 'Let''s take a look at how a widget test looks in code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码中的组件测试是如何看的：
- en: '[PRE5]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: While testing, if you need to see the UI, you can always use the `debugDumpApp()` function
    or run the test using `flutter tun test/widget_test.dart`. In this way, you will
    also be able to interact with the widgets during testing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中，如果您需要查看UI，您始终可以使用`debugDumpApp()`函数或使用`flutter test/widget_test.dart`运行测试。这样，您在测试期间也将能够与组件进行交互。
- en: Integration testing
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成测试
- en: Now, let's take a look at integration testing. This type of testing is used
    for testing the whole application or a big part of the application. Integration
    testing can be used to verify that the app does everything as expected or to test
    the performance of the code. Integration tests are run on a real device or an
    emulator, but they can't be run with a headless version of Dart VM like as it
    can in widget testing.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看集成测试。这种测试用于测试整个应用程序或应用程序的较大部分。集成测试可以用来验证应用程序是否按预期执行，或者测试代码的性能。集成测试是在真实设备或模拟器上运行的，但它们不能像在组件测试中那样使用无头版本的Dart
    VM运行。
- en: 'Now, let''s get started with writing and running the tests:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始编写和运行测试：
- en: 'Add the `flutter_driver`package to `pubspec`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`flutter_driver`包添加到`pubspec`：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Enable the Flutter driver extension and add a call to the `enableFlutterDriverExtension()`function in `main.dart`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Flutter驱动器扩展，并在`main.dart`中添加对`enableFlutterDriverExtension()`函数的调用。
- en: 'Run the integration test by using the `flutter drive` command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`flutter drive`命令运行集成测试：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have installed the tools to use Flutter; we then became
    familiar with IDE for our use and looked at Hot Reload, one of the best features
    in Flutter. We then learned about two essential concepts that are required in
    every application development workflow, that is, debugging and testing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了使用Flutter所需的工具；然后我们熟悉了用于我们的IDE，并查看了一个Flutter中最好的功能之一——热重载。然后我们学习了每个应用程序开发工作流程中必需的两个基本概念，即调试和测试。
- en: These concepts are going to help us get started with Flutter and start building
    our applications with it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些概念将帮助我们开始使用Flutter，并开始用它来构建我们的应用程序。
- en: In the next chapter we'll dive into the widget world and learn the different
    kinds of widgets that the widget catalog holds for us.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入到组件的世界，了解组件目录为我们提供的不同类型的组件。
