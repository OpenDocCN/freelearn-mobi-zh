- en: Chapter 7. Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous Integration is one of the most used terminologies in today's software
    world. Wherever you go in the software world, everybody talks about continuous
    integration. So what is continuous integration?
  prefs: []
  type: TYPE_NORMAL
- en: Continuous Integration is the practice of integrating all of the software code
    in a shared repository; prepare an automated build for every commit, and run the
    automated tests without any manual effort. It helps developers to detect problems
    early in fail fast mode. Here, early means as soon as a developer commits the
    code; within a couple of seconds or minutes (as per the project size), continuous
    integration process will notify about the success or failure of the build. Since
    errors are caught in the early stages, it saves a lot of effort while performing
    integration and functional testing of the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the popular Continuous Integration tools, Jenkins
    and TeamCity. As this is a Gradle book, we will limit our discussion to basic
    setup and configuration for these tools. We will also introduce a new topic, code
    quality management with Gradle. We will learn how **Checkstyle**, **PMD**, and
    **Sonar Runner** plugins can be integrated with Gradle, and how it can be integrated
    with Continuous Integration tools.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is one of the most popular open source continuous integration tools
    which helps to automate software build and the deployment process. It can work
    with build tools such as Maven, Gradle, and Ant. It supports various source code
    management systems such as CVS, Git, Subversion, and Perforce. Even simple shell
    or batch script execution is supported. The main advantage of Jenkins lies in
    its plugin support. There are more than 1000+ plugins for different functionalities,
    and if needed, it can be extended to support new requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features of Jenkins are:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy to install and configure. Simple web-based UI for managing the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for a variety of plugins for different builds and deployment related
    tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A very large community forum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for different repositories like SVN, Git, CVS, and Perforce etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for post build hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jenkins installation is just a two-step process. You need to download `jenkins.war`
    from [http://jenkins-ci.org/](http://jenkins-ci.org/). You will always get the
    latest version from this URL. For any previous releases, click on the **past releases**
    option and decide which version you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the war file is downloaded, it can be deployed in a container such as
    Tomcat, or it can be executed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, Jenkins started with an inbuilt Jetty container at 8080 port. Default
    Jenkins home directory will be set to `<USER_HOME>/.jenkins`. By setting the `JENKINS_HOME`
    environment variable, you can set it to any other location. This directory stores
    all the Jenkins related information such as job information, user account details,
    plugin information, and Jenkins general settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open a browser and type the following: `http://localhost:8080` and the
    Jenkins welcome page will be displayed. That is all. Jenkins is ready for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins installation](img/B02000_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1
  prefs: []
  type: TYPE_NORMAL
- en: Since this is not a Jenkins user guide, we will not be covering Jenkins functionalities
    in detail. You can go through the tutorials available on Jenkins main website.
    We will be mostly covering the topics that will be helpful to automate the build
    process with Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Only installation is not enough for Jenkins to get started with the Gradle build
    process. We need to configure some plugins before we start with our first job
    in Jenkins. Like `task` in Gradle, the unit of execution in Jenkins is job. A
    build job can perform compilation, run automated tests, package or even deployment
    related tasks. But before we start working with jobs, we will configure the following
    plugins for Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle Plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git Plugin (required if you are using Git as a repository)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the **Manage Jenkins** on the left-hand side vertical menu. You will
    find a list of different categories available. Click on **Manage Plugins**. You
    will find the following four tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins configuration](img/B02000_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Available** tab and filter (top right) for `Gradle Plugin`. You
    will find Gradle Plugin with the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gradle Plugin**'
  prefs: []
  type: TYPE_NORMAL
- en: '**This plugin makes it possible to invoke Gradle build script as the main build
    step.**'
  prefs: []
  type: TYPE_NORMAL
- en: Select the plugin and click on **Download now and Install after restart**. It
    is better to restart Jenkins after an installation, in order to avoid any issues.
  prefs: []
  type: TYPE_NORMAL
- en: This will add Gradle build execution capability to the Jenkins server. You will
    be able to see a success message once installation is successful. You might get
    an error if the system is firewall protected, which can restrict the system when
    connecting to the internet. In such cases, manually download the plugin (`*.hpi`
    files) and copy it to `<Jenkins_home>/plugins` directory. Jenkins plugins can
    be downloaded from [https://updates.jenkins-ci.org/download/plugins/](https://updates.jenkins-ci.org/download/plugins/).
  prefs: []
  type: TYPE_NORMAL
- en: For the examples in this chapter, we are using GitHub as a repository. To work
    with GitHub, we will add the GitHub plugin to the Jenkins server. We can add it
    in the same way we added the Gradle plugin. If the plugin is dependent on other
    plugins, then Jenkins will automatically download the required plugins. You can
    observe this when we install the GitHub plugin. Jenkins automatically installs
    the other required plugins such as the Git client plugin, and the Git API Plugin.
    As mentioned earlier, some plugins might require the Jenkins server to be restarted.
    In such cases, stop the current process and restart the Jenkins server in order
    to make the plugin effective.
  prefs: []
  type: TYPE_NORMAL
- en: The next important step is to configure JDK, Gradle, and Git with Jenkins. To
    configure these settings, open Jenkins URL and click on **Manage Jenkins**, and
    then **Configure System**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the correct path to the JDK and save the settings. Jenkins also has an
    option to install the software automatically from the internet. Take a look at
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins configuration](img/B02000_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.4 shows how to configure Gradle in Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jenkins configuration](img/B02000_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4
  prefs: []
  type: TYPE_NORMAL
- en: Create job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the Gradle plugin has been successfully installed, we will create the
    first Gradle build job. Go to Jenkins home page and click on **create new jobs**.
    There are different categories of jobs that can be created in Jenkins. We will
    create a **Freestyle project** in this example. For simplicity, we will build
    the plugin project that we created in [Chapter 4](ch04.html "Chapter 4. Plugin
    Management"), *Plugin Management*. A project can be created by simply giving it
    a name, such as `PluginProject`, as shown in Figure 7.5\. Also, try to avoid spaces
    in job names, as it is considered as a bad practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want words to be separated, you can use underscore(`_`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **OK**, in the next page you will have to configure the job.
    You will have to configure a few details as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Source code management location to download the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build step for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule the Build task (daily, hourly, after every commit etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put in any post build action to perform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will configure the repository under **Source Code Management**. As
    we are using the GitHub repository, we need to select the **Git** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6
  prefs: []
  type: TYPE_NORMAL
- en: Provide the repository URL and add the authentication (username/password) using
    the **Credentials** option as configured in Figure 7.6.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git executable must be set in the Jenkins system configuration, otherwise you
    will not be able to execute Git commands. If there is any issue with connecting
    to the URL, Jenkins will show you a proper error message. This helps to debug
    and resolve the issues. If the URL is validated to be successful, the next step
    is to choose the build options from one of the options displayed in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7
  prefs: []
  type: TYPE_NORMAL
- en: For our project we have selected the option **Build when a change is pushed
    to GitHub**, which helps to validate every commit by running a build script. You
    can set any other option as per the build requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to select a build tool for the project. From the options available,
    such as shell, Ant, and batch, we will select Gradle as the build tool for this
    project. This option is highlighted in the next figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the option **Invoke Gradle script** and configure a few basic parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9
  prefs: []
  type: TYPE_NORMAL
- en: We have configured the installed Gradle on the system `gradle-2.4` as the working
    Gradle version. To build the `PluginProject`, tasks can be set as `clean build`
    in the **Tasks** text box. If the `build.gradle` file is in the home/root folder
    of the project, then you can leave the **Root Build Script** textbox empty. However,
    if it is in another directory, you will have to mention the path relative to the
    workspace location. Our `build.gradle` file is in the `Chapter7/PluginProject`
    folder. So we can enter the Root Build script as `${workspace}/Chapter7/PluginProject`.
    As we are using the build file name as `build.gradle`, which is the default naming
    convention in Gradle, we do not need to specify the file name in the **Build File**
    text box. If you are using any other build file name, it has to be mentioned in
    the **Build file** text box.
  prefs: []
  type: TYPE_NORMAL
- en: You can also add **Post-build Actions** such as publish Java doc, send email
    notifications, build other projects as per the project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, save the configurations and you will be able to see the project on the
    dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create job](img/B02000_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10
  prefs: []
  type: TYPE_NORMAL
- en: Execute job
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we configured the build to be executed when a change is pushed to the
    source code management system, build can always be executed manually if you do
    not want to wait for changes to happen in the repository. Click on the **PluginProject**
    job on the Jenkins home page, which you had created earlier. You will be navigated
    to the job console at `http://localhost:8080/job/PluginProject/`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Execute job](img/B02000_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11
  prefs: []
  type: TYPE_NORMAL
- en: 'On the job console, you will find the **Build Now** option on the left-hand
    side. Click on the option to execute the job manually. In the console page, you
    can configure the job at any time by selecting the **Configure** option. Once
    the job has been executed successfully, you will find similar output as displayed
    in Figure 7.12 by clicking the **build no** link in the **Build History** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Execute job](img/B02000_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12
  prefs: []
  type: TYPE_NORMAL
- en: 'Build history is displayed in the UI with the latest job execution status on
    top. Figure 7.13 shows that the 1st and 2nd execution failed with some error,
    but the 3rd execution was successful. In the **Build History** section, if a job
    has failed, it will be marked in red. For success, it is blue, and aborted jobs
    can be identified in gray:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Execute job](img/B02000_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13
  prefs: []
  type: TYPE_NORMAL
- en: The default location for this job is `<USER_HOME>/.jenkins/jobs/<JOB_NAME>/workspace`.
    If you browse to `<USER_HOME>/.jenkins/jobs` location, you will find a directory
    created with a job name, that is `PluginProject`, which further contains `config.xml`
    for job configuration. The job directory has two further sub-directories, builds
    for executed jobs and workspace where the build actually runs. If you go inside
    the `builds` directory, you will find the build execution details for each run.
  prefs: []
  type: TYPE_NORMAL
- en: '![Execute job](img/B02000_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14
  prefs: []
  type: TYPE_NORMAL
- en: 'The workspace directory contains the project that we have configured for the
    job. Earlier in the build configuration, we specified the `Build Root` as `${workspace}/Chapter7/PluginProject`.
    Now if we go to this location, we will find the build folder created for this
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is just a brief overview of Jenkins configuration. More details can be
    found at [https://jenkins-ci.org/](https://jenkins-ci.org/). In the next two sections,
    we will explore Checkstyle, PMD, and Sonar Runner plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Checkstyle and PMD plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how simple it is to create a Gradle build job in Jenkins. We will
    now add **Checkstyle** and **PMD** plugins to our project for quality checking
    purposes. There are different approaches that we can follow in order to use these
    plugins. We can directly add these plugins to Jenkins and run it for our project,
    or we can use Gradle Checkstyle and PMD plugins and evaluate the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the Gradle approach to add Checkstyle and PMD plugins for code
    quality check, and execute this using Jenkins. Let''s create two Gradle files,
    one for Checkstyle and the other for PMD:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build_checkstyle.gradle`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the build file, we have added additional configuration in the closure `checkstyle
    { … }`. If the source code does not pass the CheckStyle rules, it results in build
    failure. To ignore any build failure due to Checkstyle rule violation; we need
    to add the `ignoreFailures=true` property in the `checkstyle` closure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Checkstyle plugin provides the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`checkstyleMain`: This executes Checkstyle against the Java source files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkstyleTest`: This executes Checkstyle against the Java test source files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkstyleSourceSet`: This executes Checkstyle against the given source set''s
    Java source files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Checkstyle plugin, we need a `checkstyle.xml` file in the `<Project>/config/checkstyle/`
    directory. This is the default location. You can find a sample `checkstyle.xml`
    at: [https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml](
    https://github.com/google/google-api-java-client/blob/dev/checkstyle.xml).'
  prefs: []
  type: TYPE_NORMAL
- en: It provides a standard quality checks for projects. You can write customized
    `checkstyle.xml` for your requirements as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use PMD plugin, you can copy the above file and replace `checkstyle` closure
    with `pmd` closure and remove the `toolVersion` property. If you don''t specify
    a version, Gradle downloads PMD version 5.1.1 by default. You will also need to
    add apply plugin: `pmd`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`build_pmd.gradle`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'PMD plugin provides the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pmdMain`: This executes PMD against the Java source files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pmdTest`: This executes PMD against the Java test source files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pmdSourceSet`: This executes PMD against the given source set''s Java source
    files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the Checkstyle and PMD plugins can be executed using `check` task.
  prefs: []
  type: TYPE_NORMAL
- en: If you add Checkstyle plugin and execute `check` task, it will call all checkstyle
    tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you add PMD plugin and execute `check` tasks, it will execute `pmd` tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will create a new project `QualityCheck` and add the following files to
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build_checkstyle.gradle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build_pmd.gradle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config/checkstyle/checkstyle.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkstyle and PMD plugin are executed in Java code, so we will add some sample
    Java files under the `src/main/java/` directory. To create a build step in Jenkins,
    we will create a build step to execute a Checkstyle task (`check` task), as shown
    in Figure 7.15\. You can repeat the same steps for PMD plugin.
  prefs: []
  type: TYPE_NORMAL
- en: For a new configuration, `Root Build script` is set to `${workspace}/Chapter7/QualityCheck`.
    Also, we added the **Build file** name in the text box as `build_checkstyle.gradle`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checkstyle and PMD plugins](img/B02000_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15
  prefs: []
  type: TYPE_NORMAL
- en: Save this configuration and execute the job again. As configured, `build_checkstyle.gradle`
    file executed on java source code and generated CheckStyle reports for it. You
    can find the reports under `${workspace}\Chapter7\QualityCheck\build\reports\checkstyle\main.xml`
  prefs: []
  type: TYPE_NORMAL
- en: The Sonar Runner plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sonar is one of the most popular quality management tools which gives complete
    analysis of a project in terms of lines of code, documentation, test coverage,
    issues and complexities. Gradle provides seamless integration with Sonar. The
    only prerequisite is that sonar server should be installed and running. Details
    on Sonar can be found at [http://www.sonarqube.org/](http://www.sonarqube.org/).
  prefs: []
  type: TYPE_NORMAL
- en: To run sonar runner plugin, we just need to apply plugin `sonar-runner` and
    configure it to connect to the sonar server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create build file `build_sonar.gradle` for your project with the following
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding configuration is self-explanatory. You need to add configurations
    such as Sonar URL, DB URL, JDBC driver details. Our build file is ready. The next
    step is to configure a job in the Jenkins server. To configure `sonarRunner` task
    in Jenkins, we can add a few basic steps as shown in Figure 7.16:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Sonar Runner plugin](img/B02000_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the task name is `sonarRunner` and the build file name is `build_sonar.gradle`.
    Now, execute this job in Jenkins and you will find the output in the console.
    The output contains a link to the Sonar server. You can follow the link, which
    will redirect you to the Sonar report, as displayed in Figure 7.17:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Sonar Runner plugin](img/B02000_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned preceding, Sonar gives an analysis of the project in different
    areas and you can find the details in the Sonar UI.
  prefs: []
  type: TYPE_NORMAL
- en: TeamCity walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we learned how to configure a Gradle project in Jenkins
    and how to integrate quality plugins. In this section, we will explore one more
    popular continuous integration tool, TeamCity. We are assuming that TeamCity is
    already installed and running on your machine. Therefore, we will skip the TeamCity
    installation and configuration details. Actually, the installation process is
    very simple and it can be completed in a few minutes. You can download TeamCity
    from the following URL: [https://www.jetbrains.com/teamcity/download/](https://www.jetbrains.com/teamcity/download/)
    and installation instructions are available at [https://confluence.jetbrains.com/display/TCD9/Installation](https://confluence.jetbrains.com/display/TCD9/Installation).'
  prefs: []
  type: TYPE_NORMAL
- en: By default, TeamCity runs on `http://localhost:8111/` and it has one build agent
    that runs on the server. We will build the same plugin project using TeamCity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to TeamCtiy and click on Create a project. Provide a project name and
    description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and then click on the **Create Build Configuration** button. You will
    need to provide general settings for the project. After general settings, proceed
    to **Version Control Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to configure **Create and attach new VCS root**. Choose Git
    from the drop down, since we are using Git as a repository, as shown in Figure
    7.20:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20
  prefs: []
  type: TYPE_NORMAL
- en: Provide **General settings** and the **Fetch URL** of the plugin project, also
    provide authentication, such as username/password and the Git exe location in
    **Path To Git**.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the screen, click on **Test Connection**. If the connection is
    successful, click on **Save**. The next step is **Add Build Step**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the build step, you need to configure the **PluginProject** build file details
    and build tasks details. For example, we need to provide some basic information
    such as `clean build` for task, working directory as `Chapter7/PluginProject`,
    and Gradle and JDK home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this configuration and the project will then be ready. The details of
    the build step can be reviewed in the build configuration screen, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22
  prefs: []
  type: TYPE_NORMAL
- en: TeamCity executes the project through TeamCity Agents. TeamCity server installs
    an agent with the server. You can use this agent to execute the job. Otherwise,
    you can configure more agents through the **Agents** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23
  prefs: []
  type: TYPE_NORMAL
- en: Once the agent is configured and connected, you can map the project with the
    build agent and you are ready to run the build job.
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24
  prefs: []
  type: TYPE_NORMAL
- en: On clicking on the **Run** button, TeamCity server will execute the build job
    on mapped agent, and you can see the output of the build job as a success or failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Build Log** console, you can also analyze the complete log, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity walk-through](img/B02000_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed briefly the need for continuous integration in
    the software development world, and looked into the two most popular continuous
    integration tools, Jenkins and TeamCity. In this chapter, we learned how easy
    it is to configure these tools and how we can integrate Gradle with these CI tools.
    We also learned three different quality plugins of Gradle: Checkstyle, PMD and
    Sonar Runner. And we executed these quality tasks with the help of Jenkins. There
    are so many topics to learn in Continuous Integration, Jenkins or TeamCity. Unfortunately,
    we won''t be able to take up those topics in this book. We strongly recommend
    readers to do further reading in every area left uncovered.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss different migration strategies from Ant
    and Maven to Gradle. This will help to migrate existing Ant or Maven scripts to
    Gradle.
  prefs: []
  type: TYPE_NORMAL
