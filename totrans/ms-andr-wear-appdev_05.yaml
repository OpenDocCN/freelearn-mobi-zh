- en: Chapter 5. Synchronizing Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"How we need another soul to cling to."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Sylvia Plath* |'
  prefs: []
  type: TYPE_TB
- en: In the previous chapter, we walked you through creating a standalone wearable
    app. In this chapter, we introduce the idea of a companion handheld app, and why
    it is needed. We then walk you through the steps required to pair a handheld device
    with an Android Wear emulator to expand your environment for wearable app development.
  prefs: []
  type: TYPE_NORMAL
- en: We will then augment the `Today` app we started in the previous chapter with
    the ability to display *this day in history* by having it pull content from a
    public feed page via the companion app.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code samples for this chapter are available on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_5](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_5)).
    Please use the actual code for reference as you follow along.
  prefs: []
  type: TYPE_NORMAL
- en: What is a companion app anyway?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wearable apps run directly on the wearable device and in this way let you access
    the device's hardware, activities, and services all on the device itself. The
    breadth of operations that may be performed on a wearable device is limited by
    design, owing to the smaller scale and the need to efficiently manage processing
    power and memory. In addition to that, wearables don't support the Google Play
    store. In addition to that, Android Wear 1.x does not allow direct install of
    apps from the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'A companion handheld app addresses these concerns to let us benefit from a
    rich user experience on our wearable device. The point to remember is that a wearable
    app is packaged within a companion handheld app. The companion app is what gets
    published to the Google Play store, as described in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is a companion app anyway?](img/image00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When users download the companion app to a handheld device, the wearable app
    within it is automatically pushed to all connected wearables, as described in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is a companion app anyway?](img/image00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, the companion app running on the handheld device is better suited
    to doing the heavy lifting involved when an app performs network actions, intensive
    computation, and other resource-intensive work. The companion app then sends results
    to the wearable, thus communicating the outcome of its operations.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can create a project housing a companion app module along with its
    wearable app module, we need to set up our development environment to let us work
    with a wearable device on our handheld device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is expected that Android Wear 2.0 will change the way Wear apps are packaged
    and installed from Google Play store. The auto-installation for Wear apps in Wear
    1.x is to be retired. Instead, Wear 2.0 apps are expected to have full network
    access and their installation is to be completely separate from that of handheld
    apps. Google is moving towards standalone wearable apps as the preferred packaging
    approach, but it is not clear yet whether standalone apps will be required (with
    no option for auto-installation) or if they will simply be supported as an additional
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android Wear virtual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These steps are published on the Android Developers site ([https://developer.android.com/training/wearables/apps/creating.html](https://developer.android.com/training/wearables/apps/creating.html)),
    in the **Creating and Running a Wearable App** section. They are repeated here
    and expanded upon for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an Android Wear virtual device, click **Tools** | **Android** | **AVD
    Manager** in Android Studio and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create virtual device...** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Wear** in the Category list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Android Wear Square** or **Android Wear Round**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a release name (for example, KitKat Wear).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change any preferences for your virtual device (optional).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Finish**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the virtual device you just created.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the green play button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait until the emulator initializes and shows the Android Wear home screen.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pair the Android handheld device with the Wearable emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your handheld device, install the Android Wear app provided by Google from
    Google Play.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the handheld device to your machine via USB.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Forward the AVD's communication port to the connected handheld device (you must
    do this every time the device is connected). If we don't see any errors after
    the following command run, then everything is fine:![Setting up an Android Wear
    virtual device](img/image00168.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Android Wear app on your handheld device and connect to the emulator
    by selecting **Connect Emulator***,* as shown in the following image:![Setting
    up an Android Wear virtual device](img/image00169.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A successful connection is depicted in the following image:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up an Android Wear virtual device](img/image00170.jpeg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: Launch the Settings menu and select  **Try out watch notifications***:*![Setting
    up an Android Wear virtual device](img/image00171.jpeg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Reminder (by time)** option from the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Setting up an Android Wear virtual device](img/image00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screen appears on the wearable emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an Android Wear virtual device](img/image00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Revisiting the Today app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the ability to work with a wearable device on our handheld,
    let's revisit the `Today` app we developed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: That simplistic version of the app helped gets us started, no doubt. But it
    doesn't really cut it for us. In order to enjoy a fuller experience of a wearable
    device's capabilities, we need to expand our requirements. So, we've decided to
    devote the rest of this chapter to augmenting our `Today` app significantly.
  prefs: []
  type: TYPE_NORMAL
- en: We'll describe the features of the new app in a bit, but first, let's get started
    by creating a new project in Android Studio—one that includes a wearable app as
    well as a companion app; and setting it up with the sample code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We thought it might be refreshing to start over; that is why our new app is
    still named `Today`. Feel free to call it whatever you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Be sure to select the form factors for the app as shown in the following screenshot—**Phone
    and Tablet**, and **Wear** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add an empty activity to the **Mobile** module by clicking on **Empty Activity** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Give a suitable name to your activity in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For now, choose the **Add No Activity** option in the **Wear** module, and
    click **Finish** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Android Studio creates the **Wear** and **Mobile** modules depicted in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Revisiting the Today app](img/image00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the state of our project. Note that Android Studio
    created two modules—mobile and wear. It also created Gradle scripts for them and
    added the necessary dependencies. Furthermore, the *run target* configuration
    for both modules was created as well.
  prefs: []
  type: TYPE_NORMAL
- en: We copied our code (that is, activities, resources, icons, and so on) from the
    `Today` project we created in [Chapter 4](part0034.xhtml#aid-10DJ41 "Chapter 4. 
    Developing Watch UI"), *Developing Watch UI*, into the wear module of this newly
    created project, and then augmented it to meet our expanded requirements. This
    is a good time to examine what those requirements are.
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the new Today app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all know how important dates are. Who doesn't get a kick out of learning
    that their significant other shares a birthday with a famous celebrity, or better
    yet, an infamous one? With that in mind, let's spruce up our `Today` app to do
    more than simply display the current date. Let's have it pull content from a public
    feed paged named *On This Day* ([https://en.wikipedia.org/wiki/Special:FeedItem/onthisday/20160615000000/en](https://en.wikipedia.org/wiki/Special:FeedItem/onthisday/20160615000000/en)),
    which shares one or more historically important events/occurrences whose anniversary
    happens to coincide with today.
  prefs: []
  type: TYPE_NORMAL
- en: This seems like a larger enough bite into the Wearable API stack that will let
    us study the interplay between a wearable device and its companion app without
    too much additional complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into the application code, it behooves us to cover a few concepts,
    tools, and API objects that are essential to our application. The intent here
    is to get you enough information to understand the core portions of the sample
    code. You can always come back and refer to this chapter and the documentation
    referenced in it.
  prefs: []
  type: TYPE_NORMAL
- en: The Wearable data layer API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google Play services include a Wearable data layer API ([https://developer.android.com/training/wearables/data-layer/index.html](https://developer.android.com/training/wearables/data-layer/index.html)),
    through which your handheld and wearable apps may communicate with each other.
  prefs: []
  type: TYPE_NORMAL
- en: We encourage you to study the data layer API documentation located at the preceding
    page on Android developers site, but certain key data objects in the API deserve
    special attention.
  prefs: []
  type: TYPE_NORMAL
- en: MessageApi
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This interface exposes methods for the wearables and handheld device to send
    messages to each other. Messages sent to connected network nodes (that is, paired
    devices) are queued for delivery. It is important to keep in mind that a message
    created by an application is private to that application and accessible only by
    that application running on other nodes.
  prefs: []
  type: TYPE_NORMAL
- en: WearableListenerService
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This class should be extended by applications that expect to be notified of
    events while running in the background. Events include when a message is received,
    when data changes, and when nodes connect to or disconnect from the Android Wear
    network, which is the constantly shifting network of wearable devices and the
    handheld devices that they can connect to and/or interact with.
  prefs: []
  type: TYPE_NORMAL
- en: DataListener
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the `WearableListenerService` class notifies applications while they run
    in the background, the `DataListener` interface notifies applications implementing
    it of data layer events while they run in the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Along with all of the user''s connected devices (nodes), Google''s servers
    implicitly host a cloud node in the network of devices. The purpose of the cloud
    nodes is to synchronize data between directly connected devices. Changes to an
    application''s state on a handheld device are pushed to all of the user''s wearable
    devices and vice versa as depicted in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cloud Node](img/image00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The GoogleApiClient class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to create an instance of the `GoogleApiClient` class, any time you want
    to make a connection to one of the Google APIs provided in the Google Play services
    library. The Google API client provides a common entry point to all Google Play
    services and manages the network connection between the user's device and each
    Google service.
  prefs: []
  type: TYPE_NORMAL
- en: We use this class to let our mobile device connect to the Wearable API in the
    Google Play services library in order to get access to connected wearables.
  prefs: []
  type: TYPE_NORMAL
- en: The Volley library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using Volley to fetch HTML content from Wikipedia. You can read all
    about this HTTP library on the developer's web page ([https://developer.android.com/training/volley/index.html](https://developer.android.com/training/volley/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: The JSoup library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JSoup library ([https://jsoup.org](https://jsoup.org)) will be our preferred
    library to parse the HTML content feed that we pull from Wikipedia. Now, let's
    take a look at the code.
  prefs: []
  type: TYPE_NORMAL
- en: The Build Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Study the dependencies specified in the `build.gradle` file of the mobile and
    companion apps respectively. Note how the mobile app''s `build.gradle` file has
    the additional dependencies for `Volley` and `JSoup` libraries. Remember that
    the companion app has to do the heavy lifting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Companion app's Android manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please have a look at the `AndroidManifest.xml` fileof the companion app with
    a basic `TodayMobileActivity` and `HandheldListenerService` activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The TodayMobileActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TodayMobileActivity` class is a convenience activity at this time, intended
    only to connect to any existing wearable devices paired with the mobile device.
    We will be running the mobile/companion app target on a mobile device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we successfully connect with the wearable device, we should be able to
    see a confirmation that at least one device is connected, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodayMobileActivity class](img/image00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Users can launch the `TodayMobileActivity` class to see if the devices are connected
    or not. If the value shown against Devices connected is not greater than zero,
    then the mobile device is not paired successfully, meaning it is not connected
    to the wearable device or emulator. We will be expanding this activity more in
    future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Wearable app's Android manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the `AndroidManifest.xml` file for the wearable app with the three
    activities for the menu items, such as the `TodayActivity`, `DayOfYearActivity`,
    and `OnThisDayActivity` activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The OnThisDayActivity class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `OnThisDayActivity` class sends a message to the mobile device (that is,
    the companion app) using the `GoogleApiClient` API, saying that it needs to fetch
    content from Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take note of the `onDataChanged` handler method defined in this activity. The `onDataChanged` method
    is the callback listener that gets processed when the companion app sends data
    packets back to the wearable device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The HandheldListenerService class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `HandheldListenerService` class listens for messages coming from the wearable
    device. When a message is received, the `onMessageReceived` handler checks to
    see if the message is a request for content and if it is, it invokes a helper
    to read the feed and parse the response accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the code snippets provided here are incomplete and are intended
    only as a quick reference. You are encouraged to download and play with the latest
    code from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the app on your wearable device, this is what you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The HandheldListenerService class](img/image00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, we show a *Toast* message while
    requesting to fetch *On This Day* content from Wikipedia using the handheld device''s
    companion app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The HandheldListenerService class](img/image00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that in our `activity_on_this_day` XML layout, we nest our `TextView` layout
    within a `ScrollView` layout, which effectively allows us to scroll through all
    of our feed items. This begs a discussion of the UX aspects of wearable app development.
    We can certainly utilize better UI components to do what we just did. More on
    this in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Messages not coming through to your Wear app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This can be frustrating, which is why we thought to mention it. If you see
    any synchronization issues whereby messages are not coming through to your wear
    application, check that the version of your Google Play services module matches
    between your companion app and wearable app `AndroidManifest.xml` files. Having
    different versions can lead to this sort of unexpected behavior and cost you hours
    in wasteful debugging. Consider the following screenshot of the Android Studio
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Messages not coming through to your Wear app?](img/image00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We described the need for a companion handheld app and stepped through creating
    an Android Wear virtual device and pairing a handheld device with it. We then
    created a new `Today` app that pulls content from a public feed page via the companion
    app and pushes results to the wearable device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce context-aware notifications and voice
    interactions, which power a rich user experience with Android Wear.
  prefs: []
  type: TYPE_NORMAL
