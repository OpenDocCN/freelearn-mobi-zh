["```swift\nimport XCTest\n@testable import FirstDemo\n```", "```swift\nclass FirstDemoTests: XCTestCase {\n```", "```swift\noverride func setUpWithError() throws {\n  // Put setup code here. This method ...\n}\noverride func tearDownWithError() throws {\n  // Put teardown code here. This method ...\n}\n```", "```swift\nfunc testExample() throws {\n  // This is an example of a functional test case.\n  // Use XCTAssert and related functions to ...\n}\nfunc testPerformanceExample() throws {\n  // This is an example of a performance test case.\n  self.measure {\n    // Put the code you want to measure the time of here.\n  }\n}\n```", "```swift\nfunc numberOfVowels(in string: String) -> Int {\n  let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\",\n                             \"A\", \"E\", \"I\", \"O\", \"U\"]\n  var numberOfVowels = 0\n  for character in string {\n    if vowels.contains(character) {\n      numberOfVowels += 1\n    }\n  }\n  return numberOfVowels\n}\n```", "```swift\nfunc test_numberOfVowels_whenGivenDominik_shouldReturn3() {\n  let viewController = ViewController()\n  let result = viewController.numberOfVowels(in: \"Dominik\")\n  XCTAssertEqual(result, 3,\n    \"Expected 3 vowels in 'Dominik' but got \\(result)\")\n}\n```", "```swift\nfunc numberOfVowels(in string: String) -> Int {\n  let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\",\n                             \"A\", \"E\", \"I\", \"O\", \"U\"]\n  return string.reduce(0) {\n    $0 + (vowels.contains($1) ? 1 : 0)\n  }\n}\n```", "```swift\n// This assertion asserts the same as...\nXCTAssertEqual(2, 1+1, \"2 should be the same as 1+1\")\n// ...this assertion\nXCTAssertTrue(2 == 1+1, \"2 should be the same as 1+1\")\n```", "```swift\nXCTAssertEqual(1, 2)\n// Log output:\n// XCTAssertEqual failed: (\"1\") is not equal to (\"2\")\nXCTAssert(1 == 2)\n// Log output:\n// XCTAssertTrue failed\n```", "```swift\nfunc test_dictsAreQual() {\n  let dict1 = [\"id\": \"2\", \"name\": \"foo\"]\n  let dict2 = [\"id\": \"2\", \"name\": \"fo\"]\n  XCTAssertEqual(dict1, dict2)\n  // Log output:\n  // XCTAssertEqual failed: (\"[\"name\": \"foo\", \"id\":\n    \"2\"]\")...\n  // ...is not equal to (\"[\"name\": \"fo\", \"id\": \"2\"]\")\n}\n```", "```swift\nfunc DDHAssertEqual<A: Equatable, B: Equatable>\n  (_ first: [A:B],\n   _ second: [A:B]) {\n  if first == second {\n    return\n  }\n  for key in first.keys {\n    if first[key] != second[key] {\n      let value1 = String(describing: first[key]!)\n      let value2 = String(describing: second[key]!)\n      let keyValue1 = \"\\\"\\(key)\\\": \\(value1)\"\n      let keyValue2 = \"\\\"\\(key)\\\": \\(value2)\"\n      let message = \"\\(keyValue1) is not equal to\n        \\(keyValue2)\"\n      XCTFail(message)\n      return\n    }\n  }\n}\n```", "```swift\n func DDHAssertEqual<A: Equatable, B: Equatable>(\n  _ first: [A:B],\n  _ second: [A:B],\n  file: StaticString = #filePath,        // << new\n  line: UInt = #line) {                  // << new\n    if first == second {\n      return\n    }\n    for key in first.keys {\n      if first[key] != second[key] {\n        let value1 = String(describing: first[key]!)\n        let value2 = String(describing: second[key]!)\n        let keyValue1 = \"\\\"\\(key)\\\": \\(value1)\"\n        let keyValue2 = \"\\\"\\(key)\\\": \\(value2)\"\n        let message = \"\\(keyValue1) is not equal to\n          \\(keyValue2)\"\n        XCTFail(message, file: file, line: line)  // << new\n        return\n      }\n    }\n  }\n```"]