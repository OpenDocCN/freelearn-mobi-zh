["```swift\nprotocol IShape {\n  func draw() -> String\n}\n```", "```swift\nclass Square: IShape {\n  func draw() -> String{\n    return \"drawing Shape: Square\"\n  }\n}\n\nclass Rectangle: IShape {\n  func draw() -> String {\n    return \"drawing Shape: Rectangle\"\n  }\n}\n```", "```swift\nclass ShapeDecorator: IShape {\n  private let decoratedShape: IShape\n\n  required init(decoratedShape: IShape){\n    self.decoratedShape = decoratedShape\n  }\n\n   func draw() -> String {\n    fatalError(\"Not Implemented\")\n  }\n}\n```", "```swift\nclass RoundedCornerShapeDecorator: ShapeDecorator{\n  required init(decoratedShape: IShape) {\n       super.init(decoratedShape: decoratedShape)\n  }\n\n  override func draw() ->String{\n    //we concatenate our shape properties\n     return  decoratedShape.draw() + \",\" + setRoundedCornerShape(decoratedShape)\n  }\n\n  func setRoundedCornerShape(decoratedShape: IShape) -> String{\n    return \"Corners are rounded\"\n  }\n}\n```", "```swift\nlet rectangle = Rectangle()\nlet square = Square()\n```", "```swift\nlet roundedRectangle = RoundedCornerShapeDecorator(decoratedShape: Rectangle())\n\nlet roundedSquare = RoundedCornerShapeDecorator(decoratedShape: Square())\n```", "```swift\nprint(\"rectangle with Normal Angles\")\nrectangle.draw()\n\nprint(\"square with Normal Angles\")\nsquare.draw()\n\n//rounded corners shapes\nroundedRectangle.draw()\nroundedSquare.draw()\n```", "```swift\nprotocol IAnimation{\n  func display() -> String\n  func click() -> String\n}\n```", "```swift\nclass Video:IAnimation{\n  func click() -> String{\n    return \"\"\n  }\n\n  func display()->String{\n    return \"Display the video\"\n  }\n\n  func load()->String{\n    return \"Loading the video\"\n  }\n\n  func play()->String{\n    return \"Playing the video\"\n  }\n}\n```", "```swift\nclass ScreenShot:IAnimation{\n  var video:Video?\n\n  func click() -> String {\n    if let video = video {\n      return video.play()\n    } else {\n      video = Video()\n      return video!.load()\n    }\n  }\n\n  func display() -> String {\n    if let video = video {\n      return video.display()\n    } else {\n      return \"Display the screenshot of the video\"\n    }\n  }\n}\n```", "```swift\nvar animation = ScreenShot()\nanimation.display()\nanimation.click()\nanimation.display()\n```", "```swift\n// IAbstractBridge\nprotocol IAbstractBridge {\n  var concreteImpl: ImplementationBase {get set}\n  func turnOn()\n}\n```", "```swift\n//Bridge\nprotocol ImplementationBase {\n  func run()\n}\n```", "```swift\n/* Concrete Abstraction */\nclass RemoteControl: IAbstractBridge {\n  var concreteImpl: ImplementationBase\n\n  func turnOn() {\n    self.concreteImpl.run()\n  }\n\n  init(impl: ImplementationBase) {\n    self.concreteImpl = impl\n  }\n}\n```", "```swift\n/* Implementation Classes 1 */\nclass TV: ImplementationBase {\n  func run() {\n    println(\"tv turned on\");\n  }\n}\n\n/* Implementation Classes 2 */\nclass Light: ImplementationBase {\n  func run() {\n    println(\"light turned on\")\n  }\n}\n```", "```swift\nlet tvRemoteControl = RemoteControl(impl: TV())\ntvRemoteControl.turnOn()\n\nlet lightRemoteControl = RemoteControl(impl: Light())\nlightRemoteControl.turnOn()\n```"]