- en: Chapter 2\. Obtaining the Source Code – Structure and Philosophy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we had an overview about the system layer-based architecture
    and we had our first hands-on experience, testing a real-world device using CTS
    tools suite.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the user will learn about the philosophy behind the Android
    and Google development model. We will show how the source code is organized, which
    are the main branches, and what the workflow is. We will create a step-by-step
    journey to retrieve the **Android Open Source Project** (**AOSP**) source code
    and prepare the environment by installing all the required tools.
  prefs: []
  type: TYPE_NORMAL
- en: The user will learn how to contribute to the Android Open Source Project, how
    to use tools such as `git`, the version-control system, and, `repo`, the repository
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: To complete the chapter, we will dig into the AOSP folder structure, analyzing
    the most important components that create the most popular mobile operating systems
    of the world.
  prefs: []
  type: TYPE_NORMAL
- en: The Android philosophy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android is an open source platform created to be compatible with a huge number
    of different devices, from a hardware point of view to a purpose point of view.
    The main goal is to provide a freely available software platform for both large
    enterprise companies and small independent makers or even single developers. Android
    aims to provide an easy way to create innovative solutions and bring them to market
    with no effort.
  prefs: []
  type: TYPE_NORMAL
- en: Everything started in 2005, when Google acquired Android Inc., a small company
    that was developing an operating system for mobile devices. A couple of years
    later, the Open Handset Alliance was born. In 2007, 84 companies, including mobile
    operators, handset manufacturers, and semiconductor and software companies, publicly
    announced their brand new, upcoming mobile operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For one more whole year the project was kept a secret. Google worked hard to
    bring the project to version 1.0 and in 2008 Android was shown to the world. In
    the following seven years, four major versions of the system have been released.
    The following table tells the chronological history of all the Android versions.
    Every single version was released as open source software to the world. Every
    version, but `Honeycomb`, that was an ugly PR slip for Google, which spent a lot
    of energy to bring it down and replace it with `Ice Cream Sandwich` as soon as
    possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_18.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The license
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating an open source platform brings in a few concerns about which license
    gives the perfect balance between protection and freedom. The goal is to give
    manufacturers enough freedom to adapt the system to their own hardware without
    being scared of dark licenses, trying to steal their intellectual property. To
    reach this goal, Google picked one of the most famous open source licenses available
    at the time and applied it to most parts of the operative system.
  prefs: []
  type: TYPE_NORMAL
- en: The license that Google uses to protect the Android Open Source Project (AOSP)
    is the Apache Software License, Version 2.0, also known as Apache 2.0, and it
    covers almost every line of code published to AOSP. The Apache 2 license doesn't
    apply to one big system component—the kernel. Linux Kernel is protected by GNU
    Public License, V2, and it comes with a *system exception* to be able to be shipped
    with Android.
  prefs: []
  type: TYPE_NORMAL
- en: Being open source and being easily adaptable to popular hardware, it launched
    Android to the top of the mobile market at rocket speed, reaching one billion
    active devices all over the world with over one million apps available on the
    Google Play Store. One billion active devices is the result of a winning strategy—providing
    manufacturers with a software solution for their hardware, easy to integrate and
    customize, coming free of charge and community supported, in a market that was
    dominated by Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Open source, closed doors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A closer look at the project shows how Android is slightly different from other
    open source projects: Android is developed by Google behind closed doors. Lots
    of people in the community don''t agree about considering Android as *open* as
    Linux is. In fact, the two approaches are completely different. Yes, both of them
    have an open source license, but Linux is a community-developed project, Android,
    instead, is completely developed by Google.'
  prefs: []
  type: TYPE_NORMAL
- en: Every technical discussion, every decision, every roadmap step is decided by
    Google. When the development life cycle completes, Google releases a new version
    of the operative system, updates the public source code repository and everybody
    is able to download the latest version of the OS.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are e-mailing lists for discussion and support and there are
    a few ways to contribute to the project, but everything is decided by the Android
    development team.
  prefs: []
  type: TYPE_NORMAL
- en: The Android development model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To assure the stability of the Android current release, Google keeps the source
    code in *code lines*. This approach provides a proper mechanism to keep separated
    the current stable version, available on all latest devices, from the currently
    under development, unstable version. As you may easily notice, Google is using
    a different naming convention for Android compared to the usual nomenclature of
    open source projects—`code line` is used instead of `branch`, because a single
    `code line` can be based on multiple git `branches`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how the source code history evolves over time,
    through different branches and releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_19.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The previous diagram shows the main `public branch`, Upstream, on the left.
    This branch is the main public development branch where all the critical bug fixes
    are released constantly, and where all the main experimentation with new devices
    and new technology is performed. Every developer or manufacturer can obtain this
    set of source code and start to create their own Android device.
  prefs: []
  type: TYPE_NORMAL
- en: On the right side of the diagram, we can see Google's private branch. This branch
    contains the Android `next version`. Generally, all the development is done by
    Google itself, with the support of a hardware partner that provides a reference
    device. Typically, this device is a high-end, top-class device that Google appoints
    as Google's next reference device, also known as Nexus. Every new Nexus has been
    chosen keeping in mind Google Android's development roadmap—every technical hardware
    specification supports or discourages particular software development, to create
    the perfect symbiosis between the device and the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: When the internal development reaches the desired stable point, the new version
    is released, every branch is updated accordingly and a new public/private development
    cycle begins, once again.
  prefs: []
  type: TYPE_NORMAL
- en: Source code tags and builds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To effectively refer to a specific Android version, every public release, since
    Android 1.5, comes with a fancy pop codename, a version number, and a more developer-oriented
    API level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows how the correspondence between codename/version/API
    level is not always a one-to-one relationship. Most of the time, the code name
    has a longer life cycle than the version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_20.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Nexus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Nexus family contains all those Android devices that Google designs, produces,
    and sells, with the help of its hardware manufacture partners.
  prefs: []
  type: TYPE_NORMAL
- en: One of the peculiarities of the Nexus family is the bare Android system it equips
    the device—there is no customization of any sort, neither from the manufacturer
    nor from the telephone carrier. The system is based on pure Android source code,
    providing the user with the purest Android experience. As an advanced note, the
    device bootloader can be easily and legally unlocked, to allow every sort of modification
    any expert user could desire. Security-wise, the Nexus devices are the first ones
    that receive security fixes and system updates—stay updated, stay safe!
  prefs: []
  type: TYPE_NORMAL
- en: The Nexus family is continuously growing in numbers and quality and it now contains
    smartphones, tablets, and even digital players. The upcoming tables show an overview
    on all the currently available models.
  prefs: []
  type: TYPE_NORMAL
- en: Phones
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a list of all stock Nexus phones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_21.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tablets
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a list of all stock Nexus tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_22.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Digital media players
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is a list of all stock Nexus digital media players:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_23.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Every single device in these tables has its own Android build, specifically
    tailored for its hardware and purpose. The following table is an example of builds
    code names and versions that Google provides for all the expert Android users
    who want to manually replace the operative system and want to retrieve the official
    build by Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_24.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Every build is identified by a `build-code`, for instance, LMY470\. The first
    letter is the initial letter of the code name, for instance, *L*ollipop; the second
    letter identifies the branch used to produce this build; the following two letters
    identify the release date, based on quarters notation—A is Q1 2009, F is Q2 2010,
    and so on. The two numbers following the quarter letter specify the release day.
    The last letter identifies the build number. This notation is not critically precise.
    Google often reuses the same build code for more than one build. We need to consider
    it as a rough estimation of the release date.
  prefs: []
  type: TYPE_NORMAL
- en: Source code tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android is a huge project, with an astonishing amount of source code. Google
    itself manages the source code and stores it on its servers which are publicly
    accessible to the developers and advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Considering the complexity of the project, we will need only two tools to retrieve
    the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a quick overview on these powerful tools that will accompany us during
    our journey.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Git is currently the most popular source code version control system, openly
    available in the world. It's an impressive tool created by Linus Torvalds (yes,
    the same Linus Torvalds who created the Linux kernel contained in Android).
  prefs: []
  type: TYPE_NORMAL
- en: In 2005, Torvalds was struggling to find a proper way to manage the amount of
    code and contributions from the developers who were working on its Linux kernel.
    No tool available at that time was enough and, in a few days, he created the first
    working version of his new distributed revision control system that was able to
    manage a huge project with speed and flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Git provides effective and easy-to-achieve solutions for modular systems and
    Google takes full advantage of this opportunity. Every contribution to the Android
    code base is provided using git features—commits, branches, and patches.
  prefs: []
  type: TYPE_NORMAL
- en: The system is kept as modular as possible to allow developers and OEM to extract
    and replace components that need to be customized. Knowing this, it's easy to
    guess how many git repositories Android contains—dozens of interconnected repositories
    of different sizes and structures.
  prefs: []
  type: TYPE_NORMAL
- en: Repo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To overcome the difficulty of managing a plethora of different repositories,
    Google created `git-repo`, a tool written in Python that acts like a coordinator
    upon git and allows automation of some common parts of the workflow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repo comes in handy in a lot of scenarios. Most of all, all those network operations
    that involve the source code: retrieving, updating, and pushing the code to the
    remote servers. Repo is a pivot tool and we will learn a lot about it in the next
    sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Gerrit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Worth mentioning, Gerrit is the code review tool used to evaluate and approve
    every contribution made to AOSP. It provides a graphical user interface to monitor
    the evolution of the code base and represent the central point where all the contributions
    end before being accepted and merged into the main code base, or rejected if the
    review resolves in a *no, th*
  prefs: []
  type: TYPE_NORMAL
- en: '*anks*.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android build system is officially supported by Ubuntu Linux. Google assures
    that the system setup, the environment setup, and all the requirements are easily
    reproducible on this particular Linux distribution. The truth is, nowadays, every
    Linux distribution can be prepared to perform a proper Android build with little
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: To be closest to the guidelines and because we think that Ubuntu is the easiest
    system to set up for the job, in this book we are going to use Ubuntu Linux 15.04
    to perform all our building procedures.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on OS X or Windows and you prefer to stick to these operating
    systems, we are going to show you how to achieve our goal even using a virtual
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Free space
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The amount of free space on the hard drive needed by the build system is massive.
    The Android source code by itself can reach 100 gigabytes of occupied space. When
    we move to more advanced scenarios, such as building using a caching system, such
    as `ccache`, to speed up multiple system builds, we can easily reach 200 gigabytes
    of occupied space. It's very important to be sure that this kind of free space
    is available on your machine, because filling up the hard disk during the building
    process could bring the system into an unstable state.
  prefs: []
  type: TYPE_NORMAL
- en: Another note is about your connection speed—considering the amount of data needed
    to get ready to build, be sure to have a fast Internet connection, or an appropriate
    amount of patience.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the required tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even if officially the supported Linux distribution is Ubuntu, the following
    procedures and commands are equally correct on every Debian-based distribution,
    if it is actually installed on your computer or is running as a virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to acquire the source code, retrieving it from Google *git repository*,
    we need to install git. Let''s open a Terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Apt will ask for our super user password and will take care of installing git
    in the system. Once we have git, we need its trusted companion tool—repo. Repo
    does not need a real installation. It's a Python script, so we just need to download
    it and place it in a handy folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `bin` folder in our home folder and add it to the system path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a folder, we can download `repo` using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If `curl` is not available in your system, you can install it using `apt-get`
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_25.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous screenshot shows the download and our `chmod` command, to make
    `repo` properly executable. The `repo` tool comes with a collection of help commands
    accessible like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This command lists all the available commands, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_26.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For further help, every command, for instance `info`, has its own help screen
    accessible like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the help screen for the `info` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_27.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we already know, Google is the official manager of the entire hardware infrastructure
    supporting Android—everything is hosted and maintained by Google. The source code
    repository also provides a web UI to graphically navigate the source code. This
    source code browser is available at [https://android.googlesource.com/](https://android.googlesource.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of what the page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_28.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Every single item of the list shown in the previous screenshot is a `git` repository.
    This can give you a perfect idea of the importance of Google's `repo` tool—manually
    managing this many repositories would be pure madness! Using `repo`, retrieving,
    downloading, and creating the proper folder structure is a few-lines' task. Let's
    do it!
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first—create a working folder. Open a Terminal and create a folder
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once in the folder, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The URL specifies the project manifest file. The manifest specifies which repositories
    are necessary for the download and what the folder structure is that must be expected
    to run.
  prefs: []
  type: TYPE_NORMAL
- en: During this phase, `repo` will ask for your full name and e-mail. This sort
    of registration is needed to enable the system to receive your contributions.
    Gerrit will use this information to communicate with you with notifications and
    news. Obviously, your name will be associated to every contribution, fix, or feature
    you will submit in the future. Making sure that the provided e-mail address is
    a valid Google account is a wise choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful initialization ends with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Congrats! We now have an initialized repo in the current folder and a configuration
    folder, named `.repo`, containing, for instance, the downloaded manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Run `ls -la` in your Terminal to spot the `.repo` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, our folder contains the `master` branch of the whole Android project.
    It has to be considered a development branch, so we have no guarantee that the
    system will work on a device or even build on our system. We can use this branch
    to submit some contribution, but this is a task for another step of our journey.
    Our current goal is to try to build a working system, so the smart move is to
    switch to a branch or a TAG that officially supports a specific device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To switch to a specific branch, we will use `repo`, which will take care of
    configuring every single repository involved, to bring us to a stable and guaranteed
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The previously shown table contains every possible branch we could switch to.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the whole list of available branches, we are going to use a trick—cloning
    one specific repository that provides this very information: `manifest.git`. Let''s
    open a Terminal and clone it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the folder we have just created and get the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows part of the huge list of available branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_29.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Everything is in place: folders are ready, `repo` is properly configured, we
    have tons of free hard disk space and a fast Internet connection. Let''s sync!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Make yourself a tasty coffee as this will take some time! The `repo` tool is
    going to download every single file of every single repository specified in the
    manifest file, for more than 50 gigabytes.
  prefs: []
  type: TYPE_NORMAL
- en: Hands on the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Knowing that we will adapt Android to our hardware, it's important to have a
    clear understanding about the workflow to create and submit contributions. To
    achieve this goal, we will use both `repo` and `git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contribution workflow is based on five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a new topic branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We develop all the edits, fixes, and features we want. We add these contributions
    to the next commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We save our staged file to the git repo:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We submit our new commits to the code review server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our code has been submitted and it's waiting to be reviewed—fingers crossed!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t want to download the whole code base and you know already which
    specific module you are going to customize, you can sync just this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When our module has been synced, we need to create a new branch to keep our
    environment organized, with a clear structure and an easy way to compare our edits
    with the original content. To create our new `topic branch`, we need to enter
    the module folder and run a `repo` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is in place, we run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will be a bit comforting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'During our work, we can create as many branches as we need and we can list
    them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the list of all the branches in the current
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_30.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The current branch is the one with the star symbol (asterisk). Now that we
    know which are the available branches, we can switch from branch to branch using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For every fix or feature we add, a new Git commit will land in our branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once all our edits are complete, we need to get ready to submit our contribution
    to the Gerrit system and to the developers in charge of reviewing every code proposal.
  prefs: []
  type: TYPE_NORMAL
- en: Before being able to submit our patches, we need to generate a new password
    to access the source code repository. Google provides a quick service to generate
    a password at the URL [https://android-review.googlesource.com/new-password](https://android-review.googlesource.com/new-password).
  prefs: []
  type: TYPE_NORMAL
- en: Choose your Google account that you want to connect to the Android source code
    repository and you will land at the git cookie configuration page. Google has
    everything already set up for you. Just copy and paste the configuration in one
    of your Terminals and you are ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'To submit our branch, we update the module to be sure it is aligned with `upstream`
    and then we update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we ask for uploading, `repo` will ask for confirmation, showing all the
    contributions we are submitting, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_31.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After the confirmation, `repo` will establish a secure connection with the repository
    server and your contribution will be stored online. You are now an Android developer
    or at least you are getting there!
  prefs: []
  type: TYPE_NORMAL
- en: A look inside AOSP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we have our copy of AOSP so we can start looking inside to see
    what the project consists of.
  prefs: []
  type: TYPE_NORMAL
- en: Before delving inside, we must warn you that, when generating a new build image
    from scratch, you won't find any of the Google applications that you can find
    on most of the Android devices. That is because the Google applications are not
    licensed under Apache 2.0 license, so they are not provided with the public project.
    We are talking about applications such as Play Store, Gmail, YouTube, Maps, and
    all other official Google apps.
  prefs: []
  type: TYPE_NORMAL
- en: These applications are provided only to the compatible devices, that is, the
    devices that pass the `Compatibility Test Suite` we met in the first chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to distribute an Android device with all Google's app on-board is
    no easy trip. After confirming that the device is compatible using CTS, it is
    also necessary to obtain a particular **Google Mobile Services** (**GMS**) license
    by contacting Google directly.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you can find those applications in their binary form on the Internet
    and add it like that to your build. It's not the official way to achieve the goal
    and we support a cleaner conduct to distribute our awesome device, but is worth
    mentioning that there are blurry shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to our source code, let's take a look inside our `WORKING_DIRECTORY`
    and see where we can find the basic Android components that AOSP is composed of.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot shows a clear overview of all the folders contained in
    the root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_32.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The ART directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most important folders is surely `art/`. It contains the source code
    for the new `Runtime Environment`, designed and devolved by Google.
  prefs: []
  type: TYPE_NORMAL
- en: ART is an acronym of Android RunTime and it has been introduced in the Android
    4.4 Kitkat as an alternative to the Dalvik Virtual Machine. It has completely
    replaced Dalvik in Android 5.0 Lollipop. The old Dalvik VM was based on a **Just-In-Time**
    (**JIT**) compiler technology, that is, it interprets and compiles an application
    source code into machine code in real time. This implementation has its advantages,
    but also disadvantages since runtime compilation certainly impacts system performance.
  prefs: []
  type: TYPE_NORMAL
- en: ART is based on an AOT (Ahead-of-time) technology, which compiles all the application
    code at the time of application installation, that is, before the execution. That
    obviously requires more time to install the application, but that time is usually
    imperceptible seeing the hardware performance of the latest Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: The bionic directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bionic is the C-runtime for Android. Unlike most Linux distributions, Android
    doesn't use the GNU C library (`glibc`). The main differences between the GNU
    C library and `bionic` is the license— `glibc` is distributed under the GPL license
    while bionic has the BSD license. A more permissive license is crucial in a world
    so commercially oriented.
  prefs: []
  type: TYPE_NORMAL
- en: Other very important features are the lightness and the size. Bionic is much
    smaller than glibc, which makes it more usable for embedded systems such as cell
    phones. Also, it has been made having in mind low-performance processors, so it
    performs better.
  prefs: []
  type: TYPE_NORMAL
- en: A big part of the bionic source code comes from the OpenBSD project, but there
    are also some parts, such as `pthread` and the dynamic linker, that have been
    written from scratch, to be sure to meet the performance, lightness, and flexibility
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The build directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This directory contains the whole Android build system. It contains all the
    `makefile` core templates.
  prefs: []
  type: TYPE_NORMAL
- en: Besides that, it contains `envsetup.sh`, a script that allows the developer
    to work with Android sources without struggling with environment management. We
    will explain it in more detail later in the book, but in short, launching this
    script gives you various utilities that enable you to perform various operations
    on the source code, for example, compile specific modules or perform searches
    on specific files such as on all `.java` files, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The external directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the packages regarding open source projects used by Android can be found
    in this directory. It contains various libraries as well as very important utilities
    such as `zlib`, `SQLite`, and `webkit`.
  prefs: []
  type: TYPE_NORMAL
- en: The device directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here you can find all the configurations and definitions for specific devices.
    The following screenshot gives an overview of the content. As you can see, it''s
    full of folders with names of well-known manufacturers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/epub_36702041_33.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are all the definitions for the official Google devices, that is for
    all the Nexus devices, but there are also other directories such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`common`: This directory contains certain information about the GPS and a script
    that allows you to extract the binary parts regarding a specific device so that
    they can be included in the image build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generic`: This directory contains the configuration for the generic device
    called "goldfish" and is used to build the emulator image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google`: This directory contains the code for the **Accessory Development
    Kit** (**ADK**). It also contains a DEMOKIT Android app that allows you to control
    the ADK board. ADK is a reference implementation for hardware manufacturers and
    hobbyists that can be used as a starting point for making Android accessories;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample`: This directory contains a complete example of how to write your own
    shared library for Android, without modifying the Android framework. It also shows
    how to write JNI code to be included in the library, and a client application
    that uses such a library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The frameworks directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This folder is very important because it contains the source code for the Android
    framework. It is here that you can find all the main components of Android such
    as Activity, Services, and so on. Here you can also find the mapping used between
    the native code in C/C++ and the code in Java.
  prefs: []
  type: TYPE_NORMAL
- en: The out directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As intuitive as it can sound, when the build is done, the result of the compilations
    is in this directory. Here we will find images that are ready to be flashed on
    our device or emulator, under named subdirectories, such as `out/product/generic/`
    for the emulator image. In one of its subfolders, in the `out/host/linux-x86/`,
    you can also find all the tools that are needed from the host side, such as `fastboot`,
    `zipalign`, `dexdump`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The packages directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the folder name says, here you can find all the standard Android application
    packages, for example, `Camera`, `Calculator`, `Dialer`, `Launcher`, `Settings`,
    and so on. Once again, these are not Google apps such as `YouTube` or `Maps`,
    but just the system apps that are common to every Android installation.
  prefs: []
  type: TYPE_NORMAL
- en: The system directory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `system/` directory contains the source code of the Android `system core`,
    that is a minimal Linux system that takes care of the initialization of the device
    before the ART virtual machine starts any Java-based service.
  prefs: []
  type: TYPE_NORMAL
- en: Inside this folder, you can find the source code for the `init` process and
    the relative `init.rc` default script that initializes and dynamically configures
    the platform, as well as applications such as `Toolbox` (the Android alternative
    to `BusyBox`) and the source codes for the `adb` and `fastboot` utilities that
    we will explain in more detail in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the directory structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the remaining folders that are part of the AOSP:'
  prefs: []
  type: TYPE_NORMAL
- en: '`abi`: This is the source file for `libgabi++`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootable`: This includes the boot and startup related code. Some of it is
    legacy, the fastboot protocol info could be interesting since it is implemented
    by boot loaders in a number of devices such as the Nexus ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cts`: This directory contains the code for the compatibility test suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dalvik`: This directory contains the code for the Dalvik virtual machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`development`: This directory contains development tools—the source code of
    the SDK and the NDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs`: This directory contains the documentation relative to the Android Open
    Source Project. It contains a subfolder called `source.android.com`, which contains
    all the required files to generate the static HTML. You can see the result of
    the build at [http://source.android.com/](http://source.android.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Note`: This directory is the online version that often doesn''t coincide with
    the one present in the AOSP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hardware`: This folder contains HAL (Hardware Abstraction Layer), libraries
    that enable interfacing with the device hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcore`: This directory contains Apache Harmony.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ndk`: This directory contains the script to generate the Native Development
    Kit, that allows the use of the native code written in C/C++ from Android applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdk`: This is the Platform Development Kit, a set of utilities that Google
    sends to various OEMs so that they can update their own frameworks before important
    system updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prebuilts`: This directory contains precompiled files, including various toolchain
    versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdk`: This is the Software Development Kit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tools`: These are some external IDE tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have learned lots of very important things that represent
    the basis of Android.
  prefs: []
  type: TYPE_NORMAL
- en: We started with the Android philosophy regarding the licenses and the development
    model touching on different versions of Android that followed. We have learned
    to install and use the tools necessary to contribute to the AOSP project, and
    also how to download a copy of the AOSP source code, selecting the right TAG to
    get the wanted version of Android.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will make the first build, generating an image for the
    emulator, but first we will explain how the Android build system works and what
    tools we need to install.
  prefs: []
  type: TYPE_NORMAL
