- en: Chapter 2\. Obtaining the Source Code – Structure and Philosophy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章\. 获取源代码 – 结构和哲学
- en: In the previous chapter, we had an overview about the system layer-based architecture
    and we had our first hands-on experience, testing a real-world device using CTS
    tools suite.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们概述了基于系统层的架构，并有了我们的第一次实际操作体验，使用CTS工具套件测试了一个真实世界的设备。
- en: In this chapter, the user will learn about the philosophy behind the Android
    and Google development model. We will show how the source code is organized, which
    are the main branches, and what the workflow is. We will create a step-by-step
    journey to retrieve the **Android Open Source Project** (**AOSP**) source code
    and prepare the environment by installing all the required tools.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，用户将了解Android和谷歌开发模型背后的哲学。我们将展示源代码的组织方式，主要分支是什么，以及工作流程是什么。我们将创建一个逐步的旅程，以检索**Android开源项目**（**AOSP**）的源代码，并通过安装所有必需的工具来准备环境。
- en: The user will learn how to contribute to the Android Open Source Project, how
    to use tools such as `git`, the version-control system, and, `repo`, the repository
    manager.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将学习如何为Android开源项目做出贡献，如何使用诸如`git`、版本控制系统和`repo`、仓库管理器等工具。
- en: To complete the chapter, we will dig into the AOSP folder structure, analyzing
    the most important components that create the most popular mobile operating systems
    of the world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，我们将深入研究AOSP文件夹结构，分析创建世界上最受欢迎的移动操作系统的最重要的组件。
- en: The Android philosophy
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android的哲学
- en: Android is an open source platform created to be compatible with a huge number
    of different devices, from a hardware point of view to a purpose point of view.
    The main goal is to provide a freely available software platform for both large
    enterprise companies and small independent makers or even single developers. Android
    aims to provide an easy way to create innovative solutions and bring them to market
    with no effort.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个开源平台，旨在与大量不同的设备兼容，从硬件角度来看，到用途角度来看。主要目标是提供一个免费可用的软件平台，供大型企业公司和小型独立制造商甚至单个开发者使用。Android旨在提供一个简单的方法来创建创新解决方案，并轻松地将它们推向市场。
- en: Everything started in 2005, when Google acquired Android Inc., a small company
    that was developing an operating system for mobile devices. A couple of years
    later, the Open Handset Alliance was born. In 2007, 84 companies, including mobile
    operators, handset manufacturers, and semiconductor and software companies, publicly
    announced their brand new, upcoming mobile operating system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一切始于2005年，当时谷歌收购了Android Inc.，这是一家小型公司，正在为移动设备开发操作系统。几年后，开放手机联盟诞生了。2007年，包括移动运营商、手机制造商、半导体和软件公司在内的84家公司公开宣布了他们全新的、即将推出的移动操作系统。
- en: 'For one more whole year the project was kept a secret. Google worked hard to
    bring the project to version 1.0 and in 2008 Android was shown to the world. In
    the following seven years, four major versions of the system have been released.
    The following table tells the chronological history of all the Android versions.
    Every single version was released as open source software to the world. Every
    version, but `Honeycomb`, that was an ugly PR slip for Google, which spent a lot
    of energy to bring it down and replace it with `Ice Cream Sandwich` as soon as
    possible:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的整整一年里，该项目一直保密。谷歌努力将项目带到1.0版本，并于2008年将Android展示给了世界。在接下来的七年里，系统发布了四个主要版本。以下表格讲述了所有Android版本的年代顺序历史。每个版本都作为开源软件发布给了世界。每个版本，除了`Honeycomb`，这对谷歌来说是一次丑陋的公关失误，谷歌花费了大量精力来降低其影响，并尽快用`Ice
    Cream Sandwich`来替代它：
- en: '![](img/epub_36702041_18.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_18.jpeg)'
- en: The license
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 许可证
- en: Creating an open source platform brings in a few concerns about which license
    gives the perfect balance between protection and freedom. The goal is to give
    manufacturers enough freedom to adapt the system to their own hardware without
    being scared of dark licenses, trying to steal their intellectual property. To
    reach this goal, Google picked one of the most famous open source licenses available
    at the time and applied it to most parts of the operative system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个开源平台引发了一些关于哪种许可证能在保护和自由之间达到完美平衡的担忧。目标是给制造商足够的自由来调整系统以适应他们自己的硬件，同时不必担心暗箱操作许可证，试图窃取他们的知识产权。为了达到这个目标，谷歌选择了当时最著名的开源许可证之一，并将其应用于操作系统的绝大部分。
- en: The license that Google uses to protect the Android Open Source Project (AOSP)
    is the Apache Software License, Version 2.0, also known as Apache 2.0, and it
    covers almost every line of code published to AOSP. The Apache 2 license doesn't
    apply to one big system component—the kernel. Linux Kernel is protected by GNU
    Public License, V2, and it comes with a *system exception* to be able to be shipped
    with Android.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌用来保护安卓开源项目（AOSP）的许可证是Apache软件许可证，版本2.0，也称为Apache 2.0，它涵盖了发布到AOSP的几乎所有代码行。Apache
    2许可证不适用于一个大型系统组件——内核。Linux内核受GNU公共许可证V2保护，并附带一个*系统例外*，以便能够与Android一起分发。
- en: Being open source and being easily adaptable to popular hardware, it launched
    Android to the top of the mobile market at rocket speed, reaching one billion
    active devices all over the world with over one million apps available on the
    Google Play Store. One billion active devices is the result of a winning strategy—providing
    manufacturers with a software solution for their hardware, easy to integrate and
    customize, coming free of charge and community supported, in a market that was
    dominated by Apple.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开源且易于适应流行硬件，它以火箭般的速度将Android推向了移动市场的顶端，全球拥有超过一亿活跃设备，在Google Play Store上有超过一百万个应用程序可用。一亿活跃设备是获胜策略的结果——为制造商提供易于集成和定制的软件解决方案，免费且社区支持，在一个由苹果主导的市场中。
- en: Open source, closed doors
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开源，闭源
- en: 'A closer look at the project shows how Android is slightly different from other
    open source projects: Android is developed by Google behind closed doors. Lots
    of people in the community don''t agree about considering Android as *open* as
    Linux is. In fact, the two approaches are completely different. Yes, both of them
    have an open source license, but Linux is a community-developed project, Android,
    instead, is completely developed by Google.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察项目，可以看出Android与其他开源项目略有不同：Android是在闭门中由谷歌开发的。社区中很多人不同意将Android视为像Linux那样开放的。事实上，这两种方法完全不同。是的，它们都有开源许可证，但Linux是一个社区开发的项目，而Android则完全由谷歌开发。
- en: Every technical discussion, every decision, every roadmap step is decided by
    Google. When the development life cycle completes, Google releases a new version
    of the operative system, updates the public source code repository and everybody
    is able to download the latest version of the OS.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每次技术讨论、每个决定、每个路线图步骤都是由谷歌做出的。当开发周期完成后，谷歌发布操作系统的最新版本，更新公共源代码仓库，任何人都可以下载操作系统的最新版本。
- en: Of course, there are e-mailing lists for discussion and support and there are
    a few ways to contribute to the project, but everything is decided by the Android
    development team.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有用于讨论和支持的电子邮件列表，也有几种方式可以贡献到项目中，但所有决定都由Android开发团队做出。
- en: The Android development model
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android开发模型
- en: To assure the stability of the Android current release, Google keeps the source
    code in *code lines*. This approach provides a proper mechanism to keep separated
    the current stable version, available on all latest devices, from the currently
    under development, unstable version. As you may easily notice, Google is using
    a different naming convention for Android compared to the usual nomenclature of
    open source projects—`code line` is used instead of `branch`, because a single
    `code line` can be based on multiple git `branches`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Android当前版本的稳定性，谷歌将源代码保持在*代码行*中。这种方法提供了一个适当的机制，将当前稳定版本（可在所有最新设备上使用）与当前正在开发的不稳定版本分开。正如你可能容易注意到的那样，谷歌在Android的命名惯例上与开源项目的通常命名法不同——使用`code
    line`而不是`branch`，因为单个`code line`可以基于多个git `branches`。
- en: 'The following diagram shows how the source code history evolves over time,
    through different branches and releases:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了源代码历史随时间演变的过程，通过不同的分支和版本：
- en: '![](img/epub_36702041_19.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_19.jpeg)'
- en: The previous diagram shows the main `public branch`, Upstream, on the left.
    This branch is the main public development branch where all the critical bug fixes
    are released constantly, and where all the main experimentation with new devices
    and new technology is performed. Every developer or manufacturer can obtain this
    set of source code and start to create their own Android device.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图表显示了左侧的主要`public branch`，即上游分支。这个分支是主要的公共开发分支，其中不断发布所有关键的错误修复，并且在这里进行所有关于新设备和新技术的主要实验。每个开发人员或制造商都可以获取这一套源代码，并开始创建他们自己的Android设备。
- en: On the right side of the diagram, we can see Google's private branch. This branch
    contains the Android `next version`. Generally, all the development is done by
    Google itself, with the support of a hardware partner that provides a reference
    device. Typically, this device is a high-end, top-class device that Google appoints
    as Google's next reference device, also known as Nexus. Every new Nexus has been
    chosen keeping in mind Google Android's development roadmap—every technical hardware
    specification supports or discourages particular software development, to create
    the perfect symbiosis between the device and the operating system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表的右侧，我们可以看到谷歌的私有分支。这个分支包含Android的“下一个版本”。通常，所有开发工作都是由谷歌自己完成的，并得到一个硬件合作伙伴的支持，该合作伙伴提供参考设备。通常，这个设备是一个高端、顶级设备，谷歌将其指定为谷歌的下一个参考设备，也称为Nexus。每个新的Nexus都是根据谷歌Android的发展路线图来选择的——每个技术硬件规范都支持或反对特定的软件开发，以创造设备和操作系统之间的完美共生。
- en: When the internal development reaches the desired stable point, the new version
    is released, every branch is updated accordingly and a new public/private development
    cycle begins, once again.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当内部开发达到期望的稳定点时，新版本就会被发布，每个分支都会相应更新，然后开始新一轮的公开/私有开发周期。
- en: Source code tags and builds
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码标签和构建
- en: To effectively refer to a specific Android version, every public release, since
    Android 1.5, comes with a fancy pop codename, a version number, and a more developer-oriented
    API level.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地引用特定的Android版本，自Android 1.5以来，每个公开版本都附带了一个花哨的代号、一个版本号和一个更面向开发者的API级别。
- en: 'The following table shows how the correspondence between codename/version/API
    level is not always a one-to-one relationship. Most of the time, the code name
    has a longer life cycle than the version number:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了代号/版本/API级别之间的对应关系并不总是一对一的关系。大多数情况下，代号的寿命周期比版本号长：
- en: '![](img/epub_36702041_20.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_20.jpeg)'
- en: Nexus
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Nexus
- en: The Nexus family contains all those Android devices that Google designs, produces,
    and sells, with the help of its hardware manufacture partners.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus系列包含了谷歌设计、生产和销售的Android设备，这得益于其硬件制造商合作伙伴的帮助。
- en: One of the peculiarities of the Nexus family is the bare Android system it equips
    the device—there is no customization of any sort, neither from the manufacturer
    nor from the telephone carrier. The system is based on pure Android source code,
    providing the user with the purest Android experience. As an advanced note, the
    device bootloader can be easily and legally unlocked, to allow every sort of modification
    any expert user could desire. Security-wise, the Nexus devices are the first ones
    that receive security fixes and system updates—stay updated, stay safe!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus系列的一个独特之处在于它为设备配备的裸Android系统——无论是制造商还是电话运营商都没有进行任何定制。系统基于纯Android源代码，为用户提供最纯粹的Android体验。作为一个高级提示，设备的引导加载程序可以轻松且合法地解锁，以允许任何专家用户可能希望进行的修改。在安全性方面，Nexus设备是首先接收安全修复和系统更新的设备——保持更新，保持安全！
- en: The Nexus family is continuously growing in numbers and quality and it now contains
    smartphones, tablets, and even digital players. The upcoming tables show an overview
    on all the currently available models.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Nexus系列在数量和质量上持续增长，现在它包含了智能手机、平板电脑，甚至数字播放器。下表展示了目前所有可用的型号概览。
- en: Phones
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 手机
- en: 'Here is a list of all stock Nexus phones:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是所有标准Nexus手机的列表：
- en: '![](img/epub_36702041_21.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_21.jpeg)'
- en: Tablets
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 平板电脑
- en: 'Here is a list of all stock Nexus tablets:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是所有标准Nexus平板电脑的列表：
- en: '![](img/epub_36702041_22.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_22.jpeg)'
- en: Digital media players
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数字媒体播放器
- en: 'Here is a list of all stock Nexus digital media players:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是所有标准Nexus数字媒体播放器的列表：
- en: '![](img/epub_36702041_23.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_23.jpeg)'
- en: 'Every single device in these tables has its own Android build, specifically
    tailored for its hardware and purpose. The following table is an example of builds
    code names and versions that Google provides for all the expert Android users
    who want to manually replace the operative system and want to retrieve the official
    build by Google:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表中的每一款设备都有其自己的Android构建版本，专门针对其硬件和用途进行定制。下表是谷歌为所有想要手动更换操作系统并希望获取官方构建版本的专家级Android用户提供的构建代号和版本示例：
- en: '![](img/epub_36702041_24.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_24.jpeg)'
- en: Every build is identified by a `build-code`, for instance, LMY470\. The first
    letter is the initial letter of the code name, for instance, *L*ollipop; the second
    letter identifies the branch used to produce this build; the following two letters
    identify the release date, based on quarters notation—A is Q1 2009, F is Q2 2010,
    and so on. The two numbers following the quarter letter specify the release day.
    The last letter identifies the build number. This notation is not critically precise.
    Google often reuses the same build code for more than one build. We need to consider
    it as a rough estimation of the release date.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个构建都有一个`build-code`来标识，例如，LMY470。第一个字母是代码名的首字母，例如，*L*ollipop；第二个字母标识用于生成此构建的分支；接下来的两个字母标识发布日期，基于季度表示法——A是2009年Q1，F是2010年Q2，以此类推。季度字母后面的两个数字指定发布日。最后一个字母标识构建号。这种表示法并不非常精确。谷歌经常为多个构建重复使用相同的构建代码。我们需要将其视为发布日期的粗略估计。
- en: Source code tools
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码工具
- en: Android is a huge project, with an astonishing amount of source code. Google
    itself manages the source code and stores it on its servers which are publicly
    accessible to the developers and advanced users.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Android是一个庞大的项目，拥有惊人的源代码量。谷歌本身管理源代码，并将其存储在其服务器上，这些服务器对开发者和高级用户公开可访问。
- en: 'Considering the complexity of the project, we will need only two tools to retrieve
    the source code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到项目的复杂性，我们只需要两个工具来检索源代码：
- en: git
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: git
- en: repo
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: repo
- en: Let's have a quick overview on these powerful tools that will accompany us during
    our journey.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速了解一下这些强大的工具，它们将伴随我们完成我们的旅程。
- en: Git
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Git
- en: Git is currently the most popular source code version control system, openly
    available in the world. It's an impressive tool created by Linus Torvalds (yes,
    the same Linus Torvalds who created the Linux kernel contained in Android).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Git是目前世界上最受欢迎的源代码版本控制系统，公开可用。它是由林纳斯·托瓦兹（Linus Torvalds）创建的令人印象深刻的工具（是的，就是创建了Android内核中的Linux内核的那个林纳斯·托瓦兹）。
- en: In 2005, Torvalds was struggling to find a proper way to manage the amount of
    code and contributions from the developers who were working on its Linux kernel.
    No tool available at that time was enough and, in a few days, he created the first
    working version of his new distributed revision control system that was able to
    manage a huge project with speed and flexibility.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年，托瓦兹（Torvalds）在努力寻找一种适当的方式来管理为其Linux内核工作的开发者的代码量和贡献。当时可用的任何工具都不够用，在几天内，他创建了其新的分布式版本控制系统的工作版本，该系统能够以速度和灵活性管理大型项目。
- en: Git provides effective and easy-to-achieve solutions for modular systems and
    Google takes full advantage of this opportunity. Every contribution to the Android
    code base is provided using git features—commits, branches, and patches.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Git为模块化系统提供了有效且易于实现的解决方案，谷歌充分利用了这一机会。Android代码库的每个贡献都使用git功能提供——提交、分支和补丁。
- en: The system is kept as modular as possible to allow developers and OEM to extract
    and replace components that need to be customized. Knowing this, it's easy to
    guess how many git repositories Android contains—dozens of interconnected repositories
    of different sizes and structures.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 系统尽可能地保持模块化，以便开发者和原始设备制造商提取和替换需要定制的组件。了解这一点后，很容易猜测Android包含多少个git仓库——数十个不同大小和结构的相互连接的仓库。
- en: Repo
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Repo
- en: To overcome the difficulty of managing a plethora of different repositories,
    Google created `git-repo`, a tool written in Python that acts like a coordinator
    upon git and allows automation of some common parts of the workflow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服管理大量不同仓库的困难，谷歌创建了`git-repo`，这是一个用Python编写的工具，它在git上充当协调器，允许自动化工作流程的一些常见部分。
- en: 'Repo comes in handy in a lot of scenarios. Most of all, all those network operations
    that involve the source code: retrieving, updating, and pushing the code to the
    remote servers. Repo is a pivot tool and we will learn a lot about it in the next
    sections.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Repo在许多场景中都很有用。最重要的是，所有涉及源代码的网络操作：检索、更新和将代码推送到远程服务器。Repo是一个枢纽工具，我们将在下一节中了解到很多关于它的内容。
- en: Gerrit
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gerrit
- en: Worth mentioning, Gerrit is the code review tool used to evaluate and approve
    every contribution made to AOSP. It provides a graphical user interface to monitor
    the evolution of the code base and represent the central point where all the contributions
    end before being accepted and merged into the main code base, or rejected if the
    review resolves in a *no, th*
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Gerrit 是用于评估和批准提交给 AOSP 的每个贡献的代码审查工具。它提供了一个图形用户界面来监控代码库的演变，并代表所有贡献在被接受和合并到主代码库之前结束的中心点，或者在审查结果为
    *no, th* 时被拒绝。
- en: '*anks*.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*谢谢*。'
- en: Setting up the environment
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: The Android build system is officially supported by Ubuntu Linux. Google assures
    that the system setup, the environment setup, and all the requirements are easily
    reproducible on this particular Linux distribution. The truth is, nowadays, every
    Linux distribution can be prepared to perform a proper Android build with little
    effort.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Android 构建系统由 Ubuntu Linux 正式支持。谷歌保证系统设置、环境设置以及所有要求都可以在这个特定的 Linux 发行版上轻松重现。事实上，如今，几乎每个
    Linux 发行版都可以通过少许努力来准备进行适当的 Android 构建。
- en: To be closest to the guidelines and because we think that Ubuntu is the easiest
    system to set up for the job, in this book we are going to use Ubuntu Linux 15.04
    to perform all our building procedures.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尽可能接近指南，并且因为我们认为 Ubuntu 是最容易设置的系统，在这本书中，我们将使用 Ubuntu Linux 15.04 来执行所有构建过程。
- en: If you are working on OS X or Windows and you prefer to stick to these operating
    systems, we are going to show you how to achieve our goal even using a virtual
    machine.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 OS X 或 Windows，并且您希望坚持使用这些操作系统，我们将向您展示即使使用虚拟机也能实现我们的目标。
- en: Free space
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空间充足
- en: The amount of free space on the hard drive needed by the build system is massive.
    The Android source code by itself can reach 100 gigabytes of occupied space. When
    we move to more advanced scenarios, such as building using a caching system, such
    as `ccache`, to speed up multiple system builds, we can easily reach 200 gigabytes
    of occupied space. It's very important to be sure that this kind of free space
    is available on your machine, because filling up the hard disk during the building
    process could bring the system into an unstable state.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 构建系统所需的硬盘空间非常大。Android 源代码本身可以达到 100 GB 的占用空间。当我们转向更高级的场景，例如使用缓存系统（如 `ccache`）来加速多个系统构建时，我们很容易达到
    200 GB 的占用空间。确保您的机器上有这种类型的可用空间非常重要，因为在构建过程中填满硬盘可能会使系统处于不稳定状态。
- en: Another note is about your connection speed—considering the amount of data needed
    to get ready to build, be sure to have a fast Internet connection, or an appropriate
    amount of patience.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的是您的连接速度——考虑到准备构建所需的数据量，请确保您有一个快速的互联网连接，或者适当的耐心。
- en: Installing the required tools
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装所需工具
- en: Even if officially the supported Linux distribution is Ubuntu, the following
    procedures and commands are equally correct on every Debian-based distribution,
    if it is actually installed on your computer or is running as a virtual machine.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 即使官方支持的 Linux 发行版是 Ubuntu，以下步骤和命令在基于 Debian 的每个发行版上都是同样正确的，如果它实际上安装在了您的计算机上，或者作为虚拟机运行。
- en: 'To be able to acquire the source code, retrieving it from Google *git repository*,
    we need to install git. Let''s open a Terminal and run:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取源代码，我们需要从 Google *git 仓库*中检索它，我们需要安装 git。让我们打开终端并运行：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Apt will ask for our super user password and will take care of installing git
    in the system. Once we have git, we need its trusted companion tool—repo. Repo
    does not need a real installation. It's a Python script, so we just need to download
    it and place it in a handy folder.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Apt 将要求我们输入超级用户密码，并将负责在系统中安装 git。一旦我们有了 git，我们还需要它的信任伙伴工具——repo。Repo 不需要真正的安装。它是一个
    Python 脚本，所以我们只需要下载它并将其放置在一个方便的文件夹中。
- en: 'Let''s create a `bin` folder in our home folder and add it to the system path:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在主文件夹中创建一个 `bin` 文件夹并将其添加到系统路径：
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have a folder, we can download `repo` using `curl`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了文件夹，我们可以使用 `curl` 来下载 `repo`：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'If `curl` is not available in your system, you can install it using `apt-get`
    as shown in the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统中没有 `curl`，您可以使用 `apt-get` 安装它，如下命令所示：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the output:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '![](img/epub_36702041_25.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_25.jpeg)'
- en: 'The previous screenshot shows the download and our `chmod` command, to make
    `repo` properly executable. The `repo` tool comes with a collection of help commands
    accessible like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了下载和我们的`chmod`命令，以确保`repo`能够正确执行。`repo`工具附带一系列帮助命令，可以通过这种方式访问：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command lists all the available commands, as shown in the next screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出了所有可用的命令，如下一张截图所示：
- en: '![](img/epub_36702041_26.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_26.jpeg)'
- en: 'For further help, every command, for instance `info`, has its own help screen
    accessible like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于进一步的帮助，每个命令，例如`info`，都有自己的帮助屏幕，可以通过这种方式访问：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the help screen for the `info` command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`info`命令的帮助屏幕：
- en: '![](img/epub_36702041_27.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_27.jpeg)'
- en: Getting ready
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: As we already know, Google is the official manager of the entire hardware infrastructure
    supporting Android—everything is hosted and maintained by Google. The source code
    repository also provides a web UI to graphically navigate the source code. This
    source code browser is available at [https://android.googlesource.com/](https://android.googlesource.com/).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，谷歌是支持整个Android硬件基础设施的官方管理者——一切均由谷歌托管和维护。源代码仓库还提供了一个图形化导航源代码的Web界面。这个源代码浏览器可在[https://android.googlesource.com/](https://android.googlesource.com/)找到。
- en: 'The following screenshot shows an example of what the page looks like:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了页面外观的一个示例：
- en: '![](img/epub_36702041_28.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_28.jpeg)'
- en: Every single item of the list shown in the previous screenshot is a `git` repository.
    This can give you a perfect idea of the importance of Google's `repo` tool—manually
    managing this many repositories would be pure madness! Using `repo`, retrieving,
    downloading, and creating the proper folder structure is a few-lines' task. Let's
    do it!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示的列表中的每一项都是一个`git`仓库。这可以让你充分了解谷歌的`repo`工具的重要性——手动管理这么多仓库将是纯粹的疯狂！使用`repo`，检索、下载和创建适当的文件夹结构只需几行代码。让我们动手吧！
- en: 'First things first—create a working folder. Open a Terminal and create a folder
    like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个工作文件夹。打开终端并创建一个类似这样的文件夹：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once in the folder, run:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入文件夹，运行：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The URL specifies the project manifest file. The manifest specifies which repositories
    are necessary for the download and what the folder structure is that must be expected
    to run.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: URL指定了项目清单文件。清单文件指定了下载所需的哪些仓库以及必须预期的文件夹结构。
- en: During this phase, `repo` will ask for your full name and e-mail. This sort
    of registration is needed to enable the system to receive your contributions.
    Gerrit will use this information to communicate with you with notifications and
    news. Obviously, your name will be associated to every contribution, fix, or feature
    you will submit in the future. Making sure that the provided e-mail address is
    a valid Google account is a wise choice.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，`repo`将要求你提供全名和电子邮件。这种注册是为了使系统能够接收你的贡献。Gerrit将使用这些信息通过通知和新闻与你沟通。显然，你的名字将与你在未来提交的每个贡献、修复或功能相关联。确保提供的电子邮件地址是一个有效的谷歌账户是一个明智的选择。
- en: 'A successful initialization ends with:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 成功初始化将以以下方式结束：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Congrats! We now have an initialized repo in the current folder and a configuration
    folder, named `.repo`, containing, for instance, the downloaded manifest file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在在当前文件夹中有一个初始化的repo和一个名为`.repo`的配置文件夹，其中包含例如下载的清单文件。
- en: Run `ls -la` in your Terminal to spot the `.repo` folder.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的终端中运行`ls -la`以找到`.repo`文件夹。
- en: Currently, our folder contains the `master` branch of the whole Android project.
    It has to be considered a development branch, so we have no guarantee that the
    system will work on a device or even build on our system. We can use this branch
    to submit some contribution, but this is a task for another step of our journey.
    Our current goal is to try to build a working system, so the smart move is to
    switch to a branch or a TAG that officially supports a specific device.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的文件夹包含整个Android项目的`master`分支。它必须被视为一个开发分支，所以我们不能保证系统将在设备上工作或在我们的系统上构建。我们可以使用这个分支提交一些贡献，但这将是我们旅程的另一步。我们当前的目标是尝试构建一个可工作的系统，所以明智的做法是切换到一个或一个支持特定设备的标签。
- en: 'To switch to a specific branch, we will use `repo`, which will take care of
    configuring every single repository involved, to bring us to a stable and guaranteed
    environment:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换到特定的分支，我们将使用`repo`，它会负责配置所有涉及的仓库，带我们到一个稳定且可靠的环境：
- en: '[PRE9]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The previously shown table contains every possible branch we could switch to.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 之前显示的表格包含了我们可以切换到的所有可能的分支。
- en: 'To retrieve the whole list of available branches, we are going to use a trick—cloning
    one specific repository that provides this very information: `manifest.git`. Let''s
    open a Terminal and clone it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检索整个可用的分支列表，我们将使用一个技巧——克隆一个提供这些信息的特定仓库：`manifest.git`。让我们打开一个终端并克隆它：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Enter the folder we have just created and get the list:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 进入我们刚刚创建的文件夹并获取列表：
- en: '[PRE11]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows part of the huge list of available branches:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了可用的分支列表的一部分：
- en: '![](img/epub_36702041_29.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_29.jpeg)'
- en: Downloading the code
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载代码
- en: 'Everything is in place: folders are ready, `repo` is properly configured, we
    have tons of free hard disk space and a fast Internet connection. Let''s sync!'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪：文件夹已准备就绪，`repo` 已正确配置，我们有大量的空闲硬盘空间和快速的互联网连接。让我们同步！
- en: 'Open a Terminal and run:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端并运行：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Make yourself a tasty coffee as this will take some time! The `repo` tool is
    going to download every single file of every single repository specified in the
    manifest file, for more than 50 gigabytes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 喝一杯美味的咖啡吧，因为这需要一些时间！`repo` 工具将下载清单文件中指定的每个仓库的每个文件，超过50GB。
- en: Hands on the code
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 亲自动手编写代码
- en: Knowing that we will adapt Android to our hardware, it's important to have a
    clear understanding about the workflow to create and submit contributions. To
    achieve this goal, we will use both `repo` and `git`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 知道我们将适应我们的硬件，了解创建和提交贡献的工作流程非常重要。为了实现这个目标，我们将使用`repo`和`git`。
- en: 'The contribution workflow is based on five steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 贡献工作流程基于五个步骤：
- en: 'We create a new topic branch:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个新的主题分支：
- en: '[PRE13]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We develop all the edits, fixes, and features we want. We add these contributions
    to the next commit:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们开发所有我们想要的编辑、修复和功能。我们将这些贡献添加到下一个提交中：
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We save our staged file to the git repo:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的暂存文件保存到git仓库中：
- en: '[PRE15]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We submit our new commits to the code review server:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将我们的新提交提交到代码审查服务器：
- en: '[PRE16]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Our code has been submitted and it's waiting to be reviewed—fingers crossed!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提交了代码，正在等待审查—— fingers crossed！
- en: 'If you don''t want to download the whole code base and you know already which
    specific module you are going to customize, you can sync just this module:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想下载整个代码库，并且你知道你将要定制哪个特定的模块，你可以只同步这个模块：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When our module has been synced, we need to create a new branch to keep our
    environment organized, with a clear structure and an easy way to compare our edits
    with the original content. To create our new `topic branch`, we need to enter
    the module folder and run a `repo` command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的模块已经同步后，我们需要创建一个新的分支来保持我们的环境组织有序，具有清晰的架构和方便比较我们的编辑与原始内容的方式。要创建我们的新`主题分支`，我们需要进入模块文件夹并运行一个`repo`命令：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If everything is in place, we run this command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切就绪，我们运行这个命令：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This command will be a bit comforting:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会让人感到一丝安慰：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'During our work, we can create as many branches as we need and we can list
    them as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工作中，我们可以创建我们需要的任何数量的分支，并且我们可以如下列出它们：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows the list of all the branches in the current
    module:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当前模块中所有分支的列表：
- en: '![](img/epub_36702041_30.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_30.jpeg)'
- en: 'The current branch is the one with the star symbol (asterisk). Now that we
    know which are the available branches, we can switch from branch to branch using:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当前分支是带有星号（asterisk）的分支。现在我们知道有哪些可用的分支，我们可以使用以下方式在分支之间切换：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For every fix or feature we add, a new Git commit will land in our branch:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们添加的每个修复或功能，一个新的Git提交将出现在我们的分支上：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Once all our edits are complete, we need to get ready to submit our contribution
    to the Gerrit system and to the developers in charge of reviewing every code proposal.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的所有编辑都完成，我们需要准备好将我们的贡献提交到Gerrit系统以及负责审查每个代码提案的开发者。
- en: Before being able to submit our patches, we need to generate a new password
    to access the source code repository. Google provides a quick service to generate
    a password at the URL [https://android-review.googlesource.com/new-password](https://android-review.googlesource.com/new-password).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在能够提交我们的补丁之前，我们需要生成一个新的密码来访问源代码仓库。Google提供了一个快速服务，可以在URL [https://android-review.googlesource.com/new-password](https://android-review.googlesource.com/new-password)
    上生成密码。
- en: Choose your Google account that you want to connect to the Android source code
    repository and you will land at the git cookie configuration page. Google has
    everything already set up for you. Just copy and paste the configuration in one
    of your Terminals and you are ready to go.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你想要连接到Android源代码仓库的谷歌账户，你将到达git cookie配置页面。谷歌已经为你设置好了一切。只需将配置复制粘贴到你的一个终端中，你就可以开始了。
- en: 'To submit our branch, we update the module to be sure it is aligned with `upstream`
    and then we update:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要提交我们的分支，我们更新模块以确保它与`upstream`保持一致，然后我们更新：
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once we ask for uploading, `repo` will ask for confirmation, showing all the
    contributions we are submitting, as shown in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们请求上传，`repo`将要求确认，显示我们正在提交的所有贡献，如下面的截图所示：
- en: '![](img/epub_36702041_31.jpeg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_31.jpeg)'
- en: After the confirmation, `repo` will establish a secure connection with the repository
    server and your contribution will be stored online. You are now an Android developer
    or at least you are getting there!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 确认后，`repo`将与仓库服务器建立安全连接，并将你的贡献存储在线。你现在是一名Android开发者，或者至少你正在朝着这个方向前进！
- en: A look inside AOSP
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看AOSP内部
- en: At this point, we have our copy of AOSP so we can start looking inside to see
    what the project consists of.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经有了AOSP的副本，因此我们可以开始查看项目由什么组成。
- en: Before delving inside, we must warn you that, when generating a new build image
    from scratch, you won't find any of the Google applications that you can find
    on most of the Android devices. That is because the Google applications are not
    licensed under Apache 2.0 license, so they are not provided with the public project.
    We are talking about applications such as Play Store, Gmail, YouTube, Maps, and
    all other official Google apps.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨之前，我们必须警告你，当你从头开始生成新的构建镜像时，你不会找到大多数Android设备上都能找到的谷歌应用。这是因为谷歌应用不是在Apache
    2.0许可证下授权的，因此它们没有包含在公共项目中。我们谈论的是如Play商店、Gmail、YouTube、地图以及所有其他官方谷歌应用。
- en: These applications are provided only to the compatible devices, that is, the
    devices that pass the `Compatibility Test Suite` we met in the first chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用仅提供给兼容设备，也就是说，那些通过我们在第一章中遇到的`兼容性测试套件`的设备。
- en: Being able to distribute an Android device with all Google's app on-board is
    no easy trip. After confirming that the device is compatible using CTS, it is
    also necessary to obtain a particular **Google Mobile Services** (**GMS**) license
    by contacting Google directly.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 能够分发一个预装所有谷歌应用的Android设备并非易事。在确认设备通过CTS兼容后，还需要通过直接联系谷歌来获得特定的**谷歌移动服务**（**GMS**）许可证。
- en: Obviously, you can find those applications in their binary form on the Internet
    and add it like that to your build. It's not the official way to achieve the goal
    and we support a cleaner conduct to distribute our awesome device, but is worth
    mentioning that there are blurry shortcuts.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，你可以在互联网上找到这些应用的二进制形式，并将其添加到你的构建中。这不是实现目标的官方方式，我们支持更清洁的发布方式来分发我们出色的设备，但值得一提的是，存在一些模糊的快捷方式。
- en: Going back to our source code, let's take a look inside our `WORKING_DIRECTORY`
    and see where we can find the basic Android components that AOSP is composed of.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的源代码，让我们看看我们的`WORKING_DIRECTORY`内部，看看我们可以在哪里找到AOSP由其组成的Android基本组件。
- en: 'The next screenshot shows a clear overview of all the folders contained in
    the root directory:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个截图显示了根目录中包含的所有文件夹的清晰概览：
- en: '![](img/epub_36702041_32.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_32.jpeg)'
- en: The ART directory
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ART目录
- en: One of the most important folders is surely `art/`. It contains the source code
    for the new `Runtime Environment`, designed and devolved by Google.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的文件夹之一无疑是`art/`。它包含由谷歌设计和开发的新的`Runtime Environment`的源代码。
- en: ART is an acronym of Android RunTime and it has been introduced in the Android
    4.4 Kitkat as an alternative to the Dalvik Virtual Machine. It has completely
    replaced Dalvik in Android 5.0 Lollipop. The old Dalvik VM was based on a **Just-In-Time**
    (**JIT**) compiler technology, that is, it interprets and compiles an application
    source code into machine code in real time. This implementation has its advantages,
    but also disadvantages since runtime compilation certainly impacts system performance.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ART是Android RunTime的缩写，它是在Android 4.4 Kitkat中作为Dalvik虚拟机的替代品被引入的。它在Android 5.0
    Lollipop中完全取代了Dalvik。旧的Dalvik VM基于**即时编译**（**JIT**）技术，即它实时解释和编译应用程序源代码为机器代码。这种实现有其优点，但也有缺点，因为运行时编译无疑会影响系统性能。
- en: ART is based on an AOT (Ahead-of-time) technology, which compiles all the application
    code at the time of application installation, that is, before the execution. That
    obviously requires more time to install the application, but that time is usually
    imperceptible seeing the hardware performance of the latest Android devices.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ART基于AOT（即时编译）技术，在应用安装时编译所有应用代码，即在执行之前。这显然需要更多时间来安装应用，但考虑到最新Android设备的硬件性能，这个时间通常是不易察觉的。
- en: The bionic directory
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: bionic目录
- en: Bionic is the C-runtime for Android. Unlike most Linux distributions, Android
    doesn't use the GNU C library (`glibc`). The main differences between the GNU
    C library and `bionic` is the license— `glibc` is distributed under the GPL license
    while bionic has the BSD license. A more permissive license is crucial in a world
    so commercially oriented.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Bionic是Android的C运行时。与大多数Linux发行版不同，Android不使用GNU C库（`glibc`）。GNU C库和`bionic`之间的主要区别是许可证——`glibc`在GPL许可证下分发，而bionic有BSD许可证。在一个如此商业化的世界中，更宽松的许可证至关重要。
- en: Other very important features are the lightness and the size. Bionic is much
    smaller than glibc, which makes it more usable for embedded systems such as cell
    phones. Also, it has been made having in mind low-performance processors, so it
    performs better.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 其他非常重要的特性是轻量级和大小。Bionic比glibc小得多，这使得它更适合用于嵌入式系统，如手机。此外，它还考虑到低性能处理器，因此性能更佳。
- en: A big part of the bionic source code comes from the OpenBSD project, but there
    are also some parts, such as `pthread` and the dynamic linker, that have been
    written from scratch, to be sure to meet the performance, lightness, and flexibility
    requirements.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Bionic源代码的大部分来自OpenBSD项目，但也有部分，如`pthread`和动态链接器，是从头开始编写的，以确保满足性能、轻量级和灵活性的要求。
- en: The build directory
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建目录
- en: This directory contains the whole Android build system. It contains all the
    `makefile` core templates.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此目录包含整个Android构建系统。它包含了所有的`makefile`核心模板。
- en: Besides that, it contains `envsetup.sh`, a script that allows the developer
    to work with Android sources without struggling with environment management. We
    will explain it in more detail later in the book, but in short, launching this
    script gives you various utilities that enable you to perform various operations
    on the source code, for example, compile specific modules or perform searches
    on specific files such as on all `.java` files, and so on.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还包含`envsetup.sh`脚本，允许开发者无需与环境管理问题作斗争即可使用Android源代码。我们将在本书的后续部分详细解释它，但简而言之，运行此脚本会提供各种实用工具，使你能够对源代码执行各种操作，例如编译特定模块或对特定文件进行搜索，例如所有`.java`文件等。
- en: The external directory
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部目录
- en: All the packages regarding open source projects used by Android can be found
    in this directory. It contains various libraries as well as very important utilities
    such as `zlib`, `SQLite`, and `webkit`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Android使用的所有开源项目的包都可以在这个目录中找到。它包含了各种库以及非常重要的实用工具，如`zlib`、`SQLite`和`webkit`。
- en: The device directory
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设备目录
- en: 'Here you can find all the configurations and definitions for specific devices.
    The following screenshot gives an overview of the content. As you can see, it''s
    full of folders with names of well-known manufacturers:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以找到针对特定设备的所有配置和定义。以下截图展示了内容概览。正如你所见，它充满了以知名制造商命名的文件夹：
- en: '![](img/epub_36702041_33.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_33.jpeg)'
- en: 'There are all the definitions for the official Google devices, that is for
    all the Nexus devices, but there are also other directories such as:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包含了所有官方Google设备的定义，即所有Nexus设备，但也有其他目录，例如：
- en: '`common`: This directory contains certain information about the GPS and a script
    that allows you to extract the binary parts regarding a specific device so that
    they can be included in the image build.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：此目录包含有关GPS的信息以及一个脚本，允许你提取特定设备的二进制部分，以便它们可以包含在镜像构建中。'
- en: '`generic`: This directory contains the configuration for the generic device
    called "goldfish" and is used to build the emulator image.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generic`：此目录包含名为“goldfish”的通用设备的配置，并用于构建模拟器镜像。'
- en: '`google`: This directory contains the code for the **Accessory Development
    Kit** (**ADK**). It also contains a DEMOKIT Android app that allows you to control
    the ADK board. ADK is a reference implementation for hardware manufacturers and
    hobbyists that can be used as a starting point for making Android accessories;'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google`: 此目录包含 **配件开发套件**（**ADK**）的代码。它还包含一个 DEMOKIT Android 应用，允许你控制 ADK
    板。ADK 是硬件制造商和爱好者的参考实现，可以作为制作 Android 配件的起点。'
- en: '`sample`: This directory contains a complete example of how to write your own
    shared library for Android, without modifying the Android framework. It also shows
    how to write JNI code to be included in the library, and a client application
    that uses such a library.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample`: 此目录包含如何编写自己的 Android 共享库的完整示例，而不修改 Android 框架。它还展示了如何编写 JNI 代码并将其包含在库中，以及使用此类库的客户端应用程序。'
- en: The frameworks directory
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The frameworks directory
- en: This folder is very important because it contains the source code for the Android
    framework. It is here that you can find all the main components of Android such
    as Activity, Services, and so on. Here you can also find the mapping used between
    the native code in C/C++ and the code in Java.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件夹非常重要，因为它包含 Android 框架的源代码。在这里，你可以找到 Android 的所有主要组件，如 Activity、Services
    等。在这里，你还可以找到在 C/C++ 原生代码和 Java 代码之间使用的映射。
- en: The out directory
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The out directory
- en: As intuitive as it can sound, when the build is done, the result of the compilations
    is in this directory. Here we will find images that are ready to be flashed on
    our device or emulator, under named subdirectories, such as `out/product/generic/`
    for the emulator image. In one of its subfolders, in the `out/host/linux-x86/`,
    you can also find all the tools that are needed from the host side, such as `fastboot`,
    `zipalign`, `dexdump`, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管听起来可能很直观，但当构建完成时，编译的结果就在这个目录中。在这里，我们可以找到准备闪存到我们的设备或模拟器上的图像，例如在名为 `out/product/generic/`
    的子目录下为模拟器图像。在其子文件夹之一 `out/host/linux-x86/` 中，你还可以找到从主机端需要的所有工具，例如 `fastboot`、`zipalign`、`dexdump`
    等等。
- en: The packages directory
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The packages directory
- en: As the folder name says, here you can find all the standard Android application
    packages, for example, `Camera`, `Calculator`, `Dialer`, `Launcher`, `Settings`,
    and so on. Once again, these are not Google apps such as `YouTube` or `Maps`,
    but just the system apps that are common to every Android installation.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如文件夹名称所示，在这里你可以找到所有标准的 Android 应用程序包，例如 `Camera`、`Calculator`、`Dialer`、`Launcher`、`Settings`
    等。再次强调，这些不是像 `YouTube` 或 `Maps` 这样的 Google 应用，而是每个 Android 安装中常见的系统应用。
- en: The system directory
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The system directory
- en: The `system/` directory contains the source code of the Android `system core`,
    that is a minimal Linux system that takes care of the initialization of the device
    before the ART virtual machine starts any Java-based service.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`system/` 目录包含 Android `system core` 的源代码，这是一个在 ART 虚拟机启动任何基于 Java 的服务之前负责设备初始化的最小
    Linux 系统。'
- en: Inside this folder, you can find the source code for the `init` process and
    the relative `init.rc` default script that initializes and dynamically configures
    the platform, as well as applications such as `Toolbox` (the Android alternative
    to `BusyBox`) and the source codes for the `adb` and `fastboot` utilities that
    we will explain in more detail in the coming chapters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，你可以找到 `init` 进程的源代码以及相关的 `init.rc` 默认脚本，该脚本初始化并动态配置平台，以及 `Toolbox`（Android
    的 `BusyBox` 替代品）等应用程序的源代码，以及我们将在接下来的章节中更详细解释的 `adb` 和 `fastboot` 工具的源代码。
- en: The rest of the directory structure
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The rest of the directory structure
- en: 'Here are the remaining folders that are part of the AOSP:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 AOSP 部分剩余的文件夹：
- en: '`abi`: This is the source file for `libgabi++`.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abi`: 这是 `libgabi++` 的源文件。'
- en: '`bootable`: This includes the boot and startup related code. Some of it is
    legacy, the fastboot protocol info could be interesting since it is implemented
    by boot loaders in a number of devices such as the Nexus ones.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootable`: 这包括启动和启动相关的代码。其中一些是遗留的，例如 Nexus 等设备上的引导加载程序实现的 fastboot 协议信息可能很有趣。'
- en: '`cts`: This directory contains the code for the compatibility test suite.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cts`: 此目录包含兼容性测试套件的代码。'
- en: '`dalvik`: This directory contains the code for the Dalvik virtual machine.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dalvik`: 此目录包含 Dalvik 虚拟机的代码。'
- en: '`development`: This directory contains development tools—the source code of
    the SDK and the NDK.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`development`: 此目录包含开发工具——SDK 和 NDK 的源代码。'
- en: '`docs`: This directory contains the documentation relative to the Android Open
    Source Project. It contains a subfolder called `source.android.com`, which contains
    all the required files to generate the static HTML. You can see the result of
    the build at [http://source.android.com/](http://source.android.com/).'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docs`：此目录包含与Android开源项目相关的文档。它包含一个名为`source.android.com`的子文件夹，其中包含生成静态HTML所需的所有文件。您可以在[http://source.android.com/](http://source.android.com/)上查看构建结果。'
- en: '`Note`: This directory is the online version that often doesn''t coincide with
    the one present in the AOSP.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`注意`：此目录是在线版本，通常与AOSP中的版本不一致。'
- en: '`hardware`: This folder contains HAL (Hardware Abstraction Layer), libraries
    that enable interfacing with the device hardware.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hardware`：此文件夹包含HAL（硬件抽象层），这些库使得与设备硬件进行接口交互成为可能。'
- en: '`libcore`: This directory contains Apache Harmony.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`libcore`：此目录包含Apache Harmony。'
- en: '`ndk`: This directory contains the script to generate the Native Development
    Kit, that allows the use of the native code written in C/C++ from Android applications.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndk`：此目录包含生成原生开发工具包的脚本，它允许在Android应用程序中使用用C/C++编写的原生代码。'
- en: '`pdk`: This is the Platform Development Kit, a set of utilities that Google
    sends to various OEMs so that they can update their own frameworks before important
    system updates.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pdk`：这是平台开发工具包，一组Google发送给各种OEM的实用工具，以便他们在重要系统更新之前更新自己的框架。'
- en: '`prebuilts`: This directory contains precompiled files, including various toolchain
    versions.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prebuilts`：此目录包含预编译的文件，包括各种工具链版本。'
- en: '`sdk`: This is the Software Development Kit.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sdk`：这是软件开发工具包。'
- en: '`tools`: These are some external IDE tools.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools`：这些是一些外部IDE工具。'
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned lots of very important things that represent
    the basis of Android.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了代表Android基础的许多非常重要的事情。
- en: We started with the Android philosophy regarding the licenses and the development
    model touching on different versions of Android that followed. We have learned
    to install and use the tools necessary to contribute to the AOSP project, and
    also how to download a copy of the AOSP source code, selecting the right TAG to
    get the wanted version of Android.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Android关于许可证和开发模型的理念开始，涉及到后续的不同版本的Android。我们学习了如何安装和使用必要的工具来为AOSP项目做出贡献，以及如何下载AOSP源代码副本，选择正确的TAG以获取所需的Android版本。
- en: In the next chapter, we will make the first build, generating an image for the
    emulator, but first we will explain how the Android build system works and what
    tools we need to install.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进行第一次构建，为模拟器生成一个镜像，但在此之前，我们将解释Android构建系统的工作原理以及我们需要安装哪些工具。
