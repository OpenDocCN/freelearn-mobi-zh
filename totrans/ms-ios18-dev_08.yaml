- en: <st c="0">8</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">8</st>
- en: <st c="2">Connecting and Fetching Data from the Network</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">从网络连接和获取数据</st>
- en: <st c="47">Finding an app that isn’t connected to a server is extremely difficult.</st>
    <st c="120">Most apps don’t operate alone—they need to authenticate their users,
    fetch information, and allow their users to perform actions that eventually will
    be synced back to</st> <st c="288">the server.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个不与服务器连接的应用程序极其困难。<st c="120">大多数应用程序并非独立运行——它们需要验证用户身份、获取信息，并允许用户执行最终将同步回</st>
    <st c="288">服务器的操作。</st>
- en: <st c="299">Due to this, it is important to understand how networking works—not
    how HTTP works in general, but how iOS apps work with the server efficiently</st>
    <st c="445">and simply.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="299">因此，了解网络的工作方式很重要——不是了解HTTP的一般工作方式，而是了解iOS应用程序如何高效且简单地与服务器交互</st>
    <st c="445">。</st>
- en: <st c="456">In this chapter, we will cover the</st> <st c="492">following topics:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="456">在本章中，我们将涵盖以下主题：</st>
- en: <st c="509">Understanding</st> <st c="524">mobile networking</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="509">理解</st> <st c="524">移动网络</st>
- en: <st c="541">Handling HTTP requests, including</st> <st c="576">their responses</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="541">处理HTTP请求，包括</st> <st c="576">它们的响应</st>
- en: <st c="591">Integrating network calls within</st> <st c="625">app flows</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="591">在应用程序流程中集成网络调用</st>
- en: <st c="634">Exploring how Combine works</st> <st c="663">with networking</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="634">探索Combine如何与网络</st> <st c="663">一起工作</st>
- en: <st c="678">Let’s start understanding how the network fits into our</st> <st
    c="735">app architecture.</st>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="678">让我们开始理解网络如何融入我们的</st> <st c="735">应用程序架构。</st>
- en: <st c="752">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="752">技术要求</st>
- en: <st c="775">For this chapter, you must download Xcode version 15.0 or above
    from Apple’s App Store.</st> <st c="864">Search for Xcode in the App Store and
    select and download the latest version.</st> <st c="942">Launch Xcode and follow
    any additional installation instructions that your system may prompt you with.</st>
    <st c="1045">Once Xcode has fully launched, you’re ready</st> <st c="1089">to
    go.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="775">对于本章，您必须从Apple的App Store下载Xcode版本15.0或更高版本。</st> <st c="864">在App
    Store中搜索Xcode，选择并下载最新版本。</st> <st c="942">启动Xcode，并遵循系统可能提示您进行的任何其他安装说明。</st>
    <st c="1045">一旦Xcode完全启动，您就可以开始了</st> <st c="1089">。</st>
- en: <st c="1095">You’ll need to run the latest version of macOS (Ventura</st> <st
    c="1152">or above).</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1095">您需要运行最新版本的macOS（Ventura</st> <st c="1152">或更高版本）。</st>
- en: <st c="1162">You can also download the sample code from the following GitHub</st>
    <st c="1227">link:</st> [<st c="1233">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1162">您还可以从以下GitHub</st> <st c="1227">链接下载示例代码：</st> [<st c="1233">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208)
- en: <st c="1318">Understanding mobile networking</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1318">理解移动网络</st>
- en: <st c="1350">Working with the network</st> <st c="1375">is a crucial part of
    developing apps for iOS.</st> <st c="1422">Understanding how the network fits
    into our app architecture is essential, but what does it mean?</st> <st c="1520">Watching
    simple tutorials about performing a</st> `<st c="1565">URLSession</st>` <st c="1575">request
    is fine, but real-world apps don’t work</st> <st c="1624">that way.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1350">与网络</st> <st c="1375">一起工作是在开发iOS应用程序的过程中一个至关重要的部分。</st> <st c="1422">理解网络如何融入我们的应用程序架构是至关重要的，但它究竟意味着什么？</st>
    <st c="1520">观看关于执行一个</st> `<st c="1565">URLSession</st>` <st c="1575">请求的简单教程是可以的，但现实世界中的应用程序并不这样工作。</st>
    <st c="1624">不是这样。</st>
- en: <st c="1633">Before we dive any deeper, let’s recap what a basic app architecture</st>
    <st c="1703">looks like:</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1633">在我们深入之前，让我们回顾一下基本的应用程序架构</st> <st c="1703">看起来是什么样子：</st>
- en: '**<st c="1714">UI layer</st>**<st c="1723">: This is responsible for presenting</st>
    <st c="1760">UI to the user, including responding to user inputs.</st> <st c="1814">The
    UI layer consists of the SwiftUI/UIKit views and</st> <st c="1867">view models.</st>'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="1714">UI层</st>**<st c="1723">：这是负责向用户展示</st> <st c="1760">UI，包括响应用户输入。</st>
    <st c="1814">UI层包括SwiftUI/UIKit视图和</st> <st c="1867">视图模型。</st>'
- en: '**<st c="1879">Business logic</st>**<st c="1894">: This is responsible for
    manipulating data</st> <st c="1938">while managing the basic</st> <st c="1964">application
    logic.</st>'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="1879">业务逻辑</st>**<st c="1894">：这是负责在管理基本</st> <st c="1938">应用程序逻辑的同时操作数据</st>
    <st c="1964">。</st>'
- en: '**<st c="1982">Data layer</st>**<st c="1993">: This is responsible for storing</st>
    <st c="2027">and retrieving data entities related to the</st> <st c="2072">business
    logic.</st>'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="1982">数据层</st>**：这是负责存储和检索与业务逻辑相关的数据实体的。'
- en: <st c="2087">I guess I’m not surprising you here with this three-layer architecture,
    as most mobile apps work in a</st> <st c="2190">similar architecture.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜这个三层架构不会让你感到惊讶，因为大多数移动应用都采用类似的架构。
- en: <st c="2211">When we begin to understand where the network job fits, we will
    have to look at the data layer and, in some specific cases, the business logic
    layer (for example, when working with analytics or third-party libraries).</st>
    <st c="2430">However, why do we need to look at the layers?</st> <st c="2477">To
    understand why our network activity is relevant for the data layer, let’s go over
    our main</st> <st c="2571">network goals:</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始理解网络任务的位置时，我们将不得不查看数据层，在某些特定情况下，业务逻辑层（例如，当与分析或第三方库一起工作时）也需要查看。然而，为什么我们需要查看这些层呢？为了理解为什么我们的网络活动与数据层相关，让我们回顾我们的主要网络目标：
- en: '**<st c="2585">Syncing information</st>** <st c="2605">to and from</st> <st
    c="2618">our backend</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="2585">同步信息</st>** <st c="2605">到和从</st> <st c="2618">我们的后端</st>'
- en: <st c="2629">Handling</st> **<st c="2639">authentication</st>**
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理**<st c="2639">认证</st>**
- en: <st c="2653">Logical activity that requires</st> <st c="2685">a server</st>
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要服务器的逻辑活动
- en: <st c="2693">In most apps, networking is needed to sync data with our backend.</st>
    <st c="2760">The data layer functions as the primary repository of truth for entities.</st>
    <st c="2834">Attempting to access entities directly from the network in other
    layers will undermine</st> <st c="2921">this principle.</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数应用中，网络是同步数据与后端所必需的。数据层作为实体真实信息的首要存储库运行。尝试从其他层直接从网络访问实体将破坏这一原则。
- en: '*<st c="2936">Figure 8</st>**<st c="2945">.1</st>* <st c="2947">shows a basic
    app architecture and the</st> <st c="2987">network location:</st>'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="2936">图 8</st>**<st c="2945">.1</st>* 显示了一个基本的应用架构和网络位置：'
- en: '![Figure 8.1: Basic app architecture](img/B21795_08_1.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1：基本应用架构](img/B21795_08_1.jpg)'
- en: '<st c="3053">Figure 8.1: Basic app architecture</st>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1：基本应用架构
- en: <st c="3087">In</st> *<st c="3091">Figure 8</st>**<st c="3099">.1</st>*<st c="3101">,
    we can see that the network</st> <st c="3130">is one of the components that build
    up the data layer.</st> <st c="3186">The basic idea of most apps is for the network
    to become a data source and fill the app’s</st> <st c="3276">data store.</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *<st c="3091">图 8</st>**<st c="3099">.1</st>*<st c="3101"> 中，我们可以看到网络是构建数据层的一个组件。大多数应用的基本思想是网络成为数据源，并填充应用的数据存储。
- en: <st c="3287">For example, in a music app, the network layer might reach out
    to the backend, fetch albums and songs, and store</st> <st c="3400">them in local
    storage such as</st> **<st c="3431">Core Data</st>**<st c="3440">. The network
    layer is also built upon different components to</st> <st c="3503">function correctly.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个音乐应用中，网络层可能会连接到后端，获取专辑和歌曲，并将它们存储在本地存储中，例如**<st c="3431">Core Data</st>**。网络层也是建立在不同的组件之上以正确运行的。
- en: <st c="3522">We can think of network operations as a factory production line.</st>
    <st c="3588">We request a piece of information and take care of the returned data
    package, transferring it through several stages until we properly store it in
    our local store or</st> <st c="3754">present it.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将网络操作想象成一个工厂生产线。我们请求一条信息，并处理返回的数据包，将其通过几个阶段传输，直到我们将其正确地存储在我们的本地存储中或展示出来。
- en: <st c="3765">Before we review the stages a data package can undergo, let’s try
    to build a network request together.</st> <st c="3869">We’ll start by reviewing
    the basic HTTP</st> <st c="3909">request methods.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们回顾数据包可能经历的各个阶段之前，让我们尝试一起构建一个网络请求。我们将从回顾基本的 HTTP 请求方法开始。
- en: <st c="3925">Handling an HTTP request</st>
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 HTTP 请求
- en: <st c="3950">An HTTP request is a message</st> <st c="3979">the client sends
    to a server to request information and perform an action.</st> <st c="4055">The
    server processes that request and returns a response to the client.</st> <st c="4127">Clients
    indeed perform HTTP requests asynchronously to leave the main thread free.</st>
    <st c="4210">However, the connection between the client and server is</st> **<st
    c="4267">synchronous</st>** <st c="4278">as the client waits for the server’s
    response to complete the</st> <st c="4341">request operation.</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3950">HTTP请求是客户端发送到服务器以请求信息和执行操作的</st> <st c="3979">消息。</st> <st c="4055">服务器处理该请求并向客户端返回响应。</st>
    <st c="4127">客户端确实会异步执行HTTP请求以释放主线程。</st> <st c="4210">然而，客户端与服务器之间的连接是</st> **<st
    c="4267">同步</st>** <st c="4278">的，因为客户端等待服务器的响应以完成</st> <st c="4341">请求操作。</st>
- en: <st c="4359">The primary HTTP request component is the request method, which
    indicates the request’s main goal.</st> <st c="4459">Let’s go over some of the
    basic HTTP</st> <st c="4496">methods now.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4359">HTTP请求的主要组件是请求方法，它指示请求的主要目标。</st> <st c="4459">现在让我们来了解一下一些基本的HTTP</st>
    <st c="4496">方法。</st>
- en: <st c="4508">Basic HTTP request methods</st>
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4508">基本的HTTP请求方法</st>
- en: <st c="4535">The REST API is based</st> <st c="4557">on the idea of a request-response
    style, and it’s a one-directional communication with our backend.</st> <st c="4658">The
    REST API has eight methods to use when communicating with the backend.</st> <st
    c="4733">However, in most cases, we will use the following</st> <st c="4783">four
    methods:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4535">REST API基于请求-响应风格的理念，并且是与后端单向通信。</st> <st c="4557">REST API在与后端通信时共有八种方法可供使用。</st>
    <st c="4658">然而，在大多数情况下，我们将使用以下</st> <st c="4783">四种方法：</st>
- en: '`<st c="4796">GET</st>`<st c="4800">: This is used to retrieve information</st>
    <st c="4839">only from the server.</st> <st c="4862">It should be a safe call,
    meaning that performing a</st> `<st c="4914">GET</st>` <st c="4917">request shouldn’t
    affect the</st> <st c="4947">backend data.</st>'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4796">GET</st>`<st c="4800">：这用于仅从服务器检索信息。</st> <st c="4839">它应该是一个安全的调用，这意味着执行一个</st>
    `<st c="4914">GET</st>` <st c="4917">请求不应该影响</st> <st c="4947">后端数据。</st>'
- en: '`<st c="4960">POST</st>`<st c="4965">: The</st> `<st c="4972">POST</st>` <st
    c="4976">method is often used to submit</st> <st c="5007">data to the backend.</st>
    <st c="5029">In many cases, the</st> `<st c="5048">POST</st>` <st c="5052">method
    performs changes in the backend data store or changes a</st> <st c="5116">user
    state.</st>'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4960">POST</st>`<st c="4965">：通常使用</st> `<st c="4972">POST</st>` <st
    c="4976">方法向后端提交</st> <st c="5007">数据。</st> <st c="5029">在许多情况下，</st> `<st c="5048">POST</st>`
    <st c="5052">方法在后台数据存储中执行更改或更改</st> <st c="5116">用户状态。</st>'
- en: '`<st c="5127">PUT</st>`<st c="5131">: We use</st> `<st c="5141">PUT</st>` <st
    c="5144">to create or update</st> <st c="5164">objects.</st> <st c="5174">Unlike
    the</st> `<st c="5185">POST</st>` <st c="5189">method,</st> `<st c="5198">PUT</st>`
    <st c="5201">is considered idempotent.</st> <st c="5228">We can send multiple
    identical</st> `<st c="5259">PUT</st>` <st c="5262">requests and expect the same
    effect as sending</st> <st c="5310">one request.</st>'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5127">PUT</st>`<st c="5131">：我们使用</st> `<st c="5141">PUT</st>` <st
    c="5144">来创建或更新</st> <st c="5164">对象。</st> <st c="5174">与</st> `<st c="5185">POST</st>`
    <st c="5189">方法不同，</st> `<st c="5198">PUT</st>` <st c="5201">被认为是幂等的。</st> <st
    c="5228">我们可以发送多个相同的</st> `<st c="5259">PUT</st>` <st c="5262">请求，并期望与发送一个请求相同的效果。</st>'
- en: '`<st c="5322">DELETE</st>`<st c="5329">: As the name states, we use</st> `<st
    c="5359">DELETE</st>` <st c="5365">to delete</st> <st c="5375">objects.</st> <st
    c="5385">Obviously, we can use</st> `<st c="5407">POST</st>` <st c="5411">to do
    that, but with</st> `<st c="5433">DELETE</st>`<st c="5439">, we are aligned with</st>
    <st c="5461">the standards.</st>'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5322">DELETE</st>`<st c="5329">：正如其名所示，我们使用</st> `<st c="5359">DELETE</st>`
    <st c="5365">来删除</st> <st c="5375">对象。</st> <st c="5385">显然，我们可以使用</st> `<st c="5407">POST</st>`
    <st c="5411">来做这件事，但使用</st> `<st c="5433">DELETE</st>`<st c="5439">，我们与</st> <st
    c="5461">标准保持一致。</st>'
- en: <st c="5475">It is worth mentioning that, technically, we can even use</st>
    `<st c="5534">GET</st>` <st c="5537">to make changes to the server.</st> <st c="5569">However,
    the proper method ensures predictability and reliability and is aligned with the</st>
    <st c="5659">REST principles.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，技术上我们甚至可以使用<st c="5475">以下内容</st> `<st c="5534">GET</st>` <st c="5537">来更改服务器。</st>
    <st c="5569">然而，正确的方法确保了可预测性和可靠性，并且与</st> <st c="5659">REST原则</st>相一致。
- en: <st c="5675">To perform a basic HTTP request, we should first be familiar with
    the</st> `<st c="5746">URLSession</st>` <st c="5756">class.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5675">要执行基本的HTTP请求，我们首先应该熟悉</st> `<st c="5746">URLSession</st>` <st c="5756">类。</st>
- en: <st c="5763">Working with URLSession</st>
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5763">使用URLSession</st>
- en: <st c="5787">We can use a class</st> <st c="5806">called</st> `<st c="5814">URLSession</st>`
    <st c="5824">to perform and manage</st> <st c="5846">network requests.</st> `<st
    c="5865">URLSession</st>` <st c="5875">is part</st> <st c="5883">of what Apple
    calls the</st> **<st c="5908">URL Loading System</st>**<st c="5926">, which in
    turn</st> <st c="5941">is part of the</st> **<st c="5957">Foundation</st>** <st
    c="5967">framework.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5787">我们可以使用一个名为</st> <st c="5806">的类</st> `<st c="5814">URLSession</st>`
    <st c="5824">来执行和管理</st> <st c="5846">网络请求。</st> `<st c="5865">URLSession</st>`
    <st c="5875">是苹果所说的</st> **<st c="5908">URL 加载系统</st>**<st c="5926">的一部分，而</st>
    <st c="5941">URL 加载系统</st> <st c="5926">又是</st> **<st c="5957">Foundation</st>**
    <st c="5967">框架的一部分。</st>
- en: <st c="5978">The</st> `<st c="5983">URLSession</st>` <st c="5993">class is responsible
    for coordinating different URL requests in our app.</st> <st c="6067">Let’s see
    how to perform a basic</st> `<st c="6100">GET</st>` <st c="6103">response</st>
    <st c="6113">using</st> `<st c="6119">URLSession</st>`<st c="6129">:</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5978">`<st c="5983">URLSession</st>` <st c="5993">类负责协调我们应用中的不同URL请求。</st>
    <st c="6067">让我们看看如何使用</st> `<st c="6100">URLSession</st>` <st c="6113">执行基本的</st>
    `<st c="6103">GET</st>` <st c="6103">响应：</st>
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="6433">This code example creates an object called</st> `<st c="6477">URLRequest</st>`
    <st c="6487">based on a particular URL.</st> <st c="6515">The</st> `<st c="6519">URLRequest</st>`
    <st c="6529">class encapsulates the information we need to perform a specific
    URL request.</st> <st c="6608">It usually consists of the</st> <st c="6635">following
    information:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6433">此代码示例创建了一个名为</st> `<st c="6477">URLRequest</st>` <st c="6487">的对象，基于特定的URL。</st>
    <st c="6515">`<st c="6519">URLRequest</st>` <st c="6529">类封装了执行特定URL请求所需的信息。</st>
    <st c="6608">它通常由以下信息组成：</st>
- en: <st c="6657">The request</st> <st c="6670">base URL</st>
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6657">请求</st> <st c="6670">基本URL</st>
- en: <st c="6678">The request method –</st> `<st c="6700">GET</st>`<st c="6703">,</st>
    `<st c="6705">POST</st>`<st c="6709">,</st> `<st c="6711">PUT</st>`<st c="6714">,</st>
    <st c="6716">or</st> `<st c="6719">DELETE</st>`
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6678">请求方法 –</st> `<st c="6700">GET</st>`<st c="6703">,</st> `<st c="6705">POST</st>`<st
    c="6709">,</st> `<st c="6711">PUT</st>`<st c="6714">,</st> <st c="6716">或</st>
    `<st c="6719">DELETE</st>`
- en: <st c="6725">The request</st> <st c="6738">HTTP headers</st>
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6725">请求</st> <st c="6738">HTTP头</st>
- en: <st c="6750">Notice that the</st> `<st c="6767">URLRequest</st>` <st c="6777">structure</st>
    <st c="6787">doesn’t perform the actual HTTP request</st> <st c="6827">or contain
    its response information.</st> <st c="6865">The</st> `<st c="6869">URLSession</st>`
    <st c="6879">class is responsible for conducting and managing the different</st>
    <st c="6943">HTTP requests.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6750">请注意，</st> `<st c="6767">URLRequest</st>` <st c="6777">结构</st> <st
    c="6787">不执行实际的HTTP请求</st> <st c="6827">或包含其响应信息。</st> <st c="6865">`<st c="6869">URLSession</st>`
    <st c="6879">类负责执行和管理不同的</st> <st c="6943">HTTP请求。</st>
- en: <st c="6957">There are two ways</st> <st c="6976">to initialize a</st> `<st
    c="6993">URLSession</st>` <st c="7003">instance:</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6957">初始化一个</st> `<st c="6993">URLSession</st>` <st c="7003">实例</st>
    <st c="6976">有两种方式：</st>
- en: <st c="7013">We can call the static</st> `<st c="7037">shared</st>` <st c="7043">property</st>
    <st c="7052">and use it as a</st> **<st c="7069">singleton</st>**<st c="7078">.
    We do that if we want to simplify our implementation without needing to customize
    how we handle requests or have different requirements for different areas in</st>
    <st c="7239">the app:</st>
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7013">我们可以调用静态的</st> `<st c="7037">shared</st>` <st c="7043">属性</st>
    <st c="7052">并将其用作一个</st> **<st c="7069">单例</st>**<st c="7078">。如果我们想简化我们的实现，而不需要自定义处理请求的方式，或者在不同区域有不同的要求，我们就这样做：</st>
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="7279">If we need more flexibility, we can create an instance of</st>
    `<st c="7338">URLSession</st>` <st c="7348">(like in the last code example) and
    initialize it with our</st> <st c="7408">own configuration.</st>
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7279">如果我们需要更多的灵活性，我们可以创建一个</st> `<st c="7338">URLSession</st>` <st c="7348">实例</st>
    <st c="7408">（就像上一个代码示例中那样）并用我们自己的配置初始化它。</st>
- en: <st c="7426">A configuration object allows us to fine-tune our requests better.</st>
    <st c="7494">For example, we can define each request as containing additional
    headers, setting the timeout and caching, or even cookie</st> <st c="7616">acceptance
    policies.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7636">Here’s a code example for setting up a</st> `<st c="7676">URLSession</st>`
    <st c="7686">class with a specific timeout duration and</st> <st c="7730">no caching:</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'let task = session.dataTask(with: request) { (data,'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: response, error)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: if let error = error as? URLError {
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: switch error.code {
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .cannotFindHost:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// notify the user. default:'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error: \(error)")'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: if let httpResponse = response as? HTTPURLResponse {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: switch httpResponse.statusCode {
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 200..<300:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Success:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 400..<500:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Client Error:'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 500..<600:'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Server Error:'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Other Status Code:'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Invalid HTTP Response")
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'func handleResponse(data: Data?, response: URLResponse?, error: Error?) throws
    {'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: if let error = error {
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw error
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guard let httpResponse = response as? HTTPURLResponse
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else {
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.invalidResponse
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: switch httpResponse.statusCode {
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 200..<300:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if let responseData = data {
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if let errorData = try? JSONDecoder().decode(ErrorResponse.self,
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'from: responseData) {'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.dataError
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 400..<500:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'throw NetworkingError.clientError(statusCode:'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: httpResponse.statusCode)
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 500..<600:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'throw NetworkingError.serverError(statusCode:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: httpResponse.statusCode)
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.otherError
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'let task = session.dataTask(with: request) { (data,'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: response, error) in
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: do {
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try handleResponse(data: data, response: response,'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'error: error)'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} catch let error {'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error: \(error)")'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '{'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "John Doe",'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '"email": "john@example.com"'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'struct Contact: Codable {'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'let id: Int'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let fullName: String'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let userEmail: String'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Define custom coding keys to match JSON keys
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'private enum CodingKeys: String, CodingKey {'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: case id
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: case fullName = "name"
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: case userEmail = "email"
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: let errorData = try? JSONDecoder().decode(Contact.self,
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'from: responseData)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'struct ServerResponse: Codable {'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'let responseID: String'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let timestamp: String'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let orgID: String'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let contact: Contact'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: let jsonString = """
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '"responseID": "12345",'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '"timestamp": "2024-03-25T12:00:00Z",'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '"orgID": "5678",'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '"contact": {'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"fullName": "John Doe",'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"userEmail": "john@example.com"'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'let jsonData = jsonString.data(using: .utf8)! let response = try'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'JSONDecoder().decode(ServerResponse.self, from: jsonData)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: class DataStore {
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'private var contacts: [Contact] = []'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func updateContacts(with newContacts: [Contact]) {'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: contacts = newContacts
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func getAllContacts() -> [Contact] {
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return contacts
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: class SyncManager {
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'private let dataStore: DataStore'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'init(dataStore: DataStore) {'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.dataStore = dataStore
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func syncData() {
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NetworkHandler.fetchData { result in
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NetworkHandler.fetchData { result in
- en: switch result {
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: switch result {
- en: 'case .success(let data):'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'case .success(let data):'
- en: do {
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: do {
- en: 'let contacts = try JSONDecoder().decode([Contact].self, from: data)'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let contacts = try JSONDecoder().decode([Contact].self, from: data)'
- en: 'self.dataStore.updateContacts(with: contacts)'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.dataStore.updateContacts(with: contacts)'
- en: print("Data synced successfully")
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("数据同步成功")
- en: '} catch {'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} catch {'
- en: print("Error decoding data:", error)
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("JSON解码数据错误:", error)
- en: '}'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'case .failure(let error):'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'case .failure(let error):'
- en: print("Error fetching data:", error)
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("获取数据错误:", error)
- en: '}'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: import SwiftUI
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: import SwiftUI
- en: 'struct ContactsView: View {'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ContactsView: View {'
- en: '@State private var contacts: [Contact] = []'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@State private var contacts: [Contact] = []'
- en: '@State private var isLoading = false'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@State private var isLoading = false'
- en: 'var body: some View {'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: NavigationView {
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NavigationView {
- en: List(contacts) { contact in
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: List(contacts) { contact in
- en: 'VStack(alignment: .leading) {'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'VStack(alignment: .leading) {'
- en: Text(contact.name).font(.headline)
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Text(contact.name).font(.headline)
- en: Text(contact.phoneNumber).font(.subheadline)
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Text(contact.phoneNumber).font(.subheadline)
- en: '}'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .navigationTitle("Contacts")
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .navigationTitle("联系人")
- en: .onAppear {
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .onAppear {
- en: fetchContacts()
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: fetchContacts()
- en: '}'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .overlay {
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .overlay {
- en: if isLoading {
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: if isLoading {
- en: ProgressView("Loading...")
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ProgressView("加载中...")
- en: '}'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: private func fetchContacts() {
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private func fetchContacts() {
- en: isLoading = true
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: isLoading = true
- en: NetworkHandler().fetchData { fetchedContacts in
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NetworkHandler().fetchData { fetchedContacts in
- en: contacts = fetchedContacts
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: contacts = fetchedContacts
- en: isLoading = false
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: isLoading = false
- en: '}'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE14]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: import SwiftUI
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: import SwiftUI
- en: 'struct ContactsView: View {'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'struct ContactsView: View {'
- en: '@State private var contacts: [Contact] = []'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@State private var contacts: [Contact] = []'
- en: 'var body: some View {'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var body: some View {'
- en: NavigationView {
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NavigationView {
- en: List(contacts) { contact in
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: List(contacts) { contact in
- en: 'VStack(alignment: .leading) {'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'VStack(alignment: .leading) {'
- en: Text(contact.name).font(.headline)
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Text(contact.name).font(.headline)
- en: Text(contact.phoneNumber).font(.subheadline)
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Text(contact.phoneNumber).font(.subheadline)
- en: '}'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: .navigationTitle("Contacts")
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .navigationTitle("联系人")
- en: .onAppear {
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .onAppear {
- en: loadContacts()
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: loadContacts()
- en: '}'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: private func loadContacts() {
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: private func loadContacts() {
- en: contacts = loadFromCache()
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: contacts = loadFromCache()
- en: NetworkHandler().fetchData { fetchedContacts in
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: NetworkHandler().fetchData { fetchedContacts in
- en: contacts = fetchedContacts
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: contacts = fetchedContacts
- en: 'saveToCache(contacts: fetchedContacts)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'saveToCache(contacts: fetchedContacts)'
- en: '}'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE15]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: class IncrementalLoader {
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: class IncrementalLoader {
- en: var currentPage = 1
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var currentPage = 1
- en: let itemsPerPage = 10
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let itemsPerPage = 10
- en: var contacts = [Contact]()
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: var contacts = [Contact]()
- en: func loadNextPage() {
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func loadNextPage() {
- en: 'guard let url = URL(string:'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'guard let url = URL(string:'
- en: '"https://api.example.com/contacts?page=\(currentPage)&limit=\(itemsPerPage)")
    else {'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '"https://api.example.com/contacts?page=\(currentPage)&limit=\(itemsPerPage)")
    else {'
- en: print("Invalid URL")
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("无效的URL")
- en: return
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return
- en: '}'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: 'let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response,
    error) in'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response,
    error) in'
- en: guard let self = self else { return }
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: guard let self = self else { return }
- en: do {
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: do {
- en: 'let newContacts = try JSONDecoder().decode([Contact].self, from: data)'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let newContacts = try JSONDecoder().decode([Contact].self, from: data)'
- en: DispatchQueue.main.async {
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: DispatchQueue.main.async {
- en: 'self.contacts.append(contentsOf: newContacts)'
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.contacts.append(contentsOf: newContacts)'
- en: 'print("Fetched Contacts: \(newContacts)")'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print("获取联系人: \(newContacts)")'
- en: self.currentPage += 1
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.currentPage += 1
- en: '}'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '} catch {'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '} catch {'
- en: 'print("Error decoding JSON: \(error)")'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print("JSON解码错误: \(error)")'
- en: '}'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: task.resume()
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: task.resume()
- en: '}'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE16]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: class ContactsSyncManager {
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: class ContactsSyncManager {
- en: let userDefaults = UserDefaults.standard
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let userDefaults = UserDefaults.standard
- en: let lastUpdatedKey = "lastUpdatedTime"
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let lastUpdatedKey = "lastUpdatedTime"
- en: 'let syncEndpoint = URL(string:'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let syncEndpoint = URL(string:'
- en: '"https://example.com/api/sync/contacts")! func syncContacts() {'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"https://example.com/api/sync/contacts")! func syncContacts() {'
- en: 'var request = URLRequest(url: syncEndpoint)'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'var request = URLRequest(url: syncEndpoint)'
- en: request.httpMethod = "POST"
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: request.httpMethod = "POST"
- en: request.addValue("application/json",
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: request.addValue("application/json",
- en: 'forHTTPHeaderField: "Content-Type")'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'forHTTPHeaderField: "Content-Type")'
- en: 'let lastUpdatedTime = userDefaults.double(forKey:'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let lastUpdatedTime = userDefaults.double(forKey:'
- en: lastUpdatedKey)
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: lastUpdatedKey)
- en: 'let requestBody = ["lastUpdatedTime":'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'let requestBody = ["lastUpdatedTime":'
- en: lastUpdatedTime]
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: lastUpdatedTime]
- en: 'request.httpBody = try? JSONSerialization.data(withJSONObject:'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'request.httpBody = try? JSONSerialization.data(withJSONObject:'
- en: requestBody)
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: requestBody)
- en: 'URLSession.shared.dataTask(with: request) { [weak'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URLSession.shared.dataTask(with: request) { [weak'
- en: self] data, response, error in
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self] data, response, error in
- en: 'self?.processDeltaUpdates(response: response)'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self?.processDeltaUpdates(response: response)'
- en: '}.resume()'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}.resume()'
- en: '}'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'private func processDeltaUpdates(response:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 'private func processDeltaUpdates(response:'
- en: ContactsDeltaUpdateResponse) {
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ContactsDeltaUpdateResponse) {
- en: // Here you can handle the new, deleted, and updated contacts as needed
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: // 这里可以根据需要处理新增、删除和更新的联系人
- en: 'print("New Contacts:'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'print("新联系人:'
- en: \(response.newContacts.count)")
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: \(response.newContacts.count)")
- en: 'print("Deleted Contacts:'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(response.deletedContacts.count)")
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Updated Contacts:'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(response.updatedContacts.count)")
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'userDefaults.set(response.lastUpdated, forKey:'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastUpdatedKey)
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: class ContactRequest {
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: func fetchData() -> AnyPublisher<[Contact], Error> {
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let url = URL(string:'
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"https://api.example.com/contacts")! return URLSession.shared.dataTaskPublisher(for:'
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: url)
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map { $0.data }
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.decode(type: [Contact].self, decoder:'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: JSONDecoder())
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .eraseToAnyPublisher()
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: class DataStore {
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '@Published var contacts: [Contact] = []'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: class ContactsSync {
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: let contactRequest = ContactRequest()
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let dataStore = DataStore()
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func syncContacts() { <st c="35679">contactRequest.fetchData()</st> .sink(receiveCompletion:
    { completion in'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: switch completion {
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .finished:'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Data fetch completed
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: successfully")
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .failure(let error):'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error fetching data: \(error)")'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, receiveValue: { [weak self] contacts in <st c="35935">self?.dataStore.contacts
    = contacts</st> })'
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.store(in: &cancellables)'
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private var cancellables = Set<AnyCancellable>()
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: let contactsSync = ContactsSync()
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: contactsSync.syncContacts()
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'URLSession.shared.dataTaskPublisher(for: request)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: .tryMap { output in
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: guard let response = output.response as? HTTPURLResponse, response.statusCode
    ==
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 200 else {
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: throw URLError(.badServerResponse)
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return output.data
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.decode(type: ContactsDeltaUpdateResponse.self,'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'decoder: JSONDecoder())'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.receive(on: DispatchQueue.main)'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.sink(receiveCompletion: { completion in'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: switch completion {
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .finished:'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: break
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .failure(let error):'
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error during sync:'
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(error.localizedDescription)")
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, receiveValue: { [weak self] response in'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self?.processDeltaUpdates(response:'
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response)
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.store(in: &cancellables)'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
