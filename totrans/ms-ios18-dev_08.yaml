- en: <st c="0">8</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Connecting and Fetching Data from the Network</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="47">Finding an app that isn’t connected to a server is extremely difficult.</st>
    <st c="120">Most apps don’t operate alone—they need to authenticate their users,
    fetch information, and allow their users to perform actions that eventually will
    be synced back to</st> <st c="288">the server.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="299">Due to this, it is important to understand how networking works—not
    how HTTP works in general, but how iOS apps work with the server efficiently</st>
    <st c="445">and simply.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="456">In this chapter, we will cover the</st> <st c="492">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="509">Understanding</st> <st c="524">mobile networking</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="541">Handling HTTP requests, including</st> <st c="576">their responses</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="591">Integrating network calls within</st> <st c="625">app flows</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="634">Exploring how Combine works</st> <st c="663">with networking</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="678">Let’s start understanding how the network fits into our</st> <st
    c="735">app architecture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="752">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="775">For this chapter, you must download Xcode version 15.0 or above
    from Apple’s App Store.</st> <st c="864">Search for Xcode in the App Store and
    select and download the latest version.</st> <st c="942">Launch Xcode and follow
    any additional installation instructions that your system may prompt you with.</st>
    <st c="1045">Once Xcode has fully launched, you’re ready</st> <st c="1089">to
    go.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1095">You’ll need to run the latest version of macOS (Ventura</st> <st
    c="1152">or above).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1162">You can also download the sample code from the following GitHub</st>
    <st c="1227">link:</st> [<st c="1233">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%208)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1318">Understanding mobile networking</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1350">Working with the network</st> <st c="1375">is a crucial part of
    developing apps for iOS.</st> <st c="1422">Understanding how the network fits
    into our app architecture is essential, but what does it mean?</st> <st c="1520">Watching
    simple tutorials about performing a</st> `<st c="1565">URLSession</st>` <st c="1575">request
    is fine, but real-world apps don’t work</st> <st c="1624">that way.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1633">Before we dive any deeper, let’s recap what a basic app architecture</st>
    <st c="1703">looks like:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1714">UI layer</st>**<st c="1723">: This is responsible for presenting</st>
    <st c="1760">UI to the user, including responding to user inputs.</st> <st c="1814">The
    UI layer consists of the SwiftUI/UIKit views and</st> <st c="1867">view models.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="1879">Business logic</st>**<st c="1894">: This is responsible for
    manipulating data</st> <st c="1938">while managing the basic</st> <st c="1964">application
    logic.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="1982">Data layer</st>**<st c="1993">: This is responsible for storing</st>
    <st c="2027">and retrieving data entities related to the</st> <st c="2072">business
    logic.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2087">I guess I’m not surprising you here with this three-layer architecture,
    as most mobile apps work in a</st> <st c="2190">similar architecture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2211">When we begin to understand where the network job fits, we will
    have to look at the data layer and, in some specific cases, the business logic
    layer (for example, when working with analytics or third-party libraries).</st>
    <st c="2430">However, why do we need to look at the layers?</st> <st c="2477">To
    understand why our network activity is relevant for the data layer, let’s go over
    our main</st> <st c="2571">network goals:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="2585">Syncing information</st>** <st c="2605">to and from</st> <st
    c="2618">our backend</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2629">Handling</st> **<st c="2639">authentication</st>**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2653">Logical activity that requires</st> <st c="2685">a server</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2693">In most apps, networking is needed to sync data with our backend.</st>
    <st c="2760">The data layer functions as the primary repository of truth for entities.</st>
    <st c="2834">Attempting to access entities directly from the network in other
    layers will undermine</st> <st c="2921">this principle.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="2936">Figure 8</st>**<st c="2945">.1</st>* <st c="2947">shows a basic
    app architecture and the</st> <st c="2987">network location:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Basic app architecture](img/B21795_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<st c="3053">Figure 8.1: Basic app architecture</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3087">In</st> *<st c="3091">Figure 8</st>**<st c="3099">.1</st>*<st c="3101">,
    we can see that the network</st> <st c="3130">is one of the components that build
    up the data layer.</st> <st c="3186">The basic idea of most apps is for the network
    to become a data source and fill the app’s</st> <st c="3276">data store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3287">For example, in a music app, the network layer might reach out
    to the backend, fetch albums and songs, and store</st> <st c="3400">them in local
    storage such as</st> **<st c="3431">Core Data</st>**<st c="3440">. The network
    layer is also built upon different components to</st> <st c="3503">function correctly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3522">We can think of network operations as a factory production line.</st>
    <st c="3588">We request a piece of information and take care of the returned data
    package, transferring it through several stages until we properly store it in
    our local store or</st> <st c="3754">present it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3765">Before we review the stages a data package can undergo, let’s try
    to build a network request together.</st> <st c="3869">We’ll start by reviewing
    the basic HTTP</st> <st c="3909">request methods.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3925">Handling an HTTP request</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3950">An HTTP request is a message</st> <st c="3979">the client sends
    to a server to request information and perform an action.</st> <st c="4055">The
    server processes that request and returns a response to the client.</st> <st c="4127">Clients
    indeed perform HTTP requests asynchronously to leave the main thread free.</st>
    <st c="4210">However, the connection between the client and server is</st> **<st
    c="4267">synchronous</st>** <st c="4278">as the client waits for the server’s
    response to complete the</st> <st c="4341">request operation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4359">The primary HTTP request component is the request method, which
    indicates the request’s main goal.</st> <st c="4459">Let’s go over some of the
    basic HTTP</st> <st c="4496">methods now.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4508">Basic HTTP request methods</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4535">The REST API is based</st> <st c="4557">on the idea of a request-response
    style, and it’s a one-directional communication with our backend.</st> <st c="4658">The
    REST API has eight methods to use when communicating with the backend.</st> <st
    c="4733">However, in most cases, we will use the following</st> <st c="4783">four
    methods:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="4796">GET</st>`<st c="4800">: This is used to retrieve information</st>
    <st c="4839">only from the server.</st> <st c="4862">It should be a safe call,
    meaning that performing a</st> `<st c="4914">GET</st>` <st c="4917">request shouldn’t
    affect the</st> <st c="4947">backend data.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4960">POST</st>`<st c="4965">: The</st> `<st c="4972">POST</st>` <st
    c="4976">method is often used to submit</st> <st c="5007">data to the backend.</st>
    <st c="5029">In many cases, the</st> `<st c="5048">POST</st>` <st c="5052">method
    performs changes in the backend data store or changes a</st> <st c="5116">user
    state.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5127">PUT</st>`<st c="5131">: We use</st> `<st c="5141">PUT</st>` <st
    c="5144">to create or update</st> <st c="5164">objects.</st> <st c="5174">Unlike
    the</st> `<st c="5185">POST</st>` <st c="5189">method,</st> `<st c="5198">PUT</st>`
    <st c="5201">is considered idempotent.</st> <st c="5228">We can send multiple
    identical</st> `<st c="5259">PUT</st>` <st c="5262">requests and expect the same
    effect as sending</st> <st c="5310">one request.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5322">DELETE</st>`<st c="5329">: As the name states, we use</st> `<st
    c="5359">DELETE</st>` <st c="5365">to delete</st> <st c="5375">objects.</st> <st
    c="5385">Obviously, we can use</st> `<st c="5407">POST</st>` <st c="5411">to do
    that, but with</st> `<st c="5433">DELETE</st>`<st c="5439">, we are aligned with</st>
    <st c="5461">the standards.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5475">It is worth mentioning that, technically, we can even use</st>
    `<st c="5534">GET</st>` <st c="5537">to make changes to the server.</st> <st c="5569">However,
    the proper method ensures predictability and reliability and is aligned with the</st>
    <st c="5659">REST principles.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5675">To perform a basic HTTP request, we should first be familiar with
    the</st> `<st c="5746">URLSession</st>` <st c="5756">class.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5763">Working with URLSession</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5787">We can use a class</st> <st c="5806">called</st> `<st c="5814">URLSession</st>`
    <st c="5824">to perform and manage</st> <st c="5846">network requests.</st> `<st
    c="5865">URLSession</st>` <st c="5875">is part</st> <st c="5883">of what Apple
    calls the</st> **<st c="5908">URL Loading System</st>**<st c="5926">, which in
    turn</st> <st c="5941">is part of the</st> **<st c="5957">Foundation</st>** <st
    c="5967">framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5978">The</st> `<st c="5983">URLSession</st>` <st c="5993">class is responsible
    for coordinating different URL requests in our app.</st> <st c="6067">Let’s see
    how to perform a basic</st> `<st c="6100">GET</st>` <st c="6103">response</st>
    <st c="6113">using</st> `<st c="6119">URLSession</st>`<st c="6129">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6433">This code example creates an object called</st> `<st c="6477">URLRequest</st>`
    <st c="6487">based on a particular URL.</st> <st c="6515">The</st> `<st c="6519">URLRequest</st>`
    <st c="6529">class encapsulates the information we need to perform a specific
    URL request.</st> <st c="6608">It usually consists of the</st> <st c="6635">following
    information:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6657">The request</st> <st c="6670">base URL</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6678">The request method –</st> `<st c="6700">GET</st>`<st c="6703">,</st>
    `<st c="6705">POST</st>`<st c="6709">,</st> `<st c="6711">PUT</st>`<st c="6714">,</st>
    <st c="6716">or</st> `<st c="6719">DELETE</st>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6725">The request</st> <st c="6738">HTTP headers</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6750">Notice that the</st> `<st c="6767">URLRequest</st>` <st c="6777">structure</st>
    <st c="6787">doesn’t perform the actual HTTP request</st> <st c="6827">or contain
    its response information.</st> <st c="6865">The</st> `<st c="6869">URLSession</st>`
    <st c="6879">class is responsible for conducting and managing the different</st>
    <st c="6943">HTTP requests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6957">There are two ways</st> <st c="6976">to initialize a</st> `<st
    c="6993">URLSession</st>` <st c="7003">instance:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7013">We can call the static</st> `<st c="7037">shared</st>` <st c="7043">property</st>
    <st c="7052">and use it as a</st> **<st c="7069">singleton</st>**<st c="7078">.
    We do that if we want to simplify our implementation without needing to customize
    how we handle requests or have different requirements for different areas in</st>
    <st c="7239">the app:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="7279">If we need more flexibility, we can create an instance of</st>
    `<st c="7338">URLSession</st>` <st c="7348">(like in the last code example) and
    initialize it with our</st> <st c="7408">own configuration.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7426">A configuration object allows us to fine-tune our requests better.</st>
    <st c="7494">For example, we can define each request as containing additional
    headers, setting the timeout and caching, or even cookie</st> <st c="7616">acceptance
    policies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7636">Here’s a code example for setting up a</st> `<st c="7676">URLSession</st>`
    <st c="7686">class with a specific timeout duration and</st> <st c="7730">no caching:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'let task = session.dataTask(with: request) { (data,'
  prefs: []
  type: TYPE_NORMAL
- en: response, error)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: if let error = error as? URLError {
  prefs: []
  type: TYPE_NORMAL
- en: switch error.code {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .cannotFindHost:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// notify the user. default:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error: \(error)")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: if let httpResponse = response as? HTTPURLResponse {
  prefs: []
  type: TYPE_NORMAL
- en: switch httpResponse.statusCode {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 200..<300:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Success:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 400..<500:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Client Error:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 500..<600:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Server Error:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Other Status Code:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(httpResponse.statusCode)")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} else {'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Invalid HTTP Response")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'func handleResponse(data: Data?, response: URLResponse?, error: Error?) throws
    {'
  prefs: []
  type: TYPE_NORMAL
- en: if let error = error {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw error
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: guard let httpResponse = response as? HTTPURLResponse
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.invalidResponse
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: switch httpResponse.statusCode {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 200..<300:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if let responseData = data {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if let errorData = try? JSONDecoder().decode(ErrorResponse.self,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'from: responseData) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.dataError
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 400..<500:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'throw NetworkingError.clientError(statusCode:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: httpResponse.statusCode)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case 500..<600:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'throw NetworkingError.serverError(statusCode:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: httpResponse.statusCode)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'default:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throw NetworkingError.otherError
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'let task = session.dataTask(with: request) { (data,'
  prefs: []
  type: TYPE_NORMAL
- en: response, error) in
  prefs: []
  type: TYPE_NORMAL
- en: do {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try handleResponse(data: data, response: response,'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'error: error)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} catch let error {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error: \(error)")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"name": "John Doe",'
  prefs: []
  type: TYPE_NORMAL
- en: '"email": "john@example.com"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'struct Contact: Codable {'
  prefs: []
  type: TYPE_NORMAL
- en: 'let id: Int'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let fullName: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let userEmail: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Define custom coding keys to match JSON keys
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'private enum CodingKeys: String, CodingKey {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: case id
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: case fullName = "name"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: case userEmail = "email"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: let errorData = try? JSONDecoder().decode(Contact.self,
  prefs: []
  type: TYPE_NORMAL
- en: 'from: responseData)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'struct ServerResponse: Codable {'
  prefs: []
  type: TYPE_NORMAL
- en: 'let responseID: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let timestamp: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let orgID: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let contact: Contact'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let jsonString = """
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"responseID": "12345",'
  prefs: []
  type: TYPE_NORMAL
- en: '"timestamp": "2024-03-25T12:00:00Z",'
  prefs: []
  type: TYPE_NORMAL
- en: '"orgID": "5678",'
  prefs: []
  type: TYPE_NORMAL
- en: '"contact": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": 1,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"fullName": "John Doe",'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"userEmail": "john@example.com"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: 'let jsonData = jsonString.data(using: .utf8)! let response = try'
  prefs: []
  type: TYPE_NORMAL
- en: 'JSONDecoder().decode(ServerResponse.self, from: jsonData)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: class DataStore {
  prefs: []
  type: TYPE_NORMAL
- en: 'private var contacts: [Contact] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func updateContacts(with newContacts: [Contact]) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: contacts = newContacts
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func getAllContacts() -> [Contact] {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return contacts
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: class SyncManager {
  prefs: []
  type: TYPE_NORMAL
- en: 'private let dataStore: DataStore'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'init(dataStore: DataStore) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.dataStore = dataStore
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func syncData() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NetworkHandler.fetchData { result in
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: switch result {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .success(let data):'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: do {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let contacts = try JSONDecoder().decode([Contact].self, from: data)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.dataStore.updateContacts(with: contacts)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Data synced successfully")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} catch {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Error decoding data:", error)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .failure(let error):'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Error fetching data:", error)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: import SwiftUI
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ContactsView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var contacts: [Contact] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@State private var isLoading = false'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationView {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: List(contacts) { contact in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'VStack(alignment: .leading) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Text(contact.name).font(.headline)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Text(contact.phoneNumber).font(.subheadline)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .navigationTitle("Contacts")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .onAppear {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: fetchContacts()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .overlay {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if isLoading {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ProgressView("Loading...")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private func fetchContacts() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: isLoading = true
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: NetworkHandler().fetchData { fetchedContacts in
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: contacts = fetchedContacts
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: isLoading = false
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: import SwiftUI
  prefs: []
  type: TYPE_NORMAL
- en: 'struct ContactsView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: '@State private var contacts: [Contact] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationView {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: List(contacts) { contact in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'VStack(alignment: .leading) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Text(contact.name).font(.headline)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Text(contact.phoneNumber).font(.subheadline)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .navigationTitle("Contacts")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .onAppear {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: loadContacts()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private func loadContacts() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: contacts = loadFromCache()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: NetworkHandler().fetchData { fetchedContacts in
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: contacts = fetchedContacts
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'saveToCache(contacts: fetchedContacts)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: class IncrementalLoader {
  prefs: []
  type: TYPE_NORMAL
- en: var currentPage = 1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let itemsPerPage = 10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var contacts = [Contact]()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func loadNextPage() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'guard let url = URL(string:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"https://api.example.com/contacts?page=\(currentPage)&limit=\(itemsPerPage)")
    else {'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid URL")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response,
    error) in'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: guard let self = self else { return }
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: do {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let newContacts = try JSONDecoder().decode([Contact].self, from: data)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: DispatchQueue.main.async {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.contacts.append(contentsOf: newContacts)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Fetched Contacts: \(newContacts)")'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.currentPage += 1
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} catch {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error decoding JSON: \(error)")'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: task.resume()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: class ContactsSyncManager {
  prefs: []
  type: TYPE_NORMAL
- en: let userDefaults = UserDefaults.standard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let lastUpdatedKey = "lastUpdatedTime"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let syncEndpoint = URL(string:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"https://example.com/api/sync/contacts")! func syncContacts() {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var request = URLRequest(url: syncEndpoint)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: request.httpMethod = "POST"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: request.addValue("application/json",
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'forHTTPHeaderField: "Content-Type")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let lastUpdatedTime = userDefaults.double(forKey:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastUpdatedKey)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let requestBody = ["lastUpdatedTime":'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastUpdatedTime]
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'request.httpBody = try? JSONSerialization.data(withJSONObject:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: requestBody)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'URLSession.shared.dataTask(with: request) { [weak'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self] data, response, error in
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self?.processDeltaUpdates(response: response)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}.resume()'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'private func processDeltaUpdates(response:'
  prefs: []
  type: TYPE_NORMAL
- en: ContactsDeltaUpdateResponse) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: // Here you can handle the new, deleted, and updated contacts as needed
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("New Contacts:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(response.newContacts.count)")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Deleted Contacts:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(response.deletedContacts.count)")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Updated Contacts:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(response.updatedContacts.count)")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'userDefaults.set(response.lastUpdated, forKey:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lastUpdatedKey)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: class ContactRequest {
  prefs: []
  type: TYPE_NORMAL
- en: func fetchData() -> AnyPublisher<[Contact], Error> {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'let url = URL(string:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"https://api.example.com/contacts")! return URLSession.shared.dataTaskPublisher(for:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: url)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map { $0.data }
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.decode(type: [Contact].self, decoder:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: JSONDecoder())
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .eraseToAnyPublisher()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: class DataStore {
  prefs: []
  type: TYPE_NORMAL
- en: '@Published var contacts: [Contact] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: class ContactsSync {
  prefs: []
  type: TYPE_NORMAL
- en: let contactRequest = ContactRequest()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let dataStore = DataStore()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func syncContacts() { <st c="35679">contactRequest.fetchData()</st> .sink(receiveCompletion:
    { completion in'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: switch completion {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .finished:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Data fetch completed
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: successfully")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .failure(let error):'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error fetching data: \(error)")'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, receiveValue: { [weak self] contacts in <st c="35935">self?.dataStore.contacts
    = contacts</st> })'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.store(in: &cancellables)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: private var cancellables = Set<AnyCancellable>()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: let contactsSync = ContactsSync()
  prefs: []
  type: TYPE_NORMAL
- en: contactsSync.syncContacts()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'URLSession.shared.dataTaskPublisher(for: request)'
  prefs: []
  type: TYPE_NORMAL
- en: .tryMap { output in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: guard let response = output.response as? HTTPURLResponse, response.statusCode
    ==
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 200 else {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: throw URLError(.badServerResponse)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return output.data
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.decode(type: ContactsDeltaUpdateResponse.self,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'decoder: JSONDecoder())'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.receive(on: DispatchQueue.main)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.sink(receiveCompletion: { completion in'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: switch completion {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .finished:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: break
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'case .failure(let error):'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'print("Error during sync:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: \(error.localizedDescription)")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}, receiveValue: { [weak self] response in'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self?.processDeltaUpdates(response:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: response)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.store(in: &cancellables)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
