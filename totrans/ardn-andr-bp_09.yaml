- en: Chapter 9. Bluetooth Low Energy Mobile Robot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 蓝牙低功耗移动机器人
- en: In this chapter, we are going to use most of the concepts we have learned throughout
    the book to control a mobile robot via an Android app. The robot will have two
    motors that we can control, and also an ultrasonic sensor in the front so that
    it can detect obstacles. The robot will also have a BLE chip so that it can receive
    commands from the Android app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用本书中学到的几乎所有概念，通过Android应用程序控制移动机器人。机器人将有两个我们可以控制的电机，还有一个前方的超声波传感器，以便它可以检测障碍物。机器人还将有一个BLE芯片，以便它可以接收来自Android应用程序的命令。
- en: 'The application will have the following basic commands that you will need to
    control the robot:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将包含以下基本命令，您需要这些命令来控制机器人：
- en: Go forward
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向前移动
- en: Go backward
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向后移动
- en: Turn left
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向左转
- en: Turn right
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向右转
- en: Display the connection status to the robot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示与机器人的连接状态
- en: 'The following will be the major takeaways from this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要收获如下：
- en: Building a mobile robot based on the Arduino platform
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Arduino平台的移动机器人构建
- en: Connecting a BLE module to the Arduino robot
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将BLE模块连接到Arduino机器人
- en: Building an Android application to control the robot remotely
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Android应用程序以远程控制机器人
- en: Hardware and software requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: Let's first see what we need for this project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看这个项目需要什么。
- en: The base of this project is of course the robot itself. For this project, we
    used a DFRobot miniQ two-wheeled robot chassis. It comes with a round robot chassis,
    two DC motors, two wheels, and some screws and bolts so that you can mount multiple
    Arduino boards on it. You can basically use any equivalent robot chassis that
    has two wheels coupled with DC motors and on which you can mount Arduino-compatible
    boards.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个项目的基座当然是机器人本身。对于这个项目，我们使用了DFRobot miniQ两轮机器人底盘。它包含一个圆形机器人底盘、两个直流电机、两个轮子和一些螺丝和螺栓，以便您可以在其上安装多个Arduino板。您基本上可以使用任何等效的机器人底盘，它有两个轮子，配有两个直流电机，并且可以在其上安装Arduino兼容板。
- en: To control the robot, we are actually going to use three different Arduino boards.
    The "brain" of the robot will be a simple Arduino Uno board. On top of that, we
    will use a DFRobot motor shield to control the two DC motors of the robot. And
    on top of these two boards, we will put a prototyping shield so that we can connect
    different modules to the robot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制机器人，我们实际上将使用三个不同的Arduino板。机器人的“大脑”将是一个简单的Arduino Uno板。在其之上，我们将使用DFRobot电机盾板来控制机器人的两个直流电机。然后在这两个板子上，我们将放置一个原型板，以便我们可以将不同的模块连接到机器人上。
- en: To control the robot remotely, we will again use BLE. To give BLE connectivity
    to the robot, we used an Adafruit nRF8001 breakout board.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要远程控制机器人，我们再次使用BLE。为了给机器人提供BLE连接，我们使用了Adafruit nRF8001扩展板。
- en: To give the robot the ability to detect what is in front of it, we added an
    URM37 ultrasonic sensor to the project. As we will see, this sensor is really
    easy to interface with Arduino.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让机器人能够检测其前方的东西，我们在项目中添加了一个URM37超声波传感器。正如我们将看到的，这个传感器与Arduino接口非常简单。
- en: Finally, you will also need some jumper wires to make the different connections
    between the robot, the sensor, and the Bluetooth module.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还需要一些跳线，以便在机器人、传感器和蓝牙模块之间建立不同的连接。
- en: 'The following is a list of all of the hardware you will need for this project,
    along with links to these parts on the web:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要为此项目准备的硬件列表，以及这些部件在网上的链接：
- en: An Arduino Uno board ([http://www.dfrobot.com/index.php?route=product/product&search=uno&description=true&product_id=838](http://www.dfrobot.com/index.php?route=product/product&search=uno&description=true&product_id=838))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Uno板（[http://www.dfrobot.com/index.php?route=product/product&search=uno&description=true&product_id=838](http://www.dfrobot.com/index.php?route=product/product&search=uno&description=true&product_id=838)）
- en: An Arduino motor shield ([http://www.dfrobot.com/index.php?route=product/product&path=35_39&product_id=59](http://www.dfrobot.com/index.php?route=product/product&path=35_39&product_id=59))
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino电机盾板（[http://www.dfrobot.com/index.php?route=product/product&path=35_39&product_id=59](http://www.dfrobot.com/index.php?route=product/product&path=35_39&product_id=59)）
- en: An Arduino prototyping shield ([http://www.dfrobot.com/index.php?route=product/product&product_id=55](http://www.dfrobot.com/index.php?route=product/product&product_id=55))
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino原型板（[http://www.dfrobot.com/index.php?route=product/product&product_id=55](http://www.dfrobot.com/index.php?route=product/product&product_id=55)）
- en: An nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nRF8001扩展板（[https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697)）
- en: An ultrasonic range sensor ([http://www.dfrobot.com/index.php?route=product/product&search=ultrasonic&description=true&page=1&product_id=53](http://www.dfrobot.com/index.php?route=product/product&search=ultrasonic&description=true&page=1&product_id=53))
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超声波距离传感器 ([http://www.dfrobot.com/index.php?route=product/product&search=ultrasonic&description=true&page=1&product_id=53](http://www.dfrobot.com/index.php?route=product/product&search=ultrasonic&description=true&page=1&product_id=53))
- en: An ultrasonic sensor mounting kit ([http://www.dfrobot.com/index.php?route=product/product&product_id=322](http://www.dfrobot.com/index.php?route=product/product&product_id=322))
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超声波传感器安装套件 ([http://www.dfrobot.com/index.php?route=product/product&product_id=322](http://www.dfrobot.com/index.php?route=product/product&product_id=322))
- en: A DFRobot miniQ chassis ([http://www.dfrobot.com/index.php?route=product/product&search=miniq&description=true&product_id=367](http://www.dfrobot.com/index.php?route=product/product&search=miniq&description=true&product_id=367))
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DFRobot miniQ 底盘 ([http://www.dfrobot.com/index.php?route=product/product&search=miniq&description=true&product_id=367](http://www.dfrobot.com/index.php?route=product/product&search=miniq&description=true&product_id=367))
- en: A 7.4 V battery ([http://www.dfrobot.com/index.php?route=product/product&product_id=489](http://www.dfrobot.com/index.php?route=product/product&product_id=489))
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7.4 V 电池 ([http://www.dfrobot.com/index.php?route=product/product&product_id=489](http://www.dfrobot.com/index.php?route=product/product&product_id=489))
- en: Jumper wires ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线 ([https://www.adafruit.com/products/1957](https://www.adafruit.com/products/1957))
- en: 'On the software side, you will of course need the Arduino IDE. You will also
    need the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件方面，你当然需要 Arduino IDE。你还需要以下内容：
- en: A library for the nRF8001 chip ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 nRF8001 芯片的库 ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
- en: The aREST library to send commands to the robot ([https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST))
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于向机器人发送命令的 aREST 库 ([https://github.com/marcoschwartz/aREST](https://github.com/marcoschwartz/aREST))
- en: Configuring the hardware
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置硬件
- en: 'We are first going to assemble the robot itself, and then see how to connect
    the Bluetooth module and the ultrasonic sensor. To give you an idea of what you
    should end up with, the following is a front-view image of the robot when fully
    assembled:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将组装机器人本身，然后看看如何连接蓝牙模块和超声波传感器。为了给你一个你最终应该得到的概念，以下是一个完全组装好的机器人的正面视图：
- en: '![Configuring the hardware](img/0389OS_09_01.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_09_01.jpg)'
- en: 'The following image shows the back of the robot when fully assembled:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了完全组装好的机器人的背面：
- en: '![Configuring the hardware](img/0389OS_09_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_09_02.jpg)'
- en: The first step is to assemble the robot chassis. To do so, you can watch the
    DFRobot assembly guide at [https://www.youtube.com/watch?v=tKakeyL_8Fg](https://www.youtube.com/watch?v=tKakeyL_8Fg).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是组装机器人底盘。为此，你可以观看 DFRobot 组装指南 [https://www.youtube.com/watch?v=tKakeyL_8Fg](https://www.youtube.com/watch?v=tKakeyL_8Fg)。
- en: 'Then, you need to attach the different Arduino boards and shields to the robot.
    Use the spacers found in the robot chassis kit to mount the Arduino Uno board
    first. Then put the Arduino motor shield on top of that. At this point, use the
    screw header terminals to connect the two DC motors to the motor shield. This
    is how it should look at this point:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要将不同的 Arduino 板和屏蔽板连接到机器人上。使用机器人底盘套件中找到的垫圈首先安装 Arduino Uno 板。然后，将 Arduino
    电机屏蔽板放在上面。此时，使用螺丝端子连接两个直流电机到电机屏蔽板上。此时应该看起来是这样的：
- en: '![Configuring the hardware](img/0389OS_09_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_09_03.jpg)'
- en: Finally, mount the prototyping shield on top of the motor shield.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将原型板安装在电机板上。
- en: 'We are now going to connect the BLE module and the ultrasonic sensor to the
    Arduino prototyping shield. The following is a schematic diagram showing the connections
    between the Arduino Uno board (done via the prototyping shield in our case) and
    the components:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将连接 BLE 模块和超声波传感器到 Arduino 原型板上。以下是一个示意图，显示了 Arduino Uno 板（在我们的案例中是通过原型板完成的）和组件之间的连接：
- en: '![Configuring the hardware](img/0389OS_09_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_09_04.jpg)'
- en: 'Now perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: First, we are now going to connect the BLE module.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们现在将连接 BLE 模块。
- en: Place the module on the prototyping shield.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模块放置在原型板上。
- en: 'Connect the power supply of the module as follows: **GND** goes to the prototyping
    shield''s **GND** pin, and **VIN** goes to the prototyping shield''s +5V.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式连接模块的电源：**GND** 连接到原型板上的 **GND** 引脚，**VIN** 连接到原型板上的 +5V。
- en: 'After that, you need to connect the different wires responsible for the SPI
    interface: **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**, and
    **MOSI** to Arduino pin **11**.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，您需要连接负责SPI接口的不同电线：**SCK**连接到Arduino引脚**13**，**MISO**连接到Arduino引脚**12**，**MOSI**连接到Arduino引脚**11**。
- en: Then connect the **REQ** pin to Arduino pin **10**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将**REQ**引脚连接到Arduino引脚**10**。
- en: Finally, connect the **RDY** pin to Arduino pin **2** and the **RST** pin to
    Arduino pin **9**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将**RDY**引脚连接到Arduino引脚**2**，将**RST**引脚连接到Arduino引脚**9**。
- en: For the URM37 module, connect the **VCC** pin of the module to Arduino +5V,
    **GND** to **GND**, and the **PWM** pin to the Arduino **A3** pin.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于URM37模块，将模块的**VCC**引脚连接到Arduino +5V，**GND**连接到**GND**，**PWM**引脚连接到Arduino
    **A3**引脚。
- en: Note
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To review the pin order on the URM37 module, you can check the official DFRobot
    documentation at [http://www.dfrobot.com/wiki/index.php?title=URM37_V3.2_Ultrasonic_Sensor_(SKU:SEN0001)](http://www.dfrobot.com/wiki/index.php?title=URM37_V3.2_Ultrasonic_Sensor_(SKU:SEN0001)).
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要查看URM37模块上的引脚顺序，您可以检查DFRobot官方文档[http://www.dfrobot.com/wiki/index.php?title=URM37_V3.2_Ultrasonic_Sensor_(SKU:SEN0001)](http://www.dfrobot.com/wiki/index.php?title=URM37_V3.2_Ultrasonic_Sensor_(SKU:SEN0001))。
- en: 'The following is a close-up image of the prototyping shield with the BLE module
    connected:'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是与BLE模块连接的印刷电路板的特写图像：
- en: '![Configuring the hardware](img/0389OS_09_05.jpg)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![配置硬件](img/0389OS_09_05.jpg)'
- en: Finally, connect the 7.4 V battery to the Arduino Uno board power jack. The
    battery is simply placed below the Arduino Uno board.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将7.4V电池连接到Arduino Uno板的电源插孔。电池只需放在Arduino Uno板下面。
- en: Testing the robot
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试机器人
- en: 'We are now going to write a sketch to test the different functionalities of
    the robot, first without using Bluetooth. As the sketch is quite long, we will
    look at the code piece by piece. Before you proceed, make sure that the battery
    is always plugged into the robot. Now perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个草图来测试机器人的不同功能，首先不使用蓝牙。由于草图相当长，我们将逐部分查看代码。在您继续之前，请确保电池始终插入到机器人中。现在执行以下步骤：
- en: 'The sketch starts by including the aREST library that we will use to control
    the robot via serial commands:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 草图首先包含我们将用于通过串行命令控制机器人的aREST库：
- en: '[PRE0]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we declare which pins the motors are connected to:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们声明电机连接到的引脚：
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We also declare which pin the ultrasonic sensor is connected to:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还声明超声波传感器连接到的引脚：
- en: '[PRE2]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we create an instance of the aREST library:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建aREST库的一个实例：
- en: '[PRE3]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To store the distance data measured by the ultrasonic sensor, we declare a
    distance variable:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了存储超声波传感器测量的距离数据，我们声明一个距离变量：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `setup()` function of the sketch, we first initialize serial communications
    that we will use to communicate with the robot for this test:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在草图的`setup()`函数中，我们首先初始化我们将用于与机器人通信的串行通信：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We also expose the distance variable to the REST API, so we can access it easily:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将距离变量暴露给REST API，这样我们就可以轻松访问它：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To control the robot, we are going to declare a whole set of functions that
    will perform the basic operations: going forward, going backward, turning on itself
    (left or right), and stopping. We will see the details of these functions in a
    moment; for now, we just need to expose them to the API:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了控制机器人，我们将声明一组函数来执行基本操作：前进、后退、自身转向（左或右）和停止。我们将在稍后看到这些函数的详细信息；现在，我们只需要将它们暴露给API：
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also give the robot an ID and a name:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还为机器人分配一个ID和名称：
- en: '[PRE8]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `loop()` function of the sketch, we first measure the distance from
    the sensor:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在草图的`loop()`函数中，我们首先测量传感器距离：
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then handle the requests using the aREST library:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们然后使用aREST库处理请求：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we will look at the functions for controlling the motors. They are all
    based on a function to control a single motor, where we need to set the motor
    pins, the speed, and the direction of the motor:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将查看控制电机的函数。它们都是基于控制单个电机的函数，其中我们需要设置电机引脚、速度和电机的方向：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Based on this function, we can now define the different functions to move the
    robot, such as `forward`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于此函数，我们现在可以定义不同的函数来移动机器人，例如`forward`：
- en: '[PRE12]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We also define a `backward` function, simply inverting the direction of both
    motors:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了一个`backward`函数，简单地反转两个电机的方向：
- en: '[PRE13]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To make the robot turn left, we simply make the motors rotate in opposite directions:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使机器人向左转，我们只需使电机以相反的方向旋转：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We also have a function to stop the robot:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还有一个停止机器人的函数：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is also a function to make the robot turn right, which is not detailed
    here. Note that all of the code used in this chapter can be found in the GitHub
    repository of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个使机器人向右转的函数，这里没有详细说明。请注意，本章中使用的所有代码都可以在本书的GitHub仓库[https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints)中找到。
- en: We are now going to test the robot. Before you do anything, ensure that the
    battery is always plugged into the robot. This will ensure that the motors are
    not trying to get power from your computer USB port, which could damage it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将测试机器人。在你做任何事情之前，确保电池始终插入到机器人中。这将确保电机不会试图从你的计算机USB端口获取电力，这可能会损坏它。
- en: Also place some small support at the bottom of the robot so that the wheels
    don't touch the ground. This will ensure that you can test all the commands of
    the robot without the robot moving too far from your computer, as it is still
    attached via the USB cable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还在机器人的底部放置一些小支撑，这样车轮就不会接触地面。这将确保你可以测试机器人的所有命令，而机器人不会离你的计算机太远，因为它仍然通过USB电缆连接。
- en: 'Now you can upload the sketch to your Arduino Uno board. Open the serial monitor
    and type the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将草图上传到你的Arduino Uno板。打开串行监视器并输入以下内容：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This should make both the wheels of the robot turn in the same direction. You
    can also try the other commands to move the robot to make sure they all work properly.
    Then, test the ultrasonic distance sensor by typing the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会使机器人的两个车轮朝同一方向转动。你也可以尝试其他命令来移动机器人，以确保它们都能正常工作。然后，通过输入以下内容来测试超声波距离传感器：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should get back the distance (in centimeters) in front of the sensor:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会得到传感器前方的距离（以厘米为单位）：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Try changing the distance by putting your hand in front of the sensor and typing
    the command again.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过将手放在传感器前并再次输入命令来改变距离。
- en: Writing the Arduino sketch
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Arduino草图
- en: 'Now that we have made sure that the robot is working properly, we can write
    the final sketch that will receive the commands via Bluetooth. As the sketch shares
    many similarities with the test sketch, we are only going to see what is added
    compared to the test sketch. We first need to include more libraries:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确认机器人工作正常，我们可以编写最终的草图，该草图将通过蓝牙接收命令。由于草图与测试草图有很多相似之处，我们只将看到与测试草图相比增加了什么。我们首先需要包含更多的库：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also define which pins the BLE module is connected to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了BLE模块连接的引脚：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have to create an instance of the BLE module:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建BLE模块的一个实例：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `setup()` function of the sketch, we initialize the BLE chip:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在草图中的`setup()`函数中，我们初始化BLE芯片：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `loop()` function, we check the status of the BLE chip and store it
    in a variable:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`函数中，我们检查BLE芯片的状态并将其存储在一个变量中：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If we detect that a device is connected to the chip, we handle the incoming
    request with the aREST library, which will allow us to use the same commands as
    before to control the robot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检测到设备连接到芯片，我们将使用aREST库处理传入的请求，这将允许我们使用与之前相同的命令来控制机器人：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can now upload the code to your Arduino board, again by making sure that
    the battery is connected to the Arduino Uno board via the power jack. You can
    now move on to the development of the Android application to control the robot.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过确保电池通过电源插头连接到Arduino Uno板来上传代码。现在你可以继续开发用于控制机器人的Android应用程序。
- en: Setting up the Android app
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Android应用程序
- en: The Android application that we will be creating will give us the opportunity
    to control the robot via BLE from the physical Android device. This application
    will have five basic controls, that is, **Forward**, **Backward**, **Left**, **Right**,
    and **Stop**. In addition, it will also show the BLE connection status and there
    will be a **Refresh** button that will allow us to refresh the Bluetooth callback.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的Android应用程序将使我们能够通过BLE从物理Android设备控制机器人。该应用程序将具有五个基本控制功能，即**前进**、**后退**、**左转**、**右转**和**停止**。此外，它还将显示BLE连接状态，并且将有一个**刷新**按钮，允许我们刷新蓝牙回调。
- en: 'We will assume that you will have switched on the `Auto-Import` function within
    your preferences. If not, activate it by going to the **Auto-Import** preferences
    and selecting all the available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您已经在您的首选项中开启了`自动导入`功能。如果没有，请通过访问**自动导入**首选项并选择所有可用选项来激活它。**自动导入**首选项在Mac和Windows上的位置如下：
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上，导航到**Android Studio** > **首选项** > **编辑器** > **自动导入**
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上，导航到**文件** > **设置** > **编辑器** > **自动导入**
- en: 'With all the necessary settings in place, we will start off by creating a new
    project where we will choose the following within the **New Project** setup walkthrough:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有必要的设置就绪后，我们将开始创建一个新的项目，在**新建项目**设置向导中，我们将选择以下内容：
- en: '**Name**: `Mobile Robot`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`移动机器人`'
- en: '**Minimum SDK**: `18`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK**：`18`'
- en: '**Project**: `Blank Activity`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：`空白活动`'
- en: '**Activity Name**: `RobotControlAc``tivity`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**：`RobotControlActivity`'
- en: '**Domain**: `arduinoandroid.com`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名**：`arduinoandroid.com`'
- en: Laying out the Android user interface and setting permissions
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布局Android用户界面和设置权限
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `main` > `AndroidManifest.xml`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个项目工作，我们首先需要转到Android的`Manifest`文件，该文件位于`app` > `src` > `main` > `AndroidManifest.xml`。
- en: 'Since this Android application uses BLE to connect the Android physical device
    to the robot, we will need to add the following permissions to the Android `Manifest`
    file. These permissions will allow the application to connect to the paired Bluetooth
    devices that have been discovered:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个Android应用程序使用BLE将Android物理设备连接到机器人，我们需要将以下权限添加到Android的`Manifest`文件中。这些权限将允许应用程序连接到已发现的配对蓝牙设备：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The next step that we will take is to set up the very basic Android layout file
    so that we can implement the app's functions and allow the user to activate the
    voice recognition intent.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们将设置一个非常基本的Android布局文件，以便我们可以实现应用程序的功能并允许用户激活语音识别意图。
- en: In our project, we will navigate to the main layout file which can be accessed
    from `app` > `src` > `res` > `layout` > `activity_robot_control.xml`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们将导航到主布局文件，该文件可以通过`app` > `src` > `res` > `layout` > `activity_robot_control.xml`访问。
- en: 'There are a number of layout formats with the Android user interface design,
    and in this particular case, we will be using a horizontal linear layout with
    a vertical linear layout as a child. Keeping these concepts in mind, we will replace
    the current code with the following lines of code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Android用户界面设计中有多种布局格式，在这种情况下，我们将使用一个水平线性布局，其中包含一个垂直线性布局作为子布局。牢记这些概念，我们将用以下代码行替换当前代码：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'At this point, you should end up with something that looks like the following
    screenshot. This is based on the LG Nexus 5:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该得到以下截图所示的内容。这是基于LG Nexus 5：
- en: '![Laying out the Android user interface and setting permissions](img/0389OS_09_06.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![布局Android用户界面和设置权限](img/0389OS_09_06.jpg)'
- en: Coding the app's internals
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写应用程序的内部代码
- en: At this point, we want to start connecting our freshly designed Android user
    interface to the main Android code, and we will start doing this by opening the
    `RobotControlActivity.java` file, which is available at `app` > `src` > `main`
    > `java` > `package name` > `RobotControlActivity.java`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们想要开始将我们刚刚设计的Android用户界面连接到主要的Android代码，我们将通过打开`RobotControlActivity.java`文件来开始这个过程，该文件位于`app`
    > `src` > `main` > `java` > `包名` > `RobotControlActivity.java`。
- en: 'We will start off by declaring the user interface element variables together
    with the main variable, which we could use for logging, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先声明用户界面元素变量以及主要变量，我们可以使用它进行日志记录，如下所示：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will declare all the necessary variables for the `BluetoothCallback` variable,
    where we will primarily declare the UUIDs associated with our specific BLE module,
    followed by the Bluetooth adapter variables and characteristics:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`BluetoothCallback`变量声明所有必要的变量，其中我们将主要声明与我们的特定BLE模块相关的UUID，然后是蓝牙适配器变量和特性：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will then proceed to the `onCreate()` method and connect the different user
    interface elements to the code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将继续到`onCreate()`方法，并将不同的用户界面元素连接到代码中：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In this project, we would like to send specific BLE messages to our robot when
    the user taps on the buttons, and in this part, we will be adding `onClickListeners`
    to our buttons which we have connected earlier to send the messages that we need
    to interface with the robot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们希望在用户点击按钮时向我们的机器人发送特定的BLE消息，在这个部分，我们将为之前连接的按钮添加`onClickListeners`以发送我们需要与机器人接口的消息：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the next section, we need to declare a new method, which we will name `writeConnectionData`.
    Its main role is writing the status of the Bluetooth callback to the connection
    status text view:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们需要声明一个新的方法，我们将将其命名为`writeConnectionData`。其主要作用是将蓝牙回调的状态写入连接状态文本视图：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following code is all the necessary Bluetooth callback which needs to take
    place in order to establish a connection between the Android physical device and
    BLE module on the robot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是所有必要的蓝牙回调，这些回调需要在Android物理设备和机器人上的BLE模块之间建立连接：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The Android application''s life cycle gives us the ability to add methods that
    can be activated at different parts of this cycle. The following `onStart()` and
    `onStop()`methods, which are invoked on starting and exiting the application respectively,
    allow us to conserve the device''s energy and memory resources:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓应用程序的生命周期使我们能够添加可以在生命周期不同部分激活的方法。以下`onStart()`和`onStop()`方法，分别在启动和退出应用程序时被调用，使我们能够节省设备的能量和内存资源：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In order to allow the starting, stopping, and restarting of Bluetooth scans,
    we need to declare methods to do these particular actions, which is the purpose
    of the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许启动、停止和重新启动蓝牙扫描，我们需要声明执行这些特定操作的方法，这正是以下代码的目的：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The most important part of the Bluetooth callback is to connect to the right
    BLE device, and the following code helps the user to achieve that:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝牙回调最重要的部分是连接到正确的BLE设备，以下代码帮助用户实现这一点：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: UUID parsing, unlike in the previous chapters, has been moved to a `utility`
    class in order to refactor the code and make it more readable. In order to create
    a `utility` class, we first need to right-click on our package name and create
    a new package called `Bluetooth`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章不同，UUID解析已被移动到`utility`类中，以便重构代码并使其更易于阅读。为了创建一个`utility`类，我们首先需要右键单击我们的包名，创建一个新的名为`Bluetooth`的包。
- en: After that, we will right-click on the new package, select **New** > **Java
    Class**, and name the new class as `BluetoothUtils`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将右键单击新包，选择**新建** > **Java类**，并将新类命名为`BluetoothUtils`。
- en: 'After the preceding two steps, we will replace the code within the class with
    the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个步骤之后，我们将用以下代码替换类中的代码：
- en: '[PRE36]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: At this point, you could go ahead, build, and run the project on an Android
    physical device running Android 4.3 with Bluetooth switched on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以继续构建并运行项目，在一个运行Android 4.3且蓝牙已开启的安卓物理设备上。
- en: Enhancing the user interface further
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步增强用户界面
- en: Once we have managed to finalize our code and assure ourselves that the user
    interface includes all the basic functionalities required to control the robot,
    we can proceed to improving our user interface.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功完成了代码，并确保用户界面包含了控制机器人所需的所有基本功能，我们就可以继续改进我们的用户界面。
- en: 'We will improve the user interface with two main actions:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过两个主要动作来改进用户界面：
- en: Adding a new app icon
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的应用图标
- en: Styling the user interface buttons
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计用户界面按钮样式
- en: Adding a new app icon
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的应用图标
- en: First, we will download the image asset. It's available within the GitHub repository
    and also as a public download at [http://bit.ly/mobileroboticon](http://bit.ly/mobileroboticon).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将下载图像资源。它可以在GitHub仓库中找到，也可以在[http://bit.ly/mobileroboticon](http://bit.ly/mobileroboticon)作为公开下载。
- en: You should navigate to the project tree, followed by a right-click on **app**.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该导航到项目树，然后右键单击**app**。
- en: When you right-click on **app**, create a new image asset by going to **New**
    > **Image Asset**.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当你右键单击**app**时，通过**新建** > **图像资源**创建一个新的图像资源。
- en: You will then be shown an **Asset Studio** pop-up window, which will allow you
    to choose your very own image file. For optimization purposes, we recommend that
    you go for a `.png` file with a resolution of 144 pixels by 144 pixels. Android
    Studio automatically does all the resizing and resource creation to adapt your
    graphic to different screens.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将看到一个**Asset Studio**弹出窗口，它将允许您选择您自己的图像文件。出于优化的目的，我们建议您选择一个144像素乘以144像素分辨率的`.png`文件。Android
    Studio会自动进行所有调整大小和资源创建，以适应不同屏幕的图形。
- en: Once you choose the `ic_launcher` image file that we have provided you with,
    you will be shown a screen with the icon in different sizes. Click on **Next**
    where you will see the screen with the launcher icons in different sizes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您选择了我们提供的`ic_launcher`图像文件，您将看到一个显示不同尺寸图标的屏幕。点击**下一步**，您将看到不同尺寸的启动器图标屏幕。
- en: This screen warns you that previous files will be overwritten and shows you
    the image launcher file in a number of different resolutions once again. Click
    on **Finish.** Then compile the app, launch it on your physical device, and you
    should see something pleasant in your app tray and in the app's action bar.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此屏幕警告您将覆盖以前的文件，并再次以多种分辨率显示图像启动器文件。点击**完成**。然后编译应用程序，在您的物理设备上启动它，您应该在应用程序托盘和应用程序的操作栏中看到一些令人愉快的东西。
- en: Styling the user interface buttons
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面按钮的样式
- en: The final steps that we will be taking about are to modify our buttons and add
    some color to the text.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要采取的最终步骤是修改我们的按钮并给文本添加一些颜色。
- en: 'There are two steps required while creating the new buttons:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新按钮时，需要执行两个步骤：
- en: Create a `Drawable` folder with a new XML drawable file known as `button.xml`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res`文件夹内创建一个名为`button.xml`的新XML可绘制文件。
- en: Then connect the drawable resource file to the main Android layout file.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将可绘制资源文件连接到主Android布局文件。
- en: Create the `Drawable` folder by right-clicking on the `res` folder, which is
    available at `App` > `src` > `main` > `res`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击`res`文件夹创建`Drawable`文件夹，该文件夹位于`App` > `src` > `main` > `res`。
- en: After creating the `Drawable` folder within the `res` folder, we need to once
    again right-click on the new `drawable` folder and navigate to **New** > **Drawable
    Resource File**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在`res`文件夹内创建`Drawable`文件夹后，我们需要再次右键单击新的`drawable`文件夹，并导航到**新建** > **可绘制资源文件**。
- en: Name the file `buttonshape` and type `shape` as the root element, followed by
    clicking on **OK**.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件命名为`buttonshape`，将根元素类型设置为`shape`，然后点击**确定**。
- en: 'Within the `button.xml` file, replace the current code with the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在`button.xml`文件中，将当前代码替换为以下内容：
- en: '[PRE37]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: At this point, the buttons have not been modified yet, so we will go to the
    robot control activity layout file, which is available at `app` > `main` > `res`
    > `layout` > `activity_robot_control.xml`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，按钮尚未修改，因此我们将转到机器人控制活动布局文件，该文件位于`app` > `main` > `res` > `layout` > `activity_robot_control.xml`。
- en: Within this file, we will also be connecting the changes within the `buttonshape.xml`
    file to the main layout file, and we will be adding `margin` to the buttons so
    that there is enough spacing between the buttons for a presentable layout.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，我们还将把`buttonshape.xml`文件中的更改连接到主布局文件，并为按钮添加`margin`，以便在按钮之间有足够的间距，以形成一个可展示的布局。
- en: 'We will add the following code to all the button elements to give them the
    `buttonshape` styling:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向所有按钮元素添加以下代码，以赋予它们`buttonshape`样式：
- en: '[PRE38]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After that, we will add the margins by adding the following code to the **Connect**,
    **Backward**, and **Forward** buttons:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将通过在**连接**、**后退**和**前进**按钮中添加以下代码来添加边距：
- en: '[PRE39]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For the left and right buttons, we will add the following code since they''re
    within a different kind of layout:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于左右按钮，由于它们位于不同类型的布局中，我们将添加以下代码：
- en: '[PRE40]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'At this point, you should have a layout that looks like the following screenshot
    on Nexus 4, which is more attractive and presentable to the user:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该有一个布局，看起来像以下截图中的Nexus 4，这对用户来说更吸引人，更易于展示：
- en: '![Styling the user interface buttons](img/0389OS_09_07.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面按钮的样式](img/0389OS_09_07.jpg)'
- en: How to go further
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进一步操作
- en: The Android application can be further enhanced with more refined controls that
    could quantify the exact angle by which you would like the robot to turn left
    or right. We can also extract data from the ultrasonic sensor and display it within
    the Android application to get data about the proximity to obstacles.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过添加更精细的控制来进一步改进Android应用程序，这些控制可以量化您希望机器人向左或向右转的确切角度。我们还可以从超声波传感器中提取数据，并在Android应用程序中显示，以获取关于障碍物接近程度的数据。
- en: In addition, the Android application will definitely benefit from the addition
    of a **Connection** dialog that shows the user all the available BLE devices,
    and the user can choose the BLE Chip connected to the robot. This will enhance
    user experience and, at the same time, provide a more stable connection with the
    robot, especially if you're working in an environment surrounded by other BLE
    transmitters.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Android应用程序将肯定从添加一个**连接**对话框中受益，该对话框显示用户所有可用的BLE设备，用户可以选择连接到机器人的BLE芯片。这将增强用户体验，同时提供与机器人更稳定的连接，尤其是在您在一个周围有其他BLE发射器的环境中工作时。
- en: Last but not least, the reader can also go ahead and do further modifications
    to the user interface and layout to make the app even more attractive and presentable.
    Our main recommendation is to follow the design guidelines available at [http://developer.android.com](http://developer.android.com).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，读者还可以进一步修改用户界面和布局，使应用程序更具吸引力和可展示性。我们的主要建议是遵循[http://developer.android.com](http://developer.android.com)上可用的设计指南。
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we managed to create our very own mobile robot together with
    a companion Android application that we can use to control our robot.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功创建了自己的移动机器人，并附带了一个Android应用程序，我们可以使用它来控制我们的机器人。
- en: We achieved this step by step by setting up an Arduino-enabled robot and coding
    the companion Android application. It uses the BLE software and hardware of an
    Android physical device running on Android 4.3 or higher.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置一个Arduino启用的机器人和编写配套的Android应用程序逐步实现了这一点。它使用运行在Android 4.3或更高版本的Android物理设备的BLE软件和硬件。
- en: In the final chapter, we will consider a more direct form of user interaction,
    by measuring our pulse rate using Android, Arduino, and a specific sensor.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将考虑一种更直接的用户交互形式，通过使用Android、Arduino和特定传感器来测量我们的脉搏率。
