["```swift\n        @IBOutlet weak var inputTextField: UITextField!\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            self.inputTextField.becomeFirstResponder()\n        }\n    ```", "```swift\n        @IBOutlet var button0: UIButton!\n        @IBOutlet var button1: UIButton!\n        @IBOutlet var label:UILabel!\n    ```", "```swift\n        @IBAction func addBit(sender: UIButton){\n        }\n    ```", "```swift\n        var currentBinaryText:String = \"\"\n        var currentBinaryNumber:Int = 0\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            // Perform custom UI setup here\n     var geekNib = UINib(nibName: \"Geekboard\", bundle: nil)\n     self.view = geekNib.instantiateWithOwner(self, options: nil)[0] as UIView\n     self.label.text = currentBinaryText\n            self.nextKeyboardButton = UIButton.buttonWithType(.System) as UIButton\n    â€¦\n    ```", "```swift\n        @IBAction func addBit(sender: UIButton){\n            var number: Int\n            switch sender{\n            case button0:\n                number = 0\n            case button1:\n                number = 1\n            default:\n                return\n            }\n            currentBinaryText += \"\\(number)\"\n            currentBinaryNumber = currentBinaryNumber * 2 + number\n            if countElements(currentBinaryText) == 8 {\n                var proxy = textDocumentProxy as UITextDocumentProxy\n                proxy.insertText(String(UnicodeScalar(currentBinaryNumber)))\n\n                currentBinaryNumber = 0\n                currentBinaryText = \"\"\n            }\n            self.label.text = currentBinaryText\n        }\n    ```", "```swift\n    class FrequencyData: CustomStringConvertable {\n        var description: String {\n            switch self.time {\n            case 0 ..< 60:\n                return \"Every \\(self.time) minutes\"\n            case 60 ..< (24 * 60):\n                return \"Every \\(self.time/60) hours\"\n            default:\n                return \"Every \\(self.time/60/24) days\"\n            }\n        }\n\n        var time:Int // minutes\n\n        init(time:Int){\n            self.time = time\n        }   \n    }\n    ```", "```swift\n        @IBOutlet var label:WKInterfaceLabel!\n    ```", "```swift\n        var timer:NSTimer?\n        var remainingTime:Int?\n        var context:AnyObject?\n        var options = [FrequencyData(time: 2), FrequencyData(time:4 * 60), FrequencyData(time: 8 * 60), FrequencyData(time: 24 * 60)]\n    ```", "```swift\n        override func awakeWithContext(context: AnyObject?) {\n            super.awakeWithContext(context)\n            self.context = context\n        }\n    ```", "```swift\n        override func willActivate() {\n            super.willActivate()\n            let texts = options.map({ (freq) -> String in\n                return freq.description\n            })\n            self.presentTextInputControllerWithSuggestions(texts, allowedInputMode: WKTextInputMode.Plain, completion: {\n            selections in\n               var index = find(texts, selections[0] as String)!\n                var frequency = self.options[index]\n                self.timer?.invalidate()\n                self.remainingTime = frequency.time * 60\n                self.timer = NSTimer.scheduledTimerWithTimeInterval(1, target: self, selector: Selector(\"tick\"), userInfo: nil, repeats: true)\n            })\n        }\n    ```", "```swift\n        func tick(){\n            var rt = remainingTime!\n            let formatter = NSDateComponentsFormatter()\n            formatter.unitsStyle = .Short\n            let components = NSDateComponents()\n            components.second = rt % 60\n            rt = rt / 60\n            components.minute = rt % 60\n            rt = rt / 60\n            components.hour = rt % 24\n            rt = rt / 24\n            components.day = rt\n            if components.hour > 6 {\n                label.setText(\"Still have time\")\n            }else if components.hour == 0 && components.minute == 0{\n                label.setText(\"A few secs: \\(components.second)\")\n            }else {\n                label.setText( formatter.stringFromDateComponents(components))\n            }\n            remainingTime!--\n            if(remainingTime == 0){\n\n                presentControllerWithName(\"its_time\", context: self.context)\n                timer?.invalidate()\n            }\n        }\n    ```", "```swift\n        @IBOutlet var imageView: UIImageView!\n        @IBAction func takePhoto(sender: UIButton) {\n        }\n        @IBAction func sepia(sender: AnyObject) {\n        }\n        @IBAction func blur(sender: AnyObject) {\n        }\n        @IBAction func dots(sender: AnyObject) {\n        }\n    ```", "```swift\n        var image:UIImage?\n    ```", "```swift\n    class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    ```", "```swift\n    import CoreImage\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            if !UIImagePickerController.isSourceTypeAvailable(.Camera){\n                UIAlertView(title: \"Error\", message: \"There is no camera\", delegate: nil , cancelButtonTitle: \"OK\").show()\n            }\n        }\n    ```", "```swift\n        @IBAction func takePhoto(sender: UIButton) {\n            let imagePicker = UIImagePickerController()\n            imagePicker.delegate = self\n            imagePicker.allowsEditing = true\n            imagePicker.sourceType = .Camera\n            self.presentViewController(imagePicker, animated: true, completion: nil)\n        }\n    ```", "```swift\n        func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [NSObject : AnyObject]){\n            image = info[UIImagePickerControllerEditedImage] as? UIImage\n            self.imageView.image = image;\n            picker.dismissViewControllerAnimated(true, completion: nil)\n        }\n        func imagePickerControllerDidCancel(picker: UIImagePickerController){\n            picker.dismissViewControllerAnimated(true, completion: nil)\n        }\n    ```", "```swift\n        @IBAction func sepia(sender: AnyObject) {\n            if image != nil {\n                var ciImage = CIImage(image: image)\n                let filter = CIFilter(name: \"CISepiaTone\")\n                filter.setValue(ciImage, forKey: kCIInputImageKey)\n                filter.setValue(0.8, forKey: \"inputIntensity\")\n                ciImage = filter.outputImage\n                self.imageView.image = UIImage(CIImage: ciImage)\n            }\n        }\n        @IBAction func dots(sender: AnyObject) {\n            if image != nil {\n                var ciImage = CIImage(image: image)\n                let filter = CIFilter(name: \"CIDotScreen\")\n                filter.setValue(ciImage, forKey: kCIInputImageKey)\n                ciImage = filter.outputImage\n                self.imageView.image = UIImage(CIImage: ciImage)\n            }\n        }\n        @IBAction func blur(sender: AnyObject) {\n            if image != nil {\n                var ciImage = CIImage(image: image)\n                let filter = CIFilter(name: \"CIGaussianBlur\")\n                filter.setValue(ciImage, forKey: kCIInputImageKey)\n                ciImage = filter.outputImage\n                self.imageView.image = UIImage(CIImage: ciImage)\n            }\n        }\n    ```", "```swift\n    class FilmData {\n        var name:String\n        var year:Int?\n        var director:String?\n        var score:Int?\n        var opinion = \"\"\n\n        init(name:String){\n            self.name = name\n        }\n    }\n    ```", "```swift\n        @IBOutlet var titleLabel: NSTextField!\n        @IBOutlet var directorLabel: NSTextField!\n        @IBOutlet var yearLabel: NSTextField!\n        @IBOutlet var scoreLabel: NSTextField!\n        @IBOutlet var opinionLabel: NSTextField!\n    ```", "```swift\n    func application(application: NSApplication, willContinueUserActivityWithType userActivityType: String) -> Bool {\n            return userActivityType == \"com.packtpub.editingfilm\"\n        }\n\n        func application(application: NSApplication, continueUserActivity userActivity: NSUserActivity, restorationHandler: ([AnyObject]!) -> Void) -> Bool {\n            func setField (fieldName:String, uiField:NSTextField) {\n                if let value = userActivity.userInfo![fieldName] as? String {\n                    uiField.stringValue = value\n                }else if let value = userActivity.userInfo![fieldName] as? Int {\n                    uiField.stringValue = String(value)\n                }\n                else{\n                    uiField.stringValue = \"-\"\n                }\n            }\n            setField(\"title\", titleLabel)\n            setField(\"director\", directorLabel)\n            setField(\"year\", yearLabel)\n            setField(\"score\", scoreLabel)\n            setField(\"opinion\", opinionLabel)\n\n            return true\n        }\n    ```", "```swift\n    class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    ```", "```swift\n        let movies = createBasicMovieArray()\n    ```", "```swift\n    private func createBasicMovieArray() -> [FilmData] {\n        var movieArray = [FilmData]()\n\n        var filmData = FilmData(name: \"A Clockwork Orange\")\n        filmData.year = 1971\n        filmData.director = \"Stanley Kubrick\"\n        movieArray.append(filmData)\n\n        filmData = FilmData(name: \"Monty Python and the Holy Grail\")\n        filmData.year = 1975\n        filmData.director = \"Terry Gilliam\"\n        movieArray.append(filmData)\n\n        filmData = FilmData(name: \"Kill Bill\")\n        filmData.year = 2003\n        filmData.director = \"Quentin Tarantino\"\n        movieArray.append(filmData)\n\n        filmData = FilmData(name: \"Ghost Busters\")\n        filmData.year = 1984\n        movieArray.append(filmData)\n\n        return movieArray\n    }\n    ```", "```swift\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int{\n            return movies.count\n        }\n\n        func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{\n            var cell  = tableView.dequeueReusableCellWithIdentifier(\"filmcell\") as? UITableViewCell\n\n            if (cell == nil) {\n                cell = UITableViewCell(style: UITableViewCellStyle.Subtitle, reuseIdentifier: \"filmcell\")\n            }\n\n            let currentFilm = movies[indexPath.row]\n            cell!.textLabel?.text = currentFilm.name\n            let unknown = \"????\"\n            cell!.detailTextLabel?.text = \"\\(currentFilm.year != nil ? String(currentFilm.year!) : unknown) - \\(currentFilm.director != nil ? currentFilm.director! : unknown)\"\n\n            return cell!\n        }\n    ```", "```swift\n        func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {\n            var filmDetailViewController = self.storyboard?.instantiateViewControllerWithIdentifier(\"film_detail\") as FilmDetailViewController\n            filmDetailViewController.film = movies[indexPath.row]\n            self.navigationController?.pushViewController(filmDetailViewController, animated: true)\n        }\n    ```", "```swift\n        @IBOutlet var movieTitle: UILabel!\n        @IBOutlet var director: UILabel!\n        @IBOutlet var year: UILabel!\n        @IBOutlet var score: UILabel!\n        @IBOutlet var opinion: UITextView!\n        @IBOutlet var stepper: UIStepper!\n    ```", "```swift\n    class FilmDetailViewController: UIViewController, UITextViewDelegate {\n    ```", "```swift\n        @IBAction func done(sender: AnyObject) {\n        }\n        @IBAction func changeScore(sender: UIStepper) {\n        }\n    ```", "```swift\n        var film:FilmData?\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            movieTitle.text = film?.name\n            director.text = film?.director\n            year.text = film?.year != nil ? \"\\(film!.year!)\" : \"???\"\n            if let score = film?.score {\n                self.score.text = String(score)\n                self.stepper.value = Double(score)\n            }else {\n                self.score.text = \"\"\n                self.stepper.value = 1\n            }\n            self.opinion.text = film?.opinion\n            self.userActivity = NSUserActivity(activityType: \"com.packtpub.editingfilm\")\n            self.userActivity!.userInfo = [NSObject: AnyObject]()\n        }\n    ```", "```swift\n        @IBAction func done(sender: AnyObject) {\n            self.userActivity!.invalidate()\n            self.navigationController?.popViewControllerAnimated(true)\n        }\n        @IBAction func changeScore(sender: UIStepper) {\n            self.film?.score = Int(sender.value)\n            self.score.text = String(self.film!.score!)\n            self.updateUserActivityState(self.userActivity!)\n        }\n        func textViewDidChange(textView: UITextView) {\n             film?.opinion = self.opinion.text\n            self.updateUserActivityState(self.userActivity!)\n        }\n    ```", "```swift\n        override func updateUserActivityState(activity: NSUserActivity) {\n            self.userActivity!.userInfo![\"title\"] = film?.name\n            self.userActivity!.userInfo![\"year\"] = film?.year\n            self.userActivity!.userInfo![\"director\"] = film?.director\n            self.userActivity!.userInfo![\"score\"] = film?.score\n            self.userActivity!.userInfo![\"opinion\"] = film?.opinion\n            super.updateUserActivityState(activity)\n        }\n    ```", "```swift\n        @IBOutlet var mapView: MKMapView!\n        @IBOutlet var positionLabel: UILabel!\n    ```", "```swift\n    import UIKit\n    import MapKit\n    import CoreLocation\n    ```", "```swift\n    class ViewController: UIViewController, CLLocationManagerDelegate, MKMapViewDelegate {\n    ```", "```swift\n        var manager = CLLocationManager()\n        var locationsStack = [CLLocation]()\n        var follow = true\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n\n            manager.delegate = self\n            manager.desiredAccuracy = kCLLocationAccuracyBest\n            manager.requestAlwaysAuthorization()\n            manager.startUpdatingLocation()\n\n            mapView.delegate = self\n            mapView.mapType = .Standard\n            mapView.showsUserLocation = true\n        }\n    ```", "```swift\n        func locationManager(manager:CLLocationManager, didUpdateLocations locations:[AnyObject]) {\n\n            var currentLocation = locations[0] as CLLocation\n            positionLabel.text = \"\\(currentLocation.coordinate.latitude), \\(currentLocation.coordinate.longitude)\"\n            locationsStack.append(currentLocation)\n\n            if follow {\n                var currentRegion = MKCoordinateRegion(center: mapView.userLocation.coordinate, span: MKCoordinateSpanMake(0.01, 0.01))\n                mapView.setRegion(currentRegion, animated: true)\n            }\n\n            if locationsStack.count > 1{\n                var destination = locationsStack.count - 2\n                let sourceCoord = locationsStack.last!.coordinate\n                let destinationCoord = locationsStack[destination].coordinate\n                var coords = [sourceCoord, destinationCoord]\n                let polyline = MKPolyline(coordinates: &coords, count: coords.count)\n                mapView.addOverlay(polyline)\n            }\n\n        }\n    ```", "```swift\n        func mapView(mapView: MKMapView!, rendererForOverlay overlay: MKOverlay!) -> MKOverlayRenderer! {\n            if overlay is MKPolyline {\n                var polylineRenderer = MKPolylineRenderer(overlay: overlay)\n                polylineRenderer.strokeColor = UIColor.blueColor()\n                polylineRenderer.lineWidth = 3\n                return polylineRenderer\n            }\n            return nil\n        }\n    ```", "```swift\n        @IBAction func followAction(sender: UIButton) {\n            follow = !follow\n            if  follow {\n                sender.setTitle(\"Stop following\", forState: .Normal)\n            }else {\n                sender.setTitle(\"Resume following\", forState: .Normal)\n            }\n        }\n    ```", "```swift\n    \"Rate\" = \"Rate: %@\";\n    \"Total\" = \"Total: %@\";\n    \"Choose Currency\" = \"Choose a currency\";\n    \"flagicon\" = \"english\";\n    \"Cancel\" = \"Cancel\";\n    ```", "```swift\n        @IBOutlet var fromButton: UIButton!\n        @IBOutlet var toButton: UIButton!\n        @IBOutlet var amountTextField: UITextField!\n        @IBOutlet var dateLabel: UILabel!\n        @IBOutlet var rateLabel: UILabel!\n        @IBOutlet var totalLabel: UILabel!\n        @IBOutlet var flagImage: UIImageView!\n    ```", "```swift\n    class ViewController: UIViewController, UITextFieldDelegate {\n    ```", "```swift\n        let currencies = [\"AUD\", \"BGN\", \"BRL\", \"CAD\", \"CHF\",\n            \"CNY\", \"CZK\", \"DKK\", \"EUR\", \"GBP\", \"HKD\",\n            \"HRK\", \"HUF\", \"IDR\", \"ILS\", \"INR\", \"JPY\", \"KRW\",\n            \"MXN\", \"MYR\", \"NOK\", \"NZD\", \"PHP\", \"PLN\", \"RON\",\n            \"RUB\", \"SEK\", \"SGD\", \"THB\", \"TRY\", \"USD\", \"ZAR\"]\n        let baseurl = \"http://api.fixer.io/latest\"\n        var fromCurrency = \"USD\"\n        var toCurrency = \"EUR\"\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            flagImage.image = UIImage(named: NSLocalizedString(\"flagicon\", comment: \"\"))\n            setup()\n        }\n    ```", "```swift\n        private func setup(){\n            fromButton.setTitle(fromCurrency, forState: .Normal)\n            toButton.setTitle(toCurrency, forState: .Normal)\n            var session = NSURLSession.sharedSession()\n            var url = NSURL(string: \"\\(baseurl)?base=\\(fromCurrency)&symbols=\\(toCurrency)\")!\n\n            session.dataTaskWithURL(url, completionHandler: { (data, response, error) -> Void in\n            var json = {}\n                do {\n            json = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.MutableContainers) as [String:AnyObject]\n        } catch {\n            let alert = UIAlertController(title: \"Error\", message: \"Error parsing JSON\", preferredStyle:.Alert)\n            self.presentViewController(alert, animated: true, completion: nil)\n        }\n                let dateComponentsArray = (json[\"date\"] as String).componentsSeparatedByString(\"-\")\n                let dateComponents = NSDateComponents()\n                dateComponents.year   = dateComponentsArray[0].toInt()!\n                dateComponents.month  = dateComponentsArray[1].toInt()!\n                dateComponents.day    = dateComponentsArray[2].toInt()!\n\n                let rates = json[\"rates\"] as [String:Double]\n                let date = NSCalendar.currentCalendar().dateFromComponents(dateComponents)\n                let ratio = rates[self.toCurrency]\n                let amount = self.amountTextField.text == \"\" ? 1.0 : (self.amountTextField.text as NSString).doubleValue\n\n                NSOperationQueue.mainQueue().addOperationWithBlock({ () -> Void in\n                    let dateFormatter = NSDateFormatter()\n                    dateFormatter.dateStyle = .LongStyle\n                    self.dateLabel.text = dateFormatter.stringFromDate(date!)\n\n                    let currencyFormatter = NSNumberFormatter()\n                    currencyFormatter.currencyCode = self.toCurrency\n                    currencyFormatter.numberStyle = .CurrencyStyle\n                    self.rateLabel.text = String(format: NSLocalizedString(\"Rate\", comment: \"\"), arguments: [currencyFormatter.stringFromNumber(ratio!)!])\n                    let total = amount * ratio!\n\n                    self.totalLabel.text = String(format: NSLocalizedString(\"Total\", comment: \"\"), arguments: [currencyFormatter.stringFromNumber(total)!])\n\n                })\n            }).resume()\n\n        }\n    ```", "```swift\n        @IBAction func chooseCurrency(sender: UIButton) {\n            let alertController = UIAlertController(title: NSLocalizedString(\"Choose Currency\", comment: \"\"), message: nil, preferredStyle: .ActionSheet)\n\n            let cancelAction = UIAlertAction(title: NSLocalizedString(\"Cancel\", comment: \"\"), style: .Cancel) { (action) in\n            }\n            alertController.addAction(cancelAction)\n\n            for currency in currencies {\n                let currAction = UIAlertAction(title: currency, style: .Default) { (action) in\n                    if sender == self.fromButton {\n                        self.fromCurrency = action.title\n                    }else {\n                        self.toCurrency = action.title\n                    }\n                    self.setup()\n                }\n                alertController.addAction(currAction)\n            }\n\n            self.presentViewController(alertController, animated: true, completion: nil)\n        }\n    ```", "```swift\n        @IBAction func touchup(sender: UIControl) {\n            self.amountTextField.resignFirstResponder()\n            self.setup()\n        }\n    ```", "```swift\n        func textFieldShouldReturn(textField: UITextField) -> Bool {\n            self.touchup(self.view as UIControl)\n            return true\n        }\n    ```", "```swift\n    /* Class = \"UILabel\"; text = \"Currency Converter\"; ObjectID = \"hFW-19-dID\"; */\n    \"hFW-19-dID.text\" = \"Conversor de Monedas\";\n\n    /* Class = \"UITextField\"; placeholder = \"Amount of money\"; ObjectID = \"vzh-tY-rr3\"; */\n    \"vzh-tY-rr3.placeholder\" = \"Cantidad de dinero\";\n    ```", "```swift\n    \"Rate\" = \"Tasa de conversiÃ³n: %@\";\n    \"Total\" = \"Total: %@\";\n    \"Choose Currency\" = \"Elija la moneda\";\n    \"flagicon\" = \"spanish\";\n    \"Cancel\" = \"Cancelar\";\n    ```", "```swift\n    extension UIViewController {\n        public override static func initialize() {\n            struct Static {\n                static var token: dispatch_once_t = 0\n            }\n\n            dispatch_once(&Static.token) {\n                let originalSelector = Selector(\"viewWillAppear:\")\n                let swizzledSelector = Selector(\"ViewWillDefinitelyAppear:\")\n\n                let originalMethod = class_getInstanceMethod(self, originalSelector)\n                let swizzledMethod = class_getInstanceMethod(self, swizzledSelector)\n\n                let didAddMethod = class_addMethod(self, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))\n\n                if didAddMethod {\n                    class_replaceMethod(self, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))\n                } else {\n                    method_exchangeImplementations(originalMethod, swizzledMethod);\n                }\n            }\n        }\n    }\n    ```", "```swift\n    // Verify this is not a subclass\n    if self !== UIViewController.self {\n        return\n    }\n    ```", "```swift\n    extension UIViewController {\n\n        private struct AssociatedKeys {\n            static var DescriptiveName = \"nsh_DescriptiveName\"\n        }\n\n        var descriptiveName: String? {\n            get {\n                return objc_getAssociatedObject(self, &AssociatedKeys.DescriptiveName) as? String\n            }\n\n            set {\n                if let newValue = newValue {\n                    objc_setAssociatedObject(\n                        self,\n                        &AssociatedKeys.DescriptiveName,\n                        newValue as NSString?,\n                        .OBJC_ASSOCIATION_RETAIN_NONATOMIC\n                    )\n                }\n            }\n        }\n\n    }\n    ```"]