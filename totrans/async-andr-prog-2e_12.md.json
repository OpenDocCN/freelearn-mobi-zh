["```java\npublic interface Observer<T> {\n\n    void onCompleted();\n    void onError(Throwable e);\n    void onNext(T t);\n}\n```", "```java\nabstract class Subscriber<T>\n   implements Observer<T>, Subscription\n\npublic interface Subscription {\n\n   void unsubscribe();\n   boolean isUnsubscribed();\n}\n```", "```java\ndependencies {\n    â€¦\n    compile 'io.reactivex:rxandroid:1.1.0'\n    compile 'io.reactivex:rxjava:1.1.0'\n}\n```", "```java\nObservable<String> myObservable =\n  Observable.from(Arrays.asList(\"Hello from RxJava\",\n                                \"Welcome...\",\n                                \"Goodbye\"));\n```", "```java\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n\n  @Override\n  public void onCompleted() {\n    Log.i(TAG, \"Rx Java events completed\");\n  }\n\n  @Override\n  public void onError(Throwable e) {\n    Log.e(TAG, \"Error found processing stream\", e);\n  }\n\n  @Override\n  public void onNext(String s) {\n    Log.i(TAG, \"New event -\" + s);\n  }\n};\n```", "```java\nmyObservable.subscribe(mySubscriber);\n```", "```java\nObservable<Integer> myObservable = Observable.create(\n   new Observable.OnSubscribe<Integer>() {\n      @Override\n      public void call(Subscriber<? super Integer> sub) {\n          // Emitting Numbers\n sub.onNext(10);\n sub.onNext(3);\n sub.onNext(9);\n          // Stream completed with success\n sub.onCompleted();\n      }\n  }\n);\n```", "```java\nAction1<Integer> onNextAction = new Action1<Integer>() {\n  @Override\n  public void call(Integer s) { Log.i(TAG, \"New number :\" + s); }\n};\nAction1<Throwable> onError = new Action1<Throwable>() {\n  @Override\n  public void call(Throwable t) {\n     Log.e(TAG, \"Error: \" + t.getMessage(), t);\n  }\n};\nAction0 onComplete = new Action0() {\n  @Override\n  public void call() { Log.i(TAG, \"Rx number stream completed\")}\n};\n\nmyObservable.subscribe(onNextAction, onError, onComplete);\n```", "```java\n    Observable<Integer>.just(1,2,3)\n    ```", "```java\n    Observable.range(1,10);\n    ```", "```java\nString content = \"This is an example \\n \" +\n                 \"Looking for lines with the word RxJava\\n\" +\n                 \"We are finished.\";\nObservable\n  .just(content)\n  .flatMap(new Func1<String, Observable<String>>() {\n    @Override\n    public Observable<String> call(final String content) {\n      return Observable.from(content.split(\"\\n\"));\n    }})\n  .filter(new Func1<String, Boolean>() {\n       @Override\n    public Boolean call(final String line) {\n      return line.contains(\"RxJava\");\n    }\n  })\n  .count()\n  .subscribe(new Subscriber<Integer>() {\n    ...\n    @Override\n    public void onNext(Integer s) {\n      Log.i(TAG, \"Number of Lines \" + s);\n    }\n  });\n```", "```java\nObservable<String> getTextFromNetwork(final String url) {\n\n  return Observable.create(\n    new Observable.OnSubscribe<String>() {\n      @Override\n      public void call(Subscriber<? super String> sub) {\n        try {\n          String text = downloadText(url);\n sub.onNext(text);\n sub.onCompleted();\n\n        } catch (Throwable t) {\n sub.onError(t);\n        }\n      }\n    }\n  );\n}\n```", "```java\nclass MySubscriber extends Subscriber<String> {\n\n  @Override\n  public void onCompleted() {}\n\n  @Override\n  public void onError(Throwable e) {\n     // Shows a Toast on Error\n     Toast.makeText(RxSchedulerActivity.this,\n                    e.getMessage(),\n                    Toast.LENGTH_LONG).show();\n    Log.e(TAG, \"Error retrieving \", e);  \n  }\n\n  @Override\n  public void onNext(String text) {\n    // Updates the UI on Success\n    EditText textFrame = (EditText)findViewById(R.id.text);\n    textFrame.setText(text);\n  }\n};   \n\n   ...\n\ngetTextFromNetwork(\"http://demo1472539.mockable.io/mytext\")\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(new MySubscriber())\n);\n```", "```java\nSubscription subscription = getTextFromNetwork(\n               \"http://demo1472539.mockable.io/mytet\")\n               ...\n               .subscribe(new MySubscriber());\n```", "```java\nprotected void onPause() {\n  super.onPause();\n  if ((subscription != null) && (isFinishing()))\n    subscription.unsubscribe();\n}\n```", "```java\nObservable<String> translateOnNetwork(final String url,\n                                      final String toTranslate) {\n  return Observable.create(\n    new Observable.OnSubscribe<String>() {\n      @Override\n      public void call(Subscriber<? super String> ts){\n        try {\n          String text = translateText(\n            \"http://demo1472539.mockable.io/translate\",\n             toTranslate);\n\n sub.onNext(text);\n sub.onCompleted();\n        } catch (Throwable t) {\n sub.onError(t);\n        }\n      }\n    }\n  );\n}\n```", "```java\ngetTextFromNetwork(RETRIEVE_TEXT_URL)\n  .flatMap(new Func1<String, Observable<String>>() {\n    @Override\n    public Observable<String> call(String toTranslate) {\n      return translateOnNetwork(TRANSLATE_URL, toTranslate);\n    }\n  })\n  .subscribeOn(Schedulers.io())\n  .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(new MySubscriber());\n```", "```java\nObservable.just(RETRIEVE_TEXT_URL)\n  .doOnNext(new Action1<String>() { // Runing on the main Thread\n    @Override\n    public void call(String url) {\n      progress = ProgressDialog.show(RxSchedulerActivity.this,\n                 \"Loading\",\n                 \"Performing async operation\", true);\n      Log.i(TAG, \"Network IO Operation will start \"+ tmark());\n    }\n  })\n  .observeOn(Schedulers.io()) // Running on a background Thread\n  .flatMap(new Func1<String, Observable<String>>() {\n    @Override\n    public Observable<String> call(String url) {\n      return getTextFromNetwork(url);\n    }\n  })\n  .doOnNext(new Action1<String>() {\n    @Override\n    public void call(String text) {\n      Log.i(TAG, \"Text retrieved w/ success \" + tMark());\n      Log.i(TAG, \"Translating the text \" + tMark());\n    }\n  })\n  .flatMap(new Func1<String, Observable<String>>() {\n    @Override\n    public Observable<String> call(String toTranslate) {\n      return translateOnNetwork(TRANSLATE_URL, toTranslate);\n    }\n  })\n  .doOnNext(new Action1<String>() {\n    @Override\n    public void call(String translatedText) {\n      Log.i(TAG, \"Translation finished \" + tMark());\n    }\n  })\n  .observeOn(\n    AndroidSchedulers.mainThread() // Executing on main Thread\n   )\n  .doOnTerminate(new Action0() {\n    @Override\n    public void call() {  \n      if (progress != null)\n        progress.dismiss();\n      Log.i(TAG, \"Dismissing dialog \" + tMark());\n    }\n  })\n  // Starts the execution on the main Thread\n  .subscribeOn(AndroidSchedulers.mainThread())\n  .subscribe(new MySubscriber());\n```", "```java\n...54.390 I Network IO Operation will start T[main]\n...54.850 I Text retrieved w/ success T[RxCachedThreadScheduler-1]\n...54.850 I Translating the text T[RxCachedThreadScheduler-1]\n...55.160 I Translation finished T[RxCachedThreadScheduler-1]\n...55.200 I Dismissing dialog on T[main]\n```", "```java\n // Success callback invoked on success\n void onSuccess(T value);\n\n // Callback to notify that an unrecoverable error has occurred\n void onError(Throwable error);\n```", "```java\nSingle<JSONObject> postSingle = Single.create(\n  new Single.OnSubscribe<JSONObject>() {\n    @Override\n    public void call(SingleSubscriber<? super JSONObject> sub) {\n      try {\n        // Retrieve the Post content JSON Object\n        sub.onSuccess(\n         getJson(\"http://demo1472539.mockable.io/post\"));\n      } catch (Throwable t) {\n        sub.onError(t);\n      }\n    }\n  }\n).subscribeOn(Schedulers.newThread());\n\nSingle<JSONObject> authorSingle = Single.create(\n  new Single.OnSubscribe<JSONObject>() {\n    @Override\n    public void call(SingleSubscriber<? super JSONObject> sub) {\n      try {\n        // Retrieve the Author content JSON Object\n        sub.onSuccess(\n          getJson(\"http://demo1472539.mockable.io/author\"));\n      } catch (Throwable t) {\n        sub.onError(t);\n      }\n    }\n  }\n).subscribeOn(Schedulers.newThread());\n```", "```java\n   Single<R> zip(Single<T1> o1, // First Single\n                 Single<T2> o2, // Second Single\n                 final Func2<T1,T2,R> zipFunction)\n```", "```java\nSingle.zip(postSingle, authorSingle,\n           new Func2<JSONObject, JSONObject, String>() {\n  @Override\n  public String call(JSONObject post, JSONObject author) {\n    String result = null;\n\n    // Create the Root JSON Object\n    JSONObject rootObj = new JSONObject();\n    try {\n      // Add the post object to root JSON Object\n      rootObj.put(\"post\", post);\n      // Add the author object to root JSON Object\n      rootObj.put(\"author\", author);\n      // Save the JSON Object, Encode the JSON Object\n      // into a String\n       result = rootObj.toString(2);\n    } catch (Exception e) {\n       Exceptions.propagate(e);\n    }\n    return result;\n  }\n})\n.observeOn(AndroidSchedulers.mainThread())\n.subscribe(subscriber);\n```", "```java\n.040 I ...: Getting the Post Object on RxNewThreadScheduler-1\n.050 I ...: Getting the Author Object on RxNewThreadScheduler-2\n.660 I ...: Combining objects on RxNewThreadScheduler-2\n```", "```java\nSingleSubscriber<String> subscriber =\n  new SingleSubscriber<String>() {\n  ...\n  @Override\n  public void onSuccess(String result) { // Updates the UI }\n};\n```", "```java\npublic class TextChangeOnSubscribe\n implements OnSubscribe<String> {\n  // Don't Prevent the GC from recycling the Activity\n  WeakReference<EditText> editText;\n\n  // Receive the EditText View to verify Changes\n  public TextChangeOnSubscribe(EditText editText) {\n    this.editText = new WeakReference<EditText>(editText);\n  }\n\n  @Override\n  public void call(final Subscriber<? super String> subscriber) {\n    final TextWatcher watcher = new TextWatcher() {\n\n      @Override\n      public void onTextChanged(\n        CharSequence s, int start, int before, int count) {\n\n        // Emit a new String when the text changes\n        if (!subscriber.isUnsubscribed()) {\n subscriber.onNext(s.toString());\n }\n      }\n    };\n    // Remove the Text change Watcher when the subscription ends\n    subscriber.add(new MainThreadSubscription() {\n      @Override\n      protected void onUnsubscribe() {\n        editText.get().removeTextChangedListener(watcher);\n      }\n    });\n    // Sets the Watcher on the EditField\n    editText.get().addTextChangedListener(watcher);\n    subscriber.onNext(\"\");\n  }\n};\n\n...\nEditText search = (EditText) findViewById(R.id.searchTv);\nObservable<String> textChangeObs = Observable.\n    create(new TextChangeOnSubscribe(search))\n                                                     .debounce(400, TimeUnit.MILLISECONDS);\n```", "```java\nList<String> soccerTeams = Arrays.asList(\n  \"Real Madrid\",\"Barcelona\",\"Sporting CP\",...,\"Chelsea\");\n\nsubcription = Observable.combineLatest(\n  // Observables\n Observable.just(soccerTeams), textChangeObs,\n  // Combine Function\n  new Func2<List<String>, String, List<String>>() {\n\n    // Filter the list with the filter String and sort the list\n    @Override\n    public List<String> call(List<String> fullList,\n                             String filter){\n      List<String> result = new ArrayList<String>();\n      for (String team : fullList) {\n        if (team.startsWith(filter)) {\n          result.add(team);\n        }\n      }\n // Sort the Collection\n      Collections.sort(result);\n      return result;\n    }\n  })\n .observeOn(AndroidSchedulers.mainThread())\n  .subscribe(new Action1<List<String>>() {\n    @Override\n    public void call(List<String> teams) {\n      // Update the Recycler View with a filtered list of Teams\n      mAdapter = new MyAdapter(teams);\n      mRecyclerView.setAdapter(mAdapter);\n    }\n  });\n```", "```java\npublic abstract class      Subject<T,R>\n                extends    Observable<R>\n                implements Observer<T>\n```", "```java\nPublishSubject<Integer> pubSubject = PublishSubject.create();\npubSubject.onNext(1);\npubSubject.onNext(2);\nSubscription subscription = pubSubject.doOnSubscribe(new Action0() {\n  @Override\n  public void call() {\n    Log.i(TAG, \"Observer subscribed to PublishSubject\");\n  }\n}).doOnUnsubscribe(new Action0() {\n  @Override\n  public void call() {\n    Log.i(TAG, \"Observer unsubscribed to PublishSubject\");\n  }\n}).subscribe(new Action1<Integer>() {\n  @Override\n  public void call(Integer integer) {\n    Log.i(TAG, \"New Event received from PublishSubject: \" + integer);\n  }\n});\npubSubject.onNext(3);\npubSubject.onNext(4);\nsubscription.unsubscribe();\npubSubject.onNext(5);\npubSubject.onCompleted();\n```", "```java\n... 43.230 I Observer subscribed to PublishSubject\n... 43.230 I New Event received from PublishSubject: 3\n... 43.230 I New Event received from PublishSubject: 4\n... 43.230 I Observer unsubscribed to PublishSubject\n```", "```java\n.600 I Observer subscribed to ReplaySubject\n.600 I New Event received from ReplaySubject: 1\n.600 I New Event received from ReplaySubject: 2\n.600 I New Event received from ReplaySubject: 3\n.600 I New Event received from ReplaySubject: 4\n.600 I Observer unsubscribed to ReplaySubject\n```"]