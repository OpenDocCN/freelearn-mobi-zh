["```swift\n{\n(<#parameters#>) -> <#return-type#> in <#statements#>\n} \n```", "```swift\nlet clos1 = { () -> Void in\n    print(\"Hello World\")\n} \n```", "```swift\nclos1() \n```", "```swift\nlet clos2 = {\n    (name: String) -> Void in \n    print(\"Hello \\(name)\")\n} \n```", "```swift\nclos2(\"Jon\") \n```", "```swift\nfunc testClosure(handler: (String) -> Void) { \n    handler(\"Dasher\")\n} \n```", "```swift\ntestClosure(handler: clos2) \n```", "```swift\nlet clos3 = {\n    (name: String) -> String in\n    return \"Hello \\(name)\"\n} \n```", "```swift\nvar message = clos3(\"Buddy\") \n```", "```swift\nfunc testFunction(num: Int, handler:() -> Void) { \n    for _ in 0..<num {\n        handler()\n    }\n} \n```", "```swift\nlet clos = { () -> Void in\n    print(\"Hello from standard syntax\")\n}\ntestFunction(num: 5, handler: clos) \n```", "```swift\ntestFunction(num: 5,handler: {print(\"Hello from Shorthand closure\")}) \n```", "```swift\ntestFunction(num: 5) {\n    print(\"Hello from Shorthand closure\")\n} \n```", "```swift\nfunc testFunction2(num: Int, handler: (_ : String)->Void) { \n    for _ in 0..<num {\n        handler(\"Me\")\n    }\n} \n```", "```swift\ntestFunction2(num: 5){ \n    print(\"Hello from \\($0)\")\n} \n```", "```swift\nlet clos5: (String, String) -> Void = { \n    print(\"\\($0) \\($1)\")\n} \n```", "```swift\nlet clos5b = { (String, String) in \n    print(\"\\($0) \\($1)\")\n} \n```", "```swift\nclos5(\"Hello\", \"Kara\") \n```", "```swift\nlet clos6: () -> () = { \n    print(\"Howdy\")\n} \n```", "```swift\nclos6() \n```", "```swift\nlet clos7 = {(first: Int, second: Int) -> Int in first + second } \n```", "```swift\nlet guests = [\"Jon\", \"Kailey\", \"Kara\"] \n```", "```swift\nguests.map { name in \n    print(\"Hello \\(name)\")\n} \n```", "```swift\nguests.map {\n    print(\"Hello \\($0)\")} \n```", "```swift\nvar messages = guests.map { \n    (name:String) -> String in\n    return \"Welcome \\(name)\"\n} \n```", "```swift\nfor message in messages { \n    print(\"\\(message)\")\n} \n```", "```swift\nlet greetGuest = { (name:String) -> Void in \n    print(\"Hello guest named \\(name)\")\n}\nlet sayGoodbye = { (name:String) -> Void in \n    print(\"Goodbye \\(name)\")\n} \n```", "```swift\nguests.map(greetGuest)\nguests.map(sayGoodbye) \n```", "```swift\nguests.map(greetGuest)\nguests2.map(greetGuest)\nguests.map(sayGoodbye)\nguests2.map(sayGoodbye) \n```", "```swift\nlet greetGuest2 = { \n    (name:String) -> Void in\n    if (name.hasPrefix(\"K\")) {\n        print(\"\\(name) is on the guest list\")\n    } else {\n        print(\"\\(name) was not invited\")\n    }\n} \n```", "```swift\nfunc temperatures(calculate:(Int)->Void) { \n    var tempArray = [72,74,76,68,70,72,66] \n    tempArray.map(calculate)\n} \n```", "```swift\nfunc testFunction() { \n    var total = 0\n    var count = 0\n    let addTemps = {\n        (num: Int) -> Void in \n        total += num \n        count += 1\n    }\n    temperatures(calculate: addTemps) \n    print(\"Total: \\(total)\")\n    print(\"Count: \\(count)\") \n    print(\"Average: \\(total/count)\")\n} \n```", "```swift\nTotal: 498\nCount: 7\nAverage: 71 \n```", "```swift\nvar numbers = [1,2,3,4,5,6,7,8,9,10]\nlet evenNum = numbers.subranges(where: { $0.isMultiple(of: 2) })\n//numbers[evenNum] contains 2,4,6,8,10 \n```", "```swift\nlet newNumbers = numbers.subrange(where: { $0 <= 6 }) \n```", "```swift\nlet capacity = 20\nlet diceRolls = Array<Int>(unsafeUninitializedCapacity: capacity) { buffer, initializedCount in\n    for x in 0..<capacity {\n        buffer[x] = Int.random(in: 1...6)\n    }\n    initializedCount = capacity\n} \n```", "```swift\n    let diceRolls = (0…20).map { _ in Int.random(in: 1…6) } \n    ```", "```swift\nstruct TestType {\n    typealias GetNumClosure = ((Int, Int) -> Int)\n    var numOne = 5 \n    var numTwo = 8\n    var results = 0;\n    mutating func getNum(handler: GetNumClosure) -> Int { \n        results = handler(numOne,numTwo)\n        print(\"Results: \\(results)\")\n        return results\n    }\n} \n```", "```swift\nvar max: TestType.GetNumClosure = { \n    if $0 > $1 {\n        return $0\n    } else { \n        return $1\n    }\n}\nvar min: TestType.GetNumClosure = { \n    if $0 < $1 {\n        return $0\n    } else {\n        return $1\n    }\n}\nvar multiply: TestType.GetNumClosure = { \n    return $0 * $1\n}\nvar second: TestType.GetNumClosure = { \n    return $1\n}\nvar answer: TestType.GetNumClosure = { \n    var _ = $0 + $1\n    return 42\n} \n```", "```swift\nvar _ = $0 + $1 \n```", "```swift\nvar answer: TestType.GetNumClosure = {\n    return 42\n} \n```", "```swift\nvar myType = TestType()\nmyType.getNum(handler: max)\nmyType.getNum(handler: min)\nmyType.getNum(handler: multiply)\nmyType.getNum(handler: second)\nmyType.getNum(handler: answer) \n```", "```swift\nFor Max: \nResults: 8\nFor Min: \nResults: 5\nFor Multiply: \nResults: 40\nFor Second: \nResults: 8\nFor Answer: \nResults: 42 \n```", "```swift\nclass TestType {\n    typealias ResultsClosure = ((String) -> Void)\n\n    func isGreater(numOne: Int, numTwo: Int, successHandler: ResultsClosure,failureHandler: ResultsClosure) {\n        if numOne > numTwo {\n            successHandler(\"\\(numOne) is greater than \\(numTwo)\")\n        }\n        else {\n            failureHandler(\"\\(numOne) is not greater than \\(numTwo)\")\n        }\n\n    }\n} \n```", "```swift\nvar success: TestType.ResultsClosure = { \n    print(\"Success: \\($0)\")\n}\nvar failure: TestType.ResultsClosure = {\n    print(\"Failure: \\($0)\")\n} \n```", "```swift\nvar test = TestType()\ntest.isGreater(numOne: 8, numTwo: 6, successHandler: success, failureHandler: failure) \n```", "```swift\nvar data = myWebClass.myWebServiceCall(someParameter) \n```"]