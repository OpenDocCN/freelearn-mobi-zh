["```kt\n<resources>\n  <declare-styleable name=\"SpendingGraphView\">\n    <attr name=\"strokeColor\" format=\"color\" />\n    <attr name=\"strokeWidth\" format=\"dimension\" />\n  </declare-styleable>\n</resources>\n```", "```kt\nprivate int strokeColor = Color.GREEN;\nprivate int strokeWidth = 2;\n```", "```kt\nprivate double[] spendingPerDay;\n```", "```kt\nprivate Path path = null;\nprivate Paint paint = null;\n```", "```kt\npublic SpendingGraphView(final Context context) {\n  super(context);\n  init(null, 0);\n}\n\npublic SpendingGraphView(\n    final Context context,\n    final AttributeSet attrs) {\n  super(context, attrs);\n  init(attrs, 0);\n}\n\npublic SpendingGraphView(\n    final Context context,\n    final AttributeSet attrs,\n    final int defStyle) {\n  super(context, attrs, defStyle);\n  init(attrs, defStyle);\n}\n```", "```kt\nprivate void init(final AttributeSet attrs, final int defStyle) {\n  final TypedArray a = getContext().obtainStyledAttributes(\n          attrs, R.styleable.SpendingGraphView, defStyle, 0);\n\n  strokeColor = a.getColor(\n          R.styleable.SpendingGraphView_strokeColor,\n          strokeColor);\n\n  strokeWidth = a.getDimensionPixelSize(\n          R.styleable.SpendingGraphView_strokeWidth,\n          strokeWidth\n  );\n\n  a.recycle();\n}\n```", "```kt\nprotected static double getMaximum(final double[] numbers) {\n  double max = 0;\n\n  for (final double n : numbers) {\n    max = Math.max(max, n);\n  }\n\n  return max;\n}\n```", "```kt\nprotected void invalidateGraph() {\n  if (spendingPerDay == null || spendingPerDay.length <= 1) {\n    path = null;\n    paint = null;\n    invalidate();\n\n    return;\n  }\n\n  final int paddingLeft = getPaddingLeft();\n  final int paddingTop = getPaddingTop();\n  final int paddingRight = getPaddingRight();\n  final int paddingBottom = getPaddingBottom();\n\n  final int contentWidth =\n        getWidth() - paddingLeft - paddingRight;\n  final int contentHeight =\n        getHeight() - paddingTop - paddingBottom;\n  final int graphHeight =\n        contentHeight - strokeWidth * 2;\n\n  final double graphMaximum = getMaximum(spendingPerDay);\n\n  final double stepSize = (double) contentWidth / (double) (spendingPerDay.length - 1);\n  final double scale = (double) graphHeight / graphMaximum;\n\n  path = new Path();\n  path.moveTo(paddingLeft, paddingTop);\n\n  paint = new Paint();\n  paint.setStrokeWidth(strokeWidth);\n  paint.setColor(strokeColor);\n  paint.setFlags(Paint.ANTI_ALIAS_FLAG);\n  paint.setStyle(Paint.Style.STROKE);\n\n  path.moveTo(\n      paddingLeft,\n      contentHeight - (float) (scale * spendingPerDay[0]));\n\n  for (int i = 1; i < spendingPerDay.length; i++) {\n    path.lineTo(\n          (float) (i * stepSize) + paddingLeft,\n          contentHeight - (float) (scale * spendingPerDay[i]));\n  }\n\n  invalidate();\n}\n```", "```kt\n@Override\nprotected void onDraw(final Canvas canvas) {\n  if (path == null || paint == null) {\n    return;\n  }\n\n  canvas.drawPath(path, paint);\n}\n```", "```kt\npublic void setSpendingPerDay(final double[] spendingPerDay) {\n  this.spendingPerDay = spendingPerDay;\n  invalidateGraph();\n}\n\npublic int getStrokeColor() {\n  return strokeColor;\n}\n\npublic void setStrokeColor(final int strokeColor) {\n  this.strokeColor = strokeColor;\n  invalidateGraph();\n}\n\npublic int getStrokeWidth() {\n  return strokeWidth;\n}\n\npublic void setStrokeWidth(final int strokeWidth) {\n  this.strokeWidth = strokeWidth;\n  invalidateGraph();\n}\n```", "```kt\n<com.packtpub.claim.widget.SpendingGraphView\n    android:id=\"@+id/spendingGraphView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"?attr/actionBarSize\"\n    app:strokeWidth=\"2dp\"\n    app:strokeColor=\"@color/colorAccent\"\n app:spendingPerDay=\"@{dataSource.spendingPerDay}\"/>\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"item\"\n            type=\"double[]\" />\n    </data>\n\n    <android.support.v7.widget.CardView\n\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        app:contentPadding=\"@dimen/grid_spacer1\">\n\n        <com.packtpub.claim.widget.SpendingGraphView\n            android:id=\"@+id/spendingGraphView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"@dimen/spending_graph_height\"\n            app:spendingPerDay=\"@{item}\"\n            app:strokeColor=\"@color/colorAccent\"\n            app:strokeWidth=\"2dp\" />\n    </android.support.v7.widget.CardView>\n</layout>\n```", "```kt\n    <dimen name=\"app_bar_height\">180dp</dimen>\n    <dimen name=\"spending_graph_height\">80dp</dimen>\n</resources>\n```", "```kt\nint countDays(final Date timestamp) {\n  final Calendar calendar = Calendar.getInstance();\n  calendar.setTime(timestamp);\n\n  final Calendar counterCalendar = Calendar.getInstance();\n  counterCalendar.clear(Calendar.HOUR_OF_DAY);\n  counterCalendar.clear(Calendar.MINUTE);\n  counterCalendar.clear(Calendar.SECOND);\n  counterCalendar.clear(Calendar.MILLISECOND);\n\n  int days = 0;\n  while (calendar.before(counterCalendar)) {\n    days++;\n    counterCalendar.add(Calendar.DAY_OF_YEAR, -1);\n  }\n\n  return days;\n}\n```", "```kt\ndouble[] getSpendingPerDay(final List<ClaimItem> claimItems) {\n  final double[] daysSpending = new double[10];\n  final int lastItem = daysSpending.length - 1;\n  Arrays.fill(daysSpending, 0);\n\n  for (final ClaimItem item : claimItems) {\n    final int distance = countDays(item.getTimestamp());\n\n    // the ClaimItems are in timestamp order\n    if (distance > lastItem) {\n      break;\n    }\n\n    daysSpending[lastItem - distance] += item.getAmount();\n  }\n\n  return daysSpending;\n}\n```", "```kt\npublic List<DisplayItem> onBackground(\n    final List<ClaimItem> claimItems)\n    throws Exception {\n\n  final List<DisplayItem> output = new ArrayList<>();\n  output.add(new DisplayItem(\n R.layout.card_spending_graph,\n getSpendingPerDay(claimItems)));\n\n  for (int i = 0; i < claimItems.size(); i++) {\n```", "```kt\n@Override\npublic boolean areItemsTheSame(\n    final int oldItemPosition,\n    final int newItemPosition) {\n  // ...\n\n  switch (newItem.layout) {\n    case R.layout.card_claim_item:\n        final ClaimItem oldClaimItem = (ClaimItem) oldItem.value;\n        final ClaimItem newClaimItem = (ClaimItem) newItem.value;\n        return oldClaimItem != null\n             && newClaimItem != null\n             && oldClaimItem.id == newClaimItem.id;\n    case R.layout.widget_divider:\n    case R.layout.card_spending_graph:\n        return true;\n  }\n\n  return false;\n}\n```", "```kt\n@Override\npublic boolean areContentsTheSame(\n    final int oldItemPosition,\n    final int newItemPosition) {\n  final DisplayItem oldItem = oldDisplay.get(oldItemPosition);\n  final DisplayItem newItem = newDisplay.get(newItemPosition);\n\n  switch (newItem.layout) {\n    case R.layout.card_claim_item:\n        final ClaimItem oldClaimItem = (ClaimItem) oldItem.value;\n        final ClaimItem newClaimItem = (ClaimItem) newItem.value;\n        return oldClaimItem != null\n             && newClaimItem != null\n             && oldClaimItem.equals(newClaimItem);\n    case R.layout.widget_divider:\n        return true;\n    case R.layout.card_spending_graph:\n return false;\n  }\n\n  return false;\n}\n```", "```kt\n@Override\npublic int getMovementFlags(\n    final RecyclerView recyclerView,\n    final RecyclerView.ViewHolder viewHolder) {\n\n  if (viewHolder.getAdapterPosition() == 0) {\n    return 0;\n  }\n\n  return super.getMovementFlags(recyclerView, viewHolder);\n}\n```", "```kt\npublic CircleLayout(final Context context) {\n  super(context);\n}\n\npublic CircleLayout(\n    final Context context,\n    final AttributeSet attrs) {\n  super(context, attrs);\n}\n\npublic CircleLayout(\n      final Context context,\n      final AttributeSet attrs,\n      final int defStyleAttr) {\n\n  super(context, attrs, defStyleAttr);\n}\n```", "```kt\n@Override\nprotected void onMeasure(\n    final int widthMeasureSpec,\n    final int heightMeasureSpec) {\n  super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n  measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n  setMeasuredDimension(\n        MeasureSpec.getSize(widthMeasureSpec),\n        MeasureSpec.getSize(heightMeasureSpec));\n}\n```", "```kt\nprotected void onLayout(\n    final boolean changed,\n    final int left,\n    final int top,\n    final int right,\n    final int bottom) {\n\n  final int childCount = getChildCount();\n\n  if (childCount == 0) {\n    return;\n  }\n\n  final int width = right - left;\n  final int height = bottom - top;\n\n  // if we have children, we assume they're all the same size\n  final int childrenWidth = getChildAt(0).getMeasuredWidth();\n  final int childrenHeight = getChildAt(0).getMeasuredHeight();\n\n  final int boxSize = Math.min(\n      width - childrenWidth,\n      height - childrenHeight);\n\n  for (int i = 0; i < childCount; i++) {\n    final View child = getChildAt(i);\n    final int childWidth = child.getMeasuredWidth();\n    final int childHeight = child.getMeasuredHeight();\n\n    final double x = Math.sin((Math.PI * 2.0)\n          * ((double) i / (double) childCount));\n    final double y = -Math.cos((Math.PI * 2.0)\n          * ((double) i / (double) childCount));\n\n    final int childLeft = (int) (x * (boxSize / 2))\n          + (width / 2) - (childWidth / 2);\n    final int childTop = (int) (y * (boxSize / 2))\n          + (height / 2) - (childHeight / 2);\n    final int childRight = childLeft + childWidth;\n    final int childBottom = childTop + childHeight;\n\n    child.layout(childLeft, childTop, childRight, childBottom);\n  }\n}\n```", "```kt\npublic static class Bouncer {\n  final Drawable drawable;\n  final Rect bounds;\n  int speedX;\n  int speedY;\n\n  public Bouncer(\n        final Drawable drawable,\n        final int speedX,\n        final int speedY) {\n\n    this.drawable = drawable;\n    this.bounds = drawable.copyBounds();\n    this.speedX = speedX;\n    this.speedY = speedY;\n  }\n```", "```kt\nvoid step(final Rect boundary) {\n  final int width = bounds.width();\n  final int height = bounds.height();\n\n  int nextLeft = bounds.left + speedX;\n  int nextTop = bounds.top + speedY;\n\n  if (nextLeft + width >= boundary.right) {\n    speedX = -speedX;\n    nextLeft = boundary.right - width;\n  } else if (nextLeft < boundary.left) {\n    speedX = -speedX;\n    nextLeft = boundary.left;\n  }\n\n  if (nextTop + height >= boundary.bottom) {\n    speedY = -speedY;\n    nextTop = boundary.bottom - height;\n  } else if (nextTop < boundary.top) {\n    speedY = -speedY;\n    nextTop = boundary.top;\n  }\n\n  bounds.set(\n       nextLeft,\n       nextTop,\n       nextLeft + width,\n       nextTop + height\n  );\n}\n```", "```kt\n  void draw(final Canvas canvas) {\n    drawable.setBounds(bounds);\n    drawable.draw(canvas);\n  }\n} // end of Bouncer inner class\n```", "```kt\nprivate Bouncer[] bouncers = null;\n```", "```kt\nprivate boolean running = false;\n```", "```kt\npublic BouncingDrawablesView(\n    final Context context) {\n  super(context);\n}\n\npublic BouncingDrawablesView(\n    final Context context,\n    final AttributeSet attrs) {\n  super(context, attrs);\n}\n\npublic BouncingDrawablesView(\n    final Context context,\n    final AttributeSet attrs,\n    final int defStyleAttr) {\n  super(context, attrs, defStyleAttr);\n}\n```", "```kt\n@Override\nprotected void onDraw(final Canvas canvas) {\n  super.onDraw(canvas);\n\n  if (bouncers == null) {\n    return;\n  }\n\n  for (final Bouncer bouncer : bouncers) {\n    bouncer.draw(canvas);\n  }\n}\n```", "```kt\nprivate final Runnable postNextFrame = new Runnable() {\n  @Override\n  public void run() {\n    onNextFrame();\n  }\n};\n\nvoid onNextFrame() {\n  if (bouncers == null || !running) {\n    return;\n  }\n\n  final Rect boundary = new Rect(\n       getPaddingLeft(),\n       getPaddingTop(),\n       getWidth() - getPaddingLeft() - getPaddingRight(),\n       getHeight() - getPaddingTop() - getPaddingBottom()\n  );\n\n  for (final Bouncer bouncer : bouncers) {\n    bouncer.step(boundary);\n  }\n\n  invalidate();\n  getHandler().postDelayed(postNextFrame, 16);\n}\n```", "```kt\n@Override\nprotected void onAttachedToWindow() {\n  super.onAttachedToWindow();\n  running = true;\n\n  post(postNextFrame);\n}\n\n@Override\nprotected void onDetachedFromWindow() {\n  super.onDetachedFromWindow();\n  running = false;\n}\n```", "```kt\npublic void setBouncers(final Bouncer[] bouncers) {\n  this.bouncers = bouncers;\n}\n\npublic Bouncer[] getBouncers() {\n  return bouncers;\n}\n```", "```kt\nfinal BouncingDrawablesView bouncingDrawablesView = (BouncingDrawablesView) findViewById(R.id.bouncing_view);\nfinal BouncingDrawablesView.Bouncer[] bouncers = new BouncingDrawablesView.Bouncer[10];\nfinal Random random = new Random();\nfinal Resources res = getResources();\n\nfinal Drawable icon = res.getDrawable(R.drawable.ic_other_black);\nfinal int iconSize = res.getDimensionPixelSize(R.dimen.bouncing_icon_size);\nfor (int i = 0; i < bouncers.length; i++) {\n  final Rect bounds = new Rect();\n  bounds.top = random.nextInt(400);\n  bounds.left = random.nextInt(600);\n  bounds.right = bounds.left + iconSize;\n  bounds.bottom = bounds.top + iconSize;\n  icon.setBounds(bounds);\n\n  bouncers[i] = new BouncingDrawablesView.Bouncer(\n        icon,\n        random.nextBoolean() ? 6 : -6,\n        random.nextBoolean() ? 6 : -6\n  );\n}\n\nbouncingDrawablesView.setBouncers(bouncers);\n```"]