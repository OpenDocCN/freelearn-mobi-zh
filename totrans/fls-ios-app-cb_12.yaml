- en: Chapter 12. Working with Video and Audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing local FLV video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing local H.264 video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing embedded audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling audio playback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With carriers able to support larger downloads and iOS hardware relentlessly
    marching forward, developers are able to build larger apps. Apple itself acknowledged
    this by doubling its over-the-air download limit, making it possible to include
    more bandwidth-heavy content such as video and high-quality audio.
  prefs: []
  type: TYPE_NORMAL
- en: On the web, the Flash platform has been a leader in both video and audio playback
    for many years. Adobe AIR brings many of these capabilities to iOS, enabling the
    creation of apps that will engage, inspire, and immerse the user.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explore the many options for working with video and sound.
    It will start by guiding you through the steps required to include and play back
    video, before moving onto the handling of embedded and streaming audio.
  prefs: []
  type: TYPE_NORMAL
- en: Playing local FLV video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Key to the Flash platform's success over the years has been its FLV file format,
    which delivers Sorenson Spark or ON2 VP6 encoded video both locally and over the
    Internet.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to load FLV video that has been bundled with
    an AIR for iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use `chapter12\recipe1\recipe.fla` from the book's accompanying code bundle
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Also, an FLV video is available from `chapter12\resources\video.flv` and should
    be copied to `chapter12\recipe1\` before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: The video is intended to be viewed on a device held in a landscape orientation.
    To accommodate this requirement, the FLA's stage size has been set to 480x320
    pixels rather than the default portrait orientation of 320x480.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is split into two main steps. First we will bundle the FLV video
    with the app, then we will write some ActionScript to play it back.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the FLV video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to bundle the video with the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click on the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Rendering** field to **CPU**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select `chapter12\recipe1\video.flv`. The video will
    now be bundled with your IPA file when the FLA is published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the AIR for iOS Settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playing the FLV video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the FLV now included within your FLA, we can turn our attention to the
    ActionScript required to play it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a constant to store the name of the FLV video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create three member variables required to play back video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, load and play back the FLV video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need to provide callback methods that capture metadata and cue
    point events as the FLV plays. Add the following two empty methods to your document
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both the class file and your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the FLA and deploy the IPA to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When launched, the app will load and play the FLV from the file system.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our code loads `video.flv` locally from the device and plays it back to the
    user. All files bundled with an app are copied to its Application directory during
    installation. This is the same folder where the app itself lives, and is where
    the FLV video is stored.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and playing the video is a three-stage process that involves the `NetConnection,
    NetStream`, and `Video` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First a `NetConnection` object is created and `null` is passed to its `connect()`
    method. This indicates that we won''t be connecting to a Flash Media Server, and
    instead intend to either connect to a file that is stored locally on the device''s
    file system or hosted on a web server. For this recipe, we used the local FLV
    that we bundled with the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next a `NetStream` object is created and used to play the actual video. The
    `NetConnection` object is passed to the `NetStream` object''s constructor, allowing
    it to stream the local video from the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally the `NetStream` object is attached to a `Video` object, allowing the
    video to be displayed to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Video` class inherits from `flash.display.DisplayObject`, meaning it can
    be added to the display list and manipulated in an identical manner to all other
    display objects. Two `DisplayObject` properties that we use are `width` and `height`
    to set the video's size on screen. In order to maximize playback performance,
    ensure the dimensions match that of the FLV perfectly. Scaling an FLV video will
    degrade performance.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that CPU rendering was selected for this recipe. Although the GPU can
    be used, the hardware video decoder isn't capable of decoding arbitrary resolutions,
    which can sometimes lead to the incorrect sizing of your `Video` object. Additionally,
    if you are using Flash Professional CS5 and AIR 2.0, then avoid GPU rendering
    of video altogether.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.net.NetConnection, flash.net.NetStream`,
    and `flash.media.Video` within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let us go back to the subject of metadata and cue points. We will also touch
    upon a few other considerations before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata and cue point events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a video plays, its `NetStream` object can be used to capture and process
    cue point and various metadata events including `onMetaData` and `onXMPData`.
  prefs: []
  type: TYPE_NORMAL
- en: While this recipe had no need for these events, we still had to write empty
    callback handlers for each. Failing to do so will result in a runtime exception
    being thrown when an event is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: To handle these events, set the `NetStream` object's `client` property to an
    object that contains callback methods for each. The method names must match those
    of the events exactly. For this recipe, we simply set the `client` property to
    `this` and added the handlers to the document class.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://help.adobe.com/en_US/as3/dev/WSD30FA424-950E-43ba-96C8-99B926943FE7.html](http://help.adobe.com/en_US/as3/dev/WSD30FA424-950E-43ba-96C8-99B926943FE7.html)
    for details regarding how to actually use the data from cue point and metadata
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Playing remote FLV video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to local playback, FLV video can be progressively streamed over
    HTTP from a remote location. Simply pass the video's URL to the `NetStream.play()`
    method to commence playback. You can also determine the status of the `NetStream`
    object's internal playback buffer by listening for it dispatching `NetStatusEvent.NET_STATUS`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about available `NetStream` events at [http://help.adobe.com/en_US/as3/dev/WS901d38e593cd1bac-3d11a09612fffaf8447-8000.html](http://help.adobe.com/en_US/as3/dev/WS901d38e593cd1bac-3d11a09612fffaf8447-8000.html).
  prefs: []
  type: TYPE_NORMAL
- en: Screen lock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When watching video, the screen will dim after a short period of inactivity
    from the user. Within this recipe's constructor, we prevent this from happening
    by setting `NativeApplication.systemIdleMode` to `SystemIdleMode.KEEP_AWAKE`.
  prefs: []
  type: TYPE_NORMAL
- en: While indefinitely preventing the screen from locking is acceptable for demonstration
    purposes, it is unlikely to be suitable for real-world applications. A better
    practice is to disable screen locking during playback of a video, and then re-enable
    it when the video is paused or stopped.
  prefs: []
  type: TYPE_NORMAL
- en: Maximizing playback performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To maximize performance, minimize your display list and try not to overlay other
    graphical elements on top of the video during playback. Also attempt to limit
    the amount of ActionScript being executed during playback. This is especially
    true of older first and second generation hardware where FLV performance can struggle.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the AIR 3.0 SDK or above, then consider using hardware accelerated
    H.264 video above FLV as its playback performance and video quality is significantly
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling multiple videos
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Files can be added individually to the **Included files** list, or you can specify
    a folder for inclusion. This is convenient when writing apps that have multiple
    videos as you can simply group the files within a single location. Every file
    within the folder will be bundled with your IPA.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Playing local H.264 video*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Controlling video*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Preventing screen idle, [Chapter 3](ch03.html "Chapter 3. Writing your First
    App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding GPU-Blend mode, [Chapter 6](ch06.html "Chapter 6. Graphics and
    Hardware Acceleration")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing local H.264 video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AIR for iOS now provides support for the high-quality, low bit-rate H.264 video
    format, enabling best-in-class high-definition playback through the `StageVideo`
    class. By taking advantage of hardware acceleration, H.264 video reduces CPU usage
    and consumes less memory than comparable formats including FLV.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will play back H.264 video that has been bundled locally
    with an app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps covered here are applicable only to those using AIR 3.0 and above.
    If you are using Flash Professional CS5, then you will be unable to attempt this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: From the chapter's accompanying code bundle, use `chapter12\recipe2\recipe.fla`
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: An H.264 encoded video is available from `chapter12\resources\video.mp4` and
    should be copied to `chapter12\recipe2\` before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: The video is intended to be viewed on a device held in a landscape orientation.
    To accommodate this requirement, the FLA's stage size has been set to 480x320
    pixels rather than the default portrait orientation of 320x480.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is broken into two main steps. First we will bundle the H.264 video
    with the app, before writing some ActionScript to play it back.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the H.264 video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to bundle the video with the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click on the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Rendering** field to **GPU**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select `chapter12\recipe2\video.mp4`. The file will
    now be bundled with your IPA file when the FLA is published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the AIR for iOS Settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playing the H.264 video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the video now included within your FLA, we can turn our attention to the
    ActionScript required to play it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a constant to store the name of the video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create three member variables required to play back video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, set-up and play back the video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need to provide a callback method that captures metadata events
    as the video plays. Add the following empty method to your document class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both the class file and your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The AIR Debug Launcher (ADL) does not currently support H.264 video playback.
    If you attempt to test this recipe using ADL, then you will receive a runtime
    error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Publish the FLA and deploy the IPA to your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When launched, the app will load and play the H.264 video from the file system.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our code loads `video.mp4` locally from the device and plays it back to the
    user. All files bundled with an app are copied to its Application directory during
    installation. This is the same folder where the app itself lives and is where
    the H.264 video is stored.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and playing the video is a four-step process that involves the `NetConnection,
    NetStream`, and `StageVideo` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First a `NetConnection` object is created and `null` is passed to its `connect()`
    method. This indicates that we won''t be connecting to a Flash Media Server, and
    instead intend to either connect to a file that is stored locally on the device''s
    file system or hosted on a web server. For this recipe, we used the local FLV
    that we bundled with the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next a `NetStream` object is created and will be used to play the actual video.
    The `NetConnection` object is passed to the `NetStream` object''s constructor,
    allowing it to stream the local video from the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NetStream` object needs to be attached to a `StageVideo` object in order
    for it to be displayed to the user. However, you don''t explicitly create one
    yourself. Instead a `StageVideo` object is obtained from a vector array made available
    by the `Stage` object''s `stageVideos` property. On iOS devices, this vector will
    contain a single `StageVideo` instance capable of rendering video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to create a viewport for the video and begin playback. Video
    rendered by the `StageVideo` class is hardware-accelerated and not part of the
    display list. Instead, `StageVideo` instances are rendered behind the display
    list within a rectangular region, which specifies the absolute position and size
    of the video. Once the viewport has been defined, call the `NetStream` object''s
    `play()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The video used for this recipe is 400x224 pixels in size, but you may have noticed
    in the code above that the viewport has been assigned a rectangular region of
    480x270\. This scales the video to cover the screen's entire horizontal width
    while still maintaining the video's aspect ratio. Also, the viewport is shifted
    down by 25 pixels to ensure that it is vertically centered on screen.
  prefs: []
  type: TYPE_NORMAL
- en: GPU rendering was selected for this recipe. Decoding H.264 video is computationally
    expensive and requires hardware to ensure acceptable playback performance on iOS
    devices. Although the video is not part of the display list, it does sit behind
    it, meaning display objects such as UI components can be overlaid on top.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.net.NetConnection, flash.net.NetStream`,
    and `flash.media.StageVideo` within Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let us go back to the subject of metadata. We will also touch upon a few
    other considerations before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata and cue point events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a video plays, its `NetStream` object can be used to capture and process
    cue point and various metadata events including `onMetaData, onCuePoint`, and
    `onXMPData`.
  prefs: []
  type: TYPE_NORMAL
- en: While this recipe had no need for the `onMetaData` event, we still had to write
    an empty callback handler for it. Failing to do so will result in a runtime exception
    being thrown when the event is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: To handle this, and other events, set the `NetStream` object's `client` property
    to an object that contains callback methods for each. The method names must match
    those of the events exactly. For this recipe, we simply set the `client` property
    to `this` and added the handlers to the document class.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://help.adobe.com/en_US/as3/dev/WSD30FA424-950E-43ba-96C8-99B926943FE7.html](http://help.adobe.com/en_US/as3/dev/WSD30FA424-950E-43ba-96C8-99B926943FE7.html)
    for details regarding how to actually use the data from cue point and metadata
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Playing video captured by the default camera
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Video successfully captured using the `CameraUI` class is stored temporarily
    on the device''s file system. Using the `MediaEvent` object dispatched by `CameraUI`,
    it is possible to determine the video''s URL in order to play it back. An example
    is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the URL, you can simply pass it to your `NetStream` object's `play()`
    method to initiate playback.
  prefs: []
  type: TYPE_NORMAL
- en: The `CameraUI` class is covered in the *Capturing with the default camera app*
    recipe from [Chapter 10](ch10.html "Chapter 10. Camera and Microphone Support").
  prefs: []
  type: TYPE_NORMAL
- en: Determining the video's size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can retrieve the width and height of the encoded video from a `StageVideo`
    object's `videoWidth` and `videoHeight` read-only properties. However, you first
    need to wait for this information to become available by listening for `StageVideoEvent.RENDER_STATE`
    being dispatched from your `StageVideo` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Also, be careful when playing back video captured from the device's camera.
    On iOS, the camera captures video in landscape orientation. If your application
    uses a portrait aspect ratio, then you will need to swap the values of the `videoWidth`
    and `videoHeight` properties when specifying your viewport's dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search for `flash.events.StageVideoEvent` within
    Adobe Community Help.
  prefs: []
  type: TYPE_NORMAL
- en: Playing remote H.264 video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to local playback, H.264 video can be progressively streamed over
    HTTP from a remote location. Simply pass the video's URL to the `NetStream.play()`
    method to commence playback. You can also determine the status of the `NetStream`
    object's internal playback buffer by listening for it dispatching a `NetStatusEvent.NET_STATUS`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about available `NetStream` events at [http://help.adobe.com/en_US/as3/dev/WS901d38e593cd1bac-3d11a09612fffaf8447-8000.html](http://help.adobe.com/en_US/as3/dev/WS901d38e593cd1bac-3d11a09612fffaf8447-8000.html).
  prefs: []
  type: TYPE_NORMAL
- en: Encoding H.264 video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: H.264 video playback can be computationally expensive. With such a wide range
    of hardware configurations across the range of iOS devices, it is important that
    the correct encoding strategy is employed to guarantee playback on the lowest
    common denominator. Adobe provides some H.264 encoding recommendations at [www.adobe.com/devnet/devices/articles/mobile_video_encoding.html](http://www.adobe.com/devnet/devices/articles/mobile_video_encoding.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can encode video using the H.264 codec with Adobe Media Encoder, which comes
    with Flash Professional as an optional install. An introduction to Adobe Media
    Encoder can be found on the Adobe Developer Connection website at [www.adobe.com/devnet/flash/quickstart/video_encoder.html](http://www.adobe.com/devnet/flash/quickstart/video_encoder.html).
  prefs: []
  type: TYPE_NORMAL
- en: Bundling multiple videos
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Files can be added individually to the **Included files** list, or you can specify
    a folder for inclusion. This is convenient when writing apps that have multiple
    videos as you can simply group the files within a single location. Every file
    within the folder will be bundled with your IPA.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Controlling video*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Preventing screen idle, [Chapter 3](ch03.html "Chapter 3. Writing your First
    App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Understanding GPU-Vector mode, [Chapter 6](ch06.html "Chapter 6. Graphics
    and Hardware Acceleration")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as commencing playback, the `NetStream` class provides additional control
    of video. In this recipe, we will add the ability for the user to pause, resume,
    and restart either an FLV or H.264 video.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's accompanying code bundle, open either `chapter12\recipe3-flv\recipe.fla`
    or `chapter12\recipe3-mp4\recipe.fla` and use it as a starting point. The first
    FLA's document class contains the code written for the *Playing local FLV video*
    recipe, while the second FLA contains the code from the *Playing local H.264 video*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Two movie clips have been added to the stage. The first has been given an instance
    name of `blocker`. The second has been named `controls` and sits in front of `blocker`.
    Both movie clips will sit in front of the FLV or H.264 video.
  prefs: []
  type: TYPE_NORMAL
- en: Within the `controls` movie clip are three buttons named `playBtn, restartBtn`,
    and `resumeBtn`. These will be used to play, restart, and un-pause the video respectively.
    Tapping anywhere on the screen during playback will pause the video.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `blocker` movie clip has an alpha transparency of 60% and will be used
    to dim the video when it is currently being paused. During playback, `blocker`
    will be made invisible ensuring that the video isn''t obscured. The following
    screenshot shows the video being dimmed by the `blocker` movie clip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/1383_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before proceeding, you will also need to copy either an FLV or H.264 video to
    your FLA's root directory. If you are working with FLV video, then copy `chapter12\resources\video.flv`
    to `chapter12\recipe3-flv\`. For H.264 video, copy `chapter12\resources\video.mp4`
    to `chapter12\recipe3-mp4\`.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let us write the ActionScript required for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the FLA''s document class and make the following changes to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add two new import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, listen for the `NetStream` instance dispatching a `NetStatusEvent.NET_STATUS`
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, remove the following line of code from the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the line above and throughout this recipe, `VIDEO_URL` is a constant containing
    the URL to the local video to be played. It will point to either `video.flv` or
    `video.mp4` depending on whether you are working with FLV or H.264 video.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We no longer want the video to start playing immediately. Instead we will wait
    for the user to tap the Play button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, at the end of the constructor, call a support method that will set
    up the playback controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now add the actual `setupControls()` method. Add an event listener to each of
    the control buttons and make only the Play button visible initially—we will show
    the other buttons only when the video is paused.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the Play button is pressed, we will begin playback of the video and hide
    the controls from view. Add the following event handler to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The user will be able to pause the video by tapping anywhere on the screen
    during playback. When paused, the control panel''s Restart and Resume buttons
    will be shown. Add an event handler for this and pause the `NetStream` object''s
    video stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add an event handler for the Restart button. This handler will move back
    to the beginning of the `NetStream` object''s video and also hide the controls
    from view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a similar handler for the Resume button, un-pausing the `NetStream` object''s
    video stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also want to offer the user the chance to watch the video again once it
    has played to completion. Write a handler for the `NetStream` object''s `NET_STATUS`
    event and show the Play button if the video has stopped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are just about finished. Add the following two support methods to manage
    the visibility of the control buttons and the blocker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your document class and move back to the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish and test the app on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following three methods of the `NetStream` class were used to control video
    playback:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pause():` Pauses the current video stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume():` Resumes playback of the paused video stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seek():` Moves to a specific point in time within the video stream'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `seek()` method expects a time, measured in seconds, to move to. The time
    is actually an approximation as the `NetStream` object will move to the keyframe
    closest to it.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that the `play()` method should not be used to resume
    playback. It is used for commencing playback only. Instead call `resume()` to
    continue playback of a paused video.
  prefs: []
  type: TYPE_NORMAL
- en: The `NetStream` class does not provide a `stop()` method. Within our code example,
    the paused video was restarted from the beginning by seeking to the first keyframe,
    then resuming playback.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are some last words before we leave video and move on to audio.
  prefs: []
  type: TYPE_NORMAL
- en: NetStream status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NetStatusEvent` object is dispatched in response to a plethora of useful
    status changes, errors, and warnings. Here are just a few strings that the `info.code`
    property can be queried for:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NetStream.Play.Start:` Playback has started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Play.Stop:` Playback has stopped'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Play.StreamNotFound:` The video file cannot be found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Play.InsufficientBW:` The client does not have sufficient bandwidth
    to play the video at its intended frame rate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Pause.Notify:` The stream has paused'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Unpause.Notify:` The stream has un-paused'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NetStream.Buffer.Flush:` Playback has ended and the buffer is now empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can determine the code''s type by examining the `info.level` property,
    which will be set to one of the following strings: `status, error`, or `warning`.
    For a comprehensive list of supported strings, perform a search for `flash.events.NetStatusEvent`
    within Adobe Community Help.'
  prefs: []
  type: TYPE_NORMAL
- en: The `flash.net.NetConnection` object also dispatches `NetStatusEvent` objects,
    which you can listen for.
  prefs: []
  type: TYPE_NORMAL
- en: Closing the video stream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are done with a video and you have no more need for it, call the `NetStream`
    object's `close()` method. This will stop the playback of the video and make the
    stream available for some other use.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sound is an important part of any application and when applied correctly can
    immerse the user within the interactive experience. In order to provide this experience,
    it is important that latency is minimized during playback. For example, there
    should be no delay when playing game sound effects or providing audio feedback
    from a user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Flash allows sound files to be embedded directly within the library, providing
    the fastest playback path for your audio. Let us walk through the steps required
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to embed sound within an FLA''s library:'
  prefs: []
  type: TYPE_NORMAL
- en: From Flash Professional, create a new AIR for iOS document by selecting **File**
    | **New** *(Ctrl + N* | *Cmd* + *N)*. From the **New Document** panel, select
    the **AIR for iOS** document type and click on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a Flash Professional CS5 user, then it is known as an **iPhone OS**
    document rather than an **AIR for iOS** document.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **File** | **Import** | **Import to Library** from Flash's drop-down
    menu. A file browser window will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the browser window, navigate to and select `chapter12\resources\sound.mp3`.
    Click on the **Open** button. The sound file will be imported and listed within
    the Library panel as **sound.mp3**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Library panel, right-click on **sound.mp3** and select **Properties**
    from the drop-down menu. The **Sound Properties** panel will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Sound Properties** panel, select **ADPCM** from the **Compression**
    drop-down box. Ensure that the **Convert stereo to mono** checkbox is selected;
    set the **Sample rate** to **22kHz** and **ADPCM bits** to **4 bit**. If you are
    using Flash Professional CS5.5, then, as shown in the following screenshot, ensure
    that the panel's **Options** tab is selected first.![How to do it...](img/1383_13_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now check the **Export for ActionScript** checkbox and change the text within
    the **Class** field to `SoundEffect`. If you are using Flash Professional CS5.5,
    then this should be performed from the panel's **ActionScript** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button to close the panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on your preference settings within Flash Professional, a warning
    panel may appear containing the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A definition for this class could not be found in the classpath, so one will
    be automatically generated in the SWF file upon export.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is expected. Click on the **OK** button to continue. The sound file has
    been assigned an ActionScript class name of SoundEffect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save your FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embedding sound files within your library places them directly within the application's
    binary, making them immediately available for playback. However, adding sound
    files this way will increase your application's file size. The larger your application
    becomes, the longer it will take to load and the more memory it will consume.
    Before embedding a sound file, consider carefully whether or not you actually
    need immediate access to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also important that you select the appropriate audio codec for your embedded
    sound. Flash provides two types of codec: compressed and uncompressed. Compressed
    sound, such as MP3, consumes less space than an uncompressed sound, such as ADPCM.
    However, the device needs to decode the audio during playback which can be demanding
    especially if you are attempting to play several compressed sounds at once.'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to simultaneously play multiple sound files and with minimum latency,
    then use an uncompressed codec. Flash provides both ADPCM and RAW for this. Of
    course, using uncompressed audio will increase the memory consumed by your app.
  prefs: []
  type: TYPE_NORMAL
- en: If you are only playing a single sound at any one time, then opt for MP3\. Doing
    so will reduce your app's memory footprint.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to access your embedded audio using ActionScript, then you must
    assign a unique class name to each sound within the library. For this recipe,
    we assigned the class name `SoundEffect` to our embedded sound.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Creating an AIR for iOS document, [Chapter 2](ch02.html "Chapter 2. Building
    iOS Apps Using Flash")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Playing embedded audio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing embedded audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ActionScript can be used to play back sound files embedded within an FLA's library.
    The sound must have a unique class name associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover how to play such embedded sounds.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the book's code bundle, open `chapter12\recipe5\recipe.fla` into Flash
    Professional and use it as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: The embedded sound from the *Embedding audio* recipe can be found in the FLA's
    library and has a class name of `SoundEffect` linked to it.
  prefs: []
  type: TYPE_NORMAL
- en: Also, sitting on the stage is a button named `playBtn`. We will play the embedded
    sound whenever this button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to play the sound associated with the `SoundEffect`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `MouseEvent` class and listen for `playBtn` being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add an event handler for the button and within it create an instance of
    the embedded sound''s `SoundEffect` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Staying within the handler, call the `SoundEffect` object''s `play()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both your class file and the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the app and test it on your device. Tap the button to initiate playback
    of the sound. Repeatedly tap the button to initiate several instances of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Audio is played using a `flash.media.Sound` object. All embedded sounds that
    are linked for ActionScript usage will inherit from this class.
  prefs: []
  type: TYPE_NORMAL
- en: To use an embedded sound, simply instantiate it, then call its `play()` method.
    This is just one of many methods and properties that are provided by the `Sound`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we used an embedded sound file that had a class name of `SoundEffect`
    assigned to it. The following two lines of code were all that was needed to play
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: When `play()` is called, a `SoundChannel` object is created to play back the
    sound. Successive calls to `play()` creates new `SoundChannel` objects which independently
    play their own copy of the sound. You can hear this in action by repeatedly tapping
    the Play button within this recipe's example app.
  prefs: []
  type: TYPE_NORMAL
- en: Although we had no use for it in this recipe, the `play()` method returns a
    reference to a newly instantiated `SoundChannel` object, which can be used to
    control the sound's playback. This is covered in the *Controlling audio playback*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us look at a few more options available when playing sound.
  prefs: []
  type: TYPE_NORMAL
- en: Playback position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `play()` method has a number of default parameters, the first of which
    starts playback from a specified position within the sound. The following example
    shows playback being commenced 500 milliseconds from the start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If omitted, the sound will be played from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Looping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A sound can be looped by passing a value to the `play()` method''s second parameter.
    In the following example, the sound plays at a point 200 milliseconds from the
    start, six times in succession:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If omitted, playback will occur only once.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Embedding audio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Controlling audio playback*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming audio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with large sound files, you may want to keep them outside your
    application's binary in order to minimize its load time and memory consumption.
    The `Sound` class can stream an MP3 file from the web or locally from the device's
    file system, removing the need to embed the audio directly within your FLA.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will bundle an MP3 file with an app and progressively play
    it back.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `.mp3` file has been provided for this recipe. Using either Windows Explorer
    or Finder, copy `chapter12\resources\music.mp3` from the book's accompanying code
    bundle to `chapter12\recipe6\`.
  prefs: []
  type: TYPE_NORMAL
- en: Open `chapter12\recipe6\recipe.fla` within Flash Professional. Sitting in the
    center of the stage is a button named `playBtn`. We will write some ActionScript
    to stream `music.mp3` whenever this button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will be split into two parts. First we will bundle an MP3 with the
    app, then we will write the ActionScript required to play it.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the MP3 file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow the steps to bundle the `.mp3` file with your app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click on the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select `chapter12\recipe6\music.mp3`. The file will
    now be bundled with your IPA when the FLA is published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the AIR for iOS Settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playing the MP3 file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the MP3 now included within your FLA, let us turn our attention to the
    ActionScript required to stream it.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following import statements to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, listen for `playBtn` being pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let us add the button''s event handler. Within it, create a `URLRequest`
    object for the local `music.mp3` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, pass the request to a new `Sound` object and call its `play()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save both your class file and the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the app and test it on your device. Tap the button to initiate streaming
    of the `.mp3` file. Repeatedly tap the button to initiate several instances of
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the playback of embedded audio, the `flash.media.Sound` class
    can stream external sound files. The technique employed is identical to progressive
    downloading used when playing FLV or H.264 video and can be used for sound files
    that are either bundled with the app or stored remotely on the web.
  prefs: []
  type: TYPE_NORMAL
- en: While Flash supports both compressed and uncompressed embedded audio, only `.mp3`
    files can be directly streamed using the `Sound` class. It is, therefore, advisable
    to keep the number of external files you simultaneously stream to a minimum as
    decoding the audio can be computationally expensive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Playing an `.mp3` file using the `Sound` class is straightforward. First a
    `URLRequest` for the sound file needs to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the request is passed to a new `Sound` instance. The file starts to stream
    when the `Sound` object''s `play()` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Once `play()` is called, the `Sound` object can't be used with another `.mp3`
    file. To stream a different file, create a new `Sound` object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following details are applicable to sound in general within Flash, but are
    of particular importance when dealing with MP3 files held either locally on the
    device's file system or on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing the buffer time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the audio data is consumed faster than it is being loaded, then playback
    will be paused until the `Sound` object's internal buffer has filled again.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help prevent buffer under run, you can increase the number of milliseconds
    of data that has gathered before playback begins. Use a `flash.media.SoundLoaderContext`
    object to specify the buffer time and pass it to the `Sound` object''s constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This example specifies that the buffer must contain 9000 milliseconds of audio
    data before playback is to continue. The default is 5000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: You can query the `Sound` object's `isBuffering` property to determine if the
    audio is currently paused while more data loads.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring load progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When loading, a `Sound` object dispatches a number of events that can help
    you monitor its progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Event.COMPLETE:` The sound''s data has been completely loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProgressEvent.PROGRESS:` Dispatched periodically as data is received'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IOErrorEvent.IO_ERROR:` The sound file could not be found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the `ProgressEvent` class provides the `bytesLoaded` and `bytesTotal`
    properties, which can be used to determine exactly how much of the file has loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Sound length
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Sound` class provides a `length` property, which can be used to determine
    the length of the current sound in milliseconds. When working with streaming sound,
    be careful as this property will return the length for only the data that has
    currently loaded. If you want to know the full sound file's duration, then wait
    for the `Sound` object to dispatch `Event.COMPLETE` first.
  prefs: []
  type: TYPE_NORMAL
- en: Sound metadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: MP3 audio can contain metadata in the form of ID3 tags, which contain information
    such as title, artist, album, and track number. If a file contains ID3 metadata,
    then `Event.ID3` will be dispatched from its `Sound` object. You can listen for
    this event, and then use the `Sound` object's `id3` property to read the tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code example shows the `id3` property being enumerated in order
    to discover all tags embedded within the sound file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `ID3Info` class can be found in the `flash.media` package.
  prefs: []
  type: TYPE_NORMAL
- en: Working with raw PCM sound data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the `Sound` class primarily allows for the loading and playback of
    external MP3 files, AIR 3.0 provides a new method for working with uncompressed
    PCM sound data. The `loadPCMFromByteArray()` method injects PCM 32-bit floating
    point sound data from a `ByteArray` object into a `Sound` object.
  prefs: []
  type: TYPE_NORMAL
- en: Playing audio in the background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From AIR 3.0 onwards, you can write multitasking applications that continue
    to play audio while in the background. This is achieved by inserting the `UIBackgroundModes`
    key into your application descriptor file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Any audio that is currently playing when the app is closed will continue to
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Embedding audio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Controlling audio playback*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editing the application descriptor file, [Chapter 3](ch03.html "Chapter 3. Writing
    your First App")*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling audio playback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `SoundChannel` object is created for each sound that is played. Using the
    class' API, you can control the playback of a sound.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to pause and resume a sound.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `.mp3` file and an FLA have been provided within the book's accompanying
    code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Open `chapter12\recipe7\recipe.fla` into Flash Professional. Sitting in the
    center of the stage is a button named `playBtn`. In the layer directly below is
    another button named `pauseBtn`. During this recipe, we will write ActionScript
    to toggle between the two, indicating whether or not the MP3 is currently playing.
  prefs: []
  type: TYPE_NORMAL
- en: The MP3 we will be using can be found at `chapter12\resources\music.mp3`. Before
    proceeding, copy it to the FLA's root folder at `chapter12\recipe7\`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is covered in two main steps. First we will bundle the MP3 with
    the app, then we will write the ActionScript required to control its playback.
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the MP3 file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let us start by bundling the `.mp3` file with your app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the AIR for iOS Settings panel by selecting **File** | **AIR for iOS Settings**
    from Flash's drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it isn't already selected, click the panel's **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the panel is the **Included files** list. Click on the **+**
    symbol above the list and select `chapter12\recipe7\music.mp3`. The file will
    now be bundled with your IPA file when the FLA is published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the AIR for iOS Settings panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Controlling playback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the MP3 file has been included, let us focus on the ActionScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a document class and name it `Main`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the classes required for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the following member variables, which we will use to control the sound:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the constructor, add an event listener to each of the buttons and initially
    hide the Pause button from view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Also notice that the pausePosition member variable has been initialized. Every
    time the MP3 is paused, we will update this variable with the time it was stopped
    at.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the Play button is pressed, playback of the MP3 should either commence
    for the first time, or continue from where it was previously paused. We will also
    need to listen for the MP3 playing to completion. In addition, the Pause button
    should be shown, allowing the user to stop the MP3 at some point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To manage all this, add the following event handler:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When pausing playback of the MP3, the current point in time that was reached
    needs to be obtained and stored. Also, the Play button should be made available
    again, allowing the user to resume playback at their convenience. The following
    block of code handles this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler that is called when the MP3 plays to completion. This
    will reset the `pausePosition` member variable and also make the Play button visible
    again, allowing the user to restart playback of the MP3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally add the following support method, which is used to toggle between the
    Play and Pause button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now save both your class file and the FLA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the app and test it on your device. Toggle playback by pressing the
    Play and Pause buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `Sound.play()` method is called, a `SoundChannel` object is created
    and returned. A `SoundChannel` object is responsible for the playback of a single
    sound. Successive calls to `Sound.play()` will return additional `SoundChannel`
    objects, each playing their own copy of the `Sound` object's data.
  prefs: []
  type: TYPE_NORMAL
- en: While a call to `play()` will initially play the sound from start to finish,
    the `SoundChannel` class' API can be used to perform other operations. In this
    recipe, we utilized the class to provide pause and resume functionality to the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to literally pause a sound during playback; the `SoundChannel`
    class only provides a method to stop playback. However, you can store the position
    in time that a sound was stopped at, and then replay the sound from that position
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was achieved by storing the `position` property before stopping the sound.
    The `position` property returns the sound''s position in time, measured in milliseconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Playback is resumed by passing the stored position to `Sound.play()`. Doing
    so plays the MP3 from the specified point in time and returns a new `SoundChannel`
    object representing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the `pausePosition` member variable was initialized to `0` within
    the constructor. This guaranteed that the first time the Play button was pressed,
    playback of the MP3 would take place from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: When a sound has finished playing, its `SoundChannel` object will dispatch an
    `Event.SOUND_COMPLETE` event.
  prefs: []
  type: TYPE_NORMAL
- en: While we used an external MP3 for this recipe, playback of sound embedded within
    the library is also controlled in an identical manner.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, perform a search within Adobe Community Help for `flash.media.Sound`
    and `flash.media.SoundChannel`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is some final information regarding the control of sound.
  prefs: []
  type: TYPE_NORMAL
- en: Volume and panning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The volume and stereo panning of a sound can also be controlled. To do this,
    create a `flash.media.SoundTransform` object and either pass it to the `SoundChannel`
    object's `play()` method or the object's `soundTransform` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SoundTransform` object''s constructor takes two parameters: the sound''s
    volume and a value specifying its left-to-right panning. The volume ranges from
    `0` (silent) to `1` (full volume), while the panning ranges from `-1` (fully left)
    to `1` (fully right).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is an example where the sound is played at full volume and panned
    hard left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The sound''s volume and panning can be adjusted at any point during playback.
    Simply make a change to your `SoundTransform` object and assign it to the `SoundChannel`
    object''s `soundTransform` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of the `SoundTransform` object's `pan` and `volume` properties
    to make the required alterations.
  prefs: []
  type: TYPE_NORMAL
- en: When testing stereo panning, be aware that you will need to use headphones as
    the loudspeaker found on iOS devices only delivers monophonic sound.
  prefs: []
  type: TYPE_NORMAL
- en: Global sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As well as individual sounds, it is possible to control the volume and panning
    globally using the `flash.media.SoundMixer` class. It has its own `soundTransform`
    property, which when set affects all sound being played.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Playing embedded audio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Streaming audio*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
