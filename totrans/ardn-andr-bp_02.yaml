- en: Chapter 2. Controlling an Arduino Board via Bluetooth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This second chapter of the book will be about putting things together and writing
    our first app to control an Arduino board via **Bluetooth Low Energy** (**BLE**).
    We chose to use BLE for all the Bluetooth projects of this book as it is the latest
    standard for Bluetooth communication at the time of publication. Compared to previous
    Bluetooth modules, BLE modules have low energy consumption as the standard works
    in bursts rather than maintaining a persistent connection. In addition, BLE offers
    low latency and has a comparable range to the older Bluetooth standards.
  prefs: []
  type: TYPE_NORMAL
- en: We will connect a BLE module to Arduino as well as an LED that we will control
    via an Android app. Then, we will write an Arduino sketch that uses the aREST
    library so that we can receive commands via Bluetooth coming from a smartphone
    or tablet.
  prefs: []
  type: TYPE_NORMAL
- en: The Android app will also be able to control the board remotely and we will
    have the opportunity to enhance the user experience by learning how to include
    buttons to switch the LED on and off.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following will be the main takeaways from this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting a BLE module to an Arduino board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an Arduino sketch to enable Bluetooth communications on the Arduino
    board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an Android application to send commands to the Arduino board via Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you will need for this project is an Arduino Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library, and it already has existing examples of
    Android apps to control the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a close-up picture of the module we used for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also need one LED of the color of your choice, and a 330 Ohm resistor.
    Finally, to make the different electrical connections, you will also need a breadboard
    and some jumper wires.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of all hardware parts you will need for this project,
    along with links to find these parts on the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LEDs ([https://www.sparkfun.com/products/9590](https://www.sparkfun.com/products/9590))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 330 Ohm resistor ([https://www.sparkfun.com/products/8377](https://www.sparkfun.com/products/8377))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the software side, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino IDE ([http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino aREST library ([https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nRF8001 Arduino library for the BLE chip ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install a given library, simply extract the folder in your `Arduino /libraries`
    folder (or create this folder if it doesn't exist yet). To find your `Arduino`
    folder or define a new one, you can go to the **Preferences** option of the Arduino
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now build the hardware part of the project. To help you out, the following
    is a schematic of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to place the Bluetooth module and the LED on the breadboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, connect the power supply from the Arduino board to the breadboard: 5V
    of the Arduino board goes to the red power rail, and **GND** goes to the blue
    power rail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, you need to connect the different wires responsible for the **Serial
    Peripheral Interface** (**SPI**) communications: **SCK** to Arduino pin **13**,
    **MISO** to Arduino pin **12**, and **MOSI** to Arduino pin **11**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, connect the **REQ** pin to Arduino pin **10**. Finally, connect the **RDY**
    pin to Arduino pin **2**, and the **RST** pin to Arduino pin **9**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the LED, simply place the resistor on the breadboard so it is in series
    with the LED, connected to the anode of the LED, which is the longest pin of the
    LED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, connect the other side of the resistor to Arduino pin **7**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, connect the other pin of the LED (the cathode) to the blue power rail,
    that is to the ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is an image of the completely assembled project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now write the Arduino sketch so that the Arduino board can talk with
    the BLE module and receive commands from Android via Bluetooth. Here is the complete
    sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see the details of this sketch. It starts by importing the required
    libraries for the nRF8001 BLE module and the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also specify an option for the aREST library, called `LIGHTWEIGHT`.
    This means that the Arduino board will only return a limited amount of data back
    to the Android phone. It will return the value of a variable when we read from
    the board, and no data at all when we send a command to the board. This is required
    when using BLE communications. This is done with the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will define which pin the BLE module is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that we don't define the pins for the SPI pins of the BLE module, as they
    are already defined in the module's library.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we can create an instance of the aREST API that will be used to
    handle the requests coming via Bluetooth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to create an instance for the BLE module, with the pins we defined
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `setup()` function of the sketch, we will start the serial communications,
    and print a welcome message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the welcome message is printed using the `F()` function around the
    message, which puts the string variable directly into the Arduino program memory.
    This is done to save some dynamic memory (RAM) for this sketch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also initialize the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will give an ID and a name to our board:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loop()` function of the sketch, we will check the status of the BLE
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will get this status and store it in a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is some device connected to our BLE module, we will then handle the
    incoming request using the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the code for this chapter can be found inside the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  prefs: []
  type: TYPE_NORMAL
- en: How to create a simple Android app to connect to the BLE module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Connecting the Adafruit BLE module will give us the opportunity to:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to work with existing open source projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze Java and understand how the `Main` activity connects to the layout files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the code to light up an LED via Bluetooth and get it to work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we will be using an open source project that works perfectly
    with our Adafruit Bluetooth module and is optimized for the Android Studio IDE.
    Throughout this chapter, we will also have the opportunity to explain what the
    different parts of the code are for.
  prefs: []
  type: TYPE_NORMAL
- en: To make the project work successfully, you need to make sure that you have installed
    the necessary SDKs outlined in [Chapter 1](ch01.html "Chapter 1. Setting Up Your
    Workspace"), *Setting Up Your Workspace*. The SDK is available via SDK Manager,
    which is accessible by going to **Tools** > **Android** > **SDK Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to go to Tony Dicola''s GitHub public repository, at [https://github.com/tdicola/BTLETest](https://github.com/tdicola/BTLETest),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, you can either opt to **Clone in Desktop** using the GitHub
    desktop application or download the ZIP file and extract the file to your desktop,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the extracted file (Windows and Mac).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Android Studio, then click on **Import Project** and **Choose Extracted
    Folder**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To aid you in the selection process, you will be able to see a small Android
    logo next to the folder you need to choose, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After successfully importing the project, you might need to modify the Gradle
    settings file so that it compiles correctly and is successfully built. The Gradle
    settings file acts as a preferences manager for our Android project and allows
    us to manage what libraries we would like to include for our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can modify the Gradle settings file by accessing the project tree and clicking
    on **app > src** followed by **build.gradle**, as shown in the following screenshot
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our recommendation is to alter `buildToolsVersion` to `19.1.0`. Do not be confused
    by **app** showing up in the tabs. The correct settings can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you modify the settings in the Gradle **Settings** option, you will be
    asked to sync your project settings, and you will be able to do that by clicking
    on **Sync Now**. Once the Gradle settings file is set up, you can go ahead and
    test the app on your physical Android device that supports BLE (the device should
    be running Android 4.3 or higher). Run the app by going to the toolbar, clicking
    on **Run**, and selecting **Run app**, followed by choosing the right physical
    device, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create a simple Android app to connect to the BLE module](img/0389OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can send out the following messages to the Bluetooth module by tapping
    on the **Text Field** and then tapping on **Send**:'
  prefs: []
  type: TYPE_NORMAL
- en: /mode/7/o /
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: /digital/7/1 /
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: /digital/7/0 /
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you see that the preceding messages respond with the right responses via
    the LED, which will switch on and switch off if you follow the previous order,
    we will then proceed to modifying the layout file.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Android layout file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modification of the Android layout file will simplify the user experience and
    allow us to switch the LED on and off with the tap of a button. In the Android
    layout file, we will add buttons for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Activating the pin to accept inputs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch on LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch off LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to the project tree, as shown in the following screenshot and follow this
    path: `app` > `src` > `res` > `layout` > `activity_main.xml`. Double-click on
    the `activity_main.xml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the Android layout file](img/0389OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Android layout files are managed either via the design view or via the
    text view, where the dimensions and properties are set using the XML format. In
    this particular case, we will stick to modifying the layout using the design view,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the Android layout file](img/0389OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Within the design view, there is a palette with defined user-interface elements
    that the developer can use to drag-and-drop into the design view and create customized
    layouts. To follow proper design-develop-distribute methodology, we will start
    off by creating a paper prototype of how we would like the app to look and work
    out, as shown in the following screenshot. At this point of time, our paper prototypes
    will be neither sophisticated nor adherent to design principles, but we would
    like to help you get used to the process to enable you to design high-quality
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the Android layout file](img/0389OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Having this paper prototype as our guide, we can then start modifying the design.
    We will start off by resizing the **Scroll View** area, which shows the response
    that the Android physical device receives when connecting with the BLE module.
    This will allow us to visualize how we would like to design the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding buttons to the interface is as easy as dragging and dropping buttons
    from the **Palette** option to the user interface. The **Palette** option is available
    on the left-hand side of the design view. In this case, we will add the following
    three buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: Set output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you double-click on the button that you''ve included in the interface, you
    will be able to change the text and ID. Standard Java naming conventions recommend
    the use of the camel-case naming convention; thus, you should identify them as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Set Output** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Set Output`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `setOutputBtn`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Switch On** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Switch On LED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `switchOnBtn`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Set Output** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: `Switch Off LED`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: `switchOffBtn`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With the layout setup, we can proceed to connecting the layout to our main activity
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the modified layout to the corresponding activity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the project tree, follow the path: `app` > `src` > `main` > `java` > `com.tonydicola.bletest.app`
    > `MainActivity`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on `MainActivity.java`. The screen for `MainActivity.java` will
    look as follows. In the following paragraphs, we will have an opportunity to go
    through the code and understand what role it plays within the app. There are a
    number of comments within the code (statements starting with `//////`) that will
    further explain the role of those lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we quickly analyze the code, we can see the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: The package name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An import statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaration of private and public variables (which can be used throughout the
    whole activity).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BluetoothGattCallback`: This is the method that deals with the callback and
    where much of the logic takes place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onServicesDiscovered`: This is the method that deals with Bluetooth service
    discovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCharacteristicChanged`: This is the method that takes care of any change
    in characteristics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreate`: This is the method that deals with the main layout and how it functions.
    The `onCreate` method is called when the activity is first shown, and plays a
    very important role in the Android app life cycle. Most of the code in this section
    will relate to the Android layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onResume` and `onStop`: These are the methods that form a part of the Android
    app life cycle and determine how the app will react at different points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sendClick`: This is the method that deals with what processes will be run
    when the **Send** button is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parseIDs`: This is the method that will return the Bluetooth module''s ID
    in string format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Boilerplate`: This is the code that is available within the primary template
    when creating this project, but it is not necessarily relevant for it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understanding the code will help us to make the right modifications; we will
    start by declaring the UI elements as private variables by adding the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We then proceed to the `onCreate` method, where we will add the code that will
    recognize the actual buttons within the layout and where we will also add the
    `onClickListener` method to each button, which allows the Android app to listen
    to any of the users' interactions with the button and act accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will start off by grabbing references to the UI elements by adding
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Just after these references to the UI elements, we will add some more code,
    which will allow us to send the right messages to the BLE module and to switch
    on and switch off the light:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding methods implemented, we should now be able to build the
    app and test it on our physical device. The final result should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the modified layout to the corresponding activity](img/0389OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should now successfully be able to switch on and switch off the light from
    the Android app.
  prefs: []
  type: TYPE_NORMAL
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several things you can do to go further with what you learned in this
    chapter. You can use what you learned to control more than just a simple LED.
    For example, you can connect the relay module we used in the first chapter and
    control it via Bluetooth. This already allows you to control much bigger devices,
    such as lamps, all via your Android phone. Of course, such projects require that
    you take safety precautions, which will be detailed in the chapter where we will
    build such an application.
  prefs: []
  type: TYPE_NORMAL
- en: You can also work on improving the Android application by improving the user
    interface and learning how to further modify the Android layout files with better-looking
    buttons, customized app icons, and general improvements to the user experience.
    As we go on in this book, we will have further opportunities to build on this
    code and enable more functions and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's summarize what we learned in this chapter. We connected a BLE module to
    Arduino as well as a simple red LED that we controlled remotely. After this, we
    wrote a sketch that enabled the Arduino board to receive commands via the Bluetooth
    module.
  prefs: []
  type: TYPE_NORMAL
- en: On the Android side, we took the opportunity to take an existing project, analyze
    it, modify it, and run the final application on our physical Android device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a wireless weather station using what we
    just learnt in this chapter. We will connect several sensors to an Arduino board,
    and read data coming from these sensors using an Android app communicating with
    the Arduino board via Bluetooth.
  prefs: []
  type: TYPE_NORMAL
