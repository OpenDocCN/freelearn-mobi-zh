["```swift\nvar welcome\nwelcome = \"Hello world\"\n```", "```swift\nvar welcome: String.\n```", "```swift\nwelcome += \" Bob\"\n```", "```swift\nNSString *hello = @\"Hello world\";\nstr = [str stringByAppendingString:@\" Bob];\n```", "```swift\nlet LIFE_MEANING = 42\n```", "```swift\nprintln(\"The text is \\(welcome)\") //print out the value of variable welcome\nprintln(\"The meaning of life is \\(LIFE_MEANING)\")//print out the meaning of life\n```", "```swift\nfor index in 1...5 { print(\"Value is \\(index)\") }\n```", "```swift\nfor (int i = 0; i <= 5, i ++)\nNSLog(@\"Value is %d\", i);\n```", "```swift\nlet breeds = [\"Pitbull\", \"Terrier\", Bull dog\", \"Maltese\"]\nlet count = breeds.count\nfor i in 0..count { println(\"This breed is \\(breeds[i])\") }\n```", "```swift\nvar catBreeds = [\"Siamese\", \"Scottish\"]\n```", "```swift\nfor item in catBreeds{\n  println(item)\n}//prints out \"Siamese\" and \"Scottish\"\n```", "```swift\nvar breeds = Dictionary<String, String> = [\"Breed1\": \"Bull Dog\", \"Breed2\": \"Terrier\"]\n```", "```swift\nvar breeds = [\"Breed1\": \"Bull Dog\", \"Breed2\": \"Terrier\"]\n```", "```swift\nbreeds[\"Breed1\"] = \"Dalmatian\"\n```", "```swift\nbreeds.updateValue(\"Breed2\", forKey: \"Bloodhound\")\n```", "```swift\nfor (breed, breedname) in breeds{\n  println(\"\\(breed) is \\(breedname)\")\n}//prints Breed1 is Dalmation, Breed2 is Bloodhound\n```", "```swift\nvar dogs = [\"Bulldog\", \"Terrier\", \"Dalmatian\"]\nfor dog in dogs {\n  println(\"This dog is a \\(dog)\");\n}\n```", "```swift\nfor index = 0; index < 3; ++index {\n//do something here\n}\n```", "```swift\nif temperatureInCelsius < 10 {\n  println(\"It is cold here\");\n}\n```", "```swift\nif (temperatureInCelsius < 10) && (temperatureinCelsius > 0)\n{\n  println(\"It is chilly here\");\n}\n```", "```swift\nlet number = 2\nswitch number {\n  case 1:\n    println(\"Number is 1\");\n  case 2:\n    println(\"Number is 2\");\n  case 3:\n    println(\"Number is 3\");\n}\n```", "```swift\nfunc animalType(animalName: String)-> String {\n  let text = \"This is a \" + animalName\n  return text;\n}\n```", "```swift\nfunc animalType(animalName: String) {\n  println(\"This is a \\(animalName)\")\n}\n```", "```swift\nfunc myFunc(iCount: Int) -> (intA: Int, intB: int) {\n  var intX = 1, intY = 2\n  intA = iCount + intX\n  intB = iCount + intY\n  return (intA, intB)\n}\n```", "```swift\nlet num = myFunction(10)\nprintln(\"Value is \\(num.intA) and \\(num.intB)\")\n```", "```swift\nfunc add(num1: Int, num2: Int = 0)\n{\n  var total = num1 + num2\n}\n```", "```swift\nadd(1)\n```", "```swift\nfunc getAverage(numbers: Double...) -> Double\n{\n  var total: Double = 0\n  for num in numbers {\n    total += num\n  }\n\n  total = total&/Double(num.count)\n  return total\n}\n```", "```swift\n//num is now a variable and can be modified inside the function myFunction\nfunc myFunction(var num: Int)\n{\n}\n```", "```swift\nfunc adder(num: Int)\n{\n  func addOne(number: Int) -> Int   { return number + 1 }\n}\n```", "```swift\nclass myClass {\n  var x = 0\n  var y = 0\n}\n\nstruct myStruct {\n  var x = 0\n  var y = 0\n}\n```", "```swift\nlet classA = myClass()//creating an instance of a class\nlet structB = myStruc()//creating an instance of a struct\n```", "```swift\nvar myX = classA.x\nvar myY = structB.y\n```", "```swift\nlet yourStruct = myStruct(x: 50, y: 80)\n```", "```swift\ndeinit{\n//Your deinitialization code here which could be closing an open file etc\n}\n```", "```swift\nclassA = myClass()\nclassA.x = 80\nclassB = classA\nclassB.x = 100\n```", "```swift\n  var name = \"Gibson\"\n      var greet = {  println(\"Hello \\(name)\")   }\n      greet()\n```", "```swift\n  var s1: String = \"Howdy\"\n      var name: String = \"Gibby\"\n      var holler = { (s1: String, name: String) -> String in\n            return s1 + \" \" + name\n        }\n        var ret = holler(s1, name)\n        println(ret)\n```", "```swift\n    class Dog {\n      let type: String\n      init(_type: String) {\n        self.type = _type\n        println(\"Init done\")\n      }\n      deinit {\n        println(\"Deinit done\")\n      } \n    }\n    ```", "```swift\n    var dog1: Dog?\n    Var dog2: Dog?\n    ```", "```swift\n    dog1 = Dog(type: \"Bulldog\")\n    dog2 = dog1//1 strong reference to dog1 is created\n    ```", "```swift\n    var hello = \"Hello World\"//this means hello is inferred to have a type of string \n    hello = 42 \n    //This will throw an error as now you are assigning an integer to a string variable\n    ```", "```swift\n    dog1 = nil\n    ```", "```swift\n    dog2 = nil //this will let ARC deallocate the Dog instance\n    ```", "```swift\nweak var cat: String?\n```", "```swift\nclass Country {\n  let name: String\n  let capital: City!\n  init(name: String, capital: String) {\n    self.name = name\n    self.capital = City(name: name, country: self)\n  }\n\nclass City {\n  let name: String\n  unowned let country: Country\n  init(name: String, country: Country) {\n    self.name = name\n    self.country = country\n  }\n}\n```"]