["```swift\nimport CoreData\n```", "```swift\nprivate lazy var persistentContainer: NSPersistentContainer = {\n  let container = NSPersistentContainer(name: \"MustC\")\n  container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n    if let error = error {\n      fatalError(\"Unresolved error (error), (error.userInfo)\")\n    }\n  })\n  return container\n}()\n```", "```swift\nimport CoreData\nextension NSPersistentContainer {\n  func saveContextIfNeeded() {\n    if viewContext.hasChanges {\n      do {\n        try viewContext.save()\n      } catch {\n        let nserror = error as NSError\n        fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n      }\n    }\n  }\n}\n```", "```swift\nfunc applicationWillTerminate(_ application: UIApplication) {\n    persistentContainer.saveContextIfNeeded()\n}\n```", "```swift\nvar persistentContainer: NSPersistentContainer!\n```", "```swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  if let navVC = window?.rootViewController as? UINavigationController,\n     let initialVC = navVC.viewControllers[0] as? FamilyMembersViewController {\n      initialVC.persistentContainer = persistentContainer\n  }\n  return true\n}\n```", "```swift\nlet fam = FamilyMember(entity: FamilyMember.entity(), insertInto: persistentContainer.viewContext)\n```", "```swift\nclass FamilyMember: NSManagedObject {\n  @NSManaged private(set) var name: String\n  @NSManaged private(set) var favoriteMovies: [Movie]?\n}\n```", "```swift\nfunc saveFamilyMember(withName name: String) {\n  // 1\n  let moc = persistentContainer.viewContext\n  // 2\n  moc.perform {\n  // 3\n    let familyMember = FamilyMember(context: moc)\n    familyMember.name = name\n  // 4\n    do {\n      try moc.save()\n    } catch {\n      moc.rollback()\n    }\n  }\n}\n```", "```swift\nvar persistentContainer: NSPersistentContainer!\n```", "```swift\nvar familyMember: FamilyMember?\n```", "```swift\nfunc saveMovie(withName name: String) {\n  guard let familyMember = self.familyMember else { return }\n  let moc = persistentContainer.viewContext\n  moc.perform {\n    let movie = Movie(context: moc)\n    movie.title = name\n    // 1\n    let newFavorites: Set<AnyHashable> = familyMember.movies?.adding(movie) ?? [movie]\n    // 2\n    familyMember.movies = NSSet(set: newFavorites)\n    do {\n      try moc.save()\n    } catch {\n      moc.rollback()\n    }\n  }\n}\n```", "```swift\nmoc.perform {\n  // create managed object \n  do {\n    try moc.save()\n  } catch {\n    moc.rollback()\n  }\n}\n```", "```swift\nmoc.persist {\n  // create managed object\n}\n```", "```swift\nextension NSManagedObjectContext {\n  func persist(block: @escaping () -> Void) {\n    perform {\n\n      block()\n      do {\n        try self.save()\n      } catch {\n        self.rollback()\n      }\n    }\n  }\n}\n```", "```swift\nlet request: NSFetchRequest<FamilyMember> = FamilyMember.fetchRequest()\nlet moc = persistentContainer.viewContext \nguard let results = try? moc.fetch(request) else { return }\n```", "```swift\nfamilyMembers = results\n```", "```swift\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n  return familyMembers.count\n}\n```", "```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n  guard let cell = tableView.dequeueReusableCell(withIdentifier: \"FamilyMemberCell\")\n    else { fatalError(\"Wrong cell identifier requested\") }\n  let familyMember = familyMembers[indexPath.row]\n  cell.textLabel?.text = familyMember.name\n  return cell\n}\n```", "```swift\nif let moviesVC = segue.destination as? MoviesViewController {\n  moviesVC.persistentContainer = persistentContainer\n  moviesVC.familyMember = familyMembers[selectedIndex.row]\n}\n```", "```swift\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n  if let navVC = segue.destination as? UINavigationController,\n    let addFamilyMemberVC = navVC.viewControllers[0] as? AddFamilyMemberViewController {\n    addFamilyMemberVC.delegate = self\n  }\n  guard let selectedIndex = tableView.indexPathForSelectedRow\n    else { return }\n  if let moviesVC = segue.destination as? MoviesViewController {\n    moviesVC.persistentContainer = persistentContainer\n    moviesVC.familyMember = familyMembers[selectedIndex.row]\n  }\n\n  tableView.deselectRow(at: selectedIndex, animated: true)\n}\n```", "```swift\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) ->Int {\n  return familyMember?.movies?.count ?? 0\n}\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n  guard let cell = tableView.dequeueReusableCell(withIdentifier: \"MovieCell\"), let movies = familyMember?.movies\n    else { fatalError(\"Wrong cell identifier requested or missing family member\") }\n  let moviesArray = Array(movies as! Set<Movie>)\n  let movie = moviesArray[indexPath.row]\n  cell.textLabel?.text = movie.title\n  return cell\n}\n```", "```swift\nNSPredicate(format: \"name CONTAINS[n] %@\", \"Gu\")\n```", "```swift\nvar fetchedResultsController: NSFetchedResultsController<FamilyMember>?\n```", "```swift\noverride func viewDidLoad() {\n  super.viewDidLoad()\n  let moc = persistentContainer.viewContext\n  let request = NSFetchRequest<FamilyMember>(entityName: \"FamilyMember\")\n  request.sortDescriptors = [NSSortDescriptor(key: \"name\", ascending: true)]\n  fetchedResultsController = NSFetchedResultsController(fetchRequest: request, managedObjectContext: moc, sectionNameKeyPath: nil, cacheName: nil)\n  fetchedResultsController?.delegate = self\n  do {\n    try fetchedResultsController?.performFetch()\n  } catch {\n    print(\"fetch request failed\")\n  }\n}\n```", "```swift\nextension FamilyMembersViewController: NSFetchedResultsControllerDelegate {\n  func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {\n    tableView.beginUpdates()\n  }\n  func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {\n    tableView.endUpdates()\n  }\n}\n```", "```swift\nfunc controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>, didChange anObject: Any, at indexPath: IndexPath?, for type: NSFetchedResultsChangeType, newIndexPath: IndexPath?) {\n  switch type {\n  case .insert:\n    guard let insertIndex = newIndexPath else { return }\n    tableView.insertRows(at: [insertIndex], with: .automatic)\n  case .delete:\n    guard let deleteIndex = indexPath else { return }\n    tableView.deleteRows(at: [deleteIndex], with: .automatic)\n  case .move:\n    guard let fromIndex = indexPath, let toIndex = newIndexPath else { return }\n    tableView.moveRow(at: fromIndex, to: toIndex)\n  case .update:\n    guard let updateIndex = indexPath else { return }\n    tableView.reloadRows(at: [updateIndex], with: .automatic)\n  @unknown default:\n    fatalError(\"Unhandled case\")\n  }\n}\n```", "```swift\nif let moviesVC = segue.destination as? MoviesViewController, let familyMember = fetchedResultsController?.object(at:\n   selectedIndex) {\n  moviesVC.persistentContainer = persistentContainer\n  moviesVC.familyMember = familyMember\n}\n```", "```swift\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n  return fetchedResultsController?.fetchedObjects?.count ?? 0\n}\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n  guard let cell = tableView.dequeueReusableCell(withIdentifier: \"FamilyMemberCell\"), let familyMember = fetchedResultsController?.object(at: indexPath) else { fatalError(\"Wrong cell identifier requested\") }\n  cell.textLabel?.text = familyMember.name\n  return cell\n}\n```", "```swift\nextension MoviesViewController {\n  @objc func managedObjectContextDidChange(notification: NSNotification) {\n    guard let userInfo = notification.userInfo, let updatedObjects = userInfo[NSUpdatedObjectsKey] as? Set<FamilyMember>, let familyMember = self.familyMember else { return }\n    if updatedObjects.contains(familyMember) {\n      tableView.reloadData()\n    }\n  }\n}\n```", "```swift\noverride func viewDidLoad() {\n  super.viewDidLoad()\n  NotificationCenter.default.addObserver(self, selector: #selector(self.managedObjectContextDidChange(notification:)), name: .NSManagedObjectContextObjectsDidChange, object: nil)\n}\n```", "```swift\nlet backgroundQueue = DispatchQueue(label: \"backgroundQueue\")\nlet backgroundContext = persistentContainer.newBackgroundContext()\nbackgroundQueue.async {\n  let results = try? backgroundContext.fetch(someRequest)\n  for result in results {\n    // use result\n  }\n}\n```", "```swift\nfunc saveFamilyMember(withName name: String) {\n  // 1\n  persistentContainer.performBackgroundTask({ (moc) in\n    // 2\n    let familyMember = FamilyMember(context: moc)\n    familyMember.name = name\n    // 3\n    do {\n      try moc.save()\n    } catch {\n      moc.rollback()\n    }\n  })\n}\n```", "```swift\nmoc.automaticallyMergesChangesFromParent = true\n```"]