- en: Chapter 1. Getting Started with Xcode and Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode from the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the Xcode image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a Swift project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Swift project options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating conditional code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating an existing project to Swift 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a developer account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Swift as an interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a control version system to an existing project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn the basics of creating a project with Swift.
    Even if you have already created your own project, it is worth reading the recipes
    of this chapter. You will learn how to interact with Xcode, how to test your code
    from the command line, and at the end, we will review the basics of this language.
  prefs: []
  type: TYPE_NORMAL
- en: Before downloading Xcode, note that Swift requires Xcode 6.0 for Swift 1.0,
    and 1.2 or Xcode 7.0 for Swift 2.0 and 2.1\. We will be installing Xcode 7.0 (the
    latest version, as of this writing). To install version 7.0 of Xcode, you must
    have at least OS X Yosemite (OS X 10.10), so meet these requirements before installing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode from the App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first way of installing Xcode is by downloading it from the App Store. The
    advantage of this method is that you will be warned about updates, and the system
    requirements will be checked before the download starts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To download any program from the App Store, you must have an Apple ID; it's
    free and it won't take long to set up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To download Xcode from the App Store, just open **App Store** from your dock
    or your applications folder.![How to do it…](img/00002.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you open the App Store, it will ask you for your Apple ID details
    (e-mail and password). After opening this application, just search for `xcode`
    in the textbox, which is located on the upper-right corner of this application.![How
    to do it…](img/00003.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are installing Xcode from the right vendor (Apple); sometimes
    we get results that lead us to think that they are what we want but they aren't.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have found the Xcode app, just click on the **Install** button, and
    the next step is to go for coffee, or you can call a friend, because Xcode is
    2.2 gigabytes, which means that it will take a while to download, so take a break
    now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check whether Xcode has finished the installation, you just need to open
    the **Applications** folder or the Launchpad app, then have a look to see whether
    there is a progress bar under the Xcode icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like any other application that you will install from the App Store, you only
    need to open the App Store application, search for it, and install it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you buy a new computer, you will see that Xcode will be offered to be installed
    onto your new machine. This is because Apple keeps track of the applications you've
    already installed.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Xcode image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second way of installing Xcode is by downloading an image from the Apple
    Developer Center; this step is not free, it's only available to members of the
    Apple Developer Program (which costs approximately $99 a year) or for people who
    work in companies that are members of this program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to have 2.2 gigabytes of free space besides the
    space stored by the installed Xcode, but I will assume that you won't have this
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of downloading a DMG file is that you can save it onto a DVD as
    a backup (you never know when this version of Xcode will be removed from the App
    Store). Also, if you work in a team, it is very important to have every member
    working with the same Xcode version. In addition, if you want to install any beta
    version of Xcode, it will only be available through the Apple Developer Center.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the Xcode image, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to open your web browser; go to [http://developer.apple.com/xcode](http://developer.apple.com/xcode),
    then click the download button in the top-right corner of the web page. You will
    be brought to a new page with two download options: the latest beta build or a
    link to the Mac App Store. If you select to download the beta build, a login will
    be required. The download will begin immediately after logging in. Otherwise you
    can download the latest public build for free in the Mac App Store.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can have multiple versions of Xcode on a single machine; specifically, the
    public release and any beta versions made available by Apple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading the DMG file, double-click on it and drag the Xcode icon into
    your **Applications** folder. Remember that you need the administrator's permission
    to copy files into the **Applications** folder.![How to do it…](img/00004.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also install Xcode onto a different path such as your home directory,
    but I wouldn't recommend this if it's not necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't search for "download Swift" on your search engine as there is another
    programming language that is also called **Swift**, which has nothing to do with
    Apple devices.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The DMG file ensures that you can always have a backup of this Xcode version,
    so if for any reason you have problems with future versions of Xcode, you can
    install the previous version. It is also possible to have more than one Xcode
    version installed onto your computer.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Apple Developer Center is a good website to get Xcode resources. Here, you
    can find videos, guides, code samples, and add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Starting a Swift project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, starting Swift is something that is very straightforward; however,
    it is good to know what is going on in every step.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start a project, make sure that you know your project name and in
    which folder it will be saved. Changing this kind of parameter can create problems
    after the project has been created. Once you have Xcode installed, you can open
    it from your application folder, from the Launch pad, or even from your dock if
    you have added Xcode onto it. As I'm a very lazy person, I prefer the latter;
    it's faster for me to have it on my dock.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first time you open Xcode, it's possible that it will ask to install some
    additional packages, so do it. Some of these packages are important, depending
    on the type of application you are developing, and some of them are necessary
    to have access for some devices, mainly the newest ones.
  prefs: []
  type: TYPE_NORMAL
- en: Now, Xcode is asking you about the project you want to start or open. Check
    the option that says **Create a new Xcode project**.![How to do it…](img/00005.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If, for any reason, this window is not shown to you, there is always the option
    to go to **File** (on the menu bar) | **New** | **Project**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step is to choose the type of project that you want to develop. For
    this example, I will use a **Single View Application** for iOS, but I'll make
    comments if there is anything different on OS X applications or for another type
    of project.![How to do it…](img/00006.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next dialog will ask you for some project information, one example being
    the programming language that you want to use. In this example, we will use Swift.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/00007.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Choose Swift as the language and it will create the application with its delegate,
    with Swift code. Make sure that **Use Core Data** is unchecked to prevent having
    its code on the app delegate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice that Swift iOS applications now have no files called `main.m`,
    `main.mm`, or `main.swift`. OS X apps have a `main.swift` file, but it is smaller
    than the previous `main.m` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you should already know, the product name is your application name, the organization
    name is the proprietary of this software, and the organization identifier is the
    reversed Internet domain, for example, `uk.co.packtpub` instead of `packtpub.co.uk`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that now there is no checkbox for creating unit tests because, by default,
    it is created for you using XCTest. If you don't want it, just remove the group
    from your project. I wouldn't remove it, it usually doesn't hurt.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, it's time to choose a folder to store our project. Remember that during
    the development, you can add files, which will be stored in different locations.
    I don't recommend this kind of practice, but if you have to do so, try to have
    your project close to these files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I also recommend you to check the option to use a Git repository, except if
    you have a subversion repository, of course. Even if you are the only developer,
    it's important to have a version control system. Remember that we are humans,
    and sometimes we make mistakes and so have to go back.![How to do it…](img/00008.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have the project created, press the play button to see it working.
    If it's the first time you have installed Xcode, it will show you a dialog asking
    you to enable the developer mode. Click on the **Enable** button if you have the
    administrator password.![How to do it…](img/00009.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok! Now you have your project up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a project is not something difficult; you only need to pay attention
    to some steps. Make sure that you have selected Swift as the main programming
    language; otherwise, you will see a lot of stuff with Objective-C.
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to the folder where you will create your project. Xcode will create
    another folder with your project name, and inside of it, Xcode will create the
    project bundle, a folder with the source code. If you want to copy your project,
    make sure that you copy the folder that contains everything.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to work on a team that has already started a project, you will probably
    clone the project using the **Check out an existing project** option. You will
    use a Git or a subversion repository and you will have your code synchronized
    with the other members of the team. Xcode offers us the basic tools to work with
    a **VCS** (**version** **control system**); these are enough for 80 percent of
    our tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Swift project options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode projects come with lots of options. Here, we will know some of them, mainly
    the Swift-specific ones.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To perform this recipe, just create a new project, as shown in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you've created a project, click on the navigator project icon or press
    *command + 1* if you prefer a keyboard shortcut, then click on your project icon
    (the first icon). Now, click on **Build Settings**.![How to do it…](img/00010.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for **Embedded Content Contains Swift Code**; in this case, we will select
    **No**, but of course, if you know that there is any extra content created with
    Swift, you should select **Yes**.![How to do it…](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **General** tab and scroll down; you can see where you can add the
    embedded binaries.![How to do it…](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, look for **Optimization Level**. Here is where you tell the compiler how
    much time it should expend trying to make your code faster or compress it. Usually,
    when we are developing (debug mode), we set for no optimization (-O0); however,
    when we are going to create the final product (release mode), we will usually
    set an optimization level such as Os, which means fastest and smallest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, with Objective-C, when you used to set a high level of optimization,
    the debugger used to lose some of the variable values. I haven't seen this phenomenon
    with Swift yet, but it's good to have it in mind.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another important option is **Import paths**. This tells Swift where it should
    look for Swift modules. If you are linking your project with external libraries,
    you may need to specify where the `module.map` file is. If you have more than
    one path to search, you need to set them one per line. If you have different paths
    for debug and release, you can still use variables such as `$(CONFIGURATION)`
    or `$(TARGET)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use absolute or relative paths, but I would give preference to the relative
    ones.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing settings is something that you have to do mainly when your project
    starts growing. There are some options that you set differently for debug and
    release configurations.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode has a lot of configuration settings; showing all of them would be out
    of the scope of this book. I recommend that you at least look at some of them,
    mainly if you want to work with big projects. My main recommendation here is:
    do not change your settings without synchronizing with the other members of your
    team (mainly with the project manager). If you cause a conflict with the VCS,
    it could be hard work to fix it.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating conditional code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually when we are developing, we have some cases where we would like to have
    different pieces of code according to our needs. For example, let's imagine that
    we would like to compare the performance of some functions written by us with
    some equivalent functions that were created on a third-party library. In this
    case, we can create some macros for using only our functions or for using only
    the third-party functions, allowing us to have the same application working in
    two different ways.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to create a log according to a platform
    and we can also enable or disable it if the execution is being affected by the
    excess of logs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project called `Chapter 1 Conditional Code`, as shown earlier,
    and let's code a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After creating a new project, let's create a new file by navigating to **File**
    | **New** | **File...**. Now, choose **Swift File** and name it `CustomLog.swift`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't save your files on a different folder from the project; this will give
    you problems in the future.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, go to the `viewDidLoad` method of your view controller, and add a call
    for this function, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try clicking play now; what do you see? The answer is—nothing! The reason is
    that the compiler knows nothing about the macro `VERBOSE_LOG`, which means that
    this macro is interpreted as *false* and the only thing that is created is an
    empty function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go back to your project build settings, search for other swift flags, and
    add `-DVERBOSE_LOG`, as shown in the following screenshot:![How to do it…](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on play again and you will see the log message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the Swift compiler has two defined macros: `os()` and `arch()`.
    The first one can receive OS X or iOS as arguments, and the second one can receive
    x86_64, arm, arm64, and i386\. Both macros will return a Boolean value. You can
    also create your own macro, defining it on your build settings.'
  prefs: []
  type: TYPE_NORMAL
- en: The block that is evaluated as `true` will be compiled, and the other blocks
    will not be compiled; this way you can have code that calls OS-specific functions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I would like to emphasize, mainly for those developers who are used to working
    with C projects, that the Apple documentation leaves a very clear message that
    Swift has no preprocessor; it only uses a trick on compilation time, so you can't
    use macros as we used to do on C or even on Objective-C. The only thing you can
    do is watch to see whether they are set or not.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to, you can use the operators `&&`, `||`, and `!` as shown here:
    `#if arch(arm64) && os(iOS)`, but you can''t use any kind of comparator operator
    such as `==`, `<`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in knowing more options that you can add to other Swift
    flags, check out the *Compiling from the command line* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating an existing project to Swift 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have an existing project written in Swift 2.0 or below, Apple has provided
    some handy tools with Xcode 7 for you to migrate to Swift 2.0 with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need an existing Xcode project written in Swift 1.2
    or below.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to migrate an existing project:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate your existing Xcode project and open the `.xcodeproj` or `.xcworkspace`
    file to automatically open Xcode 7\. Once the project or workspace loads, Xcode
    will present you with the following message prompting you to convert to the latest
    Swift syntax:![How to do it…](img/00014.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Convert** and you will be taken to a new screen. This screen displays
    some information about what the conversion process will look like. Select **Next**
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now be asked to select which targets to update to Swift 2.0\. This
    is very useful if you need to leave any targets in their current state. Review
    your list of targets and uncheck those that you do not want updated, and select
    **Next**.![How to do it…](img/00015.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with a new screen, similar to the assistant editor, comparing
    the results after migration to the current state of your code. In the far left
    pane, you will see a list of all files that will receive a change and can manually
    select files to not make any changes.![How to do it…](img/00016.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If there are any files you wish NOT to be migrated, simply uncheck them from
    the left pane list of files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have verified or modified all changes, select **Save**. Xcode will
    update all changes and you will be ready to continue development with Swift 2.0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple has made Xcode extremely versatile in code migration. Thankfully, this
    takes most of the hassle out of migration to Swift 2.0 and allows you to get straight
    to writing more code. However, the migration process is not perfect and manual
    changes are likely required for complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If for any reason the migration prompt did not automatically display itself,
    you can still start the process on your own. Navigate from the menu bar to **Edit**
    | **Convert** | **To Latest Swift Syntax**. You will be brought directly to step
    2 of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a developer account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, Apple tries to make the developer's life easier by improving Xcode
    and creating tools, but there is an exception when we talk about certificates.
    If you want to test your app on a physical device (iPhone, iPad, or iPod), you
    need a certificate. If you would like to upload it onto the App Store, you also
    need this certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The idea of a certificate is to protect your code from malicious code or from
    being modified after being signed, but this idea has a price. To get a certificate,
    you will need to be enrolled on the Apple Developer Program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will assume that if you continue with this recipe, you are already enrolled
    on this program. Let's recycle the previous project; open it, and let's start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add an Apple developer account:'
  prefs: []
  type: TYPE_NORMAL
- en: Once you've opened the project, click on the project navigator, then click on
    the combobox that shows our project, and select the target `Chapter 1` if it's
    not selected yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, have a look at the option called **Team**. In the case of programming a
    Mac application, this combobox is enabled only if you select the signing option
    to Mac App Store or Developer ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually, the team option starts with **None** selected. Click over this combobox
    and select **Add Account**.![How to do it…](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting to add an account, Xcode will ask for your Apple Developer Program
    login data (e-mail and password). If you don't have it, you have the option to
    join the program.![How to do it…](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've added this, you are supposed to use your account and run your app.
    If you have a device attached to your Mac, you can go to the **Window** option
    on the menu bar and then you can select the **Devices** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Your device should appear on the dialog. Xcode could take a while to read the
    device's symbols. In the case of attaching this device for the first time, you
    will see that you will have to ask to change the status of this device to developer
    mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you get the green light, it means that your device is ready to be used
    for development; now, go back to your project and change from the simulator to
    your device.![How to do it…](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the device is enabled but not listed by Xcode, it could mean that you have
    to decrease the **iOS Deployment Target**, which can be found on the project setting,
    under the **Info** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Lowering the **iOS Deployment Target** to the minimum value is an idea very
    common among programmers to cover the maximum sort of devices. Doing this will
    prevent your development from using new features. Check out the features that
    you need first, and then change your **iOS Deployment Target**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Signing a code is something done for security; the main restriction is that
    you must be up to date with the Apple Developer Program. Apple allows up to 100
    devices per account.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, the certificate causes us some headaches. Take care if it asks you
    to revoke your certificate; you may have to create a new one on the Apple Developer
    Center, and if you are working in a team, you may have to wait for the administrator's
    approval.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few times that you need to change the code-signing option on the
    build settings; it happens mainly when you get code from another organization
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your code on a device is something that is very useful; it's where you
    can test the real user experience. Whenever you have some low-level code, such
    as assembly code or something written in C language that uses type sizes or byte
    orders, it's good to test your project on a device. Remember that Apple's devices
    have CPUs based on ARM and ARM64, which are different to the Intel CPU that is
    used on Mac computers.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know that nowadays a lot of users, and even developers, think that using the
    command line is something from the past. The reality is that, even today, a lot
    of tasks that can be done from the command line, mainly automations tasks such
    as continuous integration, must be done using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you that it's not difficult, and better than this, you
    will have an increased understanding of the concept about what Xcode does behind
    the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you've never worked with a command line, I would suggest you read a book
    about it; *Linux Shell Scripting Cookbook*, *Packt Publishing*, is a good one
    in my opinion, even knowing that some commands are Linux-specific.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a **Finder** window using the key combination *command* + *Shift* + *U*
    or open your **Launchpad** and click on the **Others** folder. Here, you can see
    an icon called **Terminal**, open it and you should see a window similar to the
    following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Type `xcode-select -p`; this should give you one path, for example, `/Applications/Xcode.app/Contents/Developer`.
    If you don't have more Xcode versions installed in your machine, you shouldn't
    worry about the path; it will probably be right. If for any reason you have more
    than one Xcode installed on your machine, you will need to change it by typing
    `xcode-select -s /Applications/XCODE VERSION.app/Contents/Developer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that switching Xcode is a task that can only be done by an administrator,
    and it will affect every user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, go to your project directory and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, you will see lots of commands on screen, but the most important
    message is the last one that should be `** BUILD SUCCEEDED **`; which means that
    the project was built without errors.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you type a command, your system will look for this command using the paths
    specified by the `PATH` variable. You can check the directories included in your
    `PATH` variable by typing `echo $PATH`. By default, the directory `/usr/bin` is
    included.
  prefs: []
  type: TYPE_NORMAL
- en: This directory contains Xcode commands, such as `xcodebuild`. When you want
    to use commands from other Xcode versions, you need to use `xcode-select` to overwrite
    these files to use the ones according to the version you want.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have set it, you can compile your project. As your project is a set
    of lots of files such as source codes, images, and so on, it would be hard work
    if we had to do every single action (compiling, copying files, code signing, and
    so on) one by one. This is the reason it's easier to ask Xcode to do it by itself
    using the command `xcodebuild`.
  prefs: []
  type: TYPE_NORMAL
- en: The `xcodebuild` command has a lot of parameters, so you can specify the configuration
    to be Debug or Release, the target you want to compile, as well as many other
    options. Type `xcodebuild -help` to get a list of options.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-help` argument is very common on Xcode commands. Try to use it when you
    have any doubt.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another good feature about the `xcodebuild` command is that it shows the commands
    that are being used with all its arguments. So, you can appreciate that when you
    compile an Objective-C project, Xcode uses the clang compiler, but when you have
    a Swift project, Xcode uses the `swiftc` command. Type `swiftc -help` with its
    full path to check its options and use them in the build options of other Swift
    flags.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that `xcodebuild` is going to look for a file called `project.pbxproj`,
    which is inside your `.xcodeproj` directory. This file contains information of
    every file, settings, and steps to create a project; in case of wrong syntax or
    wrong references, `xcodebuild` and the Xcode IDE won't compile the project at
    all. In addition to this fixing, this file could be hard work. Because of these
    reasons, I wouldn't change this file manually, and also, I would try to avoid
    conflict with the version control system.
  prefs: []
  type: TYPE_NORMAL
- en: Using Swift as an interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like some other script languages, you can use Swift with its interpreter on
    the command line. Sometimes it's very useful, mainly when you want to test code
    but you don't want to create a new playground.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a terminal window as shown in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for using Swift as a command line interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to find where the Swift command is; even if you have used
    the `xcode-select` command, it is possible that the Swift command is not accessible
    from your `PATH` variable. So, you can localize your Swift command using `find
    /Applications/Xcode.app -name swift -a -type f`. In my case, I got `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: However, current versions of Xcode have the Swift command at `/usr/bin`. If
    it is necessary, add this directory to your `PATH` variable with the command `export
    PATH="$PATH:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/"`.
    At this moment, we can enter into the Swift interpreter just by typing `swift`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to use Swift from the command line, sometimes it's a good idea to
    have this `PATH` variable set permanently. To make this, we need to add the previous
    command into our `.profile` file, such as `echo 'export PATH="$PATH:/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/"
    ' >> $HOME/.profile && chmod +x $HOME/.profile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From now on, if you restart your computer, it won't be necessary to look for
    the Swift path and set the `PATH` environment variable again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s enter into our Swift command line and type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see a message showing the content of these variables after typing
    each of them. Now, type the following loop code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can see that we will receive the following result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the last option failed because we can't divide by 0\. That's
    a fast way we can test some code using the command line. Most of the time, we
    will test using a playground, but sometimes using the command line is much faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calling the Swift command gives you the possibility to test your code or even
    use Swift as a scripting language. The thing to highlight here is that you need
    to know where your Swift command is; the command line helps you to find it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of Swift's options and `swiftc` options are common; it means that if there
    is something that you would like to test before compiling, you can do it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a control version system to an existing project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's very common starting a project without any version control, and with the
    passage of time, we change our idea and decide to add one.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, Xcode doesn't give this option to us and we have to do it by
    hand. I hope this option will be added on Xcode soon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To do this recipe, let's create an empty project called `Chapter1 Git`; however,
    this time, before we save the project, uncheck the option **Create Git CGRepository
    on**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for creating a local repository on an existing project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Source Control** menu option from the menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create Working Copy** to create the local repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you can open your project and notice that Xcode already recognizes the
    VCS. If you want to be sure of it, modify a file, save it with *command* + *S*
    and check that you have the letter *M* on the right side of your file on the project
    navigator.![How to do it…](img/00022.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are happy with your changes, you can deliver them by right-clicking
    on `AppDelegate.swift`, then going to the **Source Control** option and selecting
    the **Commit "AppDelegate.swift" …** option.![How to do it…](img/00023.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, a dialog box asking for a description will appear; write about your modification
    as comment and click on **Commit 1 file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unfortunately, if you forgot to add a Git repository to your project, Xcode
    won't provide any mechanism to add it to your project, so you have to add it by
    hand. Opening the command line allows you to use Git from the command line and
    Xcode detects that this feature has been added. Some versions of Xcode can only
    detect that the version control has been added when you open your project, so
    if you've done all the steps and Xcode hasn't detected it, try closing and opening
    Xcode again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xcode offers you some features to work with Git and SVN, but they are very limited.
    If you need more commands from your VCS, you can use them from the command line
    or use an external tool for it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even if you are not going to work as part of a team, I recommend that you use
    a version control system. When developing with Swift or other languages, you sometimes
    need to rollback or compare the current code with previous versions of it, mainly
    when you have a new bug.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you would like to know more on this topic, check out the book *Git Version
    Control Cookbook*, *Packt Publishing*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
