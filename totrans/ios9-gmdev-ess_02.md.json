["```swift\nvar tileBoard = [[1,2,3,4],\n                 [5,6,7,8],\n                 [9,10,11,12],\n                 [13,14,15,\"\"]]\n```", "```swift\nvar twoDTileArray : [[Tiles]] = []     //blank 2D array of type,Tiles\nvar anotherArray = Array<Array<Tile>>()  //same array, using Generics\n```", "```swift\nvar keyItems = Set([Dungeon_Prize, Holy_Armor, Boss_Key,\"A\"])\n```", "```swift\nvar playerInventory: [Int : String]  =  [1 : \"Buster Sword\",  43 : \"Potion\", 22: \"StrengthBooster\"]\n```", "```swift\nvar stageReward: [Int : GameItem] = [:] //blank initialization\n//use of the Dictionary at the end of a current stage\nstageReward = [currentStage.score : currentStage.rewardItem]\n\n```", "```swift\nlet newBestScore : Void = NSUserDefaults.standardUserDefaults().setInteger(bestScore, forKey: \"bestScore\")\n```", "```swift\n//mutable Array\nvar unlockedLevels : [Int] =  [1, 2, 5, 8]\n\n//immutable Dictionary\nlet playersForThisRound : [PlayerNumber:PlayerUserName] = [453:\"userName3344xx5\", 233:\"princeTrunks\", 6567: \"noScopeMan98\", 211: \"egoDino\"]\n```", "```swift\nunlockedLevels.append(3)\n```", "```swift\nunlockedLevels += [3]\n```", "```swift\nunlockedLevels.insert(3, atIndex: 2)\n```", "```swift\nunlockedLevels.removeAtIndex(0) // array is now  [2, 3, 5, 8]\n```", "```swift\nunlockedLevels.removeLast() // array is now [2,3,5]\n```", "```swift\ninventory.insert(\"Power Ring\")    //.insert() adds items to a set\ninventory.remove(\"Magic Potion\")  //.remove() removes a specific item\ninventory.count                   //counts # of items in the Set\ninventory.union(EnemyLoot)        //combines two Sets\ninventory.removeAll()             //removes everything from the Set\ninventory.isEmpty                 //returns true\n```", "```swift\nvar inventory = [Float : String]() //creates a mutable dictionary\n\n/*\none way to set an equipped weapon in a game; where 1.0 could represent the first \"item slot\" that would be placeholder for the player's \"current weapon\"  \n*/\ninventory.updateValue(\"Broadsword\", forKey: 1.0)\n\n//removes an item from a Dictionary based on the key value\ninventory.removeValueForKey(\"StatusBooster\")\n\ninventory.count                   //counts items in the Dictionary\ninventory.removeAll(keepCapacity: false) //deletes the Dictionary\ninventory.isEmpty                 //returns false\n\n//creates an array of the Dictionary's values\nlet inventoryNames = [String](inventory.values)\n\n//creates an array of the Dictionary's keys\nlet inventoryKeys = [String](inventory.keys)\n```", "```swift\n//(a) outputs every item through the entire collection\n  //works for Arrays, Sets and Dictionaries but output will vary\nfor item in inventory {\n    print(item)\n}\n\n//(b) outputs sorted item list using Swift's sorted() function\n  //works for Sets\nfor item in sorted(inventory) {\n    print(\"\\(item)\")\n}\n\n//(c) outputs every item as well as its current index\n  //works for Arrays, Sets and Dictionaries\nfor (index, value) in enumerate(inventory) {\n    print(\"Item \\(index + 1): \\(value)\")\n}\n\n//(d)\n//Iterate through and through the keys of a Dictionary\nfor itemCode in inventory.keys {\n    print(\"Item code: \\(itemCode)\")\n}\n\n//(e)\n//Iterate through and through the values of a Dictionary\nfor itemName in inventory.values {\n    print(\"Item name: \\(itemName)\")\n}\n```", "```swift\nconst int MAX_ENEMIES = 10;  //constant\nfloat playerPower = 1.3;     //variable\n\n//Array of NSStrings\nNSArray * stageNames = @[@\"Downtown Tokyo\", @\"Heaven Valley\", @\" Nether\"];\n\n//Set of various NSObjects\nNSSet *items = [NSSet setWithObjects: Weapons, Armor,\n HealingItems,\"A\", nil];\n\n//Dictionary with an Int:String key:value\nNSDictionary *inventory = [NSDictionary dictionaryWithObjectsAndKeys:\n             [NSNumber numberWithInt:1], @\"Buster Sword\",\n             [NSNumber numberWithInt:43], @\"Potion\",\n             [NSNumber numberWithInt:22], @\"Strength\",\nnil];\n```", "```swift\nlet MAX_ENEMIES = 10          //constant\nvar playerPower = 1.3         //variable\n\n//Array of Strings\nlet stageNames : [String] = [\"Downtown Tokyo\",\"Heaven Valley\",\"Nether\"]    \n\n//Set of various NSObjects\nvar items = Set([Weapons, Armor, HealingItems,\"A\"])\n\n//Dictionary with an Int:String key:value\nvar playerInventory: [Int : String]  =  [1 : \"Buster Sword\",  43 : \"Potion\", 22: \"StrengthBooster\"]\n```", "```swift\nlet gameOverText =  \"Game Over!\"\n```", "```swift\nlet cardSuits =  \"♠ ♥ ♣ ♦\"\n```", "```swift\nvar emptyString = \"\"               // empty string literal\nvar anotherEmptyString = String()  // using type initializer\n```", "```swift\n//displays the player's current lives\nvar livesLabel = \"x \\(currentScene.player!.lives)\"\n\n//displays the player's current score\nvar scoreText = \"Score: \\(score)\"\n```", "```swift\nNSString *livesLabel = @\"Lives: \";\nint lives = 3;\nNSString *livesText = [NSString stringWithFormat:@\" %@ (%d days ago)\", livesLabel, lives];\n```", "```swift\nvar gameText = \"The player enters the stage\"\ngameText += \" and quickly lost due to not leveling up\"\n/* gameText now says\n\"The player enters the stage and lost due to not leveling up\" */\n```", "```swift\n let exclamationMark: Character = \"!\"\ngameText.append(exclamationMark)\n//gameText now says \"The player enters the stage and lost due to not leveling up!\"\n```", "```swift\nfor character in \"Start!\" {\n    print(character)\n}\n//outputs:\n//S\n//t\n//a\n//r\n//t\n//!\n```", "```swift\ngameText[gameText.startIndex]              // = T\ngameText[gameText.endIndex]                // = !\ngameText[gameText.startIndex.successor()]  // = h\ngameText[gameText.endIndex.predecessor()]  // = p\n```", "```swift\n//This is a single line comment\n/*\nThis is a comment block\nthat won't end until it reaches the closing asterisk/forward slash characters\n */\n```", "```swift\nvar isGameOver = false\n```", "```swift\nvar highestIntNumber : Int = Int.max\n```", "```swift\nlet currentPlayer = Player(name:\"Fumi\")       //(a)\nlet playerName = currentPlayer.getName()      //(b)\nvar playerHealth = currentPlayer.health       //(c)\ncurrentPlayer.attackEnemy()                   //(d)\n```", "```swift\nvar playerHealth = 100\n//Swift automatically infers that playerHealth is an Int object\n```", "```swift\nNSString *playerStatus = @\"Poisoned\";\nplayerStatus = nil;\n```", "```swift\nvar playerStatus = \"Poisoned\"\nplayerStatus = nil      //error!\n```", "```swift\nvar playerStatus : String   //error\n```", "```swift\nvar playerStatus : String?  //optional String\nvar stageBoss : Boss?       //optional Boss object\n```", "```swift\nvar causedGameOver:String? = whatKilledPlayer(enemy.recentAttack)\nlet text = \"Player Lost Because: \"\nlet gameOverMessage = text + causedGameOver  //error\n\n```", "```swift\nvar causedGameOver:String? = whatKilledPlayer(enemy.recentAttack)\nlet text = \"Player Lost Because: \"\nlet gameOverMessage = text + causedGameOver!  //code now compiles!\n\n```", "```swift\n@IBOutlet var titleLabel: UILabel!      //label from a Storyboard\nvar someUnwrappedOptional : GameObject! //our own unwrapped optional\n```", "```swift\nvar causedGameOver:String? = whatKilledPlayer(enemy.recentAttack)\nlet text = \"Player Lost Because: \"\nif let gotCauseOfDeath = causedGameOver {\n    let gameOverMessage = text + gotCauseOfDeath\n}\n```", "```swift\nlet text = \"Player Lost Because: \"\nif var causedGameOver = whatKilledPlayer(enemy.recentAttack) {\n    let message = text + causedGameOver\n}\n```", "```swift\nif let enemyType = currentEnemy?.type {\n    if enemyType == \"OneHitKill\"\n    {\n      player.loseLife()  //run the player's lost l\n    }\n}\n```", "```swift\nif player.health <= 0{\n   gameOver()\n}\n```", "```swift\nif (player.health <=0) && (player.lives <=0){ //&& = \"and\"\n   gameOver()\n}\n```", "```swift\n//(a)\nif !didPlayerWin { stageLost() }\n\n//(b)\nif didPlayerWin\n{            \n   stageWon()\n}\nelse\n{\n  stageLost()\n}\n\n//(c)\nif (enemy == Enemy.angelType){enemy.aura = angelEffects}\nelse if(enemy == Enemy.demonType){enemy.aura = demonEffects}\nelse{ enemy.aura = normalEffects }\n\n//(d)\nif let onlinePlayerID = onlineConnection()?.packetID?.playerID\n{\n  print(\"Connected PlayerID: /(onlinePlayerID)\"\n}\n\n//(e)\nif let attack = player.attackType, power = player.power where power != 0 {\n    hitEnemy(attack, power)\n}\n\n//(f)\nlet playerPower = basePower + (isPoweredUp ? 250 : 50)\n```", "```swift\nfor itemName in inventory.values {\n    print(\"Item name: \\(itemName)\")\n}\n```", "```swift\nfor var index = 0; index < 3; ++index {\n    print(\"index is \\(index)\")  \n}\n```", "```swift\nlet limit = 10\nvar someNumber = 1\nfor _ in 1...limit {\n    someNumber *= 2\n}\n```", "```swift\nlet score = player.score\nvar scoreCountNum = 0\nwhile scoreCountNum < score {\n    HUD.scoreText = String(scoreCountNum)\n    scoreCountNum = scoreCountNum * 2\n}\n```", "```swift\nlet score = player.score\nvar scoreCountNum = 0\ndo {\n    HUD.scoreText = String(scoreCountNum)\n    scoreCountNum = scoreCountNum * 2\n} while scoreCountNum < score\n```", "```swift\nGameCenter achievement (in this case, a 6x combo) based on the number of times the combo was achieved by the player. Don't worry too much about the GameCenter code (used with the GCHelper singleton object); that's something we will go over in future chapters when we make games in SpriteKit and SceneKit.\n```", "```swift\nswitch (comboX6_counter) {\n\n            case 2:\n                GCHelper.sharedInstance.reportAchievementIdentifier(\"Piki_ComboX6\", percent: 25)\n                break\n\n            case 5:\n                GCHelper.sharedInstance.reportAchievementIdentifier(\"Piki_ComboX6\", percent: 50)\n                break\n\n            case 10:\n                GCHelper.sharedInstance.reportAchievementIdentifier(\"Piki_ComboX6\", percent: 100)\n\n            default:\n                break\n\n        }\n```", "```swift\n-(int) getPlayerHealth() {\n    return player.health;\n}\n```", "```swift\n- (return_type) method_name:( argumentType1 )argumentName1\njoiningArgument2:( argumentType2 )argumentName2 ...\njoiningArgumentN:( argumentTypeN )argumentNameN\n{\n  function body\n}\n```", "```swift\nfunc getPlayerHealth() -> Int {\n    return player.health\n}\n//How we'd use the function\nvar currentHealth : Int = 0\ncurrentHealth = getPlayerHealth()\n```", "```swift\nfunc function_name(argumentName1 : argumentType1, argumentName2 : argumentType2, argumentNameN : argumentTypeN) -> return_type\n{\n  function body\n}\n```", "```swift\n//with a Player type as a parameter\nfunc displayPlayerName (player:Player){\n     print(player.name)\n}\n\n//without any parameters; using a class property\nfunc displayPlayerName(){\n     print(currentPlayer.name)\n}\n```", "```swift\nlet http503Error = (503, \"Service Unavailable\")\n```", "```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int) {\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\nExcerpt From: Apple Inc. \"IOS Developer Library\". https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-ID164\n```", "```swift\n//(a)\nGlobal-project wide properties/variables\n//(b)\nclass className : parentClassName, protocolName…protocolnName\n{\n//(c)\n  class scope properties\n//(d)\ninitializers (init(), convenience, required, etc)\n\n//(e)\n  func function_name1(argumentName1 : argumentType1, argumentName2 :    argumentType2, argumentNameN : argumentTypeN) -> return_type\n {\n   function-scope variables and body\n }\n                         .\n                         .\n                         .\n  func function_nameN(argumentName1 : argumentType1, argumentName2 :    argumentType2, argumentNameN : argumentTypeN) -> return_type\n {\n   function-scope variables and body\n }\n//(f)\ndeinit()\n\n} // end of the class\n//(g)\nglobal-project wide properties/variables (alternative position)\n```"]