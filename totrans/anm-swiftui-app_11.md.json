["```swift\n    @Binding var doorsOpened: Bool\n```", "```swift\nstruct ElevatorAndPeopleView_Previews: PreviewProvider {\n    static var previews: some View {\n        ElevatorAndPeopleView(doorsOpened: \n          .constant(false), moveMouth: .constant(false))\n    } \n```", "```swift\n ZStack {\n GeometryReader { geo in\n                }\n        }\n```", "```swift\n//MARK: - INSIDE ELEVATOR SCENE\n    Image(\"inside\").resizable()\n      .frame(maxWidth: geo.size.width,\n      maxHeight: geo.size.height)\n```", "```swift\n  //MARK: - ADD THE DOORS\n  HStack {\n      Image(\"leftDoor\").resizable()\n          .frame(maxWidth: geo.size.width)\n          .offset(x: doorsOpened ? -geo.size.width / 2 : 4)\n      Image(\"rightDoor\").resizable()\n          .frame(maxWidth: geo.size.width)\n          .offset(x: doorsOpened ? geo.size.width / 2 : -4)\n              }\n```", "```swift\n      Image(\"doorFrame\").resizable()\n          .frame(maxWidth: geo.size.width, maxHeight:\n            geo.size.height)\n```", "```swift\n.animation(Animation.easeInOut.speed(0.09).delay(0.3),\n  value: doorsOpened)\n```", "```swift\n  //MARK: - ADD THE PEOPLE\n      Image(\"manOne\")\n        .resizable().aspectRatio(contentMode: .fit)\n        .frame(maxWidth: geo.size.width - 200, maxHeight:\n          geo.size.height - 300)\n        .shadow(color: .black, radius: 30, x: 5, y: 5)\n        .offset(x: 0, y: 250)\n```", "```swift\n      Image(\"manTwo\")\n        .resizable().aspectRatio(contentMode: .fit)\n        .frame(maxWidth: geo.size.width, maxHeight:\n          geo.size.height - 290)\n        .shadow(color: .black, radius: 30, x: 5, y: 5)\n        .offset(x: 40, y: 230)\n        .rotation3DEffect(Angle(degrees: 20), axis: (x: 0,\n          y: -1, z: 0))\n\n      Image(\"manThree\")\n        .resizable().aspectRatio(contentMode: .fit)\n        .frame(maxWidth: geo.size.width - 100, maxHeight:\n          geo.size.height - 250)\n        .shadow(color: .black, radius: 30, x: 5, y: 5)\n        .offset(x: 130, y: 255)\n\n      Image(\"manFour\")\n        .resizable().aspectRatio(contentMode: .fit)\n        .frame(maxWidth: geo.size.width - 0, maxHeight:\n          geo.size.height - 280)\n        .shadow(color: .black, radius: 30, x: 5, y: 5)\n        .offset(x: -80, y: 265)\n```", "```swift\nimport SwiftUI\n```", "```swift\nclass DataModel: ObservableObject {\n                                 }\n```", "```swift\n    @Published var doorsOpened = false\n    @Published var floor1 = false\n    @Published var floor2 = false\n    @Published var goingUp = false\n    @Published var doorOpenTimer: Timer? = nil\n    @Published var chimesTimer: Timer? = nil\n    @Published var doorSoundTimer: Timer? = nil\n```", "```swift\n@main\nstruct Elevator: App {\n    @StateObject private var appData = DataModel()\n        var body: some Scene {\n        WindowGroup {\n            ContentView(appData: appData)\n        }\n    }\n}\n```", "```swift\nstruct ContentView: View {\n    @ObservedObject var appData: DataModel\n               •••••••\n}\n```", "```swift\nfunc openDoors() {\n    doorOpenTimer = Timer.scheduledTimer(withTimeInterval:\n      8, repeats: false) { _ in\n        self.doorsOpened.toggle()\n        }\n    }\n```", "```swift\nfunc playChimeSound() {\n    chimesTimer = Timer.scheduledTimer(withTimeInterval:\n      5.5, repeats: false) { _ in\n       playSound(sound: \"elevatorChime\", type: \"m4a\")\n      }\n    }\n```", "```swift\nimport Foundation\nimport AVFoundation\nvar audioPlayer: AVAudioPlayer?\nfunc playSound(sound: String, type: String) {\n    if let path = Bundle.main.path(forResource: sound,\n      ofType: type) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf:\n            URL(fileURLWithPath: path))\n            audioPlayer?.play()\n        } catch {\n            print(\"ERROR: Could not find and play the sound\n              file!\")\n        }\n    }\n}\n```", "```swift\nfunc playDoorOpenCloseSound(interval: TimeInterval) {\n        doorSoundTimer = Timer.scheduledTimer(withTimeInterval:           interval, repeats: false) { _ in\n            playSound(sound: \"doorsOpenClose\", type: \"m4a\")\n        }\n    }\n```", "```swift\nfunc floorNumbers() {\n        ///light up floor 1 as soon as the button is\n          pressed, making sure floor 2 is not lit first\n        if !floor2 {\n            floor1.toggle()\n        }\n        ///check if the doors are opened, if not, open the\n          doors and play the chime sound\n        if !doorsOpened {\n            openDoors()\n            playChimeSound()\n\n        ///going up - wait 4 seconds and turn on the floor\n          2 light, and turn off the floor 1 light\n            if goingUp {\n              withAnimation(Animation.default.delay(4.0)) {\n                    floor2 = true\n                    floor1 = false\n                }\n    ///once at the top, and the button is pressed again to \n      go down, wait five seconds then turn off the floor 2 \n      light and turn on the floor 1 light\n              withAnimation(Animation.default.delay(5.0)) {\n                    floor1 = true\n                    floor2 = false\n                    playDoorOpenCloseSound(interval: 8.5)\n                }\n            } else if !goingUp {\n              withAnimation(Animation.default.delay(5.0)) {\n                    floor1 = true\n                    floor2 = false\n                    playDoorOpenCloseSound(interval: 8.5)\n                }\n              withAnimation(Animation.default.delay(5.0)) {\n                    floor2 = true\n                    floor1 = false\n                }\n            }\n        }\n    }\n```", "```swift\n func stopTimer() {\n        doorOpenTimer?.invalidate()\n        doorOpenTimer = nil\n        chimesTimer?.invalidate()\n        chimesTimer = nil\n        doorSoundTimer?.invalidate()\n        doorSoundTimer = nil\n    }\n```", "```swift\nlet backgroundColor = Color(UIColor.black)\n```", "```swift\nvar body: some View {\n        ZStack {\n            backgroundColor.edgesIgnoringSafeArea(.all)\n               }\n```", "```swift\n          //MARK: - ADD THE PEOPLEANDELEVATOR VIEW\n            ElevatorAndPeopleView(doorsOpened: \n              $appData.doorsOpened)\n```", "```swift\n//MARK: - ELEVATOR BUTTON\n    GeometryReader { geo in\n      Button(action: {\n           appData.doorsOpened.toggle()\n        }) {\n           ///if the doors are opened, make the button \n             white, otherwise make it black\n            Circle().frame(width: 10, height: 10)\n              .foregroundColor(appData.doorsOpened ? .white \n              : .black)\n                .overlay(Circle().stroke(Color.red,\n                  lineWidth: 1))\n                .padding(5)\n                .background(Color.black)\n                .cornerRadius(30)\n        }.position(x: (geo.size.width / 33), y:\n          (geo.size.height / 2))\n```", "```swift\n//MARK: - ADD THE FLOOR LIGHTS\n  HStack {\n      Image(systemName: \"1.circle\")\n          .foregroundColor(appData.floor1 ? .red : .black)\n          .opacity(appData.floor1 ? 1 : 0.3)\n      Image(systemName: \"2.circle\")\n          .foregroundColor(appData.floor2 ? .red : .black)\n          .opacity(appData.floor2 ? 1 : 0.3)\n  }.position(x: (geo.size.width / 2), y: (geo.size.height *\n    0.02) + 2)\n      .font(.system(size: 25))\n```", "```swift\n //MARK: - ELEVATOR BUTTON\n    GeometryReader { geo in\n        Button(action: {\n             appData.stopTimer()\n            appData.playDoorOpenCloseSound(interval: 0.5)\n              appData.doorsOpened.toggle()\n            appData.goingUp.toggle()\n              appData.floorNumbers()\n        }) {\n```"]