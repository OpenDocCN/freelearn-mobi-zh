- en: '22'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Collection Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you implemented a search bar for the Journal List screen,
    and your app is now complete. However, your app is designed to suit the iPhone’s
    screen, and if you were to run it on an iPad or Mac, you’d see that it does not
    make the best use of the larger screen size.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will replace the table view on the Journal List screen
    with a **collection view**, which will make better use of the extra screen space
    available when you run your app on an iPad or Mac. You’ll also dynamically modify
    the number of columns and the collection view cell sizes when your device is rotated
    using size classes.
  prefs: []
  type: TYPE_NORMAL
- en: First, in the `Main` storyboard file, you’ll replace the table view on the Journal
    List screen with a collection view and configure the collection view cell to display
    the same information the table view cell used to display. Next, you’ll refactor
    the `JournalListViewController` and `JournalListTableViewCell` classes to work
    with the collection view and collection view cells you added. After that, you’ll
    add code to dynamically change the collection view cell size to suit the display
    your app is running on. Finally, you’ll test your app on different devices.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned about collection views, how
    to use collection view delegate and data source protocols, and how to dynamically
    modify your app’s interface based on size classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding collection views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the Journal List screen to use a collection view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically modifying collection view cell size using size classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your app on different devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter22` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/yIJpBHzAHCU](https://youtu.be/yIJpBHzAHCU%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by learning about collection views in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding collection views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A collection view is an instance of the `UICollectionView` class. It manages
    an ordered collection of elements and presents them using customizable layouts.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about collection views, visit [https://developer.apple.com/documentation/uikit/uicollectionview](https://developer.apple.com/documentation/uikit/uicollectionview).
  prefs: []
  type: TYPE_NORMAL
- en: The data displayed by a collection view is usually provided by a view controller.
    A view controller providing data for a collection view must adopt the `UICollectionViewDataSource`
    protocol. This protocol declares a list of methods that tells the collection view
    how many cells to display and what to display in each cell.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewDataSource` protocol, visit [https://developer.apple.com/documentation/uikit/uicollectionviewdatasource](https://developer.apple.com/documentation/uikit/uicollectionviewdatasource).
  prefs: []
  type: TYPE_NORMAL
- en: To provide user interaction, a view controller for a collection view must also
    adopt the `UICollectionViewDelegate` protocol, which declares a list of methods
    triggered when a user interacts with the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewDelegate` protocol, visit [https://developer.apple.com/documentation/uikit/uicollectionviewdelegate](https://developer.apple.com/documentation/uikit/uicollectionviewdelegate).
  prefs: []
  type: TYPE_NORMAL
- en: The way the collection view is laid out is specified by a `UICollectionViewLayout`
    object. This determines the cell placement, supplementary views, and decoration
    views inside the collection view’s bounds.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll use the `UICollectionViewFlowLayout` class, a subclass of the `UICollectionViewLayout`
    class, for your app. Collection view cells in the collection view flow from one
    row or column to the next, with each row containing as many cells as will fit.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewFlowLayout` class, visit [https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout](https://developer.apple.com/documentation/uikit/uicollectionviewflowlayout).
  prefs: []
  type: TYPE_NORMAL
- en: A flow layout works with the collection view’s delegate object to determine
    the size of items, headers, and footers in each section and grid. That delegate
    object must conform to the `UICollectionViewDelegateFlowLayout` protocol. This
    allows you to adjust layout information dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UICollectionViewFlowLayoutDelegate` protocol, visit
    [https://developer.apple.com/documentation/uikit/uicollectionviewdelegateflowlayout](https://developer.apple.com/documentation/uikit/uicollectionviewdelegateflowlayout).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a basic understanding of collection views, you’ll modify the
    Journal List screen by replacing the table view with a collection view in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Journal List screen to use a collection view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At present, the Journal List screen in the *JRNL* app uses a table view. A
    table view presents table view cells using rows arranged in a single column. This
    works great on an iPhone, but if you were to run the app on an iPad, you’d see
    there is a lot of wasted screen space on the Journal List screen, as shown in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.1: Simulator showing Journal List screen containing a table view
    on an iPad'
  prefs: []
  type: TYPE_NORMAL
- en: 'To address this, you’ll replace the table view with a collection view, which
    will allow you to more effectively use the available screen space, as shown in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.2: Simulator showing Journal List screen containing a collection
    view on an iPad'
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement a collection view on the Journal List screen, you’ll need to do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Main` storyboard file, replace the table view in the **Journal Scene**
    with a collection view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add UI elements to the collection view cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `JournalListTableViewCell` class to manage the collection view cell’s
    contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `JournalListViewController` class to manage what the collection view
    displays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add methods to dynamically change the collection view cell’s size based on device
    screen size and orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll start by modifying the **Journal Scene** in the `Main` storyboard file
    to use a collection view instead of a table view in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the table view with a collection view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the **Journal Scene** in the `Main` storyboard file contains a
    table view. You’ll replace this with a collection view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `JRNL` project you modified in the previous chapter and choose **iPad
    (10th generation)** as the destination from the Destination menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.3: Destination menu showing iPad (10th generation) selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and note how it appears on the iPad’s screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.4: Simulator showing iPad screen'
  prefs: []
  type: TYPE_NORMAL
- en: Although the app works as it should, note that a lot of space is wasted on the
    right side of the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Stop button. Click the **Main** storyboard file in the Project navigator.
    In the document outline, click the table view under **Journal Scene**. Press the
    *Delete* key to remove it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.5: Editor area showing table view selected in the document outline'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button to display the library. Type `collec` in the filter
    field. A **Collection View** object will appear as one of the results. Drag it
    to the middle of the view of the **Journal Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.6: Library with Collection View object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the collection view is selected and click the Auto Layout Add New
    Constraints button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.7: Journal scene with collection view selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `0` in the top, left, right, and bottom edge constraint fields and click
    all the pale red struts. Make sure all the struts have turned bright red and **Constrain
    to margins** is not checked. Then, click the **Add 4 Constraints** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.8: Auto Layout – Add New Constraints pop-up dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: This sets the space between the edges of the collection view and the edges of
    the enclosing view to 0, binding the collection view’s edges to those of the enclosing
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that all four sides of the collection view are now bound to the edges
    of the screen as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.9: Journal Scene with collection view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: With the collection view still selected, click the Size inspector button. Under
    **Collection View**, set **Estimate Size** to **None**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.10: Size inspector with Estimate Size highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be adding code to determine the collection view size dynamically later.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to re-establish the segue between the Journal List screen and the
    Journal Entry Detail screen. *Ctrl* + *Drag* from **Collection View Cell** in
    the document outline to the **Entry Detail Scene** and choose **Show** from the
    pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.11: Editor area showing drag destination'
  prefs: []
  type: TYPE_NORMAL
- en: Click the newly added storyboard segue and click the Attributes inspector button.
    Under **Storyboard Segue**, set **Identifier** to `entryDetail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.12: Attributes inspector with Identifier set to entryDetail'
  prefs: []
  type: TYPE_NORMAL
- en: You have added a collection view to the Journal Scene and used Auto Layout constraints
    to make it fill the screen, but the prototype collection view cell is currently
    empty. You’ll add UI elements to the collection view cell in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding UI elements to the collection view cell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have replaced the table view inside the **Journal Scene** with a collection
    view, but the prototype collection view cell inside the collection view is empty.
    You’ll need to add an image view and two labels to the prototype collection view
    cell and set up the constraints for them. This will make it match the table view
    cell used previously. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Collection View Cell** for the **Journal Scene** in the document outline.
    Drag the right edge of the collection view cell to the right until it reaches
    the right side of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.13: Editor area showing Collection View Cell'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Size inspector button, and under **Collection View Cell**, set **Height**
    to `90`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add an image view to the table view cell, click the Library button. Type
    `imag` into the filter field. An **Image View** object will appear in the results.
    Drag it into the prototype cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.14: Prototype cell with image view added'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the image view selected, click the Add New Constraints button and enter
    the following values to set the constraints for the newly added image view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bottom: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `90`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constrain to margins** should not be checked. When done, click the **Add
    4 Constraints** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.15: Constraints for image view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Under **Image View**, set **Image**
    to `face.smiling`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.16: Image View with Image set to face.smiling'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you’ll add a label to display the journal entry date. Click the Library
    button. Type `label` into the filter field. A **Label** object will appear in
    the results. Drag it to the space between the image view you just added and the
    right side of the cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.17: Prototype cell with label added'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, under **Label**, set **Font** to **Title 1** using
    the **Font** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.18: Attributes inspector for Label'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Add New Constraints button and enter the following values to set
    the constraints for the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constrain to margins** should be checked, which sets a standard margin of
    8 points. When done, click the **Add 3 Constraints** button.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.19: Constraints for label'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you’ll add a label to display the journal entry title. Click the Library
    button. Type `label` into the filter field. A **Label** object will appear in
    the results. Drag it to the space between the label you just added and the bottom
    of the cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.20: Prototype cell with second label added'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, under **Label**, set **Font** to **Body** using
    the **Font** menu, and set **Lines** to `2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.21: Attributes inspector for Label'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Add New Constraints button and enter the following values to set
    the constraints for the label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `8`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constrain to margins** should be checked, which sets a standard margin of
    8 points. When done, click the **Add 3 Constraints** button.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.22: Constraints for second label'
  prefs: []
  type: TYPE_NORMAL
- en: The prototype collection view cell now has an image view and two labels, and
    all the necessary constraints have been added. Fantastic! In the next section,
    you’ll modify the `JournalListTableViewCell` class to manage the collection view
    cell’s contents.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the JournalListTableViewCell class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Originally, the `JournalListTableViewCell` class was used to manage the table
    view instance’s table view cells in the Journal List screen. Since you have replaced
    the table view with a collection view, all the connections between the `JournalListTableViewCell`
    class will need to be re-established to work with the UI elements that you just
    added to the collection view cell. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you’ll change the `JournalListTableViewCell` class name to more accurately
    describe its new role. Click the `JournalListTableViewCell`file in the Project
    navigator. Right-click on the class name in the file and choose **Refactor** |
    **Rename…** from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.23: Pop-up menu with Refactor | Rename… selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the name to `JournalListCollectionViewCell` and click **Rename**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.24: Editor area showing the new name'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll modify the class declaration as this class is now used to manage a collection
    view cell. Change the superclass to `UICollectionViewCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll now assign this class as the identity of the collection view cell. Click
    the **Main** storyboard file in the Project navigator and click **Collection View
    Cell** under **Journal Scene** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.25: Editor area showing Collection View Cell inside Journal Scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button. Under the **Custom Class** section, set
    **Class** to `JournalListCollectionViewCell`. This sets a `JournalListCollectionViewCell`
    instance as the custom collection view subclass for the collection view cell.
    Press *Return* when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.26: Identity inspector showing Class set to JournalListCollectionViewCell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Under **Collection Reusable View**,
    set **Identifier** to `journalCell`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.27: Attributes inspector showing Identifier set to journalCell'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the name of the collection view cell in the document outline has changed
    to **journalCell**.
  prefs: []
  type: TYPE_NORMAL
- en: With **journalCell** selected in the document outline, click the Connections
    inspector button to display the outlets for **journalCell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag from the **photoImageView** outlet to the image view in the table view
    cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag from the **dateLabel** outlet to the top label in the table view cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag from the **titleLabel** outlet to the bottom label in the table view cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the connections look like the following screenshot when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.28: Connections inspector showing the connections for journalCell'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  prefs: []
  type: TYPE_NORMAL
- en: The `journalCell` collection view cell in the `Main` storyboard file has now
    been set up with the `JournalCollectionTableViewCell` class. The outlets for the
    collection view cell’s image view and labels have also been assigned. In the next
    section, you’ll update the `JournalListViewController` class to work with a collection
    view instead of a table view.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the JournalListViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the `JournalListViewController` class has an outlet for a `UITableView`
    object and implemented data source and delegate methods to manage a table view.
    You’ll modify this class to work with a collection view instead. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you’ll modify the class declaration to work with a `UICollectionView`
    instance. Click the **JournalListViewController** file in the Project navigator.
    Modify the class declaration as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you’ve changed the data source and delegate protocols to the collection
    view equivalents and added conformance to a new protocol, `UICollectionViewDelegateFlowLayout`.
    This protocol is used to determine how the collection view cells in a collection
    view are laid out. You will see an error because the collection view data source
    methods have not been implemented. Don’t worry about the error as you’ll fix it
    in a later step in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the name for the `tableview` outlet, right-click it and choose **Refactor**
    | **Rename…** from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.29: Pop-up menu with Refactor | Rename… selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the name to `collectionView` and click **Rename**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.30: Editor area showing the new name'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the view controller will be managing a collection view, change the outlet
    type from `UITableView` to `UICollectionView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To establish the connections between the UI element and your code, click the
    **Main** storyboard file in the Project navigator and click the first **Journal
    Scene** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button and drag from the **collectionView**
    outlet to the **Collection View** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.31: Connections inspector showing the connections for JournalListViewController'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Collection View** in the document outline. Drag from the **dataSource**
    and **delegate** outlets to the view controller (shown as **Journal**) in the
    document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.32: Connections inspector showing the connections for collectionView'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you’ll fix the errors in the `JournalListViewController` class. Click the
    **JournalListViewController** file in the Project navigator and replace the table
    view data source methods in your code with these collection view data source methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, they are very similar to the table view data source methods
    that you used previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you are now using a collection view, `tableView(_:commit:forRowAt:)` can
    no longer be used to remove cells. Replace the `tableView(_:commit:forRowAt:)`
    method with the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Instead of swiping left to delete, this method implements a contextual menu
    with a single option, **Delete**, that appears when you tap and hold on a collection
    view cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also see an error in the `prepare(for:sender:)` method. Modify the `guard`
    statement in the `prepare(for:sender:)` method as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the errors in `JournalListViewController` have been resolved. Cool! In the
    next section, you’ll add code to change the size of the collection view cells
    based on device screen size and orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically modifying collection view cell size using size classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw earlier, the table view on the Journal List screen presents table
    view cells using rows arranged in a single column. This works great on an iPhone,
    but as you have seen, this results in a lot of wasted space if you run the app
    on an iPad. Even though you can use the same UI for both iPhone and iPad, it would
    be better if you could customize it to suit each device.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you’ll add some code so your app can identify the size of the screen
    it’s running on, and you’ll dynamically modify the size of the collection view
    cells in the collection view to suit. You can identify the current screen size
    using size classes; you’ll learn about them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding size classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To determine the size of the screen your app is running on, you must consider
    the effects of device orientation on your UI. It can be challenging to do this
    as there is a wide variety of screen sizes, in both portrait and landscape orientations.
    To make this easier, instead of using the physical resolution of the device, you
    will use size classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on size classes, see this link: [https://developer.apple.com/design/human-interface-guidelines/layout](https://developer.apple.com/design/human-interface-guidelines/layout).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Size classes are traits that are automatically assigned to a view by the operating
    system. Two classes are defined, which describe the height and width of a view:
    regular (expansive space) and compact (constrained space). Let’s look at size
    classes for a full-screen view on different devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_22_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.33: Size classes for different iOS devices'
  prefs: []
  type: TYPE_NORMAL
- en: For the *JRNL* app, you will configure the collection view in the Journal List
    screen to use a single column of collection view cells if the size class is compact,
    and two columns if the size class is regular.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll add code to your app to determine the current size class. Once you know
    the size class, you’ll be able to set the number of columns to use and the size
    of the collection view cells in the collection view. You’ll learn how to do this
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the JournalListViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have already made the `JournalListViewController` class adopt the `UICollectionViewDelegateFlowLayout`
    protocol. Now you will create and set the collection view’s layout using a `UICollectionViewFlowLayout`
    instance and implement methods to dynamically set the collection view cell size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **JournalListViewController** file in the Project navigator. In the
    `JournalListViewController` class, add the following method to the class definition
    before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method creates an instance of the `UICollectionViewFlowLayout` class, sets
    all the edge insets for the collection view to 10 points, sets the minimum inter-item
    spacing to 0 points, sets the minimum line spacing to 10 points, and assigns it
    to the collection view. Section insets reflect the spacing at the outer edges
    of the section. Minimum inter-item spacing is the minimum spacing to use between
    items in the same row. Minimum line spacing is the minimum spacing to use between
    lines of items in the grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `UICollectionViewDelegateFlowLayout` method after the `setupCollectionView()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method determines the number of columns to be displayed and sets the height
    and width of the collection view cells.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This method returns a `CGSize` instance that the collection view cell size should
    be set to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This code sets the number of columns to display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the width of the screen and assigns it to `viewWidth`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This code subtracts the space used for the edge insets so the cell size can
    be determined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This statement calculates the width of the cell by dividing `contentWidth` by
    the number of columns and assigns it to `cellWidth`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This statement assigns `90` to `cellHeight`, which will be used to set the cell
    height.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This returns the `CGSize` instance containing the cell size.
  prefs: []
  type: TYPE_NORMAL
- en: Assume you’re running on iPhone 16 Pro Max in portrait mode. The horizontal
    size class would be `.compact`, so `numberOfColumns` is set to `1`. `viewWidth`
    would be assigned the width of the iPhone screen, which is `414` points. `contentWidth`
    is set to `414 - (10 x 2) = 394`. `cellWidth` is set to `contentWidth / numberOfColumns
    = 394`, and `cellHeight` is set to `90`, so the `CGSize` instance returned would
    be `(394, 90),` enabling one cell to fit in a row.
  prefs: []
  type: TYPE_NORMAL
- en: When you rotate the same iPhone to landscape mode, the horizontal size class
    would be `.regular`, so `numberOfColumns` is set to `2`. `viewWidth` would be
    assigned the height of the iPhone screen, which is `896` points. `contentWidth`
    is set to `896 - (10 x 3) = 866`. `cellWidth` is set to `contentWidth / numberOfColumns
    = 433`, and `cellHeight` is set to `90`, so the `CGSize` instance returned would
    be `(433, 90)`, enabling two cells to fit in a row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad()` method to call the `setupCollectionView()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method after the `viewDidLoad()` method to recalculate the
    number of columns and size of the collection view cells when the device is rotated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have implemented all the code required to change the collection view cell
    size based on size classes. Excellent! In the next section, you’ll test your app
    on different simulated devices and on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your app on different devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have implemented all the code required to dynamically set collection
    view cell size, you’ll test your app on different simulated devices and on your
    Mac. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulator should still be set to iPad. Build and run your app. It will display
    two columns, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.34: Simulator showing iPad screen with two columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Rotate Left** from the **Device** menu, and you’ll still see two columns,
    but the cells have expanded in size to fill the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.35: Simulator showing iPad screen rotated to the left with two columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop your app and choose **iPhone SE (3rd Generation)** from the Destination
    menu. Run your app on Simulator again, and it will display a single column, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.36: Simulator showing iPhone screen with a single column'
  prefs: []
  type: TYPE_NORMAL
- en: Simulator will not automatically close the iPad instance when it launches the
    iPhone instance. Close the iPad instance manually for better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Rotate Left** from the **Device** menu, and you’ll still see a single
    column, but the cell size has expanded to fill the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.37: Simulator showing iPhone screen rotated with a single column'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop your app and choose **iPhone 16 Pro Max** from the Destination menu. Run
    your app on Simulator again, and it will display a single column, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.38: Simulator showing iPhone screen with a single column'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Rotate Left** from the **Device** menu, and you’ll see two columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.39: Simulator showing iPhone screen rotated with two columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop your app and choose **MyMac (Designed for iPad)** in the Destination menu.
    Run your app and it should display two columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_22_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 22.40: Mac app with two columns'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need a free or paid Apple Developer account to run your app on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, clicking the camera button while the app is running
    on the Mac will cause the app to crash. To work around this, choose **Product
    | Scheme | Edit Scheme...** from the menu bar, select **Run** from the sidebar,
    click the **Diagnostics** tab, and uncheck the **Metal API Validation** check
    box.
  prefs: []
  type: TYPE_NORMAL
- en: You have modified your app to use a collection view in place of a table view,
    and you have enabled it to dynamically modify the collection view cell size when
    it runs on different devices. Great job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you replaced the table view on the Journal List screen with
    a collection view, which makes better use of the extra screen space available
    when you run your app on an iPad or Mac. You also made your app dynamically modify
    the number of columns and the collection view cell sizes when your device is rotated
    using size classes.
  prefs: []
  type: TYPE_NORMAL
- en: First, in the `Main` storyboard file, you replaced the table view on the Journal
    List screen with a collection view and configured the collection view cell to
    display the same information the table view cell used to display. Next, you modified
    the `JournalListTableViewController` and `JournalListTableViewCell` classes to
    work with the collection view and collection view cells. After that, you added
    code to dynamically change the collection view cell size to suit the display your
    app is running on. Finally, you created and tested your app on Simulator and your
    Mac.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to use collection views in your app and know how to dynamically
    modify your app’s interface based on size classes.
  prefs: []
  type: TYPE_NORMAL
- en: This is the end of *Part 3* of this book. You’ll learn more about the cool new
    features Apple introduced during WWDC 2024 in the next part, starting with SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: Leave a review!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you’ve completed
    reading it, please take a moment to leave an Amazon review; it will only take
    a minute, but it makes a big difference for readers like you. Scan the QR code
    below or visit the link to receive a free ebook of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177460609.png)](https://packt.link/NzOWQ%0D)'
  prefs: []
  type: TYPE_NORMAL
