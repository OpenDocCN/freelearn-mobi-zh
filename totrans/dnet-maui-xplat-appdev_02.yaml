- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with .NET MAUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 .NET MAUI
- en: Since the release of .NET 5, Microsoft has been trying to unify different .NET
    implementations into one .NET release. .NET Multi-platform App UI (or .NET MAUI)
    is the effort to provide a unified cross-platform UI framework. We will learn
    how to use .NET MAUI to develop cross-platform applications in this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 .NET 5 发布以来，微软一直在努力将不同的 .NET 实现统一到一个 .NET 版本中。.NET 多平台应用程序用户界面（或 .NET MAUI）是提供统一跨平台
    UI 框架的努力。本书将教会我们如何使用 .NET MAUI 开发跨平台应用程序。
- en: 'The following is what we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下内容：
- en: Overview of cross-platform technologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台技术的概述
- en: Comparison of cross-platform technologies (.NET, Java, and JavaScript)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台技术（.NET、Java 和 JavaScript）的比较
- en: .NET landscape and the history of Xamarin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 景观和 Xamarin 的历史
- en: .NET MAUI features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET MAUI 特性
- en: .NET MAUI Blazor apps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET MAUI Blazor 应用程序
- en: What’s new in .NET 8 for .NET MAUI?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 8 为 .NET MAUI 带来了哪些新特性？
- en: Development environment setup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发环境设置
- en: If you’re new to .NET development, this chapter will help you to understand
    the .NET landscape. For Xamarin developers, many topics in this book may sound
    familiar; this chapter will give you an overview of what we will discuss in this
    book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚接触 .NET 开发，本章将帮助你了解 .NET 的整体环境。对于 Xamarin 开发者来说，本书中的许多主题可能听起来很熟悉；本章将为你概述本书将要讨论的内容。
- en: Overview of cross-platform and full stack technologies
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台和全栈技术的概述
- en: .NET Multi-platform App UI, or .NET MAUI, is a cross-platform development framework
    from Microsoft for building apps that targets both mobile and desktop form factors
    on Android, iOS, macOS, Windows, and Tizen. It is one of a number of cross-platform
    frameworks available on the market.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 多平台应用程序用户界面，或称 .NET MAUI，是微软推出的一款跨平台开发框架，用于构建针对 Android、iOS、macOS、Windows
    和 Tizen 等移动和桌面设备的应用程序。它是市场上众多跨平台框架之一。
- en: Before discussing cross-platform technologies, let’s review the scope of application
    development first. This review will help us to understand the various cross-platform
    frameworks better.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论跨平台技术之前，我们先回顾一下应用开发的范围。这次回顾将帮助我们更好地理解各种跨平台框架。
- en: Generally, software development can be divided into two categories – **systems
    programming** and **application programming**. Application programming aims to
    produce software that provides services to the user directly, whereas systems
    programming aims to produce software and software platforms that provide services
    to other software. In the .NET domain, the development of the .NET platform itself
    belongs to systems programming, whereas application development on top of the
    .NET platform belongs to application programming.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，软件开发可以分为两大类——**系统编程**和**应用编程**。应用编程旨在直接为用户提供软件服务，而系统编程旨在产生为其他软件提供服务的软件和软件平台。在
    .NET 领域，.NET 平台本身的发展属于系统编程，而基于 .NET 平台的应用开发则属于应用编程。
- en: Compared to systems programming, most software development demands are from
    application programming.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与系统编程相比，大多数软件开发需求都来自应用编程。
- en: Many business solutions fall under the category of application development.
    To understand why we choose a specific technology stack for a solution, it is
    essential to have an overview of all the technologies used in the entire solution.
    Once we have a clear understanding of the role cross-platform technologies play
    within the entire solution, we can better comprehend the technology we wish to
    select.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '许多商业解决方案都属于应用开发的范畴。为了理解为什么我们为解决方案选择特定的技术栈，了解整个解决方案中使用的所有技术概述是至关重要的。一旦我们清楚地理解了跨平台技术在整个解决方案中的作用，我们就能更好地理解我们希望选择的技术。 '
- en: Most of the development effort for business solutions consists of frontend and
    backend components. Frontend developers are responsible for the visible and interactive
    part of an application that users directly see, touch, and interact with. Typically,
    the frontend team focuses on developing web and native applications. On the other
    hand, backend development deals with server-side processing, data management,
    and the implementation of business logic within an application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 商业解决方案的大部分开发工作包括前端和后端组件。前端开发者负责用户直接看到、触摸和交互的应用程序的可视和交互部分。通常，前端团队专注于开发网页和原生应用程序。另一方面，后端开发涉及服务器端处理、数据管理和应用程序中业务逻辑的实现。
- en: Frontend and backend development involve different programming languages and
    frameworks. Sometimes, the same team may work on both frontend and backend development
    due to various reasons. In this case, we need a team who can work on full stack
    development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 前端和后端开发涉及不同的编程语言和框架。有时，由于各种原因，同一个团队可能需要同时进行前端和后端开发。在这种情况下，我们需要一个能够进行全栈开发的团队。
- en: To classify application development by programming languages and frameworks,
    we have the below three categories.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据编程语言和框架对应用程序开发进行分类，我们有以下三个类别。
- en: Native application
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地应用程序
- en: By native application development, we usually refer to application development
    for a particular operating system. For desktop applications, it could involve
    Windows applications, macOS applications, or Linux applications. For mobile applications,
    it could involve Android or iOS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本地应用程序开发，我们通常指的是为特定操作系统进行的应用程序开发。对于桌面应用程序，可能包括Windows应用程序、macOS应用程序或Linux应用程序。对于移动应用程序，可能包括Android或iOS。
- en: When we develop a native application, we may need to support multiple platforms
    (Windows, Linux, Android, macOS/iOS, etc.). To support multiple platforms, we
    need to use different programming languages, tools, and libraries to develop each
    of them individually.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发本地应用程序时，我们可能需要支持多个平台（Windows、Linux、Android、macOS/iOS等）。为了支持多个平台，我们需要使用不同的编程语言、工具和库来分别开发每一个平台。
- en: Web application
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web应用程序
- en: Web application development has gone through several generations of evolution
    over the past few decades, from the Netscape browser with static web pages to
    today’s **single-page application (SPA)** using JavaScript frameworks (such as
    React and Angular). In web application development, JavaScript and various JavaScript-based
    frameworks dominate the market. In the .NET ecosystem, Blazor is trying to catch
    up in this area. We’ll learn more about Blazor in Chapter 8, *Introducing Blazor
    Hybrid App Development.*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几十年中，Web应用程序开发已经经历了几个时代的演变，从Netscape浏览器中的静态网页到今天使用JavaScript框架（如React和Angular）的**单页应用程序（SPA）**。在Web应用程序开发中，JavaScript和各种基于JavaScript的框架占据了市场的主导地位。在.NET生态系统中，Blazor正在努力追赶这个领域的步伐。我们将在第8章“介绍Blazor混合应用程序开发”中了解更多关于Blazor的内容。
- en: Backend services
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端服务
- en: Both native applications and web applications typically require backend services
    to access business logic or a database. For backend development, there are various
    languages and frameworks available, including Java/Spring, .NET, Node.js, Ruby
    on Rails, and Python/Django. In many cases, native applications and web applications
    can share the same backend service. Java/Spring, ASP.NET, and Node.js are among
    the most popular choices for backend service developments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本地应用程序和Web应用程序通常需要后端服务来访问业务逻辑或数据库。对于后端开发，有各种语言和框架可供选择，包括Java/Spring、.NET、Node.js、Ruby
    on Rails和Python/Django。在许多情况下，本地应用程序和Web应用程序可以共享同一个后端服务。Java/Spring、ASP.NET和Node.js是后端服务开发中最受欢迎的选择之一。
- en: The selection of the technical stack for each category can significantly impact
    the complexity of a solution. In the next section, we will review and analyze
    solution complexity.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类别的技术栈选择可以显著影响解决方案的复杂性。在下一节中，我们将回顾和分析解决方案的复杂性。
- en: Managing development complexity
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理开发复杂性
- en: Building a complete solution usually requires a web app, a native app, and a
    backend service. Since web, native, and backend development use different programming
    languages and frameworks, we have to set up multiple teams to implement one solution.
    To manage the complexity of the development process, we need to manage the profile
    of the development team. The team profile can be managed according to two extreme
    cases/approaches. The simplest one is to set up one team that works on all stacks.
    The more complex one is to have separate teams for each stack. To successfully
    develop for all stacks using one team, the team must be a cross-platform full
    stack development team. Is it possible to have a cross-platform full stack team?
    Let’s review various scenarios for this in the next two sections.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个完整的解决方案通常需要一个Web应用程序、一个本地应用程序和一个后端服务。由于Web、本地和后端开发使用不同的编程语言和框架，我们必须组建多个团队来实现一个解决方案。为了管理开发过程的复杂性，我们需要管理开发团队的配置。团队配置可以根据两种极端情况/方法进行管理。最简单的一种是建立一个涵盖所有层的团队。更复杂的一种是针对每个层有独立的团队。要成功使用一个团队开发所有层，该团队必须是一个跨平台的全栈开发团队。是否存在跨平台的全栈团队？让我们在下一两节中回顾各种场景。
- en: Full stack development
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全栈开发
- en: Many people doubt whether it is good, or even possible, to set up a full stack
    team, but in fact, the earliest web development frameworks were full stack frameworks.
    If you had a chance to use Java/Thymeleaf or ASP.NET MVC, you will know that they
    are full stack frameworks. These frameworks use server-side rendering, so the
    implementation of the UI and business logic are all on the server side.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人怀疑组建全栈团队是否好，甚至是否可行，但实际上，最早的Web开发框架都是全栈框架。如果你有机会使用Java/Thymeleaf或ASP.NET MVC，你会知道它们是全栈框架。这些框架使用服务器端渲染，因此UI和业务逻辑的实现都在服务器端。
- en: The separation of frontend and backend came with the emergence of SPAs. To move
    the UI to the client side, SPA frameworks, such as React, Angular, and Vue.js,
    are used to implement the client-side logic. Backend services are implemented
    using frameworks such as Java/Spring and ASP.NET Core.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前端和后端的分离伴随着单页面应用（SPAs）的出现。为了将UI移动到客户端，SPA框架，如React、Angular和Vue.js，被用来实现客户端逻辑。后端服务使用Java/Spring和ASP.NET
    Core等框架来实现。
- en: SPA frameworks use **client-side rendering** (**CSR**), while Java/Thymeleaf
    and ASP.NET MVC use **server-side rendering** (**SSR**). Both CSR and SSR have
    their pros and cons. In modern application development, both CSR and SSR are used
    by frameworks, as in Next.js and Nuxt.js. In .NET 8, Microsoft introduced server-side
    Blazor component rendering, or Blazor United. With this feature, the boundary
    between frontend and backend in ASP.NET has blurred again.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 单页面应用（SPA）框架使用**客户端渲染**（**CSR**），而Java/Thymeleaf和ASP.NET MVC使用**服务器端渲染**（**SSR**）。CSR和SSR各有优缺点。在现代应用开发中，框架如Next.js和Nuxt.js都同时使用了CSR和SSR。在.NET
    8中，微软引入了服务器端Blazor组件渲染，或称Blazor United。有了这个特性，ASP.NET中前端和后端的界限再次变得模糊。
- en: In summary, we should choose technology stacks based on business requirements,
    so there is not a single, catch-all answer as to whether we should go with full
    stack development or not.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们应该根据业务需求选择技术栈，因此并没有一个单一的、通用的答案来决定我们是否应该采用全栈开发。
- en: For end users, SPAs are very similar to native applications, and some SPA frameworks
    have even evolved into cross-platform frameworks, such as React Native. With React
    and React Native, it is possible to have one team working on both frontend development
    and native application development. Furthermore, if a JavaScript-based backend
    framework is chosen, it is possible to set up one cross-platform full stack team
    to implement the entire solution.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最终用户来说，SPAs与原生应用非常相似，一些SPA框架甚至已经发展成为跨平台框架，如React Native。使用React和React Native，一个团队可以同时进行前端开发和原生应用开发。此外，如果选择了基于JavaScript的后端框架，就有可能组建一个跨平台全栈团队来实现整个解决方案。
- en: To understand cross-platform frameworks better, let us analyze the cross-platform
    frameworks currently available on the market in the next section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解跨平台框架，让我们在下一节分析目前市场上可用的跨平台框架。
- en: Cross-platform technologies
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台技术
- en: Cross-platform frameworks are alternative solutions to native application development.
    Native application development refers to using the programming language and **software
    development kit** (**SDK**) provided by the operating system. In native application
    development, we use native development tools, such as Swift/UIKit for iOS, Java/Kotlin
    for Android, and C#/WinUI for Windows. Ideally, we should use the tools provided
    by the operating system vendor to develop applications for a given operating system.
    With native application development, we don’t have performance or compatibility
    issues in our apps. With cross-platform development frameworks, there will always
    be certain corner cases that cannot be resolved using cross-platform APIs alone.
    Regardless of whether you are a .NET MAUI, React Native, or Flutter developer,
    it is necessary to acquire a certain level of native programming knowledge to
    address these specific cases. For instance, I am currently waiting for the ZXing.Net.Maui
    project to be ready to support QR code functionality in my application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台框架是原生应用程序开发的替代解决方案。原生应用程序开发是指使用操作系统提供的编程语言和**软件开发工具包**（**SDK**）。在原生应用程序开发中，我们使用原生开发工具，例如
    iOS 的 Swift/UIKit、Android 的 Java/Kotlin 和 Windows 的 C#/WinUI。理想情况下，我们应该使用操作系统供应商提供的工具来为特定操作系统开发应用程序。使用原生应用程序开发，我们的应用程序不会出现性能或兼容性问题。使用跨平台开发框架时，总会存在某些无法仅使用跨平台
    API 解决的边缘情况。无论你是 .NET MAUI、React Native 还是 Flutter 开发者，获取一定程度的原生编程知识来解决这些特定情况是必要的。例如，我现在正在等待
    ZXing.Net.Maui 项目准备就绪，以便在我的应用程序中支持二维码功能。
- en: However, we usually need to develop our application for multiple operating systems.
    Native application development incurs much higher costs than cross-platform frameworks.
    We must strike a balance between budget, time, and quality in a project. Again,
    we need to choose a solution based on the business requirements. This might mean
    we need to choose a cross-platform framework.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们通常需要为多个操作系统开发我们的应用程序。原生应用程序开发比跨平台框架的成本要高得多。在项目中，我们必须在预算、时间和质量之间取得平衡。再次强调，我们需要根据业务需求选择解决方案。这可能会意味着我们需要选择一个跨平台框架。
- en: The most popular cross-platform frameworks on the market include Flutter, React
    Native, .NET MAUI/Xamarin, Ionic, and Apache Cordova.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上最受欢迎的跨平台框架包括 Flutter、React Native、.NET MAUI/Xamarin、Ionic 和 Apache Cordova。
- en: Gaining an understanding of various cross-platform technologies can greatly
    benefit .NET MAUI developers in making informed decisions when selecting their
    technology stack. It’s important to note that, currently, there isn’t a single
    cross-platform technology that can fulfill all requirements. As a result, we still
    come across new projects utilizing Ionic in business solutions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 理解各种跨平台技术可以极大地帮助 .NET MAUI 开发者在选择技术栈时做出明智的决定。需要注意的是，目前还没有一种单一的跨平台技术能够满足所有需求。因此，我们仍然会遇到在商业解决方案中使用
    Ionic 的新项目。
- en: In these frameworks, besides Flutter and .NET MAUI, React Native, Ionic, and
    Apache Cordova are JavaScript-based frameworks that originated from web development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些框架中，除了 Flutter 和 .NET MAUI，React Native、Ionic 和 Apache Cordova 都是源自 Web 开发的基于
    JavaScript 的框架。
- en: Apache Cordova
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apache Cordova
- en: Apache Cordova is a hybrid framework that can be used to build mobile apps using
    web technologies such as HTML, CSS, and JavaScript. Cordova runs inside WebView,
    which provides a runtime environment to access device features. Cordova uses the
    same technologies as web apps, so Cordova can reuse the source code of web apps.
    Using a hybrid framework, the frontend team can work on both web and mobile applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Cordova 是一个混合框架，可以使用 HTML、CSS 和 JavaScript 等Web技术构建移动应用程序。Cordova 在 WebView
    中运行，提供了一个运行时环境以访问设备功能。Cordova 使用与 Web 应用相同的技術，因此 Cordova 可以重用 Web 应用的源代码。使用混合框架，前端团队可以同时处理
    Web 和移动应用程序。
- en: The problem with hybrid frameworks is that the user interface for mobile is
    more similar to that of web apps than that of native apps, since the UI is created
    using web technology. Another concern is that the performance of hybrid apps is
    dependent on WebView’s performance on the specific platform. Users may have different
    experiences on iOS and Android platforms.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 混合框架的问题在于，由于用户界面是使用 Web 技术创建的，因此移动端的用户界面与原生应用相比更类似于 Web 应用。另一个担忧是，混合应用程序的性能依赖于特定平台上的
    WebView 的性能。用户在 iOS 和 Android 平台上可能会有不同的体验。
- en: Cordova is a hybrid framework that uses JavaScript, HTML, and CSS, but it doesn’t
    provide a way to use modern JavaScript frameworks, such as React, Vue.js, and
    Angular.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 是一个使用 JavaScript、HTML 和 CSS 的混合框架，但它不提供使用现代 JavaScript 框架（如 React、Vue.js
    和 Angular）的方法。
- en: Ionic
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ionic
- en: Ionic is a framework that was initially built on top of Apache Cordova. Another
    low-level framework called Capacitor can also be used in the more recent versions.
    Ionic can integrate with popular JavaScript frameworks such as React, Vue.js,
    and Angular, which means productivity can be improved significantly. Ionic also
    includes UI controls to support interactions, gestures, and animations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 是一个最初建立在 Apache Cordova 之上的框架。另一个名为 Capacitor 的低级框架也可以在较新版本中使用。Ionic 可以与流行的
    JavaScript 框架如 React、Vue.js 和 Angular 集成，这意味着生产力可以显著提高。Ionic 还包括 UI 控件以支持交互、手势和动画。
- en: Since Ionic is built using hybrid frameworks such as Cordova and Capacitor,
    the performance is similar to that of the underlying frameworks. However, Ionic
    includes optimizations for animations and transitions to deliver native-like performance
    for built-in libraries.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Ionic 是使用混合框架（如 Cordova 和 Capacitor）构建的，其性能与底层框架相似。然而，Ionic 包括针对动画和过渡的优化，以提供类似原生的性能，用于内置库。
- en: React Native
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: React Native
- en: React Native is another framework that originated from a web development framework.
    Since React Native uses React and JavaScript to develop mobile apps, React developers
    can pick up React Native with very little effort. A cross-platform team can work
    on both web and mobile apps using React and React Native.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: React Native 是另一个起源于 Web 开发框架的框架。由于 React Native 使用 React 和 JavaScript 开发移动应用，React
    开发者可以轻松地掌握 React Native。跨平台团队可以使用 React 和 React Native 在 Web 和移动应用上同时工作。
- en: Unlike hybrid frameworks, React Native uses a bridge to translate JavaScript
    UIs into native ones. React Native apps have the same look and feel as native
    apps. Since React Native uses native components for rendering UIs on iOS and Android
    instead of WebView, it can achieve better performance than hybrid apps. A downside
    of React Native using native components is that we cannot share UI design and
    UI code between React and React Native. The paradigm is, “Learn once, write anywhere,”
    instead of, “Write once, run anywhere.”
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与混合框架不同，React Native 使用桥接技术将 JavaScript UI 转换为原生 UI。React Native 应用与原生应用具有相同的视觉和触觉体验。由于
    React Native 在 iOS 和 Android 上使用原生组件来渲染 UI，而不是 WebView，因此它比混合应用能实现更好的性能。React
    Native 使用原生组件的缺点是我们不能在 React 和 React Native 之间共享 UI 设计和 UI 代码。其范式是“一次学习，到处编写”，而不是“一次编写，到处运行”。
- en: Since React Native uses a bridge in its architecture, it may have slower performance
    than Flutter or .NET MAUI. In newer React Native releases, this may be improved
    by the new architecture.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 React Native 在其架构中使用了桥接技术，其性能可能比 Flutter 或 .NET MAUI 慢。在新版本的 React Native
    中，这可能会通过新的架构得到改善。
- en: Flutter
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Flutter
- en: Flutter is an open-source UI toolkit developed by Google using the programming
    language Dart. Using Dart, Flutter supports **just-in-time** (**JIT**) and **ahead-of-time**
    (**AOT**) compilation and also has powerful performance optimization tools. Flutter
    apps can achieve near-native app performance.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter 是由 Google 开发的一个开源 UI 工具包，使用 Dart 编程语言。使用 Dart，Flutter 支持 **即时编译**（**JIT**）和
    **提前编译**（**AOT**），并且拥有强大的性能优化工具。Flutter 应用可以实现接近原生应用的性能。
- en: Flutter employs a distinct rendering technology in comparison to hybrid apps
    and React Native. It uses an internal graphics engine called Skia (or Impeller,
    in the preview) to convert a hierarchy of widgets into the actual pixels on the
    screen. Flutter apps have the same look and feel on different devices without
    specific customization.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter 与混合应用和 React Native 相比，采用了独特的渲染技术。它使用一个名为 Skia（或预览中的 Impeller）的内部图形引擎将组件层次结构转换为屏幕上的实际像素。Flutter
    应用在不同设备上具有相同的视觉和触觉体验，无需特定定制。
- en: To simulate the look and feel of different platforms, Flutter has two different
    UI libraries for iOS and Android. Cupertino widgets are used for iOS and Material
    widgets for Android.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟不同平台的外观和感觉，Flutter 为 iOS 和 Android 提供了两个不同的 UI 库。Cupertino 小部件用于 iOS，Material
    小部件用于 Android。
- en: .NET MAUI
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET MAUI
- en: .NET MAUI is a successor of Xamarin.Forms, which is a part of the larger Xamarin
    platform. Xamarin itself provides native UI controls as part of the .NET runtime
    environment on iOS, macOS, and Android. You can develop native applications using
    C# and Xamarin. On Windows, since .NET is the original framework, .NET is supported
    by default.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 是 Xamarin.Forms 的继任者，Xamarin.Forms 是更大 Xamarin 平台的一部分。Xamarin 本身提供原生
    UI 控件，作为 iOS、macOS 和 Android 上 .NET 运行时环境的一部分。您可以使用 C# 和 Xamarin 开发原生应用程序。在 Windows
    上，由于 .NET 是原始框架，因此默认支持 .NET。
- en: From .NET 6 or above, you have a full .NET runtime available on these four platforms.
    .NET MAUI is only one of the .NET cross-platform frameworks that uses Xamarin.
    There are other .NET cross-platform frameworks that use Xamarin, and some of them
    can support more operating systems than .NET MAUI, such as Uno Platform, Avalonia
    UI, and Blazor Hybrid.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从 .NET 6 或更高版本开始，您在这四个平台上都有完整的 .NET 运行时。.NET MAUI 只是使用 Xamarin 的 .NET 跨平台框架之一。还有其他使用
    Xamarin 的 .NET 跨平台框架，其中一些可以支持比 .NET MAUI 更多的操作系统，例如 Uno Platform、Avalonia UI 和
    Blazor Hybrid。
- en: Flutter, React Native, and Cordova/Ionic represent three different types of
    cross-platform framework implementations. In the .NET world, we can find .NET
    cross-platform implementations that can match all these three categories.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter、React Native 和 Cordova/Ionic 代表三种不同的跨平台框架实现类型。在 .NET 世界中，我们可以找到可以匹配所有这三个类别的
    .NET 跨平台实现。
- en: Cordova, or Ionic, is a hybrid framework that uses web technology JavaScript,
    HTML, and CSS to develop mobile applications that run inside WebView. In .NET,
    Blazor is a web technology that uses C#, HTML, and CSS to develop web applications.
    The hybrid solution in .NET is Blazor Hybrid. BlazorWebView is used to host Blazor
    Hybrid applications on different platforms. Currently, BlazorWebView is available
    for .NET MAUI, WFP, and Windows Forms. We can use BlazorWebView to develop hybrid
    applications on these three frameworks. It is like Cordova and Ionic in that the
    look and feel of Blazor Hybrid applications is the same as that of web applications.
    It is possible to reuse code between Blazor Hybrid and Blazor applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 或 Ionic 是一个混合框架，它使用 Web 技术 JavaScript、HTML 和 CSS 来开发在 WebView 内运行的移动应用程序。在
    .NET 中，Blazor 是一种 Web 技术，它使用 C#、HTML 和 CSS 来开发 Web 应用程序。.NET 的混合解决方案是 Blazor Hybrid。BlazorWebView
    用于在不同的平台上托管 Blazor Hybrid 应用程序。目前，BlazorWebView 可用于 .NET MAUI、WFP 和 Windows Forms。我们可以使用
    BlazorWebView 在这三个框架上开发混合应用程序。它就像 Cordova 和 Ionic 一样，Blazor Hybrid 应用程序的外观和感觉与
    Web 应用程序相同。Blazor Hybrid 和 Blazor 应用程序之间可以重用代码。
- en: Flutter uses a rendering technology based on Skia’s 2D engine or Impeller. In
    .NET, Avalonia UI uses a similar approach that builds UI controls using Skia’s
    2D engine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter 使用基于 Skia 2D 引擎或 Impeller 的渲染技术。在 .NET 中，Avalonia UI 使用类似的方法，通过 Skia
    2D 引擎构建 UI 控件。
- en: .NET MAUI uses native components as UI controls, such as React Native, so the
    .NET MAUI UI looks the same as native applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 使用原生组件作为 UI 控件，例如 React Native，因此 .NET MAUI 的 UI 看起来与原生应用程序相同。
- en: For a summary and comparison of the different frameworks, see *Table 1.1*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要总结和比较不同的框架，请参阅 *表 1.1*。
- en: '| **Cross-Platform Frameworks****(Languages)** | **UI Feature** |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| **跨平台框架**(语言) | **UI 功能** |'
- en: '| .NET MAUI(XAML/C#) | React Native(HTML/CSS/JavaScript) | Native UI |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| .NET MAUI(XAML/C#) | React Native(HTML/CSS/JavaScript) | 原生 UI |'
- en: '| Blazor Hybrid(HTML/CSS/C#) | Ionic/Cordova(HTML/CSS/JavaScript) | Web UI
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Blazor Hybrid(HTML/CSS/C#) | Ionic/Cordova(HTML/CSS/JavaScript) | Web UI
    |'
- en: '| Avalonia UI(XAML/C#) | Flutter(Dart) | Custom UI using 2D engine (Skia) |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Avalonia UI(XAML/C#) | Flutter(Dart) | 使用 2D 引擎 (Skia) 定制的 UI |'
- en: 'Table 1.1: Comparison of cross-platform frameworks'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1：跨平台框架比较
- en: Besides Flutter, we can see that cross-platform frameworks use either JavaScript
    or .NET. It is possible to set up a cross-platform full stack team to work on
    the entire solution using either JavaScript or .NET technologies. Let’s review
    the complexity level of cross-platform full stack solutions in the next section
    by comparing different combinations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Flutter 之外，我们还可以看到跨平台框架使用 JavaScript 或 .NET。可以设置一个跨平台全栈团队，使用 JavaScript 或
    .NET 技术来处理整个解决方案。让我们在下一节通过比较不同的组合来回顾跨平台全栈解决方案的复杂程度。
- en: Analysis of cross-platform full stack solutions
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台全栈解决方案分析
- en: Now that we have analyzed cross-platform and full stack frameworks, we can see
    that we are able to use just one programming language, either JavaScript or C#,
    to build the entire technical stack for a solution.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分析了跨平台和全栈框架，我们可以看到我们可以只使用一种编程语言，即 JavaScript 或 C#，来构建解决方案的整个技术栈。
- en: '*Table 1.2* is a summary of cross-platform full stack frameworks that use JavaScript
    or .NET.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 1.2* 是使用 JavaScript 或 .NET 的跨平台全栈框架的总结。'
- en: '| **Layers** | **Frameworks** |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **层** | **框架** |'
- en: '| JavaScript | C#/.NET |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | C#/.NET |'
- en: '| ![](img/1.png) Web Application | React, Angular or Vue.js, etc. | Blazor
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| ![图片 1](img/1.png) Web 应用 | React、Angular 或 Vue.js 等 | Blazor |'
- en: '| ![](img/2.png) Mobile Application | Cordova or Ionic | Blazor Hybrid |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| ![图片 2](img/2.png) 移动应用 | Cordova 或 Ionic | Blazor Hybrid |'
- en: '| React Native | .NET MAUI |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| React Native | .NET MAUI |'
- en: '| ![](img/3.png) Backend Services | Node.js/Nest.js/Koa/Express.js | ASP.NET
    Core |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| ![图片 3](img/3.png) 后端服务 | Node.js/Nest.js/Koa/Express.js | ASP.NET Core |'
- en: 'Table 1.2: Comparison of JavaScript and .NET cross-platform full stack technical
    stacks'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.2：JavaScript 和 .NET 跨平台全栈技术栈比较
- en: To build a solution using JavaScript, we can develop a web client using JavaScript
    frameworks, such as React, Angular, and Vue.js. If cost and time to market are
    major considerations, we will want to reuse code between web and mobile as much
    as possible. In that case, we can choose hybrid frameworks, such as Ionic and
    Cordova. If performance and user experience are more important to the business,
    React Native can be a good choice for mobile development. For backend services,
    there are plenty of JavaScript-based backend frameworks, such as Nest.js, Koa,
    and Express.js. We can choose pure JavaScript frameworks for all layers in the
    solution.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 JavaScript 构建解决方案，我们可以使用 JavaScript 框架（如 React、Angular 和 Vue.js）开发 Web 客户端。如果成本和上市时间是主要考虑因素，我们希望尽可能地在
    Web 和移动之间重用代码。在这种情况下，我们可以选择混合框架，如 Ionic 和 Cordova。如果性能和用户体验对业务更重要，React Native
    可以是移动开发的良好选择。对于后端服务，有大量的基于 JavaScript 的后端框架，如 Nest.js、Koa 和 Express.js。我们可以选择在解决方案的所有层中使用纯
    JavaScript 框架。
- en: In .NET, we have very similar choices to those we have in JavaScript. If choosing
    a pure .NET technical stack for a solution, Blazor can be used for web client
    development. We also have the option to choose between hybrid and native frameworks.
    If considering cost and time to market, we can choose Blazor Hybrid so that web
    and mobile development can be treated as one development task. To have a native
    user experience and better performance, we can choose .NET MAUI for mobile development.
    In backend development, ASP.NET Core already has a large market share and is a
    popular framework.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 中，我们有与 JavaScript 中非常相似的选择。如果选择纯 .NET 技术栈的解决方案，可以使用 Blazor 进行 Web 客户端开发。我们还有选择混合和原生框架的选项。如果考虑成本和上市时间，我们可以选择
    Blazor Hybrid，这样可以将 Web 和移动开发视为一个开发任务。为了获得原生用户体验和更好的性能，我们可以选择 .NET MAUI 进行移动开发。在后端开发中，ASP.NET
    Core 已经拥有很大的市场份额，并且是一个流行的框架。
- en: Using frameworks with one programming language is the most economical choice,
    as we saw in *Table 1.1* and *Table 1.2*. However, in real projects, we may have
    to consider many factors. Our actual solution can be a combination of different
    languages and frameworks. Let’s review the complexity level of different combinations
    in *Table 1.3*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单一编程语言的框架是最经济的选择，正如我们在 *表 1.1* 和 *表 1.2* 中所看到的。然而，在实际项目中，我们可能需要考虑许多因素。我们的实际解决方案可以是不同语言和框架的组合。让我们回顾
    *表 1.3* 中不同组合的复杂度级别。
- en: '| **Cost Time to Market** | **![](img/11.png)** | **Performance User Experience**
    | **Complexity Level** | **Technical Stacks in a Solution** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **上市时间成本** | **![图片 11](img/11.png)** | **性能用户体验** | **复杂度级别** | **解决方案中的技术栈**
    |'
- en: '| **Mobile** | **Web** | **Backend** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **移动** | **Web** | **后端** |'
- en: '| 1 | Blazor Hybrid | Blazor | ASP.NET |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Blazor Hybrid | Blazor | ASP.NET |'
- en: '| Ionic/Cordova | JavaScript | Node.js |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 离子/Cordova | JavaScript | Node.js |'
- en: '| 2 | .NET MAUI | Blazor | ASP.NET |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 2 | .NET MAUI | Blazor | ASP.NET |'
- en: '| React Native | ReactJS | Node.js |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| React Native | ReactJS | Node.js |'
- en: '| 3 | React Native | ReactJS | Java/ASP.NET/… |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 3 | React Native | ReactJS | Java/ASP.NET/… |'
- en: '| 4 | Flutter | JavaScript | Java/ASP.NET/… |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 4 | Flutter | JavaScript | Java/ASP.NET/… |'
- en: '| 5 | Android/iOS/macOS/Windows/… | JavaScript | Java/ASP.NET/… |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Android/iOS/macOS/Windows/… | JavaScript | Java/ASP.NET/… |'
- en: 'Table 1.3: Complexity levels for cross-platform full stack solutions'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.3：跨平台全栈解决方案的复杂度级别
- en: In *Table 1.3*, I have summarized the different levels of complexity for different
    technology choices in each layer of a solution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *表 1.3* 中，我总结了解决方案每一层中不同技术选择的复杂度级别。
- en: The complexity of your solution is determined by how many programming languages
    and frameworks are involved. The more languages and frameworks are involved, the
    greater the time to market and cost.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您的解决方案的复杂性取决于涉及多少编程语言和框架。涉及的编程语言和框架越多，上市时间和成本就越高。
- en: We have more choices with cross-platform and backend frameworks than we do with
    the frontend. In terms of programming languages, we can choose either JavaScript
    or C# to develop web clients. For this reason, the most economical choice to make
    for a backend framework is to select either a JavaScript- or C#-based backend
    framework. This is what we can see at complexity levels 1 and 2 in *Table 1.3*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨平台和后端框架方面，我们的选择比前端更多。在编程语言方面，我们可以选择JavaScript或C#来开发Web客户端。因此，对于后端框架的最经济选择是选择基于JavaScript或C#的后端框架。这就是我们在*表1.3*中看到的复杂度级别1和2的内容。
- en: If we choose a hybrid framework, such as Ionic or Blazor Hybrid, to develop
    mobile apps, we can use one language and framework to cover all frontend and mobile
    development. In this case, if we also choose a backend framework in the same language,
    the time required and cost for this profile is minimal compared to all other profiles.
    As we can see in *Table 1.3*, we have JavaScript and .NET options at complexity
    level 1.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择混合框架，例如Ionic或Blazor混合，来开发移动应用，我们可以使用一种语言和框架来覆盖所有前端和移动开发。在这种情况下，如果我们还选择同一种语言的后端框架，与所有其他配置相比，这个配置所需的时间和成本是最小的。正如我们在*表1.3*中可以看到的，我们在复杂度级别1有JavaScript和.NET选项。
- en: The most economical option may not be the best one for the product owner, since
    the product owner may have concerns about the user experience and performance
    of the solution. In terms of frontend and backend frameworks, .NET and JavaScript
    frameworks are mature and proven solutions. The real concern when thinking about
    solution performance, however, should be to do with hybrid frameworks. We can
    choose either .NET MAUI or React Native for mobile development. When using React
    Native, the most economical option is to use React as the frontend framework.
    In this way, we can still use one language and similar frameworks to cover both
    mobile and web development. There are many commercial solutions that go with this
    option. Since we won’t be able to share UI code between .NET MAUI and Blazor or
    React and React Native, this category is a complexity level 2 option.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对产品所有者来说，最经济的选择可能不是最好的，因为产品所有者可能对解决方案的用户体验和性能有所顾虑。就前端和后端框架而言，.NET和JavaScript框架是成熟且经过验证的解决方案。然而，在考虑解决方案性能时，真正的担忧应该是关于混合框架的。我们可以选择.NET
    MAUI或React Native进行移动开发。当使用React Native时，最经济的选择是使用React作为前端框架。这样，我们仍然可以使用一种语言和类似的框架来覆盖移动和Web开发。有许多商业解决方案与此选项相匹配。由于我们无法在.NET
    MAUI和Blazor或React和React Native之间共享UI代码，这个类别是一个复杂度级别2的选项。
- en: In backend development, there are too many options available in terms of languages
    and frameworks, and many of them are proven solutions. There is a very long list
    of languages that can be used in backend development, such as Java, C#, JavaScript,
    Python, Ruby, Go, and Rust. For whatever reason, we may not be able to choose
    the same backend programming language as the one we use for mobile and web development.
    This means a complexity level 3 solution. In this situation, the project team
    can reduce the complexity by choosing React and React Native together with a backend
    framework. In a real project, .NET MAUI and Blazor usually go with a .NET backend.
    We don’t see many cases of .NET MAUI or Blazor being used with a non-.NET backend
    framework.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在后端开发中，关于语言和框架的选项太多，其中许多都是经过验证的解决方案。可供后端开发使用的语言列表非常长，例如Java、C#、JavaScript、Python、Ruby、Go和Rust。无论出于什么原因，我们可能无法选择与移动和Web开发相同的后端编程语言。这意味着复杂度级别3的解决方案。在这种情况下，项目团队可以通过选择与后端框架一起使用的React和React
    Native来降低复杂性。在实际项目中，.NET MAUI和Blazor通常与.NET后端一起使用。我们很少看到.NET MAUI或Blazor与非.NET后端框架一起使用的情况。
- en: Flutter and React Native are the two most popular cross-platform frameworks
    in the market. .NET MAUI still needs more time to catch up with the market. If
    using Flutter, we go to complexity level 4\. In this case, we have to involve
    three programming languages in the solution profile.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Flutter和React Native是市场上最受欢迎的两个跨平台框架。.NET MAUI还需要更多时间才能赶上市场。如果我们使用Flutter，我们将进入复杂度级别4。在这种情况下，我们必须在解决方案配置中涉及三种编程语言。
- en: In some large projects, the user experience is a more important consideration
    than other factors. In such cases, we go with native application development.
    The number of languages and frameworks involved increases significantly, since
    every operating system added to the list adds one more programming language to
    the profile. This is the most complex case, at complexity level 5.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些大型项目中，用户体验比其他因素更重要。在这种情况下，我们选择原生应用开发。涉及的语言和框架数量显著增加，因为列表中添加的每个操作系统都会增加一个编程语言。这是最复杂的情况，复杂度为5级。
- en: Comparison of .NET and JavaScript
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET和JavaScript的比较
- en: There is no single best choice of cross-platform tool or framework. The final
    choice is usually decided according to the specific business requirements. However,
    from the above table, we can see that the .NET ecosystem provides a full spectrum
    of tools for your requirements. The development team of a large system usually
    requires people with experience in different programming languages and frameworks.
    With .NET, the complexity of programming languages and frameworks can be dramatically
    simplified.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一种跨平台工具或框架是最佳选择。最终的选择通常是根据具体的业务需求来决定的。然而，从上面的表格中，我们可以看到.NET生态系统为您的需求提供了全面的工具。大型系统的发展团队通常需要具有不同编程语言和框架经验的人员。使用.NET，编程语言和框架的复杂性可以大大简化。
- en: We had an overview of tools and frameworks used in web app, native app, and
    backend service development. If we look at a higher level, that is, the .NET ecosystem
    level, the ecosystem of JavaScript almost matches what we have in a .NET solution.
    JavaScript and .NET solutions can provide tools or frameworks at nearly all layers.
    It would be interesting to do a comparison of JavaScript and .NET at a higher
    level.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们概述了在Web应用、原生应用和后端服务开发中使用的工具和框架。如果我们从更高的层面来看，即.NET生态系统层面，JavaScript的生态系统几乎与我们在.NET解决方案中拥有的相匹配。JavaScript和.NET解决方案几乎可以在所有层面上提供工具或框架。在更高层面上对JavaScript和.NET进行比较将很有趣。
- en: 'JavaScript is a language created for web browsers, but its capability is extended
    due to the demands of web development. The limitation of JavaScript is that it
    is a scripting language, so it lacks the language features that can be found in
    C#. However, this limitation doesn’t limit its usage and popularity. *Table 1.4*
    is a comparison of two technologies:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是为网页浏览器创建的一种语言，但由于网络开发的需求，其能力得到了扩展。JavaScript的限制在于它是一种脚本语言，因此它缺乏在C#中可以找到的语言特性。然而，这种限制并不限制其使用和普及。*表1.4*是两种技术的比较：
- en: '| **Area of Comparison** | **.NET** | **JavaScript** |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| **比较领域** | **.NET** | **JavaScript** |'
- en: '| Programming languages | C#, F#, VB, C++ | JavaScript, TypeScript, CoffeeScript,
    etc. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 编程语言 | C#, F#, VB, C++ | JavaScript, TypeScript, CoffeeScript等。|'
- en: '| Runtime | CLR | V8/ SpiderMonkey/ JavaScriptCore |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 运行时 | CLR | V8/SpiderMonkey/JavaScriptCore |'
- en: '| Supported IDE | Microsoft Visual Studio, Rider, MonoDevelop, Visual Studio
    Code | Visual Studio Code, Webstorm, Atom |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 支持的IDE | Microsoft Visual Studio, Rider, MonoDevelop, Visual Studio Code
    | Visual Studio Code, Webstorm, Atom |'
- en: '| Web | ASP.NET MVC/Blazor | React, Angular, Vue.js, etc. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| Web | ASP.NET MVC/Blazor | React, Angular, Vue.js等。|'
- en: '| Native apps | WinForms, WinUI, WPF, UWP | - |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 原生应用 | WinForms, WinUI, WPF, UWP | - |'
- en: '| Desktop apps | .NET MAUI/Avalonia/Uno Platform/Xamarin | Electron, NW.js
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 桌面应用 | .NET MAUI/Avalonia/Uno Platform/Xamarin | Electron, NW.js |'
- en: '| Mobile apps | React Native, Cordova, or Ionic |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 移动应用 | React Native, Cordova, 或 Ionic |'
- en: '| Backend | ASP.NET Core | Node.js |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 后端 | ASP.NET Core | Node.js |'
- en: 'Table 1.4: Comparison of .NET and JavaScript'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.4：.NET和JavaScript的比较
- en: From *Table 1.4*, we can see that .NET has a good infrastructure for supporting
    multiple languages. With the **Common Type System** (**CTS**) and **Common Language
    Runtime** (**CLR**) as the core of .NET implementation, it supports multiple languages
    naturally, with the capability to share the **Base Class Library** (**BCL**) in
    all supported languages. JavaScript has its limitations as a scripting language,
    so languages such as TypeScript and CoffeeScript were invented to enhance it.
    TypeScript was developed by Microsoft to bring modern, object-oriented language
    features to JavaScript. TypeScript is compiled into JavaScript for execution,
    so it can work well with existing JavaScript libraries.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *表 1.4* 中，我们可以看到 .NET 有一个良好的基础设施来支持多种语言。以 **公共类型系统** (**CTS**) 和 **公共语言运行时**
    (**CLR**) 作为 .NET 实现的核心，它自然地支持多种语言，并具有在所有支持的语言中共享 **基础类库** (**BCL**) 的能力。JavaScript
    作为一种脚本语言有其局限性，因此发明了 TypeScript 和 CoffeeScript 等语言来增强它。TypeScript 是由微软开发的，旨在将现代、面向对象的语言特性引入
    JavaScript。TypeScript 编译成 JavaScript 以执行，因此它可以很好地与现有的 JavaScript 库协同工作。
- en: The cross-platform frameworks of .NET and JavaScript can cover not only mobile
    development but also desktop development. In a .NET environment, .NET MAUI, Uno
    Platform, and Avalonia can support both desktop and mobile cross-platform development.
    In the JavaScript ecosystem, React Native, Ionic, and Cordova are used for mobile
    development, and Electron or NW.js are used for desktop development.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 和 JavaScript 的跨平台框架不仅涵盖移动开发，还包括桌面开发。在 .NET 环境中，.NET MAUI、Uno Platform 和
    Avalonia 可以支持桌面和移动的跨平台开发。在 JavaScript 生态系统中，React Native、Ionic 和 Cordova 用于移动开发，而
    Electron 或 NW.js 用于桌面开发。
- en: Since .NET is a built-in component of Windows operating systems, it is used
    to develop native applications such as WinForms, UWP, and WPF. The Windows operating
    system itself is one of the major targets for support in cross-platform programming
    frameworks.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 .NET 是 Windows 操作系统的内置组件，因此它被用于开发如 WinForms、UWP 和 WPF 这样的原生应用程序。Windows 操作系统本身是跨平台编程框架支持的主要目标之一。
- en: This comparison has helped us to choose between and evaluate technical stacks
    for cross-platform full stack development. As a .NET MAUI developer, this analysis
    can help you understand where .NET MAUI is located in the .NET ecosystem. To find
    out more about the .NET ecosystem, let’s have a quick overview of the history
    of the .NET landscape in the next section.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个比较帮助我们选择并评估跨平台全栈开发的技术堆栈。作为一名 .NET MAUI 开发者，这项分析可以帮助你了解 .NET MAUI 在 .NET 生态系统中的位置。要了解更多关于
    .NET 生态系统的情况，让我们在下一节快速回顾一下 .NET 整体格局的历史。
- en: Exploring the .NET landscape
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 .NET 的整体格局
- en: Before we dive into the details of .NET MAUI, let’s have an overview of the
    .NET landscape. This is a section for those who are new to .NET. If you are a
    .NET developer, you can skip this section.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨 .NET MAUI 的细节之前，让我们先对 .NET 的整体格局有一个概览。本节是为那些刚接触 .NET 的新手准备的。如果你是 .NET
    开发者，你可以跳过这一节。
- en: Since Microsoft introduced the .NET platform, it has evolved from a proprietary
    software framework for Windows to a cross-platform and open-source platform.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自从微软引入 .NET 平台以来，它已经从 Windows 的专有软件框架演变为跨平台和开源平台。
- en: 'There are many ways to look at the .NET technology stack. Basically, it contains
    the following components:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方式来观察 .NET 技术堆栈。基本上，它包含以下组件：
- en: Common infrastructure (compiler and tools suite)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共基础设施（编译器和工具套件）
- en: Base Class Library (BCL)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础类库 (BCL)
- en: Runtime (WinRT or Mono)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时（WinRT 或 Mono）
- en: .NET Framework
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Framework
- en: The history of .NET started with .NET Framework. It is a proprietary software
    framework developed by Microsoft that runs primarily on Microsoft Windows. .NET
    Framework started as a future-oriented application framework to standardize the
    software stack in the Windows ecosystem. It is built around the **Common Language
    Infrastructure** (**CLI**) and C#. Even though the primary programming language
    is C#, it is designed to be a language-agnostic framework. Supported languages
    can share the same CTS and CLR. Most Windows desktop applications are developed
    using .NET Framework and it is shipped as a part of the Windows operating system.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 的历史始于 .NET Framework。这是一个由微软开发的专有软件框架，主要在 Microsoft Windows 上运行。.NET Framework
    最初是一个面向未来的应用程序框架，旨在标准化 Windows 生态系统中的软件堆栈。它围绕 **公共语言基础设施** (**CLI**) 和 C# 构建。尽管主要的编程语言是
    C#，但它被设计成一个语言无关的框架。支持的语言可以共享相同的 CTS 和 CLR。大多数 Windows 桌面应用程序都是使用 .NET Framework
    开发的，并且它作为 Windows 操作系统的一部分进行分发。
- en: Mono
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mono
- en: The first attempt to make .NET an open-source framework was made by a company
    called Ximian. When the CLI and C# were ratified by ECMA in 2001 and ISO in 2003,
    it opened the door for independent implementations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 将 .NET 打造为开源框架的第一尝试是由一家名为 Ximian 的公司做出的。当 CLI 和 C# 在 2001 年由 ECMA 批准，在 2003
    年由 ISO 批准时，为独立实现打开了大门。
- en: In 2001, the open-source project Mono was launched and aimed to implement .NET
    Framework on Linux.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2001 年，开源项目 Mono 启动，旨在在 Linux 上实现 .NET Framework。
- en: Since .NET Framework was a proprietary technology at the time, .NET Framework
    and Mono had their own compiler, BCL, and runtime.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于当时 .NET Framework 是一种专有技术，因此 .NET Framework 和 Mono 都有自己的编译器、BCL 和运行时。
- en: Over time, Microsoft moved toward open-source; .NET source code is available
    to the open-source community. The Mono project adopted some source code and tools
    from the .NET code base.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，微软逐渐转向开源；.NET 源代码对开源社区开放。Mono 项目从 .NET 代码库中采用了部分源代码和工具。
- en: At the same time, the Mono project went through many changes as well. At one
    time, Mono was owned by Xamarin. Xamarin developed the Xamarin platform, based
    on Mono, to support the .NET platform on Android, iOS, UWP, and macOS. In 2016,
    Microsoft acquired Xamarin and Xamarin became a cross-platform solution in the
    .NET ecosystem.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，Mono 项目也经历了许多变化。一度，Mono 由 Xamarin 拥有。Xamarin 开发了基于 Mono 的 Xamarin 平台，以支持
    Android、iOS、UWP 和 macOS 上的 .NET 平台。2016 年，微软收购了 Xamarin，Xamarin 成为 .NET 生态系统中的跨平台解决方案。
- en: .NET Core
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Core
- en: Before the acquisition of Xamarin, Microsoft had already started work to make
    .NET a cross-platform framework. The first attempt was the release of .NET Core
    1.0 in 2016\. .NET Core is a free and open-source framework available for Windows,
    Linux, and macOS. It can be used to create modern web apps, microservices, libraries,
    and console applications. Since .NET Core applications can run on Linux, we can
    build microservices using containers and cloud infrastructure.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在收购 Xamarin 之前，微软已经开始努力使 .NET 成为跨平台框架。第一次尝试是在 2016 年发布 .NET Core 1.0。.NET Core
    是一个免费且开源的框架，适用于 Windows、Linux 和 macOS。它可以用来创建现代 Web 应用、微服务、库和控制台应用程序。由于 .NET Core
    应用可以在 Linux 上运行，我们可以使用容器和云基础设施来构建微服务。
- en: After .NET Core 3.x was released, Microsoft worked to integrate and unify .NET
    technology on various platforms. This unified version was to supersede both .NET
    Core and .NET Framework. To avoid confusion with .NET Framework 4.x, this unified
    framework was named .NET 5\. Since .NET 5, a common BCL can be used on all platforms.
    In .NET 5, there are still two runtimes, which are the **Windows runtime** (**WinRT**),
    which is used for Windows, and the Mono runtime, which is used for mobile and
    macOS.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET Core 3.x 发布后，微软致力于在各种平台上整合和统一 .NET 技术。这个统一版本旨在取代 .NET Core 和 .NET Framework。为了避免与
    .NET Framework 4.x 混淆，这个统一框架被命名为 .NET 5。自 .NET 5 以来，可以在所有平台上使用一个共同的 BCL。在 .NET
    5 中，仍然存在两个运行时，分别是用于 Windows 的 **Windows 运行时**（**WinRT**），以及用于移动和 macOS 的 Mono
    运行时。
- en: Since .NET 5, .NET releases support two types of release, which are **Long Term
    Support** (**LTS**) and **Standard Term Support** (**STS**). In this book, we
    use will .NET 8 releases, which are LTS releases.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 自 .NET 5 以来，.NET 发布支持两种类型的发布，分别是 **长期支持**（**LTS**）和 **标准期限支持**（**STS**）。在这本书中，我们将使用
    .NET 8 发布，这些是 LTS 发布。
- en: .NET Standard and Portable Class Libraries
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET Standard 和可移植类库
- en: Before .NET 5, with .NET Framework, Mono, and .NET Core, we had different subsets
    of BCLs on different platforms. In order to share code between different runtimes
    or platforms, a technique called **Portable Class Libraries** (**PCLs**) was used.
    When you create a PCL, you have to choose a combination of platforms that you
    want to support. The level of compatibility is decided by the developer. If you
    want to reuse a PCL, you must carefully study the list of platforms that are supported.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 5 之前，我们有 .NET Framework、Mono 和 .NET Core，在不同平台上拥有不同的 BCL 子集。为了在不同运行时或平台之间共享代码，使用了一种称为
    **可移植类库**（**PCLs**）的技术。当你创建一个 PCL 时，你必须选择你想要支持的平台的组合。兼容性级别由开发者决定。如果你想重用 PCL，你必须仔细研究支持的平台列表。
- en: Even though the PCL provides a way to share code, it cannot resolve compatibility
    issues well. To overcome compatibility issues, Microsoft introduced .NET Standard.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 PCL 提供了一种共享代码的方法，但它并不能很好地解决兼容性问题。为了克服兼容性问题，微软引入了 .NET Standard。
- en: .NET Standard is not a separate .NET release but a specification of a set of
    .NET APIs that must be supported on most .NET implementations (.NET Framework,
    Mono, .NET Core, .NET 5 and 6, etc.).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 标准不是一个独立的 .NET 版本，而是一组必须在大多数 .NET 实现上支持（.NET Framework、Mono、.NET Core、.NET
    5 和 6 等）的 .NET API 规范。
- en: Since .NET 5, a unified BCL is available, but .NET Standard will still be part
    of this unified BCL. If your applications only need to support .NET 5 or later,
    you don’t really need to care too much about .NET Standard. However, if you want
    to be compatible with old .NET releases, .NET Standard is still the best choice
    for you. We will use .NET Standard 2.0 in this book to build our data model since
    this is a version that can support most existing .NET implementations and all
    future .NET releases.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 自 .NET 5 以来，统一的 BCL 可用，但 .NET 标准仍将是这个统一 BCL 的一部分。如果你的应用程序只需要支持 .NET 5 或更高版本，你实际上不需要太关心
    .NET 标准版。然而，如果你想与旧版本的 .NET 兼容，.NET 标准版仍然是你的最佳选择。由于这是一个可以支持大多数现有 .NET 实现和所有未来 .NET
    版本的版本，本书将使用 .NET 标准版 2.0 来构建我们的数据模型。
- en: There will be no new versions of .NET Standard from Microsoft, but .NET 5, .NET
    6, and all future versions will continue to support .NET Standard 2.1 and earlier.
    *Table 1.5* shows the platforms and versions that .NET Standard 2.0 can support.
    This also happens to be a compatibility list for our data model in this book.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 微软将不再发布新的 .NET 标准版本，但 .NET 5、.NET 6 以及所有未来的版本将继续支持 .NET 标准版 2.1 及更早版本。*表 1.5*
    展示了 .NET 标准版 2.0 可以支持的平台和版本。这同时也是本书数据模型兼容性列表。
- en: '| **.NET Implementation** | **Version support** |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| **.NET 实现** | **版本支持** |'
- en: '| .NET and .NET Core | 2.0, 2.1, 2.2, 3.0, 3.1, 5.0, 6.0 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| .NET 和 .NET Core | 2.0, 2.1, 2.2, 3.0, 3.1, 5.0, 6.0 |'
- en: '| .NET Framework 1 | 4.6.1.2, 4.6.2, 4.7.1, 4.7.2, 4.8 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| .NET Framework 1 | 4.6.1.2, 4.6.2, 4.7.1, 4.7.2, 4.8 |'
- en: '| Mono | 5.4, 6.4 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| Mono | 5.4, 6.4 |'
- en: '| Xamarin.iOS | 10.14, 12.16 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| Xamarin.iOS | 10.14, 12.16 |'
- en: '| Xamarin.Mac | 3.8, 5.16 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| Xamarin.Mac | 3.8, 5.16 |'
- en: '| Xamarin.Android | 8.0, 10.0 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| Xamarin.Android | 8.0, 10.0 |'
- en: '| Universal Windows Platform | 10.0.16299, TBD |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| Universal Windows Platform | 10.0.16299, TBD |'
- en: '| Unity | 2018.1 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| Unity | 2018.1 |'
- en: 'Table 1.5: .NET Standard 2.0-compatible implementations'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.5：.NET 标准版 2.0 兼容的实现
- en: Using Xamarin for cross-platform development
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Xamarin 进行跨平台开发
- en: As we mentioned in the previous section, Xamarin was part of the Mono project
    and was an effort to support .NET on Android, iOS, and macOS. Xamarin exports
    the underlying operating system features to the .NET runtime. Xamarin.Forms is
    the cross-platform UI framework of Xamarin. .NET MAUI is an evolution of Xamarin.Forms.
    Before we discuss .NET MAUI and Xamarin.Forms, let us review the following diagram
    of Xamarin implementations on various platforms.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中提到的，Xamarin 是 Mono 项目的一部分，旨在支持 Android、iOS 和 macOS 上的 .NET。Xamarin
    将底层操作系统功能导出到 .NET 运行时。Xamarin.Forms 是 Xamarin 的跨平台 UI 框架。.NET MAUI 是 Xamarin.Forms
    的发展。在我们讨论 .NET MAUI 和 Xamarin.Forms 之前，让我们回顾一下各种平台上 Xamarin 实现的以下图示。
- en: '![](img/B21554_01_01.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_01.png)'
- en: 'Figure 1.1: Xamarin implementations'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Xamarin 实现
- en: '*Figure 1.1* shows the overall architecture of Xamarin. Xamarin allows developers
    to create native UIs on each platform and write business logic in C# that can
    be shared across platforms.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.1* 展示了 Xamarin 的整体架构。Xamarin 允许开发者在每个平台上创建原生 UI，并用 C# 编写可以在多个平台上共享的业务逻辑。'
- en: The transition from Xamarin to .NET MAUI, or more specifically from Xamarin.Forms
    to .NET MAUI, is not a revolution. .NET MAUI essentially represents a new version
    of Xamarin.Forms rather than other components of Xamarin. Xamarin.Android has
    now become .NET Android, with the primary difference being the name change. The
    overall architecture, however, has not undergone significant modifications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Xamarin 到 .NET MAUI 的过渡，或者更具体地说，从 Xamarin.Forms 到 .NET MAUI 的过渡，并不是一场革命。.NET
    MAUI 实质上代表了一个新的 Xamarin.Forms 版本，而不是 Xamarin 的其他组件。Xamarin.Android 现在已成为 .NET
    Android，主要区别在于名称变更。然而，整体架构并没有经历重大修改。
- en: On supported platforms, Xamarin contains bindings for nearly the entire underlying
    platform SDK. Xamarin also provides facilities for directly invoking Objective-C,
    Java, C, and C++ libraries, giving you the power to use a wide array of third-party
    code. You can use existing Android, iOS, or macOS libraries written in Objective-C,
    Swift, Java, and C/C++.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在支持的平台上，Xamarin 包含了几乎所有底层平台 SDK 的绑定。Xamarin 还提供了直接调用 Objective-C、Java、C 和 C++
    库的功能，赋予你使用大量第三方代码的能力。你可以使用用 Objective-C、Swift、Java 和 C/C++ 编写的现有 Android、iOS 或
    macOS 库。
- en: The Mono runtime is used as the .NET runtime on these platforms. It has two
    modes of operation – JIT and AOT. JIT, or Just-in-Time, compilation generates
    code dynamically as it is executed. In AOT, or Ahead-of-Time, compilation mode,
    Mono precompiles everything so it can be used on operating systems where dynamic
    code generation is not possible.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Mono运行时在这些平台上用作.NET运行时。它有两种操作模式——JIT和AOT。JIT，或即时编译，在执行时动态生成代码。在AOT，或提前编译，模式下，Mono预先编译一切，以便可以在不允许动态代码生成的操作系统中使用。
- en: As we can see in *Figure 1.1*, JIT can be used on Android and macOS, while AOT
    is used for iOS, where dynamic code generation is not allowed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*图1.1*中可以看到的，JIT可以在Android和macOS上使用，而AOT用于iOS，其中不允许动态代码生成。
- en: There are two ways to develop native applications using Xamarin.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin开发原生应用程序有两种方式。
- en: We can develop native applications just like Android, iOS, and macOS developers
    using native APIs on each platform. The difference is that you use .NET libraries
    and C# instead of the platform-specific language and libraries directly. The advantage
    of this approach is that we can use one language and share a lot of components
    through the .NET BCL, even while working on different platforms. We can also leverage
    the power of underlying platforms, just as native application developers can.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用每个平台上的原生API，就像Android、iOS和macOS的开发者一样开发原生应用程序。区别在于您使用.NET库和C#而不是直接使用特定于平台的语言和库。这种方法的优势在于，我们可以使用一种语言，并通过.NET
    BCL共享大量组件，即使在不同的平台上工作也是如此。我们还可以利用底层平台的力量，就像原生应用程序开发者一样。
- en: If we want to reuse the code at the user interface layer, Xamarin.Forms can
    be used instead of the native UI.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在用户界面层重用代码，可以使用Xamarin.Forms而不是原生UI。
- en: Xamarin.Forms
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.Forms
- en: Xamarin.Android, Xamarin.iOS, and Xamarin.Mac provide a .NET environment that
    exposes almost all the original SDK capabilities on their respective platforms.
    For example, as a developer, you nearly have the same capabilities with Xamarin.Android
    as you would with the original Android SDK. To improve code sharing, the open-source
    UI framework Xamarin.Forms was created. Xamarin.Forms includes a collection of
    cross-platform UI components. The user interface design can be implemented using
    XAML markup language, which is similar to Windows user interface design in WinUI
    or WPF.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android、Xamarin.iOS和Xamarin.Mac提供了一个.NET环境，几乎在其各自平台上暴露了所有原始SDK的能力。例如，作为开发者，您使用Xamarin.Android时几乎具有与原始Android
    SDK相同的性能。为了提高代码共享，创建了开源UI框架Xamarin.Forms。Xamarin.Forms包含一系列跨平台UI组件。用户界面设计可以使用XAML标记语言实现，这与WinUI或WPF中的Windows用户界面设计类似。
- en: Xamarin.Essentials
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.Essentials
- en: Since Xamarin exposes the capability of the underlying platform SDK, you can
    access device features using .NET APIs. However, the implementation is platform-specific.
    For example, when you use the location service on Android or iOS, the .NET API
    to use can be different. To further improve code sharing across platforms, Xamarin.Essentials
    can be used to access native device features. Xamarin.Essentials provides a unified
    .NET interface for native device features. If you use Xamarin.Essentials instead
    of native APIs, your code can be reused across platforms.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Xamarin暴露了底层平台SDK的能力，您可以使用.NET API访问设备功能。然而，实现是平台特定的。例如，当您在Android或iOS上使用位置服务时，可用的.NET
    API可能不同。为了进一步改善跨平台的代码共享，可以使用Xamarin.Essentials来访问原生设备功能。Xamarin.Essentials为原生设备功能提供了一个统一的.NET接口。如果您使用Xamarin.Essentials而不是原生API，您的代码可以在平台上重用。
- en: 'Some examples of functionality provided by Xamarin.Essentials include:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Essentials提供的一些功能示例包括：
- en: Device info
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备信息
- en: File system
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统
- en: Accelerometer
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速度计
- en: Phone dialer
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电话拨号
- en: Text-to-speech
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文字转语音
- en: Screen lock
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕锁定
- en: Using Xamarin.Forms together with Xamarin.Essentials, most implementations,
    including of the business logic, user interface design, and some device-specific
    features, can be shared across platforms. In Chapter 7, *Using Platform-Specific
    Features,* we will learn how Xamarin.Essentials has been ported and thus made
    available for .NET MAUI.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin.Forms和Xamarin.Essentials一起，大多数实现，包括业务逻辑、用户界面设计和一些特定于设备的特性，可以在平台上共享。在第7章*使用特定平台的功能*中，我们将学习Xamarin.Essentials是如何移植的，从而使其对.NET
    MAUI可用。
- en: Comparing user interface design on different platforms
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较不同平台上的用户界面设计
- en: Most modern application development on various platforms uses the **Model View
    Controller (MVC)** design pattern. To separate the business logic and user interface
    design, there are different approaches used on Android, iOS/macOS, and Windows.
    On all these platforms, even though the programming languages used are different,
    they use XML or HTML to design user interfaces.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在各种平台上，大多数现代应用程序开发都使用**模型-视图-控制器（MVC）**设计模式。为了分离业务逻辑和用户界面设计，Android、iOS/macOS和Windows上使用了不同的方法。在这些平台上，尽管使用的编程语言不同，但它们都使用XML或HTML来设计用户界面。
- en: On iOS/macOS, developers can use Interface Builder in Xcode to generate *.storyboard*
    or *.xib* files. Both are XML-based script files used to keep user interface information,
    and this script is interpreted at runtime together with Swift or Objective-C code
    to create the user interface. In 2019, Apple announced a new framework, SwiftUI.
    Using SwiftUI, developers can build user interfaces using the Swift language in
    a declarative way directly.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS/macOS上，开发者可以使用Xcode中的Interface Builder生成*.storyboard*或*.xib*文件。这两个都是基于XML的脚本文件，用于保存用户界面信息，并在运行时与Swift或Objective-C代码一起解释以创建用户界面。2019年，苹果宣布了一个新的框架，SwiftUI。使用SwiftUI，开发者可以以声明式的方式直接使用Swift语言构建用户界面。
- en: On the Android platform, developers can use Layout Editor in Android Studio
    to create user interfaces graphically and store the result in layout files. The
    layout files are in XML format and can be loaded at runtime to create the user
    interface.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android平台上，开发者可以使用Android Studio中的布局编辑器图形化地创建用户界面，并将结果存储在布局文件中。布局文件是XML格式，可以在运行时加载以创建用户界面。
- en: On the Windows platform, XAML is used in user interface design. XAML, or Extensible
    Application Markup Language, is an XML-based language used for user interface
    design on the Windows platform. For WPF or UWP applications, XAML Designer can
    be used for user interface design. In .NET MAUI, a XAML-based UI is the default
    application UI. Another pattern, MVU, can also be used. In the MVU pattern, the
    user interface is implemented in C# directly without XAML. The coding style of
    MVU is similar to SwiftUI.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows平台上，用户界面设计使用XAML。XAML，或可扩展应用程序标记语言，是一种用于Windows平台用户界面设计的基于XML的语言。对于WPF或UWP应用程序，可以使用XAML
    Designer进行用户界面设计。在.NET MAUI中，基于XAML的UI是默认的应用程序UI。另一种模式，MVU，也可以使用。在MVU模式中，用户界面直接使用C#实现，而不使用XAML。MVU的编码风格类似于SwiftUI。
- en: Even though SwiftUI on Apple platforms or MVU in .NET MAUI can be used, the
    classic user interface implementation uses XML or HTML. Let us do a comparison
    in *Table 1.6*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在苹果平台上的SwiftUI或.NET MAUI中的MVU可以使用，经典的用户界面实现仍然使用XML或HTML。让我们在*表1.6*中进行比较。
- en: '| **Platform** | **IDE** | **Editor** | **Language** | **File extension** |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | **IDE** | **编辑器** | **语言** | **文件扩展名** |'
- en: '| Windows | Visual Studio | XAML Designer | XAML/C# | .xaml |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| Windows | Visual Studio | XAML Designer | XAML/C# | .xaml |'
- en: '| Android | Android Studio | Layout Editor | XML/Java/Kotlin | .layout |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| Android | Android Studio | 布局编辑器 | XML/Java/Kotlin | .layout |'
- en: '| iOS/macOS | Xcode | Interface Builder | XML/Swift/Objective C | .storyboard
    or .xib |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| iOS/macOS | Xcode | Interface Builder | XML/Swift/Objective C | .storyboard
    或 .xib |'
- en: '| .NET MAUI/Xamarin.Forms | Visual Studio | N.A. | XAML/C# | .xaml |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| .NET MAUI/Xamarin.Forms | Visual Studio | N.A. | XAML/C# | .xaml |'
- en: '| .NET MAUI Blazor | Razor/C# | .razor |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| .NET MAUI Blazor | Razor/C# | .razor |'
- en: 'Table 1.6: Comparison of user interface design options'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.6：用户界面设计选项比较
- en: In *Table 1.6*, we can see a comparison of user interface design options on
    different platforms.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在*表1.6*中，我们可以看到不同平台上用户界面设计选项的比较。
- en: .NET MAUI and Xamarin.Forms use a dialect of XAML to design user interfaces
    on all supported platforms. For .NET MAUI, we have another choice for user interface
    design, which is Blazor. Blazor UIs are written in Razor syntax, which is a combination
    of HTML, CSS, and C#. We will discuss Blazor later in this chapter.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI和Xamarin.Forms使用XAML方言在所有支持的平台上设计用户界面。对于.NET MAUI，我们还有另一种用户界面设计的选择，那就是Blazor。Blazor
    UI是用Razor语法编写的，Razor语法是HTML、CSS和C#的组合。我们将在本章后面讨论Blazor。
- en: In Xamarin.Forms, we create user interfaces in XAML and code-behind in C#. The
    underlying implementation is still native controls on each platform, so the look
    and feel of Xamarin.Forms applications is the same as for native ones.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin.Forms中，我们使用XAML创建用户界面，在C#中编写代码背后的部分。底层实现仍然是每个平台上的本地控件，因此Xamarin.Forms应用程序的外观和感觉与本地应用程序相同。
- en: 'Some examples of features provided by Xamarin.Forms include:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms提供的功能示例包括：
- en: XAML user interface language
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XAML用户界面语言
- en: Databinding
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据绑定
- en: Gestures
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手势
- en: Effects
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影响
- en: Styling
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式
- en: Although Xamarin.Forms enables the sharing of nearly all UI code, it’s still
    necessary to manage most resources used by the application in individual platform
    projects. These resources can include images, fonts, strings, and more. In a Xamarin.Forms
    project structure, there is a common .NET Standard project, accompanied by various
    platform-specific projects.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Xamarin.Forms 允许共享几乎所有 UI 代码，但仍然需要在各个平台项目中管理应用程序使用的多数资源。这些资源可以包括图像、字体、字符串等。在
    Xamarin.Forms 项目结构中，有一个通用的 .NET Standard 项目，并伴随各种特定平台的项目。
- en: The majority of development work should take place within the common .NET Standard
    project. While resources such as font icons can be shared across the common project
    as embedded resources, the management of most other resources remains confined
    to separate platform-specific projects.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发工作应该在通用的 .NET Standard 项目中进行。虽然字体图标等资源可以作为嵌入资源在通用项目中共享，但大多数其他资源的管理仍然局限于独立的特定平台项目。
- en: Moving to .NET MAUI
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向 .NET MAUI
- en: With the .NET unification, Xamarin has become a part of the .NET platform, and
    Xamarin.Forms is integrating with .NET in the form of .NET MAUI.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 .NET 的统一，Xamarin 已经成为 .NET 平台的一部分，Xamarin.Forms 正在以 .NET MAUI 的形式与 .NET 集成。
- en: .NET MAUI is a first-class .NET citizen with the namespace `Microsoft.Maui`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 是一个一等 .NET 成员，具有 `Microsoft.Maui` 命名空间。
- en: Making the move to .NET MAUI is also an opportunity for Microsoft to redesign
    and rebuild Xamarin.Forms from the ground up and tackle some of the issues that
    have been lingering at a lower level. Compared to Xamarin.Forms, .NET MAUI uses
    a single project structure, supports hot reloads better and supports the MVU and
    Blazor development patterns.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 转向 .NET MAUI 也是一个机会，让微软从零开始重新设计和重建 Xamarin.Forms，并解决一些在较低层次上悬而未决的问题。与 Xamarin.Forms
    相比，.NET MAUI 使用单一项目结构，更好地支持热重载，并支持 MVU 和 Blazor 开发模式。
- en: It’s important to note that MVU is not currently available as a stable method
    for building apps with .NET MAUI; it has only been announced.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，MVU 目前不是一个稳定的构建 .NET MAUI 应用程序的方法；它只是被宣布了。
- en: '*Figure 1.2* shows an architecture diagram of .NET MAUI; you can find it in
    the Microsoft documentation. From *Figure 1.2*, we can see that there is a common
    BCL for all supported operating systems. Under the BCL, there are two runtimes,
    WinRT and the Mono runtime, according to the platform. For each platform, there
    is a dedicated .NET implementation to provide full support for native application
    development.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.2* 展示了 .NET MAUI 的架构图；您可以在 Microsoft 文档中找到它。从 *图 1.2* 中，我们可以看到所有支持的操作系统中都有一个通用的
    BCL。在 BCL 之下，根据平台，有两个运行时，WinRT 和 Mono 运行时。对于每个平台，都有一个专门的 .NET 实现来提供对原生应用程序开发的全面支持。'
- en: '![](img/B21554_01_02.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_02.png)'
- en: 'Figure 1.2: .NET MAUI architecture'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：.NET MAUI 架构
- en: Compared to Xamarin.Forms, we can see in *Table 1.7* that there are many improvements
    in .NET MAUI.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Xamarin.Forms 相比，我们可以在 *表 1.7* 中看到 .NET MAUI 有许多改进。
- en: .NET MAUI uses a single project structure to simplify project management. We
    can manage resources, dependency injection, and configuration in one location
    instead of managing them separately per platform. We will learn more about the
    single project structure in *Chapter 2*, *Building Our First .NET MAUI App.*
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 使用单一项目结构来简化项目管理。我们可以在一个位置管理资源、依赖注入和配置，而不是在每个平台上分别管理。我们将在 *第 2 章*，*构建我们的第一个
    .NET MAUI 应用程序* 中了解更多关于单一项目结构的内容。
- en: .NET MAUI is fully integrated as part of .NET, so we can create and build projects
    using the .NET SDK command line. In this case, we have more choice in terms of
    development environment.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 作为 .NET 的一部分完全集成，因此我们可以使用 .NET SDK 命令行创建和构建项目。在这种情况下，我们在开发环境方面有更多的选择。
- en: '| **Features** | **.NET MAUI** | **Xamarin.Forms** |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **.NET MAUI** | **Xamarin.Forms** |'
- en: '| Project structure | Single project | Multiple projects |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 项目结构 | 单个项目 | 多个项目 |'
- en: '| Resource management | One location for all platforms | Managed per platform
    |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 资源管理 | 所有平台的一个位置 | 每个平台独立管理 |'
- en: '| Fully integrated with .NET | Namespace in `Microsoft.Maui` and other IDEs
    can be chosen besides Visual StudioCommand-line support. We can create, build,
    and run in console:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| 完全集成于 .NET | 在 `Microsoft.Maui` 和其他 IDE 中可以选择命名空间，除了 Visual Studio，还支持命令行支持。我们可以在控制台中创建、构建和运行：'
- en: '[PRE0]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| Namespace in `Xamarin.Forms` and Visual Studio as IDE |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `Xamarin.Forms` 和 Visual Studio 作为 IDE 中的命名空间 |'
- en: '| Design improvement | Configuration through .NET Generic HostDependency injection
    support | Configuration scattered in different locations |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 设计改进 | 通过.NET通用宿主依赖注入支持进行配置 | 配置分散在不同位置 |'
- en: '| Model View Update (MVU) pattern | A modern way of UI implementation | No
    |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 模型视图更新（MVU）模式 | UI实现的现代方式 | 否 |'
- en: '| Blazor Hybrid | Support through `BlazorWebView` | No |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| Blazor混合 | 通过`BlazorWebView`提供支持 | 否 |'
- en: 'Table 1.7: .NET MAUI improvements'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.7：.NET MAUI改进
- en: .NET MAUI Blazor apps
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI Blazor应用程序
- en: In *Table 1.6*, where we compared user interface design options on different
    platforms, we mentioned that there is another way to design cross-platform user
    interfaces in .NET MAUI, which is Blazor.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在*表1.6*中，我们比较了不同平台上的用户界面设计选项，我们提到在.NET MAUI中还有另一种设计跨平台用户界面的方法，那就是Blazor。
- en: Blazor, released in ASP.NET Core 3.0, is a framework for building interactive
    client-side web UIs with .NET. With .NET MAUI and Blazor, we can build cross-platform
    apps in the form of Blazor Hybrid apps. In this way, the boundary between native
    application and web application becomes blurred. .NET MAUI Blazor Hybrid apps
    enable Blazor components to be integrated with native platform features and UI
    controls. Blazor components have full access to the native capabilities of the
    device.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor，于ASP.NET Core 3.0发布，是一个使用.NET构建交互式客户端Web UI的框架。通过.NET MAUI和Blazor，我们可以以Blazor混合应用程序的形式构建跨平台应用程序。这样，原生应用程序和Web应用程序之间的界限变得模糊。.NET
    MAUI Blazor混合应用程序使Blazor组件能够与原生平台功能和UI控件集成。Blazor组件可以完全访问设备的原生功能。
- en: '*![](img/B21554_01_03.png)*'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '*![](img/B21554_01_03.png)*'
- en: 'Figure 1.3: .NET MAUI Blazor Hybrid'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：.NET MAUI Blazor混合
- en: As we can see in *Figure 1.3*, the way to use the Blazor web framework in .NET
    MAUI is through a `BlazorWebView` component. We can use .NET MAUI Blazor to mix
    native and web UIs in a single view. In .NET MAUI Blazor apps, applications can
    leverage the Blazor component model (Razor components), which uses HTML, CSS,
    and C# in Razor syntax. The Blazor part of an app can reuse components, layouts,
    and styles that are used in an existing regular web app. `BlazorWebView` components
    can be composed alongside native elements; additionally, these components leverage
    platform features and share state with their native counterparts.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在*图1.3*中看到的，在.NET MAUI中使用Blazor Web框架的方式是通过一个`BlazorWebView`组件。我们可以使用.NET
    MAUI Blazor在单个视图中混合本地和Web UI。在.NET MAUI Blazor应用程序中，应用程序可以利用Blazor组件模型（Razor组件），它使用Razor语法中的HTML、CSS和C#。应用程序的Blazor部分可以重用现有常规Web应用程序中使用的组件、布局和样式。`BlazorWebView`组件可以与原生元素一起组合；此外，这些组件利用平台功能并与它们的原生对应项共享状态。
- en: Developing native apps using .NET
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用.NET开发本地应用程序
- en: With .NET MAUI, Xamarin.Android, Xamarin.iOS, and Xamarin.Mac have been updated
    to .NET for Android, and .NET for iOS and .NET for Mac. We can develop native
    applications using .NET as we can see in *Figure 1.4*.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET MAUI，Xamarin.Android、Xamarin.iOS和Xamarin.Mac已更新到.NET for Android、.NET
    for iOS和.NET for Mac。正如我们在*图1.4*中看到的，我们可以使用.NET开发本地应用程序。
- en: '![](img/B21554_01_04.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_04.png)'
- en: 'Figure 1.4: Native app development using .NET'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：使用.NET进行本地应用程序开发
- en: 'Since we have a complete .NET implementation on Android, iOS, and macOS, we
    can develop native applications on these platforms using .NET tools. This is the
    same as for Xamarin-native projects. The open-source project `keepass2android`
    is a good example of developing native Android apps using `Xamarin.Android`: [https://play.google.com/store/search?q=keepass2android](https://play.google.com/store/search?q=keepass2android).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在Android、iOS和macOS上都有完整的.NET实现，我们可以使用.NET工具在这些平台上开发本地应用程序。这与Xamarin-native项目相同。开源项目`keepass2android`是使用`Xamarin.Android`开发本地Android应用程序的一个很好的例子：[https://play.google.com/store/search?q=keepass2android](https://play.google.com/store/search?q=keepass2android)。
- en: With the latest .NET releases, there are multiple ways to develop cross-platform
    applications, such as .NET MAUI apps, native apps, and Blazor Hybrid apps, Avalonia,
    and Uno. We can see that there is a variety of possibilities in the .NET ecosystem.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最新的.NET版本发布，有多种方式可以开发跨平台应用程序，例如.NET MAUI应用程序、本地应用程序、Blazor混合应用程序、Avalonia和Uno。我们可以看到.NET生态系统中存在多种可能性。
- en: What’s new in .NET 8 for .NET MAUI?
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET 8中.NET MAUI的新特性是什么？
- en: .NET 8 introduced many new changes, and here we will review the aspects related
    to .NET MAUI.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 8引入了许多新变化，在此我们将回顾与.NET MAUI相关的方面。
- en: Native AOT support for iOS-like platforms
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对iOS-like平台的本地AOT支持
- en: .NET 8 introduces native AOT support for iOS-like platforms, allowing the building
    and running of .NET iOS and .NET MAUI applications on various platforms. Preliminary
    testing shows a 40% disk size decrease for .NET iOS apps and a 25% increase for
    .NET MAUI iOS apps using native AOT. However, as this is only the first step in
    support, performance conclusions should not be drawn yet. Native AOT support is
    an opt-in feature for app deployment, while Mono remains the default runtime for
    development and deployment.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 8 为类似 iOS 的平台引入了原生 AOT 支持，允许在各种平台上构建和运行 .NET iOS 和 .NET MAUI 应用程序。初步测试显示，.NET
    iOS 应用程序的磁盘大小减少了 40%，而使用原生 AOT 的 .NET MAUI iOS 应用程序增加了 25%。然而，由于这仅仅是支持的第一步，因此不应得出性能结论。原生
    AOT 支持是应用部署的可选功能，而 Mono 仍然是开发和部署的默认运行时。
- en: .NET MAUI extension of Visual Studio Code
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio Code 的 .NET MAUI 扩展
- en: Although still in its preview stage, Visual Studio Code now offers a .NET MAUI
    extension, making it available for use in .NET MAUI development. The .NET MAUI
    extension is a new Visual Studio Code extension that lets you develop and debug
    your app on devices, emulators, and simulators from VS Code. It is built on top
    of the C# and C# Dev Kit extensions, which supercharge your .NET development with
    powerful IntelliSense, an intuitive Solution Explorer, package management, and
    more.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然仍处于预览阶段，但 Visual Studio Code 现在提供 .NET MAUI 扩展，使其可用于 .NET MAUI 开发。.NET MAUI
    扩展是一个新的 Visual Studio Code 扩展，允许您在 VS Code 中开发并在设备、模拟器和仿真器上调试您的应用。它建立在 C# 和 C#
    Dev Kit 扩展之上，通过强大的 IntelliSense、直观的解决方案资源管理器、包管理等功能，增强了您的 .NET 开发。
- en: Development environment setup
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发环境设置
- en: In this section, we will introduce the development environment setup in Visual
    Studio and Visual Studio Code.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 Visual Studio 和 Visual Studio Code 中的开发环境设置。
- en: Using Visual Studio
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Visual Studio
- en: Both Windows and macOS can be used for.NET MAUI development, but you won’t be
    able to build all the targets with only one of them. You will need both Windows
    and Mac computers to build all the targets. In this book, the Windows environment
    is used to build and test Android and Windows targets, while iOS and macOS targets
    are built on a Mac computer.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 和 macOS 都可以用于 .NET MAUI 开发，但仅使用其中之一，您将无法构建所有目标。您需要 Windows 和 Mac 电脑来构建所有目标。在本书中，使用
    Windows 环境来构建和测试 Android 和 Windows 目标，而 iOS 和 macOS 目标则在 Mac 电脑上构建。
- en: '.NET MAUI apps can target the following platforms:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 应用可以针对以下平台：
- en: Android 5.0 (API 21) or higher
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 5.0 (API 21) 或更高版本
- en: iOS 11 or higher
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 11 或更高版本
- en: macOS 10.15 or higher, using Mac Catalyst
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 10.15 或更高版本，使用 Mac Catalyst
- en: Windows 11 and Windows 10 version 1809 or higher, using Windows UI Library (WinUI)
    3
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 11 和 Windows 10 版本 1809 或更高版本，使用 Windows UI 库 (WinUI) 3
- en: '.NET MAUI Blazor apps use the platform-specific WebView control, so they have
    the following additional requirements:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI Blazor 应用使用特定平台的 WebView 控件，因此它们有以下附加要求：
- en: Android 7.0 (API 24) or higher
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 7.0 (API 24) 或更高版本
- en: iOS 14 or higher
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 14 或更高版本
- en: macOS 11 or higher, using Mac Catalyst
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 11 或更高版本，使用 Mac Catalyst
- en: .NET MAUI build targets of Android, iOS, macOS, and Windows can be built using
    Visual Studio on a Windows computer. In this environment, a networked Mac is required
    to build iOS and macOS targets. Xcode must be installed on the paired Mac to debug
    and test an iOS MAUI app in a Windows environment.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 的 Android、iOS、macOS 和 Windows 构建目标可以在 Windows 电脑上的 Visual Studio 中构建。在此环境中，需要一个网络连接的
    Mac 来构建 iOS 和 macOS 目标。为了在 Windows 环境中调试和测试 iOS MAUI 应用，必须在该配对的 Mac 上安装 Xcode。
- en: .NET MAUI targets of Android, iOS, and macOS can be built and tested on macOS.
    Please refer to *Table 1.8* to find out about the build configurations on Windows
    and macOS.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 的 Android、iOS 和 macOS 目标可以在 macOS 上构建和测试。请参阅 *表 1.8* 了解 Windows 和
    macOS 上的构建配置。
- en: '| **Target platform** | **Windows** | **macOS** |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| **目标平台** | **Windows** | **macOS** |'
- en: '| Windows | Yes | No |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| Windows | 是 | 否 |'
- en: '| Android | Yes | Yes |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| Android | 是 | 是 |'
- en: '| iOS | Yes (pair to Mac) | Yes |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| iOS | 是（与 Mac 配对）| 是 |'
- en: '| macOS | Build only (pair to Mac) | Yes |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| macOS | 仅构建（与 Mac 配对）| 是 |'
- en: 'Table 1.8: Development environment of .NET MAUI'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.8：.NET MAUI 开发环境
- en: Installing .NET MAUI on Windows
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 .NET MAUI
- en: '.NET MAUI can be installed as part of Visual Studio 2022\. Visual Studio Community
    Edition is free, and we can download it from the Microsoft website at: [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 可以作为 Visual Studio 2022 的一部分进行安装。Visual Studio Community Edition 是免费的，我们可以从
    Microsoft 网站下载它：[https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/)。
- en: After launching the Visual Studio Installer, we see what is shown in *Figure
    1.5*. Please select **.NET Multi-platform App UI development** and **.NET desktop
    development** in the list of options. We also need to select **ASP.NET and web
    development** for the .NET MAUI Blazor app, which will be covered in part 2 of
    this book.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 安装程序后，我们看到 *图 1.5* 中所示的内容。请在选项列表中选择 **.NET 多平台应用程序 UI 开发**
    和 **.NET 桌面开发**。我们还需要为 .NET MAUI Blazor 应用程序选择 **ASP.NET 和 Web 开发**，这将在本书的第二部分中介绍。
- en: '![Graphical user interface, application, email  Description automatically generated](img/B21554_01_05.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，电子邮件，描述自动生成](img/B21554_01_05.png)'
- en: 'Figure 1.5: Visual Studio 2022 installation'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Visual Studio 2022 安装
- en: After the installation is completed, we can check the installation from the
    command line using the `dotnet` command as follows.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用 `dotnet` 命令在命令行中检查安装，如下所示。
- en: '![](img/B21554_01_06.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_06.png)'
- en: 'Figure 1.6: Checking the dotnet workload list'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：检查 dotnet 工作负载列表
- en: We are now ready to create, build, and run a .NET MAUI app on Windows.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好在 Windows 上创建、构建和运行 .NET MAUI 应用程序了。
- en: Installing .NET MAUI on macOS
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 .NET MAUI
- en: 'Despite Microsoft’s announcement of Visual Studio for Mac’s retirement in August
    2023, developers can still utilize it for .NET MAUI development on Mac. Visual
    Studio for Mac 17.6 will continue to be supported for another 12 months, until
    August 31st, 2024\. Please refer to the following announcement: [https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/](https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微软宣布 Visual Studio for Mac 将于 2023 年 8 月退役，但开发者仍然可以使用它来在 Mac 上进行 .NET MAUI
    开发。Visual Studio for Mac 17.6 将继续支持 12 个月，直到 2024 年 8 月 31 日。请参阅以下公告：[https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/](https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/)。
- en: The installation of Visual Studio Community Edition is similar to what we have
    done on Windows. The installation package can be downloaded from the same link.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Community Edition 的安装与我们在 Windows 上所做类似。安装包可以从相同的链接下载。
- en: After launching the Visual Studio Installer, we see what is shown in *Figure
    1.7*.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 Visual Studio 安装程序后，我们看到 *图 1.7* 中所示的内容。
- en: '![Graphical user interface, application  Description automatically generated](img/B21554_01_07.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，描述自动生成](img/B21554_01_07.png)'
- en: 'Figure 1.7: Visual Studio for Mac 2022 Installer'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：Visual Studio for Mac 2022 安装程序
- en: Please select **.NET** and **.NET MAUI** from the list of options in *Figure
    1.7*.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 请从 *图 1.7* 中的选项列表中选择 **.NET** 和 **.NET MAUI**。
- en: After the installation is complete, we can check the installation from the command
    line using the `dotnet` command as well.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们也可以使用 `dotnet` 命令在命令行中检查安装。
- en: We are ready to create, build, and run a .NET MAUI app on macOS.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好在 macOS 上创建、构建和运行 .NET MAUI 应用程序了。
- en: Visual Studio Code with the .NET MAUI extension
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有 .NET MAUI 扩展的 Visual Studio Code
- en: We can also set up a development environment using Visual Studio Code. It’s
    straightforward to get started with the .NET MAUI extension by installing it in
    Visual Studio Code. You can search for the .NET MAUI extension and install it,
    as shown in *Figure 1.8*.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 Visual Studio Code 设置开发环境。通过在 Visual Studio Code 中安装它，开始使用 .NET MAUI
    扩展非常简单。你可以搜索 .NET MAUI 扩展并安装它，如 *图 1.8* 所示。
- en: '![](img/B21554_01_08.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_08.png)'
- en: 'Figure 1.8: Visual Studio Code with .NET MAUI extension'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：带有 .NET MAUI 扩展的 Visual Studio Code
- en: When you install the **.NET MAUI extension**, the C# Dev Kit and C# extension
    will be installed automatically. Once the .NET MAUI extension is installed, you
    can load the project and explore the project in the solution explorer just as
    you can in Visual Studio.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '当你安装 **.NET MAUI 扩展** 时，C# 开发工具包和 C# 扩展将自动安装。一旦安装了 .NET MAUI 扩展，你就可以像在 Visual
    Studio 中一样，在解决方案资源管理器中加载项目并探索项目。 '
- en: '![](img/B21554_01_09.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21554_01_09.png)'
- en: 'Figure 1.9: Solution explorer in Visual Studio Code'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：Visual Studio Code 中的解决方案资源管理器
- en: Since Visual Studio Code can support Windows, macOS, and Linux, we can develop
    .NET MAUI apps on these three platforms. Please refer to the following table to
    find out about the supported target platforms.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Visual Studio Code 可以支持 Windows、macOS 和 Linux，我们可以在这三个平台上开发 .NET MAUI 应用程序。请参考以下表格以了解支持的目标平台。
- en: '| **Operating System** | **Supported Target Platform** |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | **支持的目标平台** |'
- en: '| Windows | Windows, Android |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| Windows | Windows, Android |'
- en: '| macOS | Android, iOS, macOS |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| macOS | Android, iOS, macOS |'
- en: '| Linux | Android |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| Linux | Android |'
- en: 'Table 1.9: Supported target platforms'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.9：支持的目标平台
- en: With Visual Studio Code, it is possible to develop .NET MAUI apps on Linux,
    but it can support Android as a target only.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code，可以在Linux上开发.NET MAUI应用程序，但它只能支持Android作为目标平台。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored topics related to .NET MAUI and Xamarin, discussing
    various cross-platform technologies in comparison to .NET MAUI. This analysis
    provided insight into the advantages and disadvantages of different frameworks.
    Additionally, we compared the JavaScript and C# ecosystems, as most cross-platform
    frameworks utilize these languages. By introducing the .NET landscape and the
    available cross-platform frameworks, you now have a comprehensive understanding
    of the essentials before delving into the world of .NET MAUI.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了与.NET MAUI和Xamarin相关的主题，讨论了与.NET MAUI相比的各种跨平台技术。这次分析为不同框架的优缺点提供了见解。此外，我们还比较了JavaScript和C#生态系统，因为大多数跨平台框架都使用这些语言。通过介绍.NET景观和可用的跨平台框架，你现在在深入.NET
    MAUI的世界之前，对基本概念有了全面的理解。
- en: In the next chapter, we will explore how to build a .NET MAUI application from
    scratch.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何从头开始构建.NET MAUI应用程序。
- en: Further reading
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Avalonia UI and MAUI – Something for everyone: [https://avaloniaui.net/](https://avaloniaui.net/)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Avalonia UI和MAUI – 为每个人提供一些东西：[https://avaloniaui.net/](https://avaloniaui.net/)
- en: '**.NET MAUI** – You can find more information about .NET MAUI in the Microsoft
    official documentation: [https://docs.microsoft.com/en-us/dotnet/maui/](https://docs.microsoft.com/en-us/dotnet/maui/)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI** – 你可以在Microsoft官方文档中找到更多关于.NET MAUI的信息：[https://docs.microsoft.com/en-us/dotnet/maui/](https://docs.microsoft.com/en-us/dotnet/maui/)'
- en: '**KeePass** – The official website for KeePass can be found at: [https://keepass.info/](https://keepass.info/)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KeePass** – KeePass的官方网站可在：[https://keepass.info/](https://keepass.info/)找到'
- en: Learn more on Discord
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/cross-platform-app](https://packt.link/cross-platform-app)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/cross-platform-app](https://packt.link/cross-platform-app)'
- en: '![](img/QR_Code166522361691420406.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code166522361691420406.png)'
