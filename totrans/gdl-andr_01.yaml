- en: Chapter 1. Getting Started with Gradle and Android Studio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用Gradle和Android Studio入门
- en: When Google introduced Gradle and Android Studio, they had some goals in mind.
    They wanted to make it easier to reuse code, create build variants, and configure
    and customize the build process. On top of that, they wanted good IDE integration,
    but without making the build system dependent on the IDE. Running Gradle from
    the command line or on a continuous integration server will always yield the same
    results as running a build from Android Studio.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当Google引入Gradle和Android Studio时，他们心中有一些目标。他们希望使代码重用、创建构建变体以及配置和自定义构建过程变得更加容易。在此基础上，他们还希望有良好的IDE集成，但又不希望构建系统依赖于IDE。从命令行或持续集成服务器运行Gradle将始终产生与从Android
    Studio运行构建相同的结果。
- en: We will refer to Android Studio occasionally throughout the book, because it
    often provides a simpler way of setting up projects, dealing with changes, and
    so on. If you do not have Android Studio installed yet, you can download it from
    the Android developer website ([http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将不时提及Android Studio，因为它经常提供一种更简单的方式来设置项目、处理更改等。如果你还没有安装Android Studio，你可以从Android开发者网站下载它（[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting to know Android Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Android Studio
- en: Understanding Gradle basics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Gradle基础知识
- en: Creating a new project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Getting started with the Gradle wrapper
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gradle包装器入门
- en: Migrating from Eclipse
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Eclipse迁移
- en: Android Studio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio
- en: Android Studio was announced and released (as an early access preview) by Google
    in May 2013, alongside support for Gradle. Android Studio is based on JetBrains'
    IntelliJ IDEA, but is designed specifically with Android development in mind.
    It is available for free for Linux, Mac OS X, and Microsoft Windows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio于2013年5月由Google宣布并发布（作为一个早期访问预览），同时支持Gradle。Android Studio基于JetBrains的IntelliJ
    IDEA，但专门为Android开发设计。它对Linux、Mac OS X和Microsoft Windows免费提供。
- en: Compared to Eclipse, Android Studio has an improved user interface designer,
    a better memory monitor, a nice editor for string translation, warnings for possible
    Android-specific issues and a lot more features aimed at Android developers. It
    also features a special project structure view for Android projects, besides the
    regular Project view and Packages view that exist in IntelliJ IDEA. This special
    view groups Gradle scripts, drawables, and other resources in a convenient way.
    As soon as the stable version 1.0 of Android Studio was released, Google retired
    the **Android Developer Tools** (**ADT**) for Eclipse and recommended all developers
    to switch to Android Studio. This means that Google will not provide new features
    for Eclipse anymore, and all IDE-related tool development is now focused on Android
    Studio. If you are still using Eclipse, it is time to change if you do not want
    to be left behind.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与Eclipse相比，Android Studio拥有改进的用户界面设计师、更好的内存监控器、用于字符串翻译的出色编辑器、针对可能的Android特定问题的警告以及许多针对Android开发者的功能。它还特别为Android项目提供了一个项目结构视图，除了IntelliJ
    IDEA中存在的常规项目视图和包视图之外。这个特殊视图以方便的方式将Gradle脚本、可绘制资源和其它资源分组。一旦Android Studio的稳定版1.0发布，Google就废弃了Eclipse的**Android开发者工具**（**ADT**），并建议所有开发者切换到Android
    Studio。这意味着Google将不再为Eclipse提供新功能，所有与IDE相关的工具开发现在都集中在Android Studio上。如果你仍在使用Eclipse，现在是时候更换了，否则你可能会落后。
- en: 'This screenshot shows what Android Studio looks like for a simple Android app
    project:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这张截图显示了Android Studio对于一个简单的Android应用程序项目的样子：
- en: '![Android Studio](img/B01061_01_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Android Studio](img/B01061_01_01.jpg)'
- en: Staying up to date
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持更新
- en: 'There are four different update channels for Android Studio:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio有四个不同的更新通道：
- en: Canary brings bleeding-edge updates, but might contain some bugs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Canary版本带来最新的更新，但可能包含一些错误
- en: The Dev channel gets an update more or less every month
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dev通道大约每个月更新一次
- en: Beta is used feature complete updates that might still contain bugs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Beta版本使用功能完整的更新，但这些更新可能仍然包含错误
- en: The Stable channel, which is the default, features thoroughly tested releases
    that should be bug-free
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定通道（默认通道）提供经过彻底测试的发布版本，应该没有错误
- en: By default, Android Studio checks every time it starts if there any updates
    available and notifies you.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Android Studio每次启动时都会检查是否有可用的更新，并通知你。
- en: When you launch Android Studio for the first time, it starts a wizard to set
    up your environment and to make sure you have the latest Android SDK and the necessary
    Google repositories. It also gives you the option to create an **Android Virtual
    Device** (**AVD**), so you can run apps on the emulator.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次启动 Android Studio 时，它会启动一个向导来设置你的环境，并确保你有最新的 Android SDK 和必要的 Google 仓库。它还提供了创建
    **安卓虚拟设备（AVD**）的选项，这样你就可以在模拟器上运行应用。
- en: Understanding Gradle basics
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Gradle 基础
- en: In order for an Android project to be built using Gradle, you need to set up
    a build script. This will always be called `build.gradle`, by convention. You
    will notice, as we go through the basics, that Gradle favors convention over configuration
    and generally provides default values for settings and properties. This makes
    it a lot easier to get started with a lot less configuration than that found in
    systems such as Ant or Maven, which have been the de facto build systems for Android
    projects for a long time. You do not need to absolutely comply with these conventions
    though, as it is usually possible to override them if needed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Gradle 构建安卓项目，你需要设置一个构建脚本。按照惯例，这个脚本总是被命名为 `build.gradle`。当你学习基础知识时，你会注意到
    Gradle 优先考虑惯例而非配置，并且通常为设置和属性提供默认值。这使得与 Ant 或 Maven 等系统相比，配置更少，更容易开始使用，而 Ant 和
    Maven 一直是安卓项目的实际构建系统。尽管如此，你不必绝对遵守这些惯例，因为通常在需要时可以覆盖它们。
- en: Gradle build scripts are not written in the traditional XML, but in a **domain-specific
    language** (**DSL**) based on Groovy, a dynamic language for the **Java Virtual
    Machine** (**JVM**). The team behind Gradle believes that using a declarative,
    DSL-style approach based on a dynamic language has significant advantages over
    using the more procedural, free-floating style of Ant, or any XML-based approach
    used by many other build systems.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 构建脚本不是用传统的 XML 编写的，而是基于 Groovy 的 **领域特定语言（DSL**），Groovy 是一种用于 **Java
    虚拟机（JVM**）的动态语言。Gradle 背后的团队认为，使用基于动态语言的声明式、DSL 风格的方法比使用 Ant 的更程序化、自由浮动的风格或许多其他构建系统使用的基于
    XML 的方法具有显著优势。
- en: That does not mean you need to know Groovy to get started with your build scripts.
    It is easy to read, and if you already know Java, the learning curve is not that
    steep. If you want to start creating your own tasks and plugins (which we will
    talk about in later chapters), it is useful to have a deeper understanding of
    Groovy. However, because it is based on the JVM, it is possible to write code
    for your custom plugins in Java or any other JVM-based language.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你需要了解 Groovy 才能开始编写构建脚本。它很容易阅读，如果你已经熟悉 Java，学习曲线也不会太陡峭。如果你想开始创建自己的任务和插件（我们将在后面的章节中讨论），对
    Groovy 有更深入的了解是有用的。然而，由于它基于 JVM，你可以用 Java 或任何其他 JVM 语言编写自定义插件的代码。
- en: Projects and tasks
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目和任务
- en: The two most important concepts in Gradle are projects and tasks. Every build
    is made up of at least one project, and every project contains one or more tasks.
    Every `build.gradle` file represents a project. Tasks are then simply defined
    inside the build script. When initializing the build process, Gradle assembles
    `Project` and `Task` objects based on the build file. A `Task` object consists
    of a list of `Action` objects, in the order they need to be executed. An `Action`
    object is a block of code that is executed, similar to a method in Java.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gradle 中，最重要的两个概念是项目和任务。每个构建至少包含一个项目，每个项目包含一个或多个任务。每个 `build.gradle` 文件代表一个项目。任务在构建脚本内部简单地定义。在初始化构建过程时，Gradle
    根据构建文件组装 `Project` 和 `Task` 对象。一个 `Task` 对象由需要按顺序执行的 `Action` 对象列表组成。`Action`
    对象是一段被执行的代码块，类似于 Java 中的方法。
- en: The build lifecycle
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建生命周期
- en: 'Executing a Gradle build is, in its simplest form, just executing actions on
    tasks, which are dependent on other tasks. To simplify the build process, the
    build tools create a dynamic model of the workflow as a **Directed Acyclic Graph**
    (**DAG**). This means all the tasks are processed one after the other and loops
    are not possible. Once a task has been executed, it will not be called again.
    Tasks without dependencies will always be run before the others. The dependency
    graph is generated during the configuration phase of a build. A Gradle build has
    three phases:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 Gradle 构建，在最简单的形式中，只是对任务执行操作，这些任务依赖于其他任务。为了简化构建过程，构建工具创建了一个工作流程的动态模型，作为一个**有向无环图**（**DAG**）。这意味着所有任务都是依次处理的，并且不可能有循环。一旦任务被执行，它将不会被再次调用。没有依赖关系的任务将始终在其他任务之前运行。依赖关系图是在构建配置阶段生成的。Gradle
    构建有三个阶段：
- en: '**Initialization**: This is where the `Project` instance is created. If there
    are multiple modules, each with their own `build.gradle` file, multiple projects
    will be created.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初始化**：这是创建 `Project` 实例的地方。如果有多个模块，每个模块都有自己的 `build.gradle` 文件，则会创建多个项目。'
- en: '**Configuration**: In this phase, the build scripts are executed, creating
    and configuring all the tasks for every project object.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：在这个阶段，执行构建脚本，为每个项目对象创建和配置所有任务。'
- en: '**Execution**: This is the phase where Gradle determines which tasks should
    be executed. Which tasks should be executed depends on the arguments passed for
    starting the build and what the current directory is.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：这是 Gradle 确定哪些任务应该被执行的阶段。应该执行哪些任务取决于启动构建时传递的参数以及当前目录是什么。'
- en: The build configuration file
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建配置文件
- en: 'In order to have Gradle build a project, there always needs to be a `build.gradle`
    file. A build file for Android has a few required elements:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 Gradle 构建项目，总需要有一个 `build.gradle` 文件。Android 的构建文件有几个必需的元素：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is where the actual build is configured. In the repositories block, the
    JCenter repository is configured as a source of dependencies for the build script.
    JCenter is a preconfigured Maven repository and requires no extra setup; Gradle
    has you covered. There are several repositories available straight from Gradle
    and it is easy to add your own, either local or remote.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在这里配置实际的构建。在仓库块中，JCenter 仓库被配置为构建脚本的依赖项来源。JCenter 是一个预配置的 Maven 仓库，无需额外设置；Gradle
    已经为你准备好了。Gradle 提供了几个直接可用的仓库，并且添加自己的仓库（无论是本地还是远程的）都很简单。
- en: 'The build script block also defines a dependency on Android build tools as
    a classpath Maven artifact. This is where the Android plugin comes from. The Android
    plugin provides everything needed to build and test applications. Every Android
    project needs to apply the Android plugin using this line:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 构建脚本块还定义了对 Android 构建工具的依赖，作为一个类路径 Maven 艺术品。这就是 Android 插件的来源。Android 插件提供了构建和测试应用程序所需的一切。每个
    Android 项目都需要使用以下行应用 Android 插件：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Plugins are used to extend the capabilities of a Gradle build script. Applying
    a plugin to a project makes it possible for the build script to define properties
    and use tasks that are defined in the plugin.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 插件用于扩展 Gradle 构建脚本的特性。将插件应用于项目使得构建脚本能够定义属性和使用插件中定义的任务。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are building a library, you need to apply `'com.android.library'` instead.
    You cannot use both in the same module because that would result in a build error.
    A module can be either an Android application or an Android library, not both.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在构建一个库，你需要应用 `'com.android.library'`。你无法在同一个模块中使用两者，因为这会导致构建错误。一个模块可以是 Android
    应用程序或 Android 库，但不能同时是两者。
- en: 'When using the Android plugin, Android-specific conventions can be configured
    and tasks only applicable to Android will be generated. The Android block in the
    following snippet is defined by the plugin and can be configured per project:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Android 插件时，可以配置 Android 特定的约定，并且只会生成适用于 Android 的任务。以下代码片段中的 Android 块是由插件定义的，并且可以按项目进行配置：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is where the Android-specific part of the build is configured. The Android
    plugin provides a DSL tailored to Android's needs. The only required properties
    are the compilation target and the build tools. The compilation target, specified
    by `compileSdkVersion`, is the SDK version that should be used to compile the
    app. It is good practice to use the latest Android API version as the compilation
    target.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是配置 Android 构建特定部分的区域。Android 插件提供了一个针对 Android 需求定制的 DSL。唯一必需的属性是编译目标和构建工具。编译目标由
    `compileSdkVersion` 指定，是用于编译应用应使用的 SDK 版本。使用最新的 Android API 版本作为编译目标是良好的实践。
- en: There are plenty of customizable properties in the `build.gradle` file. We will
    discuss the most important properties in [Chapter 2](ch02.html "Chapter 2. Basic
    Build Customization"), *Basic Build Customization*, and more possibilities throughout
    the rest of the book.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle` 文件中有许多可自定义的属性。我们将在[第 2 章](ch02.html "第 2 章。基本构建自定义")*基本构建自定义*中讨论最重要的属性，并在本书的其余部分探讨更多可能性。'
- en: The project structure
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目结构
- en: Compared to the old Eclipse projects, the folder structure for Android projects
    has changed considerably. As mentioned earlier, Gradle favors convention over
    configuration and this also applies to the folder structure.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧版本的 Eclipse 项目相比，Android 项目的文件夹结构已经发生了很大变化。如前所述，Gradle 倾向于使用约定而非配置，这同样适用于文件夹结构。
- en: 'This is the folder structure that Gradle expects for a simple app:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Gradle 预期的一个简单应用的文件夹结构：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Gradle projects usually have an extra level at the root. This makes it easier
    to add extra modules at a later point. All source code for the app goes into the
    `app` folder. The folder is also the name of the module by default and does not
    need to be named app. If you use Android Studio to create a project with both
    a mobile app and an Android Wear smartwatch app, for example, the modules are
    called application and wearable by default.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 项目通常在根目录有一个额外的层级。这使得在以后添加额外的模块变得更容易。所有应用源代码都放入 `app` 文件夹中。默认情况下，该文件夹也是模块的名称，不需要命名为
    app。例如，如果您使用 Android Studio 创建一个包含移动应用和 Android Wear 智能手表应用的项目，默认情况下模块名称为 application
    和 wearable。
- en: Gradle makes use of a concept called source set. The official Gradle documentation
    explains that a source set is *a group of source files, which are compiled and
    executed together*. For an Android project, `main` is the source set that contains
    all the source code and resources for the default version of the app. When you
    start writing tests for your Android app, you will put the source code for the
    tests inside a separate source set called `androidTest`, which only contains tests.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 使用一个称为源集的概念。官方 Gradle 文档解释说，源集是*一组源文件，它们一起编译和执行*。对于 Android 项目，`main`
    是包含默认版本应用所有源代码和资源的源集。当您开始为 Android 应用编写测试时，您将测试的源代码放入一个名为 `androidTest` 的单独源集中，该源集只包含测试。
- en: 'Here is a short overview of the most important folders of an Android app:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 Android 应用最重要的文件夹的简要概述：
- en: '| Directory | Content |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 目录 | 内容 |'
- en: '| --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `/src/main/java` | The source code for the app |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `/src/main/java` | 应用的源代码 |'
- en: '| `/src/main/res` | These are app-related resources (drawables, layouts, strings,
    and so on) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `/src/main/res` | 这些是与应用相关的资源（可绘制元素、布局、字符串等） |'
- en: '| `/libs` | These are external libraries (`.jar` or `.aar`) |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `/libs` | 这些是外部库（`.jar` 或 `.aar`） |'
- en: '| `/build` | The output of the build process |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `/build` | 构建过程输出 |'
- en: Creating a new project
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新项目
- en: You can start a new project in Android Studio by clicking on **Start a new Android
    Studio project** on the start screen or by navigating to **File** | **New Project…**
    in the IDE itself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击启动屏幕上的**开始新的 Android Studio 项目**或在 IDE 本身导航到**文件** | **新建项目…**来在 Android
    Studio 中启动一个新项目。
- en: Creating a new project in Android Studio starts with a wizard that helps set
    everything up. The first screen is for setting up the application name and the
    company domain. The application name is the name that will be used as the name
    of the app when it is installed and is used as the toolbar title by default. The
    company domain is used in combination with the application name to determine the
    package name, which is the unique identifier for any Android app. If you prefer
    a different package name, you can still change it by clicking on **Edit**. You
    can also change the location of the project on your hard drive.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建新项目从向导开始，该向导帮助设置一切。第一个屏幕是设置应用程序名称和公司域名。应用程序名称是安装时用作应用名称的名称，默认情况下用作工具栏标题。公司域名与应用程序名称结合使用，以确定包名，这是任何
    Android 应用的唯一标识符。如果您希望包名不同，您仍然可以通过点击 **编辑** 来更改它。您还可以更改项目在您的硬盘上的位置。
- en: '![Creating a new project](img/B01061_01_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/B01061_01_02.jpg)'
- en: No files are generated before going through all the steps in the wizard, because
    the next few steps will define which files need to be created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成向导的所有步骤之前，不会生成任何文件，因为接下来的几个步骤将定义需要创建哪些文件。
- en: Android does not only run on phones and tablets, but also supports a broad range
    of form factors, such as TV, watches, and glasses. The next screen helps you set
    up all the form factors you want to target in your project. Depending on what
    you choose here, dependencies and build plugins are included for development.
    This is where you decide if you just want to make a phone and tablet app or whether
    you also want to include an Android TV module, an Android Wear module, or a Google
    Glass module. You can still add these later, but the wizard makes it easy by adding
    all the necessary files and configurations. This is also where you choose what
    version of Android you want to support. If you select an API version below 21,
    the Android Support Library (including the `appcompat` library) is automatically
    added as a dependency.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Android 不仅在手机和平板电脑上运行，还支持广泛的设备形态，例如电视、手表和眼镜。下一个屏幕帮助您设置项目中想要针对的所有设备形态。根据您的选择，将包括用于开发的依赖项和构建插件。这就是您决定是否只想制作手机和平板电脑应用，或者是否还想包括
    Android TV 模块、Android Wear 模块或 Google Glass 模块的地方。您仍然可以在以后添加这些模块，但向导通过添加所有必要的文件和配置使这个过程变得简单。这也是您选择想要支持的
    Android 版本的地方。如果您选择低于 21 的 API 版本，Android Support Library（包括 `appcompat` 库）将自动添加为依赖项。
- en: '![Creating a new project](img/B01061_01_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/B01061_01_03.jpg)'
- en: Tip
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [http://www.packtpub.com](http://www.packtpub.com) 下载您购买的所有 Packt 出版物的示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给您。
- en: 'The following screen suggests adding an activity and provides a lot of options,
    all of which result in generated code that makes it easier to get started. If
    you choose to have Android Studio generate an activity for you, the next step
    is to enter a name for the activity class, the layout file and the menu resource,
    and also to give the activity a title:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕建议添加一个活动并提供许多选项，所有这些选项都会生成代码，使开始工作变得更容易。如果您选择让 Android Studio 为您生成活动，下一步是输入活动类的名称、布局文件和菜单资源，并为活动提供一个标题：
- en: '![Creating a new project](img/B01061_01_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](img/B01061_01_04.jpg)'
- en: After you go through the entire wizard, Android Studio generates source code
    for an activity and a fragment, depending on the choices you made during the wizard.
    Android Studio also generates the basic Gradle files to make the project build.
    You will find a file called `settings.gradle` and one called `build.gradle` on
    the top level of the project. Inside the app module folder, there is another `build.gradle`
    file. We will go into more detail about the content and the purpose of these files
    in [Chapter 2](ch02.html "Chapter 2. Basic Build Customization"), *Basic Build
    Customization*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在您完成整个向导后，Android Studio 会根据您在向导期间所做的选择生成活动（activity）和片段（fragment）的源代码。Android
    Studio 还会生成基本的 Gradle 文件以使项目可构建。您将在项目的顶层找到一个名为 `settings.gradle` 的文件和一个名为 `build.gradle`
    的文件。在应用模块文件夹内，还有一个 `build.gradle` 文件。我们将在 [第 2 章](ch02.html "第 2 章。基本构建自定义") *基本构建自定义*
    中更详细地介绍这些文件的内容和目的。
- en: 'You now have several options to trigger a build from inside Android Studio:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在有几种选项可以在 Android Studio 内触发构建：
- en: Inside the **Build** menu, you can click on **Make Project**, or you can use
    the keyboard shortcut, which is *Ctrl* + *F9* on a PC and *Cmd* + *F9* on Mac
    OS X
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 **构建** 菜单中，您可以点击 **构建项目**，或者可以使用键盘快捷键，在 PC 上是 *Ctrl* + *F9*，在 Mac OS X 上是
    *Cmd* + *F9*。
- en: The toolbar has a shortcut for the same **Make Project**
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏有一个与相同的 **构建项目** 的快捷键
- en: The Gradle tool window, which lists all the available Gradle tasks
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有可用 Gradle 任务的 Gradle 工具窗口
- en: In the Gradle tool window, you can try to execute `assembleDebug` to build,
    or `installDebug` to install the app on a device or emulator. We will discuss
    these tasks in the next part of this chapter, which deals with the Gradle wrapper.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Gradle 工具窗口中，您可以尝试执行 `assembleDebug` 来构建，或者执行 `installDebug` 来在设备或模拟器上安装应用。我们将在本章的下一部分讨论这些任务，该部分涉及
    Gradle Wrapper。
- en: Getting started with the Gradle Wrapper
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Gradle Wrapper
- en: Gradle is a tool that is under constant development, and new versions could
    potentially break backward compatibility. Using the Gradle Wrapper is a good way
    to avoid issues and to make sure builds are reproducible.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 是一个持续发展的工具，新版本可能会破坏向后兼容性。使用 Gradle Wrapper 是避免问题和确保构建可重复的好方法。
- en: The Gradle Wrapper provides a batch file on Microsoft Windows and a shell script
    on other operating systems. When you run the script, the required version of Gradle
    is downloaded (if it is not present yet) and used automatically for the build.
    The idea behind this is that every developer or automated system that needs to
    build the app can just run the wrapper, which will then take care of the rest.
    This way, it is not required to manually install the correct version of Gradle
    on a developer machine or build server. Therefore, it is also recommended to add
    the wrapper files to your version control system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle Wrapper 在 Microsoft Windows 上提供了一个批处理文件，在其他操作系统上提供了一个 shell 脚本。当您运行脚本时，所需的
    Gradle 版本将被下载（如果尚未存在）并自动用于构建。背后的想法是，每个需要构建应用的开发人员或自动化系统都可以运行 Wrapper，然后它会处理其余部分。这样，就不需要在开发机器或构建服务器上手动安装正确的
    Gradle 版本。因此，也建议将 Wrapper 文件添加到您的版本控制系统中。
- en: Running the Gradle Wrapper is not that different from running Gradle directly.
    You just execute `gradlew` on Linux and Mac OS X and `gradlew.bat` on Microsoft
    Windows, instead of the regular `gradle` command.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Gradle Wrapper 与直接运行 Gradle 并无太大区别。您只需在 Linux 和 Mac OS X 上执行 `gradlew`，在
    Microsoft Windows 上执行 `gradlew.bat` 而不是常规的 `gradle` 命令。
- en: Getting the Gradle Wrapper
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 Gradle Wrapper
- en: For your convenience, every new Android project includes the Gradle Wrapper,
    so when you create a new project, you do not have to do anything at all to get
    the necessary files. It is, of course, possible to install Gradle manually on
    your computer and use it for your project, but the Gradle Wrapper can do the same
    things and guarantee that the correct version of Gradle is used. There is no good
    reason not to use the wrapper when working with Gradle outside of Android Studio.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，每个新的 Android 项目都包含 Gradle Wrapper，因此当您创建一个新项目时，您根本不需要做任何事情就可以获取必要的文件。当然，您可以在计算机上手动安装
    Gradle 并将其用于您的项目，但 Gradle Wrapper 可以做同样的事情，并确保使用正确的 Gradle 版本。在没有 Android Studio
    的情况下使用 Gradle 时，没有不使用 Wrapper 的好理由。
- en: You can check if the Gradle Wrapper is present in your project by navigating
    to the project folder and running `./gradlew –v` from the terminal or `gradlew.bat
    –v` from Command Prompt. Running this command displays the version of Gradle and
    some extra information about your setup. If you are converting an Eclipse project,
    the wrapper will not be present by default. In this case, it is possible to generate
    it using Gradle, but you will need to install Gradle first to get the wrapper.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到项目文件夹并在终端中运行`./gradlew –v`或从命令提示符中运行`gradlew.bat –v`来检查Gradle包装器是否存在于您的项目中。运行此命令将显示Gradle的版本以及有关您设置的额外信息。如果您正在转换Eclipse项目，默认情况下包装器将不存在。在这种情况下，您可以使用Gradle生成它，但您需要首先安装Gradle以获取包装器。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Gradle download page ([http://gradle.org/downloads](http://gradle.org/downloads))
    has links to binaries and the source code, and it is possible to use a package
    manager such as Homebrew if you are on Mac OS X. All the instructions for installation
    are on the installation page ([http://gradle.org/installation](http://gradle.org/installation)).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle下载页面([http://gradle.org/downloads](http://gradle.org/downloads))提供了二进制文件和源代码的链接，如果您在Mac
    OS X上，可以使用包管理器，如Homebrew。所有安装说明都在安装页面([http://gradle.org/installation](http://gradle.org/installation))上。
- en: 'After you have downloaded and installed Gradle and added it to your `PATH`,
    create a `build.gradle` file containing these three lines:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在您下载并安装Gradle并将其添加到您的`PATH`后，创建一个包含以下三行的`build.gradle`文件：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After that, run `gradle wrapper` to generate the wrapper files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，运行`gradle wrapper`以生成包装文件。
- en: 'In recent versions of Gradle, you can also run the wrapper task without modifying
    the `build.gradle` file, because it is included as a task by default. In that
    case, you can specify the version with the `--gradle-version` parameter, like
    this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gradle的较新版本中，您也可以不修改`build.gradle`文件就运行包装任务，因为它默认包含为任务。在这种情况下，您可以使用`--gradle-version`参数指定版本，如下所示：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you do not specify a version number, the wrapper is configured to use the
    Gradle version that the task is executed with.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有指定版本号，包装器配置为使用执行任务时使用的Gradle版本。
- en: 'These are all the files generated by the wrapper task:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是由包装任务生成的文件：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can see here that the Gradle Wrapper has three parts:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，Gradle包装器有三个部分：
- en: A batch file on Microsoft Windows and a shell script on Linux and Mac OS X
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Windows上的批处理文件和在Linux以及Mac OS X上的shell脚本
- en: A JAR file that is used by the batch file and shell script
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个由批处理文件和shell脚本使用的JAR文件
- en: A `properties` file
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`properties`文件
- en: 'The `gradle-wrapper.properties` file is the one that contains the configuration
    and determines what version of Gradle is used:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradle-wrapper.properties`文件是包含配置并确定使用Gradle哪个版本的文件：'
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can change the distribution URL if you want to use a customized Gradle distribution
    internally. This also means that any app or library that you use could have a
    different URL for Gradle, so be sure to check whether you can trust the properties
    before you run the wrapper.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用定制的Gradle分发，您可以更改分发URL。这也意味着您使用的任何应用程序或库都可能具有不同的Gradle URL，所以在运行包装器之前，请确保您信任这些属性。
- en: Android Studio is kind enough to display a notification when the Gradle version
    used in a project is not up to date and will suggest automatically updating it
    for you. Basically, Android Studio changes the configuration in the `gradle-wrapper.properties`
    file and triggers a build, so that the latest version gets downloaded.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio非常体贴，当项目中使用的Gradle版本不是最新版本时，它会显示一个通知，并会自动建议为您更新它。基本上，Android Studio会更改`gradle-wrapper.properties`文件中的配置并触发构建，以便下载最新版本。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android Studio uses the information in the properties to determine which version
    of Gradle to use, and it runs the wrapper from the Gradle Wrapper directory inside
    your project. However, it does not make use of the shell or bash scripts, so you
    should not customize those.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio使用属性中的信息来确定使用哪个版本的Gradle，并从您项目中的Gradle Wrapper目录运行包装器。然而，它并不使用shell或bash脚本，因此您不应自定义这些脚本。
- en: Running basic build tasks
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行基本构建任务
- en: 'In the terminal or command prompt, navigate to the project directory and run
    the Gradle Wrapper with the `tasks` command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端或命令提示符中，导航到项目目录并使用`tasks`命令运行Gradle包装器：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will print out a list of all the available tasks. If you add the `--all`
    parameter, you will get a more detailed overview with the dependencies for every
    task.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出所有可用任务的列表。如果您添加`--all`参数，您将获得每个任务的依赖关系的更详细概览。
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: On Microsoft Windows, you need to run `gradlew.bat`, and on Linux and Mac OS
    X, the full command is `./gradlew`. For the sake of brevity, we will just write
    `gradlew` throughout this book.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上，你需要运行 `gradlew.bat`，在 Linux 和 Mac OS X 上，完整的命令是 `./gradlew`。为了简洁起见，我们将在整本书中只写
    `gradlew`。
- en: 'To build the project while you are developing, run the assemble task with the
    debug configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中构建项目时，使用调试配置运行 assemble 任务：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This task will create an APK with the debug version of the app. By default,
    the Android plugin for Gradle saves the APK in the directory `MyApp/app/build/outputs/apk`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务将创建一个包含应用调试版本的 APK。默认情况下，Gradle 的 Android 插件将 APK 保存到目录 `MyApp/app/build/outputs/apk`。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Abbreviated task names**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**缩写任务名称**'
- en: To avoid a lot of typing in the terminal, Gradle also provides abbreviated Camel
    case task names as shortcuts. For example, you can execute `assembleDebug` by
    running `gradlew assDeb`, or even `gradlew aD`, from the command-line interface.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在终端中输入太多，Gradle 还提供了缩写的驼峰式任务名称作为快捷方式。例如，你可以通过运行 `gradlew assDeb` 来执行 `assembleDebug`，或者甚至从命令行界面运行
    `gradlew aD`。
- en: There is one caveat to this though. It will only work as long as the Camel case
    abbreviation is unique. As soon as another task has the same abbreviation, this
    trick does not work anymore for those tasks.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然如此，这里有一个需要注意的地方。只有当驼峰式缩写是唯一的时候，这个方法才会工作。一旦有其他任务使用了相同的缩写，这个技巧就不再适用于这些任务了。
- en: 'Besides `assemble`, there are three other basic tasks:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `assemble` 之外，还有三个其他基本任务：
- en: '`check` runs all the checks, this usually means running tests on a connected
    device or emulator'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check` 执行所有检查，这通常意味着在连接的设备或模拟器上运行测试'
- en: '`build` triggers both `assemble` and `check`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build` 触发 `assemble` 和 `check`'
- en: '`clean` cleans the output of the project'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean` 清除项目的输出'
- en: We will discuss these tasks in detail in [Chapter 2](ch02.html "Chapter 2. Basic
    Build Customization"), *Basic Build Customization*.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 2 章](ch02.html "第 2 章。基本构建自定义")*基本构建自定义*中详细讨论这些任务。
- en: Migrating from Eclipse
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Eclipse 迁移
- en: 'There are two ways to take on migration from an Eclipse project to a Gradle-based
    project:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Eclipse 项目迁移到基于 Gradle 的项目有两种方式：
- en: Use the import wizard in Android Studio to handle migration automatically
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android Studio 中使用导入向导来自动处理迁移
- en: Add a Gradle script to the Eclipse project and set everything up manually
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Gradle 脚本添加到 Eclipse 项目中，并手动设置一切
- en: Most projects are simple enough for the import wizard to be able to convert
    everything automatically. If there is something the wizard cannot figure out,
    it might even give you hints as to what you need to change for it to work.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数项目足够简单，导入向导能够自动转换所有内容。如果向导无法确定某些内容，它甚至可能会给你一些提示，告诉你需要更改什么才能使其工作。
- en: Some projects, though, might be extremely complicated and require a manual conversion.
    If you have a huge project and you prefer to convert the project in steps, instead
    of all at once, it is possible to execute Ant tasks, or even entire Ant builds
    from Gradle. Doing that, you can do the transition at the pace you prefer and
    convert all the components slowly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些项目可能非常复杂，需要手动转换。如果你有一个很大的项目，并且你更喜欢分步转换项目而不是一次性转换，你可以执行 Ant 任务，甚至从 Gradle
    执行整个 Ant 构建。这样做，你可以按照你喜欢的节奏进行过渡，并缓慢地转换所有组件。
- en: Using the import wizard
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用导入向导
- en: To start the import wizard, you need to open Android Studio, click on the **File**
    menu and then on **Import Project...**, or on the Android Studio start screen,
    click on **Import Non-Android Studio project**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动导入向导，你需要打开 Android Studio，点击 **文件** 菜单然后点击 **导入项目...**，或者在 Android Studio
    启动屏幕上点击 **导入非 Android Studio 项目**。
- en: If you convert a project with JAR files or library sources, the import wizard
    will suggest replacing those with Gradle dependencies. These dependencies can
    come from local Google repositories (such as the Android Support Library) or even
    from a known online repository central. If no matching Google or online dependencies
    are found, the JAR file is used, as it was before. The import wizard creates at
    least one module for your app. If you have libraries with source code in your
    project, those are converted to modules as well.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将包含 JAR 文件或库源的项目进行转换，导入向导会建议用 Gradle 依赖项替换它们。这些依赖项可以来自本地 Google 仓库（例如 Android
    支持库）或甚至来自已知的在线仓库中心。如果没有找到匹配的 Google 或在线依赖项，将使用 JAR 文件，就像之前一样。导入向导至少会为你的应用创建一个模块。如果你在项目中还有包含源代码的库，这些库也会被转换为模块。
- en: 'This is what the import wizard looks like:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是导入向导的外观：
- en: '![Using the import wizard](img/B01061_01_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![使用导入向导](img/B01061_01_05.jpg)'
- en: Studio creates a new folder to make sure you do not lose anything when you convert,
    and you can easily compare the outcome of the import wizard with the original.
    When the conversion is done, Android Studio opens the project and shows an import
    summary.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Studio 创建了一个新文件夹，以确保在转换过程中您不会丢失任何内容，您可以轻松地比较导入向导的结果与原始内容。转换完成后，Android Studio
    将打开项目并显示导入摘要。
- en: The summary lists any files that the import wizard decided to ignore and did
    not copy to the new project. If you want to include those anyway, you have to
    manually copy them to the new project. Right below the ignored files, the summary
    shows any JAR files that the import wizard was able to replace with Gradle dependencies.
    Android Studio tries to find those dependencies on JCenter. If you are using the
    Support Library, it is now included in the Google repository that is downloaded
    to your machine using the SDK manager, instead of a JAR file. Finally, the summary
    lists all the files that the import wizard has moved, showing their origin and
    destination.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要列出了导入向导决定忽略的任何文件，并且没有复制到新项目中。如果您仍然想包含这些文件，您必须手动将它们复制到新项目中。在忽略的文件下方，摘要显示了导入向导能够用
    Gradle 依赖项替换的任何 JAR 文件。Android Studio 尝试在 JCenter 上找到这些依赖项。如果您正在使用 Support Library，它现在包含在通过
    SDK 管理器下载到您机器上的 Google 仓库中，而不是 JAR 文件。最后，摘要列出了导入向导移动的所有文件，显示了它们的来源和目的地。
- en: 'The import wizard also adds three Gradle files: `settings.gradle` and `build.gradle`
    on the root, and another `build.gradle` in the module.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 导入向导还会添加三个 Gradle 文件：根目录下的 `settings.gradle` 和 `build.gradle`，以及模块中的另一个 `build.gradle`。
- en: If you have any libraries that include source code, the import wizard turns
    those into Gradle projects as well and links everything together as necessary.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何包含源代码的库，导入向导也会将其转换为 Gradle 项目，并根据需要将所有内容链接在一起。
- en: The project should now build without any issues, but keep in mind that you might
    need an Internet connection to download some of the necessary dependencies.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 项目现在应该可以无问题地构建，但请注意，您可能需要互联网连接来下载一些必要的依赖项。
- en: Projects that are more complicated might require extra work though, so next
    we will take a look at how to do the conversion manually.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的项目可能需要额外的工作，因此接下来我们将探讨如何手动进行转换。
- en: Tip
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**The Eclipse export wizard**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**Eclipse 导出向导**'
- en: There is an export wizard in Eclipse as well, but it is completely outdated
    because the Android Tools team at Google stopped working on the Android Developer
    Tools for Eclipse. Therefore, it is recommended to always use the import wizard
    in Android Studio instead.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 也有一个导出向导，但由于 Google 的 Android Tools 团队停止了 Eclipse Android 开发工具的开发，因此它已经完全过时。因此，建议始终在
    Android Studio 中使用导入向导。
- en: Migrating manually
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动迁移
- en: There are multiple ways to go about manually migrating to a Gradle-based Android
    project. It is not required to change to the new directory structure, and it is
    even possible to run Ant scripts from your Gradle scripts. This makes the process
    of migrating very flexible, and it can make the transition easier for larger projects.
    We will look at running Ant tasks in [Chapter 9](ch09.html "Chapter 9. Advanced
    Build Customization"), *Advanced Build Customization*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以手动将项目迁移到基于 Gradle 的 Android 项目。不需要更改到新的目录结构，甚至可以从 Gradle 脚本中运行 Ant 脚本。这使得迁移过程非常灵活，并且可以使大型项目的过渡更加容易。我们将在第
    9 章 [高级构建自定义](ch09.html "第 9 章。高级构建自定义")中查看运行 Ant 任务。
- en: Keeping the old project structure
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保持旧项目结构
- en: If you do not want to move files around, it is possible to keep the Eclipse
    folder structure in your project. To do that, you need to change the source set
    configuration. We mentioned source sets earlier when talking about the project
    structure. Gradle and the Android plugin have their defaults, as usual, but it
    is possible to override those.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想移动文件，可以在项目中保留 Eclipse 文件夹结构。为此，您需要更改源集配置。我们在讨论项目结构时提到了源集。Gradle 和 Android
    插件有它们的默认设置，但通常情况下，您也可以覆盖这些设置。
- en: 'The first thing you need to do is to create a `build.gradle` file in the project
    directory. This file should apply the Android plugin and define the required properties
    for Gradle and the Android plugin. In its simplest form, it looks like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的第一件事是在项目目录中创建一个 `build.gradle` 文件。此文件应应用 Android 插件并定义 Gradle 和 Android
    插件所需的所有属性。在其最简单的形式中，它看起来像这样：
- en: '[PRE10]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you can start by changing the source set. Usually, overriding the main
    source set to comply with the Eclipse structure looks like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以从更改源集开始。通常，覆盖主源集以符合 Eclipse 结构看起来像这样：
- en: '[PRE11]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the Eclipse folder structure, all source files will reside in the same folder,
    so you need to tell Gradle that all these components can be found in the `src`
    folder. You only need to include the components that are in your project, but
    adding them all does no harm.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Eclipse 文件夹结构中，所有源文件都将位于同一个文件夹中，因此你需要告诉 Gradle 所有这些组件都可以在 `src` 文件夹中找到。你只需要包含你项目中的组件，但添加所有组件并不会造成伤害。
- en: 'If you have any dependencies on JAR files, you need to tell Gradle where the
    dependencies are located. Assuming the JAR files are in a folder called `libs`,
    the configuration looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你依赖于 JAR 文件，你需要告诉 Gradle 依赖项的位置。假设 JAR 文件位于名为 `libs` 的文件夹中，配置看起来像这样：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This one-liner includes every file with the extension `.jar` inside the `libs`
    directory as a dependency.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 `libs` 目录中所有扩展名为 `.jar` 的文件作为依赖项包含在内。
- en: Converting to the new project structure
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换到新的项目结构
- en: 'If you decide to convert to the new project structure manually, you need to
    create a few folders and move some files. This table shows an overview of the
    most important files and folders, and where you need to move them to convert to
    the new project structure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定手动转换为新的项目结构，你需要创建一些文件夹并移动一些文件。此表概述了最重要的文件和文件夹，以及你需要将它们移动到何处以转换为新的项目结构：
- en: '| Old location | New location |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 旧位置 | 新位置 |'
- en: '| --- | --- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `src/` | `app/src/main/java/` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `src/` | `app/src/main/java/` |'
- en: '| `res/` | `app/src/main/res/` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `res/` | `app/src/main/res/` |'
- en: '| `assets/` | `app/src/main/assets/` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `assets/` | `app/src/main/assets/` |'
- en: '| `AndroidManifest.xml` | `app/src/main/AndroidManifest.xml` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `AndroidManifest.xml` | `app/src/main/AndroidManifest.xml` |'
- en: If you have any unit tests, you need to move the source code for those to `app/src/test/java/`
    to have Gradle recognize them automatically. Functional tests belong in the `app/src/androidTest/java/`
    folder.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何单元测试，你需要将这些测试的源代码移动到 `app/src/test/java/` 以便 Gradle 自动识别。功能测试应位于 `app/src/androidTest/java/`
    文件夹中。
- en: 'The next step is to create a `settings.gradle` file in the root of the project.
    This file needs to contain only one line, and its purpose is to tell Gradle to
    include the `app` module in the build:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在项目的根目录中创建一个 `settings.gradle` 文件。此文件只需包含一行，其目的是告诉 Gradle 包含 `app` 模块：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When that is ready, you need two `build.gradle` files for a successful Gradle
    build. The first one belongs in the root of the project (on the same level as
    `settings.gradle`) and is used to define project-wide settings:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当这一切准备就绪后，你需要两个 `build.gradle` 文件才能成功进行 Gradle 构建。第一个文件位于项目的根目录（与 `settings.gradle`
    处于同一级别）并用于定义项目级别的设置：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This sets up a few properties for all modules in the project. The second `build.gradle`
    goes in the `app` folder and contains module-specific settings:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这为项目中的所有模块设置了一些属性。第二个 `build.gradle` 文件位于 `app` 文件夹中，包含模块特定的设置：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These are the absolute basics. If you have a simple Android app that does not
    depend on third-party code, this will suffice. If you have any dependencies, you
    need to migrate those to Gradle as well.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是绝对的基础。如果你有一个不依赖于第三方代码的简单 Android 应用程序，这将足够。如果你有任何依赖项，你也需要将这些依赖项迁移到 Gradle。
- en: Migrating libraries
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移库
- en: If you have any libraries in your project that contain Android-specific code,
    those also need to use Gradle in order for them to play nice with the app module.
    The same basics apply, but you need to use the Android library plugin instead
    of the Android application plugin. The details of this process are discussed in
    [Chapter 5](ch05.html "Chapter 5. Managing Multimodule Builds"), *Managing Multimodule
    Builds*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你项目中的任何库包含 Android 特定的代码，这些库也需要使用 Gradle，以便它们能与应用程序模块良好地协同工作。基本原理相同，但你需要使用
    Android 库插件而不是 Android 应用程序插件。此过程的详细信息在 [第 5 章](ch05.html "第 5 章。管理多模块构建") *管理多模块构建*
    中讨论。
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started the chapter by looking at the advantages of Gradle and why it is
    more useful than other build systems currently in use. We briefly looked at Android
    Studio and how it can help us by generating build files.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从本章开始，探讨了 Gradle 的优势以及为什么它比目前使用的其他构建系统更有用。我们简要地介绍了 Android Studio 以及它是如何通过生成构建文件来帮助我们。
- en: After the introduction, we took a look at the Gradle Wrapper, which makes maintenance
    and sharing projects a lot easier. We created a new project in Android Studio,
    and you now know how to migrate an Eclipse project to Android Studio and Gradle,
    both automatically and manually. You are also capable of building projects with
    Gradle in Android Studio, or straight from the command-line interface.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍之后，我们查看了一下Gradle Wrapper，它使得维护和共享项目变得容易得多。我们在Android Studio中创建了一个新项目，现在您已经知道如何将Eclipse项目迁移到Android
    Studio和Gradle，无论是自动还是手动。您还能够在Android Studio中使用Gradle构建项目，或者直接从命令行界面进行构建。
- en: In the next few chapters, we will look at ways to customize the build, so you
    can further automate the build process and make maintenance even easier. We will
    start by examining all the standard Gradle files, exploring basic build tasks,
    and customizing parts of the build in the next chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将探讨如何自定义构建过程，以便您可以进一步自动化构建流程，并使维护变得更加简单。我们首先将检查所有标准Gradle文件，探索基本的构建任务，并在下一章中定制构建的部分。
