["```swift\n    class JournalListCollectionViewCell: **UICollectionViewCell** { \n    ```", "```swift\n    class JournalListViewController: UIViewController, \n    **UICollectionViewDataSource****,** **UICollectionViewDelegate****,** **UICollectionViewDelegateFlowLayout** { \n    ```", "```swift\n    @IBOutlet var collectionView: **UICollectionView**! \n    ```", "```swift\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n      if search.isActive {\n        return filteredTableData.count\n      } else {\n        return SharedData.shared.numberOfJournalEntries()\n      }\n    }\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n      let journalCell = collectionView.dequeueReusableCell(  withReuseIdentifier: \"journalCell\", for: indexPath) as!   JournalListCollectionViewCell\n      let journalEntry: JournalEntry\n      if search.isActive {\n        journalEntry = filteredTableData[indexPath.row]\n      } else {\n        journalEntry = SharedData.shared.journalEntry(at:     indexPath.row)\n      }\n      if let photoData = journalEntry.photoData {\n        journalCell.photoImageView.image = UIImage(data:    photoData)\n      }\n      journalCell.dateLabel.text = journalEntry.date.formatted(\n       .dateTime.month().day().year()\n      )\n      journalCell.titleLabel.text = journalEntry.entryTitle\n      return journalCell\n    } \n    ```", "```swift\n    // MARK: - UICollectionView delete method\n    func collectionView(_ collectionView: UICollectionView, contextMenuConfigurationForItemsAt indexPaths: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration? {\n      guard let indexPath = indexPaths.first else {\n        return nil\n      }\n      let config = UIContextMenuConfiguration(\n      previewProvider: nil)\n      { (elements) -> UIMenu? in\n        let delete = UIAction(title: \"Delete\") { (action) in\n          if self.search.isActive {\n            let selectedJournalEntry = self.filteredTableData[        indexPath.item]\n            self.filteredTableData.remove(at: indexPath.item)\n            SharedData.shared.removeSelectedJournalEntry(        selectedJournalEntry)\n          } else {\n            SharedData.shared.removeJournalEntry(at:        indexPath.item)\n          }\n          SharedData.shared.saveJournalEntriesData()\n          collectionView.reloadData()\n        }\n        return UIMenu(children: [delete])\n      }\n      return config\n    } \n    ```", "```swift\n    guard let journalEntryDetailViewController = segue.destination as? JournalEntryDetailViewController, let selectedJournalEntryCell = sender as? JournalListCollectionViewCell, let indexPath = **collectionView**.indexPath(for: selectedJournalEntryCell) else {\n      fatalError(\"Could not get indexpath\")\n    } \n    ```", "```swift\n    func setupCollectionView() {\n      let flowLayout = UICollectionViewFlowLayout()\n      flowLayout.sectionInset = UIEdgeInsets(top: 10, left: 10,\n      bottom: 10, right: 10)\n      flowLayout.minimumInteritemSpacing = 0\n      flowLayout.minimumLineSpacing = 10\n      collectionView.collectionViewLayout = flowLayout\n    } \n    ```", "```swift\n    // MARK: - UICollectionViewDelegateFlowLayout\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n      let numberOfColumns: CGFloat\n      if (traitCollection.horizontalSizeClass == .compact) {\n        numberOfColumns = 1\n      } else {\n        numberOfColumns = 2\n      }\n      let viewWidth = collectionView.frame.width\n      let inset = 10.0\n      let contentWidth = viewWidth - inset * (\n      numberOfColumns + 1)\n      let cellWidth = contentWidth / numberOfColumns\n      let cellHeight = 90.0\n      return CGSize(width: cellWidth, height: cellHeight)\n    } \n    ```", "```swift\nfunc collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize { \n```", "```swift\nlet numberOfColumns: CGFloat\nif (traitCollection.horizontalSizeClass == .compact) {\n  numberOfColumns = 1\n} else {\n  numberOfColumns = 2\n} \n```", "```swift\nlet viewWidth = collectionView.frame.width \n```", "```swift\nlet inset = 10.0\nlet contentWidth = viewWidth - inset * (\nnumberOfColumns + 1) \n```", "```swift\nlet cellWidth = contentWidth / numberOfColumns \n```", "```swift\nlet cellHeight = 90.0 \n```", "```swift\nreturn CGSize(width: cellWidth, height: cellHeight)\n} \n```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      SharedData.shared.loadJournalEntriesData()\n      **setupCollectionView****()**\n      search.searchResultsUpdater = self\n      search.obscuresBackgroundDuringPresentation = false\n      search.searchBar.placeholder = \"Search titles\"\n      navigationItem.searchController = search\n    } \n    ```", "```swift\n    override func viewWillLayoutSubviews() {\n      super.viewWillLayoutSubviews()\n      collectionView.collectionViewLayout.invalidateLayout()\n    } \n    ```"]