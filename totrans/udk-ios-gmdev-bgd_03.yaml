- en: 'Chapter 3. Taking It to the Next Level: Enriching with Content'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have a textured room and some barrels around it. This is nice
    and all, but in order to give the suspension of disbelief that we want our players
    to have while playing the game, we need to add some other things to make our world
    believable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Put our current level on the grid and create an exterior area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a custom sky dome that can be used on mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about lighting and how it is used on the iOS platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Mobile Preview option to show how our level looks on an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add particles to breathe life into our world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use fog to hide objects in the distance for efficiencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that being said, let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: The outside world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Game levels take place in a large variety of different places. Inside space
    stations, epic fantasy towns, a forest, even someone's own back yard. Something
    that all of these places have in common is that we use the same basic tools in
    order to make every kind of environment that we can imagine! You'll see how we
    can easily expand on what we've done here and afterwards in [Chapter 6](ch06.html
    "Chapter 6. Bringing it All Together"), *Bringing It All Together*, we will explore
    how Geometry mode can make blocking out an area really easy, but for now, let's
    create a door.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—creating an exterior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, we have a single room that is textured and has some objects in
    it. This is great, but we can take some steps to expand this world to create something
    even better! First though, let's regroup and make sure we are all on the same
    page.
  prefs: []
  type: TYPE_NORMAL
- en: From the top menu, select **View** | **Viewport Configuration** | **2x1 Split**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many different options that you can use in determining how UDK is
    displayed and works for you, and I encourage you to take the time to figure out
    what you like and don't like. While having a **Front** viewport is fine, I like
    having a larger screen space for the **Perspective** view so I have a better idea
    of what the area I'm creating looks like. This is more my personal preference
    than anything, but it is what I will be using from now on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **Top** viewport, hold *Ctrl* + *Alt* and drag from slightly higher
    on the top left-hand side to past the bottom right-hand side of the room that
    we've created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While holding *Ctrl* + *Alt* and dragging the mouse you will notice a red rectangle
    being created. When you let go of the right mouse button all of the objects inside
    of the area will be selected. This is useful for selecting many objects at once
    inside an area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you cannot see the whole room inside the viewport, move back using the scroll
    wheel on the mouse. To move inside a viewport, you will first need to click inside
    it. To drag the screen, hold the right mouse button and drag in the direction
    you want to move it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Zoom into the top left-hand side of the room and right-click on the top vertices
    on the left-hand side. You should notice the room snapping to the grid. If you
    do not see anything happen, you are either perfectly aligned or you have the grid
    lock off. To enable it again, there is a checkbox on the right-hand side of a
    number with half of a grid on the left-hand side. Make sure that that checkbox
    is checked. Right-click inside of the **Side** viewport and right-click on the
    top vertices on the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point our room now fits to the grid. We want to build to the grid so
    that it will be easier for us to make sure that everything is seamless and we
    don't have holes inside of our geometry, which is a common problem that I see
    when people are starting out in UDK. Also note that right-clicking on a vertex
    moves the widget to that vertex. If you wanted to rotate an object by a certain
    vertex, this would be how you could do that.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating an exterior](img/image_1901_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save your level and click on **Build All**. When finished, you will notice that
    the level looks the same, though it may have shifted a bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next confirm that the grid spacing size is **16**. If the number is lower than
    **16**, press the *]* key until it is **16**. If it is higher than **16**, press
    the *[* key. You should see the grid on the level change based on what keys were
    pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click on the brush on the left-hand side in the **Top** viewport. Right-click
    to enter the **Perspective** viewport and adjust your view so that you can see
    the middle of the wall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember, you may hold the left-hand side button to look left and right, right
    to pan, and both to move forward or backward. To zoom in and out in the viewport,
    simply use the scroll wheel. Another option for moving is holding the right mouse
    button and using the *W*, *A*, *S*, and *D* keys to move around like you would
    in a first person shooter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Side** viewport, click on the button that looks like a 3D cube to go
    into **Geometry Mode**. Right-click on the top vertices on the left-hand side
    of the brush and make sure you are in translation mode by either clicking on the
    menu icon that looks like four arrows crossing or pressing the *Space bar* until
    you see the arrows for translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold the *Alt* key and drag the brush down using the red arrow in the **Top**
    viewport moving it down until you reach slightly less than half way through the
    brush.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should notice the object moving, but when you let go, you will see two brushes
    in its place. We have effectively made a copy of the previous wall for us to use
    to create a door.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating an exterior](img/image_1901_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Drag the **Top** viewport down to the bottom of our newly created brush by holding,
    right-clicking, and dragging up. Holding *Ctrl* + *Alt*, select both vertices
    at the bottom of the wall. You should see the two blue squares change to red.
    Drag those vertices up until they are close to the other end of the brush, with
    enough space existing to create a door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using *Ctrl* + *Alt* in **Geometry Mode** will only select the vertices of the
    selected objects, which can be useful for only altering small parts of a larger
    object without worrying about things.![Time for action—creating an exterior](img/image_1901_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Side** viewport hold *Ctrl* + *Alt* and select the bottom of our door
    and drag the object to be at the same level as the floor we created earlier. Next,
    select the last two vertices and drag it down so that it is higher than a person
    would go through, but with space for an overhead area for the door. I made mine
    12 squares tall (at 16 units a box).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to **Camera Mode** (click on the **Camera** icon next to the **Geometry
    Mode** icon) and press *F4* to access the properties of the door brush. Under
    the **CSR Oper** option, select **CSG_Subtract**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should notice that the door changes its color to a golden color. Now if
    you were to use **Build Geometry**, you would see an opening in our wall. This
    is because what a **Subtractive** brush does is remove anything that would have
    been added to the level, hence the name **Subtractive**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you could also create a subtractive brush by using the **Builder Brush**
    and selecting the button to the left-hand side of the **CSG_Add** button in the
    **Brush** toolbar. Both are completely valid to use, but as we are building to
    the grid now, having shapes in the correct placement is critical.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating an exterior](img/image_1901_03_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the **Perspective** viewport, left-click on the wall and select **Find in
    Content Browser**. You will notice that inside the content browser the material
    that we used before will be selected. Left-click on a side of the door. Afterwards,
    right-click on that same side and select **Select Surfaces** | **Matching Brush**.
    Notice that now all the sides of the door are highlighted. With that, right-click
    again and select **Apply Material :NEC_Walls_BSP_Brick1** to apply a material
    to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Side** viewport, click on the floor. Right-click into the **Top** viewport
    to change viewports and then use the **Translate** tool to move the floor in front
    of the door.![Time for action—creating an exterior](img/image_1901_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rebuild the map and you should see some new ground outside of the door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may notice that it takes a lot more time now in order to build the lighting.
    This is because now that the room is open, it is trying to draw the point lights
    influence inside the entire world. However, we only care about the room and the
    area immediately outside of the room which won't take nearly for a while. In UDK,
    we use something called a **Lightmass Importance Volume** to let the level know
    which areas are important and which are not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Duplicate the floor again, but in a downward direction on the **Side** viewport.
    Go into **Geometry** mode and extend each of the sides of the box until the box
    is completely filling our two rooms. Right-click on the brush and select **Convert**
    | **Convert to Volume** | **Lightmass Importance Volume**. The color of the box
    should now be a yellowish color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and rebuild the map. You should notice that it takes a lot less time now
    to build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press *Alt* + *3* to go into **Unlit** mode to make it easier for us to see
    what we are doing. Go into the **Content Browser** and pick out material to use
    for the floor of our outside area, **Material''UN_Terrain.Dirt.M_UN_Terrain_Dirt_04''**,
    which is located in the **UN_Terrain** package. Once you have left-clicked on
    the material you want to use, right-click on a selected wall in the **Perspective**
    viewport and select **Add Material : M_UN_Terrain_Dirt_04**. You could also just
    type in **Dirt** in the search bar located in the **Content Browser**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the content browser, you'll find our building's exterior **NEC_Walls.BSP.Materials.M_NEC_Walls_BSP_Ceramic2**,
    which you can find inside **NEC_Walls** or if you type in **Walls** into the **Content
    Browser**, it will show up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the material has been added, open up the service properties by going to
    **View** | **Surface Properties**. Click on the drop box under **Simple** and
    select **2.0** then click on the **Apply** button. You should notice the material
    matching the building perfectly.![Time for action—creating an exterior](img/image_1901_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go into the **Content Browser** select to find **Static Meshes** in the **Object
    Type** section and type in **Sky** to find a skydome for us to use **StaticMesh''UN_Sky.SM.Mesh.S_UN_Sky_SM_SkyDome03''**.
    Right-click on the floor you created and select **Add Static Mesh : S_UN_Sky_SM_SkyDome03''**.![Time
    for action—creating an exterior](img/image_1901_03_07.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the skydome selected, move it, so that the room we created is the center
    of the object. Rotate the skydome 180 degrees in order to have the sun face our
    door.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Skydomes are supposed to be quite large in order to create the illusion that
    it is the sky; if it was too small we would notice the sky moving along with us,
    which at the speed we're moving, would seem quite illogical.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating an exterior](img/image_1901_03_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Press *F4* with the skydome selected, to go to its properties. Within the **Static
    Mesh Actor** section, go to the **Static Mesh Component**, and go to **Lighting**
    and turn **Accept Lights** and **Cast Shadows** off by clicking on the checkbox.
    Inside **Collision**, set the **Collision Type** to **COLLIDE_NoCollision**. Now
    that we have the sky, let's add some light to the world. Press *Alt* + *4* to
    go back into **Lit** mode.![Time for action—creating an exterior](img/image_1901_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go into the **Content Browser** and find the texture being used for the
    skybox which is **Material'UN_Sky.SM.Materials.M_UN_Sky_SM_Sunset01'**. Right-click
    on it, and select **Create a Copy**. From the menu that pops up, change the **Package**
    name to something unique such as `Chapter3` then click on **OK**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating an exterior](img/image_1901_03_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The new page that has been brought up is your new package. Double-click on the
    new material that you added to enter the **Material Editor**. In the **Material
    Editor** go to the **Properties** window on the bottom until you find the **Mobile
    Allow Fog** property and uncheck it.![Time for action—creating an exterior](img/image_1901_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out of the **Material Editor** (Saying **Yes** to saving the material).
    Right-click on the new package you created and save it to the directory that contains
    your map.![Time for action—creating an exterior](img/image_1901_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into the skydome's object properties one more time by pressing *F4*. In the
    **Search** box, type in **Material** and hit the **+** symbol on the first section
    you see. With the new material we created selected inside the **Content Browser**,
    click on the little green arrow pointing to the left-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are replacing the previous skybox material with one of our own. Sadly, the
    Unreal default doesn't account for mobile users, so if a level is created without
    that checkmark done, it will look like a large single colored screen.![Time for
    action—creating an exterior](img/image_1901_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go into the **Actor Classes** panel by selecting **View** | **Browser Windows**
    | **Actor Classes**. From there, left-click on the **Directional Light** actor
    located in **Lights** | **DirectionalLights** | **DirectionalLight**.![Time for
    action—creating an exterior](img/image_1901_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Those of you who are familiar with UDK may want to use a **Dominant Directional
    Light**, but unlike the PC, iOS does not have support for it, so in order to use
    a directional light, use the simple **DirectionalLight** class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **DirectionalLight** selected, press *Space bar* until you reach the
    rotation tool, which means that the tool changes to look like circles. Rotate
    the **Directional Light** you created so that the arrow connected to it faces
    the direction the sun in your level is pointed at.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that finished, press *F4* to enter the **Object Properties** menu. Select
    the **Light Color** property inside the **Light Component** of the object and
    set the color to something to reflect the area. I used the dropper tool and selected
    a lighter color that will make the area look like a sunrise/sunset.![Time for
    action—creating an exterior](img/image_1901_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Brightness** to `1.4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: With **Brightness** it is important to not have the value too high and I recommend
    not going above `2.5`. With a PC, it is perfectly possible to go higher than `2.5`,
    but due to limitations of the iOS device, it is possible for greenings to occur
    which means that if a light is too bright, it looks greener due to the fact that
    there is more memory available in the green channel of colors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a duplicate of the light that you created and rotate it in the opposite
    direction that you created the current light. Change the **Brightness** of the
    light to `0.25` and change the color to the opposite of the color you used before.
    To do this, open up the color wheel. You will see the location of your current
    color on the wheel displayed. In the opposite X and Y direction, you will find
    what is known as the color's opposite. In general, red's opposite is green and
    blue's opposite is yellow. This is shown in the following screenshot:![Time for
    action—creating an exterior](img/image_1901_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and clicking on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar saying **Yes** when it asks you to save the package.
    It looks as shown in the following screenshot:![Time for action—creating an exterior](img/image_1901_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have our first outdoor environment in the Unreal Engine and have built
    some fundamental knowledge that will serve us well when we start production on
    our game Urban Warrior!
  prefs: []
  type: TYPE_NORMAL
- en: Previewing the mobile editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a button in the top bar that looks like a small phone with a brown
    screen that, when highlighted, says **Emulate Mobile Features**. When clicked,
    this will change your display to look closer to what it will look like on the
    iOS device, and is a better tool to use while doing lighting. In my experience,
    Unreal tends to make things either too dark or too light, so it can be a challenge
    to find something that works well on both an iOS device and PC. If you are trying
    to create a game for both systems, you may want to have two separate forms of
    lighting and test it on the actual device until you are happy with it.
  prefs: []
  type: TYPE_NORMAL
- en: Particles make everything better
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The world we live in is very complex and certain things, such as explosions
    and fires, are very hard to replicate inside a game engine, due to a number of
    factors, but mostly due to the limitations of what is possible to do at 60/30
    frames per second (fps). The best way to do this at a small cost is to use something
    called a **particle system**. Some of the many things you can do include creating
    smoke, electric sparks, falling leaves, snow, dust, and fantasy elements like
    magic spells. Particles are usually subtle in games, but it is often the little
    things that make the biggest impact on us in creating the suspension of disbelief
    that we are going for in our games.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth noting that while particles are a relatively easy way to add special
    effects on a mobile device, they can also be one of the more expensive things
    to add to your level. This can be due to a number of factors; alpha blending caused
    by sprite-based particle systems heavily taxes the GPU's fill rate, while particle
    systems with high particle counts heavily tax the CPU due to an increased count
    of objects to update every frame. There's a fine balance to be found on mobile
    in this regard, and the right balance will heavily depend on what else is going
    on in the game. Playtesting your game on your intended device is the best way
    to see just how much your game can handle things. For more information on optimizations
    and debugging your games, see [Chapter 7](ch07.html "Chapter 7. Advanced Content
    Creation for Urban Warrior"), *Advanced Content Creati on for Urban Warrior*.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding a particle system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For starters, let's place an emitter to our level of leaves falling from a tree.
    That being said, let's add a tree to our level too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Content Browser** and find **StaticMesh''GenericFoliage01.Trees.Mesh.SM_GEN_Foliage01_LargeTree01_Opt''**.
    Left-click on it and exit the **Content Browser**. Right-click on the floor and
    select **Add Actor** | **Load StaticMesh''GenericFoliage01.Trees.Mesh.SM_GEN_Foliage01_LargeTree01_Opt''**.
    After it loads in the tree, right-click on the floor and select **Add StaticMesh:
    GenericFoliage01.Trees.Mesh.SM_GEN_Foliage01_LargeTree01_Opt''**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the tree selected, press the *Space bar* until you get to the **Scaling
    Mode** (the widget's arrows are replaced by large red boxes). Click-and-drag down
    until the tree is shrunk to a manageable size.![Time for action—adding a particle
    system](img/image_1901_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the Content Browser, toggle **Particle Systems** in the **Object Type**
    and you should see **ParticleSystem'Envy_Level_Effects_2.CTF_Crisis_Energy.Falling_Leaf'**.![Time
    for action—adding a particle system](img/image_1901_03_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the object selected, go back into the **Perspective** viewport and right-click
    on the floor, load the particle system, and then add it to the level. This will
    create an icon that looks like five circles of different colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will be too large, so you will need to scale it down as discussed previously.
    I moved the emitter to the middle of the tree for leaves to fall from it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and clicking on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar, saying **Yes** when it asks you to save the package.
    You will see the resulting screen as shown in the following screenshot:![Time
    for action—adding a particle system](img/image_1901_03_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a few simple steps, we have now added a simple particle system into our
    level's world. Taking time after creating our game, adding little features like
    this will do a lot to help the game become more and more immersive. You may have
    noticed right now that the leaves have a black background to them. We will be
    fixing that when we talk about importing textures of our own in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Foggy weather
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the primary things about working on a mobile device is that it is going
    to be impossible to render a large sprawling world with large landscapes without
    some neat tricks. One of the ways that the Unreal Engine makes it possible for
    us to have large levels is the ability to create fog.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like most things that you will run into on mobile devices, this is quite a balancing
    act. Fog on mobile devices should really only be considered in extreme cases where
    large view distances would cause significant visual pop in, or where the fog distance
    is low enough that a significant amount of the level will be culled. Testing is
    really the only thing that can be used here to determine if it's worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding fog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding fog is incredibly easy to do for mobiles; however, note that you will
    not be able to see this fog in the PC version as it uses its own system for implementing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the tree we created in the previous section and move it some distance
    away from our other one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using this tree as a test of what objects that are far away will
    look like when we enable fog in our game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—adding fog](img/image_1901_03_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Open up the **World Properties** menu by selecting **View** | **World Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Mobile** section, check the **Fog Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Fog Color** to be something that will blend in with our skybox. The
    following screenshot shows the values that I used:![Time for action—adding fog](img/image_1901_03_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Fog Start** to a high number so that you don't see things fade
    away so quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that it's possible to set **Use Gamma Correction** which, when set, will
    attempt to make the lighting fit to be more like it is on the PC, but it has a
    performance cost. You'll have to evaluate if you think it is worth using it in
    your titles.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—adding fog](img/image_1901_03_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Build our game by selecting **Build** | **Build All** and clicking on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button on the main toolbar, saying **Yes** when it asks you to save the package.
    You will see the screen as shown in the following screenshot:![Time for action—adding
    fog](img/image_1901_03_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've now added fog to our game, adding to the efficiency that we will be experiencing
    at runtime as well as adding? a tool that can be used to create atmosphere in
    your game. Play around with the values to get a feel for what the changes mean
    and see what feels the most comfortable to use.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have now learned a lot of aspects that will come in handy when creating
    our game Urban Warrior. We''ve specifically learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to put our current level on the grid and create an exterior area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How skydomes are used on mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lighting and how it is used on the iOS platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Mobile Preview option to show how our level looks on an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How particles can breathe life into our world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use fog to hide objects in the distance for efficiencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have this firm basis to build upon in building levels, we will now
    learn about the Unreal Engine's built-in visual scripting language Kismet and
    how it can help us do even more amazing things to our levels!
  prefs: []
  type: TYPE_NORMAL
