["```swift\nfunc doCalc() { \n    let x = 100\n    let y = x*x\n    _ = y/x\n} \n```", "```swift\nfunc performCalculation(_ iterations: Int, tag: String) { \n    let start = CFAbsoluteTimeGetCurrent()\n    for _ in 0 ..< iterations { \n        self.doCalc()\n    }\n    let end = CFAbsoluteTimeGetCurrent() \n    print(\"time for \\(tag):\\(end-start)\")\n} \n```", "```swift\nlet concurrentQueue = DispatchQueue(label: \"cqueue.hoffman.jon\",                       attributes: .concurrent)\nlet serialQueue = DispatchQueue(label: \"squeue.hoffman.jon\") \n```", "```swift\nlet cqueue = DispatchQueue(label: \"cqueue.hoffman.jon\",              attributes:.concurrent)\nlet calculation = DoCalculations() \n```", "```swift\nlet c = {calculation.performCalculation(1000, tag: \"async1\")}\ncqueue.async(execute: c) \n```", "```swift\ncqueue.async {\n    calculation.performCalculation(1000, tag: \"async1\")\n} \n```", "```swift\ncqueue.async {\n    calculation.performCalculation(10_000_000, tag: \"async1\")\n}\ncqueue.async {\n    calculation.performCalculation(1000, tag: \"async2\")\n}\ncqueue.async {\n    calculation.performCalculation(100_000, tag: \"async3\")\n} \n```", "```swift\ntime for async2: 0.000200986862182617\ntime for async3: 0.00800204277038574\ntime for async1: 0.461670994758606 \n```", "```swift\nlet squeue = DispatchQueue(label: \"squeue.hoffman.jon\")\nlet calculation = DoCalculations() \n```", "```swift\nlet s = {calculation.performCalculation(1000, tag: \"async1\")}\nsqueue.async (execute: s) \n```", "```swift\nsqueue.async {\n    calculation.performCalculation(1000, tag: \"async2\")\n} \n```", "```swift\nsqueue.async {\n    calculation.performCalculation(100000, tag: \"async1\")\n}\nsqueue.async {\n    calculation.performCalculation(1000, tag: \"async2\")\n}\nsqueue.async {\n    calculation.performCalculation(100000, tag: \"async3\")\n} \n```", "```swift\ntime for async1: 0.00648999214172363\ntime for async2: 0.00009602308273315\ntime for async3: 0.00515800714492798 \n```", "```swift\nlet squeue = DispatchQueue(label: \"squeue.hoffman.jon\") \nsqueue.async {\n    let resizedImage = image.resize(to: rect) \n    DispatchQueue.main.async {\n        picView.image = resizedImage\n    }\n} \n```", "```swift\nlet queue2 = DispatchQueue(label: \"squeue.hoffman.jon\") \nlet delayInSeconds = 2.0\nlet pTime = DispatchTime.now() + Double(delayInSeconds * Double(NSEC_PER_SEC)) / Double(NSEC_PER_SEC) \nqueue2.asyncAfter(deadline: pTime) {\n    print(\"Time's Up\")\n} \n```", "```swift\nlet calculation = DoCalculations()\nlet blockOperation1: BlockOperation = BlockOperation.init(\n    block: {\n        calculation.performCalculation(10000000, tag: \"Operation 1\")\n    }\n)\nblockOperation1.addExecutionBlock({ \n        calculation.performCalculation(10000, tag: \"Operation 2\")\n    }\n)\nblockOperation1.addExecutionBlock({ \n        calculation.performCalculation(1000000, tag: \"Operation 3\")\n    }\n)\nlet operationQueue = OperationQueue() \noperationQueue.addOperation(blockOperation1) \n```", "```swift\ntime for Operation 2: 0.00546294450759888\ntime for Operation 3: 0.0800899863243103\ntime for Operation 1: 0.484337985515594 \n```", "```swift\noperationQueue.maxConcurrentOperationCount = 1 \n```", "```swift\nlet operationQueue = OperationQueue() \nlet calculation = DoCalculations()\noperationQueue.addOperation() {\n    calculation.performCalculation(10000000, tag: \"Operation1\")\n}\noperationQueue.addOperation() { \n    calculation.performCalculation(10000, tag: \"Operation2\")\n}\noperationQueue.addOperation() { \n    calculation.performCalculation(1000000, tag: \"Operation3\")\n} \n```", "```swift\ntime for Operation2: 0.0115870237350464\ntime for Operation3: 0.0790849924087524\ntime for Operation1: 0.520610988140106 \n```", "```swift\nvar operationQueue = OperationQueue() \noperationQueue.maxConcurrentOperationCount = 1 \n```", "```swift\ntime for Operation1: 0.418763995170593 \ntime for Operation2: 0.000427007675170898 \ntime for Operation3: 0.0441589951515198 \n```", "```swift\nclass MyOperation: Operation { \n    let iterations: Int\n    let tag: String\n    init(iterations: Int, tag: String) { \n        self.iterations = iterations\n        self.tag = tag\n    }\n    override func main() { \n          performCalculation()\n    }\n    func performCalculation() {\n        let start = CFAbsoluteTimeGetCurrent()\n        for _ in 0 ..< iterations {\n            self.doCalc()\n    }\n        let end = CFAbsoluteTimeGetCurrent() \n        print(\"time for \\(tag):\\(end-start)\")\n    }\n    func doCalc() {\n        let x=100\n        let y = x*x\n        _ = y/x\n    }\n} \n```", "```swift\nlet operationQueue = NSOperationQueue() \n    operationQueue.addOperation( MyOperation(iterations: 10000000, tag:\"Operation 1\")\n)\noperationQueue.addOperation( \n    MyOperation(iterations: 10000, tag:\"Operation 2\")\n)\noperationQueue.addOperation(\n    MyOperation(iterations: 1000000, tag:\"Operation 3\")\n) \n```", "```swift\ntime for Operation 2: 0.00187397003173828\ntime for Operation 3: 0.104826986789703\ntime for Operation 1: 0.866684019565582 \n```"]