["```kt\nusing UnityEngine;\nusing NotificationSamples; /* GameNotificationManager */\npublic class NotificationsController : MonoBehaviour\n{\n    private GameNotificationsManager notificationsManager;\n    // Start is called before the first frame update\n    private void Start()\n    {\n        /* Get access to the notifications manager */\n        notificationsManager =\n            GetComponent<GameNotificationsManager>();\n        /* Create a channel to use (required for Android)\n        */\n        var channel = new\n            GameNotificationChannel(\"channel0\",\n                \"Default Channel\",\n                    \"Generic Notifications\");\n        /* Initialize the manager so it can be used. */\n        notificationsManager.Initialize(channel);\n    }\n}\n```", "```kt\n    public void ShowNotification(string title, string body,\n    DateTime deliveryTime)\n    {\n        IGameNotification notification =\n            notificationsManager.CreateNotification();\n        if (notification != null)\n        {\n            notification.Title = title;\n            notification.Body = body;\n            notification.DeliveryTime = deliveryTime;\n        notificationsManager.ScheduleNotification(\n            notification);\n        }\n    }\n    ```", "```kt\n    using System; /* DateTime */\n    ```", "```kt\n    // Start is called before the first frame update\n    private void Start()\n    {\n        /* Get access to the notifications manager */\n        notificationsManager =\n            GetComponent<GameNotificationsManager>();\n        /* Create a channel to use for it (required for\n           Android) */\n        var channel = new\n            GameNotificationChannel(\"channel0\",\n                \"Default Channel\",\n                    \"Generic Notifications\");\n        /* Initialize the manager so it can be used. */\n        notificationsManager.Initialize(channel);\n        /* Create sample notification to happen in 5\n           seconds */\n        var notifText = \"Come back and try to beat your\n            score!!\";\n        var notifTime = DateTime.Now.AddSeconds(5);\n    ShowNotification(\"Endless Runner\", notifText,\n            notifTime);\n    }\n    ```", "```kt\n        // Start is called before the first frame update\n        private void Start()\n        {\n            /* Get access to the notifications manager */\n            notificationsManager =\n            GetComponent<GameNotificationsManager>();\n            /* Create a channel to use (required for\n               Android) */\n            var channel = new\n                GameNotificationChannel(\"channel0\",\n                    \"Default Channel\",\n                        \"Generic Notifications\");\n            /* Initialize the manager so it can be used.\n            */\n            notificationsManager.Initialize(channel);\n            /* Create sample notification to happen in 5\n               seconds */\n            var notifText = \"Come back and try to beat\n                your score!!\";\n            var notifTime = DateTime.Now.AddDays(1);\n            ShowNotification(\"Endless Runner\", notifText,\n                notifTime);\n        }\n    ```", "```kt\n    private static bool addedReminder = false;\n        // Start is called before the first frame update\n        private void Start()\n        {\n            /* Get access to the notifications manager */\n            notificationsManager =\n            GetComponent<GameNotificationsManager>();\n            /* Create a channel to use (required for\n               Android) */\n            var channel = new\n                GameNotificationChannel(\"channel0\",\n                    \"Default Channel\",\n                        \"Generic Notifications\");\n            /* Initialize the manager so it can be used.\n            */\n            notificationsManager.Initialize(channel);\n            /* Check if the notification hasn't been added\n               yet */\n            if (!addedReminder)\n            {\n                /* Create sample notification to happen\n                   later */\n                var notifText = \"Come back and try to beat\n                    your score!!\";\n                var notifTime = DateTime.Now.AddDays(1);\n                ShowNotification(\"Endless Runner\",\n                    notifText, notifTime);\n                /* Cannot be added again until the user\n                   quits game */\n                addedReminder = true;\n            }\n        }\n    ```", "```kt\n    public void ShowNotification(string title, string body, DateTime deliveryTime)\n    {\n        IGameNotification notification =\n        notificationsManager.CreateNotification();\n        if (notification != null)\n        {\n            notification.Title = title;\n            notification.Body = body;\n            notification.DeliveryTime = deliveryTime;\n            notification.SmallIcon = \"icon_0\";\n            notification.LargeIcon = \"icon_1\";\n            notificationsManager.ScheduleNotification(\n                notification);\n        }\n    }\n    ```", "```kt\nnotification.BadgeNumber = 5;\n```", "```kt\n    public int? ShowNotification(string title, string body, DateTime deliveryTime)\n    {\n        IGameNotification notification =\n        notificationsManager.CreateNotification();\n        if (notification != null)\n        {\n            notification.Title = title;\n            notification.Body = body;\n            notification.DeliveryTime = deliveryTime;\n            notification.SmallIcon = \"icon_0\";\n            notification.LargeIcon = \"icon_1\";\n            var pendingNotif =\n                notificationsManager.ScheduleNotification(\n                    notification);\n            return pendingNotif.Notification.Id;\n        }\n        return null;\n    }\n    ```", "```kt\n    // Start is called before the first frame update\n    private void Start()\n    {\n        /* Get access to the notifications manager */\n        notificationsManager =\n        GetComponent<GameNotificationsManager>();\n        /* Create a channel to use (required for Android)\n        */\n        var channel = new\n            GameNotificationChannel(\"channel0\",\n                \"Default Channel\",\n                    \"Generic Notifications\");\n        /* Initialize the manager so it can be used. */\n        notificationsManager.Initialize(channel);\n        /* Check if the notification hasn't been added yet\n        */\n        if (!addedReminder)\n        {\n            /* Create sample notification to happen in 5\n               seconds */\n            var notifText = \"Come back and try to beat\n                your score!!\";\n            // After 5 seconds\n            var notifTime = DateTime.Now.AddSeconds(5);\n            // After 1 day\n            //notifTime = DateTime.Now.AddDays(1);\n            ShowNotification(\"Endless Runner\", notifText,\n                notifTime);\n            // Example of canceling a notification\n            var id = ShowNotification(\"Test\", \"Should Not\n                Happen\", notifTime);\n            if(id.HasValue)\n            {\n                notificationsManager.CancelNotification(\n                    id.Value);\n            }\n            /* Cannot be added again until the user quits\n               game */\n            addedReminder = true;\n        }\n    }\n    ```"]