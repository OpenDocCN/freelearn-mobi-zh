["```kt\ndependencies {\n    // https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template\n implementation 'org.springframework.android:spring-android-rest-template:2.0.0.M3' // https://mvnrepository.com/artifact/org.springframework.android/spring-android-core\n implementation 'org.springframework.android:spring-android-core:2.0.0.M3'\n}\n\nrepositories {\n    maven {\n        url 'https://repo.spring.io/libs-snapshot'\n    }\n}\n```", "```kt\n<dependencies>\n    <!-- https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template -->\n <dependency>\n <groupId>org.springframework.android</groupId>\n <artifactId>spring-android-rest-template</artifactId>\n <version>2.0.0.BUILD-SNAPSHOT</version>\n </dependency> <!-- https://mvnrepository.com/artifact/org.springframework.android/spring-android-core -->\n <dependency>\n         <groupId>org.springframework.android</groupId>\n         <artifactId>spring-android-core</artifactId>\n         <version>1.0.1.RELEASE</version>\n     </dependency>\n</dependencies>\n<repositories>\n    <repository>\n        <id>spring-snapshots</id>\n        <name>Spring Snapshots</name>\n        <url>https://repo.spring.io/libs-snapshot</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```", "```kt\nRestTemplate();\nRestTemplate(boolean includeDefaultConverters);\nRestTemplate(ClientHttpRequestFactory requestFactory);\nRestTemplate(boolean includeDefaultConverters, ClientHttpRequestFactory requestFactory);\n```", "```kt\n@Throws(RestClientException::class)\nfun <T> getForObject(url: String, responseType: Class<T>, vararg urlVariables: Any): T\n\n@Throws(RestClientException::class)\nfun <T> getForObject(url: String, responseType: Class<T>, urlVariables: Map<String, *>): T\n\n@Throws(RestClientException::class)\nfun <T> getForObject(url: URI, responseType: Class<T>): T\n\nfun <T> getForEntity(url: String, responseType: Class<T>, vararg urlVariables: Any): ResponseEntity<T>\n\nfun <T> getForEntity(url: String, responseType: Class<T>, urlVariables: Map<String, *>): ResponseEntity<T>\n\n@Throws(RestClientException::class)\nfun <T> getForEntity(url: URI, responseType: Class<T>): ResponseEntity<T>\n```", "```kt\n\nval restTemplate = RestTemplate()\n\nval baseUrl: String ?= \"YOUR_URL\" // API URL as String\nval response = restTemplate.getForEntity(baseUrl, String::class.java)\n\nval uri = URI(baseUrl) // API URL as URL format\nval responseURI = restTemplate.getForEntity(uri, String::class.java)Auth Module\n```", "```kt\n@Throws(RestClientException::class)\nfun postForLocation(url: String, request: Any, vararg urlVariables: Any): URI\n\nfun postForLocation(url: String, request: Any, urlVariables: Map<String, *>): URI\n\n@Throws(RestClientException::class)\nfun postForLocation(url: URI, request: Any): URI\n\nfun <T> postForObject(url: String, request: Any, responseType: Class<T>, vararg uriVariables: Any): T\n\nfun <T> postForObject(url: String, request: Any, responseType: Class<T>, uriVariables: Map<String, *>): T\n\n@Throws(RestClientException::class)\nfun <T> postForObject(url: URI, request: Any, responseType: Class<T>): T\n\nfun <T> postForEntity(url: String, request: Any, responseType: Class<T>, vararg uriVariables: Any): ResponseEntity<T>\n\n@Throws(RestClientException::class)\nfun <T> postForEntity(url: String, request: Any, responseType: Class<T>, uriVariables: Map<String, *>): ResponseEntity<T>\n\n@Throws(RestClientException::class)\nfun <T> postForEntity(url: URI, request: Any, responseType: Class<T>): ResponseEntity<T>\n```", "```kt\n/** POST **/\n\nval restTemplate = RestTemplate()\n\nval baseUrl: String ?= \"YOUR_URL\"\nval uri = URI(baseUrl)\nval body = \"The Body\"\n\nval response = restTemplate.postForEntity(baseUrl, body, String::class.java)\n\nval request = HttpEntity(body)\nval responseExchange = restTemplate.exchange(baseUrl, HttpMethod.POST, request, String::class.java)\n\nval responseURI = restTemplate.postForEntity(uri, body, String::class.java)\nval responseExchangeURI = restTemplate.exchange(uri, HttpMethod.POST, request, String::class.java)\n```", "```kt\nHere are the common functions -\n@Throws(RestClientException::class)\nfun put(url: String, request: Any, vararg urlVariables: Any)\n\n@Throws(RestClientException::class)\nfun put(url: String, request: Any, urlVariables: Map<String, *>)\n\n@Throws(RestClientException::class)\nfun put(url: String, request: Any, urlVariables: Map<String, *>)\n```", "```kt\nval baseUrl: String ?= \"YOUR_URL\"\nval restTemplate = RestTemplate()\nval uri = URI(baseUrl)\n\nval body = \"The Body\"\n\nrestTemplate.put(baseUrl, body)\nrestTemplate.put(uri, body)\n```", "```kt\n@Throws(RestClientException::class)\nfun delete(url: String, vararg urlVariables: Any)\n\n@Throws(RestClientException::class)\nfun delete(url: String, urlVariables: Map<String, *>)\n\n@Throws(RestClientException::class)\nfun delete(url: URI) \n```", "```kt\nval baseUrl: String ?= \"YOUR_URL\"\nval restTemplate = RestTemplate()\nval uri = URI(baseUrl)\n\nrestTemplate.delete(baseUrl)\nrestTemplate.delete(uri)\n```", "```kt\n@Throws(RestClientException::class)\nfun optionsForAllow(url: String, vararg urlVariables: Any): Set<HttpMethod>\n\n@Throws(RestClientException::class)\nfun optionsForAllow(url: String, urlVariables: Map<String, *>): Set<HttpMethod>\n\n@Throws(RestClientException::class)\nfun optionsForAllow(url: URI): Set<HttpMethod>\n```", "```kt\nval baseUrl: String ?= \"YOUR_URL\"\nval restTemplate = RestTemplate()\nval allowHeaders = restTemplate.optionsForAllow(baseUrl)\n\nval uri = URI(baseUrl)\nval allowHeadersURI = restTemplate.optionsForAllow(uri)\n```", "```kt\n@Throws(RestClientException::class)\nfun headForHeaders(url: String, vararg urlVariables: Any): HttpHeaders\n\n@Throws(RestClientException::class)\nfun headForHeaders(url: String, urlVariables: Map<String, *>): HttpHeaders\n\n@Throws(RestClientException::class)\nfun headForHeaders(url: URI): HttpHeaders\n```", "```kt\n<dependency>\n    <groupId>com.squareup.retrofit2</groupId>\n    <artifactId>retrofit</artifactId>\n    <version>2.4.0</version>\n</dependency>\n```", "```kt\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.3.0'\ncompile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'\n\n```", "```kt\n@GET(\"group/{id}/users\") Call<List<Users>> groupList(@Path(\"id\") int id);\n```", "```kt\n@POST(\"user/repos\")\nfun createRepo(@Body repo:Repository, \n               @Header(\"Authorization\") accessToken: String,\n               @Header(\"Accept\") apiVersionSpec: String,\n               @Header(\"Content-Type\") contentType: String): Call<Repository>\n```", "```kt\n@PUT(\"gists/{id}\")\nfun updateGist(@Path(\"id\") id: String, \n               @Body gist: Gist): Call<ResponseBody>\n```", "```kt\n@DELETE(\"repos/{owner}/{repo}\")\n    fun deleteRepo(@Header(\"Authorization\") accessToken: String,\n @Header(\"Accept\") apiVersionSpec: String,\n @Path(\"repo\") repo: String,\n @Path(\"owner\") owner: String): Call<DeleteRepos>\n```", "```kt\n// example one\n@GET(\"user\")\nCall<User> getUser(@Header(\"Authorization\") String authorization)\n\n// example two\n@Headers(\"Accept: application/vnd.github.v3.full+json\", \"User-Agent: Spring for Android\")\n@GET(\"users/{username}\")\nfun getUser(@Path(\"username\") username: String): Call<Users>\n\n```", "```kt\nbuildscript {\n ext.kotlin_version = '1.3.10'    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.2.1'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n```", "```kt\n    implementation 'com.squareup.retrofit2:retrofit:2.4.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'\n\n    implementation 'com.squareup.retrofit2:retrofit-converters:2.5.0'\n    implementation 'com.squareup.retrofit2:retrofit-adapters:2.5.0'\n    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'\n    implementation 'com.google.code.gson:gson:2.8.5'\n```", "```kt\nclass GitHubUserModel {\n val name: String? = null }\n```", "```kt\ninterface GithubService {\n @GET(\"/users/{user}/repos\")\n    fun reposOfUser(@Path(\"user\") user: String): Call<List<GitHubUserModel>>\n}\n```", "```kt\nclass GithubServiceImpl{\n   fun getGithubServiceFactory(): GithubService {\n        val retrofit = Retrofit.Builder()\n                .baseUrl(\"https://api.github.com/\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n        return retrofit.create(GithubService::class.java)\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val githubService: GithubService = GithubServiceImpl().getGithubServiceFactory()\n\n        val call: Call<List<GitHubUserModel>> = githubService.reposOfUser(\"sunnat629\")\n        call.enqueue(object: Callback<List<GitHubUserModel>>{\n            override fun onFailure(call: Call<List<GitHubUserModel>>, t: Throwable) {\n                Log.wtf(\"PACKTPUB\", t.message)\n            }\n\n            override fun onResponse(call: Call<List<GitHubUserModel>>, response: Response<List<GitHubUserModel>>) {\n                val listItems = arrayOfNulls<String>( response.body()!!.size)\n                for (i in 0 until response.body()!!.size) {\n                    val recipe = response.body()!![i]\n                    listItems[i] = recipe.name\n                }\n                val adapter = ArrayAdapter<String>(this@MainActivity, android.R.layout.simple_list_item_1, listItems)\n                displayList.adapter = adapter\n            }\n        })\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <ListView\n        android:id=\"@+id/displayList\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nval listItems = arrayOfNulls<String>( response.body()!!.size)\nfor (i in 0 until response.body()!!.size) {\n    val recipe = response.body()!![i]\n    listItems[i] = recipe.name\n}\nval adapter = ArrayAdapter<String>(this@MainActivity, android.R.layout.simple_list_item_1, listItems)\ndisplayList.adapter = adapter\n```"]