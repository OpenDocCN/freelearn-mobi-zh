- en: '*Chapter 18*: Displaying Data in a Static Table View'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've come a long way, and your app has data in all its screens except for
    the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll configure the `RestaurantDetailViewController` class
    to manage the views in the `viewDidLoad()` to populate the table view when the
    `RestaurantItem` instance from the `RestaurantListViewController` and `MapViewController`
    instances to the `RestaurantDetailViewController` instance, which will display
    the data from that `RestaurantItem` instance on the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to make table views with
    static cells display data, and how to create a custom map image. By doing so,
    you'll be able to implement these features in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up outlets for the `RestaurantDetailViewController` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in the static table view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data to the `RestaurantDetailViewController` instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter18` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3l2h6xq](https://bit.ly/3l2h6xq)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating outlets in the `RestaurantDetailViewController` class
    to enable it to manage the views in the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up outlets for the RestaurantDetailViewController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your app has data in all its screens except for the **Restaurant Detail** screen.
    This screen is accessed either by tapping a restaurant in the **Restaurant List**
    screen or by tapping the restaurant annotation view''s callout bubble button in
    the **Map** screen. If you build and run your app, tapping a restaurant in the
    **Restaurant List** screen shows the placeholder **Restaurant Detail** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1: iOS Simulator showing placeholder Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.1: iOS Simulator showing placeholder Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tapping the button in the restaurant annotation view''s callout bubble in the
    **Map** screen shows the actual **Restaurant Detail** screen, but it does not
    contain any restaurant data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.2: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.2: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this, let''s set up the outlets for the `RestaurantDetailViewController`
    class. Click the `RestaurantDetailViewController` file in the Project navigator.
    Add the following outlets after the class declaration and before the `selectedRestaurant`
    property declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The outlets that you just set up are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`heartButton` is the outlet for the heart-shaped button in the navigation bar.
    You won''t be using it in this book, but it''s something that you can work on
    later on your own.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nameLabel` is the outlet for the label that displays the name of the restaurant
    in the first cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cuisineLabel` is the outlet for the label that displays the cuisines offered
    by the restaurant in the first cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`headerAddressLabel` is the outlet for the label that displays the address
    of the restaurant in the first cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tableDetailsLabel` is the outlet for the label that displays the table details
    of the restaurant in the second cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overallRatingLabel` is the outlet for the label that displays the overall
    rating for the restaurant in the third cell. You will calculate and set this value
    in [*Chapter 21*](B17469_21_Final_VK_ePub.xhtml#_idTextAnchor362), *Understanding
    Core Data*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addressLabel` is the outlet for the label that displays the address of the
    restaurant in the eighth cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locationMapImageView` is the outlet for the image view that displays a location
    map for the restaurant in the ninth cell. You will write methods to generate this
    map later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you''ve created the outlets, you''ll connect them to the UI elements
    in the `RestaurantDetail` storyboard file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand the `RestaurantDetail` folder in the Project navigator. Click the `RestaurantDetail`
    storyboard file. Then, click the `RestaurantDetailViewController` class:![Figure
    18.3: Identity inspector settings for Restaurant Detail View Controller'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.3: Identity inspector settings for Restaurant Detail View Controller'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that the name of the view controller will change to **Restaurant Detail
    View Controller** once the class is set. Unlike the table view in the **Location
    View Controller Scene**, the table view in the **Restaurant Detail View Controller
    Scene** has static cells, meaning the number of cells is not dynamically generated
    based on data from a model object. As can be seen in the document outline, there
    are nine cells, and each cell has already been configured with the appropriate
    view objects. Clicking on each table view cell in the document outline will display
    that cell in the Editor area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button. You''ll see all the outlets you added
    earlier in the `RestaurantDetailViewController` class:![Figure 18.4: Connections
    inspector showing outlets for RestaurantDetailViewController class'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.4: Connections inspector showing outlets for RestaurantDetailViewController
    class'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click and drag from the `heartButton` outlet to the heart in the navigation
    bar:![Figure 18.5: Connections inspector showing heartButton outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.5: Connections inspector showing heartButton outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `heartButton` outlet is now connected. Note that the description of the
    view will change to **Heart Button** in the document outline:![Figure 18.6: Document
    outline showing Heart Button view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.6: Document outline showing Heart Button view'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the last `locationMapImageView` outlet to the **Image View** in the
    last cell to connect them. Note that the name will change from **Image View**
    to **Location Map Image View** in the document outline:![Figure 18.7: Connections
    inspector showing locationMapImageView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.7: Connections inspector showing locationMapImageView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the eighth `addressLabel` outlet to the **Label** in the eighth cell
    to connect them. Note that the name will change from **Label** to **Address Label**
    in the document outline:![Figure 18.8: Connections inspector showing addressLabel
    outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.8: Connections inspector showing addressLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the first `cuisineLabel` outlet to the second **Label** in the first
    cell to connect them. Note that the name will change from **Label** to **Cuisine
    Label** in the document outline:![Figure 18.9: Connections inspector showing cuisineLabel
    outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.9: Connections inspector showing cuisineLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click and drag from the `headerAddressLabel` outlet to the third **Label**
    in the first cell to connect them. Note that the name will change from **Label**
    to **Header Address Label** in the document outline:![Figure 18.10: Connections
    inspector showing headerAddressLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.10: Connections inspector showing headerAddressLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click and drag from the `nameLabel` outlet to the first **Label** in the first
    cell to connect them. Note that the name will change from **Label** to **Name
    Label** in the document outline:![Figure 18.11: Connections inspector showing
    nameLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.11: Connections inspector showing nameLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the third `overallRatingLabel` outlet to the **Label** with the big
    black **0.0** inside it to connect them. Note that the name will change from **Label**
    to **Overall Rating Label** in the document outline:![Figure 18.12: Connections
    inspector showing overallRatingLabel outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.12: Connections inspector showing overallRatingLabel outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the second `tableDetailsLabel` outlet to the **Label** just above
    the three red buttons in the second cell to connect them. Note that the name will
    change from **Label** to **Table Details Label** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.13: Connections inspector showing tableDetailsLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.13_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.13: Connections inspector showing tableDetailsLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: All the outlets for the `RestaurantDetailViewController` class have now been
    set up. In the next section, you'll modify the `RestaurantDetailViewController`
    class to receive restaurant data from the `RestaurantListViewController` and `MapViewController`
    instances and display it in the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in the static table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have successfully connected all the outlets in the `RestaurantDetailViewController`
    class to the user interface elements in the `UITableViewDataSource` protocol to
    populate the outlets. Instead, you will write custom methods to do so. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `RestaurantDetailViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add code to import the `MapKit` framework after the existing `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is required since you will be using the `MapKit` framework's properties
    and methods to generate an image of a map for the image view in the last cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add a private extension containing code to set the labels in the `setupLabels()`
    method is quite straightforward; it gets values from a `RestaurantItem` instance
    and puts them into the outlets in the `RestaurantDetailViewController` instance
    except for `tableDetailsLabel`, which is just assigned a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the last cell, you will display an image of a map. To do this, you''ll generate
    an image from a map region and set the `locationMapImageLabel` outlet to display
    that image. This image will also display the same custom annotation image you
    used in the `setupLabels()` and before the last curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method creates a `CLLocationCoordinate2D` instance using the `selectedRestaurant`
    property's `lat` and `long` properties and assigns it to `location`. Then, it
    calls the `takeSnapshot(with:)` method, passing `location` as a parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll see an error since `takeSnapShot(with:)` hasn''t been implemented yet,
    so add the following code after the `createMap()` function to implement it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A full description of this method is beyond the scope of this book, but here's
    a simple explanation of what it does. Given a location, it takes a snapshot of
    the map at that location, adds the custom annotation you used earlier in the `locationMapImageView`
    outlet in the `RestaurantDetailViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have written all the methods that are required for the `RestaurantDetailViewController`
    class to display the desired `RestaurantItem` instance details in the `private`
    extension before the `setupLabels()` method definition, add an `initialize()`
    method that calls the `setupLabels()` and `createMap()` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `viewDidLoad()` method to call the `initialize()` method when the
    `RestaurantDetailViewController` instance loads its view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Recall that in [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223),
    *Getting Started with MapKit*, you''ve already configured the `MapViewController`
    class to pass a `RestaurantItem` instance to the `RestaurantDetailViewController`
    instance. Build and run your app and go to the **Map** screen. Click on one of
    the restaurants to display a callout bubble. Click the button in the callout bubble,
    and you should see the restaurant details appear in the **Restaurant Detail**
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.14: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.14_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.14: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down, you will see the map image in the last cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.15: iOS Simulator showing map in Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.15_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.15: iOS Simulator showing map in Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have finished modifying the `RestaurantDetailViewController` class, but
    you still need to pass the selected `RestaurantItem` instance from the `RestaurantListViewController`
    instance to the `RestaurantDetailViewController` instance. You'll do this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to the RestaurantDetailViewController instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have added and connected the outlets for the `RestaurantDetailViewController`
    class. You''ve also added code to this class to get restaurant data from a `RestaurantItem`
    instance and use it to populate its outlets. The last thing you need to do is
    pass the selected `RestaurantItem` instance from the `RestaurantListViewController`
    instance to the `RestaurantDetailViewController` instance. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `RestaurantListViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after `viewDidLoad()`: to call a `showRestaurantDetail(segue:)`
    method if the segue identifier is `showDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Recall that you added a segue between the `RestaurantListViewController` instance
    transitions to another view controller, the segue identifier is checked. If the
    segue identifier is `showDetail`, then the `showRestaurantDetail` method is executed.
    Only the segue between the `showDetail` identifier, so the destination view controller
    must be the `RestaurantDetailViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll see an error because the `showRestaurantDetail(segue:)` method hasn''t
    been implemented. This method will pass the `RestaurantItem` instance from the
    `RestaurantListViewController` instance to the `RestaurantDetailViewController`
    instance. Add it after the opening curly brace of the `private` extension in the
    `RestaurantListViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method first checks if the segue destination is an instance of `RestaurantDetailViewController`,
    and gets the index of the collection view cell that was tapped. Then, `manager`
    returns the `RestaurantItem` instance stored at that index, which is assigned
    to `selectedRestaurant`. The `RestaurantDetailViewController` instance's `selectedRestaurant`
    property is then set to this instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s take a look at the `Main` storyboard file. It is currently connected
    to a placeholder `Main` storyboard file to remove the placeholder and connect
    the `RestaurantDetail` storyboard file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file and locate the `restaurantCell` in the document
    outline. Then, *Ctrl + Drag* from `restaurantCell` to the `RestaurantDetail` storyboard
    reference (you added this storyboard reference in [*Chapter 16*](B17469_16_Final_VK_ePub.xhtml#_idTextAnchor223)*,
    Getting Started with MapKit*) as shown:![Figure 18.16: Editor area showing RestaurantDetail
    storyboard reference'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.16: Editor area showing RestaurantDetail storyboard reference'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **Show** from the popup menu that appears:![Figure 18.17: Segue pop-up
    menu with Show selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.17: Segue pop-up menu with Show selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Remove the placeholder scenes from the storyboard by selecting them and pressing
    *Delete* on your keyboard, as they are no longer needed:![Figure 18.18: Editor
    area showing placeholder scenes to be removed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.18_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.18: Editor area showing placeholder scenes to be removed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will set the segue identifier to `showDetail`. As discussed earlier, this
    will set the `RestaurantDetailViewController` instance''s `selectedRestaurant`
    property. Select the segue you just added:![Figure 18.19: Segue between Restaurant
    List View Controller Scene and RestaurantDetail storyboard reference'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_18.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 18.19: Segue between Restaurant List View Controller Scene and RestaurantDetail
    storyboard reference'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Under `showDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.20: Attributes inspector setting for showDetail segue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.20_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.20: Attributes inspector setting for showDetail segue'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project. Select a city and a type of cuisine. Click on one
    of the restaurants in the **Restaurant List** screen. The details of that restaurant
    will appear in the **Restaurant Detail** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.21: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_18.21_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 18.21: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: The implementation for the **Restaurant Detail** screen is now complete. When
    you select a restaurant in the **Map** or **Restaurant List** screens, the details
    of that restaurant will be displayed in the **Restaurant Detail** screen. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you connected outlets in the `RestaurantDetailViewController`
    class to the `viewDidLoad()` to populate the table view when the `RestaurantItem`
    instance from the `RestaurantListViewController` and `MapViewController` instances
    to the `RestaurantDetailViewController` instance, enabling it to display data
    from that `RestaurantItem` instance on the **Restaurant Detail** screen.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, you have learned how to make table views with static cells display
    data, as well as how to create a custom map image, which you can now implement
    in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! All the screens in your app now display data. However, if you
    look at the **Restaurant Detail** screen, there are no ratings, reviews, or photos
    for the restaurant, and no way to add them. You will implement this starting with
    the next chapter, where you'll create a custom control that allows you to add
    star ratings for a restaurant for the **Restaurant Detail** and **Review Form**
    screens.
  prefs: []
  type: TYPE_NORMAL
