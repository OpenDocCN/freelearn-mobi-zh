["```kt\n    //Retrofit\n    ```", "```kt\n    implementation 'com.squareup.retrofit2:retrofit:2.x.x'\n    ```", "```kt\n    implementation 'com.squareup.retrofit2:converter-gson:2.x.x'\n    ```", "```kt\n    //Coil you can also use Glide in this case\n    ```", "```kt\n    implementation 'com.google.accompanist:accompanist-coil:0.x.x'\n    ```", "```kt\n    //Paging 3.0\n    ```", "```kt\n    implementation 'Androidx.Paging:Paging-compose:1.x.x'\n    ```", "```kt\n    <uses-permission Android:name=\"Android.permission.INTERNET\"/>\n    ```", "```kt\n    data class NewsArticle(\n    ```", "```kt\n        val author: String,\n    ```", "```kt\n        val content: String,val title: String ...)\n    ```", "```kt\n    data class NewsArticleResponse(\n    ```", "```kt\n        val articles: List<NewsArticle>,\n    ```", "```kt\n        val status: String,\n    ```", "```kt\n        val totalResults: Int\n    ```", "```kt\n    )\n    ```", "```kt\n    interface NewsApiService{\n    ```", "```kt\n        @GET(\"everything?q=apple&sortBy=popularity&apiKey=        ${YOURAPIKEY}&pageSize=20\")\n    ```", "```kt\n        suspend fun getNews(\n    ```", "```kt\n            @Query(\"page\") page: Int\n    ```", "```kt\n        ): NewsArticleResponse\n    ```", "```kt\n    }\n    ```", "```kt\n    class NewsArticlePagingSource(\n    ```", "```kt\n        private val newsApiService: NewsApiService,\n    ```", "```kt\n    ): PagingSource<Int, NewsArticle>() {\n    ```", "```kt\n    . . .\n    ```", "```kt\n    }\n    ```", "```kt\n    class NewsArticlePagingSource(\n    ```", "```kt\n        private val newsApiService: NewsApiService,\n    ```", "```kt\n    ) : PagingSource<Int, NewsArticle>() {\n    ```", "```kt\n        override fun getRefreshKey(state: PagingState<Int,\n    ```", "```kt\n        NewsArticle>): Int? {\n    ```", "```kt\n            return state.anchorPosition?.let {\n    ```", "```kt\n            anchorPosition ->\n    ```", "```kt\n                state.closestPageToPosition(\n    ```", "```kt\n                    anchorPosition)?.prevKey?.plus(1)\n    ```", "```kt\n                    ?: state.closestPageToPosition(\n    ```", "```kt\n                        anchorPosition)?.nextKey?.minus(1)\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n        override suspend fun load(params:\n    ```", "```kt\n        LoadParams<Int>): LoadResult<Int, NewsArticle> {\n    ```", "```kt\n            return try {\n    ```", "```kt\n                val page = params.key ?: 1\n    ```", "```kt\n                val response = newsApiService.getNews(\n    ```", "```kt\n                    page = page)\n    ```", "```kt\n                LoadResult.Page(\n    ```", "```kt\n                    data = response.articles,\n    ```", "```kt\n                    prevKey = if (page == 1) null else\n    ```", "```kt\n                        page.minus(1),\n    ```", "```kt\n                    nextKey = if\n    ```", "```kt\n                        (response.articles.isEmpty()) null\n    ```", "```kt\n                            else page.plus(1),\n    ```", "```kt\n                )\n    ```", "```kt\n            } catch (e: Exception) {\n    ```", "```kt\n                LoadResult.Error(e)\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    class NewsArticleRepository @Inject constructor(\n    ```", "```kt\n        private val newsApiService: NewsApiService\n    ```", "```kt\n    ) {\n    ```", "```kt\n        fun getNewsArticle() = Pager(\n    ```", "```kt\n            config = PagingConfig(\n    ```", "```kt\n                pageSize = 20,\n    ```", "```kt\n            ),\n    ```", "```kt\n            PagingSourceFactory = {\n    ```", "```kt\n                NewsArticlePagingSource(newsApiService)\n    ```", "```kt\n            }\n    ```", "```kt\n        ).flow\n    ```", "```kt\n    }\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    class RetrofitModule{\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Provides\n    ```", "```kt\n        fun provideRetrofitInstance(): NewsApiService =\n    ```", "```kt\n        Retrofit.Builder()\n    ```", "```kt\n            .baseUrl(BASE_URL)\n    ```", "```kt\n            .addConverterFactory(\n    ```", "```kt\n                GsonConverterFactory.create())\n    ```", "```kt\n            .build()\n    ```", "```kt\n            .create(NewsApiService::class.java)\n    ```", "```kt\n    }\n    ```", "```kt\n@HiltViewModel\nclass NewsViewModel @Inject constructor(\n    private val repository: NewsArticleRepository,\n) : ViewModel() {\n    fun getNewsArticle():\n        Flow<PagingData<NewsArticle>> =\n            repository.getNewsArticle().cachedIn(\n                viewModelScope)\n}\n```", "```kt\n  class NewsArticleRepository @Inject constructor(\n      private val newsApiService: NewsApiService\n) { . . .\n```", "```kt\n    lifecycleScope.launch {\n    ```", "```kt\n        thePagingAdapter.loadStateFlow.collectLatest {\n    ```", "```kt\n            loadStates ->\n    ```", "```kt\n        progressBar.isVisible = loadStates.refresh is\n    ```", "```kt\n            LoadState.Loading\n    ```", "```kt\n        retry.isVisible = loadState.refresh !is\n    ```", "```kt\n            LoadState.Loading\n    ```", "```kt\n        errorMessage.isVisible = loadState.refresh is\n    ```", "```kt\n            LoadState.Error\n    ```", "```kt\n      }\n    ```", "```kt\n    }\n    ```", "```kt\n    lifecycleScope.launchWhenCreated{\n    ```", "```kt\n        yourAdapter.loadStateFlow\n    ```", "```kt\n            .distinctUntilChangedBy { it.refresh }\n    ```", "```kt\n            .filter { it.refresh is LoadState.NotLoading }\n    ```", "```kt\n            .collect { binding.list.scrollToPosition(0) }\n    ```", "```kt\n    }\n    ```", "```kt\n    implementation \"Androidx.lifecycle:lifecycle-viewmodel-compose:2.x.x\"\n    ```", "```kt\n    data class StudentProfile(\n    ```", "```kt\n        val name: String,\n    ```", "```kt\n        val school: String,\n    ```", "```kt\n        val major: String\n    ```", "```kt\n    )\n    ```", "```kt\n    class StudentRepository {\n    ```", "```kt\n        private val ourDataSource = (1..100).map {\n    ```", "```kt\n            StudentProfile(\n    ```", "```kt\n                name = \"Student $it\",\n    ```", "```kt\n                school = \"MIT $it\",\n    ```", "```kt\n                major = \"Computer Science $it\"\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n        suspend fun getStudents(page: Int, pageSize: Int):\n    ```", "```kt\n        Result<List<StudentProfile>> {\n    ```", "```kt\n            delay(timeMillis = 2000L) //the delay added is\n    ```", "```kt\n                just to mimic a network connection.\n    ```", "```kt\n            val start = page * pageSize\n    ```", "```kt\n            return if (start + pageSize <=\n    ```", "```kt\n            ourDataSource.size) {\n    ```", "```kt\n                Result.success(\n    ```", "```kt\n                    ourDataSource.slice(start until start\n    ```", "```kt\n                        + pageSize)\n    ```", "```kt\n                )\n    ```", "```kt\n            } else Result.success(emptyList())\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    interface StudentPaginator<Key, Student> {\n    ```", "```kt\n        suspend fun loadNextStudent()\n    ```", "```kt\n        fun reset()\n    ```", "```kt\n    }\n    ```", "```kt\n    class StudentPaginatorImpl<Key, Student>(\n    ```", "```kt\n    ) : StudentPaginator<Key, Student> {\n    ```", "```kt\n        override suspend fun loadNextStudent() {\n    ```", "```kt\n            TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n        override fun reset() {\n    ```", "```kt\n            TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    class StudentPaginatorImpl<Key, Student>(\n    ```", "```kt\n        private val key: Key,\n    ```", "```kt\n        private inline val loadUpdated: (Boolean) -> Unit,\n    ```", "```kt\n        private inline val request: suspend (nextKey: Key)\n    ```", "```kt\n        ->\n    ```", "```kt\n    . . .\n    ```", "```kt\n    ) : StudentPaginator<Key, Student> {\n    ```", "```kt\n        private var currentKey = key\n    ```", "```kt\n        private var stateRequesting = false\n    ```", "```kt\n        override suspend fun loadNextStudent() {\n    ```", "```kt\n            if (stateRequesting) {\n    ```", "```kt\n                return\n    ```", "```kt\n            }\n    ```", "```kt\n            stateRequesting = true\n    ```", "```kt\n         . . .\n    ```", "```kt\n        }\n    ```", "```kt\n        override fun reset() {\n    ```", "```kt\n            currentKey = key\n    ```", "```kt\n        }\n    ```", "```kt\n    data class UIState(\n    ```", "```kt\n        val page: Int = 0,\n    ```", "```kt\n        val loading: Boolean = false,\n    ```", "```kt\n        val studentProfile: List<StudentProfile> =\n    ```", "```kt\n            emptyList(),\n    ```", "```kt\n        val error: String? = null,\n    ```", "```kt\n        val end: Boolean = false,\n    ```", "```kt\n    )\n    ```", "```kt\n    class StudentViewModel() : ViewModel() {\n    ```", "```kt\n        var state by mutableStateOf(UIState())\n    ```", "```kt\n        private val studentRepository =\n    ```", "```kt\n            StudentRepository()\n    ```", "```kt\n        init {\n    ```", "```kt\n            loadStudentProfile()\n    ```", "```kt\n        }\n    ```", "```kt\n        private val ourPaginator = StudentPaginatorImpl(\n    ```", "```kt\n            key = state.page,\n    ```", "```kt\n            loadUpdated = { state = state.copy(loading =\n    ```", "```kt\n                it) },\n    ```", "```kt\n            request = { studentRepository.getStudents(it,\n    ```", "```kt\n                24) },\n    ```", "```kt\n            nextKey = { state.page + 1 },\n    ```", "```kt\n            error = { state = state.copy(error =\n    ```", "```kt\n                it?.localizedMessage) },\n    ```", "```kt\n            success = { student, newKey ->\n    ```", "```kt\n                state = state.copy(\n    ```", "```kt\n                    studentProfile = state.studentProfile\n    ```", "```kt\n                        + student,\n    ```", "```kt\n                    page = newKey,\n    ```", "```kt\n                    end = student.isEmpty()\n    ```", "```kt\n                )\n    ```", "```kt\n            }\n    ```", "```kt\n        )\n    ```", "```kt\n        fun loadStudentProfile(){\n    ```", "```kt\n            viewModelScope.launch {\n    ```", "```kt\n                ourPaginator.loadNextStudent()\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\nclass StudentPaginatorImpl<Key, Student>(\n    private val key: Key,\n    private inline val loadUpdated: (Boolean) -> Unit,\n    private inline val request: suspend (nextKey: Key) ->\n        Result<List<Student>>,\n    private inline val nextKey: suspend (List<Student>) ->\n        Key,\n    private inline val error: suspend (Throwable?) -> Unit,\n    private inline val success: suspend (items:\n        List<Student>, newKey: Key) -> Unit\n) : StudentPaginator<Key, Student> {\n```", "```kt\ncurrentKey = nextKey(studentProfiles)\nsuccess(studentProfiles, currentKey)\nloadUpdated(false)\n```", "```kt\n    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, NewsArticle> {\n    ```", "```kt\n        return try {\n    ```", "```kt\n            val page = params.key ?: 1\n    ```", "```kt\n            val response = newsApiService.getNews(page =\n    ```", "```kt\n                page)\n    ```", "```kt\n            LoadResult.Page(\n    ```", "```kt\n                data = response.articles,\n    ```", "```kt\n                prevKey = if (page == 1) null else\n    ```", "```kt\n                    page.minus(1),\n    ```", "```kt\n                nextKey = if (response.articles.isEmpty())\n    ```", "```kt\n                    null else page.plus(1),\n    ```", "```kt\n            )\n    ```", "```kt\n        } catch (e: Exception) {\n    ```", "```kt\n            LoadResult.Error(e)\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getRefreshKey(state: PagingState<Int, NewsArticle>): Int? {\n    ```", "```kt\n        return state.anchorPosition?.let { anchorPosition\n    ```", "```kt\n            ->\n    ```", "```kt\n            state.closestPageToPosition(anchorPosition)?\n    ```", "```kt\n                .prevKey?.plus(1)\n    ```", "```kt\n                ?: state.closestPageToPosition(\n    ```", "```kt\n                    anchorPosition)?.nextKey?.minus(1)\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    yourPager.flow\n    ```", "```kt\n        .map { PagingData ->\n    ```", "```kt\n            // here is where the transformations are\n    ```", "```kt\n               applied to the items in the paged data.\n    ```", "```kt\n    }\n    ```", "```kt\n    yourPager.flow\n    ```", "```kt\n        .map { PagingData ->\n    ```", "```kt\n            PagingData.map { sports -> SportsModel(sports)\n    ```", "```kt\n            }\n    ```", "```kt\n    }\n    ```", "```kt\n    yourPager.flow\n    ```", "```kt\n        .map { PagingData ->\n    ```", "```kt\n            PagingData.filter { sports ->\n    ```", "```kt\n                !sports.displayInUi }\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getRefreshKey(PagingState: PagingState): String? {\n    ```", "```kt\n        return PagingState.anchorPosition?.let { position\n    ```", "```kt\n            ->\n    ```", "```kt\n                PagingState.getClosestItemToPosition(\n    ```", "```kt\n                    position)?.id\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getRefreshKey(PagingState: PagingState): Int? {\n    ```", "```kt\n        return PagingState.anchorPosition\n    ```", "```kt\n    }\n    ```", "```kt\n    val yourFlow = Pager(\n    ```", "```kt\n        PagingConfig(pageSize = 24)\n    ```", "```kt\n    ) {\n    ```", "```kt\n        YourPagingSource(yourBackend, yourQuery)\n    ```", "```kt\n    }.flow\n    ```", "```kt\n        .cachedIn(viewModelScope)\n    ```", "```kt\n    testImplementation 'org.assertj:assertj-core:3.x.x'\n    ```", "```kt\n    testImplementation \"org.mockito:mockito-core:3.x.x\"\n    ```", "```kt\n    testImplementation 'Androidx.arch.core:core-testing:2.x.x'\n    ```", "```kt\n    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.x.x'\n    ```", "```kt\n    @Mock\n    ```", "```kt\n    private lateinit var newsApiService: NewsApiService\n    ```", "```kt\n    lateinit var newsPagingSource: NewsArticlePagingSource\n    ```", "```kt\n    @Before\n    ```", "```kt\n    fun setup() {\n    ```", "```kt\n        Dispatchers.setMain(testDispatcher)\n    ```", "```kt\n        newsPagingSource =\n    ```", "```kt\n            NewsArticlePagingSource(newsApiService)\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun `news article Paging Source load failure http error`() = runBlockingTest {\n    ```", "```kt\n        //setup\n    ```", "```kt\n        val error = HttpException(\n    ```", "```kt\n            Response.error<ResponseBody>(\n    ```", "```kt\n                403, \"some content\".toResponseBody(\n    ```", "```kt\n                    \"plain/text\".toMediaTypeOrNull())\n    ```", "```kt\n            )\n    ```", "```kt\n        ) . . .\n    ```", "```kt\n    Mockito.doThrow(error)\n    ```", "```kt\n        .`when`(newsApiService)\n    ```", "```kt\n        .getNews(\n    ```", "```kt\n            1\n    ```", "```kt\n        ). . .\n    ```", "```kt\n    //assert\n    ```", "```kt\n    assertEquals(\n    ```", "```kt\n        expectedResult, newsPagingSource.load(\n    ```", "```kt\n            PagingSource.LoadParams.Refresh(\n    ```", "```kt\n                key = null,\n    ```", "```kt\n                loadSize = 1,\n    ```", "```kt\n                placeholdersEnabled = false\n    ```", "```kt\n            )\n    ```", "```kt\n        )\n    ```", "```kt\n    )\n    ```", "```kt\n    @After\n    ```", "```kt\n    fun tearDown() {\n    ```", "```kt\n        testDispatcher.cleanupTestCoroutines()\n    ```", "```kt\n    }\n    ```", "```kt\n@Mock\nprivate lateinit var newsApiService: NewsApiService\n```"]