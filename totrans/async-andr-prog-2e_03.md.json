["```java\nprotected Result doInBackground(Params... params)\n```", "```java\n   protected void onPreExecute()\n   protected void onProgressUpdate(Progress... values)\n   protected void onPostExecute(Result result)\n   protected void onCancelled(Result result)\n   protected void onCancelled()\n```", "```java\nabstract class AsyncTask<Params, Progress, Result>\n```", "```java\n    public class MyTask extends AsyncTask<String, Float, Boolean>\n```", "```java\n   // Error\n   public class MyTask extends AsyncTask<String, float, boolean>\n```", "```java\npublic class DownloadImageTask\n  extends AsyncTask<URL, Integer, Bitmap> {\n\n  // Weak reference to the UI View to update\n  private final WeakReference<ImageView> imageViewRef;\n\n  public DownloadImageTask(ImageView imageView) {\n    this.imageViewRef = new WeakReference<ImageView>(imageView);\n  }\n\n  // Retrieves the image from a URL\n  private Bitmap downloadBitmap(URL url) {\n    // elided for brevity ...\n    ...\n  }\n\n  @Override\n  protected Bitmap doInBackground(URL... params) {\n    URL url = params[0];\n    // The IO operation invoked will take a significant ammount\n    // to complete\n    return downloadBitmap(url);\n  }\n  ...\n\n  @Override\n  protected void onPostExecute(Bitmap bitmap) {\n    ImageView imageView = this.imageViewRef.get();\n    if (imageView != null) {\n      imageView.setImageBitmap(bitmap);\n    }\n  }\n}\n```", "```java\n  public final AsyncTask<Params, Progress, Result> execute(Params...\n  params)\n```", "```java\n   class MyTask implements AsyncTask<String,Void,String>{ ... }\n   MyTask task = new MyTask().execute(\"hello\");\n```", "```java\n  public class ShowMyPuppyActivity extends Activity {\n\n    @Override\n public void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.show_my_puppy);\n\n  // Get the show button reference\n  Button showBut = (Button) findViewById(R.id.showImageBut);\n  showBut.setOnClickListener(new View.OnClickListener() {\n\n    @Override\n    public void onClick(View v) {\n      ...\n      // My Puppie Image URL\n      URL url = new URL(\"http://img.allw.mn/\" +\n                    \"content/www/2009/03/april1.jpg\");  \n      // Get the Reference to Photo UI Image View               \n      ImageView iv = (ImageView) findViewById(R.id.photo);\n        // Download the Image in background and\n        // load the image on the view\n        new DownloadImageTask(iv).execute(url);\n        ...\n      }\n  });\n}\n```", "```java\npublic class DownloadImageTask\n  extends AsyncTask<URL, Integer, Bitmap> {\n  ...\n private final WeakReference<Context> ctx;\n private ProgressDialog progress;\n  ...\n  public DownloadImageTask(Context ctx, ImageView imageView) {\n    this.imageView = new WeakReference<ImageView>(imageView);\n    this.ctx = new WeakReference<Context>(ctx);\n  }\n\n @Override\n protected void onPreExecute() {\n if ( ctx !=null && ctx.get()!= null ) {\n progress = new ProgressDialog(ctx.get());\n progress.setTitle(R.string.downloading_image);\n progress.setIndeterminate(true);\n progress.setCancelable(false);\n progress.show();\n }\n }\n\n  // ... doInBackground elided for brevity ...\n  @Override\n  protected void onPostExecute(Bitmap bitmap) {\n    ...\n if ( progress != null ) { progress.dismiss(); }\n ...\n  }\n}\n```", "```java\nshowBut.setOnClickListener(new View.OnClickListener() {\n\n  @Override\n  public void onClick(View v) {\n      ...\n      // Pass in the Context and the image view to load\n      // the image\n      new DownloadImageTask(\n        ShowMyPuppyActivity.this, iv).execute(url);\n         ...   \n  }\n});\n```", "```java\nprotected void onProgressUpdate(Progress... values)\n```", "```java\n   protected final void publishProgress(Progress... values)\n```", "```java\n@Override\nprotected void onPreExecute() {\n    ...\n    // Sets the progress bar style\n    progress.setProgressStyle(\n        ProgressDialog.STYLE_HORIZONTAL);\n    progress.setIndeterminate(false);\n    progress.setProgress(0);\n    progress.setMax(100);\n    progress.setCancelable(false);\n    progress.show(); \n}\n```", "```java\n@Override\nprotected void onProgressUpdate(Integer... values) {\n  progress.setProgress(values[0]);\n  }\n```", "```java\nprivate Bitmap downloadBitmap(URL url) {\n  InputStream is = null;\n  ...\n  // Before Download starts\n  publishProgress(0);\n  downloadedBytes = 0;\n  // Creates a Connection to the image URL\n  HttpURLConnection conn = (HttpURLConnection) url.\n                             openConnection();\n  ...\n  // Retrieves the image total length\n  totalBytes = conn.getContentLength();\n    ...\n  BufferedInputStream bif = new BufferedInputStream(is) {\n\n    int progress = 0;\n\n      public int read(byte[] buffer, int byteOffset,\n                      int byteCount) throws IOException {      \n        // The number of bytes read in each stream read\n      int readBytes = super.read(buffer, byteOffset,\n                                 byteCount);\n      ..\n      // Actual number of bytes read from the file\n      downloadedBytes += readBytes;\n      // Percent of work done\n      int percent = (int)((downloadedBytes * 100f) /\n                      totalBytes);\n      // Publish the progress to the main thread\n      if (percent > progress) {\n        publishProgress(percent);\n        progress = percent;\n      }     \n  ...\n}\n```", "```java\npublic final boolean cancel(boolean mayInterruptIfRunning)\n```", "```java\n@Override\nprotected void onPreExecute() {\n ...\n progress.setCancelable(true);\n progress.setOnCancelListener(\n new DialogInterface.OnCancelListener() {\n public void onCancel(DialogInterface dialog) {\n DownloadImageTask.this.cancel(false);\n }\n });\n ...\n}\n```", "```java\nprivate Bitmap downloadBitmap(URL url) {\n  Bitmap bitmap = null;\n  BufferedInputStream bif = new BufferedInputStream(is) {\n    ...\n\n    public int read(byte[] buffer, int byteOffset,\n                    int byteCount) throws IOException {\n\n      // Read the bytes from the Connection\n      int readBytes = super.read(buffer, byteOffset, byteCount);\n\n      // Verify if the download was cancelled\n      if ( isCancelled() ) {\n        // Returning -1 means that there is\n        // no more data and the stream has just ended\n        return -1;\n      }\n      ...\n    }\n  }\n  // If the download is cancelled the Bitmap is null\n  if ( !isCancelled() ) {\n    bitmap = BitmapFactory.decodeStream(bif);\n  }\n  return bitmap;\n  }\n```", "```java\nprotected void onCancelled(Result result);\nprotected void onCancelled();\n```", "```java\n@Override\nprotected void onCancelled() {\n  if ( imageView !=null && imageView.get() != null &&\n       ctx !=null && ctx.get() != null ) {\n\n   // Load the Bitmap from the application resources\n    Bitmap bitmap = BitmapFactory.decodeResource(\n                      ctx.get().getResources(),\n                      R.drawable.default_photo\n                    );\n    // Set the image bitmap on the image view\n    this.imageView.get().setImageBitmap(bitmap);\n  }\n  // Remove the dialog from the screen\n  progress.dismiss();\n}\n```", "```java\n// Create a download task object\nDownloadImageTask task  = new DownloadImageTask(\n                            ShowMyPuppyActivity.this, iv);\n...\nif ( task.getStatus() == AsyncTask.Status.PENDING ) {\n  // DownloadImageTask has not started yet so\n  // we can can invoke execute()\n} else if (task.getStatus() == AsyncTask.Status.RUNNING) {\n  // DownloadImageTask is currently running in\n  // doInBackground()\n} else if (task.getStatus() == AsyncTask.Status.FINISHED\n           && task.isCancelled()) {\n  // DownloadImageTask is done OnCancelled was called\n} else {\n  // DownloadImageTask is done onPostExecute was called\n}\n```", "```java\npublic class Result<T> {\n    public T result;\n    public Throwable error;\n}\n```", "```java\npublic class SafeDownloadImageTask extends\n  AsyncTask<URL, Integer, Result<Bitmap>> {\n\n   // Method executed on the Background Thread\n   protected Result<Bitmap> doInBackground(URL... params) {\n     Result<Bitmap> result = new Result<Bitmap>();\n     try {\n           // elided for brevity ...\n          ...\n       result.result = bitmap;\n     } catch (Throwable e) {\n       result.error = e;\n     } ...     \n   }\n   return result;\n}\n```", "```java\n@Override\nprotected final void onPostExecute(Result<Bitmap> result) {\n  ...\n  if ( result.error!= null) {\n    // ... alert the user ...\n    ...\n    Log.e(\"SafeDownloadImageTask\",\n          \"Failed to download image \",result.exception);\n    loadDefaultImage(imageView);\n  } else {\n    // ... success, continue as normal ...\n    imageView.setImageBitmap(result.actual);\n  }\n}\n```", "```java\nURL url = new URL(\"http://img.allw.mn\" +\n                  \"/content/www/2009/03/notfound.jpg\");\nnew SafeDownloadImageTask(ShowMyPuppyActivity.this, iv)\n.execute(url);\n```", "```java\n...downloadBitmap(SafeDownloadImageTask.java:85)\n...doInBackground(SafeDownloadImageTask.java:60)\n...\n\n84: if (responseCode != HttpURLConnection.HTTP_OK){\n85:      throw new Exception(...);\n86: }\n```", "```java\n   public final AsyncTask<Params, Progress, Result>\n       executeOnExecutor(Executor exec, Params... params)\n```", "```java\ntask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,\n                       params);\n```", "```java\n   task.execute(params);\n   task.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, params);\n```", "```java\nnew SleepAsyncTask(1).execute(1000);\n...\nnew SleepAsyncTask(4).execute(1000);\n```", "```java\n  private static final Queue<Runnable> QUEUE =\n     new LinkedBlockingQueue<Runnable>();\n   public static final Executor MY_EXECUTOR =\n     new ThreadPoolExecutor(4, 8, 1, TimeUnit.MINUTES, QUEUE);\n```", "```java\ntask.executeOnExecutor(MY_EXECUTOR, params);\n```", "```java\n   protected void onPause() {\n     super.onPause();\n     if ((task != null) && (isFinishing()))\n       task.cancel(false);\n   }\n```", "```java\npublic interface AsyncListener {\n    void onPreExecute();\n    void onProgressUpdate(Integer... progress);\n    void onPostExecute(Bitmap result);\n    void onCancelled(Bitmap result);\n}\n```", "```java\npublic class DownloadImageHeadlessFragment extends Fragment {\n\n  // Reference to the activity that receives the\n  // async task callbacks\n  private AsyncListener listener;   \n  private DownloadImageTask task;\n\n  // Function to create new instances\n  public static DownloadImageHeadlessFragment\n    newInstance(String url) {\n    DownloadImageHeadlessFragment myFragment = new\n                   DownloadImageHeadlessFragment();\n    Bundle args = new Bundle();\n    args.putString(\"url\", url);\n    myFragment.setArguments(args);\n    return myFragment;\n  }\n  // Called to do initial creation of fragment\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setRetainInstance(true);\n    task = new DownloadImageTask();\n    url = new URL(getArguments().getString(\"url\"));\n    task.execute(url);\n  }\n  // Called when an activity is attached\n  public void onAttach(Activity activity) {\n    super.onAttach(activity);\n  listener = (AsyncListener)activity;\n}\n\npublic void onDetach() {\n    super.onDetach();\n    listener = null;\n}\n// Cancel the download\npublic void cancel() {\n  if (task != null) {\n      task.cancel(false);\n  }\n}\n\nprivate class DownloadImageTask extends AsyncTask<URL, Integer, Bitmap> {\n\n   // ... doInBackground elided for brevity ...        }\n\n}\n```", "```java\nprivate class DownloadImageTask extends AsyncTask<URL, Integer, Bitmap> {\n  ...\n  protected void onPreExecute() {\n    if (listener != null)\n      listener.onPreExecute();\n  }\n  protected void onProgressUpdate(Integer... values) {\n    if (listener != null)\n      listener.onProgressUpdate(values);\n  }\n  protected void onPostExecute(Bitmap result) {\n    if (listener != null)\n      listener.onPostExecute(result);\n  }\n  protected void onCancelled(Bitmap result) {\n    if (listener != null)\n      listener.onCancelled(result);\n  }\n}\n```", "```java\npublic class ShowMyPuppyHeadlessActivity\n    extends FragmentActivity implements     \n    DownloadImageHeadlessFragment.AsyncListener {\n\n  private static final String DOWNLOAD_PHOTO_FRAG =        \n                         \"download_photo_as_fragment\";\n   ..\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    ...\n    FragmentManager fm = getSupportFragmentManager();\n    downloadFragment = (DownloadImageHeadlessFragment)\n       fm.findFragmentByTag(DOWNLOAD_PHOTO_FRAG);\n\n    // If the Fragment is non-null, then it is currently being\n    // retained across a configuration change.\n    if (downloadFragment == null) {\n     downloadFragment = DownloadImageHeadlessFragment.\n          newInstance(\"http://img.allw.mn/content\" +\n                      \"/www/2009/03/april1.jpg\");\n           fm.beginTransaction().add(downloadFragment,    \n       DOWNLOAD_PHOTO_FRAG).\n     commit();     \n    }\n  }\n```", "```java\n@Override\npublic void onProgressUpdate(Integer... value) {\n  if (progress == null)\n    prepareProgressDialog();\n\n  progress.setProgress(value[0]);\n}\n```", "```java\n@Override\npublic void onPostExecute(Bitmap result) {\n  if (result != null) {\n    ImageView iv = (ImageView) findViewById(\n                     R.id.downloadedImage);\n    iv.setImageBitmap(result);\n  }\n  cleanUp();\n}\n\n// When the task is cancelled the dialog is dimissed\n@Override\npublic void onCancelled(Bitmap result) {\n  cleanUp();\n}\n\n// Dismiss the progress dialog and remove the\n// the fragment from the fragment manager\nprivate void cleanUp() {\n  if (progress != null) {\n    progress.dismiss();\n    progress = null;\n  }\n  FragmentManager fm = getSupportFragmentManager();\n  Fragment frag = fm.findFragmentByTag(DOWNLOAD_PHOTO_FRAG);\n  fm.beginTransaction().remove(frag).commit();\n}\n```"]