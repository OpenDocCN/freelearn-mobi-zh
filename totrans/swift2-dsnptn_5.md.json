["```swift\n//Common Interface used by algorithms\nprotocol MoveStrategyProtocol {\n  func performMove()\n}\n```", "```swift\nclass AbstractObjectThatMove {\n  private var strategy: MoveStrategyProtocol!\n  private var whoAmI:String = \"Unknown Object\"\n\n  required init(strategy: MoveStrategyProtocol) {\n    self.strategy = strategy\n  }\n\n  func move(){\n    strategy.performMove()\n  }\n\n  internal var WhoAmi: String {\n    get {\n      return whoAmI\n    }\n    set {\n      whoAmI = newValue\n    }\n  }\n}\n```", "```swift\nprotocol AbstractObjectThatMove {\n   var WhoAmi: String { get set}\n}\nextension AbstractObjectThatMove {\n    func move(strategy: IMoveStrategy) {\n       strategy.performMove()\n    }\n}\nclass Human : AbstractObjectThatMove {\n    var WhoAmi: String = \"i'm a human\"\n}\n```", "```swift\nprint(\"- *** working with Human\")\nlet strategyForHuman = WalkMoveStrategy()\nlet human = Human()\n\n// Tell who am I\nprint(human.WhoAmi)\n\n//perform human move:\nhuman.move(strategyForHuman)\n```", "```swift\nclass Human: AbstractObjectThatMove {\n  required init(strategy: MoveStrategyProtocol){\n    super.init(strategy: strategy)\n    self.WhoAmi = \"i'm a human\"\n  }\n}\n```", "```swift\nclass WalkMoveStrategy: MoveStrategyProtocol {\n  func performMove() {\n    print(\"I am walking\")\n  }\n}\n```", "```swift\nLast, to complete the example, we will make our human, bird, and rabbit perform a move according to the strategy they apply:print(\"- *** working with Human\")\nlet strategyForHuman = WalkMoveStrategy()\nlet human = Human(strategy: strategyForHuman)\n\n// Tell who am I\nprint(human.WhoAmi)\n\n//perform human move:\nhuman.move()\n\nprint(\"- *** working with Bird\")\nlet strategyForBid = FlyMoveStrategy()\nlet bird = Bird(strategy: strategyForBid)\n\n// Tell who am I\nprint(bird.WhoAmi)\n\n//perform human move:\nbird.move()\n\nprint(\"- *** working with Rabbit\")\nlet strategyForRabbit = RunMoveStrategy()\nlet rabbit = Rabbit(strategy: strategyForRabbit)\n\n// Tell who am I\nprint(rabbit.WhoAmi)\n\n//perform human move:\nrabbit.move()\n```", "```swift\nprotocol IAudioPlayerState{\n  func buttonAction(player:AudioPlayer)\n  func buttonSource(player:AudioPlayer)\n}\n```", "```swift\nimport Foundation\n\nclass AudioPlayer {\n  private var state:IAudioPlayerState!\n\n  required init(state:IAudioPlayerState){\n    self.state = state\n  }\n\n  //Press the Action Button\n  func ActionButton(){\n    state.buttonAction(self)\n  }\n\n  //Press the Source Button\n  func SourceButton(){\n    state.buttonSource(self)\n  }\n\n  var CurrentState:IAudioPlayerState{\n    get{\n      return state\n    }\n    set{\n      state = newValue\n    }\n  }\n}\n```", "```swift\nimport Foundation\n\nclass RadioState: IAudioPlayerState {\n\n  init(){\n    print(\"RADIO MODE\")\n  }\n\n  func buttonSource(player: AudioPlayer) {\n    print(\"Changing to MUSIC Mode\")\n    player.CurrentState = MusicPlayingState()\n  }\n\n  func buttonAction(player: AudioPlayer) {\n    print(\"Choosing next Station & playing it\")\n  }\n}\n```", "```swift\n    player.CurrentState = MusicPlayingState()\n```", "```swift\nclass MusicPlayingState: IAudioPlayerState {\n\n  init(){\n    print(\"MUSIC PLAY MODE\")\n  }\n\n  func buttonSource(player: AudioPlayer) {\n    print(\"Changing source to Standby Mode\")\n    player.CurrentState = StandByState()\n  }\n\n  func buttonAction(player: AudioPlayer) {\n    print(\"Changing to Pausing Mode\")\n    player.CurrentState = MusicPausedState()\n  }\n}\n```", "```swift\nclass MusicPausedState: IAudioPlayerState {\n\n  init(){\n    print(\"MUSIC PAUSED MODE\")\n  }\n\n  func buttonSource(player: AudioPlayer) {\n    print(\"Changing source to Standby Mode\")\n    player.CurrentState = StandByState()\n  }\n\n  func buttonAction(player: AudioPlayer) {\n    print(\"Changing to playing Mode\")\n    player.CurrentState = MusicPlayingState()\n  }\n}\n```", "```swift\nclass StandByState: IAudioPlayerState {\n\n  init(){\n    print(\"STANDBY MODE\")\n  }\n\n  func buttonSource(player: AudioPlayer) {\n    print(\"Changing to Radio Mode\")\n    player.CurrentState = RadioState()\n  }\n\n  func buttonAction(player: AudioPlayer) {\n    print(\"cannot launch an action in standby mode\")\n  }\n}\n```", "```swift\nlet standbyMode = StandByState()\nlet player = AudioPlayer(state: standbyMode)\n\nplayer.ActionButton()\nplayer.SourceButton()\n\nplayer.ActionButton()\nplayer.SourceButton()\n\nplayer.ActionButton()\nplayer.ActionButton()\nplayer.SourceButton()\n```", "```swift\nclass AbstractPersonage {\n  private final var fatigue = 100\n  private final var money = 0\n  private final var happiness = 100\n  private final var hungry = 100\n  private final var knowledge = 100\n  private final var name:String!\n\n  final var canBePaid: Bool = true\n\n  required init(name: String) {\n   self.name = name\n  }\n\n  func toString() {\n    print(\"(\"Name: \\(name) / fatigue : \\(Fatigue) / happiness \\(Happiness) / Hungry \\(Hungry) / knowledge \\(Fatigue) / money: \\(Money) / \")\n  }\n\n  //Play a day for the Personage\n  func playDay() {\n    print(\"PLAYING DAY\")\n    print(\"Get Up!\")\n    getUp()\n    print(\"Eat Breakfast\")\n    eatBreakfast()\n    doWashingUp()\n    print(\"Go to work\")\n    goToWork()\n    print(\"Work\")\n    work()\n\n    if canBePaid {\n      print(\"Receive Pay\")\n      getPaid()\n    }\n    print(\"BackHome\")\n    backToHome()\n\n    print(\"Do personal activities\")\n    doPersonalActivities()\n\n    print(\"Eat dinner\")\n    eatDinner()\n\n    print(\"Sleep\")\n    sleep()\n  }\n\n  func getUp() {\n    Fatigue = 0\n    Happiness = 25\n    Hungry = -25\n    Knowledge = 0\n  }\n\n  func eatBreakfast() {\n    Fatigue = -5\n    Happiness = 25\n    Hungry = 60\n    Knowledge = 0\n  }\n  final func doWashingUp() {\n    print(\"do washing up\")\n  }\n\n  func goToWork() {\n    Fatigue = -15\n    Happiness = -15\n    Hungry = -10\n    Knowledge = 0\n  }\n  func work(){\n    Fatigue = -40\n    Happiness = -25\n    Hungry = -40\n    Knowledge = 25\n  }\n\n  func getPaid() {\n    Money = 1000\n  }\n\n  func backHome() {\n    Fatigue = -15\n    Happiness = 10\n    Hungry = -10\n    Knowledge = 0\n  }\n\n  func doPersonalActivities() {\n    Fatigue = -15\n    Happiness = 15\n    Hungry = -10\n    Knowledge = 0\n  }\n\n  func eatDinner() {\n    Fatigue = -10\n    Happiness = 5\n    Hungry = 40\n    Knowledge = 0\n  }\n  func sleep() {\n    Fatigue = 90\n    Happiness = 0\n    Hungry = -5\n    Knowledge = 2\n  }\n\n  var Fatigue: Int {\n    get{\n      return fatigue\n    }\n    set{\n    fatigue += newValue\n    }\n  }\n\n  var Hungry: Int {\n    get{\n      return hungry\n    }\n    set{\n      hungry += newValue\n    }\n  }\n\n  var Happiness: Int {\n    get{\n      return happiness\n    }\n    set{\n      happiness += newValue\n    }\n  }\n\n  var Money: Int {\n    get{\n      return money\n    }\n    set{\n      money += newValue\n    }\n  }\n\n  var Knowledge: Int {\n    get{\n      return knowledge\n    }\n    set{\n      knowledge += newValue\n    }\n  }\n}\n```", "```swift\n  private final var fatigue = 100\n  private final var money = 0\n  …\n```", "```swift\n//Play a day for the Personage\n  func playDay() {\n    print(\"PLAYING DAY\")\n    print(\"Get Up!\")\n getUp()\n    print(\"Eat Breakfast\")\n eatBreakfast()\n doWashingUp()\n    print(\"Go to work\")\n goToWork()\n    print(\"Work\")\n work()\n\n    if canBePaid {\n      print(\"Receive Pay\")\n getPaid()\n    }\n    print(\"BackHome\")\n backHome()\n\n    print(\"Do personal activities\")\n doPersonalActivities()\n\n    print(\"Eat dinner\")\n eatDinner()\n\n doWashingUp()\n\n    print(\"Sleep\")\n sleep()\n  }\n\n… \n```", "```swift\nfunc eatBreakfast() {\n    Fatigue = -5\n    Happiness = 25\n    Hungry = 60\n    Knowledge = 0\n  }\n\n  func goToWork() {\n    Fatigue = -15\n    Happiness = -15\n    Hungry = -10\n    Knowledge = 0\n  }\n\n//others methods \n```", "```swift\n  var Fatigue: Int {\n    get{\n      return fatigue\n    }\n    set{\n    fatigue += newValue\n    }\n  }\n\n  var Hungry: Int {\n    get{\n      return hungry\n    }\n    set{\n      hungry += newValue\n    }\n  }\n```", "```swift\n      required init(name: String) {\n      self.name = name\n      }\n    ```", "```swift\n      func toString() {\n        print(\"Name: \\(name) / fatigue : \\(Fatigue) / happiness \\(Happiness) / Hungry \\(Hungry) / knowledge \\(Fatigue) / money: \\(Money) / \")\n      }\n    ```", "```swift\nclass Student: AbstractPersonage {\n\n  required init(name: String) {\n    super.init(name: name)\n    //student cannot be paid\n    canBePaid = false\n  }\n\n  override func doPersonalActivities() {\n    //student Read Books during its personal activities\n    //so life indicators must be updated\n    Fatigue = -5\n    Happiness = 15\n    Hungry = -5\n    Knowledge = 15\n  }\n}\n```", "```swift\nclass Searcher: AbstractPersonage {\n\n  override func getPaid() {\n    Money = 3000/30\n  }\n\n  override func sleep() {\n    //Searcher sleep very well\n    Fatigue = 90\n    Happiness = 0\n    Hungry = -5\n    Knowledge = 10\n  }\n\n  override func doPersonalActivitie() {\n    //Searcher Read ScientificBooks during its personal activities\n    //so life indicators must be updated\n    Fatigue = -5\n    Happiness = 10\n    Hungry = -5\n    Knowledge = 25\n  }\n}\n```", "```swift\nimport Foundation\n\nclass FireMan: AbstractPersonage {\n\n  override func getPaid() {\n    Money = 2500/30\n  }\n\n  override func sleep() {\n    //FireMan doesn't sleep a lot\n    Fatigue = 80\n    Happiness = 5\n    Hungry = -5\n    Knowledge = 0\n  }\n\n  override func doPersonalActivities() {\n    //FireMan makes lot of sports during personal activities\n    //so life indicators must be updated\n    Fatigue = -10\n    Happiness = 5\n    Hungry = -5\n    Knowledge = 15\n  }\n\n  override func work() {\n    Fatigue = -25\n    Happiness = -55\n    Hungry = -45\n    Knowledge = 10\n  }\n\n}\n```", "```swift\nstudent.toString()\nsearcher.toString()\nfireMan.toString()\n```", "```swift\nfor i in 1...30{\n  student.playDay()\n  searcher.playDay()\n  fireMan.playDay()\n}\n```", "```swift\nprint(\"- **** 30 days later:\")\nstudent.toString()\nsearcher.toString()\nfireMan.toString()\n```", "```swift\n  import Foundation\n\nlet student = Student(name: \"Simon\")\nlet searcher = Searcher(name: \"Natasha\")\nlet fireMan = FireMan(name:\"Edward\")\n\nprint(\"- **** Starting with:\")\nstudent.toString()\nsearcher.toString()\nfireMan.toString()\n\n//Play a month\nfor i in 1...30{\n  print(\"**************\")\n  print(\"Play Day \\(i) \")\n  print(\"**************\")\n  student.playDay()\n  searcher.playDay()\n  fireMan.playDay()\n}\nprint(\"- **** 30 days later:\")\nstudent.toString()\nsearcher.toString()\nfireMan.toString()\n```"]