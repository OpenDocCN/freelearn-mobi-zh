["```swift\n    //  AppDelegate.h\n    //  SocialNetworkApp\n    //  Created by Steven F. Daniel on 11/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import <UIKit/UIKit.h>\n    #import \"FBConnect.h\"\n\n    @class ViewController;\n\n    @interface AppDelegate : NSObject <UIApplicationDelegate, FBSessionDelegate, FBDialogDelegate>\n    {\n     Facebook *facebook;\n    }\n\n    // Create the required class Setters and Getters\n    @property (strong, nonatomic) UIWindow       *window;\n    @property (strong, nonatomic) ViewController *viewController;\n    @property (nonatomic, retain) Facebook  *facebook;\n\n    -(void)fbDidLogin;\n    -(void)fbDidLogout;\n    -(void)fbSessionInvalidated;\n\n    @end\n    ```", "```swift\n    //  AppDelegate.m\n    //  SocialNetworkApp\n    //  Created by Steven F. Daniel on 11/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import \"AppDelegate.h\"\n    #import \"ViewController.h\"\n\n    @implementation AppDelegate\n\n    @synthesize window = _window;\n    @synthesize viewController = _viewController;\n    @synthesize facebook;\n\n    ```", "```swift\n    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n    {\n    self.window = [[[UIWindow alloc] initWithFrame:\n    [[UIScreen mainScreen] bounds]] autorelease];\n\n    // Override point for customization after application\n    // launch.\n    self.viewController = [[[ViewController alloc] initWithNibName:@\"ViewController\" bundle:nil] autorelease];\n    self.window.rootViewController = self.viewController;\n\n    // Do any additional setup after loading the view, \n    // typically from a nib.\n    self.facebook = [[Facebook alloc] \n    initWithAppId:@\"YOUR_APPID_HERE\" \n    andDelegate:self];\n    // Check and retrieve authorization information\n     NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n     if ([defaults objectForKey:@\"FBAccessTokenKey\"] && [defaults objectForKey:@\"FBExpirationDateKey\"]) {\n     self.facebook.accessToken = [defaults objectForKey:@\"FBAccessTokenKey\"];\n     self.facebook.expirationDate = [defaults objectForKey:@\"FBExpirationDateKey\"];\n     }\n\n     // Check to ensure that we have a valid session object\n     if (![self.facebook isSessionValid]) {\n     [self.facebook authorize:nil];\n     }\n\n        [self.window makeKeyAndVisible];\n        return YES;\n    }\n    ```", "```swift\n    -(BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url\n    {\n        return [self.facebook handleOpenURL:url];\n    }\n\n    -(BOOL)application:(UIApplication *)application openURL:(NSURL *)urlsourceApplication:(NSString *)sourceApplication annotation:(id)annotation{\n       return [self.facebook handleOpenURL:url];\n    }\n\n    -(void)fbDidLogin\n    {\n        // Check and retrieve authorization information\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        [defaults setObject:[self.facebook accessToken] forKey:@\"FBAccessTokenKey\"];\n        [defaults setObject:[self.facebook expirationDate] forKey:@\"FBExpirationDateKey\"];\n        [defaults synchronize];\n    }\n\n    - (void)fbDidLogout\n    {\n        // Remove saved authorization information if it exists\n        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n        if ([defaults objectForKey:@\"FBAccessTokenKey\"]) {\n            [defaults removeObjectForKey:@\"FBAccessTokenKey\"];\n            [defaults removeObjectForKey:@\"FBExpirationDateKey\"];\n            [defaults synchronize];\n        }\n\n        UIAlertView *alertView = [[UIAlertView alloc]\n                                  initWithTitle:@\"FaceBookSampleApp\"\n                                  message:@\"Your session has logged out.\"\n                                  delegate:nil\n                                  cancelButtonTitle:@\"OK\"\n                                  otherButtonTitles:nil,\n                                  nil];\n        [alertView show];\n        [alertView release];\n    }\n     [alertView show];\n     [alertView release];\n    }\n\n    #pragma mark Called when the session has expired.\n    - (void)fbSessionInvalidated {\n        UIAlertView *alertView = [[UIAlertView alloc]\n                                  initWithTitle:@\"FaceBookSampleApp\"\n                                  message:@\"Your session has expired.\"\n                                  delegate:nil\n                                  cancelButtonTitle:@\"OK\"\n                                  otherButtonTitles:nil,\n                                  nil];\n        [alertView show];\n        [alertView release];\n        [self fbDidLogout];\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  SocialNetworkApp\n    //  Created by Steven F. Daniel on 11/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  <UIKit/UIKit.h>\n    #import \"AppDelegate.h\"\n\n    @interface ViewController : UIViewController<UIActionSheetDelegate, FBRequestDelegate>\n    {\n    AppDelegate *mainDelegate;\n    IBOutlet UIBarButtonItem  *loginButton;\n    IBOutlet UIBarButtonItem  *postMessage;\n    IBOutlet UIImageView      *imgPhoto;\n    IBOutlet UITextView       *userInfoDetails;\n     Facebook       *facebook;\n    }\n\n    // Create the required class Setters and Getters\n    @property (nonatomic, strong) UIBarButtonItem  *loginButton;\n    @property (nonatomic, strong) UIBarButtonItem  *postMessage;\n    @property (nonatomic, strong) UIImageView      *imgPhoto;\n    @property (nonatomic, strong) UITextView       *userInfoDetails;\n    @property(nonatomic, retain) Facebook    *facebook;\n    @property(nonatomic, retain) AppDelegate *mainDelegate;\n\n    // Declare our Instance methods\n    -(void)SendNotificationRequest;\n    -(void)PostMessagetoWall;\n    -(void)getGraphAPIData;\n    -(void)dialogDidComplete:(FBDialog *)dialog;\n    -(void)request:(FBRequest *)request didLoad:(id)result;\n    -(void)request:(FBRequest *)request didFailWithError:(NSError *)error;\n\n    @end\n    ```", "```swift\n    //  ViewController.m\n    //  SocialNetworkApp\n    //  Created by Steven F. Daniel on 11/12/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights \n    // reserved.\n\n    #import \"ViewController.h\"\n    #import \"FBConnect.h\"\n\n    @interface ViewController ()\n    @end\n\n    @implementation ViewController\n\n    @synthesize mainDelegate, loginButton, postMessage;\n    @synthesize imgPhoto,userInfoDetails, facebook;\n\n    - (void)viewDidLoad{\n      [super viewDidLoad];\n\n     // Set up our delegate object\n     self.mainDelegate = (AppDelegate *)[[UIApplication\n     sharedApplication]delegate];\n     self.facebook = mainDelegate.facebook;\n\n     // Initialize our form fields\n     userInfoDetails.text = @\"\";\n    }\n\n    #pragma mark Handle when the login button is pressed.\n    - (IBAction)loginButton:(id)sender{\n     if ([loginButton.title isEqualToString:@\"Sign In\"]) {\n     if (![self.facebook isSessionValid]) {\n     NSLog(@\"facebook session\");\n     NSArray *permissions = [[NSArray alloc] \n     initWithObjects:@\"email\",@\"publish_actions\", nil];\n     [self.facebook authorize:permissions];\n     [permissions release];\n     }\n     else {NSLog(@\"session still valid\");}\n     [loginButton setTitle:@\"Sign Out\"];\n     }\n     else if([loginButton.title isEqualToString:@\"Sign \n    Out\"]) {\n     [loginButton setTitle:@\"Sign In\"];\n     [self.facebook logout:self.mainDelegate];\n     }\n    }\n\n    ```", "```swift\n    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n    {\n      self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen \n      mainScreen] bounds]] autorelease];\n\n      // Override point for customization after \n      // application launch.\n     self.viewController = [[[ViewController alloc] \n     initWithNibName:@\"ViewController\" bundle:nil] autorelease];\n     self.window.rootViewController = self.viewController;\n\n     // Do any additional setup after loading the view, \n     // typically from a nib.\n     self.facebook = [[Facebook alloc] \n     initWithAppId:@\"YOUR_APPID_HERE\" andDelegate:self];\n\n     // Check and retrieve authorization information\n     NSUserDefaults *defaults = [NSUserDefaults\n     standardUserDefaults];\n     if ([defaults objectForKey:@\"FBAccessTokenKey\"] &&\n         [defaults objectForKey:@\"FBExpirationDateKey\"]) {\n         self.facebook.accessToken = [defaults \n         objectForKey:@\"FBAccessTokenKey\"];\n        self.facebook.expirationDate = [defaults \n        objectForKey:@\"FBExpirationDateKey\"];\n      }\n     // Set up the permissions to use for this App\n     NSArray *permissions = [[NSArray alloc]\n     initWithObjects:\n     @\"user_likes\",\n     @\"user_birthday\",\n     @\"user_interests\",\n     @\"read_stream\",nil];\n\n      // Check to ensure that we have a valid session object\n      if (![self.facebook isSessionValid]) {\n     [self.facebook authorize:permissions];\n      }\n\n     [permissions release];\n      [self.window makeKeyAndVisible];\n      return YES;\n    }\n    ```", "```swift\n    #pragma mark - Facebook GraphAPI Method\n    -(void)getGraphAPIData {\n      // Make a call using the Facebook Query Language to \n      // get the current user details.\n      NSMutableDictionary *params = [NSMutableDictionary\n      dictionaryWithObjectsAndKeys:\n      @\"SELECT quotes, uid, name, pic FROM user\n      WHERE uid = me()\", @\"query\",nil];\n\n     [self.facebook requestWithMethodName:@\"FQL.query\"\n      andParams:params\n      andHttpMethod:@\"POST\"\n      andDelegate:self];\n    }\n    #pragma markCalled when the Graph API call has completed.\n    -(void)request:(FBRequest *)request didLoad:(id)result\n    {\n      if ([result isKindOfClass:[NSArray class]]) {\n      result = [result objectAtIndex:0];\n    }\n    // This callback can be a result of getting the users\n    // basic information or getting the user's permissions.\n    if ([result objectForKey:@\"name\"]) {\n      // Retrieve back the basic user information.\n      NSString *concatString = [[NSString alloc] \n      initWithFormat:@\"ID: %@\\nName: %@\\nQuotes: %@\\n\", \n      [result objectForKey:@\"uid\"],\n      [result objectForKey:@\"name\"], \n      [result objectForKey:@\"quotes\"]];\n\n      // Get the profile image\n      UIImage *image = [UIImage imageWithData:[NSData\n      dataWithContentsOfURL:[NSURL URLWithString:[result \n      objectForKey:@\"pic\"]]]];\n      self.imgPhoto.image = image;\n      self.userInfoDetails.text = concatString;\n     }\n    }\n    #pragma markCalled when an error has occurred while \n    #pragma mark retrieving GraphAPI details\n    -(void)request:(FBRequest *)request didFailWithError:(NSError *)error\n    {\n      NSLog(@\"An error occurred obtaining details: %@\",error);\n    }\n    ```", "```swift\n    #pragma markSend a notification request to a group of friends\n    - (void)sendNotificationRequest{\n      NSMutableDictionary *params =\n      [NSMutableDictionary dictionaryWithObjectsAndKeys:\n      @\"invites you to check out some great stuff.\", @\"message\",\n      @\"Check this out\", @\"notification_text\",nil];\n\n    // Display the Facebook Request Notifications DialogBox\n    [self.facebook dialog:@\"apprequests\" \n      andParams:params andDelegate:self.mainDelegate];\n    }\n    #pragma markFBDialogDelegate\n    - (void)dialogDidComplete:(FBDialog *)dialog {\n      NSLog(@\"dialog completed successfully\");\n    }\n    #pragma markPost a message to the current user's Wall.\n    - (void)postMessagetoWall{\n      NSMutableDictionary *params =\n      [NSMutableDictionary dictionaryWithObjectsAndKeys:\n      @\"Testing FacebookSampleApp Feed Dialog\", @\"name\",\n      @\"Using Feed Dialogs within iOS are great.\", @\"caption\",\n      @\"Click to check out my BlockHeadz game on the AppStore\", \n      @\"description\",\n      @\"http://itunes.apple.com/app/blockheadz/\n      id386884355?mt=8#\", @\"link\",\n      @\"http://geniesoftstudios.com/blog/wp-\n      content/uploads/2011/03/blockhead.png\",@\"picture\",nil];\n\n      // Display the Facebook feed dialog with our array.\n      [self.facebook dialog:@\"feed\" andParams:params\n      andDelegate:self.mainDelegate];\n    } \n    #pragma mark called when user presses the Post Message Button\n    - (IBAction)postMessage:(id)sender {\n\n      // Define an instance of our action sheet\n      UIActionSheet *actionSheet;\n\n      // Initialize our action sheet with the \n      // differen't mapping types.\n      actionSheet = [[UIActionSheet alloc]\n      initWithTitle:@\"Choose from the list below\"\n      delegate:self\n      cancelButtonTitle:@\"Cancel\"\n      destructiveButtonTitle:@\"Close\"\n      otherButtonTitles:@\"Send Notification\",@\"Submit new post\",\n      @\"Obtain User Details\",nil];\n\n      // Set our Action Sheet style and then \n      // display it to the user.\n      actionSheet.actionSheetStyle = UIBarStyleBlackTranslucent;\n      [actionSheet showInView:self.view];\n    }\n    // Delegate that handles the chosen action sheet options\n    -(void)actionSheet:(UIActionSheet *)actionSheetclickedButtonAtIndex:(NSInteger)buttonIndex{\n\n     // Determine the chosen item\n     switch (buttonIndex) {\n      case 1:  [self sendNotificationRequest]; break;\n      case 2:  [self postMessagetoWall];       break;\n      case 3:  [self getGraphAPIData];         break;\n      default: break;  // Catch the Close button and exit.\n     }\n    }\n    ```", "```swift\n    # pragma mark method is called when an error has occurred \n    # while pragma mark retrieving GraphAPI details.\n    -(void)request:(FBRequest *)request didFailWithError:(NSError *)error{\n      NSLog(@\"An error occurred obtaining details: %@\",error);\n    }\n\n    - (void)dialog:(FBDialog*)dialog didFailWithError:(NSError *)error{\n      NSLog(@\"An error occurred obtaining details: %@\",error);\n    }\n    ```"]