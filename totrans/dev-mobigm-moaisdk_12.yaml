- en: Chapter 12. iOS Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've covered a lot of what is needed to make a game, we can start
    talking about deploying your game to specific devices. In this chapter we'll modify
    the default host project for iOS in order to get our game working on it. For this,
    we'll make a copy of the sample host project that comes with Moai SDK and go through
    all the things you need to get your own game running.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, if you dream about your game making it to the iTunes Store, you're
    going to have to get the latest Xcode and iOS SDK from Apple. You get access to
    them by registering to Apple's developer website ([https://developer.apple.com/](https://developer.apple.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have any experience using Xcode, it's suggested that you read a
    quick tutorial, since that's out of the scope of this book. A few basic things
    you should know about Xcode are how to handle source files, how to manage targets,
    and some basic Objective-C in order to modify the host to fit your game.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and open the Xcode project that is provided with the Moai SDK download.
    It's located at `hosts/ios/moai.xcodeproject`. If you use the project from that
    location, it's already configured to use the Moai SDK static libraries in `lib/ios`,
    but if you move it, you'll need to fix the corresponding paths inside the project
    configuration. We'll see how to do this soon.
  prefs: []
  type: TYPE_NORMAL
- en: The host
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the code for the iOS-specific host can be found inside the `Classes` folder.
    If you take a close look at them, you'll easily understand what they do. Basically
    they set up an OpenGL view, register all input methods to AKU, and configure other
    services that you may find handy (or that you can remove if you don't want them).
  prefs: []
  type: TYPE_NORMAL
- en: There is another folder named `Resources` (that contains icons), which is where
    the compiled source will go (inside another folder called `build`).
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that, by default, the `moai-target` file and the `lua` folder are
    displayed in red. The reason for that is that during the build, a script runs
    and reads the content of `moai-target` in `Resources/build` to identify all the
    Lua source code for our game. After finding it, the script copies every directory
    referenced by `moai-target` into the `lua` folder (the files also get marked as
    read-only to remind you that they should not be edited, since they'll be deleted
    during the next build). The files inside the `lua` folder are included in the
    application bundle, so that they can be accessed when packing it for deployment.
    Take a look at `MoaiAppDelegate.mm`, where the code for calling `main.lua` to
    start your game is located. If you want to use a different entry point for `main.lua`,
    you can do it there.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `moai-target` file, you should include all the code and asset sources
    for your game, one per line. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If there are special dependencies on a module that you're installing (check
    `samples/iphone/app-apsalar` for an example), you can use a file called `moai-target-ext`
    to define them. The script will check for this file inside each folder that you
    define in `moai-target` and recursively copy all the contents in it as well.
  prefs: []
  type: TYPE_NORMAL
- en: This is crucial for getting things working with the host that is provided.
  prefs: []
  type: TYPE_NORMAL
- en: You should also take a look at the `Frameworks` folder, which has all the static
    libraries and iOS frameworks needed to build our host.
  prefs: []
  type: TYPE_NORMAL
- en: Running an example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to modify your game code, you should try to run the sample project.
    It already points to one of Moai SDK's samples, so it should be as easy as checking
    that the device in the Simulator and hitting **Build and Debug**.
  prefs: []
  type: TYPE_NORMAL
- en: If you see Moai SDK's logo rotating, you're good to go. If not, check if your
    Xcode configuration is OK, or join Moai SDK's forum and ask for help, detailing
    the errors you get.
  prefs: []
  type: TYPE_NORMAL
- en: Running on an actual device requires you to understand (or at least hack into—who
    can understand it?) how to handle and set up Apple's provisioning profiles for
    development. This is carefully explained in the documentation that you can find
    at Apple's developer portal ([https://developer.apple.com/devcenter/ios/index.action](https://developer.apple.com/devcenter/ios/index.action)).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our own project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Xcode project sample that comes with Moai SDK includes a bunch of
    things that we may not need, it's recommended to do a clean up. We'll start by
    copying the whole project somewhere in our hard drive. If you have been following
    all the chapters and have extracted all the code, a good place to put our project
    is in the same folder as the code samples, so that we can point at them and have
    our *Concentration* game available on iOS. You can use the source code of [Chapter
    7](ch07.html "Chapter 7. Concentration Gameplay"), *Concentration Gameplay*.
  prefs: []
  type: TYPE_NORMAL
- en: Either way, if you downloaded the book's source code, you'll find the iOS project
    and the *Concentration* gameplay implementation in the code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have both the Xcode project and the *Concentration* game in place,
    double-click on `moai.xcodeproj` in order to open Xcode and start configuring
    it.
  prefs: []
  type: TYPE_NORMAL
- en: It may take a while to load. Xcode performs file indexing the first time you
    open a project. Don't worry, that won't happen on subsequent loads (well, except
    when it decides to index randomly).
  prefs: []
  type: TYPE_NORMAL
- en: If you run it now, it will probably fail. Learn to take your time to read and
    understand the errors; that's the only way to solve them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's fix the project step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Pointing to the correct source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default project points to one of Moai SDK's examples using a relative path.
    Since we moved the project, that path is now broken. We need to make everything
    point to our own code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pointing to the correct source code](img/5064_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to do this, expand the **Resources** folder, then the **build** folder,
    and finally click on **moai-target**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `moai-target` should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`moai-target` is pointing to the `anim-basic` sample using relative paths.
    So, in order to run our own game, we need it to point to the correct location.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ve moved the game''s code to a folder called `concentration-code`,
    so that''s where we will point to. The final `moai-target` should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Pointing to the correct source code](img/5064_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fixing source paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we moved the Xcode project from its original location, now we need to
    fix relative paths around the it.
  prefs: []
  type: TYPE_NORMAL
- en: Collapse the **Resources** folder and expand **classes**. You'll see that **ParticlePresets.cpp**
    and **ParticlePresets.h** are in red. They can be found in `moai-sdk/hosts/src/`
    (`moai-sdk` being the folder where you installed Moai SDK in the initial chapters).![Fixing
    source paths](img/5064_12_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **ParticlePresets.cpp** and **ParticlePresets.h** and remove them.![Fixing
    source paths](img/5064_12_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now right-click on the **Classes** folder and choose **Add Files to "moai"**.
    Go to `moai-sdk/hosts/src/` and pick both **ParticlePresets.cpp** and **ParticlePresets.h**.
    After you accept, they should be in the folder and should not be displayed in
    red.![Fixing source paths](img/5064_12_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fixing include paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we need to do is fix the relative include paths.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, click on the top of the folder tree, where it says **moai** and
    the icon for the Xcode application is displayed. Then, under the **PROJECT** section
    (not **TARGETS**), select **moai**.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of things to fix here:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for the setting named **Header search paths**; it should read **../../include/**.
    If you double-click on it, a popup will be displayed and you can then double-click
    the include path and change it to your own include path, which is located at `moai-sdk/include/`.![Fixing
    include paths](img/5064_12_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **Other Linker Flags**, and change **../../../lib/ios/universal/libmoai-ios-tapjoy.a**
    to the correct location (`moai-sdk/lib/ios/universal/libmoai-ios-tapjoy.a`). If
    Xcode still can't find this file, try using an absolute path (in my case it is
    `/Users/nictuku/moai-sdk/lib/ios/universal/libmoai-ios-tapjoy.a`).![Fixing include
    paths](img/5064_12_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **Library Search Paths** and change **../../../lib/ios/universal**
    to `moai-sdk/lib/ios/universal`.![Fixing include paths](img/5064_12_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **MoaiSample** under the **TARGETS** section. Double-click on
    **Library Search Paths** and replace the remaining relative paths in the same
    way we changed the previous ones.![Fixing include paths](img/5064_12_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fixing linked libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we need to fix is the location for all the linked libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixing linked libraries](img/5064_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Expand the **Frameworks** folder and identify all the libraries that show up
    in red.
  prefs: []
  type: TYPE_NORMAL
- en: You can find them in `moai-sdk/bin/ios/universal`. Remove the ones in red, and
    add all the files in that path, as we did with the `ParticlePresets` files.
  prefs: []
  type: TYPE_NORMAL
- en: You should end up with the same files in the directory but they should not be
    displayed in red anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you hit **Run**, the build should succeed and you should see our *Concentration*
    game on the iOS Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixing linked libraries](img/5064_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But wait! It's not being displayed correctly, and touches are not detected!
    That's because of the way we configured our project locally. So let's try to fix
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Going multi-platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to think about is how we are going to deal with different
    resolutions in our project. You could do a lot of fancy stuff in this regard,
    such as changing the UI given different sizes, or loading HD images if the resolution
    is higher than or equal to 1024 x 768 (or whatever you choose!), and so on. In
    this example we're going to keep it simple; we will just stretch everything so
    that it fits on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Concentration` project and change the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you run the project now, it should show the stretched version of the game,
    but it still does not react to touches.
  prefs: []
  type: TYPE_NORMAL
- en: '![Going multi-platform](img/5064_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to fix this, edit `game.lua` and modify `processInput` to use `InputManager:getTouch`
    instead of `InputManager:position`.
  prefs: []
  type: TYPE_NORMAL
- en: Where it says `x, y = InputManager:position ()`, you should replace that with
    `x, y = InputManager:getTouch ()`.
  prefs: []
  type: TYPE_NORMAL
- en: Now if you run your project, you'll be able to play our game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Going multi-platform](img/5064_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: But it looks stretched. You can learn how to make it work in landscape mode
    at Moai's wiki page ([http://getmoai.com/wiki/index.php?title=Setup_landscape_in_Moai_Games_For_iOS_Devices](http://getmoai.com/wiki/index.php?title=Setup_landscape_in_Moai_Games_For_iOS_Devices)).
  prefs: []
  type: TYPE_NORMAL
- en: Running on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the steps we followed, the game should be able to run on a device.
    It should just be a matter of setting the correct **code sign** identities and
    changing the target device.
  prefs: []
  type: TYPE_NORMAL
- en: It would be great for you to try this now and ask for help from the Apple community
    or the Moai forum if you're lost, since setting up an Apple Developer account
    and certificates exceed the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to modify the Xcode project for the iOS host
    in order to get it working with our own game. We fixed the relative paths that
    broke when we moved the project and set the resolution correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We know iOS is not the only platform around there. We'll talk about other platforms
    in the next chapter!
  prefs: []
  type: TYPE_NORMAL
