- en: Chapter 12. What's Next? – Resources, Advice, and the Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we have covered a lot in the book. Swift is not a small topic
    and app development itself is orders of magnitude bigger than that. We learned
    most of Swift but it would not have been practical to cover every little feature
    of the language and Swift is still a new and evolving language. You are never
    going to be able to keep everything you''ve learned in your memory without being
    able to refer to it later. You can always refer back to this book but Apple''s
    documentation can be a great reference too. Beyond that, if you truly want to
    become a proficient Swift developer, you can ensure your success by always learning
    and evolving. It is extremely hard to do that in a vacuum. The best way to ensure
    that you are keeping up with the times is to follow and participate in the community
    around whatever topics interest you the most. In this chapter, we will go over
    how to use Apple''s documentation and some suggestions on where you can find and
    participate in the Swift, iOS, and OS X developer community. More specifically,
    in this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Apple's documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forums and blogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prominent figures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Podcasts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple's documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple puts a lot of time and effort into maintaining its documentation. This
    documentation can often be a very valuable tool to determine how you are expected
    to interact with their frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode actually integrates with the documentation quite well. One of the main
    ways you can look at the documentation is within the **Quick Help** inspector.
    You can display it by navigating to **View** | **Utilities** | **Show Quick Help
    Inspector** from the main menu. This inspector shows you the documentation of
    whatever piece of code you currently have your cursor on. If that particular class,
    method, or function is a part of Apple''s frameworks, you will get some quick
    help with regards to it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apple''s documentation](img/B05103_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here the cursor is on `UICollectionView`, so the **Quick Help** inspector gives
    us the high-level information about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also look at the documentation in its own window if you need more information
    or want to do more exploring. You can open up this window at any time by navigating
    to **Help** | **Documentation and API Reference** and you can search for any topic
    you want. However, you can also jump right to a specific piece of code''s documentation
    by holding the *Option* key and double-clicking on it. For example, if you were
    to hold the *Option* key and double-click on `isSourceTypeAvailable`, you would
    get the following full documentation window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apple''s documentation](img/B05103_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This window acts very similar to the Web. You can navigate through the documentation
    by clicking on any of the links or searching for a completely unrelated topic.
    You can also jump to specific parts of a documentation page using the outline
    view on the left-hand side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation is particularly useful when you already have a sense of what
    parts of the framework you need to use for a particular task. You can then use
    this documentation to figure out the specifics of how to properly use that part
    of the framework. As you get better acquainted with Apple's frameworks, this will
    become more useful, because it is relatively easy to remember what parts of the
    framework you use for all of the common tasks, but it is far more difficult and
    often impractical to remember exactly how they work. However, sometimes the documentation
    is not enough. The next place you should look for answers is online.
  prefs: []
  type: TYPE_NORMAL
- en: Forums and blogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you have a problem or question while programming, odds are almost guaranteed
    that someone else has already run into it and the odds are also very good that
    someone has already written about it somewhere. Before you jump right to asking
    a question on a forum, I strongly recommend that you do your own searching. First
    of all, you want to save the valuable time of the community members. If they are
    constantly answering the same questions over and over again, they are dedicating
    a lot less time to truly new questions. Second, you will often find that you discover
    the answer for yourself in the process of formulating your thoughts, on how to
    search for it. Lastly, you will become much better at searching for programming
    related problems as you practice it more. Forums are usually going to be very
    slow compared to finding your own answer and obviously time is money.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time when you use a search engine to look up a problem; you will
    find two main types of resources with answers: blog posts and forums.'
  prefs: []
  type: TYPE_NORMAL
- en: Blog posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to books, blog posts are fantastic for larger, higher-level considerations.
    You may search for something, such as: "ways to permanently store information,"
    and you will probably find many blog posts talking about the different ways you
    can do that. Blog posts are generally better for this because they can discuss
    the nuances of different solutions and they aren''t restricted to target a small
    problem.'
  prefs: []
  type: TYPE_NORMAL
- en: Blog posts can also be great for extremely in-depth and nuanced problems. For
    example, there are some major and complicated repercussions of our move from 32-bit
    to 64-bit processors. Truly understanding the underlying problem will be far more
    valuable for you in moving forward than finding a quick solution for your immediate
    problem; if you can't find a book, blog posts are ideal to give you that kind
    of understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Forums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forms are incredible at giving you very quick solutions to very specific problems.
    The most common forums are probably [http://stackoverflow.com/](http://stackoverflow.com/)
    and [forums.developer.apple.com](http://forums.developer.apple.com). On sites
    like these, there are very dedicated communities of people answering and asking
    questions. The Apple developer forum even has Apple employees answering questions.
    Asking good questions is just as important as answering questions well. These
    sites act not only as a way to get an answer to a new question but as living documentation
    for people searching for an answer in the future. A well-framed question is going
    to be more easily answered and more easily found by a search engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack Overflow has a great documentation on what makes good questions and answers,
    but generally they should have the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Be specific and clear about what you are asking for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it easy for other people to reproduce the problem on their own systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be respectful of any answerer's time by putting as much effort as you can into
    the question up front.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last point is the most important one. You want to phrase your questions
    to allow someone with more knowledge than you to hone in on the exact problem
    instead of wasting time on things you could figure out on your own. This will
    often mean describing all of the things you have tried already and what roadblocks
    you hit. The clearer you make it that you have put real effort into solving the
    problem yourself, the better reception you will get from the community and also
    better answers. I cannot even count all the times that I have figured out the
    solution to a problem while I was writing up a question on a forum. This type
    of solution is going to be far more memorable and long lasting than a solution
    that someone else gives you.
  prefs: []
  type: TYPE_NORMAL
- en: Prominent figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The more experienced you get at programming with a specific language and/or
    framework, the more likely you are to get stuck in a pattern of solving problems
    the same ways over and over again. Odds are that other people have figured out
    better ways to solve the same problem and someone, somewhere, is talking about
    it. You have to at least observe the community, even if you are not participating
    in it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: One of the best ways to follow the community is to follow the prominent figures
    in it. For example, for Swift, it is a great idea to follow Chris Lattner, the
    original creator of Swift. While numerous people now develop Swift, he spent more
    than a year as the sole developer and continues to run the Developer Tools department
    at Apple. You can follow him on Twitter `@clattner_llvm` and it can also be useful
    to follow his activity on Apple's Developer forums at [https://devforums.apple.com/people/ChrisLattner](https://devforums.apple.com/people/ChrisLattner).
    You can click on the **Email Updates** button to get emails about his activity.
  prefs: []
  type: TYPE_NORMAL
- en: Other than Chris Lattner, there are many other valuable people to pay attention
    to but only you can decide who is valuable to you. Pay attention to the names
    you are seeing a lot within the community and find out if they have blogs, podcasts,
    or any other places you can keep up with what they are saying.
  prefs: []
  type: TYPE_NORMAL
- en: Podcasts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are not familiar with podcasts, they are an incredibly valuable way
    of keeping up with virtually any topic in a relatively passive manner. They are
    essentially on-demand radio shows that you can subscribe to. You can listen to
    them whenever you want like when driving, doing housework, or working out. That
    is why they are particularly valuable: they can turn relatively dull situations
    into fantastic learning opportunities.'
  prefs: []
  type: TYPE_NORMAL
- en: Apple has a podcast app built right into iOS that you can use or there are also
    numerous other podcast apps on the app store that I recommend you check out. Most
    of these apps include discovery mechanisms that make it easier to find new podcasts
    and many podcasts will also talk about other podcasts they recommend.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is hard to recommend specific podcasts because most development podcasts
    do not last particularly long. It takes a lot of time and energy to produce a
    podcast, so many people do it for a while and take long breaks or decide to stop
    after a while. However, because of the on-demand nature of podcasts, it can still
    be very valuable to go back and listen to old episodes of podcasts. Three podcasts
    that are great to get you started are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core intuition**: Great podcast from prominent developers Daniel Jalkut and
    Manton Reece about general development topics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accidental tech podcast**: General, Apple oriented tech discussion from big
    names in the industry including Marco Arment: a very inspirational developer for
    me.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Under the radar**: A nice and concise podcast that is always 30 minutes or
    less but often contains valuable nuggets of information centered around independent
    Apple development. It is hosted by Marco Arment and David Smith, another inspirational
    developer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some podcasts are so valuable and entertaining that you will want to listen
    to every episode. Others are great for picking and choosing episodes that seem
    interesting and relevant to you. Whatever you do, I recommend you don't miss out
    on this free and easy opportunity to keep up with the development community.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The short length of this chapter is in stark contrast to its importance. If
    there is one thing I could leave you with after reading this book, it is that
    the best developers know how to seek out and find solutions for themselves from
    the many sources available to us. Sometimes those solutions are in books like
    this one; other times they are in documentation, blog posts, forums, podcasts,
    or even conversations with other people. The developer that can not only find
    these solutions, but also integrate and truly understand them is going to be incredibly
    valuable for the rest of their career. However, if you feel overwhelmed at the
    beginning, do not fret because we all started there. Focus your energy on one
    problem at a time and don't settle for a solution that just seems to work. Make
    sure that you understand every solution you put in place and you will quickly,
    without even realizing it, become an incredibly proficient developer.
  prefs: []
  type: TYPE_NORMAL
