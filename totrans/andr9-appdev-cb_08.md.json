["```kt\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\"&gt;\n    &lt;ToggleButton\n        android:id=\"@+id/buttonLights\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Lights\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_above=\"@+id/buttonAction\"\n        android:onClick=\"clickLights\" /&gt;\n    &lt;Button\n        android:id=\"@+id/buttonAction\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Action\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"clickVibrate\"/&gt;\n    &lt;Button\n        android:id=\"@+id/buttonSound\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Sound\"\n        android:layout_below=\"@+id/buttonAction\"\n        android:layout_centerHorizontal=\"true\"\n        android:onClick=\"clickSound\"/&gt;\n&lt;/RelativeLayout&gt;\n```", "```kt\n&lt;uses-permission android:name=\"android.permission.VIBRATE\" /&gt;\n```", "```kt\nprivate CameraManager mCameraManager;\nprivate String mCameraId=null;\nprivate ToggleButton mButtonLights;\n```", "```kt\nprivate String getCameraId() {\n    try {\n        String[] ids = mCameraManager.getCameraIdList();\n        for (String id : ids) {\n            CameraCharacteristics c = mCameraManager.getCameraCharacteristics(id);\n            Boolean flashAvailable = c.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);\n            Integer facingDirection = c.get(CameraCharacteristics.LENS_FACING);\n            if (flashAvailable != null \n                    && flashAvailable \n                    && facingDirection != null \n                    && facingDirection == CameraCharacteristics.LENS_FACING_BACK) {\n                return id;\n            }\n        }\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n```", "```kt\nmButtonLights = findViewById(R.id.buttonLights);\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n    mCameraManager = (CameraManager) this.getSystemService(Context.CAMERA_SERVICE);\n    mCameraId = getCameraId();\n    if (mCameraId==null) { mButtonLights.setEnabled(false);\n    } else {\n        mButtonLights.setEnabled(true);\n    }\n} else {\n    mButtonLights.setEnabled(false);\n}\n```", "```kt\npublic void clickLights(View view) {\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n        try {\n            mCameraManager.setTorchMode(mCameraId, mButtonLights.isChecked());\n        } catch (CameraAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic void clickVibrate(View view) {\n    ((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(1000);\n}\n\npublic void clickSound(View view) {\n    Uri notificationSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n    Ringtone ringtone = RingtoneManager.getRingtone(getApplicationContext(), \n            notificationSoundUri);\n    ringtone.play();\n}\n```", "```kt\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M){} \n```", "```kt\nUri notificationSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); \n```", "```kt\n&lt;uses-permission android:name=\"android.permission.VIBRATE\" /&gt;\n```", "```kt\nToast.makeText(this, \"\", Toast.LENGTH_SHORT).show();\n```", "```kt\n&lt;Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Show Toast\"\n    android:onClick=\"showToast\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n    &lt;item\n        android:left=\"4px\"\n        android:top=\"4px\"\n        android:right=\"4px\"\n        android:bottom=\"4px\"&gt;\n        &lt;shape android:shape=\"rectangle\" &gt;\n            &lt;solid android:color=\"@android:color/black\" /&gt;\n            &lt;stroke android:width=\"5px\" android:color=\"@android:color/white\"/&gt;\n        &lt;/shape&gt;\n    &lt;/item&gt;\n&lt;/layer-list&gt;\n```", "```kt\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/toast_layout_root\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\"\n    android:background=\"@drawable/border_square\"&gt;\n    &lt;ImageView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/imageView\"\n        android:layout_weight=\"1\"\n        android:src=\"img/ic_launcher\" /&gt;\n    &lt;TextView\n        android:id=\"@android:id/message\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"1\"\n        android:textColor=\"@android:color/white\"\n        android:padding=\"10dp\" /&gt;\n&lt;/LinearLayout&gt;\n```", "```kt\npublic void showToast(View view) {\n    LayoutInflater inflater = (LayoutInflater)this\n            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View layout = inflater.inflate(R.layout.toast_custom, null);\n    ((TextView)layout.findViewById(android.R.id.message)).setText(\"Custom Toast\");\n    Toast toast = new Toast(this);\n    toast.setGravity(Gravity.CENTER, 0, 0);\n    toast.setDuration(Toast.LENGTH_LONG);\n    toast.setView(layout);\n    toast.show();\n}\n```", "```kt\n&lt;Button\n    android:id=\"@+id/buttonDelete\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Delete\"\n    android:onClick=\"confirmDelete\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\npublic void confirmDelete(View view) {\n    AlertDialog.Builder builder = new AlertDialog.Builder(this);\n    builder.setTitle(\"Delete\")\n            .setMessage(\"Are you sure you?\")\n            .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    Toast.makeText(MainActivity.this, \"OK Pressed\", \n                            Toast.LENGTH_SHORT).show();\n                }\n            })\n            .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                    Toast.makeText(MainActivity.this, \"Cancel Pressed\", \n                            Toast.LENGTH_SHORT).show();\n                }\n            });\n    builder.create().show();\n}\n```", "```kt\nbuilder.setNeutralButton() \n```", "```kt\n.setIcon(R.mipmap.ic_launcher) \n```", "```kt\n.setItems() \n.setAdapter() \n.setSingleChoiceItems() \n.setMultiChoiceItems() \n```", "```kt\n.setView() \n```", "```kt\n&lt;Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Show Dialog\"\n    android:onClick=\"startProgress\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\nprivate ProgressDialog mDialog; final int THIRTY_SECONDS=30*1000; \n```", "```kt\npublic void startProgress(View view) {\n    mDialog = new ProgressDialog(this);\n    mDialog.setMessage(\"Doing something...\");\n    mDialog.setCancelable(false);\n    mDialog.show();\n    new Handler().postDelayed(new Runnable() {\n        public void run() {\n            mDialog.dismiss();\n        }\n    }, THIRTY_SECONDS);\n}\n```", "```kt\nmDialog.setCancelable(false); \n```", "```kt\nmDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); \n```", "```kt\n&lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;\n```", "```kt\n&lt;Button\n    android:id=\"@+id/buttonSound\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Lights, Action, and Sound\"\n    android:onClick=\"clickLightsActionSound\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\nfinal String CHANNEL_ID=\"notifications\";\n```", "```kt\npublic void clickLightsActionSound(View view) {\n    Uri notificationSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        AudioAttributes audioAttributes = new AudioAttributes.Builder()\n                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n                .setUsage(AudioAttributes.USAGE_NOTIFICATION_RINGTONE)\n                .build();\n        NotificationChannel channel = new NotificationChannel(CHANNEL_ID, \n                \"Notifications\", NotificationManager.IMPORTANCE_HIGH);\n        channel.setDescription(\"All app notifications\");\n        channel.setSound(notificationSoundUri,audioAttributes);\n        channel.setLightColor(Color.BLUE);\n        channel.enableLights(true);\n        channel.enableVibration(true);\n        NotificationManager notificationManager = getSystemService(NotificationManager.class);\n        notificationManager.createNotificationChannel(channel);\n    }\n\n    NotificationCompat.Builder notificationBuilder = new\n            NotificationCompat.Builder(this,CHANNEL_ID)\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setContentTitle(getString(R.string.app_name))\n            .setContentText(\"Lights, Action & Sound\")\n            .setSound(notificationSoundUri)\n            .setLights(Color.BLUE, 500, 500)\n            .setVibrate(new long[]{250,500,250,500,250,500})\n            .setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE);\n    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);\n    notificationManager.notify(0, notificationBuilder.build());\n}\n```", "```kt\n.setSmallIcon() \n.setContentText() \n```", "```kt\n.setSound(notificationSoundUri) \n.setLights(Color.BLUE, 500, 500) \n.setVibrate(new long[]{250,500,250,500,250,500}); \n```", "```kt\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)\n```", "```kt\nNotificationCompat.Builder notificationBuilder = new\n        NotificationCompat.Builder(this, CHANNEL_ID)\n        .setSmallIcon(R.mipmap.ic_launcher)\n        .setContentTitle(\"LightsActionSoundRedux\")\n        .setContentText(\"Lights, Action & Sound\");\nIntent activityIntent = new Intent(this, MainActivity.class);\nPendingIntent pendingIntent = PendingIntent.getActivity(\n        this,0,activityIntent,0);\nnotificationBuilder.addAction(android.R.drawable.ic_dialog_email, \"Email\",\n        pendingIntent);\n```", "```kt\n.setContentIntent(pendingIntent) \n```", "```kt\nNotificationCompat.Builder notificationBuilder =\n        new NotificationCompat.Builder(this, CHANNEL_ID)\n                .setSmallIcon(R.mipmap.ic_launcher);\nNotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();\ninboxStyle.setBigContentTitle(\"InboxStyle - Big Content Title\")\n        .addLine(\"Line 1\")\n        .addLine(\"Line 2\");\nnotificationBuilder.setStyle(inboxStyle);\n```", "```kt\nNotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)\n        .setSmallIcon(R.mipmap.ic_launcher)\n        .setContentTitle(\"LightsActionSoundRedux\")\n        .setContentText(\"BigPictureStyle\");\nNotificationCompat.BigPictureStyle bigPictureStyle = new NotificationCompat.BigPictureStyle();\nbigPictureStyle.bigPicture(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\nnotificationBuilder.setStyle(bigPictureStyle);\n```", "```kt\nNotificationCompat.Builder notificationBuilder = \n        new NotificationCompat.Builder(this, CHANNEL_ID)\n        .setSmallIcon(R.mipmap.ic_launcher)\n        .setContentTitle(\"LightsActionSoundRedux\");\nNotificationCompat.BigTextStyle BigTextStyle = new NotificationCompat.BigTextStyle();\nBigTextStyle.bigText(\"This is an example of the BigTextStyle expanded notification.\");\nnotificationBuilder.setStyle(BigTextStyle);\n```", "```kt\n&lt;Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"wrap_content\" \n    android:layout_height=\"wrap_content\" \n    android:text=\"Show Notification\" \n    android:onClick=\"showNotification\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\n@SuppressWarnings(\"deprecated\")\npublic void showNotification(View view) {\n    Intent activityIntent = new Intent(this,MainActivity.class);\n    PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, activityIntent, 0);\n\n    Log.i(this.getClass().getSimpleName(),\"showNotification()\" );\n    Notification.Builder notificationBuilder;\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {\n        notificationBuilder = new Notification.Builder(this)\n                .setVisibility(Notification.VISIBILITY_PUBLIC)\n                .setSmallIcon(Icon.createWithResource(this, R.mipmap.ic_launcher))\n                .addAction(new Notification.Action.Builder(\n                        Icon.createWithResource(this, android.R.drawable.ic_media_previous),\n                        \"Previous\", pendingIntent).build())\n                .addAction(new Notification.Action.Builder(\n                        Icon.createWithResource(this, android.R.drawable.ic_media_pause),\n                        \"Pause\", pendingIntent).build())\n                .addAction(new Notification.Action.Builder(\n                        Icon.createWithResource(this, android.R.drawable.ic_media_next),\n                        \"Next\", pendingIntent).build())\n                .setContentTitle(\"Music\")\n                .setContentText(\"Now playing...\")\n                .setLargeIcon(Icon.createWithResource(this, R.mipmap.ic_launcher))\n                .setStyle(new Notification.MediaStyle().setShowActionsInCompactView(1));\n    } else {\n        notificationBuilder = new Notification.Builder(this)\n                .setVisibility(Notification.VISIBILITY_PUBLIC)\n                .setSmallIcon(R.mipmap.ic_launcher)\n                .addAction(new Notification.Action.Builder(android.R.drawable.ic_media_previous,\n                        \"Previous\", pendingIntent).build())\n                .addAction(new Notification.Action.Builder(android.R.drawable.ic_media_pause,\n                        \"Pause\", pendingIntent).build())\n                .addAction(new Notification.Action.Builder(android.R.drawable.ic_media_next,\n                        \"Next\", pendingIntent).build())\n                .setContentTitle(\"Music\")\n                .setContentText(\"Now playing...\")\n                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n                .setStyle(new Notification.MediaStyle().setShowActionsInCompactView(1));\n    }\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        notificationBuilder.setChannelId(createChannel());\n    }\n    NotificationManager notificationManager =\n            (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);\n    notificationManager.notify(0, notificationBuilder.build());\n}\n```", "```kt\nprivate String createChannel() {\n    final String channelId = \"mediaplayer\";\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        NotificationChannel channel = new NotificationChannel(channelId, \"Notifications\",\n                NotificationManager.IMPORTANCE_HIGH);\n        channel.setDescription(\"All app notifications\");\n        channel.enableVibration(true);\n        NotificationManager notificationManager =\n                getSystemService(NotificationManager.class);\n        notificationManager.createNotificationChannel(channel);\n    }\n    return channelId;\n}\n```", "```kt\n@SuppressWarnings(\"deprecated\")\n```", "```kt\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) \n```", "```kt\n.setVisibility(Notification.VISIBILITY_PUBLIC) \n```", "```kt\n.setShowActionsInCompactView(1) \n```", "```kt\n.setMediaSession(mMediaSession.getSessionToken()) \n```", "```kt\n&lt;uses-permission android:name=\"android.permission.VIBRATE\"/&gt;\n```", "```kt\n&lt;activity android:name=\".MainActivity\" \n    android:launchMode=\"singleInstance\"&gt; \n```", "```kt\n&lt;ToggleButton\n    android:id=\"@+id/buttonLight\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Flashlight\"\n    android:onClick=\"clickLight\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\nprivate static final String ACTION_STOP=\"STOP\"; \nprivate CameraManager mCameraManager; \nprivate String mCameraId=null; \nprivate ToggleButton mButtonLight; \n```", "```kt\nmButtonLight = findViewById(R.id.buttonLight);\nmCameraManager = (CameraManager) this.getSystemService(Context.CAMERA_SERVICE);\nmCameraId = getCameraId();\nif (mCameraId==null) {\n    mButtonLight.setEnabled(false);\n} else {\n    mButtonLight.setEnabled(true);\n}\n```", "```kt\n@Override \nprotected void onNewIntent(Intent intent) { \n    super.onNewIntent(intent); \n    if (ACTION_STOP.equals(intent.getAction())) { \n        setFlashlight(false); \n    } \n} \n```", "```kt\nprivate String getCameraId() {\n    try {\n        String[] ids = mCameraManager.getCameraIdList();\n        for (String id : ids) {\n            CameraCharacteristics c = mCameraManager.getCameraCharacteristics(id);\n            Boolean flashAvailable = c.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);\n            Integer facingDirection = c.get(CameraCharacteristics.LENS_FACING);\n            if (flashAvailable != null\n                    && flashAvailable\n                    && facingDirection != null\n                    && facingDirection == CameraCharacteristics.LENS_FACING_BACK) {\n                return id;\n            }\n        }\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n```", "```kt\npublic void clickLight(View view) {\n    setFlashlight(mButtonLight.isChecked());\n    if (mButtonLight.isChecked()) {\n        showNotification();\n    }\n}\n\nprivate void setFlashlight(boolean enabled) {\n    mButtonLight.setChecked(enabled);\n    try {\n        mCameraManager.setTorchMode(mCameraId, enabled);\n    } catch (CameraAccessException e) {\n        e.printStackTrace();\n    }\n}\n```", "```kt\nprivate void showNotification() {\n    final String CHANNEL_ID = \"flashlight\";\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\n                \"Notifications\", NotificationManager.IMPORTANCE_HIGH);\n        channel.setDescription(\"All app notifications\");\n        channel.enableVibration(true);\n        NotificationManager notificationManager = getSystemService(NotificationManager.class);\n        notificationManager.createNotificationChannel(channel);\n    }\n\n    Intent activityIntent = new Intent(this, MainActivity.class);\n    activityIntent.setAction(ACTION_STOP);\n    PendingIntent pendingIntent = \n            PendingIntent.getActivity(this, 0, activityIntent, 0);\n    final NotificationCompat.Builder notificationBuilder = \n            new NotificationCompat.Builder(this, CHANNEL_ID)\n            .setContentTitle(\"Flashlight\")\n            .setContentText(\"Press to turn off the flashlight\")\n            .setSmallIcon(R.mipmap.ic_launcher)\n            .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))\n            .setContentIntent(pendingIntent)\n            .setVibrate(new long[]{DEFAULT_VIBRATE})\n            .setPriority(PRIORITY_MAX)\n            .setAutoCancel(true);\n    NotificationManager notificationManager = (NotificationManager) \n this.getSystemService(Context.NOTIFICATION_SERVICE);\n notificationManager.notify(0, notificationBuilder.build());\n}\n```", "```kt\n.setVibrate() \n.setPriority(PRIORITY_MAX) \n```", "```kt\nactivityIntent.setAction(ACTION_STOP); \n```", "```kt\n.setAutoCancel(true);\n```", "```kt\nprivate void cancelNotification() {\n    NotificationManager notificationManager = (NotificationManager)\n            this.getSystemService(Context.NOTIFICATION_SERVICE);\n    notificationManager.cancelAll();\n}\n```", "```kt\npublic void clickLight(View view) {\n    setFlashlight(mButtonLight.isChecked());\n    if (mButtonLight.isChecked()) {\n        showNotification();\n    } else {\n        cancelNotification();\n    }\n}\n```", "```kt\n&lt;Button\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Send Notification\"\n    android:id=\"@+id/buttonSend\"\n    android:onClick=\"onClickSend\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintLeft_toLeftOf=\"parent\"\n    app:layout_constraintRight_toRightOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" /&gt;\n```", "```kt\nprivate final String KEY_REPLY_TEXT = \"KEY_REPLY_TEXT\";\nprivate final int NOTIFICATION_ID = 1;\n```", "```kt\nif (getIntent()!=null) {\n    Toast.makeText(MainActivity.this, getReplyText(getIntent()), Toast.LENGTH_SHORT).show();\n}\n```", "```kt\n@Override\nprotected void onNewIntent(Intent intent) {\n    super.onNewIntent(intent);\n    Toast.makeText(MainActivity.this, getReplyText(intent), Toast.LENGTH_SHORT).show();\n}\n```", "```kt\npublic void onClickSend(View view){\n    Intent activityIntent = new Intent(this,MainActivity.class);\n    PendingIntent pendingIntent =\n            PendingIntent.getActivity(this,0,activityIntent,0);\n\n    RemoteInput remoteInput = new RemoteInput.Builder(KEY_REPLY_TEXT)\n            .setLabel(\"Reply\")\n            .build();\n\n    NotificationCompat.Action action = \n            new NotificationCompat.Action.Builder(android.R.drawable.ic_menu_revert, \n                    \"Reply\", pendingIntent)\n                    .addRemoteInput(remoteInput)\n                    .build();\n\n    NotificationCompat.Builder notificationBuilder = \n            new NotificationCompat.Builder(this,getChannelId())\n                    .setSmallIcon(android.R.drawable.ic_dialog_email)\n                    .setContentTitle(\"Reply\")\n                    .setContentText(\"Content\")\n                    .addAction(action);\n\n    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);\n    notificationManager.notify(0, notificationBuilder.build());\n}\n\nprivate String getChannelId() {\n    final String channelId = \"directreply\";\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {\n        NotificationChannel channel = new NotificationChannel(channelId,\n                \"Notifications\", NotificationManager.IMPORTANCE_DEFAULT);\n        channel.setDescription(\"All app notifications\");\n        channel.enableVibration(true);\n        NotificationManager notificationManager = getSystemService(NotificationManager.class);\n        notificationManager.createNotificationChannel(channel);\n    }\n    return channelId;\n}\n```", "```kt\nprivate CharSequence getReplyText(Intent intent) {\n    Bundle notificationReply = RemoteInput.getResultsFromIntent(intent);\n    if (notificationReply != null) {\n        return notificationReply.getCharSequence(KEY_REPLY_TEXT);\n    }\n    return null;\n}\n```"]