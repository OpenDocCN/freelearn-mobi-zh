- en: '26'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Apple Intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During Apple’s Worldwide Developers Conference in 2024, Apple introduced **Apple
    Intelligence**, a personal intelligence system that puts powerful generative models
    in Apple devices, enabling new AI-driven features in your apps. These features
    include **Writing Tools**, **Image Playground**, **Genmoji**, and **Siri with
    App Intents**. However, only Writing Tools is available at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’re going to explore Apple Intelligence features using the
    *JRNL* app that you completed in *Chapter 22*, *Getting Started with Collection
    Views*.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll learn about Apple Intelligence and what it can do. Next, you’ll
    see how predictive code completion can help you write your apps. Finally, you’ll
    learn about Writing Tools and see how it works in your app.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to use Apple Intelligence
    features in Xcode and your apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Apple Intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using predictive code completion in Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Writing Tools in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in *Chapter
    22*, *Getting Started with Collection Views*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter26` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/vraSf4dPHfc](https://youtu.be/vraSf4dPHfc%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by learning about Apple Intelligence in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Apple Intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple Intelligence is an artificial intelligence platform that consists of
    on-device and server processing that will enable incredible new features to help
    users communicate, work, and express themselves. These features include:'
  prefs: []
  type: TYPE_NORMAL
- en: Predictive code completion, which helps you write code using Xcode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Tools, which helps users proofread, rewrite, and summarize text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image Playground, which allows users to create fun and playful images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Genmoji, which lets users create emojis to suit any occasion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Siri with App Intents, which allows developers to give Siri the ability to take
    actions within your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Intelligence will be free to all Apple users and will be available in
    the fall of 2024\. At the time of writing, only predictive code completion and
    Writing Tools are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn about what Apple Intelligence can do, watch this video: [https://www.youtube.com/watch?v=Q_EYoV1kZWk](https://www.youtube.com/watch?v=Q_EYoV1kZWk).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view Apple Developer documentation on Apple Intelligence at this link:
    [https://developer.apple.com/apple-intelligence/](https://developer.apple.com/apple-intelligence/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how Apple Intelligence will help you write
    code for your app.
  prefs: []
  type: TYPE_NORMAL
- en: Using predictive code completion in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, when you type code, Xcode will try to help you by displaying suggestions
    in a pop-up menu. Code completion takes this to another level, providing more
    thorough code suggestions via an on-device AI coding model. This model is specifically
    trained on Swift and Apple SDKs and will be able to infer what you are trying
    to do based on the surrounding code context, like function names and comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, you’ll add a new file to your project and create some
    example structures and functions. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the completed Xcode project in the `Chapter22` folder of the code bundle
    for this book, which can be downloaded from [https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Settings** in the **Xcode** menu and click the **Text Editing** tab.
    Click the **Editing** tab and tick the **Predictive code completion** check box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.1: Settings window showing the Predictive code completion check box'
  prefs: []
  type: TYPE_NORMAL
- en: 'A **Download predictive code completion model?** alert will appear. Click the
    **Download** button to download and install the language model, and wait for it
    to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.2: The Download predictive code completion model? alert'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Components** tab in the **Settings** window and verify the **Predictive
    Code Completion Model** is present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.3: Settings window showing the Components tab'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **JRNL** folder in the Project navigator and choose **New File
    from Template...**. Choose **Swift File** from the template chooser and name the
    file `Employee`. It will appear in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following comment and code after the `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Xcode will display a predictive code suggestion. Press *Tab* to accept it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.4: Editor area showing a predictive code suggestion'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode will display a list of possible properties for the `Employee` structure.
    Press *Tab* to accept it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.5: Editor area showing a predictive code suggestion'
  prefs: []
  type: TYPE_NORMAL
- en: Note that Xcode has automatically created the `Employee` structure for you.
    Cool!
  prefs: []
  type: TYPE_NORMAL
- en: Type `ex` after the `Employee` structure definition and press *Tab* to accept
    the predictive code suggestion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that Xcode has automatically created a method to generate sample data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.6: Editor area showing syntax errors'
  prefs: []
  type: TYPE_NORMAL
- en: Note that there may be a few syntax errors that you need to fix. This will probably
    improve as Apple updates the language model over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'After fixing the syntax errors, your code should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Type `struct Emp` after the extension and keep pressing *Tab* to accept the
    suggestions until no more suggestions appear. The generated code will be similar
    to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type `func` after the `employees` property declaration and keep pressing *Tab*
    to accept the suggestions until no more suggestions appear. The generated code
    will be similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type *Return* twice after the definition of the `add(_:)` method and wait until
    the code suggestion appears. Keep pressing *Tab* to accept the suggestions until
    no more suggestions appear. The generated code will be similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat *Step 14* and keep pressing *Tab* to accept the suggestions until no
    more suggestions appear. The generated code will be similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the generated code is similar to the code shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the help of predictive code completion, you have successfully created the
    classes and methods described in the comment, with very little typing required!
    Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: However, do note that the code generated is not perfect, and you will need to
    fix errors and other issues as needed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn how to implement Writing Tools to proofread,
    rewrite, and summarize text in your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Writing Tools in your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Tools is an Apple Intelligence feature that is available system-wide
    and can help you proofread, rewrite, and summarize text. Writing Tools appears
    automatically when your app is running in a supported environment, as long as
    you are using a `UITextView`, `NSTextView`, or `WKWebView` in your app. Apple
    has also introduced text view delegate methods and properties so that your app
    may take appropriate action when Writing Tools is in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view Apple’s WWDC24 video on Writing Tools, see: [https://developer.apple.com/videos/play/wwdc2024/10168/](https://developer.apple.com/videos/play/wwdc2024/10168/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see Writing Tools in action, you’ll run the *JRNL* app on your Mac and use
    Writing Tools to modify the text in the Add New Journal Entry screen. You’ll also
    explore the new text view delegate methods and properties introduced by Apple.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **System Settings** on your Mac, choose **Apple Intelligence & Siri**
    in the sidebar, and switch on **Apple Intelligence**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.7: System Settings window with Apple Intelligence turned on'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Xcode, open the `JRNL` project and choose **My Mac (Designed for iPad)**
    from the destination menu in the toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.8: Destination menu with My Mac (Designed for iPad) selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **JRNL** icon at the top of the Project navigator, click the **JRNL**
    target, and click the **Signing & Capabilities** tab. Set **Team** to a free or
    paid Apple Developer account, and modify the **Bundle Identifier** as needed,
    until there are no more errors in the provisioning profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.9: Signing and capabilities screen'
  prefs: []
  type: TYPE_NORMAL
- en: Running your app on a device is covered in more detail in *Chapter 1*, *Exploring
    Xcode*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run the app on your Mac and click the **+** button to display the
    Add New Journal Entry screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.10: The Journal screen with the + button highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in a few paragraphs of text into the text view. Select all the text, right-click,
    and choose **Writing Tools | Proofread**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.11: Text view with a pop-up menu showing Proofread selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the left and right arrow buttons to step through the changes, and click
    **Done** when you have finished reviewing them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.12: Reviewing Writing Tools changes in the text view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try the other Writing Tools features and observe what they do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_26_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 26.13: Writing Tools submenu showing available features'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wish to disable editing in the text view while Writing Tools is active.
    Click the **AddJournalViewController** file in the Project navigator. Add the
    following extension after all other code in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code disables editing in the text view while Writing Tools is active.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, you may wish to disable Writing Tools altogether. In the `viewDidLoad()`
    method of the `AddJournalEntryViewController` class, add this line after all the
    other code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code disables Writing Tools, and the Writing Tools menu item will no longer
    appear.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully explored how Writing Tools works in your app. Excellent!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you modified the *JRNL* app that you completed in *Chapter
    22*, *Getting Started with Collection Views*, to work with Apple Intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned about Apple Intelligence and what it can do. Next, you created
    a new structure and related functions with the help of predictive code completion.
    Finally, you learned about Writing Tools and how it works in your app.
  prefs: []
  type: TYPE_NORMAL
- en: You now have learned how to use Apple Intelligence features in Xcode and your
    apps. Great!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to test and submit your app to the App
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
