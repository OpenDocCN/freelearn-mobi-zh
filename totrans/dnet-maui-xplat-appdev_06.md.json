["```swift\n$ git clone -b 2nd/chapter05 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development-Second-edition.git PassXYZ.Vault2 \n```", "```swift\npublic Microsoft.Maui.Controls.INavigation Navigation { get; } \n```", "```swift\npublic partial class App : Application\n{\n  ...\n  public App ()\n  {\n    InitializeComponent();\n    MainPage = new NavigationPage (new TheFirstPage());\n  }\n  ...\n} \n```", "```swift\nasync void GotoPage2 (object sender, EventArgs e) {\n         await Navigation.PushAsync(new Page2());\n} \n```", "```swift\nasync void BackToPage1 (object sender, EventArgs e) {\n        await Navigation.PopAsync();\n} \n```", "```swift\nawait Shell.Current.Navigation.PushModalAsync(NewItemPage(type)); \n```", "```swift\n_ = await Shell.Current.Navigation.PopModalAsync(); \n```", "```swift\npublic void InsertPageBefore (Page page, Page before); \n```", "```swift\nNavigation.InsertPageBefore(new Page1(), this); \n```", "```swift\npublic void RemovePage (Page page); \n```", "```swift\n// the reference page2 is an instance of Page2\nNavigation.RemovePage(page2);\nawait Navigation.PopAsync(); \n```", "```swift\n<FlyoutItem\n  Title=\"{x:Static resources:Resources.About}\"                    //(1)\n  Icon=\"tab_info.png\" >                                           //(2)\n  <Tab>\n    <ShellContent Route=\"AboutPage\" ContentTemplate=\n        \"{DataTemplate local:AboutPage}\" />\n  </Tab>\n</FlyoutItem>\n<FlyoutItem x:Name=\"RootItem\" Title=\"Browse\"\n    Icon=\"tab_home.png\">\n  <Tab>\n    <ShellContent Route=\"RootPage\" ContentTemplate=\n        \"{DataTemplate local:ItemsPage}\" />\n  </Tab>\n</FlyoutItem> \n```", "```swift\n<ShellContent Title=\"{x:Static resources:Resources.About}\"  \n  Icon=\"tab_info.png\" Route=\"AboutPage\" \n  ContentTemplate=\"{DataTemplate local:AboutPage}\" />\n<ShellContent x:Name=\"RootItem\" Title=\"Browse\" \n  Icon=\"tab_home.png\" Route=\"RootPage\"  \n  ContentTemplate=\"{DataTemplate local:ItemsPage}\" /> \n```", "```swift\n<MenuItem Text=\"Logout\" IconImageSource=\"tab_login.png\"\n    Clicked=\"OnMenuItemClicked\">\n</MenuItem> \n```", "```swift\n<Shell \n  xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n  ...\n  Title=\"PassXYZ.Vault\"\n  x:Class=\"PassXYZ.Vault.AppShell\" \n  FlyoutIcon=\"{FontImage FontFamily=FontAwesomeSolid, \n  Color=White, \n  Glyph={x:Static style:FontAwesomeSolid.Bars}}\"\n  FlyoutBackgroundColor=\"{StaticResource Secondary}\">\n  <TabBar>                                                       //(4)\n    <ShellContent Title=\"Login\" Route=\"LoginPage\" \n      Icon=\"{FontImage FontFamily=FontAwesomeSolid, \n      Color=Black,\n      Glyph={x:Static style:FontAwesomeSolid.UserAlt}}\"\n      ContentTemplate=\"{DataTemplate local:LoginPage}\" />\n    <ShellContent Title=\"SignUp\" Route=\"SignUpPage\" \n      Icon=\"{FontImage FontFamily=FontAwesomeSolid, \n      Color=Black,\n      Glyph={x:Static style:FontAwesomeSolid.Users}}\"\n      ContentTemplate=\"{DataTemplate local:SignUpPage}\" />\n  </TabBar>\n  <FlyoutItem Title=\"About\"                                      //(1)\n    Icon=\"{FontImage FontFamily=FontAwesomeSolid, Color=Black,\n    Glyph={x:Static style:FontAwesomeSolid.Question}}\">\n    <ShellContent Route=\"AboutPage\" \n      ContentTemplate=\"{DataTemplate local:AboutPage}\">\n    </ShellContent>\n  </FlyoutItem>\n\n  <FlyoutItem x:Name=\"RootItem\" Title=\"Browse\"                   //(2)\n    Icon=\"{FontImage FontFamily=FontAwesomeSolid, Color=Black, \n    Glyph={x:Static style:FontAwesomeSolid.Home}}\">\n    <ShellContent Route=\"RootPage\" \n      ContentTemplate=\"{DataTemplate local:ItemsPage}\">\n    </ShellContent>\n  </FlyoutItem>\n  <MenuItem Text=\"Logout\" Clicked=\"OnMenuItemClicked\"            //(3)\n    IconImageSource=\"{FontImage FontFamily=FontAwesomeSolid, \n    Color=Black, \n    Glyph={x:Static style:FontAwesomeSolid.SignOutAlt}}\">\n  </MenuItem>\n</Shell> \n```", "```swift\n<TabBar>\n  <Tab Title=\"{x:Static resources:Resources.action_id_login}\" \n    Icon=\"tab_login.png\">\n    <ShellContent Route=\"LoginPage\" \n    ContentTemplate=\"{DataTemplate local:LoginPage}\" />\n  </Tab>\n  <Tab Title=\"{x:Static resources:Resources.menu_id_users}\"\n    Icon=\"tab_users.png\">\n    <ShellContent Route=\"SignUpPage\" \n    ContentTemplate=\"{DataTemplate local:SignUpPage}\" />\n  </Tab>\n</TabBar> \n```", "```swift\n<TabBar>\n  <ShellContent Title=\"{x:Static resources:Resources.action_id_login}\" \n                Icon=\"tab_login.png\"\n                Route=\"LoginPage\" \n                ContentTemplate=\"{DataTemplate local:LoginPage}\" />\n  <ShellContent Title=\"{x:Static resources:Resources.menu_id_users}\" \n                Icon=\"tab_users.png\"\n                Route=\"SignUpPage\" \n                ContentTemplate=\"{DataTemplate local:SignUpPage}\" />\n</TabBar> \n```", "```swift\n//RootPage/ItemDetailPage?ID=\"your entry ID\" \n```", "```swift\nGroup1/ItemDetailPage1 \n```", "```swift\npublic static AppShell? CurrentAppShell \n{ get; private set; } = default!;\npublic AppShell()\n{\n  InitializeComponent();\n  Routing.RegisterRoute(nameof(ItemDetailPage), \n    typeof(ItemDetailPage));\n  Routing.RegisterRoute(nameof(NewItemPage), \n    typeof(NewItemPage));\n  Routing.RegisterRoute(nameof(ItemsPage), \n    typeof(ItemsPage));\n  CurrentAppShell = this;\n} \n```", "```swift\nawait Shell.Current.GoToAsync(nameof(NewItemPage)); \n```", "```swift\nawait Shell.Current.Navigation.PopModalAsync(); \n```", "```swift\nawait Shell.Current.GoToAsync(\"..\"); \n```", "```swift\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage \n  xmlns=\"http://schemas.microsoft.com/dotnet/2021/maui\"\n  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n  x:Class=\"PassXYZ.Vault.Views.NewItemPage\"\n  **Shell.PresentationMode**=\"ModalAnimated\"                   //(1)\n  Title=\"New Item\">\n  <ContentPage.Content...>\n</ContentPage > \n```", "```swift\nawait Shell.Current.GoToAsync(\"../AboutPage\"); \n```", "```swift\n<FlyoutItem x:Name=\"RootItem\" Title=\"Browse\" \n  Icon=\"{FontImage FontFamily=FontAwesomeSolid, \n  Color=Black, \n  Glyph={x:Static style:FontAwesomeSolid.Home}}\">\n  <ShellContent Route=\"RootPage\" \n    ContentTemplate=\"{DataTemplate local:ItemsPage}\">\n  </ShellContent>\n</FlyoutItem> \n```", "```swift\nRouting.RegisterRoute(nameof(ItemsPage),\n    typeof(ItemsPage)); \n```", "```swift\nusing System.Collections.ObjectModel;\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing Microsoft.Extensions.Logging;\nusing KPCLib;\nusing PassXYZ.Vault.Services;\nusing PassXYZ.Vault.Views;\nnamespace PassXYZ.Vault.ViewModels {\n  [QueryProperty(nameof(ItemId), nameof(ItemId))]                   //(1)\n  public partial class ItemsViewModel : BaseViewModel {\n    readonly IDataStore<Item> dataStore;\n    ILogger<ItemsViewModel> logger;\n    public ObservableCollection<Item> Items { get; }\n    public ItemsViewModel(IDataStore<Item> dataStore, \n      ILogger<ItemsViewModel> logger) {\n      this.dataStore = dataStore;\n      this.logger = logger;\n      Title = \"Browse\";\n      Items = new ObservableCollection<Item>();\n      IsBusy = false;\n    }\n    [ObservableProperty]\n    private Item? selectedItem = default;\n    [ObservableProperty]\n    private string? title;\n    [ObservableProperty]\n    private bool isBusy;\n    [RelayCommand]\n    private async Task AddItem(object obj) {\n      await Shell.Current.GoToAsync(nameof(NewItemPage));\n    }\n    public override async void OnItemSelecteion(object sender) {\n      Item? item = sender as Item;\n      if (item == null)\n      {\n        logger.LogWarning(\"item is null.\");\n        return;\n      }\n      logger.LogDebug($\"Selected item is {item.Name}\");\n      if (item.IsGroup)\n      {\n        await Shell.Current.GoToAsync(                          //(3)\n          $\"{nameof(ItemsPage)}?\n          {nameof(ItemsViewModel.ItemId)}={item.Id}\");\n      }\n      else\n      {\n        await Shell.Current.GoToAsync(                          //(4)\n          $\"{nameof(ItemDetailPage)}?\n          {nameof(ItemDetailViewModel.ItemId)}={item.Id}\");\n      }\n    }\n    [RelayCommand]\n    private async Task LoadItems() {\n      try {\n        Items.Clear();\n        var items = await dataStore.GetItemsAsync(true);\n        foreach (var item in items) {\n            Items.Add(item);\n        }\n        logger.LogDebug($\"IsBusy={IsBusy}, \n          added {Items.Count()} items\");\n      }\n      catch (Exception ex) {\n        logger.LogError(\"{ex}\", ex);\n      }\n      finally {\n        IsBusy = false;\n        logger.LogDebug(\"Set IsBusy to false\");\n      }\n    }\n    public string ItemId {                                      //(2)\n      get {\n          return SelectedItem == null ? \n            string.Empty : SelectedItem.Id;\n      }\n      set {\n        if (string.IsNullOrEmpty(value))\n        {\n          SelectedItem = null;\n        }\n        else {\n          var item = dataStore.GetItem(value);\n          if (item != null) {\n              SelectedItem = item;\n          }\n          else {\n            throw new ArgumentNullException(nameof(ItemId), \n              \"cannot find the selected item\");\n          }\n        }\n      }\n    }\n    public void OnAppearing() {\n      if (SelectedItem == null) {\n        Title = dataStore.SetCurrentGroup();\n      }\n      else {\n        Title = dataStore.SetCurrentGroup(SelectedItem);\n      }\n      // load items\n      logger.LogDebug($\"Loading group {Title}\");\n      IsBusy = true;\n    }\n  }\n} \n```", "```swift\n[QueryProperty(nameof(ItemId), nameof(ItemId))]\npublic partial class ItemDetailViewModel : BaseViewModel\n{\n  readonly IDataStore<Item> dataStore;\n  ILogger<ItemDetailViewModel> logger;\n  public ObservableCollection<Field> Fields { get; set; }\n  public ItemDetailViewModel(IDataStore<Item> dataStore, \n    ILogger<ItemDetailViewModel> logger) {\n      this.dataStore = dataStore;\n      this.logger = logger;\n      Fields = new ObservableCollection<Field>();\n  }\n  [ObservableProperty]\n  private string? title;\n  [ObservableProperty]\n  private string? id;\n  [ObservableProperty]\n  private string? description;\n  [ObservableProperty]\n  private bool isBusy;\n  private string? itemId;\n  public string ItemId {                                       //(1)\n    get {\n      if(itemId == null) { \n        throw new NullReferenceException(nameof(itemId)); \n      }\n      return itemId;\n    }\n    set {\n      itemId = value;\n      LoadItemId(value);                                       //(2)\n    }\n  }\n  public override void OnItemSelecteion(object sender) {\n      logger.LogDebug(\"OnItemSelecteion is invoked.\");\n  }\n  public void LoadItemId(string itemId) {\n    if (itemId == null) { \n      throw new ArgumentNullException(nameof(itemId)); }\n    var item = dataStore.GetItem(itemId);                      //(3)\nif (item == null) { \n  throw new NullReferenceException(itemId); }\n    Id = item.Id;\n    Title = item.Name;\n    Description = item.Description;\n    if (!item.IsGroup)\n    {\n      PwEntry dataEntry = (PwEntry)item;                       //(4)\n      Fields.Clear();\n      List<Field> fields = dataEntry.GetFields(\n        GetImage: FieldIcons.GetImage);                        //(5)\n      foreach (Field field in fields) {\n          Fields.Add(field);\n      }\n      logger.LogDebug($\"ItemDetailViewModel:\n        Name={dataEntry.Name}.\");\n    }\n  }\n} \n```", "```swift\npublic interface IDataStore<T>\n{\n    T? GetItem(string id, bool SearchRecursive = false);\n    Task<T?> GetItemAsync(string id, bool SearchRecursive =\n        false);\n    Task AddItemAsync(T item);\n    Task UpdateItemAsync(T item);\n    Task<bool> DeleteItemAsync(string id);\n    Task<IEnumerable<T>> GetItemsAsync(bool forceRefresh =\n        false);\n} \n```", "```swift\npublic interface IUserService<T>\n{\n    T GetUser(string username);\n    Task AddUserAsync(T user);\n    Task DeleteUserAsync(T user);\n    List<string> GetUsersList();\n    Task<bool> LoginAsync(T user);\n    void Logout();\n} \n```", "```swift\nIDataStore into ItemsViewModel using constructor injection as an example:\n```", "```swift\nreadonly IDataStore<Item> dataStore;\nILogger<ItemsViewModel> logger;\npublic ObservableCollection<Item> Items { get; }\npublic ItemsViewModel(IDataStore<Item> dataStore, ILogger<ItemsViewModel> logger)\n{\n  this.dataStore = dataStore;\n  this.logger = logger;\n  Title = \"Browse\";\n  Items = new ObservableCollection<Item>();\n  IsBusy = false;\n} \n```", "```swift\nusing KPCLib;\nusing Microsoft.Extensions.Logging;\nusing System.Collections.ObjectModel;\nusing User = PassXYZLib.User;\nnamespace PassXYZ.Vault.Services;\npublic class UserService : IUserService<User>\n{\n  readonly IDataStore<Item> dataStore;\n  ILogger<UserService> logger;\n  private User? _user = default;\n  public UserService(IDataStore<Item> dataStore,                //(1)\n    ILogger<UserService> logger) {\n    this.dataStore = dataStore;\n    this.logger = logger;\n  }\n  public User GetUser(string username) {\n    User user = new User();\n    user.Username = username;\n    logger.LogDebug($\"Path={user.Path}\");\n    return user;\n  }\n  public async Task DeleteUserAsync(User user) {\n    await Task.Run(() => {\n      logger.LogDebug($\"Remove Path={user.Path}\");\n    });\n  }\n  public List<string> GetUsersList() {\n    return User.GetUsersList();\n  }\n  public async Task AddUserAsync(User user) {\n    if (user == null) { \n        throw new ArgumentNullException(nameof(user), \"User cannot be \n          null\"); }\n    _user = user;\n    await dataStore.SignUpAsync(user);\n  }\n  public async Task<bool> LoginAsync(User user) {\n    if (user == null) { \n        throw new ArgumentNullException(nameof(user), \"User cannot be \n          null\"); }\n    _user = user;\n    return await dataStore.ConnectAsync(user);\n  }\n  public void Logout() {\n    dataStore.Close();\n    logger.LogDebug(\"Logout\");\n  }\n} \n```", "```swift\nusing System.Diagnostics;\nusing PassXYZLib;\nnamespace PassXYZ.Vault.Services;\npublic class LoginService : PxUser {                             //(1)\n  private IUserService<User> _userService;\n  private const string PrivacyNotice = \"Privacy Notice\";\n  public static bool IsPrivacyNoticeAccepted {\n    get => Preferences.Get(PrivacyNotice, false);\n    set => Preferences.Set(PrivacyNotice, value);\n  }\n  public LoginService(IUserService<User> userService) {\n    _userService = userService;                                  //(2)\n  }\n  public async Task<bool> LoginAsync() {\n    return await _userService.LoginAsync(this);                  //(3)\n  }\n  public async Task SignUpAsync() {\n    await _userService.AddUserAsync(this);                       //(4)\n  }\n  public override void Logout() {\n    _userService.Logout();\n  }\n  public async Task<string> GetSecurityAsync() {\n    if (string.IsNullOrWhiteSpace(Username)) { \n      return string.Empty; }\n    string data = await SecureStorage.GetAsync(Username);\n    return data;\n  }\n  public async Task SetSecurityAsync(string password) {\n    if (string.IsNullOrWhiteSpace(Username) || \n      string.IsNullOrWhiteSpace(password)) { return; }\n    await SecureStorage.SetAsync(Username, password);\n  }\n  public async Task<bool> DisableSecurityAsync() {\n    ...\n  }\n} \n```", "```swift\nusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing Microsoft.Extensions.Logging;\nusing PassXYZLib;\nusing PassXYZ.Vault.Views;\nusing PassXYZ.Vault.Services;\nusing System.Diagnostics;\nnamespace PassXYZ.Vault.ViewModels\n{\n  public partial class LoginViewModel : ObservableObject\n  {\n    private LoginService _currentUser;\n    ILogger<LoginViewModel> _logger;\n    public LoginViewModel(LoginService user,                    //(1)\n      ILogger<LoginViewModel> logger)\n    { \n      _currentUser = user;\n      _logger = logger;\n    }\n    [RelayCommand(CanExecute = nameof(ValidateLogin))]\n    private async Task Login(object obj)\n    {\n      ...\n      bool status = await _currentUser.LoginAsync();            //(2)\n      ...\n    }\n    private bool ValidateLogin()\n    {\n      var canExecute = !String.IsNullOrWhiteSpace(Username)\n          && !String.IsNullOrWhiteSpace(Password);\n      return canExecute;\n    }\n    [RelayCommand(CanExecute = nameof(ValidateSignUp))]\n    private async Task SignUp()\n    {\n      ...\n      await _currentUser.SignUpAsync();                         //(3)\n      ...\n    }\n    private bool ValidateSignUp()\n    {\n      var canExecute = !String.IsNullOrWhiteSpace(Username)\n          && !String.IsNullOrWhiteSpace(Password)\n          && !String.IsNullOrWhiteSpace(Password2);\n\n      if (canExecute) {\n          return Password!.Equals(Password2);\n      }\n      return canExecute;\n    }\n    [ObservableProperty]\n    private bool isBusy = false;\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(LoginCommand))]         //(4)\n    [NotifyCanExecuteChangedFor(nameof(SignUpCommand))]\n    private string? username = default;\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(LoginCommand))]\n    [NotifyCanExecuteChangedFor(nameof(SignUpCommand))]\n    private string? password = default;\n    [ObservableProperty]\n    [NotifyCanExecuteChangedFor(nameof(SignUpCommand))]\n    private string? password2 = default;\n    public bool IsDeviceLockEnabled\n    {\n      ...\n    }\n    public List<string> GetUsersList() {\n        return User.GetUsersList();\n    }\n    public void Logout() {\n      _currentUser.Logout();\n    }\n  }\n} \n```"]