["```kt\nclass ExampleViewModel {\n    private val repository: Repository = Repository()\n    fun doSomething() {\n        repository.use()\n    }\n}\n```", "```kt\nfun main() {\n    val vm = ExampleViewModel()\n    vm.doSomething()\n}\n```", "```kt\nobject DependencyContainer {\n    val repo: Repository = Repository()\n}\n```", "```kt\nclass ExampleViewModel {\n    private val repository: Repository = \n        DependencyContainer.repo\n    fun doSomething() {\n        repository.use()\n    }\n}\n```", "```kt\nclass ExampleViewModel constructor(private val repo: Repository) {\n    fun doSomething() { repo.use() }\n}\n```", "```kt\nfun main() {\n    val repoDependency = DependencyContainer.repository\nval vm = ExampleViewModel(repoDependency)\nvm.doSomething()\n}\n```", "```kt\nclass RestaurantsRepository {\n    private var restInterface: RestaurantsApiService =\n        Retrofit.Builder()\n             .addConverterFactory(\n                 GsonConverterFactory.create())\n             .baseUrl(\"your_firebase_database_url\")\n            .build()\n            .create(RestaurantsApiService::class.java)\n    [...]\n}\n```", "```kt\nclass RestaurantDetailsViewModel(…): ViewModel() {\n    private var restInterface: RestaurantsApiService\n    [...]\n    init {\n        val retrofit: Retrofit = Retrofit.Builder()\n            .addConverterFactory(GsonConverterFactory.create())\n            .baseUrl(\"your_firebase_database_url\")\n            .build()\n        restInterface = retrofit\n            .create(RestaurantsApiService::class.java)\n        [...]\n    }\n    [...]\n}\n```", "```kt\nclass RestaurantsRepository {\n    private var restInterface: RestaurantsApiService = \n        Retrofit.Builder()\n            .[...]\n            .create(RestaurantsApiService::class.java)\n    private var restaurantsDao = RestaurantsDb\n        .getDaoInstance(\n            RestaurantsApplication.getAppContext()\n        )\n    suspend fun toggleFavoriteRestaurant(…) = {…}\n    suspend fun getRestaurants(): List<Restaurant> {…}\n    [...]\n}\n```", "```kt\nclass RestaurantsRepositoryTest {\n    @Test\n    fun repository_worksCorrectly() {\n        val repo = RestaurantsRepository()\n        assertNotNull(repo)\n        // Perform other verifications\n    }\n}\n```", "```kt\nclass RestaurantsRepository {\n    […]\n    private var restaurantsDao = RestaurantsDb\n        .getDaoInstance(\n            RestaurantsApplication.getAppContext()\n        )\n    suspend fun toggleFavoriteRestaurant(…) = {…}\n    suspend fun getRestaurants(): List<Restaurant> {…}\n    [...]\n}\n```", "```kt\nimport javax.inject.Inject\n@Inject\nval vm: ExampleViewModel\nfun main() {\n    vm.doSomething()\n}\n```", "```kt\nclass ExampleViewModel @Inject constructor(private val repo:Repository) {\n    fun doSomething() { repo.use() }\n}\n```", "```kt\nclass Repository @Inject constructor(val retrofit: Retrofit){\n    fun use() { retrofit.baseUrl() }\n}\n```", "```kt\n@Module\nobject DataModule {\n    @Provides\n    fun provideRetrofit(): Retrofit {\n        return Retrofit.Builder().baseUrl(\"some_url\").build()\n    }\n}\n```", "```kt\n@DefineComponent()\ninterface MyCustomComponent(…) { /* component build code */ }\n```", "```kt\n@Module\n@InstallIn(MyCustomComponent::class)\nobject DataModule {\n    @Provides\n    fun provideRetrofit(): Retrofit { […] }\n}\n```", "```kt\n    buildscript {\n        ...\n        dependencies {\n            ...\n            classpath 'com.google.dagger:hilt-android-\n                gradle-plugin:2.40.5'\n        }\n    }\n    ```", "```kt\n    plugins {\n        […]\n        id 'kotlin-kapt'\n        id 'dagger.hilt.android.plugin'\n    }\n    ```", "```kt\n    dependencies {\n        […]\n        implementation \"com.google.dagger:hilt-\n            android:2.40.5\"\n        kapt \"com.google.dagger:hilt-compiler:2.40.5\"\n    }\n    ```", "```kt\n    @HiltAndroidApp\n    class RestaurantsApplication: Application() { […] }\n    ```", "```kt\n@Composable\nprivate fun RestaurantsApp() {\n   val navController = rememberNavController()\n   NavHost(navController, startDestination = \"restaurants\") {\n      composable(route = \"restaurants\") {\n         val viewModel: RestaurantsViewModel = viewModel()\n         RestaurantsScreen(state = viewModel.state.value, […])\n      }\n      composable(…) { RestaurantDetailsScreen() }\n   }\n}\n```", "```kt\n    dependencies {\n        […]\n        implementation \"com.google.dagger:hilt-\n            android:2.40.5\"\n        kapt \"com.google.dagger:hilt-compiler:2.40.5\"\n        implementation 'androidx.hilt:hilt-navigation-\n            compose:1.0.0'\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantsApp() {\n       val navController = rememberNavController()\n       NavHost(navController, startDestination = \n               \"restaurants\") {\n          composable(route = \"restaurants\") {\n             val viewModel: RestaurantsViewModel = \n                 hiltViewModel()\n             RestaurantsScreen(…)\n          }\n          composable(…) { RestaurantDetailsScreen() }\n       }\n    }\n    ```", "```kt\n    @AndroidEntryPoint\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                RestaurantsAppTheme { RestaurantsApp() }\n            }\n        }\n    }\n    ```", "```kt\n    class RestaurantsViewModel constructor(\n       private val getRestaurantsUseCase: \n           GetInitialRestaurantsUseCase,\n        private val toggleRestaurantsUseCase: \n            ToggleRestaurantUseCase\n    ) : ViewModel() {\n        private val _state = mutableStateOf(...)\n        [...]\n    }\n    ```", "```kt\n    @HiltViewModel\n    class RestaurantsViewModel @Inject constructor(\n       private val getRestaurantsUseCase: […] ,\n       private val toggleRestaurantsUseCase: […]) : \n           ViewModel() {\n        [...]\n    }\n    ```", "```kt\n    class GetInitialRestaurantsUseCase @Inject constructor(\n        private val repository: RestaurantsRepository,\n        private val getSortedRestaurantsUseCase: \n            GetSortedRestaurantsUseCase) {\n        suspend operator fun invoke(): List<Restaurant> { … }\n    }\n    ```", "```kt\nclass RestaurantsRepository {\n    private var restInterface: RestaurantsApiService =\n        Retrofit.Builder()\n        […]\n        .create(RestaurantsApiService::class.java)\n    private var restaurantsDao = RestaurantsDb\n        .getDaoInstance(\n            RestaurantsApplication.getAppContext()\n        )\n    […]\n}\n```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object RestaurantsModule { }\n    ```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nobject RestaurantsModule {\n    @Singleton\n    @Provides\n    fun provideRoomDatabase(\n        @ApplicationContext appContext: Context\n    ): RestaurantsDb {\n        return Room.databaseBuilder(\n            appContext,\n            RestaurantsDb::class.java,\n            \"restaurants_database\"\n        ).fallbackToDestructiveMigration().build()\n    }\n}\n```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object RestaurantsModule {\n      @Provides\n    fun provideRoomDao(database: RestaurantsDb): \n          RestaurantsDao  {\n            return database.dao\n      }\n      @Singleton\n      @Provides\n      fun provideRoomDatabase(\n          @ApplicationContext appContext: Context\n      ): RestaurantsDb { ... }\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object RestaurantsModule {\n        @Provides\n        fun provideRoomDao(database: RestaurantsDb): […] {\n            return database.dao\n        }\n        @Singleton\n        @Provides\n        fun provideRoomDatabase(@ApplicationContext\n            appContext: Context): RestaurantsDb {  [...]  }\n        @Singleton\n        @Provides\n        fun provideRetrofit(): Retrofit {\n            return Retrofit.Builder()\n                .addConverterFactory([…])\n                .baseUrl(\"[…]\")\n                .build()\n        }\n        @Provides\n        fun provideRetrofitApi(retrofit: Retrofit):  \n            RestaurantsApiService {\n        return retrofit\n            .create(RestaurantsApiService::class.java)\n        }\n    }\n    ```", "```kt\n    @Singleton\n    class RestaurantsRepository @Inject constructor(\n        private val restInterface: RestaurantsApiService,\n        private val restaurantsDao: RestaurantsDao\n    ) {\n        suspend fun toggleFavoriteRestaurant(…) = […]\n             […]  \n        }\n    ```", "```kt\n    class GetSortedRestaurantsUseCase @Inject constructor(\n        private val repository: RestaurantsRepository\n    ) {\n        suspend operator fun invoke(): List<Restaurant> {\n            return repository.getRestaurants()\n                .sortedBy { it.title }\n        }\n    }\n    ```", "```kt\n    class ToggleRestaurantUseCase @Inject constructor(\n        private val repository: RestaurantsRepository,\n    private val getSortedRestaurantsUseCase: \n            GetSortedRestaurantsUseCase\n    ) {\n        suspend operator fun invoke(id: Int, oldValue: \n            Boolean): List<Restaurant> {\n            val newFav = oldValue.not()\n            repository.toggleFavoriteRestaurant(id, newFav)\n            return getSortedRestaurantsUseCase()\n        }\n    }\n    ```", "```kt\n    @Database(\n        entities = [LocalRestaurant::class],\n        version = 3,\n        exportSchema = false\n    )\n    abstract class RestaurantsDb : RoomDatabase() {\n        abstract val dao: RestaurantsDao\n    }\n    ```", "```kt\n@HiltAndroidApp\nclass RestaurantsApplication: Application()\n```"]