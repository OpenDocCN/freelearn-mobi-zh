- en: Chapter 7. Publishing Our iOS Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a great game is hard work. Our goal as game developers is to have an
    application that can be played by thousands, if not millions of people. We want
    them to play what we crafted in those long weeks and months. Before the app is
    released, we'd also probably want to have others test the game to weed out any
    bugs that might have been missed. Publishing on the iOS platform can allow us
    to do both.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: We can allow others to try out our games before release through the **TestFlight**
    service, and of course, we can then submit our game for release on the Apple App
    Store. After release, we can submit updates. These updates and future versions
    could be just to patch up some minor bugs we might have missed in the initial
    releases, add new features, such as levels, achievements, and other Apple services,
    or we might need to update our app later on to adhere to the eventual updates
    that will happen with the iOS platform.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover a few main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our apps for either testing or publishing in iTunes Connect
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps to submit our app to be played in the app store
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary of the TestFlight service for testing in the prerelease phase
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use iTunes Connect to create updates to our app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We won't tell you how to market your game, as that's an entire book/topic on
    its own that depends on your budget and preferences. However, we will say that
    if you or your beta testers found playing your game fun, there is a chance that
    others will too. Submitting to the app store does not warrant instant success.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Even unreleased games that get high accolades at the ever growing list of indie
    game reward shows or game jams might not have seen that praise reflected in sales
    and downloads after release. We have to remember that the game development scene,
    thanks in part to gaming's position in popular culture, is a sea of thousands
    of developers, both big and small, trying to make the next great game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Don't let that discourage you though. If your game does well, which it has the
    ability to with the Apple App Store, then it could be a life-changing experience.
    No matter the outcome, let the experience of building your own game and learning
    this development platform humble you and make you want to be an even better developer
    for your next project. Eventually, that hard work will pay off.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The ever changing process of app submission
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move forward in explaining the steps needed to publish your game,
    we wanted to note a little fact about this subject. This fact is that the exact
    steps needed to submit our iOS apps for testing or publication is one that changes
    rather often. Every couple of months this process might change from how we describe
    it here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Over the years, since the start of iOS development, Apple has continually made
    this process easier and more streamlined. Xcode does much more of the signing/provisioning
    work for us than it did in the past, and the worries of our app taking forever
    to appear in the App Store are hardly an issue.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when the Swift game PikiPop was submitted in November, 2014, it
    only took five business days between the day it was submitted for review to when
    it appeared in the App Store for the public. This review time will vary for each
    of us, but as long as there aren''t any terrible errors or policy violations in
    our apps, we can expect our creations to be public for millions to potentially
    play. To make sure that the publication of your game goes smoothly, it''s best
    to review the App Review Guidelines found here: [https://developer.apple.com/app-store/review/guidelines/](https://developer.apple.com/app-store/review/guidelines/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We wrote this book in the late summer of 2015, so if you are reading this at
    a much later date and feel some of these processes might be out of date, make
    sure to see the most recent updates here on Apple''s own App submission documentation
    page:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Before submitting your app
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is one more potential development snag we must warn about before you choose
    to submit your app to the app store. As of the time of this publication, if you
    build your app in a beta version of Xcode, that app will be rejected from review.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: During the course of this book, we have been building our apps and going over
    features that currently are in the beta version of Xcode 7\. This was because
    there are a number of new features for iOS 9 / Xcode 7 that weren't there in iOS
    8 / Xcode 6, namely, the GameplayKit framework and visual editor tools for SceneKit
    that make Xcode development as hands on as multiplatform game engines.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By the time you are reading this, Xcode 7 should no longer be in the beta phase.
    Therefore, you should be able to publish an iOS 9 (or later) game without worrying
    if these features are *beta only*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: When you build your games for releasing to the App Store, make sure to first
    build them in the current non-beta version of Xcode. Use the beta versions of
    Xcode to test the newest unreleased features as well as up and coming iOS builds
    during the prerelease phase.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our apps for iTunes Connect
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So you have coded, simulated, and hopefully enjoyed playing a bit of that iOS
    game you worked so much on. The next step is to bring your app into the beta/prerelease
    phase. The goal of this phase is to get your game into the hands of a smaller
    pool of gamers/testers to simulate what the experience could be for the thousands,
    if not millions of people who could potentially play your game. The very first
    step to this, if you haven''t already, is to sign up for the Apple Developer Program:
    [https://developer.apple.com/programs/](https://developer.apple.com/programs/).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: There is a cost involved and that cost will be based on your development goals.
    For individual, sole proprietor business accounts, it costs $99 a year to be an
    iOS developer. If you are working as part of a group of developers, then the Enterprise
    plan of $299.99 might be a better choice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In your developer page, you will also have to make sure that your provisioning
    profile is set up correctly. This step used to be one of the toughest things to
    complete in being an iOS developer, but Xcode has made this process more automated
    with each new update. If you''ve been testing your app in Xcode with an actual
    device, you''ve obviously already done this step. If not, here''s more information
    on setting up your provision profile(s): [https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ProvisioningDevelopment.html](https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ProvisioningDevelopment.html).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'The portal that will be your best friend in the process of publishing your
    app is iTunes Connect here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[https://itunesconnect.apple.com/](https://itunesconnect.apple.com/)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: iTunes Connect is where you can see your submitted apps, track various app analytics,
    assign TestFlight beta testers, and view your app's revenue. We won't be able
    to give a full rundown of every feature available in iTunes Connect; mainly we'll
    look at the steps needed to post, publish, and update your game. Feel free to
    dive into all of the features and settings that iTunes Connect can provide for
    your app as the features grow with every new iOS update.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Submitting your app in the testing/beta phase
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get right into the steps needed to submit your app. First, we shall talk
    about the testing/beta phase of your game.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a summary of the steps needed for the testing/beta phase of your game:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Create an iTunes Connect app record.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the build string.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Archive and validate your app.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload your app to iTunes Connect.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beta test your game with the TestFlight service.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyze crash reports and solicit feedback from testers.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Steps *1*-*4* are the same for both the testing and release phase of your game.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Creating an iTunes Connect app record
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the steps needed to add your App to the iTunes Connect app record:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Log into your account at [https://itunesconnect.apple.com/](https://itunesconnect.apple.com/)
    and go to the **My Apps** section.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **+** icon located on the top-left corner of the page and pick
    **New iOS App** from the dropdown.![Creating an iTunes Connect app record](img/00078.jpeg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the appropriate fields and click on **Create** if you already know the
    information for this data. For those unsure what to place here, we review each
    of these fields in the following screenshot:![Creating an iTunes Connect app record](img/00079.jpeg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **SKU**, the **Version**, and the **Bundle ID** fields. The SKU must
    be unique and not in use already as Apple will use this for the identification
    of your app in the store. The **Version** and **Bundle ID** fields must match
    the build settings you have set in your game's Xcode project. The **Bundle ID**
    field is a dropdown that at first might only show the Wildcard App/Bundle ID.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'The Wildcard ID is one of two types of Bundle IDs, the other being the Explicit
    App ID. Here''s a link to Apple''s documentation/FAQ for which type of ID would
    be best for your game: [https://developer.apple.com/library/ios/qa/qa1713/_index.html](https://developer.apple.com/library/ios/qa/qa1713/_index.html).
    In short, if you are going to use Apple services, such as Notifications and Game
    Center achievements, you would need an Explicit App ID, if not, then the Wildcard
    ID is best.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you wish to use the Explicit Bundle ID, you will have to register your app''s
    Bundle ID in the Apple Developer portal. The IDs that are registered on the Developer
    portal will populate that dropdown. Here''s the link to that page in the developer
    site: [https://developer.apple.com/account/ios/identifiers/bundle/bundleCreate.action](https://developer.apple.com/account/ios/identifiers/bundle/bundleCreate.action).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The **Bundle ID Suffix** field is found in your project's `info.plist` file.
    It's a unique string that is created by your Xcode project, also known as the
    Bundle Seed ID. We'll show you where to find this and other bundle/build-based
    information when we go over the *Updating the build string* step next.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The **Name** field is what your game's name will be in the App Store. This is
    what people searching for and hopefully visiting your game's landing page will
    see. The **Primary Language** dropdown is what your game's default language will
    be if the app store can't localize your game's information for that territory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Updating the build string
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The build string represents an iteration of your game's bundle. It's a two-period-separated
    list of positive integers, as in *1.2.3*. Basically, the build string is another
    layer of versioning added for your game. When making an iOS app, as in our case,
    changing this build information will automatically be seen by iTunes Connect during
    the upload step. If we don't update this field, even if we change our game's code,
    iTunes connect will still think that you are trying to upload the same build and
    will reject your upload.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s where you can find this information in your Xcode project:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the build string](img/00080.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: The bundle identifier, build string, version number, and other app identification/global
    settings are found on the **General** tab in the Inspector window when we click
    on the project's main file in the Navigation pane. We can also find this information
    represented in the `info.plist` file. Make sure that these fields match your iTunes
    Connect record.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Now let's move on to uploading our game in Xcode to iTunes Connect.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Archive and validate your app
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step in the app publishing process is to archive your game's project
    bundle. To do this, go to the top dropdown menus and then navigate to **Project**
    | **Archive**. The archive selection might be inaccessible if your test device
    is the simulator as to the iOS Device.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Once built, your archived app will be seen in the Archives organizer with other
    archives you have created from this and other apps. This window will open when
    you build the archive, but it can be accessed at any time by going to **Window**
    | **Organizer** in the top menu.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'The window can be seen in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Archive and validate your app](img/00081.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Next, we validate your game to make sure that it fits the minimum requirements
    for submission. To do this, follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Validate** button found on the right side of the preceding Archives
    organizer window.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up window will show where you choose the Development Team that would do
    the provisioning for this app. (This is assuming your Provisioning profile was
    set up correctly.) Click on **Choose** to move to the next step.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open more of the popup showing a summary of your app before performing
    the actual validation. Information such as your app's Bundle ID along with the
    Bundle Seed ID mentioned earlier can be seen here as well.![Archive and validate
    your app](img/00082.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Validate** and if the information in your app project is correctly
    matching what we set up on iTunes Connect, then your app should be validated and
    ready for submission to iTunes Connect and eventually the App Store itself.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Archive and validate your app](img/00083.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: If your app is not validated, make sure that all of your information in iTunes
    Connect matches, most importantly the Bundle ID.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *App validation* step could probably be skipped just by clicking on the
    **Upload To App Store…** button, but is a good way to test early on if everything
    check out with our game.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'More on app validation can be found here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/recipes/xcode_help-archives_organizer/articles/ValidatingYourApp.html](https://developer.apple.com/library/mac/recipes/xcode_help-archives_organizer/articles/ValidatingYourApp.html)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Upload your app to iTunes Connect
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This step should now be rather simple. Click on the blue **Upload To App Store…**
    button, and you should get the same prompts seen from the app validation stage.
    You'll be asked to choose the Development Team; show your app's details, and you
    can choose to upload your app by clicking on **Submit**. If your game validated
    previously, then it should upload smoothly to iTunes Connect. Now your game should
    be one step closer to being available for either beta testing or purchase/download
    on the App Store.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Beta test your game with the TestFlight service
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every app should have at least some form of beta testing before release with
    video games usually being the type of apps that need it more than others, as games
    tend to have more variables and chances for crashing than your run-of-the-mill
    mobile program. Also, the Apple services, such as GameCenter and In-App purchases,
    can't be tested correctly without moving to this phase.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: In the past, the only way to test iOS apps before release was using the ad hoc
    distribution method, validating individual devices with their UDID, and giving
    the testers a download with a manifest file that would allow the app to actually
    work on their device. This is where Apple differs greatly from other platforms
    such as Android. Apple is very careful in keeping what developers like to call
    a *walled garden* with their application distribution.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'In the past, this was a bit of a headache and led to a rather convoluted ad
    hoc setup as compared with Android resulting in app bugs not being noted until
    after the release. To help keep the integrity of Apple''s app distribution and
    give developers a better way of pretesting their apps easily and to have more
    people than the original 100 device limit, the TestFlight service was created.
    The TestFlight icon is seen here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta test your game with the TestFlight service](img/00084.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'TestFight is an app that anybody can download from the Apple App store for
    their iOS device. For you, the developer, it can be a great tool for early distribution
    of your games. TestFlight testers are segmented into two groups: internal testers
    and external testers. Internal testers are made up of your own team members, and
    you can have a maximum of 25 internal testers.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: In iTunes Connect, you can set roles for your team in the **Users and Roles**
    main section. These roles include Admin, Technical, Marketing, and others. The
    members that are in the Admin and Technical category are those whom you can assign
    as internal testers. Making those users internal testers is as easy as turning
    on the **Internal Testers** switch next to their name.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta test your game with the TestFlight service](img/00085.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: To have these users test your game in TestFlight, locate your game in the **My
    Apps** section of iTunes Connect. If your game's build was successfully added
    to iTunes Connect from the steps provided in the previous section, then you should
    see it listed in the **Prerelease** tab.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta test your game with the TestFlight service](img/00086.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you upload your app to iTunes Connect they can be divided into versions,
    which are then subdivided into their own builds. For example, version 1.0 (1)
    is version 1.0, build 1 of your game, whereas 1.0(1.2) would be version 1.0 /
    build 1.2 of your game. Changing the build string in your project and then uploading
    that new build is how you can divide your app for this page in iTunes Connect.
    We will discuss more on this while creating a new update to your game, but this
    is the process for versioning the prerelease builds.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to click on the build or version, which should open the build's
    own metadata page. Fill in this information to better help your testers know whom
    to contact and what to test. This information is what your testers will see when
    they download your game's beta version.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta test your game with the TestFlight service](img/00087.jpeg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: To allow this build/version for TestFlight testing, simply switch on the **TestFlight
    Beta Testing** switch found on the upper-right side of the version's listing in
    the **Prerelease** tab.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Beta test your game with the TestFlight service](img/00088.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Now to have your testers test this build in their TestFlight app, simply click
    on the **Internal Testers** tab next to the **Builds** tab on in the game's prerelease
    page, click on the checkmark next to their name and then click on **Invite**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: They should get an e-mail to accept that invite, and you will see which build
    they are testing once they installed it in TestFlight.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: External tester invites
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To get external testers for your game with TestFlight is also a rather simple
    process with one caveat; your app needs to be submitted for beta review. Doing
    so is simple though all you need to do is to click on the **Submit For Beta App
    Review** link at the right side of your app's build; again in the **Builds** tab
    of the **Prerelease** section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: As with the actual App Store submission, it might involve waiting before moving
    to the next step. The wait is not as long as the full app submission and is a
    very good sign that all will go well when you do the public release. Unlike internal
    testers, all of the metadata must be completed but you can have up to 1000 testers!
    You can start to invite testers once the **Submit For Beta App Review** link is
    tapped and your app is waiting for beta test review.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Now go to the **External Testers** tab in the **Prerelease** page and then click
    on the **+** button to add them with their e-mail address and (optionally) their
    first and last name. Click on **Next** to add that person to your invite list.
    Note that you only have 30 days for external testers to review that build of your
    game.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![External tester invites](img/00089.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Once your app passes beta review, your external testers can test your app just
    like your internal testers can.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing crash reports and feedback from testers
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have people testing your game, take notes from their e-mails on
    what issues there might be in your game and then go back to your game's project
    to do the needed fixes. Update the build number in the build string of your Xcode
    project and reupload the build to easily allow your testers to keep up to date
    with each new prerelease update.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: App crash reports can be viewed in the **App Analytics** main section of iTunes
    Connect, as seen in the image from PikiPop's information as follows. However,
    it seems that these detailed crash analytics are for after release and not during
    prerelease.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing crash reports and feedback from testers](img/00090.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'More on TestFlight and even a video explanation can be found on Apple''s official
    page on the subject as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/testflight/](https://developer.apple.com/testflight/)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Submitting your game for review
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the point in your game's development you've worked so hard for, submitting
    it to the Apple App Store. The good news is that most of the work has already
    been done! To submit your game for review, at this point, all you have to do is
    go to your app's **Versions** tab and click on the **Submit For Review** tab.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see this in the following *Adventure app* example image:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Submitting your game for review](img/00091.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: 'You will be asked a few questions before the actual submission, such as about
    Export Compliance, Content rights, and **Advertising Identifier** (**IDFA**) information.
    More information on IDFA can be found here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html#//apple_ref/doc/uid/TP40011225-CH33-SW8](https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SubmittingTheApp.html#//apple_ref/doc/uid/TP40011225-CH33-SW8)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the waiting game begins with your game in the *Waiting For Review* status.
    Again, the wait time for app approval will vary but is usually much less than
    it used to be in the past. Hopefully, all goes well and you will see a green mark
    stating your game''s submitted version number with the words **Ready for Sale**;
    as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![Submitting your game for review](img/00092.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: Congrats! Your game should be now located in the App Store for everyone with
    an iOS device to download and play! Make sure to check out the various analytics
    tools iTunes Connect provides to keep a pulse on your game.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Updating your game
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Games today are almost never a one-shot deal. They tend to be a living application
    through updates, add-ons, and fixes even after release. Updates to your app will
    be working to any future iOS updates, adding new game content, or a combination
    of both. To do this, simply repeat much of the processes from the *build string*
    phase starting with the creation of a new version number. Doing so will create
    a new section in your **Builds** tab under **Prerelease** as seen with PikiPop''s
    own page as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating your game](img/00093.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: You can use TestFlight beta test to test the new build with internal and external
    testers just as you did before. To make ready the newest version for release,
    click on the **New Version** button on the **Versions** main tab and submit the
    newest version's number in the popup.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating your game](img/00094.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: The **Versions** tab will now be divided into the current version and the new
    version via easy-to-navigate tabs. Like in the original release, you can fill
    in various metadata as well as information for the players for what this new update
    will entail. Submit the version for review and once approved, the newest game
    update will be in the app store that players will either automatically download
    or be notified about, based on their device's App Store update settings.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: That about does it! If more game frameworks and tools come out in future versions
    of iOS, you can have them as part of your game with your updates. Making a great
    game even better is always the right choice for every game developer.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we saw what was needed to finally take your game from
    an Xcode project to a playable game for everyone with an iOS device. We learned
    about the steps needed to set up our Xcode project before submission to iTunes
    Connect. Then, we got an introduction to TestFlight, which is a great service
    for us to beta test our games before release. We saw that those steps already
    prepared us for most of what was needed to submit our games for review. Finally,
    we saw how easy it was to create app updates in iTunes Connect.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: You now have a game app that hopefully thousands of players can enjoy. No matter
    if the game was big or small, be proud of the fact that you created something
    for players to enjoy. Even the simplest of games can be a worthy accomplishment.
    We've seen throughout this book that the process of making an iOS game, though
    easier than even a few years ago, takes some effort and diligence to get right.
    This concludes all of the technical aspects we shall discuss. Next, we conclude
    with a quick discussion on the future of iOS and game development as a whole.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有一个游戏应用，希望成千上万的玩家都能享受它。无论这个游戏是大是小，为玩家创造乐趣的事实本身就值得骄傲。即使是最简单的游戏也能是一项值得骄傲的成就。在这本书的整个过程中，我们都看到制作iOS游戏的过程，尽管比几年前容易，但仍需要一些努力和勤奋才能做好。这总结了我们将讨论的所有技术方面。接下来，我们将简要讨论iOS和整体游戏开发的未来。
