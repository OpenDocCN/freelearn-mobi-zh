["```kt\n... \napply plugin: 'io.fabric' \n\nrepositories { \n   maven { url 'https://maven.fabric.io/public' } \n   maven { \n       url 'https://maven.google.com' \n   } \n   mavenCentral() \n} \n\ndependencies { \n  ... \n   compile('com.twitter.sdk.android:twitter:1.13.3@aar') { \n       transitive = true; \n   } \n\n   compile('com.twitter.sdk.android:tweet-composer:1.0.3@aar') { \n       transitive = true; \n   } \n\n   ... \n   implementation 'com.google.firebase:firebase-auth:11.4.2' \n   implementation 'com.google.firebase:firebase-database:10.2.4' \n} \n\napply plugin: 'com.google.gms.google-services' \n```", "```kt\n<meta-data \n    android:name=\"io.fabric.ApiKey\" \n    android:value=\"fill in your api key\" /> \n```", "```kt\n<resources> \n   <string name=\"twitter_key\">fill with your own Twitter key</string> \n   <string name=\"twitter_secret\">fill your own Twitter secret</string> \n```", "```kt\nprivate fun initFabric(){ \n   val authConfig = TwitterAuthConfig(getString(R.string.twitter_key), getString(R.string.twitter_secret)) \n   Fabric.with(this, Twitter(authConfig)) \n   Fabric.with(this, TwitterCore(authConfig), TweetComposer()) \n} \n```", "```kt\nprivate fun setupTwitterLoginButton(){ \n  twitter_login_button.setCallback(object : Callback<TwitterSession>() { \n       override fun success(result: Result<TwitterSession>) { \n           mTwitterSession = result.data \n           Log.i(javaClass.simpleName, \"Twitter login @\" + result.data.getUserName() + \")\") \n           val credential = TwitterAuthProvider.getCredential( \n                   result.data.getAuthToken().token, \n                   result.data.getAuthToken().secret) \n           signinWithTwitterAuthCredential(credential) \n       } \n\n       override fun failure(exception: TwitterException) { \n           Log.d(javaClass.simpleName, \"Login with Twitter failure\", exception) \n       } \n   }) \n} \n```", "```kt\nprivate fun signinWithTwitterAuthCredential (credential: AuthCredential){ \n   mAuth.signInWithCredential(credential) \n       .addOnCompleteListener(this, OnCompleteListener<AuthResult> { \n           if (it.isSuccessful) { \n               AuthenticationHelper.user = it.result.user \n               Log.i(javaClass.simpleName, \n                 \"User logged in or registered with twitter name ${AuthenticationHelper.user?.displayName}\") \n               continueFlow() \n           } else { \n               if (it.exception is FirebaseAuthInvalidCredentialsException) { \n                   onboarding_code_feedback_text.text = \"Invalid code.\" \n               } \n           } \n       }) \n} \n```", "```kt\nprivate fun sendPhone(){ \n   val number = onboarding_phone.text.toString() \n    PhoneAuthProvider.getInstance().verifyPhoneNumber( \n           number, 60, TimeUnit.SECONDS,  this, getCallback()); \n} \n```", "```kt\nprivate fun getCallback(): PhoneAuthProvider.OnVerificationStateChangedCallbacks { \n   val callbacks = object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() { \n     ... \n       override fun onCodeSent(verificationId: String?, token: PhoneAuthProvider.ForceResendingToken?) { \n           mVerificationId = verificationId; \n           mResendToken = token; \n           ... \n       } \n   } \n   return callbacks \n} \n```", "```kt\nprivate fun sendCode(){ \n   val verification = mVerificationId \n   if (verification != null) { \n       val code = onboarding_code.text.toString() \n       val credential = PhoneAuthProvider.getCredential(verification, code) \n       signInWithPhoneAuthCredential(credential) \n   } \n} \n```", "```kt\nprivate fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) { \n   mAuth.signInWithCredential(credential) \n       .addOnCompleteListener(this, OnCompleteListener<AuthResult> { \n           if (it.isSuccessful) { \n               AuthenticationHelper.user = it.result.user \n               Log.i(javaClass.simpleName, \n                  \"User logged in or registered with phone no ${AuthenticationHelper.user?.phoneNumber}\") \n               continueFlow() \n```", "```kt\nfun onList() { \n   val fragment = StoriesFragment.newInstance() \n   showFragment(fragment) \n} \n\nfun onCreateStory() { \n   val newStory = Story() \n   newStory.lastUpdate = \"today\" \n   val fragment = StoryContributeFragment.newInstance(newStory) \n   showFragment(fragment) \n} \n\nfun onContribute(story: Story) { \n   val fragment = StoryContributeFragment.newInstance(story) \n   showFragment(fragment) \n} \n\nfun onReadStory(story: Story) { \n   val fragment = StoryDetailFragment.newInstance(story) \n   showFragment(fragment) \n} \n\nfun onLateOnboarding(story: Story) { \n   val intent = Intent(this, OnboardingActivity::class.java) \n   intent.putExtra(OnboardingActivity.ARG_LATE, true) \n   intent.putExtra(OnboardingActivity.ARG_STORY, story) \n   startActivityForResult(intent, REQUEST_LATE_ONBOARDING) \n} \n\nprivate fun showFragment(fragment: Fragment) { \n   val ft = fragmentManager.beginTransaction() \n   ft.replace(R.id.main_fragment_container, fragment, fragment.javaClass.toString()) \n   ft.commit() \n} \n```", "```kt\nval repository: Repository get() = Repository(this) \n```", "```kt\nclass Repository(private val context: Context) { \n\n   fun getStories(handler: OnRepositoryResult) { \n       val content = getDummyContent() \n       handler.onResult(content) \n   } \n\n   fun updateContributions(story: Story) { \n       if (story.id == null) { \n           addStory(story) \n       } \n\n       dummyContentList.forEach { \n           if (it.id.equals(story.id, ignoreCase = true)){ \n               it.contributions  = story.contributions \n           } \n       } \n   } \n\n   fun addStory(story: Story) { \n       if (story.id == null) { \n           story.id = UUID.randomUUID().toString() \n       } \n       dummyContentList.add(story) \n   } \n\n   companion object { \n       private var dummyContentList = mutableListOf<Story>() \n       private fun getDummyContent(): List<Story> { \n\n           if (dummyContentList.isEmpty()) { \n               val dummy = mutableListOf<Story>() \n               val s1 = Story(\"A first story\", \"MikeR\", \"Today\") \n               s1.id = \"1\" \n               s1.contributions.add(Contribution(\"Once upon a time\", \"MikeR\")) \n               s1.contributions.add(Contribution(\"a giant rabbit did exist\", \"Pete\")) \n               s1.contributions.add(Contribution(\"in a galaxy far far away\", \"Floris\")) \n\n               val s2 = Story(\"A second story\", \"MikeR\", \"Yesterday\") \n             ... \n               dummy.add(s1) \n  ... \n               dummyContentList = dummy \n           } \n           return dummyContentList \n       } \n   } \n} \n```", "```kt\nclass Story : Parcelable { \n   var id: String? = null \n   var title: String? = null \n   var initiator: String? = null \n   var lastUpdate: String? = null \n   var contributions = mutableListOf<Contribution>() \n...  \n   fun getFullStory(includeAuthors: Boolean): String { ...  }    \n\nval summary: String \n       get() { \n           val builder = StringBuilder() \n           if (contributions != null) { \n               var start = contributions.size - 3 \n               if (start <= 0) { start = 0 } \n               for (build in start..contributions.size - 1) { \n                   builder.append(contributions[build].paragraph.toString() + \"\\n\") \n               } \n               return builder.toString() \n           } else { \n               return \"This story has not started yet!\" \n           } \n       } \n   ... \n```", "```kt\nclass StoriesFragment : Fragment(), OnCardViewClicked, OnRepositoryResult { \n   private var recyclerView: RecyclerView? = null \n   private var adapter: StoryAdapter? = null \n   private var viewModel = mutableListOf<Story>() \n... \n```", "```kt\noverride fun onResult(result: List<Story>) { \n   viewModel = result.toMutableList() \n   adapter = StoryAdapter(viewModel) \n   adapter?.setOnCardViewClicked(this) \n   recyclerView?.adapter = adapter \n} \n```", "```kt\noverride fun onCardClicked(view: View, position: Int) { \n   (activity as MainActivity).onReadStory(viewModel[position]) \n} \n```", "```kt\nclass StoryDetailFragment : Fragment() { \n   private var mStory: Story? = null \n   override fun onCreate(savedInstanceState: Bundle?) { \n       super.onCreate(savedInstanceState) \n       mStory = getArguments().getParcelable(ARG_STORY) \n   } \n```", "```kt\nprivate fun onShare() { \n   val builder = TweetComposer.Builder(getActivity()) \n           .text(String.format(getString(R.string.sharing_text), mStory?.title)) \n   builder.show() \n} \n```", "```kt\nfun onLateOnboarding(story: Story) { \n   val intent = Intent(this, OnboardingActivity::class.java) \n   intent.putExtra(OnboardingActivity.ARG_LATE, true) \n   intent.putExtra(OnboardingActivity.ARG_STORY, story) \n   startActivityForResult(intent, REQUEST_LATE_ONBOARDING) \n} \n```", "```kt\nprivate fun continueFlow(){ \n   if (mIsLateOnboarding){ \n       val returnIntent = Intent() \n       returnIntent.putExtra(OnboardingActivity.ARG_STORY, mStory) \n       setResult(Activity.RESULT_OK, returnIntent) \n       this.finish() \n... \n```", "```kt\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent) { \n   if (requestCode == REQUEST_LATE_ONBOARDING) { \n       if (resultCode == Activity.RESULT_OK) { \n           val story = data.getParcelableExtra<Story>(OnboardingActivity.ARG_STORY) \n           val lastContribution = story.contributions.last() \n           lastContribution.contributor = AuthenticationHelper.userName \n           repository.updateContributions(story) \n           onList() \n       } \n   } \n} \n```"]