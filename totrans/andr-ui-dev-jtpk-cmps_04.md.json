["```kt\n@Composable\nfun ColoredTextDemo(\n  text: String = \"\",\n  color: Color = Color.Black\n) {\n  Text(\n    text = text,\n    style = TextStyle(color = color)\n  )\n}\n```", "```kt\n@Composable\nfun ShortColoredTextDemo(\n    text: String = \"\",\n    color: Color = Color.Black\n) = Text(\n    text = text,\n    style = TextStyle(color = color)\n)\n```", "```kt\nclass SandboxActivity : ComponentActivity() {\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContent {\n      println(ColoredTextDemo(\n        text = \"Hello Compose\",\n        color = Color.Blue\n      ))\n    }\n  }\n}\n```", "```kt\nI/System.out: kotlin.Unit\n```", "```kt\nval resources = resources()\nreturn resources.getString(id)\n```", "```kt\n@Composable\nfun ColorPicker(color: MutableState<Color>) {\n  val red = color.value.red\n  val green = color.value.green\n  val blue = color.value.blue\n  Column {\n    Slider(\n      value = red,\n      onValueChange = { color.value = Color(it, green, \n                                            blue) \n})\n    Slider(\n      value = green,\n      onValueChange = { color.value = Color(red, it, blue) })\n    Slider(\n      value = blue,\n      onValueChange = { color.value = Color(red, green, it) })\n  }\n}\n```", "```kt\nColumn(\n  modifier = Modifier.width(min(400.dp, maxWidth)),\n  horizontalAlignment = Alignment.CenterHorizontally\n) {\n  val color = remember { mutableStateOf(Color.Magenta) }\n  ColorPicker(color)\n  Text(\n    modifier = Modifier\n      .fillMaxWidth()\n      .background(color.value),\n    text =\n    \"#${color.value.toArgb().toUInt().toString(16)}\",\n    textAlign = TextAlign.Center,\n    style = MaterialTheme.typography.h4.merge(\n      TextStyle(\n        color = color.value.complementary()\n      )\n    )\n  )\n}\n```", "```kt\nval color = remember { mutableStateOf(Color.Magenta) }\n```", "```kt\nfun Color.complementary() = Color(\n  red = 1F - red,\n  green = 1F - green,\n  blue = 1F - blue\n)\n```", "```kt\nmodifier = Modifier.width(min(400.dp, maxWidth)),\n```", "```kt\nBoxWithConstraints(\n  contentAlignment = Alignment.Center,\n  modifier = Modifier.fillMaxSize()\n) {\n  Column ...\n}\n```", "```kt\n@Composable\nfun OrderDemo() {\n  var color by remember { mutableStateOf(Color.Blue) }\n  Box(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(32.dp)\n      .border(BorderStroke(width = 2.dp, color = color))\n      .background(Color.LightGray)\n      .clickable {\n        color = if (color == Color.Blue)\n          Color.Red\n        else\n          Color.Blue\n      }\n  )\n}\n```", "```kt\n@Composable\nfun TextWithYellowBackground(\n  text: String,\n  modifier: Modifier = Modifier\n) {\n  Text(\n    text = text,\n    modifier = modifier.background(Color.Yellow)\n  )\n}\n```", "```kt\nText(\n  text = \"Hello Compose\",\n  modifier = Modifier\n    .fillMaxSize()\n    .drawYellowCross(),\n  textAlign = TextAlign.Center,\n  style = MaterialTheme.typography.h1\n)\n```", "```kt\nfun Modifier.drawYellowCross() = then(\n  object : DrawModifier {\n    override fun ContentDrawScope.draw() {\n      drawLine(\n        color = Color.Yellow,\n        start = Offset(0F, 0F),\n        end = Offset(size.width - 1, size.height - 1),\n        strokeWidth = 10F\n      )\n      drawLine(\n        color = Color.Yellow,\n        start = Offset(0F, size.height - 1),\n        end = Offset(size.width - 1, 0F),\n        strokeWidth = 10F\n      )\n      drawContent()\n    }\n  }\n)\n```"]