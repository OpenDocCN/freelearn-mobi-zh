["```swift\nvar possibleString: String?\nvar possibleArray: [Int]?\n```", "```swift\nvar possibleInt: Int? = 10\n```", "```swift\nvar actualInt = 10\nvar possibleInt: Int? = 10\nvar nilInt: Int?\nprint(actualInt) // 10\nprint(possibleInt) // Optional(10)\nprint(nilInt) // nil\n```", "```swift\nnilInt = 2\nprint(nilInt) // Optional(2)\n```", "```swift\nnilInt = nil\nprint(nilInt) // nil\n```", "```swift\nif let string = possibleString {\n    print(\"possibleString has a value: \\(string)\")\n}\nelse {\n    print(\"possibleString has no value\")\n}\n```", "```swift\npossibleInt = 10\nif var actualInt = possibleInt {\n    actualInt *= 2\n    print(actualInt) // 20\n}\nprint(possibleInt) // Optional(10)\n```", "```swift\npossibleInt = 10\nif var actualInt = possibleInt {\n   actualInt *= 2\n   possibleInt = actualInt\n}\nprint(possibleInt) // Optional(20)\n```", "```swift\nif let actualString = possibleString {\n    if let actualArray = possibleArray {\n        if let actualInt = possibleInt {\n            print(actualString)\n            print(actualArray)\n            print(actualInt)\n        }\n    }\n}\n```", "```swift\nif let actualString = possibleString,\n    let actualArray = possibleArray,\n    let actualInt = possibleInt\n{\n    print(actualString)\n    print(actualArray)\n    print(actualInt)\n}\n```", "```swift\nfunc someFunc2() {\n    guard let actualString = possibleString,\n        let actualArray = possibleArray,\n        let actualInt = possibleInt\n    else {\n        return\n    }\n\n    print(actualString)\n    print(actualArray)\n    print(actualInt)\n}\n```", "```swift\npossibleInt = 10\npossibleInt! *= 2\nprint(possibleInt) // \"Optional(20)\"\n```", "```swift\nnilInt! *= 2 // fatal error\n```", "```swift\nclass FileSystemItem {}\nclass File: FileSystemItem {}\nclass Directory: FileSystemItem {\n    private var realContents: [FileSystemItem]?\n    var contents: [FileSystemItem] {\n        if self.realContents == nil {\n            self.realContents = self.loadContents()\n        }\n        return self.realContents!\n    }\n\n    private func loadContents() -> [FileSystemItem] {\n        // Do some loading\n        return []\n    }\n}\n```", "```swift\nvar possibleString: String? = \"An actual string\"\nprint(possibleString ?? \"Default String\") // \"An Actual String\"\n```", "```swift\nvar invitee: String? = \"Sarah\"\nvar uppercaseInvitee: String?\nif let actualInvitee = invitee {\n    uppercaseInvitee = actualInvitee.uppercaseString\n}\n```", "```swift\nuppercaseInvitee = invitee!.uppercaseString\n```", "```swift\nuppercaseInvitee = invitee?.uppercaseString\n```", "```swift\nvar invitees: [String]? = [\"Sarah\", \"Jamison\", \"Marcos\", \"Roana\"]\ninvitees?.first?.uppercaseString.hasPrefix(\"A\")\n```", "```swift\ninvitees.first // Error\n```", "```swift\nvar otherInvitees = [\"Kai\", \"Naya\"]\notherInvitees?.first // Error\n```", "```swift\ninvitees?.removeAll()\n```", "```swift\nvar name: String!\n```", "```swift\nname.uppercaseString // Crash\n```", "```swift\nImport UIKit\nclass MyView: UIView {\n    @IBOutlet var button: UIButton!\n    var buttonOriginalWidth: CGFloat!\n\n    override func awakeFromNib() {\n        self.buttonOriginalWidth = self.button.frame.size.width\n    }\n}\n```", "```swift\nenum Optional<T> {\n    case None\n    case Some(T)\n}\n```"]