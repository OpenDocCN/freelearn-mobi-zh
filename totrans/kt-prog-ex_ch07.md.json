["```\nprivate fun writeFile(fileName: String) {\n  val content: String = \"Hello world\"\n  val stream: FileOutputStream = openFileOutput(fileName,\n                                     Context.MODE_PRIVATE)\n  stream.write(content.toByteArray())\n  stream.close()\n}\n```", "```\nprivate fun readFile(fileName: String) {\n  val stream: FileInputStream = openFileInput(fileName)\n  val data = ByteArray(1024)\n\n  stream.read(data)\n  stream.close()\n}\n```", "```\npackage com.example.storageexamples.base\n\ninterface BaseView {\n\n  fun bindViews()\n\n  fun setupInstances()\n}\n```", "```\npackage com.example.storageexamples.main\n\nimport com.example.storageexamples.base.BaseView\n\ninterface MainView : BaseView {\n\n  fun navigateToHome()\n  fun navigateToContent()\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n\nxmlns:android=\"http://schemas.android.com/apk/res/android\"\n xmlns:tools=\"http://schemas.android.com/tools\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n tools:context=\"com.example.storageexamples.main.MainActivity\">\n\n  <LinearLayout\n         android:id=\"@+id/ll_container\"\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"match_parent\"\n         android:orientation=\"vertical\"/>\n</android.support.constraint.ConstraintLayout>\n\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:orientation=\"vertical\"\n android:layout_width=\"match_parent\"\n android:paddingTop=\"@dimen/padding_default\"\n android:paddingBottom=\"@dimen/padding_default\"\n android:paddingStart=\"@dimen/padding_default\"\n android:paddingEnd=\"@dimen/padding_default\"\n android:gravity=\"center_horizontal\"\n android:layout_height=\"match_parent\">\n  <TextView\n       android:id=\"@+id/tv_header\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:text=\"@string/header_title\"\n       android:textSize=\"45sp\"\n       android:textStyle=\"bold\"/>\n  <EditText\n        android:id=\"@+id/et_input\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_top_large\"\n        android:hint=\"@string/hint_enter_text\"/>\n  <Button\n        android:id=\"@+id/btn_submit\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:text=\"@string/submit\"/>\n  <Button\n        android:id=\"@+id/btn_view_file\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/view_file\"\n        android:background=\"@android:color/transparent\"/>\n</LinearLayout>\n```", "```\n<resources>\n  <string name=\"app_name\">Storage Examples</string>\n  <string name=\"hint_enter_text\">Enter text hereâ€¦</string>\n  <string name=\"submit\">Update file</string>\n  <string name=\"view_file\">View file</string>\n  <string name=\"header_title\">FILE UPDATER</string>\n</resources>\n\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <dimen name=\"padding_default\">16dp</dimen>\n  <dimen name=\"margin_default\">16dp</dimen>\n  <dimen name=\"margin_top_large\">64dp</dimen>\n</resources>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:orientation=\"vertical\"\n android:layout_width=\"match_parent\"\n android:padding=\"@dimen/padding_default\"\n android:layout_height=\"match_parent\">\n  <TextView\n        android:id=\"@+id/tv_content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"20sp\"\n        android:textStyle=\"bold\"\n        android:layout_marginTop=\"@dimen/margin_default\"/>\n</LinearLayout>\n```", "```\nclass HomeFragment : Fragment(), BaseView, View.OnClickListener {\n\n  private lateinit var layout: LinearLayout\n  private lateinit var tvHeader: TextView\n  private lateinit var etInput: EditText\n  private lateinit var btnSubmit: Button\n  private lateinit var btnViewFile: Button\n\n  private var outputStream: FileOutputStream? = null\n\n  override fun onCreateView(inflater: LayoutInflater,\n                            container: ViewGroup?,\n                            savedInstanceState: Bundle?): View {\n\n    // inflate the fragment_home.xml layout\n    layout = inflater.inflate(R.layout.fragment_home,\n                              container, false) as LinearLayout\n    setupInstances()\n    bindViews()\n\n    return layout\n  }\n\n  override fun bindViews() {\n    tvHeader = layout.findViewById(R.id.tv_header)\n    etInput = layout.findViewById(R.id.et_input)\n    btnSubmit = layout.findViewById(R.id.btn_submit)\n    btnViewFile = layout.findViewById(R.id.btn_view_file)\n\n    btnSubmit.setOnClickListener(this)\n    btnViewFile.setOnClickListener(this)\n  }\n```", "```\n  override fun setupInstances() {   \n```", "```\n    outputStream = activity?.openFileOutput(\"content_file\",\n                                            Context.MODE_PRIVATE)\n  }\n```", "```\nprivate fun showInputError() {\n  etInput.error = \"File input cannot be empty.\"\n  etInput.requestFocus()\n} \n```", "```\nprivate fun writeFile(content: String) {\n  outputStream?.write(content.toByteArray())\n  outputStream?.close()\n}\n```", "```\nprivate fun clearInput() {\n  etInput.setText(\"\")\n} \n```", "```\nprivate fun showSaveSuccess() {\n  Toast.makeText(activity, \"File updated successfully.\",\n                 Toast.LENGTH_LONG).show()\n}\n\noverride fun onClick(view: View?) {\n  val id = view?.id\n\n  if (id == R.id.btn_submit) {\n    if (TextUtils.isEmpty(etInput.text)) {    \n```", "```\n  showInputError()\n} else {      \n```", "```\n     writeFile(etInput.text.toString())\n     clearInput()\n     showSaveSuccess()\n   }\n} else if (id == R.id.btn_view_file) {\n  // retrieve a reference to MainActivity\n  val mainActivity = activity as MainActivity\n```", "```\n      mainActivity.navigateToContent()\n      mainActivity.showHomeNavigation()\n    }\n  }\n}\n```", "```\nclass ContentFragment : Fragment(), BaseView {\n\n  private lateinit var layout: LinearLayout\n  private lateinit var tvContent: TextView\n\n  private lateinit var inputStream: FileInputStream\n\n  override fun onCreateView(inflater: LayoutInflater?,\n                            container: ViewGroup?,\n                            savedInstanceState: Bundle?): View {\n\n    layout = inflater?.inflate(R.layout.fragment_content,\n                               container, false) as LinearLayout\n    setupInstances()\n    bindViews()\n\n    return layout\n  }\n\n  override fun onResume() {\n```", "```\n  updateContent()\n  super.onResume()\n}\n\nprivate fun updateContent() {\n  tvContent.text = readFile()\n}\n\noverride fun bindViews() {\n  tvContent = layout.findViewById(R.id.tv_content)\n}\n\noverride fun setupInstances() {\n  inputStream = activity.openFileInput(\"content_file\")\n}\n```", "```\n  private fun readFile(): String {\n    var c: Int\n    var content = \"\"\n\n    c = inputStream.read()\n\n    while (c != -1) {\n      content += Character.toString(c.toChar())\n      c = inputStream.read()\n    }\n\n    inputStream.close()\n\n    return content\n  }\n}\n```", "```\npackage com.example.storageexamples.main\n\nimport android.aupport.v4.app.Fragment\nimport android.content.Context\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.view.LayoutInflater\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport com.example.storageexamples.R\nimport com.example.storageexamples.base.BaseView\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\n\nclass MainActivity : AppCompatActivity(), MainView {\n\n  private lateinit var llContainer: LinearLayout\n\n```", "```\n\n  private lateinit var homeFragment: HomeFragment\n  private lateinit var contentFragment: ContentFragment\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    setupInstances()\n    bindViews()\n    navigateToHome()\n  }\n\n  override fun bindViews() {\n    llContainer = findViewById(R.id.ll_container)\n  }\n\n  override fun setupInstances() {\n    homeFragment = HomeFragment()\n    contentFragment = ContentFragment()\n  }\n\n  private fun hideHomeNavigation() {\n    supportActionBar?.setDisplayHomeAsUpEnabled(false)\n  }\n\n  private fun showHomeNavigation() {\n    supportActionBar?.setDisplayHomeAsUpEnabled(true)\n  }\n\n  override fun navigateToHome() {\n    val transaction = supportFragmentManager.beginTransaction()\n    transaction.replace(R.id.ll_container, homeFragment)\n    transaction.commit()\n\n    supportActionBar?.title = \"Home\"\n  }\n\n  override fun navigateToContent() {\n    val transaction = supportFragmentManager.beginTransaction()\n    transaction.replace(R.id.ll_container, contentFragment)\n    transaction.commit()\n\n    supportActionBar?.title = \"File content\"\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    val id = item?.itemId\n\n    if (id == android.R.id.home) {\n      navigateToHome()\n      hideHomeNavigation()\n    }\n\n    return super.onOptionsItemSelected(item)\n  }\n\n  class HomeFragment : Fragment(), BaseView, View.OnClickListener {\n\n    private lateinit var layout: LinearLayout\n    private lateinit var tvHeader: TextView\n    private lateinit var etInput: EditText\n    private lateinit var btnSubmit: Button\n    private lateinit var btnViewFile: Button\n\n    private lateinit var outputStream: FileOutputStream\n\n    override fun onCreateView(inflater: LayoutInflater?,\n                              container: ViewGroup?,\n                              savedInstanceState: Bundle?): View {\n```", "```\n  layout = inflater?.inflate(R.layout.fragment_home,\n                             container, false) as LinearLayout\n  setupInstances()\n  bindViews()\n\n  return layout\n}\n\noverride fun bindViews() {\n  tvHeader = layout.findViewById(R.id.tv_header)\n  etInput = layout.findViewById(R.id.et_input)\n  btnSubmit = layout.findViewById(R.id.btn_submit)\n  btnViewFile = layout.findViewById(R.id.btn_view_file)\n\n  btnSubmit.setOnClickListener(this)\n  btnViewFile.setOnClickListener(this)\n}\n\n//Method for the instantiation of instance properties\noverride fun setupInstances() {\n```", "```\n\n  outputStream = activity.openFileOutput(\"content_file\",\n                                         Context.MODE_PRIVATE)\n}\n\n//Called to display an error to the user if an invalid input is given\n\nprivate fun showInputError() {\n  etInput.error = \"File input cannot be empty.\"\n  etInput.requestFocus()\n}\n\n// Writes string content to a file via a [FileOutputStream]\nprivate fun writeFile(content: String) {\n  outputStream.write(content.toByteArray())\n}\n\n//Called to clear the input in the input field\n\nprivate fun clearInput() {\n  etInput.setText(\"\")\n}\n\n//Shows a success message to the user when invoked.\n\nprivate fun showSaveSuccess() {\n  Toast.makeText(activity, \"File updated successfully.\",\n                 Toast.LENGTH_LONG).show()\n}\n\noverride fun onClick(view: View?) {\n  val id = view?.id\n\n  if (id == R.id.btn_submit) {\n```", "```\n  if (TextUtils.isEmpty(etInput.text)) {\n    showInputError()\n  } else {\n    //Write content to the file, clear the input\n    //EditText and show a file update success message\n\n    writeFile(etInput.text.toString())\n    clearInput()\n    showSaveSuccess()\n  }\n} else if (id == R.id.btn_view_file) {\n  // retrieve a reference to MainActivity\n  val mainActivity = activity as MainActivity  \n```", "```\n\n       mainActivity.navigateToContent()\n      mainActivity.showHomeNavigation()\n    }\n  }\n}\n\nclass ContentFragment : Fragment(), BaseView {\n\n  private lateinit var layout: LinearLayout\n  private lateinit var tvContent: TextView\n\n  private lateinit var inputStream: FileInputStream\n\n  override fun onCreateView(inflater: LayoutInflater?,\n                            container: ViewGroup?,\n                            savedInstanceState: Bundle?): View {\n\n    layout = inflater?.inflate(R.layout.fragment_content,\n                         container, false) as LinearLayout\n    setupInstances()\n    bindViews()\n\n    return layout\n}\n```", "```\noverride fun onResume() {\n  updateContent()\n  super.onResume()\n}\n\nprivate fun updateContent() {\n  tvContent.text = readFile()\n}\n\noverride fun bindViews() {\n  tvContent = layout.findViewById(R.id.tv_content)\n}\n\noverride fun setupInstances() {\n  inputStream = activity.openFileInput(\"content_file\")\n}\n```", "```\n    private fun readFile(): String {\n      var c: Int\n      var content = \"\"\n\n      c = inputStream.read()\n\n      while (c != -1) {\n        content += Character.toString(c.toChar())\n        c = inputStream.read()\n      }\n\n      inputStream.close()\n\n      return content\n    }\n  }\n}\n```", "```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n```", "```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```", "```\nprivate fun isExternalStorageWritable(): Boolean {\n  val state = Environment.getExternalStorageState()\n\n  return Environment.MEDIA_MOUNTED == state\n}\n```", "```\nprivate fun isExternalStorageReadable(): Boolean {\n  val state = Environment.getExternalStorageState()\n\n  return Environment.MEDIA_MOUNTED == state ||\n         Environment.MEDIA_MOUNTED_READ_ONLY == state\n}\n```", "```\nprivate fun getMusicStorageDir(collectionName: String): File {\n  val file = File(Environment.getExternalStoragePublicDirectory(\n        Environment.DIRECTORY_MUSIC), collectionName)\n\n  if (!file.mkdir()) {\n    Log.d(\"DIR_CREATION_STATUS\", \"Directory creation failed.\")\n  }\n\n  return file\n}\n```", "```\nimplementation \"android.arch.persistence.room:runtime:1.0.0-alpha9-1\"\nimplementation \"android.arch.persistence.room:rxjava2:1.0.0-alpha9-1\"\nimplementation \"io.reactivex.rxjava2:rxandroid:2.0.1\"\nkapt \"android.arch.persistence.room:compiler:1.0.0-alpha9-1\"\n\n```", "```\npackage com.example.roomexample.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class User(\n  @ColumnInfo(name = \"first_name\")\n  var firstName: String = \"\",\n  @ColumnInfo(name = \"surname\")\n  var surname: String = \"\",\n  @ColumnInfo(name = \"phone_number\")\n  var phoneNumber: String = \"\",\n  @PrimaryKey(autoGenerate = true)\n  var id: Long = 0\n)\n```", "```\n@ColumnInfo(name = \"first_name\")\nvar firstName: String = \"\"\n```", "```\npackage com.example.roomexample.data\n\nimport android.arch.persistence.room.Dao\nimport android.arch.persistence.room.Insert\nimport android.arch.persistence.room.OnConflictStrategy\nimport android.arch.persistence.room.Query\nimport io.reactivex.Flowable\n\n@Dao\ninterface UserDao {\n\n  @Query(\"SELECT * FROM user\")\n  fun all(): Flowable<List<User>>\n\n  @Query(\"SELECT * FROM user WHERE id = :id\")\n  fun findById(id: Long): Flowable<User>\n\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(user: User)\n}\n```", "```\n@Database(entities = [User::class], version = 1)\npublic abstract class AppDatabase : RoomDatabase() {\n  abstract fun userDao(): UserDao\n}Now that we have our DAO and entity created, we must create an AppDatabase class. Add\n```", "```\nval db = Room.databaseBuilder(<context>, AppDatabase::class.java, \n                              \"app-database\").build()\n```", "```\nimplementation 'com.android.support:design:26.1.0'\nimplementation \"android.arch.persistence.room:runtime:1.0.0\"\nimplementation \"android.arch.persistence.room:rxjava2:1.0.0\"\nimplementation \"io.reactivex.rxjava2:rxandroid:2.0.1\"\nkapt \"android.arch.persistence.room:compiler:1.0.0\"\n```", "```\napply plugin: 'kotlin-kapt'\n```", "```\npackage com.example.roomexample.ui\n\ninterface MainView {\n\n  fun bindViews()\n  fun setupInstances()\n}\n```", "```\npackage com.example.roomexample.data\n\nimport android.arch.persistence.room.ColumnInfo\nimport android.arch.persistence.room.Entity\nimport android.arch.persistence.room.PrimaryKey\n\n@Entity\ndata class User(\n  @ColumnInfo(name = \"first_name\")\n  var firstName: String = \"\",\n  @ColumnInfo(name = \"surname\")\n  var surname: String = \"\",\n  @ColumnInfo(name = \"phone_number\")\n  var phoneNumber: String = \"\",\n  @PrimaryKey(autoGenerate = true)\n  var id: Long = 0\n)\n```", "```\npackage com.example.roomexample.data\n\nimport android.arch.persistence.room.Dao\nimport android.arch.persistence.room.Insert\nimport android.arch.persistence.room.OnConflictStrategy\nimport android.arch.persistence.room.Query\nimport io.reactivex.Flowable\n\n@Dao\ninterface UserDao {\n\n  @Query(\"SELECT * FROM user\")\n  fun all(): Flowable<List<User>>\n\n  @Query(\"SELECT * FROM user WHERE id = :id\")\n  fun findById(id: Long): Flowable<User>\n\n  @Insert(onConflict = OnConflictStrategy.REPLACE)\n  fun insert(user: User)\n}\n```", "```\npackage com.example.roomexample.data\n\nimport android.arch.persistence.room.Database\nimport android.arch.persistence.room.Room\nimport android.arch.persistence.room.RoomDatabase\nimport android.content.Context\n\n@Database(entities = arrayOf(User::class), version = 1, exportSchema = false)\ninternal abstract class AppDatabase : RoomDatabase() {\n\n  abstract fun userDao(): UserDao\n\n  companion object Factory {\n    private var appDatabase: AppDatabase? = null\n\n    fun create(ctx: Context): AppDatabase {\n      if (appDatabase == null) {\n        appDatabase = Room.databaseBuilder(ctx.applicationContext,\n                                           AppDatabase::class.java,\n                                           \"app-database\").build()\n\n      }\n\n      return appDatabase as AppDatabase\n    }\n  }\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n xmlns:android=\"http://schemas.android.com/apk/res/android\"\n xmlns:tools=\"http://schemas.android.com/tools\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n tools:context=\"com.example.roomexample.ui.MainActivity\">\n\n  <LinearLayout\n        android:id=\"@+id/ll_container\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"/>\n</android.support.constraint.ConstraintLayout>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:orientation=\"vertical\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:gravity=\"center_horizontal\"\n android:padding=\"@dimen/padding_default\">\n  <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textSize=\"32sp\"\n        android:text=\"@string/create_user\"/>\n  <EditText\n        android:id=\"@+id/et_first_name\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:hint=\"@string/first_name\"\n        android:inputType=\"text\"/>\n  <EditText\n        android:id=\"@+id/et_surname\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:hint=\"@string/surname\"\n        android:inputType=\"text\"/>\n  <EditText\n        android:id=\"@+id/et_phone_number\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:hint=\"@string/phone_number\"\n        android:inputType=\"phone\"/>\n  <Button\n        android:id=\"@+id/btn_submit\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:text=\"@string/submit\"/>\n  <Button\n        android:id=\"@+id/btn_view_users\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/margin_default\"\n        android:text=\"@string/view_users\"/>\n</LinearLayout>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:orientation=\"vertical\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\">\n  <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/rv_users\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n</LinearLayout>\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n android:orientation=\"vertical\"\n android:layout_width=\"match_parent\"\n android:padding=\"@dimen/padding_default\"\n android:layout_height=\"wrap_content\">\n  <TextView\n       android:id=\"@+id/tv_first_name\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"/>\n  <TextView\n       android:id=\"@+id/tv_surname\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"@dimen/margin_default\"/>\n  <TextView\n       android:id=\"@+id/tv_phone_number\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"@dimen/margin_default\"/>\n  <View\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"1dp\"\n       android:layout_marginTop=\"@dimen/margin_default\"\n       android:background=\"#e8e8e8\"/>\n</LinearLayout>\n```", "```\n<resources>\n...\n  <string name=\"first_name\">First name</string>\n  <string name=\"surname\">Surname</string>\n  <string name=\"phone_number\">Phone number</string>\n  <string name=\"submit\">Submit</string>\n  <string name=\"create_user\">Create User</string>\n  <string name=\"view_users\">View users</string>\n</resources>\n\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <dimen name=\"padding_default\">16dp</dimen>\n  <dimen name=\"margin_default\">16dp</dimen>\n</resources>\n```", "```\nclass CreateUserFragment : Fragment(), MainView, View.OnClickListener {\n\n  private lateinit var btnSubmit: Button\n  private lateinit var etSurname: EditText\n  private lateinit var btnViewUsers: Button\n  private lateinit var layout: LinearLayout\n  private lateinit var etFirstName: EditText\n  private lateinit var etPhoneNumber: EditText\n\n  private lateinit var userDao: UserDao\n  private lateinit var appDatabase: AppDatabase\n\n  override fun onCreateView(inflater: LayoutInflater,\n               container: ViewGroup?, savedInstanceState: Bundle?): View {\n    layout = inflater.inflate(R.layout.fragment_create_user,\n                       container, false) as LinearLayout\n    bindViews()\n    setupInstances()\n    return layout\n  }\n\n  override fun bindViews() {\n    btnSubmit = layout.findViewById(R.id.btn_submit)\n    btnViewUsers = layout.findViewById(R.id.btn_view_users)\n    etSurname = layout.findViewById(R.id.et_surname)\n    etFirstName = layout.findViewById(R.id.et_first_name)\n    etPhoneNumber = layout.findViewById(R.id.et_phone_number)\n\n    btnSubmit.setOnClickListener(this)\n    btnViewUsers.setOnClickListener(this)\n  }\n\n  override fun setupInstances() {\n    appDatabase = AppDatabase.create(activity) \n      // getting an instance of AppDatabase\n    userDao = appDatabase.userDao() // getting an instance of UserDao\n  }\n\n```", "```\nprivate fun inputsValid(): Boolean {\n  var inputValid = true\n  val firstName = etFirstName.text\n  val surname = etSurname.text\n  val phoneNumber = etPhoneNumber.text\n\n  if (TextUtils.isEmpty(firstName)) {\n    etFirstName.error = \"First name cannot be empty\"\n    etFirstName.requestFocus()\n    inputValid = false\n\n  } else if (TextUtils.isEmpty(surname)) {\n    etSurname.error = \"Surname cannot be empty\"\n    etSurname.requestFocus()\n    inputValid = false\n\n  } else if (TextUtils.isEmpty(phoneNumber)) {\n    etPhoneNumber.error = \"Phone number cannot be empty\"\n    etPhoneNumber.requestFocus()\n    inputValid = false\n\n  } else if (!android.util.Patterns.PHONE\n                     .matcher(phoneNumber).matches()) {\n    etPhoneNumber.error = \"Valid phone number required\"\n    etPhoneNumber.requestFocus()\n    inputValid = false\n  }\n\n  return inputValid\n}\n```", "```\n  private fun showCreationSuccess() {\n    Toast.makeText(activity, \"User successfully created.\",\n                   Toast.LENGTH_LONG).show()\n  }\n\n  override fun onClick(view: View?) {\n    val id = view?.id\n\n    if (id == R.id.btn_submit) {\n      if (inputsValid()) {\n        val user = User(\n          etFirstName.text.toString(),\n          etSurname.text.toString(),\n          etPhoneNumber.text.toString())\n\n        Observable.just(userDao)\n                  .subscribeOn(Schedulers.io())\n                  .subscribe( { dao ->\n          dao.insert(user)  // using UserDao to save user to database.\n          activity?.runOnUiThread { showCreationSuccess() }\n        }, Throwable::printStackTrace)\n      }\n    } else if (id == R.id.btn_view_users) {\n      val mainActivity = activity as MainActivity\n\n      mainActivity.navigateToList()\n      mainActivity.showHomeButton()\n    }\n  }\n}\n```", "```\nif (inputsValid()) {\n  val user = User(\n    etFirstName.text.toString(),\n    etSurname.text.toString(),\n    etPhoneNumber.text.toString())\n\n  Observable.just(userDao)\n            .subscribeOn(Schedulers.io())\n            .subscribe( { dao ->\n    dao.insert(user)  // using UserDao to save user to database.\n    activity?.runOnUiThread { showCreationSuccess() }\n  }, Throwable::printStackTrace)\n}\n```", "```\nclass ListUsersFragment : Fragment(), MainView {\n\n  private lateinit var layout: LinearLayout\n  private lateinit var rvUsers: RecyclerView\n\n  private lateinit var appDatabase: AppDatabase\n\n  override fun onCreateView(inflater: LayoutInflater,\n               container: ViewGroup?, savedInstanceState: Bundle?): View {\n\n    layout = inflater.inflate(R.layout.fragment_list_users,\n                              container, false) as LinearLayout\n    bindViews()\n    setupInstances()\n\n    return layout\n  }\n```", "```\n override fun bindViews() {\n    rvUsers = layout.findViewById(R.id.rv_users)\n  }\n\n  override fun setupInstances() {\n    appDatabase = AppDatabase.create(activity)\n    rvUsers.layoutManager = LinearLayoutManager(activity)\n    rvUsers.adapter = UsersAdapter(appDatabase)\n  }\n\n  private class UsersAdapter(appDatabase: AppDatabase) : \n               RecyclerView.Adapter<UsersAdapter.ViewHolder>() {\n\n    private val users: ArrayList<User> = ArrayList()\n    private val userDao: UserDao = appDatabase.userDao()\n\n    init {\n      populateUsers()\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int):\n                 ViewHolder {\n      val layout = LayoutInflater.from(parent?.context)\n                                 .inflate(R.layout.vh_user, parent, false)\n\n      return ViewHolder(layout)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder?, position: Int) {\n      val layout = holder?.itemView\n      val user = users[position]\n\n      val tvFirstName = layout?.findViewById<TextView>(R.id.tv_first_name)\n      val tvSurname = layout?.findViewById<TextView>(R.id.tv_surname)\n      val tvPhoneNumber = layout?.findViewById<TextView>\n                          (R.id.tv_phone_number)\n\n      tvFirstName?.text = \"First name: ${user.firstName}\"\n      tvSurname?.text = \"Surname: ${user.surname}\"\n      tvPhoneNumber?.text = \"Phone number: ${user.phoneNumber}\"\n    }\n\n   //Populates users ArrayList with User objects \n    private fun populateUsers() {\n      users.clear()\n```", "```\n      userDao.all()\n             .subscribeOn(Schedulers.io())\n             .observeOn(AndroidSchedulers.mainThread())\n             .subscribe({ res ->\n        users.addAll(res)\n        notifyDataSetChanged()\n      }, Throwable::printStackTrace)\n    }\n\n    override fun getItemCount(): Int {\n      return users.size\n    }\n\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)\n  }\n}\n```", "```\npackage com.example.roomexample.ui\n\nimport android.app.Fragment\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.support.v7.widget.LinearLayoutManager\nimport android.support.v7.widget.RecyclerView\nimport android.text.TextUtils\nimport android.view.LayoutInflater\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport com.example.roomexample.R\nimport com.example.roomexample.data.AppDatabase\nimport com.example.roomexample.data.User\nimport com.example.roomexample.data.UserDao\nimport io.reactivex.Observable\nimport io.reactivex.android.schedulers.AndroidSchedulers\nimport io.reactivex.schedulers.Schedulers\n\nclass MainActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    navigateToForm()\n  }\n\n  private fun showHomeButton() {\n    supportActionBar?.setDisplayHomeAsUpEnabled(true)\n  }\n\n  private fun hideHomeButton() {\n    supportActionBar?.setDisplayHomeAsUpEnabled(false)\n  }\n\n  private fun navigateToForm() {\n    val transaction = fragmentManager.beginTransaction()\n    transaction.add(R.id.ll_container, CreateUserFragment())\n    transaction.commit()\n  }\n```", "```\n  override fun onBackPressed() {\n    if (fragmentManager.backStackEntryCount > 0) {\n      fragmentManager.popBackStack()\n      hideHomeButton()\n    } else {\n      super.onBackPressed()\n    }\n  }\n\n  private fun navigateToList() {\n    val transaction = fragmentManager.beginTransaction()\n    transaction.replace(R.id.ll_container, ListUsersFragment())\n    transaction.addToBackStack(null)\n    transaction.commit()\n  }\n\n  override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n    val id = item?.itemId\n\n    if (id == android.R.id.home) {\n      onBackPressed()\n      hideHomeButton()\n    }\n\n    return super.onOptionsItemSelected(item)\n  }\n\n  class CreateUserFragment : Fragment(), MainView, View.OnClickListener {\n    ...\n  }\n\n  class ListUsersFragment : Fragment(), MainView {\n    ...\n  }\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n xmlns:tools=\"http://schemas.android.com/tools\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:orientation=\"vertical\"\n android:gravity=\"center_horizontal\"\n android:padding=\"16dp\"\n tools:context=\"com.example.contentproviderexample.MainActivity\">\n  <TextView\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:gravity=\"center\"\n       android:text=\"@string/content_provider_example\"\n       android:textColor=\"@color/colorAccent\"\n       android:textSize=\"32sp\"/>\n  <EditText\n       android:id=\"@+id/et_product_name\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"16dp\"\n       android:hint=\"Product Name\"/>\n  <EditText\n       android:id=\"@+id/et_product_manufacturer\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"16dp\"\n       android:hint=\"Product Manufacturer\"/>\n  <Button\n       android:id=\"@+id/btn_add_product\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"16dp\"\n       android:text=\"Add product\"/>\n  <Button\n       android:id=\"@+id/btn_show_products\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"16dp\"\n       android:text=\"Show products\"/>\n</LinearLayout>\n\n```", "```\n<string name=\"content_provider_example\">Content Provider Example</string>\n\n```", "```\npackage com.example.contentproviderexample\n\nimport android.content.*\nimport android.database.Cursor\nimport android.database.SQLException\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.sqlite.SQLiteOpenHelper\nimport android.database.sqlite.SQLiteQueryBuilder\nimport android.net.Uri\nimport android.text.TextUtils\n\ninternal class ProductProvider : ContentProvider() {\n\n  companion object {\n\n    val PROVIDER_NAME: String = \"com.example.contentproviderexample\n                                  .ProductProvider\"\n    val URL: String = \"content://$PROVIDER_NAME/products\"\n    val CONTENT_URI: Uri = Uri.parse(URL)\n\n    val PRODUCTS = 1\n    val PRODUCT_ID = 2\n\n    // Database and table property declarations\n    val DATABASE_VERSION = 1\n    val DATABASE_NAME = \"Depot\"\n    val PRODUCTS_TABLE_NAME = \"products\"\n\n    // 'products' table column name declarations\n    val ID: String = \"id\"\n    val NAME: String = \"name\"\n    val MANUFACTURER: String = \"manufacturer\"\n    val uriMatcher: UriMatcher = UriMatcher(UriMatcher.NO_MATCH)\n    val PRODUCTS_PROJECTION_MAP: HashMap<String, String> = HashMap()\n\n```", "```\n\n    private class DatabaseHelper(context: Context) :\n      SQLiteOpenHelper(context, DATABASE_NAME, null,\n DATABASE_VERSION) {\n\n      override fun onCreate(db: SQLiteDatabase) {\n        val query = \" CREATE TABLE \" + PRODUCTS_TABLE_NAME +\n                    \" (id INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    \" name VARCHAR(255) NOT NULL, \" +\n                    \" manufacturer VARCHAR(255) NOT NULL);\"\n\n        db.execSQL(query)\n      }\n\n      override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int,\n                             newVersion: Int) {\n        val query = \"DROP TABLE IF EXISTS $PRODUCTS_TABLE_NAME\"\n\n        db.execSQL(query)\n        onCreate(db)\n      }\n    }\n  }\n\n  private lateinit var db: SQLiteDatabase\n\n  override fun onCreate(): Boolean {\n    uriMatcher.addURI(PROVIDER_NAME, \"products\", PRODUCTS)\n    uriMatcher.addURI(PROVIDER_NAME, \"products/#\", PRODUCT_ID)\n\n    val helper = DatabaseHelper(context)    \n```", "```\n    db = helper.writableDatabase\n\n    return true\n  }\n\n  override fun insert(uri: Uri, values: ContentValues): Uri {\n   //Insert a new product record into the products table\n\n    val rowId = db.insert(PRODUCTS_TABLE_NAME, \"\", values)\n\n    //If rowId is greater than 0 then the product record was added successfully.\n\n    if (rowId > 0) {\n      val _uri = ContentUris.withAppendedId(CONTENT_URI, rowId)\n      context.contentResolver.notifyChange(_uri, null)\n\n      return _uri\n    }\n\n    // throws an exception if the product was not successfully added.\n    throw SQLException(\"Failed to add product into \" + uri)\n  }\n\n  override fun query(uri: Uri, projection: Array<String>?,\n                     selection: String?, selectionArgs: Array<String>?,\n                     sortOrder: String): Cursor {\n\n    val queryBuilder = SQLiteQueryBuilder()\n    queryBuilder.tables = PRODUCTS_TABLE_NAME\n\n    when (uriMatcher.match(uri)) {\n      PRODUCTS -> queryBuilder.setProjectionMap(PRODUCTS_PROJECTION_MAP)\n      PRODUCT_ID -> queryBuilder.appendWhere(\n        \"$ID = ${uri.pathSegments[1]}\"\n      )\n    }\n\n    val cursor: Cursor = queryBuilder.query(db, projection, selection,\n                         selectionArgs, null, null, sortOrder)\n\n    cursor.setNotificationUri(context.contentResolver, uri)\n    return cursor\n  }\n\n  override fun delete(uri: Uri, selection: String, \n                      selectionArgs: Array<String>): Int {\n\n    val count = when(uriMatcher.match(uri)) {\n\n      PRODUCTS -> db.delete(PRODUCTS_TABLE_NAME, selection, selectionArgs)\n      PRODUCT_ID -> {\n        val id = uri.pathSegments[1]\n        db.delete(PRODUCTS_TABLE_NAME, \"$ID = $id \" +\n          if (!TextUtils.isEmpty(selection)) \"AND \n            ($selection)\" else \"\", selectionArgs)\n      }\n      else -> throw IllegalArgumentException(\"Unknown URI: $uri\")\n    }\n\n    context.contentResolver.notifyChange(uri, null)\n    return count\n  }\n\n  override fun update(uri: Uri, values: ContentValues, selection: String,\n                      selectionArgs: Array<String>): Int {\n\n    val count = when(uriMatcher.match(uri)) {\n      PRODUCTS -> db.update(PRODUCTS_TABLE_NAME, values,\n                            selection, selectionArgs)\n      PRODUCT_ID -> {\n        db.update(PRODUCTS_TABLE_NAME, values,\n                  \"$ID = ${uri.pathSegments[1]} \" +\n                  if (!TextUtils.isEmpty(selection)) \" AND\n                  ($selection)\" else \"\", selectionArgs)\n      }\n      else -> throw  IllegalArgumentException(\"Unknown URI: $uri\")\n    }\n\n    context.contentResolver.notifyChange(uri, null)\n    return count\n  }\n\n  override fun getType(uri: Uri): String {\n    //Returns the appropriate MIME type of records\n\n    return when (uriMatcher.match(uri)){\n      PRODUCTS -> \"vnd.android.cursor.dir/vnd.example.products\"\n      PRODUCT_ID -> \"vnd.android.cursor.item/vnd.example.products\"\n      else -> throw IllegalArgumentException(\"Unpermitted URI: \" + uri)\n    }\n  }\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.contentproviderexample\">\n\n  <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n    <activity android:name=\".MainActivity\">\n      <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n      </intent-filter>\n    </activity>\n    <provider android:authorities=\"com.example.contentproviderexample\n                     .ProductProvider\" android:name=\"ProductProvider\"/>\n  </application>\n\n</manifest>\n```", "```\npackage com.example.contentproviderexample\n\nimport android.content.ContentValues\nimport android.net.Uri\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity(), View.OnClickListener {\n\n  private lateinit var etProductName: EditText\n  private lateinit var etProductManufacturer: EditText\n  private lateinit var btnAddProduct: Button\n  private lateinit var btnShowProduct: Button\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    bindViews()\n    setupInstances()\n  }\n\n  private fun bindViews() {\n    etProductName = findViewById(R.id.et_product_name)\n    etProductManufacturer = findViewById(R.id.et_product_manufacturer)\n    btnAddProduct = findViewById(R.id.btn_add_product)\n    btnShowProduct = findViewById(R.id.btn_show_products)\n  }\n\n  private fun setupInstances() {\n    btnAddProduct.setOnClickListener(this)\n    btnShowProduct.setOnClickListener(this)\n    supportActionBar?.hide()\n  }\n\n  private fun inputsValid(): Boolean {\n    var inputsValid = true\n    if (TextUtils.isEmpty(etProductName.text)) {\n      etProductName.error = \"Field required.\"\n      etProductName.requestFocus()\n      inputsValid = false\n\n    } else if (TextUtils.isEmpty(etProductManufacturer.text)) {\n      etProductManufacturer.error = \"Field required.\"\n      etProductManufacturer.requestFocus()\n      inputsValid = false\n    }\n\n    return inputsValid\n  }\n\n  private fun addProduct() {\n    val contentValues = ContentValues()\n\n    contentValues.put(ProductProvider.NAME, etProductName.text.toString())\n    contentValues.put(ProductProvider.MANUFACTURER, \n                      etProductManufacturer.text.toString())\n    contentResolver.insert(ProductProvider.CONTENT_URI, contentValues)\n\n    showSaveSuccess()\n  }\n```", "```\n\n  private fun showProducts() {\n    val uri = Uri.parse(ProductProvider.URL)\n    val cursor = managedQuery(uri, null, null, null, \"name\")\n\n    if (cursor != null) {\n      if (cursor.moveToFirst()) {\n        do {\n          val res = \"ID: ${cursor.getString(cursor.getColumnIndex\n                   (ProductProvider.ID))}\" + \",\n          \\nPRODUCT NAME: ${cursor.getString(cursor.getColumnIndex\n                   ( ProductProvider.NAME))}\" + \", \n          \\nPRODUCT MANUFACTURER: ${cursor.getString(cursor.getColumnIndex\n                   (ProductProvider.MANUFACTURER))}\"\n\n          Toast.makeText(this, res, Toast.LENGTH_LONG).show()\n        } while (cursor.moveToNext())\n      }\n    } else {\n      Toast.makeText(this, \"Oops, something went wrong.\",\n                     Toast.LENGTH_LONG).show()\n    }\n  }\n\n  private fun showSaveSuccess() {\n    Toast.makeText(this, \"Product successfully saved.\",\n                   Toast.LENGTH_LONG).show()\n  }\n\n  override fun onClick(view: View) {\n    val id = view.id\n\n    if (id == R.id.btn_add_product) {\n      if (inputsValid()) {\n        addProduct()\n      }\n    } else if (id == R.id.btn_show_products) {\n      showProducts()\n    }\n  }\n}\n```"]