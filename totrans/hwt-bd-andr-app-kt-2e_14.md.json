["```swift\nval movies = getMovies()\ndisplayMovies(movies)\n```", "```swift\nsuspend fun getMovies(): List<Movies> { ... }\n```", "```swift\nsuspend fun getMovies(): List<Movies>  {\n    withContext(Dispatchers.IO) { ... }\n}\n```", "```swift\nMainScope().async { ... }\nMainScope().launch { ... }\n```", "```swift\nval scope = CoroutineScope(Dispatchers.IO)\n```", "```swift\nscope.cancel()\n```", "```swift\nimplementation 'org.jetbrains.kotlinx:\n    kotlinx-coroutines-core:1.6.4'\nimplementation 'org.jetbrains.kotlinx:\n    kotlinx-coroutines-android:1.6.4'\n```", "```swift\n@GET(\"movie/latest\")\nsuspend fun getMovies() : List<Movies>\n```", "```swift\nCoroutineScope(Dispatchers.IO).launch {\n    val movies = movieService.getMovies()\n    withContext(Dispatchers.Main) {\n        displayMovies(movies)\n    }\n}\n```", "```swift\nimplementation 'androidx.lifecycle:\nlifecycle-livedata-ktx:2.5.1'\n```", "```swift\n    <uses-permission android:name=\"android.permission\n    .INTERNET\" />\n    ```", "```swift\n    implementation 'org.jetbrains.kotlinx:\n        kotlinx-coroutines-core:1.6.4'\n    implementation 'org.jetbrains.kotlinx:\n        kotlinx-coroutines-android:1.6.4'\n    ```", "```swift\n    implementation 'androidx.lifecycle:\n        lifecycle-livedata-ktx:2.5.1'\n    implementation 'androidx.lifecycle:\n        lifecycle-viewmodel-ktx:2.5.1'\n    ```", "```swift\n    interface MovieService {\n        @GET(\"movie/popular\")\n        suspend fun getPopularMovies(@Query(\"api_key\")\n        apiKey: String): PopularMoviesResponse\n    }\n    ```", "```swift\n    private val apiKey = \"your_api_key_here\"\n    ```", "```swift\n        private val movieLiveData =\n            MutableLiveData<List<Movie>>()\n        private val errorLiveData =\n            MutableLiveData<String>()\n        val movies: LiveData<List<Movie>>\n            get() = movieLiveData\n        val error: LiveData<String>\n            get() = errorLiveData\n    ```", "```swift\n        suspend fun fetchMovies() {\n            try {\n                val popularMovies =\n                    movieService.getPopularMovies(apiKey)\n                movieLiveData.postValue(popularMovies\n                    .results)\n            } catch (exception: Exception) {\n                errorLiveData.postValue(\n                \"An error occurred: ${exception.message}\")\n            }\n        }\n    ```", "```swift\n    class MovieApplication: Application() {\n        lateinit var movieRepository: MovieRepository\n    }\n    ```", "```swift\n    override fun onCreate() {\n        super.onCreate()\n        val retrofit = Retrofit.Builder()\n            .baseUrl(\"https://api.themoviedb.org/3/\")\n            .addConverterFactory(\n            MoshiConverterFactory.create())\n            .build()\n        val movieService = retrofit.create(\n            MovieService::class.java)\n        movieRepository = MovieRepository(movieService)\n    }\n    ```", "```swift\n        init {\n            fetchPopularMovies()\n        }\n        val popularMovies: LiveData<List<Movie>>\n        get() = movieRepository.movies\n        val error: LiveData<String> =\n            movieRepository.error\n        private fun fetchPopularMovies() {\n            viewModelScope.launch(Dispatchers.IO)  {\n                movieRepository.fetchMovies()\n            }\n        }\n    ```", "```swift\n    val movieRepository =\n        (application as MovieApplication).movieRepository\n    val movieViewModel =\n        ViewModelProvider(\n        this, object: ViewModelProvider.Factory {\n        override fun <T : ViewModel> create(modelClass:\n        Class<T>): T {\n            return MovieViewModel(movieRepository) as T\n        }\n    })[MovieViewModel::class.java]\n    ```", "```swift\n            movieViewModel.popularMovies.observe(this) {\n            popularMovies ->\n                movieAdapter.addMovies(popularMovies\n                    .filter {\n                        it.releaseDate.startsWith(\n                            Calendar.getInstance()\n                            .get(Calendar.YEAR)\n                            .toString()\n                        )\n                    }\n                    .sortedByDescending { it.popularity }\n                )\n            }\n            movieViewModel.error.observe(this) { error ->\n                if (error.isNotEmpty()) Snackbar.make(\n                recyclerView, error, Snackbar\n                .LENGTH_LONG).show()\n    }\n    ```", "```swift\nprivate val movieLiveData: LiveData<Movie>\nval movieTitleLiveData : LiveData<String> =\n    Transformations.map(movieLiveData) { it.title }\n```", "```swift\nprivate val idLiveData: LiveData<Int> = MutableLiveData()\nval movieLiveData : LiveData<Movie> =\n    Transformations.switchMap(idLiveData) {\n    getMovieDetails(it) }\nfun getMovieDetails(id: Int) : LiveData<Movie> = { ... }\n```", "```swift\n    movieViewModel.getPopularMovies().observe(this,\n    Observer { popularMovies ->\n        movieAdapter.addMovies(popularMovies)\n    })\n    ```", "```swift\n            val popularMovies: LiveData<List<Movie>>\n            get() = movieRepository.movies.map { list ->\n            list.filter {\n                val cal = Calendar.getInstance()\n                it.releaseDate.startsWith(\n                    \"${cal.get(Calendar.YEAR)}\"\n                )\n            }.sortedByDescending { it.popularity }\n        }\n    ```", "```swift\nclass MainActivity : AppCompatActivity() {\n    ...\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        lifecycleScope.launch {\n            viewModel.fetchMovies().collect { movie ->\n                Log.d(\"movies\", \"${movie.title}\")\n            }\n        }\n    }\n}\nclass MovieViewModel : ViewModel() {\n    ...\n    fun fetchMovies(): Flow<Movie> { ... }\n}\n```", "```swift\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        lifecycleScope.launch {\n            viewModel.fetchMovies()\n            .flowOn(Dispatchers.IO)\n            .collect { movie ->\n                Log.d(\"movies\", \"${movie.title}\")\n            }\n        }\n    }\n```", "```swift\nimplementation 'androidx.lifecycle:\n    lifecycle-runtime-ktx:2.4.1'\n```", "```swift\nclass MainActivity : AppCompatActivity() {\n    ...\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        lifecycleScope.launch {\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n                viewModel.fetchMovies()\n                    .collect { movie ->\n                        Log.d(\"movies\", \"${movie.title}\")\n                    }\n            }\n        }\n    }\n}\n```", "```swift\nclass MainActivity : AppCompatActivity() {\n    ...\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ...\n        lifecycleScope.launch {\n            viewModel.fetchMovies()\n                .flowWithLifecycle(lifecycle,\n                Lifecycle.State.STARTED)\n                .collect { movie ->\n                    Log.d(\"movies\", \"${movie.title}\")\n            }\n        }\n    }\n}\n```", "```swift\nclass MovieViewModel : ViewModel() {\n    ...\n    fun fetchMovies: Flow<List<Movie>> = flow {\n        fetchMovieList().forEach { movie - > emit(movie) }\n    }\n    fun fetchTop3Titles: Flow<List<String>> {\n        val movies = fetchTopMovies()\n        return flowOf(movies[0].title,\n            movies[1].title, movies[2].title)\n    }\n    fun fetchMovieIds: Flow<Int> {\n        return fetchMovies().map { it.id }.asFlow()\n    }\n}\n```", "```swift\nclass MovieViewModel : ViewModel() {\n    ...\n    fun fetchTopRatedMovie(): Flow<Movie> {\n        return fetchMoviesFlow()\n            .transform {\n                if(it.voteAverage > 0.6f) emit(it)\n            }\n    }\n}\n```", "```swift\n        fun fetchMovies(): Flow<List<Movie>> {\n            return flow {\n                emit(movieService\n                .getPopularMovies(apiKey).results)\n            }.flowOn(Dispatchers.IO)\n        }\n    ```", "```swift\n    class MovieViewModel(\n        private val movieRepository: MovieRepository,\n        private val dispatcher: CoroutineDispatcher =\n            Dispatchers.IO\n    ) : ViewModel() {\n        ...\n    }\n    ```", "```swift\n    private val _popularMovies = MutableStateFlow(\n        emptyList<Movie>())\n    val popularMovies: StateFlow<List<Movie>> =\n        _popularMovies\n    ```", "```swift\n    private val _error = MutableStateFlow(\"\")\n    val error: StateFlow<List<String>> =_error\n    ```", "```swift\n    private fun fetchPopularMovies() {\n        viewModelScope.launch(dispatcher) {\n            movieRepository.fetchMovies().catch {\n                _error.value =\n                    \"An exception occurred:\n                    ${it.message}\"\n            }.collect {\n                _popularMovies.value = it\n            }\n        }\n    }\n    ```", "```swift\n    implementation 'androidx.lifecycle:\n    lifecycle-runtime-ktx:2.5.1'\n    ```", "```swift\n    lifecycleScope.launch {\n        repeatOnLifecycle(Lifecycle.State.STARTED) {\n            launch {\n                movieViewModel.popularMovies.collect {\n                    movies ->movieAdapter.addMovies(\n                    movies)\n                }\n            }\n            launch {\n                movieViewModel.error.collect { error ->\n                    if (error.isNotEmpty()) Snackbar\n                    .make(recyclerView, error, Snackbar\n                    .LENGTH_LONG).show()\n                }\n            }\n        }\n    }\n    ```"]