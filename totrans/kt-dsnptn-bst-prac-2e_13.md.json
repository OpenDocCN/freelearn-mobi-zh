["```kt\ndependencies {\n```", "```kt\n    implementation(...)\n```", "```kt\n    testImplementation(\"org.junit.jupiter:junit-jupiter-        api:5.6.0\")\n```", "```kt\n    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-        engine:5.6.0\")\n```", "```kt\n}\n```", "```kt\n\"org.junit.jupiter:junit-jupiter-api:5.6.0\"\n```", "```kt\n\"group:name:version\"\n```", "```kt\nval ktorVersion = \"1.6.0\"\n```", "```kt\ndependencies {\n```", "```kt\n    implementation(\"io.ktor:ktor-server-\n```", "```kt\n        netty:$ktorVersion\")\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    embeddedServer(Netty, port = 8080) {\n```", "```kt\n        routing {\n```", "```kt\n            get(\"/\") {\n```", "```kt\n                call.respondText(\"OK\")\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }.start(wait = true)\n```", "```kt\n    println(\"open http://localhost:8080\")\n```", "```kt\n}\n```", "```kt\ndependencies { \n```", "```kt\n    ...\n```", "```kt\n    implementation(\"io.ktor:ktor-server-cio:$ktorVersion\") \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nembeddedServer(CIO, port = 8080) { \n```", "```kt\n    ...\n```", "```kt\n}.start(wait = true)\n```", "```kt\nrouting { \n```", "```kt\n    get(\"/\") { \n```", "```kt\n        call.respondText(\"OK\") \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nget(\"/status\") {\n```", "```kt\n    call.respond(mapOf(\"status\" to \"OK\"))\n```", "```kt\n}\n```", "```kt\ndependencies {\n```", "```kt\n    ...\n```", "```kt\n    implementation(\"org.jetbrains.kotlinx:kotlinx-        serialization-json-jvm:1.3.0\")\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\ninstall(ContentNegotiation) {\n```", "```kt\n    json()\n```", "```kt\n} \n```", "```kt\n> {\"status\":\"OK\"}\n```", "```kt\ndependencies {\n```", "```kt\n    ...\n```", "```kt\n    testImplementation(\"io.ktor:ktor-server-\n```", "```kt\n        tests:$ktorVersion\")\n```", "```kt\n}\n```", "```kt\ninternal class ServerTest {\n```", "```kt\n    @Test\n```", "```kt\n    fun testStatus() {\n```", "```kt\n        withTestApplication {\n```", "```kt\n            val response = handleRequest(HttpMethod.Get,                 \"/status\").response\n```", "```kt\n            assertEquals(HttpStatusCode.OK,                 response.status())\n```", "```kt\n            assertEquals(\"\"\"{\"status\": \"OK\"}\"\"\",                 response.content)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun main() {\n```", "```kt\n    embeddedServer(\n```", "```kt\n        CIO,\n```", "```kt\n        port = 8080,\n```", "```kt\n        module = Application::mainModule\n```", "```kt\n    ).start(wait = true)\n```", "```kt\n}\n```", "```kt\nfun Application.mainModule() {\n```", "```kt\n    install(ContentNegotiation) {\n```", "```kt\n        json()\n```", "```kt\n    }\n```", "```kt\n    routing {\n```", "```kt\n        get(\"/status\") {\n```", "```kt\n            call.respond(mapOf(\"status\" to \"OK\"))\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    println(\"open http://localhost:8080\")\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun testStatus() {\n```", "```kt\n    withTestApplication(Application::mainModule) {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ndependencies {\n```", "```kt\n    implementation(\"org.jetbrains.exposed:exposed:0.17.14\")\n```", "```kt\n    implementation(\"org.postgresql:postgresql:42.2.24\")\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nobject DB {\n```", "```kt\n    private val host=System.getenv(\"DB_HOST\")?:\"localhost\"\n```", "```kt\n    private val port =         System.getenv(\"DB_PORT\")?.toIntOrNull() ?: 5432\n```", "```kt\n    private val dbName = System.getenv(\"DB_NAME\") ?:         \"cats_db\"\n```", "```kt\n    private val dbUser = System.getenv(\"DB_USER\") ?:         \"cats_admin\"\n```", "```kt\n    private val dbPassword = System.getenv(\"DB_PASSWORD\")         ?: \"abcd1234\"\n```", "```kt\n  fun connect() = Database.connect(      \"jdbc:postgresql://$host:$port/$dbName\",      driver = \"org.postgresql.Driver\",      user = dbUser,      password = dbPassword\n```", "```kt\n  )\n```", "```kt\n}\n```", "```kt\n$ createuser cats_admin -W –d\n```", "```kt\n$ createdb cats_db -U cats_admin\n```", "```kt\nobject CatsTable : IntIdTable() {\n```", "```kt\n    val name = varchar(\"name\", 20).uniqueIndex()\n```", "```kt\n    val age = integer(\"age\").default(0)\n```", "```kt\n}\n```", "```kt\ndata class Cat(val id: Int,\n```", "```kt\n               val name: String,\n```", "```kt\n               val age: Int)\n```", "```kt\nDB.connect()\n```", "```kt\ntransaction {\n```", "```kt\n    SchemaUtils.create(CatsTable)\n```", "```kt\n}\n```", "```kt\n{\"name\": \"Meatloaf\", \"age\": 4}\n```", "```kt\n@Test\n```", "```kt\nfun `POST creates a new cat`() {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nwithTestApplication(Application::mainModule) {\n```", "```kt\n    val response = handleRequest(HttpMethod.Post, \"/cats\") {\n```", "```kt\n        addHeader(\n```", "```kt\n          HttpHeaders.ContentType,\n```", "```kt\n          ContentType.Application.FormUrlEncoded.toString()\n```", "```kt\n        )\n```", "```kt\n        setBody(\n```", "```kt\n            listOf(\n```", "```kt\n                \"name\" to \"Meatloaf\",\n```", "```kt\n                \"age\" to 4.toString()\n```", "```kt\n            ).formUrlEncode()\n```", "```kt\n        )\n```", "```kt\n    }.response\n```", "```kt\n    assertEquals(HttpStatusCode.Created, response.status())\n```", "```kt\n}\n```", "```kt\npost(\"/cats\") {\n```", "```kt\n    ...    \n```", "```kt\n    call.respond(HttpStatusCode.Created)\n```", "```kt\n}\n```", "```kt\nval parameters = call.receiveParameters()\n```", "```kt\nval name = requireNotNull(parameters[\"name\"])\n```", "```kt\nval age = parameters[\"age\"]?.toInt() ?: 0\n```", "```kt\ntransaction {\n```", "```kt\n    CatsTable.insert { cat ->\n```", "```kt\n        cat[CatsTable.name] = name\n```", "```kt\n        cat[CatsTable.age] = age\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n@BeforeEach\n```", "```kt\nfun setup() {\n```", "```kt\n    DB.connect()\n```", "```kt\n    transaction {\n```", "```kt\n        SchemaUtils.drop(CatsTable)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nget(\"/cats\") {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nget(\"/cats/{id}\") {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nval id = requireNotNull(call.parameters[\"id\"]).toInt()\n```", "```kt\nval cat = transaction {\n```", "```kt\n    CatsTable.select {\n```", "```kt\n        CatsTable.id.eq(id)\n```", "```kt\n    }.firstOrNull()\n```", "```kt\n}\n```", "```kt\nif (row == null) {\n```", "```kt\n    call.respond(HttpStatusCode.NotFound)\n```", "```kt\n} else {\n```", "```kt\n    call.respond(\n```", "```kt\n        Cat(\n```", "```kt\n            row[CatsTable.id].value,\n```", "```kt\n            row[CatsTable.name],\n```", "```kt\n            row[CatsTable.age]\n```", "```kt\n        )\n```", "```kt\n    )\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun `GET with ID fetches a single cat`() {\n```", "```kt\n    withTestApplication(Application::mainModule) {\n```", "```kt\n        val id = transaction {\n```", "```kt\n            CatsTable.insertAndGetId { cat ->\n```", "```kt\n                cat[name] = \"Fluffy\"\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n         val response = handleRequest(HttpMethod.Get, \n```", "```kt\n            \"/cats/$id\").response\n```", "```kt\n        assertEquals(\"\"\"{\"id\":1,\"name\":\n```", "```kt\n            \"Fluffy\",\"age\":0}\"\"\", response.content)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n> Serializer for class 'Cat' is not found.\n```", "```kt\nplugins {\n```", "```kt\n    kotlin(\"jvm\") version \"1.5.10\"\n```", "```kt\n    application\n```", "```kt\n    kotlin(\"plugin.serialization\") version \"1.5.10\"\n```", "```kt\n}\n```", "```kt\n@Serializable\n```", "```kt\ndata class Cat(\n```", "```kt\n    val id: Int,\n```", "```kt\n    val name: String,\n```", "```kt\n    val age: Int\n```", "```kt\n)\n```", "```kt\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n```", "```kt\nclass ServerTest {\n```", "```kt\n    @BeforeAll\n```", "```kt\n    fun setup() {\n```", "```kt\n        DB.connect()\n```", "```kt\n        transaction {\n```", "```kt\n            SchemaUtils.create(CatsTable)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    @AfterAll\n```", "```kt\n    fun cleanup() {\n```", "```kt\n        DB.connect()\n```", "```kt\n        transaction {\n```", "```kt\n            SchemaUtils.drop(CatsTable)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n@Nested\n```", "```kt\ninner class `With cat in DB` {\n```", "```kt\n    @Test\n```", "```kt\n    fun `GET with ID fetches a single cat`() {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nlateinit var id: EntityID<Int>\n```", "```kt\n@BeforeEach\n```", "```kt\nfun setup() {\n```", "```kt\n    DB.connect()\n```", "```kt\n    id = transaction {\n```", "```kt\n        CatsTable.insertAndGetId { cat ->\n```", "```kt\n            cat[name] = \"Fluffy\"\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n@AfterEach\n```", "```kt\nfun teardown() {\n```", "```kt\n    DB.connect()\n```", "```kt\n    transaction {\n```", "```kt\n        CatsTable.deleteAll()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun `GET with ID fetches a single cat`() {\n```", "```kt\n    withTestApplication(Application::mainModule) {\n```", "```kt\n        val response = handleRequest(HttpMethod.Get,             \"/cats/$id\").response         assertEquals(\"\"\"{\"id\":$id,\"name\":\"Fluffy\",            \"age\":0}\"\"\", response.content)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n@Test\n```", "```kt\nfun `GET without ID fetches all cats`() {\n```", "```kt\n    withTestApplication(Application::mainModule) {\n```", "```kt\n        val response = handleRequest(HttpMethod.Get,             \"/cats\").response         assertEquals(\"\"\"[{\"id\":$id,\"name\":\"Fluffy\",            \"age\":0}]\"\"\", response.content)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nget(\"/cats\") {\n```", "```kt\n    val cats = transaction {\n```", "```kt\n        CatsTable.selectAll().map { row ->\n```", "```kt\n            Cat(\n```", "```kt\n                row[CatsTable.id].value,\n```", "```kt\n                row[CatsTable.name],\n```", "```kt\n                row[CatsTable.age]\n```", "```kt\n            )\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    call.respond(cats)\n```", "```kt\n}\n```", "```kt\nrouting {\n```", "```kt\n    get(\"/status\") {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    post(\"/cats\") {\n```", "```kt\n        ...    \n```", "```kt\n    }\n```", "```kt\n    get(\"/cats\") {\n```", "```kt\n        …\n```", "```kt\n    }\n```", "```kt\n    get(\"/cats/{id}\") {\n```", "```kt\n        ...    \n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nrouting { \n```", "```kt\n    get(\"/status\") { \n```", "```kt\n        ... \n```", "```kt\n    } \n```", "```kt\n    cats() \n```", "```kt\n}\n```", "```kt\nfun Routing.cats() {\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nfun Routing.cats() {\n```", "```kt\n    post(\"/cats\") {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    get(\"/cats\") {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    get(\"/cats/{id}\") {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```"]