- en: Chapter 7. Advanced Content Creation for Urban Warrior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our game level finished from the previous chapter, we now have a level
    that has been playtested and we know that it is quite fun. Now that we have a
    great base to build on we can create our own content for our game to customize
    it and make the game really your own.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a main menu for our game with input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding audio on mobile UDK for our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing custom textures to our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating materials for both PC and iOS to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding static meshes on mobile UDK for our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some tips for optimization and debugging on the iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The assets that I will be bringing into the game in this level will be available
    on the Packt Publishing website, but with the information contained in this chapter
    it should be fairly easy to create assets of your own that you can bring into
    the game. With that being said, let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Main menu environment creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As nice as dropping right in the action of a game is, most games have a menu
    of some sort. This will also be a nice way of showing you how we can use aspects
    that we have already covered before doing something different.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—building main menu backdrop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sure, most menus in a game look like they''re something special, but in reality
    they are just a new level. To build the main menu backdrop perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s open up the map that we previously used in [Chapter 3](ch03.html
    "Chapter 3. Taking It to the Next Level: Enriching with Content"), *Taking It
    to the Next Level; Enriching with Content*. Select the skydome and the two directional
    lights we created and copy them by pressing *Ctrl+C*, this is shown in the following
    screenshot:![Time for action—building main menu backdrop](img/1901_07_01.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new level by selecting **File** | **New..**. and select the **Blank
    Map** template. Paste the objects into your level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Cube** icon on the left-hand side toolbar directly underneath
    the **Brushes** text. In the settings for the builder brush check the **Hollow**
    option. This will create a hollow cube. Click on the **Build** button and then
    add the geometry to our level by clicking on the **CSG_Add** option that we used
    in [Chapter 2](ch02.html "Chapter 2. Beginning Urban Warrior, a Third-person Shooter"),
    *Beginning Urban Warrior; A First Person Shooter* or by using *Ctrl+A*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the camera inside of the box and create a **Player Start** actor by right-clicking
    and selecting **New Actor** | **New Player Start**. If the object has a red **X**
    on it move the object until it has plenty of space on all sides in order to spawn
    the player there:![Time for action—building main menu backdrop](img/1901_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the **WorldInfo Properties** by going to the top menu and selecting **View**
    | **World Properties**. In the **Game Type** section set the **Default Game Type**
    and **Game Type** for PIE to **MobileMenuGame**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By either copying and pasting from the actual game level or finding `StaticMesh'LT_Mech.SM.Mesh.S_LT_Mech_SM_CityNoRing01`
    inside the Content Borwser, place two of the objects into your game world in such
    a way that they have buildings in all angles.![Time for action—building main menu
    backdrop](img/1901_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Actor Classes** tab by selecting **View** | **Browser Windows**
    | **Actor Classes**. Select the **CameraActor** found in **Common** | **CameraActor**
    and exit the building. Create a camera by right-clicking and selecting **Add Camera
    Actor Here**. Position the camera in the middle of your area, tilted slightly
    to the sky. In particular you want to make sure that you cannot see the hollow
    box we created earlier. If it's easier for you to move it out of the way, feel
    free to do that.![Time for action—building main menu backdrop](img/1901_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F4* in order to access the Camera Actor's properties. In the **Movement**
    section change the **Physics** property to **PHYS_Rotating**. Select the **Yaw**
    section of the **Rotation Rate** and set it to `20`. This special type of physics
    will move the actor along the rotation rate but will not be able to do anything
    else. This would be great for our main menu as we just want a nice background
    effect to show up. This is how the Camera Actor's property window will look:![Time
    for action—building main menu backdrop](img/1901_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With our level created and our **CameraActor** selected let's go into Kismet.
    Create a **Level Loaded Event** (New **Event** | **Level Loaded)**. To its right-hand
    side create a new Matinee by right-clicking and selecting **New Matinee**. Connect
    the **Loaded** and **Visible** output of the **Level Loaded** event to the **Play**
    action of the **Matinee** and double-click on the **Matinee** to enter the Matinee
    editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a camera track with the name `Turning Camera` by right-clicking and selecting
    **Add New Camera Group**. Then create a new **Director Group** by right-clicking
    and selecting **Add New Director Group**. Add a **Keyframe** at the beginning
    of the Matinee sequence and select **Turning Camera** at the **Cut To Group**
    option that comes up. Close the Matinee editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Kismet select the Matinee object and make sure that the **Looping**
    option is checked. Exit Kismet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Lightmass Importance Volume** to cover the area around the player
    including the buildings. Also make sure that the lights are not inside any of
    the buildings, move them if you need to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build our game by selecting **Build** | **Build All** and clicking on **Close**
    when finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button. This is how your screen should look:![Time for action—building main menu
    backdrop](img/1901_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now see a nice cityscape as our camera pans around at a constant rate. This
    will be a nice looking background for our title screen, and with this as a basis
    we can build our main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Importing textures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mobile graphics hardware works with different formats and handles textures
    differently than a normal PC graphics hardware. By taking the necessary precautions
    and creating textures accordingly, many obstacles can be avoided. Now, I'm by
    no means an art expert but I'll briefly go over some things that you should abide
    by if you do decide to do your own textures for iOS.
  prefs: []
  type: TYPE_NORMAL
- en: When creating your own textures it is important to make the size of the image
    in powers of two such as 256, 512, 1024, and 2048\. Computers process data in
    "chunks" for purposes of efficiency. For game content creation, on devices mobile
    especially, if a texture is not in a power of two Unreal will waste resources
    both in terms of time and processing power in order fix the problem. In effect
    the essence of the power of two rule is optimization, being as efficient and as
    "lite" as possible while providing the user an appropriate visual experience.
    When working with iOS, hardware textures can have a size of up to 2048 by 2048
    but use them sparingly. This is particularly important in the case of games targeting
    lower end devices (such as iPhone 3GS, iPad 1, and iPod touch 4th generation)
    that only have 256 MB of RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following texture formats are supported: `.bmp, .pcx, .png, .tga, .float`
    and `.psd`.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—finishing the main menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That being said, let''s import our first texture into the game:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Content Browser** by either selecting its icon or going to the
    **View** menu and selecting **View** | **Browser Windows** | **Content Browser**.
    Click on the **Import** button in the menu at the bottom of the window. Find the
    image that you would like to bring into the game and select **Open**:![Time for
    action—finishing the main menu](img/1901_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be an import dialog that will come up. In the **Packages** section
    type the name `UW-MainMenuPKG` and confirm that `logo` is in the **Name** section.
    You should be brought back to the **Content Browser** where you will see our new
    package with one new file:![Time for action—finishing the main menu](img/1901_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Underneath the **New Packages** option in the **Packages** section on the left-hand
    side toolbar, right-click on the package that we just created and select **Save**
    to save the package as a file. It is important to save things often to make sure
    you don't lose your work:![Time for action—finishing the main menu](img/1901_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Close the **Content Browser** and go back into Kismet. Create a **Draw Image
    event** by right-clicking and selecting **New Event** | **HUD** | **Draw Image**.
    In the properties for it select the **Display Color** as white. In the **Display
    Location** section set the **X** value to `.25`. Set the **XL** and **YL** to
    `0.5` and **UL** and **VL** to `512`. It is important to note that this Kismet
    event doesn''t give you the option to do proper scaling for aspect ratio differences
    so more complex logos may be squished, so play with the values until you find
    what works for you. Check the **Is Active** checkbox and change the **Authorized
    Global Scale** to `1.0`. Go to the **Content Browser** and left-click on our logo
    image. In the **Draw Image** properties click on the green arrow next to the **Display
    Texture** option in order to set our logo image in the world. Place a Player 0
    variable underneath the Target by right clicking and selecting **New Variable**
    | **Player** | **Player**. Inside the **Player** variable uncheck the **All Players**
    checkbox in its properties. A few of the changes we made are seen in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—finishing the main menu](img/1901_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button. This is how the preview would look:![Time for action—finishing the main
    menu](img/1901_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have a title that follows us when we start the game, but as of right
    now nothing happens and there's no way to start the game properly. What we're
    going to do next is place some text that says "**Tap anywhere to begin**" in the
    middle of the screen and then create a button which when tapped will open our
    main game level. Knowing what we plan on doing, let's do that now!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up the **Content Browser** by going to the **View** menu and selecting
    **View** | **Browser Windows** | **Content Browser**. In the **Object Type** section
    change the tab from **Favorites** to **All Types** and check **Fonts**. In the
    search bar type `36` and left-click on the font on the bottom which specifically
    is `Font'UI_Fonts.Fonts.UI_Fonts_Positec36'`. With it selected, open up Kismet.![Time
    for action—finishing the main menu](img/1901_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to Kismet and create a **Show Text** event by right-clicking next to
    the **Draw Image** event and selecting **New Event** | **HUD** | **Draw Text**.
    In the **Properties** section click on the green arrow next to **Display Font**
    to set the font we are going to use. Change the **Display Color** to white. On
    the **Display Location** put **X** as `.5`, **Y** as `.75` to be directly below
    our image and **Z** to `0`. In the **Display Text** section type `Tap anywhere
    to begin!`. Change the **Text Draw Method** to **DRAW_CenterText** and check the
    **Is Active** checkbox . Change the **Authorized Global Scale** to `1.0`. Underneath
    the **Target** place a Player 0 variable by right-clicking and selecting **New
    Variable** | **Player** | **Player** and uncheck the **All Players** checkbox
    in its properties. A few of the changes we made are seen in the following screenshot:![Time
    for action—finishing the main menu](img/1901_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a bool variable underneath the **Active** section on the **Draw Text
    Event** by right-clicking on the square under the word and selecting **Create
    New Bool Variable**. Move the Matinee Sequence we just created in the **Level
    Loaded** event by selecting it and its associated object, and hold the *Ctrl*
    key to move it by dragging your left mouse button. To the right of the **Level
    Loaded** event create a new **Toggle** action by right-clicking and selecting
    **New Action** | **Toggle** | **Toggle**. Connect the **Loaded and Visible** output
    to the **Toggle** input of **Toggle**. Connect the **Bool** input of **Toggle**
    to the bool on our **Draw Text** action. Connect the **Out** from the **Toggle**
    event to the **Toggle** input of it and right click on the **Out** output and
    click on **Set Activate Delay** and give it a value of `0.1` as shown in the following
    screenshot:![Time for action—finishing the main menu](img/1901_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the blinking text saying to hit the button, how about we create
    a button to respond to the players touch? Remove the connection between the **Loaded
    and Visible** output of the **Level Loaded** event and the **Toggle** input of
    the **Toggle** event, move it over to the right and create an **Add Input Zone**
    action by right-clicking and selecting **New Action** | **Mobile** | **Add Input
    Zone**. Set the **Zone Name** to `StartGame`. Click on the little blue triangle
    next to the **New Zone** to create a new **MobileInputZone**. Inside the **Zone**
    you just created, in the **Bounds** section set the **Authored Global Scale**
    to `1.0` and the **Size X** and **Size Y** to `1.0` and check **Relative Size
    X** and **Relative Size Y** checkboxes, as shown in the following screenshot:![Time
    for action—finishing the main menu](img/1901_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have a button created (it's invisible so you can't see it, but I
    assure you it's there) we should work on creating some sort of interaction when
    it happens.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a **Mobile Button Access** event by right-clicking and selecting **New
    Event** | **Input** | **Mobile Button Access**. Inside the properties under **Seq
    Event Mobile Zone Base** in the **Target Zone Name** put the zone we created earlier,
    `StartGame`. In the **Sequence Event** section change the **Re Trigger Delay**
    to `1.0`. In the **Sequence Object** properties under **Obj Comment** type `Pressed`
    and then the check **Output Obj Comment To Screen** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Unreal Editor it is not possible to open up other levels, however
    it will work in the actual game. This is just to verify that the button does indeed
    work for us.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a **Console Command** action by right-clicking and selecting **New Action**
    | **Misc** | **Console Command**. In the **Commands** section under **[0]** type
    `open levelname` where `levelname` is the name of the level you want to load.
    Create a **Player 0** variable underneath the **Target** of the **Console Command**.
    Remember that when you are ready to publish the game, remove the comments that
    you created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button. The preview will look like the following screenshot:![Time for action—finishing
    the main menu](img/1901_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With that, we have created a main menu such that when we tap the screen will
    go into our game level creating a professional looking start to our game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Something that many people take for granted, sound, can have a massive effect
    on people when they are playing your game. To give you a taste of how simple it
    is to add sounds to your game let's add one when we start the game.
  prefs: []
  type: TYPE_NORMAL
- en: However, just because it is easy to add sounds to our game, playing sounds on
    iOS devices is quite hard to do—it takes a lot of computing as an iOS device is
    only able to play one at a time; this is because sounds that are played are uncompressed.
    This is unlike music that you listen to on your computer (unless you are an audiophile)
    which is compressed in a format like MP3 which uses a compression algorithm to
    keep the size of files small. However, having uncompressed sounds makes the files
    a lot larger. Initializing multiple sounds in the same frame can cause a lot of
    performance problems. It is a good idea to not play multiple sounds at once if
    you can help it. This being said, you're going to want to make them as small as
    possible. Using 22 kHz sounds over 44 kHz sounds on iOS is an easy way to gain
    a lot of performance that would otherwise be going into processing the sound files.
    Given that the typical use case of an iOS device is either going to be over the
    bad speaker or bad headphones included with the device, you can gain a lot of
    performance for minimal sound difference.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—playing a sound effect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want the player to know that we have understood him/her tapping to start
    the game. Let''s play a sound to show him/her we know. We can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Content Browser** by either selecting its icon or going to the
    **View** menu and selecting **View** | **Browser Windows | Content Browser** .
    Click on the **Import** button in the menu at the bottom of the window. Find the
    sound that you would like to bring into the game and select **Open**. In the window
    that pops up set the package with the same name that you just created and open
    up the tab in the Options menu and check **Auto Create Cue** then click on **OK**,
    saying yes if it asks you to import the entire package.![Time for action—playing
    a sound effect](img/1901_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the package name on the left-hand side of the **Content Browser**
    and save our package by selecting **Save** on the menu. Left-click on the **Sound
    Cue** object and exit into Kismet.![Time for action—playing a sound effect](img/1901_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside Kismet disconnect the **Console Command** action that we created previously
    by holding down *Alt* and clicking on the line connecting it from the **Mobile
    Button Access** event and move it to the right by holding *Ctrl* and dragging.
    In the space available create a **Play Sound** action by right-clicking and selecting
    **New Action** | **Sound** | **Play Sound**. In the **Play Sound** action's properties
    click on the green arrow in the **Play Sound** property to set it to the sound
    we created. Connect the **Input Pressed** output from the **Mobile Button Access**
    event to the **Play** on the **Play Sound** action and the **Finished** from the
    **Play Sound** action to the **Console Command** event. Your screen should look
    like the following screenshot:![Time for action—playing a sound effect](img/1901_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And now our menu creates a sound whenever we tap the screen!
  prefs: []
  type: TYPE_NORMAL
- en: Customizing sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the way that I'm doing sound right now doesn't take into account the
    sound's position in space. This doesn't matter since the sound is going to be
    playing directly at the player, but if you wanted to, you can edit the **SoundCue**
    by right-clicking on it in the **Content Browser** and selecting **Edit Using
    SoundCue Editor**.
  prefs: []
  type: TYPE_NORMAL
- en: The SoundCue Editor is very similar to Kismet other than the fact that the only
    event called is when it is played which is shown by an image of a Speaker. The
    **attenuation** feature can be applied to events in order to put a given sound
    into world space instead of it always being the same. However, this can only work
    if the sound is a mono sound.
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing sounds](img/1901_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is set it is possible to drag-and-drop a SoundCue inside a level,
    into the game world. So if you would like to add sound effects in your level that
    way you are welcome to try this and when you go around your level the sound will
    become louder and shift location based on where you are in the game world. There
    are plenty of other features to look at here, such as randomizers, but we'll only
    be playing a simple sound here. Play around with it in your own time or look at
    the Sound Cues that Epic provides with UDK to see the possible things you can
    do, such as adding modulation and variation to sounds, just like the gun shots
    sound different depending on your location in the game world, when you fire them.
    Have fun with it!
  prefs: []
  type: TYPE_NORMAL
- en: Adding music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to sound, music is done slightly differently on iOS than they are done
    for the PC. Since mobiles are usually media players they have hardware that specifically
    works with playing music efficiently, but the mobile platform is also limited
    in what it can do. Let's first add some music to our level.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding a background music track
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, mobile devices have dedicated sound hardware for compressed sounds. iOS
    devices can play back one compressed stream at a time with little to no cost,
    so it will be our job to create music that works well in that regard. However,
    MP3 files do not work in the PC version of Unreal in either the editor or main
    game so I will be showing you how to add music in the Editor as well. We can do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Windows Explorer and open your `UDKGame\Build\iPhone\Resources\Music`
    folder. This is the folder that you need to place any MP3 file that you want to
    play within your game. For the sake of this we will be using a file already included
    with UDK, but feel free to put in any MP3 file that you like and whenever I say
    `Jazz_Menu_01`, type the name of your file. The music folder would look like the
    following screenshot:![Time for action—adding a background music track](img/1901_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Content Browser** by either selecting its icon or going to the **View**
    menu and selecting **View** | **Browser Windows** | **Content Browser**. Inside
    the **Content Browser** change the **Object Type** to **Sound Cues** and type
    `music` in the textbox at the top of the window. Left-click on the first item
    which is `SoundCue'A_Music_GoDown.MusicSegments.A_Music_GoDown_Ambient01Cue'`
    and exit into Kismet. The following screenshot shows this:![Time for action—adding
    a background music track](img/1901_07_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this file will not be used in the game when it goes on an iOS device,
    but will let you know that for sure that sound is playing. If you had your own
    music file you could export it with Audacity ([http://audacity.sourceforge.net/](http://audacity.sourceforge.net/))
    and import it in much the same way that you would for sound effects, but that
    is a good exercise to do on your own.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Kismet remove the connection between the **Loaded and Visible** output on
    the **Level Loaded** event and the **In** section of the **Add Input Zone** action.
    Move the **Level Loaded** action to the left by holding *Ctrl* and dragging. In
    the space created right-click and create a **Play Music Track** action by right-clicking
    and selecting **New Action** | **Sound** | **Play Music Track**. Connect the **Loaded
    and Visible** output from the **Level Loaded** event into the **In** of the **Play
    Music Track** and the **Out** from the **Play Music Track** action into the **In**
    of the **Add Input Zone** action. Inside the properties for the **Play Music Track**
    action extend the **Seq Act Play Music Track** section. Click on the green arrow
    next to the **Sound Cue** to set the PC version of music to play, and then at
    the bottom of the screen you will see **MP3Filename** where you will put `Jazz_Menu_01.`![Time
    for action—adding a background music track](img/1901_07_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With that, we have created a main menu that when tapped will go into our game
    level creating a professional looking start to our game.
  prefs: []
  type: TYPE_NORMAL
- en: Custom materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Materials are what the Unreal Engine uses in order to put images onto brushes
    or 3D models that we've created; now, we'll get to putting in custom models in
    a minute, but first we need to get materials in and for those that don't know
    how to use a 3D modeling program this will be the extent of what they can do,
    without learning another program. There are also some stunning professional-quality
    maps made only using Materials and BSPs and minimal meshes such as the *Hardcore
    Oldskool Low-Poly Map Pack* at [http://holp.beyondunreal.com/index.html](http://holp.beyondunreal.com/index.html),
    so you don't have to learn one if you don't want to, but it helps.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—customizing brushes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The level that we created in the previous chapter does indeed look good, but
    it would be even better to put actual buildings into the level, so let's try to
    make the brushes more building-like by adding some custom Materials to them!
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Content Browser** by either selecting its icon or going to the
    **View** menu and selecting **View** | **Browser Windows** | **Content Browser**.
    Click on the **Import** button in the menu at the bottom of the window. Select
    both the files `building03` and `building03_NRM` by clicking on one, holding down
    the *Ctrl* key and selecting the other. With these selected click on **Open**.
    This is how your screen would look:![Time for action—customizing brushes](img/1901_07_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be an import dialog that will come up. In the **Package** section
    type the name `UW-GamePKG` and confirm that `building03` is in the **Name** section.
    Inside the **Options** section check the box for **Create Material** and click
    on **OK** and then for the `building03_NRM` file uncheck the **Create Material**
    option and click on **OK**. You should be brought back to the **Content Browser**
    where you will see our new package with three new files, as shown in the following
    screenshot:![Time for action—customizing brushes](img/1901_07_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `building03_Mat` material in order to enter the **Material
    Editor**. Now the **Material Editor** may look scary at first, but just like the
    Sound Editor it is amazingly similar to Kismet when you look at it. Click on the
    **Texture Sample** with the texture that we imported and drag it to the right-hand
    side of the **Diffuse** option by holding *Ctrl* and dragging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Content Browser** and select the `building03_NRM` texture by left-clicking
    it and going back into the **Material Editor**. Hold down the *T* key and left-click
    on the screen near the **Normal** section of the **PreviewMaterial_0** area, you
    should see a new Texture Sample show up. You also select the Texture Sample from
    the menu on the right-hand side and drag-and-drop it in from the **Material Expressions**
    area. Connect the **Normal** option from the **PreviewMaterial_0** to the black
    connector of the new **Texture Sample**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that our Material now looks like it has depth to it. That is
    because a normal map is a technique used for faking the lighting of bumps and
    dents. It is used to add details without using more polygons and what you see
    now is how it would look if you played your game on PC. When playing the game
    on iOS, UDK will attempt to bake it into the lightmap used by the level using
    the PC materials normal map, while the advanced effects use the normal map slot
    under the **Mobile** section of the material editor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Again, there are a lot of other options that you can use on the PC version of
    UDK that you cannot use on the iOS. However, there is a very good guide for those
    who want to create their own textures on the different things you can do on UDN
    at [http://udn.epicgames.com/Three/MobileMaterialReference.html](http://udn.epicgames.com/Three/MobileMaterialReference.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deselect the **Texture Sample** and you should see the **Properties** for the
    Material at the bottom of the screen. Open up the **Mobile** section by click
    on the green arrow beside **Mobile Normal Texture** in order to load our normal
    map into the game. Go into the **Content Browser** and select our diffuse texture
    and then click the green arrow for **Mobile Base Texture**. The **Material Editor**
    window will look like the following screenshot:![Time for action—customizing brushes](img/1901_07_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the menu click on the green checkmark at the top in order to save the changes
    that you've made and close the **Material Editor**. Save the package you've created
    by right-clicking on the package and selecting **Save** from the menu and saving
    the package in a location on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 to 6 for the other materials in the folder as we will be using
    them later.![Time for action—customizing brushes](img/1901_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up the game level that we created in the previous chapter. Find a large
    brush that you created for a building before, left-click to select one of the
    surfaces then right-click and select **Select Surfaces** | **Matching Brush**.
    Go to the **Content Browser** and select `building01_Mat` by left-clicking on
    it. At the brush right-click and select **Apply Material : building01_Mat**. You
    may click on the **Unlit** button on the perspective toolbar or press *Alt+3*
    to help you see what''s going on. When you are finished you can press *Alt+4*
    to go back to **Lit** mode.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can start to see how the building could work out using this material, but
    each side seems to be doing its own thing in the different coordinates, thankfully
    we can easily fix this problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the **Surface Properties** menu by either pressing *F5* or going to
    **View** | **Surface Properties** and selecting the matching brush textures again.
    Change the **Alignment** to **Box** and hit **Apply**. Then change the **Simple**
    scaling value to `4.0` and hit **Apply** again.![Time for action—customizing brushes](img/1901_07_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply textures to your level on buildings that you would like to see changed
    using the materials provided or with your own. Note that since the player will
    not see the roofs of our buildings we do not need to have a texture for them.
    This is seen in the following screenshot:![Time for action—customizing brushes](img/1901_07_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button.![Time for action—customizing brushes](img/1901_07_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have a world that looks more polished with our own textures filling the
    world. With the same basic concepts here you can paint your brushes however you
    want!
  prefs: []
  type: TYPE_NORMAL
- en: Custom meshes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The static meshes that are included inside of UDK are fine, but if you want
    to create anything that is remotely different and detailed, chances are you will
    need to import custom meshes of your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those creating their own models, there are various different tutorials
    on the internet for you to look at, but in general export your model as an FBX
    file and enable smoothing groups when exporting it and try to keep your models
    as low poly as possible. For more information on the creation of the models you
    can visit: [http://udn.epicgames.com/Three/DesigningForMobile.html](http://udn.epicgames.com/Three/DesigningForMobile.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—importing custom objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our case, we would like to replace some of the BSP buildings that we created
    in the game with some simple static meshes that I created. We can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the **Content Browser** by either selecting its icon or going to the
    **View** menu and selecting **View** | **Browser Windows** | **Content Browser**.
    Click on the **Import** button in the menu at the bottom of the window. Find the
    two building `.fbx` files, select them and then click on **Open**. In the window
    that pops up set the package with the same name that you created before and click
    on **OK**, saying yes if it asks you to import the entire package. This is seen
    in the following screenshot:![Time for action—importing custom objects](img/1901_07_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the package name on the left-hand side of the **Content Browser**
    and save our package by selecting **Save** in the menu. Double-click on the first
    building in order to enter its properties, as shown in the following screenshot:![Time
    for action—importing custom objects](img/1901_07_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Static Mesh Editor** open go back into the **Content Browser** and
    left-click on `building01_Mat` file. Inside the Properties under **LODInfo.[0].Elements.[0]**
    in **Material** click on the green arrow pointing towards the left to set the
    Material to the one we selected, as shown in the following screenshot:![Time for
    action—importing custom objects](img/1901_07_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the menu at the top of the **Static Mesh Editor** click **Collision** | **6DOP
    Simplified Collision** in order to make the building collide with objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like to see the collision generated for the object you can click
    on the icon in the panel at the top of the screen that looks like it has a red
    box around it. You can also import your own custom collision that you created
    in your favorite modeling program. For more information about that, visit: [http://udn.epicgames.com/Three/FBXStaticMeshPipeline.html#Collision](http://udn.epicgames.com/Three/FBXStaticMeshPipeline.html#Collision)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click on **building02** to enter the **Static Mesh Editor** and repeat
    steps 3 and 4 using `building02_Mat` as the material to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in our level find a building that is a similar shape to **building01**.
    Delete that brush and in its place right-click and select **Add Static Mesh :
    UWGamePKG.Building01**. Scale the object up till it fits the area of the object
    you deleted and move it down until it fits the ground or hit the *End* key, then
    click on **Rebuild All**.![Time for action—importing custom objects](img/1901_07_34.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for other buildings, and continue replacing brushes with the buildings
    at random intervals trying to make it so you can't see duplicates of them within
    the same frame or area.![Time for action—importing custom objects](img/1901_07_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on the **Emulate Mobile Feature** at this point to give you a better feel
    of what the game may look on the device. You can toggle the mode on and off by
    clicking on the little icon that looks like a phone to the left-hand side of the
    **Install on iOS Device** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project and start your game by clicking on the **Start Mobile Previewer**
    button.![Time for action—importing custom objects](img/1901_07_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You now have all sorts of custom features added into your game giving you some
    great examples and now if you'd like to go in and bring in your own models you
    are free to do that as well!
  prefs: []
  type: TYPE_NORMAL
- en: Optimizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a ton of resources on how to optimize your game and plenty of discussions
    on forums of the best ways to do things. In the following sections I will talk
    about different aspects that I use in order to optimize my games.
  prefs: []
  type: TYPE_NORMAL
- en: Console commands—statistics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the neat new additions to UDK in terms of mobiles is the fact that by
    holding four fingers on the screen at a time you can open up the console window.
    You can find a list of console commands you can use in UDK at [http://udn.epicgames.com/Three/ConsoleCommands.html](http://udn.epicgames.com/Three/ConsoleCommands.html).
    Also note that the values you may see on the PC are in no way an indicator of
    how things will be on an iOS device so be sure to do your testing by either using
    the four-finger process or calling the `Console Command` in Kismet. The following
    are some of the stats that I found most useful when debugging projects.
  prefs: []
  type: TYPE_NORMAL
- en: stat fps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest one to see why we would want it, the FPS counter tells us how many
    frames per second our game runs. 24 frames per second is the accepted threshold
    where animation becomes possible, if it is much less, the visuals seems jagged
    or our brains can tell that they are just images. 30 FPS is an accepted standard
    in most Unreal games, though some have been able to do 60.
  prefs: []
  type: TYPE_NORMAL
- en: stat game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This shows statistics related to the time it takes to run different parts of
    the game, which may make it easier to see which sections of the game are taking
    the longest to run with the number of checkmarks, and the time it takes to do
    certain things such as Kismet and UnrealScript.
  prefs: []
  type: TYPE_NORMAL
- en: stat memory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This shows how much memory is being used by each individual section of the game.
    The larger the memory, the more processing power it takes to use and the larger
    your game will be. Apple only allows you to download apps that are 50 MB or less
    through 3G/4G, so having an app with a size larger than this will force it to
    be downloaded through WiFi, which will probably be how your game will wind up,
    due to the size of UDK, but it still is a good idea to keep your memory footprint
    low.
  prefs: []
  type: TYPE_NORMAL
- en: '![stat memory](img/1901_07_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: stat es2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenGL ES2 is the iOS rendering device and while inside the Mobile Previewer
    it may crash when run on an iOS device. You can see useful data in terms of how
    many draw calls are done as well other useful stats to see. Try to keep your draw
    calls down as low as you can as it will probably be the thing that slows your
    game down the most.
  prefs: []
  type: TYPE_NORMAL
- en: '![stat es2](img/1901_07_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Combining meshes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Speaking of draw calls, we have just learned how to create meshes in our game
    project earlier in this chapter. When wanting to optimize our game, it may be
    a good idea to combine similar meshes that contain the same texture together as
    long as it is still low poly. Having fewer meshes reduces the amount of draw calls
    that need to be made. In the same regard, reduce the amount of materials that
    you use on an individual object, constraining yourself to only one Material per
    object if you possibly can. Using multiple materials on an object at the very
    least doubles the amount of memory needed to compute and run it, which is not
    a very good thing when you're trying to make your game as efficient as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Precomputed visibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hardware occlusion queries are appealing in games because they work in completely
    dynamic scenes, but sadly iOS devices do not support occluding objects. By occluding
    objects I mean that if the player does not see an object, the game can skip drawing
    that object. While our little game happens to run fine, larger projects will want
    to make use of this feature as it can greatly improve runtimes. To learn how to
    set precomputed visibility in your game, see: [http://udn.epicgames.com/Three/PrecomputedVisibility.html](http://udn.epicgames.com/Three/PrecomputedVisibility.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we''re on the topic of larger levels, by far the best way in my opinion
    to create larger levels is by using streaming volumes. What that basically does
    is make it so that when you enter a certain area of the world, a level will be
    loaded. However, in the transition between levels there may be a time when more
    than one level is open which will lower your frame rate drastically. I personally
    create small areas in between my larger levels that contain parts of both levels
    that make the transition more seamless and less of a hog on memory all at once.
    For more information on streaming volumes and how to set it up, check out: [http://udn.epicgames.com/Three/LevelStreamingVolumes.html](http://udn.epicgames.com/Three/LevelStreamingVolumes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to debug your game doesn't seem that important, until something in
    your game breaks. Having a firm grounding in ways to see what is going on in your
    game will definitely help you later on down the road as you delve into projects
    of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Comment your code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is something that was drilled into me in college and advice I am very
    thankful for taking. Chances are that while working on any large project you are
    not going to be touching a particular sequence in Kismet every day. Weeks are
    going to go by and you are going to forget why certain things were done. This
    is just as applicable to Kismet as it is to any other kind of programming language,
    and thankfully Unreal gives us the ability to make it simple to tell others what
    is going on. Selecting multiple objects and then right-clicking and selecting
    **Comment** allows you to type something in, which can give a clue into what a
    group of Kismet nodes are used for, such as this reworked Player Spawned event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comment your code](img/1901_07_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I also added in object comments at the end of the different input zones, for
    example I did this when I put in the push button example, except I didn''t trigger
    the output on the screen. Now it is used so that when I glance at the code I know
    what I''m adding. Cleaning up the code that we did during the project I came up
    with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comment your code](img/1901_07_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even with a glance it is always better to look at than having no guidance at
    all, making it simple to find what you're looking for either there or in any of
    the subsequences we created. You could even take this idea further, creating subsequences
    for each of the different items, but that's more of finding what you're comfortable
    with and getting accustomed to your own style of doing things.
  prefs: []
  type: TYPE_NORMAL
- en: Captain's log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, there will come a time where you are sure everything is correct and all
    of your Kismet actions are being called. Well, there''s one way to be sure of
    the value that something is, and that''s by logging it and displaying what the
    data is at runtime. You can create a **Log** action by going into **New Action**
    | **Misc** | **Log**. From there you can right-click on the object and select
    **Expose Variable** and choose a type of something you''d like to get the value
    of. With that if you set the **Target** to **Player 0** and the other item to
    some of that type, when you play the game and it is called, the game will display
    what it is. For example when I add a **Log** action to this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Captain''s log](img/1901_07_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`UTPawn_0` gets displayed in the log. This is the name of the object that we
    put in the object variable link of the Log action.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Captain''s log](img/1901_07_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Being able to make sure that an object has a value you think it should have
    is one of the most obvious ways to tell if something is wrong, other than it not
    being called at all, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our game is now effectively our own, or at least on its way to being our own.
    With this knowledge I''m confident that you are more than ready to build your
    game to be as large as you''d like as well as inputting all sorts of custom stuff
    into the game. We''ve specifically learned how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a main menu for our game with input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add audio on mobile UDK for our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import custom textures to our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a materials for both PC and iOS to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add static meshes on Mobile UDK for our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize and Debug our game on the iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned how to import all of your custom content to your heart's
    desire, we need to complete our main game in the next chapter. We will go over
    how to take the game that we created and get it onto the iTunes store and the
    steps that it requires as well to make your game a success!
  prefs: []
  type: TYPE_NORMAL
