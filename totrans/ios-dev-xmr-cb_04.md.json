["```swift\n    string filePath = Path.Combine (Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"MyFile.txt\");\n    using (StreamWriter sw = new StreamWriter (filePath))\n    {\n      sw.WriteLine (\"Some text in file!\");\n    }\n    this.btnShow.TouchUpInside += (s, e) => {\n      using (StreamReader sr = new StreamReader (filePath))\n      {\n        this.labelStatus.Text = sr.ReadToEnd ();\n      }\n    };\n    ```", "```swift\nstring filePath = Path.Combine (Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"MyFile.txt\");\n```", "```swift\nusing (StreamWriter sw = new StreamWriter (filePath))\n{\n  sw.WriteLine (\"Some text in file!\");\n}\n```", "```swift\nusing (StreamReader sr = new StreamReader (filePath))\n{\n  this.labelMessage.Text = sr.ReadToEnd ();\n}\n```", "```swift\nNSError error = NSFileManager.SetSkipBackupAttribute(filePath, true);\nif (null == error) {\n  // Success\n}\n```", "```swift\nstring cachesFolder = Environment.GetFolderPath(Environment.SpecialFolder.InternetCache);\n```", "```swift\n    private void CreateSQLiteDatabase (string databaseFile)\n    {\n      try\n      {\n        if (!File.Exists (databaseFile))\n        {\n          SqliteConnection.CreateFile (databaseFile);\n          using (SqliteConnection sqlCon = new SqliteConnection (String.Format (\"Data Source = {0};\", databaseFile)))\n          {\n            sqlCon.Open ();\n            using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))\n            {\n              sqlCom.CommandText = \"CREATE TABLE Customers (ID INTEGER PRIMARY KEY, FirstName VARCHAR(20), LastName VARCHAR(20))\";\n              sqlCom.ExecuteNonQuery ();\n            }\n            sqlCon.Close ();\n          }\n          this.lblStatus.Text = \"Database created!\";\n        } else {\n          this.lblStatus.Text = \"Database already exists!\";\n        }\n      } catch (Exception ex) {\n        this.lblStatus.Text = String.Format (\"Sqlite error: {0}\", ex.Message);\n      }\n    }\n    ```", "```swift\n    private void InsertData(string databaseFile) {\n      try {\n        if (File.Exists(databaseFile)) {\n          using (SqliteConnection sqlCon = new SqliteConnection(String.Format(\"Data Source = { 0};\", databaseFile))) {\n            sqlCon.Open();\n            using (SqliteCommand sqlCom = new SqliteCommand(sqlCon)) {\n              sqlCom.CommandText = \"INSERT INTO Customers (FirstName, LastName) VALUES ('Dimitris', 'Tavlikos')\";\n              sqlCom.ExecuteNonQuery();\n              }\n            sqlCon.Close();\n          }\n          this.lblStatus.Text = \"Inserted 1 row.\";\n        }  else {\n          this.lblStatus.Text = \"Database file does not exist!\";\n        }\n      }  catch (Exception ex) {\n        this.lblStatus.Text = String.Format(\"Sqlite error: { 0}\", ex.Message);\n      }\n    }\n    ```", "```swift\n    private void QueryData(string databaseFile) {\n      try {\n        if (!File.Exists(databaseFile)) {\n          using (SqliteConnection sqlCon = new SqliteConnection(String.Format(\"Data Source = { 0};\", databaseFile))) {\n              sqlCon.Open();\n            using (SqliteCommand sqlCom = new SqliteCommand(sqlCon)) {\n              sqlCom.CommandText = \"SELECT * FROM Customers WHERE FirstName='Dimitris'\";\n              using (SqliteDataReader dbReader = sqlCom.ExecuteReader()) {\n                while (dbReader.Read()) {\n                  this.lblStatus.Text = String.Format(\"First name: { 0}\\ nLast name: { 1}\", dbReader[\"FirstName\"], dbReader[\"LastName\"]);\n                }\n              }\n            }\n          }\n        }  else {\n          this.lblStatus.Text = \"Database file does not exist!\";\n        }\n      }  catch (Exception ex) {\n        this.lblStatus.Text = String.Format(\"Sqlite error: { 0}\", ex.Message);\n      }\n    }\n    ```", "```swift\n    string sqlitePath = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), \"MyDB.db3\");\n    this.btnCreate.TouchUpInside += (s, e) => this.CreateSQLiteDatabase (sqlitePath);\n    this.btnInsert.TouchUpInside += (s, e) => this.InsertData(sqlitePath);\n    this.btnQuery.TouchUpInside += (s, e) => this.QueryData(sqlitePath);\n    ```", "```swift\nusing Mono.Data.Sqlite;\n```", "```swift\nif (!File.Exists (databaseFile))\n```", "```swift\nSqliteConnection.CreateFile (databaseFile);\n```", "```swift\nusing (SqliteConnection sqlCon = new SqliteConnection (String.Format (\"Data Source = {0};\", databaseFile)))\n  sqlCon.Open();\n```", "```swift\nsqlCom.CommandText = \"CREATE TABLE Customers (ID INTEGER PRIMARY KEY, FirstName VARCHAR(20), LastName VARCHAR(20))\";\nsqlCom.ExecuteNonQuery ();\n```", "```swift\nsqlCom.CommandText = \"INSERT INTO Customers (FirstName, LastName) VALUES ('Dimitris', 'Tavlikos')\";\nsqlCom.ExecuteNonQuery();\n```", "```swift\nsqlCom.CommandText = \"SELECT * FROM Customers WHERE FirstName='Dimitris'\";\nusing (SqliteDataReader dbReader = sqlCom.ExecuteReader()) {\n  while (dbReader.Read()) {\n    this.lblStatus.Text = String.Format(\"First name: {0}\\nLast name: {1}\", dbReader[\"FirstName\"], dbReader[\"LastName\"]);\n  }\n}\n```", "```swift\n    this.btnSave.TouchUpInside += (s, e) => {\n      NSUbiquitousKeyValueStore kvStore = NSUbiquitousKeyValueStore.DefaultStore;\n      kvStore.SetString(\"LastSavedSearch\", \"How to implement iCloud\");\n      kvStore.Synchronize();\n      this.lblStatus.Text = \"Saved!\";\n    };\n    this.btnLoad.TouchUpInside += (s, e) => {\n      NSUbiquitousKeyValueStore kvStore = NSUbiquitousKeyValueStore.DefaultStore;\n      this.lblStatus.Text = string.Format(\"Last saved search is: {0}\", kvStore.GetString(\"LastSavedSearch\");\n    };\n    ```", "```swift\nNSUbiquitousKeyValueStore kvStore = NSUbiquitousKeyValueStore.DefaultStore;\nkvStore.Save(\"LastSavedSearch\", \"How to implement iCloud \");\n```", "```swift\nkvStore.Synchronize();\n```", "```swift\nkvStore.GetString(\"LastSavesSearch\");\n```", "```swift\nNSObject coudObserver = NSUbiquitousKeyValueStore.Notifications.ObserveDidChangeExternally((s, e) => {\n  if (e.ChangeReason == NSUbiquitousKeyValueStoreChangeReason.\n    ServerChange) {\n    e.ChangeKeys.Foreach(k => Console.WriteLine(\"Key changed: {0}\", k));\n  }\n};\n```"]