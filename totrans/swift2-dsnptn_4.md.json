["```swift\nimport Foundation\n\nprotocol ChargeableProtocol {\n\n  /// This function is called to charge a mobile phone\n  ///\n  /// Usage:\n  ///\n  ///    charge(5.5)\n  ///\n  /// - Parameter volts: voltage needed to charge the battery\n  ///\n  /// - returns: Void\n  func charge(volts: Double)\n}\n```", "```swift\nfunc foo ( var1 : protocol<A, B> ){}\n```", "```swift\nclass PhonePrototype: ChargeableProtocol {\n  /// This function is called to charge a mobile phone\n  ///\n  /// Usage:\n  ///\n  ///    charge(5.5)\n  ///\n  /// - Parameter volts: voltage needed to charge the battery\n  ///\n  /// - returns: Void\n  func charge(volts: Double) {\n    print(\"Charging our PhonePrototype\")\n    print(\"current voltage \\(volts)\")\n  }\n}\n```", "```swift\nimport Foundation\n\nclass Charger {\n  var phone: ChargeableProtocol!\n  let volts = 10.0\n\n  func plugMobilePhone(phone: ChargeableProtocol){\n    print(\"A mobile is plugged\")\n    self.phone = phone\n    self.phone.charge(volts)\n  }\n}\n```", "```swift\nimport Foundation\nclass SamSingMobilePhone {\n\n  enum VoltageError: ErrorType {\n    case TooHigh\n    case TooLow\n  }\n\n  ///Accept only 10 volts\n  func chargeBattery(volts: Double) throws {\n    if volts > 10 { throw VoltageError.TooHigh }\n    if volts < 10 { throw VoltageError.TooLow }\n\n    print(\"SamSing mobile phone is charging\")\n    print(\"Current voltage \\(volts)\")\n  }\n}\n```", "```swift\nimport Foundation\n\nclass PearMobilePhone {\n\n  enum PearVoltageError: ErrorType {\n    case NoPower\n    case TooLow\n    case TooHigh\n  }\n\n  ///Accept only 5.5 volts\n  func charge(volts: Double) throws {\n    guard volts > 0 else { throw PearVoltageError.NoPower}\n    if volts > 5.5 { throw PearVoltageError.TooHigh }\n    if volts < 5.5 { throw PearVoltageError.TooLow }\n\n    print(\"Pear mobile phone is charging\")\n    print (\"Current voltage \\(volts)\")\n  }\n}\n```", "```swift\n  enum PearVoltageError: ErrorType {\n    case NoPower\n    case TooLow\n    case TooHigh\n  }\n```", "```swift\nfunc chargeBattery(volts:Double) throws {\n```", "```swift\nfunc charge(volts:Double) throws -> Void {\n```", "```swift\nif volts > 10 { throw VoltageError.TooHigh }\nif volts < 10 { throw VoltageError.TooLow }\n```", "```swift\n ///Accept only 5.5 volts\n  func charge(volts: Double) throws -> Void {\n    guard volts > 0 else { throw PearVoltageError.NoPower}\n    if volts > 5.5 { throw PearVoltageError.TooHigh }\n    if volts < 5.5 { throw PearVoltageError.TooLow }\n\n    print(\"Pear mobile phone is charging\")\n    print(\"Current voltage \\(volts)\")\n  }\n```", "```swift\n    guard volts > 0 else { throw PearVoltageError.NoPower}\n```", "```swift\nguard let unwrappedVar = myVar else {\n  return\n}\nprint(\"myVar : \\(unwrappedVar)\")\n```", "```swift\nIf let unwrappedVar = myVar {\n  Print(\"myVar : \\(unwrappedVar\"))\n}else {\n  return\n}\n//now if you call the print statement below this will not work\n//because unwrappedVar is no longer available in this scope.\nprint(\"myVar : \\(unwrappedVar)\")\n```", "```swift\nimport Foundation\n\nclass SamSingAdapter: ChargeableProtocol {\n\n  var samSingPhone: SamSingMobilePhone!\n\n  init(phone: SamSingMobilePhone){\n    samSingPhone = phone\n  }\n\n  func charge(volts: Double) {\n    do {\n      print(\"Adapter started\")\n      _ = try samSingPhone.chargeBattery(volts)\n      print(\"Adapter ended\")\n    }catch SamSingMobilePhone.VoltageError.TooHigh{\n      print(\"Voltage is too high\")\n    }catch SamSingMobilePhone.VoltageError.TooLow{\n      print(\"Voltage is too low\")\n    }catch{\n      print(\"an error occured\")\n    }\n  }\n}\n```", "```swift\nfunc chargeBattery(volts:Double) throws {\n```", "```swift\n    _ = try samSingPhone.chargeBattery(volts)\n```", "```swift\n    let myVar = try samSingPhone.chargeBattery(volts)\n```", "```swift\n    do {\n      print(\"Adapter started\")\n      _ = try samSingPhone.chargeBattery(volts)\n      print(\"Adapter ended\")\n    }catch SamSingMobilePhone.VoltageError.TooHigh{\n      print(\"Voltage is too high\")\n}\n//â€¦..\n```", "```swift\ncatch SamSingMobilePhone.VoltageError.TooHigh{\n      print(\"Voltage is too high\")\n    }catch SamSingMobilePhone.VoltageError.TooLow{\n      print(\"Voltage is too low\")\n    }catch{\n      print(\"an error occured\")\n    }\n```", "```swift\nimport Foundation\n\nclass PearAdapter: ChargeableProtocol {\n\n  var pearMobilePhone:PearMobilePhone!\n\n  init(phone: PearMobilePhone){\n    pearMobilePhone = phone\n  }\n\n  func charge(volts: Double) {\n    do {\n      print(\"Adapter started\")\n      _ = try pearMobilePhone.charge(5.5)\n      print(\"Adapter ended\")\n    }catch PearMobilePhone.PearVoltageError.TooHigh{\n      print(\"Voltage is too high\")\n    }catch PearMobilePhone.PearVoltageError.TooLow{\n      print(\"Voltage is too low\")\n    }catch{\n      print(\"an error occured\")\n    }\n  }\n}\n```", "```swift\n  func charge(volts: Double) {\n      print(\"Adapter started\")\n      _ = try! pearMobilePhone.charge(5.5)\n      print(\"Adapter ended\")\n  }\n```", "```swift\nimport Foundation\n\nprint(\"*** start test program\")\n// Create our Charger\nlet charger = Charger()\nprint(\"*** charger ready test program\")\n\n//Test 1\n//Charge a Pear Mobile Phone\nprint(\"Will charge a Pear Mobile Phone\")\n//1 mobile and adapter creation\nlet pearPhone = PearMobilePhone()\nlet pearAdapter = PearAdapter(phone: pearPhone)\n//we plug the portable to our charger through the adapter\ncharger.plugMobilePhone(pearAdapter)\n\nprint(\"*** -\")\n//Test 2\n//Charge a SamSing Mobile Phone\nprint(\"Will charge a SamSing Mobile Phone\")\n//1 mobile and adapter creation\nlet samSingPhone = SamSingMobilePhone()\nlet samSingAdapter = SamSingAdapter(phone: samSingPhone)\n//we plug the portable to our charger through the adapter\ncharger.plugMobilePhone(samSingAdapter)\n\nprint(\"*** end test program\")\n```", "```swift\nvar results = svcFacadeFindHotel.findHotel(myAdress, distanceMax: 2.0, stars: 4)\n```", "```swift\nimport Foundation\n\n//I am a consumer of the service\n// my addess is\n// 1 infinite Loop\n// Cupertino, CA 95014\n\nlet svcFacadeFindHotel = ServiceFindHotelNearBy()\n\nlet myAdress = \" 1 Infinite Loop Cupertino, CA 95014 USA\"\nvar results = svcFacadeFindHotel.findHotel(myAdress, distanceMax: 2.0, stars: 4)\n\nprint(\"*** RESULTS \")\nprint(\"Their is \\(results?.count) results :\")\n\nif let results = results {\n  for var h in results{\n    print(\"Hotel latitude:\\(h.location.latitude) longitude:\\(h.location.longitude), stars: \\(h.stars)\")\n  }\n}\n```", "```swift\nimport Foundation\n\nclass ServiceFindHotelNearBy: ServiceFindHotelNearByProtocol {\n\n  //return a list of hotel that corresponds to our criteria\n  func findHotel(from: String, distanceMax: Double, stars: Int) -> [Hotel]? {\n      let svcGeocoding = Geocoding()\n      let svcFindPoi = FindPoi()\n      let systemhotelCatalog = HotelCatalog()\n\n      //Geocode our adress to GPS Points\n      let fromLocation = svcGeocoding.getGeocoordinates(from)\n\n      //retrieve all hotels in the catalog\n      let allHotels = systemhotelCatalog.getCatalog()\n\n      //find POI that corresponds to our criteria\n      let results = svcFindPoi.findPoiNearBy(fromLocation, distanceMax: distanceMax, stars: stars, catalog: allHotels)\n    return results\n  }\n}\n```"]