- en: '*Chapter 4*: Creating a Detail Page'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have managed to build an app that shows a set of contacts on a custom
    grid in a collection view. This is pretty impressive but not very useful. Typically,
    a user will expect to be able to see more information when tapping on an item
    in an overview.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, they would likely expect to see more details about the tapped
    contact, for instance, their email address and phone number. In this chapter,
    you will see how to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also be introduced to `UIStackView` for the first time too, a comprehensive
    and powerful way to lay out a display without the need for over-complex autolayout
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll touch on the best practices when it comes to passing data from
    one view controller to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing navigation with segues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our layout with `UIStackView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data between view controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you'll need to download Xcode version 11.4 or above from Apple's
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need to be running the latest version of macOS (Catalina or above).
    Simply search for Xcode in the App Store and select and download the latest version.
    Launch Xcode and follow any additional installation instructions that your system
    may prompt you with. Once Xcode has fully launched, you're ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the sample code from the following GitHub link: [https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition](https://github.com/PacktPublishing/Mastering-iOS-14-Programming-4th-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing navigation with segues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most good applications have more than a single screen. I bet that most app ideas
    you have in your head involve at least a couple of different screens. Maybe you
    would like to display a table view or a collection view that links to a detail
    page. Or perhaps you want your user to drill down into your app's contents in
    a different way. Maybe you don't have any detail views but you would like to display
    a couple of modal screens for data input instead.
  prefs: []
  type: TYPE_NORMAL
- en: Every time your user moves from one screen in your app to another, they are
    navigating. Navigation is an essential aspect of building an app, and you must
    understand the possibilities and patterns for building good navigation on the
    iOS platform. The easiest way to gain insight into navigation is by using a storyboard
    to explore the available options.
  prefs: []
  type: TYPE_NORMAL
- en: Up until now, and with the exception of SwiftUI you have used your storyboard
    to create the layout for a single screen.
  prefs: []
  type: TYPE_NORMAL
- en: However, the name storyboard implies that you can do a lot more than laying
    out a single screen. The purpose of using a storyboard is the ability to lay out
    all screens of your application in a single place so you can easily see how screens
    and sections of your app are related and how users navigate between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our new details view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and understanding segues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a manual segue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our new details view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will add a second view controller to your storyboard that
    functions as a detail page when a user taps on a contact – we'll continue working
    on our collection view project from [*Chapter 3*](B14717_03_Final_ASB_ePub.xhtml#_idTextAnchor066),
    *Using Lists and Tables*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Main.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search and drag out a view controller from the **Object Library** (just like
    we did with our collection view objects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drop it next to the existing view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for a label in the **Object Library** and add it to the new view controller
    you just added to the storyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All going well, it should look something like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Storyboard with new detail view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Storyboard with new detail view
  prefs: []
  type: TYPE_NORMAL
- en: Before you add all the content for the contact detail page to the second view
    controller, it's a good idea to configure the navigation from the overview page
    to the detail page. To do this, you're going to create a selection segue.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and understanding segues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **segue** is a transition from one screen to the next. Not all segues are
    animated; sometimes you might need to present the next screen without performing
    a smooth animation. Both animated and static transitions can be set up with segues.
  prefs: []
  type: TYPE_NORMAL
- en: Any time you connect one screen to the next to perform navigation, you are creating
    a segue. Some segues are performed when the user taps a button; these are called
    **action segues**. Segues that are only triggered through code are called **manual
    segues**.
  prefs: []
  type: TYPE_NORMAL
- en: The selection segue you're going to use in this sample is a segue that is set
    up by connecting a table view cell or collection view cell to the next screen.
    The segue is performed when the user taps on a cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up your selection segue, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the prototype collection view cell you have created for the contacts
    overview page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, press and hold the *Ctrl* key while you drag from the cell to the second
    view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you release the mouse over the second view controller, a list of options
    is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Segue Connector for new Detail View'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Segue Connector for new Detail View
  prefs: []
  type: TYPE_NORMAL
- en: This list of possibilities describes how the detail view will be presented to
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: For example, select the modal presentation style from the generated list. This
    will display the detail page with an upward animation from the bottom of the screen
    (a model), this is not quite the route we are going to take. However, if you now
    launch the iOS simulator and select one of the cells, you'll see the effect it
    has.
  prefs: []
  type: TYPE_NORMAL
- en: A better way to show the contact is by adding it to the navigation stack. Doing
    this will make a back button appear in the navigation bar, and the user will immediately
    understand that they are looking at a detail page due to the animation that moves
    the new view controller in from the right-hand side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: To set this up, you need to select the **Show** segue – highlight the previously
    created segue and hit *Delete* on your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: This segue pushes the newly presented view controller onto the existing navigation
    controller's navigation stack, but until we tell our app that we require navigation
    in this way, it will still be treated as a model.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, add a new object via the Object Library called **Navigation Controller**,
    and drag this into your storyboard. You'll notice this will have brought across
    what appears to be two view controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The first is the navigation view controller itself (the one we care about) and
    the other is a template or a pre-defined `rootViewController`, which is already
    hooked into the navigation view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to modify this, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Simply delete this `rootViewController`, leaving the navigation controller where
    it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, press *Ctrl* and primary click from the navigation controller and drag
    to our exiting `ViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When released, you'll be offered the option to make this the `rootViewController`.
    Select this option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One final change to make is you'll notice an arrow going into the side of our
    existing **View Controller**; drag this from here to the **Navigation Controller**
    – all this is doing is setting this as our **Initial View Controller** so when
    the app is launched, it knows where to start.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead now and run the app. You should be able to successfully navigate back
    and forth whilst clicking on cells. Let's take a look now at how we would create
    a manual segue.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a manual segue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll start by deleting the segue we just created. Now drag from the yellow
    circle at the top of the first view controller window to the second view controller
    – you've now just created a manual segue.
  prefs: []
  type: TYPE_NORMAL
- en: When the dialog to determine how the segue is performed appears, select **show**
    again because you don't want to use a different animation.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the connecting line to inspect the segue and set the value for the
    `detailViewSegue` in **Attributes Inspector**. Similar to how you set a reuse
    identifier on table view cells and collection view cells, segues also use a string
    as their identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger the segue after the animation, you must manually do so from your
    code. Open `ViewController.swift` and update the contents of `collectionView(_:didSelectItemAt:)`
    as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With one line of code, we can hook into our segue via its identifier and away
    we go. Run the app now and see how easy that was.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've started to create and build our very own details view
    page, learning all about how we can configure and control segues to push from
    one View Controller to the next.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll take a look at creating adaptive layouts without
    the need for `Autolayout`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our layouts with UIStackView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we've got the foundations all set up, let's look at how we are going to
    build our details page.
  prefs: []
  type: TYPE_NORMAL
- en: We have several options. One way is `UIStackView`.
  prefs: []
  type: TYPE_NORMAL
- en: Stack views can lay out views that are added next to each other or on top of
    each other all by itself. This saves you adding constraints for the vertical spacing
    between labels like we did for the contact detail information.
  prefs: []
  type: TYPE_NORMAL
- en: Since stack views can also lay out objects that are next to each other and stack
    views can be nested, it could also take care of the two-column layout that you
    implemented for screens with a regular width size class. And to top it all off,
    you can swap the direction in which a stack view lays out its items at runtime,
    meaning you can change it from horizontal to vertical depending on the available
    space.
  prefs: []
  type: TYPE_NORMAL
- en: This will simplify a lot of the work that needs to be done and it makes your
    layout a lot more maintainable as well. To use a stack view, all you need to do
    is add one to your new view controller in Interface Builder via `Stack View`).
  prefs: []
  type: TYPE_NORMAL
- en: Containing labels in a stack view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start to create our page layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding in six UILabel''s, three will be titles, and the others will be variable
    data (make sure you set your colors correctly: see [*Chapter 2*](B14717_02_Final_ASB_ePub.xhtml#_idTextAnchor046),
    *Working with Dark Mode*). Something like this will work nicely:![Figure 4.3 –
    Updated storyboard with labels'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – Updated storyboard with labels
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, select the six labels in the contact info view and embed them in a stack
    view by using the **Embed In** menu as shown in the following screenshot:![Figure
    4.4 – Embed In Stack View
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B14717.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Embed In Stack View
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add in two other elements, such as image view or contact name, and group those
    together (separately from the labels you've just embedded).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, for the clever part, highlight both stack views and click on **Embed In**
    to embed them into a single Stack View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking good. Well, almost – we'll still need to make a few minor tweaks. First,
    we'll add an `Autolayout` constraint to our main stack view of `0,16,16,0` (basically,
    hugging this to our bounds apart from the trailing and leading).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you''ll need to set a height in **Autolayout** for each label (and image)
    inside your stack view:'
  prefs: []
  type: TYPE_NORMAL
- en: Set your constraint values to `250` and all labels to `25`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, select the parent stack view and within **Attributes Inspector**,
    make sure that **Alignment** is set to **Fill** and **Distribution** is set to
    **Fill Proportionally**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These settings make sure that items are positioned a certain way within the
    stack view. In this case, **Leading** makes the items stick to the left side of
    the stack view. Setting this value to **Center** would align them in the middle,
    and **Fill** ensures that the stack's children are all stretched out to fill the
    entire width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done that, you should have something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Detail View in Stack View'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B14717.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Detail View in Stack View
  prefs: []
  type: TYPE_NORMAL
- en: Now our detail view is all ready for some data, so let's see how we go about
    doing that in the next part, but first, we'll need to create a new **View Controller**
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the navigation tree, highlight the root level group (folder) and do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Secondary-click to bring up the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Cocoa Touch Class** from the list of options (click **Next**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file `DetailsViewController` with a subclass of `UIViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** and then **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've done this, add in all the required outlets and hook them up. But
    before Interface Builder will let you hook these up, you'll need to set the class
    of your `DetailsViewController` – just as we did with the custom cells back in
    [*Chapter 3*](B14717_03_Final_ASB_ePub.xhtml#_idTextAnchor066), *Using Lists and
    Tables*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also need to add in the following variable, as we''ll be passing this
    model across to our new View Controller very soon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With all that done, we can now look to update our `retrieveContacts()` logic
    to fetch the new data we require.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data between view controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, the next part of our app is to pass some data over to our new details view
    but to do this, we need to create a new View Controller and hook up our labels
    and images to some outlets.
  prefs: []
  type: TYPE_NORMAL
- en: The code that fetches contact information also needs to be updated too, so a
    contact's phone number, email address, and postal address are fetched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the contact data needs to be passed from the overview to the details
    page so the details page can display the data. The steps involved in this process
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the data loading
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passing the model to the details page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating our outlets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Best practices (creating a view model)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now go through each step.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the data loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, the code in `ViewController.swift` specifies that just the given
    name, family name, image data, and image availability for a contact should be
    fetched.
  prefs: []
  type: TYPE_NORMAL
- en: This needs to be expanded so the email address, postal address, and phone number
    are fetched as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `retrieveContacts(store:)` method with the following code for `keysToFetch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are just explicitly setting the desired data we would like to retrieve
    from our contacts. Once we've done this, we're ready to pass the data across to
    our details view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the model to the details page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transition from the overview page to the details page is implemented with
    a segue. The segue is triggered when the user taps a contact, putting the details
    page on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Because this transition uses a segue, there is a special method that can be
    implemented to pass data from the first view controller to the second view controller.
    This special method is called `prepare(for:sender:)`.
  prefs: []
  type: TYPE_NORMAL
- en: This method is called on the source view controller right before a segue is
    performed and it provides access to the destination view controller.
  prefs: []
  type: TYPE_NORMAL
- en: The segue's destination is used to configure data on the view controller that
    is about to be presented. Let's implement this right now so you can pass the selected
    contact to the details page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following extension to `ViewController.swift`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A quick overview of the preceding code is the segue is checked to see if its
    identifier is `"detailViewSegue"` (as all segues will pass through this function).
    If this condition is satisfied, it checks the destination (which is of type `UIViewController`)
    is that of the `DetailsViewController` we are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: If all is well, we can assign our contact to a property on that View Controller
    and it will get passed across. Let's hook up our outlets now so we can start to
    bind some data.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our outlets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re all set to go; we just need to hook up our data to our outlets. To do
    this, make the following changes in your `viewDidLoad()` in `DetailsViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and run your app. Lo and behold, if you tap on your contacts, you'll
    be navigated straight to your new view controller, where you'll be able to see
    all the details of that particular contact.
  prefs: []
  type: TYPE_NORMAL
- en: However, taking another look at the code we've just added in, it looks a little
    messy. We're concatenating `givenName` and `familyName` inside our **View Controller**,
    and also randomly grabbing the street value from the first persisted address that
    our contact has.
  prefs: []
  type: TYPE_NORMAL
- en: All this logic should not sit in our view controller – this is what we call
    View model logic, and by that I mean we should create our own contact model that
    takes everything we need along with all the logic to get it straight from our
    `CNContent` object. Let's take a look at how we'd do that.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices – creating a view model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, our `CNContact` has multiple properties, some of which we've
    not even requested yet from `Contacts.framework`. As we saw with the logic in
    the previous section, making logic decisions based on what the view requires and
    what the model has should not be performed at this level.
  prefs: []
  type: TYPE_NORMAL
- en: 'So how can we fix that? Easy. To start with, let''s create our custom model.
    Copy the following to a new file and call it `ContactModel.swift`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've simply created a struct and added properties based on exactly what
    we're going to display. We'll then create a custom initializer, which accepts
    a parameter of `CNContact`. From here, we strip out all the logic that we originally
    had in our View Controller and put it in here – one central location for this
    view model logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we need to do now is a couple of tweaks. Update our class variable in `DetailsViewController`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And adjust our `prepare()` override in `ViewController` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With that done, run the app again. You'll see that nothing really changed, but
    you can walk away now knowing that you've taken some great steps into writing
    and managing good, maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we stitched everything together by using the prepare for segue
    function to transfer our model over to our `DetailViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we started by creating a brand-new View Controller dedicated
    to displaying selected user information. We learned about the different types
    of segues, including navigation-based segues and model-based segues. We were also
    introduced to creating segues both programmatically and via Interface Builder.
  prefs: []
  type: TYPE_NORMAL
- en: Once we had our connectors all set up, we then started to build our new Detail
    View Controller, populating it with a contact's information and using the power
    of `UIStackView` to lay out our labels and image views.
  prefs: []
  type: TYPE_NORMAL
- en: We finished off by wiring everything together. We performed some best practices
    and created a custom view model that we can now pass over to our new `prepare()`
    override.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll go deep into the use of animations and transitions
    in iOS as we start to get creative!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Apple Documentation**: [https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/UsingSegues.html](https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/UsingSegues.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
