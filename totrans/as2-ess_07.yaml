- en: Chapter 7. Google Play Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. Google Play服务
- en: Now that we have become familiar with the use of components on layouts, it is
    time to start thinking about extra functionality. Google Play services give you
    features, such as Google Maps, Google+, and more, to attract users. What are all
    the available features? How can you add these features to your application? What
    are the Android version requirements to use Google Play services?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了在布局中使用组件的使用，是时候开始考虑额外的功能了。Google Play服务为你提供了诸如Google Maps、Google+等特性，以吸引用户。所有可用的功能有哪些？你如何将这些功能添加到你的应用程序中？使用Google
    Play服务需要满足哪些Android版本要求？
- en: This chapter focuses on the creation, integration, and use of Google Play services
    using Android Studio. You will learn what Google services are available. You will
    also learn about the standard authorization API that provides a safe way to grant
    and receive access tokens to Google Play services. Then, you will learn about
    the limitations of these services and also the benefits of using them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍使用Android Studio创建、集成和使用Google Play服务。你将了解可用的Google服务。你还将了解提供安全方式授予和接收访问令牌的标准授权API。然后，你将了解这些服务的限制以及使用它们的优点。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本章中讨论的主题：
- en: Existing Google Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的Google服务
- en: Adding Google Play Services from the IDE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从IDE中添加Google Play服务
- en: Integrating Google Play Services in your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用程序中集成Google Play服务
- en: Understanding automatic updates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解自动更新
- en: Using Google services in your app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用程序中使用Google服务
- en: How Google Play services work
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Play服务的工作原理
- en: When Google previewed Google Play services at Google I/O 2012, it said that
    the platform "consists of a services component that runs on the device and a thin
    client library that you package with your app" ([https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当Google在2012年的Google I/O上预览Google Play服务时，它表示该平台“由在设备上运行的组件和一个与你的应用程序打包的轻量级客户端库组成”([https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/))。
- en: 'This means that Google Play services work thanks to two main components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Google Play服务得益于两个主要组件：
- en: '**Google Play services client library**: The Google Play services client library
    includes interfaces to each Google service used by your app. The library is included
    when you pack your app and it allows your users to authorize the app with access
    to these services using their credentials. The client library is upgraded from
    time to time by Google, adding new features and services. You may upgrade the
    library in your app through an update to your app, although this is not necessary
    if you are not including any of the new features.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play服务客户端库**：Google Play服务客户端库包含了你的应用程序使用的每个Google服务的接口。当你打包应用程序时，库会被包含在内，并允许你的用户使用他们的凭证通过这些服务授权应用程序。Google会定期升级客户端库，增加新功能和服务。你可以通过更新应用程序来升级库中的库，尽管如果你没有包含任何新功能，这并不是必需的。'
- en: '**Google Play services APK**: The Google Play services APK runs as a background
    service in the Android operating system. Using the client library, your app accesses
    this service, which carries out the actions during runtime. The APK is not guaranteed
    to be installed on all devices. If the device does not come with the APK installed,
    you can get it from the Google Play store.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play服务APK**：Google Play服务的APK在Android操作系统中作为后台服务运行。使用客户端库，你的应用程序可以访问此服务，在运行时执行操作。该APK并不保证在所有设备上都已安装。如果设备没有预装该APK，你可以从Google
    Play商店获取。'
- en: In this way, Google manages to separate the runtime of their services from the
    implementation you do as a developer, so you do not need to upgrade your application
    every time Google Play services are upgraded.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Google能够将他们服务的运行时与开发者所实施的实现分离，因此你不需要在Google Play服务升级时每次都更新你的应用程序。
- en: The Google Play services APK is automatically updated by the Google Play store.
    Any Android device running Android 2.3 or newer is ready to install any application
    that uses Google Play services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play服务的APK文件会自动通过Google Play商店进行更新。任何运行Android 2.3或更高版本的Android设备都可以安装使用Google
    Play服务的任何应用程序。
- en: Available services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用服务
- en: 'Google Play services let you easily add more features to attract users on a
    wide range of devices, while using well-known features powered by Google. Using
    these services, you can add new revenue sources, manage the distribution of the
    app, access statistics, learn about your application users'' habits, and improve
    your application with easy-to-implement Google features such as Maps or Google''s
    social network, Google+. Some of the services are explained as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play服务让您能够轻松地为各种设备添加更多功能，同时使用由Google提供支持的知名功能。使用这些服务，您可以添加新的收入来源，管理应用的分发，访问统计数据，了解您的应用用户习惯，并通过易于实现的Google功能（如地图或Google的社会网络Google+）来改进您的应用。以下是一些服务的说明：
- en: '**Google+**: Using the Google+ Platform for Android, you can authenticate the
    user of your app. Once they are authenticated, you can also access their public
    profile and social graph, among other actions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google+**：使用Android的Google+平台，您可以验证您的应用用户。一旦验证成功，您还可以访问他们的公共资料和社交图谱，以及其他操作。'
- en: '**Google Analytics**: By integrating this service, you can allow your app to
    send information to Google Analytics. It is a tool that collects the metrics of
    your app. Metrics can help you to learn how users use your app by tracking events,
    like the number of taps on a button or by tracking the visualization of screens
    and components.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Analytics**：通过集成此服务，您可以让您的应用向Google Analytics发送信息。这是一个收集您应用指标的工具。指标可以帮助您通过跟踪事件（如按钮点击次数）或跟踪屏幕和组件的可视化来了解用户如何使用您的应用。'
- en: '**Google App Indexing**: By integrating this service, you can make the content
    of your app available to the Google app index. This will make your app easier
    for users to find.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google App Indexing**：通过集成此服务，您可以让您的应用内容对Google应用索引可用。这将使您的应用更容易被用户找到。'
- en: '**Google Cast**: By integrating this service, you can make you app interact
    with Google Cast devices, such as Chromecast or Android TV.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cast**：通过集成此服务，您可以让您的应用与Google Cast设备（如Chromecast或Android TV）交互。'
- en: '**Google Cloud Messaging**: Using **Google Cloud Messaging** (**GCM**) for
    Android, you can exchange data between the app running in an Android-based device
    and your server. Using GCM, your server can start the communication with your
    app, which can generate push notifications to the user.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cloud Messaging**：使用Android上的**Google Cloud Messaging**（**GCM**），您可以在运行在基于Android的设备中的应用程序和您的服务器之间交换数据。使用GCM，您的服务器可以开始与您的应用程序通信，从而可以向用户生成推送通知。'
- en: '**Google Drive**: Using the Google Drive API, you can enable your application
    to access and manage your users'' files stored in their Google Drive account.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Drive**：使用Google Drive API，您可以让您的应用程序访问和管理用户存储在Google Drive账户中的文件。'
- en: '**Google Fit**: Using the Google Fit APIs, you can interact with **Bluetooth
    Low Energy** (**BLE**) devices (a heart rate monitor, a cycling sensor, or a pedometer),
    access data, or manage user activity in Google Fit.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Fit**：使用Google Fit API，您可以与**蓝牙低功耗**（**BLE**）设备（如心率监测器、骑行传感器或计步器）交互，访问数据或管理Google
    Fit中的用户活动。'
- en: '**Google In-app Billing**: Using Google Play In-app Billing makes it possible
    for you to sell digital content from your apps. You can use this service to sell
    one-time billing or temporal subscriptions to premium services and features.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google In-app Billing**：使用Google Play In-app Billing，您可以从您的应用中销售数字内容。您可以使用此服务销售一次性收费或时间订阅的高级服务和功能。'
- en: '**Google Location**: By integrating the location APIs, you can make your application
    location aware.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Location**：通过集成位置API，您可以让您的应用程序具备位置感知能力。'
- en: '**Google Maps**: By integrating the Google Maps API, you can use the maps provided
    by Google in your app and customize them.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Maps**：通过集成Google Maps API，您可以在您的应用中使用Google提供的地图，并对其进行自定义。'
- en: '**Google Mobile Ads**: Using the Google Mobile Ads API, you can add AdMob banner
    ads to your app.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Mobile Ads**：使用Google Mobile Ads API，您可以在您的应用中添加AdMob横幅广告。'
- en: '**Google Nearby**: By integrating the Google Nearby service, you can make your
    app interact with nearby devices and execute actions based on proximity.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Nearby**：通过集成Google Nearby服务，您可以让您的应用与附近的设备交互，并根据距离执行操作。'
- en: '**Google Panorama Viewer**: By integrating this service, you can enable the
    user to see a 360-degree panorama picture.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Panorama Viewer**：通过集成此服务，您可以让用户查看360度全景图片。'
- en: '**Google Places**: By integrating the Google Places API, you can use the places
    information provided by Google in your app.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Places**：通过集成Google Places API，您可以在您的应用中使用Google提供的位置信息。'
- en: '**Google Play Game services**: Using the Google Play Game services, you can
    improve your gaming with a more social experience, such achievements, leaderboards,
    game gifts, or player stats.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play游戏服务**：使用Google Play游戏服务，你可以通过更社交化的体验来提升你的游戏体验，例如成就、排行榜、游戏礼物或玩家统计数据。'
- en: '**Google Sign-In**: By integrating Google Sign-In, users can securely register
    into your app using their Google account.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google登录**：通过集成Google登录，用户可以使用他们的Google账户安全地注册到你的应用中。'
- en: '**Google Wallet**: By integrating Google Wallet, you can store objects such
    as gift cards or loyalty programs in the cloud and use them to pay in stores or
    online.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google钱包**：通过集成Google钱包，你可以在云中存储诸如礼品卡或忠诚度计划等对象，并使用它们在商店或在线支付。'
- en: Adding Google Play services to Android Studio
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Google Play服务添加到Android Studio
- en: The first thing we need to know is what we need to add to our Android Studio.
    You just learned that the APK is available in the Google Play store and it is
    the actual runtime of the services. We, as developers, only need this package
    in our testing device while debugging our application. What we need to add to
    Android Studio is the Google Play services client library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要知道我们需要添加到Android Studio中的内容。你已经了解到APK在Google Play商店中可用，它是服务的实际运行时。作为开发者，我们在调试应用程序时只需要这个包在测试设备上。我们需要添加到Android
    Studio中的是Google Play服务客户端库。
- en: 'This library has to be declared as a dependency to your application, so perform
    the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库必须作为依赖项声明在你的应用程序中，因此请执行以下步骤：
- en: Open the `build.gradle` file for your application module (`/app/build.gradle`).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的应用程序模块的`build.gradle`文件（`/app/build.gradle`）。
- en: 'Add a new dependency to the build of your app by typing the following line
    inside the `dependencies` block:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dependencies`块中输入以下行以向你的应用程序构建添加新的依赖项：
- en: '[PRE0]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The latest Google Play Services version is 8.4 (December 2015). When new updates
    of the library are published, you will need to update the version number in the
    `build.gradle` file.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最新版本的Google Play服务是8.4（2015年12月）。当库的新更新发布时，你需要在`build.gradle`文件中更新版本号。
- en: Navigate to **Tools** | **Android** | **Sync Project with Gradle Files** to
    synchronize your project with the new dependency on Google Play services.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **Android** | **与Gradle文件同步项目**以将新的Google Play服务依赖项同步到你的项目。
- en: 'Finally, add it to the manifest file of your application inside the application
    block:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在应用程序的manifest文件中的应用程序块中添加它：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should have the library inside the `build` folder of your application project
    at `app/build/intermediates/exploded-aar/com.google.android.gms/`, as shown in
    the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该在应用程序项目的`app/build/intermediates/exploded-aar/com.google.android.gms/`的`build`文件夹中找到这个库，如下一截图所示：
- en: '![Adding Google Play services to Android Studio](img/B05459_07_01.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![将Google Play服务添加到Android Studio](img/B05459_07_01.jpg)'
- en: 'As you can notice both in the previous screenshot and in your project, all
    the Google Play services have been included: `play-services-ads`, `play-services-analytics`,
    `play-services-appindexing`, and so on. This could be completely unnecessary if
    you only need some of the services and you don''t want to include all of them.
    Since Google Play services Version 6.5, you can add the services independently.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可以在之前的截图和你的项目中注意到的那样，所有Google Play服务都已包含：`play-services-ads`、`play-services-analytics`、`play-services-appindexing`等等。如果你只需要一些服务而不想包含所有服务，这可能是完全不必要的。自Google
    Play服务版本6.5起，你可以独立添加服务。
- en: 'For example, if you only want to add the Google Maps and the Google Places
    APIs, replace the dependency that we had before in the `build.gradle` file with
    the following two dependencies:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你只想添加Google Maps和Google Places API，将`build.gradle`文件中之前的依赖项替换为以下两个依赖项：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Navigate to **Tools** | **Android** | **Sync Project with Gradle Files** to
    synchronize your project. Inside the `build` folder of your application project
    at `app/build/intermediates/exploded-aar/com.google.android.gms/`, now you can
    only find the Google Maps and the Google Places APIs, as shown in the next screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**工具** | **Android** | **与Gradle文件同步项目**以同步你的项目。现在你可以在应用程序项目的`app/build/intermediates/exploded-aar/com.google.android.gms/`的`build`文件夹中找到Google
    Maps和Google Places API，如下一张截图所示：
- en: '![Adding Google Play services to Android Studio](img/B05459_07_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![将Google Play服务添加到Android Studio](img/B05459_07_02.jpg)'
- en: If you still have all the `play-services` folders, clean the project by navigating
    to **Build** | **Clean Project**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然有所有的`play-services`文件夹，通过导航到**构建** | **清理项目**来清理项目。
- en: 'Although we recommend using Gradle dependencies to include the Google Play
    services in your app, there is another way to use them in your app. You can download
    and install the Google Play services library in our system. This library is distributed
    through the Android SDK Manager. Now, perform the following steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们推荐使用Gradle依赖项将Google Play服务包含到您的应用程序中，但还有另一种方法在您的应用程序中使用它们。您可以从我们的系统中下载并安装Google
    Play服务库。此库通过Android SDK管理器进行分发。现在，执行以下步骤：
- en: Navigate to **Tools** | **Android** | **SDK Manager**. Open the standalone SDK
    Manager. We can find Google Play services in the packages list under the `Extras`
    folder.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **Android** | **SDK管理器**。打开独立的SDK管理器。我们可以在`Extras`文件夹下的包列表中找到Google
    Play服务。
- en: Select the **Google Play services** checkbox and click on the **Install 1 package...**
    button:![Adding Google Play services to Android Studio](img/B05459_07_03.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Google Play services**复选框，然后点击**安装1个包...**按钮：![将Google Play services添加到Android
    Studio](img/B05459_07_03.jpg)
- en: Performing these actions will add the library project into the location of our
    SDK installation folder, `/sdk/extras/google/google_play_services/`. You can check
    the exact path by hovering the mouse over the **Google Play services** row in
    the SDK manager and looking at the tool tip.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行这些操作将把库项目添加到我们的SDK安装文件夹的位置，`/sdk/extras/google/google_play_services/`。您可以通过将鼠标悬停在SDK管理器中的**Google
    Play services**行上并查看工具提示来检查确切路径。
- en: Navigate to the folder to examine its content. The `samples` folder contains
    some sample projects, for example, projects of Google Analytics (`analytics/`),
    authentication service (`auth/`), Google Cast (`cast/`), Google Drive (`drive/`),
    Google Maps (`maps/`), Google Panorama (`panorama/`), or Google Wallet (`wallet/`).
    The `libproject/` folder contains the Google Play services library project. The
    `google-play-services.jar` file is placed in this folder at `libproject/google-play-services_lib/libs/google-play-services.jar`.
    The `docs/` folder contains the documentation.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到文件夹以检查其内容。`samples`文件夹包含一些示例项目，例如Google Analytics（`analytics/`）、身份验证服务（`auth/`）、Google
    Cast（`cast/`）、Google Drive（`drive/`）、Google Maps（`maps/`）、Google Panorama（`panorama/`）或Google
    Wallet（`wallet/`）的项目。`libproject/`文件夹包含Google Play服务库项目。`google-play-services.jar`文件放置在此文件夹的`libproject/google-play-services_lib/libs/google-play-services.jar`中。`docs/`文件夹包含文档。
- en: Add this JAR file to your project simply by dragging it into the `libs/` folder.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将JAR文件拖入`libs/`文件夹，简单地将此JAR文件添加到您的项目中。
- en: Select the JAR file and right-click on it.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择JAR文件，然后右键单击它。
- en: Select the **Add as Library...** option, as highlighted in the next screenshot:![Adding
    Google Play services to Android Studio](img/B05459_07_04.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加为库...**选项，如下一张截图所示：![将Google Play services添加到Android Studio](img/B05459_07_04.jpg)
- en: Select your application module in the **Create Library** dialog and click on
    **OK**. You now have the `google-play-services.jar` available in your project
    libraries, under the `libs/` folder, and you will now be able to reference Google
    Play services from your code.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**创建库**对话框中选择您的应用程序模块，然后点击**确定**。现在您可以在项目的`libs/`文件夹下找到可用的`google-play-services.jar`，您现在将能够从您的代码中引用Google
    Play服务。
- en: 'Finally, you will need to add the library to your Gradle''s build file. To
    do this, just edit the `build.gradle` file under `MyApplication/` and add the
    following line in the `dependencies` section:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您需要将库添加到您的Gradle构建文件中。为此，只需编辑`MyApplication/`下的`build.gradle`文件，并在`dependencies`部分添加以下行：
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Google Maps Android API
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Maps Android API
- en: 'Google Maps Android API allows the users of your application to explore maps
    available through a Google service. It offers functionalities such as 3D maps,
    indoor and satellite maps, efficient caching and drawing using vector-based technology,
    and animated transitions through the map. Add the following dependency, to your
    Gradle''s build file, to include the Google Maps API package in your app:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps Android API允许您的应用程序用户通过Google服务探索可用的地图。它提供了诸如3D地图、室内和卫星地图、基于矢量的高效缓存和绘图技术，以及通过地图的动画过渡等功能。将以下依赖项添加到您的Gradle构建文件中，以将Google
    Maps API包包含到您的应用程序中：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s create a new activity, **Google Maps Activity**, to examine the most
    important generated classes. Navigate to **File** | **New** | **Activity** | **Gallery...**.
    In the **Add an Activity to Mobile** dialog, select a **Google Maps Activity**
    and click on **Next**. In the **Customize the Activity** step, leave the default
    values like they are in the screenshot: `MapsActivity` for **Activity Name**,
    `activity_maps` for **Layout Name**, and `Map` for **Title**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的活动，**Google Maps Activity**，来检查最重要的生成类。导航到 **文件** | **新建** | **活动**
    | **图库...**。在 **添加活动到移动** 对话框中，选择 **Google Maps Activity** 并点击 **下一步**。在 **自定义活动**
    步骤中，保留默认值，如截图所示：`MapsActivity` 作为 **活动名称**，`activity_maps` 作为 **布局名称**，`Map` 作为
    **标题**：
- en: '![Google Maps Android API](img/B05459_07_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Google Maps Android API](img/B05459_07_05.jpg)'
- en: 'Click on **Finish**. Three new files were created: the activity `MapsActivity.java`
    (at `src/main/java`), the layout `activity_maps.xml` (at `src/main/res/layout`),
    and one resource file, `google_maps_api.xml` (at `/src/debug/res/values` and at
    `/src/release/res/values`). This resource file contains the Google Maps API Key
    that you need to be able to use the Google Maps API. Open the link provided in
    the resource file and follow the directions. Once you have created your key, paste
    it in the resource file, replacing the `YOUR_KEY_HERE` text.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **完成**。创建了三个新文件：活动 `MapsActivity.java`（位于 `src/main/java`），布局 `activity_maps.xml`（位于
    `src/main/res/layout`），以及一个资源文件，`google_maps_api.xml`（位于 `/src/debug/res/values`
    和 `/src/release/res/values`）。此资源文件包含您需要使用 Google Maps API 的 Google Maps API 密钥。打开资源文件中提供的链接，并按照说明操作。一旦您创建了密钥，将其粘贴到资源文件中，替换
    `YOUR_KEY_HERE` 文本。
- en: 'Open the `MapsActivity` class under `src/main/java/`. Check the `import` clauses
    in the activity and notice that the `com.google.android.gms.maps` package contains
    the Google Maps Android API classes. The activity has a `private` variable of
    class type `GoogleMap`, which is the main class of the API, and this is the entry
    point for all the methods related to a map. You may change the theme colors and
    the icons of your map to match your application style. You can also customize
    your map by adding markers to it. To add a simple marker, you can use the `addMarker`
    method of the `GoogleMap` class. Examine the `onMapReady` method in `MapsActivity`
    to see the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/main/java/` 下打开 `MapsActivity` 类。检查活动中的 `import` 语句，注意 `com.google.android.gms.maps`
    包包含 Google Maps Android API 类。活动有一个 `private` 类型的 `GoogleMap` 变量，这是 API 的主要类，也是所有与地图相关方法的入口点。您可以根据应用程序风格更改地图的主题颜色和图标。您还可以通过向其添加标记来自定义地图。要添加一个简单的标记，您可以使用
    `GoogleMap` 类的 `addMarker` 方法。检查 `MapsActivity` 中的 `onMapReady` 方法，以查看以下代码：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `addMarker` method has a `MarkerOptions` object as a parameter. Using the
    `position` method, we indicate the coordinates of the marker on the map and use
    the `title` method, we can add a custom string to show up on the marker.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`addMarker` 方法接受一个 `MarkerOptions` 对象作为参数。使用 `position` 方法，我们指定地图上标记的坐标，并使用
    `title` 方法，我们可以添加一个自定义字符串，使其显示在标记上。'
- en: To add a map into a layout, we can use the `MapView` class, which extends the
    `View` class and displays a map. However, the easiest way to place a map in an
    application is using a `MapFragment` object. A `fragment` represents a piece of
    the user interface or behavior that can be embedded in an activity. A `fragment`
    is a reusable module.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要将地图添加到布局中，我们可以使用扩展了 `View` 类并显示地图的 `MapView` 类。然而，将地图放置在应用程序中最简单的方法是使用 `MapFragment`
    对象。`fragment` 代表用户界面或行为的一部分，可以嵌入到活动中。`fragment` 是一个可重用的模块。
- en: 'The `MapFragment` class wraps a view of a map to handle the necessary life
    cycle requirements of a component automatically. To see this code in use, open
    the layout associated with the `MapsActivity` class. This is the `activity_maps.xml`
    file found under `/res/layout/`. The `MapFragment` class extends the `Fragment`
    class, so it can be added to a layout by adding the following XML code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapFragment` 类封装了一个地图视图，以自动处理组件所需的生命周期要求。要查看此代码的使用情况，请打开与 `MapsActivity` 类关联的布局。这是位于
    `/res/layout/` 下的 `activity_maps.xml` 文件。`MapFragment` 类扩展了 `Fragment` 类，因此可以通过添加以下
    XML 代码将其添加到布局中：'
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we need the code to obtain the `GoogleMap` object from the fragment.
    We can find the `Fragment` map using the `findFragmentById` method, and then we
    get the map from the `Fragment` using the `getMap` method:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要代码来从片段中获取 `GoogleMap` 对象。我们可以使用 `findFragmentById` 方法找到 `Fragment` 地图，然后使用
    `getMap` 方法从 `Fragment` 获取地图：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see an example of this code in the `MapsActivity` class in the `onCreate`
    method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `MapsActivity` 类的 `onCreate` 方法中看到此代码的示例。
- en: 'The last important class to cover is the `GoogleMapOptions` class, which can
    be used if you create your map programmatically. It defines the configuration
    for a map. You can also modify the initial state of a map by editing the layout
    XML code or using the setters'' methods of the map from your activity code. Here
    are some interesting options that are available:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要的类是 `GoogleMapOptions` 类，如果您以编程方式创建地图，则可以使用它。它定义了地图的配置。您还可以通过编辑布局 XML
    代码或使用活动代码中的地图设置器方法来修改地图的初始状态。以下是一些可用的有趣选项：
- en: '`mapType`: This specifies the type of a map. Its value can be `none`, `normal`,
    `hybrid`, `satellite`, or `terrain`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapType`：这指定了地图的类型。其值可以是 `none`、`normal`、`hybrid`、`satellite` 或 `terrain`。'
- en: '`compassEnabled`: This defines whether compass controls are enabled or disabled.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compassEnabled`：这定义了是否启用或禁用指南针控件。'
- en: '`zoomControlsEnabled`: This defines whether zoom controls are enabled or disabled.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zoomControlsEnabled`：这定义了是否启用或禁用缩放控件。'
- en: '`rotateGesturesEnabled`: This defines whether rotation gestures are enabled
    or disabled.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rotateGesturesEnabled`：这定义了是否启用或禁用旋转手势。'
- en: 'There are some sample demos at Google Map''s GitHub: [https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google Map 的 GitHub 上有一些示例演示：[https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples)。
- en: Google Places
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Places
- en: 'Using the Google Places API, your app can access the Google''s places database.
    This database has information about business and local places: name, address,
    photos, phone number, rating, type, coordinates, website, or price level. Add
    the following dependency in your Gradle''s build file to include the Google Places
    API package in your app:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Google Places API，您的应用可以访问 Google 的地点数据库。这个数据库包含有关商业和本地地点的信息：名称、地址、照片、电话号码、评分、类型、坐标、网站或价格水平。在您的
    Gradle 构建文件中添加以下依赖项以将 Google Places API 包包含到您的应用中：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To use the Google Places API, an API key is needed. This key is the same one
    that you obtained to use the Google Maps API. Once you have it, add it to your
    app''s manifest file, inside the `application` element, using the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Google Places API，需要一个 API 密钥。这个密钥与您用于 Google Maps API 的密钥相同。一旦您有了它，请将其添加到您的应用清单文件中的
    `application` 元素内，使用以下代码：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `GoogleApiClient` class is used to access the API. Add the Google Places
    API in the `Build` method by indicating any of the two available Places API keys:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `GoogleApiClient` 类来访问 API。通过指示两个可用的地点 API 密钥之一，在 `Build` 方法中将 Google Places
    API 添加到 `Build` 方法中：
- en: '**Geo Data API**: This API provides access to Google''s database, which contains
    the information about local places and businesses. The key for this API is `Places.GEO_DATA_API`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Geo Data API**：此 API 提供对 Google 数据库的访问，该数据库包含有关本地地点和商业的信息。此 API 的密钥是 `Places.GEO_DATA_API`。'
- en: '**Place Detection API**: This API gets the device location and detects the
    nearby places. The key for this API is `Places.PLACE_DETECTION_API`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地点检测 API**：此 API 获取设备位置并检测附近的地点。此 API 的密钥是 `Places.PLACE_DETECTION_API`。'
- en: 'You can also add both of them. See the following code as an example for the
    `onCreate` method of your activity:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以添加它们两个。以下代码是您活动 `onCreate` 方法的示例：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In addition to these two APIs, there is a default dialog that your app can
    display to let the user pick a place in a map—the **Place Picker UI**. Using this
    element, you don''t need to implement your own custom dialog. Use the `IntentBuilder`
    method of the `PlacePicker` class to create an `Intent` and start the activity
    like in the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个 API 之外，还有一个默认对话框，您的应用可以显示它，让用户在地图中选择地点——**地点选择 UI**。使用此元素，您不需要实现自己的自定义对话框。使用
    `PlacePicker` 类的 `IntentBuilder` 方法创建一个 `Intent` 并启动活动，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The activity''s result will return you the place selected by the user, which
    you can obtain using the `getPlace` method of the `PlacePicker` class:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的结果将返回用户选择的地点，您可以使用 `PlacePicker` 类的 `getPlace` 方法获取：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Geo Data API
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Geo Data API
- en: 'Using the Geo Data API, which is connected to Google''s database, you can find
    places by their identifiers or by query, you can get photos of the places, or
    you can add new places. These are the main methods available in the `GeoDataApi`
    interface:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与 Google 数据库相连的 Geo Data API，您可以通过标识符或查询找到地点，您可以获取地点的照片，或者您可以添加新的地点。这些是 `GeoDataApi`
    接口中的主要方法：
- en: '`addPlace`: This method allows you to add a new place to Google''s database.
    The place will be available for your app, but it needs to be reviewed before being
    added to Google''s database. Information about the new place is included in an
    `AddPlaceRequest` object.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addPlace`: 此方法允许您将新地点添加到谷歌数据库中。该地点将对您的应用可用，但在添加到谷歌数据库之前需要经过审核。关于新地点的信息包含在`AddPlaceRequest`对象中。'
- en: '`getAutocompletePredictions`: This method returns a list of places based on
    a query that looks for names and addresses of places. In addition to the search
    string, you can add more filters, such as latitude and longitude limits or a flag
    to return only businesses.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getAutocompletePredictions`: 此方法根据查询返回地点列表，该查询查找地点的名称和地址。除了搜索字符串外，您还可以添加更多过滤器，例如纬度和经度限制或仅返回企业的标志。'
- en: '`getPlaceById`: This method returns a list of `Place` objects with the indicated
    place IDs.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPlaceById`: 此方法返回具有指定地点ID的`Place`对象列表。'
- en: '`getPlacePhotos`: This method returns up to 10 photos of the place indicated
    by its ID.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPlacePhotos`: 此方法返回最多10张指定ID的地点照片。'
- en: Place Detection API
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地点检测API
- en: 'To get an estimation of the place where the user is located, you need to use
    the Place Detection API. The `PlaceDetectionApi` interface provides the `getCurrentPlace`
    method that returns a buffer (`PlaceLikelihoodBuffer` object) containing a list
    of candidate places and the associated likelihood of the user being in those places
    (`PlaceLikelihood` objects). A `PlaceLikelihood` object has two public methods:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取用户所在位置的估计，您需要使用地点检测API。`PlaceDetectionApi`接口提供了`getCurrentPlace`方法，该方法返回一个包含候选地点列表及其用户位于这些地点的可能性（`PlaceLikelihood`对象）的缓冲区（`PlaceLikelihoodBuffer`对象）。`PlaceLikelihood`对象有两个公共方法：
- en: '`getLikelihood`: This method returns a `float` value, which represents the
    likelihood with a value from 0.0 to 1.0\. The higher the value, the higher the
    confidence that the user is at that candidate place.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLikelihood`: 此方法返回一个`float`值，表示可能性，其值从0.0到1.0。值越高，用户位于候选地点的置信度就越高。'
- en: '`getPlace`: This method returns the `Place` object, which contains all the
    information about the candidate place.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPlace`: 此方法返回包含候选地点所有信息的`Place`对象。'
- en: The `getCurrentPlace` method can receive a filter to refine the results (`PlaceFilter`
    object). You can filter the places that are currently open or not and you can
    filter by specific place identifiers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCurrentPlace`方法可以接收一个过滤器以细化结果（`PlaceFilter`对象）。您可以过滤当前是否开放的地点，以及可以按特定地点标识符进行过滤。'
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多代码和示例，请查看谷歌GitHub上的示例演示：[https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places)。
- en: Google Sign-In
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Sign-In
- en: 'Google Sign-In for Android lets the developer authenticate users using the
    same credentials they use on Google. Users will be able to sign in to your app
    using their Google credentials. Add the following dependency in your Gradle''s
    build file to include the Google Sign-In package in your app:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Google Sign-In for Android 允许开发人员使用用户在谷歌上使用的相同凭据进行用户身份验证。用户将能够使用他们的谷歌凭据登录您的应用。在您的Gradle构建文件中添加以下依赖项以将Google
    Sign-In包包含到您的应用中：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'These are the main Google Sign-In API classes that you need to know about:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是您需要了解的主要Google Sign-In API类：
- en: '`SignInButton`: This is the default Google Sign-In button. You need to add
    the default or a custom button to your app so the user can trigger the Sign-In
    flow. You can add the default button using this code in your layout file:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SignInButton`: 这是默认的Google Sign-In按钮。您需要在您的应用中添加默认按钮或自定义按钮，以便用户可以触发登录流程。您可以使用以下代码在布局文件中添加默认按钮：'
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This default button can be customized in size and color depending on the scope.
    For example, you can choose among these size values, which you can compare in
    the next screenshot: `SignInButton.SIZE_ICON_ONLY`, `SignInButton.SIZE_STANDARD`,
    or `SignInButton.SIZE_WIDE`.'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此默认按钮可以根据范围进行自定义，包括大小和颜色。例如，您可以选择以下这些大小值，您可以在下一张截图中进行比较：`SignInButton.SIZE_ICON_ONLY`、`SignInButton.SIZE_STANDARD`或`SignInButton.SIZE_WIDE`。
- en: '![Google Sign-In](img/B05459_07_06.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Google Sign-In](img/B05459_07_06.jpg)'
- en: '`GoogleSignInOptions`: This class configures the Google Sign-In API options.
    You can request the user''s ID and basic profile using the `GoogleSignInOptions.DEFAULT_SIGN_IN`
    option. You can also build a new option to request additional information such
    as the user''s e-mail using the following code:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GoogleSignInOptions`: 这个类配置Google Sign-In API选项。您可以使用`GoogleSignInOptions.DEFAULT_SIGN_IN`选项请求用户的ID和基本资料。您还可以构建一个新的选项来请求额外的信息，例如使用以下代码请求用户的电子邮件：'
- en: '[PRE15]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`GoogleApiClient`: This class is used to access the API. Add the Google Sign-In
    API in the `Build` method by indicating the `Auth.GOOGLE_SIGN_IN_API` key. The
    build method also receives a `GoogleSignInOptions` object. You can add the following
    code to the `onCreate` method of your activity to get a `GoogleApiClient` object:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GoogleApiClient`: 这个类用于访问API。在`Build`方法中通过指定`Auth.GOOGLE_SIGN_IN_API`密钥添加Google
    Sign-In API。构建方法还会接收一个`GoogleSignInOptions`对象。您可以将以下代码添加到活动的`onCreate`方法中，以获取`GoogleApiClient`对象：'
- en: '[PRE16]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多代码和示例，请查看Google的GitHub上的示例演示：[https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin)。
- en: Google+ Platform for Android
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android的Google+平台
- en: Google+ Platform for Android is now part of Google Sign-In. You need to add
    Google Sign-In to use Google+ in your app. This enables the use of the public
    profile and social graph to welcome the users by name, display their pictures,
    or connect with friends.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Android的Google+平台现在已成为Google Sign-In的一部分。您需要将Google Sign-In添加到您的应用中以使用Google+。这使您能够通过用户名欢迎用户，显示他们的图片或与朋友连接，以使用公共资料和社交图谱。
- en: 'Create a `GoogleApiClient` object to access the API and use the Sign-In feature.
    Add the Google+ API by indicating the key `Plus.API` and these two scopes: `Scopes.PLUS_LOGIN`
    and `Scopes.PLUS_ME`, like in the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`GoogleApiClient`对象以访问API并使用登录功能。通过指定密钥`Plus.API`和这两个作用域：`Scopes.PLUS_LOGIN`和`Scopes.PLUS_ME`，添加Google+
    API，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `PlusShare` class includes resources in posts shared on Google+. The `PlusOneButton`
    class implements a **+1** button to recommend a URL on Google+. The available
    sizes for the **+1** button are small, medium, tall, or standard. Add it to a
    layout using the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`PlusShare`类包括在Google+上共享的帖子中的资源。`PlusOneButton`类实现了一个**+1**按钮，用于在Google+上推荐URL。**+1**按钮的可用尺寸有小型、中型、大型或标准型。您可以使用以下代码将其添加到布局中：'
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多代码和示例，请查看Google的GitHub上的示例演示：[https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android)。
- en: Google Play In-App Billing
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Play应用内计费
- en: In-app Billing allows you to sell virtual content from your apps. This virtual
    content could be paid content with a one-time billing or a time concession through
    subscriptions or fees. Using this service, you can allows you to charge for extra
    features and access to premium content.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 应用内计费允许您从您的应用中销售虚拟内容。这种虚拟内容可以是付费内容，一次计费或通过订阅或费用进行时间折扣。使用这项服务，您可以对额外功能和访问高级内容进行收费。
- en: 'Any app published in Google Play store can implement the In-app Billing API,
    since it only requires the same assets as publishing an app: a Google Play Developer
    Console account and a Google Wallet Merchant account.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在Google Play商店发布的应用都可以实现应用内计费API，因为它只需要与发布应用相同的资产：一个Google Play开发者控制台账户和一个Google
    Wallet商户账户。
- en: 'Using the Google Play Developer Console, you can define your products, including
    the type, identification code (SKU), price, description, and more. Once you have
    your products defined, you can access this content from this application. When
    the user wants to buy this content, the following purchase flow will occur between
    your In-app billing application and Google Play:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google Play开发者控制台，您可以定义您的产品，包括类型、识别码（SKU）、价格、描述等。一旦您定义了您的产品，您就可以从该应用程序访问这些内容。当用户想要购买此内容时，您的应用内计费应用程序和Google
    Play之间将发生以下购买流程：
- en: Your app calls `isBillingSupported()` to Google Play to check if the In-app
    Billing version your are using is supported.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用调用`isBillingSupported()`到Google Play以检查您使用的应用内计费版本是否受支持。
- en: If the In-app Billing API version is supported, you may use `getPurchases()`
    to get a list of the SKUs of the purchased items. This list will be returned in
    a `Bundle` object.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果支持In-app Billing API版本，你可以使用`getPurchases()`来获取已购买项目的SKU列表。这个列表将返回在一个`Bundle`对象中。
- en: You will probably want to inform your user of the available in-app purchases.
    To do this, your app may send a `getSkuDetails()` request, which will result in
    a list with the price, title, description, and more information available for
    the item being offered.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想要通知用户可用的应用内购买。为此，你的应用可以发送一个`getSkuDetails()`请求，这将生成一个包含价格、标题、描述以及更多关于所提供项目的信息的列表。
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多代码和示例，请查看Google的GitHub上的示例演示：[https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing)。
- en: Google Cloud Messaging
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud Messaging
- en: '**Google Cloud Messaging** (**GCM**) for Android allows the communication between
    your server and your application using asynchronous messages. You need the client
    implementation in your Android app, but you also need the implementation in your
    server to send the messages and to store the client''s data. You don''t have to
    worry about handling low-level aspects of this communication, such as queuing
    and message construction. Using this service, you can easily implement a notification
    system for your application.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google Cloud Messaging**（**GCM**）为Android提供了服务器和你的应用之间通过异步消息进行通信的功能。你需要在你的Android应用中实现客户端实现，同时也需要在服务器端实现以发送消息并存储客户端数据。你不需要担心处理此通信的低级方面，如队列和消息构建。使用此服务，你可以轻松地为你的应用实现一个通知系统。'
- en: 'The following image shows how GCM works. The process involves three elements:
    your app, your server, and the GCM servers.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了GCM的工作原理。这个过程涉及三个元素：你的应用、你的服务器和GCM服务器。
- en: Your app first needs to register in GCM to get a registration ID, which identifies
    your app in a specific device.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的应用首先需要在GCM中进行注册以获取一个注册ID，这个ID用于在特定设备上标识你的应用。
- en: Your app has to send the registration ID to your server so that it can be saved.
    This second step is necessary since your server needs to know the registration
    IDs of the user's device to send a message to your app in that device.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的应用必须将注册ID发送到你的服务器以便保存。这一步是必要的，因为你的服务器需要知道用户设备的注册ID，以便在该设备上向你的应用发送消息。
- en: When your server wants to send a message, it will send it to the GCM servers,
    indicating the message information and the registration IDs of the devices that
    will receive the message.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你的服务器想要发送消息时，它将消息发送到GCM服务器，并指示消息信息和将接收消息的设备的注册ID。
- en: Finally, GCM will send the message to your app in those devices.![Google Cloud
    Messaging](img/B05459_07_07.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，GCM将消息发送到那些设备上的你的应用。![Google Cloud Messaging](img/B05459_07_07.jpg)
- en: 'You have two options when using GCM:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GCM时，你有两种选择：
- en: The server can inform your app when there is new data available to be fetched
    from the server, and then the application gets this data.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以在有新数据可供从服务器获取时通知你的应用，然后应用获取这些数据。
- en: The server can send the data directly in a message. The message payload can
    be up to 4 KB. This allows your application to access the data at once and act
    accordingly.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以直接在消息中发送数据。消息有效载荷可以达到4 KB。这允许你的应用一次性访问数据并相应地采取行动。
- en: 'Add the following dependency, in your Gradle''s build file, to include the
    Google Maps API package in your app:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Gradle构建文件中添加以下依赖项，以将Google Maps API包包含到你的应用中：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In order to send or receive messages from your app (client side), you will
    need to get a registration ID. This identifies the combination of device and application.
    To allow your app to use the GCM service, you need to add the following line to
    the manifest file of your project:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从你的应用（客户端）发送或接收消息，你需要获取一个注册ID。这个ID标识了设备和应用的组合。为了允许你的应用使用GCM服务，你需要在你的项目清单文件中添加以下行：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You also have to add the declaration of the following three classes to your
    manifest file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须在清单文件中添加以下三个类的声明：
- en: '**GCM Receiver**: This class manages the messages received in your app. This
    receiver already belongs to the GCM API and you don''t need to create it. Use
    the following code to add it to your manifest file:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GCM接收器**：这个类管理你的应用中接收到的消息。这个接收器已经属于GCM API，你不需要创建它。使用以下代码将其添加到你的清单文件中：'
- en: '[PRE21]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**GCM Listener Service**: This service class, which you have to create in your
    app, should extend the `GcmListenerService` class. By implementing this service
    subclass, you can handle the messages in its `onMessageReceived` method. Use the
    following code to add it to your manifest file:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GCM 监听服务**: 这个服务类，您需要在您的应用中创建，应该扩展 `GcmListenerService` 类。通过实现这个服务子类，您可以在其
    `onMessageReceived` 方法中处理消息。使用以下代码将其添加到您的清单文件中：'
- en: '[PRE22]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Instance ID Listener Service**: This service class, which you have to create
    in your app, should extend the `InstanceIDListenerService` class. By implementing
    this service subclass, you can handle the registration ID. Use the following code
    to add it to your manifest file:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实例 ID 监听服务**: 这个服务类，您需要在您的应用中创建，应该扩展 `InstanceIDListenerService` 类。通过实现这个服务子类，您可以处理注册
    ID。使用以下代码将其添加到您的清单文件中：'
- en: '[PRE23]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看更多代码和示例，请检查 Google 的 GitHub 上的示例演示：[https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).
- en: More sample apps
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多示例应用
- en: 'If you are interested in Google Play services, there are sample apps available
    at Google''s GitHub. Here are the links to them:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对 Google Play 服务感兴趣，Google 的 GitHub 上有可用的示例应用。以下是它们的链接：
- en: 'Google+: [https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android).'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google+: [https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android).'
- en: 'Google Analytics: [https://github.com/googlesamples/google-services/tree/master/android/analytics](https://github.com/googlesamples/google-services/tree/master/android/analytics).'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 分析: [https://github.com/googlesamples/google-services/tree/master/android/analytics](https://github.com/googlesamples/google-services/tree/master/android/analytics).'
- en: 'Google App Indexing: [https://github.com/google/search-samples/tree/master/app-indexing](https://github.com/google/search-samples/tree/master/app-indexing).'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 应用索引: [https://github.com/google/search-samples/tree/master/app-indexing](https://github.com/google/search-samples/tree/master/app-indexing).'
- en: 'Google Cast: [https://github.com/googlecast/CastVideos-android](https://github.com/googlecast/CastVideos-android)
    or [https://github.com/googlecast/GameManagerSamples](https://github.com/googlecast/GameManagerSamples).'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Cast: [https://github.com/googlecast/CastVideos-android](https://github.com/googlecast/CastVideos-android)
    或 [https://github.com/googlecast/GameManagerSamples](https://github.com/googlecast/GameManagerSamples).'
- en: 'Google Cloud Messaging: [https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 云消息传递: [https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).'
- en: 'Google Drive: [https://github.com/googledrive/android-demos](https://github.com/googledrive/android-demos).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Drive: [https://github.com/googledrive/android-demos](https://github.com/googledrive/android-demos).'
- en: 'Google Fit: [https://github.com/googlesamples/android-fit](https://github.com/googlesamples/android-fit).'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Fit: [https://github.com/googlesamples/android-fit](https://github.com/googlesamples/android-fit).'
- en: 'Google In-app Billing: [https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing).'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 应用内计费: [https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing).'
- en: 'Google Location: [https://github.com/googlesamples/android-play-location/](https://github.com/googlesamples/android-play-location/).'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 地理位置服务: [https://github.com/googlesamples/android-play-location/](https://github.com/googlesamples/android-play-location/).'
- en: 'Google Maps: [https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 地图: [https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples).'
- en: 'Google Mobile Ads: [https://github.com/googleads/googleads-mobile-android-examples](https://github.com/googleads/googleads-mobile-android-examples).'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 移动广告: [https://github.com/googleads/googleads-mobile-android-examples](https://github.com/googleads/googleads-mobile-android-examples).'
- en: 'Google Nearby: [https://github.com/googlesamples/android-nearby](https://github.com/googlesamples/android-nearby).'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 附近: [https://github.com/googlesamples/android-nearby](https://github.com/googlesamples/android-nearby).'
- en: 'Google Places: [https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google 地点: [https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places).'
- en: 'Google Play Games services: [https://github.com/playgameservices/android-basic-samples](https://github.com/playgameservices/android-basic-samples).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Play 游戏服务: [https://github.com/playgameservices/android-basic-samples](https://github.com/playgameservices/android-basic-samples).'
- en: 'Google Sign-In: [https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 登录：[https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin)。
- en: 'Google Wallet: [https://github.com/android-pay/androidpay-quickstart](https://github.com/android-pay/androidpay-quickstart).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 钱包：[https://github.com/android-pay/androidpay-quickstart](https://github.com/android-pay/androidpay-quickstart)。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the available Google Play services. You learned
    how to improve our application using Google Play Services through its client library
    and Android package. You should have successfully installed the Google Play Services
    client library in Android Studio using the SDK Manager and should now be able
    to build applications using the library features. You also learned some tips about
    Google Maps v2, Google+ Platform for Android authentication, Google Play In-app
    Billing, and GCM.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了可用的 Google Play 服务。你学习了如何通过其客户端库和 Android 包使用 Google Play 服务来改进我们的应用程序。你应该已经使用
    SDK 管理器成功安装了 Google Play 服务客户端库，并且现在应该能够使用库功能构建应用程序。你还了解了一些关于 Google Maps v2、Google+
    平台 Android 身份验证、Google Play 内部计费和 GCM 的技巧。
- en: In the next chapter, you will learn about some useful tools available in Android
    Studio. We will use the SDK Manager frequently to install different packages.
    You will also learn about the AVD Manager for different virtual devices to test
    our applications on. We will generate Javadoc documentation for our project using
    the Javadoc utility and you will learn about the version control systems available
    in Android Studio.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解 Android Studio 中可用的某些有用工具。我们将经常使用 SDK 管理器来安装不同的包。你还将了解 AVD 管理器，用于测试我们的应用程序的不同虚拟设备。我们将使用
    Javadoc 工具为我们的项目生成 Javadoc 文档，你还将了解 Android Studio 中可用的版本控制系统。
