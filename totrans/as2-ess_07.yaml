- en: Chapter 7. Google Play Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have become familiar with the use of components on layouts, it is
    time to start thinking about extra functionality. Google Play services give you
    features, such as Google Maps, Google+, and more, to attract users. What are all
    the available features? How can you add these features to your application? What
    are the Android version requirements to use Google Play services?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on the creation, integration, and use of Google Play services
    using Android Studio. You will learn what Google services are available. You will
    also learn about the standard authorization API that provides a safe way to grant
    and receive access tokens to Google Play services. Then, you will learn about
    the limitations of these services and also the benefits of using them.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing Google Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Google Play Services from the IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Google Play Services in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding automatic updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google services in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Google Play services work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Google previewed Google Play services at Google I/O 2012, it said that
    the platform "consists of a services component that runs on the device and a thin
    client library that you package with your app" ([https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that Google Play services work thanks to two main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Play services client library**: The Google Play services client library
    includes interfaces to each Google service used by your app. The library is included
    when you pack your app and it allows your users to authorize the app with access
    to these services using their credentials. The client library is upgraded from
    time to time by Google, adding new features and services. You may upgrade the
    library in your app through an update to your app, although this is not necessary
    if you are not including any of the new features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play services APK**: The Google Play services APK runs as a background
    service in the Android operating system. Using the client library, your app accesses
    this service, which carries out the actions during runtime. The APK is not guaranteed
    to be installed on all devices. If the device does not come with the APK installed,
    you can get it from the Google Play store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this way, Google manages to separate the runtime of their services from the
    implementation you do as a developer, so you do not need to upgrade your application
    every time Google Play services are upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play services APK is automatically updated by the Google Play store.
    Any Android device running Android 2.3 or newer is ready to install any application
    that uses Google Play services.
  prefs: []
  type: TYPE_NORMAL
- en: Available services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Play services let you easily add more features to attract users on a
    wide range of devices, while using well-known features powered by Google. Using
    these services, you can add new revenue sources, manage the distribution of the
    app, access statistics, learn about your application users'' habits, and improve
    your application with easy-to-implement Google features such as Maps or Google''s
    social network, Google+. Some of the services are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google+**: Using the Google+ Platform for Android, you can authenticate the
    user of your app. Once they are authenticated, you can also access their public
    profile and social graph, among other actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Analytics**: By integrating this service, you can allow your app to
    send information to Google Analytics. It is a tool that collects the metrics of
    your app. Metrics can help you to learn how users use your app by tracking events,
    like the number of taps on a button or by tracking the visualization of screens
    and components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google App Indexing**: By integrating this service, you can make the content
    of your app available to the Google app index. This will make your app easier
    for users to find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cast**: By integrating this service, you can make you app interact
    with Google Cast devices, such as Chromecast or Android TV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud Messaging**: Using **Google Cloud Messaging** (**GCM**) for
    Android, you can exchange data between the app running in an Android-based device
    and your server. Using GCM, your server can start the communication with your
    app, which can generate push notifications to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Drive**: Using the Google Drive API, you can enable your application
    to access and manage your users'' files stored in their Google Drive account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Fit**: Using the Google Fit APIs, you can interact with **Bluetooth
    Low Energy** (**BLE**) devices (a heart rate monitor, a cycling sensor, or a pedometer),
    access data, or manage user activity in Google Fit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google In-app Billing**: Using Google Play In-app Billing makes it possible
    for you to sell digital content from your apps. You can use this service to sell
    one-time billing or temporal subscriptions to premium services and features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Location**: By integrating the location APIs, you can make your application
    location aware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Maps**: By integrating the Google Maps API, you can use the maps provided
    by Google in your app and customize them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Mobile Ads**: Using the Google Mobile Ads API, you can add AdMob banner
    ads to your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Nearby**: By integrating the Google Nearby service, you can make your
    app interact with nearby devices and execute actions based on proximity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Panorama Viewer**: By integrating this service, you can enable the
    user to see a 360-degree panorama picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Places**: By integrating the Google Places API, you can use the places
    information provided by Google in your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Game services**: Using the Google Play Game services, you can
    improve your gaming with a more social experience, such achievements, leaderboards,
    game gifts, or player stats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Sign-In**: By integrating Google Sign-In, users can securely register
    into your app using their Google account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Wallet**: By integrating Google Wallet, you can store objects such
    as gift cards or loyalty programs in the cloud and use them to pay in stores or
    online.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Google Play services to Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to know is what we need to add to our Android Studio.
    You just learned that the APK is available in the Google Play store and it is
    the actual runtime of the services. We, as developers, only need this package
    in our testing device while debugging our application. What we need to add to
    Android Studio is the Google Play services client library.
  prefs: []
  type: TYPE_NORMAL
- en: 'This library has to be declared as a dependency to your application, so perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `build.gradle` file for your application module (`/app/build.gradle`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new dependency to the build of your app by typing the following line
    inside the `dependencies` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The latest Google Play Services version is 8.4 (December 2015). When new updates
    of the library are published, you will need to update the version number in the
    `build.gradle` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **Android** | **Sync Project with Gradle Files** to
    synchronize your project with the new dependency on Google Play services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, add it to the manifest file of your application inside the application
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should have the library inside the `build` folder of your application project
    at `app/build/intermediates/exploded-aar/com.google.android.gms/`, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding Google Play services to Android Studio](img/B05459_07_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As you can notice both in the previous screenshot and in your project, all
    the Google Play services have been included: `play-services-ads`, `play-services-analytics`,
    `play-services-appindexing`, and so on. This could be completely unnecessary if
    you only need some of the services and you don''t want to include all of them.
    Since Google Play services Version 6.5, you can add the services independently.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you only want to add the Google Maps and the Google Places
    APIs, replace the dependency that we had before in the `build.gradle` file with
    the following two dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to **Tools** | **Android** | **Sync Project with Gradle Files** to
    synchronize your project. Inside the `build` folder of your application project
    at `app/build/intermediates/exploded-aar/com.google.android.gms/`, now you can
    only find the Google Maps and the Google Places APIs, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Play services to Android Studio](img/B05459_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you still have all the `play-services` folders, clean the project by navigating
    to **Build** | **Clean Project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we recommend using Gradle dependencies to include the Google Play
    services in your app, there is another way to use them in your app. You can download
    and install the Google Play services library in our system. This library is distributed
    through the Android SDK Manager. Now, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Tools** | **Android** | **SDK Manager**. Open the standalone SDK
    Manager. We can find Google Play services in the packages list under the `Extras`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Google Play services** checkbox and click on the **Install 1 package...**
    button:![Adding Google Play services to Android Studio](img/B05459_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing these actions will add the library project into the location of our
    SDK installation folder, `/sdk/extras/google/google_play_services/`. You can check
    the exact path by hovering the mouse over the **Google Play services** row in
    the SDK manager and looking at the tool tip.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the folder to examine its content. The `samples` folder contains
    some sample projects, for example, projects of Google Analytics (`analytics/`),
    authentication service (`auth/`), Google Cast (`cast/`), Google Drive (`drive/`),
    Google Maps (`maps/`), Google Panorama (`panorama/`), or Google Wallet (`wallet/`).
    The `libproject/` folder contains the Google Play services library project. The
    `google-play-services.jar` file is placed in this folder at `libproject/google-play-services_lib/libs/google-play-services.jar`.
    The `docs/` folder contains the documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this JAR file to your project simply by dragging it into the `libs/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the JAR file and right-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Add as Library...** option, as highlighted in the next screenshot:![Adding
    Google Play services to Android Studio](img/B05459_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your application module in the **Create Library** dialog and click on
    **OK**. You now have the `google-play-services.jar` available in your project
    libraries, under the `libs/` folder, and you will now be able to reference Google
    Play services from your code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, you will need to add the library to your Gradle''s build file. To
    do this, just edit the `build.gradle` file under `MyApplication/` and add the
    following line in the `dependencies` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Google Maps Android API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Maps Android API allows the users of your application to explore maps
    available through a Google service. It offers functionalities such as 3D maps,
    indoor and satellite maps, efficient caching and drawing using vector-based technology,
    and animated transitions through the map. Add the following dependency, to your
    Gradle''s build file, to include the Google Maps API package in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a new activity, **Google Maps Activity**, to examine the most
    important generated classes. Navigate to **File** | **New** | **Activity** | **Gallery...**.
    In the **Add an Activity to Mobile** dialog, select a **Google Maps Activity**
    and click on **Next**. In the **Customize the Activity** step, leave the default
    values like they are in the screenshot: `MapsActivity` for **Activity Name**,
    `activity_maps` for **Layout Name**, and `Map` for **Title**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Google Maps Android API](img/B05459_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Finish**. Three new files were created: the activity `MapsActivity.java`
    (at `src/main/java`), the layout `activity_maps.xml` (at `src/main/res/layout`),
    and one resource file, `google_maps_api.xml` (at `/src/debug/res/values` and at
    `/src/release/res/values`). This resource file contains the Google Maps API Key
    that you need to be able to use the Google Maps API. Open the link provided in
    the resource file and follow the directions. Once you have created your key, paste
    it in the resource file, replacing the `YOUR_KEY_HERE` text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MapsActivity` class under `src/main/java/`. Check the `import` clauses
    in the activity and notice that the `com.google.android.gms.maps` package contains
    the Google Maps Android API classes. The activity has a `private` variable of
    class type `GoogleMap`, which is the main class of the API, and this is the entry
    point for all the methods related to a map. You may change the theme colors and
    the icons of your map to match your application style. You can also customize
    your map by adding markers to it. To add a simple marker, you can use the `addMarker`
    method of the `GoogleMap` class. Examine the `onMapReady` method in `MapsActivity`
    to see the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `addMarker` method has a `MarkerOptions` object as a parameter. Using the
    `position` method, we indicate the coordinates of the marker on the map and use
    the `title` method, we can add a custom string to show up on the marker.
  prefs: []
  type: TYPE_NORMAL
- en: To add a map into a layout, we can use the `MapView` class, which extends the
    `View` class and displays a map. However, the easiest way to place a map in an
    application is using a `MapFragment` object. A `fragment` represents a piece of
    the user interface or behavior that can be embedded in an activity. A `fragment`
    is a reusable module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MapFragment` class wraps a view of a map to handle the necessary life
    cycle requirements of a component automatically. To see this code in use, open
    the layout associated with the `MapsActivity` class. This is the `activity_maps.xml`
    file found under `/res/layout/`. The `MapFragment` class extends the `Fragment`
    class, so it can be added to a layout by adding the following XML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need the code to obtain the `GoogleMap` object from the fragment.
    We can find the `Fragment` map using the `findFragmentById` method, and then we
    get the map from the `Fragment` using the `getMap` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can see an example of this code in the `MapsActivity` class in the `onCreate`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last important class to cover is the `GoogleMapOptions` class, which can
    be used if you create your map programmatically. It defines the configuration
    for a map. You can also modify the initial state of a map by editing the layout
    XML code or using the setters'' methods of the map from your activity code. Here
    are some interesting options that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapType`: This specifies the type of a map. Its value can be `none`, `normal`,
    `hybrid`, `satellite`, or `terrain`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compassEnabled`: This defines whether compass controls are enabled or disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zoomControlsEnabled`: This defines whether zoom controls are enabled or disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rotateGesturesEnabled`: This defines whether rotation gestures are enabled
    or disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are some sample demos at Google Map''s GitHub: [https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Places
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the Google Places API, your app can access the Google''s places database.
    This database has information about business and local places: name, address,
    photos, phone number, rating, type, coordinates, website, or price level. Add
    the following dependency in your Gradle''s build file to include the Google Places
    API package in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the Google Places API, an API key is needed. This key is the same one
    that you obtained to use the Google Maps API. Once you have it, add it to your
    app''s manifest file, inside the `application` element, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `GoogleApiClient` class is used to access the API. Add the Google Places
    API in the `Build` method by indicating any of the two available Places API keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Geo Data API**: This API provides access to Google''s database, which contains
    the information about local places and businesses. The key for this API is `Places.GEO_DATA_API`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Place Detection API**: This API gets the device location and detects the
    nearby places. The key for this API is `Places.PLACE_DETECTION_API`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also add both of them. See the following code as an example for the
    `onCreate` method of your activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to these two APIs, there is a default dialog that your app can
    display to let the user pick a place in a map—the **Place Picker UI**. Using this
    element, you don''t need to implement your own custom dialog. Use the `IntentBuilder`
    method of the `PlacePicker` class to create an `Intent` and start the activity
    like in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The activity''s result will return you the place selected by the user, which
    you can obtain using the `getPlace` method of the `PlacePicker` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Geo Data API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Geo Data API, which is connected to Google''s database, you can find
    places by their identifiers or by query, you can get photos of the places, or
    you can add new places. These are the main methods available in the `GeoDataApi`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addPlace`: This method allows you to add a new place to Google''s database.
    The place will be available for your app, but it needs to be reviewed before being
    added to Google''s database. Information about the new place is included in an
    `AddPlaceRequest` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getAutocompletePredictions`: This method returns a list of places based on
    a query that looks for names and addresses of places. In addition to the search
    string, you can add more filters, such as latitude and longitude limits or a flag
    to return only businesses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPlaceById`: This method returns a list of `Place` objects with the indicated
    place IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPlacePhotos`: This method returns up to 10 photos of the place indicated
    by its ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Place Detection API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get an estimation of the place where the user is located, you need to use
    the Place Detection API. The `PlaceDetectionApi` interface provides the `getCurrentPlace`
    method that returns a buffer (`PlaceLikelihoodBuffer` object) containing a list
    of candidate places and the associated likelihood of the user being in those places
    (`PlaceLikelihood` objects). A `PlaceLikelihood` object has two public methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getLikelihood`: This method returns a `float` value, which represents the
    likelihood with a value from 0.0 to 1.0\. The higher the value, the higher the
    confidence that the user is at that candidate place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getPlace`: This method returns the `Place` object, which contains all the
    information about the candidate place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getCurrentPlace` method can receive a filter to refine the results (`PlaceFilter`
    object). You can filter the places that are currently open or not and you can
    filter by specific place identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Sign-In
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Sign-In for Android lets the developer authenticate users using the
    same credentials they use on Google. Users will be able to sign in to your app
    using their Google credentials. Add the following dependency in your Gradle''s
    build file to include the Google Sign-In package in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the main Google Sign-In API classes that you need to know about:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SignInButton`: This is the default Google Sign-In button. You need to add
    the default or a custom button to your app so the user can trigger the Sign-In
    flow. You can add the default button using this code in your layout file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This default button can be customized in size and color depending on the scope.
    For example, you can choose among these size values, which you can compare in
    the next screenshot: `SignInButton.SIZE_ICON_ONLY`, `SignInButton.SIZE_STANDARD`,
    or `SignInButton.SIZE_WIDE`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Google Sign-In](img/B05459_07_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`GoogleSignInOptions`: This class configures the Google Sign-In API options.
    You can request the user''s ID and basic profile using the `GoogleSignInOptions.DEFAULT_SIGN_IN`
    option. You can also build a new option to request additional information such
    as the user''s e-mail using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`GoogleApiClient`: This class is used to access the API. Add the Google Sign-In
    API in the `Build` method by indicating the `Auth.GOOGLE_SIGN_IN_API` key. The
    build method also receives a `GoogleSignInOptions` object. You can add the following
    code to the `onCreate` method of your activity to get a `GoogleApiClient` object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin).'
  prefs: []
  type: TYPE_NORMAL
- en: Google+ Platform for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google+ Platform for Android is now part of Google Sign-In. You need to add
    Google Sign-In to use Google+ in your app. This enables the use of the public
    profile and social graph to welcome the users by name, display their pictures,
    or connect with friends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `GoogleApiClient` object to access the API and use the Sign-In feature.
    Add the Google+ API by indicating the key `Plus.API` and these two scopes: `Scopes.PLUS_LOGIN`
    and `Scopes.PLUS_ME`, like in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `PlusShare` class includes resources in posts shared on Google+. The `PlusOneButton`
    class implements a **+1** button to recommend a URL on Google+. The available
    sizes for the **+1** button are small, medium, tall, or standard. Add it to a
    layout using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Play In-App Billing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-app Billing allows you to sell virtual content from your apps. This virtual
    content could be paid content with a one-time billing or a time concession through
    subscriptions or fees. Using this service, you can allows you to charge for extra
    features and access to premium content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any app published in Google Play store can implement the In-app Billing API,
    since it only requires the same assets as publishing an app: a Google Play Developer
    Console account and a Google Wallet Merchant account.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Google Play Developer Console, you can define your products, including
    the type, identification code (SKU), price, description, and more. Once you have
    your products defined, you can access this content from this application. When
    the user wants to buy this content, the following purchase flow will occur between
    your In-app billing application and Google Play:'
  prefs: []
  type: TYPE_NORMAL
- en: Your app calls `isBillingSupported()` to Google Play to check if the In-app
    Billing version your are using is supported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the In-app Billing API version is supported, you may use `getPurchases()`
    to get a list of the SKUs of the purchased items. This list will be returned in
    a `Bundle` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will probably want to inform your user of the available in-app purchases.
    To do this, your app may send a `getSkuDetails()` request, which will result in
    a list with the price, title, description, and more information available for
    the item being offered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Google Cloud Messaging** (**GCM**) for Android allows the communication between
    your server and your application using asynchronous messages. You need the client
    implementation in your Android app, but you also need the implementation in your
    server to send the messages and to store the client''s data. You don''t have to
    worry about handling low-level aspects of this communication, such as queuing
    and message construction. Using this service, you can easily implement a notification
    system for your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how GCM works. The process involves three elements:
    your app, your server, and the GCM servers.'
  prefs: []
  type: TYPE_NORMAL
- en: Your app first needs to register in GCM to get a registration ID, which identifies
    your app in a specific device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your app has to send the registration ID to your server so that it can be saved.
    This second step is necessary since your server needs to know the registration
    IDs of the user's device to send a message to your app in that device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When your server wants to send a message, it will send it to the GCM servers,
    indicating the message information and the registration IDs of the devices that
    will receive the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, GCM will send the message to your app in those devices.![Google Cloud
    Messaging](img/B05459_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You have two options when using GCM:'
  prefs: []
  type: TYPE_NORMAL
- en: The server can inform your app when there is new data available to be fetched
    from the server, and then the application gets this data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server can send the data directly in a message. The message payload can
    be up to 4 KB. This allows your application to access the data at once and act
    accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following dependency, in your Gradle''s build file, to include the
    Google Maps API package in your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to send or receive messages from your app (client side), you will
    need to get a registration ID. This identifies the combination of device and application.
    To allow your app to use the GCM service, you need to add the following line to
    the manifest file of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You also have to add the declaration of the following three classes to your
    manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GCM Receiver**: This class manages the messages received in your app. This
    receiver already belongs to the GCM API and you don''t need to create it. Use
    the following code to add it to your manifest file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**GCM Listener Service**: This service class, which you have to create in your
    app, should extend the `GcmListenerService` class. By implementing this service
    subclass, you can handle the messages in its `onMessageReceived` method. Use the
    following code to add it to your manifest file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Instance ID Listener Service**: This service class, which you have to create
    in your app, should extend the `InstanceIDListenerService` class. By implementing
    this service subclass, you can handle the registration ID. Use the following code
    to add it to your manifest file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To see more code and examples, check the sample demo at Google''s GitHub: [https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).'
  prefs: []
  type: TYPE_NORMAL
- en: More sample apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in Google Play services, there are sample apps available
    at Google''s GitHub. Here are the links to them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google+: [https://github.com/googleplus/gplus-haiku-client-android](https://github.com/googleplus/gplus-haiku-client-android).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Analytics: [https://github.com/googlesamples/google-services/tree/master/android/analytics](https://github.com/googlesamples/google-services/tree/master/android/analytics).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google App Indexing: [https://github.com/google/search-samples/tree/master/app-indexing](https://github.com/google/search-samples/tree/master/app-indexing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Cast: [https://github.com/googlecast/CastVideos-android](https://github.com/googlecast/CastVideos-android)
    or [https://github.com/googlecast/GameManagerSamples](https://github.com/googlecast/GameManagerSamples).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Cloud Messaging: [https://github.com/googlesamples/google-services/tree/master/android/gcm](https://github.com/googlesamples/google-services/tree/master/android/gcm).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Drive: [https://github.com/googledrive/android-demos](https://github.com/googledrive/android-demos).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Fit: [https://github.com/googlesamples/android-fit](https://github.com/googlesamples/android-fit).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google In-app Billing: [https://github.com/googlesamples/android-play-billing](https://github.com/googlesamples/android-play-billing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Location: [https://github.com/googlesamples/android-play-location/](https://github.com/googlesamples/android-play-location/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Maps: [https://github.com/googlemaps/android-samples](https://github.com/googlemaps/android-samples).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Mobile Ads: [https://github.com/googleads/googleads-mobile-android-examples](https://github.com/googleads/googleads-mobile-android-examples).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Nearby: [https://github.com/googlesamples/android-nearby](https://github.com/googlesamples/android-nearby).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Places: [https://github.com/googlesamples/android-play-places](https://github.com/googlesamples/android-play-places).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Play Games services: [https://github.com/playgameservices/android-basic-samples](https://github.com/playgameservices/android-basic-samples).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Sign-In: [https://github.com/googlesamples/google-services/tree/master/android/signin](https://github.com/googlesamples/google-services/tree/master/android/signin).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Wallet: [https://github.com/android-pay/androidpay-quickstart](https://github.com/android-pay/androidpay-quickstart).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the available Google Play services. You learned
    how to improve our application using Google Play Services through its client library
    and Android package. You should have successfully installed the Google Play Services
    client library in Android Studio using the SDK Manager and should now be able
    to build applications using the library features. You also learned some tips about
    Google Maps v2, Google+ Platform for Android authentication, Google Play In-app
    Billing, and GCM.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about some useful tools available in Android
    Studio. We will use the SDK Manager frequently to install different packages.
    You will also learn about the AVD Manager for different virtual devices to test
    our applications on. We will generate Javadoc documentation for our project using
    the Javadoc utility and you will learn about the version control systems available
    in Android Studio.
  prefs: []
  type: TYPE_NORMAL
