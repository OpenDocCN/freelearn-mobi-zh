["```kt\n    suspend fun getAllRestaurants(): List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            try {\n                refreshCache()\n            } catch (e: Exception) {…}\n            return@withContext restaurantsDao.getAll()\n                .sortedBy { it.title }\n        }\n    }\n    ```", "```kt\nsuspend fun toggleFavoriteRestaurant(…)= withContext(…){\n    …\n    restaurantsDao.getAll()\n}\n```", "```kt\n    class GetRestaurantsUseCase {\n        private val repository: RestaurantsRepository = \n            RestaurantsRepository()\n        suspend operator fun invoke(): List<Restaurant> {\n            return repository.getAllRestaurants()\n                            .sortedBy { it.title }\n        }\n    }\n    ```", "```kt\nval useCase = GetRestaurantsUseCase()\nval result = useCase()\n```", "```kt\n    suspend fun getAllRestaurants(): List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            try { … } catch (e: Exception) {…}\n            return@withContext restaurantsDao.getAll()\n        }\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n      private val repository = RestaurantsRepository()\n      private val getRestaurantsUseCase = GetRestaurantsUseCase()\n      […]\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getRestaurantsUseCase()\n            _state.value = _state.value.copy(\n                restaurants = restaurants, […])\n        }\n    }\n    ```", "```kt\nsuspend fun toggleFavoriteRestaurant(\n    id: Int,\n    oldValue: Boolean\n) =\n    withContext(Dispatchers.IO) {\n        restaurantsDao.update(\n            PartialRestaurant(\n                id = id,\n                isFavorite = !oldValue\n            )\n        )\n        restaurantsDao.getAll()\n    }\n```", "```kt\n    suspend fun toggleFavoriteRestaurant(id: Int, value: Boolean)=\n        withContext(Dispatchers.IO) {\n            restaurantsDao.update(\n               PartialRestaurant(id = id, isFavorite = value)\n            )\n            restaurantsDao.getAll()\n        }\n    ```", "```kt\n    class ToggleRestaurantUseCase {\n        private val repository: RestaurantsRepository =\n            RestaurantsRepository()\n        suspend operator fun invoke(\n            id: Int,\n            oldValue: Boolean\n        ): List<Restaurant> {\n            val newFav = oldValue.not()\n            return repository\n                .toggleFavoriteRestaurant(id, newFav)\n        }\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        private val getRestaurantsUseCase =\n    GetRestaurantsUseCase()\n        private val toggleRestaurantsUseCase = ToggleRestaurantUseCase()\n        […]\n    }\n    ```", "```kt\n    fun toggleFavorite(id: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) {\n            val updatedRestaurants = \n                toggleRestaurantsUseCase(id, oldValue)\n            _state.value = _state.value.copy(…)\n        }\n    }\n    ```", "```kt\nsuspend fun toggleFavoriteRestaurant(…)= withContext(…) {\n    restaurantsDao.update(\n        PartialRestaurant(id = id, isFavorite = value)\n    )\n    restaurantsDao.getAll()\n}\n```", "```kt\n    suspend fun toggleFavoriteRestaurant(…)= withContext(…) {\n        restaurantsDao.update(\n            PartialRestaurant(id = id, isFavorite = value)\n        )\n    }\n    ```", "```kt\n    class ToggleRestaurantUseCase {\n        private val repository: … = RestaurantsRepository()\n        suspend operator fun invoke(…): List<Restaurant> {\n            val newFav = oldValue.not()\n            repository.toggleFavoriteRestaurant(id, newFav)\n            return GetRestaurantsUseCase().invoke()\n        }\n    }\n    ```", "```kt\n    suspend fun getRestaurants() : List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            return@withContext restaurantsDao.getAll()\n        }\n    }\n    ```", "```kt\n    class GetSortedRestaurantsUseCase {\n        private val repository: RestaurantsRepository = \n            RestaurantsRepository()\n        suspend operator fun invoke(): List<Restaurant> {\n            return repository.getRestaurants()\n                .sortedBy { it.title }\n        }\n    }\n    ```", "```kt\n    class ToggleRestaurantUseCase {\n        private val repository: … = RestaurantsRepository()\n        private val getSortedRestaurantsUseCase =\n     GetSortedRestaurantsUseCase()\n        suspend operator fun invoke(…): List<Restaurant> {\n            val newFav = oldValue.not()\n            repository.toggleFavoriteRestaurant(id, newFav)\n            return getSortedRestaurantsUseCase()\n        }\n    }\n    ```", "```kt\n    suspend fun getAllRestaurants() {\n        return withContext(Dispatchers.IO) {\n            try { … } catch (e: Exception) { … }\n        }\n    }\n    ```", "```kt\n    suspend fun loadRestaurants() {\n        return withContext(Dispatchers.IO) {\n            try { … } catch (e: Exception) { … }\n        }\n    }\n    ```", "```kt\n    class GetRestaurantsUseCase {\n        private val repository: … = RestaurantsRepository()\n        private val getSortedRestaurantsUseCase = \n            GetSortedRestaurantsUseCase()\n        suspend operator fun invoke(): List<Restaurant> {\n            repository.loadRestaurants()\n            return getSortedRestaurantsUseCase()\n        }\n    }\n    ```", "```kt\n    class GetInitialRestaurantsUseCase {\n        private val repository: … = RestaurantsRepository()\n        private val getSortedRestaurantsUseCase = \n            GetSortedRestaurantsUseCase()\n        suspend operator fun invoke(): List<Restaurant> {...}\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n      private val repository = RestaurantsRepository()\n      private val getRestaurantsUseCase = \n          GetInitialRestaurantsUseCase()\n      …\n    }\n    ```", "```kt\nimport androidx.room.ColumnInfo\n      …\nimport com.google.gson.annotations.SerializedName\n@Entity(tableName = \"restaurants\")\ndata class Restaurant(\n    @PrimaryKey()\n    @ColumnInfo(name = \"r_id\")\n    @SerializedName(\"r_id\")\n    val id: Int,\n    @ColumnInfo(name = \"r_title\")\n    @SerializedName(\"r_title\")\n    val title: String,\n      …\n)\n```", "```kt\n    data class RemoteRestaurant(\n        @SerializedName(\"r_id\")\n        val id: Int,\n        @SerializedName(\"r_title\")\n        val title: String,\n        @SerializedName(\"r_description\")\n        val description: String)\n    ```", "```kt\n    @Entity(tableName = \"restaurants\")\n    data class LocalRestaurant(\n        @PrimaryKey()\n        @ColumnInfo(name = \"r_id\")\n        val id: Int,\n        @ColumnInfo(name = \"r_title\")\n        val title: String,\n        @ColumnInfo(name = \"r_description\")\n        val description: String,\n        @ColumnInfo(name = \"is_favorite\")\n        val isFavorite: Boolean = false)\n    ```", "```kt\n    data class Restaurant(\n        val id: Int,\n        val title: String,\n        val description: String,\n        val isFavorite: Boolean = false)\n    ```", "```kt\n    @Database(\n        entities = [LocalRestaurant::class],\n        version = 3,\n        exportSchema = false)\n    abstract class RestaurantsDb : RoomDatabase() {\n        abstract val dao: RestaurantsDao\n        …\n    }\n    ```", "```kt\n    @Entity\n    class PartialLocalRestaurant(\n    @ColumnInfo(name = \"r_id\")\n    val id: Int,\n    @ColumnInfo(name = \"is_favorite\")\n    val isFavorite: Boolean)\n    ```", "```kt\n    @Dao\n    interface RestaurantsDao {\n        @Query(\"SELECT * FROM restaurants\")\n        suspend fun getAll(): List<LocalRestaurant>\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        suspend fun addAll(restaurants: \n            List<LocalRestaurant>)\n        @Update(entity = LocalRestaurant::class)\n        suspend fun update(partialRestaurant: \n           PartialLocalRestaurant)\n        @Update(entity = LocalRestaurant::class)\n        suspend fun updateAll(partialRestaurants: \n            List<PartialLocalRestaurant>)\n        @Query(\"SELECT * FROM restaurants WHERE \n            is_favorite = 1\")\n        suspend fun getAllFavorited(): List<LocalRestaurant>\n    }\n    ```", "```kt\n    suspend fun toggleFavoriteRestaurant(\n          …\n    ) = withContext(Dispatchers.IO) {\n        restaurantsDao.update(\n          PartialLocalRestaurant(id = id, isFavorite = value)\n        )\n    }\n    ```", "```kt\n    suspend fun getRestaurants() : List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            return@withContext restaurantsDao.getAll().map {\n                Restaurant(it.id, it.title, \n                    it.description, it.isFavorite)\n            }\n        }\n    }\n    ```", "```kt\n    interface RestaurantsApiService {\n       @GET(\"restaurants.json\")\n        suspend fun getRestaurants(): List<RemoteRestaurant>\n       @GET(\"restaurants.json?orderBy=\\\"r_id\\\"\")\n        suspend fun getRestaurant(…):  \n            Map<String, RemoteRestaurant>\n    }\n    ```", "```kt\n    private suspend fun refreshCache() {\n        val remoteRestaurants = restInterface\n            .getRestaurants()\n        val favoriteRestaurants = restaurantsDao\n            .getAllFavorited()\n        restaurantsDao.addAll(remoteRestaurants.map {\n            LocalRestaurant(\n                it.id,\n                it.title,\n                it.description,\n                false\n            )\n        })\n        restaurantsDao.updateAll(\n            favoriteRestaurants.map {\n                PartialLocalRestaurant(\n                    id = it.id,\n                    isFavorite = true\n                )\n            })\n    }\n    ```", "```kt\n    private suspend fun getRemoteRestaurant(id: Int): Restaurant {\n        return withContext(Dispatchers.IO) {\n            val response =  restInterface.getRestaurant(id)\n            return@withContext response.values.first().let {\n                Restaurant(\n                    id = it.id, \n                    title = it.title, \n                    description = it.description\n                )\n            }\n        }\n    }\n    ```", "```kt\n<manifest […]>\n    […]\n    <application\n        […]\n        <activity\n            android:name=\".restaurants.presentation.\n                MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.RestaurantsApp.\n                NoActionBar\">\n            <intent-filter>\n                […]\n            </intent-filter>\n            <intent-filter>\n                […]\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n```", "```kt\n@Composable\nfun RestaurantsScreen(onItemClick: (id: Int) -> Unit) {\n    val viewModel: RestaurantsViewModel = viewModel()\n    val state = viewModel.state.value\n    Box(…) { … }\n}\n```", "```kt\n    @Composable\n    fun RestaurantsScreen(\n        state: RestaurantsScreenState,\n        onItemClick: (id: Int) -> Unit,\n        onFavoriteClick: (id: Int, oldValue: Boolean) -> Unit\n    ) {\n        Box(…) {\n            LazyColumn(…) {\n                items(state.restaurants) { restaurant ->\n                    RestaurantItem(\n                        restaurant,\n                        onFavoriteClick = { id, oldValue ->\n                            onFavoriteClick(id, oldValue)\n                        },\n                        onItemClick = { id ->\n                            onItemClick(id)\n                        }\n                    )\n                }\n            }\n            […]\n        }\n    }\n    ```", "```kt\n    @Preview(showBackground = true)\n    @Composable\n    fun DefaultPreview() {\n        RestaurantsAppTheme {\n            RestaurantsScreen(\n                RestaurantsScreenState(listOf(), true),\n                {},\n                { _, _ -> }\n            )\n        }\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantsApp() {\n        val navController = rememberNavController()\n        NavHost(navController, startDestination = \n            \"restaurants\") {\n            composable(route = \"restaurants\") {\n                val viewModel: RestaurantsViewModel = \n                    viewModel()\n                RestaurantsScreen(\n                    state = viewModel.state.value,\n                    onItemClick = { id ->\n                        navController\n                            .navigate(\"restaurants/$id\")\n                    },\n                    onFavoriteClick = { id, oldValue ->\n                       viewModel.toggleFavorite(id, oldValue)\n                    })\n            }\n            composable(\n                route = \"restaurants/{restaurant_id}\",\n                […]) { RestaurantDetailsScreen() }\n            }\n    ```"]