["```swift\nthis.View.AddSubview(this.subView);\n```", "```swift\n    UIButton buttonChangeColor;\n    private void CreateButton ()\n    {\n      RectangleF viewFrame = this.subView.Frame;\n      RectangleF buttonFrame = new RectangleF (10f, viewFrame.Bottom - 200f, viewFrame.Width - 20f, 50f);\n      this.buttonChangeColor = UIButton.FromType (UIButtonType.System);\n      this.buttonChangeColor.Frame = buttonFrame;\n      this.buttonChangeColor.SetTitle (\"Tap to change view color\", UIControlState.Normal);\n      this.buttonChangeColor.SetTitle (\"Changing color...\", UIControlState.Highlighted);\n      this.buttonChangeColor.TouchUpInside += this.ButtonChangeColor_TouchUpInside;\n      this.subView.AddSubview (this.buttonChangeColor);\n    }\n    bool isYellow;\n    private void ButtonChangeColor_TouchUpInside (object sender, EventArgs e)\n    {\n      if (this.isYellow) {\n        this.subView.BackgroundColor = UIColor.LightGray;\n        this.isYellow = false;\n      }  else {\n        this.subView.BackgroundColor = UIColor.Yellow;\n        this.isYellow = true;\n      }\n    }\n    ```", "```swift\n    this.CreateButton ();\n    ```", "```swift\n// A button to change the view's background color\nUIButton buttonChangeColor;\n```", "```swift\n// Create the appropriate rectangles for the button's frame\nRectangleF viewFrame = this.subView.Frame;\nRectangleF buttonFrame = new RectangleF (10f, viewFrame.Bottom - 200f, viewFrame.Width - 20f, 50f);\n```", "```swift\n// Create the button.\nthis.buttonChangeColor = UIButton.FromType (UIButtonType.System);\nthis.buttonChangeColor.Frame = buttonFrame;\n```", "```swift\n// Set the button's titles\nthis.buttonChangeColor.SetTitle (\"Tap to change view color\", UIControlState.Normal);\nthis.buttonChangeColor.SetTitle (\"Changing color...\", UIControlState.Highlighted);\n```", "```swift\nthis.buttonChangeColor.TouchUpInside += this.ButtonChangeColor_TouchUpInside;\n// Display the button\nthis.subView.AddSubview (this.buttonChangeColor);\n```", "```swift\nif (this.isYellow) {\n  this.subView.BackgroundColor = UIColor.DarkGray;\n  this.isYellow = false;\n} else {\n  this.subView.BackgroundColor = UIColor.Yellow;\n  this.isYellow = true;\n}\n```", "```swift\n    public override ViewDidLoad()\n    {\n      base.ViewDidLoad();\n      this.imageDisplay.ContentMode = UIViewContentMode.ScaleAspectFit;\n      this.imageDisplay.Image = UIImage.FromFile(\"Toroni.jpg\");\n    }\n    ```", "```swift\nthis.imageDisplay.Image = UIImage.FromFile(\"Toroni.jpg\");\n```", "```swift\nthis.imageDisplay = UIImage.FromBundle(\"Default\");\n```", "```swift\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.buttonFinished.Enabled = false;\n      this.buttonFinished.TouchUpInside += (sender, e) => {\n\n        this.myTextView.ResignFirstResponder();\n\n      } ;\n      this.myTextView.Delegate = new MyTextViewDelegate(this);\n    }\n    ```", "```swift\n    private class MyTextViewDelegate : UITextViewDelegate\n    {\n\n      public MyTextViewDelegate (TextViewAppViewController parentController)\n      {\n        this.parentController = parentController;\n      }\n      private TextViewAppViewController parentController;\n\n      public override void EditingStarted (UITextView textView)\n      {\n        this.parentController.buttonFinished.Enabled = true;\n      }\n\n      public override void EditingEnded (UITextView textView)\n      {\n        this.parentController.buttonFinished.Enabled = false;\n      }\n\n      public override void Changed (UITextView textView)\n      {\n        Console.WriteLine (\"Text changed!\");\n      }\n\n    }\n    ```", "```swift\nprivate class MyTextViewDelegate : UITextViewDelegate\n{\n  public MyTextViewDelegate (TextViewAppViewController parentController)\n  {this.parentController = parentController;}\n  private TextViewAppViewController parentController;\n```", "```swift\npublic override void EditingStarted (UITextView textView)\n{\n  this.parentController.buttonFinished.Enabled = true;\n}\n\npublic override void EditingEnded (UITextView textView)\n{\n  this.parentController.buttonFinished.Enabled = false;\n}\n\npublic override void Changed (UITextViewtextViewUITextView textView)\n{\n  Console.WriteLine (\"Text changed!\");\n}\n```", "```swift\nthis.buttonFinished.TouchUpInside += (sender, e) => {\n  this.myTextView.ResignFirstResponder ();\n};\n```", "```swift\nthis.myTextView.Delegate = new MyTextViewDelegate (this);\n```", "```swift\n    private NSObject kbdWillShow, kbdDidHide;\n    public override void ViewDidLoad()\n    {\n\n      base.ViewDidLoad();\n\n      this.emailField.KeyboardType = UIKeyboardType.EmailAddress;\n      this.emailField.ReturnKeyType = UIReturnKeyType.Done;\n\n      this.kbdWillShow = UIKeyboard.Notifications.ObserveWillShow((s, e) => {RectangleF kbdBounds = e.FrameEnd;\n        RectangleF textFrame = this.emailField.Frame;\n          textFrame.Y -= kbdBounds.Height;\n      this.emailField.Frame = textFrame;\n      } );\n      this.kbdDidHide = UIKeyboard.Notifications.ObserveDidHide((s, e) => {\n        RectangleF kbdBounds = e.FrameEnd;\n        RectangleF textFrame = this.emailField.Frame;\n        textFrame.Y += kbdBounds.Height;\n        this.emailField.Frame = textFrame;\n      } );\n\n      this.emailField.ShouldReturn = delegate(UITextField textField) {\n        return textField.ResignFirstResponder ();\n      } ;\n\n    }\n    ```", "```swift\nthis.emailField.KeyboardType = UIKeyboardType.EmailAddress;\nthis.emailField.ReturnKeyType = UIReturnKeyType.Done;\n```", "```swift\n// Add observers for the keyboard\nthis.kbdWillShow = UIKeyboard.Notifications.ObserveWillShow((s, e) => {\n```", "```swift\n// Get the keyboard's bounds\nRectangleF kbdBounds = e.FrameEnd;\n```", "```swift\n// Get the text field's frame\nRectangleF textFrame = this.emailField.Frame;\n```", "```swift\n// Change the y position of the text field frame\ntextFrame.Y -= kbdBounds.Height;\n```", "```swift\nthis.emailField.Frame = textFrame;\n```", "```swift\nthis.emailField.ShouldReturn = delegate(UITextField textField) {\n  return textField.ResignFirstResponder ();\n} ;\n```", "```swift\nNSNotificationCenter.DefaultCenter.RemoveObserver (this.kbdWillShow);\nNSNotificationCenter.DefaultCenter.RemoveObserver (this.kbdDidHide);\n```", "```swift\n    using System.Drawing;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```swift\n    UILabel labelStatus;\n    UIButton buttonStartProgress;\n    UIProgressView progressView;\n    float incrementBy = 0f;\n    ```", "```swift\n    // Initialize the label\n    this.labelStatus = new UILabel (new RectangleF (60f, 60f, 200f, 50f));\n    this.labelStatus.AdjustsFontSizeToFitWidth = true;\n    // Initialize the button\n    this.buttonStartProgress = UIButton.FromType (UIButtonType.System);\n    this.buttonStartProgress.Frame = new RectangleF (60f, 400f, 200f, 40f);\n\n    this.buttonStartProgress.SetTitle (\"Tap to start progress!\", UIControlState.Normal);\n    this.buttonStartProgress.TouchUpInside += delegate {\n      // Disable the button\n      this.buttonStartProgress.Enabled = false;\n      this.progressView.Progress = 0f;\n      // Start a progress\n      Task.Factory.StartNew(this.StartProgress);\n    } ;\n\n    // Initialize the progress view\n    this.progressView = new UIProgressView (new RectangleF (60f, 200f, 200f, 50f));\n\n    // Set the progress view's initial value\n    this.progressView.Progress = 0f;\n\n    // Set the progress increment value\n    // for 10 items\n    this.incrementBy = 1f / 10f;\n\n    this.View.AddSubview(this.labelStatus);\n    this.View.AddSubview(this.buttonStartProgress);\n    this.View.AddSubview(this.progressView);\n    ```", "```swift\n    private void StartProgress ()\n    {\n      float currentProgress = 0f;\n      while (currentProgress < 1f)\n      {\n        Thread.Sleep(1000);\n        this.InvokeOnMainThread(delegate {\n          // Advance the progress\n          this.progressView.Progress += this.incrementBy;\n          currentProgress = this.progressView.Progress;\n          // Set the label text\n          this.labelStatus.Text = string.Format(\"Current value: { 0}\", Math.Round((double)this.progressView.Progress, 2));\n          if (currentProgress >= 1f)\n          {\n            this.labelStatus.Text = \"Progress completed!\";\n            this.buttonStartProgress.Enabled = true;\n          }//end if\n        } );\n      }//end while\n    }\n    ```", "```swift\nthis.progressView.Progress = 0f;\n```", "```swift\nthis.incrementBy = 1f / 10f;\n```", "```swift\nthis.buttonStartProgress.TouchUpInside += delegate {\n  // Disable the button\n  this.buttonStartProgress.Enabled = false;\n  this.progressView.Progress = 0;\n  // Start a progress\n  Task.Factory.StartNew(this.StartProgress);\n};\n```", "```swift\nthis.InvokeOnMainThread(delegate {\n  // Advance the progress\n  this.progressView.Progress += this.incrementBy;\n  currentProgress = this.progressView.Progress;\n  // Set the label text\n  this.labelStatus.Text = string.Format(\"Current value: { 0}\", Math.Round((double)this.progressView.Progress, 2));\n  if (currentProgress >= 1f)\n  {\n    this.labelStatus.Text = \"Progress completed!\";\n    this.buttonStartProgress.Enabled = true;\n  }//end if\n});\n```", "```swift\n    // Image view\n    UIImageView imgView;\n    public override void ViewDidLoad()\n    {\n      base.ViewDidLoad();\n\n      this.imgView = new UIImageView (UIImage.FromFile (\"Kastoria.jpg\"));\n      this.scrollView.ContentSize = this.imgView.Image.Size;\n      this.scrollView.ContentOffset = new PointF (200f, 50f);\n      this.scrollView.PagingEnabled = true;\n      this.scrollView.MinimumZoomScale = 0.25f;\n      this.scrollView.MaximumZoomScale = 2f;\n      this.scrollView.ViewForZoomingInScrollView = delegate(UIScrollView scroll) {\n        return this.imgView;\n      } ;\n      this.scrollView.ZoomScale = 1f;\n\n      this.scrollView.IndicatorStyle = UIScrollViewIndicatorStyle.White;\n      this.scrollView.AddSubview (this.imgView);\n\n    }\n    ```", "```swift\nthis.scrollView.ContentSize = this.imgView.Image.Size;\n```", "```swift\nthis.scrollView.ContentOffset = new PointF (200f, 50f);\n```", "```swift\nthis.scrollView.MinimumZoomScale = 0.25f;\nthis.scrollView.MaximumZoomScale = 2f;\n```", "```swift\nthis.scrollView.ViewForZoomingInScrollView = delegate(UIScrollView scroll) {\n  return this.imgView;\n};\n```", "```swift\nthis.scrollView.ZoomScale = 1f;\n```", "```swift\nthis.scrollView.IndicatorStyle = UIScrollViewIndicatorStyle.White;\n```", "```swift\n    UIImageView page1;\n    UIImageView page2;\n    UIImageView page3;\n    public override void ViewDidLoad()\n    {\n      base.ViewDidLoad();\n      this.scrollView.DecelerationEnded += this.ScrollView_DecelerationEnded;\n      this.pageControl.ValueChanged += this.PageControl_ValueChanged;\n      this.scrollView.Scrolled += delegate {\n        Console.WriteLine (\"Scrolled!\");\n      } ;\n\n      this.scrollView.PagingEnabled = true;\n\n      RectangleF pageFrame = this.scrollView.Frame;\n      this.scrollView.ContentSize = new SizeF (pageFrame.Width * 3, pageFrame.Height);\n\n      this.page1 = new UIImageView (pageFrame);\n     this.page1.ContentMode = UIViewContentMode.ScaleAspectFit;\n      this.page1.Image = UIImage.FromFile (\"Parga01.jpg\");\n\n      pageFrame.X += this.scrollView.Frame.Width;\n      this.page2 = new UIImageView (pageFrame);\n      this.page2.ContentMode = UIViewContentMode.ScaleAspectFit;\n      this.page2.Image = UIImage.FromFile (\"Parga02.jpg\");\n\n      pageFrame.X += this.scrollView.Frame.Width;\n      this.page3 = new UIImageView (pageFrame);\n      this.page3.ContentMode = UIViewContentMode.ScaleAspectFit;\n      this.page3.Image = UIImage.FromFile (\"Parga03.jpg\");\n\n      this.scrollView.AddSubview (this.page1);\n      this.scrollView.AddSubview (this.page2);\n      this.scrollView.AddSubview (this.page3);\n\n    }\n    ```", "```swift\n    private void scrollView_DecelerationEnded (object sender, EventArgs e)\n    {\n      float x1 = this.page1.Frame.X;\n      float x2 = this.page2.Frame.X;\n\n      float x = this.scrollView.ContentOffset.X;\n\n      if (x == x1)\n      {\n        this.pageControl.CurrentPage = 0;\n      }  else if (x == x2)\n      {\n        this.pageControl.CurrentPage = 1;\n      }  else\n      {\n        this.pageControl.CurrentPage = 2;\n\n      }\n\n    }\n\n    private void pageControl_ValueChanged (object sender, EventArgs e)\n    {\n\n      PointF contentOffset = this.scrollView.ContentOffset;\n\n      switch (this.pageControl.CurrentPage)\n      {\n\n        case 0:\n        contentOffset.X = this.page1.Frame.X;\n        this.scrollView.SetContentOffset (contentOffset, true);\n        break;\n\n        case 1:\n        contentOffset.X = this.page2.Frame.X;\n        this.scrollView.SetContentOffset (contentOffset, true);\n        break;\n\n        case 2:\n        contentOffset.X = this.page3.Frame.X;\n        this.scrollView.SetContentOffset (contentOffset, true);\n        break;\n\n        default:\n        // do nothing\n        break;\n      }\n\n    }\n    ```", "```swift\nthis.scrollView.PagingEnabled = true;\n```", "```swift\nthis.page1 = new UIImageView (pageFrame);\n\n// Frame for 2nd page\npageFrame.X += this.scrollView.Frame.Width;\n\n// Frame for 3rd page\npageFrame.X += this.scrollView.Frame.Width;\n```", "```swift\nfloat x = this.scrollView.ContentOffset.X;\nif (x == x1) {\n  // First page\n  this.pageControl.CurrentPage = 0;\n// etc.\n```", "```swift\ncase 0:\n  // Scroll to first page\n  contentOffset.X = this.page1.Frame.X;\n    this.scrollView.SetContentOffset (contentOffset, true);\n  break;\n// etc.\n```", "```swift\n    private void ShowAlert(string title, string message)\n    {\n      // Create the alert\n      UIAlertView alertView = new UIAlertView();\n      alertView.Title = title;\n      alertView.Message = message;\n      // Add buttons\n      alertView.AddButton(\"OK\");\n      alertView.AddButton(\"Cancel\");\n      // Add event handler\n      alertView.Dismissed += (sender, e) => {\n        if (e.ButtonIndex == 0)\n        {\n          this.btnShowAlert.SetTitle(\"OK!\", UIControlState.Normal);\n        }  else\n        {  \n          this.btnShowAlert.SetTitle(\"Cancelled!\", UIControlState.Normal);\n        }//end if else\n      };\n      // Display it\n      alertView.Show();\n    }//end void ShowAlert\n    ```", "```swift\n    this.btnShowAlert.TouchUpInside += (sender, e) => this.ShowAlert(\"Alert Message\", \"Tap OK or Cancel\");\n    ```", "```swift\nalertView.Title = title;\nalertView.Message = message;\n```", "```swift\n// Add buttons\nalertView.AddButton(\"OK\");\nalertView.AddButton(\"Cancel\");\n```", "```swift\n// Add event handler\nalertView.Dismissed += (sender, e) => {\n  if (e.ButtonIndex == 0)\n  {\n    this.btnShowAlert.SetTitle(\"OK!\", UIControlState.Normal);\n  }  else\n  {  \n    this.btnShowAlert.SetTitle(\"Cancelled!\", UIControlState.Normal);\n  }\n};\n```", "```swift\n// Display it\nalertView.Show();\n```", "```swift\n// Get the text that was entered in the second text field\nstring password = alertView.GetTextField(1).Text;\n```", "```swift\nalertView.GetTextField(1).SecureTextEntry = false;\n```", "```swift\n    using System;\n    using MonoTouch.UIKit;\n    using MonoTouch.Foundation;\n    using System.Drawing;\n\n    namespace CustomViewApp\n    {\n      [Register(\"MyView\")]\n      public class MyView : UIView\n      {\n\n        private UILabel labelStatus;\n\n        public MyView (IntPtr handle) : base(handle)\n        {\n          this.Initialize ();\n        }\n\n        public MyView (RectangleF frame) : base(frame)\n        {\n          this.Initialize ();\n        }\n\n        private void Initialize ()\n        {\n\n          this.BackgroundColor = UIColor.LightGray;\n\n          this.labelStatus = new UILabel (new RectangleF (0f, 400f, this.Frame.Width, 60f));\n          this.labelStatus.TextAlignment = UITextAlignment.Center;\n          this.labelStatus.BackgroundColor = UIColor.DarkGray;\n          this.AddSubview (this.labelStatus);\n\n        }\n\n        public override void TouchesMoved (NSSet touches, UIEventevtUIEvent evt)\n        {\n          base.TouchesMoved (touches, evt);\n\n          UITouch touch = (UITouch)touches.AnyObject;\n\n          PointF touchLocation = touch.LocationInView (this);\n\n          this.labelStatus.Text = String.Format (\"X: {0} - Y: {1}\", touchLocation.X, touchLocation.Y);\n\n        }\n      }\n    }\n    ```", "```swift\n[Register(\"MyView\")]\npublic class MyView : UIView\n```", "```swift\npublic MyView (IntPtr handle) : base(handle) {}\n```", "```swift\npublic MyView (RectangleF frame) : base(frame) {}\n```", "```swift\nUITouch touch = (UITouch)touches.AnyObject;\n```", "```swift\nPointF touchLocation = touch.LocationInView (this);\n```", "```swift\nMyView myView = new MyView(new RectangleF(0f, 0f, 320f, 480f));\n```", "```swift\n    UILabel.Appearance.BackgroundColor = UIColor.Blue;\n    var labelStyle = UILabel.AppearanceWhenContainedIn(typeof(MyView));\n    labelStyle.BackgroundColor = UIColor.Green;\n    ```", "```swift\nUILabel.Appearance.BackgroundColor = UIColor.Blue;\n```", "```swift\nvar labelStyle = UILabel.AppearanceWhenContainedIn(typeof(MyView));\n```", "```swift\nlabelStyle.BackgroundColor = UIColor.Green;\n```", "```swift\nvar labelStyle = UILabel.AppearanceWhenContainedIn(typeof(AnotherView), typeof(MyView));\n```", "```swift\n    MyView.Appearance.BackgroundColor = UIColor.Yellow;\n    ```", "```swift\nMyView.GetAppearance<MyView>().BackgroundColor = UIColor.Yellow;\n// We can also call GetAppearance on the base class:\n//UIView.GetAppearance<MyView>().BackgroundColor = UIColor.Yellow;\n```"]