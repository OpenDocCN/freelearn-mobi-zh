["```\nstruct RestaurantAPIManager {\n```", "```\nstatic func loadJSON(file name:String) -> [[String:AnyObject]] {\n```", "```\nvar items = [[String: AnyObject]]()\n```", "```\nguard let path = Bundle.main.path(forResource: name, ofType: \"json\"), let data = NSData(contentsOfFile: path) else {\n   return [[:]]\n}\n```", "```\ndo {\nlet json = try JSONSerialization.jsonObject(with: data as Data, options: .allowFragments) as AnyObject\nif let restaurants = json[\"restaurants\"] as? [[String: AnyObject]] {\n      items = restaurants as [[String : AnyObject]]\n  }\n}\n```", "```\ncatch {\n  print(\"error serializing JSON: \\(error)\")\n  items = [[:]]\n}\n```", "```\nreturn items\n```", "```\nvar selectedCity:String?\n```", "```\n//MARK: UITableViewDelegate\nextension LocationViewController: UITableViewDelegate {\n}\n```", "```\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath:IndexPath) {\n   if let cell = tableView.cellForRow(at: indexPath) {\n          cell.accessoryType = .checkmark\n          selectedCity = manager.locationItem(at:indexPath)\n          tableView.reloadData()\n   }\n}\n```", "```\nimport UIKit\nclass ExploreHeaderView: UICollectionReusableView {\n    @IBOutlet weak var lblLocation:UILabel!\n}\n```", "```\nvar selectedCity:String?\nvar headerView: ExploreHeaderView!\n```", "```\n@IBAction func unwindLocationDone(segue:UIStoryboardSegue) {\n    if let viewController = segue.source as? LocationViewController {\n        selectedCity = viewController.selectedCity\n        if let location = selectedCity {\n            headerView.lblLocation.text = location\n        }\n    }\n}\n```", "```\nfunc collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {\n    let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: \"header\", for: indexPath)\n    headerView = header as! LocationHeaderView\n    return headerView\n}\n```", "```\ncase restaurantList\ncase locationList\n```", "```\nfunc findLocation(by name:String) -> (isFound:Bool, position:Int) {\n                guard let index = arrLocations.index(of: name) else \n                { return (isFound:false, position:0) }\n                return (isFound:true, position:index)\n}\n```", "```\nset(cell:at)\nif let city = selectedCity\n```", "```\nlet data = manager.findLocation(by: city)\n```", "```\nif data.isFound {\n   if indexPath.row == data.position {\n          cell.accessoryType = .checkmark\n   }\n   else { cell.accessoryType = .none }\n}\n```", "```\nelse { cell.accessoryType = .none }\n```", "```\nset(selected: cell, at: indexPath)\n```", "```\nfunc showLocationList(segue:UIStoryboardSegue) {\n   guard let navController = segue.destination as? UINavigationController,\n          let viewController = navController.topViewController as? LocationViewController else {\n                 return\n   }\n   guard let city = selectedCity else { return }\n   viewController.selectedCity = city\n} \n```", "```\nvar selectedRestaurant:RestaurantItem?\nvar selectedCity:LocationItem?\nvar selectedType:String? \n```", "```\noverride func viewDidAppear(_ animated: Bool) {\n  super.viewDidAppear(animated)\n  print(\"selected city \\(selectedCity as Any)\")\n  print(\"selected type \\(selectedType as Any)\")\n} \n```", "```\nfunc showRestaurantListing(segue:UIStoryboardSegue) {\n   if let viewController = segue.destination as? RestaurantViewController, let city = selectedCity,\n          let index = collectionView.indexPathsForSelectedItems?.first, let type = manager.explore(at: index).name {\n          viewController.selectedType = type\n          viewController.selectedCity = city\n   }\n} \n```", "```\nfunc showAlert() {\n                let alertController = UIAlertController(title: \"Location Needed\", message:\"Please select a location.\", preferredStyle: .alert)\n                let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n                alertController.addAction(okAction)\n                present(alertController, animated: true, completion: nil)\n} \n```", "```\noverride func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool {\n    if identifier == Segue.restaurantList.rawValue {\n        guard selectedCity != nil else {\n            showAlert()\n            return false\n        }\n        return true\n    }\n    return true\n} \n```", "```\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?){\n    switch segue.identifier! {\n        case Segue.locationList.rawValue:\n            showLocationList(segue: segue)\n        case Segue.restaurantList.rawValue:\n            showRestaurantListing(segue: segue)\n        default:\n        print(\"Segue not added\")\n    }\n}\n```", "```\noverride func viewDidAppear(_ animated: Bool) {\n   guard let location = selectedCity?.city, let type = selectedType else {\n          return\n   }\n\n   print(\"type \\(type)\")\n   print(RestaurantAPIManager.loadJSON(file: location))\n}\n```", "```\nimport UIKit\nclass RestaurantCell: UICollectionViewCell {\n} \n```", "```\n@IBOutlet weak var lblTitle:UILabel!\n@IBOutlet weak var lblCuisine:UILabel!\n@IBOutlet weak var imgRestaurant: UIImageView! \n```", "```\nclass RestaurantItem: NSObject, MKAnnotation, Decodable {\n  var name: String?\n  var cuisines:[String] = []\n  var latitude: Double?\n  var longitude:Double?\n  var address:String?\n  var postalCode:String?\n  var state:String?\n  var imageURL:String?\n\n  var title: String? {\n    return name\n  }\n\n  var subtitle: String? {\n    if cuisines.isEmpty { return \"\" }\n    else if cuisines.count == 1 { return cuisines.first }\n    else { return cuisines.joined(separator: \", \") }\n  }\n\n  var coordinate: CLLocationCoordinate2D {\n    guard let lat = latitude, let long = longitude else {\n      return CLLocationCoordinate2D() }\n    return CLLocationCoordinate2D(latitude: lat, longitude: long )\n  }\n}\n```", "```\nclass RestaurantDataManager {\n}\n```", "```\nprivate var items:[RestaurantItem] = []\n```", "```\nfunc fetch(by location:String, withFilter:String=\"All\",  completionHandler:() -> Swift.Void) {\n   var restaurants:[RestaurantItem] = []\n   for restaurant in RestaurantAPIManager.loadJSON(file: location) {\n          restaurants.append(RestaurantItem(dict: restaurant))\n   }\n\n   if withFilter != \"All\" {\n          items = restaurants.filter({ $0.cuisines.contains(withFilter) })\n   }\n   else { items = restaurants }\n   completionHandler()\n}\nfunc numberOfItems() -> Int {\n   return items.count\n}\n\nfunc restaurantItem(at index:IndexPath) -> RestaurantItem {\n   return items[index.item]\n}\n```", "```\nprivate var items:[RestaurantItem] = []\n```", "```\nfetch(location:withFilter:completionHandler)\n```", "```\nwithFilter:String=\"All\" \n```", "```\nfor restaurant in RestaurantAPIManager.loadJSON(file: location) {\n   restaurants.append(RestaurantItem(dict: restaurant))\n} \n```", "```\nif withFilter != \"All\" {\n   items = restaurants.filter({ $0.cuisines.contains(withFilter) })\n}\nelse { items = restaurants }\n```", "```\ncompletionHandler()\n```", "```\nnumberOfItems()\n```", "```\nrestaurantItem(at:)  \n```", "```\nclass NoDataView: UIView {\n    var view: UIView!\n    @IBOutlet var lblTitle: UILabel!\n    @IBOutlet var lblDesc: UILabel!\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)!\n        setupView()\n    }\n\n    func loadViewFromNib() -> UIView {\n        let nib = UINib(nibName: \"NoDataView\", bundle: Bundle.main)\n        let view = nib.instantiate(withOwner: self, options: nil) [0] as! UIView\n        return view\n    }\n\n    func setupView() {\n        view = loadViewFromNib()\n        view.frame = bounds\n        view.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        addSubview(view)\n    }\n\n    func set(title: String) {\n        lblTitle.text = title\n    }\n\n    func set(desc: String) {\n        lblDesc.text = desc\n    }\n}\n```", "```\nvar manager = RestaurantDataManager()\n```", "```\nfunc createData() {\n    guard let location = selectedCity?.city, let filter = selectedType else { return }\n    manager.fetch(by: location, with: filter) { _ in\n        if manager.numberOfItems() > 0 {\n            collectionView.backgroundView = nil\n        }\n\n        else {\n            let view = NoDataView(frame: CGRect(x: 0, y: 0, width: collectionView.frame.width, height: collectionView.frame.height))\n            view.set(title: \"Restaurants\")\n            view.set(desc: \"No restaurants found.\")\n            collectionView.backgroundView = view\n        }\n\n        collectionView.reloadData()\n    }\n}\n```", "```\nfunc collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"restaurantCell\", for: indexPath) as! RestaurantCell\n    let item = manager.restaurantItem(at: indexPath)\n    if let name = item.name { cell.lblTitle.text = name }\n    if let cuisine = item.subtitle { cell.lblCuisine.text = cuisine }\n    if let image = item.imageURL {\n        if let url = URL(string: image) {\n            let data = try? Data(contentsOf: url)\n            if let imageData = data {\n                DispatchQueue.main.async {\n                    cell.imgRestaurant.image = UIImage(data: imageData)\n                }\n            }\n        }\n    }\n    return cell\n}\n```", "```\nfunc collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n    return manager.numberOfItems()\n}\n```", "```\nfunc setupTitle() {\n    navigationController?.setNavigationBarHidden(false, animated: false)\n    if let city = selectedCity?.city, let state = selectedCity?.state {\n        title = \"\\(city.uppercased()), \\(state.uppercased())\"\n    }\n    navigationController?.navigationBar.prefersLargeTitles = true\n}\n```"]