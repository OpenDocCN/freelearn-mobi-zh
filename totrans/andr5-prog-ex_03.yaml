- en: Chapter 3. Activities and Fragments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。活动和片段
- en: There are very few useful apps that run on just a single screen, or just use
    a single Activity; and we need a way to switch from one Activity to another and
    to pass information from one to another. Generally speaking, each new Activity
    will require its own layout file, but this not always the case; there are times
    when we want the same layout but with different data and resources. Later in this
    book, we will be building an app that acts as a tourist guide for some of the
    world's most famous and visited sites. We will start this journey by building
    a simple example for just one site that will include an introduction to the `CardView`
    widget introduced in Android 5, and learn how to start one Activity from another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在仅使用单个屏幕或仅使用单个Activity的应用程序中，有用的应用程序非常少；我们需要一种方法来在各个Activity之间切换，并将信息从一个传递到另一个。一般来说，每个新的Activity都需要自己的布局文件，但这并不总是如此；有时我们想要相同的布局，但数据资源不同。在本书的后面部分，我们将构建一个应用程序，作为世界上一些最著名和最受欢迎的旅游景点的导游。我们将从这个旅程开始，构建一个仅针对一个地点的简单示例，其中包括对Android
    5中引入的`CardView`小部件的介绍，并学习如何从一个Activity启动另一个Activity。
- en: We will then take a look at Fragments which allow us to construct layouts in
    a modular fashion. Fragments behave a little like mini Activities and can be added
    to Activities dynamically at runtime or can be defined in a layout file like other
    ViewGroups. We will build a small timekeeping app that uses Fragments to switch
    between a digital and an analog clock face.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将查看片段，它允许我们以模块化的方式构建布局。片段的行为有点像迷你Activity，可以在运行时动态地添加到Activity中，或者可以像其他ViewGroup一样在布局文件中定义。我们将构建一个小型计时应用程序，使用片段在数字时钟面和模拟时钟面之间切换。
- en: Next, we will include an Options menu in our app to allow the user to change
    time-and locale-related settings on their device. We will add action icons to
    the menu, so that it can be displayed on what was, prior to Lollipop, called the
    Action Bar. Finally, we will take advantage of the Action Bar's replacement, the
    Toolbar, customizing it so that it can be placed anywhere on a screen and contain
    far more functionality than its predecessor.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在我们的应用程序中包含一个选项菜单，允许用户更改设备上的时间和区域相关设置。我们将在菜单中添加操作图标，以便它可以在Lollipop之前称为操作栏的地方显示。最后，我们将利用操作栏的替代品，即工具栏，对其进行自定义，以便它可以放置在屏幕上的任何位置，并包含比其前身更多的功能。
- en: 'In this chapter, we will:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Add a `CardView`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`CardView`
- en: Give the `CardView` a layout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`CardView`设置布局
- en: Add an image
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加图片
- en: Create a second Activity and Layout
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建第二个Activity和布局
- en: Use XML to define `onClick` behavior
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XML定义`onClick`行为
- en: Program the two activities to work together
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程两个Activity协同工作
- en: Use Fragments to dynamically change layouts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用片段动态更改布局
- en: Explore the Translations Editor
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索翻译编辑器
- en: Add static fragments with XML
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XML添加静态片段
- en: Include an Options menu
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含一个选项菜单
- en: Access user settings with intents
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用意图访问用户设置
- en: Add menu icons to the action bar
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将菜单图标添加到操作栏
- en: Replace the action bar with a custom toolbar
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用自定义工具栏替换操作栏
- en: Adding a CardView widget
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加CardView小部件
- en: Unlike the views we have already met, `CardView` does not come included in the
    standard SDK libraries but rather as part of the (Lollipop specific) V7 Support
    Libraries and not available from the graphic layout design mode; therefore, it
    requires a little more work to apply one in a layout.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前遇到的视图不同，`CardView`并不包含在标准SDK库中，而是作为（Lollipop特定的）V7支持库的一部分，并且不可从图形布局设计模式中获取；因此，在布局中应用它需要更多的工作。
- en: Start a new Android project.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的Android项目。
- en: Set the **Application name:** to `Stonehenge Guide`, although you can call it
    anything you like.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**应用程序名称**为`Stonehenge Guide`，尽管你可以称它为任何你喜欢的名字。
- en: Select the **Phone and Tablet** form factor and **Blank Activity** from the
    next page.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下一页选择**手机和平板**的设备类型和**空白Activity**。
- en: Leave the other options as they are and wait for the project to build.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他选项不变，等待项目构建。
- en: Open the `activity_main.xml` file in design view and delete the `"Hello World!"`
    text view that was automatically generated when we created the project.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设计视图中打开`activity_main.xml`文件，并删除我们在创建项目时自动生成的`"Hello World!"`文本视图。
- en: For completeness, also delete the `"Hello World!"` string resource in the `res/value/strings.xml`
    file.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完整性，还请在`res/value/strings.xml`文件中删除`"Hello World!"`字符串资源。
- en: Edit the `styles.xml` (v21) file and create a `colors.xml` file to implement
    a Material Design color scheme, as we did in the last chapter.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `styles.xml` (v21) 文件并创建一个 `colors.xml` 文件以实现Material Design颜色方案，就像我们在上一章中所做的那样。
- en: 'Open the `Gradle Scripts/build.gradle (Module: app)` file from the project
    explorer:![Adding a CardView widget](img/B04321_03_01.jpg)'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从项目资源管理器打开 `Gradle Scripts/build.gradle (Module: app)` 文件：![添加CardView小部件](img/B04321_03_01.jpg)'
- en: 'Edit the `dependencies` section to match the following snippet:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `dependencies` 部分以匹配以下片段：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Synchronize the project via the toolbar icon shown here:![Adding a CardView
    widget](img/B04321_03_02.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过此处显示的工具栏图标同步项目：![添加CardView小部件](img/B04321_03_02.jpg)
- en: 'Open `app/res/values/dimens.xml` and add the following three new dimension
    resources:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `app/res/values/dimens.xml` 并添加以下三个新尺寸资源：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the `activity_main.xml` file from `app/res/layout` and add the following
    `CardView` code, so that the finished layout looks like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `app/res/layout` 打开 `activity_main.xml` 文件并添加以下 `CardView` 代码，以便完成的布局看起来像这样：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We created this project in very much the same way we did the last, and it is
    very useful to have initial activity and layout files created for us; this can
    save us a lot of time, when setting up most new projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与上次相同的方式创建了此项目，并且拥有为我们创建的初始活动和布局文件非常有用；这可以在设置大多数新项目时为我们节省大量时间。
- en: As already mentioned, `CardView` is not a part of the standard libraries, which
    is why we had to include it in a build file, and we will have to do the same thing
    when we apply the other new Lollipop widget, `RecyclerView`. It is because of
    this that we had to **Synchronize** the project again, so that the build engine
    knows what libraries to load, in very much the same way that one might import
    a Java library. In this case, we could have just rebuilt the project from the
    **Build** | **Rebuild Project** menu item, but this won't always be the case,
    and it is a good idea to get into the habit of a full synchronization, as this
    not only rebuilds our project but also checks for other possible errors such as
    missing resource definitions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`CardView` 不是标准库的一部分，这就是为什么我们不得不将其包含在构建文件中，当我们应用其他新的Lollipop小部件 `RecyclerView`
    时，我们也将不得不做同样的事情。正因为如此，我们不得不再次**同步**项目，以便构建引擎知道要加载哪些库，这与一个人可能导入Java库的方式非常相似。在这种情况下，我们只需从
    **构建** | **重新构建项目** 菜单项重新构建项目即可，但这并不总是情况，养成全面同步的习惯是个好主意，因为这不仅会重新构建我们的项目，还会检查其他可能的错误，例如缺少资源定义。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, when we added values to the `dimens.xml` file, there is also a `dimens.xml
    (w820dp)` file. This is used when designing layouts for tablets and devices wider
    than 820 pixels, where the margins and padding we set for smaller devices might
    look wrong.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当我们向 `dimens.xml` 文件添加值时，还有一个 `dimens.xml (w820dp)` 文件。当为宽度超过820像素的平板电脑和设备设计布局时，我们会使用此文件，因为我们为较小设备设置的边距和填充可能看起来不正确。
- en: It will be immediately evident from examining the XML code for the `CardView`,
    that it is implemented in quite a different way from the widgets we have dealt
    with so far. Including elements from an external library like this is very straightforward,
    and although we will not be covering it in this book, it is useful to know that
    there are a number of third-party libraries available that include many features
    otherwise unavailable through the standard SDK.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查 `CardView` 的XML代码，可以立即明显看出，它的实现方式与我们迄今为止处理的小部件截然不同。像这样包含外部库中的元素非常简单，尽管我们不会在本书中介绍它，但了解有多个第三方库可用，这些库包含许多在其他情况下通过标准SDK不可用的功能是有用的。
- en: 'The `CardView` comes with two properties exclusive to Lollipop that we have
    not yet come across: `cardCornerRadius` and `cardElevation`. The purpose of these
    properties is obvious, but it is worth noting that the effect of changing them
    does not show in the preview pane and that increasing elevation only affects the
    widget''s shadow but not its size.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardView` 拥有两个仅限于Lollipop的独特属性，我们之前还没有遇到过：`cardCornerRadius` 和 `cardElevation`。这些属性的目的很明显，但值得注意的是，更改它们的效果不会在预览窗格中显示，并且增加高度只会影响小部件的阴影，而不会影响其大小。'
- en: '![Adding a CardView widget](img/B04321_03_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![添加CardView小部件](img/B04321_03_03.jpg)'
- en: Having created a `CardView` as a container, it's now time to provide it with
    some content.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了一个 `CardView` 作为容器之后，现在是为它提供一些内容的时候了。
- en: Adding images and text to the layout
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图像和文本添加到布局中
- en: We will now use our `CardView` to display some basic information, namely a photo,
    a title and a short piece of text. To do this, you will need to locate where the
    studio stores your project files. This directory will be called `AndroidStudioProjects`
    and will more than likely be located in your Home directory or your specified
    save location.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用 `CardView` 来显示一些基本信息，即一张照片、一个标题和一段简短的文本。为此，你需要找到工作室存储你的项目文件的位置。这个目录将被称为
    `AndroidStudioProjects`，并且很可能位于你的主目录或指定的保存位置。
- en: Locate your `AndroidStudioProjects` directory, and open the `\StonehengeGuide\app\src\main\res\drawable`
    folder. This can be done by right-clicking on the drawable in the project explorer
    and selecting **Show in Explorer** from the menu.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位你的 `AndroidStudioProjects` 目录，并打开 `\StonehengeGuide\app\src\main\res\drawable`
    文件夹。这可以通过在项目资源管理器中右键单击 drawable 并从菜单中选择 **Show in Explorer** 来完成。
- en: Find an image and save it in the `drawable` directory. Any image will do; the
    one I use here is called `stonehenge.png` and is roughly 640 x 480 pixels.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个图像并将其保存到 `drawable` 目录中。任何图像都可以；我这里使用的是名为 `stonehenge.png` 的图像，大约是 640 x
    480 像素。
- en: 'Open your `res/values/strings.xml` file and add the following strings:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的 `res/values/strings.xml` 文件并添加以下字符串：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the `res/values/dimens.xml` file and add the following dimensions:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `res/values/dimens.xml` 文件并添加以下尺寸：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to place a `RelativeLayout` inside our `CardView`. This is not possible
    from graphic design mode, so drag a `RelativeLayout` anywhere on the screen and
    then edit the XML code so that the card looks like this:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 `CardView` 内部放置一个 `RelativeLayout`。这在图形设计模式下是不可能的，所以请将一个 `RelativeLayout`
    拖动到屏幕上的任何位置，然后编辑 XML 代码，使卡片看起来像这样：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will populate this `RelativeLayout` with a `FrameLayout` containing
    an `ImageView` and two TextViews, so that it looks like this:![Adding images and
    text to the layout](img/B04321_03_04.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在这个 `RelativeLayout` 中填充一个包含 `ImageView` 和两个 `TextView` 的 `FrameLayout`，使其看起来像这样：![向布局中添加图像和文本](img/B04321_03_04.jpg)
- en: 'The best way to demonstrate the other settings and properties is with the full
    code for the `RelativeLayout` inside the `CardView`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方式是通过 `CardView` 内部 `RelativeLayout` 的完整代码来展示其他设置和属性：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we saw, any image file placed within a `drawable` directory in our project,
    becomes accessible to us in the same way that other resources do. Images placed
    in this folder will be available to our apps, regardless of the device they are
    running on. You will have noticed that there are four other drawable directories,
    such as the `drawable-xxhdpi` folder. Theses are particularly useful when it comes
    to building apps to run on a wide variety of screen densities for two reasons.
    Firstly, they allow us to include high-quality images for users whose devices
    support such screens, and secondly, they can save memory on devices that have
    lower screen densities as Android only loads images that can be supported by each
    particular physical screen.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，任何放置在我们项目中的 `drawable` 目录下的图像文件，都以与其他资源相同的方式对我们变得可访问。放置在这个文件夹中的图像将可供我们的应用程序使用，无论它们运行在哪种设备上。你可能会注意到还有四个其他的
    drawable 目录，例如 `drawable-xxhdpi` 文件夹。这些目录在构建适用于广泛屏幕密度的应用程序时特别有用，原因有两个。首先，它们允许我们为支持此类屏幕的用户包含高质量图像，其次，它们可以在屏幕密度较低的设备上节省内存，因为
    Android 只加载可以由每个特定物理屏幕支持的图像。
- en: Most of the layout features we encountered here we already met in the previous
    chapters and there is not much to explain, other than perhaps the `ImageView`.
    It is worth noting that, as well as using `android:src` to associate our photo
    with the `ImageView`, we could also have used `android:background`, which performs
    a very similar function, although it does not respect the original aspect ratio
    of the image. Having created our Layout, we can now move on to adding another
    Activity.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里遇到的大多数布局功能我们在前面的章节中已经遇到过，没有太多要解释的，除了可能提到的 `ImageView`。值得注意的是，除了使用 `android:src`
    将我们的照片与 `ImageView` 关联外，我们还可以使用 `android:background`，它执行一个非常类似的功能，尽管它不尊重图像的原始宽高比。创建完布局后，我们现在可以继续添加另一个
    Activity。
- en: Creating a second Activity
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第二个 Activity
- en: So far, our app does nothing other than display information. So, next we will
    add some functionality by making it so that, when the user taps the image, a larger
    version of the picture will be shown in an another Activity. As you will see,
    creating new Activities with the Android Studio is very simple.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序除了显示信息之外什么也不做。所以，接下来我们将通过使其在用户点击图像时在另一个 Activity 中显示图片的较大版本来添加一些功能。正如你将看到的，使用
    Android Studio 创建新的 Activity 非常简单。
- en: Right-click the Java node of the project explorer and select **New** | **Activity**
    | **Blank Activity**.![Creating a second Activity](img/B04321_03_06.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目资源管理器中的 Java 节点，选择 **新建** | **活动** | **空白活动**。![创建第二个活动](img/B04321_03_06.jpg)
- en: In the resultant wizard, enter `ImageActivity` as the **Activity Name:**, `activity_image`
    as the **Layout Name:**, `image_menu` as the **Menu Resource Name**, and leave
    **Title:** as it is.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的向导中，将 `ImageActivity` 作为 **活动名称**，将 `activity_image` 作为 **布局名称**，将 `image_menu`
    作为 **菜单资源名称**，并将 **标题** 保持不变。
- en: 'Open the `activity_image.xml` file and place a single `ImageView` inside the
    layout, as below:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_image.xml` 文件，并在布局中放置一个单独的 `ImageView`，如下所示：
- en: '[PRE7]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the following string resource:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下字符串资源：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the `MainActivity` Java file and add the following code under the line
    `setContentView(R.layout.activity_main);` in the `onCreate()` method:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity` 的 Java 文件，并在 `onCreate()` 方法中的 `setContentView(R.layout.activity_main);`
    行下添加以下代码：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the `ImageActivity` Java file and add the following public method to the
    class:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ImageActivity` 的 Java 文件，并将以下公共方法添加到类中：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the app on a device or an emulator.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用。
- en: The new Activity wizard conveniently created both a Java Activity and a Layout
    XML file for us, but it is not always necessary to have a `Layout` file associated
    with every Activity. Often we can use the same layout for many Activities, providing
    each Java Activity has a way of selecting which data to access and display.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 新的活动向导方便地为我们创建了一个 Java 活动和一个布局 XML 文件，但并不是每个活动都需要关联一个 `Layout` 文件。通常，我们可以为许多活动使用相同的布局，前提是每个
    Java 活动都有一种选择要访问和显示的数据的方法。
- en: Without us realizing it, when we created our new Activity, the wizard also modified
    the manifest file to include the new Activity. It is worth taking a look at, because
    there will be times when you will not use the wizard to create an Activity and
    in such cases it will be necessary to modify the `AndroidManifest.xml` file by
    hand.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们没有意识到的情况下，当我们创建新的活动时，向导还修改了清单文件以包含新的活动。这值得一看，因为有时你不会使用向导来创建活动，在这种情况下，将需要手动修改
    `AndroidManifest.xml` 文件。
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our second Activity's Layout file contains just a single view, but there is
    a significant difference from the views we've explored so far, and this is the
    use of the `android:onClick` property. Previously we have used `View.OnClickListener()`
    to control how a widget behaves when clicked on. Declaring this in XML offers
    us an alternative way of doing this and although it lacks some of the flexibility
    of the Java version, it is simple and quick to use. All we had to do was declare
    the method called when the widget is clicked on and then add that method in Java,
    which here we called `returnToMainActivity()`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个活动布局文件只包含一个视图，但与之前探索的视图相比有一个显著的不同，那就是使用了 `android:onClick` 属性。之前我们使用 `View.OnClickListener()`
    来控制小部件被点击时的行为。在 XML 中声明这为我们提供了另一种实现方式，尽管它缺乏 Java 版本的某些灵活性，但它简单且易于使用。我们只需声明当小部件被点击时调用的方法，然后在
    Java 中添加该方法，这里我们称之为 `returnToMainActivity()`。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the previous chapters, we had the user click on a `Button` widget and, although
    this seems like an obvious choice, it is well worth noting that almost any view
    or widget can respond to click events.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们让用户点击一个 `Button` 小部件，尽管这似乎是一个明显的选择，但值得注意的是，几乎任何视图或小部件都可以响应点击事件。
- en: The `StartActivity()` method takes an `Intent` as its argument. This is a vital
    object in any Android app and is worth taking a quick look at, as it is not only
    essential when working with Activities but also services and broadcasts, which
    form the other two main components of most apps.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`StartActivity()` 方法接受一个 `Intent` 作为其参数。这是任何 Android 应用中的一个重要对象，值得快速查看，因为它不仅在与活动一起工作时是必不可少的，而且在处理服务和广播时也是必不可少的，它们是大多数应用的其他两个主要组件。'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Services** are similar to threads and run in the background and **Broadcasts**
    are system-wide messages that can potentially be received and acted upon by any
    app.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务** 类似于线程，在后台运行，而 **广播** 是系统范围内的消息，任何应用都可能接收并对其做出响应。'
- en: '**Intents** are basically descriptions of the operations we want our app to
    perform. They are formed of two parts, and action and the data to be acted upon.
    There are several `Intent()` constructors and here, we used `Intent(String action,
    Uri data)`. Being able to start one Activity from another is useful in many situations
    and here we set it in motion with a method, called by a click. There is of course,
    another familiar input feature that is found in nearly every mobile app, the menu,
    which is what we will look at next.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**意图**基本上是我们希望我们的应用执行的操作的描述。它们由两部分组成，一个动作和要执行的动作的数据。有几个`Intent()`构造函数，这里我们使用了`Intent(String
    action, Uri data)`。从一个活动启动另一个活动在许多情况下都是有用的，这里我们通过一个被点击的方法来启动它。当然，还有一个在几乎所有移动应用中都有的熟悉输入功能，即菜单，这是我们接下来要探讨的内容。'
- en: Applying Fragments
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用片段
- en: Using two or more Activities to create separate screens is a straightforward
    way to include multiple pages in our apps. However, it is not the only method,
    and the system also provides the **Fragment** classes. Fragments are similar to
    ViewGroups; in that they exist as part of an Activity, but the way that they are
    created and destroyed makes them behave more like mini Activities. Unlike Activities,
    we can also have more than one Fragment to a screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两个或多个活动来创建单独的屏幕是包括我们应用中多个页面的直接方法。然而，这并不是唯一的方法，系统还提供了**片段**类。片段类似于ViewGroups；它们作为活动的一部分存在，但它们创建和销毁的方式使它们更像迷你活动。与活动不同，我们也可以在屏幕上拥有多个片段。
- en: There are two ways to deploy Fragments in an Android app. Firstly they can be
    added directly to our layout XML files with the `<fragment>` tag and they can
    also be added and removed dynamically at run time. Although we will now look at
    both these techniques, it is the second, dynamic method that makes Fragments so
    flexible and useful.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用中部署片段有两种方式。首先，它们可以直接添加到我们的布局XML文件中，使用`<fragment>`标签，并且它们也可以在运行时动态添加和删除。虽然我们现在将探讨这两种技术，但第二种，动态方法使片段变得非常灵活和有用。
- en: Along with the usual main Activity layout and code, each Fragment also has an
    XML and a Java component, making the coding a little more complex than when working
    with Activities alone. In the following exercise, we will create a simple app
    that lets us add and replace fragments during runtime.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通常的主活动布局和代码之外，每个片段还有一个XML和一个Java组件，这使得编码比单独使用活动要复杂一些。在接下来的练习中，我们将创建一个简单的应用，允许我们在运行时添加和替换片段。
- en: Start a new Android Studio project.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的Android Studio项目。
- en: Select the **Blank Activity** template (not **Blank Activity with Fragment**),
    call the project `Fragment Example`, or something like that, and open the `activity_main.xml`
    file.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**空白活动**模板（不是**带有片段的空白活动**），将项目命名为`Fragment Example`或类似名称，然后打开`activity_main.xml`文件。
- en: Change from a `RelativeLayout` to a `Linear` one by editing the code directly.
    The editor should change the closing tag to match as you type.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过直接编辑代码将布局从`RelativeLayout`更改为`Linear`布局。编辑器应该根据您的输入更改关闭标签。
- en: 'Set a vertical orientation for the layout with this line:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用此行设置布局的垂直方向：
- en: '[PRE12]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace the `TextView` with these two buttons:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TextView`替换为这两个按钮：
- en: '[PRE13]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Click on the line `android:text="Analog";` an amber quick fix will appear in
    the gutter, like below:![Applying Fragments](img/B04321_03_07.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击行`android:text="Analog";`，在侧边栏会出现一个琥珀色的快速修复，如下所示：![应用片段](img/B04321_03_07.jpg)
- en: Click on it select **Extract string resource**, and in the resultant dialog
    name the string `button_analog_text`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击它选择**提取字符串资源**，在结果对话框中命名字符串为`button_analog_text`。
- en: 'Do the same with the other button, calling it `button_digital_text`, and beneath
    these buttons add this `FrameLayout`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对其他按钮也做同样的操作，将其命名为`button_digital_text`，在这些按钮下方添加这个`FrameLayout`：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Right-click on the `layout` folder in the project explorer and select **New**
    | **New resource file**. Call it `fragment_analog` and give it a `RelativeLayout`
    root element, as follows:![Applying Fragments](img/B04321_03_08.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中的`layout`文件夹上右键单击，选择**新建** | **新建资源文件**。将其命名为`fragment_analog`，并给它一个`RelativeLayout`根元素，如下所示：![应用片段](img/B04321_03_08.jpg)
- en: 'Open the file and insert this `AnalogClock` inside the root element:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件并在根元素内插入这个`AnalogClock`：
- en: '[PRE15]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Select `fragment_analog.xml` in the project explorer and create a copy with
    *Ctrl* + *C* and *Ctrl* + *V*, naming the copy `fragment_digital.xml`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中选择`fragment_analog.xml`，使用*Ctrl* + *C*和*Ctrl* + *V*创建一个副本，并将其命名为`fragment_digital.xml`。
- en: 'In this new file, replace the `AnalogClock` with this `TextClock`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新文件中，将`AnalogClock`替换为这个`TextClock`：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Locate and select the folder that contains your `MainActivity.java` file in
    the project explorer. It will have the same name as your package.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目资源管理器中定位并选择包含你的 `MainActivity.java` 文件文件夹。它将具有与你的包相同的名称。
- en: 'From its context menu, select **New** | **Java Class** and call it `FragmentAnalog`.
    Fill out the class like so:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其上下文菜单中，选择 **新建** | **Java 类** 并将其命名为 `FragmentAnalog`。填写类如下：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Make a copy of this file and call it `FragmentDigital.java`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件复制一份，并将其命名为 `FragmentDigital.java`。
- en: 'Change only the layout reference in the return statement:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅更改返回语句中的布局引用：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the `MainActivity.java` file and change the class declaration so that
    it implements a click listener, like below:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity.java` 文件并更改类声明，使其实现一个点击监听器，如下所示：
- en: '[PRE19]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will generate an error and a red quick fix. Select **Implement methods**
    to add the `onClick()` method to the class.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个错误和一个红色快速修复。选择 **实现方法** 以将 `onClick()` 方法添加到类中。
- en: 'Add these `Button` fields to the class:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些 `Button` 字段添加到类中：
- en: '[PRE20]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Include these four lines at the end of the `onCreate()` method:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate()` 方法的末尾包含以下四行：
- en: '[PRE21]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Complete the `onClick()` method like this:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式完成 `onClick()` 方法：
- en: '[PRE22]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Implement the `replaceFragment()` method like below:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式实现 `replaceFragment()` 方法：
- en: '[PRE23]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can now run the app on a device or an emulator.![Applying Fragments](img/B04321_03_09.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以在设备或模拟器上运行应用。![应用片段](img/B04321_03_09.jpg)
- en: We started this exercise by creating a simple layout, but we also used a handy
    shortcut to avoid having **hardcoded** strings in our layouts. Doing this makes
    creating translated versions of our apps very simple and saves a lot of work when
    creating alternative layouts. It is not necessary for exercises such as those
    in this book to follow this practice, and to save time we will not concern ourselves
    with it further.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个简单的布局开始这个练习，但我们还使用了一个方便的快捷方式来避免在我们的布局中硬编码字符串。这样做使得创建我们应用的翻译版本变得非常简单，并在创建替代布局时节省了大量工作。对于本书中的此类练习，没有必要遵循此做法，为了节省时间，我们不会进一步关注它。
- en: Tip
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Translations Editor can be opened by right-clicking on the `res/values/strings.xml`
    file in the project explorer and selecting **Open Translation Editor (Preview)**.
    This editor makes translating Android apps very straightforward.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在项目资源管理器中右键单击 `res/values/strings.xml` 文件并选择 **打开翻译编辑器（预览**）来打开翻译编辑器。这个编辑器使得翻译
    Android 应用变得非常简单。
- en: We also added an empty **FrameLayout** to serve as the container for our fragments
    we could have used any ViewGroup, but the FrameLayout is the simplest. Fragments
    are like Activities in that they have both an XML and a Java component, and here
    we created two very simple fragments just to see how they can be included and
    replaced dynamically. Fragments can of course contain many widgets and views,
    all of which can be interacted with in the usual ways and controlled with code
    in their respective Java files. Fragments, like Activities, have a life cycle
    and associated callbacks like the `onCreate()` method, and here we used `onCreateView()`,
    which is called when an attempt to inflate the Fragment is made. It is important
    to note that, although Fragments can, and usually do, contain all kinds of code,
    they should not communicate directly with each other. This should be done from
    the Activity containing them.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个空的 **FrameLayout** 作为我们片段的容器，虽然我们可以使用任何 `ViewGroup`，但 FrameLayout 是最简单的。片段就像活动一样，它们既有
    XML 组件也有 Java 组件，在这里我们创建了两个非常简单的片段，只是为了看看它们如何动态地包含和替换。片段当然可以包含许多小部件和视图，所有这些都可以用通常的方式交互，并通过它们各自的
    Java 文件中的代码进行控制。片段，就像活动一样，有一个生命周期和相关的回调，如 `onCreate()` 方法，在这里我们使用了 `onCreateView()`，当尝试填充片段时会被调用。需要注意的是，尽管片段可以，并且通常确实包含所有类型的代码，但它们不应该直接相互通信。这应该通过包含它们的活动来完成。
- en: You will have noticed, that the way we implemented our **OnClickListener** here
    differed from the way we did in the previous chapter, where we implemented it
    directly on the view to be clicked on. Here, the OnClickListener is part of the
    whole class. This method is generally preferred and despite the small amount of
    extra work required to calculate which widget was clicked on, it is usually a
    far tidier solution, especially for very complex and interactive layouts.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我们在这里实现的 **OnClickListener** 与我们在上一章中实现的方式不同，在那里我们直接在要点击的视图中实现它。在这里，OnClickListener
    是整个类的一部分。这种方法通常更受欢迎，尽管计算哪个小部件被点击需要额外的工作，但它通常是一个更整洁的解决方案，特别是对于非常复杂和交互式布局。
- en: '**FragmentManager** and **FragmentTransaction** are the tools we use to directly
    manipulate our Fragments. The first two lines, where these are defined, set the
    transaction in process, although no action is taken until `commit()` is called.
    We called `replace(layout, fragment)` to switch between our displays but we could
    also have used `add()` with the same arguments or `remove()` with only the Fragment.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**FragmentManager**和**FragmentTransaction**是我们用来直接操作Fragment的工具。定义这些工具的前两行设置了正在进行的交易，尽管在调用`commit()`之前没有采取任何行动。我们调用`replace(layout,
    fragment)`在显示之间切换，但也可以使用具有相同参数的`add()`或仅使用Fragment的`remove()`。'
- en: 'The use of `addToBackStack()` is very important as, without it, a user pressing
    the back button on their device will be taken back to the previous Activity and
    not the previous Fragment, which, most of the time, will be what we want. Another
    interesting note is that the manager and transaction commands can be chained,
    and if we wanted we could replace all six lines with just this one:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`addToBackStack()`非常重要，因为没有它，用户在设备上按下返回按钮将返回到上一个Activity而不是上一个Fragment，而这通常是我们想要的。另一个有趣的注意点是，管理器和交易命令可以链式调用，如果我们想的话，我们可以用这一行替换所有六行：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The fade transition was not strictly necessary, as the system usually handles
    transitions between Activities and Fragments intelligently, but here there would
    have been none. There is a lot more that can be done with the FragmentManager
    and FragmentTransaction and the full documentation can be found at [developer.android.com/reference/android/app/FragmentManager.html](http://developer.android.com/reference/android/app/FragmentManager.html)
    and [developer.android.com/reference/android/app/FragmentTransaction.html](http://developer.android.com/reference/android/app/FragmentTransaction.html).
    Next, we need to take a look at another way to apply Fragments in our apps.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 淡入淡出过渡并不是严格必要的，因为系统通常智能地处理Activity和Fragment之间的过渡，但这里将没有过渡。FragmentManager和FragmentTransaction还有很多可以做的，完整的文档可以在[developer.android.com/reference/android/app/FragmentManager.html](http://developer.android.com/reference/android/app/FragmentManager.html)和[developer.android.com/reference/android/app/FragmentTransaction.html](http://developer.android.com/reference/android/app/FragmentTransaction.html)找到。接下来，我们需要看看在应用中应用Fragment的另一种方式。
- en: Adding static Fragments
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加静态Fragment
- en: We cannot complete this introduction to Fragments without looking quickly at
    the other way that they can be implemented, as static layouts defined as `<fragment>`
    tags in XML files. Although these Fragments lack the flexibility of the dynamic
    sort we just encountered, they are nevertheless extremely useful, in particular
    when it comes to complex multi-pane apps where different Fragments perform very
    different functions. Not only does this help keep our code organized, it is also
    far less resource-hungry than a complicated network of nested ViewGroups.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能不快速看一下他们可以实现的另一种方式，即在XML文件中定义为`<fragment>`标签的静态布局。尽管这些Fragment缺乏我们刚刚遇到的动态排序的灵活性，但它们仍然非常有用，尤其是在复杂的多面板应用中，不同的Fragment执行非常不同的功能。这不仅有助于保持我们的代码组织，而且比复杂的嵌套ViewGroups更节省资源。
- en: To best see how this is done, start a project using the **Blank Activity with
    Fragment** template and take a look at the `activity_main.xml` file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要最好地了解如何实现，请使用**带有Fragment的空白Activity**模板启动一个项目，并查看`activity_main.xml`文件。
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This demonstrates how a static Fragment can be included in a standard layout
    file. It shows which layout is to be inflated inside it with `tools:layout` and
    which Java class controls it with `android:name`. Several Fragments can be combined
    this way, along with ViewGroups and Views to create complex Activities.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这演示了如何将静态的Fragment包含在标准布局文件中。它显示了使用`tools:layout`在其中展开哪个布局，以及哪个Java类通过`android:name`来控制它。可以通过这种方式组合多个Fragment，以及ViewGroups和Views来创建复杂的Activity。
- en: It is worth taking a look at both Java classes and the other XML file in this
    template, to see how the other components work. You will be familiar now with
    most of it, due to the work we have just completed. Do not close the project just
    for now, as we are going to use it to see how to add a menu.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一看的是这个模板中的Java类和其他XML文件，以了解其他组件是如何工作的。现在你将熟悉其中大部分内容，因为我们刚刚完成了这项工作。现在不要关闭项目，因为我们将要使用它来查看如何添加菜单。
- en: Adding menus and toolbars
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加菜单和工具栏
- en: Nearly all mobile apps contain some form of global menu that provides access
    to functions required throughout the app. Menus can be opened in several ways
    on Android apps, but most commonly used is the **Options menu** which is accessed
    from the toolbar or action bar. Options menu items can also appear on the toolbar,
    as text or graphically.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有移动应用都包含某种形式的全局菜单，该菜单提供对整个应用所需功能的访问。在 Android 应用中，菜单可以通过多种方式打开，但最常用的方法是**选项菜单**，它可以通过工具栏或操作栏访问。选项菜单项也可以作为文本或图形出现在工具栏上。
- en: 'First, we will add a basic drop-down toolbar menu to implement the functions
    currently provided by the two buttons. Open the project from the **Fragments**
    section and follow these steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个基本的下拉工具栏菜单来实现两个按钮当前提供的功能。从**片段**部分打开项目，并按照以下步骤操作：
- en: Open the `res/menu/menu_main.xml` file.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `res/menu/menu_main.xml` 文件。
- en: 'Replace the existing `<item>` tag with these three:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 `<item>` 标签替换为以下三个：
- en: '[PRE26]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Menus can be previewed in the same way as the layouts, by opening the preview
    pane:![Adding menus and toolbars](img/B04321_03_10.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过打开预览窗格以与布局相同的方式预览菜单：![添加菜单和工具栏](img/B04321_03_10.jpg)
- en: Open the `MainActivity` file and locate the `onOptionsItemSelected()` method.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainActivity` 文件，找到 `onOptionsItemSelected()` 方法。
- en: 'Rewrite it to look like this:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写如下：
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Run the app on a device and use the menu to open date, locale, and volume settings.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备上运行应用程序，并使用菜单打开日期、地区和音量设置。
- en: Adding menu items to the menu XML files
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将菜单项添加到菜单 XML 文件中
- en: Each item requires a title and an ID. We can change the order the items appear
    in with the `orderInCategory` attribute with ascending integer values ordering
    items from top to bottom (and left to right on the toolbar). Menu items can be
    categorized and ordered separately by nesting them inside `<group>` tags.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目都需要一个标题和一个 ID。我们可以使用 `orderInCategory` 属性来改变项目出现的顺序，该属性使用升序整数值对项目进行排序，从上到下（以及在工具栏上从左到右）排序。菜单项可以通过嵌套在
    `<group>` 标签内来分别进行分类和排序。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Sub-menus can be created by embedding a `<menu>` tag, with its own items inside
    an `<item>` tag.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 子菜单可以通过嵌入一个 `<menu>` 标签来创建，其中包含自己的项目，这些项目位于 `<item>` 标签内。
- en: As we will see shortly, menu items can be displayed on the toolbar in the same
    way they were on the Action bar in versions of Android older that API 21\. This
    can be done with the `showAsAction` attribute; if you still have the project open,
    it is worth running the app again with this value set to `always` and `ifRoom`,
    to see the effect this has. Doing this simply moves our menu options to the bar,
    but we can also use icons to represent our options; this, along with the new features
    of the Android 5 toolbar, is what we will explore next.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们很快将看到的，菜单项可以在工具栏上以与 API 21 以下版本的 Android 中 Action bar 上相同的方式显示。这可以通过 `showAsAction`
    属性来完成；如果您仍然打开了项目，将此值设置为 `always` 和 `ifRoom` 再次运行应用程序是值得的，以查看这种设置的效果。这样做只是将我们的菜单选项移动到栏上，但我们也可以使用图标来表示我们的选项；这就是我们将要探索的
    Android 5 工具栏的新特性。
- en: Configuring the toolbar
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置工具栏
- en: 'As already mentioned, Android 5 introduced a replacement for the Action bar
    at the top of many app screens: the toolbar. The toolbar does performs all the
    same functions as its predecessor, such as displaying menu options and other frequently
    performed actions, but is far more customizable. Most interestingly, the toolbar
    can now be placed anywhere on the screen.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Android 5 引入了许多应用屏幕顶部 Action bar 的替代品：工具栏。工具栏确实执行了其前身所有的相同功能，例如显示菜单选项和其他频繁执行的操作，但可定制性更高。最有趣的是，工具栏现在可以放置在屏幕的任何位置。
- en: In this next exercise, we will add our menus to the toolbar as icons; include
    navigation, logo, and titles on the toolbar; and then place it at the bottom of
    our screen.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将把我们的菜单添加到工具栏上作为图标；在工具栏上包含导航、标志和标题；然后将它放置在屏幕底部。
- en: Toolbar icons need to comply with some specific material design guidelines,
    a complete guide to which can be found at [http://www.google.com/design/spec/style/icons.html](http://www.google.com/design/spec/style/icons.html).
    Basically, they need to be simple, single-color symbols on a transparent background.
    To begin with, you can download purpose-built system icons for specific screen
    densities from [http://www.google.com/design/icons/](http://www.google.com/design/icons/).
    Below are the three that were download for this project, along with the names
    used in the next exercise.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏图标需要遵守一些特定的材料设计指南，完整的指南可以在[http://www.google.com/design/spec/style/icons.html](http://www.google.com/design/spec/style/icons.html)找到。基本上，它们需要在透明背景上的简单、单色符号。起初，你可以从[http://www.google.com/design/icons/](http://www.google.com/design/icons/)下载为特定屏幕密度专门设计的系统图标。以下是本项目下载的三个图标，以及在下一次练习中使用的名称。
- en: '![Configuring the toolbar](img/B04321_03_11.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![配置工具栏](img/B04321_03_11.jpg)'
- en: 'Download or find something similar of a pixel density that is suitable for
    the devices you are developing for. Then carry out the following steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下载或找到适合你正在为的设备的像素密度的类似图片。然后执行以下步骤：
- en: Open the project we were just working on and copy your icons into the `drawable`
    folder.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们刚刚正在工作的项目，并将你的图标复制到`drawable`文件夹中。
- en: 'Open the `menu_main.xml` file and add the following line into the `menu_date`
    item:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`menu_main.xml`文件，并在`menu_date`项中添加以下行：
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Do the same for the location and sleep icons in their respective item tags.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在各自的项标签中为位置和睡眠图标做同样的操作。
- en: Change all three items' `android:showAsAction` attribute from `"never"` to `"ifRoom"`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有三个项的`android:showAsAction`属性从`"never"`更改为`"ifRoom"`。
- en: If you wish to see how your brand colors will appear against your action icons,
    apply a material theme as we have before, and run the app to see how your icons
    look.![Configuring the toolbar](img/B04321_03_12.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要看看你的品牌颜色与操作图标对比的效果，就像我们之前做的那样，应用一个材料主题，并运行应用来查看图标的外观。![配置工具栏](img/B04321_03_12.jpg)
- en: Now open the `main_activity.xml` file.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`main_activity.xml`文件。
- en: 'Insert this `Toolbar` above the two buttons:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个按钮上方插入这个`Toolbar`：
- en: '[PRE29]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the `res/values/styles/styles.xml (v21)` file and edit the `AppTheme`
    definition like this:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`res/values/styles/styles.xml (v21)`文件，并像这样编辑`AppTheme`定义：
- en: '[PRE30]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You will need another image for the logo here. This does not have to be plain
    and simple but should not contain text, and it should be around 96 x 96 px, depending
    on your device's pixel density. If you want to save time, use one of the other
    images in the `setLogo()` command in step 11.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要为这里的标志准备另一张图片。这张图片不必简单朴素，但不应该包含文字，并且大小约为96 x 96 px，具体取决于你设备的像素密度。如果你想节省时间，可以在第11步的`setLogo()`命令中使用其他图片之一。
- en: 'Open the `MainActivity` file and add this field:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity`文件并添加以下字段：
- en: '[PRE31]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, add these lines to the `onCreate()` method:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下行添加到`onCreate()`方法中：
- en: '[PRE32]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the `activity_main.xml` file, remove the padding from the root layout.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`文件中，从根布局中移除填充。
- en: That's it. You can now run the app, with an output something like this:![Configuring
    the toolbar](img/B04321_03_13.jpg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。你现在可以运行应用，输出结果可能如下所示：![配置工具栏](img/B04321_03_13.jpg)
- en: Adding option menu items to the action bar is done simply by setting `showAsAction`
    to `ifRoom` or `always`, and we could have included both text and icon with `withText`.
    This provides a handy way to present options to the user, but it is transformed
    into a far more powerful tool once we can define it in a layout and refer to it
    from Java. This means we can place it anywhere on our screen and place anything
    inside it. We could add an `ImageView` or `Button`, simply by adding that element
    inside the `Toolbar` element in XML. Once we have a reference in Java, we can
    add click listeners or any other method, just as we can with other components.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 将选项菜单项添加到操作栏的操作很简单，只需将`showAsAction`设置为`ifRoom`或`always`，并且我们可以通过`withText`同时包含文本和图标。这为向用户展示选项提供了一个方便的方法，但一旦我们可以在布局中定义它并从Java中引用它，它就变成了一个功能更强大的工具。这意味着我们可以在屏幕上的任何位置放置它，并在其中放置任何内容。我们可以通过在XML中的`Toolbar`元素内添加该元素来添加`ImageView`或`Button`。一旦我们在Java中有了引用，我们就可以添加点击监听器或任何其他方法，就像我们处理其他组件一样。
- en: We needed to remove the original action bar by changing the theme to `Material.Light.NoActionBar`,
    although we could have kept it and added a toolbar and of course, we can have
    two or more toolbars, perhaps even contained in a `Fragment` and replacing each
    other to create a more dynamic interface. We also had to remove padding from the
    parent layout, so as to have it plush to the edges like a traditional action bar
    and we set its elevation so that it looks like the action bar we are used to.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过将主题更改为`Material.Light.NoActionBar`来移除原始的工具栏，尽管我们可以保留它并添加一个工具栏，当然，我们也可以有多个工具栏，甚至可能包含在一个`Fragment`中，相互替换以创建一个更动态的界面。我们还必须从父布局中移除填充，以便它紧贴边缘，就像传统的工具栏一样，并设置其高度，使其看起来像我们习惯的工具栏。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have covered a lot in this chapter, starting with an introduction to the
    `CardView` widget and the new features incorporated in Android 5, such as the
    ability to elevate it and other views so that they appear to float above the screen.
    We saw how to add image files to a project and how we can optimize such images
    so as to efficiently match the screen density of the user's device. We saw how
    to include new Activities and how to use XML (as well as Java) to control how
    widgets and views behave when clicked on. The chapter also covered one of the
    many ways that Activities can communicate with one another.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了大量的内容，从介绍`CardView`小部件以及Android 5中引入的新特性开始，例如提升它和其他视图，使它们看起来像是浮在屏幕之上。我们看到了如何向项目中添加图像文件，以及如何优化这些图像以高效地匹配用户设备的屏幕密度。我们还看到了如何包含新的活动，以及如何使用XML（以及Java）来控制小部件和视图在被点击时的行为。本章还涵盖了活动之间相互通信的许多方法之一。
- en: We went on to explore another way to add flexibility to our apps with the `Fragment`
    classes which have much of the functionality of Activities but can be combined
    in one layout and treated like ViewGroups.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续探索使用`Fragment`类来增加我们应用灵活性的另一种方法，这些类具有许多活动功能，但可以组合在一个布局中，并像ViewGroups一样处理。
- en: Finally, we investigated the relationship between **Options menu** and the action
    bar and saw how the toolbar introduced in Android 5 can be thought of as a part
    of our activity rather than a fixed widget stuck to the top of it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们研究了**选项菜单**和工具栏之间的关系，并看到了Android 5中引入的工具栏如何被视为我们活动的一部分，而不是固定在顶部的独立小部件。
- en: Having grasped some of the more important fundamentals of Android programming,
    we can now go on to consider how to build more sophisticated apps that incorporate
    larger data sets, and how to utilize more of the technologies found in today's
    mobile devices.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了Android编程的一些重要基础知识之后，我们现在可以进一步考虑如何构建更复杂的应用程序，这些应用程序包含更大的数据集，以及如何利用今天移动设备中找到的更多技术。
