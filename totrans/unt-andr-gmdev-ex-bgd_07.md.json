["```java\n    public void OnTriggerEnter(Collider other) {\n      Destroy(other.gameObject);\n    }\n    ```", "```java\n    public float totalHealth = 100f;\n    private float health = 100f;\n\n    public Material damageMaterial;\n    public Renderer plankRenderer;\n    private bool didSwap = false;\n\n    public int scoreValue = 100;\n    ```", "```java\n    public void Awake() {\n      health = totalHealth;\n      didSwap = false;}\n    ```", "```java\n    public void OnCollisionEnter(Collision collision) {\n      health -= collision.relativeVelocity.magnitude;\n\n      if(!didSwap && health < totalHealth / 2f) {\n        SwapToDamaged();\n      }\n\n      if(health <= 0) {\n        Destroy(gameObject);\n        LevelTracker.AddScore(scoreValue);\n      }\n    }\n    ```", "```java\n    public void SwapToDamaged() {\n      didSwap = true;\n      if(plankRenderer == null) return;\n      if(damageMaterial == null) return;\n\n      plankRenderer.sharedMaterial = damageMaterial;\n    }\n    ```", "```java\n    private static int score = 0;\n    ```", "```java\n    public void Awake() {\n      score = 0;\n    }\n    ```", "```java\n    public static void AddScore(int amount) {\n      score += amount;\n    }\n    ```", "```java\n    public Transform[] pigs = new Transform[0];\n\n    private static gameOver = false;\n    private static string message = \"\";\n    ```", "```java\n    gameOver = false;\n    ```", "```java\n    public void OnGUI() {\n      if(gameOver)\n        DrawGameOver();\n      else\n        DrawScore();}\n    ```", "```java\n    private void DrawScore() {\n      Rect scoreRect = new Rect(Screen.width – 100, 0, 100, 30);\n      GUI.Label(scoreRect, \"Score: \" + score);\n    }\n    ```", "```java\n    private void DrawGameOver() {\n      Rect boxRect =  new Rect(0, 0, Screen.width, Screen.height);\n      GUI.Box(boxRect, \"Game Over\\n\" + message);\n\n      Rect scoreRect = new Rect(0, Screen.height / 2, Screen.width, 30);\n      GUI.Label(scoreRect, \"Score: \" + score);\n\n      Rect exitRect = new Rect(0, Screen.height / 2 + 50, Screen.width, 50);\n      if(GUI.Button(exitRect, \"Return to Level Select\")) {\n        Application.LoadLevel(0);\n        SaveScore();\n      }\n    }\n    ```", "```java\n    public void LateUpdate() {\n      if(!gameOver)\n        CheckPigs();\n    }\n    ```", "```java\n    private void CheckPigs() {\n      for(int i=0;i<pigs.Length;i++) {\n        if(pigs[i] != null) return;\n      }\n\n      gameOver = true;\n      message = \"You destroyed the pigs!\";\n    }\n    ```", "```java\n    public static void OutOfBirds() {\n      if(gameOver) return;\n\n      gameOver = true;\n      message = \"You ran out of birds!\";\n    }\n    ```", "```java\n    private void SaveScore() {\n      string key = \"LevelScore\" + Application.loadedLevel;\n      int previousScore = PlayerPrefs.GetInt(key, 0);\n      if(previousScore < score) \n        PlayerPrefs.SetInt(key, score);\n    }\n    ```", "```java\n    public float health = 50;\n    protected bool didSpecial = false;\n    ```", "```java\n    public void Update() {\n      if(didSpecial)\n        return;\n      if(!Input.GetMouseButtonDown(0))\n        return;\n      if(rigidbody == null || rigidbody.isKinematic)\n        return;\n\n      DoSpecial();\n    }\n    ```", "```java\n    protected virtual void DoSpecial() {\n      didSpecial = true;\n    }\n    ```", "```java\n    public void OnCollisionEnter(Collision collision) {\n      health -= collision.relativeVelocity.magnitude;\n      if(health < 0)\n        Destroy(gameObject);\n    }\n    ```", "```java\n    public RigidbodyDamper rigidbodyDamper;\n\n    public GameObject[] levelBirds = new GameObject[0];\n    private GameObject[] currentBirds;\n    private int nextIndex = 0;\n    public Transform waitPoint;\n    public Transform toFireBird;\n    public bool didFire = false;\n    public bool isAiming = false;\n\n    public Transform pouch;\n    public Transform focalPoint;\n    public Transform pouchBirdPoint;\n\n    public float maxRange = 3;\n\n    public float maxFireStrength = 25;\n    public float minFireStrength = 5;\n    ```", "```java\n    public void Awake() {\n      currentBirds = new GameObject[levelBirds.Length];\n      for(int i=0;i<levelBirds.Length;i++) {\n        GameObject nextBird = Instantiate(levelBirds[i]) as GameObject;\n        nextBird.rigidbody.isKinematic = true;\n        currentBirds[i] = nextBird;\n      }\n\n      ReadyNextBird();\n      SetWaitPositions();\n    }\n    ```", "```java\n    public void ReadyNextBird() {\n      if(currentBirds.Length <= nextIndex) {\n        LevelTracker.OutOfBirds();\n        return;\n      }\n\n      if(currentBirds[nextIndex] == null) {\n        nextIndex++;\n        ReadyNextBird();\n        return;\n      }\n\n      toFireBird = currentBirds[nextIndex].transform;\n      nextIndex++;\n\n      toFireBird.parent = pouchBirdPoint;\n      toFireBird.localPosition = Vector3.zero;\n      toFireBird.localRotation = Quaternion.identity;\n\n      didFire = false;\n      isAiming = false;\n    }\n    ```", "```java\n    public void SetWaitingPositions() {\n      for(int i=nextIndex;i<currentBirds.Length;i++) {\n        if(currentBirds[i] == null) continue;\n        Vector3 offset = Vector3.forward * (i – nextIndex) * 2;\n        currentBirds[i].transform.position = waitPoint.position – offset;\n      }\n    }\n    ```", "```java\n    public void Update() {\n      if(didFire) {\n        if(rigidbodyDamper.allSleeping) {\n          ReadyNextBird();\n          SetWaitingPositions();\n        }\n        return;\n      }\n      else if(isAiming) {\n        DoAiming();}\n      else {\n        if(Input.touchCount <= 0) return;\n        Vector3 touchPoint = GetTouchPoint();\n        isAiming = Vector3.Distance(touchPoint, focalPoint.position) < maxRange / 2;\n      }\n    }\n    ```", "```java\n    private void DoAiming() {\n      if(Input.touchCount <= 0) {\n        FireBird();\n        return;\n      }\n\n      Vector3 touchPoint = GetTouchPoint();\n\n      pouch.position = touchPoint;\n      pouch.LookAt(focalPoint);\n\n      float distance = Vector3.Distance(focalPoint.position, pouch.position);\n      if(distance > maxRange) {\n        pouch.position = focalPoint.position – (pouch.forward * maxRange);\n      }\n    }\n    ```", "```java\n    private Vector3 GetTouchPoint() {\n      Ray touchRay = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);\n      Vector3 touchPoint = touchRay.origin;\n      touchPoint.x = 0;\n      return touchPoint;\n    }\n    ```", "```java\n    private void FireBird() {\n      didFire = true;\n\n      Vector3 direction = (focalPoint.position – pouch.position).normalized;\n      float distance = Vector3.Distance(focalPoint.position, pouch.position);\n    float power = distance <= 0 ? 0 : distance / maxRange;\n      power *= maxFireStrength;\n      power = Mathf.Clamp(power, minFireStrength, maxFireStrength);\n\n      toFireBird.parent = null;\n      toFireBird.rigidbody.isKinematic = false;\n      toFireBird.rigidbody.AddForce(direction * power, ForceMode.Impulse);\n\n      pouch.position = focalPoint.position;\n\n      rigidbodyDamper.ReadyDamp();\n    }\n    ```", "```java\n    public float dampWaitLength = 10f;\n    public float dampAmount = 0.9f;\n    private float dampTime = -1;\n    private bool canDamp = false;\n    private Rigidbody[] rigidbodies = new Rigidbody[0];\n\n    public bool allSleeping = false;\n    ```", "```java\n    public void ReadyDamp() {\n      rigidbodies = FindObjectsOfType(typeof(Rigidbody)) as Rigidbody[];\n      dampTime = Time.time + dampWaitLength;\n      canDamp = true;\n      allSleeping = false;\n\n      StartCoroutine(CheckSleepingRigidbodies());\n    }\n    ```", "```java\n    public void FixedUpdate() {\n      if(!canDamp || dampTime > Time.time) return;\n\n      foreach(Rigidbody next in rigidbodies) {\n        if(next != null && !next.isKinematic && !next.IsSleeping()) {\n          next.angularVelocity *= dampAmount;\n          next.velocity *= dampAmount;\n        }\n      }\n    }\n    ```", "```java\n    private IEnumerator CheckSleepingRigidbodies() {\n      bool sleepCheck = false;\n\n      while(!sleepCheck) {\n        sleepCheck = true;\n\n        foreach(Rigidbody next in rigidbodies) {\n          if(next != null && !next.isKinematic && !next.IsSleeping()) {\n            sleepCheck = false;\n            yield return null;\n            break;\n          }\n        }\n      }\n\n      allSleeping = true;\n      canDamp = false;\n    }\n    ```", "```java\n    public void AddBodiesToCheck(Rigidbody[] toAdd) {\n      Rigidbody[] temp = rigidbodies;\n      rigidbodies = new Rigidbody[temp.Length + toAdd.Length];\n\n      for(int i=0;i<temp.Length;i++) {\n        rigidbodies[i] = temp[i];\n      }\n      for(int i=0;i<toAdd.Length;i++) {\n        rigidbodies[i + temp.Length] = toAdd[i];\n      }\n    }\n    ```", "```java\n    public Transform endPoint;\n    public LineRenderer lineRenderer;\n    ```", "```java\n    public void Awake() {\n      if(lineRenderer == null) return;\n      if(endPoint == null) return;\n\n      lineRenderer.SetVertexCount(2);\n      lineRenderer.SetPosition(0, transform.position);\n      lineRenderer.SetPosition(1, endPoint.position);\n    }\n    ```", "```java\n    public void LateUpdate() {\n      if(endPoint == null) return;\n      if(lineRenderer == null) return;\n\n      lineRenderer.SetPosition(1, endPoint.position);\n    }\n    ```", "```java\n    public Slingshot slingshot;\n\n    public Transform rightPoint;\n    public Transform leftPoint;\n    public Transform topPoint;\n\n    public float waitTime = 3f;\n    private float headBackTime = -1;\n    private Vector3 waitPosition;\n    public float headBackDuration = 3f;\n\n    public float dragScale = 0.075f;\n\n    private bool followBird = false;\n    private Vector3 followVelocity = Vector3.zero;\n    public float followSmoothTime = 0.1f;\n    ```", "```java\n    public void Awake() {\n      followBird = false;\n      StartWait();\n    }\n    ```", "```java\n    public void StartWait() {\n      headBackTime = Time.time + waitTime;\n      waitPosition = transform.position;\n    }\n    ```", "```java\n    public void Update() {\n      if(!slingshot.didFire) {\n        if(slingshot.isAiming) {\n          followBird = true;\n          followVelocity = Vector3.zero;\n        }\n        else {\n          followBird = false;\n        }\n      }\n\n      if(followBird) {\n        FollowBird();\n        StartWait();\n      }\n      else if(Input.touchCount > 0) {\n        DragCamera();\n        StartWait();\n      }\n\n      if(!slingshot.didFire && headBackTime < Time.time) {\n        BackToLeft();\n      }\n    }\n    ```", "```java\n    private void FollowBird() {\n      if(slingshot.toFireBird == null) {\n        followBird = false;\n        return;\n      }\n\n      Vector3 targetPoint = slingshot.toFireBird.position;\n      targetPoint.x = transform.position.x;\n\n      transform.position = Vector3.SmoothDamp(transform.position, targetPoint, ref followVelocity, followSmoothTime);\n      ClampPosition();\n    }\n    ```", "```java\n    private void DragCamera() {\n      transform.position -= new Vector3(0, 0, Input.GetTouch(0).deltaPosition.x * dragScale);\n      ClampPosition();\n    }\n    ```", "```java\n    private void ClampPosition() {\n      Vector3 clamped = transform.position;\n      clamped.z = Mathf.Clamp(clamped.z, leftPoint.position.z, rightPoint.position.z);\n      clamped.y = Mathf.Clamp(clamped.y, leftPoint.position.y, topPoint.position.y);\n      transform.position = clamped;\n    }\n    ```", "```java\n    private void BackToLeft() {\n      float progress = (Time.time – headBackTime) / headBackDuration;\n      Vector3 newPosition = transform.position;\n      newPosition.z = Mathf.SmoothStep(waitPosition.z, leftPoint.position.z, progress);\n      newPosition.y = Mathf.SmoothStep(waitPosition.y, leftPoint.position.y, progress);\n      transform.position = newPosition;\n    }\n    ```", "```java\n    public Material[] materials = new Material[0];\n    public float[] speeds = new float[0];\n\n    private Vector3 lastPosition = Vector3.zero;\n    ```", "```java\n    public void Start() {\n      lastPosition = Camera.main.transform.position;\n    }\n    ```", "```java\n    public void LateUpdate() {\n      Vector3 newPosition = Camera.main.transform.position;\n      float move = newPosition.z – lastPosition.z;\n\n      for(int i=0;i<materials.Length;i++) {\n        Vector2 offset = materials[i].mainTextureOffset;\n        offset.x -= move * speeds[i];\n        materials[i].mainTextureOffset = offset;\n      }\n\n      lastPosition = newPosition;\n    }\n    ```", "```java\n    public class YellowBird : Bird {\n    ```", "```java\n    public float multiplier = 2f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n      rigidbody.velocity *= multiplier;\n    }\n    ```", "```java\n    public class BlueBird : Bird {\n    ```", "```java\n    public GameObject[] splitBirds = new GameObject[0];\n    public float launchAngle = 15f;\n    public float spawnLead = 0.5f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n\n      int halfLength = splitBirds.Length / 2;\n      Rigidbody[] newBodies = new Rigidbody[splitBirds.Length];\n    ```", "```java\n      for(int i=0;i<splitBirds.Length;i++) {\n        if(splitBirds[i] == null) continue;\n\n        GameObject next = Instantiate(splitBirds[i], transform.position, transform.rotation) as GameObject;\n        if(next.rigidbody == null) continue;\n\n        newBodies[i] = next.rigidbody;\n    ```", "```java\n        Quaternion rotate = Quaternion.Euler(launchAngle * (i – halfLength), 0, 0);\n        next.rigidbody.velocity = rotate * rigidbody.velocity;\n        next.transform.position += next.rigidbody.velocity.normalized * spawnLead;\n      }\n    ```", "```java\n      Slingshot slingshot = FindObjectOfType(typeof(Slingshot)) as Slingshot;\n      if(slingshot != null) {\n        slingshot.toFireBird = newBodies[0].transform;\n      slingshot.rigidbodyDamper.AddBodiesToCheck(newBodies);\n      }\n\n      Destroy(gameObject);\n    }\n    ```", "```java\n    public class BlackBird : Bird {\n    ```", "```java\n    public float radius = 2.5f;\n    public float power = 25f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n\n      Collider[] colliders = Physics.OverlapSphere(transform.position, radius);\n\n      foreach(Collider hit in colliders) {\n        if(hit == null) continue;\n        if(hit.rigidbody != null)\n          hit.rigidbody.AddExplosionForce(power, transform.position, radius, 3, ForceMode.Impulse);\n      }\n\n      Destroy(gameObject);\n    }\n    ```", "```java\n    public int buttonSize = 100;\n    ```", "```java\n    public void OnGUI() {\n      for(int i=0;i<3;i++) {\n        Rect next = new Rect(0,0, buttonSize, buttonSize);\n        next.x = (Screen.width / 2) – (buttonSize * 1.5f) + (buttonSize * i);\n        next.y = (Screen.height / 2) – (buttonSize / 2f);\n\n        int levelScore = PlayerPrefs.GetInt(\"LevelScore\" + (i + 1), 0);\n        string text = \"Level \" + (i + 1) + \"\\nScore: \" + levelScore;\n\n        if(GUI.Button(next, text)) {\n          Application.LoadLevel(i + 1);\n        }\n      }\n    }\n    ```"]