["```swift\n@implementation CCButton\n\n//add this one...\n-(void)scaleButtonDown\n{\n  [self stopAllActions];\n\n  id scaleDown = [CCActionEaseInOut actionWithAction:[CCActionScaleTo actionWithDuration:0.11f scale:0.8f] rate:2];\n  id scaleBackUp = [CCActionEaseInOut actionWithAction:[CCActionScaleTo actionWithDuration:0.13f scale:0.9f] rate:2];\n  id actionSequence = [CCActionSequence actions:scaleDown, scaleBackUp, nil];\n  [self runAction:actionSequence];\n}\n\n//and this one...\n-(void)scaleButtonUp\n{\n  [self stopAllActions];\n\n  id scaleDown = [CCActionEaseInOut actionWithAction: [CCActionScaleTo actionWithDuration:0.11f scale:1.15f] rate:1.5f];\n  id scaleBackUp = [CCActionEaseInOut actionWithAction: [CCActionScaleTo actionWithDuration:0.13f scale:1.0f] rate:2];\n  id actionSequence = [CCActionSequence actions:scaleDown, scaleBackUp, nil];\n  [self runAction:actionSequence];\n}\n```", "```swift\n- (void) touchEntered:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n   ...\n\n  //add this:\n  [self scaleButtonDown];\n}\n```", "```swift\n- (void) touchExited:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n  self.highlighted = NO;\n\n  //add this:\n  [self scaleButtonUp];\n}\n\n- (void) touchUpInside:(CCTouch *)touch withEvent:(CCTouchEvent *)event\n{\n  ...\n\n  //add this:\n  [self scaleButtonUp];\n}\n```", "```swift\n-(void)pulseUnit:(CCNode*)unit\n{\n  CGFloat baseScale = 1.0f;\n  if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)\n    baseScale = 0.8f;\n\n  id scaleUp = [CCActionEaseInOut actionWithAction:[CCActionScaleTo actionWithDuration:0.15f scale:baseScale * 1.2f] rate:2];\n  id scaleDown = [CCActionEaseInOut actionWithAction:[CCActionScaleTo actionWithDuration:0.15f scale:baseScale * 0.9f] rate:2];\n  id scaleToFinal = [CCActionEaseInOut actionWithAction:[CCActionScaleTo actionWithDuration:0.25f scale:baseScale] rate:2];\n  id seq = [CCActionSequence actions:scaleUp, scaleDown, scaleToFinal, nil];  \n\n  [unit stopAllActions];\n  [unit runAction:seq];\n}\n```", "```swift\n-(void)checkForCombineWithUnit:(Unit*)first andUnit:(Unit*)other usingDeletionArray:(NSMutableArray*)array\n{\n  ...\n\n      if (ov > fv)\n      {\n        ...\n\n        [self pulseUnit:other];\n      }\n      else\n      {\n        ...\n\n        [self pulseUnit:first];\n      }\n  ...\n}\n```", "```swift\nâ€“(void)checkForAnyDirectionCombineWithUnit:(Unit*)first andUnit:(Unit*)other usingDeletionArray:(NSMutableArray*)array\n{\n  ...\n\n    if (ov > fv)\n    {\n      ...\n\n      [self pulseUnit:other];\n    }\n    else\n    {\n      ...\n\n      [self pulseUnit:first];\n    }\n}\n}\n```", "```swift\n}\n+(CCScene*)scene;\n\n...\n\n//here:\n@property (nonatomic, assign) NSInteger tutorialPhase; \n@end\n```", "```swift\nFOUNDATION_EXPORT NSString *const KeyFinishedTutorial;\n```", "```swift\nNSString *const KeyFinishedTutorial = @\"keyFinishedTutorial\";\n```", "```swift\nif ([[NSUserDefaults standardUserDefaults] boolForKey:KeyFinishedTutorial])\n{\n  [self spawnNewEnemy:[self getRandomEnemy]];\n  self.tutorialPhase = 0;\n}\nelse\n{\n  //spawn enemy on far right with value of 1\n  Unit *newEnemy = [Unit enemyUnitWithNumber:1 atGridPosition:ccp(9, 5)];\n  newEnemy.position = [MainScene getPositionForGridCoord: newEnemy.gridPos];\n  [newEnemy setDirection:DirLeft];\n  [self spawnNewEnemy:newEnemy];\n  self.tutorialPhase = 1;\n\n  [self showTutorialInstructions];\n}\n```", "```swift\n-(void)showTutorialInstructions\n{\n}\n```", "```swift\nNSString *tutString = @\"\";\nif (self.tutorialPhase == 1)\n{\ntutString = @\"Drag Friendly Units\";\n}\n\nCCLabelBMFont *lblTutorialText = [CCLabelBMFont labelWithString:tutString fntFile:@\"bmScoreFont.fnt\"];\nlblTutorialText.color = [CCColor colorWithRed:52/255.f green:73/255.f blue:94/255.f];\nlblTutorialText.position = [MainScene getPositionForGridCoord:ccp(5,2)];\nlblTutorialText.name = @\"tutorialText\";\n[self addChild:lblTutorialText z:2];\nCCSprite9Slice *background = [CCSprite9Slice spriteWithSpriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"imgUnit.png\"]];\nbackground.margin = 0.2;\nbackground.position = ccp(0.5,0.4);\nbackground.positionType = CCPositionTypeNormalized;\nbackground.contentSize = CGSizeMake(1.05f, 1.2f);\nbackground.contentSizeType = CCSizeTypeNormalized;\n[lblTutorialText addChild:background z:-1];\n```", "```swift\n-(void)advanceTutorial\n{\n  ++self.tutorialPhase;\n  [self removePreviousTutorialPhase];\n\n  if (self.tutorialPhase<7)\n  {\n    [self showTutorialInstructions];\n  }\n  else\n  {\n    //the tutorial should be marked as \"visible\"\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:KeyFinishedTutorial];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n  }\n}\n-(void)removePreviousTutorialPhase\n{\n}\n```", "```swift\nif (self.tutorialPhase == 1)\n{\n  tutString = @\"Drag Friendly Units\";\n\n  CCLabelBMFont *lblHowToPlay = [CCLabelBMFont labelWithString:@\"How to Play:\" fntFile:@\"bmScoreFont.fnt\"];\n  lblHowToPlay.color = [CCColor colorWithRed:52/255.f green:73/255.f blue:94/255.f];\n  lblHowToPlay.position = [MainScene getPositionForGridCoord:ccp(5,1)];\n  lblHowToPlay.name = @\"lblHowToPlay\";\n  lblHowToPlay.scale = 0.8;\n  [self addChild:lblHowToPlay z:2];\n\n  CCSprite9Slice *bgHowTo = [CCSprite9Slice spriteWithSpriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"imgUnit.png\"]];\n  bgHowTo.margin = 0.2;\n  bgHowTo.position = ccp(0.5,0.4);\n  bgHowTo.positionType = CCPositionTypeNormalized;\n  bgHowTo.contentSize = CGSizeMake(1.05f, 1.2f);\n  bgHowTo.contentSizeType = CCSizeTypeNormalized;\n  [lblHowToPlay addChild:bgHowTo z:-1];\n}\nelse if (self.tutorialPhase == 2)\n{\n  tutString = @\"Combine Friendly Units\";\n\n  id fadeRemoveHowToPlay = [CCActionSequence actions:[CCActionEaseInOut actionWithAction:[CCActionFadeOut actionWithDuration:0.5f] rate:2], [CCActionCallBlock actionWithBlock:^{\n    [self removeChildByName:@\"lblHowToPlay\"];\n  }], nil];\n\n  [[self getChildByName:@\"lblHowToPlay\" recursively:NO] runAction:fadeRemoveHowToPlay];\n\n}\nelse if (self.tutorialPhase == 3)\n{\n  tutString = @\"Defeat Enemies\";\n}\nelse if (self.tutorialPhase == 4)\n{\n  tutString = @\"Protect Center\";\n}\nelse if (self.tutorialPhase == 5)\n{\n  tutString = @\"Survive\";\n}\nelse if (self.tutorialPhase == 6)\n{\n  tutString = @\"Enjoy! :)\";\n}\n```", "```swift\nif (self.tutorialPhase == 1 || self.tutorialPhase == 2)\n  [self advanceTutorial];\n```", "```swift\nif (enemy.unitValue<= 0)\n{\n  [arrEnemies removeObject:enemy];\n  [selfremoveChild:enemy];\n  ++numUnitsKilled;\n\n  if (self.tutorialPhase == 3 || self.tutorialPhase == 4)\n[selfadvanceTutorial];\n}\n```", "```swift\nif (self.tutorialPhase == 5 || self.tutorialPhase == 6)\n  [self advanceTutorial];\n```", "```swift\nif (numTurnSurvived % 3 == 0 || [arrEnemiescount] == 0)\n{\n  if (self.tutorialPhase == 4)\n  {\n    Unit *newEnemy = [Unit enemyUnitWithNumber:4 atGridPosition:ccp(5,9)];\n    [newEnemy setDirection:DirUp];\n    newEnemy.position = [MainScene getPositionForGridCoord:ccp(5,9)];\n    [self spawnNewEnemy:newEnemy];\n  }\n  else\n  {\n    [self spawnNewEnemy:[self getRandomEnemy]];\n  }\n}\n```", "```swift\n-(void)removePreviousTutorialPhase\n{\n  CCLabelBMFont *lblInstructions = (CCLabelBMFont*)[self getChildByName:@\"tutorialText\" recursively:NO];\n  lblInstructions.name = @\"old_instructions\";\n\n  id fadeRemoveInstructions = [CCActionSequence actions:[CCActionEaseInOut actionWithAction:[CCActionFadeTo actionWithDuration:0.5f opacity:0] rate:2], [CCActionCallBlock actionWithBlock:^{\n    [self removeChild:lblInstructions];\n  }], nil];\n\n  [lblInstructions runAction:fadeRemoveInstructions];\n}\n```", "```swift\nCCSprite *finger = [CCSprite spriteWithSpriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"imgFinger.png\"]];\nfinger.anchorPoint = ccp(0.4,1);\nfinger.position = [MainScene getPositionForGridCoord:ccp(5,5)];\nfinger.name = @\"finger\";\nfinger.opacity = 0;\n[self addChild:finger z:2];\n```", "```swift\n... \n  [self addChild:finger z:2];\n\n  [self runFingerArrowActionsWithFinger:finger];\n}\n\n-(void)runFingerArrowActionsWithFinger:(CCSprite*)finger\n{\n}\n```", "```swift\n-(void)runFingerArrowActionsWithFinger:(CCSprite*)finger\n{\n  Unit *u = [Unit friendlyUnit];\n  if (self.tutorialPhase == 1 || self.tutorialPhase == 3)\n  {\n    id slideRight = [CCActionSequence actions:[CCActionEaseIn actionWithAction:[CCActionFadeIn actionWithDuration:0.25f] rate:2], [CCActionEaseInOut actionWithAction:[CCActionMoveBy actionWithDuration:1.0f position:ccp(u.gridWidth*2, 0)] rate:2],[CCActionDelay actionWithDuration:0.5f], nil];\n\n    id fadeOutAndReposition = [CCActionSequence actions:[CCActionDelay actionWithDuration:0.25f], [CCActionEaseInOut actionWithAction:[CCActionFadeOut actionWithDuration:1.0f] rate:2], [CCActionDelay actionWithDuration:0.5f], [CCActionCallBlock actionWithBlock:^{\n      finger.position = [MainScene getPositionForGridCoord:ccp(5,5)];\n    }], nil];\n\n    [finger runAction:[CCActionRepeatForever actionWithAction:slideRight]];\n    [finger runAction:[CCActionRepeatForever actionWithAction:fadeOutAndReposition]];\n\n  }  \n  else if (self.tutorialPhase == 2)\n  {\n\n    finger.position = [MainScene getPositionForGridCoord:ccp(6,5)];\n    id slideLeft = [CCActionSequence actions:[CCActionEaseIn actionWithAction:[CCActionFadeIn actionWithDuration:0.25f] rate:2], [CCActionEaseInOut actionWithAction:[CCActionMoveBy actionWithDuration:1.0f position:ccp(-u.gridWidth*2, 0)] rate:2],[CCActionDelay actionWithDuration:0.5f], nil];\n\n    id fadeOutAndReposition = [CCActionSequence actions:[CCActionDelay actionWithDuration:0.25f], [CCActionEaseInOut actionWithAction:[CCActionFadeOut actionWithDuration:1.0f] rate:2], [CCActionDelay actionWithDuration:0.5f], [CCActionCallBlock actionWithBlock:^{\n      finger.position = [MainScene getPositionForGridCoord:ccp(6,5)];\n    }], nil];\n\n    [finger runAction:[CCActionRepeatForever actionWithAction:slideLeft]];\n    [finger runAction:[CCActionRepeatForever actionWithAction:fadeOutAndReposition]];\n\n  }\n}\n```", "```swift\nCCSprite *finger = (CCSprite*)[self getChildByName:@\"finger\" recursively:NO];\nfinger.name = @\"old_finger\";\nid fadeRemoveFinger = [CCActionSequence actions:[CCActionEaseInOut actionWithAction:[CCActionFadeTo actionWithDuration:0.5f opacity:0] rate:2], [CCActionCallBlock actionWithBlock:^{\n  [self removeChild:finger];\n}], nil];\n[finger runAction:fadeRemoveFinger];\n```", "```swift\nif (!self.isBeingDragged && ccpDistance(touchPos, self.touchDownPos) >20)\n{\n  ...\n\n    if (\n  (((MainScene*)self.parent).tutorialPhase == 1 && self.dragDirection != DirRight) ||\n  (((MainScene*)self.parent).tutorialPhase == 2 && (self.dragDirection != DirLeft || self.unitValue == 1)) ||\n  (((MainScene*)self.parent).tutorialPhase == 3 && self.dragDirection != DirRight))\n    {\n      self.isBeingDragged = NO;\n      self.dragDirection = DirStanding;\n    }\n}\n```", "```swift\n//add share buttons\nCCButton *btnShare = [CCButton buttonWithTitle:@\"\" spriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"btnShare.png\"]];\n\n[btnShare setTarget:self selector:@selector(openShareView)];\nbtnShare.position = ccp(winSize.width/2, winSize.height * 0.1);\n[self addChild:btnShare];\n```", "```swift\n-(void)openShareView\n{\n\n}\n```", "```swift\n@interface GameOverScene : CCScene <CCTableViewDataSource>\n{\n  CGSize winSize;\n  NSArray *arrScores;\n  NSInteger highScoreIndex;\n\n  //add this:\n  NSInteger numCurrentScore;\n}\n```", "```swift\nnumCurrentScore = [dict[DictTotalScore] integerValue];\n```", "```swift\nNSString *textToShare = [NSString stringWithFormat:@\"I scored %d in MathGame! See if you can beat me!\",numCurrentScore];\n\nNSString *appID = @\"123456789\"; //change to YOUR app's ID\nNSURL *appStoreURL = [NSURL URLWithString:[NSString stringWithFormat:@\"https://itunes.apple.com/app/id%@\", appID]];\n\nNSArray *objectsToShare = @[textToShare, appStoreURL];\n\nUIActivityViewController *activityVC = [[UIActivityViewController alloc] initWithActivityItems:objectsToShare applicationActivities:nil];\n```", "```swift\nNSArray *excludeActivities = @[UIActivityTypeAirDrop,\n    UIActivityTypePrint,\n    UIActivityTypeAssignToContact,\n    UIActivityTypeSaveToCameraRoll,\n    UIActivityTypeAddToReadingList,\n    UIActivityTypePostToFlickr,\n    UIActivityTypePostToVimeo];\n\nactivityVC.excludedActivityTypes = excludeActivities;\n\n[[CCDirector sharedDirector] presentViewController:activityVC animated:YES completion:nil];\n```", "```swift\n-(UIImage*)screenshot\n{\n  [CCDirector sharedDirector].nextDeltaTimeZero = YES;\n\nCCRenderTexture* rtx =\n[CCRenderTexture renderTextureWithWidth:winSize.width\n  height:winSize.height];\n[rtx begin];\n  [[[CCDirector sharedDirector] runningScene] visit];\n[rtx end];\n\nreturn [rtx getUIImage];\n}\n```", "```swift\nUIImage *image = [self takeScreenshot];\n\nNSDictionary *scoreData = @{DictTotalScore : @(numTotalScore),\n    DictTurnsSurvived :@(numTurnSurvived),\n    DictUnitsKilled :@(numUnitsKilled),\n    DictHighScoreIndex :@(hsIndex),  \n    @\"screenshot\" : image};\n```", "```swift\n@interface GameOverScene : CCScene <CCTableViewDataSource>\n{\n  CGSize winSize;\n  NSArray *arrScores;\n  NSInteger highScoreIndex;\n  NSInteger numCurrentScore;\n\n  //add this:\n  UIImage *screenshot;\n}\n```", "```swift\nscreenshot = dict[@\"screenshot\"];\n```", "```swift\nNSArray *objectsToShare = @[textToShare, myWebsite, screenshot];\n```", "```swift\nif ((self=[super init]))\n{\n\n    //these values range 0 to 1.0, so use float to get ratio\n    CCNode *background = [CCNodeColor nodeWithColor:[CCColor whiteColor]];\n    [self addChild:background];\n\n    winSize = [CCDirector sharedDirector].viewSize;\n    CCButton *btnPlay = [CCButton buttonWithTitle:@\"\" spriteFrame:[CCSpriteFrame frameWithImageNamed: @\"btnPlay.png\"]];\n    btnPlay.position = ccp(winSize.width/2, winSize.height * 0.5);\n    [btnPlay setTarget:self selector:@selector(goToGame)];\n    [self addChild:btnPlay];\n\n    //add the sound and music buttons:\n\n    CCButton *btnSound = [CCButton buttonWithTitle:@\"\" spriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"btnSoundOn.png\"]];\n    [btnSound setBackgroundSpriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName: @\"btnSoundOff.png\"] forState:CCControlStateSelected];\n    btnSound.position = ccp(winSize.width * 0.35, winSize.height * 0.2);\n    [btnSound setTogglesSelectedState:YES];\n    [btnSound setTarget:self selector:@selector(soundToggle)];\n    [self addChild:btnSound];\n\n    CCButton *btnMusic = [CCButton buttonWithTitle:@\"\" spriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"btnMusicOn.png\"]];\n    [btnMusic setBackgroundSpriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"btnMusicOff.png\"] forState:CCControlStateSelected];\n    btnMusic.position = ccp(winSize.width * 0.65, winSize.height * 0.2);\n    [btnMusic setTogglesSelectedState:YES];\n    [btnMusic setTarget:self selector:@selector(musicToggle)];\n    [self addChild:btnMusic];\n\n  ...\n}\n```", "```swift\n-(void)soundToggle\n{\n\n}\n\n-(void)musicToggle\n{\n\n}\n```", "```swift\nFOUNDATION_EXPORT NSString *const KeySound;\nFOUNDATION_EXPORT NSString *const KeyMusic;\n```", "```swift\nNSString *const KeySound = @\"keySound\";\nNSString *const KeyMusic = @\"keyMusic\";\n```", "```swift\n@interface MenuScene :CCNode\n{\n  CGSize winSize;\n  BOOL isSoundOn, isMusicOn;\n}\n```", "```swift\nisSoundOn = [[NSUserDefaults standardUserDefaults] boolForKey:KeySound];\nisMusicOn = [[NSUserDefaults standardUserDefaults] boolForKey:KeyMusic];\n```", "```swift\nbtnSound.selected= !isSoundOn;\nbtnMusic.selected= !isMusicOn;\n```", "```swift\n-(void)soundToggle\n{\n  isSoundOn = !isSoundOn;\n  [[NSUserDefaults standardUserDefaults] setBool:isSoundOn forKey:KeySound];\n  [[NSUserDefaults standardUserDefaults] synchronize];\n}\n```", "```swift\n-(void)musicToggle\n{\n  isMusicOn = !isMusicOn;\n  [[NSUserDefaults standardUserDefaults] setBool:isMusicOn forKey:KeyMusic];\n  [[NSUserDefaults standardUserDefaults] synchronize];\n}\n```", "```swift\nisMusicOn ? [[OALSimpleAudio sharedInstance] playBg] : [[OALSimpleAudio sharedInstance] bgPaused];\n```", "```swift\nif (isSoundOn)\n[[OALSimpleAudio sharedInstance] playEffect:@\"buttonClick.mp3\"];\n```", "```swift\n-(void)goToGame\n{\n  if (isSoundOn)\n    [[OALSimpleAudio sharedInstance] playEffect:@\"buttonClick.mp3\"];\n  [[CCDirector sharedDirector] replaceScene:[MainScene scene]];\n}\n\n-(void)soundToggle\n{\n  ...\n\n  if (isSoundOn)\n    [[OALSimpleAudio sharedInstance] playEffect:@\"buttonClick.mp3\"];\n}\n```", "```swift\n@interface MainScene :CCScene\n{\n  BOOL isSoundOn;\n}\n```", "```swift\n-(id)init\n{\n    if ((self=[super init]))\n    {\n      //used for positioning items on screen\n      winSize = [[CCDirector sharedDirector] viewSize];\n    isSoundOn = [[NSUserDefaults standardUserDefaults] boolForKey:KeySound];\n\n    ...\n}\nreturn self;\nreturn self;\n}\n```", "```swift\nif (isSoundOn)\n  ...\n```", "```swift\nif ([[NSUserDefaults standardUserDefaults] boolForKey:KeyMusic])\n    [[OALSimpleAudiosharedInstance] playBgWithLoop:YES];\n```", "```swift\n- (CCScene*) startScene\n{\n  //if they have not played before (in other words, first time playing)\n  if (![[NSUserDefaults standardUserDefaults] boolForKey:@\"hasPlayedBefore\"])\n  {\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:KeySound];\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:KeyMusic];\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@\"hasPlayedBefore\"];\n\n    [[NSUserDefaults standardUserDefaults] synchronize];\n  }\n\n  ...\n\n  return [MainScene scene];//[CCBReader loadAsScene:@\"MainScene\"];\n}\n```", "```swift\nGameKitHelper ERROR: {\nNSLocalizedDescription = \"The requested operation could not be completed because this application is not recognized by Game Center.\";\n}\n```", "```swift\n[[GKHelper sharedGameKitHelper] authenticateLocalPlayer];\n```", "```swift\n//add Game Center buttons\nCCButton *btnGameCenter = [CCButton buttonWithTitle:@\"\" spriteFrame:[[CCSpriteFrameCache sharedSpriteFrameCache] spriteFrameByName:@\"btnGameCenter.png\"]];\n[btnGameCenter setTarget:self selector:@selector(viewGameCenter1)];\nbtnGameCenter.position = ccp(0.75, 0.1);\nbtnGameCenter.positionType = CCPositionTypeNormalized;\n[self addChild:btnGameCenter];\n```", "```swift\n#import \"GKHelper.h\"\n```", "```swift\n-(void)viewGameCenter\n{\n  [[GKHelper sharedGameKitHelper] presentLeaderboards];\n}\n```", "```swift\n[[GKHelper sharedGameKitHelper] submitScore:[dict[DictTotalScore] integerValue]];\n```", "```swift\nNS_ENUM(NSInteger, kMoveDirection)\n{\n  kMoveDirectionUp,\n  kMoveDirectionDown,\n  kMoveDirectionLeft,\n  kMoveDirectionRight\n};\n\n@interface MainScene :CCScene\n{ ... }\n```", "```swift\n+(void)rubberBandToScene:(CCNode*)scene fromParent:(CCNode*)parent withDuration:(CGFloat)duration withDirection: (enumkMoveDirection)direction;\n```", "```swift\n+(void)rubberBandToScene:(CCScene*)scene fromParent:(CCNode*)parent withDuration:(CGFloat)duration withDirection:(enumkMoveDirection)direction\n{\n  //grab the view size, so we know the width/height of the screen\n  CGSize winSize = [[CCDirector sharedDirector] viewSize];\n\n  //add the new scene to the current scene\n  [parent addChild:scene z:-1];\n\n  //set a distance to \"over move\" by\n  NSInteger distance = 25;\n\n  //variables for how much to move in each direction\n  CGPoint posBack = ccp(0,0);\n  CGPoint posForward = ccp(0,0);\n\n  //determine the specifics based on which direction the slide is going to go\n  if (direction == kMoveDirectionUp)\n  {\n    posBack.y = -distance;\n    posForward.y = winSize.height + distance*2;\n    scene.position = ccp(0,-winSize.height);\n  }\n  elseif (direction == kMoveDirectionDown)\n  {\n    posBack.y = distance;\n    posForward.y = -(winSize.height + distance*2);\n    scene.position = ccp(0,winSize.height);\n  }\n  elseif (direction == kMoveDirectionLeft)\n  {\n    posBack.x = distance;\n    posForward.x = -(winSize.width + distance*2);\n    scene.position = ccp(winSize.width, 0);\n  }\n  elseif (direction == kMoveDirectionRight)\n  {\n    posBack.x = -distance;\n    posForward.x = winSize.width + distance*2;\n    scene.position = ccp(-winSize.width,0);\n  }\n\n  //declare the slide actions\n  id slideBack = [CCActionEaseInOut actionWithAction:[CCActionMoveBy actionWithDuration:duration/4 position:posBack] rate:2];\n  id slideForward = [CCActionEaseInOut actionWithAction:[CCActionMoveBy actionWithDuration:duration/2 position:posForward] rate:2];\n  id slideBackAgain = [CCActionEaseInOut actionWithAction:[CCActionMoveBy actionWithDuration:duration/4 position:posBack] rate:2];\n  id replaceScene = [CCActionCallBlock actionWithBlock:^{\n\n    //remove the new scene from the current scene (so we can use it in the replace)\n    [parent removeChild:scene cleanup:NO];\n\n    //reset its position to (0,0)\n    scene.position = ccp(0,0);\n\n    //actually replace our scene with the passed-in one\n    [[CCDirector sharedDirector] replaceScene:scene];\n  }];\n\n  //arrange the actions into a sequence (which also includes the replacing)\n  id slideSeq = [CCActionSequence actions:slideBack, slideForward, slideBackAgain, replaceScene, nil];\n\n  //execute the sequence of actions\n  [parent runAction:slideSeq];\n} \n```", "```swift\nCCNode *background = [CCNodeColor nodeWithColor:[CCColor whiteColor] width:winSize.width*5 height:winSize.height*5];\nbackground.anchorPoint = ccp(0.5,0.5);\nbackground.position = ccp(winSize.width/2, winSize.height/2);\n[self addChild:background z:-2];\n```", "```swift\n-(void)goToMenu\n{\n  if (isSoundOn)\n    [[OALSimpleAudio sharedInstance] playEffect:@\"buttonClick.mp3\"];\n\n  [MainScene rubberBandToScene:[MenuScene scene] fromParent:self withDuration:0.5f withDirection:kMoveDirectionDown];\n}\n```", "```swift\n-(void)endGame\n{\n  //right here:\n  NSInteger hsIndex = [self saveHighScore];\n\n  UIImage *image = [self takeScreenshot];\n\n  NSDictionary *scoreData = @{DictTotalScore : @(numTotalScore),\n    DictTurnsSurvived :@(numTurnSurvived),\n    DictUnitsKilled :@(numUnitsKilled),\n    DictHighScoreIndex :@(hsIndex),\n    @\"screenshot\" : image};\n\n  [MainScene rubberBandToScene:[GameOverScene sceneWithScoreData: scoreData] fromParent:self withDuration:0.5f withDirection:kMoveDirectionUp];\n\n}\n```", "```swift\n-(id)init\n{\n  if ((self=[super init]))\n  {\n    winSize = [CCDirector sharedDirector].viewSize;\n\n    //these values range 0 to 1.0, so use float to get ratio\n    CCNode *background = [CCNodeColor nodeWithColor: [CCColorwhiteColor] width:winSize.width*5 height:winSize.height*5];\n    background.anchorPoint = ccp(0.5,0.5);\n    background.position = ccp(winSize.width/2, winSize.height/2);\n  [self addChild:background z:-2];\n  ...\n}\n```", "```swift\n-(void)goToGame\n{\n  if (isSoundOn)\n    [[OALSimpleAudio sharedInstance] playEffect: @\"buttonClick.mp3\"];\n\n  [MainScene rubberBandToScene:[MainScene scene] fromParent:self withDuration:0.5f withDirection:kMoveDirectionUp];\n} \n```", "```swift\n-(void)goToMenu\n{\n  //to be filled in later\n  [MainScene rubberBandToScene:[MenuScene scene] fromParent:self withDuration:0.5f withDirection:kMoveDirectionDown];\n}\n\n-(void)restartGame\n{\n  //to be filled in later\n  [MainScene rubberBandToScene:[MainScene scene] fromParent:self withDuration:0.5f withDirection:kMoveDirectionDown];\n}\n```"]