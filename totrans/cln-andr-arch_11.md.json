["```kt\ninterface Presenter {\n    fun loadUsers()\n    fun validateInput(text: String)\n}\ninterface View {\n    fun showUsers(users: List<User>)\n    fun showInputError(error: String)\n} \n```", "```kt\nclass PresenterImpl(\n    private val view: View,\n    private val getUsersUseCase: GetUsersUseCase\n) : Presenter {\n    private val scope = CoroutineScope(Dispatchers.Main)\n    override fun loadUsers() {\n        scope.launch {\n            getUsersUseCase.execute()\n                .collect { users ->\n                    view.showUsers(users)\n                }\n        }\n    }\n    override fun validateInput(text: String) {\n        if (text.isEmpty()) {\n            view.showInputError(\"Invalid input\")\n        }\n    }\n}\n```", "```kt\nclass MainActivity : ComponentActivity(), View {\n    @Inject\n    private lateinit var presenter: Presenter\n    private lateinit var usersAdapter: UsersAdapter\n    private lateinit var editText: EditText\n    private lateinit var errorView: TextView\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        …\n        editText.addTextChangedListener(object : \n            TextWatcher {\n            …\n            override fun afterTextChanged(s: Editable?) {\n                presenter.validateInput(s?.toString().orEmpty())\n            }\n        })\n        presenter.loadUsers()\n    }\n    override fun showUsers(users: List<User>) {\n        usersAdapter.add(users)\n    }\n    override fun showInputError(error: String) {\n        errorView.text = error\n    }\n}\n```", "```kt\ninterface Presenter {\n    …\n    fun close()\n}\n```", "```kt\noverride fun onDestroy() {\n        presenter.close()\n        super.onDestroy()\n}\n```", "```kt\nclass PresenterImpl(\n    private val view: View,\n    private val getUsersUseCase: GetUsersUseCase\n) : Presenter {\n    private val scope = CoroutineScope(Dispatchers.Main)\n    …\n    override fun close() {\n        scope.cancel()\n    }\n}\n```", "```kt\nclass MyViewModel(\n    private val getUsersUseCase: GetUsersUserUseCase\n) : ViewModel() {\n    private val _usersFlow =\n        MutableStateFlow<List<UiUser>>(listOf<UiUser>())\n    val usersFlow: StateFlow<List<UiUser>> = _usersFlow\n    fun load() {\n        viewModelScope.launch {\n            getUsersUseCase.execute()\n                .map {\n                    // Convert List<User> to List<UiUser>\n                }\n                .collect {\n                    _usersFlow.value = it\n                }\n        }\n    }\n}\n```", "```kt\n    buildscript {\n        …\n        dependencies {\n            classpath gradlePlugins.android\n            classpath gradlePlugins.kotlin\n            classpath gradlePlugins.hilt\n        }\n    }\n    ```", "```kt\n    buildscript {\n        ext {\n            …\n            versions = [\n                    …\n                    viewModel            : \"2.4.0\",\n                    navigationCompose    : \"2.4.0-rc01\",\n                    hiltNavigationCompose: \"1.0.0-rc01\",\n                    …\n            ]\n            …\n            androidx = [\n                    …\n                    viewModelKtx           : \"androidx.\n                        lifecycle:lifecycle-viewmodel-\n                            ktx:${versions.viewModel}\",\n                    viewModelCompose       : \"androidx.\n                        lifecycle:lifecycle-viewmodel- \n                           compose:${versions.viewModel}\",\n                    navigationCompose      : \"androidx.\n                    navigation:navigation-compose:$\n                        {versions.navigationCompose}\",\n                    hiltNavigationCompose  : \"androidx.\n                        hilt:hilt-navigation-compose:$\n                         {versions.hiltNavigationCompose}\"\n            ]\n            …\n        }\n        …\n    }\n    ```", "```kt\n    plugins {\n        id 'com.android.library'\n        id 'kotlin-android'\n        id 'kotlin-kapt'\n        id 'dagger.hilt.android.plugin'\n    }\n    ```", "```kt\n    android {\n        compileSdk defaultCompileSdkVersion\n        defaultConfig {\n            minSdk defaultMinSdkVersion\n            targetSdk defaultTargetSdkVersion\n            …\n        }\n        …\n        compileOptions {\n            sourceCompatibility javaCompileVersion\n            targetCompatibility javaCompileVersion\n        }\n        kotlinOptions {\n            jvmTarget = jvmTarget\n            useIR = true\n        }\n        buildFeatures {\n            compose true\n        }\n        composeOptions {\n            kotlinCompilerExtensionVersion versions.\n                compose\n        }\n    }\n    ```", "```kt\n    dependencies {\n        implementation(project(path: \":domain\"))\n        implementation coroutines.coroutinesAndroid\n        implementation androidx.composeUi\n        implementation androidx.composeMaterial\n        implementation androidx.viewModelKtx\n        implementation androidx.viewModelCompose\n        implementation androidx.lifecycleRuntimeKtx\n        implementation androidx.navigationCompose\n        implementation di.hiltAndroid\n        kapt di.hiltCompiler\n        testImplementation test.junit\n        testImplementation test.coroutines\n        testImplementation test.mockito\n    }\n    ```", "```kt\n    sealed class UiState<T : Any> {\n        object Loading : UiState<Nothing>()\n        data class Error<T : Any>(val errorMessage: \n            String) : UiState<T>()\n        data class Success<T : Any>(val data: T) : \n            UiState<T>()\n    }\n    ```", "```kt\n    data class PostListItemModel(\n        val id: Long,\n        val userId: Long,\n        val authorName: String,\n        val title: String\n    )\n    ```", "```kt\n    data class PostListModel(\n        val headerText: String = \"\",\n        val items: List<PostListItemModel> = listOf()\n    )\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"total_click_count\">Total click \n            count: %d</string>\n        <string name=\"author\">Author: %s</string>\n        <string name=\"title\">Title: %s</string>\n    </resources>\n    ```", "```kt\n    class PostListConverter @Inject constructor(@ApplicationContext private val context: Context) {\n        fun convert(postListResult: Result\n            <GetPostsWithUsersWithInteractionUseCase.\n                Response>): UiState<PostListModel> {\n            return when (postListResult) {\n                is Result.Error -> {\n                    UiState.Error(postListResult.\n                     exception.localizedMessage.orEmpty())\n                }\n                is Result.Success -> {\n                    UiState.Success(PostListModel(\n                        headerText = context.getString(\n                            R.string.total_click_count,\n                            postListResult.data.\n                                interaction.totalClicks\n                        ),\n                        items = postListResult.data.\n                            posts.map {\n                            PostListItemModel(\n                                it.post.id,\n                                it.user.id,\n                                context.getString(R.string.author, it.user.name),\n                                context.getString(R.string.title, it.post.title)\n                            )\n                        }\n                    ))\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @HiltViewModel\n    class PostListViewModel @Inject constructor(\n        private val useCase: \n            GetPostsWithUsersWithInteractionUseCase,\n        private val converter: PostListConverter\n    ) : ViewModel() {\n        private val _postListFlow =\n            MutableStateFlow<UiState\n                <PostListModel>>(UiState.Loading)\n        val postListFlow: \n            StateFlow<UiState<PostListModel>> = \n                _postListFlow\n        fun loadPosts() {\n            viewModelScope.launch {\n                useCase.execute\n                  (GetPostsWithUsersWithInteractionUseCase\n                       .Request)\n                    .map {\n                        converter.convert(it)\n                    }\n                    .collect {\n                        _postListFlow.value = it\n                    }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun Error(errorMessage: String) {\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.Bottom\n        ) {\n            Snackbar {\n                Text(text = errorMessage)\n            }\n        }\n    }\n    @Composable\n    fun Loading() {\n        Column(\n            modifier = Modifier.fillMaxSize(),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = \n                Alignment.CenterHorizontally,\n        ) {\n            CircularProgressIndicator()\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostList(\n        postListModel: PostListModel\n    ) {\n        LazyColumn(modifier = Modifier.padding(16.dp)) {\n            item(postListModel.headerText) {\n                Column(modifier = Modifier.padding(16.dp)) {\n                    Text(text = postListModel.headerText)\n                }\n            }\n            items(postListModel.items) { item ->\n                Column(\n                    modifier = Modifier\n                        .padding(16.dp)\n                ) {\n                    Text(text = item.authorName)\n                    Text(text = item.title)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostListScreen(\n        viewModel: PostListViewModel\n    ) {\n        viewModel.loadPosts()\n        viewModel.postListFlow.collectAsState().value.let { state ->\n            when (state) {\n                is UiState.Loading -> {\n                    Loading()\n                }\n                is UiState.Error -> {\n                    Error(state.errorMessage)\n                }\n                is UiState.Success -> {\n                    PostList(state.data)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    plugins {\n        id 'com.android.application'\n        id 'kotlin-android'\n        id 'kotlin-kapt'\n        id 'dagger.hilt.android.plugin'\n    }\n    ```", "```kt\n    dependencies {\n        implementation(project(path: \":presentation-\n            post\"))\n        implementation(project(path: \":domain\"))\n        implementation(project(path: \":data-remote\"))\n        implementation(project(path: \":data-local\"))\n        implementation(project(path: \":data-repository\"))\n        implementation androidx.core\n        implementation androidx.appCompat\n        implementation material.material\n        implementation androidx.composeUi\n        implementation androidx.composeMaterial\n        implementation androidx.composeUiToolingPreview\n        implementation androidx.lifecycleRuntimeKtx\n        implementation androidx.composeActivity\n        implementation androidx.navigationCompose\n        implementation androidx.hiltNavigationCompose\n        implementation di.hiltAndroid\n        kapt di.hiltCompiler\n        testImplementation test.junit\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class AppModule {\n        @Provides\n        fun provideUseCaseConfiguration() = \n            UseCase.Configuration(Dispatchers.IO)\n    }\n    ```", "```kt\n    @HiltAndroidApp\n    class PostApplication : Application()\n    ```", "```kt\n        <application\n            …\n            android:name=\".PostApplication\"\n            …\n       >\n    ```", "```kt\n    @AndroidEntryPoint\n    class MainActivity : ComponentActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContent {\n                CleanAppTheme {\n                    Surface(color = MaterialTheme.\n                        colors.background) {\n                        val navController = \n                            rememberNavController()\n                        App(navController = navController)\n                    }\n                }\n            }\n        }\n    }\n    @Composable\n    fun App(navController: NavHostController) {\n        NavHost(navController, startDestination = \n            \"/posts\") {\n            composable(route = \"/posts\") {\n                PostListScreen(hiltViewModel())\n            }\n        }\n    }\n    ```", "```kt\nprivate const val ROUTE_USERS = \"users\"\nprivate const val ROUTE_USER = \"users/%s\"\nprivate const val ARG_USER_NAME = \"name\"\nsealed class AppNavigation(val route: String, val \n    argumentName: String = \"\") {\n    object Users : AppNavigation(ROUTE_USERS)\n    object User : AppNavigation(String.format(ROUTE_USER, \n        \"{$ARG_USER_NAME}\"), ARG_USER_NAME) {\n        fun routeForName(name: String) = \n            String.format(ROUTE_USER, name)\n    }\n}\n```", "```kt\n@Composable\nfun Error(errorMessage: String) {\n    …\n}\n@Composable\nfun Loading() {\n    …\n} \n```", "```kt\n@Composable\nfun <T> CommonScreen(state: State<T>, onSuccess: \n    @Composable (T) -> Unit) {\n    when (result) {\n        is State.Success -> {\n            onSuccess(result.data)\n        }\n        is State.Error -> {\n            Error(result.errorMessage)\n        }\n        is State.Loading -> {\n            Loading()\n        }\n    }\n}\n```", "```kt\n    dependencies {\n        …\n        implementation(project(path: \":presentation-common\"))\n        …\n    }\n    ```", "```kt\n    abstract class CommonResultConverter<T : Any, R : Any> {\n        fun convert(result: Result<T>): UiState<R> {\n            return when (result) {\n                is Result.Error -> {\n                    UiState.Error(result.exception.\n                        localizedMessage.orEmpty())\n                }\n                is Result.Success -> {\n                    UiState.Success(convertSuccess\n                        (result.data))\n                }\n            }\n        }\n        abstract fun convertSuccess(data: T): R\n    }\n    ```", "```kt\n    class PostListConverter @Inject constructor (@ApplicationContext private val context: Context) :\n        CommonResultConverter<GetPostsWithUsersWithInteraction\n        UseCase.Response, PostListModel>() {\n        override fun convertSuccess(data: \n            GetPostsWithUsersWithInteractionUseCase.\n                Response): PostListModel {\n            return PostListModel(\n                headerText = context.getString(\n                    R.string.total_click_count,\n                    data.interaction.totalClicks\n                ),\n                items = data.posts.map {\n                    PostListItemModel(\n                        it.post.id,\n                        it.user.id,\n                        context.getString(R.string.author, \n                            it.user.name),\n                        context.getString(R.string.title, \n                            it.post.title)\n                    )\n                }\n            )\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun <T : Any> CommonScreen(state: UiState<T>, onSuccess: @Composable (T) -> Unit) {\n        when (state) {\n            is UiState.Loading -> {\n                Loading()\n            }\n            is UiState.Error -> {\n                Error(errorMessage = state.errorMessage)\n            }\n            is UiState.Success -> {\n                onSuccess(state.data)\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostListScreen(\n        viewModel: PostListViewModel\n    ) {\n        viewModel.loadPosts()\n        viewModel.postListFlow.collectAsState().value.let \n            { state ->\n            CommonScreen(state = state) {\n                PostList(postListModel = it)\n            }\n        }\n    }\n    ```", "```kt\n    data class PostInput(val postId: Long)\n    ```", "```kt\n    data class UserInput(val userId: Long)\n    ```", "```kt\n    private const val ROUTE_POSTS = \"posts\"\n    private const val ROUTE_POST = \"posts/%s\"\n    private const val ROUTE_USER = \"users/%s\"\n    private const val ARG_POST_ID = \"postId\"\n    private const val ARG_USER_ID = \"userId\"\n    sealed class NavRoutes(\n        val route: String,\n        val arguments: List<NamedNavArgument> = \n            emptyList()\n    ) {\n        …\n    }\n    ```", "```kt\n    sealed class NavRoutes(\n        val route: String,\n        val arguments: List<NamedNavArgument> = \n            emptyList()\n    ) {\n        object Posts : NavRoutes(ROUTE_POSTS)\n    }\n    ```", "```kt\n    sealed class NavRoutes(\n        val route: String,\n        val arguments: List<NamedNavArgument> = \n            emptyList()\n    ) {\n        object Post : NavRoutes(\n            route = String.format(ROUTE_POST, \n                \"{$ARG_POST_ID}\"),\n            arguments = listOf(navArgument(ARG_POST_ID) {\n                type = NavType.LongType\n            })\n        ) {\n            fun routeForPost(postInput: PostInput) = \n               String.format(ROUTE_POST, postInput.postId)\n            fun fromEntry(entry: NavBackStackEntry): \n                PostInput {\n                return PostInput(entry.arguments?.\n                    getLong(ARG_POST_ID) ?: 0L)\n            }\n        }\n    }\n    ```", "```kt\n    sealed class NavRoutes(\n        val route: String,\n        val arguments: List<NamedNavArgument> = emptyList()\n    ) {\n        object User : NavRoutes(\n            route = String.format(ROUTE_USER, \n                \"{$ARG_USER_ID}\"),\n            arguments = listOf(navArgument(ARG_USER_ID) {\n                type = NavType.LongType\n            })\n        ) {\n            fun routeForUser(userInput: UserInput) = \n               String.format(ROUTE_USER, userInput.userId)\n            fun fromEntry(entry: NavBackStackEntry): \n                UserInput {\n                return UserInput(entry.arguments?.getLong\n                    (ARG_USER_ID) ?: 0L)\n            }\n        }\n    }\n    ```", "```kt\n    data class PostModel(\n        val title: String,\n        val body: String\n    )\n    ```", "```kt\n    class PostConverter @Inject constructor(@ApplicationContext private val context: Context) :\n        CommonResultConverter<GetPostUseCase.Response, \n            PostModel>() {\n        override fun convertSuccess(data: \n            GetPostUseCase.Response): PostModel {\n            return PostModel(\n                context.getString(R.string.title, \n                    data.post.title),\n                context.getString(R.string.body, \n                    data.post.body)\n            )\n        }\n    }\n    ```", "```kt\n    <resources>\n        …\n        <string name=\"body\">Body: %s</string>\n    </resources>\n    ```", "```kt\n    @HiltViewModel\n    class PostViewModel @Inject constructor(\n        private val postUseCase: GetPostUseCase,\n        private val postConverter: PostConverter\n    ) : ViewModel() {\n        private val _postFlow =\n            MutableStateFlow<UiState<PostModel>>(UiState.Loading)\n        val postFlow: StateFlow<UiState<PostModel>> = \n            _postFlow\n        fun loadPost(postId: Long) {\n            viewModelScope.launch {\n                postUseCase.execute(GetPostUseCase.\n                    Request(postId))\n                    .map {\n                        postConverter.convert(it)\n                    }\n                    .collect {\n                        _postFlow.value = it\n                    }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostScreen(\n        viewModel: PostViewModel,\n        postInput: PostInput\n    ) {\n        viewModel.loadPost(postInput.postId)\n        viewModel.postFlow.collectAsState().value.let { \n            result ->\n            CommonScreen(result) { postModel ->\n                Post(postModel)\n            }\n        }\n    }\n    @Composable\n    fun Post(postModel: PostModel) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            Text(text = postModel.title)\n            Text(text = postModel.body)\n        }\n    }\n    ```", "```kt\n    data class UserModel(\n        val name: String,\n        val username: String,\n        val email: String\n    )\n    ```", "```kt\n    class UserConverter @Inject constructor(@ApplicationContext private val context: Context) :\n        CommonResultConverter<GetUserUseCase.Response, \n            UserModel>() {\n\n        override fun convertSuccess(data: GetUserUseCase.\n            Response): UserModel {\n            return UserModel(\n                context.getString(R.string.name,\n                    data.user.name),\n                context.getString(R.string.username, \n                    data.user.username),\n                context.getString(R.string.email, \n                    data.user.email)\n            )\n        }\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n        <string name=\"name\">Name: %s</string>\n        <string name=\"username\">Username: %s</string>\n        <string name=\"email\">Email: %s</string>\n    </resources>\n    ```", "```kt\n    @HiltViewModel\n    class UserViewModel @Inject constructor(\n        private val userUseCase: GetUserUseCase,\n        private val converter: UserConverter\n    ) : ViewModel() {\n        private val _userFlow =\n            MutableStateFlow<UiState<UserModel>>\n                (UiState.Loading)\n        val userFlow: StateFlow<UiState<UserModel>> = \n            _userFlow\n        fun loadUser(userId: Long) {\n            viewModelScope.launch {\n                userUseCase.execute\n                    (GetUserUseCase.Request(userId))\n                    .map {\n                        converter.convert(it)\n                    }\n                    .collect {\n                        _userFlow.value = it\n                    }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun UserScreen(\n        viewModel: UserViewModel,\n        userInput: UserInput\n    ) {\n        viewModel.loadUser(userInput.userId)\n        viewModel.userFlow.collectAsState().value.let { \n            result ->\n            CommonScreen(result) { userModel ->\n                User(userModel)\n            }\n        }\n    }\n    @Composable\n    fun User(userModel: UserModel) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            Text(text = userModel.name)\n            Text(text = userModel.username)\n            Text(text = userModel.email)\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostList(\n        postListModel: PostListModel,\n        onRowClick: (PostListItemModel) -> Unit,\n        onAuthorClick: (PostListItemModel) -> Unit\n    ) {\n        LazyColumn(modifier = Modifier.padding(16.dp)) {\n            …\n            items(postListModel.items) { item ->\n                Column(modifier = Modifier\n                    .padding(16.dp)\n                    .clickable {\n                        onRowClick(item)\n                    }) {\n                    ClickableText(text = AnnotatedString(\n                        text = item.authorName), onClick =  \n                    {\n                        onAuthorClick(item)\n                    })\n                    Text(text = item.title)\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostListScreen(\n        viewModel: PostListViewModel,\n        navController: NavController\n    ) {\n        viewModel.loadPosts()\n        viewModel.postListFlow.collectAsState().value.let \n            { state ->\n            CommonScreen(state = state) {\n                PostList(it, { postListItem ->\n                    navController.navigate(NavRoutes.Post.\n                        routeForPost(PostInput\n                            (postListItem.id)))\n                }) { postListItem ->\n                    navController.navigate(NavRoutes.User.\n                        routeForUser(UserInput\n                            (postListItem.userId)))\n                }\n            }\n        }\n    }\n    ```", "```kt\n    dependencies {\n        …\n        implementation(project(path: \":presentation-\n            user\"))\n        implementation(project(path: \":presentation-\n            common\"))\n        …\n    }\n    ```", "```kt\n    @Composable\n    fun App(navController: NavHostController) {\n        NavHost(navController, startDestination = \n            NavRoutes.Posts.route) {\n            composable(route = NavRoutes.Posts.route) {\n                PostListScreen(hiltViewModel(), \n                    navController)\n            }\n            composable(\n                route = NavRoutes.Post.route,\n                arguments = NavRoutes.Post.arguments\n            ) {\n                PostScreen(\n                    hiltViewModel(),\n                    NavRoutes.Post.fromEntry(it)\n                )\n            }\n            composable(\n                route = NavRoutes.User.route,\n                arguments = NavRoutes.User.arguments\n            ) {\n                UserScreen(\n                    hiltViewModel(),\n                    NavRoutes.User.fromEntry(it)\n                )\n            }\n        }\n    }\n    ```", "```kt\n    data class PostListModel(\n        …\n        val interaction: Interaction\n    )\n    ```", "```kt\n    class PostListConverter @Inject constructor (@ApplicationContext private val context: Context) :\n        CommonResultConverter<GetPostsWithUsersWithInteraction\n        UseCase.Response, PostListModel>() {\n        override fun convertSuccess(data: \n            GetPostsWithUsersWithInteractionUseCase.\n                Response): PostListModel {\n            return PostListModel(\n                …\n                interaction = data.interaction\n            )\n        }\n    }\n    ```", "```kt\n    @HiltViewModel\n    class PostListViewModel @Inject constructor(\n        …\n        private val updateInteractionUseCase: \n            UpdateInteractionUseCase\n    ) : ViewModel() {\n        …\n        fun updateInteraction(interaction: Interaction) {\n            viewModelScope.launch {\n                updateInteractionUseCase.execute(\n                    UpdateInteractionUseCase.Request(\n                        interaction.copy(\n                            totalClicks = interaction.\n                                totalClicks + 1\n                        )\n                    )\n                ).collect()\n            }\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun PostListScreen(\n        viewModel: PostListViewModel,\n        navController: NavController\n    ) {\n        …\n        viewModel.postListFlow.collectAsState().value.let \n            { state ->\n            CommonScreen(state = state) {\n                PostList(it, { postListItem ->\n                    viewModel.updateInteraction(it.interaction)\n                    …\n                }) { postListItem ->\n                    viewModel.updateInteraction(it.interaction)\n                    …\n                }\n            }\n        }\n    }\n    ```"]