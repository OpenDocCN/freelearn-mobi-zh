- en: '*Chapter 15*: Getting Started with Table Views'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you configured the `ExploreViewController` class, the
    view controller for the `ExploreData.plist` in a collection view.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll start by learning about table views and table view controllers.
    You'll implement a table view programmatically (which means implementing it using
    code instead of storyboards) using a playground, to understand how table views
    work. Next, you'll create a table view controller for the `.plist` file from scratch
    to hold a list of locations, create a data manager class to read data from the
    `.plist` file, and configure the table view controller to get data from the data
    manager and provide it to the table view. The **Locations** screen will then display
    a list of restaurant locations.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to create `.plist` files,
    and how to implement table view controllers. This will enable you to implement
    `.plist` files and table views that use `.plist` files for a data source in your
    own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding table views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `LocationViewController` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding location data for the table view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `LocationDataManager` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will start by working in a playground, then you will continue working on
    the `LetsEat` project that you modified in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The playground and completed Xcode project for this chapter are in the `Chapter15`
    folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3obiApY](https://bit.ly/3obiApY)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by learning more about how a table view works by implementing a
    view controller that manages a table view in a playground. Create a new playground
    and name it `TableViewBasics`. You can type in and run all the code shown in the
    upcoming sections as you go along.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding table views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Let's Eat* app uses a table view in the **Locations** screen to display
    a list of restaurant locations. A table view presents table view cells using rows
    arranged in a single column.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about table views, visit [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview).
  prefs: []
  type: TYPE_NORMAL
- en: The data displayed by a table view is normally provided by a view controller.
    A view controller providing data for a table view must conform to the `UITableViewDataSource`
    protocol. This protocol declares a list of methods that tells the table view how
    many cells to display and what to display in each cell.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UITableViewDataSource` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource).
  prefs: []
  type: TYPE_NORMAL
- en: To provide user interaction, a view controller for a table view must also conform
    to the `UITableViewDelegate` protocol, which declares a list of methods which
    are triggered when a user interacts with the table view.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `UITableViewDelegate` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate).
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn how table views work, you''ll implement a view controller subclass
    that controls a table view in your `TableViewBasics` playground. Since there is
    no storyboard in the playground, you can''t add the UI elements using the library,
    as you did in the previous chapters. Instead, you will do everything programmatically.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your `TableViewBasics` playground that you have created at the beginning
    of this chapter. At the very top of the playground, remove the `var` statement
    and add an `import PlaygroundSupport` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your playground should now contain the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after the `import` statements to declare the `TableViewExampleController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code inside the curly braces to declare a table view property
    and an array property to the `TableViewExampleController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add some code to make the `TableViewExampleController` class conform
    to the `UITableViewDataSource` protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDataSource`
    protocol, type a comma after the superclass name and then type `UITableViewDataSource`.
    Your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An error will appear because you haven''t implemented the two required methods.
    Click the error icon:![Figure 15.1: Editor area showing error icon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.1: Editor area showing error icon'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The error message that appears states that the required methods for the `UITableViewDataSource`
    protocol are missing. Click the **Fix** button to add the required method stubs
    to the class:![Figure 15.2: Error explanation and Fix button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.2: Error explanation and Fix button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a class definition, convention dictates that properties are declared at
    the top before any method declarations. Rearrange the code so that the property
    declarations are at the top, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the table view display a row for each element inside the `names` array,
    click the word `code` inside the `tableView(_:numberOfRowsInSection:)` method
    definition and type in `names.count`. The completed method should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the table view display names in each cell, click the word `code` inside
    the `tableView(_:cellForRowAt:)` method definition and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: let name = names[indexPath.row]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: cell.textLabel?.text = name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: return cell
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that your `TableViewExampleController` class looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have completed the implementation of the `TableViewExampleController` class.
    Now you will write a method, `createTableView()`, to create an instance of it.
    Type in the following code after the property declarations to declare and define
    the `createTableView()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This creates a new instance of `UITableView` that is exactly the same size as
    its enclosing view, and assigns it to `tableView`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This tells the table view that its data source is an instance of `TableViewExampleController`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This sets the table view's background color to white.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This sets the reuse identifier for the table view cells to `"Cell"`. This reuse
    identifier will be used in the `tableView(_:cellForRowAt:)` method to identify
    the cells that can be reused.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This adds the table view as a subview to the view of the `TableViewExampleController`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have to call this method. The `UIViewController` class has a method,
    `viewDidLoad()`, that is called when its view is loaded. This method is inherited
    by the `TableViewExampleController` class, and you''ll override it to call `createTableView()`.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type in the following code, before the `createTableView()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This sets the size of the live view, creates a table view and adds it as a subview
    to the view of the `TableViewExampleController` instance. The data source methods
    are then used to determine how many table view cells to display, as well as what
    to put in each table view cell. `tableView(_:numberOfRowsInSection:)` returns
    `3`, so three rows are displayed. `tableView(_:cellForRowAt:)` sets the text of
    each cell to the corresponding name in the `names` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that your completed code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following after all the other code in the playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command creates an instance of `TableViewExampleController` and displays
    its view in the playground's live view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the playground. If you don''t see the table view, click the Adjust Editor
    Options button:![Figure 15.3: Adjust Editor Options button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.3: Adjust Editor Options button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make sure **Live View** is selected from the pop-up menu:![Figure 15.4: Adjust
    Editor Options menu with Live View selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.4: Adjust Editor Options menu with Live View selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the table view displaying a table with three rows containing names,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5: Playground Live View showing table view with names'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.5: Playground Live View showing table view with names'
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now that you know how table views work, let's complete the implementation
    for the **Locations** screen. You'll start by creating a view controller for this
    screen in the next section, so that it can manage what the table view will display.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the LocationViewController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, the `locationCell`. Referring to the **Model-View-Controller**
    (**MVC**) design pattern, you have completed the required views, but you haven't
    completed the controller or the model yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, when you click the **LOCATION** button in the **Explore** screen,
    an empty table view is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6: iOS Simulator showing Locations screen from your app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.6: iOS Simulator showing Locations screen from your app'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create the `LocationViewController` class as the view controller for
    the **Locations** screen, add an outlet for the table view to it, and configure
    it as the table view''s data source and delegate. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `LetsEat` project from the previous chapter. Create a new folder,
    `Location`, inside your project by right-clicking the `LetsEat` folder and choosing
    `View` and `Model`, inside the `Location` folder. When you''re done, you will
    see the following folder structure:![Figure 15.7: Project navigator showing Location
    folder and subfolders'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.7: Project navigator showing Location folder and subfolders'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `Location` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the class with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LocationViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Unchecked`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `LocationViewController` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `LocationViewController` file has been created, with the `LocationViewController`
    class declaration inside it. Now you''ll set the identity of the view controller
    scene that''s presented when you tap the **LOCATION** button to this class. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Main` storyboard file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the view controller scene that''s presented when you click on the `LocationViewController`.
    Note the name of the scene will change to **Location View Controller Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.8: Identity inspector settings for Location View Controller Scene'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.8: Identity inspector settings for Location View Controller Scene'
  prefs: []
  type: TYPE_NORMAL
- en: Cool! In the next section, let's connect the table view to an outlet in the
    `LocationViewController` class. By doing this, the `LocationViewController` instance
    for the **Locations** screen will be able to manage the table view.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the table view to the LocationViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the `LocationViewController` instance for the `LocationViewController`
    class and assign the table view to it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas, if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Adjust Editor Options button and choose **Assistant** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Main` storyboard file, click the table view in the document outline.
    The assistant editor should be set to **Automatic > LocationViewController.swift**
    as shown:![Figure 15.9: Assistant editor bar showing LocationViewController.swift'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.09_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.9: Assistant editor bar showing LocationViewController.swift'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from `viewDidLoad()`:![Figure 15.10: Editor area showing LocationViewController
    file contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.10: Editor area showing LocationViewController file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the pop-up menu, enter `tableView` in the **Name** field and click **Connect**:![Figure
    15.11: Pop-up dialog box for tableView outlet creation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.11: Pop-up dialog box for tableView outlet creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify the `tableView` outlet has been added to the `LocationViewController`
    class and connected to the table view in the storyboard:![Figure 15.12: Editor
    area showing LocationViewController file contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.12: Editor area showing LocationViewController file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **x** button to close the assistant editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.13: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.13_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.13: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: You've connected the table view to an outlet in the `LocationViewController`
    class. In order for a table view to display data and respond to user interaction,
    the `LocationViewController` class has to conform to the `UITableViewDataSource`
    and `UITableViewDelegate` protocols and implement the required methods. You will
    do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the data source and delegate methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A view controller for a table view has to adopt the `UITableViewDataSource`
    and `UITableViewDelegate` protocols, as well as implement the required methods
    to allow data display and user interaction. In this section, you''ll connect `LocationViewController`
    to the table view''s `dataSource` and `delegate` outlets and implement the required
    data source methods. You will implement delegate methods in [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*,
    Getting Started with JSON Files*. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to show the Navigator and Inspector
    areas, if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Main` storyboard file, make sure you have the table view selected in
    the document outline. Click the Connections inspector button. Click and drag from
    the `dataSource` and `delegate` outlets to the `LocationViewController` icon in
    the document outline:![Figure 15.14: Connections Inspector showing outlets for
    the LocationViewController class'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.14: Connections Inspector showing outlets for the LocationViewController
    class'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This connects the table view to outlets to the `LocationViewController` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify the `dataSource` and `delegate` properties of the table view have been
    connected to outlets in the `LocationViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.15: Connections Inspector with datasource and delegate outlets
    set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.15_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.15: Connections Inspector with datasource and delegate outlets set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will make `LocationViewController` conform to the `UITableViewDataSource`
    protocol and implement the required methods for this protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `LocationViewController` file in the Project navigator and remove
    all the commented code in the `LocationViewController` class definition so that
    only the following is left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make `LocationViewController` adopt the `UITableViewDataSource` protocol,
    type a comma after the superclass name, `UIViewController`, and type in `UITableViewDataSource`.
    When you are done, your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An error will appear because you haven''t implemented the two required methods
    yet. Click the error icon to see the error message:![Figure 15.16: Editor area
    showing error icon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.16: Editor area showing error icon'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Fix** button to add the required method stubs to the class:![Figure
    15.17: Error explanation and Fix button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.17: Error explanation and Fix button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Rearrange the code so that the property declarations and the `viewDidLoad()`
    method are at the top. This follows general iOS development coding conventions
    and it makes your code easier to maintain. When you''re done, verify that your
    code looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the first required method, click the word `code` and type `10`. This
    will make the table view display 10 rows. The complete method should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the second required method, click the word `code` and type the following
    to make the table view display the string `"A Cell"` in each row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: cell.textLabel?.text = "A Cell"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: return cell
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your project. Click the `A Cell` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18: iOS Simulator showing table view cells'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.18: iOS Simulator showing table view cells'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed the implementation of the `LocationsViewController` class,
    and your table view is now displaying table view cells. Great! Now that your table
    view's view controller has been set up, let's create some model objects in the
    next section so that you can provide data for it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding location data for the table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, you have created and configured the `LocationViewController`
    class. An instance of this class will act as the data source for the table view
    in the `.plist` file that contains location data, but instead of using an existing
    `.plist` file, you''ll create one from scratch and add location data to it. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder in the `Location` folder and choose **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`proper` into the filter field; **Property List** will appear in the window.
    Choose **Property List** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `Locations`, and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Locations.plist` file has been added to the project. In the previous chapter,
    you''ve seen how `ExploreData.plist` stores data as an array of dictionaries.
    You will configure `Locations.plist` so that it stores data for the **Locations**
    screen in the same format, and then add all the restaurant locations to it. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Locations.plist` and change it to **Array**. Note that the disclosure
    triangle on the left should be pointing down. Click the **+** button:![Figure
    15.19: Editor area showing Locations.plist contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.19: Editor area showing Locations.plist contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A new item, **Item 0**, will be added to the array. Change the type to **Dictionary**.
    Click the disclosure triangle to make it point down. Click the **+** button:![Figure
    15.20: Locations.plist with Item 0 added'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.20: Locations.plist with Item 0 added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A new item, **New Item**, will be added to the **Item 0** dictionary. Click
    the **+** button:![Figure 15.21: Locations.plist with New item added'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.21: Locations.plist with New item added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A second item will be added to the `city` and the value to `Aspen`. For the
    second item, change the key to `state` and the value to `CO`:![Figure 15.22: Locations.plist
    with city and state added to Item 0'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.22: Locations.plist with city and state added to Item 0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the disclosure triangle next to the **Item 0** dictionary to collapse
    it:![Figure 15.23: Locations.plist with Item 0 collapsed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.23_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.23: Locations.plist with Item 0 collapsed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select **Item 0** and press *Command + C* on the keyboard to copy it and *Command
    + V* to paste. You will see a new item, **Item 1**:![Figure 15.24: Locations.plist
    with Item 0 copied and pasted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.24_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.24: Locations.plist with Item 0 copied and pasted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the disclosure triangle next to the `Boston` and the state to `MA`:![Figure
    15.25: Locations.plist with Item 1 configured'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.25_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.25: Locations.plist with Item 1 configured'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Continue with the same process by adding the following cities and states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_15.26_B17469.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The completed `.plist` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.26: Locations.plist completed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.27_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.26: Locations.plist completed'
  prefs: []
  type: TYPE_NORMAL
- en: The `Locations.plist` file is complete. In the next section, you will create
    a data manager class, similar to the one you made in the previous chapter, that
    will read the `Locations.plist` file and provide it to the `LocationViewController`
    instance for the **Locations** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the LocationDataManager class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As what you''ve done in the previous chapter, you''ll create a data manager
    class to load the location data from `Locations.plist` and provide it to the `LocationsViewController`
    instance for the **Locations** screen. The data will then be used to populate
    the table view in the **Locations** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder in the `Location` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `LocationDataManager` and click `Create`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `LocationDataManager` file in the Project navigator and after
    the `import` statement, type in the following to declare the `LocationDataManager`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the curly braces, add an array property, `locations`, to hold the list
    of locations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `private` keyword means that the `locations` property may only be accessed
    by methods in this class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following methods after the property declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These methods are similar to those in `ExploreDataManager`. Let''s break it
    down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Loads the contents of `Locations.plist` and returns an array of dictionaries.
    Each dictionary stores the city and state of a location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Takes the array provided by `loadData()`, concatenates the `city` and `state`
    for each element, and appends the resulting string to the `locations` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns the number of elements in the `locations` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns a string stored in the `locations` array at a given array index.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the `LocationDataManager` class is complete, let's configure the `LocationViewController`
    class so that it can get data from the `LocationDataManager` instance and provide
    it to the table view. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in a table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the `"A Cell"`. You will update the `LocationViewController` class
    to use the `LocationDataManager` instance as a data source. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `LocationViewController` file in the Project navigator. In the `LocationViewController`
    class definition before the `viewDidLoad()` method, create an instance of `LocationDataManager`
    and assign it to a property, `manager`, by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `viewDidLoad()` method, fetch the data for the table view by calling
    `manager.fetch()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `tableView(_:numberOfRowsInSection:)` so it can get the number of rows
    to display in the table view from `manager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `tableView(_:cellForRowAt:)` as shown to make the table view display
    a string containing the city and state in every table view cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your app. You should see the locations from `ExploreData.plist`
    displayed in the table view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.27: iOS Simulator showing completed Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.28_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.27: iOS Simulator showing completed Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: You've completed the implementation of the **Locations** screen. Good job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about table views and table view controllers, and
    you implemented a view controller for a table view in a playground. Next, you
    implemented the `LocationViewController` class, a table view controller for the
    `.plist` file from scratch called `Locations.plist` to hold a list of locations.
    You created a data manager class, `LocationDataManager`, to read data from the
    `.plist` file. Finally, you configured the `LocationViewController` class to get
    data from the `LocationDataManager` instance and provide it to the table view
    so that the **Locations** screen displays a list of restaurant locations.
  prefs: []
  type: TYPE_NORMAL
- en: This will enable you to create `.plist` files from scratch to store data, and
    to implement table views that use `.plist` files as a data source for your own
    apps. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will add a map view to the **Map** screen and configure
    it to display restaurant locations. You'll also set up custom annotations for
    the **Map** screen and set up the **Restaurant Detail** screen, which will be
    displayed when a button in the annotation callout is tapped.
  prefs: []
  type: TYPE_NORMAL
