- en: '*Chapter 15*: Getting Started with Table Views'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 15 章*：开始使用表格视图'
- en: In the previous chapter, you configured the `ExploreViewController` class, the
    view controller for the `ExploreData.plist` in a collection view.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您配置了 `ExploreViewController` 类，这是 `ExploreData.plist` 在集合视图中的视图控制器。
- en: In this chapter, you'll start by learning about table views and table view controllers.
    You'll implement a table view programmatically (which means implementing it using
    code instead of storyboards) using a playground, to understand how table views
    work. Next, you'll create a table view controller for the `.plist` file from scratch
    to hold a list of locations, create a data manager class to read data from the
    `.plist` file, and configure the table view controller to get data from the data
    manager and provide it to the table view. The **Locations** screen will then display
    a list of restaurant locations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将从学习表格视图和表格视图控制器开始。您将使用 playground 以编程方式实现表格视图（这意味着使用代码而不是 storyboards
    实现），以了解表格视图的工作原理。接下来，您将从头开始创建一个用于 `.plist` 文件的表格视图控制器，以保存位置列表，创建一个数据管理类以从 `.plist`
    文件中读取数据，并配置表格视图控制器以从数据管理器获取数据并将其提供给表格视图。然后，**位置** 屏幕将显示餐厅位置列表。
- en: By the end of this chapter, you'll have learned how to create `.plist` files,
    and how to implement table view controllers. This will enable you to implement
    `.plist` files and table views that use `.plist` files for a data source in your
    own apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何创建 `.plist` 文件，以及如何实现表格视图控制器。这将使您能够在自己的应用中实现使用 `.plist` 文件作为数据源的
    `.plist` 文件和表格视图。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding table views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解表格视图
- en: Creating the `LocationViewController` class
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `LocationViewController` 类
- en: Adding location data for the table view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为表格视图添加位置数据
- en: Creating the `LocationDataManager` class
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `LocationDataManager` 类
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will start by working in a playground, then you will continue working on
    the `LetsEat` project that you modified in the previous chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先在 playground 中工作，然后继续在上一章中修改的 `LetsEat` 项目上工作。
- en: 'The playground and completed Xcode project for this chapter are in the `Chapter15`
    folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 playground 和完成的 Xcode 项目位于本书代码包的 `Chapter15` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际效果：
- en: '[https://bit.ly/3obiApY](https://bit.ly/3obiApY)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3obiApY](https://bit.ly/3obiApY)'
- en: Let's begin by learning more about how a table view works by implementing a
    view controller that manages a table view in a playground. Create a new playground
    and name it `TableViewBasics`. You can type in and run all the code shown in the
    upcoming sections as you go along.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从通过在 playground 中实现一个管理表格视图的视图控制器来了解表格视图的工作原理开始。创建一个新的 playground 并将其命名为
    `TableViewBasics`。您可以在接下来的部分中输入并运行所有显示的代码。
- en: Understanding table views
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解表格视图
- en: The *Let's Eat* app uses a table view in the **Locations** screen to display
    a list of restaurant locations. A table view presents table view cells using rows
    arranged in a single column.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*Let''s Eat* 应用在 **位置** 屏幕中使用表格视图来显示餐厅位置列表。表格视图使用单列排列的行来呈现表格视图单元格。'
- en: Important Information
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about table views, visit [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于表格视图的信息，请访问 [https://developer.apple.com/documentation/uikit/uitableview](https://developer.apple.com/documentation/uikit/uitableview)。
- en: The data displayed by a table view is normally provided by a view controller.
    A view controller providing data for a table view must conform to the `UITableViewDataSource`
    protocol. This protocol declares a list of methods that tells the table view how
    many cells to display and what to display in each cell.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图显示的数据通常由视图控制器提供。为表格视图提供数据的视图控制器必须遵守 `UITableViewDataSource` 协议。此协议声明了一个方法列表，告诉表格视图显示多少个单元格以及每个单元格中显示什么内容。
- en: Important Information
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about the `UITableViewDataSource` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UITableViewDataSource` 协议的信息，请访问 [https://developer.apple.com/documentation/uikit/uitableviewdatasource](https://developer.apple.com/documentation/uikit/uitableviewdatasource)。
- en: To provide user interaction, a view controller for a table view must also conform
    to the `UITableViewDelegate` protocol, which declares a list of methods which
    are triggered when a user interacts with the table view.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供用户交互，表格视图的视图控制器还必须遵守 `UITableViewDelegate` 协议，该协议声明了一系列在用户与表格视图交互时被触发的方法。
- en: Important Information
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To learn more about the `UITableViewDelegate` protocol, visit [https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `UITableViewDelegate` 协议的信息，请访问 [https://developer.apple.com/documentation/uikit/uitableviewdelegate](https://developer.apple.com/documentation/uikit/uitableviewdelegate)。
- en: 'To learn how table views work, you''ll implement a view controller subclass
    that controls a table view in your `TableViewBasics` playground. Since there is
    no storyboard in the playground, you can''t add the UI elements using the library,
    as you did in the previous chapters. Instead, you will do everything programmatically.
    Follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解表格视图是如何工作的，你将实现一个视图控制器子类来控制你的 `TableViewBasics` 游乐场中的表格视图。由于游乐场中没有故事板，你不能像前几章那样使用库来添加
    UI 元素。相反，你将完全通过编程方式完成所有操作。按照以下步骤操作：
- en: Open your `TableViewBasics` playground that you have created at the beginning
    of this chapter. At the very top of the playground, remove the `var` statement
    and add an `import PlaygroundSupport` statement.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你在本章开头创建的 `TableViewBasics` 游乐场。在游乐场的最顶部，删除 `var` 语句并添加 `import PlaygroundSupport`
    语句。
- en: 'Your playground should now contain the following:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的游乐场现在应该包含以下内容：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code after the `import` statements to declare the `TableViewExampleController`
    class:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `import` 语句之后添加以下代码以声明 `TableViewExampleController` 类：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This class is a subclass of `UIViewController`, a class that Apple provides
    to manage views on the screen.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此类是 `UIViewController` 的子类，这是一个苹果公司提供的用于管理屏幕上视图的类。
- en: 'Add the following code inside the curly braces to declare a table view property
    and an array property to the `TableViewExampleController` class:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号内添加以下代码以声明 `TableViewExampleController` 类的表格视图属性和数组属性：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s add some code to make the `TableViewExampleController` class conform
    to the `UITableViewDataSource` protocol. Follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些代码使 `TableViewExampleController` 类遵守 `UITableViewDataSource` 协议。按照以下步骤操作：
- en: 'To make the `TableViewExampleController` class adopt the `UITableViewDataSource`
    protocol, type a comma after the superclass name and then type `UITableViewDataSource`.
    Your code should look like this:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使 `TableViewExampleController` 类采用 `UITableViewDataSource` 协议，在超类名称后输入一个逗号，然后输入
    `UITableViewDataSource`。你的代码应如下所示：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'An error will appear because you haven''t implemented the two required methods.
    Click the error icon:![Figure 15.1: Editor area showing error icon'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会出现一个错误，因为你还没有实现两个必需的方法。点击错误图标：![图15.1：显示错误图标的编辑区域
- en: '](img/Figure_15.01_B17469.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.01_B17469.jpg)'
- en: 'Figure 15.1: Editor area showing error icon'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.1：显示错误图标的编辑区域
- en: 'The error message that appears states that the required methods for the `UITableViewDataSource`
    protocol are missing. Click the **Fix** button to add the required method stubs
    to the class:![Figure 15.2: Error explanation and Fix button'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现的错误信息表明缺少 `UITableViewDataSource` 协议所需的两个方法。点击 **修复** 按钮将必需的方法存根添加到类中：![图15.2：错误解释和修复按钮
- en: '](img/Figure_15.02_B17469.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.02_B17469.jpg)'
- en: 'Figure 15.2: Error explanation and Fix button'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.2：错误解释和修复按钮
- en: 'Verify that your code looks like this:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的代码看起来像这样：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In a class definition, convention dictates that properties are declared at
    the top before any method declarations. Rearrange the code so that the property
    declarations are at the top, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类定义中，惯例规定属性应在任何方法声明之前在顶部声明。重新排列代码，使属性声明在顶部，如下所示：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make the table view display a row for each element inside the `names` array,
    click the word `code` inside the `tableView(_:numberOfRowsInSection:)` method
    definition and type in `names.count`. The completed method should look like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使表格视图为 `names` 数组中的每个元素显示一行，请在 `tableView(_:numberOfRowsInSection:)` 方法定义中的
    `code` 单词处点击，并输入 `names.count`。完成的方法应如下所示：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To make the table view display names in each cell, click the word `code` inside
    the `tableView(_:cellForRowAt:)` method definition and type the following:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使表格视图在每个单元格中显示名称，请在`tableView(_:cellForRowAt:)`方法定义中的`code`单词处单击并输入以下内容：
- en: '[PRE7]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: let name = names[indexPath.row]
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: let name = names[indexPath.row]
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: cell.textLabel?.text = name
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.textLabel?.text = name
- en: '[PRE9]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: return cell
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return cell
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify that your `TableViewExampleController` class looks like this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的`TableViewExampleController`类看起来像这样：
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You have completed the implementation of the `TableViewExampleController` class.
    Now you will write a method, `createTableView()`, to create an instance of it.
    Type in the following code after the property declarations to declare and define
    the `createTableView()` method:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了`TableViewExampleController`类的实现。现在你将编写一个名为`createTableView()`的方法，以创建其实例。在属性声明之后输入以下代码以声明和定义`createTableView()`方法：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s break this down:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This creates a new instance of `UITableView` that is exactly the same size as
    its enclosing view, and assigns it to `tableView`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个与包含视图大小完全相同的`UITableView`新实例，并将其分配给`tableView`。
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This tells the table view that its data source is an instance of `TableViewExampleController`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉表格视图其数据源是`TableViewExampleController`的一个实例。
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This sets the table view's background color to white.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将表格视图的背景颜色设置为白色。
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This sets the reuse identifier for the table view cells to `"Cell"`. This reuse
    identifier will be used in the `tableView(_:cellForRowAt:)` method to identify
    the cells that can be reused.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将表格视图单元格的重用标识符设置为`"Cell"`。此重用标识符将在`tableView(_:cellForRowAt:)`方法中用于识别可重用的单元格。
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This adds the table view as a subview to the view of the `TableViewExampleController`
    instance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这将表格视图作为子视图添加到`TableViewExampleController`实例的视图中。
- en: 'Now you have to call this method. The `UIViewController` class has a method,
    `viewDidLoad()`, that is called when its view is loaded. This method is inherited
    by the `TableViewExampleController` class, and you''ll override it to call `createTableView()`.
    Follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须调用此方法。`UIViewController`类有一个方法`viewDidLoad()`，当其视图被加载时会被调用。此方法由`TableViewExampleController`类继承，你需要重写它以调用`createTableView()`。按照以下步骤操作：
- en: 'Type in the following code, before the `createTableView()` method:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`createTableView()`方法之前输入以下代码：
- en: '[PRE18]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This sets the size of the live view, creates a table view and adds it as a subview
    to the view of the `TableViewExampleController` instance. The data source methods
    are then used to determine how many table view cells to display, as well as what
    to put in each table view cell. `tableView(_:numberOfRowsInSection:)` returns
    `3`, so three rows are displayed. `tableView(_:cellForRowAt:)` sets the text of
    each cell to the corresponding name in the `names` array.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这设置了实时视图的大小，创建了一个表格视图并将其作为子视图添加到`TableViewExampleController`实例的视图中。然后使用数据源方法来确定要显示多少个表格视图单元格以及每个表格视图单元格中要放置的内容。`tableView(_:numberOfRowsInSection:)`返回`3`，因此显示三行。`tableView(_:cellForRowAt:)`将每个单元格的文本设置为`names`数组中的对应名称。
- en: 'Verify that your completed code looks like this:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认你的完成代码看起来像这样：
- en: '[PRE19]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Type the following after all the other code in the playground:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在playground中的所有其他代码之后输入以下内容：
- en: '[PRE20]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command creates an instance of `TableViewExampleController` and displays
    its view in the playground's live view.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令创建了一个`TableViewExampleController`实例，并在playground的实时视图中显示其视图。
- en: 'Run the playground. If you don''t see the table view, click the Adjust Editor
    Options button:![Figure 15.3: Adjust Editor Options button'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行playground。如果你看不到表格视图，请点击调整编辑器选项按钮：![图15.3：调整编辑器选项按钮]
- en: '](img/Figure_15.03_B17469.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_15.03_B17469.jpg)'
- en: 'Figure 15.3: Adjust Editor Options button'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.3：调整编辑器选项按钮]'
- en: 'Make sure **Live View** is selected from the pop-up menu:![Figure 15.4: Adjust
    Editor Options menu with Live View selected'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保从弹出菜单中选择**实时视图**：![图15.4：调整带有实时视图选择的编辑器选项菜单]
- en: '](img/Figure_15.04_B17469.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_15.04_B17469.jpg)'
- en: 'Figure 15.4: Adjust Editor Options menu with Live View selected'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.4：调整带有实时视图选择的编辑器选项菜单]'
- en: 'You will see the table view displaying a table with three rows containing names,
    as shown:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到表格视图显示一个包含三个名称行的表格，如下所示：
- en: '![Figure 15.5: Playground Live View showing table view with names'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.5：显示带有名称的表格视图的playground实时视图]'
- en: '](img/Figure_15.05_B17469.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_15.05_B17469.jpg)'
- en: 'Figure 15.5: Playground Live View showing table view with names'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.5：显示带有名称的表格视图的playground实时视图]'
- en: Great! Now that you know how table views work, let's complete the implementation
    for the **Locations** screen. You'll start by creating a view controller for this
    screen in the next section, so that it can manage what the table view will display.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在你已经知道了表格视图的工作原理，让我们完成**位置**屏幕的实现。你将在下一节中创建这个屏幕的视图控制器，以便它可以管理表格视图将显示的内容。
- en: Creating the LocationViewController class
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`LocationViewController`类
- en: As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, the `locationCell`. Referring to the **Model-View-Controller**
    (**MVC**) design pattern, you have completed the required views, but you haven't
    completed the controller or the model yet.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第9章*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)中应用程序导览所示，*设置用户界面*，`locationCell`。根据**模型-视图-控制器**（**MVC**）设计模式，你已经完成了所需的视图，但你还没有完成控制器或模型。
- en: 'At the moment, when you click the **LOCATION** button in the **Explore** screen,
    an empty table view is displayed:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当你点击**探索**屏幕中的**位置**按钮时，会显示一个空白的表格视图：
- en: '![Figure 15.6: iOS Simulator showing Locations screen from your app'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.6：iOS模拟器显示应用中的位置屏幕'
- en: '](img/Figure_15.06_B17469.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.06_B17469.jpg)'
- en: 'Figure 15.6: iOS Simulator showing Locations screen from your app'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：iOS模拟器显示应用中的位置屏幕
- en: 'You will create the `LocationViewController` class as the view controller for
    the **Locations** screen, add an outlet for the table view to it, and configure
    it as the table view''s data source and delegate. Follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建`LocationViewController`类作为**位置**屏幕的视图控制器，向其中添加一个表格视图的输出端口，并将其配置为表格视图的数据源和代理。按照以下步骤操作：
- en: 'Open your `LetsEat` project from the previous chapter. Create a new folder,
    `Location`, inside your project by right-clicking the `LetsEat` folder and choosing
    `View` and `Model`, inside the `Location` folder. When you''re done, you will
    see the following folder structure:![Figure 15.7: Project navigator showing Location
    folder and subfolders'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一章打开你的`LetsEat`项目。通过右键点击`LetsEat`文件夹并选择`视图`和`模型`，在项目内创建一个新的文件夹`Location`。完成后，你将看到以下文件夹结构：![图15.7：项目导航器显示位置文件夹和子文件夹
- en: '](img/Figure_15.07_B17469.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.07_B17469.jpg)'
- en: 'Figure 15.7: Project navigator showing Location folder and subfolders'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.7：项目导航器显示位置文件夹和子文件夹
- en: Right-click on the `Location` folder and select **New File**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Location`文件夹并选择**新建文件**。
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。选择**Cocoa Touch Class**并点击**下一步**。'
- en: 'Configure the class with the following details:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下详细信息配置类：
- en: '`LocationViewController`'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`LocationViewController`'
- en: '`UIViewController`'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`UIViewController`'
- en: '`Unchecked`'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`未选中`'
- en: '`Swift`'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Swift`'
- en: Click **Next**.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: Click `LocationViewController` file appears in the Project navigator.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`LocationViewController`文件出现在项目导航器中。
- en: 'The `LocationViewController` file has been created, with the `LocationViewController`
    class declaration inside it. Now you''ll set the identity of the view controller
    scene that''s presented when you tap the **LOCATION** button to this class. Follow
    these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocationViewController`文件已经创建，其中包含`LocationViewController`类的声明。现在你将设置当你轻触**位置**按钮时显示的视图控制器场景的标识为此类。按照以下步骤操作：'
- en: Open the `Main` storyboard file in the Project navigator.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中打开`Main`故事板文件。
- en: 'Choose the view controller scene that''s presented when you click on the `LocationViewController`.
    Note the name of the scene will change to **Location View Controller Scene**:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择当你点击`LocationViewController`时显示的视图控制器场景。注意场景的名称将更改为**Location View Controller
    Scene**：
- en: '![Figure 15.8: Identity inspector settings for Location View Controller Scene'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.8：位置视图控制器场景的标识检查器设置'
- en: '](img/Figure_15.08_B17469.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.08_B17469.jpg)'
- en: 'Figure 15.8: Identity inspector settings for Location View Controller Scene'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：位置视图控制器场景的标识检查器设置
- en: Cool! In the next section, let's connect the table view to an outlet in the
    `LocationViewController` class. By doing this, the `LocationViewController` instance
    for the **Locations** screen will be able to manage the table view.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！在下一节中，让我们将表格视图连接到`LocationViewController`类中的一个输出端口。通过这样做，**位置**屏幕的`LocationViewController`实例将能够管理表格视图。
- en: Connecting the table view to the LocationViewController class
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将表格视图连接到`LocationViewController`类
- en: 'Currently, the `LocationViewController` instance for the `LocationViewController`
    class and assign the table view to it. Follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，将`LocationViewController`类的实例分配给`LocationViewController`并分配表格视图给它。按照以下步骤操作：
- en: Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas, if necessary.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，点击导航器和检查器按钮以隐藏导航器和检查器区域。
- en: Click the Adjust Editor Options button and choose **Assistant** from the menu.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调整编辑器选项按钮并从菜单中选择**辅助**。
- en: 'In the `Main` storyboard file, click the table view in the document outline.
    The assistant editor should be set to **Automatic > LocationViewController.swift**
    as shown:![Figure 15.9: Assistant editor bar showing LocationViewController.swift'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`故事板文件中，点击文档大纲中的表格视图。辅助编辑器应设置为**自动 > LocationViewController.swift**，如图所示：![图15.9：显示`LocationViewController.swift`的辅助编辑器栏
- en: '](img/Figure_15.09_B17469.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_15.09_B17469.jpg]'
- en: 'Figure 15.9: Assistant editor bar showing LocationViewController.swift'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.9：显示`LocationViewController.swift`的辅助编辑器栏
- en: '*Ctrl + Drag* from `viewDidLoad()`:![Figure 15.10: Editor area showing LocationViewController
    file contents'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Ctrl + 拖动*从`viewDidLoad()`：![图15.10：显示`LocationViewController`文件内容的编辑区域'
- en: '](img/Figure_15.10_B17469.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_15.10_B17469.jpg]'
- en: 'Figure 15.10: Editor area showing LocationViewController file contents'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.10：显示`LocationViewController`文件内容的编辑区域
- en: 'In the pop-up menu, enter `tableView` in the **Name** field and click **Connect**:![Figure
    15.11: Pop-up dialog box for tableView outlet creation'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出菜单中，在**名称**字段中输入`tableView`并点击**连接**：![图15.11：创建`tableView`出口的弹出对话框
- en: '](img/Figure_15.11_B17469.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_15.11_B17469.jpg]'
- en: 'Figure 15.11: Pop-up dialog box for tableView outlet creation'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.11：创建`tableView`出口的弹出对话框
- en: 'Verify the `tableView` outlet has been added to the `LocationViewController`
    class and connected to the table view in the storyboard:![Figure 15.12: Editor
    area showing LocationViewController file contents'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`tableView`出口是否已添加到`LocationViewController`类并连接到故事板中的表格视图：![图15.12：显示`LocationViewController`文件内容的编辑区域
- en: '](img/Figure_15.12_B17469.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_15.12_B17469.jpg]'
- en: 'Figure 15.12: Editor area showing LocationViewController file contents'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.12：显示`LocationViewController`文件内容的编辑区域
- en: 'Click the **x** button to close the assistant editor:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**x**按钮关闭辅助编辑器：
- en: '![Figure 15.13: Assistant editor close button'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.13：辅助编辑器关闭按钮'
- en: '](img/Figure_15.13_B17469.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_15.13_B17469.jpg]'
- en: 'Figure 15.13: Assistant editor close button'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13：辅助编辑器关闭按钮
- en: You've connected the table view to an outlet in the `LocationViewController`
    class. In order for a table view to display data and respond to user interaction,
    the `LocationViewController` class has to conform to the `UITableViewDataSource`
    and `UITableViewDelegate` protocols and implement the required methods. You will
    do that in the next section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经将表格视图连接到了`LocationViewController`类中的出口。为了使表格视图能够显示数据和响应用户交互，`LocationViewController`类必须遵守`UITableViewDataSource`和`UITableViewDelegate`协议并实现所需的方法。你将在下一节中完成这项工作。
- en: Adding the data source and delegate methods
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加数据源和委托方法
- en: 'A view controller for a table view has to adopt the `UITableViewDataSource`
    and `UITableViewDelegate` protocols, as well as implement the required methods
    to allow data display and user interaction. In this section, you''ll connect `LocationViewController`
    to the table view''s `dataSource` and `delegate` outlets and implement the required
    data source methods. You will implement delegate methods in [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*,
    Getting Started with JSON Files*. Follow these steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图的视图控制器必须采用`UITableViewDataSource`和`UITableViewDelegate`协议，并实现所需的方法以允许数据显示和用户交互。在本节中，你将连接`LocationViewController`到表格视图的`dataSource`和`delegate`出口并实现所需的数据源方法。你将在[*第17章*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*，开始使用JSON文件*中实现委托方法。按照以下步骤操作：
- en: Click the Navigator and Inspector buttons to show the Navigator and Inspector
    areas, if necessary.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，点击导航器和检查器按钮以显示导航器和检查器区域。
- en: 'In the `Main` storyboard file, make sure you have the table view selected in
    the document outline. Click the Connections inspector button. Click and drag from
    the `dataSource` and `delegate` outlets to the `LocationViewController` icon in
    the document outline:![Figure 15.14: Connections Inspector showing outlets for
    the LocationViewController class'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Main`故事板文件中，确保你在文档大纲中选择表格视图。点击连接检查器按钮。从`dataSource`和`delegate`出口拖动到文档大纲中的`LocationViewController`图标：![图15.14：显示`LocationViewController`类出口的连接检查器
- en: '](img/Figure_15.14_B17469.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_15.14_B17469.jpg]'
- en: 'Figure 15.14: Connections Inspector showing outlets for the LocationViewController
    class'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.14：连接检查器显示`LocationViewController`类的输出端
- en: This connects the table view to outlets to the `LocationViewController` class.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将表格视图连接到`LocationViewController`类的输出端。
- en: 'Verify the `dataSource` and `delegate` properties of the table view have been
    connected to outlets in the `LocationViewController` class:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证表格视图的`dataSource`和`delegate`属性是否已连接到`LocationViewController`类的输出端：
- en: '![Figure 15.15: Connections Inspector with datasource and delegate outlets
    set'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.15：连接检查器已设置数据源和代理输出端](img/Figure_15.15_B17469.jpg)'
- en: '](img/Figure_15.15_B17469.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.15：显示数据源和代理输出端的连接检查器](img/Figure_15.15_B17469.jpg)'
- en: 'Figure 15.15: Connections Inspector with datasource and delegate outlets set'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.15：连接检查器已设置数据源和代理输出端
- en: 'Next, you will make `LocationViewController` conform to the `UITableViewDataSource`
    protocol and implement the required methods for this protocol. Follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将使`LocationViewController`遵守`UITableViewDataSource`协议并实现该协议所需的这些方法。按照以下步骤操作：
- en: 'Click the `LocationViewController` file in the Project navigator and remove
    all the commented code in the `LocationViewController` class definition so that
    only the following is left:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`LocationViewController`文件，并从`LocationViewController`类定义中删除所有注释代码，只留下以下内容：
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To make `LocationViewController` adopt the `UITableViewDataSource` protocol,
    type a comma after the superclass name, `UIViewController`, and type in `UITableViewDataSource`.
    When you are done, your code should look like this:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使`LocationViewController`采用`UITableViewDataSource`协议，在超类名称`UIViewController`后输入逗号，并输入`UITableViewDataSource`。完成操作后，你的代码应如下所示：
- en: '[PRE22]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An error will appear because you haven''t implemented the two required methods
    yet. Click the error icon to see the error message:![Figure 15.16: Editor area
    showing error icon'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你尚未实现两个必需的方法，将出现错误。点击错误图标以查看错误信息：![图15.16：显示错误图标的编辑区域
- en: '](img/Figure_15.16_B17469.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.16：显示错误图标的编辑区域](img/Figure_15.16_B17469.jpg)'
- en: 'Figure 15.16: Editor area showing error icon'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.16：显示错误图标的编辑区域
- en: 'Click the **Fix** button to add the required method stubs to the class:![Figure
    15.17: Error explanation and Fix button'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复**按钮将所需的方法存根添加到类中：![图15.17：错误解释和修复按钮
- en: '](img/Figure_15.17_B17469.jpg)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.17：显示错误解释和修复按钮](img/Figure_15.17_B17469.jpg)'
- en: 'Figure 15.17: Error explanation and Fix button'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.17：错误解释和修复按钮
- en: 'Rearrange the code so that the property declarations and the `viewDidLoad()`
    method are at the top. This follows general iOS development coding conventions
    and it makes your code easier to maintain. When you''re done, verify that your
    code looks as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新排列代码，使属性声明和`viewDidLoad()`方法位于顶部。这遵循了iOS开发的一般编码约定，并使你的代码更容易维护。完成操作后，验证你的代码如下所示：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Inside the first required method, click the word `code` and type `10`. This
    will make the table view display 10 rows. The complete method should look like
    this:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个必需的方法内部，点击单词`code`并输入`10`。这将使表格视图显示10行。完整的方法应如下所示：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside the second required method, click the word `code` and type the following
    to make the table view display the string `"A Cell"` in each row:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个必需的方法内部，点击单词`code`并输入以下内容，使表格视图在每一行显示字符串`"A Cell"`：
- en: '[PRE25]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: cell.textLabel?.text = "A Cell"
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cell.textLabel?.text = "A Cell"
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: return cell
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return cell
- en: '[PRE27]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Build and run your project. Click the `A Cell` as shown:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的项目。点击如图所示的`A Cell`：
- en: '![Figure 15.18: iOS Simulator showing table view cells'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.18：iOS模拟器显示表格视图单元格](img/Figure_15.18_B17469.jpg)'
- en: '](img/Figure_15.18_B17469.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.18：iOS模拟器显示表格视图单元格](img/Figure_15.18_B17469.jpg)'
- en: 'Figure 15.18: iOS Simulator showing table view cells'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.18：iOS模拟器显示表格视图单元格
- en: You have completed the implementation of the `LocationsViewController` class,
    and your table view is now displaying table view cells. Great! Now that your table
    view's view controller has been set up, let's create some model objects in the
    next section so that you can provide data for it.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了`LocationsViewController`类的实现，并且你的表格视图现在正在显示表格视图单元格。太棒了！现在，既然你的表格视图的视图控制器已经设置好了，让我们在下一节创建一些模型对象，以便为它提供数据。
- en: Adding location data for the table view
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为表格视图添加位置数据
- en: 'At this point, you have created and configured the `LocationViewController`
    class. An instance of this class will act as the data source for the table view
    in the `.plist` file that contains location data, but instead of using an existing
    `.plist` file, you''ll create one from scratch and add location data to it. Follow
    these steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，你已经创建并配置了`LocationViewController`类。这个类的实例将作为包含位置数据的`.plist`文件中的表格视图的数据源，但你将从头创建一个，并向其中添加位置数据。按照以下步骤操作：
- en: Right-click the `Model` folder in the `Location` folder and choose **New File**.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Location`文件夹中的`Model`文件夹，并选择**新建文件**。
- en: '`proper` into the filter field; **Property List** will appear in the window.
    Choose **Property List** and click **Next**.'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器字段中输入`proper`；**属性列表**将在窗口中显示。选择**属性列表**并点击**下一步**。
- en: Name the file `Locations`, and click **Create**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`Locations`，然后点击**创建**。
- en: 'The `Locations.plist` file has been added to the project. In the previous chapter,
    you''ve seen how `ExploreData.plist` stores data as an array of dictionaries.
    You will configure `Locations.plist` so that it stores data for the **Locations**
    screen in the same format, and then add all the restaurant locations to it. Follow
    these steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locations.plist`文件已添加到项目中。在上一章中，你已经看到了`ExploreData.plist`如何将数据存储为数组字典。你将配置`Locations.plist`，使其以相同的格式存储**位置**屏幕的数据，然后将所有餐厅位置添加到其中。按照以下步骤操作：'
- en: 'Click on `Locations.plist` and change it to **Array**. Note that the disclosure
    triangle on the left should be pointing down. Click the **+** button:![Figure
    15.19: Editor area showing Locations.plist contents'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Locations.plist`并将其更改为**数组**。注意左侧的展开三角形应指向下方。点击**+**按钮：![图15.19：显示位置.plist内容的编辑区域
- en: '](img/Figure_15.19_B17469.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.19_B17469.jpg)'
- en: 'Figure 15.19: Editor area showing Locations.plist contents'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.19：显示位置.plist内容的编辑区域
- en: 'A new item, **Item 0**, will be added to the array. Change the type to **Dictionary**.
    Click the disclosure triangle to make it point down. Click the **+** button:![Figure
    15.20: Locations.plist with Item 0 added'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的条目**项目0**添加到数组中。将类型更改为**字典**。点击展开三角形使其指向下方。点击**+**按钮：![图15.20：添加了项目0的位置.plist
- en: '](img/Figure_15.20_B17469.jpg)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.20_B17469.jpg)'
- en: 'Figure 15.20: Locations.plist with Item 0 added'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.20：添加了项目0的位置.plist
- en: 'A new item, **New Item**, will be added to the **Item 0** dictionary. Click
    the **+** button:![Figure 15.21: Locations.plist with New item added'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的条目**新条目**添加到**项目0**字典中。点击**+**按钮：![图15.21：添加新条目后的位置.plist
- en: '](img/Figure_15.21_B17469.jpg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.21_B17469.jpg)'
- en: 'Figure 15.21: Locations.plist with New item added'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.21：添加了新条目的位置.plist
- en: 'A second item will be added to the `city` and the value to `Aspen`. For the
    second item, change the key to `state` and the value to `CO`:![Figure 15.22: Locations.plist
    with city and state added to Item 0'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个条目添加到`city`，并将值设置为`Aspen`。对于第二个条目，将键更改为`state`，并将值更改为`CO`：![图15.22：在项目0中添加了城市和州的位置.plist
- en: '](img/Figure_15.22_B17469.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.22_B17469.jpg)'
- en: 'Figure 15.22: Locations.plist with city and state added to Item 0'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.22：在项目0中添加了城市和州的位置.plist
- en: 'Click the disclosure triangle next to the **Item 0** dictionary to collapse
    it:![Figure 15.23: Locations.plist with Item 0 collapsed'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**项目0**字典旁边的展开三角形以折叠它：![图15.23：折叠了项目0的位置.plist
- en: '](img/Figure_15.23_B17469.jpg)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.23_B17469.jpg)'
- en: 'Figure 15.23: Locations.plist with Item 0 collapsed'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.23：折叠了项目0的位置.plist
- en: 'Select **Item 0** and press *Command + C* on the keyboard to copy it and *Command
    + V* to paste. You will see a new item, **Item 1**:![Figure 15.24: Locations.plist
    with Item 0 copied and pasted'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**项目0**，然后在键盘上按*Command + C*复制它，并按*Command + V*粘贴。你会看到一个新条目，**项目1**：![图15.24：复制并粘贴了项目0的位置.plist
- en: '](img/Figure_15.24_B17469.jpg)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.24_B17469.jpg)'
- en: 'Figure 15.24: Locations.plist with Item 0 copied and pasted'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.24：复制并粘贴了项目0的位置.plist
- en: 'Click the disclosure triangle next to the `Boston` and the state to `MA`:![Figure
    15.25: Locations.plist with Item 1 configured'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Boston`旁边的展开三角形以及将州设置为`MA`：![图15.25：配置了项目1的位置.plist
- en: '](img/Figure_15.25_B17469.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_15.25_B17469.jpg)'
- en: 'Figure 15.25: Locations.plist with Item 1 configured'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.25：配置了项目1的位置.plist
- en: 'Continue with the same process by adding the following cities and states:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下城市和州继续相同的过程：
- en: '![](img/Figure_15.26_B17469.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_15.26_B17469.jpg)'
- en: 'The completed `.plist` file should look like this:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的`.plist`文件应如下所示：
- en: '![Figure 15.26: Locations.plist completed'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.26：完成的位置.plist'
- en: '](img/Figure_15.27_B17469.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.27_B17469.jpg)'
- en: 'Figure 15.26: Locations.plist completed'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.26：完成的位置.plist
- en: The `Locations.plist` file is complete. In the next section, you will create
    a data manager class, similar to the one you made in the previous chapter, that
    will read the `Locations.plist` file and provide it to the `LocationViewController`
    instance for the **Locations** screen.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Locations.plist`文件已完成。在下一节中，你将创建一个数据管理类，类似于上一章中创建的类，该类将读取`Locations.plist`文件并将其提供给**位置**屏幕的`LocationViewController`实例。'
- en: Creating the LocationDataManager class
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 LocationDataManager 类
- en: 'As what you''ve done in the previous chapter, you''ll create a data manager
    class to load the location data from `Locations.plist` and provide it to the `LocationsViewController`
    instance for the **Locations** screen. The data will then be used to populate
    the table view in the **Locations** screen. Follow these steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，你将创建一个数据管理类，从 `Locations.plist` 加载位置数据，并将其提供给 **Locations** 屏幕的 `LocationsViewController`
    实例。然后，这些数据将用于在 **Locations** 屏幕中填充表格视图。按照以下步骤操作：
- en: Right-click the `Model` folder in the `Location` folder and select **New File**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Location` 文件夹中的 `Model` 文件夹，并选择 **New File**。
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应该已经选中。选择 **Swift File** 并点击 **Next**。'
- en: Name this file `LocationDataManager` and click `Create`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为 `LocationDataManager` 并点击 `Create`。
- en: 'Click on the `LocationDataManager` file in the Project navigator and after
    the `import` statement, type in the following to declare the `LocationDataManager`
    class:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `LocationDataManager` 文件，在 `import` 语句之后，输入以下内容以声明 `LocationDataManager`
    类：
- en: '[PRE28]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Inside the curly braces, add an array property, `locations`, to hold the list
    of locations:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号内，添加一个数组属性 `locations`，用于存储位置列表：
- en: '[PRE29]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `private` keyword means that the `locations` property may only be accessed
    by methods in this class.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`private` 关键字表示 `locations` 属性只能由本类中的方法访问。'
- en: 'Add the following methods after the property declaration:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在属性声明之后添加以下方法：
- en: '[PRE30]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'These methods are similar to those in `ExploreDataManager`. Let''s break it
    down:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些方法与 `ExploreDataManager` 中的方法类似。让我们分解一下：
- en: '[PRE31]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Loads the contents of `Locations.plist` and returns an array of dictionaries.
    Each dictionary stores the city and state of a location.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 加载 `Locations.plist` 的内容，并返回一个字典数组。每个字典存储一个位置的城市和州。
- en: '[PRE32]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Takes the array provided by `loadData()`, concatenates the `city` and `state`
    for each element, and appends the resulting string to the `locations` array.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接收 `loadData()` 提供的数组，将每个元素的 `city` 和 `state` 连接起来，并将生成的字符串追加到 `locations` 数组中。
- en: '[PRE33]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Returns the number of elements in the `locations` array.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回 `locations` 数组中的元素数量。
- en: '[PRE34]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Returns a string stored in the `locations` array at a given array index.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回存储在 `locations` 数组给定数组索引处的字符串。
- en: Now that the `LocationDataManager` class is complete, let's configure the `LocationViewController`
    class so that it can get data from the `LocationDataManager` instance and provide
    it to the table view. You will do this in the next section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `LocationDataManager` 类已经完成，让我们配置 `LocationViewController` 类，使其能够从 `LocationDataManager`
    实例获取数据并将其提供给表格视图。你将在下一节中完成此操作。
- en: Displaying data in a table view
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在表格视图中显示数据
- en: 'Currently, the `"A Cell"`. You will update the `LocationViewController` class
    to use the `LocationDataManager` instance as a data source. Follow these steps:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当前是 `"A Cell"`。你将更新 `LocationViewController` 类以使用 `LocationDataManager` 实例作为数据源。按照以下步骤操作：
- en: 'Click the `LocationViewController` file in the Project navigator. In the `LocationViewController`
    class definition before the `viewDidLoad()` method, create an instance of `LocationDataManager`
    and assign it to a property, `manager`, by typing the following:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `LocationViewController` 文件。在 `LocationViewController` 类定义中 `viewDidLoad()`
    方法之前，创建一个 `LocationDataManager` 实例，并将其分配给一个属性 `manager`，输入以下内容：
- en: '[PRE35]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Inside the `viewDidLoad()` method, fetch the data for the table view by calling
    `manager.fetch()`:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 方法内部，通过调用 `manager.fetch()` 获取表格视图的数据：
- en: '[PRE36]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Modify `tableView(_:numberOfRowsInSection:)` so it can get the number of rows
    to display in the table view from `manager`:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:numberOfRowsInSection:)` 以从 `manager` 获取表格视图中要显示的行数：
- en: '[PRE37]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Modify `tableView(_:cellForRowAt:)` as shown to make the table view display
    a string containing the city and state in every table view cell:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:cellForRowAt:)` 如下所示，以便表格视图在每个表格视图中显示包含城市和州的字符串：
- en: '[PRE38]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Build and run your app. You should see the locations from `ExploreData.plist`
    displayed in the table view:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。你应该在表格视图中看到来自 `ExploreData.plist` 的位置信息：
- en: '![Figure 15.27: iOS Simulator showing completed Locations screen'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.27：iOS 模拟器显示完成的 **Locations** 屏幕'
- en: '](img/Figure_15.28_B17469.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_15.28_B17469.jpg)'
- en: 'Figure 15.27: iOS Simulator showing completed Locations screen'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.27：iOS 模拟器显示完成的 **Locations** 屏幕
- en: You've completed the implementation of the **Locations** screen. Good job!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了 **Locations** 屏幕的实现。做得好！
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about table views and table view controllers, and
    you implemented a view controller for a table view in a playground. Next, you
    implemented the `LocationViewController` class, a table view controller for the
    `.plist` file from scratch called `Locations.plist` to hold a list of locations.
    You created a data manager class, `LocationDataManager`, to read data from the
    `.plist` file. Finally, you configured the `LocationViewController` class to get
    data from the `LocationDataManager` instance and provide it to the table view
    so that the **Locations** screen displays a list of restaurant locations.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了表格视图和表格视图控制器，并在游乐场中实现了一个表格视图的视图控制器。接下来，你从头开始实现了`LocationViewController`类，这是一个用于`.plist`文件的表格视图控制器，名为`Locations.plist`，用于存储位置列表。你创建了一个数据管理类，`LocationDataManager`，用于从`.plist`文件中读取数据。最后，你配置了`LocationViewController`类，使其从`LocationDataManager`实例获取数据，并将其提供给表格视图，以便**位置**屏幕显示餐厅位置列表。
- en: This will enable you to create `.plist` files from scratch to store data, and
    to implement table views that use `.plist` files as a data source for your own
    apps. Awesome!
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使你能够从头开始创建`.plist`文件以存储数据，并实现使用`.plist`文件作为数据源的自定义表格视图。太棒了！
- en: In the next chapter, you will add a map view to the **Map** screen and configure
    it to display restaurant locations. You'll also set up custom annotations for
    the **Map** screen and set up the **Restaurant Detail** screen, which will be
    displayed when a button in the annotation callout is tapped.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将为**地图**屏幕添加一个地图视图，并配置它以显示餐厅位置。你还将为**地图**屏幕设置自定义标注，并设置**餐厅详情**屏幕，该屏幕将在标注呼出中的按钮被点击时显示。
