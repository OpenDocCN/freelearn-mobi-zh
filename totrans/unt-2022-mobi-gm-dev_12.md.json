["```kt\n    /// <summary>\n    /// Will move an object from the left side of the screen\n    /// to the center\n    /// </summary>\n    /// <param name=\"obj\">The UI element we would like to\n    /// move</param>\n    public void SlideMenuIn(GameObject obj)\n    {\n        obj.SetActive(true);\n        var rt = obj.GetComponent<RectTransform>();\n        if (rt)\n        {\n            /* Set the object's position offscreen */\n            var pos = rt.position;\n            pos.x = -Screen.width / 2;\n            rt.position = pos;\n            /* Move the object to the center of the screen\n               (x of 0 is centered) */\n            LeanTween.moveX(rt, 0, 1.5f);\n        }\n    }\n    ```", "```kt\n    protected virtual void Start()\n    {\n        /* Initialize the showAds variable */\n        bool showAds =\n            (PlayerPrefs.GetInt(\"Show Ads\", 1) == 1);\n        UnityAdController.showAds = showAds;\n        /* Slide in the login menu if it exists */\n        if (facebookLogin != null)\n    {\n            SlideMenuIn(facebookLogin);\n        }\n        /* Unpause the game if needed */\n        Time.timeScale = 1;\n    }\n    ```", "```kt\n    /// <summary>\n    /// Will move an object from the left side of the screen\n    /// to the center\n    /// </summary>\n    /// <param name=\"obj\">The UI element we would like to\n    /// move</param>\n    public void SlideMenuIn(GameObject obj)\n    {\n        obj.SetActive(true);\n        var rt = obj.GetComponent<RectTransform>();\n        if (rt)\n        {\n            /* Set the object's position offscreen */\n            var pos = rt.position;\n            pos.x = -Screen.width / 2;\n            rt.position = pos;\n            /* Move the object to the center of the screen\n               (x of 0 is centered) */\n            LeanTween.moveX(rt, 0,\n               1.5f).setEase(LeanTweenType.easeInOutExpo);\n        }\n    }\n    ```", "```kt\n// Move the object to the center of the screen (x of 0 is \n// centered) \nvar tween = LeanTween.moveX(rt, 0, 1.5f); \ntween.setEase(LeanTweenType.easeInOutExpo);\n```", "```kt\n    /// <summary>\n    /// Will move an object to the right offscreen\n    /// </summary>\n    /// <param name=\"obj\">The UI element we would like to\n    /// move </param>\n    public void SlideMenuOut(GameObject obj)\n    {\n        var rt = obj.GetComponent<RectTransform>();\n        if (rt)\n        {\n            var tween = LeanTween.moveX(rt,\n                Screen.width / 2, 0.5f);\n            tween.setEase(LeanTweenType.easeOutQuad);\n            tween.setOnComplete(() =>\n            {\n                obj.SetActive(false);\n            });\n        }\n    }\n    ```", "```kt\n    public void ShowMainMenu()\n    {\n        if (facebookLogin != null && mainMenu != null)\n        {\n            SlideMenuIn(mainMenu);\n            SlideMenuOut(facebookLogin);\n            // No longer needed as menus will be animating\n            //facebookLogin.SetActive(false);\n            //mainMenu.SetActive(true);\n            if (FB.IsLoggedIn)\n            {\n                /* Get information from Facebook profile\n                */\n                FB.API(\"/me?fields=name\",\n                        HttpMethod.GET,\n                        SetName);\n                FB.API(\"/me/picture?width=256&height=256\",\n                        HttpMethod.GET,\n                        SetProfilePic);\n            }\n        }\n    }\n    ```", "```kt\n    /// <summary>\n        /// Will turn our pause menu on or off\n        /// </summary>\n        /// <param name=\"isPaused\">is the game currently\n        /// paused</param>\n        public void SetPauseMenu(bool isPaused)\n        {\n            paused = isPaused;\n            /* If the game is paused, timeScale is 0,\n               otherwise 1 */\n            Time.timeScale = (paused) ? 0 : 1;\n            // No longer needed\n            //pauseMenu.SetActive(paused);\n            if (paused)\n            {\n                SlideMenuIn(pauseMenu);\n            }\n            else\n            {\n                SlideMenuOut(pauseMenu);\n            }\n            onScreenControls.SetActive(!paused);\n            /* Send custom gamePaused event */\n            if (paused && (AnalyticsService.Instance != null))\n            {\n                AnalyticsService.Instance.CustomData(\n                    \"game Paused\");\n                AnalyticsService.Instance.Flush();\n            }\n        }\n    ```", "```kt\n/// <summary>\n/// Will move an object from the left side of the screen\n/// to the center\n/// </summary>\n/// <param name=\"obj\">The UI element we would like to\n/// move</param>\npublic void SlideMenuIn(GameObject obj)\n{\n    obj.SetActive(true);\n    var rt = obj.GetComponent<RectTransform>();\n    if (rt)\n    {\n        /* Set the object's position offscreen */\n        var pos = rt.position;\n        pos.x = -Screen.width / 2;\n        rt.position = pos;\n        /* Move the object to the center of the screen\n           (x of 0 is centered) */\n        var tween = LeanTween.moveX(rt, 0, 1.5f);\n        tween.setEase(LeanTweenType.easeInOutExpo);\n        tween.setIgnoreTimeScale(true);\n    }\n}\n```", "```kt\n    /// <summary>\n    /// Will move an object to the right offscreen\n    /// </summary>\n    /// <param name=\"obj\">The UI element we would like to\n    /// move </param>\n    public void SlideMenuOut(GameObject obj)\n    {\n        var rt = obj.GetComponent<RectTransform>();\n        if (rt)\n        {\n            var tween = LeanTween.moveX(rt,\n                Screen.width / 2, 0.5f);\n            tween.setEase(LeanTweenType.easeOutQuad);\n            tween.setIgnoreTimeScale(true);\n            tween.setOnComplete(() =>\n            {\n                obj.SetActive(false);\n            });\n        }\n    }\n    ```"]