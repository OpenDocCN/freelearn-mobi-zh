- en: Chapter 7. Building a Repository Browser
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：构建仓库浏览器
- en: Having covered how to integrate the components necessary to build an application,
    this chapter will create a repository browser that allows user repositories to
    be displayed using the GitHub API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了如何集成构建应用程序所需的组件后，本章将创建一个仓库浏览器，允许使用 GitHub API 显示用户仓库。
- en: 'This chapter will present the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下主题：
- en: An overview of the GitHub API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub API 概述
- en: Talking to the GitHub API with Swift
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Swift 与 GitHub API 通信
- en: Creating a repository browser
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仓库浏览器
- en: Maintaining selection between view controllers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图控制器之间保持选择
- en: An overview of the GitHub API
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub API 概述
- en: The GitHub API provides a REST-based interface using JSON to return information
    about users and repositories. Version 3 of the API is documented at [https://developer.github.com/v3/](https://developer.github.com/v3/)
    and is the version used in this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub API 提供了一个基于 REST 的接口，使用 JSON 返回有关用户和仓库的信息。API 的第 3 版在 [https://developer.github.com/v3/](https://developer.github.com/v3/)
    有文档说明，并且是本书中使用的版本。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The API is rate limited; at the time of writing, anonymous requests can be made
    up to sixty times per hour, while logged in users have a higher limit. The code
    repository for this book has sample responses that can be used for testing and
    development purposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: API 有速率限制；在撰写本文时，匿名请求每小时最多可以发出六十次，而登录用户有更高的限制。本书的代码仓库有用于测试和开发目的的示例响应。
- en: Root endpoint
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根端点
- en: 'The main entry point to GitHub is the *root endpoint*. For the main GitHub
    site, this is [https://api.github.com](https://api.github.com), and for GitHub
    Enterprise installations, it will be of the form `https://hostname.example.org/api/v3/`
    along with user credentials. The endpoint provides a collection of URLs that can
    be used to find specific resources:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 的主要入口点是 *根端点*。对于主 GitHub 网站，这是 [https://api.github.com](https://api.github.com)，而对于
    GitHub Enterprise 安装，它将是 `https://hostname.example.org/api/v3/` 的形式，并带有用户凭据。端点提供了一组可用于查找特定资源的
    URL：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The services are *URI templates*. Text in braces `{}` is replaced on demand
    with the values of parameters; text that starts with `{?a,b,c}` is expanded to
    form `?a=&b=&c=` if present, and is missing otherwise. For example, with a `user`
    of `alblue`, the `user_url` of the user resource at `https://api.github.com/users/{user}`
    becomes `https://api.github.com/users/alblue`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务是 *URI 模板*。花括号 `{}` 中的文本将在需要时用参数的值替换；以 `{?a,b,c}` 开头的文本如果存在，则展开为 `?a=&b=&c=`，否则不展开。例如，对于
    `user` 为 `alblue` 的情况，用户资源在 `https://api.github.com/users/{user}` 上的 `user_url`
    变为 `https://api.github.com/users/alblue`。
- en: User resource
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户资源
- en: 'The user resource for a specific user contains information about their repositories
    (`repos_url`), name, and other information, such as a location and blog (if provided).
    In addition, the `avatar_url` provides a URL to an image that can be used to display
    the user''s avatar. For example, `https://api.github.com/users/alblue` contains:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 特定用户的用户资源包含有关其仓库 (`repos_url`)、姓名以及其他信息，例如位置和博客（如果提供）。此外，`avatar_url` 提供了一个可以用来显示用户头像的
    URL。例如，`https://api.github.com/users/alblue` 包含：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `repos_url` link can be used to find the user's repositories. This is what
    is reported at the root endpoint as the `user_repositories_url` with the `{user}`
    already replaced with the username.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `repos_url` 链接来查找用户的仓库。这是在根端点报告的 `user_repositories_url`，其中 `{user}` 已经替换为用户名。
- en: Repositories resource
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仓库资源
- en: 'Repositories for a user can be accessed via the `repos_url` or `user_repositories_url`
    references. This returns an array of JSON objects containing information, such
    as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用户仓库可以通过 `repos_url` 或 `user_repositories_url` 引用访问。这返回一个包含信息的 JSON 对象数组，例如：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Repository browser project
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库浏览器项目
- en: The `RepositoryBrowser` client will be created from the **Master Detail** template.
    This sets up an empty application that can be used on a large device with a split
    view controller or a navigator view controller on a small device. In addition
    to this, actions to add entries are also created.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`RepositoryBrowser` 客户端将从 **主从模板** 创建。这设置了一个空的应用程序，可以在大设备上使用分割视图控制器，或在小型设备上使用导航视图控制器。此外，还会创建添加条目的操作。'
- en: 'To create a project with tests, ensure that the **Include Unit Tests** option
    is selected when creating the project:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建带有测试的项目，确保在创建项目时选择 **包含单元测试** 选项：
- en: '![Repository browser project](img/00090.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![仓库浏览器项目](img/00090.jpeg)'
- en: 'To build the APIs necessary to display content, several utility classes are
    needed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建显示内容所需的 API，需要几个实用类：
- en: The `URITemplate` class processes URI templates with a set of key/value pairs
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URITemplate` 类使用一组键/值对处理 URI 模板'
- en: The `Threads` class allows functions to be run in the background or in the main
    thread
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Threads` 类允许函数在后台或主线程中运行'
- en: The `NSURLExtensions` class provides easy parsing of JSON objects from a URL
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSURLExtensions` 类提供了从 URL 解析 JSON 对象的简便方法'
- en: The `DictionaryExtensions` class provides a means of creating a Swift dictionary
    from a JSON object
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DictionaryExtensions` 类提供了一种从 JSON 对象创建 Swift 字典的方法'
- en: The `GitHubAPI` class provides access to the GitHub remote API
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GitHubAPI` 类提供了对 GitHub 远程 API 的访问'
- en: URI templates
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URI 模板
- en: URI templates are defined in RFC 6570 at [https://tools.ietf.org/html/rfc6570](https://tools.ietf.org/html/rfc6570).
    They can be used to replace sequences of text surrounded by `{}` in a URI. Although
    GitHub's API uses optional values `{?...}`, the example client presented in this
    chapter will not need to use these, and so, they can be ignored in this implementation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: URI 模板在 RFC 6570 中定义，见 [https://tools.ietf.org/html/rfc6570](https://tools.ietf.org/html/rfc6570)。它们可以用来替换
    URI 中由 `{}` 包围的文本序列。尽管 GitHub 的 API 使用可选值 `{?...}`，但本章中展示的示例客户端不需要使用这些，因此在本实现中可以忽略它们。
- en: 'The template class replaces the parameters with values from a dictionary. To
    create the API, it is useful to write a test case first, following test driven
    development. A test case class can be created by navigating to **File** | **New**
    | **File…** | **iOS** | **Source** | **Unit Test Case Class** and creating a subclass
    of `XCTestCase` in Swift. The test code will look like:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 模板类使用字典中的值替换参数。要创建 API，首先编写一个测试用例是有用的，遵循测试驱动开发。可以通过导航到 **文件** | **新建** | **文件…**
    | **iOS** | **源** | **单元测试用例类** 来创建一个 `XCTestCase` 的子类，在 Swift 中创建一个测试用例类。测试代码将类似于：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't forget to ensure that the `URITemplateTests.swift` file is added to the
    necessary test targets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记确保将 `URITemplateTests.swift` 文件添加到必要的测试目标中。
- en: 'The `replace` function requires string processing. Although the function can
    be a class function or an extension on `String`, having it as a separate class
    makes testing easier. The function signature looks like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace` 函数需要字符串处理。虽然该函数可以是类函数或 `String` 的扩展，但将其作为一个单独的类可以使测试更容易。函数签名看起来像：'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Make sure that the `URITemplate` class is added to the test target as well;
    otherwise, the test script will not compile.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将 `URITemplate` 类也添加到测试目标中；否则，测试脚本将无法编译。
- en: The parameters are matched using a regular expression, such as `{[^}]}`. To
    search or access this from a string involves a `Range` of `String.Index` values.
    These are like integer indexes into the string, but instead of referring to a
    character by its byte offset, the index is an abstract representation (some character
    encodings, such as UTF8, use multiple bytes to represent a single character).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是通过正则表达式进行匹配的，例如 `{[^}]}`。要从字符串中搜索或访问这些，涉及到 `String.Index` 值的 `Range`。这些类似于字符串中的整数索引，但与通过字节偏移量引用字符不同，索引是一个抽象表示（某些字符编码，如
    UTF8，使用多个字节来表示单个字符）。
- en: 'The `rangeOfString` method takes a string or regular expression and returns
    a range if there is a match present (or `nil` if there isn''t). This can be used
    to detect whether a pattern is present or to break out of the `while` loop:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`rangeOfString` 方法接受一个字符串或正则表达式，如果存在匹配项则返回一个范围（如果没有匹配项则返回 `nil`）。这可以用来检测是否存在模式或从
    `while` 循环中退出：'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `parameterRange` contains a `start` and `end` index that represent the
    locations of the `{` and `}` characters. The value of the parameter can be extracted
    with `replacement.substringWithRange(parameterRange)`. If it starts with `{?`
    it is replaced with an empty string:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`parameterRange` 包含一个表示 `{` 和 `}` 字符位置的 `start` 和 `end` 索引。可以使用 `replacement.substringWithRange(parameterRange)`
    提取参数值。如果它以 `{?` 开头，则替换为空字符串：'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, if the replacement is of the form `{user}`, then the value of `user`
    is acquired from the dictionary and used as the replacement value. To get the
    name of the parameter, `startIndex` has to be advanced to the `successor`, and
    `endIndex` has to be reversed to the `predecessor` to account for the `{` and
    `}` characters:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果替换的形式是 `{user}`，则从字典中获取 `user` 的值并将其用作替换值。要获取参数的名称，`startIndex` 必须前进到 `successor`，而
    `endIndex` 必须反转到 `predecessor` 以考虑 `{` 和 `}` 字符：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now when the test is run by navigating to **Product** | **Test** or by pressing
    *Command + U*, the string replacement will pass.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当测试通过导航到 **产品** | **测试** 或按 *Command + U* 运行时，字符串替换将通过。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `??` is an optional test that is used to return the first argument if it
    is present, and the second argument if it is `nil`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`??` 是一个可选测试，用于在存在时返回第一个参数，如果它是 `nil`，则返回第二个参数。'
- en: Background threading
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后台线程
- en: 'Background threading allows functions to be trivially launched on the UI thread
    or on a background thread as appropriate. This was explained in [Chapter 6](part0045_split_000.html#1AT9A2-d7e55eb5242648e89c396442afe4f84b
    "Chapter 6. Parsing Networked Data"), *Parsing Networked Data*, in the *Networking
    and user interface* section. Add the following as `Threads.swift`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 后台线程允许函数在适当的 UI 线程或后台线程上轻松启动。这已在 [第 6 章](part0045_split_000.html#1AT9A2-d7e55eb5242648e89c396442afe4f84b
    "第 6 章。解析网络数据")，*解析网络数据*，在 *网络和用户界面* 部分中解释过。将以下内容作为 `Threads.swift` 添加：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `Threads` class can be tested with the following test case:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下测试用例测试 `Threads` 类：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the tests are run with *Command* + *U*, the tests should pass.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试使用 *Command* + *U* 运行时，测试应该通过。
- en: Parsing JSON dictionaries
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析 JSON 字典
- en: 'As many network responses are returned in JSON format and to make JSON parsing
    easier, extensions can be added to the `NSURL` class to facilitate the acquiring
    and parsing of content that is loaded from network locations. Instead of designing
    a synchronous extension that blocks until data is available, using a callback
    function is best practice. Create a file `NSURLExtensions.swift` with the following
    content:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多网络响应以 JSON 格式返回，为了使 JSON 解析更容易，可以向 `NSURL` 类添加扩展，以方便从网络位置获取和解析内容。而不是设计一个同步扩展，它会阻塞直到数据可用，使用回调函数是最佳实践。创建一个名为
    `NSURLExtensions.swift` 的文件，并包含以下内容：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This provides an extension for an `NSURL` to provide a JSON dictionary. However,
    the data type returned from the `JSONObjectWithData` method is `[String:AnyObject]`,
    not `[String:String]`. Although it may be expected that it could just be cast
    to the right type, the `as` will perform a test, and if there are mixed values
    (such as a number or a `nil`), then the entire object will be considered invalid.
    Instead, the JSON data structure must be converted to a `[String:String]` type.
    Add the following as a standalone function to `NSURLExtensions.swift`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这为 `NSURL` 提供了一个扩展，以提供 JSON 字典。然而，从 `JSONObjectWithData` 方法返回的数据类型是 `[String:AnyObject]`，而不是
    `[String:String]`。尽管可能期望它可以直接转换为正确的类型，但 `as` 将执行一个测试，如果存在混合值（如数字或 `nil`），则整个对象将被视为无效。相反，必须将
    JSON 数据结构转换为 `[String:String]` 类型。将以下内容作为独立函数添加到 `NSURLExtensions.swift`：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This can be used to convert the `[String:AnyObject]` in the JSON function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用于将 JSON 函数中的 `[String:AnyObject]` 转换：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The function can be tested with a test class using the `data:` protocol by
    passing in a *base64* encoded string representing the JSON data. To create a `base64`
    representation, create a string, convert it to a UTF8 data object and then convert
    it back to a string representation with a `data:` prefix:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用 `data:` 协议并通过传递表示 JSON 数据的 *base64* 编码字符串来测试该函数，使用测试类。为了创建一个 `base64`
    表示，创建一个字符串，将其转换为 UTF8 数据对象，然后使用 `data:` 前缀将其转换回字符串表示：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Please note that the `sleep(1)` is required as parsing the response has to happen
    in the background thread and, therefore, may not be immediately available. By
    adding a delay to the function it gives a chance for the assertion to be executed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`sleep(1)` 是必需的，因为解析响应必须在后台线程中发生，因此可能不会立即可用。通过向函数添加延迟，它为断言执行提供了机会。
- en: Parsing JSON arrays of dictionaries
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析字典数组
- en: 'A similar approach can be used to parse arrays of dictionaries (such as those
    that are returned by the list repositories resource). The differences here are
    the type signatures (which have an extra `[]` to represent the array), and the
    fact that a `map` is being used to process the elements in the list:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似的方法来解析字典数组（例如，由列出存储库资源返回的数组）。这里的区别在于类型签名（它有一个额外的 `[]` 来表示数组），以及正在使用 `map`
    处理列表中的元素：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The test can be extended as well:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 测试也可以扩展：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating the client
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建客户端
- en: Now that the utilities are complete, the GitHub client API can be created. Once
    that is complete, it can be integrated with the user interface.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在工具已经完成，可以创建 GitHub 客户端 API。一旦完成，就可以将其与用户界面集成。
- en: Talking to the GitHub API
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 GitHub API 通信
- en: A Swift class will be created to talk to the GitHub API. This will connect to
    the root endpoint host and download the JSON for the service URLs so that subsequent
    network connections can be made.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将会创建一个 Swift 类来与 GitHub API 通信。这将连接到根端点主机并下载服务URL的JSON，以便后续的网络连接可以建立。
- en: 'To ensure that network requests are not repeated, an `NSCache` will be used
    to save the responses. This will automatically be emptied when the application
    is under memory pressure:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保网络请求不被重复，将使用 `NSCache` 来保存响应。当应用程序在内存压力下时，这将自动清空：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This can be tested by saving the response from the main GitHub API site at [https://api.github.com](https://api.github.com)
    into an `api/index.json` file by creating an `api` directory in the root level
    of the project and running `curl https://api.github.com > api/index.json` from
    a Terminal prompt. Inside Xcode, add the `api` directory to the project by navigating
    to **File** | **Add Files to Project…** or by pressing *Command* + *Option* +
    *A*, and ensure it is associated with the test target.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在项目的根级别创建一个 `api` 目录并将GitHub API主站点的响应保存到 `api/index.json` 文件中来测试，从终端提示符运行
    `curl https://api.github.com > api/index.json`。在Xcode中，通过导航到 **文件** | **将文件添加到项目…**
    或按 *Command* + *Option* + *A* 将 `api` 目录添加到项目中，并确保它与测试目标相关联。
- en: 'It can then be accessed with an `NSBundle`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用 `NSBundle` 来访问：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The dummy API should not be part of the main application's target, but rather
    of the test target. As a result, instead of using `NSBundle.mainBundle` to acquire
    the application's bundle, `NSBundle(forClass)` is used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟API不应该成为主应用程序的目标，而应该是测试目标的一部分。因此，而不是使用 `NSBundle.mainBundle` 来获取应用程序的包，使用
    `NSBundle(forClass)`。
- en: Returning repositories for a user
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回用户的仓库
- en: 'The APIs returned from the services lookup include `user_repositories_url`,
    which is a template that can be instantiated with a specific user. It is possible
    to add a method `getURLForUserRepos` to the `GitHubAPI` class that will return
    the URL of the user''s repositories. As it will be called frequently, the results
    should be cached using an `NSCache`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务查找返回的API包括 `user_repositories_url`，这是一个可以实例化为特定用户的模板。可以向 `GitHubAPI` 类添加一个方法
    `getURLForUserRepos`，它将返回用户仓库的URL。由于它将被频繁调用，结果应该使用 `NSCache` 来缓存：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the URL is known, data can be parsed as an array of JSON objects using
    an asynchronous callback function to notify when the data is ready:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦知道了URL，就可以使用异步回调函数解析数据，该函数在数据准备好时通知：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This can be tested using a simple addition to the `GitHubAPITests` class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过向 `GitHubAPITests` 类添加一个简单的测试来验证：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The sample data contains 24 repositories in the following file, but the GitHub
    API may contain a different value for this user in the future:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 样本数据包含以下文件中的24个仓库，但GitHub API在未来可能为该用户提供不同的值：
- en: '[https://raw.githubusercontent.com/alblue/com.packtpub.swift.essentials/master/RepositoryBrowser/api/users/alblue/repos.json](https://raw.githubusercontent.com/alblue/com.packtpub.swift.essentials/master/RepositoryBrowser/api/users/alblue/repos.json)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/alblue/com.packtpub.swift.essentials/master/RepositoryBrowser/api/users/alblue/repos.json](https://raw.githubusercontent.com/alblue/com.packtpub.swift.essentials/master/RepositoryBrowser/api/users/alblue/repos.json)'
- en: Accessing data through the AppDelegate
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 AppDelegate 访问数据
- en: When building an iOS application that manages data, deciding where to declare
    the variable is the first decision that has to be made. When implementing a view
    controller, it is common for view-specific data to be associated with that class;
    but if the data needs to be used across multiple view controllers, there is more
    choice.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建一个管理数据的iOS应用程序时，决定在哪里声明变量是必须做出的第一个决定。在实现视图控制器时，通常将特定于视图的数据与该类关联；但如果数据需要在多个视图控制器之间使用，就有更多的选择。
- en: A common approach is to wrap everything into a *singleton*, which is an object
    that is instantiated once. This is typically achieved with a `private var` in
    the implementation class, with a `class func` that returns (or instantiates on
    demand) the singleton.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一种常见的方法是将所有内容封装到一个 *单例* 中，这是一个只实例化一次的对象。这通常通过实现类中的 `private var` 和一个返回（或按需实例化）单例的
    `class func` 来实现。
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Swift `private` keyword ensures that the variable is only visible in the
    current source file. The default visibility is `internal`, which means that code
    is only visible in the current module; the `public` keyword means that it is visible
    outside of the module as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Swift中的`private`关键字确保变量仅在当前源文件中可见。默认的可视性是`internal`，这意味着代码仅在当前模块中可见；`public`关键字表示它也可以在模块外部可见。
- en: Another approach is to use the `AppDelegate` itself. This is in effect already
    a singleton that can be accessed with `UIApplication.sharedApplication().delegate`,
    and is set up prior to any other object accessing it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用`AppDelegate`本身。实际上，它已经是一个单例，可以通过`UIApplication.sharedApplication().delegate`来访问，并且在任何其他对象访问它之前就已经设置好了。
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The AppDelegate should not be overused to store data. Instead of adding too
    many properties, consider creating a separate class or struct to hold the values.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 应该避免过度使用`AppDelegate`来存储数据。而不是添加过多的属性，考虑创建一个单独的类或结构来保存值。
- en: 'The `AppDelegate` will be used to store the reference to the `GitHubAPI`, which
    could use a preference store or other external means to define what instance to
    connect to, along with the list of users and a cache of repositories:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`AppDelegate`将用于存储对`GitHubAPI`的引用，这可能使用偏好存储或其他外部方式来定义要连接的实例，以及用户列表和仓库缓存：'
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To facilitate loading repositories from view controllers, a function can be
    added to `AppDelegate` to provide a list of repositories for a given user:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便从视图控制器加载仓库，可以在`AppDelegate`中添加一个函数来为特定用户提供仓库列表：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Accessing repositories from view controllers
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从视图控制器访问仓库
- en: 'In the `MasterViewController` (created from the **Master Detail** template
    or a new subclass of a `UITableViewController`), define an instance variable,
    `AppDelegate`, which is assigned in the `viewDidLoad` method:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MasterViewController`（从**主从**模板创建或创建一个新的`UITableViewController`子类）中，定义一个实例变量`AppDelegate`，并在`viewDidLoad`方法中分配它：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The table view controller provides data in a number of sections and rows. The
    `numberOfSections` method will return the number of users with the section title
    being the username (indexed by the users list):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 表视图控制器在多个部分和行中提供数据。`numberOfSections`方法将返回具有用户名（通过用户列表索引）作为部分标题的用户数量：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `numberOfRowsInSection` function is called to determine how many rows are
    present in each section. If the number is not known, `0` can be returned while
    running a background query to find the right answer:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`numberOfRowsInSection`函数被调用以确定每个部分中有多少行。如果数量未知，可以在运行后台查询以找到正确答案的同时返回`0`：'
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember to reload the section on the UI thread; otherwise, the updates won't
    display correctly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在UI线程上重新加载部分内容；否则，更新将无法正确显示。
- en: 'Finally, the repository name needs to be shown in the value of the cell. If
    a default `UITableViewCell` is used, then the value can be set on the `textLabel`;
    if it is loaded from a storyboard prototype cell, then the content can be accessed
    appropriately using tags:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要在单元格的值中显示仓库名称。如果使用默认的`UITableViewCell`，则可以在`textLabel`上设置值；如果是从Storyboard原型单元格加载的，则可以使用标签适当地访问内容：
- en: '[PRE26]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When the application is run, the list of repositories will be displayed, grouped
    by the user:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，将按用户分组显示仓库列表：
- en: '![Accessing repositories from view controllers](img/00091.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![从视图控制器访问仓库](img/00091.jpeg)'
- en: Adding users
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加用户
- en: 'At this moment, the list of users is hardcoded into the application. It would
    be preferable to remove this hardcoded list and allow users to be added on demand.
    Create an `addUser` function in the `AppDelegate` class:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时刻，用户列表被硬编码到应用程序中。最好移除这个硬编码的列表，并允许按需添加用户。在`AppDelegate`类中创建一个`addUser`函数：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This allows the detail controller to call the `addUser` function and ensure
    that the list of users is ordered alphabetically.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许详细控制器调用`addUser`函数并确保用户列表按字母顺序排列。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `$0` and `$1` are anonymous parameters expected by the `sort` function.
    This is a shorthand form of `users.sort({ user1, user2 in user1 < user2})`. It
    is also possible to sort the array using the `<` function on the array itself
    using `users.sortInPlace(<)`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`$0`和`$1`是`sort`函数期望的匿名参数。这是`users.sort({ user1, user2 in user1 < user2})`的简写形式。也可以使用数组本身的`<`函数通过`users.sortInPlace(<)`来对数组进行排序。'
- en: 'The add button can be created in the `MasterViewController` in the `viewDidLoad`
    method such that the `insertNewObject` method is called when tapped:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在`MasterViewController`的`viewDidLoad`方法中创建添加按钮，以便在点击时调用`insertNewObject`方法：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When the add button is selected, a `UIAlertController` dialog can be shown with
    a number of actions with handlers that will be called to add the user.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择添加按钮时，可以通过`UIAlertController`对话框显示一系列操作，这些操作将调用以添加用户。
- en: 'Add (or replace) the `insertNewObject` in the `MasterViewController`, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MasterViewController`中添加（或替换）`insertNewObject`，如下所示：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Now, the users can be added in the UI by clicking the **Add** (**+**) button
    at the top right of the application. Each time the application is launched, the
    users array will be empty, and users can be re-added.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户可以通过在应用程序右上角的**添加**（**+**）按钮上点击来在UI中添加。每次应用程序启动时，用户数组将为空，用户可以重新添加。
- en: '![Adding users](img/00092.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![添加用户](img/00092.jpeg)'
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Users could persist between launches using `NSUserDefaults.standardUserDefaults`
    and the `setObject:forKey` and `stringArrayForKey` methods. The implementation
    of this is left to the reader.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用`NSUserDefaults.standardUserDefaults`和`setObject:forKey`以及`stringArrayForKey`方法在启动之间持久化。此实现的细节留给读者。
- en: Implementing the detail view
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现详细视图
- en: The final step is to implement the detail view so that when a repository is
    selected, per-repository information is shown. At the time the repository is selected
    from the master screen, the username, and repository name are known. These can
    be used to pull more information from the repository and add the items into the
    detail view.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是实现详细视图，以便在从主屏幕选择存储库时显示每个存储库的信息。在从主屏幕选择存储库时，已知用户名和存储库名。可以使用这些信息从存储库中提取更多信息并将项目添加到详细视图中。
- en: 'Update the view in the storyboard to add four labels and four label titles
    for username, repository name, number of watchers, and number of open issues.
    Wire these into outlets into the `DetailViewController`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 更新故事板中的视图，添加四个标签和四个标签标题，用于用户名、存储库名、监视者数量和开放问题数量。将这些连接到`DetailViewController`的输出：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To set content on the details view, the `user` and `repo` will be stored as
    (optional) strings, and the additional `data` will be stored in string key/value
    pairs. When they are changed, the `configureView` method should be called to redisplay
    content:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要在详细视图中设置内容，`user`和`repo`将作为（可选的）字符串存储，而额外的`data`将存储在字符串键/值对中。当它们发生变化时，应调用`configureView`方法以重新显示内容：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `configureView` call will also need to be called after the `viewDidLoad`
    method is called to ensure that the UI is set up as expected:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`viewDidLoad`方法之后，还需要调用`configureView`方法以确保UI按预期设置：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `configureView` method, the labels may not have been set, so they need
    to be tested with an `if let` statement before the content is set:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`configureView`方法中，标签可能尚未设置，因此在设置内容之前需要使用`if let`语句进行测试：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If using the standard template, the `splitViewController` of the `AppDelegate`
    needs to be changed to return `true` after the detail view is amended:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用标准模板，需要在详细视图修改后，将`AppDelegate`的`splitViewController`更改为返回`true`：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `splitViewController:collapseSecondaryViewController` method determines
    whether or not the first page that is displayed is the master (`true`) or detail
    (`false`) page.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`splitViewController:collapseSecondaryViewController`方法确定显示的第一页是主页（`true`）还是详细页（`false`）。'
- en: Transitioning between the master and detail views
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在主视图和详细视图之间切换
- en: 'The connection between the master and detail view is triggered with the `showDetail`
    segue in `MasterViewController`. This can be used to extract the selected row
    from the table, which can then be used to extract the selected row and section:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 主视图和详细视图之间的连接是通过`MasterViewController`中的`showDetail`切换来触发的。这可以用来从表中提取所选行，然后可以用来提取所选行和部分：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The details controller can be accessed from the segue''s destination controller—except
    that the destination is the navigation controller, so it needs to be unpacked
    one step further:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从切换的目的控制器访问详细控制器——除了目的控制器是导航控制器，因此需要进一步解包：
- en: '[PRE36]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, the details need to be passed in, which can be extracted from `indexPath`,
    as in the prior parts of the application:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要传递详细内容，这些内容可以从`indexPath`中提取，如应用程序的前几部分所示：
- en: '[PRE37]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Finally, to ensure that the application works in split mode with `SplitViewController`,
    the back button needs to be displayed if in split mode:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了确保应用程序在`SplitViewController`的分割模式下正常工作，如果处于分割模式，则需要显示返回按钮：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Running the application now will show a set of repositories, and when one is
    selected, the details will be displayed:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序将显示一系列仓库，当选择其中一个时，将显示其详细信息：
- en: '![Transitioning between the master and detail views](img/00093.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![在主视图和详细视图之间切换](img/00093.jpeg)'
- en: Tip
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If a crash is seen when displaying the detail view, check in the `Main.storyboard`
    that the connector for a nonexistent field is not defined. Otherwise an error
    similar to **This class is not key value coding-compliant for the key detailDescriptionLabel**
    might be seen, which is caused by the Storyboard runtime attempting to assign
    a missing outlet in the code. Open the `Main.storyboard`, go to the connections
    inspector, and remove the connection to the missing outlet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在显示详细视图时出现崩溃，请检查`Main.storyboard`中不存在字段的连接器是否未定义。否则可能会看到类似**此类对于键detailDescriptionLabel不遵守键值编码**的错误，这是由于Storyboard运行时试图在代码中分配缺失的出口而引起的。打开`Main.storyboard`，转到连接检查器，并删除到缺失出口的连接。
- en: '![Transitioning between the master and detail views](img/00094.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![在主视图和详细视图之间切换](img/00094.jpeg)'
- en: Loading the user's avatar
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载用户的头像
- en: 'The user may have an avatar or icon that they have uploaded to GitHub. This
    information is stored in the user information, which is accessible from a separate
    lookup in the GitHub API. Each user''s avatar will be stored as a reference with
    `avatar_url` in the user information document, such as [https://api.github.com/users/alblue](https://api.github.com/users/alblue),
    which will return something like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能有一个上传到GitHub的头像或图标。这些信息存储在用户信息中，可以通过GitHub API的单独查找访问。每个用户的头像都将作为参考存储在用户信息文档中的`avatar_url`下，例如[https://api.github.com/users/alblue](https://api.github.com/users/alblue)，它将返回类似以下的内容：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This URL represents an image that can be used in the header for the user's repository.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此URL代表一个可用于用户仓库头部的图像。
- en: 'To add support for this, the user info needs to be added to the `GitHubAPI`
    class:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这一点，需要将用户信息添加到`GitHubAPI`类中：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This looks up the `user_url` service from the GitHub API, which returns the
    following URI template:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这从GitHub API中查找`user_url`服务，返回以下URI模板：
- en: '[PRE41]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This can be instantiated with the user and then the image can be loaded asynchronously:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过用户实例化，然后异步加载图像：
- en: '[PRE42]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Once the support to load the user's avatar has been implemented, it can be added
    to the view's header to display it in the user interface.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实现了加载用户头像的支持，就可以将其添加到视图的头部，以在用户界面中显示它。
- en: Tip
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The set of nested `if` statements here suggests that it may be better to refactor
    to Swift's `guard` statement instead. This would ensure that the indentation does
    not increase on each condition. The refactoring is left as an exercise for the
    reader.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的嵌套`if`语句集表明可能最好重构为Swift的`guard`语句。这将确保在每次条件检查时不会增加缩进。重构留给读者作为练习。
- en: Displaying the user's avatar
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示用户的头像
- en: The table view that presents the repository information by user can be amended
    so that along with the user's name, it also displays their avatar at the same
    time. Currently, this is done in the `tableView:`**title**`ForHeaderInSection`
    method, but an equivalent `tableView:`**view**`ForHeaderInSection` method is available
    that provides more customization options.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过用户展示仓库信息的表格视图可以被修改，以便除了用户的名称外，同时显示他们的头像。目前，这是在`tableView:`**title**`ForHeaderInSection`方法中完成的，但有一个等效的`tableView:`**view**`ForHeaderInSection`方法，它提供了更多的自定义选项。
- en: Although the method signature indicates that the return type is `UIView`, in
    fact, it must be a subtype of `UITableViewHeaderFooterView`. Unfortunately, there
    is no support to edit or customize these in Storyboard, so they must be implemented
    programmatically.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管方法签名表明返回类型是`UIView`，但实际上它必须是`UITableViewHeaderFooterView`的子类型。不幸的是，Storyboard中没有支持编辑或自定义这些视图，因此必须通过编程实现。
- en: 'To implement the `viewForHeaderInSection` method, obtain the username as before,
    and set it to the `textLabel` of a newly created `UITableViewHeaderFooterView`.
    Then, in the asynchronous image loader, create a frame that has the same origin
    but a square size for the image, and then create and add the image as a subview
    of the header view. The method will look like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现`viewForHeaderInSection`方法，像以前一样获取用户名，并将其设置为新建的`UITableViewHeaderFooterView`的`textLabel`。然后，在异步图像加载器中，创建一个具有相同原点但正方形大小的图像框架，然后创建并添加图像作为头部视图的子视图。该方法看起来像这样：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now when the application is run, the avatar will be displayed overlaying the
    user''s repositories:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当应用程序运行时，头像将显示在用户的仓库上叠加：
- en: '![Displaying the user''s avatar](img/00095.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![显示用户的头像](img/00095.jpeg)'
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has shown how to integrate the subjects that were created in this
    book to integrate them into a functional application to interact with a remote
    network service, such as GitHub, and be able to present this information in a
    tabular way.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何将本书中创建的主题集成，以便将它们整合成一个功能应用，用于与远程网络服务（如GitHub）交互，并能以表格形式展示这些信息。
- en: By ensuring that all network requests are implemented on background threads,
    and that returned data is updated on the UI thread, the application will remain
    responsive to the user's input. Graphics and custom views can be created to provide
    headings, or the Storyboard could be modified to include more graphics for each
    repository.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确保所有网络请求都在后台线程中实现，并且返回的数据在UI线程上更新，应用程序将保持对用户输入的响应。可以创建图形和自定义视图来提供标题，或者可以将Storyboard修改为包含每个仓库的更多图形。
