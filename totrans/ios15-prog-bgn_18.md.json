["```swift\n    import UIKit\n    import statement imports the API for creating iOS apps. The second allows the playground to display a live view, which you will use to display the table view.\n    ```", "```swift\n    class TableViewExampleController: UIViewController {\n    }\n    ```", "```swift\n    class TableViewExampleController: UIViewController {\n    tableView property is an optional property that will be assigned a UITableView instance. The names array is the model object that will be used to provide data to the table view. A table view displays a single column of rows on the screen, and each row contains a table view cell instance. Similar to collection views, table views need to know how many rows to display and what to put in each row. To provide this information to the table view, you will make the `TableViewExampleController` class conform to the `UITableViewDataSourceProtocol`.This protocol has two required methods:*   `tableview(_:numberOfRowsInSection:)` is called by the table view to determine how many table view cells to display. *   `tableView(_:cellForRowAt:)` is called by the table view to determine what to display in each table view cell.\n    ```", "```swift\n    class TableViewExampleController: UIViewController, UITableViewDataSource {\n    ```", "```swift\n    class TableViewExampleController: UIViewController,\n    UITableViewDataSource {\n       func tableView(_ tableView: UITableView,\n       numberOfRowsInSection section: Int) -> Int {\n          code\n       }\n       func tableView(_ tableView: UITableView,\n       cellForRowAt indexPath: IndexPath) ->\n       UITableViewCell {\n          code\n       }\n       var tableView: UITableView?\n       var names: [String] = [\"Divij\",\"Aamir\",\"Shubham\"]\n    }\n    ```", "```swift\n    class TableViewExampleController: UIViewController,\n    UITableViewDataSource {\n       var tableView: UITableView?\n       var names: [String] = [\"Divij\",\"Aamir\",\"Shubham\"]\n       func tableView(_ tableView: UITableView, \n       numberOfRowsInSection section: Int) -> Int {\n    ```", "```swift\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n       names.count returns the number of elements inside the names array. Since there are three names in it, this will make the table view display three rows.\n    ```", "```swift\n    func tableView(_ tableView: UITableView, cellForRowAt \n    indexPath: IndexPath) -> UITableViewCell {\n    cell. Imagine you have 1,000 items to display in a table view. You don't need 1,000 rows containing 1,000 table view cells—you only need just enough to fill the screen. Table view cells that scroll off the top of the screen can be reused to display items that appear at the bottom of the screen. To make sure you are using the right type of cell, you set the reuse identifier to Cell. This reuse identifier will be registered with the table view later.\n\n    ```", "```swift\n\n    The `indexPath` value locates the row in the table view. The first row has an `indexPath` containing section `0` and row `0`. `indexPath.row` returns `0` for the first row, so `name` is assigned the first element in the `names` array.\n\n    ```", "```swift\n\n    This assigns `name` to the `text` property of the table view cell's `textLabel`.\n\n    ```", "```swift\n\n    This returns the table view cell, which is then displayed on the screen.This method is executed for each row in the table view.\n    ```", "```swift\n    class TableViewExampleController: UIViewController, \n    UITableViewDataSource {\n       var tableView: UITableView?\n       var names: [String] = [\"Divij\",\"Aamir\",\"Shubham\"]\n       func tableView(_ tableView: UITableView, \n       numberOfRowsInSection section: Int) -> Int {\n          names.count\n       }\n       func tableView(_ tableView: UITableView,\n       cellForRowAt indexPath: IndexPath) ->\n       UITableViewCell {\n          let cell = tableView.dequeueReusableCell(\n          withIdentifier: \"Cell\", for:indexPath) \n          let name = names[indexPath.row]\n          cell.textLabel?.text = name \n          return cell\n       }\n    }\n    ```", "```swift\nfunc createTableView() {\n   self.tableView = UITableView(frame: CGRect(x: 0, y: 0,\n   width: self.view.frame.width, \n   height: self.view.frame.height)) \n   self.tableView?.dataSource = self \n   self.tableView?.backgroundColor = .white \n   self.tableView?.register(UITableViewCell.self,\n   forCellReuseIdentifier: \"Cell\")\n   self.view.addSubview(self.tableView!)\n}\n```", "```swift\nself.tableView = UITableView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))\n```", "```swift\nself.tableView?.dataSource = self\n```", "```swift\nself.tableView?.backgroundColor = .white\n```", "```swift\nself.tableView?.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n```", "```swift\nself.view.addSubview(self.tableView!)\n```", "```swift\n    override func viewDidLoad() { \n       super.viewDidLoad() \n       self.view.bounds = CGRect(x: 0, y: 0, \n       width: 375, height: 667)\n       createTableView()\n    }\n    ```", "```swift\n    import UIKit\n    import PlaygroundSupport\n    class TableViewExampleController: UIViewController, \n    UITableViewDataSource {\n       var tableView: UITableView?\n       var names: [String] = [\"Divij\",\"Aamir\",\"Shubham\"]\n       override func viewDidLoad() { \n          super.viewDidLoad() \n          self.view.bounds = CGRect(x: 0, y: 0, \n          width: 375, height: 667)\n          createTableView()\n       }\n       func createTableView() {\n          self.tableView = UITableView(frame: CGRect(x: 0,\n          y: 0, width: self.view.frame.width, height: \n          self.view.frame.height)) \n          self.tableView?.dataSource = self \n          self.tableView?.backgroundColor = .white\n          self.tableView?.register(UITableViewCell.self, \n          forCellReuseIdentifier: \"Cell\")\n          self.view.addSubview(self.tableView!)\n       }\n       func tableView(_ tableView: UITableView, \n       numberOfRowsInSection section: Int) -> Int {\n          names.count\n       }\n       func tableView(_ tableView: UITableView,\n       cellForRowAt indexPath: IndexPath) ->\n       UITableViewCell {\n          let cell = tableView.dequeueReusableCell(\n          withIdentifier: \"Cell\", for:indexPath)\n          let name = names[indexPath.row]\n          cell.textLabel?.text = name \n          return cell\n       }\n    }\n    ```", "```swift\n    PlaygroundPage.current.liveView = TableViewExampleController()\n    ```", "```swift\n    class LocationViewController: UIViewController {\n       @IBOutlet weak var tableView: UITableView!\n       override func viewDidLoad(){\n          super.viewDidLoad()\n       }\n    }\n    ```", "```swift\n    class LocationViewController: UIViewController, \n    UITableViewDataSource {\n    ```", "```swift\n    class LocationViewController: UIViewController, \n    UITableViewDataSource {\n       @IBOutlet var tableView: UITableView!\n       override func viewDidLoad() {\n          super.viewDidLoad()\n       }\n       func tableView(_ tableView: UITableView,\n       numberOfRowsInSection section: Int) -> Int {\n          code\n       }\n       func tableView(_ tableView: UITableView,\n       cellForRowAt indexPath: IndexPath) ->\n       UITableViewCell {\n          code\n       }\n    }\n    ```", "```swift\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n       10\n    }\n    ```", "```swift\n    func tableView(_ tableView: UITableView, cellForRowAt \n    indexPath: IndexPath) -> UITableViewCell {\n    locationCell identifier and assigns it to cell. You set this identifier in the Main storyboard file in *Chapter 12*, *Modifying and Configuring Cells*.\n\n    ```", "```swift\n\n    This assigns a string, `\"A Cell\"` to the `text` property of the table view cell's `textLabel`.\n\n    ```", "```swift\n\n    This returns the cell, which is then displayed on the screen. This process is repeated for the number of cells that are given in the first method, which, in this case, is 10.\n    ```", "```swift\n    class LocationDataManager {\n    }\n    ```", "```swift\n    private var locations: [String] = []\n    ```", "```swift\n    private func loadData() -> [[String: String]] {\n       let decoder = PropertyListDecoder()\n       if let path = Bundle.main.path(forResource:\n       \"Locations\", ofTypes: \"plist\"),\n       let locationsData = Filemanager.default.contents(\n       atPath: path),\n       let locations = try? decoder.decode([[String:\n       String]].self, from: locationsData) {\n          return locations\n       }\n       return [[:]]\n    }\n    func fetch() {\n       for location in loadData() {\n          if let city = location[\"city\"], let\n          state = location[\"state\"] {\n             locations.append(\"\\(city), \\(state)\")\n          }\n       }\n    }\n    func numberOfLocationItems() -> Int {\n       locations.count\n    }\n    func locationItem(at index: Int) -> String {\n       locations[index]\n    }\n    ```", "```swift\n    loadData() \n    ```", "```swift\n    fetch() \n    ```", "```swift\n    numberOfLocationItems() \n    ```", "```swift\n    locationItem(at:) \n    ```", "```swift\n    let manager = LocationDataManager()\n    ```", "```swift\n    override func viewDidLoad() { \n       super.viewDidLoad() \n       manager.fetch()\n    }\n    ```", "```swift\n    func tableView(_ tableView: UITableView,\n    numberOfRowsInSection section: Int) -> Int {\n       manager.numberOfLocationItems()\n    }\n    ```", "```swift\n    func tableView(_ tableView: UITableView, cellForRowAt\n    indexPath: IndexPath) -> UITableViewCell {\n       let cell = tableView.dequeueReusableCell(\n       withIdentifier: \"locationCell\", for: indexPath)\n       cell.textLabel?.text =\n       text property of the table view cell's textLabel to the corresponding element in the locations array. The indexPath returns the section and row number of a particular row in a table view. For example, the first row has an indexPath containing section 0 and row 0. indexPath.row returns 0 for the first row, so manager returns the string stored at index 0 in the locations array. This string is then assigned to the text property of the first table view cell's textLabel.\n    ```"]