- en: '*Chapter 4*: Range Operators and Loops'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you looked at conditionals, which allow you to do different
    things based on different conditions, and optionals, which enable you to create
    variables that may or may not have a value.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about **range operators** and **loops**. Range
    operators allow you to represent a range of values by specifying the start and
    end values for a range, and you'll learn about the different types of range operators.
    Loops allow you to repeat an instruction or a sequence of instructions over and
    over. You can repeat a sequence a fixed number of times, or repeat a sequence
    until a condition is met. You'll learn about the different types of loops used
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to use ranges, and how to
    create and use the different types of loops (`for-in`, `while`, and `repeat-while`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Range operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Xcode playground for this chapter is in the `Chapter04` folder of the code
    bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/309pdRJ](https://bit.ly/309pdRJ)'
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to start from scratch, create a new playground and name it `RangeOperatorsAndLoops`.
  prefs: []
  type: TYPE_NORMAL
- en: You can type in and run all the code in this chapter as you go along. Let's
    start with specifying a range of numbers using range operators.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Range operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Range operators allow you to represent a range of values. Let''s say you want
    to represent a sequence of numbers starting with `firstNumber` and ending with
    `lastNumber`. You don''t need to specify every value; you can just specify the
    range in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Imagine you need to write a program for a department store which automatically
    sends a discount voucher to customers between the ages of 18 and 30\. It would
    be very cumbersome if you needed to set up an `if` or `switch` statement for each
    age. It's much more convenient to use a range operator in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on range operators, visit: [https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this out in the playground. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code to your playground and click the `10` and ends with `20`,
    including both numbers, to the `myRange` constant. This is known as a **closed
    range operator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result displayed in the Results area may be truncated. Click the square
    icon to the right of the result. It will be displayed inline in the Editor area:![Figure
    4.1: Editor area displaying inline result'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.1: Editor area displaying inline result'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now see the complete result in a box under the line of code. You can
    drag the right edge to make the box bigger if you wish.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember you can drag the border between the Results and Editor areas to increase
    the size of the Results area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you don''t want to include the last number of the sequence in the range,
    use `..<` in place of `...`. Type in and run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will store the sequence starting with `10` and ending with `19` in the
    `myRange2` constant and is known as a **half-open range operator**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is one more type of range operator, the **one-sided range operator**,
    and you will learn about that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to create and use ranges, you will learn about loops,
    the different loop types, and how to use them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In programming, you frequently need to do the same thing over and over again.
    For example, each month, a company will need to generate payroll slips for each
    employee. If the company has 10,000 employees, it would be inefficient to write
    10,000 instructions to create the payroll slips. Repeating a single instruction
    10,000 times would be better, and loops are used for this.
  prefs: []
  type: TYPE_NORMAL
- en: There are three types of loop; the `for-in` loop, the `while` loop, and the
    `repeat-while` loop. The `for-in` loop will repeat for a known number of times,
    and the `while` and `repeat-while` loops will repeat as long as the loop condition
    is true.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on loops, visit: [https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at each type in turn, starting with the `for-in` loop, which is used
    when you know how many times a loop should be repeated.
  prefs: []
  type: TYPE_NORMAL
- en: Using the for-in loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `for-in` loop steps through every value in a sequence, and a set of statements
    in curly braces, known as the loop body, are executed each time. Each value is
    assigned to a temporary variable in turn, and the temporary variable can be used
    within the loop body. Here is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of times the loop repeats is dictated by the number of items in
    the sequence. Let''s begin by creating a `for-in` loop to display all the numbers
    in `myRange`. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code to your playground and click the `myRange` includes the
    last number in the range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s try the same program, but this time with `myRange2`. Modify the code
    as follows and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can even use a range operator directly after the `in` keyword. Type and
    run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each number from `0` to `5` is displayed in the Debug area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want the sequence to be reversed, use the `reversed()` function. Modify
    the code as follows and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great job! Let's check out `while` loops in the next section, which are used
    when a loop sequence should be repeated as long as a condition is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the while loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `while` loop contains a condition and a set of statements in curly braces,
    known as the loop body. The condition is checked first; if `true`, the loop body
    is executed, and the loop repeats until the condition is `false`. Here is what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to create a variable, increment it by `5`, and keep
    on doing it as long as the variable''s value is less than `50`. Click the **Play/Stop**
    button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's step through the code. Initially, `y` is set to `0`. The `y < 50` condition
    is checked and returns `true`, so the loop body is executed. The value of `y`
    is incremented by `5`, and `y is 5` is printed in the Debug area. The loop repeats,
    and `y < 50` is checked again. Since `y` is now `5` and `5 < 50` still returns
    `true`, the loop body is executed again. This is repeated until the value of `y`
    is `50`, at which point `y < 50` returns `false` and the loop stops.
  prefs: []
  type: TYPE_NORMAL
- en: If the `while` loop's condition is `false` to begin with, the loop body will
    never be executed. Try changing the value of `y` to `100` to see this.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll study `repeat-while` loops. These will execute the
    statements in the loop body first before checking the loop condition.
  prefs: []
  type: TYPE_NORMAL
- en: The repeat-while loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like a `while` loop, a `repeat-while` loop also contains a condition and a
    loop body, but the loop body is executed first before the condition is checked.
    If the condition is `true`, the loop repeats until the condition returns `false`.
    Here is what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to create a variable, increment it by `5`, and keep
    on doing it as long as the variable''s value is less than `50`. Click the **Play/Stop**
    button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's step through the code. Initially, `x` is set to `0`. The loop body is
    executed. The value of `x` is incremented by `5`, so now `x` contains `5`, and
    `x is 5` is printed to the Debug area. The `x < 50` condition is checked, and
    since it returns `true`, the loop is repeated. The value of `x` is incremented
    by `5`, so now `x` contains `10`, and `x is 10` is printed to the Debug area.
    The loop is repeated until `x` contains `50`, at which point `x < 50` returns
    `false` and the loop stops.
  prefs: []
  type: TYPE_NORMAL
- en: The loop body will be executed at least once, even if the condition is `false`
    to begin with. Try changing the value of `x` to `100` to see this.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to create and use different loop types. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you looked at closed and half-open range operators, which allow
    you to specify a range of numbers rather than specifying every individual number
    discretely.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about the three different loop types, the `for-in` loop, the
    `while` loop, and the `repeat-while` loop. The `for-in` loop allows you to repeat
    a set of statements a fixed number of times, and the `while` and `repeat-while`
    loops allow you to repeat a set of statements as long as a condition is true.
    Great job!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will study collection types, which allow you to store
    a collection of data referenced by an index, a collection of key-value pairs,
    and an unstructured collection of data.
  prefs: []
  type: TYPE_NORMAL
