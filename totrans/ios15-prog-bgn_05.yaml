- en: '*Chapter 4*: Range Operators and Loops'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：范围操作符和循环'
- en: In the previous chapter, you looked at conditionals, which allow you to do different
    things based on different conditions, and optionals, which enable you to create
    variables that may or may not have a value.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了条件语句，它允许您根据不同的条件执行不同的操作，以及可选类型，它允许您创建可能或可能没有值的变量。
- en: In this chapter, you will learn about **range operators** and **loops**. Range
    operators allow you to represent a range of values by specifying the start and
    end values for a range, and you'll learn about the different types of range operators.
    Loops allow you to repeat an instruction or a sequence of instructions over and
    over. You can repeat a sequence a fixed number of times, or repeat a sequence
    until a condition is met. You'll learn about the different types of loops used
    to accomplish this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解**范围操作符**和**循环**。范围操作符允许您通过指定范围的开头和结尾值来表示一系列值，您还将了解不同类型的范围操作符。循环允许您重复执行指令或一系列指令。您可以重复执行固定次数的序列，或者重复执行序列直到满足某个条件。您将了解用于完成此操作的不同类型的循环。
- en: By the end of this chapter, you'll have learned how to use ranges, and how to
    create and use the different types of loops (`for-in`, `while`, and `repeat-while`).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何使用范围，以及如何创建和使用不同类型的循环（`for-in`、`while`和`repeat-while`）。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Exploring Range operators
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索范围操作符
- en: Exploring Loops
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索循环
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter04` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的Xcode游乐场位于本书代码包的`Chapter04`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://bit.ly/309pdRJ](https://bit.ly/309pdRJ)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/309pdRJ](https://bit.ly/309pdRJ)'
- en: If you wish to start from scratch, create a new playground and name it `RangeOperatorsAndLoops`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从头开始，创建一个新的游乐场并将其命名为`RangeOperatorsAndLoops`。
- en: You can type in and run all the code in this chapter as you go along. Let's
    start with specifying a range of numbers using range operators.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在阅读过程中输入并运行本章中的所有代码。让我们从使用范围操作符指定数字范围开始。
- en: Exploring Range operators
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索范围操作符
- en: 'Range operators allow you to represent a range of values. Let''s say you want
    to represent a sequence of numbers starting with `firstNumber` and ending with
    `lastNumber`. You don''t need to specify every value; you can just specify the
    range in this way:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 范围操作符允许您表示一系列值。假设您想表示从`firstNumber`开始到`lastNumber`结束的数字序列。您不需要指定每个值；您只需以这种方式指定范围：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Imagine you need to write a program for a department store which automatically
    sends a discount voucher to customers between the ages of 18 and 30\. It would
    be very cumbersome if you needed to set up an `if` or `switch` statement for each
    age. It's much more convenient to use a range operator in this case.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要编写一个为百货公司编写程序，该程序可以自动向18至30岁的顾客发送折扣券。如果需要为每个年龄设置`if`或`switch`语句，将会非常繁琐。在这种情况下使用范围操作符会方便得多。
- en: Important Information
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on range operators, visit: [https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于范围操作符的信息，请访问：[https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).
- en: 'Let''s try this out in the playground. Follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在游乐场中尝试一下。按照以下步骤操作：
- en: Add the following code to your playground and click the `10` and ends with `20`,
    including both numbers, to the `myRange` constant. This is known as a **closed
    range operator**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，并点击`10`和以`20`结束的数字，包括这两个数字，到`myRange`常量中。这被称为**闭区间操作符**。
- en: 'The result displayed in the Results area may be truncated. Click the square
    icon to the right of the result. It will be displayed inline in the Editor area:![Figure
    4.1: Editor area displaying inline result'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '结果区域显示的结果可能被截断。点击结果右侧的方形图标。它将在编辑器区域中显示：![Figure 4.1: 编辑器区域显示内联结果'
- en: '](img/Figure_4.1_B17469.jpg)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_4.1_B17469.jpg](img/Figure_4.1_B17469.jpg)'
- en: 'Figure 4.1: Editor area displaying inline result'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Figure 4.1: 编辑器区域显示内联结果'
- en: You can now see the complete result in a box under the line of code. You can
    drag the right edge to make the box bigger if you wish.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在可以在代码行下的框中看到完整的输出结果。如果你愿意，可以拖动右边缘使框变大。
- en: Tip
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember you can drag the border between the Results and Editor areas to increase
    the size of the Results area.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住你可以拖动结果和编辑器区域之间的边界来增加结果区域的大小。
- en: 'If you don''t want to include the last number of the sequence in the range,
    use `..<` in place of `...`. Type in and run the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不想在范围内包含序列的最后一个数字，请使用 `..<` 代替 `...`。输入并运行以下代码：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will store the sequence starting with `10` and ending with `19` in the
    `myRange2` constant and is known as a **half-open range operator**.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在 `myRange2` 常量中存储从 `10` 开始到 `19` 结束的序列，并被称为 **半开范围运算符**。
- en: There is one more type of range operator, the **one-sided range operator**,
    and you will learn about that in the next chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种类型的范围运算符，即 **单侧范围运算符**，你将在下一章中了解它。
- en: Now that you know how to create and use ranges, you will learn about loops,
    the different loop types, and how to use them in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何创建和使用范围，你将在下一节中学习循环、不同的循环类型以及如何使用它们。
- en: Exploring Loops
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索循环
- en: In programming, you frequently need to do the same thing over and over again.
    For example, each month, a company will need to generate payroll slips for each
    employee. If the company has 10,000 employees, it would be inefficient to write
    10,000 instructions to create the payroll slips. Repeating a single instruction
    10,000 times would be better, and loops are used for this.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，你经常需要一遍又一遍地做同样的事情。例如，每个月，公司都需要为每位员工生成工资条。如果公司有 10,000 名员工，编写 10,000 条指令来创建工资条将是不高效的。重复一条指令
    10,000 次会更好，循环就是为此而用的。
- en: There are three types of loop; the `for-in` loop, the `while` loop, and the
    `repeat-while` loop. The `for-in` loop will repeat for a known number of times,
    and the `while` and `repeat-while` loops will repeat as long as the loop condition
    is true.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的循环；`for-in` 循环、`while` 循环和 `repeat-while` 循环。`for-in` 循环将重复已知次数，而 `while`
    和 `repeat-while` 循环将重复直到循环条件为真。
- en: Important Information
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on loops, visit: [https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于循环的信息，请访问：[https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html](https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html)。
- en: Let's look at each type in turn, starting with the `for-in` loop, which is used
    when you know how many times a loop should be repeated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看每种类型，首先是 `for-in` 循环，它在你知道循环应该重复多少次时使用。
- en: Using the for-in loop
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `for-in` 循环
- en: 'The `for-in` loop steps through every value in a sequence, and a set of statements
    in curly braces, known as the loop body, are executed each time. Each value is
    assigned to a temporary variable in turn, and the temporary variable can be used
    within the loop body. Here is what it looks like:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-in` 循环遍历序列中的每个值，并在每次迭代时执行大括号内的语句集，即循环体。每个值依次分配给一个临时变量，并且可以在循环体内使用该临时变量。以下是它的样子：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The number of times the loop repeats is dictated by the number of items in
    the sequence. Let''s begin by creating a `for-in` loop to display all the numbers
    in `myRange`. Follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 循环重复的次数由序列中的项目数量决定。让我们首先创建一个 `for-in` 循环来显示 `myRange` 中的所有数字。按照以下步骤操作：
- en: Add the following code to your playground and click the `myRange` includes the
    last number in the range.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，并点击 `myRange` 包含范围中的最后一个数字。
- en: 'Let''s try the same program, but this time with `myRange2`. Modify the code
    as follows and run it:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试相同的程序，但这次使用 `myRange2`。按照以下方式修改代码并运行：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can even use a range operator directly after the `in` keyword. Type and
    run the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你甚至可以直接在 `in` 关键字后使用范围运算符。输入并运行以下代码：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each number from `0` to `5` is displayed in the Debug area.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 `0` 到 `5` 的每个数字都在调试区域中显示。
- en: 'If you want the sequence to be reversed, use the `reversed()` function. Modify
    the code as follows and run it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要反转序列，请使用 `reversed()` 函数。按照以下方式修改代码并运行：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Great job! Let's check out `while` loops in the next section, which are used
    when a loop sequence should be repeated as long as a condition is `true`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！让我们在下一节中检查 `while` 循环，它在循环序列应该重复直到条件为 `true` 时使用。
- en: Using the while loop
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `while` 循环
- en: 'A `while` loop contains a condition and a set of statements in curly braces,
    known as the loop body. The condition is checked first; if `true`, the loop body
    is executed, and the loop repeats until the condition is `false`. Here is what
    it looks like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环包含一个条件和一组用大括号括起来的语句，称为循环体。首先检查条件；如果为`true`，则执行循环体，并且循环会重复，直到条件为`false`。它看起来是这样的：'
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code to create a variable, increment it by `5`, and keep
    on doing it as long as the variable''s value is less than `50`. Click the **Play/Stop**
    button to run it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加以创建一个变量，将其增加`5`，并且只要变量的值小于`50`就持续这样做。点击**播放/停止**按钮来运行它：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's step through the code. Initially, `y` is set to `0`. The `y < 50` condition
    is checked and returns `true`, so the loop body is executed. The value of `y`
    is incremented by `5`, and `y is 5` is printed in the Debug area. The loop repeats,
    and `y < 50` is checked again. Since `y` is now `5` and `5 < 50` still returns
    `true`, the loop body is executed again. This is repeated until the value of `y`
    is `50`, at which point `y < 50` returns `false` and the loop stops.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析代码。最初，`y`被设置为`0`。检查`y < 50`条件并返回`true`，因此执行循环体。`y`的值增加`5`，并在调试区域打印出`y
    is 5`。循环重复，并再次检查`y < 50`。由于`y`现在是`5`且`5 < 50`仍然返回`true`，因此再次执行循环体。这会一直重复，直到`y`的值为`50`，此时`y
    < 50`返回`false`，循环停止。
- en: If the `while` loop's condition is `false` to begin with, the loop body will
    never be executed. Try changing the value of `y` to `100` to see this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`while`循环的初始条件为`false`，则循环体将永远不会执行。尝试将`y`的值更改为`100`来查看这一点。
- en: In the next section, you'll study `repeat-while` loops. These will execute the
    statements in the loop body first before checking the loop condition.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习`repeat-while`循环。这些循环将首先执行循环体内的语句，然后再检查循环条件。
- en: The repeat-while loop
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重复-直到循环
- en: 'Like a `while` loop, a `repeat-while` loop also contains a condition and a
    loop body, but the loop body is executed first before the condition is checked.
    If the condition is `true`, the loop repeats until the condition returns `false`.
    Here is what it looks like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与`while`循环类似，`repeat-while`循环也包含一个条件和一组循环体，但循环体在检查条件之前先执行。如果条件为`true`，则循环会重复，直到条件返回`false`。它看起来是这样的：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following code to create a variable, increment it by `5`, and keep
    on doing it as long as the variable''s value is less than `50`. Click the **Play/Stop**
    button to run it:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加以创建一个变量，将其增加`5`，并且只要变量的值小于`50`就持续这样做。点击**播放/停止**按钮来运行它：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's step through the code. Initially, `x` is set to `0`. The loop body is
    executed. The value of `x` is incremented by `5`, so now `x` contains `5`, and
    `x is 5` is printed to the Debug area. The `x < 50` condition is checked, and
    since it returns `true`, the loop is repeated. The value of `x` is incremented
    by `5`, so now `x` contains `10`, and `x is 10` is printed to the Debug area.
    The loop is repeated until `x` contains `50`, at which point `x < 50` returns
    `false` and the loop stops.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步分析代码。最初，`x`被设置为`0`。执行循环体。`x`的值增加`5`，因此现在`x`包含`5`，并在调试区域打印出`x is 5`。检查`x
    < 50`条件，由于它返回`true`，循环会重复。`x`的值增加`5`，因此现在`x`包含`10`，并在调试区域打印出`x is 10`。循环会重复，直到`x`包含`50`，此时`x
    < 50`返回`false`，循环停止。
- en: The loop body will be executed at least once, even if the condition is `false`
    to begin with. Try changing the value of `x` to `100` to see this.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 即使初始条件为`false`，循环体也会至少执行一次。尝试将`x`的值更改为`100`来查看这一点。
- en: You now know how to create and use different loop types. Awesome!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道了如何创建和使用不同的循环类型。太棒了！
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you looked at closed and half-open range operators, which allow
    you to specify a range of numbers rather than specifying every individual number
    discretely.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了闭包和半开区间运算符，这些运算符允许你指定一个数字范围，而不是逐个指定每个数字。
- en: You also learned about the three different loop types, the `for-in` loop, the
    `while` loop, and the `repeat-while` loop. The `for-in` loop allows you to repeat
    a set of statements a fixed number of times, and the `while` and `repeat-while`
    loops allow you to repeat a set of statements as long as a condition is true.
    Great job!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了三种不同的循环类型：`for-in`循环、`while`循环和`repeat-while`循环。`for-in`循环允许你重复一组语句固定次数，而`while`和`repeat-while`循环允许你在条件为`true`的情况下重复一组语句。做得好！
- en: In the next chapter, you will study collection types, which allow you to store
    a collection of data referenced by an index, a collection of key-value pairs,
    and an unstructured collection of data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习集合类型，这些类型允许你通过索引存储数据集合、通过键值对存储数据集合以及存储无结构的数据集合。
