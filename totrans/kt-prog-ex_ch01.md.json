["```\n sudo apt-get update\n```", "```\n java -version\n```", "```\n sudo apt-get install default-jdk\n```", "```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```\nbrew -v\n```", "```\nbrew install kotlin\n```", "```\nsudo port install kotlin\n```", "```\n curl -s \"https://get.sdkman.io\" | bash\n```", "```\n source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n```", "```\n sdk version\n```", "```\n sdk install kotlin\n```", "```\n// The following program prints Hello world to the standard system output.\nfun main (args: Array<String>) {\n  println(\"Hello world!\")\n}\n```", "```\nkotlinc hello.kt -include-runtime -d hello.jar\n```", "```\njava -jar hello.jar\n```", "```\nval x: Int = 1\nval y: Int = 2\nval z: Int = x + y\nprintln(z)\n\n```", "```\nkotlinc -script NumberSum.kts\n```", "```\nfun main(args: Array<String>) {\n  println(\"Hello world!\")\n}\n```", "```\nfun main(args: Array<String>) {\n  var x: Int = 1\n}\n\n```", "```\nvar x = 1\n```", "```\nvar x = 1 // I am a variable identified by x and I hold a value of 1\nvar y = 2 // I am a variable identified by y and I hold a value of 2\nvar z: Int = x + y // I am a variable identified by z and I hold a value of 3\n```", "```\nval x = 200\n```", "```\nfun main(args: Array<String>) {\n  // block A begins\n  var a = 10\n  var i = 1\n\n  while (i < 10) {\n    // block B begins\n    val b = a / i\n    print(b)\n    i++\n  }\n  print(b) // Error occurs: variable b is out of scope\n}\n```", "```\nvar pi: Float = 3.142\n```", "```\nvar d: Double = 3.142\n```", "```\nvar t: Boolean = true\nvar f: Boolean = false\n```", "```\nval martinLutherQuote: String = \"Free at last, Free at last, Thank God almighty we are free at last.\"\n```", "```\nval c: Char = 'i' // I am a character\n```", "```\nvar c: Char\nval sentence: String = \"I am made up of characters.\"\n\nfor (character in sentence) {\n  c = character // Value of character assigned to c without error\n  println(c)\n}\n```", "```\nval names = arrayOf(\"Tobi\", \"Tonia\", \"Timi\")\n```", "```\nval numbers = arrayOf(1, 2, 3, 4)\nprintln(numbers[0]) // Prints 1\nprintln(numbers.get(1)) // Prints 2\n```", "```\nval numbers = arrayOf(1, 2, 3, 4)\nprintln(numbers[0]) // Prints 1\nnumbers[0] = 23\nprintln(numbers[0]) // Prints 23\n```", "```\nval numbers = arrayOf(1, 2, 3, 4)\nprintln(numbers.length) // Prints 4\n```", "```\nfun printSum(a: Int, b: Int) {\n  print(a + b)\n}\n```", "```\nfun printSum(a: Int, b: Int): Unit {\n  print(a + b)\n}\n```", "```\nfun repeat(word: String, times: Int) { \n  var i = 0\n\n  while (i < times) {\n    println(word)\n    i++\n  }\n}\n\nfun main(args: Array<String>) {\n  repeat(\"Hello!\", 5)\n}\n```", "```\nfun returnFullName(firstName: String, surname: String): String {\n  return \"${firstName} ${surname}\"\n}\n\nfun main(args: Array<String>) {\n  val fullName: String = returnFullName(\"James\", \"Cameron\")\n  println(fullName) // prints: James Cameron\n}\n```", "```\n\"${firstName} ${surname}\"\n```", "```\n//Good function name\nfun sayHello() {\n  println(\"Hello\")\n}\n\n//Bad function name\nfun say_hello() {\n  println(\"Hello\")\n}\n```", "```\nval b: Int = 957 // This is a single line comment\n// println(b)\n```", "```\n/*\n * I am a multiline comment.\n * Everything within me is commented out.\n*/\n```", "```\n/**\n * Adds an [item] to the queue.\n * @return the new size of the queue.\n*/\nfun enqueue(item: Object): Int { ... }\n```", "```\nval a = 1\n\nif (a == 1) {\n print(\"a is one\")\n} \n```", "```\nval a = 4\nif (a == 1) {\n  print(\"a is equal to one.\")\n} else if (a == 2) {\n    print(\"a is equal to two.\")\n} else {\n    print(\"a is neither one nor two.\")\n}\n```", "```\nfun printEvenNumbers(numbers: Array<Int>) {\n  numbers.forEach {\n    when (it % 2) {\n      0 -> println(it)\n    }\n  }\n}\n\nfun main (args: Array<String>) {\n  val numberList: Array<Int> = arrayOf(1, 2, 3, 4, 5, 6)\n  printEvenNumbers(numberList)\n}\n```", "```\n(expression) ?: value2\n\n```", "```\nval nullName: String? = null\nval firstName = nullName ?: \"John\"\n```", "```\nfor (obj in collection) { … }\n```", "```\nval numSet = arrayOf(1, 563, 23)\n\nfor (number in numSet) {\n  println(number)\n}\n```", "```\nfor (index in numSet.indices) {\n  println(index)\n}\n```", "```\nfor (number: Int in numSet) {\n  println(number)\n}\n```", "```\nwhile (condition) { … }\n```", "```\nval names = arrayOf(\"Jeffrey\", \"William\", \"Golding\", \"Segun\", \"Bob\")\nvar i = 0\n\nwhile (!names[i].equals(\"Segun\")) {\n  println(\"I am not Segun.\")\n  i++\n}\n```", "```\ndata class Student(val name: String, val age: Int, val school: String)\n\nval prospectiveStudents: ArrayList<Student> = ArrayList()\nval admittedStudents: ArrayList<Student> = ArrayList()\n\nprospectiveStudents.add(Student(\"Daniel Martinez\", 12, \"Hogwarts\"))\nprospectiveStudents.add(Student(\"Jane Systrom\", 22, \"Harvard\"))\nprospectiveStudents.add(Student(\"Matthew Johnson\", 22, \"University of Maryland\"))\nprospectiveStudents.add(Student(\"Jide Sowade\", 18, \"University of Ibadan\"))\nprospectiveStudents.add(Student(\"Tom Hanks\", 25, \"Howard University\"))\n\nfor (student in prospectiveStudents) {\n  if (student.age < 16) {\n    continue\n  }\n  admittedStudents.add(student)\n\n  if (admittedStudents.size >= 3) {\n    break\n  }\n}\n\nprintln(admittedStudents)\n```", "```\ndo { \n ...\n} while (condition) \n```", "```\nvar i = 0\n\ndo {\n println(\"I’m in here!\")\n i++\n} while (i < 10)\n\nprintln(\"I’m out here!\")\n```", "```\nclass NullPointerExample {\n\n public static void main(String[] args) {\n  String name = \"James Gates\";\n  System.out.println(name.length()); // Prints 11\n\n  name = null; // assigning a value of null to name\n  System.out.println(name.length()); // throws NullPointerException\n }\n}\n```", "```\nvar name: String = \"James Gates\"\nprintln(name.length)\n\nname = null // null value assignment not permitted\nprintln(name.length)\n```", "```\nvar name: String? = \"James\"\nprintln(name.length)\n\nname = null // null value assignment permitted\nprintln(name.length)\n```", "```\nvar name: String? = \"James\"\nprintln(name?.length)\n\nname = null // null value assignment permitted\nprintln(name?.length)\n```", "```\npackage foo\n```", "```\npackage animals\ndata class Buffalo(val mass: Int, val maxSpeed: Int, var isDead: Boolean = false)\n```", "```\npackage animals\nclass Lion(val mass: Int, val maxSpeed: Int) {\n\n  fun kill(animal: Buffalo) { // Buffalo type used with our import\n    if (!animal.isDead) {\n      println(\"Lion attacking animal.\")\n      animal.isDead = true\n      println(\"Lion kill successful.\")\n    }\n  }\n}\n```", "```\nimport animals.Buffalo\nimport animals.Lion\n\nfun main(args: Array<String>) {\n  val lion = Lion(190, 80)\n  val buffalo = Buffalo(620, 60)\n  println(\"Buffalo is dead: ${buffalo.isDead}\")\n  lion.kill(buffalo)\n  println(\"Buffalo is dead: ${buffalo.isDead}\")\n}\n```", "```\nclass Person\n```", "```\nclass HelloPrinter {\n  fun printHello() {\n    println(\"Hello!\")\n  }\n}\n```", "```\nval printer = HelloPrinter()\n```", "```\nprinter.printHello() // Prints hello\n```", "```\nclass Printer {\n  companion object DocumentPrinter {\n    fun printDocument() = println(\"Document printing successful.\")\n  }\n}\n\nfun main(args: Array<String>) {\n  Printer.printDocument() // printDocument() invoked via companion object\n  Printer.Companion.printDocument() // also invokes printDocument() via \n                                    // a companion object\n}\n```", "```\nclass Printer {\n  companion object DocumentPrinter { // Companion object identified by DocumentPrinter\n    fun printDocument() = println(\"Document printing successful.\")\n  }\n}\n\nfun main(args: Array<String>) {\n  Printer.DocumentPrinter.printDocument() // printDocument() invoked via\n                                          // a named companion object\n}\n```", "```\nclass Person {    var age = 0\n  var firstName = \"\"\n  var surname = \"\"\n}\n```", "```\nval person = Person()\nperson.firstName = \"Raven\"\nperson.surname = \"Spacey\"\nperson.age = 35\n```", "```\n<LinearLayout\n       android:id=\"@+id/ll_component_container\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:orientation=\"vertical\"\n       android:gravity=\"center\">\n</LinearLayout>\n```", "```\n<LinearLayout\n       android:id=\"@+id/ll_component_container\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:orientation=\"vertical\"\n       android:gravity=\"center\">\n  <TextView\n       android:id=\"@+id/tv_greeting\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:textSize=\"50sp\" />\n</LinearLayout>\n```", "```\n<LinearLayout\n       android:id=\"@+id/ll_component_container\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:orientation=\"vertical\"\n       android:gravity=\"center\">\n  <TextView\n       android:id=\"@+id/tv_greeting\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:textSize=\"50sp\" />\n  <Button\n       android:id=\"@+id/btn_click_me\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_marginTop=\"16dp\"\n       android:text=\"Click me!\"/>\n</LinearLayout>\n```", "```\npackage com.mydomain.helloapp\nimport android.support.v7.app.AppCompatActivity\nimport android.os.Bundle\nimport android.text.TextUtils\nimport android.widget.Button\nimport android.widget.TextView\nimport android.widget.Toast\n\nclass HelloActivity : AppCompatActivity() {\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_hello)\n    val tvGreeting = findViewById<TextView>(R.id.tv_greeting)\n    val btnClickMe = findViewById<Button>(R.id.btn_click_me)\n\n    btnClickMe.setOnClickListener {\n      if (TextUtils.isEmpty(tvGreeting.text)) {\n        tvGreeting.text = \"Hello World!\"\n      } else {\n        Toast.makeText(this, \"I have been clicked!\", \n                       Toast.LENGTH_LONG).show()\n      }\n    }\n  }\n}\n```"]