["```kt\nprivate fun `5 sec long task`() = Thread.sleep(5000)\n```", "```kt\nprivate fun `2 sec long task`() = Thread.sleep(2000)\n```", "```kt\nprivate fun getCurrentThreadName(): String = Thread.currentThread().name\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n `5 sec long task`()\n println(\"Ending async operation on ${getCurrentThreadName()}\")\n}\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `5 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n `2 sec long task`()\n println(\"Ending async operation on ${getCurrentThreadName()}\")\n}\n```", "```kt\nRunning on main\nStarting async operation on Thread-0\nStarting async operation on Thread-1\nEnding async operation on Thread-1\nEnding async operation on Thread-0\n```", "```kt\nprivate fun `5 sec long task`() = Thread.sleep(5000)\n```", "```kt\nprivate fun `2 sec long task`() = Thread.sleep(2000)\n```", "```kt\nprivate fun getCurrentThreadName(): String = Thread.currentThread().name\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n `5 sec long task`()\n println(\"Ending async operation on ${getCurrentThreadName()}\")\n}\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `5 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `5 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n `2 sec long task`()\n println(\"Ending async operation on ${getCurrentThreadName()}\")\n}\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `5 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `2 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n```", "```kt\nprintln(\"Running on ${getCurrentThreadName()}\")\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `5 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n\nthread {\n    println(\"Starting async operation on ${getCurrentThreadName()}\")\n    `2 sec long task`()\n    println(\"Ending async operation on ${getCurrentThreadName()}\")\n}.join()\n\nprintln(\"${getCurrentThreadName()} thread is free now\")\n```", "```kt\nRunning on main\nStarting async operation on Thread-0\nEnding async operation on Thread-0\nStarting async operation on Thread-1\n```", "```kt\nEnding async operation on Thread-1\nmain thread is free now\n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\nprivate fun `cook rice`() {\n    println(\"Starting to cook rice on ${getCurrentThreadName()}\")\n    Thread.sleep(10000)\n    println(\"Rice cooked\")\n}\n\nprivate fun `prepare fish`() {\n    println(\"Starting to prepare fish on ${getCurrentThreadName()}\")\n    Thread.sleep(2000)\n    println(\"Fish prepared\")\n}\n\nprivate fun `cut vegetable`() {\n    println(\"Starting to cut vegetables on ${getCurrentThreadName()}\")\n    Thread.sleep(2000)\n    println(\"Vegetables ready\")\n}\n\nprivate fun `roll the sushi`() {\n    println(\"Starting to roll the sushi on ${getCurrentThreadName()}\")\n    Thread.sleep(2000)\n    println(\"Sushi rolled\")\n}\n```", "```kt\nprivate fun `print current thread name`() {\n    println(\"Running on ${getCurrentThreadName()}\")\n    println()\n}\n\nprivate fun getCurrentThreadName(): String = Thread.currentThread().name\n```", "```kt\n`print current thread name`()\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nsushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n    `print current thread name`()\n}\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nsushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n    `print current thread name`()\n    val riceCookingJob = launch {\n        `cook rice`()\n }\n}\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nsushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n    `print current thread name`()\n    val riceCookingJob = launch {\n        `cook rice`()\n    }\n    println(\"Current thread is not blocked while rice is being\n     cooked\")\n    `prepare fish`()\n `cut vegetable`()\n}\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nsushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n    `print current thread name`()\n    val riceCookingJob = launch {\n        `cook rice`()\n    }\n    println(\"Current thread is not blocked while rice is being\n     cooked\")\n    `prepare fish`()\n    `cut vegetable`()\n riceCookingJob.join()\n}\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nsushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n    `print current thread name`()\n    val riceCookingJob = launch {\n        `cook rice`()\n    }\n    println(\"Current thread is not blocked while rice is being\n     cooked\")\n    `prepare fish`()\n    `cut vegetable`()\n    riceCookingJob.join()\n `roll the sushi`()\n}\nrunBlocking {\n   sushiCookingJob.join()\n}\n```", "```kt\n`print current thread name`()\nvar sushiCookingJob: Job\nval time = measureTimeMillis {\n    sushiCookingJob = launch(newSingleThreadContext(\"SushiThread\")) {\n        `print current thread name`()\n        val riceCookingJob = launch {\n            `cook rice`()\n        }\n        println(\"Current thread is not blocked while rice is being\n         cooked\")\n        `prepare fish`()\n        `cut vegetable`()\n        riceCookingJob.join()\n        `roll the sushi`()\n    }\n    runBlocking {\n        sushiCookingJob.join()\n    }\n}\nprintln(\"Total time: $time ms\")\n```", "```kt\nRunning on main\nRunning on SushiThread\nCurrent thread is not blocked while rice is being cooked\nStarting to cook rice on ForkJoinPool.commonPool-worker-1\nStarting to prepare fish on SushiThread\nFish prepared\nStarting to cut vegetables on SushiThread\nVegetables ready\nRice cooked\nStarting to roll the sushi on SushiThread\nSushi rolled\nTotal time: 12089 ms\n```", "```kt\nrunBlocking {\n    (0..1000000).map {\n        launch {\n            delay(1000)\n            println(\"Running on ${Thread.currentThread().name}\")\n        }\n    }.map { it.join() }\n}\n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\nprivate suspend fun `calculate the answer to life the universe and everything`(): Int {\n    delay(5000)\n    return 42\n}\n\nprivate suspend fun `show progress animation`() {\n    val progressBarLength = 30\n    var currentPosition = 0\n    while (true) {\n        print(\"\\r\")\n        val progressbar = (0 until progressBarLength)\n                .map { if (it == currentPosition) \" \" else \"░\" }\n                .joinToString(\"\")\n        print(progressbar)\n\n        delay(50)\n\n        if (currentPosition == progressBarLength) {\n            currentPosition = 0\n        }\n        currentPosition++\n    }\n}\n```", "```kt\nprivate fun `print current thread name`() {\n    println(\"Running on ${getCurrentThreadName()}\")\n    println()\n}\n\nprivate fun getCurrentThreadName(): String = Thread.currentThread().name\n```", "```kt\n`print current thread name`()\n```", "```kt\n`print current thread name`()\n\nlaunch {\n    println(\"Starting progressbar animation on ${getCurrentThreadName()}\")\n `show progress animation`()\n}\n```", "```kt\n`print current thread name`()\n\nlaunch {\n    println(\"Starting progressbar animation on ${getCurrentThreadName()}\")\n    `show progress animation`()\n}\n\nval future = async {\n    println(\"Starting computations on ${getCurrentThreadName()}\")\n `calculate the answer to life the universe and everything`()\n}\n\nprintln(\"${getCurrentThreadName()} thread is not blocked while tasks are in progress\")\n```", "```kt\n`print current thread name`()\n\nlaunch {\n    println(\"Starting progressbar animation on ${getCurrentThreadName()}\")\n    `show progress animation`()\n}\n\nval future = async {\n    println(\"Starting computations on ${getCurrentThreadName()}\")\n    `calculate the answer to life the universe and everything`()\n}\n\nprintln(\"${getCurrentThreadName()} thread is not blocked while tasks are in progress\")\n\nrunBlocking {\n    println(\"\\nThe answer to life the universe and everything: ${future.await()}\")\n `print current thread name`()\n}\n```", "```kt\nRunning on main\nStarting progressbar animation on ForkJoinPool.commonPool-worker-1\nStarting calculation of the answer to life the universe and everything on ForkJoinPool.commonPool-worker-2\nmain thread is not blocked while background tasks are still in progress\n░░░ ░░░░░░░░░░░░░░░░░░░░░░░░░░\nThe answer to life the universe and everything: 42\nRunning on main\n```", "```kt\nsuspend fun <T, R> Iterable<T>.mapConcurrent(transform: suspend (T) -> R) =\n    this.map {\n        async { transform(it) }\n    }.map {\n        it.await()\n    }\n```", "```kt\nrunBlocking {\n (0..10).mapConcurrent {\n        delay(1000)\n        it * it\n    }\n}\n```", "```kt\nrunBlocking {\n        (0..10).mapConcurrent {\n            delay(1000)\n            it * it\n        }.map { println(it) }\n}\n```", "```kt\nrunBlocking {\n val totalTime = measureTimeMillis {        (0..10).mapConcurrent {\n            delay(1000)\n            it * it\n        }.map { println(it) }\n    }\n println(\"Total time: $totalTime ms\")\n}\n```", "```kt\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n100\nTotal time: 1040 ms\n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\nprivate suspend fun `show progress animation`() {\n    val progressBarLength = 30\n    var currentPosition = 0\n    while (true) {\n        print(\"\\r\")\n        val progressbar = (0 until progressBarLength)\n                .map { if (it == currentPosition) \" \" else \"░\" }\n                .joinToString(\"\")\n        print(progressbar)\n\n        delay(50)\n\n        if (currentPosition == progressBarLength) {\n            currentPosition = 0\n        }\n        currentPosition++\n    }\n}\n```", "```kt\nrunBlocking {\n    val job = launch { `show progress animation`() }\n}\n```", "```kt\nrunBlocking {\n    val job = launch { `show progress animation`() }\n    delay(5000)\n}\n```", "```kt\nrunBlocking {\n    val job = launch { `show progress animation`() }\n    delay(5000)\n    job.cancel()\n    println(\"Cancelled\")\n}\n```", "```kt\nrunBlocking {\n    val job = launch {`show progress animation`()}\n    delay(5000)\n    job.cancel()\n job.join()\n println(\"\\nJob cancelled and completed\")\n}\n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\nimplementation 'com.squareup.retrofit2:retrofit:2.4.0'\nimplementation 'com.squareup.retrofit2:converter-gson:2.4.0'\nimplementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:1.0.0'\n```", "```kt\ndata class Response(@SerializedName(\"items\")\n                                      val list: Collection<Repository>)\ndata class Repository(val id: Long?,\n                      val name: String?,\n                      val description: String?,\n                      @SerializedName(\"full_name\") val fullName:\n                       String?,\n                      @SerializedName(\"html_url\") val url: String?,\n                      @SerializedName(\"stargazers_count\") val stars:\n                       Long?)\n```", "```kt\ninterface GithubApi {\n    @GET(\"/search/repositories\")\n    fun searchRepositories(@Query(\"q\") searchQuery: String):\n    Deferred<Response>\n\n}\n```", "```kt\nval api: GithubApi = Retrofit.Builder()\n        .baseUrl(\"https://api.github.com/\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .addCallAdapterFactory(CoroutineCallAdapterFactory())\n        .build()\n        .create(GithubApi::class.java)\n```", "```kt\nval api: GithubApi = Retrofit.Builder()\n        .baseUrl(\"https://api.github.com/\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .addCallAdapterFactory(CoroutineCallAdapterFactory())\n        .build()\n        .create(GithubApi::class.java)\n\napi.searchRepositories(\"Kotlin\")\n```", "```kt\nval api: GithubApi = Retrofit.Builder()\n        .baseUrl(\"https://api.github.com/\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .addCallAdapterFactory(CoroutineCallAdapterFactory())\n        .build()\n        .create(GithubApi::class.java)\n\nval downloadedRepos = api.searchRepositories(\"Kotlin\").await().list\n```", "```kt\nval api: GithubApi = Retrofit.Builder()\n        .baseUrl(\"https://api.github.com/\")\n        .addConverterFactory(GsonConverterFactory.create())\n        .addCallAdapterFactory(CoroutineCallAdapterFactory())\n        .build()\n        .create(GithubApi::class.java)\n\nval downloadedRepos = api.searchRepositories(\"Kotlin\").await().list\ndownloadedRepos\n .sortedByDescending { it.stars }\n .forEach {\n it.apply {\n println(\"$fullName ![](img/a541e4e1-5cd5-430c-8778-8f64c957e4a2.png)$stars\\n$description\\n$url\\n\")\n }\n }\n```", "```kt\nJetBrains/kotlin ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)23051\nThe Kotlin Programming Language\nhttps://github.com/JetBrains/kotlin\n\nperwendel/spark ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)7531\nA simple expressive web framework for java. News: Spark now has a kotlin DSL https://github.com/perwendel/spark-kotlin\nhttps://github.com/perwendel/spark\n\nKotlinBy/awesome-kotlin ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)5098\nA curated list of awesome Kotlin related stuff Inspired by awesome-java. \nhttps://github.com/KotlinBy/awesome-kotlin\n\nReactiveX/RxKotlin ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)4413\nRxJava bindings for Kotlin\nhttps://github.com/ReactiveX/RxKotlin\n\nJetBrains/kotlin-native ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)4334\nKotlin/Native infrastructure\nhttps://github.com/JetBrains/kotlin-native\n ...\n```", "```kt\napi.searchRepositories(\"Kotlin\")\n```", "```kt\nval downloadedRepos = api.searchRepositories(\"Kotlin\").await().list\n\n```", "```kt\nval downloadedRepos = api.searchRepositories(\"Kotlin\").await().list\ndownloadedRepos\n .sortedByDescending { it.stars }\n        .forEach {\n            it.apply {\n                println(\"$fullName ![](img/f20aeb9f-ae96-4ab4-81ae-59a08f467e67.png)$stars\\n$description\\n$url\\n\")\n }\n        } \n```", "```kt\nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3' \n```", "```kt\ndata class Result(val displayName: String)\n```", "```kt\nfun getResultsAsync(callback: (List<Result>) -> Unit) =\n    thread {\n        val results = mutableListOf<Result>()\n\n        // Simulate some extensive bacground task\n        Thread.sleep(1000)\n\n        results.add(Result(\"a\"))\n        results.add(Result(\"b\"))\n        results.add(Result(\"c\"))\n\n        callback(results)\n    }\n```", "```kt\nsuspend fun getResults(): List<Result> =\n    suspendCoroutine { continuation: Continuation<List<Result>> ->\n        getResultsAsync { continuation.resume(it) }\n    }\n\n```", "```kt\nval asyncResults = async {\n    getResults()\n}\n```", "```kt\nval asyncResults = async {\n    getResults()\n}\n\nprintln(\"getResults() is running in bacground. Main thread is not blocked.\")\nasyncResults.await().map { println(it.displayName) }\nprintln(\"getResults() completed\")\n```", "```kt\ngetResults() is running in bacground. Main thread is not blocked.\na\nb\nc\ngetResults() completed\nTotal time elapsed: 1029 ms\n```", "```kt\nsuspend fun getResults(): List<Result> =\n    suspendCoroutine { continuation: Continuation<List<Result>> ->\n        getResultsAsync { continuation.resume(it) }\n    }\n```"]