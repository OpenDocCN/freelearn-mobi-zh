- en: Chapter 3. Payment Authorization Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *payment sheet* is the most important user-facing aspect of the Apple Pay
    experience. Also, this is where the user should spend the least amount of time.
    Your app convinced the user to purchase the product. The payment sheet is where
    you will take the user from *desire* to *acquire* in as few taps as possible,
    two taps being the ideal.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to present information in the payment
    sheet, including a list of the shipping methods you can make available to your
    customers, and the total price of the order. With the payment sheet up, the user
    can change the shipping type (from delivery to store pickup, for example), the
    shipping address, and the payment method (the payment card that will be used to
    fund the transaction). For each change the user makes, you must update the payment
    request's summary items to reflect it. For example, when the user changes the
    shipping method, you must update the summary item that displays the price for
    shipping the item using the newly selected shipping method.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows how to respond to messages from the payment sheet to update
    the appropriate information on the payment request. It also shows how to start
    the payment processing workflow in response to the user authorizing the app to
    submit the payment request for approval by the selected card's issuing bank.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the payment authorization workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrate the implementation of the methods (declared by the payment sheet
    delegate protocol) that respond to payment sheet messages to update appropriate
    information in the payment request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show you how to dismiss the payment sheet when the user authorizes the payment
    request or cancels the transaction by tapping the cancel button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actors and operations in the authorization workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *payment authorization workflow* is a process by which the user confirms
    or enters the shipping information you provide or request in the payment sheet
    and authorizes the app to submit the payment request for approval by the issuing
    bank of the payment card specified in the payment request. The user may also change
    the payment card to use to fund the payment request, in which case you might need
    to update the payment request's summary items (by adding surcharges for specific
    cards, for example).
  prefs: []
  type: TYPE_NORMAL
- en: The payment authorization workflow starts when your app presents the payment
    sheet (a `PKPaymentAuthorizationViewController` object) and ends with the user
    authorizing the payment request. (The user may cancel the transaction by tapping
    the **Cancel** button on the payment sheet.)
  prefs: []
  type: TYPE_NORMAL
- en: 'This diagram depicts the actors and operations that are part of the payment
    authorization workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Actors and operations in the authorization workflow](img/B05093_03_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The workflow comprises four steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The app presents the payment sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters or changes the information you present or require (the less
    the information shown on the payment sheet, the faster the authorization).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app responds to changes in the payment sheet by updating payment summary
    items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user approves the payment request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These are the operations in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**payment request** (`PKPaymentRequest`): This is the payment request you use
    to present the payment sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shipping type** (`PKShippingType`): This indicates how the customer will
    get the product being purchased. The available shipping types are delivery (for
    instance, for office supplies or pizza), store pickup (such as for Apple Watches
    or jewelry), and service pickup (for example, when you provide transportation
    or delivery services that offer home pickup). With the store pickup shipping type,
    you must manage the shipping addresses as they are not shipping addresses but
    pickup addresses, such as your store''s address. For example, in this case, you
    can set the *shipping* address to your store''s address or hide the shipping address
    by setting the `requiredShippingAddressFields` property of the payment request
    to `PKAddressFieldNone`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment summary items** and **shipping method** (`PKPaymentSummaryItem`,
    `PKShippingMethod`): This indicates the summary items displayed after the order''s
    subtotal, including the shipping method selected for the order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shipping methods** (`PKShippingMethod` objects): This indicates the shipping
    methods available to the customer for the order. This list may change if the user
    changes the shipping address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment sheet** (`PKPaymentAuthorizationViewController`): This is the sheet
    the app presents to let the user verify or enter the information you require before
    the user authorizes the payment request. The user authorizes the payment request
    on this sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**payment sheet interaction protocol** (`PKPaymentAuthorizationViewControllerDelegate`):
    This is the API the app and the payment sheet use to communicate with each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a shared method to compute summary items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To respond to the delegate method calls from the payment sheet, you should
    have a single method that computes the payment summary items based on the shipping
    information. Here''s a possible implementation of such a method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With this method in place, you can respond to different delegate method calls
    from the payment sheet and have a consistent algorithm for the computation of
    the payment summary items.
  prefs: []
  type: TYPE_NORMAL
- en: Responding to user interactions with the payment sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After identifying the main actors and operations involved in the payment authorization
    workflow and with a single method to compute payment summary items, we are ready
    to delve into your responses to payment sheet messages initiated by the changes
    the user makes to shipping information.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the correct functionality of the payment sheet is essential to the
    payment authorization workflow; in particular, the payment sheet must call its
    delegate methods consistently so that you can correctly gauge when these methods
    are called as a result of user interaction with the payment sheet. If you use
    iOS simulators to test your code and notice that the payment sheet delegate methods
    are not being called, quit and restart the Simulator app.
  prefs: []
  type: TYPE_NORMAL
- en: User changes shipping information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user changes the shipping address or contact, your payment sheet delegate
    receives the `paymentAuthorizationViewController:didSelectShippingContact:completion:`
    message indicating that the user changed the shipping information for the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new shipping details are encapsulated in a *contact* (a `PKContact` instance).
    This `contact` object contains only the shipping information you requested in
    the `requiredShippingAddressFields` property of the payment request. The properties
    of `contact` are `name`, `emailAddress`, `phoneNumber`, and `postalAddress`. So
    if you required only a postal address and name by setting the `requiredShippingAddressFields`
    payment request property to `PKAddressFieldPostalAddress|PKAddressFieldName`,
    the payment sheet ensures that the `name` and `postalAddress` properties of the
    contact are populated when it calls this `delegate` method. This is an implementation
    of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All this method does is provide a success status, the standard shipping methods,
    and the computed payment summary items to the payment sheet through the method's
    completion block. In your app's case, you may need to tailor the returned shipping
    methods depending on the information contained in the `contact` argument of the
    completion block.
  prefs: []
  type: TYPE_NORMAL
- en: User changes shipping method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user changes the shipping method, the payment sheet calls the `paymentAuthorizationViewController:didSelectShippingMethod:completion:`
    method of its delegate. Similar to changes in shipping information, you recompute
    the payment summary items based on the shipping method the user selects. In the
    `completion` block, provide a success authorization status and the newly computed
    payment summary items, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All this method does is store the index of the shipping method chosen, recompute
    the payment summary item array, and call the completion block with `PKPaymentAuthorizationStatusSuccess`
    as the `status` argument and the new payment summary items array as the `summary_items`
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: User authorizes payment request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user authorizes the payment request, the payment sheet calls the `paymentAuthorizationViewController:didAuthorizePayment:completion:`
    method in its delegate. In this method, you process the payment (the `PKPayment`
    instance) you get from the payment sheet, a process described in the next chapter.
    If the payment is processed successfully, you will call the `completion` block
    with `PKPaymentAuthorizationStatusSuccess` as the argument. If your validation
    checks determine that the payment request contains incorrect information, you
    can return values that specify this, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidBillingPostalAddress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidShippingPostalAddress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PKPaymentAuthorizationStatusInvalidShippingContact`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, for a general failure, including that the issuing bank did not approve
    the transaction, you can return `PKPaymentAuthorizationStatusFailure`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an with `payment sheet:payment request, authorizing"` example implementation
    of this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the payment sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User authorizes payment request](img/B05093_03_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Whether the payment is processed successfully or the user canceled the transaction,
    it is your responsibility to dismiss the payment sheet when it calls the `paymentAuthorizationViewControllerDidFinish:`
    method on its delegate. This is an example of how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In addition to dismissing the payment sheet, you can perform other state-restoring
    operations as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you learned how the actors in your app's payment authorization
    workflow work together to help the user provide the information you need to process
    the payment and order (if the payment is approved by the payment card's issuing
    bank). The chapter showed how to prepare the payment request with essential payment
    information, such as the payment networks you support. It described how to respond
    to changes the user makes to the order in the payment sheet. Finally, the chapter
    showed how to dismiss the payment sheet after the user authorizes or cancels the
    payment request.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will describe the payment processing workflow, which is where
    you will process the information obtained here to process the payment through
    your payment gateway and fulfill the customer's order in your order processing
    web application. We will consider the payment information required to get the
    user's payment card's issuing bank to approve the transaction.
  prefs: []
  type: TYPE_NORMAL
