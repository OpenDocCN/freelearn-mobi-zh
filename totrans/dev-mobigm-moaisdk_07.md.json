["```swift\n    module(\"Game\", package.seeall)\n    GRID_COLS = 5\n    GRID_ROWS = 4\n    GRID_TILE_WIDTH = 62\n    GRID_TILE_HEIGHT = 62\n    BACK_TILE = 1\n    ```", "```swift\n    local resource_definitions = {\n\n      tiles = {\n        type = RESOURCE_TYPE_TILED_IMAGE, \n        fileName = 'tiles.png', \n        tileMapSize = {6, 2},\n      },\n\n    }\n    ```", "```swift\n    function Game:start ()\n      -- Do the initial setup\n      self:initialize ()\n\n    end\n    ```", "```swift\n    function Game:initialize ()\n\n      self.layer = MOAILayer2D.new ()\n      self.layer:setViewport ( viewport )\n    ```", "```swift\n          MOAIRenderMgr.setRenderTable ({ self.layer })\n        ```", "```swift\n          ResourceDefinitions:setDefinitions (resource_definitions)\n        ```", "```swift\n          self:initializeTiles ()\n        ```", "```swift\n        end\n        ```", "```swift\n    function Game:initializeTiles ()\n\n      local grid = MOAIGrid.new ()  \n      grid:setSize ( GRID_COLS, GRID_ROWS, \n                     GRID_TILE_WIDTH, GRID_TILE_HEIGHT )\n    ```", "```swift\n          grid:setRow ( 1, BACK_TILE, BACK_TILE, \n                           BACK_TILE, BACK_TILE, BACK_TILE )\n          grid:setRow ( 2, BACK_TILE, BACK_TILE, \n                           BACK_TILE, BACK_TILE, BACK_TILE )\n          grid:setRow ( 3, BACK_TILE, BACK_TILE, \n                           BACK_TILE, BACK_TILE, BACK_TILE )\n          grid:setRow ( 4, BACK_TILE, BACK_TILE, \n                           BACK_TILE, BACK_TILE, BACK_TILE ) )\n        ```", "```swift\n          self.tiles = {}\n          self.tiles.grid = grid\n          self.tiles.tileset = ResourceManager:get ('tiles')\n\n          self.tiles.prop = MOAIProp2D.new ()\n          self.tiles.prop:setDeck ( self.tiles.tileset )\n          self.tiles.prop:setGrid ( self.tiles.grid )\n        ```", "```swift\n         self.tiles.prop:setLoc ( - GRID_COLS/2 * GRID_TILE_WIDTH,\n                                 - GRID_ROWS/2 * GRID_TILE_HEIGHT )\n        ```", "```swift\n          self.layer:insertProp ( self.tiles.prop )\n        end\n        ```", "```swift\n      function mainLoop ()\n        Game:start ()\n      end\n      gameThread = MOAICoroutine.new ()\n      gameThread:run ( mainLoop )\n    ```", "```swift\nfunction InputManager:initialize ()\n\n  if MOAIInputMgr.device.pointer then\n\n  local pointerCallback = function ( x, y )\n    previousX, previousY = pointerX, pointerY\n    pointerX, pointerY = x, y\n\n    if touchCallbackFunc then\n      touchCallbackFunc ( MOAITouchSensor.TOUCH_MOVE, 1,\n        pointerX, pointerY, 1 )\n    end\n  end\n\n  MOAIInputMgr.device.pointer:setCallback ( pointerCallback )\n\nend\n```", "```swift\nfunction InputManager:isDown ()\n\n  if MOAIInputMgr.device.touch then\n\n    return MOAIInputMgr.device.touch:isDown ()\n\n  elseif MOAIInputMgr.device.pointer then\n\n    return (\n      MOAIInputMgr.device.mouseLeft:isDown ()\n    )\n  end\nend\n```", "```swift\n      self:restartGamePlay ()\n    ```", "```swift\n    function Game:restartGamePlay ()\n      self.distributionGrid = MOAIGrid.new ()\n      self.distributionGrid:setSize (GRID_COLS, GRID_ROWS)\n    ```", "```swift\n          local tiles = {\n            2, 2, 3, 3, 4, 4, 5, 5, 6, 6, \n            7, 7, 8, 8, 9, 9, 10, 10, 11, 11\n          }\n        ```", "```swift\n            for x=1, GRID_COLS, 1 do\n              for y=1, GRID_ROWS, 1 do\n                local random =  math.random ( 1, #tiles )\n                local value = tiles[random]\n                table.remove ( tiles, random )\n                self.distributionGrid:setTile ( x, y, value )\n              end\n            end\n        ```", "```swift\n          self.selectedCells = { nil, nil } \n        end\n        ```", "```swift\n     self.wasClicking = false\n\n    ```", "```swift\n          while (true) do\n            self:processInput ()\n            coroutine.yield ()\n          end \n        ```", "```swift\n    function Game:processInput ()\n      if InputManager:isDown () and not self.wasClicking then\n    ```", "```swift\n            x, y = InputManager:position ()\n        ```", "```swift\n            worldX, worldY = self.layer:wndToWorld ( x, y )\n            modelX, modelY = self.tiles.prop:worldToModel ( worldX, worldY )\n        ```", "```swift\n          cellColumn = math.floor ( modelX / GRID_TILE_WIDTH ) + 1\n          cellRow = math.floor ( modelY / GRID_TILE_HEIGHT ) + 1\n        ```", "```swift\n            self:choseCell ( cellColumn, cellRow )\n          end\n\n          self.wasClicking = InputManager:isDown ()\n\n        end\n        ```", "```swift\nfunction Game:choseCell ( column, row )\n\n  if not self.selectedCells[1] then\n```", "```swift\n        if not self:alreadySelectedTile ( column, row ) then\n    ```", "```swift\n          self.selectedCells[1] = {column, row}\n    ```", "```swift\n          self:swapTile ( column, row )\n    ```", "```swift\n        end\n      else\n    ```", "```swift\n        if (self.selectedCells[1][1] == column) and (self.selectedCells[1][2] == row) then\n          self.selectedCells[2] = {column, row}\n          self:resetTiles ()\n    ```", "```swift\n        else\n\n          if not self:alreadySelectedTile ( column, row ) then\n    ```", "```swift\n            self.selectedCells[2] = {column, row}\n            self:swapTile ( column, row )\n    ```", "```swift\n            local value1 = self.distributionGrid:getTile (\n                             unpack(self.selectedCells[1]) )\n\n            local value2 = self.distributionGrid:getTile (\n                             unpack(self.selectedCells[2]) )\n    ```", "```swift\n            if (value1 == value2) then\n              self:removeTiles ()\n    ```", "```swift\n            else\n              self:resetTiles ()\n    ```", "```swift\n            end\n          end\n        end\n      end\n    end\n    ```", "```swift\nfunction Game:swapTile ( column, row )\n  local value = self.distributionGrid:getTile ( column, row )\n  self.tiles.grid:setTile ( column, row, value )\nend\n```", "```swift\n    EMPTY_TILE = 12\n    ```", "```swift\n    DELAY_TIME = 0.5\n    ```", "```swift\n    function Game:resetTiles ()  \n      sleepCoroutine(DELAY_TIME)\n    ```", "```swift\n          self.tiles.grid:setTile (\n            self.selectedCells[1][1], \n            self.selectedCells[1][2], BACK_TILE )\n\n          self.tiles.grid:setTile (\n            self.selectedCells[2][1], \n            self.selectedCells[2][2], BACK_TILE )\n        ```", "```swift\n          self.selectedCells = {}\n        ```", "```swift\n        end\n        ```", "```swift\nfunction Game:removeTiles ()\n  sleepCoroutine ( DELAY_TIME )\n\n  self.tiles.grid:setTile ( self.selectedCells[1][1], self.selectedCells[1][2], EMPTY_TILE )\n  self.tiles.grid:setTile ( self.selectedCells[2][1], self.selectedCells[2][2], EMPTY_TILE )\n```", "```swift\n      self.selectedCells = {}\n    ```", "```swift\n    end\n    ```", "```swift\nfunction Game:alreadySelectedTile ( column, row )\n  return self.tiles.grid:getTile ( column, row ) == EMPTY_TILE\nend\n```", "```swift\n    function sleepCoroutine (time)\n      local timer = MOAITimer.new ()\n      timer:setSpan ( time )\n      timer:start()\n      MOAICoroutine.blockOnAction ( timer )\n    end\n    ```"]