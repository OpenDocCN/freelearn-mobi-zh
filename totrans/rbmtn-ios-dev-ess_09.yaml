- en: Chapter 9. Creating a Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 创建游戏
- en: 'Apple App Store has a wide variety of applications. There are many popular
    genres of applications available, such as productivity, business, entertainment,
    and many more. But out of these, the most popular kind are the gaming apps, and
    to make one yourself is much more exciting. Gaming on iOS devices is a gigantic
    topic; in this chapter we will cover some basics for creating an engaging gaming
    app. We will also use a popular library, so that by the end of this iteration,
    we will be able to make a simple and fun gaming application. The following topics
    will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Apple App Store 有各种各样的应用程序。有许多流行的应用程序类型可供选择，如生产力、商业、娱乐等等。但在这其中，最受欢迎的类型是游戏应用，自己制作一个会更有趣。iOS
    设备上的游戏是一个巨大的话题；在本章中，我们将介绍创建引人入胜游戏应用的一些基础知识。我们还将使用一个流行的库，这样在这次迭代结束时，我们将能够制作一个简单有趣的游戏应用。本章将涵盖以下主题：
- en: Cocos2D
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cocos2D
- en: Understanding gaming basics by creating a game app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建游戏应用来理解游戏基础知识
- en: Cocos2D
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cocos2D
- en: Cocos2D is a powerful library for game development, which saves a lot of time
    by handling trivial things while building your game. Common things that are regularly
    needed for game development, such as direction, sprite, cool graphical effects,
    animations, physics libraries, sound engines, and a lot more are already provided
    by libraries and APIs.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2D 是一个强大的游戏开发库，在构建游戏时通过处理琐碎的事情来节省大量时间。游戏开发中经常需要的一些常见事情，例如方向、精灵、酷炫的图形效果、动画、物理库、音效引擎等等，都已经由库和API提供。
- en: Cocos2D organizes game development like the making of a movie where you are
    made to sit in the director's chair. For example, you will have a scene for the
    startup menu of the game, another for the main game, and then another for the
    game over scene with options that concludes the playing episode. You have to literally
    use the `Director` class to create a director object, which drives the whole application
    forward.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2D 将游戏开发组织得像制作电影一样，让你坐在导演的位置上。例如，你将有一个用于游戏启动菜单的场景，另一个用于主游戏，然后还有一个用于游戏结束场景，其中包含结束游戏环节的选项。你必须真正使用
    `Director` 类来创建一个导演对象，它推动整个应用程序向前发展。
- en: All the basic tasks, such as starting the game, pausing the game, and creating
    various scenes are handled by Cocos2D.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2D 处理所有基本任务，例如开始游戏、暂停游戏和创建各种场景。
- en: 'Inside the scenes, you can have a number of layers that contain nodes such
    as sprites, labels, menus, and more. These nodes can contain other nodes as well.
    This can be nicely demonstrated with the help of the following figure:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景内部，你可以有多个包含节点（如精灵、标签、菜单等）的层。这些节点还可以包含其他节点。以下图可以帮助我们很好地展示这一点：
- en: '![Cocos2D](img/5220OT_09_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Cocos2D](img/5220OT_09_01.jpg)'
- en: Let's create a game – Whac-A-Mole
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们创建一个游戏 - Whac-A-Mole
- en: 'We will create an iPhone version of the popular arcade game *Whac-A-Mole*.
    When the game starts, moles (an animal) will begin to pop up from the bottom of
    the screen. The objective of the game is to hit the mole, thereby adding to the
    player''s score:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个流行的街机游戏 *Whac-A-Mole* 的 iPhone 版本。当游戏开始时，老鼠（一种动物）将从屏幕底部开始冒出来。游戏的目标是击中老鼠，从而增加玩家的分数：
- en: 'Create an application using the following command:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建应用程序：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, as we are using an external library for our application, let''s first
    install `CocoaPods`. Run the following commands on your terminal:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于我们正在为我们的应用程序使用外部库，让我们首先安装 `CocoaPods`。在你的终端上运行以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `Rakefile`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `Rakefile`：
- en: '[PRE2]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now we are all set to begin coding for our app.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好开始为我们的应用编码了。
- en: Let's start coding!
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始编码！
- en: 'As in Cocos2D, we need to create a director for starting the game. Let''s create
    one:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Cocos2D 一样，我们需要创建一个导演来启动游戏。让我们创建一个：
- en: 'Update the `app_delegate.rb` file with the following code:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新 `app_delegate.rb` 文件：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then run the application with the `rake` command:![Let's start coding!](img/5220OT_09_02.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后使用 `rake` 命令运行应用程序：![让我们开始编码！](img/5220OT_09_02.jpg)
- en: Let's understand what we have done so far.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解到目前为止我们已经做了什么。
- en: 'First, we created a window and a view:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个窗口和一个视图：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You must have noted that we used the `CCGLView` class to create a view, which
    is available with Cocos2D. It is inherited from `EAGLview`, which is in turn a
    subclass of the `UIView` subclass that renders the `OpenGL` scene.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须已经注意到我们使用了 `CCGLView` 类来创建一个视图，它是 Cocos2D 中可用的。它继承自 `EAGLview`，而 `EAGLview`
    又是 `UIView` 子类的子类，用于渲染 `OpenGL` 场景。
- en: After this, we defined an object for the `CCDirector` class that creates and
    handles the main window and manages how and when to execute the scenes. It initializes
    the `OpenGL ES` context. The `CCDirector` class starts or pauses the game; it
    also handles when a phone call or text message comes in, so that it can automatically
    pause the game. We have also set the view to the `CCDirector` object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们定义了一个`CCDirector`类的对象，该对象创建并处理主窗口，并管理场景的创建和执行方式。它初始化`OpenGL ES`上下文。`CCDirector`类启动或暂停游戏；它还处理电话或短信到来时的情况，以便它可以自动暂停游戏。我们还将视图设置为`CCDirector`对象。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let''s create a scene, which will be inherited by `CCScene`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个场景，它将继承自`CCScene`：
- en: 'Create a file named `game_scene.rb`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`game_scene.rb`的文件：
- en: '[PRE6]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add the following code in the `app_delegate.rb` file:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app_delegate.rb`文件中添加以下代码：
- en: '[PRE7]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Basically, it will tell the `@director` object to open `GameScene` once the
    application loads.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，它将告诉`@director`对象在应用程序加载时打开`GameScene`。
- en: 'Now, as we have created a blank scene, let''s start adding graphical layers
    to our game. Create a file named `background_layer.rb` and update the following
    code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于我们已经创建了一个空白场景，让我们开始向我们的游戏添加图形层。创建一个名为`background_layer.rb`的文件，并更新以下代码：
- en: '[PRE8]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `CCLabelTTF` class is used to display text on the scene. We can also pass
    `fontName` and `fontSize` while initiating the label. Then we have to assign the
    positions to the label.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CCLabelTTF`类用于在场景上显示文本。我们也可以在初始化标签时传递`fontName`和`fontSize`。然后我们必须将位置分配给标签。'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `CCDirector` class also provides the height and width of the screen with
    the following command:'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CCDirector`类还通过以下命令提供屏幕的高度和宽度：'
- en: '[PRE9]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, to add this layer to our scene, update the `game_scene.rb` file with the
    following code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要将此层添加到我们的场景中，更新`game_scene.rb`文件，代码如下：
- en: '[PRE10]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now let's run the application to check our progress so far:![Let's start coding!](img/5220OT_09_03.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们运行应用程序来检查到目前为止的进度：![让我们开始编码！](img/5220OT_09_03.jpg)
- en: We can see the text displayed on the screen. This is some test text that we
    have added, so why not replace this text with a background image.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到屏幕上显示的文本。这是我们添加的一些测试文本，为什么不将其替换为背景图像呢。
- en: Note
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can download the image provided in the resource folder from the exercise
    code, which is provided with the book.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从资源文件夹中下载提供的图像，该图像与书中提供的练习代码一起提供。
- en: 'To display a background image, update the `background_layer.rb` file with the
    following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要显示背景图像，更新`background_layer.rb`文件，代码如下：
- en: '[PRE11]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have created a `CCSprite` object, which is loaded from an image named `sky.png`.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们创建了一个从名为`sky.png`的图像加载的`CCSprite`对象。
- en: Now run the application using the `rake` command:![Let's start coding!](img/5220OT_09_04.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序，使用`rake`命令：![让我们开始编码！](img/5220OT_09_04.jpg)
- en: Now, as our game has a lot of objects, we have to design it for the landscape
    mode, so that the users can interact with the game comfortably. For that, open
    the `Rake` file and add `app.interface_orientations = [:landscape_left]` in this
    file, and run the application using the `rake` command:![Let's start coding!](img/5220OT_09_05.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于我们的游戏有很多对象，我们必须为横屏模式设计它，以便用户可以舒适地与游戏互动。为此，打开`Rake`文件，并在该文件中添加`app.interface_orientations
    = [:landscape_left]`，然后使用`rake`命令运行应用程序：![让我们开始编码！](img/5220OT_09_05.jpg)
- en: 'That''s cool! Let''s now add grass in the game layer. Create a file named `game_layer.rb`
    and add the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非常酷！现在让我们在游戏层中添加草地。创建一个名为`game_layer.rb`的文件，并添加以下代码：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then add this layer in our scene and update `game_scene.rb` with the following
    code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将此层添加到我们的场景中，并更新`game_scene.rb`文件，代码如下：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's start the application and see what we have done:![Let's start coding!](img/5220OT_09_06.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动应用程序并查看我们做了什么：![让我们开始编码！](img/5220OT_09_06.jpg)
- en: 'Wow! We can see green grass. Next, let''s add three mole animals to our view
    by updating the `game_layer.rb` file with the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哇！我们可以看到绿色的草地。接下来，让我们通过更新`game_layer.rb`文件来添加三个鼹鼠动物到我们的视图中，代码如下：
- en: '[PRE14]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And now run the application:![Let's start coding!](img/5220OT_09_07.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序：![让我们开始编码！](img/5220OT_09_07.jpg)
- en: Wow! We can see three moles at the bottom of the page. Let's add some motion
    to these moles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们可以看到页面的底部有三个鼹鼠。让我们给这些鼹鼠添加一些动作。
- en: Adding motion to moles
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加鼹鼠的动作
- en: 'To make things more interesting, we want these moles to be moving up and down—this
    will add a challenge for the app users:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更有趣，我们想让这些鼹鼠上下移动——这将给应用程序用户增加挑战：
- en: 'Update the `game_layer.rb` file by adding the following method to it:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`game_layer.rb`文件中添加以下方法来更新该文件：
- en: '[PRE15]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`CCMoveBy` moves the mole up along the Y axis according to the height of the
    mole. To make the movement look more natural, we have used the `CCEaseInOut` class.
    To make the mole move back down again, we have used the `reverse` action. The
    `reverse` method on an action pulls the object in the opposite direction. We have
    then created an action to pause the popping action of the moles using the `CCDelayTime`
    class.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CCMoveBy`根据鼹鼠的高度沿着Y轴移动鼹鼠。为了使运动看起来更自然，我们使用了`CCEaseInOut`类。为了使鼹鼠再次向下移动，我们使用了`reverse`动作。动作上的`reverse`方法将对象拉向相反方向。然后，我们使用`CCDelayTime`类创建了一个动作来暂停鼹鼠的弹跳动作。'
- en: Now, we have combined all the actions into a sequence using the `CCSequence`
    class. The `CCSequence` class allows us to chain together a sequence of actions
    that are performed in order, one at a time.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们使用`CCSequence`类将所有动作组合成一个序列。`CCSequence`类允许我们将一系列按顺序执行的动作链接在一起。
- en: 'As we have three moles, let''s call this motion randomly for each mole. We''ll
    also update the `game_layer.rb` file by adding the following method to it:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们有三个鼹鼠，让我们为每个鼹鼠随机调用这个动作。我们还将通过向其中添加以下方法来更新`game_layer.rb`文件：
- en: '[PRE16]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We just need one more thing before we are ready to roll. We need to schedule
    this method to run as often as possible by adding the following line of code to
    the `init` method of the `game_layer.rb` file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们准备开始之前，我们还需要做一件事。我们需要通过向`game_layer.rb`文件的`init`方法中添加以下代码行来尽可能频繁地调度此方法运行：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now run the application:![Adding motion to moles](img/5220OT_09_08.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序：![给鼹鼠添加动作](img/5220OT_09_08.jpg)
- en: We can see that the mole is randomly popping up and down.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到鼹鼠正在随机地上下弹跳。
- en: 'Let''s now make this mole hide behind the grass. To do so, update the `game_layer.rb`
    file and modify the `init` method by setting the value of `z` to `999`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在让这个鼹鼠隐藏在草的后面。要做到这一点，更新`game_layer.rb`文件并修改`init`方法，将`z`的值设置为`999`：
- en: '[PRE18]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The layer that has a higher value of z will show up.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: z值较高的层将显示出来。
- en: '![Adding motion to moles](img/5220OT_09_09.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![给鼹鼠添加动作](img/5220OT_09_09.jpg)'
- en: Adding touch events to the game
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将触摸事件添加到游戏中
- en: 'Now, let''s add a touch event to the game:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将一个触摸事件添加到游戏中：
- en: 'Add the following code in the `game_layer.rb` file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`game_layer.rb`文件中添加以下代码：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now add the following method to it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在向其中添加以下方法：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the first portion, we choose one of the touches we want to work with, get
    the location in the current view, and then call `convertToGL` to convert the coordinates
    to our current layout. This is important to do as we are in the landscape mode.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在第一部分，我们选择我们想要处理的触摸之一，获取当前视图中的位置，然后调用`convertToGL`将坐标转换为我们的当前布局。这对于我们处于横幅模式来说很重要。
- en: Next, come to the game logic. The `CGRectContainsPoint(mole.boundingBox, touch_location)`
    method will return `true` if someone clicks on the mole. But what if the user
    clicks on the mole behind the grass? For that, `CGRectContainsPoint(@grass.boundingBox,
    touch_location)` will return `true` if we have clicked on the grass. Therefore,
    `CGRectContainsPoint(mole.boundingBox, touch_location)` and `!CGRectContainsPoint(@grass.boundingBox,
    touch_location)` will only return `true` if we click on the mole at the right
    place. We will also print a message in the console to test the logic.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，进入游戏逻辑。`CGRectContainsPoint(mole.boundingBox, touch_location)`方法将在有人点击鼹鼠时返回`true`。但如果用户点击在草后面的鼹鼠呢？为此，如果我们在草上点击，`CGRectContainsPoint(@grass.boundingBox,
    touch_location)`将返回`true`。因此，`CGRectContainsPoint(mole.boundingBox, touch_location)`和`!CGRectContainsPoint(@grass.boundingBox,
    touch_location)`只有在正确位置点击鼹鼠时才会返回`true`。我们还会在控制台打印一条消息来测试逻辑。
- en: Let's run the application. When you click on the mole, you will get a message
    printed in the console:![Adding touch events to the game](img/5220OT_09_10.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行应用程序。当你点击鼹鼠时，你将在控制台看到一个消息打印出来：![给游戏中添加触摸事件](img/5220OT_09_10.jpg)
- en: Adding scores
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加分数
- en: 'We need to give a purpose and sense of accomplishment to the user—that''s one
    of the reasons why we play games. This can be done by calculating the score for
    the player every time there is a tap on the mole:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要给用户一个目的和成就感——这就是我们玩游戏的原因之一。这可以通过每次点击鼹鼠时为玩家计算分数来实现：
- en: 'Add the following code to the `game_layer.rb` file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`game_layer.rb`文件中：
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, update the `ccTouchesBegan` delegate in the `game_layer.rb` file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新`game_layer.rb`文件中的`ccTouchesBegan`委托：
- en: '[PRE22]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now run the application:![Adding scores](img/5220OT_09_11.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序：![添加分数](img/5220OT_09_11.jpg)
- en: Games without any sounds are boring — let's add some sound
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 没有声音的游戏很无聊——让我们添加一些声音
- en: 'We''re pretty close to having a workable game now. We just need to add some
    sound effects and music, and our game application will be complete. Playing sound
    in a game with Cocos2D is simple. We already have the `noise.wav` file in the
    `resource` folder; so let''s use it on a few of our events:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们离有一个可工作的游戏已经很近了。我们只需要添加一些音效和音乐，我们的游戏应用就完成了。在Cocos2D游戏中播放声音很简单。我们已经在`resource`文件夹中有了`noise.wav`文件；所以让我们在我们的几个事件中使用它：
- en: 'Add the following code, which will play a sound when someone rightly clicks
    on the mole:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码，当有人正确点击鼹鼠时，将会播放声音：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here we have finally completed a gaming application with RubyMotion. But don''t
    submit this simple application to the App Store; use your imagination to make
    it an amazing application. Besides Cocos2D, there are many other gaming libraries
    that you can explore to create breathtaking apps. The following are a few that
    we recommend:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们终于使用RubyMotion完成了一个游戏应用。但不要将这个简单的应用提交到App Store；发挥你的想象力，让它成为一个令人惊叹的应用。除了Cocos2D，还有许多其他游戏库你可以探索，以创建令人叹为观止的应用。以下是我们推荐的一些：
- en: 'iTGB for 2D Games: This is a 2D game engine'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iTGB用于2D游戏：这是一个2D游戏引擎
- en: 'Ston3D for iPhone: This is a 3D game engine'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ston3D for iPhone：这是一个3D游戏引擎
- en: 'SIO2Engine: This is a 3D game engine'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SIO2Engine：这是一个3D游戏引擎
- en: 'Unity3D Engine: This is a 3D game engine'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity3D引擎：这是一个3D游戏引擎
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter was really exciting for us, and we hope you have learned a lot
    too. The following topics were covered:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章对我们来说非常激动人心，我们希望你也学到了很多。以下是一些涵盖的主题：
- en: Understanding Cocos2D
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Cocos2D
- en: Creating a simple gaming application
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的游戏应用
- en: So far we have learned all the major features of RubyMotion, and we even created
    a gaming application, but it is important to publish our application too. Next,
    we need to learn how to submit our valuable applications to Apple's App Store,
    so that they can be put in the hands of millions of iPhone and iPad users.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了RubyMotion的所有主要功能，甚至创建了一个游戏应用，但发布我们的应用也同样重要。接下来，我们需要学习如何将我们宝贵的应用提交到苹果的App
    Store，以便它们可以进入数百万部iPhone和iPad用户的手中。
