- en: Chapter 9. Creating a Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple App Store has a wide variety of applications. There are many popular
    genres of applications available, such as productivity, business, entertainment,
    and many more. But out of these, the most popular kind are the gaming apps, and
    to make one yourself is much more exciting. Gaming on iOS devices is a gigantic
    topic; in this chapter we will cover some basics for creating an engaging gaming
    app. We will also use a popular library, so that by the end of this iteration,
    we will be able to make a simple and fun gaming application. The following topics
    will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Cocos2D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding gaming basics by creating a game app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cocos2D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cocos2D is a powerful library for game development, which saves a lot of time
    by handling trivial things while building your game. Common things that are regularly
    needed for game development, such as direction, sprite, cool graphical effects,
    animations, physics libraries, sound engines, and a lot more are already provided
    by libraries and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Cocos2D organizes game development like the making of a movie where you are
    made to sit in the director's chair. For example, you will have a scene for the
    startup menu of the game, another for the main game, and then another for the
    game over scene with options that concludes the playing episode. You have to literally
    use the `Director` class to create a director object, which drives the whole application
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: All the basic tasks, such as starting the game, pausing the game, and creating
    various scenes are handled by Cocos2D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the scenes, you can have a number of layers that contain nodes such
    as sprites, labels, menus, and more. These nodes can contain other nodes as well.
    This can be nicely demonstrated with the help of the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cocos2D](img/5220OT_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's create a game – Whac-A-Mole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create an iPhone version of the popular arcade game *Whac-A-Mole*.
    When the game starts, moles (an animal) will begin to pop up from the bottom of
    the screen. The objective of the game is to hit the mole, thereby adding to the
    player''s score:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an application using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as we are using an external library for our application, let''s first
    install `CocoaPods`. Run the following commands on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `Rakefile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we are all set to begin coding for our app.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start coding!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As in Cocos2D, we need to create a director for starting the game. Let''s create
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `app_delegate.rb` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then run the application with the `rake` command:![Let's start coding!](img/5220OT_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's understand what we have done so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we created a window and a view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You must have noted that we used the `CCGLView` class to create a view, which
    is available with Cocos2D. It is inherited from `EAGLview`, which is in turn a
    subclass of the `UIView` subclass that renders the `OpenGL` scene.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we defined an object for the `CCDirector` class that creates and
    handles the main window and manages how and when to execute the scenes. It initializes
    the `OpenGL ES` context. The `CCDirector` class starts or pauses the game; it
    also handles when a phone call or text message comes in, so that it can automatically
    pause the game. We have also set the view to the `CCDirector` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a scene, which will be inherited by `CCScene`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file named `game_scene.rb`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `app_delegate.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Basically, it will tell the `@director` object to open `GameScene` once the
    application loads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, as we have created a blank scene, let''s start adding graphical layers
    to our game. Create a file named `background_layer.rb` and update the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CCLabelTTF` class is used to display text on the scene. We can also pass
    `fontName` and `fontSize` while initiating the label. Then we have to assign the
    positions to the label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `CCDirector` class also provides the height and width of the screen with
    the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to add this layer to our scene, update the `game_scene.rb` file with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's run the application to check our progress so far:![Let's start coding!](img/5220OT_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see the text displayed on the screen. This is some test text that we
    have added, so why not replace this text with a background image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the image provided in the resource folder from the exercise
    code, which is provided with the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To display a background image, update the `background_layer.rb` file with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have created a `CCSprite` object, which is loaded from an image named `sky.png`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now run the application using the `rake` command:![Let's start coding!](img/5220OT_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, as our game has a lot of objects, we have to design it for the landscape
    mode, so that the users can interact with the game comfortably. For that, open
    the `Rake` file and add `app.interface_orientations = [:landscape_left]` in this
    file, and run the application using the `rake` command:![Let's start coding!](img/5220OT_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s cool! Let''s now add grass in the game layer. Create a file named `game_layer.rb`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add this layer in our scene and update `game_scene.rb` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's start the application and see what we have done:![Let's start coding!](img/5220OT_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wow! We can see green grass. Next, let''s add three mole animals to our view
    by updating the `game_layer.rb` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And now run the application:![Let's start coding!](img/5220OT_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wow! We can see three moles at the bottom of the page. Let's add some motion
    to these moles.
  prefs: []
  type: TYPE_NORMAL
- en: Adding motion to moles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make things more interesting, we want these moles to be moving up and down—this
    will add a challenge for the app users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `game_layer.rb` file by adding the following method to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`CCMoveBy` moves the mole up along the Y axis according to the height of the
    mole. To make the movement look more natural, we have used the `CCEaseInOut` class.
    To make the mole move back down again, we have used the `reverse` action. The
    `reverse` method on an action pulls the object in the opposite direction. We have
    then created an action to pause the popping action of the moles using the `CCDelayTime`
    class.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we have combined all the actions into a sequence using the `CCSequence`
    class. The `CCSequence` class allows us to chain together a sequence of actions
    that are performed in order, one at a time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we have three moles, let''s call this motion randomly for each mole. We''ll
    also update the `game_layer.rb` file by adding the following method to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We just need one more thing before we are ready to roll. We need to schedule
    this method to run as often as possible by adding the following line of code to
    the `init` method of the `game_layer.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run the application:![Adding motion to moles](img/5220OT_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that the mole is randomly popping up and down.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now make this mole hide behind the grass. To do so, update the `game_layer.rb`
    file and modify the `init` method by setting the value of `z` to `999`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The layer that has a higher value of z will show up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding motion to moles](img/5220OT_09_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Adding touch events to the game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, let''s add a touch event to the game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code in the `game_layer.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the following method to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the first portion, we choose one of the touches we want to work with, get
    the location in the current view, and then call `convertToGL` to convert the coordinates
    to our current layout. This is important to do as we are in the landscape mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, come to the game logic. The `CGRectContainsPoint(mole.boundingBox, touch_location)`
    method will return `true` if someone clicks on the mole. But what if the user
    clicks on the mole behind the grass? For that, `CGRectContainsPoint(@grass.boundingBox,
    touch_location)` will return `true` if we have clicked on the grass. Therefore,
    `CGRectContainsPoint(mole.boundingBox, touch_location)` and `!CGRectContainsPoint(@grass.boundingBox,
    touch_location)` will only return `true` if we click on the mole at the right
    place. We will also print a message in the console to test the logic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's run the application. When you click on the mole, you will get a message
    printed in the console:![Adding touch events to the game](img/5220OT_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding scores
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to give a purpose and sense of accomplishment to the user—that''s one
    of the reasons why we play games. This can be done by calculating the score for
    the player every time there is a tap on the mole:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `game_layer.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `ccTouchesBegan` delegate in the `game_layer.rb` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run the application:![Adding scores](img/5220OT_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Games without any sounds are boring — let's add some sound
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''re pretty close to having a workable game now. We just need to add some
    sound effects and music, and our game application will be complete. Playing sound
    in a game with Cocos2D is simple. We already have the `noise.wav` file in the
    `resource` folder; so let''s use it on a few of our events:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code, which will play a sound when someone rightly clicks
    on the mole:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have finally completed a gaming application with RubyMotion. But don''t
    submit this simple application to the App Store; use your imagination to make
    it an amazing application. Besides Cocos2D, there are many other gaming libraries
    that you can explore to create breathtaking apps. The following are a few that
    we recommend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'iTGB for 2D Games: This is a 2D game engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ston3D for iPhone: This is a 3D game engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SIO2Engine: This is a 3D game engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity3D Engine: This is a 3D game engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter was really exciting for us, and we hope you have learned a lot
    too. The following topics were covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Cocos2D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple gaming application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far we have learned all the major features of RubyMotion, and we even created
    a gaming application, but it is important to publish our application too. Next,
    we need to learn how to submit our valuable applications to Apple's App Store,
    so that they can be put in the hands of millions of iPhone and iPad users.
  prefs: []
  type: TYPE_NORMAL
