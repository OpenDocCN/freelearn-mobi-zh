["```\ncreatedb -h localhost â€”username=<username> place-reviewer \n```", "```\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.webjars</groupId>\n  <artifactId>bootstrap</artifactId>\n  <version>4.0.0-beta.3</version>\n</dependency>\n<dependency>\n  <groupId>org.webjars</groupId>\n  <artifactId>jquery</artifactId>\n  <version>3.2.1</version>\n</dependency>\n```", "```\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.generate-ddl=true\nspring.datasource.url=jdbc:postgresql://localhost:5432/place-reviewer\nspring.datasource.driver.class-name=org.postgresql.Driver\nspring.datasource.username=<username>\n```", "```\npackage com.example.placereviewer.data.model\n\nimport com.example.placereviewer.listener.UserListener\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\nimport javax.validation.constraints.Pattern\nimport javax.validation.constraints.Size\n\n@Entity\n@Table(name = \"`user`\")\n@EntityListeners(UserListener::class)\ndata class User(\n  @Column(unique = true)\n  @Size(min = 2)\n  @Pattern(regexp = \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\\\\\.[A-Z] {2,6}\\$\")\n  var email: String = \"\",\n    @Column(unique = true)\n  var username: String = \"\",\n    @Size(min = 60, max = 60)\n  var password: String = \"\",\n    @Column(name = \"account_status\")\n  @Pattern(regexp = \"\\\\A(activated|deactivated)\\\\z\")\n  var accountStatus: String = \"activated\",\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n  var id: Long = 0,\n    @DateTimeFormat\n    @Column(name = \"created_at\")\n  var createdAt: Date = Date.from(Instant.now())\n) {\n  @OneToMany(mappedBy = \"reviewer\", targetEntity =  Review::class)\n  private var reviews: Collection<Review>? = null\n}\n```", "```\npackage com.example.placereviewer.listener\n\nimport com.example.placereviewer.data.model.User\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport javax.persistence.PrePersist\nimport javax.persistence.PreUpdate\n\nclass UserListener {\n\n  @PrePersist\n    @PreUpdate\n    fun hashPassword(user: User) {\n      user.password = BCryptPasswordEncoder().encode(user.password)\n    }\n}\n```", "```\npackage com.example.placereviewer.data.model\n\nimport org.springframework.format.annotation.DateTimeFormat\nimport java.time.Instant\nimport java.util.*\nimport javax.persistence.*\nimport javax.validation.constraints.Size\n\n@Entity\n@Table(name = \"`review`\")\ndata class Review(\n  @ManyToOne(optional = false)\n  @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\n  var reviewer: User? = null, \n    @Size(min = 5)\n  var title: String = \"\",\n    @Size(min = 10)\n  var body: String = \"\",\n    @Column(name = \"place_address\")\n    @Size(min = 2)\n  var placeAddress: String = \"\",\n    @Column(name = \"place_name\")\n  var placeName: String = \"\",\n    @Column(name = \"place_id\")\n  var placeId: String = \"\",\n  var latitude: Double = 0.0,\n  var longitude: Double = 0.0,\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n  var id: Long = 0,\n    @DateTimeFormat\n    @Column(name = \"created_at\")\n  var createdAt: Date = Date.from(Instant.now())\n)\n```", "```\npackage com.example.placereviewer.data.repository\n\nimport com.example.placereviewer.data.model.User\nimport org.springframework.data.repository.CrudRepository\n\ninterface UserRepository : CrudRepository<User, Long> {\n\n  fun findByUsername(username: String): User?\n}\n```", "```\npackage com.example.placereviewer.data.repository\n\nimport com.example.placereviewer.data.model.Review\nimport org.springframework.data.repository.CrudRepository\n\ninterface ReviewRepository : CrudRepository<Review, Long> {\n\n  fun findByPlaceId(placeId: String)\n}\n```", "```\npackage com.example.placereviewer.service\n\ninterface UserService {\n\n  fun register(username: String, email: String, password: String): Boolean\n}\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.model.User\nimport com.example.placereviewer.data.repository.UserRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass UserServiceImpl(val userRepository: UserRepository) : UserService {\n\n  override fun register(username: String, email: String, \n                        password: String): Boolean {\n    val user = User(email, username, password)\n    userRepository.save(user)\n\n    return true\n  }\n\n}\n```", "```\nuserRepository.save(user)\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.model.Review\n\ninterface ReviewService {\n\n  fun createReview(reviewerUsername: String, reviewData: Review): Boolean\n\n  fun listReviews(): Iterable<Review>\n}\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.model.Review\nimport com.example.placereviewer.data.model.User\nimport com.example.placereviewer.data.repository.ReviewRepository\nimport com.example.placereviewer.data.repository.UserRepository\nimport org.springframework.stereotype.Service\n\n@Service\nclass ReviewServiceImpl(val reviewRepository: ReviewRepository, val userRepository: UserRepository) : ReviewService {\n\n  override fun listReviews(): Iterable<Review> {\n    return reviewRepository.findAll()\n  }\n\n  override fun createReview(reviewerUsername: String, \n                            reviewData: Review): Boolean {\n    val reviewer: User? = userRepository.findByUsername(reviewerUsername)\n\n    if (reviewer != null) {\n      reviewData.reviewer = reviewer\n      reviewRepository.save(reviewData)\n      return true\n    }\n\n    return false\n  }\n}\n```", "```\npackage com.example.placereviewer.config\n\nimport com.example.placereviewer.service.AppUserDetailsService\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.http.HttpMethod\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.config.BeanIds\nimport org.springframework.security.config.annotation\n           .authentication.builders.AuthenticationManagerBuilder\nimport org.springframework.security.config.annotation\n          .web.builders.HttpSecurity\nimport org.springframework.security.config.annotation\n          .web.configuration.EnableWebSecurity\nimport org.springframework.security.config.annotation\n          .web.configuration.WebSecurityConfigurerAdapter\nimport org.springframework.security.core.userdetails\n          .UserDetailsService\nimport org.springframework.security.crypto.bcrypt\n          .BCryptPasswordEncoder\nimport org.springframework.security.web\n          .DefaultRedirectStrategy\nimport org.springframework.security.web.RedirectStrategy\n\n@Configuration\n@EnableWebSecurity\nclass WebSecurityConfig(val userDetailsService: AppUserDetailsService) : WebSecurityConfigurerAdapter() {\n\n  private val redirectStrategy: RedirectStrategy = \n                                DefaultRedirectStrategy()\n\n  @Throws(Exception::class)\n  override fun configure(http: HttpSecurity) {\n    http.authorizeRequests()\n        .antMatchers(HttpMethod.GET,\"/register\").permitAll()\n        .antMatchers(HttpMethod.POST,\"/users/registrations\").permitAll()\n        .antMatchers(HttpMethod.GET,\"/css/**\").permitAll()\n        .antMatchers(HttpMethod.GET,\"/webjars/**\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n        .formLogin()\n        .loginPage(\"/login\")\n        .successHandler { request, response, _ ->\n          redirectStrategy.sendRedirect(request, response, \"/home\")\n        }\n        .permitAll()\n        .and()\n        .logout()\n        .permitAll()\n  }\n\n  @Throws(Exception::class)\n  override fun configure(auth: AuthenticationManagerBuilder) {\n    auth.userDetailsService<UserDetailsService>(userDetailsService)\n        .passwordEncoder(BCryptPasswordEncoder())\n  }\n\n  @Bean(name = [BeanIds.AUTHENTICATION_MANAGER])\n  override fun authenticationManagerBean(): AuthenticationManager {\n    return super.authenticationManagerBean()\n  }\n}\n```", "```\npackage com.example.placereviewer.service\n\nimport com.example.placereviewer.data.repository.UserRepository\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.userdetails.User\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.core.userdetails\n          .UsernameNotFoundException\nimport org.springframework.stereotype.Service\nimport java.util.ArrayList\n\n@Service\nclass AppUserDetailsService(private val userRepository: UserRepository) : UserDetailsService {\n\n  @Throws(UsernameNotFoundException::class)\n  override fun loadUserByUsername(username: String): UserDetails {\n    val user = userRepository.findByUsername(username) ?:\n        throw UsernameNotFoundException(\"A user with the username \n                                         $username doesn't exist\")\n\n    return User(user.username, user.password, \n                ArrayList<GrantedAuthority>())\n  }\n}\n```", "```\npackage com.example.placereviewer.controller\n\nimport org.springframework.stereotype.Controller\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\n\n@Controller\n@RequestMapping(\"/say\")\nclass HelloController {\n\n  @GetMapping(\"/hello\")\n  fun hello(): String {\n    return \"hello\"\n  }\n}\n```", "```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Hello</title>\n</head>\n<body>\nHello world!\n</body>\n</html>\n```", "```\n@Throws(Exception::class)\noverride fun configure(http: HttpSecurity) {\n    http.authorizeRequests()\n        .antMatchers(HttpMethod.GET,\"/say/hello\").permitAll() // added line\n        .antMatchers(HttpMethod.GET,\"/register\").permitAll()\n        .antMatchers(HttpMethod.POST,\"/users/registrations\").permitAll()\n        .antMatchers(HttpMethod.GET, \"/css/**\").permitAll()\n        .antMatchers(HttpMethod.GET, \"/webjars/**\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n        .formLogin()\n        .loginPage(\"/login\")\n        .successHandler { request, response, _ ->\n          redirectStrategy.sendRedirect(request, response, \"/home\")\n        }\n        .permitAll()\n        .and()\n        .logout()\n        .permitAll()\n}\n```", "```\nlogging.file=application.log\n```", "```\ncurl -XGET http://localhost:9200\n```", "```\n{\n  \"name\" : \"Df8YuN2\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"cluster_uuid\" : \"Z8SYAKLNSZaMiGkYz7ihfg\",\n  \"version\" : {\n    \"number\" : \"6.1.1\",\n    \"build_hash\" : \"bd92e7f\",\n    \"build_date\" : \"2017-12-17T20:23:25.338Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"7.1.0\",\n    \"minimum_wire_compatibility_version\" : \"5.6.0\",\n    \"minimum_index_compatibility_version\" : \"5.0.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```", "```\ninput {\n  file {\n    type => \"java\"\n    path => \"/<path-to-project>/place-reviewer/application.log\"\n    codec => multiline {\n      pattern => \"^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*\"\n      negate => \"true\"\n      what => \"previous\"\n    }\n  }\n}\n\nfilter {\n  #Tag log lines containing tab character followed by 'at' as stacktrace.\n  if [message] =~ \"\\tat\" {\n    grok {\n      match => [\"message\", \"^(\\tat)\"]\n      add_tag => [\"stacktrace\"]\n    }\n  }\n  #Grok Spring Boot's default log format\n  grok {\n    match => [ \"message\", \n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  \n                %{LOGLEVEL:level} %{NUMBER:pid} --- \\[(?<thread>\n                [A-Za-z0-9-]+)\\][A-Za-z0-9.]*\\.(?<class>\n                [A-Za-z0-9#_]+)\\s*:\\s+(?<logmessage>.*)\",\n               \"message\",\n               \"(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  \n                %{LOGLEVEL:level} %{NUMBER:pid} --- .+? \n                :\\s+(?<logmessage>.*)\"\n             ]\n  }\n\n  #Parsing timestamps in timestamp field\n  date {\n    match => [ \"timestamp\" , \"yyyy-MM-dd HH:mm:ss.SSS\" ]\n  }\n}\n\noutput {\n  # Print each event to stdout and enable rubydebug.\n  stdout {\n    codec => rubydebug\n  }\n  # Send parsed log events to Elasticsearch\n  elasticsearch {\n    hosts => [\"127.0.0.1\"]\n  }\n}\n```", "```\n/bin/logstash -f logstash.conf\n```"]