["```swift\nvar height = 125.3\nvar name = \"The Dude\"\nvar male = true\n```", "```swift\nvar age:Int\nvar height:Float\nvar name:String\nvar male:Bool\n```", "```swift\nlet age = 10\nlet height = 125.3\nlet name = \"The Dude\"\nlet male = true\n```", "```swift\nvar a = 36, b = 10\n```", "```swift\nvar c = 36; var d = 10\n```", "```swift\na+b // 46\na-b // 26\na*b // 360\na/b // 3\na%b // 6\n```", "```swift\nFloat(a)/Float(b) //3.5999999\n```", "```swift\na == b //false\na<b //false\na>b //true\na<=b //false\na>=b //true\n```", "```swift\na==b && a > b // false\na==b || a > b // true\n```", "```swift\nif a > b {\n\n    println(\"a is greater than b\")\n\n}\n```", "```swift\nprintln(\"\\(a) is greater than \\(b)\")\n```", "```swift\nlet x = \"Dude\"\nlet y = \"Name\"\nprintln(\"\\(x) is my \\(y)\")\n```", "```swift\nif a < b {\n\n    println(\"\\(a) is smaller than \\(b)\")\n\n} else {\n\n    println(\"\\(a) is greater than \\(b)\")\n\n}\n```", "```swift\nif a < b {\n\n    println(\"\\(a) is smaller than \\(b)\")\n\n} else if a > b {\n\n    println(\"\\(a) is greater than \\(b)\")\n\n}\n```", "```swift\na > b ? a : b\n```", "```swift\nvar speed = 30\n\nswitch speed {\n\ncase 10 : \" slow \"\ncase 20 : \" moderate\"\ncase 30 : \" fast enough\"\ncase 40 : \" faster \"\ncase 50 : \" fastest \"\ndefault : \" value needs to >= 10 or <= 50\"\n\n}\n```", "```swift\nswitch speed {\n\ncase 0...10 : \" slow \"\ncase 20 : \" moderate\"\ncase 30 : \" fast enough\"\ncase 40 : \" faster \"\ncase 50 : \" fastest \"\ndefault : \" value needs to >= 10 or <= 50\"\n\n}   \n```", "```swift\nvar n = 1, t = 10\n\nwhile n < t{\n\nn++\n\n}\n```", "```swift\ndo{\n\n    n--\n\n} while n > 0\n\n```", "```swift\nfor var i=0; i < 10 ; i++ {\n\n    i*i\n\n    }\n```", "```swift\nfor l in 1...10{\n\n    l * l * l\n\n}\n```", "```swift\nfor l in 0..<10{\n\n    l * l * l\n\n}\n```", "```swift\nfor c in \"string\"{\n\n    println(\"character \\(c)\")\n}\n```", "```swift\ncharacter s\ncharacter t\ncharacter r\ncharacter i\ncharacter n\ncharacter g\n```", "```swift\nvar score = [10, 8, 7, 9, 5, 2, 1, 0, 5, 6]\n\nvar daysofweek = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n```", "```swift\n var score : [Int]\n\nvar daysofweek : [String]\n```", "```swift\nscore = [10, 8, 7, 9, 5, 2, 1, 0, 5, 6]\n\ndaysofweek = [\"Monday\", \"Tuesday\", \"Wednesday\"]\n```", "```swift\nScore[0] // output: 10\n\nScore[5] // output: 2   \n```", "```swift\nfor myScore in score {\n\nmyScore\n\n}\n\nfor day in daysofweek{    \n\n    println(\"\\(day)\")\n\n}\n```", "```swift\nscore.append(10)\ndaysofweek.append(\"Thursday\")\n```", "```swift\nscore.removeLast()\n```", "```swift\nscore.removeAtIndex(5) \n```", "```swift\nscore.insert(8 ,atIndex: 5)\n```", "```swift\nscore.count\n```", "```swift\nscore.isEmpty \n```", "```swift\nvar countries = [\"AFG\": \"Afghanistan\",\n                \"ALB\": \"Albania\",\n                \"ALG: Algeria\"] \n```", "```swift\nvar states:[String: String]\n```", "```swift\nvar population: [String: Int]  \n```", "```swift\ncountries[\"GER\"] = \"Germany\"\ncountries.updateValue(\"Netherlands\",\"NED\")\n```", "```swift\ncountries[\"ALB\"] = nil \ncountries.removeValueForKey(\"AND\")\n```", "```swift\nfor (code, country) in countries{\n\nprintln(\"\\(code) is the code for \\(country) \")\n\n}\n```", "```swift\nGER is the code for Germany \nAFG is the code for Afghanistan \nALG is the code for Algeria \nNED is the code for Netherlands\n```", "```swift\ncountries.count\ncountries.isEmpty\n```", "```swift\nfunc someFunction(){\n\nPrintln(\" performing some function \")\n\n} \n```", "```swift\nsomeFunction() \n```", "```swift\nfunc printText(mtext: String){\n\n    println(\"Print out \\(mtext)\")\n\n}\n```", "```swift\nprintText(\"Hello Function\")\n```", "```swift\nfunc printVarText(var mtext: String){\n\n    mtext = \"Text Changed\"\n\n    println(\"Print out \\(mtext)\")\n\n}\n```", "```swift\nfunc calcSum(a: int, b: int){\n\nlet sum = a + b\n\nprintln(\"The sum of the numbers is: \\(sum) \") \n\n}\n```", "```swift\ncalcSum(10, 15)\n```", "```swift\nfunc mult(a: Int, b: Int) -> Int{\n\nlet mult = a * b\n\nreturn mult\n\n}\n\nlet mVal = mult(10, 20)\n\nprintln(\"The Multiplied valued is = \\(mVal)\")\n```", "```swift\nfunc defMult(a: Int = 20, b: Int = 30) -> Int{\n\nlet mult = a * b\n\nreturn mult\n\n}\n\nlet dVal = defMult()\n\nprintln(\"The Multiplied valued is = \\(dVal)\")\n```", "```swift\nprintln(\"The Multiplied valued is = \\(defMult(a: 80))\")\n```", "```swift\nprintln(\"The Multiplied valued is = \\(defMult(a: 80, b: 50))\")\n```", "```swift\nvar person : (int, string)\n```", "```swift\nperson.0 = 23\nperson.1 = \"The Dude\"  \n```", "```swift\nvar person2:(age:Int, name: String)\nperson2.age = 23\nperson2.name = \"The Dude\"\n```", "```swift\nfunc getAreaAndPerimeter(a: Int, b: Int) ->(Int, Int){\n\n  let area = a*b\n\nlet perimeter = 2a+ 2b \n\nreturn(area, perimeter)\n}\n```", "```swift\nlet value = getAreaAndPerimeter(40 ,80)\n```", "```swift\nprintln(\"Area is = \\(value.0) and Perimeter is = (value.1)\")\n```", "```swift\nfunc getNamedAreaAndPerimeter(a: Int, b: Int) ->(area: Int, perimeter: Int){\n        let  area = a * b\n        let  perimeter = 2 * a + 2 * b\n\n        return (area, perimeter)\n}\n\nlet namedvalue = getNamedAreaAndPerimeter(80 ,100)\n\nprintln(\"Named Area is = \\(namedvalue.area) and Named Perimeter is = \\(namedvalue.perimeter)\")\n```", "```swift\nClass Character{\n\nvar name = \"The Dude\"\n\nvar health = 100\n\n}\n```", "```swift\nvar theDude = Character()\n```", "```swift\ntheDude.name\n\ntheDude.health\n```", "```swift\nclass Character1{\n\n    var name: String\n\n    var health: Int\n\n    init(){\n\n      name = \"The Dude\"\n      health = 100\n\n    }\n}\n```", "```swift\nclass Character2{\n\nvar name: String\nvar health: Int\n\n    init(){\n\n        name = \"The Dude\"\n        health = 100\n    }\n\n    init(name: String){\n\n        self.name = name\n        self.health = 100\n    }\n\n}\n```", "```swift\nvar hero = Character2(name: \"Hero\")\n\nhero.name\nhero.health\n```", "```swift\n    func takeDamage(damage: Int){\n\n        self.health -= damage\n\n    }\n```", "```swift\nhero.takeDamage(10)\n\nhero.health\n```", "```swift\n    func reduceArmour(damage: Int, armour: Int){\n\n        self.health -= damage\n        self.armour -= armour\n    }\n```", "```swift\nhero.reduceArmour(10, armour: 2)\nhero.health\nhero.armour\n```", "```swift\nclass Mage: Character2{\n\n    var magic: Int\n\n    override init(name: String){\n\n        self.magic = 100\n        super.init()\n\n        //self.name = name\n        //self.health = 60\n        //self.armour = 15\n    }\n\n}\n```", "```swift\nvar vereka = Mage(name: \"Vereka\")\n\nvereka.name\nvereka.health\nvereka.armour\nvereka.magic\n```", "```swift\npublic class myCharacter {\n         public var name: String\n         private var age:Int  \n         var speed:Int         \n\n        public init(){         \n          self.name = \"The Dude\" \n          self.age = 100     \n          self.speed = 20\n      }\n} \n```", "```swift\nvar score:Int?\n\nif score != nil {\n\n    println(\"Yay!! Your current score is \\(score)\")\n\n}else{\n\n    println(\" No internet! Pay your bills on time \")\n}\n```", "```swift\nprintln(\"Yay!! Your current score is \\(score!)\")\n```"]