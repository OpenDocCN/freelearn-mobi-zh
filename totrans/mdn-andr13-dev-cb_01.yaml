- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Started with Modern Android Development Skills
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代Android开发技能入门
- en: The Android **Operating System** (**OS**) is one of the most favored platforms
    for mobile devices, with many users worldwide. The OS is used in cars and wearables
    such as smart watches, TVs, and phones, which makes the market quite wide for
    Android developers. Hence, there is a need for new developers to learn how to
    build Android applications utilizing new **Modern Android Development** (**MAD**)
    skills.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Android **操作系统**（**OS**）是移动设备中最受欢迎的平台之一，全球有众多用户。该操作系统用于汽车和可穿戴设备，如智能手表、电视和手机，这使得Android开发者的市场相当广泛。因此，新开发者需要学习如何利用新的**现代Android开发**（**MAD**）技能来构建Android应用程序。
- en: Android has come a long way since being launched in 2008 and used in the first
    **Integrated Development Environments** (**IDEs**), Eclipse and NetBeans. Today,
    Android Studio is the recommended IDE for Android development and, unlike before,
    when Java was the preferred language, Kotlin is now the language of choice.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 自从2008年推出并在第一个**集成开发环境**（**IDE**）Eclipse和NetBeans中使用以来，Android已经取得了长足的进步。如今，Android
    Studio是Android开发的推荐IDE，与之前相比，当Java是首选语言时，Kotlin现在是首选语言。
- en: Android Studio includes support for Kotlin, Java, C++, and other programming
    languages, making this IDE suitable for developers with different skill sets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio包括对Kotlin、Java、C++和其他编程语言的支持，这使得这个IDE适合具有不同技能集的开发者。
- en: Hence, by the end of this chapter, following the recipes, you will have Android
    Studio installed, have built your first Android application using Jetpack Compose,
    and have learned some Kotlin syntax, utilizing the preferred language for Android
    development. In addition, this introduction will prepare the base for you to understand
    advanced material that will be crucial for MAD.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过本章的食谱，您将在本章结束时安装Android Studio，使用Jetpack Compose构建您的第一个Android应用程序，并学习一些Kotlin语法，利用Android开发的优选语言。此外，本介绍将为您理解对MAD至关重要的高级材料打下基础。
- en: 'In this chapter, we’ll be covering the following recipes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Writing your first program in Kotlin using variables and idioms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用变量和惯用用法用Kotlin编写您的第一个程序
- en: Creating a Hello, Android Community app using Android Studio
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Android Studio创建一个“Hello, Android Community”应用程序
- en: Setting up your emulator in Android Studio
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android Studio中设置您的模拟器
- en: Creating a button in Jetpack Compose
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Jetpack Compose中创建一个按钮
- en: Utilizing `gradlew` commands to clean and run your project in Android Studio
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用`gradlew`命令在Android Studio中清理和运行您的项目
- en: Understanding the Android project structure
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Android项目结构
- en: Debugging and logging in Android Studio
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android Studio中进行调试和日志记录
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Running the Android IDE and an emulator successfully can be daunting for your
    computer. You may have heard the joke about how machines running Android Studio
    can be used as heaters in winter. Well, there is some truth in that, so your computer
    should have the following specifications to ensure your system can cope with the
    IDE’s demands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 成功运行Android IDE和模拟器可能对您的计算机来说是一项艰巨的任务。您可能听说过这样一个笑话：运行Android Studio的机器在冬天可以用作暖气。好吧，这确实有一定的真实性，因此您的计算机应该具备以下规格，以确保您的系统能够应对IDE的需求：
- en: 64-bit Microsoft Windows, macOS, or Linux installed along with a stable internet
    connection. Recipes in this book have been developed within macOS. You can also
    use a Windows or Linux laptop, as there is no difference between using either.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装64位Microsoft Windows、macOS或Linux，并配备稳定的互联网连接。本书中的食谱是在macOS上开发的。您也可以使用Windows或Linux笔记本电脑，因为使用它们之间没有区别。
- en: 'For Windows and Linux users, you can follow this link to install Android Studio:
    [https://developer.android.com/studio/install](https://developer.android.com/studio/install).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows和Linux用户，您可以点击此链接安装Android Studio：[https://developer.android.com/studio/install](https://developer.android.com/studio/install)。
- en: Minimum of 8 GB of RAM or more.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要8 GB的RAM或更多。
- en: Minimum of 8 GB of available disk space for Android Studio, the Android **Software
    Development Kit** (**SDK**), and the Android Emulator.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio、Android **软件开发工具包**（**SDK**）和Android模拟器至少需要8 GB的可用磁盘空间。
- en: A minimum screen resolution of 1280 x 800 is preferred.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议的最低屏幕分辨率为1280 x 800。
- en: You can download Android Studio at [https://developer.android.com/studio](https://developer.android.com/studio).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从[https://developer.android.com/studio](https://developer.android.com/studio)下载Android
    Studio。
- en: 'The complete source code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_one](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_one)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可在 GitHub 上找到：[https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_one](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_one)
- en: "Writing your first program in Kotlin using variables \Land idioms"
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用变量和惯用法编写你的第一个 Kotlin 程序
- en: '**Kotlin** is the recommended language for Android development; you can still
    use Java as your language of choice, as many legacy applications still heavily
    rely on Java. However, in this book, we will use Kotlin, and if this is the first
    time you are building Android applications using the Kotlin language, the Kotlin
    organization has excellent resources to help you get started with free practice
    exercises and self-paced assessments called **Kotlin** **Koans** ([https://play.kotlinlang.org/koans/overview](https://play.kotlinlang.org/koans/overview)).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kotlin** 是 Android 开发的推荐语言；你仍然可以使用 Java 作为你的首选语言，因为许多遗留应用程序仍然严重依赖于 Java。然而，在这本书中，我们将使用
    Kotlin，如果你是第一次使用 Kotlin 语言构建 Android 应用程序，Kotlin 组织有优秀的资源可以帮助你开始，包括免费的练习练习和自我定速评估，称为
    **Kotlin Koans** ([https://play.kotlinlang.org/koans/overview](https://play.kotlinlang.org/koans/overview))。'
- en: In addition, you can use the Kotlin language for multiplatform development using
    **Kotlin Multiplatform Mobile** (**KMM**), in which you can share standard code
    between iOS and Android apps and write platform-specific code only where necessary.
    KMM is currently in Alpha.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用 Kotlin 语言进行多平台开发，使用 **Kotlin Multiplatform Mobile** （**KMM**），其中你可以在
    iOS 和 Android 应用程序之间共享标准代码，仅在必要时编写特定平台的代码。KMM 目前处于 Alpha 版本。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, you can either use the online Kotlin playground ([https://play.kotlinlang.org/](https://play.kotlinlang.org/))
    to run your code or run the code in your Android Studio IDE. Alternatively, you
    can download and use the IntelliJ IDEA IDE if you plan on doing more Kotlin practice
    questions with Koans.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你可以使用在线 Kotlin 游乐场 ([https://play.kotlinlang.org/](https://play.kotlinlang.org/))
    来运行你的代码，或者在 Android Studio IDE 中运行代码。或者，如果你计划使用 Koans 进行更多 Kotlin 练习，你可以下载并使用
    IntelliJ IDEA IDE。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will explore and modify a simple program that we will write
    in Kotlin; you can think of a program as instructions we give a computer or mobile
    devices to perform actions that we give them. For instance, we will create a greeting
    in our program and later write a different program.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探索并修改一个我们将用 Kotlin 编写的简单程序；你可以将程序视为我们给计算机或移动设备下达的指令，以执行我们给它们的动作。例如，我们将在程序中创建一个问候语，稍后编写一个不同的程序。
- en: 'For this recipe, you can choose either Android Studio or the free online IDE
    since we will touch on some Kotlin functionalities:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，你可以选择 Android Studio 或免费的在线 IDE，因为我们将会涉及到一些 Kotlin 功能：
- en: If you opt to use the Kotlin online playground for the first time, you will
    see something like the following screenshot, with a `println` statement that says
    `Hello, world`, but for our example, we will change that greeting to *Hello, Android
    Community*, and run the code.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你第一次使用 Kotlin 在线游乐场，你会看到如下截图，其中有一个 `println` 语句显示 `Hello, world`，但为了我们的示例，我们将这个问候语改为
    *Hello, Android Community*，并运行代码。
- en: '![Figure 1.1 – The online Kotlin editor](img/B18827_01_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 在线 Kotlin 编辑器](img/B18827_01_01.jpg)'
- en: Figure 1.1 – The online Kotlin editor
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 在线 Kotlin 编辑器
- en: Let’s look at another example; a popular algorithm problem used in interviews
    – reversing a string. For example, you have a string, `Community`, and we want
    to reverse the string so that the output will be `ytinummoC`. There are several
    ways to solve this problem, but we will solve it using the Kotlin idiomatic way.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子；一个在面试中常用的流行算法问题——反转字符串。例如，你有一个字符串 `Community`，我们想要反转这个字符串，以便输出将是
    `ytinummoC`。解决这个问题有几种方法，但我们将使用 Kotlin 的惯用方式来解决它。
- en: 'Input the following code in the playground of your IDE or the Kotlin playground:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 IDE 的游乐场或 Kotlin 游乐场中输入以下代码：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: It is essential to mention in Kotlin, that there are unique ways to keep your
    code cleaner, more precise, and simpler by taking advantage of the default parameter
    value and only setting the parameters you need to alter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kotlin 中提到，通过利用默认参数值和仅设置需要更改的参数，有独特的方法可以使你的代码更干净、更精确、更简单。
- en: '`fun` is a word in Kotlin programming language that stands for *function*,
    and a function in Kotlin is a section of a program that performs a specific task.
    The name of the function in our first example is `main()`, and in our `main()`
    function, we do not have any inputs. Functions, in general, have names so that
    we are able to distinguish them from each other if our code base is complex.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`fun`是Kotlin编程语言中的一个词汇，代表*函数*，Kotlin中的函数是执行特定任务的程序的一部分。我们第一个例子中的函数名是`main()`，在我们的`main()`函数中，我们没有任何输入。通常，函数有名字，这样我们就能在代码库复杂时区分它们。'
- en: In addition, in Java, a function is similar to a method. The function name has
    two parentheses and curly braces, and `println`, which tells the system to print
    a line of text.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在Java中，函数类似于方法。函数名有两个括号和大括号，以及`println`，它告诉系统打印一行文本。
- en: If you have used Java, you might notice that the Kotlin programming language
    is very similar to Java. However, developers now talk about how great Kotlin language
    is for developers because it provides more expressive syntax and sophisticated
    type systems and handles the Null pointer problem that Java had for many years.
    To take full advantage of the Kotlin language power and write more concise code,
    knowing about Kotlin idioms can be beneficial. Kotlin idioms are frequently used
    collections that help to manipulate data and make Android developers’ experience
    more effortless.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过Java，你可能会注意到Kotlin编程语言与Java非常相似。然而，开发者们现在都在谈论Kotlin语言对开发者来说是多么的出色，因为它提供了更丰富的语法和复杂的类型系统，并且处理了Java多年来一直存在的空指针问题。为了充分利用Kotlin语言的力量并编写更简洁的代码，了解Kotlin惯用表达式可能会有所帮助。Kotlin惯用表达式是经常使用的集合，有助于操作数据并使Android开发者的体验更加轻松。
- en: In our second example, we have two functions, `main()` and `reverseString()`.
    `main()` takes nothing in its input, but `reverseString()` does take in a String
    input. You will also notice we use `val`, which is a unique word used by Kotlin
    to refer to an immutable value that can only be set to one value, as compared
    to `var`, which is a mutable variable, meaning it can be resigned.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第二个例子中，我们有两个函数，`main()`和`reverseString()`。`main()`没有输入，但`reverseString()`确实接收一个字符串输入。你也会注意到我们使用了`val`，这是Kotlin中用来指代只能设置为单个值的不可变值的独特词汇，与`var`相对，`var`是可变的变量，意味着它可以被重新赋值。
- en: We create a `val stringToBeReversed` which is a String and call it `"Community"`,
    then call `println` inside the `main()` function, and pass in the text we want
    to print in our `reverseString()` function. Furthermore, in this example, our
    `reverseString` function takes in a `string` argument from the String object and
    then returns a string type.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`val stringToBeReversed`，它是一个字符串，并将其命名为`"Community"`，然后在`main()`函数内部调用`println`，并将我们想要在`reverseString()`函数中打印的文本传递进去。此外，在这个例子中，我们的`reverseString`函数从字符串对象接收一个`string`参数，然后返回一个字符串类型。
- en: '![Figure 1.2 – The reversed string on the Kotlin playground](img/B18827_01_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – Kotlin playground上的反转字符串](img/B18827_01_02.jpg)'
- en: Figure 1.2 – The reversed string on the Kotlin playground
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – Kotlin playground上的反转字符串
- en: There is more to learn, and it is fair to acknowledge that what we have covered
    in this recipe is just a tiny part of what you can do with Kotlin idioms. This
    recipe aimed to introduce concepts that we might touch on or use in later chapters,
    not in depth, however, since we will explore more of Kotlin in later chapters.
    Hence, it’s good to know what Kotlin idioms are and why they are essential for
    now.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多东西要学习，而且公平地说，我们在本食谱中涵盖的内容只是Kotlin惯用表达式所能做到的一小部分。本食谱旨在介绍我们可能在后续章节中触及或使用的一些概念，但不会深入探讨，因为我们将后续章节中更多地探索Kotlin。因此，现在了解Kotlin惯用表达式及其重要性是很好的。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料还有
- en: 'A better understanding of the Kotlin syntax and popular use cases will be vital
    for your day-to-day work, so look at the following resources:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对Kotlin语法和常用用例的更好理解对你的日常工作至关重要，因此请查看以下资源：
- en: 'The JetBrains Academy has a great free Kotlin Basics course here: [https://hyperskill.org/tracks/18](https://hyperskill.org/tracks/18).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JetBrains Academy在这里提供了一个很棒的免费Kotlin基础课程：[https://hyperskill.org/tracks/18](https://hyperskill.org/tracks/18)。
- en: 'The Kotlin documentation is also a great resource to keep handy: [https://kotlinlang.org/docs/home.html](https://kotlinlang.org/docs/home.html).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin文档也是一个很好的资源，可以随时查阅：[https://kotlinlang.org/docs/home.html](https://kotlinlang.org/docs/home.html)。
- en: Creating a Hello, Android Community app using Android Studio
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android Studio创建Hello, Android Community应用程序
- en: We will create our first Android application now that we have installed Android
    Studio. In addition, we will use Compose – just to mention in advance, in this
    recipe, we will not go in depth about Compose, as we have a dedicated chapter
    on Compose, which is [*Chapter 2*](B18827_02.xhtml#_idTextAnchor082), *Creating
    Screens Using a Declarative UI and Exploring* *Compose Principles*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Android Studio，我们将创建我们的第一个 Android 应用程序。此外，我们将使用 Compose – 提前说明一下，在这个菜谱中，我们不会深入探讨
    Compose，因为我们有一个专门的章节关于 Compose，即 [*第 2 章*](B18827_02.xhtml#_idTextAnchor082)，*使用声明性
    UI 创建屏幕并探索 Compose 原则*。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before you begin, it’s helpful to know where your Android projects are for consistency.
    By default, Android Studio creates a package in your home directory, and the package
    name is `AndroidStudioProjects`; here, you will find all the projects you create.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，了解你的 Android 项目所在位置对于保持一致性很有帮助。默认情况下，Android Studio 在你的家目录中创建一个名为 `AndroidStudioProjects`
    的包，在这里你可以找到你创建的所有项目。
- en: 'You can also decide where the folder should be if you want to change it. In
    addition, ensure you are using the latest version of Android Studio to utilize
    all the great features. To find out what the latest Android version is, you can
    use the following link: [https://developer.android.com/studio/releases](https://developer.android.com/studio/releases).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改它，你也可以决定文件夹应该放在哪里。此外，确保你使用的是 Android Studio 的最新版本以利用所有优秀功能。要了解最新的 Android
    版本，你可以使用以下链接：[https://developer.android.com/studio/releases](https://developer.android.com/studio/releases)。
- en: How to do it…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: In the Android Studio IDE, a project template is an Android app that has all
    the necessary parts to create an application and helps you get started and set
    up.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio IDE 中，一个项目模板是一个包含创建应用程序所需所有部分的 Android 应用程序，它帮助你开始并设置。
- en: 'So, step by step, we will make our first Android application and launch it
    on the emulator:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一步一步地，我们将创建我们的第一个 Android 应用程序并在模拟器上运行它：
- en: Start Android Studio by clicking on the Android Studio icon in your dock or
    wherever you have stored Android Studio.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击你坞栏中的 Android Studio 图标或你存储 Android Studio 的位置来启动 Android Studio。
- en: You will see a welcome Android Studio window open up, and you can click on **New
    Project**. Alternatively, you can go to **File** and click **New Project**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个欢迎的 Android Studio 窗口打开，你可以点击 **New Project**。或者，你也可以转到 **文件** 并点击 **New
    Project**。
- en: Select **Empty Compose Activity** and click on **Next**.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Empty Compose Activity** 并点击 **Next**。
- en: '![Figure 1.3 – Creating an empty Compose activity](img/B18827_01_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 创建空的 Compose 活动](img/B18827_01_03.jpg)'
- en: Figure 1.3 – Creating an empty Compose activity
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 创建空的 Compose 活动
- en: Once the empty Compose activity screen loads (*Figure 1**.4*), you will see
    fields including `Android Community` and leave the other settings as is. You will
    also notice that the language is **Kotlin** by default.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦加载了空的 Compose 活动屏幕 (*图 1.4*), 你将看到包括 `Android Community` 在内的字段，其他设置保持不变。你还会注意到默认语言是
    **Kotlin**。
- en: 'As for **Minimum SDK**, our target is **API 21: Android 5.0 (Lollipop)**, which
    indicates the minimum version of Android that your app can run, which, in our
    case, is approximately 98.8% of devices. You can also click on the dropdown and
    learn more about the minimum SDK.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '关于 **最小 SDK 版本**，我们的目标是 **API 21: Android 5.0 (Lollipop**)，这表示你的应用可以运行的最小 Android
    版本，在我们的案例中，大约是 98.8% 的设备。你也可以点击下拉菜单来了解更多关于最小 SDK 的信息。'
- en: '![Figure 1.4 – Naming your empty Compose activity](img/B18827_01_04.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 命名你的空 Compose 活动](img/B18827_01_04.jpg)'
- en: Figure 1.4 – Naming your empty Compose activity
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 命名你的空 Compose 活动
- en: Click **Finish** and wait for Gradle to sync.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Finish** 并等待 Gradle 同步。
- en: 'Go ahead and play around with the packages, and you will notice a `MainActivity`
    class that extends a `ComponentActivity()` which extends `Activity()`; inside,
    we have a `fun onCreate`, which is an override from the `ComponentActivity`. You
    will also see a `setContent{}`, which is a function used to set the content of
    a Composable function. The `setContent{}` function takes a lambda expression that
    contains the UI elements that should be displayed, and in our case it holds the
    theme of our application. In the `Greeting()`function, we will change what is
    provided and add our own greeting which is `"Hello, Android Community"` and run,
    and we will have created our first `Greeting`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续探索包，您将注意到一个扩展 `ComponentActivity()` 的 `MainActivity` 类，而 `ComponentActivity()`
    又扩展了 `Activity()`；在内部，我们有一个 `fun onCreate`，这是从 `ComponentActivity` 继承而来的。您还会看到一个
    `setContent{}`，这是一个用于设置可组合函数内容的函数。`setContent{}` 函数接受一个包含应显示的 UI 元素的 lambda 表达式，在我们的情况下，它持有我们应用程序的主题。在
    `Greeting()` 函数中，我们将更改提供的内容，并添加我们自己的问候语 `"Hello, Android Community"` 并运行，这样我们就创建了第一个
    `Greeting`：
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s go ahead and modify the `Greeting()` function and assign the `name` argument
    to the text:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续修改 `Greeting()` 函数，并将 `name` 参数分配给文本：
- en: '[PRE25]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In addition, you can also just pass `"Hello, Android Community"` into the default
    implementation, and this will produce the same UI.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您也可以直接将 `"Hello, Android Community"` 传递给默认实现，这将产生相同的用户界面。
- en: 'Like in an XML view, you can easily view the UI you are building without running
    the app in an emulator using `@Preview(showBackground = true)`, so let’s go ahead
    and add this to our code if it is not available. By default, the project comes
    with a template that has a `Preview()`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像在 XML 视图中一样，您可以使用 `@Preview(showBackground = true)` 在不运行模拟器中的应用程序的情况下轻松查看您正在构建的
    UI，所以如果它不可用，我们就将其添加到我们的代码中。默认情况下，项目附带一个包含 `Preview()` 模板的模板：
- en: '[PRE31]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Finally, when you run the application, you should have a screen like in *Figure
    1**.5*. In the following recipe, we will look at how you can set up your emulator
    step by step, so do not worry about that yet.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，当您运行应用程序时，您应该有一个类似于 *图 1**.5* 的屏幕。在接下来的食谱中，我们将查看如何逐步设置您的模拟器，所以请不用担心这一点。
- en: "![Figure 1.5 – Screen displaying He\uFEFFllo, Android Community](img/B18827_01_05.jpg)"
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 显示“Hello, Android Community”的屏幕](img/B18827_01_05.jpg)'
- en: Figure 1.5 – Screen displaying Hello, Android Community
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 显示“Hello, Android Community”的屏幕
- en: How it works…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The key benefits of using Jetpack Compose for creating your view are that it
    speeds up the development time since you use the same language to write your entire
    code base (Kotlin) and it is easier to test. You can also create reusable components
    that you can customize to your needs.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jetpack Compose 创建视图的关键好处是，由于您使用相同的语言（Kotlin）编写整个代码库，因此可以加快开发速度，并且更容易进行测试。您还可以创建可重用的组件，并根据您的需求进行自定义。
- en: Therefore, ensuring lower chances of errors and having to write views with XML
    because it is tedious and cumbersome. The `onCreate()` function is considered
    the entry point to the application in Android. Furthermore, we use `modifier`
    functions to add behavior and decorate the composable. We’ll talk more about what
    `modifier` and `Surface` functions can do in the next chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，确保降低错误发生的可能性，并且不需要使用 XML 编写视图，因为这是繁琐且麻烦的。`onCreate()` 函数被认为是 Android 应用程序的入口点。此外，我们使用
    `modifier` 函数来添加行为并装饰可组合项。我们将在下一章中更多地讨论 `modifier` 和 `Surface` 函数可以做什么。
- en: Setting up your emulator in Android Studio
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Android Studio 中设置您的模拟器
- en: Android Studio is a reliable and mature IDE. As a result, Android Studio has
    been the favored IDE for developing Android applications since 2014\. Of course,
    you can still use other IDEs, but the advantage of Android Studio is that you
    do not need to install the Android SDK separately.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是一个可靠且成熟的集成开发环境。因此，自 2014 年以来，Android Studio 一直是开发 Android 应用程序的首选
    IDE。当然，您仍然可以使用其他 IDE，但 Android Studio 的优势是您不需要单独安装 Android SDK。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have done the previous recipe to be able to follow along with this
    recipe since we will be setting up our emulator in order to run the project we
    just created.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要完成之前的食谱，才能跟随本食谱进行操作，因为我们将会设置我们的模拟器来运行我们刚刚创建的项目。
- en: How to do it…
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: This chapter seeks to be friendly to beginners and also move you smoothly toward
    more advanced Android as you work through the recipes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在对初学者友好，并在您通过食谱进行工作时，帮助您顺利过渡到更高级的 Android。
- en: 'Let’s follow these steps to see how you can set up your emulator and run your
    project in the *Creating a Hello, Android Community App using Android* *Studio*
    recipe:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤进行，看看您如何设置模拟器并在*使用Android Studio创建Hello, Android Community App*菜谱中运行您的项目：
- en: 'Navigate to **Tools** | **Device Manager**. Once the device manager is ready,
    you have two options: **Virtual** or **Physical**. **Virtual** means you will
    be using an emulator, and **Physical** means you will be enabling your Android
    phone to debug Android applications. For our purposes, we will choose **Virtual**.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **设备管理器**。一旦设备管理器就绪，您有两个选项：**虚拟**或**物理**。**虚拟**意味着您将使用模拟器，而**物理**意味着您将启用您的Android手机以调试Android应用程序。就我们的目的而言，我们将选择**虚拟**。
- en: Click on **Create device**, and the **Virtual Device Configuration** screen
    will pop up.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建设备**，将弹出**虚拟设备配置**屏幕。
- en: Pick **Phone**. You will notice Android Studio has other categories, such as
    **TV**, **Wear OS**, **Tablet**, and **Automotive**. Let’s use **Phone** for now,
    and in a future chapter, we will try using **Wear OS**. Click on **Next**.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**手机**。您会注意到Android Studio还有其他类别，例如**电视**、**Wear OS**、**平板电脑**和**汽车**。现在我们先使用**手机**，在未来的章节中，我们将尝试使用**Wear
    OS**。点击**下一步**。
- en: '![Figure 1.6 – Selecting a virtual device](img/B18827_01_06.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – 选择虚拟设备](img/B18827_01_06.jpg)'
- en: Figure 1.6 – Selecting a virtual device
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – 选择虚拟设备
- en: In *Figure 1**.7*, you will see a list of **Recommended system images**. You
    can choose any or use the default one, which is **S** in our case for Android
    12, although you might want to use the latest API, **33**, and then click **Next**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**图1**.7中，您将看到一个**推荐系统镜像**的列表。您可以选择任何一个或使用默认的，在我们的案例中是**S**，针对Android 12，尽管您可能想使用最新的API，**33**，然后点击**下一步**。
- en: '![Figure 1.7 – Selecting a system image](img/B18827_01_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – 选择系统镜像](img/B18827_01_07.jpg)'
- en: Figure 1.7 – Selecting a system image
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 选择系统镜像
- en: You will now arrive at the **Android Virtual Device** (**AVD**) screen, where
    you can name your virtual device. You can enter a name or just leave the default,
    **Pixel 2 API 31**, and then hit **Finish**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将到达**Android虚拟设备**（**AVD**）屏幕，您可以命名您的虚拟设备。您可以输入一个名称或直接保留默认值，**Pixel 2 API
    31**，然后点击**完成**。
- en: '![Figure 1.8 – Final steps of setting up the AVD](img/B18827_01_08.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 设置AVD的最后步骤](img/B18827_01_08.jpg)'
- en: Figure 1.8 – Final steps of setting up the AVD
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 设置AVD的最后步骤
- en: Test your virtual device by running it and ensure it works as expected. You
    should see something similar to *Figure 1**.9* once you run your application on
    the emulator.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行它来测试您的虚拟设备，并确保它按预期工作。一旦您在模拟器上运行应用程序，您应该会看到类似于*图1**.9的内容。
- en: '![Figure 1.9 – The Device Manager section to run the emulator](img/B18827_01_09.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 运行模拟器的设备管理器部分](img/B18827_01_09.jpg)'
- en: Figure 1.9 – The Device Manager section to run the emulator
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 运行模拟器的设备管理器部分
- en: Important note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To create a physical testing device, you must go to **Settings** on your Android
    phone and select **About phone** | **Software information** | **Build number**
    and hold down the button as you release until you see **You are now four steps
    away from being a developer**. Once the count is complete, you will see a notification
    saying **Developer options successfully enabled**. All you need now is to use
    a **Universal Serial Bus** (**USB**) and toggle USB debugging. Finally, you will
    see that your physical phone is ready for testing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建物理测试设备，您必须进入您的Android手机的**设置**，选择**关于手机** | **软件信息** | **构建号**，并在释放按钮的同时按住，直到您看到**您现在离成为开发者只有四步之遥**。一旦计数完成，您将看到一个通知说**开发者选项已成功启用**。现在您只需要使用**通用串行总线**（**USB**）并切换USB调试。最后，您将看到您的物理手机已准备好进行测试。
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Testing and ensuring your applications display the expected outcome is very
    important. That is why Android Studio uses the emulator to help developers ensure
    their application functions as it would on standard devices. Furthermore, Android
    phones come with a developer’s option ready for developers to use, which makes
    it even easier for the different number of devices that Android supports and also
    for helping reproduce bugs that are hard to find in emulators.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 测试并确保您的应用程序显示预期的结果非常重要。这就是为什么Android Studio使用模拟器来帮助开发者确保他们的应用程序在标准设备上运行的方式。此外，Android手机自带开发者选项，方便开发者使用，这使得支持不同数量的Android设备变得更加容易，也有助于在模拟器中重现难以找到的bug。
- en: Creating a button in Jetpack Compose
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jetpack Compose中创建按钮
- en: We must note that we cannot cover all views in just one recipe; we have a chapter
    dedicated to learning more about Jetpack Compose, so in the project we have created,
    we will just try to create two more additional views for our project.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须注意，我们无法在一个菜谱中涵盖所有视图；我们有一个专门用于学习更多关于Jetpack Compose的章节，所以在我们创建的项目中，我们只是尝试为我们的项目创建两个额外的视图。
- en: Getting ready
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open the **Android Community** project, as that is the project we will be building
    upon in this recipe.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**Android社区**项目，因为这是我们将在本菜谱中构建的项目。
- en: How to do it…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let’s start by implementing a simple button in Compose:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在Compose中实现一个简单的按钮开始：
- en: 'Let’s go ahead and organize our code and align the text to the center by adding
    a `Column()` to organize our views. This should be added to the `setContent{}`
    function:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续组织我们的代码，并通过添加`Column()`来使文本居中。这应该添加到`setContent{}`函数中：
- en: '[PRE35]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, create a function and call it `SampleButton`; we will pass nothing in
    this example. However, we will have a `RowScope{}`, which defines the `modifier`
    functions applicable to our button in this case, and we will give our button a
    name: `click me`.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个函数并命名为`SampleButton`；在这个例子中，我们将不传递任何内容。然而，我们将有一个`RowScope{}`，它定义了适用于我们按钮的`modifier`函数，并且我们将给我们的按钮起一个名字：`click
    me`。
- en: 'In Compose, when you create a button, you can set its shape, icon, and elevation,
    check whether it is enabled or not, check its content, and more. You can check
    how to customize your button by command-clicking on the `Button()` component:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Compose中，当你创建一个按钮时，你可以设置其形状、图标和高度，检查它是否启用，检查其内容等等。你可以通过在`Button()`组件上命令点击来检查如何自定义你的按钮：
- en: '[PRE44]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In our `SampleButton`, `onClick` does not do anything; our button has a modifier
    of the maximum fill width, padding of 24 **density-independent pixels** (**dp**),
    and round corners with a radius of 20 dp.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`SampleButton`中，`onClick`没有任何操作；我们的按钮具有最大填充宽度的修饰符，24 **密度无关像素**（**dp**）的内边距，以及半径为20
    dp的圆角。
- en: We have also set the button’s color and added `click me` as text. We set our
    font size to 14 **scale-independent pixels** (**sp**), as this helps in ensuring
    that the text will adjust well for both the screen and users’ preferences.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置了按钮的颜色，并添加了`click me`作为文本。我们将字体大小设置为14 **缩放无关像素**（**sp**），因为这有助于确保文本将很好地适应屏幕和用户的偏好。
- en: Also, click **Split** in the top right to preview your screen elements, or you
    can click on the **Design** section to view the entire screen without the code.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，点击右上角的**Split**来预览你的屏幕元素，或者你可以点击**设计**部分来查看整个屏幕而不显示代码。
- en: '![Figure 1.10 – View both the code and design in Android Studio](img/B18827_01_10.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图1.10 – 在Android Studio中查看代码和设计](img/B18827_01_10.jpg)'
- en: Figure 1.10 – View both the code and design in Android Studio
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10 – 在Android Studio中查看代码和设计
- en: 'Finally, let’s call our `SampleButton` function, where the `Greeting` function
    is, and run the app:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们调用我们的`SampleButton`函数，其中包含`Greeting`函数，并运行应用程序：
- en: '[PRE67]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Compile and run the program; your app should look similar to *Figure 1**.11*.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行程序；你的应用应该看起来类似于*图1.11*。
- en: "![Figure 1.11 \uFEFF– A screenshot showing the text and a button](img/B18827_01_11.jpg)"
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图1.11 – 展示文本和按钮的屏幕截图](img/B18827_01_11.jpg)'
- en: Figure 1.11 – A screenshot showing the text and a button
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11 – 展示文本和按钮的屏幕截图
- en: How it works…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A Composable app comprises several composable functions, just normal functions
    annotated with `@Composable`. As Google documentation explains, the annotation
    tells the Compose to add exceptional support to the procedure for updating and
    maintaining your UI over time. Compose also lets you structure your code into
    small maintainable chunks that you can adjust and reuse at any given point.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Composable应用程序由多个composable函数组成，这些函数是带有`@Composable`注解的正常函数。正如Google文档所解释的，这个注解告诉Compose为更新和维护你的UI提供特殊支持。Compose还允许你将代码结构化为小型可维护的块，你可以在任何给定点进行调整和重用。
- en: There’s more…
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Since it’s hard to cover all views in a single recipe, we will work on more
    views in [*Chapter 2*](B18827_02.xhtml#_idTextAnchor082), *Creating Screens Using
    a Declarative UI and Exploring Compose Principles*, explore the best practices,
    and test our composable views.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 由于很难在一个菜谱中涵盖所有视图，我们将在[*第2章*](B18827_02.xhtml#_idTextAnchor082)中工作更多视图，*使用声明性UI创建屏幕并探索Compose原则*，探索最佳实践，并测试我们的composable视图。
- en: Utilizing gradlew commands to clean and run your project in Android Studio
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用gradlew命令在Android Studio中清理和运行你的项目
- en: The `gradlew` command is a robust Gradle wrapper that has excellent usage. In
    Android Studio, however, you do not need to install it because it is a script
    that comes packaged within the project.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradlew` 命令是一个功能强大的 Gradle 包装器，具有出色的使用效果。然而，在 Android Studio 中，你不需要安装它，因为它是一个包含在项目中的脚本。'
- en: Getting ready
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For now, however, we will not look into all the Gradle commands but instead
    use the most popular ones to clean, build, provide info, debug, and scan our project
    to find any issues when we run our application. You can run the commands in your
    laptop’s terminal as long as you are in the correct directory or use the terminal
    provided by Android Studio.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，目前我们不会查看所有 Gradle 命令，而是使用最流行的命令来清理、构建、提供信息、调试，并在运行应用程序时扫描项目以查找任何问题。只要你在正确的目录中，你就可以在笔记本电脑的终端中运行这些命令，或者使用
    Android Studio 提供的终端。
- en: How to do it…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to check and confirm whether Gradle works as anticipated:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤检查并确认 Gradle 是否按预期工作：
- en: You can check the version by simply running `./gradlew`.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过简单地运行 `./gradlew` 来检查版本。
- en: '![Figure 1.12 – gradlew version](img/B18827_01_12.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – gradlew 版本](img/B18827_01_12.jpg)'
- en: Figure 1.12 – gradlew version
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – gradlew 版本
- en: To build and clean your project, you can run the `./gradlew clean` and `./gradlew
    build` commands. If anything is wrong with your project, the build will fail,
    and you can investigate the error. In addition, in Android, you can always run
    your project without using the Gradle commands, and just utilize the IDE run and
    clean options. We will discuss this topic in depth in [*Chapter 12*](B18827_12.xhtml#_idTextAnchor672),
    *Android Studio Tips and Tricks to Help You* *during Development*.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建和清理你的项目，你可以运行 `./gradlew clean` 和 `./gradlew build` 命令。如果你的项目有任何问题，构建将失败，你可以调查错误。此外，在
    Android 中，你始终可以不使用 Gradle 命令运行你的项目，只需利用 IDE 的运行和清理选项。我们将在 [*第 12 章*](B18827_12.xhtml#_idTextAnchor672)
    中深入讨论这个主题，*Android Studio 开发技巧和窍门帮助你*。
- en: 'The following are a few more useful `gradlew` commands; for example, when your
    build fails and you want to know what went wrong, use the commands to investigate
    or click on the error message (see *Figure 1**.13*):'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些更有用的 `gradlew` 命令；例如，当你的构建失败并且你想知道出了什么问题，使用这些命令进行调查或点击错误消息（见 *图 1*.13*）：
- en: Run with the `--stacktrace` option to get the stack trace
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--stacktrace` 选项运行以获取堆栈跟踪
- en: Run with the `--info` or `--debug` option to get more log output
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--info` 或 `--debug` 选项运行以获取更多日志输出
- en: Run with `--scan` to get full insights
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `--scan` 运行以获取全面洞察
- en: '![Figure 1.13 – Build error output](img/B18827_01_13.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 构建错误输出](img/B18827_01_13.jpg)'
- en: Figure 1.13 – Build error output
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 构建错误输出
- en: How it works
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Gradle is a general-purpose build tool that proves to be very powerful in Android
    development. In addition, you can create and publish your custom plugins to encapsulate
    your conventions and build functionality. Advantages of Gradle include incremental
    build works for test execution, compilation, and any other task that happens in
    your build system.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle 是一种通用构建工具，在 Android 开发中证明非常强大。此外，你可以创建和发布自定义插件来封装你的约定和构建功能。Gradle 的优点包括增量构建工作，适用于测试执行、编译以及构建系统中发生的任何其他任务。
- en: See also
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'More about Gradle and what it does can be found here: [https://gradle.org/](https://gradle.org/).'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Gradle 及其功能的介绍，请参阅：[https://gradle.org/](https://gradle.org/).
- en: Understanding the Android project structure
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Android 项目结构
- en: If this is your first time looking at the Android project folder, you might
    wonder where to add your code and what the packages mean. This recipe will walk
    through what each folder holds and what code goes where.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你第一次查看 Android 项目文件夹，你可能想知道在哪里添加你的代码以及包的含义。这个菜谱将带你了解每个文件夹包含的内容以及代码放在哪里。
- en: Getting ready
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you open your project, you will notice many folders. The main folders in
    your Android project are listed here:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开你的项目，你会注意到许多文件夹。你的 Android 项目中的主要文件夹如下所示：
- en: The `manifest` folder
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest` 文件夹'
- en: The `java` folder (`test`/`androidTest`)
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java` 文件夹 (`test`/`androidTest`)'
- en: The `Res` `Resource` folder
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Res` `资源` 文件夹'
- en: '`Gradle Scripts`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Gradle 脚本`'
- en: How to do it…
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let’s navigate through each folder as we learn what is stored, where, and why:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们边学习边导航每个文件夹，了解存储在哪里，为什么：
- en: In *Figure 1**.14*, you can see the **Packages** dropdown; click on that, and
    a window with **Project**, **Packages**, **Project Files**, and more will pop
    up.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *图 1*.14 中，你可以看到 **包** 下拉菜单；点击它，将弹出一个包含 **项目**、**包**、**项目文件** 等的窗口。
- en: You can opt to view your project using the Android logo, via `Project` highlighted
    section next to the drop-down menu. The Project view is best when you have many
    modules in your application and want to add specific code. Feel free to click
    on the sections and see what they hold.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以选择使用 Android 标志，通过下拉菜单旁边的 `Project` 高亮部分来查看你的项目。当你应用程序中有许多模块并且想要添加特定代码时，项目视图是最好的。请随意点击这些部分，看看它们包含的内容。
- en: '![Figure 1.14 – Android Studio project structure](img/B18827_01_14.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – Android Studio 项目结构](img/B18827_01_14.jpg)'
- en: Figure 1.14 – Android Studio project structure
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – Android Studio 项目结构
- en: The `manifest` folder is the source of truth for the Android application; it
    contains `AndroidManifest.xml`. Click inside the file, and you will notice you
    have an intent launcher that launches the Android application on your emulator.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`manifest` 文件夹是 Android 应用的真相来源；它包含 `AndroidManifest.xml` 文件。点击文件内部，你会注意到你有一个意图启动器，它会在你的模拟器上启动
    Android 应用程序。'
- en: In addition, the version number is typically set in Gradle and then merged into
    `manifest` and in the manifest is where we add all needed permissions. You will
    also notice the package name, metadata, data extraction rules, theme, and icon;
    if you have a unique icon, you can add one here.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，版本号通常在 Gradle 中设置，然后合并到 `manifest` 文件中，在 manifest 文件中我们添加所有需要的权限。你还会注意到包名、元数据、数据提取规则、主题和图标；如果你有一个独特的图标，你可以在这里添加一个。
- en: '![Figure 1.15 – Android Studio project structure manifest file](img/B18827_01_15.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – Android Studio 项目结构 manifest 文件](img/B18827_01_15.jpg)'
- en: Figure 1.15 – Android Studio project structure manifest file
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – Android Studio 项目结构 manifest 文件
- en: Important note
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Making your icon adaptive is the new favored way to add icons to your applications.
    Adaptive icons display differently depending on individual user theming in MAD.
    See [https://developer.android.com/develop/ui/views/launch/icon_design_adaptive](https://developer.android.com/develop/ui/views/launch/icon_design_adaptive).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的图标适应性强是添加图标到应用程序中的新流行方式。自适应图标在 MAD 中根据个别用户的主题显示不同。请参阅 [https://developer.android.com/develop/ui/views/launch/icon_design_adaptive](https://developer.android.com/develop/ui/views/launch/icon_design_adaptive)。
- en: The `java` folder contains all the Kotlin (`.kt`) and Java (`.java`) files we
    create as we build our Android applications. For example, in *Figure 1**.16*,
    we have a package with **(androidTest)** and **(test)**, and this is where we
    add our tests. Go ahead and click on all the folders and see what they contain.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java` 文件夹包含我们在构建 Android 应用程序时创建的所有 Kotlin (`.kt`) 和 Java (`.java`) 文件。例如，在
    *图 1**.16* 中，我们有一个包含 **(androidTest)** 和 **(test)** 的包，这就是我们添加测试的地方。点击所有文件夹，看看它们包含的内容。'
- en: "![Figure 1.16 – Android \uFEFFStudio project structure Java folders](img/B18827_01_16.jpg)"
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – Android Studio 项目结构 Java 文件夹](img/B18827_01_16.jpg)'
- en: Figure 1.16 – Android Studio project structure Java folders
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – Android Studio 项目结构 Java 文件夹
- en: In the `androidTest` folder, we write our UI tests to test the UI functionalities,
    and in the test folder, we write our unit test. Unit testing tests small pieces
    of our code to ensure the required behavior is as anticipated. **Test-Driven Development**
    (**TDD**) is excellent and valuable during app development. Some companies follow
    this rule, but some do not enforce it. However, it is a great skill to have, as
    it is good practice to always test your code.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `androidTest` 文件夹中，我们编写我们的 UI 测试以测试 UI 功能，在测试文件夹中，我们编写我们的单元测试。单元测试测试我们代码的小部分，以确保所需的行为符合预期。**测试驱动开发**
    (**TDD**) 在应用程序开发期间非常出色且有价值。一些公司遵循这个规则，但一些公司并不强制执行。然而，这是一个很好的技能，因为始终测试你的代码是一种良好的实践。
- en: The `res` folder contains XML layouts, UI strings, drawable images, and Mipmap
    icons. On the other hand, the `values` folder contains many useful XML files such
    as `dimensions`, `colors`, and `themes`. Go ahead and click on the `res` folder
    to get familiar with what is there, as we will use it in the next chapter.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`res` 文件夹包含 XML 布局、UI 字符串、可绘制图像和 Mipmap 图标。另一方面，`values` 文件夹包含许多有用的 XML 文件，如
    `dimensions`、`colors` 和 `themes`。点击 `res` 文件夹以熟悉其中的内容，因为我们将在下一章中使用它。'
- en: '![Figure 1.17 – Android Studio project structure res folder](img/B18827_01_17.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – Android Studio 项目结构 res 文件夹](img/B18827_01_17.jpg)'
- en: Figure 1.17 – Android Studio project structure res folder
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – Android Studio 项目结构 res 文件夹
- en: Important note
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Unless you are building a new project from scratch, many applications still
    use XML layouts, and developers opt to develop new screens with Jetpack Compose
    as an advancement now. Therefore, you might have to maintain or know how to write
    views in XML.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你从头开始构建一个新项目，否则许多应用程序仍然使用 XML 布局，开发者现在选择使用 Jetpack Compose 作为一项进步来开发新屏幕。因此，你可能需要维护或了解如何用
    XML 编写视图。
- en: 'Finally, in `Gradle Scripts`, you will see the files that define the build
    configuration we can apply in our modules. For example, in `build.gradle(Project:
    AndroidCommunity)`, you will see a top-level file where you can add configuration
    options common to all your sub-project modules.'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，在 `Gradle Scripts` 中，你会看到定义我们可以应用于我们的模块的构建配置的文件。例如，在 `build.gradle(Project:
    AndroidCommunity)` 中，你会看到一个顶层文件，你可以在这里添加适用于所有子项目模块的配置选项。'
- en: "![Figure 1.18 – Gra\uFEFFdle scripts in the Android Studio project structure](img/B18827_01_18.jpg)"
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: "![图 1.18 – Gra\uFEFFdle scripts in the Android Studio project structure](img/B18827_01_18.jpg)"
- en: Figure 1.18 – Gradle scripts in the Android Studio project structure
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – Android Studio 项目结构中的 Gradle 脚本
- en: How it works…
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In Android Studio, it can be overwhelming for first-time users not to know where
    files go and what is essential. Hence, having a step-by-step guide on where to
    add your tests or code and understanding the Android project structure is vital.
    In addition, in complex projects, you might find different modules; hence, understanding
    the project structure is helpful. A module in Android Studio is a collection of
    source files and build settings that allow you to divide your project into distinct
    entities with specific purposes.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中，对于初学者来说，不知道文件在哪里以及什么是重要的可能会令人不知所措。因此，有一个逐步指南说明在哪里添加你的测试或代码，并理解
    Android 项目结构是至关重要的。此外，在复杂的项目中，你可能会发现不同的模块；因此，理解项目结构是有帮助的。在 Android Studio 中，一个模块是一组源文件和构建设置，它允许你将项目划分为具有特定目的的独立实体。
- en: Debugging and logging in Android Studio
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio 中的调试和日志记录
- en: Debugging and logging are crucial in Android development, and you can write
    log messages that appear in Logcat to help you find issues in your code or verify
    a piece of code executes when it should.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 调试和日志记录在 Android 开发中至关重要，你可以编写在 Logcat 中出现的日志消息，以帮助你找到代码中的问题或验证代码在应该执行时是否执行。
- en: We will introduce this topic here, but it is unfair to say we will cover it
    all in just one recipe; for that reason, we will cover more about debugging and
    logging in [*Chapter 12*](B18827_12.xhtml#_idTextAnchor672), *Android Studio Tips
    and Tricks to Help You* *during Development*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里介绍这个主题，但说我们将在一个菜谱中涵盖所有内容是不公平的；因此，我们将更多地介绍调试和日志记录，在 [*第 12 章*](B18827_12.xhtml#_idTextAnchor672)，*Android
    Studio 开发技巧与窍门* 中。
- en: Getting ready
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let us use an example to understand logging. The following log methods are
    listed from the highest to lowest priority. They are proper when logging network
    errors, success calls, and other errors:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个例子来理解日志记录。以下日志方法按优先级从高到低列出。它们在记录网络错误、成功调用和其他错误时是合适的：
- en: '`Log.e()`: A log error'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log.e()`: 日志错误'
- en: '`Log.w()`: A log warning'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log.w()`: 日志警告'
- en: '`Log.i()`: Log information'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log.i()`: 日志信息'
- en: '`Log.d()`: Debugging shows critical messages to developers, the most used log'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log.d()`: 调试显示对开发者的关键消息，最常用的日志'
- en: '`Log.v()`: Verbose'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Log.v()`: 详细'
- en: A good practice is associating every log with a `TAG` to identify the error
    message in Logcat quickly. A “`TAG"` refers to a text label that can be assigned
    to a View or other UI element in an Android application. The primary purpose of
    using **tags** in Android is to provide a way to associate additional information
    or metadata with a UI element.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的做法是将每个日志与一个 `TAG` 相关联，以便快速识别 Logcat 中的错误消息。一个“`TAG`”是指可以分配给 Android 应用程序中的
    View 或其他 UI 元素的一个文本标签。在 Android 中使用 **标签** 的主要目的是提供一种方法，将附加信息或元数据与 UI 元素关联起来。
- en: How to do it…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Let’s go ahead and add a log message to our small project:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在我们的小型项目中添加日志消息：
- en: 'We will go ahead and create a debug log, then run the application:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个调试日志，然后运行应用程序：
- en: '[PRE76]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: In the `asdf` and see whether you can find the message.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `asdf` 中查看，看你是否能找到消息。
- en: '![Figure 1.19 – Android Logcat](img/B18827_01_19.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – Android Logcat](img/B18827_01_19.jpg)'
- en: Figure 1.19 – Android Logcat
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – Android Logcat
- en: You will notice that the log has a class name, our `TAG` (`MainActivity`), and
    the log message displayed; see the right arrow in *Figure 1**.19*.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到日志中有一个类名，我们的 `TAG` (`MainActivity`)，以及显示的日志消息；请参见 *图 1**.19* 中的右箭头。
- en: The left arrow shows the mentioned log types and using the dropdown, you can
    quickly view your message based on the specification.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左箭头显示了提到的日志类型，通过下拉菜单，你可以快速查看基于特定规格的消息。
- en: How it works…
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '**Debugging** is when you put breakpoints in your classes, slow down your emulator,
    and try to find issues in your code. Debugging is very powerful if, for instance,
    you encounter a race condition in your code or if your code works on some devices
    and does not work on others.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试**是指在类中设置断点、减慢模拟器速度，并尝试找出代码中的问题。如果，例如，你在代码中遇到竞态条件，或者你的代码在某些设备上工作而在其他设备上不工作，调试功能就非常强大。'
- en: In addition, to take advantage of debugging, you need first to attach a debugger
    to the emulator, and then run in **Debug** mode. **Logging**, on the other hand,
    helps you log information that might be helpful to you when you encounter issues.
    Sometimes, debugging can be challenging, but placing logs where needed in your
    code might be very helpful.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了利用调试功能，你首先需要将调试器附加到模拟器上，然后以**调试**模式运行。另一方面，**日志记录**可以帮助你记录在遇到问题时可能对你有帮助的信息。有时，调试可能会很具挑战性，但将日志放置在代码中需要的位置可能会非常有帮助。
- en: A practical case is when you are loading data from an API; you might want to
    log it when there is a network error to inform you what happens if the network
    call fails. Hence, debugging using breakpoints might help slow down the process
    as you evaluate the values, and since we did not build a lot in this chapter,
    we can revisit this topic in a different recipe in later chapters.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实际案例是当你从API加载数据时；你可能希望在出现网络错误时记录它，以通知你如果网络调用失败会发生什么。因此，使用断点进行调试可能会帮助你放慢评估值的过程，由于我们在这个章节中没有构建很多内容，我们可以在后面的章节中通过不同的食谱重新审视这个主题。
- en: See also
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Timber is a logger with a small, extensible API that provides utility on top
    of Android’s standard `Log` class, and many developers use it for logging. For
    more information about Timber, see [https://github.com/JakeWharton/timber](https://github.com/JakeWharton/timber).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Timber是一个具有小型、可扩展API的日志记录器，它提供了在Android标准`Log`类之上的实用功能，许多开发者用它来进行日志记录。有关Timber的更多信息，请参阅[https://github.com/JakeWharton/timber](https://github.com/JakeWharton/timber)。
