["```swift\npublic typealias dataFromURLCompletionClosure = (NSURLResponse!, NSData!) -> Void\n\npublic func sendGetRequest(handler: public func getConnect(\n        handler: dataFromURLCompletionClosure) {\n\n        let sessionConfiguration =\n          NSURLSessionConfiguration.defaultSessionConfiguration();\n\n        let urlString =\n            \"https://itunes.apple.com/search?term=jimmy+buffett\"\n\n        if let encodeString =\n     urlString.stringByAddingPercentEncodingWithAllowedCharacters(\n                NSCharacterSet.URLQueryAllowedCharacterSet()),\n            url = NSURL(string: encodeString) {\n\n            let request = NSMutableURLRequest(URL:url)\n            request.HTTPMethod = \"GET\"\n            let urlSession = NSURLSession(\n                configuration:sessionConfiguration, delegate: nil,\n delegateQueue: nil)\n\n            let sessionTask = \nurlSession.dataTaskWithRequest(request) {\n                (data, response, error) in\n\n                handler(response, data)\n            }\n            sessionTask.resume()\n        }\n    }\n```", "```swift\nvar printResultsClosure: HttpConnect.DataFromURLCompletionClosure = {\n\n  if let data = $1 {\n    let sString = NSString(data: data, encoding: NSUTF8StringEncoding)\n    print(sString)\n  }\n}\n```", "```swift\nlet aConnect = HttpConnect()\naConnect.sendGetRequest(printResultsClosure)\n```", "```swift\nfirstname: Jon\nlastname: Hoffman\nage: 47 years\n```", "```swift\nfirstname=Jon&lastname=Hoffman&age=47\n```", "```swift\nfunc dictionaryToQueryString(dict: [String : String]) -> String {\n  var parts = [String]()\n  for (key, value) in dict {\n    let part: String = key + \"=\" + value\n    parts.append(part);\n  }\n  return parts.joinWithSeparator(\"&\")\n}\n```", "```swift\npublic func sendPostRequest(handler: dataFromURLCompletionClosure) {\n\n        let sessionConfiguration =\n        NSURLSessionConfiguration.defaultSessionConfiguration()\n\n        let urlString = \"http://httpbin.org/post\"\n        if let encodeString =\n            urlString.stringByAddingPercentEncodingWithAllowedCharacters(\n                NSCharacterSet.URLQueryAllowedCharacterSet()),\n            url = NSURL(string: encodeString) {\n\n            let request = NSMutableURLRequest(URL:url)\n            request.HTTPMethod = \"POST\"\n            let params = dictionaryToQueryString([\"One\":\"1 and 1\", \"Two\":\"2 and 2\"])\n            request.HTTPBody = params.dataUsingEncoding(\n                NSUTF8StringEncoding, allowLossyConversion: true)\n\n            let urlSession = NSURLSession(\n                configuration:sessionConfiguration, delegate: nil, delegateQueue: nil)\n\n            let sessionTask = urlSession.dataTaskWithRequest(request) {\n                (data, response, error) in\n\n                handler(response, data)\n            }\n            sessionTask.resume()\n        }\n    }\n```", "```swift\nimport SystemConfiguration\n```", "```swift\npublic enum ConnectionType {\n    case NONETWORK\n    case MOBILE3GNETWORK\n    case WIFINETWORK\n}\n```", "```swift\npublic func networkConnectionType(hostname: NSString) -> ConnectionType {\n\n    let reachabilityRef = SCNetworkReachabilityCreateWithName(nil,hostname.UTF8String)\n\n    var flags: SCNetworkReachabilityFlags = SCNetworkReachabilityFlags()\n        SCNetworkReachabilityGetFlags(reachabilityRef!, &flags)\n\n    let reachable: Bool = (flags.rawValue & SCNetworkReachabilityFlags.Reachable.rawValue) != 0\n    let needsConnection: Bool = (flags.rawValue & SCNetworkReachabilityFlags.ConnectionRequired.rawValue) != 0\n    if reachable && !needsConnection {\n        // what type of connection is available\n        let isCellularConnection = (flags.rawValue & SCNetworkReachabilityFlags.IsWWAN.rawValue) != 0\n        if isCellularConnection {\n            // cellular connection available\n            return ConnectionType.MOBILE3GNETWORK \n        } else {\n            // wifi connection available\n            return ConnectionType.WIFINETWORK \n        }\n    }\n    return ConnectionType.NONETWORK // no connection at all\n}\n```", "```swift\nfunc rsURLRequestExample() {\n  var client = RSURLRequest()\n\n  if let testURL =     NSURL(string:\"https://itunes.apple.com/search?term=jimmy+buffett&m edia=music\") {\n\n      client.dictionaryFromJsonURL(testURL, completionHandler: resultsHandler)   \n  }\n}\n```", "```swift\nvar resultsHandler:RSURLRequestRSURLRequestRSURLRequestRSURLRequest.dictionaryFromURLCompletionClosure = {\n  var response = $0\n  var responseDictionary = $1\n  var error = $2\n  if error == nil {\n    let res = \"results\"\n    if let results = responseDictionary[res] as? NSArray {\n      print(results[0])\n\n    }\n    else {\n      print(\"Problem with data\")\n    }\n  }\n  else {\n    //If there was an error, log it\n    print(\"Error : \\(error)\")\n  }\n}\n```", "```swift\nfunc rsTransactionExample() {\n\n  let rsRequest = RSTransactionRequest()\n\n   //First request\n  let rsTransGet = RSTransaction(transactionType: RSTransactionType.GET, baseURL: \"https://itunes.apple.com\", path: \"search\", parameters: [\"term\":\"jimmy+buffett\", \"media\":\"music\"])\n  rsRequest.dictionaryFromRSTransaction(rsTransGet, completionHandler: resultsHandler)\n\n  //Second request  \n  rsTransGet.parameters = [\"term\":\"jim\", \"media\":\"music\"]\n  rsRequest.dictionaryFromRSTransaction(rsTransGet, completionHandler: resultsHandler)\n}\n```", "```swift\nlet url = \"http://is4.mzstatic.com/image/pf/us/r30/Features/2a/b7/da/dj.kkir mfzh.100x100-75.jpg\"\n if let iView: UIImageView = imageView, image = UIImage(named: \"loading\") {\n   iView.setImageForURL(url, placeHolder: image)\n}\n```"]