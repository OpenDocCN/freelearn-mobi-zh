- en: Chapter 9. Making POIApp Location Aware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most interesting aspects of mobile development is interacting with
    device capabilities such as motion sensors, cameras, and location sensors. Such
    features are contextual for most applications and carry a great deal of value
    to the users. In this chapter, we will walk you through adding location awareness
    to POIApp. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting application permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the current longitude and latitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining the address for a longitude and latitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the distance between two geo points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a POI within the map app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with location services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating the location service in the Android platform is more complicated
    than it looks.
  prefs: []
  type: TYPE_NORMAL
- en: You need to consider different location providers, location accuracy, user movements,
    and most importantly the nominal device battery power consumption. While working
    with location services on the Android platform, you will primarily work with an
    instance of `LocationManager`. The `LocationManager` class provides you with the
    ability to obtain periodic updates of the device geo location or fires an event
    when the device enters the proximity of a given geographical location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android devices generally provide two different means of determining a location:
    **GPS** and **Network**. When requesting location change notifications, you may
    specify the provider you wish to receive updates from. The Android platform defines
    a set of string constants for the following providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Provider name
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: '`GPS_PROVIDER` (GPS)'
  prefs: []
  type: TYPE_NORMAL
- en: This provider determines a location using satellites. Depending on conditions,
    this provider may take a while to return a location fix. This requires the `ACCESS_FINE_LOCATION`
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: '`NETWORK_PROVIDER` (network)'
  prefs: []
  type: TYPE_NORMAL
- en: This provider determines a location based on the availability of a cell tower
    and Wi-Fi access points. Its results are retrieved by means of a network lookup.
    This requires the `ACCESS_COARSE_LOCATION` permission.
  prefs: []
  type: TYPE_NORMAL
- en: '`PASSIVE_PROVIDER` (passive)'
  prefs: []
  type: TYPE_NORMAL
- en: This provider can be used to passively receive location updates when other applications
    or services request them without actually having to request for the locations
    yourself. It requires the `ACCESS_FINE_LOCATION` permission. If the GPS is not
    enabled, this provider might only return coarse fixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of integrating the location service to an Android application includes
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain a reference to an instance of `LocationManager`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the instance of `LocationManager` to request location change notifications,
    either ongoing or a single notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Process the `LocationListener` callback methods. These methods will be fired
    only if the location is requested with the `RequestLocationUpdates(string, long,
    float, ILocationListener)` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessing the location service in Android applications requires specific permissions
    to be added, depending on the provider you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the app permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To access location services in Android, you must provide permissions to the
    application `AndroidManifest.xml` file. Android applications use two permissions
    to access the location API: `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION`.
    The `ACCESS_FINE_LOCATION` includes the permission for both the `GPS_PROVIDER`
    and `NETWORK_PROVIDER` providers. The `ACCESS_COARSE_LOCATION` permission includes
    permission only for `NETWORK_PROVIDER`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the appropriate permissions to your application descriptor, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on `Properties`/`AndroidManifest.xml` in the **Solution** pad.
    The file will be opened in the manifest editor. There are two tabs at the bottom
    of the screen, **Application** and **Source**, which can be used to toggle between
    viewing a form for editing the file or the raw XML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Required permissions** list, check **AccessCoarseLocation**, **AccessFineLocation**,
    and **Internet**. Navigate to **File** | **Save**:![](img/XhBPQB1a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Source** view to view the XML as follows:![](img/r8qghy6E.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use an **emulator** for development, this chapter will require the emulator
    to be configured with Google APIs so that the address lookup and navigation to
    map the app works.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install and configure **Google APIs**, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu, navigate to **Tools** and open **Android SDK Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the platform version you are using, check **Google APIs**, and click
    on **Install 1 package...**, as shown in the following screenshot:![](img/dsor4qaj.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation is complete, close the Android SDK Manager, and from
    the main menu, navigate to **Tools** | Open **Android Emulator Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the emulator you want to configure and click on **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Target**, select the **Google APIs** entry for the API level you want to
    work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtaining an instance of LocationManager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `LocationManager` class is a system service that provides access to the
    location and bearing of a device, if the device supports these services. You do
    not explicitly create an instance of `LocationManager`; instead, you request an
    instance from a `Context` object using the `GetSystemService()` method. In most
    cases, the `Context` object is a subtype of activity. The following code depicts
    declaring a reference of a `LocationManager` class and requesting an instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Requesting location change notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `LocationManager` class provides a series of overloaded methods that can
    be used to request location update notifications. If you simply need a single
    update, you can call `RequestSingleUpdate()`; to receive ongoing updates, call
    `RequestLocationUpdate()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to requesting location updates, you must identify the location provider
    that should be used. In our case, we simply want to use the most accurate provider
    available at the time. This can be accomplished by specifying the criteria for
    the desired provider using an instance of `Android.Location.Criteria`. The following
    code example shows how to specify the minimum criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the criteria, we are ready to request updates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Implementing ILocationListener
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will notice that the second parameter to `RequestSingleUpdate()` must be
    an object that implements `ILocationListener`, which defines the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For the most part, we will create blank stubs for all of the methods except
    `OnLocationChanged()`. While writing more sophisticated applications, it will
    be useful to provide implementations for some of the other methods. For example,
    you might call `RequestLocationUpdate()` to begin receiving updates and then receive
    a notification via `OnProviderEnabled()` that a preferred provider is now available,
    in which case you would want to stop the updates and start them again using the
    preferred provider.
  prefs: []
  type: TYPE_NORMAL
- en: Adding location services to POIApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In `POIApp`, we have the following two different scenarios for requesting location
    updates:'
  prefs: []
  type: TYPE_NORMAL
- en: In the POI list, we need to calculate the distance of each of the listed POIs.
    In this scenario, we want to request location change notifications on an ongoing
    basis and use the most current location to calculate the distance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `POIDetailFragment`, we would like to request the current location when adding
    a new POI. In this scenario, we would want to request a single location change
    notification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding location services to the POI list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have some idea of how to add location services to an app, let''s
    add location services to `POIListFragment` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare a private instance of `LocationManager` and obtain a reference in the
    `OnCreateView()` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the `Android.Locations` namespace in `POIListFragment` and implement
    the `ILocationListener` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the code editor right-click on `ILocationListenerinterface`, select **Refactor**
    | **Implement interface** to implement the stub methods. Remove any code placed
    by default in the stub methods; we will provide logic for `OnLocationChange()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `OnResume()`, obtain the best location provider and call `RequestLocationUpdates()`
    to start receiving updates as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `OnPause()` method on the `POIListFragment` class and add a call
    to `RemoveUpdates()`. This eliminates unnecessary processing of location changes
    when the `POIListFragment` class is not visible, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `CurrentLocation` property to `POIListViewAdapter`. The `POIListFragment`
    class will use this property to communicate location changes to the adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a logic to `OnLocationChanged()` to set `CurrentLocation` on `POIListViewAdapter`
    when a location change is received and call `NotifyDataSetChange()` to cause the
    `ListView` to be refreshed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a logic to the `GetView()` method on `POIListViewAdapter` to calculate
    the distance between the `CurrentLocation` and a POI''s location properties and
    update `distanceTextView` with the results. The calculation should only be done
    if `CurrentLocation` is not `null`, and the `Latitude` and `Longitude` properties
    for the POI being added to the `ListView` are not null. If any of these values
    are `null`, simply place `??` in the distance field to indicate that it cannot
    be calculated at this time as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, run `POIApp` and view the results in `POIListView`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding location services to POI details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps for adding location services to `POIDetailFragment` will be very similar
    to the previous section, but will be slightly simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prior to adding the logic, we need to add a few buttons to our app; one to
    get our location and one to navigate to the map, which we will cover later in
    this chapter. We can add these as a row of buttons at the bottom of `POIDetailFragment.axml`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/vIgVMhdy.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Using `ImageButton` allows a `drawable` class to be specified. To add the `ImageButton`
    widgets, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `LinearLayout` instance to the bottom of `POIDetailFragment.axml` just
    below the `TableLayout` used to arrange the latitude and longitude content. The
    orientation should be `horizontal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `LinearLayout` instance, the orientation should be `horizontal`, the
    content should be wrapped (both height and width), and it should be centered horizontally
    in the parent. The layout gravity can be used to center the content horizontally
    within its parent. The top and bottom padding of `10dp` will provide a good spacing
    for the buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the two `ImageButton` widgets: `locationImageButton` and `mapImageButton`,
    in the `LinearLayout` instance. Images for these buttons can be found in the `drawable`
    folder in the `assets` location.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following XML code shows the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding the code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have buttons on the UI, we can add the code to obtain the location
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare a private instance of `LocationManager` and obtain a reference in `OnCreate()`
    in the same way we did for `POIListView` in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `GetLocationClicked` event handler and hook it up to the `ImageButton`
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a call to `RequestSingleUpdate()` in `GetLocationClicked()`. The `RequestSingleUpdate()`
    method allows a `Criteria` object to be passed in so that we do not need a separate
    call to `GetBestProvider()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Specify that `POIDetailFragment` implements `Android.Locations`. The `ILocationListener`
    implements stub methods using the Refactor | Implement interface. Remove any code
    placed in the stub methods; we will provide a logic for `OnLocationChange()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a logic to `OnLocationChange()` to update the location fields as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Mocking location data for testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run `POIApp` and try adding a new POI and getting the location. While running
    the app in the emulator, you will notice that apparently nothing happens when
    you click on the location button. The app is actually waiting for a callback to
    `OnLocationChanged()` from the location manager. To trigger this callback, you
    must use the **Android Device Monitor** (**ADM**) to mock the location data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To trigger `OnLocationChanged()`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start ADM and select the emulator instance on the left-hand side of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Emulator Control** tab on the right-hand side of the screen.
    If the **Emulator Control** tab is not present, navigate to **Window** | **Show
    View** to display the tab. Notice that, at the bottom of the panel, there is a
    nested tab titled **Location Controls**, as shown in the following screenshot:![](img/LFvh8keh.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Manual** tab, adjust **Longitude** and **Latitude**, if desired,
    and click on **Send**. This will cause the `OnLocationChanged()` method to be
    fired on `POIDetailFragment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the other two tabs under **Location Controls**: **GPX** and **KML**. These
    tabs can be used to load a series of location updates from a file and play them
    back to your app to test more sophisticated scenarios.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting an address for a location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful feature provided by the Android platform is called **Geocoding**.
    This is the process of obtaining the location in terms of latitude and longitude
    from a known address. Android also supports reverse geocoding, which is what you
    would expect from the name, obtaining an address from a known location.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Android.Locations.Geocoder` class is the class used to perform geocoding
    and reverse geocoding. It''s a very straightforward process to use, as shown in
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an instance of `Android.Locations.Geocoder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `GetFromLocation()` by passing in the location you would like to find the
    address for.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Process the `IList&lt;Address&gt;` collection returned. The collection of addresses
    returned from `GetFromLocation()` vary in specifics, which means that some are
    specific street addresses, some specify a city, country, and so on. The first
    address is always the most specific, so we will automatically choose it using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that the number `5` parameter in the `GetFromLocation()` method call
    represents the maximum number of results that are known to describe the area,
    surrounding the latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that we chose to call a method to format the address information.
    The `FeatureName` property may contain a title such as *Golden Gate Bridge* or
    *Empire State Building*. More times than not, `FeatureName` will simply contain
    the street number. The address contains a list of address lines, which we combine
    and place in `_addrEditText` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, run `POIApp` and try adding a new POI and getting the address for a location.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the user informed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After using the get location button, you will notice that requests for location
    information take some amount of time to process; generally, a few seconds or more.
    It would be best to keep users informed that processing is taking place so that
    they don't continually click on the button.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved in two ways. You can either attach a `ProgressBar` directly
    to the details fragment layout as we did for `POIListFragment`, or we can use
    a `ProgressDialog` class. The `ProgressDialog` class provides a simple means of
    displaying a dialog with a spinning progress widget and text description of what
    process is taking place. Ever since the `DialogFragment` class is added to Android,
    Google recommends that you use the `DialogFragment` class instead of `ProgressDialog`.
    Here, in this example, we will create a `DialogFragment` class that displays the
    loading progress that is similar to the `DeleteDialogFragment` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will guide you to add a dialog fragment to display the
    loading progress:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's add a new fragment named `ProgressDialogFragment` and extend it from the
    `DialogFragment` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the `OnCreateDialog()` method and add the following code blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are not ready with the `ProgressDialogFragment` fragment. Let''s add the
    following code snippets to the `GetLocationClicked()` method to display the loading
    progress when a user clicks on the location button from `POIDetailFragment`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to remove the loading progress dialog once the location is retrieved
    from the location manager. Add the following code snippets to the `OnLocationChanged()`
    callback to remove the progress dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run `POIApp` and check the new progress dialog, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/P6XvjrOb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding map integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps are another truly cool part of mobile computing. They provide a means of
    navigation, finding points of interest in an area, as well as supporting many
    other useful scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two basic approaches to interfacing with maps from an app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the existing Android map app installed on the device to display
    a point of interest. Most recent Android devices are preinstalled with the Google
    Map application. However, it is not guaranteed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate with the Google Maps API. This approach integrates the map view directly
    to your application using Google Play services. You must create an application
    in the Google Developer Console and obtain a copy of the API key for your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first option is much easier to implement, whereas the second option allows
    tighter integration and control of the maps at the cost of more code and complexity.
    The second option requires very specific versions of the Xamarin.Android binding
    libraries corresponding to Google Play libraries. We chose to go with the first
    option for the `POIApp` example for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It is very difficult to get the second option working inside an emulator, which
    means that you would have to test and view the results of the code on an actual
    device, which may not be an option for all readers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would need to dedicate more time than we have available in this chapter to
    get the second option up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin's official website contains articles with all the details required to
    get the second option working.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating to the Map app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To navigate to the Map app, we will rely on the `Intent` class we used earlier
    in the book; however, rather than specifying the `Activity` class we want to start,
    we will specify the type of information we would like to view using a URI. Android
    contains a registry of apps that can display different types of information and
    will launch the most appropriate app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android platform defines a set of `Intent` classes that can be used to
    launch Google apps on Android devices. The following table summarizes the `Intent`
    classes related to locations:'
  prefs: []
  type: TYPE_NORMAL
- en: URI
  prefs: []
  type: TYPE_NORMAL
- en: Action
  prefs: []
  type: TYPE_NORMAL
- en: '`geo:latitude,longitude`'
  prefs: []
  type: TYPE_NORMAL
- en: This action opens the Map application centered at a latitude or longitude
  prefs: []
  type: TYPE_NORMAL
- en: '`geo:latitude,longitude?z=zoom`'
  prefs: []
  type: TYPE_NORMAL
- en: This action opens the Map application centered at a latitude or longitude and
    zoomed to the specified level
  prefs: []
  type: TYPE_NORMAL
- en: '`geo:0,0?q=my+street+address`'
  prefs: []
  type: TYPE_NORMAL
- en: This action opens the Map application to the location of a street address
  prefs: []
  type: TYPE_NORMAL
- en: '`geo:0,0?q=business+near+city`'
  prefs: []
  type: TYPE_NORMAL
- en: This action opens the Map application and displays the annotated search results
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we have a street address, latitude and longitude, or both. If
    the street address is present, we should build the `Intent` class with it because
    this will cause the street address to appear in the Map app, making it more user
    friendly. If the street address is not present, we will build the `Intent` class
    using latitude and longitude. The following code shows the logic for building
    the `Intent` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Prior to launching the `Intent` class, we need to be sure there is an app that
    can handle the `Intent` class; otherwise, we might end up with an unhandled exception
    from `StartActivity()`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for registered map apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apps provide information about any capabilities they provide (the `Intent`
    classes) in their manifest files as an `&lt;intent-filter/&gt;` element. Since
    we are relying on an external map app to display our location for us, we should
    check whether such an app exists on the device we are running on. We can accomplish
    this with a few calls to the `PackageManager` class. The `PackageManager` class
    allows you to retrieve various types of information about the application packages
    installed on a device. The `QueryIntentActivities()` method allows you to check
    whether there are any apps available to handle a specific `Intent` class. The
    following code demonstrates the use of `QueryIntentActivities()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `MapClicked()` event handler and attach it to the `_mapImageButton`.
    The following code snippet represents the complete `MapClicked()` code that is
    used to open a Map application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Run `POIApp` and click on the **Map** button from the POI details page. You
    will notice that the Map app will be opened with the POI location. You have the
    option of choosing to navigate to it from your current location.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to use device location services to find the current
    position. We also integrated `POIApp` with the native device map to position the
    POI on the map. In the next chapter, we will continue integrating with device
    capabilities by adding integration with the camera.
  prefs: []
  type: TYPE_NORMAL
