["```swift\nimport SwiftUI\nstruct ContentView: View {\n    @State private var petal = false\n    @State private var breatheInLabel = true\n    @State private var breatheOutLabel = false\n    @State private var offsetBreath = false\n    @State private var diffuseBreath = false\n    @State private var breatheTheBouquet = false\n```", "```swift\nvar body: some View {\n    ZStack {\n        //MARK: - ADD A WINTER BACKGROUND - AND THE SNOW\n        Image(\"winterNight\").resizable()\n          .aspectRatio(contentMode: .fill)\n                            .frame(width: 400, height: 900)\n       }\n      }\n```", "```swift\n//MARK: - ANIMATE TEXT LABELS SO THEY GROW AND SHRINK\n  //a ZStack so we can offset the entire scene vertically\n  ZStack {\n     Group {\n        Text(\"Breathe In\")\n             .font(Font.custom(\"papyrus\", size: 35))\n             .foregroundColor(Color(UIColor.green))\n             .opacity(breatheInLabel ? 0 : 1)\n             .scaleEffect(breatheInLabel ? 0 : 1)\n             .offset(y: -160)\n             .animation(Animation.easeInOut(duration: \n               2).delay(2).repeatForever(autoreverses: \n               true), value: breatheInLabel)\n                 Text(\"Breathe Out\")\n             .font(Font.custom(\"papyrus\", size: 35))\n             .foregroundColor(Color(UIColor.orange))\n             .opacity(breatheOutLabel ? 0 : 1)\n             .scaleEffect(breatheOutLabel ? 0 : 1)\n             .offset(y: -160)\n             .animation(Animation.easeInOut(duration: \n               2).delay(2).repeatForever(autoreverses: \n               true),value: breatheOutLabel)\n            }\n         }\n```", "```swift\n   .onAppear {\n                breatheInLabel.toggle()\n                breatheOutLabel.toggle()\n            }\n```", "```swift\n//MARK: - TAKE AN IMAGE AND CONVERT IT TO VAPOR (BREATH)\n  USING THE BLUR MODIFIER\n      Group {\n          Image(\"breath\").resizable().frame(width: 35,\n            height: 125)\n              .offset(y: offsetBreath ? 90 : 0)\n              .animation(Animation.easeInOut(duration:\n                2).delay(2).repeatForever(autoreverses:\n                true),value: offsetBreath)\n              .blur(radius: diffuseBreath ? 1 : 60)\n              .offset(x: 0, y: diffuseBreath ? -50 : -100)\n              .animation(Animation.easeInOut(duration:\n                2).delay(2).repeatForever(autoreverses:\n                true), value: showBreath)\n      }.shadow(radius: showBreath ? 20 : 0)\n\n```", "```swift\n   .onAppear {\n                breatheInLabel.toggle()\n                breatheOutLabel.toggle()\n                offsetBreath.toggle()\n                diffuseBreath.toggle()\n            }\n```", "```swift\n .zIndex(1)\n```", "```swift\n    @Binding var petal: Bool\n    var degrees: Double = 0.0\n```", "```swift\nstruct PetalView: View {\n  var body: some View {\n      Image(\"petal\").resizable().frame(width: 75, height:\n        125)\n          .rotationEffect(.degrees(petal ? degrees :\n            degrees), anchor: .bottom)\n          .animation(Animation.easeInOut(duration: \n            2).delay(2).repeatForever(autoreverses: true),\n            value: petal)\n  }\n}\n```", "```swift\nstruct PetalView_Previews: PreviewProvider {\n    static var previews: some View {\n        PetalView(petal: .constant(true))\n    }\n}\n```", "```swift\n//MARK: - ANIMATE FLOWER PETALS IN AN ARC\n    Group {\n        PetalView(petal: $petal, degrees: petal ? -25 : -5)\n        ///middle petal does not move\n        Image(\"petal\").resizable().frame(width: 75, height:\n          125)\n        PetalView(petal: $petal, degrees: petal ? 25 : 5)\n        PetalView(petal: $petal, degrees: petal ? -50 :\n          -10)\n        PetalView(petal: $petal, degrees: petal ? 50 : 10)\n    }\n```", "```swift\n.onAppear {\n            petal.toggle()\n            breatheInLabel.toggle()\n            breatheOutLabel.toggle()\n            offsetBreath.toggle()\n            diffuseBreath.toggle()\n        }\n```", "```swift\n //MARK: - ADD A BOUQUET OF FLOWERS AND MAKE THEM EXPAND \n   AND CONTRACT SO THEY APPEAR TO BE BREATHING \n    Group {\n      Image(\"bouquet\").resizable()\n      .aspectRatio(contentMode: .fit)\n            .frame(width: 300, height: 400)\n            .rotationEffect(.degrees(37))\n            .offset(x: -25, y: 90)\n        ///breathe the bottom bouquet 1\n            .scaleEffect(breathTheBouquet ? 1.04 : 1,\n              anchor: .center)\n            .hueRotation(Angle(degrees: breatheTheBouquet ?\n              50 : 360))\n            .animation(Animation.easeInOut(duration: \n              2).delay(2).repeatForever(autoreverses: \n              true), value: breatheTheBouquet)\n\n      Image(\"bouquet\").resizable()\n        .aspectRatio(contentMode: .fit)\n            .frame(width: 300, height: 400)\n            .rotationEffect(.degrees(32))\n            .offset(x: -20, y: 95)\n            .rotation3DEffect(.degrees(180), axis: (x: 0, \n              y: 1, z: 0))\n        ///breathe the bottom bouquet 2\n            .scaleEffect(breatheTheBouquet ? 1.02 : 1, \n              anchor: .center)\n            .hueRotation(Angle(degrees: breatheTheBouquet ? \n              -50 : 300))\n            .animation(Animation.easeInOut(duration: \n              2).delay(2).repeatForever(autoreverses: \n              true), value: breatheTheBouquet)\n    }\n```", "```swift\n}.onAppear {\n            breatheInLabel.toggle()\n            breatheOutLabel.toggle()\n            offsetBreath.toggle()\n            diffuseBreath.toggle()\n            petal.toggle()\n            breatheTheBouquet.toggle()\n        }\n```", "```swift\n//MARK: - CREATE SNOW FALLING ON THE SCENE\nstruct SnowView: UIViewRepresentable { \n         }\n```", "```swift\nfunc makeUIView(context: Context) -> some UIView {\n    }\n```", "```swift\nfunc updateUIView(_ uiView: UIViewType, context: Context) {\n    }\n```", "```swift\n    func makeUIView(context: Context) -> some UIView {\n    //configure the screen\n            let screen = UIScreen.main.bounds\n            let view = UIView(frame: CGRect(x: 0, y: 0, \n              width: screen.width, height: screen.height))\n            view.layer.masksToBounds = true\n        }\n```", "```swift\nfunc makeUIView(context: Context) -> some UIView {\n    //configure the screen\n            let screen = UIScreen.main.bounds\n            let view = UIView(frame: CGRect(x: 0, y: 0, \n              width: screen.width, height: screen.height))\n            view.layer.masksToBounds = true\n\n    return view\n  }\n```", "```swift\n   //configure the emitter\n    let emitter = CAEmitterLayer()\n    emitter.frame = CGRect(x: 200, y: -100, width: \n      view.frame.width, height: view.frame.height)\n```", "```swift\n        //configure the cell\n        let cell = CAEmitterCell()\n        cell.birthRate = 40\n        cell.lifetime = 25\n        cell.velocity = 60\n        cell.scale = 0.025\n        cell.emissionRange = CGFloat.pi\n        cell.contents = UIImage(named: \"snow\")?.cgImage\n        emitter.emitterCells = [cell]\n        view.layer.addSublayer(emitter)\n```", "```swift\nstruct SnowView_Previews: PreviewProvider {\n    static var previews: some View {\n        SnowView()\n            .background(Color.black)\n    }\n}\n```", "```swift\n//MARK: - ADD A WINTER BACKGROUND - AND THE SNOW\n  Image(\"winterNight\").resizable().aspectRatio(contentMode: \n    .fill).frame(width: 400, height: 900)\n  SnowView()\n```"]