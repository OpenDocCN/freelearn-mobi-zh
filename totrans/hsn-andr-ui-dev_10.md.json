["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout >\n  <data>\n    <variable\n        name=\"presenter\"\n        type=\"com.packtpub.claim.ui.presenters.ItemPresenter\" />\n\n    <variable\n        name=\"item\"\n        type=\"com.packtpub.claim.model.ClaimItem\" />\n  </data>\n\n  <LinearLayout\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:orientation=\"vertical\">\n\n    <TextView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"@dimen/grid_spacer1\"\n        android:layout_marginBottom=\"@dimen/grid_spacer1\"\n        android:text=\"@{presenter.dividerLabel(item)}\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Caption\" />\n\n    <include\n        item=\"@{item}\"\n        layout=\"@layout/card_claim_item\"\n        presenter=\"@{presenter}\" />\n  </LinearLayout>\n</layout>\n```", "```kt\npublic class DisplayItem {\n  public final int layout;\n```", "```kt\npublic final Object value;\n```", "```kt\npublic DisplayItem(\n    final int layout,\n    final Object value) {\n\n  this.layout = layout;\n  this.value = value;\n}\n```", "```kt\npublic <I> void bindItem(final DataBoundViewHolder<?, I> holder) {\n  @SuppressWarnings(\"unchecked\") final I item = (I) value;\n  holder.setItem(item);\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape \n    android:shape=\"line\">\n\n    <stroke\n        android:width=\"1dp\"\n        android:color=\"#e0e0e0\" />\n</shape>\n```", "```kt\n<layout >\n    <data></data>\n\n    <ImageView\n android:layout_width=\"match_parent\"\n android:layout_height=\"@dimen/grid_spacer1\"\n android:layout_marginTop=\"@dimen/grid_spacer1\"\n android:src=\"img/horizontal_divider\" />\n</layout>\n```", "```kt\nprivate List<DisplayItem> items = Collections.emptyList();\n```", "```kt\n@Override\npublic int getItemViewType(final int position) {\n    return items.get(position).layout;\n}\n```", "```kt\n@Override\npublic DataBoundViewHolder<ItemPresenter, ClaimItem>\n    onCreateViewHolder(\n      final ViewGroup parent,\n      final int viewType) {\n\n  return new DataBoundViewHolder<>(\n      DataBindingUtil.inflate(\n          layoutInflater,\n          viewType,\n          parent,\n          false\n      ),\n      itemPresenter\n  );\n}\n```", "```kt\n@Override\npublic void onBindViewHolder(\n    final DataBoundViewHolder<ItemPresenter, ClaimItem> holder,\n    final int position) {\n\n  items.get(position).bindItem(holder);\n}\n```", "```kt\nprivate class CreateDisplayListCommand\n        extends ActionCommand<List<ClaimItem>, List<DisplayItem>> {\n```", "```kt\nboolean isDividerRequired(\n    final ClaimItem item1, final ClaimItem item2) {\n  final Calendar c1 = Calendar.getInstance();\n  final Calendar c2 = Calendar.getInstance();\n\n  c1.setTime(item1.getTimestamp());\n  c2.setTime(item2.getTimestamp());\n\n  return c1.get(Calendar.DAY_OF_YEAR)\n             != c2.get(Calendar.DAY_OF_YEAR)\n         || c1.get(Calendar.YEAR)\n             != c2.get(Calendar.YEAR);\n}\n```", "```kt\n@Override\npublic List<DisplayItem> onBackground(\n    final List<ClaimItem> claimItems)\n    throws Exception {\n\n  final List<DisplayItem> output = new ArrayList<>();\n\n  for (int i = 0; i < claimItems.size(); i++) {\n    final ClaimItem item = claimItems.get(i);\n    output.add(new DisplayItem(R.layout.card_claim_item, item));\n\n    if (i + 1 < claimItems.size() // not the last item\n        && isDividerRequired(item, claimItems.get(i + 1))) {\n\n      output.add(new DisplayItem(R.layout.widget_divider, null));\n    }\n  }\n\n  return output;\n}\n```", "```kt\n@Override\npublic void onForeground(final List<DisplayItem> value) {\n  ClaimItemAdapter.this.items = value;\n  notifyDataSetChanged();\n}\n```", "```kt\nprivate final CreateDisplayListCommand createDisplayListCommand\n = new CreateDisplayListCommand();\nprivate final LayoutInflater layoutInflater;\nprivate final ItemPresenter itemPresenter;\nprivate List<DisplayItem> items = Collections.emptyList();\n```", "```kt\npublic ClaimItemAdapter(\n        final Context context,\n        final LifecycleOwner owner,\n        final LiveData<List<ClaimItem>> liveItems) {\n\n  this.layoutInflater = LayoutInflater.from(context);\n  this.itemPresenter = new ItemPresenter(context);\n\n  liveItems.observe(owner, new Observer<List<ClaimItem>>() {\n    @Override\n    public void onChanged(final List<ClaimItem> claimItems) {\n createDisplayListCommand.exec(claimItems);\n }\n  });\n}\n```", "```kt\nprivate class UpdateDisplayListCommand\n        extends ActionCommand<\n            Pair<List<DisplayItem>, List<ClaimItem>>,\n            Pair<List<DisplayItem>, DiffUtil.DiffResult>\n        > {\n```", "```kt\n@Override\npublic Pair<List<DisplayItem>, DiffUtil.DiffResult> onBackground(\n        final Pair<List<DisplayItem>, List<ClaimItem>> args)\n        throws Exception {\n\n    final List<DisplayItem> oldDisplay = args.first;\n    final List<DisplayItem> newDisplay =\n            createDisplayListCommand.onBackground(args.second);\n```", "```kt\nfinal DiffUtil.DiffResult result =\n      DiffUtil.calculateDiff(new DiffUtil.Callback() {\n  @Override\n  public int getOldListSize() {\n    return oldDisplay.size();\n  }\n\n  @Override\n  public int getNewListSize() {\n    return newDisplay.size();\n  }\n```", "```kt\n@Override\npublic boolean areItemsTheSame(\n    final int oldItemPosition,\n    final int newItemPosition) {\n  final DisplayItem oldItem = oldDisplay.get(oldItemPosition);\n  final DisplayItem newItem = newDisplay.get(newItemPosition);\n\n  if (oldItem.layout != newItem.layout) {\n    return false;\n  }\n\n  switch (newItem.layout) {\n    case R.layout.card_claim_item:\n      final ClaimItem oldClaimItem = (ClaimItem) oldItem.value;\n      final ClaimItem newClaimItem = (ClaimItem) newItem.value;\n      return oldClaimItem != null\n          && newClaimItem != null\n          && oldClaimItem.id == newClaimItem.id;\n    case R.layout.widget_divider:\n      return true;\n  }\n\n  return false;\n}\n```", "```kt\n@Override\npublic boolean areContentsTheSame(\n    final int oldItemPosition,\n    final int newItemPosition) {\n  final DisplayItem oldItem = oldDisplay.get(oldItemPosition);\n  final DisplayItem newItem = newDisplay.get(newItemPosition);\n\n  switch (newItem.layout){\n    case R.layout.card_claim_item:\n      final ClaimItem oldClaimItem = (ClaimItem) oldItem.value;\n      final ClaimItem newClaimItem = (ClaimItem) newItem.value;\n      return oldClaimItem != null\n          && newClaimItem != null\n          && oldClaimItem.equals(newClaimItem);\n    case R.layout.widget_divider:\n      return true;\n  }\n\n  return false;\n}\n```", "```kt\n  }); // end of the DiffUtil.Callback implementation\n\n  return Pair.create(newDisplay, result);\n} // end of the onBackground implementation\n```", "```kt\n@Override\npublic void onForeground(\n    final Pair<List<DisplayItem>,\n    DiffUtil.DiffResult> value) {\n  ClaimItemAdapter.this.items = value.first;\n  value.second.dispatchUpdatesTo(ClaimItemAdapter.this);\n}\n```", "```kt\npublic class ClaimItemAdapter extends\n        RecyclerView.Adapter<DataBoundViewHolder<ItemPresenter, ClaimItem>> { private final UpdateDisplayListCommand updateCommand\n = new UpdateDisplayListCommand();\n  private final CreateDisplayListCommand createDisplayListCommand\n        = new CreateDisplayListCommand();\n  private final LayoutInflater layoutInflater;\n  private final ItemPresenter itemPresenter;\n```", "```kt\npublic ClaimItemAdapter(\n        final Context context,\n        final LifecycleOwner owner,\n        final LiveData<List<ClaimItem>> liveItems) {\n\n  this.layoutInflater = LayoutInflater.from(context);\n  this.itemPresenter = new ItemPresenter(context);\n\n  liveItems.observe(owner, new Observer<List<ClaimItem>>() {\n    @Override\n    public void onChanged(final List<ClaimItem> claimItems) {\n      if (!items.isEmpty()) {\n updateCommand.exec(Pair.create(items, claimItems));\n } else {\n createDisplayListCommand.exec(claimItems);\n }\n    }\n  });\n}\n```"]