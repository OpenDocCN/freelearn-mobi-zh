["```kt\nclass RegistrationScreen : Activity() {\n    private val submitButton: Button by lazy { findViewById(R.id.submit_button) }  \n\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        // hook function called once the screen is displayed\n    }\n}\n```", "```kt\npublic interface OnClickListener {\n    void onClick(View view);\n}\n```", "```kt\nval myInterfaceInstance = object: MyInterface {\n    override fun foo() {\n        // foo function body\n    }\n}\n```", "```kt\nval myInterfaceAsFunction: () -> Unit = { \n    // foo function body\n}\n```", "```kt\nclass RegistrationScreen : Activity() {\n    private val submitButton: Button by lazy { findViewById(R.id.submit_button) }  \n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        submitButton.setOnClickListener { view: View ->\n            // do something on click\n        }\n    }\n}\n```", "```kt\nclass RegistrationScreen : Activity() {\n    private val submitButton: Button by lazy { findViewById(R.id.submit_button) }  \n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        submitButton.setOnClickListener {\n            submitButton.visibility = View.INVISIBLE\n        }\n    }\n}\n```", "```kt\nval myFunction: (View) -> Unit = { view ->\n   view.visibility = View.INVISIBLE\n}\n```", "```kt\nval myFunction: (View) -> Unit = { \n   it.visibility = View.INVISIBLE\n}\n```", "```kt\nval callback: () -> Unit = { println(\"The job is done!\") }\ncallback.invoke()\ncallback()\n```", "```kt\n\"The job is done!\"\n\"The job is done!\"\n```", "```kt\nfun hideView(view: View): Unit  {\n    view.visibility = View.INVISIBLE\n}\n\nsubmitButton.setOnClickListener(::hideView)\n```", "```kt\nfun getPlayers(): List<Player>? \n```", "```kt\ndata class Player(val name: String, val bestScore: Int)\n```", "```kt\npublic inline fun <T, R> T.let(block: (T) -> R): R\n\npublic inline fun <T> T.also(block: (T) -> Unit): T\n\npublic inline fun <T> T.apply(block: T.() -> Unit): T \n```", "```kt\ngetPlayers()?.let {}\n```", "```kt\ngetPlayers()?.let {\n it.also {\n        println(\"${it.size} players records fetched\")\n println(it)\n }\n}\n```", "```kt\ngetPlayers()?.let {\n    it.also {\n        println(\"${it.size} players records fetched\")\n        println(it)\n    }.let {\n        it.sortedByDescending { it.bestScore }\n    }\n```", "```kt\ngetPlayers()?.let {\n    it.also {\n        println(\"${it.size} players records fetched\")\n        println(it)\n    }.let {\n        it.sortedByDescending { it.bestScore }\n    }.let {\n        it.first()\n }\n```", "```kt\ngetPlayers()?.let {\n    it.also {\n        println(\"${it.size} players records fetched\")\n        println(it)\n    }.let {\n        it.sortedByDescending { it.bestScore }\n    }.let {\n        it.first()\n    }.apply {\n        val name = this.name\n        print(\"Best Player: $name\")\n    }\n}\n```", "```kt\n\nfun getPlayers(): List<Player>? = listOf(\n        Player(\"Stefan Madej\", 109),\n        Player(\"Adam Ondra\", 323),\n        Player(\"Chris Charma\", 239))\n```", "```kt\n3 players records fetched\n[Player(name=Stefan Madej, bestScore=109), Player(name=Adam Ondra, bestScore=323), Player(name=Chris Charma, bestScore=239)]\nBest Player: Adam Ondra\n```", "```kt\napply {\n    print(\"Best Player: $name\")\n}\n```", "```kt\nvar result: List<Player>? = getPlayers()\nresult?.let { players: List<Player> ->\n    ...\n}\n```", "```kt\npublic inline fun <T, R> T.run(block: T.() -> R): R\n```", "```kt\nval calendar = Calendar.Builder().run {\n    build()\n}\n```", "```kt\nval calendar = Calendar.Builder().run {\n    setCalendarType(\"iso8601\")\n setDate(2018, 1, 18)\n setTimeZone(TimeZone.getTimeZone(\"GMT-8:00\"))\n    build()\n}\n```", "```kt\nval calendar = Calendar.Builder().run {\n    setCalendarType(\"iso8601\")\n    setDate(2018, 1, 18)\n    setTimeZone(TimeZone.getTimeZone(\"GMT-8:00\"))\n    build()\n}\nprint(calendar.time)\n```", "```kt\nwebview.settings?.run {\n    this.javaScriptEnabled = true\n    this.domStorageEnabled = false\n}\n```", "```kt\nfun measureTime(block: () -> Unit): Long {\n    val start = System.currentTimeMillis()\n    block()\n    val end = System.currentTimeMillis()\n\n    return end - start\n}\n```", "```kt\nfun factorial(n: Int): Long {\n    sleep(10)\n    return if (n == 1) n.toLong() else n * factorial(n - 1)\n}\n```", "```kt\nval duration = measureTime {\n    factorial(13)\n}\nprint(\"$duration ms\")\n```", "```kt\n154 ms\n```", "```kt\nfun foo() = sleep(1000)\nval duration = measureTime(::foo)\nprint(\"$duration ms\")\n```", "```kt\nfun foo(a: A, b: B, c: C): D \n```", "```kt\nfun carriedFoo(a: A): (B) -> (C) -> D \n```", "```kt\nfun <P1, P2, P3, R> ((P1, P2, P3) -> R).curried(): (P1) -> (P2) -> (P3) -> R \n```", "```kt\nfun <P1, P2, P3, R> ((P1, P2, P3) -> R).curried(): (P1) -> (P2) -> (P3) -> R =\n        { p1: P1 ->\n            { p2: P2 ->\n                { p3: P3 ->\n                    this(p1, p2, p3)\n }\n             }\n        }\n```", "```kt\nfun sum(a: Int, b: Int, c: Int): Int = a + b + c\n```", "```kt\n::sum.curried()\n```", "```kt\nval result: Int = ::sum.curried()(1)(2)(3)\n```", "```kt\nval sum3: (a: Int) -> (b: Int) -> (c: Int) -> Int = ::sum.curried()\nval sum2: (b: Int) -> (c: Int) -> Int = sum3(1)\nval sum1: (c: Int) -> Int = sum2(2)\nval result: Int = sum1(3)\n```", "```kt\nfun foo(a: A, b: B, c: C): D \n```", "```kt\nfun foo(a: A, c: C) -> (B) -> D\n```", "```kt\nfun length(word: String) = word.length\nfun isEven(x:Int): Boolean = x.rem(2) == 0\n```", "```kt\nfun isCharCountEven(word: String): Boolean = isEven(length(word))\n```", "```kt\nval isCharCountEven: (word: String) -> Boolean = ::length and ::isEven\n```", "```kt\ninfix fun <P1, R, R2> ((P1) -> R).and(function: (R) -> R2): (P1) -> R2 = {\n\n}\n```", "```kt\ninfix fun <P1, R, R2> ((P1) -> R).and(function: (R) -> R2): (P1) -> R2 = {\n    function(this(it))\n}\n```", "```kt\nfun length(word: String) = word.length\nfun isEven(x:Int): Boolean = x.rem(2) == 0\nval isCharCountEven: (word: String) -> Boolean = ::length and ::isEven\nprint(isCharCountEven(\"pneumonoultramicroscopicsilicovolcanoconiosis\"))\n```", "```kt\nfalse\n```", "```kt\nsealed class Either<out E, out V>\n```", "```kt\nsealed class Either<out L, out R> {\n    data class Left<out L>(val left: L) : Either<L, Nothing>()\n    data class Right<out R>(val right: R) : Either<Nothing, R>()\n}\n```", "```kt\nsealed class Either<out L, out R> {\n    data class Left<out L>(val left: L) : Either<L, Nothing>()\n    data class Right<out R>(val right: R) : Either<Nothing, R>()\n\n    companion object {\n        fun <R> right(value: R): Either<Nothing, R> = \n         Either.Right(value)\n        fun <L> left(value: L): Either<L, Nothing> = \n         Either.Left(value)\n    }\n}\n```", "```kt\nfun <V> getEither(action: () -> V): Either<Exception, V> =\n        try { Either.right(action()) } catch (e: Exception) { Either.left(e) }\n```", "```kt\nsealed class Either<out L, out R> {\n    data class Left<out L>(val left: L) : Either<L, Nothing>()\n    data class Right<out R>(val right: R) : Either<Nothing, R>()\n\n    fun <T> fold(leftOp: (L) -> T, rightOp: (R) -> T): T = when (this) {\n        is Left -> leftOp(this.left)\n        is Right -> rightOp(this.right)\n    }\n\n  //...\n}\n```", "```kt\ndata class Response(val json: JsonObject)\ndata class ErrorResponse(val code: Int, val message: String)\n```", "```kt\nfun someGetRequest(): Either<ErrorResponse, Response> = //..\n```", "```kt\nsomeGetRequest().fold({\n    showErrorInfo(it.message)\n}, {\n    parseAndDisplayResults(it.json)\n})\n```", "```kt\nclass Memoizer<P, R> private constructor() {\n\n    private val map = ConcurrentHashMap<P, R>()\n\n    private fun doMemoize(function: (P) -> R):\n        (P) -> R = { param: P ->\n        map.computeIfAbsent(param) { param: P ->\n                    function(param)\n                }\n            }\n\n    companion object {\n        fun <T, U> memoize(function: (T) -> U): (T) -> U =\n                Memoizer<T, U>().doMemoize(function)\n    }\n}\n```", "```kt\nfun <P, R> ((P) -> R).memoized(): (P) -> R = Memoizer.memoize<P, R>(this)\n```", "```kt\nfun factorial(n: Int): Long = if (n == 1) n.toLong() else n * factorial(n - 1)\n```", "```kt\nval cachedFactorial = ::factorial.memoized()\nprintln(\" Execution time: \" + measureNanoTime { cachedFactorial(12) } + \" ns\")\nprintln(\" Execution time: \" + measureNanoTime { cachedFactorial(13) } + \" ns\")\n```", "```kt\nExecution time: 1547274 ns\nExecution time: 24690 ns\n```"]