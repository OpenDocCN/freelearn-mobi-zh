["```swift\n<manifest xmlns:android=\n    \"http://schemas.android.com/apk/res/android\"\n  package=\"com.example.snazzyapp\">\n<uses-permission android:name=\"android.permission.SEND_SMS\" />\n  <application …> ... </application>\n</manifest>\n```", "```swift\nimplementation \"androidx.activity:activity-ktx:1.6.1\"\nimplementation \"androidx.fragment:fragment-ktx:1.5.5\"\n```", "```swift\nclass MainActivity : AppCompatActivity() {\n  private lateinit var requestPermissionLauncher:\n    ActivityResultLauncher<String>\n  override fun onCreate() {\n    ...\n    requestPermissionLauncher = registerForActivityResult(\n      RequestPermission()) { isGranted ->\n        if (isGranted) {... } else { ... }    }\n```", "```swift\noverride fun onResume() {\n  ...\n  when {\n    hasLocationPermission() -> getLastLocation()\n    shouldShowRequestPermissionRationale(this, \n    ACCESS_FINE_LOCATION) -> {\n      showPermissionRationale {\n        requestPermissionLauncher\n          .launch(ACCESS_FINE_LOCATION)\n      }\n    }\n    else -> requestPermissionLauncher.\n              launch(ACCESS_FINE_LOCATION)\n  }\n}\n```", "```swift\nprivate fun hasLocationPermission() =\n  checkSelfPermission(this, Manifest.permission.ACCESS_FINE_\n  LOCATION) == PERMISSION_GRANTED\n```", "```swift\nprivate fun showPermissionRationale(\n  positiveAction: () -> Unit) {\n  AlertDialog.Builder(this)\n    .setTitle(\"Location permission\")\n    .setMessage(\"We need your permission to find your current \n        position\")\n    .setPositiveButton(android.R.string.ok) { _, _ ->\n        positiveAction()\n    }\n    .setNegativeButton(android.R.string.cancel) { dialog, _ -> \n        dialog.dismiss() }\n    .create().show()\n}\n```", "```swift\nregisterForActivityResult(RequestPermission()) { isGranted ->\n  if (isGranted) { getLastLocation() }\n  else {\n    showPermissionRationale { requestPermissionLauncher\n      .launch(ACCESS_FINE_LOCATION) }\n  }\n}\n```", "```swift\n    <manifest ...>\n        <uses-permission android:name=\n            \"android.permission.ACCESS_FINE_LOCATION\" />\n        <application ...> ... </application>\n    </manifest>\n    ```", "```swift\n    class MapsActivity : ... {\n      ...\n      private fun getLastLocation() {\n        Log.d(\"MapsActivity\", \"getLastLocation() called.\")\n      }\n    }\n    ```", "```swift\n    class MapsActivity : ... {\n        private lateinit var requestPermissionLauncher:\n            ActivityResultLauncher<String>\n    ```", "```swift\noverride fun onCreate(savedInstanceState: Bundle?) {\n  ...\n  requestPermissionLauncher =\n    registerForActivityResult(RequestPermission()) { \n    isGranted ->\n      if (isGranted) { getLastLocation() }\n      else {\n        showPermissionRationale {\n          requestPermissionLauncher\n            .launch(ACCESS_FINE_LOCATION)\n        }\n      }\n    }\n}\n```", "```swift\n    private fun showPermissionRationale(positiveAction: ()\n    -> Unit) {\n      AlertDialog.Builder(this)\n        .setTitle(\"Location permission\")\n        .setMessage(\"This app will not work without knowing \n            your current location\")\n        .setPositiveButton(android.R.string.ok) { _, _ ->\n            positiveAction() }\n        .setNegativeButton(android.R.string.cancel) { dialog, \n            _ -> dialog.dismiss() }\n        .create().show()\n    }\n    ```", "```swift\n    private fun hasLocationPermission() =\n        ContextCompat.checkSelfPermission(\n            this, Manifest.permission.ACCESS_FINE_LOCATION\n        ) == PackageManager.PERMISSION_GRANTED\n    ```", "```swift\n    override fun onMapReady(googleMap: GoogleMap) {\n      mMap = googleMap\n      when {\n        hasLocationPermission() -> getLastLocation()\n        shouldShowRequestPermissionRationale(this,\n          ACCESS_FINE_LOCATION) -> {\n          showPermissionRationale {\n            requestPermissionLauncher\n              .launch(ACCESS_FINE_LOCATION)\n          }\n        }\n        else -> requestPermissionLauncher\n          .launch(ACCESS_FINE_LOCATION)\n      }\n    }\n    ```", "```swift\nimplementation \"com.google.android.gms:play-services-location:21.0.1\"\n```", "```swift\n.addOnSuccessListener { location: Location? -> }\n```", "```swift\nmMap.moveCamera(CameraUpdateFactory.newLatLng(latLng))\n```", "```swift\nmMap.addMarker(MarkerOptions().position(latLng)\n    .title(\"Pin Label\"))\n```", "```swift\n    dependencies {\n      implementation \"com.google.android.gms: play-services-\n      location:21.0.1\"\n      ...\n    }\n    ```", "```swift\n    <meta-data\n    android:name=\"com.google.android.geo.API_KEY\"\n                android:value=\"YOUR_API_KEY\" />\n    ```", "```swift\n    class MapsActivity : ... {\n      private val fusedLocationProviderClient by lazy {\n        LocationServices\n          .getFusedLocationProviderClient(this)\n      }\n      override fun onCreate(savedInstanceState: Bundle?)\n      { ... }\n      ...\n    }\n    ```", "```swift\n    private fun updateMapLocation(location: LatLng) {\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(\n            location, 7f))\n    }\n    private fun addMarkerAtLocation(location: LatLng,\n    title: String) {\n        mMap.addMarker(MarkerOptions().title(title)\n            .position(location))\n    }\n    ```", "```swift\n    private fun getLastLocation() {\n      fusedLocationProviderClient.lastLocation\n        .addOnSuccessListener { location: Location? ->\n    location?.let {\n            val userLocation = LatLng(\n              location.latitude, location.longitude)\n            updateMapLocation(userLocation)\n            addMarkerAtLocation(userLocation, \"You\")\n         }\n      }\n    }\n    ```", "```swift\noverride fun onMapReady(googleMap: GoogleMap) {\n    mMap = googleMap.apply {\n        setOnMapClickListener { latLng ->\n            addMarkerAtLocation(latLng, \"Deploy here\")\n        }\n    }\n    ...\n}\n```", "```swift\nprivate fun getBitmapDescriptorFromVector(@DrawableRes vectorDrawableResourceId: Int): BitmapDescriptor? {\n  val bitmap = ContextCompat.getDrawable(this,\n    vectorDrawableResourceId)?.let { vectorDrawable ->\n      vectorDrawable.setBounds(0, 0,\n        vectorDrawable.intrinsicWidth,\n        vectorDrawable.intrinsicHeight)\n      val drawableWithTint = DrawableCompat.\n        wrap(vectorDrawable)\n      DrawableCompat.setTint(drawableWithTint, Color.RED)\n      val bitmap = Bitmap.createBitmap(\n        vectorDrawable.intrinsicWidth,\n        vectorDrawable.intrinsicHeight,\n        Bitmap.Config.ARGB_8888\n      )\n      val canvas = Canvas(bitmap)\n      drawableWithTint.draw(canvas)\n      bitmap\n    }\n    return BitmapDescriptorFactory.fromBitmap(bitmap)\n      .also { bitmap?.recycle() }\n}\n```", "```swift\n    private lateinit var mMap: GoogleMap\n    private var marker: Marker? = null\n    ```", "```swift\n    private fun addMarkerAtLocation(\n      location: LatLng, title: String,\n      markerIcon: BitmapDescriptor? = null\n    ) = mMap.addMarker(\n      MarkerOptions().title(title).position(location)\n        .apply { markerIcon?.let { icon(markerIcon) } }\n    )\n    ```", "```swift\n    private fun getBitmapDescriptorFromVector(@DrawableRes vectorDrawableResourceId: Int): BitmapDescriptor? {\n      val bitmap = ContextCompat.getDrawable(this,\n        vectorDrawableResourceId)?.let { vectorDrawable ->\n          vectorDrawable.setBounds(0, 0,\n            vectorDrawable.intrinsicWidth,\n            vectorDrawable.intrinsicHeight)\n          val drawableWithTint = DrawableCompat\n            .wrap(vectorDrawable)\n          DrawableCompat.setTint(drawableWithTint, Color.RED)\n          val bitmap = Bitmap.createBitmap(\n            vectorDrawable.intrinsicWidth,\n            vectorDrawable.intrinsicHeight,\n            Bitmap.Config.ARGB_8888\n          )\n          val canvas = Canvas(bitmap)\n          drawableWithTint.draw(canvas)\n          bitmap\n        }\n      return BitmapDescriptorFactory.fromBitmap(bitmap)\n        .also { bitmap?.recycle() }\n    }\n    ```", "```swift\n    private fun addOrMoveSelectedPositionMarker(latLng:\n    LatLng) {\n      if (marker == null) {\n        marker = addMarkerAtLocation(latLng,\n          \"Deploy here\", getBitmapDescriptorFromVector(\n            R.drawable.target_icon)\n        )\n      } else { marker?.apply { position = latLng } }\n    }\n    ```", "```swift\n    override fun onMapReady(googleMap: GoogleMap) {\n        mMap = googleMap.apply {\n            setOnMapClickListener { latLng ->\n                addOrMoveSelectedPositionMarker(latLng)\n            }\n        }\n        if (hasLocationPermission()) { ... }\n    }\n    ```", "```swift\n    private fun saveLocation(latLng: LatLng) =\n      getPreferences(MODE_PRIVATE)?.edit()?.apply {\n        putString(\"latitude\", latLng.latitude.toString())\n        putString(\"longitude\", latLng.longitude.toString())\n        apply()\n      }\n    ```", "```swift\n    val latitude = sharedPreferences\n        .getString(\"latitude\", null)\n        ?.toDoubleOrNull() ?: return null\n    val longitude = sharedPreferences\n        .getString(\"longitude\", null)\n        ?.toDoubleOrNull() ?: return null\n    ```"]