- en: Chapter 2. Testing on Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 在Android上进行测试
- en: Now that we have introduced the reasons and the basic concepts behind testing,
    it's time to put them into practice.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了测试的原因和基本概念，是时候将它们付诸实践了。
- en: 'In this second chapter, we are covering:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖：
- en: Testing on Android
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android上进行测试
- en: Unit testing and JUnit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试和JUnit
- en: Creating an Android Test project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Android测试项目
- en: Running tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试
- en: We will be creating a simple Android **main** project and its companion **test**
    project. The main project will be almost empty and will just highlight testing
    components.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的Android **主**项目及其配套的**测试**项目。主项目将几乎是空的，只是突出测试组件。
- en: From my personal experience, I suggest that this chapter is useful for new developers
    with no Android Testing experience. If you have some experience with Android Projects
    and have been using testing techniques for them, you might read this chapter as
    a revision or reaffirmation of the concepts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的个人经验，我建议这一章对新开发者（没有Android测试经验）很有用。如果你对Android项目有一些经验，并且已经使用测试技术对它们进行过测试，你可能会将这一章作为复习或概念重申。
- en: Though not mandatory, best practices dictate that tests should live in a separate
    correlated project. This feature is now supported by the Android ADP plugin, but
    this has not always been the case. Some time ago I published an article ([http://dtmilano.blogspot.com/2008/11/android-testing-on-android-platf.html](http://dtmilano.blogspot.com/2008/11/android-testing-on-android-platf.html))
    describing a method for manually maintaining two correlated projects—a main project
    and a test project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是强制性的，但最佳实践规定测试应该存在于一个单独的相关项目中。现在Android ADP插件支持这一功能，但这并不总是如此。一些时间以前，我发表了一篇文章([http://dtmilano.blogspot.com/2008/11/android-testing-on-android-platf.html](http://dtmilano.blogspot.com/2008/11/android-testing-on-android-platf.html))，描述了一种手动维护两个相关项目的方法——一个主项目和测试项目。
- en: 'The advantages of this decision may not be immediately evident, but among them
    we can count:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定的优点可能不会立即显现，但其中我们可以列出：
- en: Testing code is easily stripped out from a production build as it is not included
    in the main project and thus not in the APK
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码可以从生产构建中轻松剥离，因为它不包括在主项目中，因此不在APK中
- en: Ease the way of running the tests in the emulator through the Instrumentation
    option in Dev Tools
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Dev Tools中的Instrumentation选项简化在模拟器上运行测试的方式
- en: With large projects, deploying the main package and the tests takes less time
    if they are separated
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于大型项目，如果它们是分开的，部署主包和测试包将花费更少的时间
- en: Encourages code reusability in similar projects
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励在类似项目中重用代码
- en: JUnit
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JUnit
- en: We had an overview of JUnit in the previous chapter, so no introduction is needed
    here. It is worth mentioning that the JUnit testing framework is the default option
    for Android testing projects and it is supported by Eclipse, the Android ADT plugin,
    and by Ant as well, in case you are not developing with an IDE.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经对JUnit进行了概述，所以这里不需要介绍。值得一提的是，JUnit测试框架是Android测试项目的默认选项，它由Eclipse、Android
    ADT插件以及Ant支持，即使你不是在IDE中开发。
- en: So you are free to choose the best alternative for every case.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以自由地为每种情况选择最佳替代方案。
- en: Most of the following examples will be based on Eclipse because is the most
    common option. So, let's open Eclipse and start with no preamble.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的大部分示例将基于Eclipse，因为它是最常见的选项。所以，让我们打开Eclipse，不进行任何前言。
- en: Creating the Android main project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android主项目
- en: We will create a new Android project. This is done from Eclipse menu **File**
    | **New** | **Project..**. | **Android** | **Android Project**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的Android项目。这是通过Eclipse菜单**文件** | **新建** | **项目..**. | **Android** |
    **Android项目**来完成的。
- en: 'In this particular case, we are using the following values for the required
    component names:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，我们使用以下值作为所需组件名称：
- en: '| Project name: | **MyFirstProject** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 项目名称: | **MyFirstProject** |'
- en: '| Build Target: | **Android 2.3.1** |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 构建目标: | **Android 2.3.1** |'
- en: '| Application name: | **My First Project** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 应用名称: | **我的第一个项目** |'
- en: '| Package name: | **com.example.aatg.myfirstproject** |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 包名: | **com.example.aatg.myfirstproject** |'
- en: '| Create Activity: | **MyFirstProjectActivity** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 创建活动: | **MyFirstProjectActivity** |'
- en: '| Min SDK Version: | **9** |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 最小SDK版本: | **9** |'
- en: 'This is what your project creation dialog will look like after entering these
    values:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些值后，你的项目创建对话框将看起来像这样：
- en: '![Creating the Android main project](img/3500_02_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![创建Android主项目](img/3500_02_01.jpg)'
- en: Creating the Android test project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android测试项目
- en: Press the **Next** button and the Android Test Project creation dialog will
    be displayed. Note that some values have been already picked according to the
    corresponding values selected in the main project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按下**下一步**按钮，将显示 Android 测试项目创建对话框。注意，一些值已经根据主项目中选择的相应值预先选择了。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Alternatively, to create a Test project for an existing Android project you
    can select the main project and then **Android Tools | Create Test Project**.
    Under *Test Target* select the name of the existing project and the required values
    will be filled in automatically.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要为现有的 Android 项目创建测试项目，您可以选中主项目，然后选择**Android 工具 | 创建测试项目**。在 *测试目标* 中选择现有项目的名称，所需值将自动填写。
- en: This image shows the Android Test Project creation dialog after entering the
    corresponding values. All the values have been already entered for us and we should
    only have to click **Finish:**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片显示了输入相应值后的 Android 测试项目创建对话框。所有值都已为我们填写，我们只需点击**完成**：
- en: '![Creating the Android test project](img/3500_02_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Android 测试项目](img/3500_02_02.jpg)'
- en: Package explorer
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包资源管理器
- en: After having created both projects, our Package explorer should look like the
    next image. We can note the existence of the two correlated projects, each with
    an independent set of components and project properties.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了两个项目后，我们的包资源管理器应该看起来像下面的图片。我们可以注意到存在两个相关联的项目，每个项目都有独立的一组组件和项目属性。
- en: '![Package explorer](img/3500_02_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![包资源管理器](img/3500_02_03.jpg)'
- en: Now that we have the basic infrastructure set up, it's time for us to start
    adding some tests.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了基本的基础设施，是时候开始添加一些测试了。
- en: There's nothing to test right now, but as we are setting up the fundamentals
    of Test Driven Development discipline we are adding a dummy test just to get acquainted
    with the technique.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有东西可以测试，但因为我们正在设置测试驱动开发学科的基石，所以我们添加了一个虚拟测试，以便熟悉这项技术。
- en: The `src` folder on `MyFirstProjectTest` project is the perfect place to add
    the tests. It is not mandatory but a good practice. The package should be the
    same as the corresponding package of the component being tested.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyFirstProjectTest`项目的`src`文件夹是添加测试的完美位置。这不是强制性的，但是一种良好的实践。包应该与被测试组件的相应包相同。'
- en: Right now, we are not concentrating on the tests but on the concepts and placement
    of those tests.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们不是专注于测试，而是关注测试的概念和位置。
- en: Creating a test case
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试用例
- en: As described before, we are creating our test cases in the `src` folder of the
    Test project.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们正在 Test 项目的`src`文件夹中创建测试用例。
- en: In this particular case, we are creating a unit test using JUnit TestCase. Eclipse
    provides a wizard to help us **(File | New... | Junit Test Case)**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的情况下，我们正在使用 JUnit TestCase 创建单元测试。Eclipse 提供了一个向导来帮助我们**(文件 | 新建... | JUnit
    测试用例)**。
- en: We are selecting the main project's Activity as the class under test; however
    this is not relevant in this example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在选择主项目中的 Activity 作为要测试的类；然而，在这个示例中这并不相关。
- en: 'These are the values that we should enter when we create the test case:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试用例时，我们应该输入以下值：
- en: '| Junit: | **Junit 3** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| JUnit: | **JUnit 3** |'
- en: '| Source folder: | **MyFirstProjectTest/src** |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 源文件夹: | **MyFirstProjectTest/src** |'
- en: '| Package: | **com.example.aatg.myfirstproject.test** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 包: | **com.example.aatg.myfirstproject.test** |'
- en: '| Name: | **MyFirstProjectTests** |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 名称: | **MyFirstProjectTests** |'
- en: '| Superclass: | **junit.framework.TestCase** |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 超类: | **junit.framework.TestCase** |'
- en: '| Which method stubs would you like to create? | **setUp(), tearDown(), constructor**
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 您想创建哪些方法存根？ | **setUp()**、**tearDown()**、**构造函数** |'
- en: '| Class under test: | **com.example.aatg.myfirstproject.MyFirstProjectActivity**
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 要测试的类: | **com.example.aatg.myfirstproject.MyFirstProjectActivity** |'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Strictly speaking we could have left the **setUp(), tearDown()**, and **constructor**
    options unselected and this basic test we are creating would not be affected,
    but here we are describing the most general practices and we will find in many
    real life scenarios that these methods are needed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，我们可以不选择**setUp()**、**tearDown()**和**构造函数**选项，我们创建的基本测试将不会受到影响，但在这里我们描述的是最通用的实践，我们将在许多实际场景中发现这些方法是必需的。
- en: 'After entering all the required values our JUnit test case creation dialog
    would look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 输入所有必需的值后，我们的 JUnit 测试用例创建对话框将看起来像这样：
- en: '![Creating a test case](img/3500_02_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试用例](img/3500_02_04.jpg)'
- en: The basic infrastructure for our tests is in place; what is left is adding a
    dummy test to verify that everything is working as expected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们测试的基本基础设施已经就绪；剩下的是添加一个虚拟测试来验证一切是否按预期工作。
- en: 'Eclipse also provides a way of creating stubs for the test methods. After pressing
    **Next >** the following dialog is presented where you can choose the methods
    under tests you want to generate the stubs for:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse还提供了一种为测试方法创建存根的方法。按下**下一步 >**后，将显示以下对话框，您可以选择要为哪些测试方法生成存根：
- en: '![Creating a test case](img/3500_02_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![创建测试用例](img/3500_02_05.jpg)'
- en: These stub methods may be useful in some cases but you have to consider that
    testing should be behavior driven rather than method driven.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些存根方法在某些情况下可能很有用，但您必须考虑测试应该是行为驱动而不是方法驱动的。
- en: We now have a test case template, so the next step is to start completing it
    to suit our needs. To do it, open the recently created case class and add the
    test `testSomething()`. As a best practice, add the tests at the end of the class.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了测试用例模板，下一步是开始完成它以满足我们的需求。要做到这一点，打开最近创建的用例类，并添加测试`testSomething()`。作为一个最佳实践，将测试添加到类的末尾。
- en: 'We should have something like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该有类似这样的内容：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This test will always fail, presenting the message: **Not implemented yet**.
    In order to do this we are using the `fail` method from the `junit.framework.Assert`
    class that fails the test with the given message.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将始终失败，显示消息：**尚未实现**。为了做到这一点，我们使用了`junit.framework.Assert`类中的`fail`方法，该方法使用给定消息使测试失败。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The no-argument constructor is needed to run a specific test from the command
    line as explained later using `am instrumentation`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个无参构造函数来从命令行运行特定的测试，如稍后使用`am instrumentation`解释的那样。
- en: Special methods
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊方法
- en: 'The following table describes the special methods found in our test case class:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下表描述了在测试用例类中找到的特殊方法：
- en: '| Method | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `setUp` | Sets up the fixture. For example, opens a network connection or
    creates global objects that may be needed by the tests. This method is called
    before a test is executed.In this case we are only invoking the super method.See
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Testing"), *Getting Started
    with Testing* for details. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `setUp` | 设置固定装置。例如，打开网络连接或创建可能被测试需要的全局对象。在执行测试之前调用此方法。在这种情况下，我们只调用超类方法。有关详细信息，请参阅[第1章](ch01.html
    "第1章。开始测试")，*开始测试*。 |'
- en: '| `tearDown` | Tears down the fixture. For example, close a network connection.
    This method is called after a test is executed.In this case we are only invoking
    the super method.See [Chapter 1](ch01.html "Chapter 1. Getting Started with Testing"),
    *Getting Started with Testing* for details. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `tearDown` | 断开固定装置。例如，关闭网络连接。在执行测试之后调用此方法。在这种情况下，我们只调用超类方法。有关详细信息，请参阅[第1章](ch01.html
    "第1章。开始测试")，*开始测试*。 |'
- en: '| `testSomething` | A simple test. In order to be discovered by JUnit 3 using
    reflection, test methods should start with the word `test`.The rest of the method
    name should clearly identify the feature under test. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `testSomething` | 一个简单的测试。为了被JUnit 3通过反射发现，测试方法应该以单词`test`开头。方法名的其余部分应清楚地标识要测试的功能。
    |'
- en: Test annotations
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试注解
- en: Looking carefully at the test definition you may find that we decorated the
    test using `@MediumTest` annotation. This is a way to organize or categorize our
    tests and run them separately.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看测试定义，您可能会发现我们使用了`@MediumTest`注解来装饰测试。这是一种组织或分类我们的测试并单独运行它们的方法。
- en: 'There are other annotations that can be used by the tests, such as:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 测试还可以使用其他注解，例如：
- en: '| Annotation | Description |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 注解 | 描述 |'
- en: '| --- | --- |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `@SmallTest` | Marks a test that should run as part of the small tests. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `@SmallTest` | 标记应该作为小测试运行的部分测试。 |'
- en: '| `@MediumTest` | Marks a test that should run as part of the medium tests.
    |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `@MediumTest` | 标记应该作为中等测试运行的部分测试。 |'
- en: '| `@LargeTest` | Marks a test that should run as part of the large tests. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `@LargeTest` | 标记应该作为大测试运行的部分测试。 |'
- en: '| `@Smoke` | Marks a test that should run as part of the smoke tests. The `android.test.suitebuilder.SmokeTestSuiteBuilder`
    will run all tests with this annotation. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `@Smoke` | 标记应该作为烟雾测试运行的部分测试。`android.test.suitebuilder.SmokeTestSuiteBuilder`将运行所有带有此注解的测试。
    |'
- en: '| `@FlakyTest` | Use this annotation on `InstrumentationTestCase` class'' test
    methods. When this is present, the test method is re-executed if the test fails.
    The total number of executions is specified by the tolerance and defaults to 1\.
    This is useful for tests that may fail due to an external condition that could
    vary with time.For example, to specify a tolerance of 4, you would annotate your
    test with: `@FlakyTest(tolerance=4)`. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `@FlakyTest` | 在`InstrumentationTestCase`类的测试方法上使用此注解。当存在此注解时，如果测试失败，则测试方法将被重新执行。总执行次数由容错值指定，默认为
    1。这对于可能因外部条件变化而失败（随时间变化）的测试很有用。例如，要指定容错值为 4，您可以在测试上添加以下注解：`@FlakyTest(tolerance=4)`。|'
- en: '| `@UIThreadTest` | Use this annotation on `InstrumentationTestCase` class''
    test methods. When this is present, the test method is executed on the application''s
    main thread (or UI thread).Because instrumentation methods may not be used when
    this annotation is present there are other techniques if, for example, you need
    to modify the UI and get access to the instrumentation within the same test.In
    those cases you can resort to the `Activity.runOnUIThread` method allowing to
    create any `Runnable` and run it in the UI thread from within your test.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| `@UIThreadTest` | 在`InstrumentationTestCase`类的测试方法上使用此注解。当存在此注解时，测试方法将在应用程序的主线程（或
    UI 线程）上执行。因为当存在此注解时可能不会使用 instrumentation 方法，所以如果有需要修改 UI 并在同一测试中访问 instrumentation
    的情况，可以使用其他技术。在这种情况下，您可以使用`Activity.runOnUIThread`方法，允许在测试中创建任何`Runnable`并在 UI
    线程中运行它。|'
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `@Suppress` | Use this annotation on test classes or test methods that should
    not be included in a test suite.This annotation can be used at the class level,
    where none of the methods in that class are included in the test suite, or at
    the method level to exclude just a single method or set of methods. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `@Suppress` | 在不应包含在测试套件中的测试类或测试方法上使用此注解。此注解可以在类级别使用，其中该类中的所有方法都不包含在测试套件中，或者在方法级别排除单个方法或一组方法。|'
- en: Now that we have the tests in place, it's time to run them, and that's what
    we are going to do next.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了测试，是时候运行它们了，这就是我们接下来要做的。
- en: Running the tests
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行测试
- en: There are several ways of running our tests, and we will analyze them here.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们的测试有几种方法，我们将在下面分析它们。
- en: Additionally, as was mentioned in the previous section about annotations, tests
    can be grouped or categorized and run together, depending on the situation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如前一小节中提到的关于注解的内容，测试可以根据情况分组或分类并一起运行。
- en: Running all tests from Eclipse
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行所有测试
- en: This is perhaps the simplest method if you have adopted Eclipse as your development
    environment. This will run all the tests in the package.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经采用 Eclipse 作为您的开发环境，这可能是一种最简单的方法。这将运行包中的所有测试。
- en: Select the test project and then **Run As | Android Junit Test**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 选择测试项目，然后**运行方式 | Android JUnit 测试**。
- en: If a suitable device or emulator is not found, one will be started automatically.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到合适的设备或模拟器，系统将自动启动一个。
- en: Then the tests are run and the results presented inside the Eclipse DDMS perspective,
    which you may need to change to manually.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行测试，并在 Eclipse DDMS 视图中显示结果，您可能需要手动更改。
- en: '![Running all tests from Eclipse](img/3500_02_06.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![从 Eclipse 运行所有测试](img/3500_02_06.jpg)'
- en: 'A more detailed view of the results and the messages produced during their
    execution can also be obtained in the LogCat view within the Eclipse DDMS perspective:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在 Eclipse DDMS 视图中获得更详细的结果和执行期间产生的消息：
- en: '![Running all tests from Eclipse](img/3500_02_07.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![从 Eclipse 运行所有测试](img/3500_02_07.jpg)'
- en: Running a single test case from Eclipse
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Eclipse 运行单个测试用例
- en: There is an option to run a single test case from Eclipse, should you need to.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以从 Eclipse 运行单个测试用例。
- en: Select the test project and then **Run As | Run Configurations**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择测试项目，然后**运行方式 | 运行配置**。
- en: 'Then create a new configuration and under *Test*, use the following values:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个新的配置，在*测试*下使用以下值：
- en: '| Run a single test: | **checked** |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 运行单个测试： | **选中** |'
- en: '| Project: | **MyFirstProjectTest** |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 项目： | **MyFirstProjectTest** |'
- en: '| Test class: | **com.example.aatg.myfirstproject.test.MyFirstProjectTests**
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 测试类： | **com.example.aatg.myfirstproject.test.MyFirstProjectTests** |'
- en: When you run as usual, only this test will be executed. In our case, we have
    only one test, so the result will be similar to the screenshot presented earlier.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当您以常规方式运行时，只有此测试将被执行。在我们的例子中，我们只有一个测试，所以结果将与之前展示的截图相似。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is a shortcut for this that you can use from within the Eclipse editor.
    Selecting the method name you can press *Shift+Alt+X T* or right-click on it and
    then choosing **Run As | JUnit Test**.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eclipse编辑器中，你可以使用一个快捷键来执行此操作。选择方法名称，你可以按*Shift+Alt+X T*或右键单击它，然后选择**运行方式 |
    JUnit 测试**。
- en: Running from the emulator
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从模拟器运行
- en: 'The default system image used by the emulator has the *Dev Tools* application
    installed, providing several handy tools and settings. Among these tools, we can
    find a rather long list as is shown in this screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器使用的默认系统镜像已安装了**开发工具**应用程序，提供了几个方便的工具和设置。在这些工具中，我们可以找到一个相当长的列表，如下面的截图所示：
- en: '![Running from the emulator](img/3500_02_08.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![从模拟器运行](img/3500_02_08.jpg)'
- en: 'We are interested in **Instrumentation** now, which is the way to run our tests.
    This application lists all of the packages installed that define the `instrumentation`
    tag in their `AndroidManifest.xml`. By default, packages are listed using the
    default instrumentation which normally is `android.test.InstrumentationTestRunner`
    which is a problem to identify if you have more than one package list. To solve
    this problem you can set an optional label in the manifest, under the Instrumentation
    tab, as shown here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对**测试**感兴趣，这是运行我们的测试的方式。此应用程序列出了所有安装的包，这些包在它们的`AndroidManifest.xml`中定义了`instrumentation`标签。默认情况下，包使用默认的测试运行器列出，这通常是`android.test.InstrumentationTestRunner`，如果你有多个包列表，这会成为一个问题。为了解决这个问题，你可以在清单中设置一个可选的标签，在测试标签页下，如下所示：
- en: '![Running from the emulator](img/3500_02_09.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![从模拟器运行](img/3500_02_09.jpg)'
- en: 'Once this is done and the Instrumentation list is re-displayed, our package
    will be listed under this new label and we can run the tests by selecting it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此操作并重新显示仪器列表，我们的包将显示在这个新标签下，我们可以通过选择它来运行测试：
- en: '![Running from the emulator](img/3500_02_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![从模拟器运行](img/3500_02_10.jpg)'
- en: When the tests are run in this way, the results can be seen through **LogCat**
    as described in the previous section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当以这种方式运行测试时，结果可以通过上一节中描述的**日志猫**查看。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see how, as mentioned previously, if you don't set the optional Label
    more than one instrumentation appears under the same default label `android.test.InstrumentationTestRunner`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果你没有设置可选的标签，则多个测试将出现在相同的默认标签`android.test.InstrumentationTestRunner`下。
- en: Running tests from the command line
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行运行测试
- en: Finally, tests can be run from the command line too. This is useful if you want
    to automate or script the process.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，测试也可以从命令行运行。如果你想要自动化或脚本化这个过程，这很有用。
- en: To run the tests we are using the `am instrument` command (strictly speaking
    the `am` command and `instrument` subcommand) which allows us to run instrumentations
    specifying the package name and some other options.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行测试，我们使用`am instrument`命令（严格来说，是`am`命令和`instrument`子命令），它允许我们通过指定包名和一些其他选项来运行测试。
- en: You may wonder what `am` stands for. It is short for **Activity Manager**, a
    main component of the internal Android infrastructure that is started by the **System
    Server** at the beginning of the boot process and is responsible for managing
    Activities and their life cycle. Additionally, as we can see here, it is also
    responsible for Activity instrumentation.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道`am`代表什么。它是**活动管理器**的缩写，是Android内部基础设施的主要组件，在启动过程中由**系统服务器**启动，负责管理活动和它们的生命周期。此外，正如我们所看到的，它还负责活动测试。
- en: 'The general usage of the `am instrument` command is:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`am instrument`命令的一般用法是：'
- en: '[PRE2]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This table summarizes the most common options:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此表总结了最常见的选项：
- en: '| Option | Description |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-r` | Print raw results. Useful to collect raw performance data. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `-r` | 打印原始结果。用于收集原始性能数据。 |'
- en: '| `-e <NAME> <VALUE>` | Set arguments by name. We will examine its usage shortly.This
    is a generic option argument that allows us to set`<name, value>` pairs. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `-e <NAME> <VALUE>` | 通过名称设置参数。我们将在稍后检查其用法。这是一个通用的选项参数，允许我们设置`<name, value>`对。
    |'
- en: '| `-p <FILE>` | Write profiling data to an external file. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `-p <FILE>` | 将分析数据写入外部文件。 |'
- en: '| `-w` | Wait for instrumentation to finish before exiting. Normally used in
    commands, although not mandatory it''s very handy, as otherwise you will not be
    able to see the test''s results. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `-w` | 在退出之前等待测试完成。通常用于命令中，虽然不是强制性的，但非常方便，否则你将无法看到测试结果。 |'
- en: To invoke the `am` command we will be using the `adb shell` command or, if you
    already have a shell running on an emulator or device, you can issue the `am`
    command directly at the shell command prompt.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用`am`命令，我们将使用`adb shell`命令，或者如果你已经在模拟器或设备上运行了一个shell，你可以在shell命令提示符下直接发出`am`命令。
- en: Running all tests
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: 'This command line will run all tests with the exception of performance tests:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令行将运行所有测试，除了性能测试：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running tests from a specific test case
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从特定测试用例运行测试
- en: 'To run all the tests in a specific test case, you may use:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行特定测试用例中的所有测试，你可以使用：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running a specific test by name
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过名称运行特定测试
- en: 'Additionally we have the alternative of specifying which test we want to run
    in the command line:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在命令行中指定要运行的特定测试：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This test cannot be run in this way unless we have a no-argument constructor
    in our test case — that is the reason we added it before.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试不能以这种方式运行，除非我们在测试用例中有一个无参数的构造函数——这就是我们之前添加它的原因。
- en: Running specific tests by category
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过类别运行特定测试
- en: As we mentioned before, tests can be grouped into different categories using
    annotations *(Test Annotations)* and you can run all tests in this category.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，可以使用注解（测试注解）将测试分组到不同的类别中，并且你可以运行该类别中的所有测试。
- en: 'The following options can be added to the command line:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 可以添加到命令行的以下选项：
- en: '| `-e unit true` | Run all unit tests. These are tests that are not derived
    from `InstrumentationTestCase` (and are not performance tests). |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `-e unit true` | 运行所有单元测试。这些测试不是从`InstrumentationTestCase`派生的（也不是性能测试）。 |'
- en: '| `-e func true` | Run all functional tests. These are tests that are derived
    from `InstrumentationTestCase`. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `-e func true` | 运行所有功能测试。这些测试是从`InstrumentationTestCase`派生的。 |'
- en: '| `-e perf true` | Include performance tests. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `-e perf true` | 包含性能测试。 |'
- en: '| `-e size {small &#124; medium &#124; large}` | Run small, medium, or large
    tests depending on the annotations added to the tests. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `-e size {small | medium | large}` | 根据添加到测试中的注解运行小、中或大型测试。 |'
- en: '| `-e annotation <annotation-name>` | Run tests annotated with this annotation.
    This option is mutually exclusive with the size option. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `-e annotation <annotation-name>` | 运行带有此注解的测试。此选项与大小选项互斥。 |'
- en: In our example, we annotated the test method `testSomething()` with `@SmallTest`.
    So this test is considered to be in that category and thus run, eventually with
    other tests belonging to that same category, when we specify `small` as the test
    size.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们使用`@SmallTest`注解了测试方法`testSomething()`。因此，这个测试被认为属于该类别，并且最终在指定测试大小为`small`时，与其他属于同一类别的测试一起运行。
- en: This command line will run all the tests annotated with `@SmallTest:`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令行将运行所有带有`@SmallTest:`注解的测试
- en: '[PRE6]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating a custom annotation
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建自定义注解
- en: In case you decide to sort the tests by a different criterion than their size,
    a custom annotation can be created and then specified in the command line.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定根据不同于大小的其他标准对测试进行排序，可以创建一个自定义注解，然后在命令行中指定它。
- en: As an example, let's say we want to arrange them according to their importance,
    so we create an annotation `@VeryImportantTest`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想根据其重要性来安排它们，那么我们可以创建一个注解`@VeryImportantTest`。
- en: '[PRE7]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Following this, we can create another test and annotate it with `@VeryImportantTest`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以创建另一个测试，并用`@VeryImportantTest`注解它。
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, as we mentioned before, we can include this annotation in the `am instrument`
    command line to run only the annotated tests:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如我们之前提到的，我们可以在`am instrument`命令行中包含此注解，以仅运行注解的测试：
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running performance tests
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行性能测试
- en: We will be reviewing performance test details in [Chapter 9](ch09.html "Chapter 9. Performance
    Testing and Profiling"), *Performance Testing* but here we will introduce the
    available options to the `am instrument` command.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第9章](ch09.html "第9章。性能测试和性能分析")*性能测试*中回顾性能测试的详细信息，但在这里我们将介绍`am instrument`命令的可用选项。
- en: To include performance tests on your test run you should add this command line
    option
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要在测试运行中包含性能测试，你应该添加此命令行选项
- en: '| `-e perf true` | Include performance tests. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `-e perf true` | 包含性能测试。 |'
- en: Dry run
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 干运行
- en: Sometimes you may need to know only what tests will be run instead of actually
    running them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能只需要知道将要运行哪些测试，而不是实际运行它们。
- en: 'This is the option you need to add to your command line:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要添加到命令行中的选项：
- en: '| `-e log true` | Display the tests to be run instead of running them. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `-e log true` | 显示要运行的测试而不是运行它们。 |'
- en: This is useful if you are writing scripts or perhaps building other tools.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于编写脚本或构建其他工具很有用。
- en: Debugging tests
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试测试
- en: Your tests might have bugs too; you should assume that. In that case usual debugging
    techniques apply, for example adding messages through LogCat.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您的测试也可能存在错误；您应该假设这一点。在这种情况下，通常的调试技术适用，例如通过LogCat添加消息。
- en: If a more sophisticated debugging technique is needed you should attach the
    debugger to the test runner. In order to do so, there are two main alternatives.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要更复杂的调试技术，您应该将调试器附加到测试运行器。为此，有两种主要替代方案。
- en: The first is easy — not leaving the convenience of Eclipse and not having to
    remember hard-to-memorize command-line options. In the latest version of the Android
    ADT plugin, the option **Debug As| Android JUnit Test** was added. Thus you can
    set a breakpoint in your tests and use it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事很简单——不离开Eclipse的便利性，也不必记住难以记忆的命令行选项。在Android ADT插件的最新版本中，添加了**调试方式 | Android
    JUnit 测试**选项。因此，您可以在测试中设置断点并使用它。
- en: 'To toggle a breakpoint you can select the desired line in the editor and then
    use the menu option **Run | Toggle Line Breakpoint**. Alternatively you can slightly
    alter the code of your tests to wait for the debugger connection. But don''t worry,
    this change is extremely simple. Add the following snippet to the constructor
    or any other test you want to debug. The place where you add it is not really
    relevant as the debugger would stop at breakpoints anyway. In this case, we decided
    to add `Debug.waitForDebugger()` to the constructor as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要切换断点，您可以在编辑器中选择所需的行，然后使用菜单选项**运行 | 切换行断点**。或者，您可以稍微修改测试代码以等待调试器连接。但请放心，这种更改非常简单。将以下片段添加到构造函数或任何其他您想要调试的测试中。您添加它的位置并不重要，因为调试器会在断点处停止。在这种情况下，我们决定将`Debug.waitForDebugger()`添加到构造函数中，如下所示：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you run the tests as usual, using **Run As | Android JUnit Test**, you
    will probably be asked to change the perspective.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当您像往常一样运行测试，使用**运行方式 | Android JUnit 测试**时，您可能需要更改视角。
- en: '![Debugging tests](img/3500_02_11.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![调试测试](img/3500_02_11.jpg)'
- en: Once it is done, you will be in a standard debugging perspective and session.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，您将进入标准调试视角和会话。
- en: Additionally if you can't or don't want to alter your tests' code, you can set
    breakpoints in it and pass the following option to `am instrument`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您无法或不想更改测试代码，您可以在其中设置断点，并将以下选项传递给`am instrument`。
- en: '| `-e debug true` | Attach to debugger. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `-e debug true` | 附加到调试器。 |'
- en: Once your tests have been started, the test runner will wait for your debugger
    to attach.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始测试，测试运行器将等待您的调试器附加。
- en: 'Execute this command line to debug the tests:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令行以调试测试：
- en: '[PRE11]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will see this line while waiting at the first breakpoint reached:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在到达第一个断点时等待时看到此行：
- en: '[PRE12]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will continue and exit normally once the debug was attached and your debugging
    session will be completed.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在调试附加后正常继续并退出，您的调试会话也将完成。
- en: Other command-line options
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他命令行选项
- en: 'The `am instrument` command accepts other`<name, value>` pairs beside the previously
    mentioned ones:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`am instrument`命令除了之前提到的`<name, value>`对之外，还接受其他`<name, value>`对：'
- en: '| Name | Value |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 值 |'
- en: '| --- | --- |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| package | Fully qualified package name of one or several packages in the
    test application.Multiple values are separated by commas (,). |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| package | 测试应用程序中一个或多个包的完全限定包名。多个值由逗号（,）分隔。 |'
- en: '| class | A fully qualified test case class to be executed by the test runner.Optionally
    this could include the test method name separated from the class name by a hash
    (`#`). |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| class | 要由测试运行器执行的完全限定测试用例类。可选地，这可以包括通过哈希（`#`）与类名分开的测试方法名称。 |'
- en: '| coverage | TrueRuns the EMMA code coverage and writes output to a file that
    can also be specified.We will dig into details about supporting EMMA code coverage
    for our tests in [Chapter 10](ch10.html "Chapter 10. Alternative Testing Tactics"),
    *Alternative Testing Tactics.* |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| coverage | True运行EMMA代码覆盖率，并将输出写入一个文件，该文件也可以指定。我们将在[第10章](ch10.html "第10章。替代测试策略")*替代测试策略*中深入了解支持我们的测试的EMMA代码覆盖率。|'
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have reviewed the main techniques and tools behind testing in Android.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经回顾了Android测试背后的主要技术和工具。
- en: 'The following is what we have covered in this chapter:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在本章中涵盖的内容：
- en: Created our first Android test project as a companion for a sample Android project.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了我们第一个Android测试项目，作为示例Android项目的配套。
- en: Followed the best practice of always creating our companion test project even
    if initially you may think it's not needed.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随最佳实践，我们始终创建我们的伴随测试项目，即使最初你可能认为它不是必需的。
- en: Created a simple test class to test the Activity in the project. We haven't
    added any useful test cases yet but adding those simple ones was intended to validate
    all of our infrastructure.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个简单的测试类来测试项目中的 Activity。我们还没有添加任何有用的测试用例，但添加这些简单的用例是为了验证我们的所有基础设施。
- en: We also ran this simple test from Eclipse and from the command line to understand
    the alternatives we have. In this process, we mentioned the Activity Manager and
    its command line incarnation `am`.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还从 Eclipse 和命令行运行了这个简单的测试，以了解我们拥有的替代方案。在这个过程中，我们提到了活动管理器及其命令行版本 `am`。
- en: Analyzed the most used command lines and explained their options.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析了最常用的命令行并解释了它们的选项。
- en: Created a custom annotation to sort our tests and demonstrated its usage.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建了一个自定义注解来排序我们的测试，并演示了其用法。
- en: Running the tests and interpreting the results let us know how well our application
    is behaving.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试并解释结果让我们了解到我们的应用程序表现如何。
- en: In the next chapter we will start analyzing the mentioned techniques, frameworks,
    and tools in much greater detail and provide examples of their usage.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地分析提到的技术、框架和工具，并提供它们用法的示例。
