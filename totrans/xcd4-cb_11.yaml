- en: Appendix A. Exploring the MultiTouch Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A.探索多点触控界面
- en: 'In this appendix, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将涵盖：
- en: Sensing the movement and device orientation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 感知运动和设备方向
- en: Using the shake gesture with the touch interface
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用触摸界面进行摇动手势
- en: Detecting device touches with the touch interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用触摸界面检测设备触摸
- en: Sensing movement with the accelerometer input
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加速度计输入感知运动
- en: Understanding the core motion framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解核心运动框架
- en: Working with the iOS device gyroscope
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与iOS设备陀螺仪协同工作
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The Apple iOS device's primary interface with which you communicate is its large
    Multi touch display. Since there is no physical keyboard attached, everything
    is done via the screen to allow you to interact with your applications in a more
    natural way. Any object can be moved around the screen, zoomed in and out, and
    scrolled up and down using simple gestures.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与您通信的Apple iOS设备的主要界面是其大型的多点触控显示屏。由于没有物理键盘连接，所有操作都通过屏幕完成，以便您以更自然的方式与应用程序交互。任何对象都可以在屏幕上移动，放大和缩小，以及上下滚动，只需使用简单的手势即可。
- en: In this appendix, we will see how easy it is to incorporate both single touch
    and multi touch support into our applications, to detect when the iOS device orientation
    has changed as well as how to handle and respond to shake motions, before finally
    learning about the accelerometer and the gyroscope.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将看到如何轻松地将单点触控和多点触控支持集成到我们的应用程序中，以检测iOS设备方向是否已更改，以及如何处理和响应摇动动作，最后我们将了解加速度计和陀螺仪。
- en: Sensing the movement and device orientation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 感知运动和设备方向
- en: In this recipe we will learn how to detect the current orientation of the iOS
    device.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何检测iOS设备的当前方向。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new Single View Application Project and name it `OrientationExample`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的单视图应用程序项目，并将其命名为`OrientationExample`。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To begin, follow these simple steps as outlined:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下简单步骤进行操作：
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, modify the `viewDidLoad` method as shown in the following code snippet:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改如以下代码片段所示的`viewDidLoad`方法：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create the `hasOrientationChanged` method as shown in the following code
    snippet:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建如以下代码片段所示的`hasOrientationChanged`方法：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**产品**菜单选择**运行**或按*Command* + *R*键来构建和运行应用程序。
- en: 'Try changing the different views of orientation by pressing the *Command* +
    ;left arrow and *Command* + right arrow if you are running this within the iOS
    Simulator as shown in the screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在iOS模拟器中运行此程序，请尝试通过按*Command* + ;左箭头和*Command* + 右箭头来更改不同方向的视图，如截图所示：
- en: '![How to do it...](img/3349_ADX_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3349_ADX_01.jpg)'
- en: How it works…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: What we covered in this recipe were the steps to create our example application.
    We began by telling our iOS device to start generating the notifications for each
    of the changes in the orientation that the device will take. We then set up an
    observer to the `UIDeviceOrientationDidChangeNotification` class that gets fired
    each time the device changes its orientation. Next, we determined the current
    orientation that our iOS device is in by deriving this from the `UIDeviceOrientation`
    class. Finally, we proceeded and determined what the current orientation is by
    using the `switch…case` statements and then changed the background color of our
    view.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们涵盖了创建示例应用程序的步骤。我们首先告诉iOS设备开始为设备将采取的每个方向变化生成通知。然后，我们设置了一个观察者，用于`UIDeviceOrientationDidChangeNotification`类，每当设备改变方向时都会触发。接下来，我们通过`UIDeviceOrientation`类推导出我们的iOS设备当前的方向。最后，我们通过使用`switch…case`语句确定当前方向，然后更改视图的背景颜色。
- en: If you want to determine which way the iOS device is facing, you can get this
    information by using the `UIDevice` class and then using its orientation property.
    When registering the `UIDeviceOrientationDidChangeNotificaiton` notification method
    of the `UIDevice` class, you are not only told when the iOS device has been rotated
    between portrait and landscape views but also if the iOS device is facing up or
    down.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想确定iOS设备朝向哪个方向，你可以通过使用`UIDevice`类并使用其方向属性来获取这个信息。当注册`UIDeviceOrientationDidChangeNotification`通知方法时，你不仅会被告知iOS设备在纵向和横向视图之间是否已旋转，还会知道iOS设备是向上还是向下。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIDevice` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于`UIDevice`类的信息，可以参考位于链接[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html)的Apple开发者文档。
- en: See also
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using the shake gesture with the touch interface* recipe
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用触摸界面的摇晃手势*食谱'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*使用Xcode创建iOS项目*食谱中，*获取和安装iOS SDK开发工具*
- en: Using the shake gesture with the touch interface
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触摸界面的摇晃手势
- en: In this recipe we will learn how to detect and handle iOS device motion events.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何检测和处理iOS设备运动事件。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new Single View Application, and name it `ShakeExample`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的单视图应用程序，并将其命名为`ShakeExample`。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To begin, follow these simple steps as outlined:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下简单步骤操作：
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开`ViewController.m`实现文件。
- en: 'Next, modify the `viewDidLoad` method as shown in the following code snippet:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照以下代码片段修改`viewDidLoad`方法：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, create the following code sections as specified in the code snippet:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据代码片段创建以下代码部分：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Change the deployment target to your iOS device.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将部署目标更改为你的iOS设备。
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**产品**菜单选择**运行**或按*Command* + *R*键来构建和运行应用程序。
- en: 'When the compilation completes, the application will be displayed onto your
    iOS device. Try shaking the device to see the alert messages as shown in the following
    screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，应用程序将显示在你的iOS设备上。尝试摇晃设备以查看以下截图所示的警告消息：
- en: '![How to do it...](img/3349_ADX_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3349_ADX_02.jpg)'
- en: How it works…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: What we covered in this recipe were the steps to create our example application.
    We initialized our view background color to green in the `viewDidLoad` method
    to indicate that no shake has occurred and set our view to become the first responder
    by setting the `becomeFirstResponder` method in order to support the motion events.
    If this method is not included, none of the motion events will fire and the application
    will not behave as designed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们涵盖了创建示例应用程序的步骤。我们在`viewDidLoad`方法中将视图背景色初始化为绿色，以表示没有发生摇晃，并通过设置`becomeFirstResponder`方法将视图设置为第一个响应者，以便支持运动事件。如果不包含此方法，则不会触发任何运动事件，应用程序将不会按预期运行。
- en: Next, we needed to make our view controller the first responder in the `UIResponder`
    responder chain by overriding the `motionEnded:motion:withEvent` method which
    will show an alert message when the shake gesture ends. Finally, we implemented
    the `motionBegan` method, which determines when a shake occurs and then sets the
    background color of our view to yellow. When the device determines that the motion
    has stopped, the `motionEnded` method is called and that is where we can detect
    what type of event happened. In this case, we declare and instantiate an instance
    of the `UIAlertView` class and display a message to the user alerting them that
    the shake has ended. The method `motionCancelled` is called if the system thinks
    that the motion is not a shake. A device shake is determined to be approximately
    a second or so in length and then a call is made to the `motionEnded` method to
    set the background color of our view controller to black.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过重写`motionEnded:motion:withEvent`方法，使我们的视图控制器成为`UIResponder`响应链中的第一个响应者，当摇晃手势结束时将显示一个警告消息。最后，我们实现了`motionBegan`方法，它确定摇晃何时发生，然后将我们视图的背景色设置为黄色。当设备确定运动停止时，将调用`motionEnded`方法，在那里我们可以检测发生了什么类型的事件。在这种情况下，我们声明并实例化一个`UIAlertView`类的实例，并向用户显示一个消息，告知他们摇晃已结束。如果系统认为该运动不是摇晃，则调用`motionCancelled`方法。设备摇晃被确定为大约一秒钟或更长的长度，然后调用`motionEnded`方法将我们视图控制器的背景色设置为黑色。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIResponder` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`UIResponder`类的信息，可以参考位于链接[http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html)的Apple开发者文档。
- en: There's more…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多信息…
- en: When the iOS device is shaken, the system makes use of the accelerometer and
    then interprets the accelerometer data to see if it is a shake instruction.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当iOS设备被摇晃时，系统会使用加速度计，然后解释加速度计数据以查看是否是摇晃指令。
- en: If this has been determined to be a shake gesture, the system creates a `UIEvent`
    object which represents this gesture and then sends the object to the currently
    active application for processing. Using the shake gesture on the iPhone is a
    lot simpler to use than touch events. Events are still generated when a motion
    starts or stops and it is even possible for you to track individual motions, as
    you would do with touch events.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果确定这是一个摇晃手势，系统将创建一个`UIEvent`对象来表示这个手势，然后将对象发送到当前活动应用程序进行处理。在iPhone上使用摇晃手势比触摸事件简单得多。当动作开始或停止时，仍然会生成事件，您甚至可以跟踪单个动作，就像您处理触摸事件一样。
- en: 'In order to make your applications incorporate and handle the iOS shake gesture,
    this can be easily accomplished by implementing the following three methods as
    shown in the following table:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的应用程序能够集成和处理iOS的摇晃手势，可以通过实现以下三个方法轻松实现，如下表所示：
- en: '| Method | Description |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `motionBegan:motion:withEvent:` | This method is called when a motion event
    begins. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `motionBegan:motion:withEvent:` | 当动作事件开始时调用此方法。 |'
- en: '| `motionEnded:motion:withEvent:` | This method is called when a motion event
    has ended. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `motionEnded:motion:withEvent:` | 当动作事件结束时调用此方法。 |'
- en: '| `motionCancelled:motion:withEvent:` | This method is called if the system
    thinks that the motion is not a shake. Shakes are determined to be approximately
    a second or so in length. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `motionCancelled:motion:withEvent:` | 如果系统认为该运动不是摇晃，则调用此方法。摇晃被确定为大约一秒钟或更长的长度。
    |'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Motion events were first introduced in the iOS 3.0 SDK, with shaking motions
    currently being interpreted as gestures which then move on to become motion events.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 动作事件首次在iOS 3.0 SDK中引入，摇晃动作目前被解释为手势，然后继续成为动作事件。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Sensing movement and device orientation* recipe
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检测运动和设备方向*食谱'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具")的*使用Xcode创建iOS项目*食谱中，*获取和安装iOS SDK开发工具*
- en: Detecting device touches with the touch interface
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触摸界面检测设备触摸
- en: In this recipe we will learn how to detect and handle the various touch events
    of the iOS device.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何检测和处理iOS设备的各种触摸事件。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new Single View Application and name it `TapExample`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的单视图应用程序，并将其命名为 `TapExample`。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To begin, follow these simple steps as outlined:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下简单步骤进行：
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目导航器打开 `ViewController.m` 实现文件。
- en: 'Next, create the `touchedBegan` method as shown in the following code snippet:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建名为 `touchedBegan` 的方法，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ensure that you have changed the deployment target to your iOS device.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已将部署目标更改为您的iOS设备。
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu, or alternatively by pressing *Command* + *R*.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从“产品”菜单中选择**产品** | **运行**，或通过按*Command* + *R*来构建并运行应用程序。
- en: 'When the compilation completes, the application will be displayed onto your
    iOS device. Try tapping the device screen to see the view background change as
    shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 编译完成后，应用程序将显示在您的iOS设备上。尝试点击设备屏幕，以查看视图背景如以下截图所示改变：
- en: '![How to do it...](img/3349_ADX_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/3349_ADX_03.jpg)'
- en: How it works…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: What we covered in this recipe were the steps to create our example application.
    We then implemented the `touchesBegan:touches` method which determines when a
    gesture has been made on the iOS device and then updates our views background
    color based on the total number of taps made.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们涵盖了创建示例应用程序的步骤。然后我们实现了 `touchesBegan:touches` 方法，该方法确定在iOS设备上何时进行了手势，然后根据总点击次数更新我们的视图背景颜色。
- en: There's more…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The `UIView` and `UIViewController` classes are all part of the `UIResponder`
    class as they can respond to and handle events within the view. By implementing
    any of the following methods, you are then able to override the methods used by
    your view or view controller:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIView` 和 `UIViewController` 类都是 `UIResponder` 类的一部分，因为它们可以响应和处理视图内部的事件。通过实现以下任何一种方法，您就可以覆盖您视图或视图控制器使用的方法：'
- en: '`- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event`'
- en: '`- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event`'
- en: '`- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event`'
- en: '`- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event`![There''s
    more…](img/3349OT_ADX_04.jpg)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event`![还有更多…](img/3349OT_ADX_04.jpg)'
- en: 'Each of the *UITouch* touches that get received has a phase, location, the
    view in which the touch occurred, a timestamp, and a count of the number of taps
    that occurred. In the following table we explain what happens when each of the
    touch phases are fired:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个接收到的 *UITouch* 触摸都有一个阶段、位置、发生触摸的视图、时间戳和点击次数。在下表中，我们解释了在触发每个触摸阶段时会发生什么：
- en: '| UITouch events | Description |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 触摸事件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `UITouchPhaseBegan` | Occurs at the beginning of the touch life cycle when
    the user has touched an area of the iPhone screen. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `UITouchPhaseBegan` | 当用户触摸iPhone屏幕上的某个区域时，在触摸生命周期开始时发生。 |'
- en: '| `UITouchPhaseMoved` | Occurs when the user has moves their finger or fingers
    around the screen of the iPhone. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `UITouchPhaseMoved` | 当用户在iPhone屏幕上移动手指或手指时发生。 |'
- en: '| `UITouchPhaseStationary` | Occurs when the user has paused on an area of
    the screen. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `UITouchPhaseStationary` | 当用户在屏幕上的某个区域暂停时发生。 |'
- en: '| `UITouchPhaseEnd` | Occurs when the user has removed their fingers from the
    screen of the iPhone. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `UITouchPhaseEnd` | 当用户从iPhone屏幕上移除手指时发生。 |'
- en: '| `UITouchPhaseCancelled` | Occurs when the iOS device determines that something
    has happened and needs to abort the gesture. An example of this can be due to
    a system interruption caused when you are receiving an incoming phone call or
    when an application or window view is no longer active. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `UITouchPhaseCancelled` | 当iOS设备确定发生了某些事情并且需要中止手势时发生。这种情况的一个例子可能是由于您在接听来电时系统中断，或者当应用程序或窗口视图不再活动时。
    |'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information on the `UIResponder` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the shake gesture with the touch interface* recipe
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Sensing movement and device orientation* recipe
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensing movement with the accelerometer input
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use the features of the accelerometer events
    of the iOS device.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Single View Application, and name it `AccelGyroExample`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Select the `AccelGyroExample` project from the Project Navigator.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select your project from under the **TARGETS** group.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Binary With Libraries** disclosure triangle.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** button and select the **CoreMotion.framework** from the list.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Add** button to add the framework to your project.![How
    to do it...](img/3349_ADX_05.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    accessing the accelerometer device features.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `ViewController.h` interface file and create the following highlighted
    entries as shown in the following code snippet:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open the `ViewController.m` implementation file, and add the following highlighted
    code snippet:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, create the `handleAcceleration` method as shown in the following code
    snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Change the deployment target to your iOS device.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by choosing **Product | Run** from the **Product**
    menu, or alternatively by pressing *Command + R*.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the application will be displayed onto your
    iOS device. Try moving your device in all directions and see the background color
    change.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have done in this recipe is implement the `UIAccelerometerDelegate`
    protocol so that we can use this within our `ViewController.m` implementation
    file.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: We then declare an instance `CMMotionManager` of variable `motionManager` that
    will enable us to use the accelerometer and gyroscope features. We then need to
    synthesize our property we declared within our `ViewController.h` interface file.
    If we don't declare this, we will receive a warning error messages which can cause
    unexpected application errors.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Next, we declare our methods that will handle the accelerometer and the gyroscope
    features. In the first part, we declare a delegate to the `UIAccelerometer` class,
    and then derive the values for the x, y, and z which will be used to determine
    the current device orientation and set the background color accordingly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们声明将处理加速度计和陀螺仪功能的方法。在第一部分，我们声明了`UIAccelerometer`类的代理，然后推导出x、y和z的值，这些值将用于确定当前设备方向并相应地设置背景颜色。
- en: As a final step, we set the background alpha property from transparent to opaque
    depending on whether the value is within the range 0.0 to 1.0, where 0.0 represents
    totally transparent, and 1.0 represents opaque.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后一步，我们根据值是否在0.0到1.0的范围内，将背景alpha属性从透明设置为不透明，其中0.0表示完全透明，1.0表示不透明。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you set the alpha property of a view, it only affects the current view
    and does not affect any of its embedded sub-views. The `fabs` function is a C/C++
    library function that returns the absolute value of X.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置视图的alpha属性时，它只影响当前视图，不会影响其任何嵌套子视图。`fabs`函数是一个C/C++库函数，它返回X的绝对值。
- en: 'If you would like to find out more information on the `CoreMotion` class, you
    can refer to the Apple Developer documentation located at the following link provided:
    [http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于`CoreMotion`类的信息，你可以参考以下链接提供的Apple开发者文档：[http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html)。
- en: There's more…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: So far you have been focusing on how to detect when a user performs taps and
    how to detect device shakes. We now move on to the really exciting stuff, not
    that what you have not already covered is exciting, but the iPhone's accelerometer
    is much more powerful than you think and is capable of giving you live data for
    all three dimensions of the (x, y, and z) axes when the iOS device is tilted.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直专注于如何检测用户何时进行点击以及如何检测设备震动。我们现在转向真正令人兴奋的内容，并不是说你之前没有覆盖的内容不令人兴奋，而是iPhone的加速度计比你想象的要强大得多，并且当iOS设备倾斜时，它能够提供关于(x,
    y, 和 z)轴三个维度的实时数据。
- en: The iOS's device accelerometer data is delivered via the `UIAccelerometer` class
    and the delegate `accelerometer:didAccelerate` method which provides you with
    the data for each of the three axes, each being of `UIAcceleration` class. Each
    of the values returned have a range between -1 and **+**1 with 0 being the middle
    center point. When the device is moved or tilted, these values increase or decrease.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: iOS设备的加速度计数据通过`UIAccelerometer`类和`accelerometer:didAccelerate`代理方法提供，这些方法为你提供每个轴的数据，每个轴都是`UIAcceleration`类。返回的每个值都有一个介于-1和**+**1之间的范围，其中0是中间中心点。当设备移动或倾斜时，这些值会增加或减少。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The iPhone 4 and above versions adds another sensor that is, a three-axis gyroscope
    and when combining the gyroscope with the accelerometer, this gives the iPhone
    4 six axes on which it can operate and was designed to make the iPhone 4 more
    sensitive, responsive, and powerful for gaming.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: iPhone 4及以上版本增加了另一个传感器，即三轴陀螺仪。当将陀螺仪与加速度计结合使用时，这使iPhone 4具有六个操作轴，并旨在使iPhone 4在游戏方面更加敏感、响应和强大。
- en: Understanding the core motion framework
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解核心运动框架
- en: 'The Core Motion framework is a system framework which obtains motion data from
    sensors on the iOS device. The application can then use these values. Handling
    of the sensor data is handled within the Core Motion''s own thread and it detects
    the motion events for the accelerometer and the gyroscope (which is currently
    only available on the iPhone 4). This can be illustrated in the following diagram:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Core Motion框架是一个系统框架，它从iOS设备上的传感器获取运动数据。然后，应用程序可以使用这些值。传感器数据的处理在Core Motion自己的线程中进行，并且它检测加速度计和陀螺仪（目前仅在iPhone
    4上可用）的运动事件。这可以在以下图中说明：
- en: '![Understanding the core motion framework](img/3349OT_ADX_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![理解核心运动框架](img/3349OT_ADX_06.jpg)'
- en: 'The following table describes each of the components that make up the Core
    Motion framework:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 下表描述了构成Core Motion框架的各个组件：
- en: '| Core Motion Classes | Description |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 核心运动类 | 描述 |'
- en: '| --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `CMMotionManager` | This class defines a manager class that encapsulates
    measurements of motion data. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `CMMotionManager` | 此类定义了一个封装运动数据测量的管理类。 |'
- en: '| `CMAccelerometerData` | This class records measurement of device acceleration
    and gathers data from the accelerometer for each of its three axes. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `CMAccelerometerData` | 此类记录设备加速度的测量，并为每个轴收集加速度计的数据。|'
- en: '| `CMDeviceMotion` | This captures device motion data from both the accelerometer
    and gyroscope. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `CMDeviceMotion` | 这捕获来自加速度计和陀螺仪的设备运动数据。|'
- en: '| `CMAttitude` | This is contained as part of the `CMDeviceMotion` class and
    contains properties that give different measurements of attitude, including the
    following: roll, pitch, and yaw. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `CMAttitude` | 这包含在`CMDeviceMotion`类中，包含不同的姿态测量属性，包括以下内容：俯仰、偏航和横滚。|'
- en: '| `CMGyroData` | This class records the devices rate of rotation along its
    three spatial axes from the gyroscope. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `CMGyroData` | 此类记录设备沿其三个空间轴的旋转速率，来自陀螺仪。|'
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The iOS Simulator does not support the Accelerometer and Gyroscope features,
    so in the event that you want to run the examples shown in this appendix, you
    will need to deploy them to your iPhone device.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: iOS模拟器不支持加速度计和陀螺仪功能，因此如果您想运行本附录中显示的示例，您需要将它们部署到您的iPhone设备上。
- en: See also
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using the shake gesture with the touch interface* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用触摸界面与摇动手势的技巧*'
- en: The *Working with the iOS device gyroscope* recipe
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用iOS设备陀螺仪的技巧*'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装iOS SDK开发工具") *使用Xcode创建iOS项目*技巧中，*获取和安装iOS SDK开发工具*
- en: Working with the iOS device gyroscope
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用iOS设备陀螺仪
- en: In this recipe we will learn how to use the features of the Gyroscope events
    of the iOS device.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技巧中，我们将学习如何使用iOS设备陀螺仪事件的功能。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We have looked at how to use the iOS devices accelerometer and modify the views
    background color based on the orientation of the axes. In this recipe we will
    look at how to incorporate the gyroscope features.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何使用iOS设备的加速度计并根据轴的朝向修改视图的背景颜色。在这个技巧中，我们将探讨如何结合陀螺仪功能。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下简单步骤操作：
- en: Open the `AccelGyroExample.xcodeproj` project file.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`AccelGyroExample.xcodeproj`项目文件。
- en: 'Open the `ViewController.m` implementation file and modify the `viewDidLoad`
    method as shown in the following highlighted code snippet:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ViewController.m`实现文件，并按以下突出显示的代码片段修改`viewDidLoad`方法：
- en: '[PRE9]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, create the following code sections, as specified in the following code
    snippet:'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如以下代码片段中指定的那样：
- en: '[PRE10]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Change the deployment target to your iOS device.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将部署目标更改为您的iOS设备。
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**产品** | **运行**从**产品**菜单或通过按*Command* + *R*来构建和运行应用程序。
- en: When the compilation completes, the application will be displayed onto your
    iOS device. Try moving your device in all directions to see the background color
    start cycling through the various colors.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译完成后，应用程序将显示在您的iOS设备上。尝试将您的设备向所有方向移动，以查看背景颜色开始循环显示各种颜色。
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: What we have done in this recipe is added code to determine by using the `#Ifdef
    __IPHONE_4_0` directive if the device currently in use is an iPhone 4\. If this
    is the case, it then checks to see if the device supports the gyroscope feature
    and a Boolean status `YES` is returned; otherwise `NO` is returned.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技巧中，我们添加了代码，使用`#Ifdef __IPHONE_4_0`指令来确定当前使用的设备是否为iPhone 4。如果是这种情况，它将检查设备是否支持陀螺仪功能，并返回布尔状态`YES`；否则返回`NO`。
- en: Next, we set up our `UIAccelerometer` delegate and update intervals to be twice
    per second in order to request updates. We then make a call to our `isGyroscopeAvailable`
    function to check to see if the gyroscope feature is supported.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置我们的`UIAccelerometer`代理并更新间隔为每秒两次，以便请求更新。然后我们调用我们的`isGyroscopeAvailable`函数来检查陀螺仪功能是否受支持。
- en: Finally, we call the `startGyroUpdatesToQueue` function and add a handler to
    call our `doGryroRotation` function that then updates the alpha blend color of
    our view. If no gyroscope feature is supported, this is logged out to the debug
    window.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们调用`startGyroUpdatesToQueue`函数，并添加一个处理程序来调用我们的`doGryroRotation`函数，然后更新我们视图的alpha混合颜色。如果设备不支持陀螺仪功能，这将在调试窗口中记录下来。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To start receiving and handling rotation-rate data for the gyroscope feature,
    you need to create an instance of the `CMMotionManager` class and call one of
    the following methods to it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始接收和处理陀螺仪功能的旋转速率数据，您需要创建`CMMotionManager`类的一个实例，并调用以下方法之一。
- en: 'The following image shows how the iPhone responds to changes on its three axes
    when the iPhone is tilted. Under normal gravity, each of these values will be
    between -1 and +1 with a value of 0 being the middle center point. Moving the
    phone in a rapid motion will increase these values:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了当iPhone倾斜时，iPhone对其三个轴的变化响应。在正常重力下，这些值将在-1和+1之间，0值是中间中心点。快速移动手机会增加这些值：
- en: '![How it works…](img/3349OT_ADX_07.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/3349OT_ADX_07.jpg)'
- en: 'The following table explains each of the method calls relating to the `CMMotionManager`
    class:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了与`CMMotionManager`类相关的每个方法调用：
- en: '| CMMotionManager methods | Description |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| CMMotionManager方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `startGyroUpdates` | When this method is called, Core Motion kicks in and
    continuously updates the `gyroData` property of the `CMMotionManager` class with
    the latest measurement of activity. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `startGyroUpdates` | 当调用此方法时，Core Motion开始工作，并持续更新`CMMotionManager`类的`gyroData`属性，以获取最新的活动测量值。
    |'
- en: '| `startGyroUpdatesToQueue:withHandler` | Before calling this method, you need
    to ensure that you have set the update interval of the `gyroUpdateInterval` property.When
    this method is called, it creates an `NSOperationQueue` event that queues the
    gyroscope event that then fires when the update interval has been reached, then
    calls the function and passes it the latest gyroscope data. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `startGyroUpdatesToQueue:withHandler` | 在调用此方法之前，您需要确保已设置`gyroUpdateInterval`属性的更新间隔。当调用此方法时，它创建一个`NSOperationQueue`事件，将陀螺仪事件排队，然后在达到更新间隔时触发，然后调用函数并传递最新的陀螺仪数据。
    |'
- en: '| `stopGyroUpdates` | This method turns off the Core Motion sensors and stops
    all updates of motion data. It is a good idea to always stop gyro updates as this
    will save battery power. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `stopGyroUpdates` | 此方法关闭Core Motion传感器并停止所有运动数据的更新。始终停止陀螺仪更新是一个好主意，因为这可以节省电池电量。
    |'
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to find out more information about the `CoreMotion` class,
    you can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于`CoreMotion`类的信息，可以参考位于链接[http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html)的Apple开发者文档。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using the shake gesture with the touch interface* recipe
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用触摸界面进行摇动手势*配方'
- en: The *Sensing movement with the accelerometer input* recipe
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用加速度计输入检测运动*配方'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Xcode创建iOS项目](ch01.html "第1章。获取和安装iOS SDK开发工具")中的*使用Xcode创建iOS项目*配方，*获取和安装iOS
    SDK开发工具*'
