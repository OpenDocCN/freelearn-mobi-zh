- en: Appendix A. Exploring the MultiTouch Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this appendix, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Sensing the movement and device orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the shake gesture with the touch interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device touches with the touch interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensing movement with the accelerometer input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the core motion framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the iOS device gyroscope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Apple iOS device's primary interface with which you communicate is its large
    Multi touch display. Since there is no physical keyboard attached, everything
    is done via the screen to allow you to interact with your applications in a more
    natural way. Any object can be moved around the screen, zoomed in and out, and
    scrolled up and down using simple gestures.
  prefs: []
  type: TYPE_NORMAL
- en: In this appendix, we will see how easy it is to incorporate both single touch
    and multi touch support into our applications, to detect when the iOS device orientation
    has changed as well as how to handle and respond to shake motions, before finally
    learning about the accelerometer and the gyroscope.
  prefs: []
  type: TYPE_NORMAL
- en: Sensing the movement and device orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to detect the current orientation of the iOS
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Single View Application Project and name it `OrientationExample`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `hasOrientationChanged` method as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try changing the different views of orientation by pressing the *Command* +
    ;left arrow and *Command* + right arrow if you are running this within the iOS
    Simulator as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_ADX_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we covered in this recipe were the steps to create our example application.
    We began by telling our iOS device to start generating the notifications for each
    of the changes in the orientation that the device will take. We then set up an
    observer to the `UIDeviceOrientationDidChangeNotification` class that gets fired
    each time the device changes its orientation. Next, we determined the current
    orientation that our iOS device is in by deriving this from the `UIDeviceOrientation`
    class. Finally, we proceeded and determined what the current orientation is by
    using the `switch…case` statements and then changed the background color of our
    view.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to determine which way the iOS device is facing, you can get this
    information by using the `UIDevice` class and then using its orientation property.
    When registering the `UIDeviceOrientationDidChangeNotificaiton` notification method
    of the `UIDevice` class, you are not only told when the iOS device has been rotated
    between portrait and landscape views but also if the iOS device is facing up or
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIDevice` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIDevice_Class/Reference/UIDevice.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the shake gesture with the touch interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the shake gesture with the touch interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to detect and handle iOS device motion events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Single View Application, and name it `ShakeExample`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `viewDidLoad` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the following code sections as specified in the code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the deployment target to your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the compilation completes, the application will be displayed onto your
    iOS device. Try shaking the device to see the alert messages as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_ADX_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we covered in this recipe were the steps to create our example application.
    We initialized our view background color to green in the `viewDidLoad` method
    to indicate that no shake has occurred and set our view to become the first responder
    by setting the `becomeFirstResponder` method in order to support the motion events.
    If this method is not included, none of the motion events will fire and the application
    will not behave as designed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we needed to make our view controller the first responder in the `UIResponder`
    responder chain by overriding the `motionEnded:motion:withEvent` method which
    will show an alert message when the shake gesture ends. Finally, we implemented
    the `motionBegan` method, which determines when a shake occurs and then sets the
    background color of our view to yellow. When the device determines that the motion
    has stopped, the `motionEnded` method is called and that is where we can detect
    what type of event happened. In this case, we declare and instantiate an instance
    of the `UIAlertView` class and display a message to the user alerting them that
    the shake has ended. The method `motionCancelled` is called if the system thinks
    that the motion is not a shake. A device shake is determined to be approximately
    a second or so in length and then a call is made to the `motionEnded` method to
    set the background color of our view controller to black.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIResponder` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the iOS device is shaken, the system makes use of the accelerometer and
    then interprets the accelerometer data to see if it is a shake instruction.
  prefs: []
  type: TYPE_NORMAL
- en: If this has been determined to be a shake gesture, the system creates a `UIEvent`
    object which represents this gesture and then sends the object to the currently
    active application for processing. Using the shake gesture on the iPhone is a
    lot simpler to use than touch events. Events are still generated when a motion
    starts or stops and it is even possible for you to track individual motions, as
    you would do with touch events.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to make your applications incorporate and handle the iOS shake gesture,
    this can be easily accomplished by implementing the following three methods as
    shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `motionBegan:motion:withEvent:` | This method is called when a motion event
    begins. |'
  prefs: []
  type: TYPE_TB
- en: '| `motionEnded:motion:withEvent:` | This method is called when a motion event
    has ended. |'
  prefs: []
  type: TYPE_TB
- en: '| `motionCancelled:motion:withEvent:` | This method is called if the system
    thinks that the motion is not a shake. Shakes are determined to be approximately
    a second or so in length. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Motion events were first introduced in the iOS 3.0 SDK, with shaking motions
    currently being interpreted as gestures which then move on to become motion events.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Sensing movement and device orientation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting device touches with the touch interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to detect and handle the various touch events
    of the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Single View Application and name it `TapExample`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the Project Navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the `touchedBegan` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that you have changed the deployment target to your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu, or alternatively by pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the compilation completes, the application will be displayed onto your
    iOS device. Try tapping the device screen to see the view background change as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_ADX_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we covered in this recipe were the steps to create our example application.
    We then implemented the `touchesBegan:touches` method which determines when a
    gesture has been made on the iOS device and then updates our views background
    color based on the total number of taps made.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIView` and `UIViewController` classes are all part of the `UIResponder`
    class as they can respond to and handle events within the view. By implementing
    any of the following methods, you are then able to override the methods used by
    your view or view controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '`- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event`![There''s
    more…](img/3349OT_ADX_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of the *UITouch* touches that get received has a phase, location, the
    view in which the touch occurred, a timestamp, and a count of the number of taps
    that occurred. In the following table we explain what happens when each of the
    touch phases are fired:'
  prefs: []
  type: TYPE_NORMAL
- en: '| UITouch events | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `UITouchPhaseBegan` | Occurs at the beginning of the touch life cycle when
    the user has touched an area of the iPhone screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `UITouchPhaseMoved` | Occurs when the user has moves their finger or fingers
    around the screen of the iPhone. |'
  prefs: []
  type: TYPE_TB
- en: '| `UITouchPhaseStationary` | Occurs when the user has paused on an area of
    the screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `UITouchPhaseEnd` | Occurs when the user has removed their fingers from the
    screen of the iPhone. |'
  prefs: []
  type: TYPE_TB
- en: '| `UITouchPhaseCancelled` | Occurs when the iOS device determines that something
    has happened and needs to abort the gesture. An example of this can be due to
    a system interruption caused when you are receiving an incoming phone call or
    when an application or window view is no longer active. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information on the `UIResponder` class, you
    can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIResponder_Class/Reference/Reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the shake gesture with the touch interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Sensing movement and device orientation* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensing movement with the accelerometer input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use the features of the accelerometer events
    of the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Single View Application, and name it `AccelGyroExample`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `AccelGyroExample` project from the Project Navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select your project from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Binary With Libraries** disclosure triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** button and select the **CoreMotion.framework** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Add** button to add the framework to your project.![How
    to do it...](img/3349_ADX_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    accessing the accelerometer device features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `ViewController.h` interface file and create the following highlighted
    entries as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `ViewController.m` implementation file, and add the following highlighted
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `viewDidLoad` method as shown by the highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `handleAcceleration` method as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the deployment target to your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by choosing **Product | Run** from the **Product**
    menu, or alternatively by pressing *Command + R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the application will be displayed onto your
    iOS device. Try moving your device in all directions and see the background color
    change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have done in this recipe is implement the `UIAccelerometerDelegate`
    protocol so that we can use this within our `ViewController.m` implementation
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We then declare an instance `CMMotionManager` of variable `motionManager` that
    will enable us to use the accelerometer and gyroscope features. We then need to
    synthesize our property we declared within our `ViewController.h` interface file.
    If we don't declare this, we will receive a warning error messages which can cause
    unexpected application errors.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we declare our methods that will handle the accelerometer and the gyroscope
    features. In the first part, we declare a delegate to the `UIAccelerometer` class,
    and then derive the values for the x, y, and z which will be used to determine
    the current device orientation and set the background color accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: As a final step, we set the background alpha property from transparent to opaque
    depending on whether the value is within the range 0.0 to 1.0, where 0.0 represents
    totally transparent, and 1.0 represents opaque.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you set the alpha property of a view, it only affects the current view
    and does not affect any of its embedded sub-views. The `fabs` function is a C/C++
    library function that returns the absolute value of X.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to find out more information on the `CoreMotion` class, you
    can refer to the Apple Developer documentation located at the following link provided:
    [http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far you have been focusing on how to detect when a user performs taps and
    how to detect device shakes. We now move on to the really exciting stuff, not
    that what you have not already covered is exciting, but the iPhone's accelerometer
    is much more powerful than you think and is capable of giving you live data for
    all three dimensions of the (x, y, and z) axes when the iOS device is tilted.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS's device accelerometer data is delivered via the `UIAccelerometer` class
    and the delegate `accelerometer:didAccelerate` method which provides you with
    the data for each of the three axes, each being of `UIAcceleration` class. Each
    of the values returned have a range between -1 and **+**1 with 0 being the middle
    center point. When the device is moved or tilted, these values increase or decrease.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The iPhone 4 and above versions adds another sensor that is, a three-axis gyroscope
    and when combining the gyroscope with the accelerometer, this gives the iPhone
    4 six axes on which it can operate and was designed to make the iPhone 4 more
    sensitive, responsive, and powerful for gaming.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the core motion framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Core Motion framework is a system framework which obtains motion data from
    sensors on the iOS device. The application can then use these values. Handling
    of the sensor data is handled within the Core Motion''s own thread and it detects
    the motion events for the accelerometer and the gyroscope (which is currently
    only available on the iPhone 4). This can be illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the core motion framework](img/3349OT_ADX_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table describes each of the components that make up the Core
    Motion framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Core Motion Classes | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `CMMotionManager` | This class defines a manager class that encapsulates
    measurements of motion data. |'
  prefs: []
  type: TYPE_TB
- en: '| `CMAccelerometerData` | This class records measurement of device acceleration
    and gathers data from the accelerometer for each of its three axes. |'
  prefs: []
  type: TYPE_TB
- en: '| `CMDeviceMotion` | This captures device motion data from both the accelerometer
    and gyroscope. |'
  prefs: []
  type: TYPE_TB
- en: '| `CMAttitude` | This is contained as part of the `CMDeviceMotion` class and
    contains properties that give different measurements of attitude, including the
    following: roll, pitch, and yaw. |'
  prefs: []
  type: TYPE_TB
- en: '| `CMGyroData` | This class records the devices rate of rotation along its
    three spatial axes from the gyroscope. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The iOS Simulator does not support the Accelerometer and Gyroscope features,
    so in the event that you want to run the examples shown in this appendix, you
    will need to deploy them to your iPhone device.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the shake gesture with the touch interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with the iOS device gyroscope* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the iOS device gyroscope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to use the features of the Gyroscope events
    of the iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have looked at how to use the iOS devices accelerometer and modify the views
    background color based on the orientation of the axes. In this recipe we will
    look at how to incorporate the gyroscope features.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `AccelGyroExample.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `ViewController.m` implementation file and modify the `viewDidLoad`
    method as shown in the following highlighted code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the following code sections, as specified in the following code
    snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the deployment target to your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run the application by choosing **Product** | **Run** from the **Product**
    menu or alternatively by pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the compilation completes, the application will be displayed onto your
    iOS device. Try moving your device in all directions to see the background color
    start cycling through the various colors.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have done in this recipe is added code to determine by using the `#Ifdef
    __IPHONE_4_0` directive if the device currently in use is an iPhone 4\. If this
    is the case, it then checks to see if the device supports the gyroscope feature
    and a Boolean status `YES` is returned; otherwise `NO` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set up our `UIAccelerometer` delegate and update intervals to be twice
    per second in order to request updates. We then make a call to our `isGyroscopeAvailable`
    function to check to see if the gyroscope feature is supported.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we call the `startGyroUpdatesToQueue` function and add a handler to
    call our `doGryroRotation` function that then updates the alpha blend color of
    our view. If no gyroscope feature is supported, this is logged out to the debug
    window.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start receiving and handling rotation-rate data for the gyroscope feature,
    you need to create an instance of the `CMMotionManager` class and call one of
    the following methods to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how the iPhone responds to changes on its three axes
    when the iPhone is tilted. Under normal gravity, each of these values will be
    between -1 and +1 with a value of 0 being the middle center point. Moving the
    phone in a rapid motion will increase these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3349OT_ADX_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table explains each of the method calls relating to the `CMMotionManager`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| CMMotionManager methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `startGyroUpdates` | When this method is called, Core Motion kicks in and
    continuously updates the `gyroData` property of the `CMMotionManager` class with
    the latest measurement of activity. |'
  prefs: []
  type: TYPE_TB
- en: '| `startGyroUpdatesToQueue:withHandler` | Before calling this method, you need
    to ensure that you have set the update interval of the `gyroUpdateInterval` property.When
    this method is called, it creates an `NSOperationQueue` event that queues the
    gyroscope event that then fires when the update interval has been reached, then
    calls the function and passes it the latest gyroscope data. |'
  prefs: []
  type: TYPE_TB
- en: '| `stopGyroUpdates` | This method turns off the Core Motion sensors and stops
    all updates of motion data. It is a good idea to always stop gyro updates as this
    will save battery power. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to find out more information about the `CoreMotion` class,
    you can refer to the Apple Developer documentation located on the link [http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html](http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the shake gesture with the touch interface* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Sensing movement with the accelerometer input* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
