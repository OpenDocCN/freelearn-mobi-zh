["```swift\nlet en = 42\nen.littleEndian\nen.bigEndian \n```", "```swift\nlet en = 42\nprint(String(en, radix:2))\nprint(String(53, radix:2)) \n```", "```swift\n101010\n110101 \n```", "```swift\nprint(String(53, radix:2))\nprint(String(123456, radix:2)) \n```", "```swift\n110101\n11110001001000000 \n```", "```swift\nextension BinaryInteger {\n    func binaryFormat(_ nibbles: Int) -> String {\n        var number = self\n        var binaryString = \"\"\n        var counter = 0\n        let totalBits = nibbles*4\n        for _ in (1...totalBits).reversed() {\n            binaryString.insert(contentsOf: \"\\(number & 1)\", at:\nbinaryString.startIndex)\n            number >>= 1\n            counter += 1\n            if counter % 4 == 0 && counter < totalBits {\n                binaryString.insert(contentsOf: \" \", at: binaryString.startIndex)\n            }\n        }\n        return binaryString\n    }\n} \n```", "```swift\nprint(53.binaryFormat(2))\nprint(230.binaryFormat(2)) \n```", "```swift\n0011 0101\n1110 0110 \n```", "```swift\nlet numberOne: Int8 = 42\nlet numberTwo: Int8 = 11\nprint(\"\\(numberOne) = \\(numberOne.binaryFormat(2))\")\nprint(\"\\(numberTwo) = \\(numberTwo.binaryFormat(2))\")\nlet andResults = numberOne & numberTwo\nprint(\"\\(andResults) = \\(andResults.binaryFormat(2))\") \n```", "```swift\n42 = 0010 1010\n11 = 0000 1011\n10 = 0000 1010 \n```", "```swift\nlet numberOne: Int8 = 42\nlet numberTwo: Int8 = 11\nprint(\"\\(numberOne) = \\(numberOne.binaryFormat(2))\")\nprint(\"\\(numberTwo) = \\(numberTwo.binaryFormat(2))\")\nlet orResults = numberOne | numberTwo\nprint(\"\\(orResults) = \\(orResults.binaryFormat(2))\") \n```", "```swift\n42 = 0010 1010\n11 = 0000 1011\n43 = 0010 1011 \n```", "```swift\nlet numberOne: Int8 = 42\nlet numberTwo: Int8 = 11\nprint(\"\\(numberOne) = \\(numberOne.binaryFormat(2))\")\nprint(\"\\(numberTwo) = \\(numberTwo.binaryFormat(2))\")\nlet xorResults = numberOne ^ numberTwo\nprint(\"\\(xorResults) = \\(xorResults.binaryFormat(2))\") \n```", "```swift\n42 = 0010 1010\n11 = 0000 1011\n33 = 0010 0001 \n```", "```swift\nlet numberOne: Int8 = 42\nlet notResults = ~numberOne\nprint(\"\\(notResults) = \\(notResults.binaryFormat(2))\") \n```", "```swift\n-43 = 1101 0101 \n```", "```swift\nlet numberOne: UInt8 = 24\nlet resultsLeft = numberOne << 1\nlet resultsRight = numberOne >> 1\nlet resultsLeft3 = numberOne << 3\nlet resultsRight4 = numberOne >> 4\nprint(\"24  \\(numberOne.binaryFormat(2))\")\nprint(\"<<1 \\(resultsLeft.binaryFormat(2))\")\nprint(\">>1 \\(resultsRight.binaryFormat(2))\")\nprint(\"<<3 \\(resultsLeft3.binaryFormat(2))\")\nprint(\">>4 \\(resultsRight4.binaryFormat(2))\") \n```", "```swift\n24  0001 1000\n<<1 0011 0000\n>>1 0000 1100\n<<3 1100 0000\n>>4 0000 0001 \n```", "```swift\nlet b: UInt8 = UInt8.max +1 \n```", "```swift\nlet add: UInt8 = UInt8.max &+ 1\nlet sub: UInt8 = UInt8.min &- 1\nlet mul: UInt8 = 42 &* 10\nprint(\"add: \\(add): \\(add.binaryFormat(2))\")\nprint(\"sub: \\(sub): \\(sub.binaryFormat(2))\")\nprint(\"mul: \\(mul): \\(mul.binaryFormat(2))\") \n```", "```swift\nadd: 0: 0000 0000\nsub: 255: 1111 1111\nmul: 164: 1010 0100 \n```", "```swift\nstruct MyPoint {\n    var x = 0\n    var y = 0\n} \n```", "```swift\nextension MyPoint {\n    static func + (left: MyPoint, right: MyPoint) -> MyPoint {\n        return MyPoint(x: left.x + right.x, y: left.y + right.y)\n    }\n    static func += (left: inout MyPoint, right: MyPoint) {\n        left.x += right.x\n        left.y += right.y\n    }\n    static prefix func -(point: MyPoint) -> MyPoint {\n        return MyPoint(x: -point.x, y: -point.y)\n    }\n} \n```", "```swift\nlet firstPoint = MyPoint(x: 1, y: 4)\nlet secondPoint = MyPoint(x: 5, y: 10)\nvar combined = firstPoint + secondPoint\nprint(\"\\(combined.x), \\(combined.y)\")\ncombined += firstPoint\nprint(\"\\(combined.x), \\(combined.y)\")\nlet inverse = -combined\nprint(\"\\(inverse.x), \\(inverse.y)\") \n```", "```swift\ninfix operator •\nprefix operator •• \n```", "```swift\nextension MyPoint {\n    static func • (left: MyPoint, right: MyPoint) -> MyPoint {\n        return MyPoint(x: left.x * right.x, y: left.y * right.y)\n    }\n\n    static prefix func •• (point: MyPoint) -> MyPoint {\n        return MyPoint(x: point.x * point.x, y: point.y * point.y)\n    }\n} \n```", "```swift\nlet firstPoint = MyPoint(x: 1, y: 4)\nlet secondPoint = MyPoint(x: 5, y: 10)\nlet multiplied = firstPoint • secondPoint\nprint(\"\\(multiplied.x), \\(multiplied.y)\")\nlet squared = ••secondPoint\nprint(\"\\(squared.x), \\(squared.y)\") \n```"]