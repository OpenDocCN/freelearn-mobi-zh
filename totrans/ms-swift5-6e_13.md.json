["```swift\nvar arrayOne = [1, 2, 3, 4, 5, 6]\nprint(arrayOne[3])  //Displays '4'\narrayOne[3] = 10\nprint(arrayOne[3])  //Displays '10' \n```", "```swift\narrayOne.append(7)  //append 7 to the end of the array\narrayOne.count  //returns the number of items in an array \n```", "```swift\nclass MyNames {\n    private var names = [\"Jon\", \"Kailey\", \"Kara\"] \n    subscript(index: Int) -> String {\n        get {\n            return names[index]\n        }\n        set {\n            names[index] = newValue\n        }\n    }\n} \n```", "```swift\nvar nam = MyNames()\nprint(nam[0])  //Displays 'Jon'\nnam[0] = \"Buddy\"\nprint(nam[0])  //Displays 'Buddy' \n```", "```swift\n//No getter/setters implicitly declared\nsubscript(index: Int) -> String {\n    return names[index]\n} \n```", "```swift\n//Declaring only a getter\nsubscript(index: Int) -> String {\n    get {\n        return names[index]\n    }\n} \n```", "```swift\nstruct MathTable { \n    var num: Int\n    subscript(index: Int) -> Int { \n        return num * index\n    }\n} \n```", "```swift\nvar table = MathTable(num: 5)\nprint(table[4]) \n```", "```swift\nstruct Hello {\n    subscript (name: String) -> String { \n        return \"Hello \\(name)\"\n    }\n} \n```", "```swift\nlet greeting = Hello[\"Jon\"] \n```", "```swift\nstruct Hello {\n    static subscript (name: String) -> String { \n        return \"Hello \\(name)\"\n    }\n} \n```", "```swift\nlet greeting = Hello[\"Jon\"] \n```", "```swift\nstruct MathTable { \n    var num: Int\n    subscript(multiply index: Int) -> Int { \n        return num * index\n    }\n    subscript(add index: Int) -> Int { \n        return num + index\n    }\n} \n```", "```swift\nvar table = MathTable(num: 5)\nprint(table[multiply: 4])  //Displays 20 because 5*4=20\nprint(table[add: 4])  //Displays 9 because 5+4=9 \n```", "```swift\nstruct TicTacToe {\n    var board = [[\"\",\"\",\"\"],[\"\",\"\",\"\"],[\"\",\"\",\"\"]]\n    subscript(x: Int, y: Int) -> String { \n        get {\n            return board[x][y]\n        }\n        set {\n            board[x][y] = newValue\n        }\n    }\n} \n```", "```swift\nvar board = TicTacToe()\nboard[1,1] = \"x\"\nboard[0,0] = \"o\" \n```", "```swift\nstruct SayHello {\n    subscript(messageText message: String, messageName name: String, number: Int) -> [String]{\n        var retArray: [String] = []\n        for _ in 0..<number {\n            retArray.append(\"\\(message) \\(name)\")\n        }\n        return retArray\n    }\n} \n```", "```swift\nsubscript(messageText message: String, messageName name: String, number: Int) -> [String] \n```", "```swift\nvar message = SayHello()\nvar ret = message[messageText:\"Bonjour\", messageName:\"Jon\", number:5] \n```", "```swift\nstruct BaseballTeam { \n    let city: String\n    let nickName: String\n} \n```", "```swift\nfunc fullname() -> String { \n    return \"\\(city) \\(nickName)\"\n} \n```", "```swift\nvar redsox = BaseballTeam(city: \"Boston\", nickName: \"Red Sox\") \nlet city = redsox.city\nlet fullname = redsox.fullname() \n```", "```swift\n@dynamicMemberLookup\nstruct BaseballTeam {\n    let city: String\n    let nickName: String\n    let wins: Double\n    let losses: Double\n    let year: Int\n} \n```", "```swift\nsubscript(dynamicMember key: String) -> String { \n    switch key {\n    case \"fullname\":\n        return \"\\(city) \\(nickName)\" \n    case \"percent\":\n        let per = wins/(wins+losses) return String(per)\n    default:\n        return \"Unknown request\"\n    }\n} \n```", "```swift\nvar redsox = BaseballTeam(city: \"Boston\", nickName: \"Red Sox\", wins: 108, losses: 54, year: 2018)\nprint(\"The \\(redsox.fullname) won \\(redsox.percent) of their games in \\(redsox.year)\") \n```", "```swift\nclass MyNames {\n    private var names:[String] = [\"Jon\", \"Kailey\", \"Kara\"] \n    var number: Int {\n        get {\n            return names.count\n        }\n    }\n    subscript(add name: String) -> String { \n        names.append(name)\n            return name\n    }\n    subscript(index: Int) -> String { \n        get { \n            return names[index]\n        }\n        set {\n            names[index] = newValue\n        }\n    }\n} \n```", "```swift\nsubscript(add name: String) -> String { \n    names.append(name)\n    return name\n} \n```", "```swift\nfunc append(name: String) { \n    names.append(name)\n} \n```"]