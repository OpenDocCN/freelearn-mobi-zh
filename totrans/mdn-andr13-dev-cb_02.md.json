["```kt\n    @Composable\n    ```", "```kt\n    fun EditTextExample() {\n    ```", "```kt\n        OutlinedTextField()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun EditTextExample() {\n    ```", "```kt\n        OutlinedTextField(\n    ```", "```kt\n            value = \"\",\n    ```", "```kt\n            onValueChange = {},\n    ```", "```kt\n            label = { Text(stringResource(id =\n    ```", "```kt\n            R.string.sample)) },\n    ```", "```kt\n            modifier = Modifier\n    ```", "```kt\n                .fillMaxWidth()\n    ```", "```kt\n                .padding(top = 16.dp),\n    ```", "```kt\n            colors =\n    ```", "```kt\n                TextFieldDefaults.outlinedTextFieldColors(\n    ```", "```kt\n                    focusedBorderColor = Color.Blue,\n    ```", "```kt\n                    unfocusedBorderColor = Color.Black\n    ```", "```kt\n                )\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun NotOutlinedEditTextExample() {\n    ```", "```kt\n        TextField(\n    ```", "```kt\n            value = \"\",\n    ```", "```kt\n            onValueChange = {},\n    ```", "```kt\n            label = { Text(stringResource(id =\n    ```", "```kt\n            R.string.sample)) },\n    ```", "```kt\n            modifier = Modifier\n    ```", "```kt\n                .fillMaxWidth()\n    ```", "```kt\n                .padding(top = 8.dp, bottom = 16.dp),\n    ```", "```kt\n            colors =\n    ```", "```kt\n                TextFieldDefaults.outlinedTextFieldColors(\n    ```", "```kt\n                    focusedBorderColor = Color.Blue,\n    ```", "```kt\n                    unfocusedBorderColor = Color.Black\n    ```", "```kt\n                )\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun ButtonWithIcon() {\n    ```", "```kt\n        Button(onClick = {}) {\n    ```", "```kt\n            Icon(\n    ```", "```kt\n                painterResource(id =\n    ```", "```kt\n                    R.drawable.ic_baseline_shopping_bag_24                ),\n    ```", "```kt\n                contentDescription = stringResource(\n    ```", "```kt\n                    id = R.string.shop),\n    ```", "```kt\n                modifier = Modifier.size(20.dp)\n    ```", "```kt\n            )\n    ```", "```kt\n            Text(text = stringResource(id = R.string.buy),\n    ```", "```kt\n                Modifier.padding(start = 10.dp))\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CornerCutShapeButton() {\n    ```", "```kt\n        Button(onClick = {}, shape = CutCornerShape(10)) {\n    ```", "```kt\n            Text(text = stringResource(\n    ```", "```kt\n                id = R.string.cornerButton))  }}}}\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun RoundCornerShapeButton() {\n    ```", "```kt\n        Button(onClick = {}, shape =\n    ```", "```kt\n        RoundedCornerShape(10.dp)) {\n    ```", "```kt\n            Text(text = stringResource(\n    ```", "```kt\n                id = R.string.rounded))\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun ElevatedButtonExample() {\n    ```", "```kt\n        Button(\n    ```", "```kt\n            onClick = {},\n    ```", "```kt\n            elevation = ButtonDefaults.elevation(\n    ```", "```kt\n                defaultElevation = 8.dp,\n    ```", "```kt\n                pressedElevation = 10.dp,\n    ```", "```kt\n                disabledElevation = 0.dp\n    ```", "```kt\n            )\n    ```", "```kt\n        ) {\n    ```", "```kt\n            Text(text = stringResource(\n    ```", "```kt\n                id = R.string.elevated))\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun ImageViewExample() {\n    ```", "```kt\n        Image(\n    ```", "```kt\n            painterResource(id = R.drawable.android),\n    ```", "```kt\n            contentDescription = stringResource(\n    ```", "```kt\n                id = R.string.image),\n    ```", "```kt\n            modifier = Modifier.size(200.dp)\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n@Preview(showBackground = true)\n```", "```kt\n    data class City(\n    ```", "```kt\n        val id: Int,\n    ```", "```kt\n        @StringRes val nameResourceId: Int,\n    ```", "```kt\n        @DrawableRes val imageResourceId: Int\n    ```", "```kt\n    )\n    ```", "```kt\n    class CityDataSource {\n    ```", "```kt\n        fun loadCities(): List<City> {\n    ```", "```kt\n            return listOf<City>(\n    ```", "```kt\n                City(1, R.string.spain, R.drawable.spain),\n    ```", "```kt\n                City(2, R.string.new_york,\n    ```", "```kt\n                    R.drawable.newyork),\n    ```", "```kt\n                City(3, R.string.tokyo, R.drawable.tokyo),\n    ```", "```kt\n                City(4, R.string.switzerland,\n    ```", "```kt\n                    R.drawable.switzerland),\n    ```", "```kt\n                City(5, R.string.singapore,\n    ```", "```kt\n                    R.drawable.singapore),\n    ```", "```kt\n                City(6, R.string.paris, R.drawable.paris),\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Preview(showBackground = true)\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    private fun CityCardPreview() {\n    ```", "```kt\n        CityApp()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CityList(cityList: List<City>) {\n    ```", "```kt\n        LazyColumn {\n    ```", "```kt\n            items(cityList) { cities ->\n    ```", "```kt\n                CityCard(cities)\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CityCard(city: City) {\n    ```", "```kt\n        Card(modifier = Modifier.padding(10.dp),\n    ```", "```kt\n        elevation = 4.dp) {\n    ```", "```kt\n            Column {\n    ```", "```kt\n                Image(\n    ```", "```kt\n                    painter = painterResource(\n    ```", "```kt\n                        city.imageResourceId),\n    ```", "```kt\n                    contentDescription = stringResource(\n    ```", "```kt\n                        city.nameResourceId),\n    ```", "```kt\n                    modifier = Modifier\n    ```", "```kt\n                        .fillMaxWidth()\n    ```", "```kt\n                        .height(154.dp),\n    ```", "```kt\n                    contentScale = ContentScale.Crop\n    ```", "```kt\n                )\n    ```", "```kt\n                Text(\n    ```", "```kt\n                    text = LocalContext.current.getString(\n    ```", "```kt\n                        city.nameResourceId),\n    ```", "```kt\n                    modifier = Modifier.padding(16.dp),\n    ```", "```kt\n                    style = MaterialTheme.typography.h5\n    ```", "```kt\n                )\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n@Composable\nfun Card(\n    modifier: Modifier = Modifier,\n    shape: Shape = MaterialTheme.shapes.medium,\n    backgroundColor: Color = MaterialTheme.colors.surface,\n    contentColor: Color = contentColorFor(backgroundColor),\n    border: BorderStroke? = null,\n    elevation: Dp = 1.dp,\n    content: @Composable () -> Unit\n),\n```", "```kt\n    implementation \"com.google.accompanist:accompanist-pager:0.x.x\"\n    ```", "```kt\n    implementation \"com.google.accompanist:accompanist-pager-indicators:0.x.x\"\n    ```", "```kt\n    implementation 'androidx.Compose.material:material:1.x.x'\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CityTabCarousel(){}\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CityTabCarousel(\n    ```", "```kt\n        pages: MutableList<String> = arrayListOf(\n    ```", "```kt\n            \"Spain\",\n    ```", "```kt\n            \"New York\",\n    ```", "```kt\n            \"Tokyo\",\n    ```", "```kt\n            \"Switzerland\",\n    ```", "```kt\n            \"Singapore\",\n    ```", "```kt\n            \"Paris\" )) {. . .}\n    ```", "```kt\n    val context = LocalContext.current\n    ```", "```kt\n    var pagerState = rememberPagerState()\n    ```", "```kt\n    val coroutineScope = rememberCoroutineScope()\n    ```", "```kt\n    Column {\n    ```", "```kt\n        ScrollableTabRow(\n    ```", "```kt\n            selectedTabIndex = pagerState.currentPage,\n    ```", "```kt\n            indicator = { tabPositions ->\n    ```", "```kt\n                TabRowDefaults.Indicator(...)\n    ```", "```kt\n            },\n    ```", "```kt\n            edgePadding = 0.dp,\n    ```", "```kt\n            backgroundColor = Color(\n    ```", "```kt\n                context.resources.getColor(R.color.white,\n    ```", "```kt\n                    null)),\n    ```", "```kt\n        ) {\n    ```", "```kt\n            pages.forEachIndexed { index, title ->\n    ```", "```kt\n                val isSelected =\n    ```", "```kt\n                    pagerState.currentPage == index\n    ```", "```kt\n                TabHeader(\n    ```", "```kt\n                    title,\n    ```", "```kt\n                    isSelected,\n    ```", "```kt\n                    onClick = { coroutineScope.launch {\n    ```", "```kt\n                    pagerState.animateScrollToPage(index)\n    ```", "```kt\n                    } },\n    ```", "```kt\n                )\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n        HorizontalPager(\n    ```", "```kt\n            count = pages.size,\n    ```", "```kt\n            state = pagerState,\n    ```", "```kt\n            modifier = Modifier\n    ```", "```kt\n                .fillMaxWidth()\n    ```", "```kt\n                .fillMaxHeight()\n    ```", "```kt\n                .background(Color.White)\n    ```", "```kt\n        ) { page ->\n    ```", "```kt\n            Text(\n    ```", "```kt\n                text = \"Display City Name:\n    ```", "```kt\n                    ${pages[page]}\",\n    ```", "```kt\n                modifier = Modifier.fillMaxWidth(),\n    ```", "```kt\n                style = TextStyle(\n    ```", "```kt\n                    textAlign = TextAlign.Center\n    ```", "```kt\n                )\n    ```", "```kt\n            )\n    ```", "```kt\n        }\n    ```", "```kt\nonClick = { coroutineScope.launch { pagerState.animateScrollToPage(index) } }\n```", "```kt\n    @Composable\n    ```", "```kt\n    fun CollapsingToolbarExample() {...}\n    ```", "```kt\n    private val height = 260.dp\n    ```", "```kt\n    private val titleToolbar = 50.dp\n    ```", "```kt\n    @Composable\n    ```", "```kt\n    fun CollapsingToolbarExample() {\n    ```", "```kt\n        val scrollState: ScrollState =\n    ```", "```kt\n            rememberScrollState(0)\n    ```", "```kt\n        val headerHeight = with(LocalDensity.current) {\n    ```", "```kt\n            height.toPx() }\n    ```", "```kt\n        val toolbarHeight = with(LocalDensity.current) {\n    ```", "```kt\n            titleToolbar.toPx() }\n    ```", "```kt\n        Box(\n    ```", "```kt\n            modifier = Modifier.fillMaxSize()\n    ```", "```kt\n        ) {\n    ```", "```kt\n            CollapsingHeader(scrollState, headerHeight)\n    ```", "```kt\n            FactsAboutNewYork(scrollState)\n    ```", "```kt\n            OurToolBar(scrollState, headerHeight,\n    ```", "```kt\n                toolbarHeight)\n    ```", "```kt\n            City()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    Box(\n    ```", "```kt\n        Modifier\n    ```", "```kt\n            .fillMaxSize()\n    ```", "```kt\n            .background(\n    ```", "```kt\n                brush = Brush.verticalGradient(\n    ```", "```kt\n                    colors = listOf(Color.Transparent,\n    ```", "```kt\n                    Color(0xFF6D38CA)),\n    ```", "```kt\n                    startY = 1 * headerHeight / 5\n    ```", "```kt\n                )\n    ```", "```kt\n            )\n    ```", "```kt\n    )\n    ```", "```kt\n    ...\n    ```", "```kt\n    AnimatedVisibility(\n    ```", "```kt\n        visible = showToolbar,\n    ```", "```kt\n        enter = fadeIn(animationSpec = tween(200)),\n    ```", "```kt\n        exit = fadeOut(animationSpec = tween(200))\n    ```", "```kt\n    ) {\n    ```", "```kt\n    ...\n    ```", "```kt\n    Image(painter = , contentDescription = )\n    ```", "```kt\n    Image(\n    ```", "```kt\n        modifier = modifier\n    ```", "```kt\n        painter = painterResource(city.imageResourceId),\n    ```", "```kt\n        contentDescription =\n    ```", "```kt\n            stringResource(R.string.city_images))\n    ```", "```kt\n    )\n    ```", "```kt\n    <string name=\"city_images\">City Images</string>\n    ```", "```kt\n    ...\n    ```", "```kt\n    modifier = Modifier\n    ```", "```kt\n        .padding(18.dp)\n    ```", "```kt\n        .semantics { heading() }\n    ```", "```kt\n    ...\n    ```", "```kt\n@Composable\nfun CheckableSwitch(){\n    var checked by remember { mutableStateOf(false) }\n    Switch(checked = checked, onCheckedChange = {} )\n}\n@Composable\nfun NonCheckableSwitch(){\n    var checked by remember { mutableStateOf(false) }\n    Switch(checked = checked, onCheckedChange = null )\n}\n```", "```kt\n    @Composable\n    ```", "```kt\n    fun CircleProgressIndicatorExample(tracker: Float, progress: Float) {\n    ```", "```kt\n        val circleColors = listOf(\n    ```", "```kt\n            colorResource(id = R.color.purple_700),\n    ```", "```kt\n            colorResource(id = R.color.teal_200)\n    ```", "```kt\n        )\n    ```", "```kt\nCanvas(\n    modifier = Modifier\n        .size(200.dp)\n        .padding(8.dp),\n    onDraw = {\n        this.drawIntoCanvas {\n            drawArc(\n                color = colorSecondary,\n                startAngle = -90f,\n                sweepAngle = 360f,\n                useCenter = false,\n                style = Stroke(width = 55f, cap =\n                    StrokeCap.Butt),\n                size = Size(size.width, size.height)\n            )\ncolorResource(id = R.color.teal_200)\n . . .\n```", "```kt\n    drawArc(\n    ```", "```kt\n        brush = Brush.linearGradient(colors =\n    ```", "```kt\n            circleColors),\n    ```", "```kt\n        startAngle = -90f,\n    ```", "```kt\n        sweepAngle = progress(tracker, progress),\n    ```", "```kt\n        useCenter = false,\n    ```", "```kt\n        style = Stroke(width = 55f, cap =\n    ```", "```kt\n            StrokeCap.Round),\n    ```", "```kt\n        size = Size(size.width, size.height)\n    ```", "```kt\n    ) . . .\n    ```", "```kt\n    . . .\n    ```", "```kt\n    private fun progress(tracker: Float, progress: Float): Float {\n    ```", "```kt\n        val totalProgress = (progress * 100) / tracker\n    ```", "```kt\n        return ((360 * totalProgress) / 100)\n    ```", "```kt\n    }\n    ```", "```kt\n    . . .\n    ```"]