- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Your User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you modified an existing Xcode project, added a tab
    bar to your app that allowed the user to select between the Journal List and Map
    screens, and configured the tab bar button titles and icons. When your app is
    launched, the Journal List screen is displayed, but it is currently blank.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the app tour in *Chapter 10*, *Setting Up the User Interface*,
    the Journal List screen should display a table view showing a list of journal
    entries in table view cells.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will make the Journal List screen display a table view
    containing 10 empty table view cells, as well as a button that will display a
    view representing the Add New Journal Entry screen when tapped. You’ll also configure
    a **Cancel** button to dismiss this view and return you to the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll be adding a small amount of code to your app, but don’t worry too much
    about this—you’ll learn more about it in the next part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to add view controllers
    to a storyboard scene, link outlets in view controllers to scenes, set up table
    view cells, and present a view controller modally. This will be very useful when
    you’re designing the user interface for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a table view to the Journal List screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting storyboard elements to the view controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring data source methods for the table view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting a view modally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` Xcode project that you created in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter11` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/EsDaVgrGLus](https://youtu.be/EsDaVgrGLus%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by adding a table view to the Journal List screen, which will eventually
    display the list of journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a table view to the Journal List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in the app tour, the *JRNL* app displays journal entries in a table
    view. A table view is an instance of the `UITableView` class. It displays a column
    of cells. Each cell in a table view is a table view cell, which is an instance
    of the `UITableViewCell` class. In this section, you’ll start by adding a table
    view to the view controller scene for the Journal List screen in the `Main` storyboard
    file, then you’ll add Auto Layout constraints to make it fill the screen.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Auto Layout and how to use it, go to [https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the *JRNL* project you created in the previous chapter and run the app
    to make sure everything still works as it should, then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Main** storyboard file in the Project navigator, select the view
    controller scene representing the Journal List screen, and click the Library button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Toolbar with the Library button shown'
  prefs: []
  type: TYPE_NORMAL
- en: 'The library will appear. Type `table` in the filter field. A **Table View**
    object will appear as one of the results. Drag it to the middle of the view of
    the view controller scene for the Journal List screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Library with Table View object selected'
  prefs: []
  type: TYPE_NORMAL
- en: The table view has been added, but it only takes up a small part of the screen.
    As shown in the app tour in the previous chapter, it should fill the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will use the **Auto Layout Add New Constraints** button to bind the edges
    of the table view to the edges of its enclosing view. Make sure the table view
    is selected and click the Auto Layout Add New Constraints button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: View controller scene with table view selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `0` in the top, left, right, and bottom edge constraint fields and click
    all the pale red struts. Make sure all the struts have turned bright red. Click
    the **Add 4 Constraints** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Auto Layout pop-up dialog box for adding new constraints'
  prefs: []
  type: TYPE_NORMAL
- en: This sets the space between the edges of the table view and the edges of the
    enclosing view to 0, binding the table view’s edges to those of the enclosing
    view. Now the table view will fill the screen, regardless of the device and orientation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that all four sides of the table view are now bound to the edges of
    the screen, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: View controller scene with table view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have added a table view to the view of the view controller scene for the
    Journal List screen and used Auto Layout constraints to make it fill the screen,
    but the Journal List screen will still be blank when you build and run your app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will implement the code for the `JournalListViewController`
    class, and you’ll connect outlets in this class to the UI elements on the Journal
    List screen. This will enable an instance of the `JournalListViewController` class
    to control what is displayed by the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting storyboard elements to the view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve added a table view to the Journal List screen, but it does not display
    anything yet. You’ll need to modify the existing view controller to manage the
    table view in the Journal List screen. The `ViewController` file was automatically
    created by Xcode when you created the `JRNL` project.
  prefs: []
  type: TYPE_NORMAL
- en: 'It contains the declaration and definition of a `UIViewController` subclass
    named `ViewController`, and this class is currently set as the view controller
    for the Journal List screen. You’ll change the name of the class in the `ViewController`
    file to `JournalListViewController` and create an outlet for the table view that
    you added to the view controller scene earlier. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **ViewController** file in the Project navigator. In the Editor area,
    right-click the class name and choose **Refactor** | **Rename**...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Editor area showing the pop-up menu with Rename...highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the class name to `JournalListViewController`and click **Rename**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: Editor area showing the new name for the ViewController class'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify both the class name and the file name have been changed to **JournalListViewController**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: File name and class name both changed to JournalListViewController'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Main** storyboard file in the Project navigator and select the
    first **Journal Scene** (the one containing the table view) in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Document outline showing the first Journal Scene selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Identity inspector button and verify that, under **Custom Class**,
    **Class** is set to **JournalListViewController**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Identity inspector with Class set to JournalListViewController'
  prefs: []
  type: TYPE_NORMAL
- en: This means that the content of the Journal List screen is being managed by an
    instance of the `JournalListViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas so you have more room to work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Toolbar showing Navigator and Inspector buttons'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Adjust Editor Options button and choose **Assistant** from the pop-up
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: Adjust Editor Options menu with Assistant selected'
  prefs: []
  type: TYPE_NORMAL
- en: This will display any Swift files associated with this scene in an assistant
    editor. As you can see, the **Main** storyboard file’s content appears on the
    left side and the `JournalListViewController` class definition appears on the
    right side of the Editor area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the bar just above the code and verify that **JournalListViewController.swift**
    is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: Bar showing JournalListViewController.swift selected'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t see **JournalListViewController.swift** selected, click the bar
    and select **JournalListViewController.swift** from the pop-up menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect the table view in the Journal scene to an outlet in the `JournalListViewController`
    class, *Ctrl* + *Drag* from the table view to the `JournalListViewController`
    file, just below the class name declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.14: Editor area showing drag destination'
  prefs: []
  type: TYPE_NORMAL
- en: You can also drag from the table view in the document outline.
  prefs: []
  type: TYPE_NORMAL
- en: 'A small pop-up dialog box will appear. Type the name of the outlet, `tableView`,
    into the **Name** text field, set **Storage** to **Strong**, and click **Connect**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: Pop-up dialog box for outlet creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `tableView` outlet declaration has been automatically added
    to the `JournalListViewController` class. After you have done so, click the **x**
    to close the assistant editor window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.16: Editor area showing tableView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: The `JournalListViewController` class now has an outlet, `tableView`, for the
    table view in the Journal List screen. This means a `JournalListViewController`
    instance can manage what the table view displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is common to make mistakes when using *Ctrl* + *Drag* to drag from an element
    in a storyboard scene to a file. If you make a mistake while doing so, this may
    cause a crash to occur when the app is launched. To check whether there are any
    errors in the connection between the table view and `JournalListViewController`
    class, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to display the Navigator and Inspector
    areas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With **Journal** in the **Journal Scene** selected, click the Connections inspector
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.17: Connections inspector selected'
  prefs: []
  type: TYPE_NORMAL
- en: The Connections inspector displays the links between your UI objects and your
    code. You will see the **tableView** outlet connected to the table view in the
    **Outlets** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see a tiny yellow warning icon, click on the **x** to break the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.18: Connections inspector showing tableView outlet with yellow warning
    icon'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Outlets**, drag from the **tableView** outlet to the table view to
    re-establish the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.19: Editor area showing table view to be connected'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to change the name of an outlet in your code after it has been created,
    right-click the outlet name and choose **Refactor** | **Rename** from the pop-up
    menu instead of changing it manually to avoid errors.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve successfully created an outlet in the `JournalListViewController` class
    for the table view. Great job!
  prefs: []
  type: TYPE_NORMAL
- en: To display table view cells onscreen, you will need to implement data source
    methods for the table view by adding some code to the `JournalListViewController`
    class. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring data source methods for the table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your app is running, an instance of the `JournalListViewController` class
    acts as the view controller for the Journal List screen. It is responsible for
    loading and displaying all the views on that screen, including the table view
    you added earlier. The table view needs to know how many table view cells to display
    and what to display in each cell. Normally, the view controller is responsible
    for providing this information. Apple has created a protocol, `UITableViewDataSource`,
    for this purpose. All you need to do is set the table view’s `dataSource` property
    to the `JournalListViewController` class and implement the required methods of
    this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The table view also needs to know what to do if the user taps on a table view
    cell. Again, the view controller for the table view is responsible, and Apple
    has created the `UITableViewDelegate` protocol for this purpose. You will set
    the table view’s `delegate` property to the `JournalListViewController` class,
    but you won’t be implementing any methods from this protocol yet.
  prefs: []
  type: TYPE_NORMAL
- en: Protocols are covered in *Chapter 8*, *Protocols, Extensions, and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to type in a small amount of code in this chapter. Don’t worry
    about what it means; you’ll learn more about table view controllers and their
    associated protocols in *Part 3* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll use the Connections inspector to assign the table
    view’s `dataSource` and `delegate` properties to outlets in the `JournalListViewController`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the delegate and data source properties of the table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An instance of the `JournalListViewController` class will provide the data
    that the table view will display, as well as the methods that will be executed
    when the user interacts with the table view. To make this work, you’ll connect
    the table view’s `dataSource` and `delegate` properties to outlets in the `JournalListViewController`
    class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to display the Navigator and Inspector
    areas again if you haven’t done so already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Main** storyboard file should still be selected. Select the **Table View**
    for the **Journal Scene** in the document outline and click the Connections inspector
    button. In the **Outlets** section, you will see two empty circles next to the
    **dataSource** and **delegate** outlets. Drag from each empty circle to the **Journal**
    icon in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.20: Connections inspector showing the dataSource and delegate outlets'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the `dataSource` and `delegate` properties of the table view have
    been connected to outlets in the `JournalListViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.21: Connections inspector with the dataSource and delegate outlets
    set'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will add some code to make the `JournalListViewController`
    class conform to the `UITableViewDataSource` protocol, and configure the table
    view to display 10 table view cells when you run your app.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting the UITableViewDataSource and UITableViewDelegate protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, you’ve made the `JournalListViewController` class the data source and
    delegate for the table view. The next step is to make it adopt the `UITableViewDataSource`
    and `UITableViewDelegate` protocols and implement any required methods. You’ll
    also change the color of the table view cells to make them visible onscreen. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Table View** in the document outline and click the Attributes inspector
    button. Under **Table View**, change the number of **Prototype Cells** to `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.22: Attributes inspector showing Prototype Cells set to 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **>** button next to **Table View** in the document outline to display
    **Table View Cell**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.23: Document outline showing > button'
  prefs: []
  type: TYPE_NORMAL
- en: This represents the table view cells that the table view will display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Table View Cell** in the document outline. In the **Attributes inspector**
    under **Table View Cell**, set **Identifier** to `journalCell` and press *Return*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.24: Attributes inspector with Identifier set'
  prefs: []
  type: TYPE_NORMAL
- en: The name **Table View Cell** in the document outline will change to **journalCell**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Attributes inspector under **View**, set **Background** to **System
    Cyan Color** so that you can see the table view cells easily when you run the
    app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.25: Attributes inspector with table view cell background color set'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **JournalListViewController** file in the Project navigator. Type
    in the following code after the class declaration to make the `JournalListViewController`
    class adopt the `UITableViewDataSource` and `UITableViewDelegate` protocols:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a few seconds, an error will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_11_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.26: Editor area showing error'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on it to display an error message. The error message says **Type ‘JournalListViewController’
    does not conform to protocol ‘UITableViewDataSource’**. **Add stubs for conformance**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.27: Editor area showing an error message'
  prefs: []
  type: TYPE_NORMAL
- en: This means you need to implement the required methods for the `UITableViewDataSource`
    protocol to make `JournalListViewController` conform to it.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Fix** to automatically add stubs for the required methods into the `JournalListViewController`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the stubs for the two required methods for the `UITableViewDataSource`
    protocol have been automatically inserted into the `JournalListViewController`
    class, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.28: Editor area showing UITableViewDataSource method stubs'
  prefs: []
  type: TYPE_NORMAL
- en: The first method tells the table view how many cells to display, while the second
    method tells the table view what to display in each table view cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the placeholder text in the first method with `10` (the `return` keyword
    is optional if it’s just a single line of code). This tells the table view to
    display 10 cells:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.29: Editor area showing code to display 10 table view cells'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the placeholder text in the second method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B31371_11_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.30: Editor area showing code to display a table view cell for each
    row'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry about what this means for now as you’ll learn more about table views
    in *Part 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Simulator will display a column of 10 cyan table view
    cells, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.31: Simulator showing 10 table view cells'
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the app tour in *Chapter 10*, *Setting Up the User Interface*,
    there should be a **+** button at the top right of this screen. You will add this
    button in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting a view modally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The navigation bar for the Journal List screen can be configured to display
    a title and buttons. You have already configured the title in *Chapter 10*, *Setting
    Up the User Interface*. Now you will add and configure a bar button item to the
    navigation bar. When tapped, this button will display a view representing the
    Add New Journal Entry screen. This view will be from a new view controller scene
    embedded in a navigation controller, which you will add to the project. The view
    will be presented modally, which means you won’t be able to do anything else until
    it is dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: To dismiss it, you’ll add a **Cancel** button to the view’s navigation bar.
    You’ll also add a **Save** button, but you’ll only implement its functionality
    in *Chapter 16*, *Passing Data between View Controllers*. Let’s start by adding
    a bar button item from the library to the navigation bar in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a bar button to the navigation bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the app tour in *Chapter 10*, *Setting Up the User Interface*,
    there is a **+** button in the top right-hand corner of the screen. To implement
    this, you’ll add a bar button item to the Journal List screen’s navigation bar.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Main** storyboard file in the Project navigator. Make sure the
    first **Journal Scene** is selected in the document outline. Click the Library
    button to display the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.32: Toolbar with Library button shown'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `bar b` in the filter field. A **Bar Button Item** object will appear
    in the results. Drag the bar button object to the right side of the navigation
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.33: Library with Bar Button Item object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the bar buttonselected, click the Attributes inspector button. Under **Bar
    Button Item**, set **System Item** to **Add**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.34: Attributes inspector with System Item set to Add'
  prefs: []
  type: TYPE_NORMAL
- en: You now have a **+** button in your navigation bar. In the next section, you
    will add a view controller scene to represent the Add New Journal Entry screen
    that will appear when the button is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new view controller scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the app tour in *Chapter 10*, *Setting Up the User Interface*,
    when you tap the **+** button in the navigation bar, the Add New Journal Entry
    screen will be displayed. You’ll add a new view controller scene to your project
    to represent this screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button to display the library and type `view con` in the
    filter field. A **View Controller** object will be among the search results. Drag
    the **View Controller** object onto the storyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.35: Library with the View Controller object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Position the view controller to the right of the **Journal** scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.36: Editor area showing view controller scene next to Journal scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the newly added view controller scene. In the document outline, click
    on the **View Controller** icon for this scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.37: Document outline with View Controller selected'
  prefs: []
  type: TYPE_NORMAL
- en: You will need space for the **Cancel** and **Save** buttons, so you will embed
    this view controller scene in a navigation controller to provide a navigation
    bar where the buttons can be placed. Choose **Embed In** | **Navigation Controller**
    from the **Editor** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that a navigation controller scene has appeared to the left of the view
    controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.38: Editor area showing view controller scene embedded in a navigation
    controller'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Navigation Item** for the new view controller scene in the document
    outline. In the Attributes inspector, under **Navigation Item**, set **Title**
    to `New Entry`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.39: Attributes inspector with Title set to New Entry'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the navigation item will change to **New Entry**.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *Drag* from the button to the navigation controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.40: Editor area showing the drag destination'
  prefs: []
  type: TYPE_NORMAL
- en: 'The segue pop-up menu will appear. Choose **Present Modally**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.41: Segue pop-up menu with Present Modally selected'
  prefs: []
  type: TYPE_NORMAL
- en: This makes the view controller’s view slide up from the bottom of the screen
    when the button is tapped. You won’t be able to interact with any other view until
    this view is dismissed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that a segue has linked the **Journal** scene and the **Navigation Controller**
    scene together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.42: Editor area showing segue between the Journal scene and Navigation
    Controller scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Click the **+** button and the new view controller’s
    view will slide up from the bottom of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.43: Simulator showing new view controller’s view'
  prefs: []
  type: TYPE_NORMAL
- en: You can only dismiss this view by dragging it downward at present. In the next
    section, you will add a **Cancel** button to the navigation bar and program it
    to dismiss the view. You’ll also add a **Save** button, but you won’t program
    it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Cancel and Save buttons to the navigation bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you have seen earlier, one of the benefits of embedding a view controller
    in a navigation controller is the navigation bar at the top of the screen. You
    can place buttons on its left and right sides. Follow these steps to add the **Cancel**
    and **Save** buttons to the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Navigation Item** for the **New Entry** scene in the document outline.
    Click the **Library** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.44: Toolbar with Library button shown'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `bar b` into the filter field and drag a **Bar Button Item** object to
    each side of the navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.45: Library with Bar Button Item object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the right **Item** button. In the Attributes inspector under **Bar Button
    Item**, set **Style** to **Done** and set **System Item** to **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.46: Attributes inspector with Style set to Done and System Item set
    to Save'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the left **Item** button and set **System Item** to **Cancel**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.47: Attributes inspector with System Item set to Cancel'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the navigation controller has a property, `viewControllers`, that
    holds an array of view controllers. When you click the **+** button on the Journal
    List screen, the new view controller is added to the `viewControllers` array and
    its view appears from the bottom of the screen, covering the Journal List screen,
    and the only way to dismiss the view is to drag it downward.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the **Cancel** button to dismiss the view, you will link the **Cancel**
    button to the scene exit and implement a method in the `JournalListViewController`
    class that will be executed when the Journal List screen reappears. In the Project
    navigator, click the **JournalListViewController** file and add the following
    method at the bottom of the file before the final closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on the **Main** storyboard file in the Project navigator, and click the
    **Cancel** button in the New Entry scene. In the document outline, *Ctrl* + *Drag*
    from the **Cancel** button to the scene exit icon and choose **unwindNewEntryCancelWithSegue:**
    from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.48: Document outline showing the Cancel button action being set'
  prefs: []
  type: TYPE_NORMAL
- en: When your app is running, clicking the **Cancel** button will remove the view
    controller from the navigation controller’s `viewControllers` array, dismiss the
    view that is presented modally, and execute the `unwindNewEntryCancel(segue:)`
    method. Note that this method doesn’t do anything at present.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and click the **+** button in the navigation bar of
    the Journal List screen. The new view will appear. When you click the **Cancel**
    button, the new view disappears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_11_49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.49: Simulator showing the Cancel button'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve completed the basic structure for the Journal List screen!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you added a table view to the Journal List screen in the Main
    storyboard file and modified the existing view controller class to implement the
    `JournalListViewController` class. Then, you modified the `JournalListViewController`
    class to have an outlet for the table view in the storyboard and made it the data
    source and delegate for the table view. Finally, you added a button to display
    a second view and configured a **Cancel** button to dismiss it.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should be proficient in using Interface Builder to add views
    and view controllers to a storyboard scene, link view controller outlets to UI
    elements in storyboards, set up table views, and present views modally. This will
    be very useful when you’re designing the UI for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll implement the Journal Entry Detail screen of your
    app and implement a map view for the Map screen.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
