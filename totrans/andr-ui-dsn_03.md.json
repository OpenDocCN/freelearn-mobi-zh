["```java\n<resources> \n\n<string name=\"string_name\">This is the text that'll appear whenever you reference this string resource.</string> \n\n</resources> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n\n<string name=\"Hello World\">Hello world, <b>welcome</b> to my app!</string> \n\n<string name=\"click\">Please click the <i>button</i> to continue</string> \n\n</resources> \n\n```", "```java\nString string = getString(R.string.string_name);\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n\n   <string-array  \n\n//Create your string array// \n\nname=\"ingredients\"> \n\n//Give your array a descriptive name// \n\n      <item>Self-raising flour</item> \n\n//Add each string to your array// \n\n      <item>Butter</item> \n      <item>Caster sugar</item> \n      <item>Eggs</item> \n      <item>Baking powder</item> \n   </string-array> \n\n</resources> \n\n```", "```java\nResources res = getResources(); \nString[] ingredients = res.getStringArray (R.array.ingredients); \n\n```", "```java\n<Spinner \n    android:layout_height=\"wrap_content\" \n    android:layout_width=\"match_parent\" \n    android:id=\"@+id/spinnerOfIngredients\" \n    android:entries=\"@array/ingredients\"> \n</Spinner> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n  <dimen name=\"textview_width\">26dp</dimen> \n  <dimen name=\"textview_height\">35dp</dimen> \n  <dimen name=\"headline_size\">41sp</dimen> \n  <dimen name=\"bodytext_size\">20sp</dimen> \n</resources> \n\n```", "```java\n<TextView \n   android:layout_height=\"@dimen/textview_height\" \n   android:layout_width=\"@dimen/textview_width\" \n   android:textSize=\"@dimen/headline_size\"/>Â \n```", "```java\ntextElement.setWidth(getResources().getDimensionPixelSize(R.dimen.headline_size)); \n\n```", "```java\n<selector  > \n\n//A color state list must be inside a single selector element// \n\n<item \n\n//Add each state and color as a separate <item>// \n\nandroid:state_pressed=\"true\" \n\n//If the current state is pressed...// \n\nandroid:color=\"@color/green\" /> \n\n//....Apply the color green to this view// \n\n<item \n\nandroid:color=\"@color/blue/> \n\n//If the View is in its default state, apply the color blue instead. We're using blue as the default that'll be applied to the view when none of the above states are relevant// \n\n```", "```java\n<Button \n   android:layout_width=\"match_parent\" \n   android:layout_height=\"wrap_content\" \n   android:text=\"@string/button_text\" \n   android:background:=\"@drawable/button_background\" /> \n\n```", "```java\nButton button = (Button) findViewById(R.id.button1\n\n//Get a reference to the view you want to assign the listener to// \nbutton.setOnClickListener(new View.OnClickListener() { \n\n//Assign the setOnClickListener listener to this view// \n\n                @Override \n                public void onClick(View view) { \n\n//Override the onClick method//  \n\n.... \n.... \n\n// This is where you'd implement the code that tells your app what action it needs to perform whenever it registers a click event, for example you might want your app to launch a new activity, open a menu, or start playing a video// \n\n} \n  }); \n\n```", "```java\n<Button \n      android:id=\"@+id/button1\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:onClick=\"buttonClicked\"\n      android:text=\"Click me\" /> \n\n```", "```java\npublic void buttonClicked(View v) { \nToast.makeText(this, \"The button has been clicked!\", Toast.LENGTH_LONG).show(); \n\n//So you can test whether the buttonClicked method is working correctly, we'll tell the app to display a \"The button has been clicked\" message whenever buttonClicked is executed//  \n\n  } \n\n```", "```java\n<LinearLayout \n\n  android:orientation=\"vertical\" \n  android:layout_width=\"match_parent\" \n  android:layout_height=\"match_parent\" > \n\n      <TextView \n          android:id=\"@+id/textView1\" \n          android:layout_width=\"wrap_content\" \n          android:layout_height=\"wrap_content\" \n          android:text=\"@string/form\" \n          android:textColor=\"@color/blue\" /> \n\n//Add the TextView. Initially this view will display instructions, but once the user has submitted their name it'll update to display our welcome message instead// \n\n       <EditText \n          android:id=\"@+id/editText1\" \n          android:layout_width=\"wrap_content\" \n          android:layout_height=\"wrap_content\" \n\n//Add the EditText// \n\n          android:background=\"@color/grey\" \n\n//Depending on your app's color scheme, an empty EditText may blend into the background, so you may want to give the EditText its own background color//  \n\n          android:hint=\"@string/yourName\" \n          android:ems=\"10\" > \n\n//Make it clear what information the user needs to enter, using android:hint// \n\n          <requestFocus /> \n      </EditText> \n\n      <Button \n          android:id=\"@+id/button1\" \n          android:layout_width=\"wrap_content\" \n          android:layout_height=\"wrap_content\" \n          android:background=\"@color/blue\" \n          android:text=\"@string/submit\" \n          android:textColor=\"@color/white\" /> \n\n//Add the Submit button// \n\n</LinearLayout> \n\n```", "```java\n<resources> \n<string name=\"app_name\">Form</string> \n  <string name=\"form\">Please complete the form below</string> \n  <string name=\"yourName\">Enter your name</string> \n  <string name=\"submit\">Submit</string> \n</resources> \n\n```", "```java\npackage com.example.jessica.myapplication; \n\nimport android.os.Bundle; \nimport android.app.Activity; \nimport android.view.View; \nimport android.widget.Button; \nimport android.widget.EditText; \nimport android.widget.TextView; \n\npublic class MainActivity extends Activity { \n\n  Button submitButton; \n  EditText nameEdit; \n  TextView welcomeText; \n\n  @Override \n  public void onCreate(Bundle savedInstanceState) { \n      super.onCreate(savedInstanceState); \n      setContentView(R.layout.activity_main); \n      submitButton = (Button)findViewById(R.id.button1); \n\n  submitButton.setOnClickListener(new View.OnClickListener() { \n          public void onClick(View view) { \n\n//Assign the setOnClickListener to your submitButton// \n\n              nameEdit = (EditText) findViewById(R.id.editText1); \n\n//Get a reference to the EditText// \n\n              welcomeText = (TextView)                findViewById(R.id.textView1); \n\n//Get the text from nameText and set it to the welcomeText TextView. At this point, I'm adding a bit of extra text (Welcome, and !) to create a nicer greeting//  \n\n              welcomeText.setText(\"Welcome \" +                nameEdit.getText().toString() + \"!\"); \n          } \n      }); \n  } \n\n} \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout     \nandroid:orientation=\"vertical\"  \nandroid:layout_width=\"match_parent\" \nandroid:layout_height=\"match_parent\"> \n\n <TextView \n      android:layout_width=\"wrap_content\" \n      android:layout_height=\"wrap_content\" \n      android:text=\"This is a fragment\" \n      android:id=\"@+id/textView\" /> \n\n</LinearLayout> \n\n```", "```java\ndependencies { \n.... \n.... \n.... \n  compile 'com.android.support:support-v4:23.1.0' \n} \n\n```", "```java\npackage com.example.jessica.myapplication; \n\npublic class ListFragment { \n} \n\n```", "```java\npackage com.example.jessica.myapplication; \n\nimport android.os.Bundle; \nimport android.support.v4.app.Fragment; \nimport android.view.LayoutInflater; \nimport android.view.View; \nimport android.view.ViewGroup; \n\npublic class ListFragment extends Fragment { \n\n//Remember, if you want your app to work on devices running anything earlier than Honeycomb, you need to extend FragmentActivity rather than extending the Fragment class// \n\n    @Override \n\n//To inflate your fragment's layout inside the current activity, you need to override the onCreateView() method//  \n\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,  \n\n//Your implementation of onCreateView() must return a View, which is the root of your fragment's layout// \n\nBundle savedInstanceState) { \n\n///savedInstanceState is a Bundle that passes data about the previous instance of the fragment, just in case this fragment is being resumed//  \n\n      View view = inflater.inflate(R.layout.list_fragment, \n              container, false); \n      return view; \n\n//Inflate a new view hierarchy from the specified layout resource file. In this example, that's list_fragment.xml//   \n\n  } \n} \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \nandroid:orientation=\"vertical\"  \nandroid:layout_width=\"match_parent\" \nandroid:layout_height=\"match_parent\"> \n\n   <fragment \n      android:id=\"@+id/listFragment\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n\n//Add the fragment// \n\n     class=\"com.example.jessica.myapplication.ListFragment\" /> \n\n//Identify the fragment you want to instantiate, using the class attribute// \n\n</LinearLayout> \n\n```", "```java\n<fragment android:name=\"com.example.jessica.myapplication.ListFragment\" \nandroid:id=\"@+id/listFragment\" \nandroid:layout_width=\"match_parent\" \nandroid:layout_height=\"match_parent\" /> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \nandroid:orientation=\"vertical\"  \nandroid:layout_width=\"match_parent\" \nandroid:layout_height=\"match_parent\"> \n\n  <FrameLayout  \n\n      android:id=\"@+id/fragment_container\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" /> \n\n</LinearLayout> \n\n```", "```java\npackage com.example.jessica.myapplication; \n\nimport android.support.v7.app.AppCompatActivity; \nimport android.os.Bundle; \nimport android.support.v4.app.FragmentActivity; \n\npublic class MainActivity extends FragmentActivity { \n\n  @Override \n  public void onCreate(Bundle savedInstanceState) { \n      super.onCreate(savedInstanceState); \n      setContentView(R.layout.activity_main); \n\n       if (findViewById(R.id.list_fragment) != null) { \n\n          if (savedInstanceState != null) { \n              return; \n          } \n\n           // Create a new Fragment// \n          ListFragment firstFragment = new ListFragment(); \n\n          firstFragment.setArguments(getIntent().getExtras()); \n\n// If this activity was started with special instructions from an Intent, pass the Intent's extras to the fragment as arguments// \n\n           getSupportFragmentManager().beginTransaction() \n\n// Call the beginTransaction() method on the fragment manager instance// \n\n                  .add(R.id.list_fragment, \n\n//Call the add() method of the fragment transaction instance, and pass it the resource ID of the view that'll contain the fragment (R.id.list_fragment) and the fragment class instance(firstFragment)// \n\nfirstFragment).commit(); \n\n//The final piece of the above code calls the commit() method of the fragment transaction// \n\n        } \n    } \n} \n\n```", "```java\nimport android.support.v4.app.FragmentTransaction; \nimport android.support.v4.app.FragmentManager; \n\n//Add the FragmentTransaction and FragmentManager import statements// \n\nFragmentManager fragmentManager = getSupportFragmentManager(); \nFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); \n\n//Get the FragmentTransaction instance//  \n\n```", "```java\nfragmentTransaction.add(R.id.fragment_container, firstFragment).commit(); \n\n```", "```java\nfragmentTransaction.remove(previousFragment).commit(); \n\n```", "```java\nFragment newFragment = new Fragment(); \n\n// Create a new fragment// \n\nFragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); \n\n//Create a new transaction// \n\ntransaction.replace(R.id.list_fragment, newFragment); \n\n//The replace() method takes two arguments: the id of the view containing the fragment that's being replaced, and an instance of the new fragment// \n\ntransaction.addToBackStack(null); \n\n//Give the user a way of reversing the transaction by adding the replaced fragment to the back stack. Note that addToBackStack() takes an optional String parameter that identifies this fragment state on the back stack. If you don't need this parameter, you can just pass null, similar to what we're doing in this example// \n\ntransaction.commit(); \n\n// Commit the transaction// \n\n```", "```java\n@Override \npublic void onPause() { \n\n   // If onPause is called due to PIP, do not pause playback//  \n\nif (inPictureInPicture()) { \n       // Continue playback// \n\n       ... \n   } \n\n   // If the activity isn't paused due to PIP mode, then pause playback if necessary//   \n\n   ... \n} \n\n```", "```java\n@Override \npublic void onPictureInPictureChanged(boolean inPictureInPicture) { \n   if (inPictureInPicture) { \n\n       //This is where you'd hide the controls in PIP mode//  \n\n       ... \n   } else { \n\n       //This is where you'd restore any controls that are hidden when the activity enters PIP mode// \n\n       ... \n   } \n} \n\n```"]