["```kt\nopen class StarTrekRepository {\n```", "```kt\n    private val starshipCaptains = mutableMapOf(\"USS \n```", "```kt\n        Enterprise\" to \"Jean-Luc Picard\")\n```", "```kt\n    open fun getCaptain(starshipName: String): String {\n```", "```kt\n        return starshipCaptains[starshipName] ?: \"Unknown\"\n```", "```kt\n    }\n```", "```kt\n    open fun addCaptain(starshipName: String, captainName:         String) {\n```", "```kt\n        starshipCaptains[starshipName] = captainName\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nreturn if (starshipCaptains[starshipName] == null) \n```", "```kt\n    \"Unknown\" else starshipCaptains[starshipName]\n```", "```kt\nclass LoggingGetCaptainStarTrekRepository : \n```", "```kt\n  StarTrekRepository() {\n```", "```kt\n    override fun getCaptain(starshipName: String): String {\n```", "```kt\n        println(\"Getting captain for $starshipName\")\n```", "```kt\n        return super.getCaptain(starshipName)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass ValidatingAddCaptainStarTrekRepository : \n```", "```kt\n  StarTrekRepository() {\n```", "```kt\n    override fun addCaptain(starshipName: String, \n```", "```kt\n        captainName: String) {\n```", "```kt\n        if (captainName.length > 15) {\n```", "```kt\n            throw RuntimeException(\"$captainName is longer                 than 20 characters!\")\n```", "```kt\n        }\n```", "```kt\n        super.addCaptain(starshipName, captainName)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ninterface StarTrekRepository {\n```", "```kt\n    fun getCaptain(starshipName: String): String\n```", "```kt\n    fun addCaptain(starshipName: String, captainName:         String)\n```", "```kt\n    }\n```", "```kt\nclass DefaultStarTrekRepository : StarTrekRepository {\n```", "```kt\n    private val starshipCaptains = mutableMapOf(\"USS Enter         prise\" to \"Jean-Luc Picard\")\n```", "```kt\n    override fun getCaptain(starshipName: String): String {\n```", "```kt\n        return starshipCaptains[starshipName] ?: \"Unknown\"\n```", "```kt\n    }\n```", "```kt\n    override fun addCaptain(starshipName: String, captain         Name: String) {\n```", "```kt\n        starshipCaptains[starshipName] = captainName\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass LoggingGetCaptain(private val repository:\n```", "```kt\n  StarTrekRepository): StarTrekRepository by repository {\n```", "```kt\n    override fun getCaptain(starshipName: String): String {\n```", "```kt\n        println(\"Getting captain for $starshipName\")\n```", "```kt\n        return repository.getCaptain(starshipName)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass ValidatingAdd(private val repository: \n```", "```kt\n  StarTrekRepository): StarTrekRepository by repository {\n```", "```kt\n    private val maxNameLength = 15\n```", "```kt\n    override fun addCaptain(starshipName: String,\n```", "```kt\n        captainName: String) {\n```", "```kt\n        require (captainName.length < maxNameLength) {\n```", "```kt\n            \"$captainName name is longer than                 $maxNameLength characters!\"\n```", "```kt\n        }\n```", "```kt\n        repository.addCaptain(starshipName, captainName)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval starTrekRepository = DefaultStarTrekRepository()\n```", "```kt\nval withValidating = ValidatingAdd(starTrekRepository)\n```", "```kt\nval withLoggingAndValidating =     LoggingGetCaptain(withValidating)\n```", "```kt\nwithLoggingAndValidating.getCaptain(\"USS Enterprise\")\n```", "```kt\nwithLoggingAndValidating.addCaptain(\"USS Voyager\",    \"Kathryn Janeway\")\n```", "```kt\n> Kathryn Janeway name is longer than 15 characters!\n```", "```kt\nstarshipCaptains[starshipName]\n```", "```kt\nstarshipCaptains[starshipName] = captainName\n```", "```kt\nwithLoggingAndValidating[\"USS Enterprise\"]\n```", "```kt\nwithLoggingAndValidating[\"USS Voyager\"] = \"Kathryn Janeway\"\n```", "```kt\ninterface StarTrekRepository {\n```", "```kt\n    operator fun get(starshipName: String): String\n```", "```kt\n    operator fun set(starshipName: String, captainName:         String)\n```", "```kt\n}\n```", "```kt\nSystem.out.println(1 + 1); // Prints 2 \n```", "```kt\nSystem.out.println(\"1\" + \"1\") // Prints 11\n```", "```kt\nList.of(\"a\") + List.of(\"b\")\n```", "```kt\nSeq(\"a\") ==== Seq(\"b\") // You'll have to guess what   this code does\n```", "```kt\nprintln(withLoggingAndValidating is LoggingGetCaptain)\n```", "```kt\n// This is our top level decorator, no problem here\n```", "```kt\nprintln(withLoggingAndValidating is StarTrekRepository)\n```", "```kt\n// This is the interface we implement, still no problem\n```", "```kt\nprintln(withLoggingAndValidating is ValidatingAdd)\n```", "```kt\n// We wrap this class, but compiler cannot validate it\n```", "```kt\nprintln(withLoggingAndValidating is DefaultStarTrekRepository)\n```", "```kt\n// We wrap this class, but compiler cannot validate it\n```", "```kt\nval reader = BufferedReader(FileReader(\"/some/file\"))\n```", "```kt\ninterface USPlug {\n```", "```kt\n    val hasPower: Int\n```", "```kt\n}\n```", "```kt\ninterface EUPlug {\n```", "```kt\n    val hasPower: String // \"TRUE\" or \"FALSE\"\n```", "```kt\n}\n```", "```kt\ninterface UsbMini {\n```", "```kt\n    val hasPower: Power\n```", "```kt\n}\n```", "```kt\nenum class Power {\n```", "```kt\n    TRUE, FALSE\n```", "```kt\n}\n```", "```kt\ninterface UsbTypeC {\n```", "```kt\n    val hasPower: Boolean\n```", "```kt\n}\n```", "```kt\nfun cellPhone(chargeCable: UsbTypeC) {\n```", "```kt\n    if (chargeCable.hasPower) {\n```", "```kt\n        println(\"I've Got The Power!\")\n```", "```kt\n    } else {\n```", "```kt\n        println(\"No power\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n// Power outlet exposes USPlug interface\n```", "```kt\nfun usPowerOutlet(): USPlug {\n```", "```kt\n    return object : USPlug {\n```", "```kt\n        override val hasPower = 1\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n// Charger accepts EUPlug interface and exposes UsbMini \n```", "```kt\n// interface\n```", "```kt\nfun charger(plug: EUPlug): UsbMini {\n```", "```kt\n    return object : UsbMini {\n```", "```kt\n        override val hasPower=Power.valueOf(plug.hasPower)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ncellPhone(\n```", "```kt\n    // Type mismatch: inferred type is UsbMini but     // UsbTypeC was expected\n```", "```kt\n    charger(\n```", "```kt\n        // Type mismatch: inferred type is USPlug but         // EUPlug was expected\n```", "```kt\n        usPowerOutlet()\n```", "```kt\n    )\n```", "```kt\n)\n```", "```kt\nfun USPlug.toEUPlug(): EUPlug {\n```", "```kt\n    val hasPower = if (this.hasPower == 1) \"TRUE\" else       \"FALSE\"\n```", "```kt\n    return object : EUPlug {\n```", "```kt\n        // Transfer power\n```", "```kt\n        override val hasPower = hasPower\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun UsbMini.toUsbTypeC(): UsbTypeC {\n```", "```kt\n    val hasPower = this.hasPower == Power.TRUE\n```", "```kt\n    return object : UsbTypeC {\n```", "```kt\n        override val hasPower = hasPower\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ncellPhone(\n```", "```kt\n    charger(\n```", "```kt\n        usPowerOutlet().toEUPlug()\n```", "```kt\n    ).toUsbTypeC()\n```", "```kt\n)\n```", "```kt\nval list = listOf(\"a\", \"b\", \"c\")\n```", "```kt\nfun printStream(stream: Stream<String>) {\n```", "```kt\n    stream.forEach(e -> println(e))\n```", "```kt\n}\n```", "```kt\nprintStream(list) // Doesn't compile\n```", "```kt\nprintStream(list.stream()) // Adapted successfully\n```", "```kt\nval stream = Stream.generate { 42 } \n```", "```kt\nstream.toList()\n```", "```kt\ninterface Trooper {\n```", "```kt\n    fun move(x: Long, y: Long)\n```", "```kt\n    fun attackRebel(x: Long, y: Long)\n```", "```kt\n}\n```", "```kt\nclass StormTrooper : Trooper {\n```", "```kt\n    override fun move(x: Long, y: Long) {\n```", "```kt\n        // Move at normal speed\n```", "```kt\n    }\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        // Missed most of the time \n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass ShockTrooper : Trooper {\n```", "```kt\n    override fun move(x: Long, y: Long) {\n```", "```kt\n        // Moves slower than regular StormTrooper\n```", "```kt\n    }\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        // Sometimes hits\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass RiotControlTrooper : StormTrooper() {\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        // Has an electric baton, stay away!\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass FlameTrooper : ShockTrooper() {\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        // Uses flametrower, dangerous!\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass ScoutTrooper : ShockTrooper() {\n```", "```kt\n    override fun move(x: Long, y: Long) {\n```", "```kt\n        // Runs faster\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ninterface Infantry {\n```", "```kt\n    fun move(x: Long, y: Long) \n```", "```kt\n    fun attackRebel(x: Long, y: Long)\n```", "```kt\n    fun shout(): String\n```", "```kt\n}\n```", "```kt\ndata class StormTrooper(\n```", "```kt\n    private val weapon: Weapon,\n```", "```kt\n    private val legs: Legs\n```", "```kt\n) : Trooper {\n```", "```kt\n    override fun move(x: Long, y: Long) {\n```", "```kt\n        legs.move(x, y)\n```", "```kt\n    }\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        weapon.attack(x, y)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ntypealias PointsOfDamage = Long \n```", "```kt\ntypealias Meters = Int\n```", "```kt\ninterface Weapon {\n```", "```kt\n    fun attack(): PointsOfDamage\n```", "```kt\n}\n```", "```kt\ninterface Legs {\n```", "```kt\n    fun move(): Meters\n```", "```kt\n}\n```", "```kt\nconst val RIFLE_DAMAGE = 3L\n```", "```kt\nconst val REGULAR_SPEED: Meters = 1\n```", "```kt\nclass Rifle : Weapon {\n```", "```kt\n    override fun attack(x: Long, y: Long) = RIFLE_DAMAGE\n```", "```kt\n}\n```", "```kt\nclass Flamethrower : Weapon {\n```", "```kt\n    override fun attack(x: Long, y: Long)= RIFLE_DAMAGE * 2\n```", "```kt\n}\n```", "```kt\nclass Batton : Weapon {\n```", "```kt\n    override fun attack(x: Long, y: Long)= RIFLE_DAMAGE * 3\n```", "```kt\n}\n```", "```kt\nclass RegularLegs : Legs {\n```", "```kt\n    override fun move() = REGULAR_SPEED\n```", "```kt\n}\n```", "```kt\nclass AthleticLegs : Legs {\n```", "```kt\n    override fun move() = REGULAR_SPEED * 2\n```", "```kt\n}\n```", "```kt\nval stormTrooper = StormTrooper(Rifle(), RegularLegs())\n```", "```kt\nval flameTrooper = StormTrooper(Flamethrower(),     RegularLegs())\n```", "```kt\nval scoutTrooper = StormTrooper(Rifle(), AthleticLegs())\n```", "```kt\nclass Squad(val units: List<Trooper>)\n```", "```kt\nval bobaFett = StormTrooper(Rifle(), RegularLegs()) \n```", "```kt\nval squad = Squad(listOf(bobaFett.copy(), bobaFett.copy(), bobaFett.copy()))\n```", "```kt\nclass Squad(private val units: List<Trooper>) {\n```", "```kt\n    fun move(x: Long, y: Long) {\n```", "```kt\n        for (u in units) {\n```", "```kt\n            u.move(x, y)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    fun attack(x: Long, y: Long) {\n```", "```kt\n        for (u in units) {\n```", "```kt\n            u.attackRebel(x, y)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ninterface Trooper {\n```", "```kt\n    fun move(x: Long, y: Long)\n```", "```kt\n    fun attackRebel(x: Long, y: Long)\n```", "```kt\n    fun retreat()\n```", "```kt\n}\n```", "```kt\nclass Squad(private val units: List<StormTrooper>):  Trooper { ... }\n```", "```kt\nclass Squad(private val units: List<StormTrooper>): Trooper {\n```", "```kt\n    override fun move(x: Long, y: Long) {\n```", "```kt\n        ...    \n```", "```kt\n    }\n```", "```kt\n    override fun attackRebel(x: Long, y: Long) {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    override fun retreat() {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval squad = Squad(bobaFett.copy(), bobaFett.copy(), \n```", "```kt\n  bobaFett.copy())\n```", "```kt\nclass Squad(private val units: List<Trooper>): Trooper {\n```", "```kt\n    constructor(): this(listOf())\n```", "```kt\n    constructor(t1: Trooper): this(listOf(t1))\n```", "```kt\n    constructor(t1: Trooper, t2: Trooper): this(listOf(t1, \n```", "```kt\n      t2))\n```", "```kt\n}\n```", "```kt\nclass Squad(private val units: List<Trooper>): Trooper {\n```", "```kt\n    constructor(vararg units: Trooper): \n```", "```kt\n        this(units.toList())\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\nval squad = Squad(bobaFett.copy(), bobaFett.copy(), bobaFett.copy())\n```", "```kt\nconstructor(units: Array<Trooper>) : this(units.toList())\n```", "```kt\nval platoon = Squad(Squad(), Squad())\n```", "```kt\n@ExperimentalPathApi\n```", "```kt\nfun Server.startFromConfiguration(fileLocation: String) {\n```", "```kt\n    val path = Path(fileLocation)\n```", "```kt\n    val lines = path.toFile().readLines()\n```", "```kt\n    val configuration = try {\n```", "```kt\n        JsonParser().server(lines)\n```", "```kt\n    }\n```", "```kt\n    catch (e: RuntimeException) {\n```", "```kt\n        YamlParser().server(lines)\n```", "```kt\n    }\n```", "```kt\n    Server.withPort(configuration.port)\n```", "```kt\n}\n```", "```kt\nclass TanzanianSnail\n```", "```kt\nenum class Direction {\n```", "```kt\n   LEFT,\n```", "```kt\n   RIGHT\n```", "```kt\n}\n```", "```kt\nclass TansanianSnail {\n```", "```kt\n    val directionFacing = Direction.LEFT\n```", "```kt\n    val sprites = listOf(File(\"snail-left.jpg\"), \n```", "```kt\n                         File(\"snail-right.jpg\"))\n```", "```kt\n    // More information about the state of a snail comes \n```", "```kt\n        here\n```", "```kt\n    // This may include its health, for example\n```", "```kt\n}\n```", "```kt\nfun getCurrentSprite(): File {\n```", "```kt\n    return when (directionFacing) {\n```", "```kt\n        Direction.LEFT -> sprites[0]\n```", "```kt\n        Direction.RIGHT -> sprites[1]\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass TansanianSnail {\n```", "```kt\n    val directionFacing = Direction.LEFT\n```", "```kt\n    val sprites = List(8) { i ->\n```", "```kt\n        File(when(i) {\n```", "```kt\n            0 -> \"snail-left.jpg\"\n```", "```kt\n            1 -> \"snail-right.jpg\"\n```", "```kt\n            in 2..4 -> \"snail-move-left-${i-1}.jpg\"\n```", "```kt\n            else -> \"snail-move-right${(4-i)}.jpg\"\n```", "```kt\n        })\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nobject SnailSprites {\n```", "```kt\n    val sprites = List(8) { i ->\n```", "```kt\n        java.io.File(when (i) {\n```", "```kt\n            0 -> \"snail-left.jpg\"\n```", "```kt\n            1 -> \"snail-right.jpg\"\n```", "```kt\n            in 2..4 -> \"snail-move-left-${i-1}.jpg\"\n```", "```kt\n            else -> \"snail-move-right${(4-i)}.jpg\"\n```", "```kt\n        })\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass TansanianSnail() {\n```", "```kt\n    val directionFacing = Direction.LEFT\n```", "```kt\n    val sprites = SnailSprites.sprites\n```", "```kt\n}\n```", "```kt\ndata class CatImage(val thumbnailUrl: String,\n```", "```kt\n        val url: String) {\n```", "```kt\n    val image: ByteArray by lazy {\n```", "```kt\n        // Read image as bytes\n```", "```kt\n        URL(url).readBytes()\n```", "```kt\n    }\n```", "```kt\n}\n```"]