- en: Chapter 7. Deploying to Your Device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Don''t keep it all to yourself!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Tools such as LiveCode can be used entirely for personal productivity applications,
    and it would more than pay for itself through the time that it would save every
    day. However, why not let the rest of the world benefit from your creations!*'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have created several little test rig apps and a few apps that are
    fleshed out. In all cases though, we've just tested the apps that are inside simulators
    or on your personal device. The time has come to get this app out to more people
    for beta testing at first, so that we can then upload it to different app stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Examine all the standalone application setting options related to the process
    of creating mobile apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create builds of an app so that it can be sent to beta testers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test service alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the final distribution version of an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review how to upload apps to iOS App Store, Google Play, Amazon Appstore, and
    Samsung Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some stages that should be performed on Mac while creating iOS apps
    for App Store; all the iOS steps described here should be followed using Mac.
    The Android steps can be applied to Mac or Windows. Note that this chapter is
    more of a reference and not a hands-on walkthrough. When you have an app that
    is almost complete and ready for submission to app stores and if you get stuck
    at any point, hopefully, you will recall reading about the issue somewhere in
    this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Standalone application settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already tweaked the settings a few times by now, but we've only made
    the minimum amount of changes needed to test the app. There are a lot of options
    here that you need to fill before your app is ready for sale in an app store.
    We'll briefly go over the other standalone application sections and then go into
    more depth in the Android and iOS sections.
  prefs: []
  type: TYPE_NORMAL
- en: The General section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **General** section of the standalone settings is primarily used to control
    the features of LiveCode that are to be included in a desktop standalone application.
    These options cannot be applied to mobile applications, but it is in the **General**
    section that you can set the name of the application file and the build folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The General section](img/image00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Stacks section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Stacks** section will show you a list of the stacks that are already included
    in your project. This will of course include the current Mainstack and the stacks
    that have been added by plugins that you may have used earlier. As you can see,
    all the options are grayed out.
  prefs: []
  type: TYPE_NORMAL
- en: The Copy Files section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Copy Files** section is used to add additional files and folders to be
    used by your app. These are read-only files; if you need changeable files, you
    could still include these files and then write copies of the files to the special
    `Documents` folder. Here is how the dialog box looks with folders of images and
    sounds. These folders are in the same folder as the LC app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Copy Files section](img/image00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The iOS section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Mac**, **Windows**, **Linux**, **Web**, and **Bug Reports** sections are
    not used while making iOS and Android apps, so now, we'll take a good look at
    the **iOS** section bit by bit…
  prefs: []
  type: TYPE_NORMAL
- en: The Build for section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Build for** settings determine which iOS devices the app will work on
    and which minimum iOS version should be used. In deciding what to choose, some
    things are obvious and others, not so obvious. If you are making an app that really
    needs a large area of workspace, then it might not be too successful on an iPod
    or iPhone screen. If it's a small utility that is geared for use on a hand-held
    device, perhaps you don't need to have an iPad version. You are able to choose
    **iPod**, **iPhone**, and **iPad**, or just **iPod and iPhone**, and even just
    **iPad** from this section.
  prefs: []
  type: TYPE_NORMAL
- en: The minimum iOS version you choose may depend on the particular features that
    you have used previously. You don't want users to buy your app only to find that
    a certain feature doesn't work correctly under the older iOS version. You may
    need to set and keep some devices for testing to use old versions of the OS on,
    so that you can be sure that your setting is correct. Also, Xcode allows you to
    download various versions of Simulator, and in LiveCode, you can choose a specific
    version to test
  prefs: []
  type: TYPE_NORMAL
- en: You can always leave these options at lower values for now and make up your
    mind after you have heard how your beta testers get on with the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the **Build for** area of the settings along with the menus you can
    choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Build for section](img/image00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Basic application settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have used some of these settings a few times already. Here is the full set
    of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Display Name**: This is the name that will appear under the icon on the actual
    device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: This is the version number that will appear in the iTunes description
    of the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal App ID**: This is the app ID that you can use in the iOS Developer
    portal while developing or distributing the provisioning profile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile**: This is the provisioning profile that matches this app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Externals**: This is a set of optional external command files that you may
    have used in your app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should try out different display names to see how it looks on different
    devices. There is a limit to how long the name can be before iOS truncates the
    name, placing ellipses in the middle of the text. For iPhone, the limit is roughly
    up to 11 or 12 characters.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to make sure that an update to an app that you submit has a version
    number that is later than the version number of the existing app. Starting with
    1.0.0 makes sense; just remember to increase the number when you do updates. Don't
    worry if you forget, you'll find that the upload process to the App Store fails!
    App stores in general require that the update be of a later version than the one
    that is being replaced.
  prefs: []
  type: TYPE_NORMAL
- en: For development purposes, you can use a provisioning profile that uses an internal
    app ID that contains a wildcard. When you do submit an app to iOS App Store, make
    sure that the provisioning profile is a Distribution one and that the App ID it
    uses exactly matches the **Internal App ID**. Also, make sure that the ID is different
    than any other app that you have in the store. Note that the ID, as shown in your
    developer account page, will show extra digits at its start, for example, `31415926.com.yourname.yourappname`.
    The matching **Internal App ID** would be `com.yourname.yourappname`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example screenshot, a development provisioning file was chosen and
    no external commands were used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic application settings](img/image00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are able to select a different icon for each device type that iOS and iTunes
    requires. The Icons section is straightforward; you click on the **…** button
    and choose the file from your filesystem. It would be possible for LiveCode to
    take one large image and create the various sizes for you, but there isn't an
    option for that! For what it's worth, you may have reasons to show a different
    icon for each case. For example, you could make an icon for Retina displays that
    had more detail in them than a non-Retina display. As you don't have a choice,
    just enjoy the flexibility this gives you!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the **Prerendered Icon** checkbox in the following screenshot. Here, you
    have a choice of creating an icon exactly as it should appear on devices. Also,
    you could produce a square icon with no shading and leave the system to make it
    look like a button with a highlight effect. Take a look at the various apps on
    your own devices; you will find that some people were happy to use Apple''s beveled
    highlighted appearance and others preferred to do their own thing. The **Prerendered
    Icon** feature allows you to do your own thing. In this screenshot, you can see
    that icons for all the types of devices that have been selected, even iPad Retina,
    and they are prerendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Icons](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the `icons/` folder is in the same folder as the app, so you don't
    need to include the full path. An entry of `icons/` is also included in the **Copy
    File** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good reference for Apple icon and image sizes for iOS 7+ is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This chart does not include the old sizes 57 and 72 for the older iPhones and
    iPads.
  prefs: []
  type: TYPE_NORMAL
- en: Icon tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are plenty of tools that will help you create all the icon sizes available
    in the Mac App Store. When I last checked, there were about 40 icons resulting
    from a search for `icon ios`. One free tool that I have used is **Icon Set Creator**,
    which is available at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://itunes.apple.com/us/app/icon-set-creator/id939343785?mt=12](https://itunes.apple.com/us/app/icon-set-creator/id939343785?mt=12)'
  prefs: []
  type: TYPE_NORMAL
- en: Splash screens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the very first iPhone, iOS has had the ability to load and show a splash
    screen immediately when a user touches an app icon. This gives them something
    to look at while the app loads. All that was needed in those days was a default
    image and a name `Default.png`. When iPad came along, there became a need for
    more splash screens. At the very least, you needed a higher resolution default
    image, but you also needed custom images for landscape, as far as having different
    landscape images depending on whether the home button is to the left or right.
  prefs: []
  type: TYPE_NORMAL
- en: LiveCode doesn't give us access to that level of flexibility, but it is extremely
    rare that an app would need a different landscape for two variations; you can
    generally get by with just a single one. The same for the upside-down portrait
    variation, the regular default portrait image can be used for that too.
  prefs: []
  type: TYPE_NORMAL
- en: The Retina displays have their own entries for setting the splash screen, and
    by convention, these files would have names that include `@2x`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which of the splash screen options that are enabled is dependent on the orientation
    options described in the following section. In this screenshot, the **Lscape**
    options are grayed out because the app is set as **Portrait**. Here, the correct
    size **Lscape** image files were selected as well, for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Splash screens](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You may notice that there isn't an iPhone portrait or landscape option here.
    That's because the `Default.png` is used for both. If your app is landscape only,
    then design the splash screen as landscape, but rotate the image 90 degrees clockwise
    to create a 320 x 480 or 640 x 960 `Default.png` or `Default@2x.png` image. One
    important entry in the list is the **4 inch iPhone** entry that is used for iPhone
    5\. The `Default.png` file name is not used here since image file names can be
    anything as long as no spaces are included.
  prefs: []
  type: TYPE_NORMAL
- en: Orientation options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As discussed previously, you are able to specify the orientations supported
    by your app. If the app is used just for iPod and iPhone, then you can set only
    the initial orientation. The choices are **Portrait**, **Portrait Upside-Down**,
    **Landscape Left**, and **Landscape Right**. If the app is used on iPad, then
    you can also set the orientations that support the app while it is in use. The
    selections you make will affect which icons can be imported. The orientations
    are all set with just one drop-down menu and four checkboxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Orientation options](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Custom URL scheme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes while using an iOS device, you will touch a URL in a web page and
    suddenly, you will find yourself in Mail or looking at a page in the App Store.
    This is achieved using a custom URL scheme. In the case of the App Store, links
    begin with `itms-apps://` and from that iOS knows that the link should be opened
    in the App Store app. You can do the same thing with your app. By setting a similar
    custom string, you can get iOS to open your app when the user touches a link that
    starts with the same string in the URL. Further information can be found in the
    lesson given at [http://lessons.runrev.com/m/4069/l/58672-using-custom-url-schemes](http://lessons.runrev.com/m/4069/l/58672-using-custom-url-schemes).
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the string is entered with a simple text input field, shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Custom URL scheme](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Requirements and restrictions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Earlier, we talked about how setting the device, processor instruction set,
    and iOS version is one way to make sure that your users are able to use the features
    in your app. The **Requirements and Restrictions** options let you specify in
    great detail the abilities your device should have. At the very least, if you
    have an app that involves taking photographs, then having a camera in the device
    is necessary! If it''s a video chat app, then having a front camera in your device
    would make sense. The reminders app that we made in the previous chapter should
    have its **Location Services** option selected to make sure that the sort by distance
    feature works. The following is the full list of requirements and restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Requirements and restrictions](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A status bar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last option in the iOS settings controls whether the status bar should
    be visible or not and whether it should have the default status bar appearance
    or a black appearance. For a black appearance, you can set whether it should be
    opaque or translucent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A status bar](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you'll see, the number of options to be set for Android are less than that
    for iOS. This isn't so much because Android is simpler, but because LiveCode exposes
    virtually all of the possible settings for iOS, including a lot that you will
    most likely not need. iOS also has the splash screen variations that are not available
    in Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Android world, there are some settings that you are required to set,
    in particular, the **Permissions** settings. iOS does ask the user for permission
    to use some features, but not until the time your app invokes that feature. You
    must have seen dialog boxes that ask: **Fancy App wants to know your location**.
    Android on the other hand asks for permission to use these features at the time
    the app is installed.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the options for Android…
  prefs: []
  type: TYPE_NORMAL
- en: Basic application settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several of the iOS options are given a different name in the Android OS. Instead
    of **Display Name**, **Label** is used, **Internal App ID** is called **Identifier**,
    and there isn't a provisioning file, but there is a **Signing Key** used in Android.
    Essentially though, they are the same options as in iOS.
  prefs: []
  type: TYPE_NORMAL
- en: The **Icon** is set as part of the basic settings because only one icon is needed,
    so we don't need a set of options. For this one icon, you would have to select
    a 512 x 512 sized version of the image and LiveCode will make the other sizes
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: Android apps don't have a splash screen like iOS, but LiveCode can be given
    a splash screen that it will show as the first screen that the user sees after
    the app loads.
  prefs: []
  type: TYPE_NORMAL
- en: You are able to set the location where the app will be installed with choices
    of **Internal Storage Only**, **Allow External Storage**, and **Prefer External
    Storage**. The external storage being referred to is the SD memory that most Android
    devices have. Android users either don't care where the app is installed or they
    are fanatical about it being stored in the SD memory! You could select **Allow
    External** **Storage** and expect a lot of people to do the same or you could
    choose **Prefer External Storage** knowing that only a minority would change the
    option to force the installation to be in the internal memory. Overall, you upset
    less people by using the prefer external storage setting.
  prefs: []
  type: TYPE_NORMAL
- en: In-app purchasing and push notifications are handled in a different way in Android
    than they are in iOS. If you wish to use in-app purchasing, take a look at the
    RunRev online lessons and also the `developer.android.com` information. Lessons
    for Apple, Google, Amazon and Samsung are located at [http://lessons.runrev.com/m/4069](http://lessons.runrev.com/m/4069).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android developer information on in-app billing can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/market/billing/billing_overview.html](http://developer.android.com/guide/market/billing/billing_overview.html)'
  prefs: []
  type: TYPE_NORMAL
- en: As with iOS, an Android OS can be given external commands and it also has the
    custom URL scheme. One feature that is not found in iOS is the ability to set
    an icon to be used in the task bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the basic **Application Settings** options are presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic application settings](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Requirements and restrictions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within this set of options, you can set the **Minimum Android OS** version and
    set the hardware features that are required. The columns of radio buttons are
    named differently in iOS. Instead of stating that a feature is required or prohibited,
    the buttons state whether the feature is required or used. This becomes information
    that the Android user is able to read and may play a part in whether they choose
    to buy your app or not. So, try to select any that can be applied to your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Requirements and restrictions](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Application permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an iOS app makes use of certain features, such as your location, there
    is an alert dialog box that appears when the feature is first used. With Android,
    any such features are listed during the installation of the app and the user gives
    permission for all the features in one go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of permissions you can choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application permissions](img/image00304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: User interface options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**User** **Interface Options** perform the same function as the orientation
    and status bar options in iOS. If you are submitting an iPad app that is landscape,
    you have to support both variations of landscape. The Android app stores don''t
    have the same requirement, so the options are much simpler. You only have to choose
    whether the initial orientation should be **Portrait** or **Landscape** and whether
    the status bar should be **Visible** or **Hidden**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User interface options](img/image00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building Apps for Beta Testers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have given test builds to friends and colleagues all the way through
    the process of developing your app, but even if you haven't, it becomes more important
    to do so as you get closer to the time when you have to upload the app to the
    app stores. Beta testers can tell you about technical and nontechnical issues.
    Are there any typos in the Credits? Does the icon look good? Were there any strange
    aspects to the installation experience? And of course, does the app do what it's
    supposed to do on the numerous devices and OSes?
  prefs: []
  type: TYPE_NORMAL
- en: The process of making an app to send it to a tester is different on Android
    than on iOS. In fact, it's incredibly easy on Android! Let's look at that first.
  prefs: []
  type: TYPE_NORMAL
- en: Sending an Android app to testers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When click on the **Save as Standalone Application…** option for Android, you
    create an *APK* file. You could e-mail this file to your testers and they could
    do what is called a "side load" of the file on their device. In [Chapter 2](part0026.xhtml#aid-OPEK1
    "Chapter 2. Getting Started with LiveCode Mobile"), *Getting Started with LiveCode
    Mobile*, we saw how tricky it can be to connect an Android device for testing
    and it could well be beyond the technical abilities of some of your testers.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there is a much simpler approach to do this. Take the APK file
    and put it online somewhere. It can be on a Dropbox shared location, Google Drive,
    or perhaps just a server at your office. Whatever it takes for you to get to the
    point where you have a URL that has a link to the file. Now e-mail that URL to
    your testers to an e-mail address that they can read on their devices. Then, it
    only takes a single touch of the link in the e-mail for you to start the download
    and installation of your app.
  prefs: []
  type: TYPE_NORMAL
- en: There is a Development section in the Android device settings that the testers
    may need to visit to enable the feature that allows apps to be installed in this
    way, but it's very easy to make this change.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing an iOS app so that it can work on someone else's device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Things are not quite as straightforward for iOS! First thing you need to do
    is add the unique device ID (UDID) for each of your beta testers' devices to your
    iOS developer account. Your testers can get that number by connecting the device
    to their computer and viewing its Info in iTunes. When you're looking at the **Summary**
    section, you will see the serial number for the respective device. Clicking on
    that number will make it change to a longer number, the UDID that will be needed.
    Once that number is displayed, you can use a keyboard shortcut to copy the number
    to the clipboard (*command* + *C* on Mac and *Ctrl* + *C* on Windows). Have your
    testers perform these actions and then paste the number in an e-mail to you. You
    must make sure that you get the number right because it will use up one of your
    100 allocated devices of your iOS developer account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [https://developer.apple.com/account/ios/device/deviceList.action](https://developer.apple.com/account/ios/device/deviceList.action)
    in order to add the devices to your account. Click on the **+** button just below
    the place where your name appears and you will be able to add the devices to your
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing an iOS app so that it can work on someone else''s device](img/image00306.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, go to the **Provisioning Profiles** section and either create a new **Development**
    profile or select an existing one and click on the **Edit** button. After selecting
    an App ID and a signing certificate, you will then see a list of the devices associated
    with your account. You can enable any combination of devices you want to work
    with this provisioning profile. In this screenshot, you''ll see that the pool
    of test devices is very short:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing an iOS app so that it can work on someone else''s device](img/image00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Generate** button and after a few moments, you will be able to
    click on the **Download** button to download the file.
  prefs: []
  type: TYPE_NORMAL
- en: Download the new profile and add it to Xcode (just double click on the downloaded
    file). Open your app's Mainstack in LiveCode, go to **Standalone Application Settings…**/**iOS**,
    and make sure that the provisioning profile is selected from the **Profile** menu.
    Click on the **Save as Standalone Application…** option again to make sure that
    the new devices are known by the app.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you will have an "APP" file, which is the iOS equivalent of the "APK"
    file for Android. As with Android, you could e-mail this file to your testers
    along with the provisioning file and have the testers "side load" it onto their
    devices. In this instance, that's not such a difficult task because the tester
    can use iTunes to do the same. If you do go down that route, have your testers
    drag the "APP" and provisioning files onto the **Library** in iTunes, connect
    the device, view the **Apps** tab, make sure that the new app is selected, and
    perform a **Sync**. However, it is possible to make things a lot easier for your
    users, as easy as they were for Android users.
  prefs: []
  type: TYPE_NORMAL
- en: Using "over the air" installers for iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since iOS 4.0, it has been possible for us to install an app from a link in
    a web page. Creating the file structure for this to work is a bit tricky though,
    but fortunately, there are at least a couple of tools you can buy to make things
    easy for you.
  prefs: []
  type: TYPE_NORMAL
- en: AirLaunch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HyperActive Software has made a LiveCode plugin that can take your "APP" file
    and make the file structure needed for the "over the air" installation to work.
    There is just a single dialog box that you need to fill the required information
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AirLaunch](img/image00308.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting the "APP" file, you only need to enter the URL where the folder
    will be when it's online and then click on the **Create Files** button. The URL
    link to your online app will be confirmed at the bottom of the window. Click on
    the URL to copy it and then e-mail it to your testers. When they visit the web
    page on their device, there will be a single link to touch and iOS will prompt
    you for approval to install the app. If you look at the next available position
    on your home page, you will see that it is being installed or is already installed
    if you are not quick enough.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information about AirLaunch, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.hyperactivesw.com/airlaunch/index.html](http://www.hyperactivesw.com/airlaunch/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that Apple requires a secure server for this to work and the URL must
    start with HTTPS. The easiest source is to use a Dropbox public folder, though
    you need to make it secure if you''ve signed up for Dropbox after October 4, 2012\.
    Refer to the AirLaunch FAQs for further information at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://hyperactivesw.com/airlaunch/airlaunchtips.html](http://hyperactivesw.com/airlaunch/airlaunchtips.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**AirLaunch workflow in development**'
  prefs: []
  type: TYPE_NORMAL
- en: AirLaunch can be installed as a LiveCode plugin and can be run right after you
    create a standalone version of your app. You can save the installation web page
    on your iOS device and click on it to launch the installer. This method is a lot
    easier to test your app during development than connecting a cable to your device
    and dragging the app into Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: BetaBuilder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'BetaBuilder can be found in the Mac App Store at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://itunes.apple.com/us/app/betabuilder-for-ios-apps/id415348946?mt=12](http://itunes.apple.com/us/app/betabuilder-for-ios-apps/id415348946?mt=12)'
  prefs: []
  type: TYPE_NORMAL
- en: It wasn't made with LiveCode in mind and works with "IPA" files and not "APP"
    files. An easy way to convert the LiveCode APP file into an IPA file is to drag
    the APP file into iTunes and to select Show in Finder by right-clicking on the
    app in the **Library**. This will reveal the IPA file that you can drag into the
    BetaBuilder window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is much the same as AirLaunch''s process, where you select the
    file to use, enter the URL of the online folder, and the program generates the
    files for you. Again, this all happens in a single dialog window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BetaBuilder](img/image00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Both products create similar files as illustrated in the following Dropbox
    public folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BetaBuilder](img/image00310.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Both products make life easy for your testers. AirLaunch has the advantages
    of being a plugin that works within LiveCode, which you're likely to have open
    anyway, and working directly with the APP files that LiveCode creates. BetaBuilder
    is a Mac app that is run separately and requires you to transfer the files to
    your server using some other Mac application. AirTouch has FTP built-in to streamline
    your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: BetaBuilder's main advantage is that it's incredibly cheap! It also generates
    a web page that is more informative than AirLaunch, which shows just a simple
    link with the name of the app. However, AirLaunch allows you to export the template
    and edit or integrate it into your website.
  prefs: []
  type: TYPE_NORMAL
- en: '![BetaBuilder](img/image00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: TestFlight
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A service named TestFlight was in place during the time I was writing the first
    edition of this book that worked similar to AirLaunch and Beta Builder. In 2014,
    Apple purchased TestFlight and merged it with **iTunes Connect** (**iTC**) that
    is used to submit apps to the Apple App Store. TestFlight is a lot more than what
    you need to just send out personal apps to a few testers, but it is required while
    dealing with apps that go out to as many as 1000 testers. One big change is that
    you will also need a Distribution Profile and Certificate to start the submittal
    process as described further in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'TestFlight has two levels of testing: **Internal** and **External**. Internal
    testing is for members of your development team. You can add up to 25 internal
    testers using the **Users and Roles** section of iTC and assign them a **Technical**
    role. They will get an e-mail invitation and need to activate an iTC account.
    When you start testing your app, they receive another e-mail announcement and
    need to download the TestFlight app to their device that must run iOS 8 or its
    later versions. The TestFlight app then installs your app for testing. The test
    only lasts for 30 days unless you update it and submit a new version. The TestFlight
    app can also be used for error reporting and feedback.'
  prefs: []
  type: TYPE_NORMAL
- en: External testing is similar, but requires a Beta App Review and must comply
    with the full App Store Review Guidelines before the testing begins. A review
    is required for new versions of your app that contain significant changes. Up
    to 10 apps can be tested at a time, internally or externally. You can add up to
    1000 external testers just by supplying a list of their e-mail addresses and checking
    whether you have their approval. After releasing, the testing proceeds in the
    same manner as it did with internal testers. At the time of writing this book,
    a tester could not be on both the internal and external lists. Refer to [https://developer.apple.com/testflight/](https://developer.apple.com/testflight/)
    for further information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Missing push notification entitlement**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In early 2015, you would get this e-mail warning message while submitting an
    app to iTC: "Your app appears to include API used to register with the Apple **Push
    Notification** service, but the app signature''s **entitlements** do not include
    the "aps-environment" **entitlement**." This is an issue in LC and does not affect
    anything. Apple''s Push Notification Service is built in the LC engine and LC
    doesn''t bother to strip it out if you don''t use it. It is documented in bug
    10979 in the RunRev Quality system at [http://quality.runrev.com/process_bug.cgi](http://quality.runrev.com/process_bug.cgi).'
  prefs: []
  type: TYPE_NORMAL
- en: Using "over the air" installers for Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While testing with the Android Emulator or direct connection should be sufficient
    to learn LiveCode development, the real world is much more complex. In the last
    several years, testing alternatives have emerged to help test your apps on other
    Android devices. With numerous Android devices, this is really needed. There were
    8614 listed in the Google Play store at the last count and many more must've been
    listed even now, when you read this. There are also variations in the Android
    OS available at Amazon, Samsung, and others. Hopefully, testing through Google
    testing resources will be adequate for your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Google testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Google also has a testing capability built in their Google Play store. As with
    Apple''s iTC and TestFlight; for Google, you have to prepare your store list and
    upload your APK just as you would when publishing it. To distribute to testers,
    you need to create and select a Google Group or Google+ Community that the testers
    join. Google has alpha and beta tests, which are similar to Apple''s internal
    and external testing. Notification e-mails are sent to testers with a link to
    the testing section of Google Play. Because your testers can''t leave public reviews
    for alpha/beta apps on Google Play, it''s a good idea to let them know where they
    can provide you feedback (an e-mail address, website, and so on). Further details
    can be found at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://support.google.com/googleplay/android-developer/answer/3131213?hl=en](https://support.google.com/googleplay/android-developer/answer/3131213?hl=en)'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Amazon has a tool called **Live App Testing** to allow developers to beta test
    apps through the Amazon appstore. Developers can invite up to 500 specific users
    to test the app through an e-mail invite. In addition to this, the **A/B Testing
    Service** allows to conduct in-app experiments to try different UI interactions
    with different groups of users. It supposedly also supports iOS, but requires
    specific APIs that would need development of LiveCode externals.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.amazon.com/public/community/post/TxCVSAM1IG7NX2/Launch-Better-Apps-Announcing-Live-App-Testing](https://developer.amazon.com/public/community/post/TxCVSAM1IG7NX2/Launch-Better-Apps-Announcing-Live-App-Testing)'
  prefs: []
  type: TYPE_NORMAL
- en: Samsung testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To facilitate testing of apps, Samsung has developed **Remote Testing Lab (RTL)**
    facilities. These labs contain real devices that allow developers to upload and
    test their apps. To use these devices, you need to download and run a Java applet
    that connects your APK to a live device in the Samsung lab and provides an interface
    to interact with this device. This may have some potential in the future, but
    is included here for possible investigation. For more information on Samsung testing,
    refer to [http://developer.samsung.com/remotetestlab/rtlAboutRTL.action](http://developer.samsung.com/remotetestlab/rtlAboutRTL.action).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous testing alternatives are the primary alternatives associated with
    the iOS and Android device manufacturers. Since Apple bought **TestFlight**, several
    other cross-platform testing solutions have picked up the slack. A quick search
    on the Internet shows **HockeyApp**, **Crashlytics**, **Ubertesters**, **TestFairy**,
    and others that may have potential as well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app store submission file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The biggest hurdle 'that you need to overcome in order to make a version of
    your app that can be submitted to app stores is acquiring a distribution certificate.
    The process is quicker for Android, but does involve some typing to be done in
    the command line, and there is a slight difference if you are on Windows rather
    than Mac. The iOS process has many steps to it, but at least they don't involve
    typing cryptic commands. We'll look at Android first.
  prefs: []
  type: TYPE_NORMAL
- en: Finding and using the Android Keytool application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the thing that was installed when you added the Java Development Kit
    is a tool to make a "keystore" file, which is a self-assigned certificate. It's
    this tool that is used to create the certificate you'll need in order to distribute
    an Android app.
  prefs: []
  type: TYPE_NORMAL
- en: On Mac, you don't need to find this application, you can simply type the command
    in the Terminal and you'll find the tool. On Windows, you need to navigate to
    the folder where Keytool is located first. Before getting that far, you have to
    first open the command line as Administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, the CMD application is found at `C:\Windows\System32\`. Go to that
    directory in Windows Explorer, right-click on the file, and select **Run as Administrator**.
    The Keytool application will be in the bin folder of the Java JDK directory. Once
    you are at Command Prompt, change directories to get to that location, which will
    be something like `C:\Program Files\Java\jdkx.x.x_xx\bin\`, where the `jdkx.x.x_xx`
    part would actually be the version of the JDK that you have installed. You should
    be able to get all the way there with a line like the following, where cd is the
    command used to change directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: On Mac, you will use Terminal, which is located in `/Application/Utilites`.
    Just open Terminal and you'll immediately be able to use the Keytool application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In either case, you will now type a relatively short line and then answer the
    various questions that appear. For better understanding of what is going on, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developer.android.com/guide/publishing/app-signing.html](http://developer.android.com/guide/publishing/app-signing.html)'
  prefs: []
  type: TYPE_NORMAL
- en: For our purpose, we'll just type in the right command, and all should go well,
    even if we don't understand what we typed!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the line that you need to type, changing the keystore and alias names
    to match the names you wish to use for this certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When you press the Enter or Return key, you will start to see a series of questions
    starting with the password you wish to use for the keystore. Further questions
    will ask for your full name, details about your company, city, and country. It's
    a set of data that can be encoded into a keystore that is unique and has enough
    accurate information through which a user can decide whether to trust the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: When the tool is finished, you will have the keystore file that LiveCode requires.
    It will be easily available in your home folder on Mac and somewhat buried in
    the JDK bin folder on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Basic Application Settings** of the **Standalone Application Settings**
    of your Mainstack and navigate to the file from the Key entry. Once chosen, this
    section will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Finding and using the Android Keytool application](img/image00312.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have chosen your icons and splash screen and requirements and permissions,
    you should be able to build a version of the APK file that can be uploaded to
    app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a distribution certificate for iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, there is no command line typing involved to get a distribution
    certificate for iOS, but there are a lot of steps involved. The First place to
    visit to get the certificate is the iOS Developer Portal to make sure that you
    have set up a dedicated App ID and Provisioning file for this particular app.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot represents the steps taken to get a certificate and
    profile for an app that is to be named `EasyReminder`, which is the reminder app
    that we made earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **App IDs** part of the portal, there is a **+** button that adds a
    new app ID to your account and asks for a name for that ID. Here, you can see
    that the ID is given the name **EasyReminder** and a Bundle Identifier `com.gerdeen.easyreminder`.
    This needs to match the **Internal App ID** set in LiveCode. If you are *not*
    member of multiple development teams, you will not see the App ID Prefix shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a distribution certificate for iOS](img/image00313.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that there is an App ID, it can be used to set up a Distribution Provisioning
    Profile in the **Provisioning** section. If you haven''t yet made a Distribution
    Certificate, you will see a button telling you to make one. Clicking on that button
    will present you a question about what kind of certificate you want to make:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a distribution certificate for iOS](img/image00314.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **Continue** button takes you to a long description of how
    you have to make a request to the certificate authority and how to upload a file
    that Keychain Access generates. When you encounter this situation, carefully follow
    the steps shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a distribution certificate for iOS](img/image00315.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have uploaded that certificate request file, you will be able to
    make a distribution profile that uses the dedicated App ID and the distribution
    certificate. The final entry will look like this, and you can use the **Download**
    button to get a local copy of the provisioning file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a distribution certificate for iOS](img/image00316.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You now have the file that LiveCode requires, only you don''t select it in
    the LiveCode settings. Instead, you double-click on the file and it installs itself
    using Xcode. Once it is in Xcode, you can then select it from the **Profile**
    menu in the **Basic Application Settings** in LiveCode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a distribution certificate for iOS](img/image00317.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As with Android, make sure to add icons, splash screens, set requirements, and
    so on and you will be able to save an APP file, ready to go, to the iOS App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to the app stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each app store guides you through the steps of how to upload a new app and there
    are quite a lot of steps involved! It could take another book to show you all
    the screenshots you have to wade through. Showing these screenshots here would
    not be so valuable mainly because of their large quantity, but also because the
    process changes from time to time. For example, Google changed the name of their
    service from Android Market to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is some similarity between what each of the stores asks you, so we''ll
    look at what preparations you might need before heading off to the stores. When
    you are ready to proceed with the uploading, these are the pages you need to start
    with for the respective app stores:'
  prefs: []
  type: TYPE_NORMAL
- en: 'iTunes Connect: [https://itunesconnect.apple.com](https://itunesconnect.apple.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Play: [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Appstore: [https://developer.amazon.com/home.html](https://developer.amazon.com/home.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Samsung Apps: [https://seller.samsungapps.com/](https://seller.samsungapps.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's similar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All three app stores will ask for a description of what the app does, rating
    information, price, a support website or e-mail address, and category information.
    In order to ask a price, other than Free, you will have to set up a merchant account.
    In the case of Apple, you'll have to give a web page address for support. Google
    just asks for contact information and Amazon shows support as being optional.
    All three ask for screenshots and allow you to upload a demo video.
  prefs: []
  type: TYPE_NORMAL
- en: What's different
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple asks for a lot of information, but spread over many screens. As you enter
    data, you will need screenshots and other information that you haven't gathered.
    You can **Save** what you have entered and come back later. Be sure to get it
    right before you click on **Submit for Review** because Apple does not allow you
    to change the information without uploading a newer version of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The upload of the actual app file for iOS is handled by the Application Loader
    utility that comes as part of Xcode. To access Application Loader from the Xcode
    developer tools package, choose menu **Xcode** | **Open Developer Tool** | **Application
    Loader**. You can also download it in your Application folder as described in
    the iTunes Connect support document at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf](https://itunesconnect.apple.com/docs/UsingApplicationLoader.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Google asks for a lot of information, but it's all in their Developer Console.
    There are sections for uploading the **APK**, for completing the **Store Listing**
    and **Pricing & Distribution** as well as other operations. Be careful if you
    set the price as free as you cannot change it and it's instantly and permanently
    declared a free app. To change it later, you would need to create a new app with
    a new package name and set a price for the new app.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon asks for about the same information as Apple and Google. You can check
    whether your app works with Amazon by simply dragging it to their developer web
    page. They run a quick compatibility test and then run more tests on Android Nexus
    7 and their Fire phones and tablets. You can start the submittal process for your
    app directly from the test results page, but then you need to establish a developer
    account and provide the same information as before.
  prefs: []
  type: TYPE_NORMAL
- en: Samsung Apps is an app store designed to provide apps specially customized for
    Samsung mobile phones. It is a focal point for both developers and Samsung handset
    users. Without actually signing up, it is difficult to get details of how the
    store works for non-Samsung devices. For additional information, review the article
    at [http://www.pivoteast.com/guide-how-to-register-and-submit-apps-to-samsung-apps/](http://www.pivoteast.com/guide-how-to-register-and-submit-apps-to-samsung-apps/).
  prefs: []
  type: TYPE_NORMAL
- en: Bottom line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The submission process is just about the most stressful part of developing a
    mobile app! It makes you feel better about the other stages you've been through;
    perhaps those weren't so bad after all…
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you have a partner who can be a second pair of eyes to help you understand
    all the questions to not miss something vital that will haunt you later.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I don't know about you, but I'm beat! This mobile app developing business can
    be overwhelming. Even the administrative side of things can be quite involved.
    In this chapter, we covered some of the less programmatic tasks such as examining
    all the options in the Standalone Application Settings, fighting our way through
    command lines and red tape to get an app certified, and mentally preparing ourselves
    to submit our app to app stores.
  prefs: []
  type: TYPE_NORMAL
- en: We're at the end of the road as far as making use of mobile features in a LiveCode
    stack and taking them through to the point of making a real mobile app out of
    them is concerned. Next up, we'll look at a few add-ons to LiveCode that would
    enable you to use even more mobile features.
  prefs: []
  type: TYPE_NORMAL
