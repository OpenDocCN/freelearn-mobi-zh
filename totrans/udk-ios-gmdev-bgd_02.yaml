- en: Chapter 2. Beginning Urban Warrior, a Third-person Shooter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we now have UDK installed and have gotten the UDK Remote to work
    so we are able to play our games on the PC using the input from our iOS device.
    This is a great start, but now it's time to get our hands dirty and start building
    something. In this chapter we will build upon what was covered in the first one
    by taking our first steps towards building our very first level.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the UDK environment and the interface aspects of it that you will
    need to know
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build brushes into our world to create an interior space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add textures, lighting, and 3D models in that space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So with that, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Starting out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When beginning to use UDK, you may feel frustrated with how complex the editor
    looks at first glance or how it may not work the way you think it should. In order
    to help with the transition to these tools, we will ease into the process by looking
    at the basics of UDK, starting off with the key parts of its interface that you
    should know the existence of as we create our very first level!
  prefs: []
  type: TYPE_NORMAL
- en: A brief walkthrough of the UDK interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us start by looking at the UDK interface, which is what you see upon starting
    the application and closing the welcome menu. While we brushed off learning what
    all of the menus and buttons did in the previous chapter, to just get the Mobile
    Previewer working, it is important to know all of the tools at your disposal,
    as one of the most important things a game developer can do is to know what tool
    to use to do a certain task. So you can make whatever you imagine appear on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: To an extent, this will only really come with time, although I would definitely
    recommend exploring the interface and all the features shown in the screenshot
    by clicking on them and simply experimenting with them as much as possible (and
    not towards the end of an actual project), so that the basics of the interface
    eventually become second nature to you. I should also note that I will not cover
    all of the interface; some of it refers to advanced features that we don't need
    for now or won't be able to use due to our goal in creating an iOS game, though
    I will touch on some features not used briefly due to their importance in non-iOS
    games, should you want to do multi-platform development.
  prefs: []
  type: TYPE_NORMAL
- en: '![A brief walkthrough of the UDK interface](img/image_1901_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Toolbox sidebar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will cover the icons you see on the far left-hand side to begin with. This
    is the toolbox categorized with **Modes, Brushes, CSG, Volumes, Select**, and
    **Go to** as labels above buttons that are associated with them. **Modes** are
    very important, so let us look at those first and foremost.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't remember what something is, if you leave your mouse cursor on anything
    after a short period the icon's name/function will appear; this will be very handy
    for using the following guide and identifying the part of the interface you are
    on and what it does!
  prefs: []
  type: TYPE_NORMAL
- en: Modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Modes** contain all of the different ways of interfacing with your level.
    Specifically, it contains the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Camera Mode**: This is UDK''s basic default camera mode. You will be working
    in this one quite a lot!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geometry Mode**: This brings up the basic tools for editing geometry and
    in particular CSG brushes. (For manipulations similar in many ways to what you
    would do in an application, such as Autodesk''s 3D Studio Max). One of the nice
    things it allows us to do is build objects to the grid making it easier to not
    get holes in our level. We will be using it extensively in [Chapter 6](ch06.html
    "Chapter 6. Bringing it All Together"), *Bringing It All Together*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terrain Editing Mode**: This mode is used for the creation of terrains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Texture Alignment Mode**: This mode is used for aligning textures properly
    on brushes with operations such as rotation, among others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mesh Paint Mode**: This is an in-editor vertex color painting tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static Mesh Mode**: This is a tool to assist with quick static mesh additions
    in a level (via speeding up their placement process). This is very useful if,
    for example, multiple static meshes are used to populate a scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Landscape Mode**: This landscape creation tool with abilities used in changing
    terrain allows you to import height map data if you are familiar with it. However,
    UDK on iOS systems does not support terrain, so we will not be using it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foliage Mode**: This is a semi-automatic tool for the creation of foliage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the screenshot for these modes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Modes](img/image_1901_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Brushes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Brushes** are the geometry that we can bring into the world. The following
    are the possible options of things we can create, and we will discuss what the
    geometry really is and how it works after we discuss the interface. The following
    features are available in brushes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cube**: This is a cube/box-shaped brush builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cone**: This is a cone-shaped brush builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Curved Staircase**: This is a curved staircase brush builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cylinder**: This is a cylinder-shaped brush builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linear Staircase**: This is a standard, straight staircase brush builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sheet**: This is a flat 2D plane-like brush builder (where subdivisions can
    also be added, if needed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spiral Staircase**: This is another curved staircase brush builder, this
    time however with no restrictions in the angle of the base used (the previous
    Curved Staircase one had a restriction of 360 degrees on this, hence the spiral
    name for this one rather than a curve)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tetrahedron (Sphere)**: This is a sphere-like CSG brushes builder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cards**: This is a brush builder which, because of its appearance, can be
    utilized for the creation of various special/visual effects with the use of textures
    such as low-cost trees by using two textures instead of a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the screenshot for these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Brushes](img/image_1901_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next part of the toolbox contains the brush CSG operations (again, see
    the next section *Volumes and Select* for a more thorough explanation of the terms,
    suffice it to say these are key in shaping brushes into a meaningful and playable
    level):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add**: This uses the last selection of the brush-builder mode, and with that,
    as a template, creates an additive brush in the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subtract**: This is used in the same way as the preceding option, but this
    time there is the creation of a subtractive brush'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intersect**: This will only show the section of a brush that overlaps other
    intersecting brushes with the rest not being visible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deintersect**: This results in the inverse of the previous operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Brushes](img/image_1901_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Volumes and Select
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Volumes** and **Select** cover the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add Special Brush**: This facilitates the creation of more complex brushes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Volume**: In much the same way that clicking on a CSG operation will
    create a new brush, clicking on **Add Volume** will create a piece of geometry
    with a special property. Volumes are invisible, but can be used for all sorts
    of effects like creating water, lava, or triggering different events. Feel free
    to play around and see all of the kinds of things you can do. We will be using
    many different kinds of volumes in this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Selected Only**: This is useful (as with the other three selection buttons)
    in order to make selections in a busy and/or cluttered level; this is a tool for
    displaying exclusively the selected actors in your editor/game level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hide Selected**: This is a tool for hiding the selected actors in your level
    (the reverse of the preceding function).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invert Selection**: This is a tool for inverting the previous actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show All**: This is a reset tool for the actions of selecting where all actors
    are now displayed in the editor again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the screenshot for these features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Volumes and Select](img/image_1901_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Go to and Builder Brush
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we have **Go to** (**Actor** and **Builder Brush**) which, like the
    previous ones, are selection tools to assist with reverting to either an actor
    or the brush in your viewport. Again, these can be very handy and useful, maybe
    not so much with what we are doing in this chapter (as you would be hard pressed
    to lose your builder brush in a level consisting of one room!) but as soon as
    your game starts expanding, you will find that you will be using them more and
    more in order to save time looking through your increasingly complex UDK editor
    structures. The following screenshot shows this tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Go to and Builder Brush](img/image_1901_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewport toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let's look at the **Viewport** toolbar. Each of the viewports that you are
    currently using has a set of icons above them which we refer to as the Viewport
    toolbar. By default, UDK uses four viewports like most 3D modeling programs. However,
    there are other options which we will be talking about in [Chapter 5](ch05.html
    "Chapter 5. Action Sequences for Urban Warrior"), *Acti on Sequences for Urban
    Warrior*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following viewports from left-hand side to right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewport Options**: This makes a number of options available to you, for
    example, showing frames per second within the viewport. It should be noted that
    many can be switched on and off (like the aforementioned one, for example) but
    are also available as icons (discussed as follows).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viewport Type**: You can switch between **Perspective, Top, Front**, and
    **Side**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real Time**: This will show what the game will look like at runtime, turning
    on sound effects and particle systems. This does however have an effect on editor
    speed and performance so it is to be used sparingly and/or only when necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next 11 icons from **Brush Wireframe** to **Lighting Only with Texel Density**
    switch the various views in the viewport to whichever one required by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game View**: This showcases the visualization that would be seen in runtime
    (for example, click on the default Perspective Viewport to see all wireframes
    disappear).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lock Viewport**: This is self-explanatory to an extent but will lock not
    the viewport itself, but the **Go to** actions described previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lock Selected Actors to Camera**: This will "lock" the next actor selection
    (after the button/icon is clicked) to the viewport camera. You can then move the
    camera and click this again and the actor will also be moved. This is essentially
    a handy tool for moving parts of the level/game in the viewport in a very rapid
    manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level Streaming Volume Previs and Post Process Volume Previs**: This will
    enable streaming and post-processing manipulations to be visualized in the given/selected
    viewport. Post-processing doesn''t work inside UDK on an iOS device, and as we
    are not using multiple levels, we have no need to use Level Steaming Volume, so
    we will not be using these.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera Movement Speed**: This will allow you to change the viewport camera
    speed (four settings/different speeds provided).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play In Viewport**: This will allow you to play the game in the viewport,
    which is very handy for prototyping, but will not be representative of your game
    on iOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tear Off Floating Copy**: This will undock/detach the given viewport from
    the four-viewport mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximize Viewport**: This will maximize a viewport (temporarily eliminating
    the four-viewport mode) and, when clicked again, revert back to the original,
    which is very handy for quickly zooming in on an area or specific perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the screenshot for these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewport toolbar](img/image_1901_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s move to the top of the screen, right below the main menu bar and
    explore all the icons found inside the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create New Level**: This will create a new level, not however before UDK
    asks you to save your current one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open An Existing File**: This will load a level which is saved; again same
    prompt as the preceding one applies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dropdown menu**: This is a feature for finding recently accessed levels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle Map File As Favorite**: This is a way of signifying a UDK level as
    a favorite one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save Current Level**: This will save your level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save All Levels**: This will save multiple levels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save All Writable Packages**: This will save packages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Undo...**: This is fairly self-explanatory, do remember however that after
    a **Build...** process for a level this will not work'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redo...**: The same rule as the preceding one applies!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selection Mode**: This is a tool to only select and not manipulate in any
    way the parts of the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translation Mode**: This is a tool to move parts of the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotation Mode**: This is a tool to rotate parts of the level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaling Mode**: This is a tool to scale parts of the level uniformly, in
    the X, Y, and Z axes?combined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-Uniform Scaling Mode**: This is a tool to scale parts of the level non-uniformly,
    such as stretching it, for example, in one specific axis rather than all three'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reference Coordinate System**: World and local spaces apply here (the two
    available modes) as the coordinate systems affecting transformations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Actors**: This is a useful tool for locating actors in more complex
    levels containing many different actors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open The Content Browser**: This opens the asset repository window for UDK;
    we will be looking at this later in this chapter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Unreal Kismet**: This opens Unreal Kismet which is the UDK visual-scripting
    tool for scripted events, sequences, and other complex tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Unreal Matinee**: This opens Unreal Matinee which is the way that UDK
    creates cinematic scenes as well as a number of other things that involve directed
    movement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image_1901_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Continuing along the toolbar, we have the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Distance to far clipping plane**: This is a far clipping plane slider, used
    typically for performance savings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow Translucent Selection**: This is an icon which helps in the selection
    of the translucent parts of the UDK level/game'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encompass To Select**: This is a self-explanatory selection tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low Quality Materials**: This allows the user to display low quality materials
    on objects for those allowing it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Geometry For Visible Levels**: This creates the level geometry for
    the level you are working on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Lighting**: This creates the lighting for the level you are working
    on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Paths**: This creates the paths for the level you are working on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Cover Nodes**: This creates the cover nodes for the level you are working
    on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build All**: This creates all of the above. Typically, when you work on your
    level, you don''t have to use this option every time you make a small change to
    see what the gameis like when played. That being said, do remember you cannot
    undo something being built. Remember as well that for larger levels, if you are
    working on lighting only and want to update your map, you do not have to build
    everything, but merely use the aforementioned button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build All and Submit to Source Control**: This will build everything and
    also use version control, useful for tracking particularly for larger/team-based
    projects. However, this is not set up as a default option'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lighting Quality Setting**: These are settings for lighting; the ones available
    are preview, medium, high, and production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fullscreen Mode**: This switches the editor itself to full screen mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle Real Time Audio**: This is the in-editor audio button, the volume
    for this can be adjusted by right-clicking and using the resulting slider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulate Mobile Features**: This is used for rendering emulation changing
    to a mobile one for a better approximation of the resulting outcome on a mobile
    device (graphics-wise)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install on iOS device**: This is self-explanatory and a button we will be
    using in [Chapter 8](ch08.html "Chapter 8. Publishing and Monetizing Your Game"),
    *Publishing and Moneti zing Your Game*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Previewer**: We have already used this so you should know what it
    does! Needless to say we will be using more of it too'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit Mobile Previewer Settings**: We have also used this already so you should
    know what this does too'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start this level on PC**: This launches PC run-time of the game/level, but
    as we are purely doing iOS development, we will not be using it as it does not
    emulate mobile input or use the OpenGL renderer used to simulate mobile rendering'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Kismet Debugging**: This can be switched on and off and helps with
    the Kismet sequence debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Play this level in an editor window**: This is self explanatory and very
    useful again for rapid prototyping, but it is not representative of what an iOS
    device will be able to do'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/image_1901_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the main menu bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let us move on to the main toolbar at the top of the screen. I will run
    through this in a quicker fashion as opposed to the previous features since the
    majority of the functions are replicated (we have already covered them and they
    are duplicated in different parts of the toolbar menus) and some of these are
    more advanced and I would like to avoid overcomplicating the first few steps in
    UDK that we are making in this chapter. It is still however worth quickly looking
    through these as there are many useful options here too.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main menu bar options:'
  prefs: []
  type: TYPE_NORMAL
- en: File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like most programs, under the **File** menu you will be able to open files,
    save them, and create new ones. You have the opportunity to import files into
    your level or export your level into a file as well. The bottom of the menu allows
    you to easily select your favorite levels as well as those you've recently opened.
  prefs: []
  type: TYPE_NORMAL
- en: Note that **Save** does not have a shortcut in UDK and by clicking *Ctrl+S*
    you are actually creating a subtractive brush. Be sure that you save your levels
    by selecting **File** | **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Edit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the location of the normal **Undo/Redo** functionality that programs
    usually have as well as an additional way to access things we discussed before
    like the ability to **Translate, Rotate**, and **Scale** objects. You also have
    access to **Cut, Copy, Paste, Duplicate**, and **Delete** functionality of objects
    inside your level. The bottom section allows for different ways to select different
    objects' of note is **Find Actors** which will bring you to a menu showing you
    everything in your level, making it easy to find something specific you're looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: View
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **View** menu offers the ability to see all of the windows available inside
    of UDK. All of the different types of browser windows can be accessed as well
    as the properties of an actor, surface, or the level itself. You can adjust the
    properties of snapping that the level does in how far you can drag, scale, and
    rotate an object. There are options to customize your own UDK interface as well,
    such as changing your viewports or toggling the use of full screen mode.
  prefs: []
  type: TYPE_NORMAL
- en: Brush
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Brush** menu contains all of the things that we discussed previously with
    the toolbox sidebar with the additional option to import or export the different
    brushes that you create.
  prefs: []
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Build** drop-down menu contains various options in terms of rebuilding
    your levels. The menu also allows you to only build the things that you've changed,
    making it run quicker; you don't want to rebuild your lighting every time unless
    you've changed something after all, as it normally takes a long time with a larger
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Play
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Play** section of the main menu bar gives you the option to play your
    game in different ways based on the platform you are creating for. We will be
    using the On Mobile Previewer for most of the book, but we will show how to install
    on iOS devices in [Chapter 8](ch08.html "Chapter 8. Publishing and Monetizing
    Your Game"), *Publishing and Moneti zing Your Game*
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Tools** menu, however, does seem to have a lot of exclusive (non-icon)
    content, such as the ability to check a map of errors (compile it without actually
    building it), cleaning up BSP and others, although most of these are not of immediate
    interest to us for the time being as they do not significantly impact the beginner''s
    path to creating a basic game. All these options are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tools](img/image_1901_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Preferences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Preferences** toolbar, which is the longest toolbar, has many different
    options which can toggle on or off to customize your UDK experience. It is also
    worth noting that a lot of people starting out will often check or uncheck something
    here, often by using a keyboard shortcut or by mistake, and then be very perplexed
    when something does not work right or is not visible! For that reason, it is worth
    knowing about the options so you can try to solve the problem by yourself. The
    following screenshot shows us the options available in preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preferences](img/image_1901_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, **Help** carries information about online help, forums, the version
    of Unreal being used, startup tips, and Swarm-UDK's distribution solution for
    multi-core computers (which can help with speeding up lighting calculations).
  prefs: []
  type: TYPE_NORMAL
- en: The console bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish with our look at the interface, let''s finally focus at the bottom
    of the screen at what is known as the **console bar**. Refer to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The console bar](img/image_1901_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this part, there is a command line in which you can input console commands
    directly into the Unreal Editor. We will be using console commands later in the
    book, but inside the actual game and not the editor, but the option exists.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there is a **Source Control** icon (which is not set up by default),
    a lighting and paths build status button and a package icon.
  prefs: []
  type: TYPE_NORMAL
- en: Moving towards the bottom right of this part of the UDK editor, you can also
    get information on your mouse cursor position (coordinates) and, if you have an
    object selected, information about the object itself.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can perform manual operations on items using the four DrawScale
    textboxes (**DrawScale** plus **DrawScale3D X, DrawScale3D Y**, and **DrawScale3D
    Z**). There are the Drag, Rotation, and Scale Grids as well that are something
    incredibly important to have turned on when creating your level. With the option
    is disabled, when an item is translated it can be moved to any position causing
    holes. For example, if you are trying to create a door by using a subtractive
    brush being placed over an additive one, if the brushes are off by just a tiny
    bit the section that is not covered by the brush will form a wall. When building
    our actual game level we will be using this to great effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, auto-save features are also found here which will automatically save
    the map to a backup file in case Unreal crashes and/or breaks your level. Better
    to be safe than sorry! The following screenshot shows all these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The console bar](img/image_1901_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keyboard shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One final note; keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: UDK, as with all 3D design applications makes extensive use of these (as you
    have seen from screenshots already) and you can use your keyboard to your heart's
    content here. One piece of advice however; if you use other 3D applications (or
    indeed ANY applications with shortcuts), be aware because UDK is a complex tool
    and you may, as I mentioned earlier, initiate something by mistake or change a
    setting you did not want to change simply because you did not remember the right
    keyboard shortcut at the time.
  prefs: []
  type: TYPE_NORMAL
- en: This happens to the best of us, but it would be best to avoid it if we can.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, as the book continues on in addition to showing how to access
    things from menus, I will introduce the shortcuts that I personally use on a common
    basis while working with the tool.
  prefs: []
  type: TYPE_NORMAL
- en: Creating environments and the basics of level design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we delve into utilizing the interface described previously and also putting
    to use the knowledge gained so far for the creation of an interactive level, (your
    first one!) let us delve into some theory.
  prefs: []
  type: TYPE_NORMAL
- en: CSG brushes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve been throwing around the word brushes and CSG a lot, so it''s a good
    idea to define what that actually is. **Constructive Solid Geometry** (**CSG**)
    is a term used in UDK for world geometry which UDK creates from the brushes that
    you create in the level. Brushes, on the other hand, are three-dimensional objects
    that are used to define space. We define that space in four different ways: **Add,
    Subtract, Intersect**, and **Deintersect**.'
  prefs: []
  type: TYPE_NORMAL
- en: Static meshes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Static meshes**, on the other hand, are polygonal creations that can also
    be used for the formation of a game level in Unreal/UDK which are not moving within
    the world, but don''t worry, we''ll also cover how to create moving objects as
    well in a future chapter. In this chapter, we will be placing meshes to give our
    environment something other than walls to see.'
  prefs: []
  type: TYPE_NORMAL
- en: Later in this book, we will be looking at importing static meshes into UDK from
    a 3D modeling package, thus showcasing the limitless potential of world creation
    and world mesh population of the engine, given some basic 3D asset creation skills
    from the developer.
  prefs: []
  type: TYPE_NORMAL
- en: The differences between CSG brushes and static meshes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So what are the differences then between using brushes and/or static meshes?
    Why use one or the other?
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be aware that today static meshes are really the professional''s
    choice in world creation in UDK, for two simple reasons: performance and aesthetics.
    It is much faster to use static meshes and (provided you use quality ones!) they
    will look much, much better than brushes. Brushes have also had or led to their
    fair share of problems such as causing holes, and static meshes have provided
    the much needed solution to resolving such inefficiencies.'
  prefs: []
  type: TYPE_NORMAL
- en: However, there is still a place for brushes. In the game industry, many game
    designers will block out a level using brushes and get the scripting working correctly.
    That way the designer is able to focus on making the game fun and making sure
    the functionality of the level is completed to make sure that everything will
    work. We will be using this mindset for this chapter and in the next chapters
    up to [Chapter 6](ch06.html "Chapter 6. Bringing it All Together"), *Bringing
    It All Together*. With the level completed, a level designer can then give the
    level to an environmental artist who will then replace the brushes with meshes
    that they've created, which is what we will be doing in [Chapter 7](ch07.html
    "Chapter 7. Advanced Content Creation for Urban Warrior"), *Advanced Content Creation
    for Urban Warrior*. That being said, all studios are different, so a workflow
    in one company could be completely different to another's.
  prefs: []
  type: TYPE_NORMAL
- en: Moving around viewports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Clicking inside of a viewport will give you access to the camera that it has.
    During the course of the book, we will work in a variety of viewports so you will
    be using the following to navigate efficiently in the level:'
  prefs: []
  type: TYPE_NORMAL
- en: Holding the **Left Mouse Button** (**LMB**) while moving left or right will
    rotate your camera left and right, while moving up and down will move forward
    and backwards along the camera's X-axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For looking around, use the **Right Mouse Button** (**RMB**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A combination of the LMB and RMB will result in your camera panning up and down
    its Z-axis or left-hand side and right-hand side along the Y-axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse scroll wheel will pan along the camera's X-axis giving the appearance
    of zooming in and out.
  prefs: []
  type: TYPE_NORMAL
- en: Adding world geometry and texturing to the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have all of the groundwork covered, let's get started on making
    our very own first level from scratch!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—creating a basic room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin with, under **File** select **New** and from the popup that comes up,
    select the **Blank Map** option. At that point, you should see something similar
    to what is shown in the following screenshot:![Time for action—creating a basic
    room](img/image_1901_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Cube** brush to bring up the **Brush Builder** dialog box.
    Change the settings in the pop-up window as shown in the following screenshot
    (in the section **X** fill `1024`, in the section **Y** type `512`, and in the
    section **Z** fill `16`). Click on **Build** and **Close**. Your builder brush
    has the size you want now!![Time for action—creating a basic room](img/image_1901_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CSG Add** operation icon which is located on the side toolbar,
    underneath the **CSG** option. You should see your first piece of geometry created.![Time
    for action—creating a basic room](img/image_1901_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click on the builder brush to select the object. You should see three arrows
    somewhere along the builder brush, facing each of the different axes with their
    own color. This is referred to as the **widget**, but if it looks like each of
    the axes are arrows, then it is in **Translation** mode. If it does not look like
    that, press the *Space bar* until it looks like it does in the following screenshot.
    With the **Translation** tool, set to translate, drag the brush upwards, and click
    on the **CSG Add** button again. As we are just showing the tool, don't worry
    so much about the height, but try to match the screenshot. You now have your ceiling
    geometry. You may at this stage want to start maximizing viewports (the **Perspective**
    in this case) back and forth to get a better view of what you're doing.![Time
    for action—creating a basic room](img/image_1901_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Builder Brush** selected, click on the **Rotation** icon (or press
    *Space* until you see the tool in the next screenshot) and rotate through -90
    degrees in the **Front** viewport in the appropriate axis, till you get the result
    as shown in the following screenshot:![Time for action—creating a basic room](img/image_1901_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move this into place as the left-hand side wall and then non-uniformly scale
    it in the right axis to squash it into place. This is important; this now needs
    to perfectly match up. It is at this point that you will have to start making
    use of the **Drag, Rotation**, and **Scale Grid** snapping tools at the bottom
    right-hand side which we talked about previously. Refer to the following screenshot:![Time
    for action—creating a basic room](img/image_1901_02_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These will snap your transformations into the grid whether it is moving, rotating,
    or scaling, thus giving you a more accurate way of placing geometry in exact places.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It really is important for these to snap nicely and in a clean manner, as this
    is a practice you need to get used to. Make sure that your first two pieces (ceiling
    and floor) are also nicely snapped, as well as the newly created side wall.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It will take some practice for you to find the right settings for this and very
    often you will have to change your snapping settings depending on what you are
    doing (and viewport you are in) so you need to get accustomed to this now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating a basic room](img/image_1901_02_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Use **CSG Add** once more on the left-hand side wall, then follow this process
    for the right-hand side wall, the front, and back walls to create an enclosed
    room.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is similar to what we have been doing so far and should pose no issues.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are now slowly getting used to using the **Builder Brush**, moving, rotational
    and scaling transformations, **CSG Add** operations and the snap tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember to work in all viewports to make sure that what you are doing translates
    well in a three dimensional space and snaps properly to the grid!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have done the right-hand side wall and the front and back ones, you
    should end up with the same result as shown in the following screenshot, all cleanly
    snapped to the grid and to each other.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—creating a basic room](img/image_1901_02_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now completed our first room inside of UDK! It may not look like much
    right now, but we are going to fix that quite soon.
  prefs: []
  type: TYPE_NORMAL
- en: This is now your room and at this point we are done with brushes for this chapter,
    but we shall return to using them in the next one. There is one more thing to
    do before we move on. The room that we created is enclosed but it is actually
    hollow and we should be able to fit in it. To do so, hold down the left mouse
    button (LMB) and move it forward in order to move forward, and hold both LMB +
    RMB to move down and up, in order to position yourself inside the space you just
    created to admire it.
  prefs: []
  type: TYPE_NORMAL
- en: Now this looks okay, but I'd say it's missing something in order to really make
    it realistic. the walls are all the same! Thankfully, we can use textures to make
    the walls come to life in a very simple way, bringing us one step closer to that
    AAA quality.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/image_1901_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time to apply some textures.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—texturing the level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select all side walls (I have three as shown in the previous screenshot, make
    sure you select the one in the back too) by left-clicking on them while holding
    down the *Ctrl* key and then maximize your **Content Browser** (this is something
    which opens by default when you run UDK and I had minimized. If you had closed
    it, then hit the icon indicated in the next screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Content Browser** is UDK's asset repository interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will be making extensive use of that for many actions but for now let us
    just go over a basic process so that we pick three different existing textures
    that we can use in our scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type `brick` into the **Search** textbox at the top of the **Content Browser**.
    To help demonstrate what I mean, this is highlighted in the next screenshot:![Time
    for action—texturing the level](img/image_1901_02_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click and select **M_NEC_Walls_BSP_Brick1** from the results and click
    on **Fully Load** from the menu that appears (as shown in the next screenshot).
    Then minimize the **Content Browser** as we now want to apply our textures.![Time
    for action—texturing the level](img/image_1901_02_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the selected wall surface (it needs to be there, however,
    and not on one of the other unselected walls). On the menu that appears, select
    **Apply Material:M_NEC_Walls_BSP_Brick1**.![Time for action—texturing the level](img/image_1901_02_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have just textured our first piece of geometry in UDK!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will be making one slight manipulation on that, but first let us do the ceiling
    and floor too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—texturing the level](img/image_1901_02_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Use the **Content Browser** and the same process, but for the ceiling pick **M_NEC_Ceilings_SM_TURK182**
    (after typing `ceiling` in the command line) and for the floor **M_ASC_Floor_BSP_Tile01**
    (after typing `floor` in the command line).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the next screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—texturing the level](img/image_1901_02_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: This looks OK (and a lot better than what we had before) but many subtle manipulations
    can be made to make it look even better. One possible option is to tile (multiply)
    textures further in a certain area. This is so that the proportions, according
    to the size of the room, become more realistic rather than skewed (which can spoil
    the illusion of any virtual world in a game). You will be doing quite a lot of
    this for your own games/levels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select all the side walls again in the same way as before and right-click on
    them. You will see the menu shown in the following screenshot:![Time for action—texturing
    the level](img/image_1901_02_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Surface Properties(4 Selected)...** and on the resulting window change
    **UTile** and **VTile** to `3` and `3` and then click on **Apply**. This is shown
    in the following screenshot:![Time for action—texturing the level](img/image_1901_02_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have now taken our first step towards game level creation in UDK. We now
    have a room that looks like it could in fact be a room, complete with proper walls
    being applied to it. Now that we have a room that's worth looking at, let's get
    the last few steps completed so we can see it in our game!
  prefs: []
  type: TYPE_NORMAL
- en: Creating lighting for the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Point lights** are the simplest type of lights that can be added. They are
    the lights that spread light evenly in all directions, and can be used to illuminate
    the scene quickly, particularly for prototyping purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating lighting for the game](img/image_1901_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action—lighting the level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: However, at this point if we play the game, we will only see pitch black. This
    is due to no lights existing in the game. Let's put them in now!
  prefs: []
  type: TYPE_NORMAL
- en: Right-click towards the ceiling of the level in the **Perspective** viewport,
    where you should still be, and then go to **Add Actor** | **Add Light (Point)**.
    You will see something similar to the next screenshot:![Time for action—lighting
    the level](img/image_1901_02_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the light has been added and the illumination in the scene has
    changed (you may want to move it downwards a bit, by the way, if it intersects
    with the ceiling).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch back to a four-viewport view and position this approximately in the middle
    of our scene (at the top viewport) as shown in the following screenshot:![Time
    for action—lighting the level](img/image_1901_02_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double left-click on the light in any viewport. This will bring up the object
    properties menu. In the window that comes up, you will get the **Light Properties**
    section. In that section, set the value of **Radius** to `512` and **Brightness**
    to `2.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will give a bright middle area and darker areas around the opposing front
    and back walls (for a more atmospheric look).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Other settings can be changed, but for now this should be enough to get a first
    taste of illuminating a scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is now time to check out what this looks like in run-time. Before we do that,
    UDK would like to know where the player starts from (otherwise we cannot proceed
    to run time).()Right-click in the middle of the room (approximately anyway) in
    the **Perspective** viewport and select **Add Actor** | **Add Player Start**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to build this in order to see it in run time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to **Build | Build All**. Depending on your hardware this may take a short
    while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this finishes, click on the **Mobile Previewer** icon. You should see our
    level come up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can move around by using the *W, A, S*, and *D* keys or by clicking on
    the two joysticks that have come up on the screen. If you would like to, you can
    use your iOS device to navigate around the scene using the UDK Remote that we
    set up in the previous chapter. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action—lighting the level](img/image_1901_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Congratulations! We have completed a very basic first game level with UDK from
    scratch that can run on an iOS device!
  prefs: []
  type: TYPE_NORMAL
- en: Creating actors and static meshes for the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To wrap up the tasks worked on for this chapter, let us look at enriching the
    level with static meshes (static mesh actors have additional properties, from
    animations to sound and physics). The process of adding a basic static mesh as
    opposed to adding one with additional properties, however, is identical and we
    will start with this so we get accustomed to the fundamentals first.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding static mesh detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go back to the **Content Browser** again and type `barrel` in the **Search**
    line. This is shown in the following screenshot:![Time for action—adding static
    mesh detail](img/image_1901_02_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you right-click and **Fully Load** the barrel we will use (in this
    case **SM_Barrel_01**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to your level and right-click anywhere on the floor. With the floor
    selected, right-click and select **Add StaticMesh:E3_Demo_Meshes_SM_Barrel_01**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that this can be added a variety of other ways; refer to my explanation
    of this at the beginning of this section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double click on the barrel or press *F4* to bring up the **Object Properties**
    and change the **Draw Scale** value to **0.7**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is only one example of a way to scale an object. You can also scale them
    using the usual icon transformations we used with the walls or with the **Draw
    Scale 3D** values seen in **Properties**. There are many ways to accomplish the
    same thing in UDK. This step is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action—adding static mesh detail](img/image_1901_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The barrel can now be seen in the level. You have your first static mesh in
    there, but more can be done with this concept, especially now that you have mastered
    the first one.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—adding multiple static meshes for extra detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now try and be creative! Add a few of these in different parts of the room.
    Try and keep a random look in their structure of appearance. Select **Edit** |
    **Duplicate** (or *Ctrl* + *D*), then move and rotate into place.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Have a go hero—adding multiple static meshes for extra detail](img/image_1901_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You have the skills at this stage to start experimenting with adding other static
    meshes/actors to enrich the scene further.
  prefs: []
  type: TYPE_NORMAL
- en: Why not look at the **Content Browser** and see what else fits in the scene,
    other than barrels, for additional practice?
  prefs: []
  type: TYPE_NORMAL
- en: Progress in Urban Warrior, so far
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Believe it or not, we have now acquired, after completing the preceding tasks,
    most of the fundamental skills needed to put together not just Urban Warrior but
    just about any type of a game with an environment!
  prefs: []
  type: TYPE_NORMAL
- en: Everything else we do in this book (and I suspect many of your future projects
    after that) hinges on understanding the preceding concepts, so it was important
    that we started with the bare basics.
  prefs: []
  type: TYPE_NORMAL
- en: For example, all of the buildings inside of our level are first going to be
    built using brushes, and while later we will replace some of them with static
    meshes, we will still use them in other areas as we try to optimize our game for
    the iOS platform.
  prefs: []
  type: TYPE_NORMAL
- en: Lighting, and in particular photorealistic lighting, remains one of the biggest
    challenges in computer graphics these days. It is so important that some companies
    have people whose entire job is creating lighting for levels. Working with the
    iOS platform makes our lighting capabilities much lower than our PC counterparts
    making us stick to Point Lights for most of our implementation.[Chapter 6](ch06.html
    "Chapter 6. Bringing it All Together"), *Bringing It All Together*, talks briefly
    on how lighting can be used in designing combat scenarios, as lighting can often
    make or break a level.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when we add enemies to our game Urban Warrior (or **bots** as they
    are called in Unreal) or, for that matter, any type of inanimate, non-interactive
    detail such as scene props, it will be pretty much in the same way that we added
    our objects in earlier by using the **Content Browser**.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where can the Content Browser be found?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. In the Edit menu under Browser Windows
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. By typing in Content Browser in the command prompt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. By clicking on the Content Browser button on the toolbox
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Both a and c
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How do we make a point light brighter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Rebuilding our lighting makes everything brighter
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Use the scaling widget
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Change the brightness property inside the light's object properties
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Both b & c
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What setting should the widget be set to to squash an object, brush, or static
    mesh?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Scaling
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Translation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Non-uniform Scaling
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Rotation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully you've enjoyed this chapter and are now less intimidated by the rich
    functionality of UDK!
  prefs: []
  type: TYPE_NORMAL
- en: 'We have quite a long way to go before we see our game realized, but we are
    making steady progress nonetheless. So far in this chapter we have already covered
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic overview of the interface aspects of UDK you need to know, with particular
    focus on the functions needed to create basic content for a beginner/intermediate
    game designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How geometrical operations work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to put a virtual room together using these aforementioned geometrical operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to texture this newly-created world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to illuminate and light this world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to enrich it with 3D models other than basic geometry from UDK's repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will delve deeper into using UDK and we'll start laying
    out the foundations for the game in more detail, looking at more advanced operations
    related and connected to the ones covered in this chapter. We'll also see what
    the specific implications/limitations of this are; how far can we start pushing
    the engine in its mobile capacity before we compromise important aspects of game
    play such as the frame rate?
  prefs: []
  type: TYPE_NORMAL
