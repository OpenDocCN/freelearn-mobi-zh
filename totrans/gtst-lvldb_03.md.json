["```swift\n// little helper so any Slice can be written to a stream\ntemplate<class streamT>\nstreamT& operator<<(\n  streamT& stream,\n  const leveldb::Slice& sliceValue)\n{\n  stream << sliceValue.ToString();\n  return stream;\n}\n```", "```swift\ntemplate<class keyT>\nvoid testRead(keyT key)\n{ // templated so we take a key of any datatype accepted by Get\n  using std::cout; using std::endl;\n  std::string value;\n  leveldb::Status s = db->Get(\n    leveldb::ReadOptions(), key, &value);\n  if (s.ok())\n    cout << key << \" => \" << value << endl;\n  else\n    cout << \"failed: \" << s.ToString() << \" \" << key << endl;\n}\n```", "```swift\ntestRead(\"Packt\");  // should fail until we add this key\ntestRead( std::string(\"Packt\") ); // should still fail\ncout << \"putting Packt key in\" << endl;\nassert( db->Put(wopt, \"Packt\", \"Getting Started\").ok() );\nassert( db->Put(wopt, \"Packt2\", \"with Leveldb\").ok() );\ntestRead(\"Packt\");  // succeeds now we have put that record\ntestRead(\"packt\");  // fails, keys are case-sensitive\n\n// change value for existing key\nassert( db->Put(wopt \"Packt\", \"Is Started\").ok() );\ntestRead(\"Packt\");  // succeeds now we have put that record\n```", "```swift\n  struct binValues {\n    int intVal;\n    double realVal;\n  };    \n  binValues b = {-99, 3.14};\n  Slice binSlice((const char*)&b, sizeof(binValues) );\n  assert( db->Put(WriteOptions(), \"BinSample\", binSlice).ok() );\n  std::string binRead;\n  assert( db->Get(ReadOptions(), \"BinSample\", &binRead).ok() );\n// treat the std::string as a container for arbitary binary data\n  binValues* b2 = (binValues*)binRead.data();     \n  cout << \"Read back binary structure \" << b2->intVal << \"  \"\n  << b2->realVal << \" binary size=\" << binRead.size() << endl;\n```", "```swift\nWriteOptions syncWopt;\nsyncWopt.sync = true;\nassert( db->Delete(syncWopt, \"Packt\").ok() );\ntestRead(\"Packt\");  // should fail now we have deleted the key\ntestRead(\"Packt2\"); // still here, delete only removed exact match\nassert( db->Delete(syncWopt, \"Packt\").ok() );  // safe failure\n```", "```swift\nstd::string value;\nif (db->Get(readOpt, fromKey, &value).ok()) {\n  if (db->Put(writeOpt, toKey, value).ok())\n    db->Delete(writeOpt, fromKey);\n}    \n```", "```swift\nleveldb::WriteOptions syncW;\nsyncW.sync = true;  // sync writes slower but even safer\nstd::string value;\nif (db->Get(readOpt, fromKey, &value).ok()) {\n  leveldb::WriteBatch wb;\n  wb.Put(toKey, value);\n  wb.Delete(fromKey);\n  db->Write(syncW, &wb);\n}\n```"]