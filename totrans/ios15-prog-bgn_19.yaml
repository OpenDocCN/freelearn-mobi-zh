- en: '*Chapter 16*: Getting Started with MapKit'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about table views and table view controllers,
    and completed the implementation of the **Locations** screen. It now displays
    a list of restaurant locations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll display restaurant locations on the `MKAnnotation` protocol,
    which allows you to associate the classes you create with a specific map location.
    You'll create a new class, `RestaurantItem`, that conforms to this protocol. Next,
    you'll create `MapDataManager`, a data manager class that loads restaurant data
    from a `.plist` file and puts it into an array of `RestaurantItem` instances.
    You'll create a new `DataManager` protocol to read `.plist` files and update both
    the `MapDataManager` and `ExploreDataManager` classes to avoid redundant code
    (refactoring). After that, you'll create a `MapViewController` class, a view controller
    for the `RestaurantDetailViewController` class, a view controller for the `MapViewController`
    instance. Finally, you'll clean up and organize your code using extensions to
    make it easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to create custom map annotation
    views and add them to a map, how to use storyboard references to link storyboards
    together, and how to use extensions to organize your code, making it easier to
    read.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and creating annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding annotations to a map view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going from the map view to the **Restaurant Detail** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter16` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3kEKEB7](https://bit.ly/3kEKEB7)'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's learn about map annotations, which are used to mark restaurant locations
    on the **Map** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and creating annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*, you added a map view to the `MKMapView` class. You can
    see what it looks like in the Apple *Maps* app.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MKMapView`, see [https://developer.apple.com/documentation/mapkit/mkmapview](https://developer.apple.com/documentation/mapkit/mkmapview).
  prefs: []
  type: TYPE_NORMAL
- en: When you build and run your app, you will see a map on the screen. The part
    of the map that is visible onscreen can be specified by setting the `region` property
    of the map.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about regions and how to make them, see [https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region](https://developer.apple.com/documentation/mapkit/mkmapview/1452709-region).
  prefs: []
  type: TYPE_NORMAL
- en: Pins on the `MKAnnotationView` class. To add a pin to a map view, you need an
    object that conforms to the `MKAnnotation` protocol. This protocol allows you
    to associate an object with a specific map location.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `MKAnnotation` protocol, see [https://developer.apple.com/documentation/mapkit/mkannotation](https://developer.apple.com/documentation/mapkit/mkannotation).
  prefs: []
  type: TYPE_NORMAL
- en: Any object can conform to the `MKAnnotation` protocol by implementing a `coordinate`
    property, which contains a map location. Optional `MKAnnotation` protocol properties
    are `title`, a string containing the annotation's title, and `subtitle`, a string
    containing the annotation's subtitle.
  prefs: []
  type: TYPE_NORMAL
- en: When an object conforming to the `MKAnnotation` protocol is in the area of the
    map that is visible onscreen, the map view asks its delegate (usually a view controller)
    to provide a corresponding instance of the `MKAnnotationView` class. This instance
    appears as a pin on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `MKAnnotationView`, see [https://developer.apple.com/documentation/mapkit/mkannotationview](https://developer.apple.com/documentation/mapkit/mkannotationview).
  prefs: []
  type: TYPE_NORMAL
- en: If the user scrolls the map and the `MKAnnotationView` instance goes off screen,
    it will be put into a reuse queue and recycled later, similar to the way table
    view cells and collection view cells are recycled. An `MKAnnotationView` instance
    can be customized to display custom icons and can display callout bubbles when
    tapped. Callout bubbles can have buttons that perform actions, such as displaying
    a screen.
  prefs: []
  type: TYPE_NORMAL
- en: For your app, you will create a new class, `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. Let's see how to create this class in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the RestaurantItem class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To represent restaurant locations on the `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. This class will have a `coordinate` property to store
    the restaurant's location, a `title` property to store the restaurant name, and
    a `subtitle` property to store the cuisines it offers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need the restaurant location to set the `coordinate` property of the `RestaurantItem`
    instance. The restaurant data (including its location) will be provided as a `.plist`
    file. Before you create the `RestaurantItem` class, you need to import this `.plist`
    file into your app. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `LetsEat` project. In the Project navigator, right-click the `LetsEat`
    folder and create a new group called `Map`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Map` folder and create a new group called `Model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have not yet done so, download the completed project and project resources
    from [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)
    and find the `Maplocations.plist` file inside the `resources` folder in the `Chapter16`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the `Maplocations.plist` file to the `Model` folder in your project, and
    click it to view its contents. You''ll see that it is an array of dictionaries,
    with each dictionary containing a restaurant''s details (including its location).
    You''ll create properties in your `RestaurantItem` class for the data that you
    will use, which will eventually be displayed on the **Restaurant Detail** screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.1: Editor area showing the contents of MapLocations.plist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.1: Editor area showing the contents of MapLocations.plist'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `RestaurantItem` class by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RestaurantItem`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSObject`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `RestaurantItem` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `RestaurantItem` file, type the following after the `import UIKit` statement
    to import the `MapKit` framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This gives you access to protocols such as `MKAnnotation` and `MKMapViewDelegate`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the class declaration as follows to adopt the `MKAnnotation` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type the following between the curly braces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These properties will hold the data you get from the `Maplocations.plist` file.
    Let''s see what they are for:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`name` stores the name of the restaurant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cuisines` stores the cuisines offered by the restaurant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`lat` and `long` stores the latitude and the longitude of the restaurant location.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`address` stores the restaurant''s address.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`postalCode` stores the restaurant''s postal code.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`state` stores the state in which the restaurant is located.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`imageURL` stores a a link to a photo of the restaurant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`restaurantID` stores a unique number used as an identifier for the restaurant.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that you haven't created properties to store every detail of a restaurant
    contained in the `Maplocations.plist` file, and that's fine. You only need to
    create properties for the details that will appear on the **Restaurant Detail**
    screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll use a custom initializer to initialize `RestaurantItem` instances with
    data from the `.plist` file. Type the following after the last property declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even though this initializer looks complicated, it's actually quite straightforward.
    Each line looks for a specific dictionary item key and assigns its value to the
    corresponding property. For example, the first line looks for the dictionary item
    with a key containing `lat` and assigns the associated value to the `lat` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll use the `lat` and `long` properties to create the value for the `coordinate`
    property, which is required to conform to `MKAnnotation`. Type the following after
    the `init(dict:)` method to implement it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `coordinate` property is of type `CLLocationCoordinate2D`, and it holds
    a geographical location. The value of the `coordinate` property is not assigned
    directly; the `guard` statement gets the latitude and longitude values from the
    `lat` and `long` properties, which are then used to create the value for the `coordinate`
    property. Such properties are called **computed properties**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Implement the `title` property by adding the following code after the `coordinate`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`title` is a computed property that returns the contents of the `name` property.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, implement the `subtitle` property by adding the following code after
    the `title` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`subtitle` is also a computed property. The first line checks to see whether
    the `cuisines` property is empty, and if so, returns an empty string. If the `cuisines`
    property contains a single item, that item will be returned. If the `cuisines`
    property has more than a single item, each item is added to a string, with a comma
    in between items. For example, if `cuisines` contained the `["American", "Bistro",
    "Burgers"]` array, the generated string would be `"American, Bistro, Burgers"`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your `RestaurantItem` class is now complete and free of errors and should look
    like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, you've added the `Maplocations.plist` file to your app, and you
    have created the `RestaurantItem` class. Next, let's create a data manager class
    that reads restaurant data from the `Maplocations.plist` file and puts it into
    an array of `RestaurantItem` instances for use by your app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MapDataManager class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you have done in previous chapters, you''ll create a data manager class,
    `MapDataManager`, that will load restaurant data from the `Maplocations.plist`
    file and put the data into an array of `RestaurantItem` instances. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Model` folder inside the `Map` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `MapDataManager`. Click `MapDataManager` file appears in the
    Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MapDataManager` file, add the following after the `import` statement
    to declare the `MapDataManager` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties between the curly braces to store the `RestaurantItem`
    instances that will be read from the `.plist` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `items` array will contain `RestaurantItem` instances. `private` makes the
    `items` array only accessible within the `MapDataManager` class, and `annotations`
    is a computed property that returns a copy of the `items` array when accessed.
    This allows the contents of the `items` array to be accessed, but not modified,
    by other objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following methods after the property declarations to load the `.plist`
    file, read the data inside, and store it in an array of `RestaurantItem` instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `loadData()` and `fetch(completion:)` methods perform the same tasks as
    the `loadData()` and `fetch()` methods in the `ExploreDataManager` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You may wish to re-read [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*,
    Getting Data into Collection Views*, to refresh your memory on the `ExploreDataManager`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, the `loadData()` method used here is able to return an array containing
    dictionaries where the values are of the `AnyObject` type. This is necessary since
    the `MapLocations.plist` file, unlike the `ExploreData.plist` file, does not exclusively
    contain dictionaries of the `[String: String`] type. Also, the `fetch(completion:)`
    method used here has a completion closure as a parameter, which can accept any
    function or closure that takes an array of `RestaurantItems` as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, you don't know when an operation will be finished. For example, you
    need to do an action after you've downloaded a file from the internet, but you
    don't know how long it would take to download. You can specify a completion closure
    to be applied once the operation has been completed. In this case, the completion
    closure will process the `items` array once all the data from the `.plist` file
    has been read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now consider the `MapLocations.plist` file once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2: Editor area showing array and dictionaries in MapLocations.plist'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.2: Editor area showing array and dictionaries in MapLocations.plist'
  prefs: []
  type: TYPE_NORMAL
- en: This file has the same structure as `ExploreData.plist`. The `Root` item is
    an array that contains dictionaries. Since both `ExploreData.plist` and `MapLocations.plist`
    have an array of dictionaries, it would be more efficient if you could create
    a single method to load `.plist` files and use it wherever it was needed. You
    will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the DataManager protocol
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of creating a method in each class to load a `.plist` file, you will
    create a new protocol, `DataManager`, to handle `.plist` file loading. This protocol
    will implement a method to load `.plist` files using an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to re-read [*Chapter 8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*,
    Protocols, Extensions, and Error Handling*, which covers protocols and extensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created the `DataManager` protocol, any class that needs to
    load a `.plist` file can adopt it. You''ll modify both `ExploreDataManager` and
    `MapDataManager` classes to adopt this protocol. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `LetsEat` folder and create a new group called `Misc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder and choose **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `DataManager`. Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `DataManager` file in the Project navigator and declare the `DataManager`
    protocol as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an extension containing the implementation of the `loadPlist(file:)` method
    after the protocol declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have this protocol, you will modify the `MapDataManager` and `ExploreDataManager`
    classes to adopt it. When you take existing code and modify it to accomplish the
    same thing more efficiently, this process is called **refactoring**.
  prefs: []
  type: TYPE_NORMAL
- en: You will start with refactoring the `MapDataManager` class to conform to the
    `DataManager` protocol in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the MapDataManager class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MapDataManager` class already has a `loadData()` method, which is hardcoded
    to read `Maplocations.plist`. Now that you have created the `DataManager` protocol,
    you will modify the `MapDataManager` class to use it instead. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `MapDataManager` file selected in the Project navigator, find and delete
    the `loadData()` method. You'll see an error because the `fetch()` method calls
    the `loadData()` method, which you just removed. You'll fix this shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `DataManager` protocol to the class declaration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `for data in loadData()` line in the `fetch()` method as follows
    to fix the error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import Foundation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class MapDataManager: DataManager {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'private var items: [RestaurantItem] = []'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var annotations: [RestaurantItem] {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: items
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func fetch(completion: (_ annotations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[RestaurantItem]) -> ()){'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if !items.isEmpty {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: items.removeAll()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for data in loadPlist(file: "MapLocations") {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'items.append(RestaurantItem(dict: data))'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: completion(items)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The error should be gone. In the next section, you will refactor the `ExploreDataManager`
    class as well to make it conform to the `DataManager` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the ExploreDataManager class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the `MapDataManager` class, the `ExploreDataManager` class has a `loadData()`
    method, which is hardcoded to read `ExploreData.plist`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may wish to re-read [*Chapter 14*](B17469_14_Final_VK_ePub.xhtml#_idTextAnchor201)*,
    Getting Data into Collection Views*, to refresh your memory on the `ExploreDataManager`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to make the same changes to the `ExploreDataManager` class that you
    made to the `MapDataManager` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `ExploreDataManager` file selected in the Project navigator, find and
    delete the `loadData()` method. Ignore the error because it will be fixed shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `DataManager` protocol to the class declaration as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `fetch()` method as follows to fix the error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have completed the implementation of the `MapDataManager` class, created
    the `DataManager` protocol, and refactored both the `MapDataManager` and `ExploreDataManager`
    classes to conform to this protocol. With the `MapDataManager` class, you can
    load data from the `MapLocations.plist` file and return an array of `RestaurantItem`
    instances. Now, let's see how to use this array to add annotations to a map view,
    which will be displayed as pins in the **Map** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding annotations to a map view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B17469_11_Final_VK_ePub.xhtml#_idTextAnchor171)*, Finishing
    Up Your User Interface*, you added a map view to the `MapLocations.plist` file
    to your project and created the `RestaurantItem` and `MapDataManager` classes.
    Remember the MVC design pattern? At this point, you have created the views and
    models for the **Map** screen, so all you need now is the view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view controller will be responsible for the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding `RestaurantItem` instances, which conform to the `MKAnnotation` protocol,
    to the map view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `RestaurantItem` instances within the region displayed in the map view,
    provide `MKAnnotationView` instances requested by the map view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide custom `MKAnnotationView` instances that display a callout bubble containing
    a button when tapped, and present the **Restaurant Detail** screen when the button
    is tapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll start by creating the `MapViewController` class as the view controller
    for the **Map** screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MapViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ve created the view and model objects for the `MapViewController`, to
    be the view controller for the **Map** screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Map` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MapViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `MapViewController` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MapViewController` file, add the following line after `import UIKit`
    to import the `MapKit` framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the class declaration as follows to make the `MapViewController` class
    adopt the `MKMapViewDelegate` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have declared the `MapViewController` class. In the next section, you'll
    assign this class as the view controller for the **Map** screen, and create an
    outlet for the map view.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the outlets for the map view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The view controller scene for the `MapViewController` class to be the view
    controller for the **Map** screen and add an outlet for the map view to it. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file. Click the `MapViewController`:![Figure 16.3:
    Identity inspector showing Class setting for MapViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.3: Identity inspector showing Class setting for MapViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the **Map View** in the document outline:![Figure 16.4: Document outline
    with Map View selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.4: Document outline with Map View selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the Adjust Editor Options button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Assistant in the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The assistant editor appears, showing the contents of the `MapViewController`
    file. *Ctrl + Drag* from the map view to the space just under the class declaration:![Figure
    16.5: Editor area showing MapViewController file contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.05_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.5: Editor area showing MapViewController file contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `mapView` in the **Name** field and click **Connect**:![Figure 16.6: Pop-up
    dialog box for mapView outlet creation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.6: Pop-up dialog box for mapView outlet creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The map view has been connected to the `mapView` outlet in the `MapViewController`
    class. Click the **x** button to close the assistant editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.7: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.7: Assistant editor close button'
  prefs: []
  type: TYPE_NORMAL
- en: The `MapViewController` class now has an outlet, `mapView`, that is linked to
    the map view in the `MapDataManager` class by adding a method to generate a new
    region based on the restaurant's location, so it can provide a map region for
    the map view to display.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the map view region to be displayed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a map view, the portion of the map that is visible on screen is called a
    region. To specify a region, you need the coordinates for the region's center
    point and the horizontal and vertical span representing the dimensions of the
    map to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fetch(completion:)` method in the `MapDataManager` class returns an array
    of `RestaurantItem` instances. You will implement a method, `initialRegion(latDelta:longDelta:)`,
    to get the first `RestaurantItem` instance from this array, get the restaurant''s
    coordinates, and use them to create a region. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `MapDataManager` file in the Project navigator. After the `import
    Foundation` statement, add `import MapKit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just before the closing curly brace, implement the `initialRegion(latDelta:longDelta:)`
    method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method takes two parameters and returns an `MKCoordinateRegion` instance.
    `latDelta` specifies the north-to-south distance (measured in degrees) to display
    for the map region. One degree is approximately 69 miles. `longDelta` specifies
    the amount of east-to-west distance (measured in degrees) to display for the map
    region. The `MKCoordinateRegion` instance that is returned determines the region
    that will appear onscreen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `guard` statement gets the first item in the array of `RestaurantItem` instances
    and assigns it to `item`. If the array is empty, an empty `MKCoordinateRegion`
    instance is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`latDelta` and `longDelta` are used to make an `MKCoordinateSpan` instance,
    which is the horizontal and vertical span of the region to be created.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An `MKCoordinateRegion` instance is created and returned using the coordinate
    property of `item` and the `MKCoordinateSpan` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the map region has been determined, you can determine which `RestaurantItem`
    instances are in this region based on their `coordinate` property. Remember that
    the `RestaurantItem` class conforms to `MKAnnotation`. As the view controller
    for the map view, the `MapViewController` class is responsible for providing `MKAnnotationView`
    instances for any `RestaurantItem` instances in this region.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll modify the `MapViewController` class to provide
    `MKAnnotationViews` for the `RestaurantItem` instances in the region displayed
    by the map view.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying MKAnnotationView instances on the map view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, you have the `MapViewController` class to manage the map view
    on the `initialRegion(latDelta:longDelta:)` method in the `MapDataManager` class
    to set the map region. You will now modify the `MapViewController` class to get
    an array of `RestaurantItem` instances from the `MapDataManager` class and add
    it to the map view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `MapViewController` file in the Project navigator and remove the commented
    code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Just after the `mapView` property declaration, add the following to create
    an instance of the `MapDataManager` class and assign it to `manager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method after `viewDidLoad()`. This method will add `RestaurantItem`
    instances (which conform to the `MKAnnotation` protocol) to the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `setupMap(_:)` method takes a parameter, `annotations`, which is an array
    of `RestaurantItem` instances. It sets the region of the map to be displayed in
    the map view using the `initialRegion(latDelta:longDelta:)` method of the `MapDataManager`
    class, then adds each `RestaurantItem` instance in the `annotations` array to
    the map view. The map view's delegate (the `MapViewController` class in this case)
    then automatically provides an `MKAnnotationView` instance for every `RestaurantItem`
    instance within the region.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following method before the `setupMap(_:)` method. This calls the `fetch(completion:)`
    method of the `MapDataManager` instance and passes in the `setupMap(_:)` method
    as a completion closure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `fetch(completion:)` method loads the `MapLocations.plist` file and creates
    and assigns the array of `RestaurantItem` instances to the `items` array. The
    `annotations` property returns a copy of the `items` array. This array is then
    processed by the `setupMap(_:)` method that was passed in as the completion closure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call the `initialize()` method inside `viewDidLoad()` so it will be called
    when the map view is loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run the application. You should see pins (`MKAnnotationView` instances)
    on the **Map** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8: iOS Simulator showing standard MKAnnotationView instances'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.8: iOS Simulator showing standard MKAnnotationView instances'
  prefs: []
  type: TYPE_NORMAL
- en: An `MKAnnotationView` instance has been added for each `RestaurantItem` instance
    in the map region. Each `MKAnnotationView` instance is represented by a pin. You
    now have pins showing restaurant locations on your map, but you need to add code
    to display custom pins as shown in the app tour. You will do that in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom MKAnnotationView instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the `MKAnnotationView` instances, which look like pins. You can
    replace the standard pin image with a custom image. There is a custom image in
    the `Assets.xcassets` file, and you''ll configure the `MapViewController` class
    to use it. This will make the pins onscreen match the ones in the app tour. You''ll
    also configure each pin to display a callout bubble when tapped. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `MapViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code inside the `initialize()` method after the opening curly
    brace. This makes the `MapViewController` class the delegate for the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method after the `setupMap(_:)` method. This method returns
    a custom `MKAnnotationView` instance for every `MKAnnotation` instance in the
    region displayed by the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break this down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is one of the delegate methods specified in the `MKMapViewDelegate` protocol.
    It's triggered when an `MKAnnotation` instance is within the map region, and it
    returns an `MKAnnotationView` instance, which the user will see on the screen.
    You'll use this method to replace the default pins with custom pins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A constant, `identifier`, is assigned the `"custompin"` string. This will be
    the reuse identifier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In addition to the annotations that you specify, an `MKMapView` instance will
    also add an annotation for the user location. This `guard` statement checks to
    see whether the annotation is the user location. If it is, `nil` is returned,
    as the user location is not a restaurant location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`annotationView` is a constant of the `MKAnnotationView` type. You create this
    so that you can configure and return it later.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `if` statement checks to see whether there are any existing annotations
    that were initially visible but are no longer on the screen. If there are, the
    `MKAnnotationView` instance for that annotation can be reused and is assigned
    to the `annotationView` variable. The `annotation` parameter is assigned to the
    `annotation` property of `annotationView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `else` clause is executed if there are no existing `MKAnnotationView` instances
    that can be reused. A new `MKAnnotationView` instance is created with the reuse
    identifier specified earlier (`custompin`). The `MKAnnotationView` instance is
    configured with a callout. When you tap a pin on the map, a callout bubble will
    appear showing the title (restaurant name), subtitle (cuisines), and a button.
    You'll program the button later to present the `MKAnnotationView` instance that
    you just created to display extra information in a callout bubble and sets the
    custom image to the `custom-annotation` image stored in `Assets.xcassets`. When
    adding a custom image, the annotation uses the center of the image as the pin
    point, so the `centerOffset` property is used to set the correct location of the
    pin point, at the tip of the pin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The custom `MKAnnotationView` instance is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your app. You can see the custom pins on your map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9: iOS Simulator showing custom MKAnnotationView instances'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.9: iOS Simulator showing custom MKAnnotationView instances'
  prefs: []
  type: TYPE_NORMAL
- en: You have configured the `MKAnnotationView` instances using the data obtained
    from the `MapDataManager` class. Tapping a pin displays a callout bubble showing
    the restaurant name and the cuisines it offers. Tapping the button in the callout
    bubble doesn't do anything yet. You'll configure the button to present the **Restaurant
    Detail** screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Going from the Map screen to the Restaurant Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `MKAnnotationView` instances, and tapping one displays a callout bubble
    showing restaurant details. The button in the callout bubble doesn't work, though.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `resources` folder that you downloaded earlier, you'll find completed
    storyboards named `RestaurantDetail.Storyboard`, `PhotoFilter.Storyboard`, and
    `ReviewForm.Storyboard`, which you'll add to your project. These storyboards contain
    the scenes for the **Restaurant Detail** screen, the **Photo Filter** screen and
    the **Review Form** screen.
  prefs: []
  type: TYPE_NORMAL
- en: To present the `RestaurantDetail` storyboard file to it. You'll do this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring a storyboard reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a lot of scenes in the `Main` storyboard file. As your project grows,
    you''ll find it more challenging to keep track of all the scenes in your app.
    One way to manage this is to create additional storyboard files, and use storyboard
    references to link them. You will add `RestaurantDetail`, `PhotoFilter` and `ReviewForm`
    storyboard files to your project, and you will link the `Main` storyboard file
    to the `RestaurantDetail` storyboard file using a storyboard reference. Follow
    these steps to add a storyboard reference to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Main` storyboard file, and click the Library button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `story` in the filter field. A **Storyboard Reference** object will appear
    in the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the `Main` storyboard file next to the **Map View Controller Scene**:![Figure
    16.10: Library with Storyboard Reference object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.10: Library with Storyboard Reference object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `resources` folder that you downloaded earlier, and locate the three
    storyboard files that you will add to your project in it (`RestaurantDetail.storyboard`,
    `PhotoFilter.storyboard`, and `ReviewForm.storyboard`):![Figure 16.11: Contents
    of resources folder'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.11: Contents of resources folder'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Project navigator, create a new folder inside your `LetsEat` folder
    named `RestaurantDetail` and copy the `RestaurantDetail` storyboard file into
    it:![Figure 16.12: Project navigator showing RestaurantDetail folder and contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.12: Project navigator showing RestaurantDetail folder and contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new folder inside your `LetsEat` folder named `ReviewForm` and copy
    the `ReviewForm` storyboard file into it, and create a new folder inside your
    `LetsEat` folder named `PhotoFilter` and copy the `PhotoFilter` storyboard file
    into it:![Figure 16.13: Project navigator showing PhotoFilter and ReviewForm folders
    and contents'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.13: Project navigator showing PhotoFilter and ReviewForm folders
    and contents'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you''ll assign the `RestaurantDetail` storyboard file to the storyboard
    reference you added earlier to your project. Click the `Main` storyboard file,
    select the storyboard reference you added earlier, and click the Attributes inspector
    button. Under `RestaurantDetail`:![Figure 16.14: Attributes inspector settings
    for RestaurantDetail storyboard reference'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.14: Attributes inspector settings for RestaurantDetail storyboard
    reference'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl + Drag* from the `MKAnnotationView` instance''s callout bubble button
    in the **Map** screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will set an identifier for this segue. Later you''ll add a method that
    performs the segue with this identifier when the callout bubble button is tapped.
    Select the segue connecting the **Map View Controller Scene** to the storyboard
    reference:![Figure 16.16: Segue between Map View Controller Scene and RestaurantDetail
    storyboard reference'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.16: Segue between Map View Controller Scene and RestaurantDetail
    storyboard reference'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the Attributes inspector, under `showDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17: Attributes inspector settings for showDetail segue'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.17_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.17: Attributes inspector settings for showDetail segue'
  prefs: []
  type: TYPE_NORMAL
- en: You have now linked the view controller scene for the **Map** screen with the
    view controller scene for the **Restaurant Detail** screen using a segue. In the
    next section, you'll implement a method to present the **Restaurant Detail** screen
    when the callout bubble button is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Performing the showDetail segue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ve linked the view controller scene for the `showDetail`. Now you need
    a method to perform that segue, but before you implement it, you''ll create an
    enumeration that contains all the segue identifiers for this project. This reduces
    potential errors by enabling autocompletion when you type the segue identifiers
    later in your code. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder inside the `LetsEat` folder and choose **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `Segue`. Click `Segue` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following after the `import` statement to declare and define the `Segue`
    enumeration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `Segue` enum's type is `String`, so the raw values for each case
    are strings. For example, the raw value for case `showDetail` is `"showDetail"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you can add the method to perform the `showDetail` segue when the callout
    button is tapped. Click the `MapViewController` file in the Project navigator
    and add the following method after the `setupMap(_:)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`mapView(_:annotationView:calloutAccessoryControlTapped:)` is another method
    specified in the `MKMapViewDelegate` protocol. It is triggered when the user taps
    the callout bubble button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.performSegue(withIdentifier: Segue.showDetail.rawValue, sender: self)`
    performs the segue with the `"showDetail"` identifier, which presents the **Restaurant
    Detail** screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project. On the **Map** screen, tap a pin and tap the button
    inside the callout bubble:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18: iOS Simulator showing callout bubble button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.18: iOS Simulator showing callout bubble button'
  prefs: []
  type: TYPE_NORMAL
- en: 'The new **Restaurant Detail** screen appears, but it does not contain any details
    about the restaurant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.19: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.19_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.19: iOS Simulator showing Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: You will make the **Restaurant Detail** screen display the details of a restaurant
    in [*Chapter 18*](B17469_18_Final_VK_ePub.xhtml#_idTextAnchor299)*, Displaying
    Data in a Static Table View*, but for now, let's just pass the data about the
    selected restaurant to the **Restaurant Detail** screen's view controller and
    print it to the Debug area. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to the Restaurant Detail screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MKAnnotationView` instances that display callout bubbles when tapped.
    When the button in the callout bubble is tapped, the `RestaurantItem` instance
    to the view controller for the **Restaurant Detail** screen, which has not been
    created yet. Follow these steps to create it now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `RestaurantDetail` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RestaurantDetailViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`UITableViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Swift`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `RestaurantDetailViewController` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove all the commented code. Your file should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a property named `selectedRestaurant` before the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This property holds the `RestaurantItem` instance that will be passed to the
    `RestaurantDetailViewController` instance from the `MapViewController` instance:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code inside the `viewDidLoad()` method before the closing
    curly brace to print the `RestaurantItem` instance contents to the Debug area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This confirms that the `MapViewController` instance has successfully passed
    the `RestaurantItem` instance to the `RestaurantDetailViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify your file looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `RestaurantDetail` storyboard file inside the `RestaurantDetail`
    folder. Select the `RestaurantDetailViewController`:![Figure 16.20: Identity inspector
    settings for Restaurant Detail View Controller scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.20: Identity inspector settings for Restaurant Detail View Controller
    scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note the scene name will change to **Restaurant Detail View Controller Scene**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `MapViewController` file in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a property to hold a `RestaurantItem` instance after the `private let manager
    = MapDataManager()` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code into the `func mapView(_:annotationView:calloutAccessoryControlTapped:)`
    method, before the `self.performSegue(withIdentifier:sender:)` method call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To pass the `RestaurantItem` instance from the `MapViewController` instance
    to the `RestaurantDetailViewController` instance, you''ll override the `UIViewController`
    method named `prepare(for:sender:)`. Type in the following code after `viewDidLoad()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `prepare(for:sender:)` method is executed by a view controller before transitioning
    to another view controller. In this case, this method is called before the `showDetail`,
    which it is in this case, the `showRestaurantDetail(segue:)` method is called.
    This method will set the `selectedRestaurant` property for the `RestaurantDetailViewController`
    instance. You'll see an error because `showRestaurantDetail(segue:)` has not been
    created yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code after the `setupMap(_:)` method to implement `showRestaurantDetail(segue:)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This checks to make sure the segue destination is a `RestaurantDetailViewController`
    instance. If it is, a temporary constant, `restaurant`, is assigned the `selectedRestaurant`
    property in the `MapViewController` instance. `restaurant` is then assigned to
    the `selectedRestaurant` property in the `RestaurantDetailViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, the restaurant details that you get from the `RestaurantItem`
    instance is passed to the `RestaurantDetailViewController` instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your app. In the **Map** screen, tap a pin and then tap the callout
    button. The **Restaurant Detail** screen will appear. Click the Report navigator
    and click the first entry as shown. You should see the restaurant details in the
    Editor area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.21: Report navigator showing contents of first entry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.21_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.21: Report navigator showing contents of first entry'
  prefs: []
  type: TYPE_NORMAL
- en: You have added the storyboard for the `RestaurantDetailViewController` instance
    now has the data from the `RestaurantItem` instance that was selected on the **Map**
    screen. Great! You'll configure the **Restaurant Detail** screen to display that
    data in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You have done a lot of work in this chapter, so before you go on to the next
    chapter, let's organize the code that you have written to make it easier to understand.
    You will use extensions to do so in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your programs become more complex, you will use extensions (covered in [*Chapter
    8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*, Protocols, Extensions, and
    Error Handling*) to organize your code. Extensions can help you to make code more
    readable and avoid clutter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will organize four classes: `ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`. You will segregate blocks of
    related code using extensions. Let''s begin with the `ExploreViewController` class
    in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the ExploreViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will divide the code in the `ExploreViewController` file into distinct
    sections using extensions. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator. After the
    final curly brace, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you are creating two extensions. The first extension will be private,
    which means the contents of this extension are only accessible to the `ExploreViewController`
    class. The second extension will contain all of the `UICollectionViewDataSource`
    methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You''ll get an error because `UICollectionViewDataSource` appears in two places.
    Delete `UICollectionViewDataSource` from the class declaration at the top of the
    file. Your class declaration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move all the `UICollectionViewDataSource` methods into the second extension.
    It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `initialize()` method inside the `private` extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Move the `unwindLocationCancel(segue:)` method inside the `private` extension
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the private extension looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, modify `viewDidLoad()` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The benefits of segregating your code in this way may not seem obvious now,
    but as your classes become more complex, you will find it is easier to look for
    a specific method and to maintain your code. Before you do the same to the other
    files, let's see how the `// MARK:` syntax is used in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the // MARK: syntax'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `// MARK:` syntax is used to navigate easily between different parts of
    your code. Let''s see what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the path that is visible just under the Toolbar and click on the last
    part as shown:![Figure 16.22: Editor area showing path'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_16.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.22: Editor area showing path'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A menu is displayed, and you will see both `// MARK:` syntax. This enables
    you to easily jump to these sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.23: Path menu with Private extension selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.23_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.23: Path menu with Private extension selected'
  prefs: []
  type: TYPE_NORMAL
- en: You have organized the `ExploreViewController` class, so let's do the `RestaurantListViewController`
    class next by refactoring it and adding extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the RestaurantListViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will add two extensions to the `RestaurantListViewController` class, similar
    to those you added to the `ExploreViewController` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantListViewController` file in the Project navigator. After
    the final curly brace, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You'll put private methods for the `RestaurantListViewController` class in the
    first extension, and all the `UICollectionViewDataSource` methods in the second
    extension.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete `UICollectionViewDataSource` from the class declaration at the top of
    the file. Your class declaration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move all the `UICollectionViewDataSource` methods into the second extension.
    It should look like this when done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are done organizing the `RestaurantListViewController` class, so let's clean
    up the `LocationViewController` class in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the LocationViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you did before, you will add two extensions to the `LocationViewController`
    file. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `LocationViewController` file in the Project navigator. After the
    final curly brace, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first extension will contain private methods for the `LocationViewController`
    class. The second extension will contain all the `UITableViewDataSource` methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete `UITableViewDataSource` from the class declaration at the top of the
    file. Your class declaration should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move all the `UITableViewDataSource` methods into the second extension. It
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Just like you did in the `ExploreViewController` class, you will create an
    `initialize()` method inside the first extension, and put in it everything you
    need to initialize the `LocationViewController` class there. Add the following
    inside the first extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `viewDidLoad()` as follows to call the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are done organizing the `LocationViewController` class, so let's clean up
    the `MapViewController` class in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the MapViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you did before for the other classes, you will add two extensions to the
    `MapViewController` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `MapViewController` file in the Project navigator. After the final
    curly brace, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first extension will contain private methods for the `MapViewController`
    class. The second one will contain all the `MKMapViewDelegate` methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Delete `MKMapViewDelegate` from the class declaration at the top of the file.
    Your class definition should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move all the `MKMapViewDelegate` methods into the second extension. It should
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the `initialize()`, `setupMap(_:)`, and `showRestaurantDetail(segue:)`
    methods into the first extension. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have organized all four view controllers (`ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`) using extensions. Great job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a new class, `RestaurantItem`, that conforms to
    the `MKAnnotation` protocol. Next, you created `MapDataManager`, a data manager
    class that loads restaurant data from a `.plist` file and puts it into an array
    of `RestaurantItem` instances. You created the `DataManager` protocol and refactored
    both `MapDataManager` and `ExploreDataManager` classes to use this protocol. After
    that, you created the `MapViewController` class, a view controller for the `RestaurantDetailViewController`
    class, a view controller for the `MapViewController` instance. At this point,
    you know how to create objects that conform to the `MKAnnotation` protocol, how
    to add them to a map view, and how to create custom `MKAnnotationViews`, which
    enables you to add annotated maps to your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: You also added storyboard files to your project, learned how to use storyboard
    references and organized your view controller classes (`ExploreViewController`,
    `RestaurantListViewController`, `LocationViewController`, and `MapViewController`)
    using extensions. This will help you organize storyboards and code for large projects,
    making it easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about **JSON** files, and how to load data
    from them so the **Restaurant List** and **Map** screens can display details about
    a particular restaurant.
  prefs: []
  type: TYPE_NORMAL
