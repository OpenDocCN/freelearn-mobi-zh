["```kt\n@Composable\nfun StateChangeDemo() {\n  var toggled by remember {\n    mutableStateOf(false)\n  }\n  val color = if (toggled)\n    Color.White\n  else\n    Color.Red\n  Column(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp),\n    horizontalAlignment = Alignment.CenterHorizontally\n  ) {\n    Button(onClick = {\n      toggled = !toggled\n    }) {\n      Text(\n        stringResource(R.string.toggle)\n      )\n    }\n    Box(\n      modifier = Modifier\n        .padding(top = 32.dp)\n        .background(color = color)\n        .size(128.dp)\n    )\n  }\n}\n```", "```kt\nval color by animateColorAsState(\n  targetValue = if (toggled)\n    Color.White\n  else\n    Color.Red\n)\n```", "```kt\nfinishedListener = { color -> println(color)}\n```", "```kt\nprivate val colorDefaultSpring = spring<Color>()\n```", "```kt\nanimationSpec = spring(stiffness = Spring.StiffnessVeryLow)\n```", "```kt\n@Composable\nfun MultipleValuesAnimationDemo() {\n  var toggled by remember {\n    mutableStateOf(false)\n  }\n  // FIXME: animation setup missing\n  Column(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp),\n    horizontalAlignment = Alignment.CenterHorizontally\n  ) {\n    Button(onClick = {\n      toggled = !toggled\n    }) {\n      Text(\n        stringResource(R.string.toggle)\n      )\n    }\n    Box(\n      contentAlignment = Alignment.Center,\n      modifier = Modifier\n        .padding(top = 32.dp)\n        .border(\n          width = borderWidth,\n          color = Color.Black\n        )\n        .size(128.dp)\n    ) {\n      Text(\n        text = stringResource(id = R.string.app_name),\n        modifier = Modifier.rotate(degrees = degrees)\n      )\n    }\n  }\n}\n```", "```kt\nval transition = updateTransition(targetState = toggled)\nval borderWidth by transition.animateDp() { state ->\n  if (state)\n    10.dp\n  else\n    1.dp\n}\nval degrees by transition.animateFloat() { state ->\n  if (state) -90F\n  else\n    0F\n}\n```", "```kt\nAnimatedVisibility(\n  visible = visible,\n  enter = slideInHorizontally(),\n  exit = slideOutVertically()\n) {\n  Box(\n    modifier = Modifier\n      .padding(top = 32.dp)\n      .background(color = Color.Red)\n      .size(128.dp)\n  )\n}\n```", "```kt\nenter = slideInHorizontally() + fadeIn(),\n```", "```kt\n@Composable\nfun SizeChangeAnimationDemo() {\n  var size by remember { mutableStateOf(1F) }\n  Column(\n    modifier = Modifier\n      .fillMaxSize()\n      .padding(16.dp)\n  ) {\n    Slider(\n      value = size,\n      valueRange = (1F..4F),\n      steps = 3,\n      onValueChange = {\n        size = it\n      },\n      modifier = Modifier.padding(bottom = 8.dp)\n    )\n    Text(\n      text = stringResource(id = R.string.lines),\n      modifier = Modifier\n        .fillMaxWidth()\n        .background(Color.White)\n        .animateContentSize(),\n      maxLines = size.toInt(),\n      color = Color.Blue\n    )\n  }\n}\n```", "```kt\nanimationSpec = snap(1000)\n```", "```kt\n@Composable\nfun CrossfadeAnimationDemo() {\n  var isFirstScreen by remember { mutableStateOf(true) }\n  Column(\n    modifier = Modifier\n      .fillMaxSize(),\n    horizontalAlignment = Alignment.CenterHorizontally\n  ) {\n    Switch(\n      checked = isFirstScreen,\n      onCheckedChange = {\n        isFirstScreen = !isFirstScreen\n      },\n      modifier = Modifier.padding(top = 16.dp,\n                                  bottom = 16.dp)\n    )\n    Crossfade(targetState = isFirstScreen) { it ->\n      if (it) {\n        Screen(\n          text = stringResource(id = R.string.letter_w),\n          backgroundColor = Color.Gray\n        )\n      } else {\n        Screen(\n          text = stringResource(id = R.string.letter_i),\n          backgroundColor = Color.LightGray\n        )\n      }\n    }\n  }\n}\n```", "```kt\nanimationSpec = spring(stiffness = Spring.StiffnessVeryLow)\n```", "```kt\nanimationSpec = keyframes {\n      durationMillis = 8000\n      0f at 0\n      1f at 2000\n      0f at 4000\n      1f at 6000\n    }\n```", "```kt\n@Composable\nfun InfiniteRepeatableDemo() {\n  val infiniteTransition = rememberInfiniteTransition()\n  val degrees by infiniteTransition.animateFloat(\n    initialValue = 0F,\n    targetValue = 359F,\n    animationSpec = infiniteRepeatable(animation =\n                        keyframes {\n      durationMillis = 1500\n      0F at 0\n      359F at 1500\n    })\n  )\n  Box(\n    modifier = Modifier.fillMaxSize(),\n    contentAlignment = Alignment.Center\n  ) {\n    Text(text = stringResource(id = R.string.app_name),\n    modifier = Modifier.rotate(degrees = degrees))\n  }\n}\n```", "```kt\nrepeatMode = RepeatMode.Reverse\n```", "```kt\nkeyframes {\n      durationMillis = 2000\n      0F at 500\n      359F at 1500\n}\n```"]