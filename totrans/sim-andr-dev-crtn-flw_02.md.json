["```kt\nprivate fun fetchTextWithThread() {\n```", "```kt\n  Thread {\n```", "```kt\n        // get text from network\n```", "```kt\n        val text = getTextFromNetwork()\n```", "```kt\n  }.start()\n```", "```kt\n}\n```", "```kt\nprivate fun fetchTextWithThread() {\n```", "```kt\n  Thread {\n```", "```kt\n          // get text from network\n```", "```kt\n          val text = getTextFromNetwork()\n```", "```kt\n    runOnUiThread {\n```", "```kt\n        // Display on UI\n```", "```kt\n        displayText(text)\n```", "```kt\n    }\n```", "```kt\n  }.start()\n```", "```kt\n}\n```", "```kt\nprivate fun fetchTextWithThreadAndHandler() {\n```", "```kt\n  Thread {\n```", "```kt\n    // get text from network\n```", "```kt\n           val text = getTextFromNetwork()\n```", "```kt\n    Handler(Looper.getMainLooper()).post {\n```", "```kt\n      // Display on UI\n```", "```kt\n      displayText(text)\n```", "```kt\n    }\n```", "```kt\n  }.start()\n```", "```kt\n}\n```", "```kt\nprivate val key = \"key\"\n```", "```kt\nprivate val messageHandler = object :\n```", "```kt\n   Handler(Looper.getMainLooper()) {\n```", "```kt\n    override fun handleMessage(message: Message) {\n```", "```kt\n    val bundle = message.data\n```", "```kt\n    val text = bundle.getString(key, \"\")\n```", "```kt\n    //Display text\n```", "```kt\n    displayText(text)\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nprivate fun fetchTextWithHandlerMessage() {\n```", "```kt\n  Thread {\n```", "```kt\n    // get text from network\n```", "```kt\n    val text = getTextFromNetwork()\n```", "```kt\n    val message = handler.obtainMessage()\n```", "```kt\n    val bundle = Bundle()\n```", "```kt\n    bundle.putString(key, text)\n```", "```kt\n    message.data = bundle\n```", "```kt\n    messageHandler.sendMessage(message)\n```", "```kt\n  }.start()\n```", "```kt\n}\n```", "```kt\nprivate val emptymesageHandler = object :\n```", "```kt\n  Handler(Looper.getMainLooper()) {\n```", "```kt\n  override fun handleMessage(message: Message) {\n```", "```kt\n    if (message.what == 1) {\n```", "```kt\n      //Update UI\n```", "```kt\n    } else {\n```", "```kt\n      //Show Error\n```", "```kt\n    }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nprivate fun fetchTextWithEmptyMessage() {\n```", "```kt\n  Thread {\n```", "```kt\n    // get text from network\n```", "```kt\n...\n```", "```kt\n    if (failed) {  \n```", "```kt\n      emptyMessageHandler.sendEmptyMessage(0)\n```", "```kt\n    } else {\n```", "```kt\n      emptyMessageHandler.sendEmptyMessage(1)\n```", "```kt\n    }\n```", "```kt\n  }.start()\n```", "```kt\n}\n```", "```kt\nprivate fun fetchTextWithCallback() {\n```", "```kt\n  fetchTextWithCallback { text ->\n```", "```kt\n    //display text\n```", "```kt\n    displayText(text)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun fetchTextWithCallback(onSuccess: (String) -> Unit) {    \n```", "```kt\n     Thread {\n```", "```kt\n          val text = getTextFromNetwork()    \n```", "```kt\n          onSuccess(text)\n```", "```kt\n    }.start()\n```", "```kt\n}\n```", "```kt\nAsyncTask<Params?, Progress?, Result?>()\n```", "```kt\nclass DownloadTextAsyncTask : AsyncTask<String, Integer,\n```", "```kt\n String>()\n```", "```kt\nDownloadTextAsyncTask().execute(\"https://example.com\")\n```", "```kt\nclass DownloadTextAsyncTask : AsyncTask<String, Void,\n```", "```kt\n String>() {\n```", "```kt\n        override fun doInBackground(vararg params:\n```", "```kt\n          String?): String? {\n```", "```kt\n            valtext = getTextFromNetwork(params[0] ?: \"\")\n```", "```kt\n            //get text from network\n```", "```kt\n            return text\n```", "```kt\n        }\n```", "```kt\n        override fun onPostExecute(result: String?) {\n```", "```kt\n            //Display on UI\n```", "```kt\n        }\n```", "```kt\n}\n```", "```kt\nval handler = Handler(Looper.getMainLooper())\n```", "```kt\nprivate fun fetchTextWithExecutor() {\n```", "```kt\n  val executor = Executors.newSingleThreadExecutor()\n```", "```kt\n  executor.execute {\n```", "```kt\n    // get text from network\n```", "```kt\n           val text = getTextFromNetwork()\n```", "```kt\n    handler.post {\n```", "```kt\n      // Display on UI\n```", "```kt\n    }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nval handler = Handler(Looper.getMainLooper()\n```", "```kt\nprivate fun fetchTextWithExecutorService() {\n```", "```kt\n  val executor = Executors.newSingleThreadExecutor()\n```", "```kt\n  val future = executor.submit {\n```", "```kt\n     displayText(getTextFromNetwork())    \n```", "```kt\n  }\n```", "```kt\n  ...\n```", "```kt\n  val result = future.get()\n```", "```kt\n}\n```", "```kt\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-\n```", "```kt\n  core:1.6.0\"\n```", "```kt\nimplementation \"org.jetbrains.kotlinx:kotlinx-coroutines-\n```", "```kt\n  android:1.6.0\"\n```", "```kt\nfun fetchText(): String {\n```", "```kt\n  ...\n```", "```kt\n}\n```", "```kt\nsuspend fun fetchText(): String { ... }\n```", "```kt\nlifecycleScope.launch(Dispatchers.IO) {\n```", "```kt\n    val fetchedText = fetchText()  \n```", "```kt\n    withContext(Dispatchers.Main) {\n```", "```kt\n      displayText(fetchedText)\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nfun getTextFromNetwork(): String { ... }\n```", "```kt\nprivate fun getWords(): Flow<String> = flow {\n```", "```kt\n  getTextFromNetwork().split(\" \").forEach {\n```", "```kt\n    delay(1_000)\n```", "```kt\n    emit(it)\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nprivate suspend fun displayWords() {\n```", "```kt\n          getWords().collect {\n```", "```kt\n          Log.d(\"flow\", it)\n```", "```kt\n           }\n```", "```kt\n}\n```"]