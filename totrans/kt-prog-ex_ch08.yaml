- en: Securing and Deploying an Android App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护并部署Android应用程序
- en: Over the past six chapters, we have explored the application of Kotlin in the
    mobile app domain by focusing on Android development. The last chapter explored
    the various storage mediums provisioned by the Android application framework to
    the application development. We explored internal storage, external storage, network
    storage, and SQLite; we also created programs that utilized them. We went a step
    further by covering the use of Room and content providers to store and retrieve
    data from a SQLite database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的六章中，我们通过关注Android开发，探索了Kotlin在移动应用领域的应用。最后一章探讨了Android应用程序框架提供给应用程序开发的多种存储介质；我们探讨了内部存储、外部存储、网络存储和SQLite；我们还创建了使用它们的程序。我们更进一步，介绍了使用Room和内容提供者来存储和检索SQLite数据库中的数据。
- en: 'In this chapter, we willl wrap up our exploration of Android by covering two
    extremely important topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过涵盖两个极其重要的主题来结束我们对Android的探索：
- en: Android application security
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android应用程序安全
- en: Android application deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android应用程序部署
- en: We will kick off this chapter by discussing Android application security.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从此章节开始，讨论Android应用程序的安全性。
- en: Securing an Android application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Android应用程序
- en: It should come as no surprise that security is an important consideration when
    building software. Besides the security measures put in place in the Android operating
    system, it is important that developers pay extra attention to ensuring that their
    applications meet the set security standards. In this section, a number of important
    security considerations and best practices will be broken down for your understanding.
    Following these best practices will make your applications less vulnerable to
    malicious programs that may be installed on a client device.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建软件时，安全性是一个重要的考虑因素。除了Android操作系统中实施的安全措施外，开发者还需要特别注意确保他们的应用程序符合设定的安全标准。在本节中，将为您分解一些重要的安全考虑和最佳实践，以便您理解。遵循这些最佳实践将使您的应用程序对可能安装在客户端设备上的恶意程序更加不易受攻击。
- en: Data storage
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据存储
- en: All things being equal, the privacy of data saved by an application to a device
    is the most common security concern in developing an Android application. Some
    simple rules can be followed to make your application data more secure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有条件相同的情况下，应用程序保存到设备中的数据隐私是开发Android应用程序中最常见的安全担忧。可以遵循一些简单的规则来使您的应用程序数据更加安全。
- en: Using internal storage
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内部存储
- en: As we saw in the previous chapter, internal storage is a good way to save private
    data on a device. Every Android application has a corresponding internal storage
    directory in which private files can be created and written to. These files are
    private to the creating application, and as such cannot be accessed by other applications
    on the client device. As a rule of thumb, if data should only be accessible by
    your application and it is reasonably possible to store it in internal storage,
    do so. Feel free to refer to the previous chapter for a refresher on how to use
    internal storage.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中看到的，内部存储是在设备上保存私有数据的好方法。每个Android应用程序都有一个相应的内部存储目录，可以在其中创建和写入私有文件。这些文件仅对创建应用程序是私有的，因此不能被客户端设备上的其他应用程序访问。一般来说，如果数据只能由您的应用程序访问，并且合理地可以存储在内部存储中，那么请这样做。请随时参考上一章以复习如何使用内部存储。
- en: Using external storage
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用外部存储
- en: External storage files are not private to applications, and, as such, can be
    easily accessed by other applications on the same client device. As a result of
    this, you should consider encrypting application data before storing it in external
    storage. There are a number of libraries and packages that can be used to encrypt
    data prior to its saving to external storage. Facebook's Conceal ([http://facebook.github.io/conceal/](http://facebook.github.io/conceal/))
    library is a good option for external-storage data encryption.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 外部存储文件不是应用程序的私有文件，因此可以很容易地被同一客户端设备上的其他应用程序访问。因此，在将数据存储在外部存储之前，您应该考虑对应用程序数据进行加密。有许多库和包可以在将数据保存到外部存储之前对其进行加密。Facebook的Conceal([http://facebook.github.io/conceal/](http://facebook.github.io/conceal/))库是外部存储数据加密的一个很好的选择。
- en: In addition to this, as another rule of thumb, do not store sensitive data in
    external storage. This is because external storage files can be manipulated freely.
    Validation should also be performed on input retrieved from external storage.
    This validation should be done as a result of the untrustworthy nature of data
    stored in external storage.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，作为另一个经验法则，不要将敏感数据存储在外部存储中。这是因为外部存储文件可以被自由操作。还应对外部存储中检索到的输入进行验证。这种验证应基于外部存储中存储的数据不可信的性质。
- en: Using content providers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内容提供者
- en: As you know from the previous chapter, content providers can either prevent
    or enable external access to your application data. Use the `android:exported`
    attribute when registering your content provider in the manifest file to specify
    whether external access to the content provider should be permitted. Set `android:exported`
    to `true` if you wish the content provider to be exported, otherwise set the attribute
    to `false`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前一章中了解到的，内容提供者可以阻止或允许外部访问您的应用程序数据。在清单文件中注册内容提供者时，使用 `android:exported` 属性来指定是否允许外部访问内容提供者。如果您希望内容提供者被导出，则将
    `android:exported` 设置为 `true`，否则将该属性设置为 `false`。
- en: In addition to this, content provider query methods—for example, `query()`,
    `update()`, and `delete()`—should be used to prevent SQL injection (a code injection
    technique that involves the execution of malicious SQL statements in an entry
    field by an attacker).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，内容提供者查询方法——例如，`query()`、`update()` 和 `delete()`——应使用以防止 SQL 注入（一种攻击者通过在输入字段中执行恶意
    SQL 语句进行的代码注入技术）。
- en: Networking security considerations
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全考虑事项
- en: There are a number of best practices that should be followed when performing
    network transactions via an Android application. These best practices can be split
    into different categories. We shall speak about **Internet Protocol** (**IP**)
    networking and telephony networking best practices in this section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 Android 应用程序执行网络事务时，应遵循一些最佳实践。这些最佳实践可以分为不同的类别。在本节中，我们将讨论**互联网协议**（**IP**）网络通信和电话网络通信的最佳实践。
- en: IP networking
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IP 网络通信
- en: When communicating with a remote computer via IP, it is important to ensure
    that your application makes use of HTTPs wherever possible (thus wherever it is
    supported in the server). One major reason for doing this is because devices often
    connect to insecure networks, such as public wireless connections. HTTPs ensure
    encrypted communication between clients and servers, regardless of the network
    they are connected to. In Java, an `HttpsURLConnection` can be used for secure
    data transfer over a network. It is important to note that data received via an
    insecure network connection should not be trusted.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过 IP 与远程计算机通信时，确保您的应用程序尽可能使用 HTTPs（在服务器支持的地方）非常重要。这样做的一个主要原因是设备经常连接到不安全的网络，例如公共无线连接。HTTPs
    确保无论连接到哪个网络，客户端和服务器之间的通信都是加密的。在 Java 中，可以使用 `HttpsURLConnection` 在网络上进行安全的数据传输。需要注意的是，通过不安全的网络连接接收到的数据不应被信任。
- en: Telephony networking
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 电话网络通信
- en: In instances where data needs to be transferred freely across a server and client
    applications, **Firebase Cloud Messaging** (**FCM**)—along with IP networking—should
    be utilized instead of other means, such as the **Short Messaging Service** (**SMS**)
    protocol. FCM is a multi-platform messaging solution that facilitates the seamless
    and reliable transfer of messages between applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要数据在服务器和客户端应用程序之间自由传输的情况下，**Firebase Cloud Messaging**（**FCM**）——连同 IP 网络通信——应该被用于替代其他方式，例如**短消息服务**（**SMS**）协议。FCM
    是一个多平台消息解决方案，它促进了应用程序之间消息的无缝和可靠传输。
- en: 'SMS is not a good candidate for transferring data messages, because:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 短信（SMS）不是传输数据消息的好选择，因为：
- en: It is not encrypted
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有被加密
- en: It is not strongly authenticated
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有强认证
- en: Messages sent via SMS are subject to spoofing
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过短信发送的消息容易受到欺骗
- en: SMS messages are subject to interception
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短信消息容易受到拦截
- en: Input validation
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入验证
- en: The validation of user input is extremely important in order to avoid security
    risks that may arise. One such risk, as explained in the *Using content providers*
    section, is SQL injection. The malicious injection of SQL script can be prevented
    by the use of parameterized queries and the extensive sanitation of inputs used
    in raw SQL queries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免可能出现的风险，验证用户输入非常重要。正如在*使用内容提供者*部分中解释的那样，这种风险之一是SQL注入。通过使用参数化查询和彻底清洗用于原始SQL查询的输入，可以防止恶意SQL脚本的注入。
- en: In addition to this, inputs retrieved from external storage must be appropriately
    validated because external storage is not a trusted data source.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从外部存储检索的输入必须得到适当的验证，因为外部存储不是一个可信的数据源。
- en: Working with user credentials
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户凭据
- en: The risk of phishing can be alleviated by reducing the requirement of user credential
    input in an application. Instead of constantly requesting user credentials, consider
    using an authorization token. Eliminate the need for storing usernames and passwords
    on the device. Instead, make use of a refreshable authorization token.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过减少应用程序中用户凭据输入的要求，可以减轻钓鱼的风险。与其不断请求用户凭据，不如考虑使用授权令牌。消除在设备上存储用户名和密码的需求。相反，使用可刷新的授权令牌。
- en: Code obfuscation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码混淆
- en: 'Before publishing an Android application, it is imperative to utilize a code
    obfuscation tool, such as **ProGuard**, to prevent individuals from getting unhindered
    access to your source code by utilizing various means, such as decompilation.
    ProGuard is prepackaged included within the Android SDK, and, as such, no dependency
    inclusion is required. It is automatically included in the build process if you
    specify your build type to be a release. You can find out more about ProGuard
    here: [https://www.guardsquare.com/en/proguard](https://www.guardsquare.com/en/proguard)
    .'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布Android应用程序之前，务必使用代码混淆工具，例如**ProGuard**，以防止个人通过各种手段（如反编译）无障碍地访问你的源代码。ProGuard是预包装在Android
    SDK中的，因此不需要包含依赖项。如果你将构建类型指定为发布版本，它将自动包含在构建过程中。你可以在[https://www.guardsquare.com/en/proguard](https://www.guardsquare.com/en/proguard)上了解更多关于ProGuard的信息。
- en: Securing broadcast receivers
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护广播接收器
- en: By default, a broadcast receiver component is exported and as a result can be
    invoked by other applications on the same device. You can control access of applications
    to your apps's broadcast receiver by applying security permissions to it. Permissions
    can be set for broadcast receivers in an application's manifest file with the
    `<receiver>` element.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，广播接收器组件是导出的，因此可以被同一设备上的其他应用程序调用。你可以通过对其应用安全权限来控制应用程序对你的应用程序的广播接收器的访问。可以在应用程序的清单文件中使用`<receiver>`元素为广播接收器设置权限。
- en: Dynamically loading code
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态加载代码
- en: In scenarios in which the dynamic loading of code by your application is necessary,
    you must ensure that the code being loaded comes from a trusted source. In addition
    to this, you must make sure to reduce the risk of tampering code at all costs.
    Loading and executing code that has been tampered with is a huge security threat.
    When code is being loaded from a remote server, ensure it is transferred over
    a secure, encrypted network. Keep in mind that code that is dynamically loaded
    runs with the same security permissions as your application (the permissions you
    defined in your application's manifest file).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要应用程序动态加载代码的场景中，你必须确保加载的代码来自可信源。此外，你必须不惜一切代价降低篡改代码的风险。加载和执行被篡改的代码是一个巨大的安全威胁。当从远程服务器加载代码时，确保它通过安全、加密的网络传输。请记住，动态加载的代码与你的应用程序具有相同的权限（你在应用程序的清单文件中定义的权限）。
- en: Securing services
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护服务
- en: Unlike broadcast receivers, services are not exported by the Android system
    by default. The default exportation of a service only happens when an intent filter
    is added to the declaration of a service in the manifest file. The `android:exported`
    attribute should be used to ensure services are exported only when you want them
    to be. Set `android:exported` to `true` when you want a service to be exported
    and `false` otherwise.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与广播接收器不同，Android系统默认不导出服务。默认导出服务仅在将intent过滤器添加到清单文件中服务的声明时发生。应使用`android:exported`属性来确保服务仅在需要时导出。当你想要服务导出时，将`android:exported`设置为`true`，否则设置为`false`。
- en: Launching and publishing your Android application
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和发布你的Android应用程序
- en: So far, we have taken an in-depth look at the Android system, application development
    in Android, and some other important topics, such as Android application security.
    It is time for us to cover our final topic for this book pertaining to the Android
    ecosystem—launching and publishing an Android application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经深入了解了Android系统、Android应用程序开发以及一些其他重要主题，例如Android应用程序安全。现在是时候讨论这本书关于Android生态系统的最后一个主题——发布和发布Android应用程序。
- en: 'You may be wondering at this juncture what the words launch and publish mean.
    A launch is an activity that involves the introduction of a new product to the
    public (end users). Publishing an Android application is simply the act of making
    an Android application available to users. Various activities and processes must
    be carried out to ensure the successful launch of an Android application. There
    are 15 of these activities in all. They are:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道此时“发布”和“发布”这两个词的含义。发布是一个涉及将新产品介绍给公众（最终用户）的活动。发布Android应用程序就是使Android应用程序对用户可用。必须执行各种活动和流程以确保Android应用程序成功发布。总共有15个这样的活动。它们是：
- en: Understanding the Android developer program policies
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Android开发者计划政策
- en: Preparing your Android developer account
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备你的Android开发者账户
- en: Localization planning
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地化规划
- en: Planning for simultaneous release
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划同步发布
- en: Testing against the quality guideline
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试质量指南
- en: Building a release-ready APK
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建发布就绪的APK
- en: Planning your application's Play Store listing
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划你的应用程序的Play Store列表
- en: Uploading your application package to the alpha or beta channel
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的应用程序包上传到alpha或beta渠道
- en: Device compatibility definition
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备兼容性定义
- en: Pre-launch report assessment
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预发布报告评估
- en: Pricing and application distribution setup
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定价和应用分发设置
- en: Distribution option selection
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择分发选项
- en: In-app products and subscriptions setup
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用内产品和服务订阅设置
- en: Determining your application's content rating
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定你的应用程序的内容评级
- en: Publishing your application
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布你的应用程序
- en: Wow! That's a long list. Don't fret if you don't understand everything on the
    list. Let's look at each item in more detail.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这是一个很长的列表。如果你没有完全理解列表上的所有内容，请不要担心。让我们更详细地查看每个项目。
- en: Understanding the Android developer program policies
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Android开发者计划政策
- en: There is a set of developer program policies that were created for the sole
    purpose of making sure that the Play Store remains a trusted source of software
    for its users. Consequences exist for the violation of these defined policies.
    As a result, it is important that you peruse and fully understand these developer
    policies—their purposes and consequences—before continuing with the process of
    launching your application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些开发者计划政策是为了确保Play Store始终是用户信任的软件来源而创建的。违反这些定义的政策会有后果。因此，在继续进行应用程序发布流程之前，重要的是要仔细阅读并完全理解这些开发者政策——它们的目的和后果。
- en: Preparing your Android developer account
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的Android开发者账户
- en: You will need an Android developer account to launch your application on the
    Play Store. Ensure that you set one up by signing up for a developer account and
    confirming the accuracy of your account details. If you ever need to sell products
    on an Android application of yours, you will need to set up a merchant account.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个Android开发者账户才能在Play Store上发布你的应用程序。确保通过注册开发者账户并确认账户详情的准确性来设置一个账户。如果你需要在你的Android应用程序上销售产品，你需要设置一个商户账户。
- en: Localization planning
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化规划
- en: 'Sometimes, for the purpose of localization, you may have more than one copy
    of your application, with each localized to a different language. When this is
    the case, you will need to plan for localization early on and follow the recommended
    localization checklist for Android developers. You can view this checklist here:
    [https://developer.android.com/distribute/best-practices/launch/localization-checklist.html](https://developer.android.com/distribute/best-practices/launch/localization-checklist.html).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，为了本地化，你可能需要多个应用程序副本，每个本地化到不同的语言。在这种情况下，你需要提前规划本地化，并遵循为Android开发者推荐的本地化清单。你可以在此查看此清单：[https://developer.android.com/distribute/best-practices/launch/localization-checklist.html](https://developer.android.com/distribute/best-practices/launch/localization-checklist.html)。
- en: Planning for simultaneous release
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划同步发布
- en: You may want to launch a product on multiple platforms. This has a number of
    advantages, such as increasing the potential market size of your product, reducing
    the barrier of access to your product, and maximizing the number of potential
    installations of your application. Releasing on numerous platforms simultaneously
    is generally a good idea. If you wish to do this with any product of yours, ensure
    you plan for this well in advance. In cases where it is not possible to launch
    an application on multiple platforms at once, ensure you provide a means by which
    interested potential users can submit their contact details so as to ensure that
    you can get in touch with them once your product is available on their platform
    of choice.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望在不同平台上发布产品。这有几个优点，例如增加您产品的潜在市场规模、降低您产品的访问门槛以及最大化您应用程序的潜在安装数量。同时在不同平台上发布通常是个好主意。如果您希望对您的任何产品这样做，请确保您提前做好规划。在无法同时在不同平台上发布应用程序的情况下，确保您提供一种方式，让感兴趣的潜在用户可以提交他们的联系信息，以便您可以在他们的选择平台上发布产品后与他们取得联系。
- en: Testing against the quality guidelines
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符合质量指南的测试
- en: 'Quality guidelines provide testing templates that you can use to confirm that
    your application meets the fundamental functional and non-functional requirements
    that are expected by Android users. Ensure that you run your applications through
    these quality guides before launch. You can access these application quality guides
    here: [https://developer.android.com/develop/quality-guidelines/index.html](https://developer.android.com/develop/quality-guidelines/index.html).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 质量指南提供了测试模板，您可以使用这些模板来确认您的应用程序符合Android用户期望的基本功能和非功能要求。确保在发布前运行您的应用程序通过这些质量指南。您可以通过以下链接访问这些应用程序质量指南：[https://developer.android.com/develop/quality-guidelines/index.html](https://developer.android.com/develop/quality-guidelines/index.html)。
- en: Building a release-ready application package (APK)
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建准备发布的应用程序包（APK）
- en: A release-ready APK is an Android application that has been packaged with optimizations
    and then built and signed with a release key. Building a release-ready APK is
    an important step in the launch of an Android application. Pay extra attention
    to this step.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个准备发布的APK是一个经过优化打包、然后使用发布密钥构建和签名的Android应用程序。构建一个准备发布的APK是发布Android应用程序的重要步骤。请特别注意此步骤。
- en: Planning your application's Play Store listing
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划您的应用程序的Play Store列表
- en: This step involves the collation of all resources necessary for your product's
    Play Store listing. These resources include, but are not limited to, your application's
    log, screenshots, descriptions, promotional graphics, and videos, if any. Ensure
    you include a link to your application's privacy policy along with your application's
    Play Store listing. It is also important to localize your application's product
    listing to all languages that your application supports.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤涉及收集您产品Play Store列表所需的所有资源。这些资源包括但不限于您的应用程序日志、截图、描述、促销图形和视频（如有）。确保您在您的应用程序Play
    Store列表中包含指向您的应用程序隐私政策的链接。同样重要的是，将您应用程序的产品列表本地化到您的应用程序支持的所有语言。
- en: Uploading your application package to the alpha or beta channel
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的应用程序包上传到alpha或beta渠道
- en: As testing is an efficient and battle-tested way of detecting defects in software
    and improving software quality, it is a good idea to upload your application package
    to alpha and beta channels to facilitate carrying out alpha and beta software
    testing on your product. Alpha testing and beta testing are both types of acceptance
    testing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试是检测软件缺陷和改进软件质量的一种高效且经过实战检验的方法，因此将您的应用程序包上传到alpha和beta渠道以方便对您的产品进行alpha和beta软件测试是个好主意。Alpha测试和beta测试都是验收测试的类型。
- en: Device compatibility definition
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备兼容性定义
- en: This step involves the declaration of Android versions and screen sizes that
    your application was developed to work on. It is important to be as accurate as
    possible in this step as defining inaccurate Android versions and screen sizes
    will invariably lead to users experiencing problems with your application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤涉及声明您的应用程序开发时旨在其上运行的Android版本和屏幕尺寸。在此步骤中尽可能准确是非常重要的，因为定义不准确的Android版本和屏幕尺寸不可避免地会导致用户在使用您的应用程序时遇到问题。
- en: Pre-launch report assessment
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预发布报告评估
- en: Pre-launch reports are used to identify issues found after the automatic testing
    of your application on various Android devices. Pre-launch reports will be delivered
    to you, if you opt in to them, when you upload an application package to an alpha
    or beta channel.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布报告用于识别在自动测试你的应用程序在各种Android设备上后发现的任何问题。如果你选择加入，预发布报告将在你上传应用程序包到alpha或beta渠道时发送给你。
- en: Pricing and application distribution setup
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定价和应用分发设置
- en: First, determine the means by which you want to monetize you application. After
    determining this, set up your application as either a free install or a paid download.
    After you have set up the desired pricing of your application, select the countries
    you wish to distribute you applications to.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确定你想要通过什么方式来盈利你的应用程序。确定这一点后，将你的应用程序设置为免费安装或付费下载。在你设置了应用程序的期望定价后，选择你希望分发应用程序的国家。
- en: Distribution option selection
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择分发选项
- en: This step involves the selection of devices and platforms—for example, Android
    TV and Android Wear—that you wish to distribute your app on. After doing this,
    the Google Play team will be able to review your application. If your application
    is approved after its review, Google Play will make it more discoverable.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步骤涉及选择你希望在哪些设备和平台上分发你的应用程序——例如，Android TV和Android Wear。完成此操作后，Google Play团队将能够审查你的应用程序。如果你的应用程序在审查后获得批准，Google
    Play将使其更容易被发现。
- en: In-app products and subscriptions setup
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用内设置产品和订阅
- en: If you wish to sell products within your application, you will need to set up
    your in-app products and subscriptions. Here, you will specify the countries that
    you can sell into and take care of various monetary-related issues, such as tax
    considerations. In this step, you will also set up your merchant account.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在应用内销售产品，你需要设置你的应用内产品和订阅。在这里，你将指定你可以销售到的国家，并处理各种与金钱相关的问题，例如税务考虑。在这一步骤中，你还将设置你的商户账户。
- en: Determining your application's content rating
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定你的应用程序的内容评级
- en: It is necessary that you provide an accurate rating for the application you
    are publishing to the Play Store. This step is mandated by the Android Developer
    Program Policies for good reason. It aids the appropriate age group you are targeting
    to discover your application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须为你在Play Store上发布的应用程序提供一个准确的评级。这一步骤是由Android开发者计划政策强制要求的，这是有充分理由的。它有助于你针对的适当年龄组发现你的应用程序。
- en: Publishing your application
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布你的应用程序
- en: Once you have catered for the necessary steps prior to this, you are ready to
    publish your application to the production channel of the Play Store. Firstly,
    you will need to roll out a release. A release allows you to upload the APK files
    of your application and roll out your application to a specific track. At the
    end of the release procedure, you can publish your application by clicking Confirm
    rollout.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了这一步骤之前的所有必要步骤，你就可以准备将你的应用程序发布到Play Store的生产渠道。首先，你需要发布一个版本。发布允许你上传你的应用程序的APK文件，并将你的应用程序推出到特定的渠道。在发布流程结束时，你可以通过点击“确认发布”来发布你的应用程序。
- en: So, that was all we need to know to publish a new application on the Play Store.
    In most cases, you will not need to follow all these steps in a linear manner,
    you will just need to follow a subset of the steps—more specifically, those pertaining
    to the type of application you wish to publish. As always, the best way to understand
    a set of steps is through an example. Let's go ahead and publish an application
    we developed in a previous chapter. We will publish the Messenger application
    to the Play Store in the following section. You may choose to publish any of the
    applications we previously developed if you prefer.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是我们发布新应用在Play Store上所需了解的所有内容。在大多数情况下，你不需要按线性方式遵循所有这些步骤，你只需要遵循步骤的一个子集——更具体地说，那些与你希望发布的应用类型相关的步骤。像往常一样，通过一个例子来理解一系列步骤是最好的方式。让我们继续发布我们在前一章中开发的应用程序。在接下来的部分，我们将发布Messanger应用程序到Play
    Store。如果你更喜欢，你也可以选择发布我们之前开发的应用程序中的任何一个。
- en: 'The first thing we will do in order to publish the Messenger app to the Play
    Store is create a Google Play Developer Account. Doing this is simple. We will
    show you how in the following paragraphs. First and foremost, choose your favorite
    web browser and navigate to the following URL: [https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)
    .'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Messenger 应用发布到 Play 商店，我们首先需要创建一个 Google Play 开发者账户。我们将在接下来的段落中向您展示如何操作。首先，选择您最喜欢的网络浏览器，并导航到以下
    URL：[https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)。
- en: 'Once you open the web page, you will be asked to sign in with your Google account.
    After signing in with an appropriate Google account, you will be required to accept
    the developer program agreement. This second step is shown in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开网页，您将需要使用您的 Google 账户登录。登录适当的 Google 账户后，您将需要接受开发者计划协议。此第二步如图所示：
- en: '![](img/a3d90fe5-bf8f-4718-9ad7-2be24a1282b8.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a3d90fe5-bf8f-4718-9ad7-2be24a1282b8.jpg)'
- en: 'Accept the Google Play Developer agreement by scrolling to the bottom of the
    web page, as shown in the following screenshot, and ticking I agree and I am willing
    to associate my account registration with the Google Play Developer distribution
    agreement:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过滚动到网页底部并勾选“我同意”以及“我愿意将我的账户注册与 Google Play 开发者分发协议关联”，接受 Google Play 开发者协议，如图所示：
- en: '![](img/0710f6bb-fcbe-4c00-9e37-405c5af46f4d.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0710f6bb-fcbe-4c00-9e37-405c5af46f4d.jpg)'
- en: 'After accepting the agreement, click CONTINUE TO PAYMENT to proceed with your
    developer account creation. You are required to pay a one-time Google Play Developer
    Account registration fee of $25\. You will be taken through a hassle-free payment
    process. Once payment has been successfully made, you will be prompted accordingly:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接受协议后，点击“继续到支付”以继续创建您的开发者账户。您需要支付一次性的 Google Play 开发者账户注册费 25 美元。您将经历一个无烦恼的支付流程。一旦支付成功，您将相应地收到提示：
- en: '![](img/58c62158-f3e2-437b-aee7-4587cdeadaf9.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58c62158-f3e2-437b-aee7-4587cdeadaf9.jpg)'
- en: 'Clicking CONTINUE REGISTRATION will take you to the final step of the registration
    process where you will be asked to complete your account details, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“继续注册”将带您进入注册流程的最后一步，您将需要完成账户详细信息，如下所示：
- en: '![](img/6dea7f12-5b63-4abf-8acc-b4db2dea009b.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6dea7f12-5b63-4abf-8acc-b4db2dea009b.jpg)'
- en: Enter the rest of your account details as required and click COMPLETE REGISTRATION
    to finish the account registration process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照要求输入您的账户详细信息，然后点击“完成注册”以完成账户注册流程。
- en: 'Upon completing registration, you will be directed to the Google Play Developer
    Console. From here, you can manage your applications, use Google Play game services,
    manage your orders, download application reports, view alerts, and manage your
    console settings:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注册完成后，您将被引导到 Google Play 开发者控制台。从这里，您可以管理您的应用程序，使用 Google Play 游戏服务，管理您的订单，下载应用程序报告，查看警报，以及管理您的控制台设置：
- en: '![](img/59bb2082-06bb-447d-8d68-d5c28fbfed72.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59bb2082-06bb-447d-8d68-d5c28fbfed72.jpg)'
- en: 'We are interested in publishing an Android application. As such, click PUBLISH
    AN ANDROID APP ON GOOGLE PLAY on the console dashboard. Select a default language
    and input `Messenger` as the app''s title when requested to then click CREATE.
    A new draft application will be created for you on the Developer console:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有兴趣发布一个 Android 应用程序。因此，在控制台仪表板上点击“在 Google Play 上发布 Android 应用”。当被要求选择默认语言并输入“Messenger”作为应用程序的标题时，然后点击“创建”。在开发者控制台中为您创建一个新的草稿应用程序：
- en: '![](img/d6fcd623-aea2-4ff8-894a-2f7123fbedde.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d6fcd623-aea2-4ff8-894a-2f7123fbedde.jpg)'
- en: Before proceeding with our application publication process, we must sign a release
    APK for the Messenger app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续我们的应用程序发布流程之前，我们必须为 Messenger 应用签署一个发布版 APK。
- en: Signing your application for release
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为发布签名的应用程序
- en: 'Open your Messenger app project in Android Studio. Though not the only method
    of signing apps, Android Studio will be used in this chapter to sign the Messenger
    App. First things first, generate a private key for signing by running the following
    command in your Android Studio terminal:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中打开您的 Messenger 应用程序项目。虽然这不是签署应用的唯一方法，但本章将使用 Android Studio
    来签署 Messenger 应用。首先，首先，在您的 Android Studio 终端运行以下命令以生成用于签名的私钥：
- en: '[PRE0]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Running the preceding command prompts you to input a `keystore` password as
    well as to provide additional information for your key. The `keystore` is then
    generated as a file called `my-release-key.jks` and saved in the current directory.
    The key contained in the keystone is valid for 10,000 days.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的命令会提示您输入 `keystore` 密码以及为您的密钥提供更多信息。然后，`keystore` 将作为一个名为 `my-release-key.jks`
    的文件生成并保存在当前目录中。keystore 中的密钥有效期为 10,000 天。
- en: 'Now that we have generated a private key, we will configure Gradle to sign
    our APK. Open the module-level `build.gradle` file and add a `signingConfigs {}`
    block—within the `android {}` block—with entries for `storeFile`, `storePassword`,
    `keyAlias`, and `keyPassword`. Once that has been done, pass that object to the
    `signingConfig` property in your app''s release build type. Take the following
    snippet as an example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经生成了私钥，我们将配置 Gradle 以签署我们的 APK。打开模块级别的 `build.gradle` 文件，并在 `android {}`
    块内添加一个 `signingConfigs {}` 块，其中包含 `storeFile`、`storePassword`、`keyAlias` 和 `keyPassword`
    的条目。完成这些后，将此对象传递给应用发布构建类型的 `signingConfig` 属性。以下是一个示例片段：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After doing the preceding, you are ready to sign your APK; before we do this,
    we must modify our current package name. The `com.example` package name is restricted
    by Google Play, and, as such, we must change our package name before we attempt
    to publish our application to the Play Store. Don''t fret: changing the name of
    our app''s root package is easy with Android Studio. Firstly, ensure you have
    set Android Studio to show the project directory structure. This can be done by
    clicking the dropdown toward the top left of the IDE window and selecting Project:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成前面的操作后，您就可以签署您的 APK；在我们这样做之前，我们必须修改我们的当前包名。`com.example` 包名受到 Google Play
    的限制，因此在我们尝试将应用程序发布到 Play Store 之前，我们必须更改我们的包名。不要担心：使用 Android Studio 改变应用程序根包的名称很容易。首先，确保您已将
    Android Studio 设置为显示项目目录结构。这可以通过单击 IDE 窗口左上角的下拉菜单并选择项目：来实现。
- en: '![](img/5379c8a2-76a5-449a-8518-1799bd05528f.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5379c8a2-76a5-449a-8518-1799bd05528f.jpg)'
- en: 'Once you have done the preceding, unhide all empty middle packages in the project
    structure view by deselecting the Hide Empty Middle Packages option in the project
    structure settings menu, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前面的操作后，通过在项目结构设置菜单中取消选择隐藏空中间包选项，在项目结构视图中取消隐藏所有空中间包，如图所示：
- en: '![](img/5bf41a17-aced-4367-a8a4-6d9b642d6e06.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bf41a17-aced-4367-a8a4-6d9b642d6e06.jpg)'
- en: 'After deselecting the preceding option, empty middle packages will no longer
    be hidden, and, as such, `com.example.messenger` will be split into three visible
    packages: `com`, `example`, and `messenger`. Let''s rename the `example` package
    to something else. Change `example` to a name obtained from the combination of
    your first and last names. So, if your first name and surname are Kevin Fakande,
    the package name will be renamed from `example` to `kevinfakande`. A package can
    be renamed by right-clicking on it and selecting Refactor | Rename.... After your
    package has been renamed, check your manifest and `build.gradle` files to ensure
    that the modification to your project''s package if reflected. Thus, wherever
    you see the `com.example.messenger` string in your `build.gradle` or manifest
    files, modify it to `com.{full_name}.messenger`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在取消选择前面的选项后，中间的空包将不再被隐藏，因此，`com.example.messenger` 将被拆分为三个可见的包：`com`、`example`
    和 `messenger`。现在，让我们将 `example` 包重命名为其他名称。将 `example` 改为你姓名和姓氏的组合得到的名称。例如，如果你的名字和姓氏是
    Kevin Fakande，包名将从 `example` 更改为 `kevinfakande`。可以通过右键单击包并选择重构 | 重命名... 来重命名包。在您的包被重命名后，检查您的清单和
    `build.gradle` 文件，以确保对项目包的修改已反映出来。因此，无论你在 `build.gradle` 或清单文件中看到 `com.example.messenger`
    字符串，都要将其修改为 `com.{full_name}.messenger`。
- en: 'Having made the preceding changes, you are ready to sign your application.
    Type the following command in your Android Studio terminal:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在做出前面的更改后，您就可以签署您的应用程序了。在您的 Android Studio 终端中输入以下命令：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the preceding command creates a release APK that has been signed with
    your private key in the `<project_name>/<module_name>/build/outputs/apk/release`
    path. The APK will be named as `<module_name>-release.apk`. As our module in this
    project is named `app`, the APK in this case will be named `app-release.apk`.
    APKs that have been signed with a private key are ready for distribution. Having
    signed our APK, we are ready to finish the publication of the Messenger app.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令将在`<project_name>/<module_name>/build/outputs/apk/release`路径下创建一个已用您的私钥签名的发布APK。APK将被命名为`<module_name>-release.apk`。由于我们在这个项目中的模块名为`app`，因此在这种情况下，APK将被命名为`app-release.apk`。已用私钥签名的APK已准备好分发。在签发了我们的APK后，我们已准备好完成消息应用的发布。
- en: Releasing your Android app
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布您的Android应用
- en: Having signed your Messenger application, you can proceed with completing the
    required application details toward the goal of releasing your app. Firstly, you
    need to create a suitable store listing for the application. Open the Messenger
    app in the Google Play Console and navigate to the store-listing page (this can
    be done by selecting Store Listing on the side navigation bar).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在签署您的消息应用后，您可以继续完成所需的应用程序详细信息，以实现发布应用程序的目标。首先，您需要为应用程序创建一个合适的商店列表。在Google Play控制台中打开消息应用，并导航到商店列表页面（这可以通过在侧导航栏中选择“商店列表”来完成）。
- en: 'You will need to fill out all the required information in the store listing
    page before we proceed further. This information includes product details, such
    as a title, short description, full description, as well as graphic assets and
    categorization information—including the application type, category and content
    rating, contact details, and privacy policy. The Google Play Console store listing
    page is shown in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，您需要在商店列表页面上填写所有必要的信息。这些信息包括产品详情，如标题、简短描述、完整描述，以及图形资产和分类信息——包括应用程序类型、类别和内容评级、联系详情和隐私政策。以下截图显示了Google
    Play控制台商店列表页面：
- en: '![](img/4205bafa-ab12-4575-885c-0fa3c4995516.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4205bafa-ab12-4575-885c-0fa3c4995516.jpg)'
- en: 'Once the store listing information has been filled in, the next thing to fill
    in is the pricing and distribution information. Select Pricing & distribution
    on the left navigation bar to open up its preference selection page. For the sake
    of this demonstration, we set the pricing of this app to FREE. We also selected
    five random countries to distribute this application to. These countries are Nigeria,
    India, the United States of America, the United Kingdom, and Australia:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦填写了商店列表信息，接下来需要填写的是定价和分发信息。在左侧导航栏中选择“定价和分发”以打开其偏好选择页面。为了演示目的，我们将此应用的定价设置为免费。我们还选择了五个随机国家来分发此应用程序。这些国家包括尼日利亚、印度、美国、英国和澳大利亚：
- en: '![](img/0da054ff-d685-4f18-b77a-d84ba072a48a.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0da054ff-d685-4f18-b77a-d84ba072a48a.jpg)'
- en: Besides selecting the type of pricing and the available countries for product
    distribution, you will need to provide additional preference information. The
    necessary information to be provided includes device category information, user
    program information, and consent information.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 除了选择定价类型和产品分发的可用国家，您还需要提供额外的偏好信息。需要提供的信息包括设备类别信息、用户程序信息和同意信息。
- en: 'It is now time to add our signed APK to our Google Play Console app. Navigate
    to App releases | MANAGE BETA | EDIT RELEASE. In the page that is presented to
    you, you may be asked whether you want to opt into Google play app signing:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将我们的已签名APK添加到我们的Google Play控制台应用中。导航到“应用发布”|“管理测试版”|“编辑发布”。在向您展示的页面上，您可能会被问及是否希望加入Google
    Play应用签名：
- en: '![](img/61625732-593e-4602-9efc-00bdcca58777.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61625732-593e-4602-9efc-00bdcca58777.jpg)'
- en: 'For the sake of this example, select OPT-OUT. Once OPT-OUT is selected, you
    will be able to choose your APK file for upload from your computer''s file system.
    Select your APK for upload by clicking BROWSE FILES, as shown in the following
    screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本例的目的，选择“退出”。一旦选择了“退出”，您将能够从您的计算机文件系统中选择您的APK文件进行上传。通过点击以下截图所示的“浏览文件”，选择您的APK进行上传：
- en: '![](img/002ad88b-cf74-4b3f-9051-4c5ecee2ae3c.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/002ad88b-cf74-4b3f-9051-4c5ecee2ae3c.jpg)'
- en: 'After selecting an appropriate APK, it will be uploaded to the Google Play
    Console. Once the upload is done, the play console will automatically add a suggested
    release name for your beta release. This release name is based on the version
    name of the uploaded APK. Modify the release name if you are not comfortable with
    the suggestion. Next, add a suitable release note in the text field provided.
    Once you are satisfied with the data you have input, save and continue by clicking
    the Review button at the bottom of the web page. After reviewing the beta release,
    you can roll it out if you have added beta testers to your app. Rolling out a
    beta release is not our focus, so let''s divert back to our main goal: publishing
    the Messenger app.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择合适的 APK 后，它将被上传到 Google Play 控制台。一旦上传完成，Play 控制台将自动为你的测试版发布建议一个发布名称。这个发布名称基于上传的
    APK 的版本名称。如果你对建议不满意，可以修改发布名称。接下来，在提供的文本字段中添加一个合适的发布说明。一旦你对输入的数据满意，通过点击网页底部的“审查”按钮保存并继续。在审查了测试版发布后，如果你已经为你的应用添加了测试者，你可以推出它。推出测试版不是我们的重点，所以让我们回到我们的主要目标：发布
    Messenger 应用。
- en: 'Having uploaded an APK for your application, you can now complete the mandatory
    content rating questionnaire. Click the Content rating navigation item on the
    sidebar and follow the instructions to do this. Once the questionnaire is complete,
    appropriate ratings for your application will be generated:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 上传了你的应用的 APK 后，你现在可以完成强制性的内容评级问卷。点击侧边栏上的“内容评级”导航项，并按照说明进行操作。一旦问卷完成，将为你的应用生成适当的评级：
- en: '![](img/d57eb45b-4ed4-40bf-9d59-371e513d7c2a.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d57eb45b-4ed4-40bf-9d59-371e513d7c2a.jpg)'
- en: 'With the completion of the content rating questionnaire, the application is
    ready to be published to production. Applications that are published to production
    are made available to all users on the Google Play Store. On the play console,
    navigate to App releases | Manage Production | Create releases. When prompted
    to upload an APK, click the ADD APK FROM LIBRARY button to the right of the screen
    and select the APK we previously uploaded (the APK with a version name of 1.0) and
    complete the necessary release details similar to how we did when creating a beta
    release. Click the review button at the bottom of the page once you are ready
    to proceed. You will be given a brief release summary in the page that follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成内容评级问卷后，应用即可准备发布到生产环境。发布到生产环境的应用将在 Google Play 商店对所有用户开放。在 Play 控制台中，导航到“应用发布”|“管理生产”|“创建发布”。当提示上传
    APK 时，点击屏幕右侧的“从库添加 APK”按钮，并选择我们之前上传的 APK（版本名为 1.0）以及完成必要的发布详情，类似于创建测试版发布时的方式。准备好后，点击页面底部的“审查”按钮。接下来页面将显示一个简短的发布摘要：
- en: '![](img/1400b87f-aa7d-48aa-80b6-ab8b47ca8c46.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1400b87f-aa7d-48aa-80b6-ab8b47ca8c46.jpg)'
- en: 'Go through the information presented in the summary carefully. Start the roll
    out to production once you have asserted that you are satisfied with the information
    presented to you in the summary. Once you start the roll out to production, you
    will be prompted to confirm your understanding that your app will become available
    to users of the Play Store:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细阅读摘要中提供的信息。一旦确认对摘要中的信息满意，即可开始向生产环境推出。一旦开始推出到生产环境，系统将提示你确认理解你的应用将向 Play 商店的用户开放：
- en: '![](img/2e6201d0-eaaf-4429-b4fb-c2ea42e1882e.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e6201d0-eaaf-4429-b4fb-c2ea42e1882e.jpg)'
- en: Click Confirm once you are ready for the Messenger app to go live on the Play
    Store. Congratulations! You have now published your first application to the Google
    Play Store!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好让 Messenger 应用在 Play 商店上线时，点击“确认”。恭喜！你现在已经将你的第一个应用发布到了 Google Play 商店！
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we concluded our exploration of the Android application framework
    by learning how to secure and publish Android applications to the Google Play
    Store. We identified security threats to Android applications and fully explained
    ways to alleviate them, we also noted best practices to follow when developing
    applications for the Android ecosystem. We learned how to work with storage mediums
    and carry out networking processes securely. In addition to this, we learned how
    to secure Android components, such as services and broadcast receivers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过学习如何确保和发布 Android 应用程序到 Google Play 商店，结束了对 Android 应用程序框架的探索。我们确定了
    Android 应用程序的安全威胁，并全面解释了缓解这些威胁的方法，我们还指出了在为 Android 生态系统开发应用程序时应遵循的最佳实践。我们学习了如何与存储介质安全地工作并执行网络过程。除此之外，我们还学习了如何确保
    Android 组件的安全，例如服务和广播接收器。
- en: Finally, we took a deep dive into the process of application publication to
    the Play Store. Besides covering all the necessary steps for the successful publication
    of an Android application, we went a step further and published the Messenger
    application to the Google Play Store.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入研究了将应用程序发布到 Play 商店的过程。除了涵盖成功发布 Android 应用程序的所有必要步骤之外，我们还更进一步，将 Messenger
    应用程序发布到了 Google Play 商店。
- en: In the next chapter, we will begin the exploration of Kotlin in the development
    of web applications by developing a place reviewer application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探索 Kotlin 在网络应用程序开发中的应用，通过开发一个地点评论员应用程序来展开这一探索。
