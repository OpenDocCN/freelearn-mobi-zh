- en: Securing and Deploying an Android App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past six chapters, we have explored the application of Kotlin in the
    mobile app domain by focusing on Android development. The last chapter explored
    the various storage mediums provisioned by the Android application framework to
    the application development. We explored internal storage, external storage, network
    storage, and SQLite; we also created programs that utilized them. We went a step
    further by covering the use of Room and content providers to store and retrieve
    data from a SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we willl wrap up our exploration of Android by covering two
    extremely important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Android application security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android application deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will kick off this chapter by discussing Android application security.
  prefs: []
  type: TYPE_NORMAL
- en: Securing an Android application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It should come as no surprise that security is an important consideration when
    building software. Besides the security measures put in place in the Android operating
    system, it is important that developers pay extra attention to ensuring that their
    applications meet the set security standards. In this section, a number of important
    security considerations and best practices will be broken down for your understanding.
    Following these best practices will make your applications less vulnerable to
    malicious programs that may be installed on a client device.
  prefs: []
  type: TYPE_NORMAL
- en: Data storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All things being equal, the privacy of data saved by an application to a device
    is the most common security concern in developing an Android application. Some
    simple rules can be followed to make your application data more secure.
  prefs: []
  type: TYPE_NORMAL
- en: Using internal storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, internal storage is a good way to save private
    data on a device. Every Android application has a corresponding internal storage
    directory in which private files can be created and written to. These files are
    private to the creating application, and as such cannot be accessed by other applications
    on the client device. As a rule of thumb, if data should only be accessible by
    your application and it is reasonably possible to store it in internal storage,
    do so. Feel free to refer to the previous chapter for a refresher on how to use
    internal storage.
  prefs: []
  type: TYPE_NORMAL
- en: Using external storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: External storage files are not private to applications, and, as such, can be
    easily accessed by other applications on the same client device. As a result of
    this, you should consider encrypting application data before storing it in external
    storage. There are a number of libraries and packages that can be used to encrypt
    data prior to its saving to external storage. Facebook's Conceal ([http://facebook.github.io/conceal/](http://facebook.github.io/conceal/))
    library is a good option for external-storage data encryption.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, as another rule of thumb, do not store sensitive data in
    external storage. This is because external storage files can be manipulated freely.
    Validation should also be performed on input retrieved from external storage.
    This validation should be done as a result of the untrustworthy nature of data
    stored in external storage.
  prefs: []
  type: TYPE_NORMAL
- en: Using content providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know from the previous chapter, content providers can either prevent
    or enable external access to your application data. Use the `android:exported`
    attribute when registering your content provider in the manifest file to specify
    whether external access to the content provider should be permitted. Set `android:exported`
    to `true` if you wish the content provider to be exported, otherwise set the attribute
    to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, content provider query methods—for example, `query()`,
    `update()`, and `delete()`—should be used to prevent SQL injection (a code injection
    technique that involves the execution of malicious SQL statements in an entry
    field by an attacker).
  prefs: []
  type: TYPE_NORMAL
- en: Networking security considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of best practices that should be followed when performing
    network transactions via an Android application. These best practices can be split
    into different categories. We shall speak about **Internet Protocol** (**IP**)
    networking and telephony networking best practices in this section.
  prefs: []
  type: TYPE_NORMAL
- en: IP networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When communicating with a remote computer via IP, it is important to ensure
    that your application makes use of HTTPs wherever possible (thus wherever it is
    supported in the server). One major reason for doing this is because devices often
    connect to insecure networks, such as public wireless connections. HTTPs ensure
    encrypted communication between clients and servers, regardless of the network
    they are connected to. In Java, an `HttpsURLConnection` can be used for secure
    data transfer over a network. It is important to note that data received via an
    insecure network connection should not be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: Telephony networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In instances where data needs to be transferred freely across a server and client
    applications, **Firebase Cloud Messaging** (**FCM**)—along with IP networking—should
    be utilized instead of other means, such as the **Short Messaging Service** (**SMS**)
    protocol. FCM is a multi-platform messaging solution that facilitates the seamless
    and reliable transfer of messages between applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'SMS is not a good candidate for transferring data messages, because:'
  prefs: []
  type: TYPE_NORMAL
- en: It is not encrypted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is not strongly authenticated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages sent via SMS are subject to spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMS messages are subject to interception
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The validation of user input is extremely important in order to avoid security
    risks that may arise. One such risk, as explained in the *Using content providers*
    section, is SQL injection. The malicious injection of SQL script can be prevented
    by the use of parameterized queries and the extensive sanitation of inputs used
    in raw SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, inputs retrieved from external storage must be appropriately
    validated because external storage is not a trusted data source.
  prefs: []
  type: TYPE_NORMAL
- en: Working with user credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The risk of phishing can be alleviated by reducing the requirement of user credential
    input in an application. Instead of constantly requesting user credentials, consider
    using an authorization token. Eliminate the need for storing usernames and passwords
    on the device. Instead, make use of a refreshable authorization token.
  prefs: []
  type: TYPE_NORMAL
- en: Code obfuscation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before publishing an Android application, it is imperative to utilize a code
    obfuscation tool, such as **ProGuard**, to prevent individuals from getting unhindered
    access to your source code by utilizing various means, such as decompilation.
    ProGuard is prepackaged included within the Android SDK, and, as such, no dependency
    inclusion is required. It is automatically included in the build process if you
    specify your build type to be a release. You can find out more about ProGuard
    here: [https://www.guardsquare.com/en/proguard](https://www.guardsquare.com/en/proguard)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Securing broadcast receivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, a broadcast receiver component is exported and as a result can be
    invoked by other applications on the same device. You can control access of applications
    to your apps's broadcast receiver by applying security permissions to it. Permissions
    can be set for broadcast receivers in an application's manifest file with the
    `<receiver>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamically loading code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In scenarios in which the dynamic loading of code by your application is necessary,
    you must ensure that the code being loaded comes from a trusted source. In addition
    to this, you must make sure to reduce the risk of tampering code at all costs.
    Loading and executing code that has been tampered with is a huge security threat.
    When code is being loaded from a remote server, ensure it is transferred over
    a secure, encrypted network. Keep in mind that code that is dynamically loaded
    runs with the same security permissions as your application (the permissions you
    defined in your application's manifest file).
  prefs: []
  type: TYPE_NORMAL
- en: Securing services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike broadcast receivers, services are not exported by the Android system
    by default. The default exportation of a service only happens when an intent filter
    is added to the declaration of a service in the manifest file. The `android:exported`
    attribute should be used to ensure services are exported only when you want them
    to be. Set `android:exported` to `true` when you want a service to be exported
    and `false` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Launching and publishing your Android application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have taken an in-depth look at the Android system, application development
    in Android, and some other important topics, such as Android application security.
    It is time for us to cover our final topic for this book pertaining to the Android
    ecosystem—launching and publishing an Android application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be wondering at this juncture what the words launch and publish mean.
    A launch is an activity that involves the introduction of a new product to the
    public (end users). Publishing an Android application is simply the act of making
    an Android application available to users. Various activities and processes must
    be carried out to ensure the successful launch of an Android application. There
    are 15 of these activities in all. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Android developer program policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your Android developer account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localization planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning for simultaneous release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing against the quality guideline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a release-ready APK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning your application's Play Store listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading your application package to the alpha or beta channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device compatibility definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-launch report assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pricing and application distribution setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distribution option selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app products and subscriptions setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining your application's content rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wow! That's a long list. Don't fret if you don't understand everything on the
    list. Let's look at each item in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Android developer program policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a set of developer program policies that were created for the sole
    purpose of making sure that the Play Store remains a trusted source of software
    for its users. Consequences exist for the violation of these defined policies.
    As a result, it is important that you peruse and fully understand these developer
    policies—their purposes and consequences—before continuing with the process of
    launching your application.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your Android developer account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need an Android developer account to launch your application on the
    Play Store. Ensure that you set one up by signing up for a developer account and
    confirming the accuracy of your account details. If you ever need to sell products
    on an Android application of yours, you will need to set up a merchant account.
  prefs: []
  type: TYPE_NORMAL
- en: Localization planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, for the purpose of localization, you may have more than one copy
    of your application, with each localized to a different language. When this is
    the case, you will need to plan for localization early on and follow the recommended
    localization checklist for Android developers. You can view this checklist here:
    [https://developer.android.com/distribute/best-practices/launch/localization-checklist.html](https://developer.android.com/distribute/best-practices/launch/localization-checklist.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Planning for simultaneous release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may want to launch a product on multiple platforms. This has a number of
    advantages, such as increasing the potential market size of your product, reducing
    the barrier of access to your product, and maximizing the number of potential
    installations of your application. Releasing on numerous platforms simultaneously
    is generally a good idea. If you wish to do this with any product of yours, ensure
    you plan for this well in advance. In cases where it is not possible to launch
    an application on multiple platforms at once, ensure you provide a means by which
    interested potential users can submit their contact details so as to ensure that
    you can get in touch with them once your product is available on their platform
    of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Testing against the quality guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Quality guidelines provide testing templates that you can use to confirm that
    your application meets the fundamental functional and non-functional requirements
    that are expected by Android users. Ensure that you run your applications through
    these quality guides before launch. You can access these application quality guides
    here: [https://developer.android.com/develop/quality-guidelines/index.html](https://developer.android.com/develop/quality-guidelines/index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a release-ready application package (APK)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A release-ready APK is an Android application that has been packaged with optimizations
    and then built and signed with a release key. Building a release-ready APK is
    an important step in the launch of an Android application. Pay extra attention
    to this step.
  prefs: []
  type: TYPE_NORMAL
- en: Planning your application's Play Store listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step involves the collation of all resources necessary for your product's
    Play Store listing. These resources include, but are not limited to, your application's
    log, screenshots, descriptions, promotional graphics, and videos, if any. Ensure
    you include a link to your application's privacy policy along with your application's
    Play Store listing. It is also important to localize your application's product
    listing to all languages that your application supports.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your application package to the alpha or beta channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As testing is an efficient and battle-tested way of detecting defects in software
    and improving software quality, it is a good idea to upload your application package
    to alpha and beta channels to facilitate carrying out alpha and beta software
    testing on your product. Alpha testing and beta testing are both types of acceptance
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Device compatibility definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step involves the declaration of Android versions and screen sizes that
    your application was developed to work on. It is important to be as accurate as
    possible in this step as defining inaccurate Android versions and screen sizes
    will invariably lead to users experiencing problems with your application.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-launch report assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pre-launch reports are used to identify issues found after the automatic testing
    of your application on various Android devices. Pre-launch reports will be delivered
    to you, if you opt in to them, when you upload an application package to an alpha
    or beta channel.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing and application distribution setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, determine the means by which you want to monetize you application. After
    determining this, set up your application as either a free install or a paid download.
    After you have set up the desired pricing of your application, select the countries
    you wish to distribute you applications to.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution option selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step involves the selection of devices and platforms—for example, Android
    TV and Android Wear—that you wish to distribute your app on. After doing this,
    the Google Play team will be able to review your application. If your application
    is approved after its review, Google Play will make it more discoverable.
  prefs: []
  type: TYPE_NORMAL
- en: In-app products and subscriptions setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you wish to sell products within your application, you will need to set up
    your in-app products and subscriptions. Here, you will specify the countries that
    you can sell into and take care of various monetary-related issues, such as tax
    considerations. In this step, you will also set up your merchant account.
  prefs: []
  type: TYPE_NORMAL
- en: Determining your application's content rating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is necessary that you provide an accurate rating for the application you
    are publishing to the Play Store. This step is mandated by the Android Developer
    Program Policies for good reason. It aids the appropriate age group you are targeting
    to discover your application.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have catered for the necessary steps prior to this, you are ready to
    publish your application to the production channel of the Play Store. Firstly,
    you will need to roll out a release. A release allows you to upload the APK files
    of your application and roll out your application to a specific track. At the
    end of the release procedure, you can publish your application by clicking Confirm
    rollout.
  prefs: []
  type: TYPE_NORMAL
- en: So, that was all we need to know to publish a new application on the Play Store.
    In most cases, you will not need to follow all these steps in a linear manner,
    you will just need to follow a subset of the steps—more specifically, those pertaining
    to the type of application you wish to publish. As always, the best way to understand
    a set of steps is through an example. Let's go ahead and publish an application
    we developed in a previous chapter. We will publish the Messenger application
    to the Play Store in the following section. You may choose to publish any of the
    applications we previously developed if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will do in order to publish the Messenger app to the Play
    Store is create a Google Play Developer Account. Doing this is simple. We will
    show you how in the following paragraphs. First and foremost, choose your favorite
    web browser and navigate to the following URL: [https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open the web page, you will be asked to sign in with your Google account.
    After signing in with an appropriate Google account, you will be required to accept
    the developer program agreement. This second step is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3d90fe5-bf8f-4718-9ad7-2be24a1282b8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Accept the Google Play Developer agreement by scrolling to the bottom of the
    web page, as shown in the following screenshot, and ticking I agree and I am willing
    to associate my account registration with the Google Play Developer distribution
    agreement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0710f6bb-fcbe-4c00-9e37-405c5af46f4d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After accepting the agreement, click CONTINUE TO PAYMENT to proceed with your
    developer account creation. You are required to pay a one-time Google Play Developer
    Account registration fee of $25\. You will be taken through a hassle-free payment
    process. Once payment has been successfully made, you will be prompted accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58c62158-f3e2-437b-aee7-4587cdeadaf9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking CONTINUE REGISTRATION will take you to the final step of the registration
    process where you will be asked to complete your account details, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6dea7f12-5b63-4abf-8acc-b4db2dea009b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enter the rest of your account details as required and click COMPLETE REGISTRATION
    to finish the account registration process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon completing registration, you will be directed to the Google Play Developer
    Console. From here, you can manage your applications, use Google Play game services,
    manage your orders, download application reports, view alerts, and manage your
    console settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59bb2082-06bb-447d-8d68-d5c28fbfed72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are interested in publishing an Android application. As such, click PUBLISH
    AN ANDROID APP ON GOOGLE PLAY on the console dashboard. Select a default language
    and input `Messenger` as the app''s title when requested to then click CREATE.
    A new draft application will be created for you on the Developer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6fcd623-aea2-4ff8-894a-2f7123fbedde.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before proceeding with our application publication process, we must sign a release
    APK for the Messenger app.
  prefs: []
  type: TYPE_NORMAL
- en: Signing your application for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your Messenger app project in Android Studio. Though not the only method
    of signing apps, Android Studio will be used in this chapter to sign the Messenger
    App. First things first, generate a private key for signing by running the following
    command in your Android Studio terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Running the preceding command prompts you to input a `keystore` password as
    well as to provide additional information for your key. The `keystore` is then
    generated as a file called `my-release-key.jks` and saved in the current directory.
    The key contained in the keystone is valid for 10,000 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have generated a private key, we will configure Gradle to sign
    our APK. Open the module-level `build.gradle` file and add a `signingConfigs {}`
    block—within the `android {}` block—with entries for `storeFile`, `storePassword`,
    `keyAlias`, and `keyPassword`. Once that has been done, pass that object to the
    `signingConfig` property in your app''s release build type. Take the following
    snippet as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After doing the preceding, you are ready to sign your APK; before we do this,
    we must modify our current package name. The `com.example` package name is restricted
    by Google Play, and, as such, we must change our package name before we attempt
    to publish our application to the Play Store. Don''t fret: changing the name of
    our app''s root package is easy with Android Studio. Firstly, ensure you have
    set Android Studio to show the project directory structure. This can be done by
    clicking the dropdown toward the top left of the IDE window and selecting Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5379c8a2-76a5-449a-8518-1799bd05528f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have done the preceding, unhide all empty middle packages in the project
    structure view by deselecting the Hide Empty Middle Packages option in the project
    structure settings menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bf41a17-aced-4367-a8a4-6d9b642d6e06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After deselecting the preceding option, empty middle packages will no longer
    be hidden, and, as such, `com.example.messenger` will be split into three visible
    packages: `com`, `example`, and `messenger`. Let''s rename the `example` package
    to something else. Change `example` to a name obtained from the combination of
    your first and last names. So, if your first name and surname are Kevin Fakande,
    the package name will be renamed from `example` to `kevinfakande`. A package can
    be renamed by right-clicking on it and selecting Refactor | Rename.... After your
    package has been renamed, check your manifest and `build.gradle` files to ensure
    that the modification to your project''s package if reflected. Thus, wherever
    you see the `com.example.messenger` string in your `build.gradle` or manifest
    files, modify it to `com.{full_name}.messenger`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Having made the preceding changes, you are ready to sign your application.
    Type the following command in your Android Studio terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Running the preceding command creates a release APK that has been signed with
    your private key in the `<project_name>/<module_name>/build/outputs/apk/release`
    path. The APK will be named as `<module_name>-release.apk`. As our module in this
    project is named `app`, the APK in this case will be named `app-release.apk`.
    APKs that have been signed with a private key are ready for distribution. Having
    signed our APK, we are ready to finish the publication of the Messenger app.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having signed your Messenger application, you can proceed with completing the
    required application details toward the goal of releasing your app. Firstly, you
    need to create a suitable store listing for the application. Open the Messenger
    app in the Google Play Console and navigate to the store-listing page (this can
    be done by selecting Store Listing on the side navigation bar).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to fill out all the required information in the store listing
    page before we proceed further. This information includes product details, such
    as a title, short description, full description, as well as graphic assets and
    categorization information—including the application type, category and content
    rating, contact details, and privacy policy. The Google Play Console store listing
    page is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4205bafa-ab12-4575-885c-0fa3c4995516.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the store listing information has been filled in, the next thing to fill
    in is the pricing and distribution information. Select Pricing & distribution
    on the left navigation bar to open up its preference selection page. For the sake
    of this demonstration, we set the pricing of this app to FREE. We also selected
    five random countries to distribute this application to. These countries are Nigeria,
    India, the United States of America, the United Kingdom, and Australia:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0da054ff-d685-4f18-b77a-d84ba072a48a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Besides selecting the type of pricing and the available countries for product
    distribution, you will need to provide additional preference information. The
    necessary information to be provided includes device category information, user
    program information, and consent information.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now time to add our signed APK to our Google Play Console app. Navigate
    to App releases | MANAGE BETA | EDIT RELEASE. In the page that is presented to
    you, you may be asked whether you want to opt into Google play app signing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61625732-593e-4602-9efc-00bdcca58777.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the sake of this example, select OPT-OUT. Once OPT-OUT is selected, you
    will be able to choose your APK file for upload from your computer''s file system.
    Select your APK for upload by clicking BROWSE FILES, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/002ad88b-cf74-4b3f-9051-4c5ecee2ae3c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting an appropriate APK, it will be uploaded to the Google Play
    Console. Once the upload is done, the play console will automatically add a suggested
    release name for your beta release. This release name is based on the version
    name of the uploaded APK. Modify the release name if you are not comfortable with
    the suggestion. Next, add a suitable release note in the text field provided.
    Once you are satisfied with the data you have input, save and continue by clicking
    the Review button at the bottom of the web page. After reviewing the beta release,
    you can roll it out if you have added beta testers to your app. Rolling out a
    beta release is not our focus, so let''s divert back to our main goal: publishing
    the Messenger app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Having uploaded an APK for your application, you can now complete the mandatory
    content rating questionnaire. Click the Content rating navigation item on the
    sidebar and follow the instructions to do this. Once the questionnaire is complete,
    appropriate ratings for your application will be generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d57eb45b-4ed4-40bf-9d59-371e513d7c2a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With the completion of the content rating questionnaire, the application is
    ready to be published to production. Applications that are published to production
    are made available to all users on the Google Play Store. On the play console,
    navigate to App releases | Manage Production | Create releases. When prompted
    to upload an APK, click the ADD APK FROM LIBRARY button to the right of the screen
    and select the APK we previously uploaded (the APK with a version name of 1.0) and
    complete the necessary release details similar to how we did when creating a beta
    release. Click the review button at the bottom of the page once you are ready
    to proceed. You will be given a brief release summary in the page that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1400b87f-aa7d-48aa-80b6-ab8b47ca8c46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go through the information presented in the summary carefully. Start the roll
    out to production once you have asserted that you are satisfied with the information
    presented to you in the summary. Once you start the roll out to production, you
    will be prompted to confirm your understanding that your app will become available
    to users of the Play Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e6201d0-eaaf-4429-b4fb-c2ea42e1882e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click Confirm once you are ready for the Messenger app to go live on the Play
    Store. Congratulations! You have now published your first application to the Google
    Play Store!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we concluded our exploration of the Android application framework
    by learning how to secure and publish Android applications to the Google Play
    Store. We identified security threats to Android applications and fully explained
    ways to alleviate them, we also noted best practices to follow when developing
    applications for the Android ecosystem. We learned how to work with storage mediums
    and carry out networking processes securely. In addition to this, we learned how
    to secure Android components, such as services and broadcast receivers.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we took a deep dive into the process of application publication to
    the Play Store. Besides covering all the necessary steps for the successful publication
    of an Android application, we went a step further and published the Messenger
    application to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin the exploration of Kotlin in the development
    of web applications by developing a place reviewer application.
  prefs: []
  type: TYPE_NORMAL
