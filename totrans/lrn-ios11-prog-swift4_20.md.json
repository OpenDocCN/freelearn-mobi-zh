["```\nclass FilterItem: NSObject {\n   let filter:String\n   let name:String\n   init(dict:[String:AnyObject]) {\n       name  = dict[name] as! String\n         filter = dict[filter] as! String\n   }\n}\n```", "```\nclass FilterManager: DataManager {\n    func fetch(completionHandler:(_ items:[FilterItem]) -> Swift.Void) {\n        var items:[FilterItem] = []\n        for data in load(file: \"FilterData\") {\n            items.append(FilterItem(dict: data))\n        }\n        completionHandler(items)\n    }\n}\n```", "```\nimport UIKit\nimport CoreImage\n\nprotocol ImageFiltering {\n    func apply(filter:String, originalImage:UIImage) -> UIImage\n}\n\nprotocol ImageFilteringDelegate:class {\n    func filterSelected(item:FilterItem)\n}\n\nextension ImageFiltering {\n    func apply(filter:String, originalImage:UIImage) -> UIImage {\n        let initialCIImage = CIImage(image: originalImage, options: nil)\n        let originalOrientation = originalImage.imageOrientation\n        guard let ciFilter = CIFilter(name: filter) else {\n            print(\"filter not found\")\n            return UIImage()\n        }\n        ciFilter.setValue(initialCIImage, forKey: kCIInputImageKey)\n        let context = CIContext()\n        let filteredCIImage = (ciFilter.outputImage)!\n        let filteredCGImage = context.createCGImage(filteredCIImage, from: filteredCIImage.extent)\n        return UIImage(cgImage: filteredCGImage!, scale: 1.0, orientation: originalOrientation)\n    }\n}\n```", "```\nimport UIKit\nimport CoreImage\n```", "```\nprotocol ImageFiltering {\n  func apply(filter:String, originalImage:UIImage) -> UIImage\n}\n```", "```\nprotocol ImageFilteringDelegate:class {\n  func filterSelected(item:FilterItem)\n}\n```", "```\nimport UIKit\n\nclass PhotoItem: UIView, ImageFiltering {\n}\n```", "```\nvar imgThumb:UIImageView?\nvar lblTitle:UILabel?\nvar data:FilterItem?\nweak var delegate: ImageFilteringDelegate?\n```", "```\nrequired init?(coder aDecoder: NSCoder) {\n   fatalError(init(coder:) has not been implemented)\n}\n\ninit(frame:CGRect, image:UIImage, item:FilterItem) {\n    super.init(frame: frame)\n    setDefaults(item: item)\n    createThumbnail(image: image, item: item)\n    createLabel(item: item)\n}\n```", "```\nprivate extension PhotoItem {\n  func setDefaults(item:FilterItem) {\n    data = item\n    let tap = UITapGestureRecognizer(target: self, \n    action:#selector(thumbTapped))\n    self.addGestureRecognizer(tap)\n    self.backgroundColor = .clear\n  }\n\n  func createThumbnail(image:UIImage, item:FilterItem) {\n    if item.filter != \"None\" {\n      let filteredImg = apply(filter: item.filter, originalImage: image)\n      imgThumb = UIImageView(image: filteredImg)\n    }\n    else { imgThumb = UIImageView(image: image) }\n\n    guard let thumb = imgThumb else {\n      return\n    }\n\n    thumb.contentMode = .scaleAspectFill\n    thumb.frame = CGRect(x: 0, y: 22, width: 102, height: 102)\n    thumb.clipsToBounds = true\n\n    addSubview(thumb)\n  }\n\n  func createLabel(item:FilterItem) {\n    lblTitle = UILabel(frame: CGRect(x: 0, y: 0, width: 102, height: 22))\n\n    guard let label = lblTitle else {\n      return\n    }\n\n    label.text = item.name\n    label.font = UIFont.systemFont(ofSize: 12.0)\n    label.textAlignment = .center\n    label.backgroundColor = .clear\n\n    addSubview(label)\n  }\n}\n```", "```\n@objc func thumbTapped() {\n  if let data = self.data {\n    filterSelected(item: data)\n  }\n}\n\nfunc filterSelected(item:FilterItem) {\n  delegate?.filterSelected(item: item)\n}\n```", "```\nclass FilterCell: UICollectionViewCell {\n  @IBOutlet var lblName:UILabel!\n  @IBOutlet var imgThumb: UIImageView! \n}\n\nextension FilterCell: ImageFiltering {\n  func set(image:UIImage, item:FilterItem) {\n    if item.filter != \"None\" {\n      let filteredImg = apply(filter: item.filter, originalImage: image)\n      imgThumb.image = filteredImg\n    }\n    else { imgThumb.image = image }\n\n    lblName.text = item.name\n\n    roundedCorners()\n  }\n\n  func roundedCorners() {\n    imgThumb.layer.cornerRadius = 9\n    imgThumb.layer.masksToBounds = true\n  }\n}\n```", "```\nclass PhotoFilterViewController: UIViewController {\n    var image: UIImage?\n    var thumbnail: UIImage?\n    let manager = FilterManager()\n    var selectedRestaurantID:Int?\n    var data:[FilterItem] = []\n    @IBOutlet var collectionView: UICollectionView!\n    @IBOutlet weak var imgExample: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        initialize()\n    }\n}\n```", "```\n// MARK: - Private Extension\nprivate extension PhotoFilterViewController {\n\n  func initialize() {\n    requestAccess()\n    setupCollectionView()\n    checkSource()\n  }\n}\n```", "```\nfunc requestAccess() {\n  AVCaptureDevice.requestAccess(for: AVMediaType.video) { granted in\n    if granted {}\n  }\n}\n\nfunc setupCollectionView() {\n  let layout = UICollectionViewFlowLayout()\n  layout.scrollDirection = .horizontal\n  layout.sectionInset = UIEdgeInsets(top: 7, left: 7, bottom: 7, right: 7)\n  layout.minimumInteritemSpacing = 0\n  layout.minimumLineSpacing = 7\n\n  collectionView?.collectionViewLayout = layout\n  collectionView?.delegate = self\n  collectionView?.dataSource = self\n}\n\nfunc checkSource() {\n  let cameraMediaType = AVMediaType.video\n  let cameraAuthorizationStatus = AVCaptureDevice.authorizationStatus(for: cameraMediaType)\n\n  switch cameraAuthorizationStatus {\n    case .authorized:\n    showCameraUserInterface()\n    case .restricted, .denied:\n    break\n    case .notDetermined:\n    AVCaptureDevice.requestAccess(for: cameraMediaType) { granted in\n      if granted {\n        self.showCameraUserInterface()\n      }\n    }\n  }\n}\n```", "```\nfunc showApplyFilter() {\n    manager.fetch { (items) in\n        if data.count > 0 { data.removeAll() }\n        data = items\n        if let image = self.image {\n            imgExample.image = image\n            collectionView.reloadData()\n        }\n    }\n}\n\nfunc filterItem(at indexPath: IndexPath) -> FilterItem{\n    return data[indexPath.item]\n}\n```", "```\nextension PhotoFilterViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"filterCell\", for: indexPath) as! FilterCell\n        let item = self.data[indexPath.row]\n        if let img = self.thumbnail {\n            cell.set(image: img, item: item)\n        }\n        return cell\n    }\n}\n```", "```\nextension PhotoFilterViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let screenRect = collectionView.frame.size.height\n        let screenHt = screenRect - 14\n        return CGSize(width: 150, height: screenHt)\n    }\n}\n```", "```\nimport AVFoundation\nimport MobileCoreServices\n```", "```\nextension PhotoFilterViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n\n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n\n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {\n        let image = info[UIImagePickerControllerEditedImage] as? UIImage\n        if let img = image {\n            self.thumbnail = generate(image: img, ratio: CGFloat(102))\n            self.image = generate(image: img, ratio: CGFloat(752))\n        }\n        picker.dismiss(animated: true, completion: {\n            self.showApplyFilter()\n        })\n    }\n\n    func showCameraUserInterface() {\n        let imagePicker = UIImagePickerController()\n        imagePicker.delegate = self\n        #if (arch(i386) || arch(x86_64)) && os(iOS)\n            imagePicker.sourceType = UIImagePickerControllerSourceType.photoLibrary\n        #else\n            imagePicker.sourceType = UIImagePickerControllerSourceType.camera\n            imagePicker.showsCameraControls = true\n        #endif\n        imagePicker.mediaTypes = [kUTTypeImage as String]\n        imagePicker.allowsEditing = true\n        self.present(imagePicker, animated: true, completion: nil)\n    }\n\n    func generate(image:UIImage, ratio:CGFloat) -> UIImage {\n        let size = image.size\n        var croppedSize:CGSize?\n        var offsetX:CGFloat = 0.0\n        var offsetY:CGFloat = 0.0\n        if size.width > size.height {\n            offsetX = (size.height - size.width) / 2\n            croppedSize = CGSize(width: size.height, height: size.height)\n        }\n        else {\n            offsetY = (size.width - size.height) / 2\n            croppedSize = CGSize(width: size.width, height: size.width)\n        }\n        guard let cropped = croppedSize, let cgImage = image.cgImage else {\n            return UIImage()\n        }\n        let clippedRect = CGRect(x: offsetX * -1, y: offsetY * -1, width: cropped.width, height: cropped.height)\n        let imgRef = cgImage.cropping(to: clippedRect)\n        let rect = CGRect(x: 0.0, y: 0.0, width: ratio, height: ratio)\n        UIGraphicsBeginImageContext(rect.size)\n        if let ref = imgRef {\n            UIImage(cgImage: ref).draw(in: rect)\n        }\n        let thumbnail = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        guard let thumb = thumbnail else { return UIImage() }\n        return thumb\n    }\n}\n```", "```\nextension PhotoFilterViewController: ImageFiltering, ImageFilteringDelegate {\n    func filterSelected(item: FilterItem) {\n        let filteredImg = image\n        if let img = filteredImg {\n            if item.filter != \"None\" {\n                imgExample.image = self.apply(filter: item.filter, originalImage: img)\n            }\n            else {\n                imgExample.image = img\n            }\n        }\n    }\n}\n```"]