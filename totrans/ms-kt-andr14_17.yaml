- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Publishing Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once our remarkable applications have been developed, the subsequent phase involves
    delivering these apps to our intended audience. This is accomplished by releasing
    our apps on the Google Play Store. This chapter will focus on the process of doing
    so.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn step-by-step how to publish a new app in the
    Google Play Store. We will walk through how to create a signed app bundle and
    things such as answering questions about the content of our app, creating releases,
    setting up how users will access our app – either via controlled testing tracks
    or publicly, and much more. All this is required for us to publish our first app
    to the Play Store. Additionally, we will learn about some of the Google Play Store
    policies and how to always stay compliant to avoid our apps being removed or our
    accounts being banned.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our app for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing our app to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Play Store policies overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the instructions in this chapter, you will need to have Android Studio
    Hedgehog or later ([https://developer.android.com/studio](https://developer.android.com/studio))
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the previous chapter’s code to follow the instructions in this chapter.
    You can find the code for this chapter on GitHub ([https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterthirteen](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterthirteen)).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our app for release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we upload our app to the Google Play Store, we have to do several things
    to prepare it for release. I have a **checklist** that I go through every time
    I release an app. We will be going through the checklist in this section. The
    checklist helps ensure that we do not forget anything as we release our app and
    that the app is functional. We will be tackling some of the checklist items later,
    in [*Chapter 15*](B19779_15.xhtml#_idTextAnchor215) of this book, but they are
    worth mentioning here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the checklist:'
  prefs: []
  type: TYPE_NORMAL
- en: Add analytics to your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add crash reporting to your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off logging and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalize and localize your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test your app on different devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide proper feedback channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the size of your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Android App Bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable minification and obfuscation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let us learn about each of these items in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Add analytics to your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding **analytics** to an app helps in getting metrics on how the app is performing
    once it is released. This helps in making decisions on how to improve the app.
    Platforms such as Firebase Analytics, Google Analytics, Flurry, and Mixpanel offer
    such services. We are going to add Firebase Analytics to our app in [*Chapter
    15*](B19779_15.xhtml#_idTextAnchor215) of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Add crash reporting to your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Crash reporting** libraries help us get crash reports for our apps. This
    helps in fixing the bugs that cause crashes. This is very helpful in catching
    crashes and stack traces when users are using our apps. We are going to add Firebase
    Crashlytics to our app as our crash reporting library in [*Chapter 15*](B19779_15.xhtml#_idTextAnchor215)
    of this book. There are other crash-reporting tools that can be used, such as
    Sentry, Bugsnag, and Raygun. It’s always good to weigh which tool works best you
    our use case.'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off logging and debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To ensure that we do not expose any sensitive information about our app to other
    users, we have to ensure that our release builds do not have **logs** or **debugging**
    enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Internationalize and localize your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an app targets different countries, we have to ensure that we localize and
    internationalize the app. This means that we have to translate the app to the
    languages of the countries that we are targeting. Through internationalization,
    a well-structured code base enables seamless integration of accessibility features
    and supports diverse languages. Unicode support ensures compatibility with characters
    from various languages, enhancing accessibility. Localization adapts content,
    language, and cultural nuances, making our app more accessible to users with language-related
    needs. Adapting date, time, and numerical formats, as well as visual elements,
    contributes to both the accessibility and usability of our app. We have to ensure
    that apps work well in the different countries that we are targeting.
  prefs: []
  type: TYPE_NORMAL
- en: Improve error messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we release our app, we have to ensure that we display **error messages**
    in a way that is easy for our users to understand. We have to avoid displaying
    error messages that are meant for developers. With analytics in place, we can
    always log the technical details of errors and be able to know what is causing
    the errors.
  prefs: []
  type: TYPE_NORMAL
- en: Test your app on different devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very important checklist item. Since end users normally don’t have
    the same devices and operating systems, it is important that we test the app on
    different devices. This helps us ensure that our app works well on different devices,
    including different screen sizes and different operating systems. We can always
    leverage services such as Firebase Test Lab to test apps on different devices.
    Firebase Test Lab ([https://firebase.google.com/docs/test-lab](https://firebase.google.com/docs/test-lab))
    provides a variety of physical and virtual devices that we can use to test apps.
  prefs: []
  type: TYPE_NORMAL
- en: Provide proper feedback channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, even with all these checklist items done, users might run into unexpected
    issues that we might not have anticipated. We have to ensure that we provide proper
    **feedback channels** for our users to reach out to us. This helps in ensuring
    that we get feedback from users and are able to fix any issues that they might
    be facing. This also makes users feel that we care about them and we are ready
    to help them. The feedback channels can be via email, social media, a phone number,
    or any other channel that we can use to respond to users.
  prefs: []
  type: TYPE_NORMAL
- en: Reduce the size of your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to ensure that our app is not too big, reducing the size as much as
    possible. This helps in ensuring that our app is downloaded and installed faster.
    We do this by removing any unused resources from our app. We can also compress
    any audio or images that are bundled with our app. For images, we can strive to
    use vector images as much as possible. These are very small in size and scale
    well on different screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Android App Bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Android App Bundle** (**AAB**) is a publishing format that includes all the
    compiled code and resources of an app but defers **Android Package Kit** (**APK**)
    generation and signing to Google Play. This helps in reducing the size of the
    app. With Android App Bundle, we benefit from a smaller app, are able to deliver
    some features on demand, and can deliver instant app experiences to our users.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Studio** provides a way to create a signed Android App Bundle. Android
    requires all AABs to be signed with a certificate before they can be uploaded
    to the Google Play Store. Signing a bundle allows for size optimization and dynamic
    delivery, and simplifies the app signing process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a signed Android App Bundle, we have to navigate to **Build** | **Generate
    Signed Bundle or APK**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Generate a signed bundle](img/B19779_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Generate a signed bundle
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in the preceding screenshot, AAB offers a variety of benefits as we
    have already discussed. Click **Next** to continue with the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Selecting your keystore certificate](img/B19779_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Selecting your keystore certificate
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, we choose to either create a keystore certificate or use an existing
    one. Click **Create new...** to create a new keystore certificate. Then, you will
    be presented with the following dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Creating a new keystore certificate](img/B19779_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Creating a new keystore certificate
  prefs: []
  type: TYPE_NORMAL
- en: In this dialog box, we fill in the details of the keystore certificate. Ensure
    that you use a password that you can remember and store it in a place where you
    can always access it. This is because subsequent releases will need to be signed
    with the same certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, ensure to save it with the `.jks` extension. Once done filling in the
    form, click **OK** to save the certificate. This brings you back to the dialog
    shown in *Figure 13**.2* but with certificate details filled in now. Click **Next**
    to continue with the process. You will be presented with the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Selecting the build variant](img/B19779_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Selecting the build variant
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are going to select the build variant that we want to sign. We are
    going to select the **release** build variant. Click **Create** to create the
    signed Android App Bundle. Gradle will build the signed Android App Bundle. Once
    the process is done, you will be presented with the following notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Signed bundle generated notification](img/B19779_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Signed bundle generated notification
  prefs: []
  type: TYPE_NORMAL
- en: You can either choose **analyze** to analyze the bundle or **locate** to locate
    the folder the bundle is located in. We are going to use this bundle later on
    when we upload our app to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Enable minification and obfuscation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Minification and obfuscation help in reducing the size of an app. Minification
    removes any unused code in the app. Obfuscation helps in making code unreadable.
    Minification involves reducing the size of the code base by removing unnecessary
    characters and renaming variables, leading to smaller APK sizes and improved app
    performance. Obfuscation, on the other hand, focuses on renaming classes, methods,
    and fields to obscure their original names, enhancing the security of the app
    and protecting against reverse engineering. Together, these techniques contribute
    to smaller, faster, and more secure Android applications by optimizing the code
    size and making it hard for hackers to reverse engineer the app. We do this for
    release builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us head over to our app-level `build.gradle.kts` file and modify the `buildTypes`
    block as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have enabled minification and obfuscation for our release build. We have
    also disabled minification and obfuscation for our debug build. This is because
    we want to be able to debug our app when we are developing it. After doing this,
    it is recommended to run the release build locally before we upload it to the
    Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: This is because some of the code might be removed when we enable minification
    and obfuscation. This might cause our app to crash. We have to check and see if
    we need to add rules on how our code is obfuscated.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by adding rules in the `proguard-rules.pro` file. For example, for
    Retrofit to still do serialization of our JSON responses, we have to ensure that
    our model classes are not obfuscated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us navigate to the `proguard-rules.pro` file and add the following
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With these rules in place, when our code is shrunk, the classes that we have
    specified will not be obfuscated. Since our app is not that big, we do not have
    a lot of rules. For large apps, ensure you test thoroughly and check your dependencies
    documentation for any rules that you need to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Build Variants** tab, select the **release** build variant and run
    a release build as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Release build variant](img/B19779_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Release build variant
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the release build variant, we need to set up the key signing
    certificate that we created earlier on so that our release variant can run. To
    do so, let us add the following in our app-level `build.gradle.kts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have created a new config in our `signingConfigs`
    block called `release`. We have specified `keyAlias`, `keyPassword`, `storeFile`,
    and `storePassword`. The keystore file is in the root directory of this project,
    as seen in the code snippet. If you saved it in a different location, be sure
    to change the path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `signingConfig` to our release build type. To do so, let us add the
    following to our release build type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run the release build locally. However, the release build takes
    longer to build than the debug build. After the app runs, we should be able to
    see our cute cat images in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Viewing cute cat images in the app](img/B19779_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Viewing cute cat images in the app
  prefs: []
  type: TYPE_NORMAL
- en: Our checklist is complete and we already have a signed AAB. In the next section,
    we will upload our app to the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing our app to the Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you can publish apps to the Google Play Store, you need to have a developer
    account. You can get one by signing up on Google Play ([https://play.google.com/console/signup](https://play.google.com/console/signup)).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either create an account for yourself or your organization as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Creating a developer account](img/B19779_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Creating a developer account
  prefs: []
  type: TYPE_NORMAL
- en: 'Choosing the **Yourself** option shows the instructions for creating an account
    for yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – Creating a developer account for yourself](img/B19779_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.9 – Creating a developer account for yourself
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, you need an email address where users
    can reach out to you and another one where Google Play can reach out to you. You
    also need to pay a lifetime registration fee of USD 25 for the Google Play account.
    If you don’t have an account, you can proceed with the purchase as it is a very
    straightforward process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open a Google Play Console account, you will be presented with the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Google Play Console landing page](img/B19779_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.10 – Google Play Console landing page
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows a list of all your apps if you already have some. It shows the developer
    account name and account ID as well. On the left, we have a navigation drawer
    that presents us with several options related to our developer account. At the
    top right, we have a button where we can create an app. Let us click the **Create
    app** button. We will then see a page with some fields to fill in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – Creating your app](img/B19779_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – Creating your app
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are supposed to fill in the app name and set the default language.
    We also select whether our app is an app or a game and specify whether it will
    be a free or paid app.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we accept the declarations shown. Let us finish by clicking **Create
    app** at the bottom. This creates a new app. However, the app cannot be accessed
    by users on the Google Play Store yet. This is because we still have a number
    of pending tasks to complete, as seen on the app dashboard that is shown after
    creating the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.12 – Setting up your app](img/B19779_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.12 – Setting up your app
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 13**.12*, the first section involves setting up app details.
    Alternatively, you can also opt to test the app with a group of internal testers.
    Each step has its own tasks, which are listed, and the Play Console shows us the
    progress for each task. The second section involves creating a release for our
    app. It is in this section that we use the app bundle that we created earlier
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13 – Set up a release](img/B19779_13_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.13 – Set up a release
  prefs: []
  type: TYPE_NORMAL
- en: As seen in *Figure 13**.13*, this section has different subsections that involve
    creating and publishing our release, testing our app with many users, and options
    such as creating a pre-registration step for our app. All steps have a list of
    tasks that guide us on how to approach them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since it is our first app, let us expand the tasks by clicking the **View tasks**
    button in the **Set up your** **app** step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Tasks listed under the Set up your app step](img/B19779_13_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Tasks listed under the Set up your app step
  prefs: []
  type: TYPE_NORMAL
- en: 'This provides us with a list of tasks that we need to complete. All these tasks
    provide more details regarding the content of our app. It is here that we provide
    the privacy policy of our app, specify whether users need special access to use
    features of our app, specify whether we have ads on our app, fill in content rating
    questionnaires and data safety forms, and specify our target audience, alongside
    other tasks. We will go through the tasks one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set** **privacy policy**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we add a privacy policy link to provide information on how
    we use data that we collect from our users. Failure to add a privacy policy to
    your app can lead to the app being removed from the Google Play Store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Privacy policies should be done by legal teams. However, many online tools
    can help generate a privacy policy. One such tool is [https://app-privacy-policy-generator.firebaseapp.com/](https://app-privacy-policy-generator.firebaseapp.com/).
    We will use this tool to generate a privacy policy for our app. Once we have the
    privacy policy, we should have it on a public link and add the link to the privacy
    policy in the **Privacy policy URL** field as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Privacy Policy section](img/B19779_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Privacy Policy section
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save** to add your changes. You can then go back to the main list of
    tasks to proceed with the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**App access**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we specify whether users need special access to use features
    in our app. If they do, we must provide the login credentials or instructions
    on how to be able to access the features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: They are needed since the review process of apps involves testing all the functionality
    of the apps. Failure to provide the instructions may see our app being removed
    from the Google Play Store. Since our app does not need special access, we choose
    **All functionality in my app is available without any access restrictions** and
    save the answer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.16 – App access section](img/B19779_13_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – App access section
  prefs: []
  type: TYPE_NORMAL
- en: '**Ads**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this task, we specify whether our app contains ads. Apps with ads have a
    **Contains ads** label on the Play Store. Since our app does not have ads, we
    choose the **No, my app does not contain ads** option and save the answer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Ads section](img/B19779_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Ads section
  prefs: []
  type: TYPE_NORMAL
- en: '**Content ratings**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this task, we answer several questions that determine our app’s content rating.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.18 – Content ratings section](img/B19779_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.18 – Content ratings section
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Start questionnaire** button to start the questionnaire. You will
    be presented with the questions in three steps. The first step is about the category
    of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Content ratings category](img/B19779_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Content ratings category
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we specify an email address that can be used to reach us about the content
    rating and the category of our app. We have three categories, and each category
    has a description and an example to guide us in choosing the correct category.
    We’ll choose **All Other App Types** and click **Next** at the bottom of the page
    to proceed to the next step, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Content ratings questionnaire](img/B19779_13_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Content ratings questionnaire
  prefs: []
  type: TYPE_NORMAL
- en: 'This section has many questions about the app’s content. We must be careful
    when answering this to ensure we answer them correctly. Once we complete this
    step, we click **Next** to proceed to the next step, which shows a summary of
    our answers and the content rating of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Content ratings summary](img/B19779_13_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Content ratings summary
  prefs: []
  type: TYPE_NORMAL
- en: We can also see the rating of our app in different regions of the world. We
    can save the rating and go back to the main list of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Target audience**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section has several questions about our app’s target audience. If we are
    targeting people under the age of 18, we must ensure that our content is safe
    for people in that age bracket.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Target audience and content section](img/B19779_13_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Target audience and content section
  prefs: []
  type: TYPE_NORMAL
- en: Our app targets people above the age of 18 years. The next question is whether
    the app would unintentionally appeal to children.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Appeal to children](img/B19779_13_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Appeal to children
  prefs: []
  type: TYPE_NORMAL
- en: We chose the **No** option. This will skip the ads section in this section since
    we said our app does not have ads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us click **Next** to proceed to the next step, which shows a summary of
    our answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Target audience summary](img/B19779_13_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Target audience summary
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in *Figure 13**.24*, in case the review team does not agree with
    our answers in this section, we won’t be able to update our app. So, we must be
    careful when answering the questions. We can save the answers and go back to the
    main list of tasks. After going back, we can see the progress in the various tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Setup tasks progress](img/B19779_13_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – Setup tasks progress
  prefs: []
  type: TYPE_NORMAL
- en: '**News apps**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we specify whether our app is a news app. Note that we must
    comply with Google Play Store guidelines on news policy, which we can read more
    about when publishing a news app. Here, we choose the **No** option and save the
    answer. We can go back to the main list of tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.26 – News apps section](img/B19779_13_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – News apps section
  prefs: []
  type: TYPE_NORMAL
- en: '**COVID-19 contact tracing and** **status apps**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section is for apps that are related to COVID-19.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.27 – COVID-19 apps section](img/B19779_13_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – COVID-19 apps section
  prefs: []
  type: TYPE_NORMAL
- en: We’ll choose the **My app is not a publicly available COVID-19 contact tracing
    or status app** option and save the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data safety**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we disclose the kind of data our app collects and how we are
    using the data. There are several questions about the collection, security, data
    types, and usage of this data. If our app collects personal or sensitive data,
    we must provide a privacy policy and answer questions in this section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.28 – Data safety section](img/B19779_13_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – Data safety section
  prefs: []
  type: TYPE_NORMAL
- en: 'We choose the **No** option since we are not collecting any data in our app,
    and save the answer. After filling in the form, we can proceed to preview the
    answers that we provided and cross-check that everything is in order, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Data safety summary](img/B19779_13_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Data safety summary
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 13**.29*, we can see a summary of our answers and the privacy
    policy link. You must ensure we answer this section properly, especially if you
    are publishing an app that collects personal or sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Government apps**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section is for apps that are related to the government.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.30 – Government apps section](img/B19779_13_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – Government apps section
  prefs: []
  type: TYPE_NORMAL
- en: We choose the **No** option since our app is not a government app, and save
    the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Financial features**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This section is for apps that have financial features. If our app provides personal
    loans, banking services, or other financial services, we must answer the questions
    in this section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.31 – Financial features section](img/B19779_13_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31 – Financial features section
  prefs: []
  type: TYPE_NORMAL
- en: We choose the **My app doesn’t provide any financial features** option since
    our app does not provide any of the services, and save the answer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Store settings**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we provide contact details such as **Email address**, **Phone
    number**, and **Website**. The **Email address** field is the only mandatory field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.32 – Store listing contact details](img/B19779_13_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.32 – Store listing contact details
  prefs: []
  type: TYPE_NORMAL
- en: After filling in the contact details, we also need to specify the category.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.33 – App category](img/B19779_13_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.33 – App category
  prefs: []
  type: TYPE_NORMAL
- en: Choose the category that best describes what your app does.
  prefs: []
  type: TYPE_NORMAL
- en: '**Store listing**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we complete the details of our app. We provide a short and
    full description of what our app does. We also provide different graphics for
    our app. We must add an app icon, phone and tablet screenshots, and a feature
    graphic. This information is displayed on the Google Play page of our app. For
    all graphics, we have the required dimensions provided for us.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.34 – Store listing section](img/B19779_13_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.34 – Store listing section
  prefs: []
  type: TYPE_NORMAL
- en: After filling out all these sections, we are now ready to push our first release
    to the Google Play Store. If we need to edit any of the preceding sections, we
    can always head over to the **App content** section and the **Store settings**
    sections and edit the section that we want to edit. Also, note that several sections
    may have been added since this chapter’s writing. The Google Play Store team always
    sends updates to developers on any changes that they make.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us create our first release in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Play Store offers the following types of releases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal app sharing**: This allows us to quickly share our app with internal
    team members for testing. They access the app via a link that we share with them.
    This is extremely useful when we want to test our app with a small group of people
    before we release it to the public.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal app testing**: This allows us to add a group of testers – a maximum
    of 100 people who are able to opt in to test our app. The testers can be a group
    of people from our organization or external testers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed testing**: This allows us to create one or more testing tracks to
    test pre-releases of our app with a larger group of testers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open testing**: This allows anyone to opt in to test the app. There is no
    limit on the number of testers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production release**: This is the final release of our app. This is the release
    that is available to all users on the Google Play Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For all these releases, we must upload an Android App Bundle. We already have
    an Android App Bundle that we created earlier on. Let us head over to the **Testing**
    section and select the **Internal testing** option to create our first release.
    We are going to create an *internal* *testing release*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Adding testers*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create a new email list with the emails of our testers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.35 – Create email list](img/B19779_13_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.35 – Create email list
  prefs: []
  type: TYPE_NORMAL
- en: 'Only people in this email list can access the app with a special opt-in link
    provided by Google Play. You can always access the link after you save the email
    list, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.36 – Testing the opt-in link](img/B19779_13_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.36 – Testing the opt-in link
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating* *a release*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this section, we upload the AAB that we created earlier on. Before the upload,
    we can see we have a warning to choose the signing key, as shown in *Figure 13**.37*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.37 – Signing key warning](img/B19779_13_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.37 – Signing key warning
  prefs: []
  type: TYPE_NORMAL
- en: We must choose the Play signing one in addition to our own. This ensures we
    can recover our signing key if it is lost. Once we choose, we are able to upload
    our AAB. After we choose our signing key, we can proceed to create our release.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.38 – Set up release track](img/B19779_13_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.38 – Set up release track
  prefs: []
  type: TYPE_NORMAL
- en: 'For first-time releases, ensure that the **app id** is correct since you cannot
    change that once you upload the AAB. Once our bundle is uploaded successfully,
    we can see the release details being populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.39 – Bundle details](img/B19779_13_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.39 – Bundle details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Next** to continue with the process. You will be presented with the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.40 – Release summary](img/B19779_13_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.40 – Release summary
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows a summary of our release and all the details that we have provided.
    Clicking **Save** creates the release as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.41 – Internal testing track summary](img/B19779_13_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.41 – Internal testing track summary
  prefs: []
  type: TYPE_NORMAL
- en: We can click the **Testers** tab where we can see the testers we added and an
    opt-in link that we can share with our testers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.42 – Viewing the testers](img/B19779_13_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.42 – Viewing the testers
  prefs: []
  type: TYPE_NORMAL
- en: We can always add more testers and create more releases in the same way as described
    in this section. All the other tracks have the same process, but the audience
    is different.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on your first release! You have been able to release your first
    app to the Google Play Store. You can always go back and edit the details of your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can promote this release to production so that your app will be live
    on the Google Play Store as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.43 – Promote release](img/B19779_13_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.43 – Promote release
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let us look at some of the policies to be kept in mind
    as you are developing your app.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Google Play Store policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Play policies are part of our releases. As such, we developers must be
    aware of most of them, if not all. This is because if we violate any of the policies,
    our app could be removed from the Google Play Store. We also need to be aware
    of them since some of them influence how we develop our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at some of the policies we need to be aware of
    as we develop our apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Background location access**: Apps are restricted from accessing the user’s
    location in the background unless they are delivering a high-quality, beneficial
    user experience. This is to ensure that apps do not drain the battery of the user’s
    device. If your app needs to access location in the background, you must provide
    a compelling reason why it needs to access location in the background. You also
    must provide a privacy policy that explains how you are using the location data
    that you are collecting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data safety**: With newer Android versions, there has been an emphasis on
    data safety. As mentioned, when filling out the **Data safety** section, we must
    ensure our app complies with the policies. We must provide privacy policies, terms,
    and conditions and share with our users how we use their data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial apps**: Different countries have different rules for financial
    apps. We must ensure we are aware of the rules of the country we are targeting.
    Some countries provide licenses and Google Play requires us to upload these licenses
    as proof of compliance. If we are developing a financial app, we must ensure we
    are compliant and have the necessary licenses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restricted content**: Google Play has several types of restricted content.
    We must check that our app does not have any restricted content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intellectual property**: We must ensure our app does not infringe on any
    intellectual property. We must ensure we have the necessary rights to use any
    content in our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use of SMS or call log permission groups**: Apps that use SMS or call log
    permission groups are required to be approved by Google Play. This is to ensure
    that apps do not misuse the permissions. If our app uses any of these permissions,
    we must submit a permission declaration form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Health content and services**: Google Play does now allow apps that expose
    users to harmful health-related content. We must ensure our app does not expose
    users to such content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about these policies, you can read more on the Google Play Console
    help page ([https://support.google.com/googleplay/android-developer/answer/13837496?hl=en](https://support.google.com/googleplay/android-developer/answer/13837496?hl=en)).
    This page provides an extensive overview of the policies with in-depth examples
    of violations. You can also check Google Play Academy ([https://playacademy.withgoogle.com/](https://playacademy.withgoogle.com/))
    to learn more about Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned step-by-step how to publish a new app in the
    Google Play Store. We walked through how to create a signed app bundle and the
    things required for us to publish our first app to the Google Play Store. Additionally,
    we learned about some of the Google Play Store policies and how to always stay
    compliant to avoid our apps being removed or accounts being banned.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use GitHub Actions to automate some
    manual tasks such as deploying new builds to the Play Store. We will learn how
    to run tests on **Continous Integration and Continous Delivery** (**CI/CD**) pipelines
    and push builds to the Google Play Store using GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
