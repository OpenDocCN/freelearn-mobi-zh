["```swift\n@interface GSwLDB06osxAppDelegate: NSObject\n<NSApplicationDelegate, NSTableViewDataSource,\nNSTableViewDelegate>\n- (IBAction)viewMatches:(id)sender;\n- (IBAction)newRecord:(id)sender;\n- (IBAction)saveRecord:(id)sender;\n@property (weak) IBOutletNSTextField *FirstNameEntry;\n...\n@property (weak) IBOutletNSTextField *EmailEntry;\n@property (assign) IBOutletNSWindow *window;\n@property (retain) IBOutletNSTableView *tableView;\n@end\n```", "```swift\n- (IBAction)viewMatches:(id)sender {\n  [self.modelloadStartingWith:[sender stringValue]];\n  [self.tableViewreloadData];\n  [selfloadFieldsForCurrentSelectedRow];  // explicitly reload\n}\n\n- (NSInteger) numberOfRowsInTableView:(NSTableView *)table {\n  return [self.modelcountRows];\n}\n\n- (id)tableView:(NSTableView *)table\n    objectValueForTableColumn:(NSTableColumn *)column\n    row:(NSInteger)rowIndex\n{ // cheat by using combined Last/First Name rather than two cols\n  return [self.modelkeyForRow:rowIndex];\n}\n```", "```swift\n@interface Sample06_Model :NSObject\n+ (Sample06_Model*)modelWithSampleDatabasePath:\n(NSError**)errorOut;\n- (void)loadSampleDatafile:(NSString*)filename;\n- (NSString*)keyForRow:(NSInteger)row;\n- (int)countRows;\n- (void)loadStartingWith:(NSString*)partialKey;\n- (NSArray*)fieldsForRow:(NSInteger)index;\n- (BOOL)saveRecord:(NSArray*)fields;\n@end\nenumfieldOffsets {eFirstName=0, eLastName=1, eCompany=2,\neState=3, eZip=4, ePhone=5, eEmail=6};\n```", "```swift\n@interface Sample06_Model(){}\t\n- (Sample06_Model*) initWithSampleDatabasePath:\n(NSError**)errorOut;\n- (void)loadListForUI;\n- (NSString*)mainKeyFrom:(NSString*)key;\n- (void)addRecord:(NSArray*)fields\nusing:(id<APLevelDBWriteBatch>)batch;\n@property (retain) APLevelDB* db;\n@property (retain) NSArray* rowsForUI;\n@end\n\n- (void)loadStartingWith:(NSString*)partialKey {\n  self.rowsForUI = [self.dbkeysWithPrefix:partialKey];\n}\n\n- (int)countRows{\n  if (self.rowsForUI == nil)\n    [selfloadListForUI];\n  return [self.rowsForUI count];\n}\n\n- (NSString*) keyForRow:(NSInteger)row{\n  if (self.rowsForUI == nil)\n    [selfloadListForUI];\n  return (NSString*)(self.rowsForUI[row]);\n}\n\n- (void)loadListForUI {\n  self.rowsForUI = [self.dballKeys];\n}\n```", "```swift\n- (void)tableViewSelectionDidChange:(NSNotification*)notification\n{\n  [selfloadFieldsForCurrentSelectedRow];\n}\n\n- (BOOL)selectionShouldChangeInTableView:(NSTableView*)tableView {\n  return YES; // assumes we always leave, abandoning changes\n}\n\n- (void)loadFieldsForCurrentSelectedRow {  // mirrors saveRecord\nif ([self.tableViewnumberOfSelectedRows] == 0) {\n    [selfclearEntryFields];\n    return;\n  }\n  NSArray* fields = [self.modelfieldsForRow:row];\n  [self.FirstNameEntrysetStringValue:fields[eFirstName] ];\n...\n  [self.EmailEntrysetStringValue:fields[eEmail] ];\n}\n\n- (IBAction)saveRecord:(id)sender {\n  NSArray* fields = [NSArrayarrayWithObjects:\n    [self.FirstNameEntrystringValue],\n...\n    [self.EmailEntrystringValue],\n  nil ]; // built an array of all field entries\n  [self.modelsaveRecord:fields]; // save array to record\n}\n\n- (IBAction)newRecord:(id)sender {\n  if ([self.tableViewnumberOfSelectedRows] == 0)\n    [selfclearEntryFields];\n  else  // selecting none will trigger clearEntryFields\n    [self.tableViewdeselectAll:sender];\n}\n```", "```swift\n- (NSArray*)fieldsForRow:(NSInteger)index\n{\n  NSString* key = [self keyForRow:index];\n  NSData* mainRec = [self.dbdataForKey:key];\n  NSError* decodeErr;\n  NSArray* fields = [NSJSONSerialization\n  JSONObjectWithData:mainRec options:0 error:&decodeErr];\n  return fields;\n}\n```", "```swift\n- (IBAction)saveRecord:(id)sender {\n  NSArray* fields  = [NSArrayarrayWithObjects:\n    [self.FirstNameEntrystringValue],\n...\n    [self.EmailEntrystringValue],\n  nil ];\n  [self.modelsaveRecord:fields];\n  self.isNewRecord = NO;\n  [self.tableViewreloadData];\n}\n\n- (void)saveRecord:(NSArray*)fields {\n  id<APLevelDBWriteBatch>wb = [self.dbbeginWriteBatch];  \n  [selfaddRecord:fieldsusing:wb];\n  [self.dbcommitWriteBatch:wb];  \n  self.rowsForUI = nil; // force reload when UI refreshes\n  return YES;\n}\n\n- (void)addRecord:(NSArray*)fields \n  using:(id<APLevelDBWriteBatch>)batch{\n  NSString* nameKey = nameKeyFromFields(fields); \n  NSError* encErr;\n  NSData* enc = [NSJSONSerializationdataWithJSONObject:fields\n    options:0 error:&encErr];\n    [batchsetData:encforKey:nameKey];\n}\n```"]