["```swift\n// CREATING THE EMITTER NODE\nvar emitter:SKEmitterNode = (fileNamed: \"PlayerCollide.sks\")\n// SETTING THE EMITTER POSITION AND NAME\nemitter.position = CGPointMake(0,-40)\nemitter.name = \"playerCollide\"\n// SEND THE PARTICLES TO THE SCENE\nemitter.targetNode = self.scene\n// ADDING EMITTER NODE\nself.addChild(emitter)\n```", "```swift\nvar particlePlayerNode = SKEmitterNode(fileNamed: \"ParticleEffectPlayerCollide.sks\")\n```", "```swift\noverride func didMoveToView(view: SKView)\n    {\n        self.physicsWorld.contactDelegate = self\n         // JUMP BUTTON POSITION SETTING AND ADDING ONTO THE SCREEN\n        self.btnJump.position = CGPointMake\n(-(self.size.width/2.2), -(self.size.height/4))\n        self.addChild(btnJump)\n\n  //PROPERTIES FOR PARTICLE NODE      CHAPTER 7\n        self.particlePlayerNode.zPosition = 1\n        self.particlePlayerNode.hidden = true\n\n        addBackGround()\n        addRunningBar()\n        addPlayer()\n\n        //ADDING PARTICLE NODE ON SCREEN (AS CHILD TO PLAYER)\n        self.player.addChild(self.particlePlayerNode)\n\n        addBlocks()\n        //addSpriteWithoutTexture()\n    }\n```", "```swift\n    func didBeginContact(contact: SKPhysicsContact)\n    {\n        // SHOWING PARTICLE EFFECT WHEN COLLISION HAPPENS\n        self.particlePlayerNode.hidden = false\n\n        var inOutActionWhenPlayerDied = SKAction.scaleBy(0.5, duration: 0.5)\n        var upActionWhenPlayerDied = SKAction.moveToY(self.player.size.height * 4, duration: 2)\n        var removeFromParent = SKAction.self.removeFromParent()\n\nself.player.runAction(SKAction.sequence\n([inOutActionWhenPlayerDied,\ninOutActionWhenPlayerDied.reversedAction(),\nupActionWhenPlayerDied,removeFromParent]),\ngotoMenuScreen)\n\n    }\n```", "```swift\n    let box = SKSpriteNode(imageNamed: \"box\")\n     let location = CGPoint(x: CGRectGetMidX(self.frame), y: CGRectGetMidY(self.frame))\n      box.position = location\n       self.addChild(box)\n    ```", "```swift\n    void main() {\n    #define iterations 256\n\n        vec2 position = v_tex_coord; // gets the location of the current pixel in the intervals [0..1] [0..1]\n        vec3 color = vec3(0.0,0.0,0.0); // initialize color to black\n\n        vec2 z = position; // z.x is the real component z.y is the imaginary component\n\n        // Rescale the position to the intervals [-2,1] [-1,1]\n        z *= vec2(3.0,2.0);\n        z -= vec2(2.0,1.0);\n\n        //vec2 c = z;\n        vec2 c = vec2(-0.7 + cos(u_time) / 3.0,0.4 + sin(u_time) / 3.0);\n\n        float it = 0.0; // Keep track of what iteration we reached\n        for (int i = 0;i < iterations; ++i) {\n\n            z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y);\n            z += c;\n\n            if (dot(z,z) > 4.0) { // dot(z,z) == length(z) ^ 2 only faster to compute\n                break;\n            }\n\n            it += 1.0;\n        }\n        if (it < float(iterations)) {\n            color.x = sin(it / 3.0);\n            color.y = cos(it / 6.0);\n            color.z = cos(it / 12.0 + 3.14 / 4.0);\n        }\n\n        gl_FragColor = vec4(color,1.0);\n    }\n    ```", "```swift\n    let pattern = SKShader(fileNamed: \"blurShade.fsh\")\n    box.shader = pattern\n    ```", "```swift\n    class ShaderDemo : SKScene\n    {\n        var menuSceneInstance : MenuScene?\n        override func didMoveToView(view: SKView)\n        {\n            let box = SKSpriteNode(imageNamed: \"box\")\n            let pattern = SKShader(fileNamed: \"blurShade.fsh\")\n            let location = CGPoint(x: CGRectGetMidX(self.frame), y: CGRectGetMidY(self.frame))\n            box.position = location\n            box.shader = pattern\n            self.addChild(box)\n            addBackLabel()\n        }\n        override func touchesBegan(touches: NSSet, withEvent event: UIEvent)\n        {\n            for touch: AnyObject in touches {\n                let location = touch.locationInNode(self)\n                let node = self.nodeAtPoint(location)\n                gotoMenuScreen()\n            }\n        }\n        func gotoMenuScreen()\n        {\n            let transitionEffect = SKTransition.flipVerticalWithDuration(2)\n            menuSceneInstance = MenuScene(size: self.size , playbutton: \"Play\", background: \"BG\")\n            menuSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n            self.view?.presentScene(menuSceneInstance , transition:transitionEffect)\n        }\n        func addBackLabel()\n        {\n            var backbutton = SKLabelNode(fontNamed: FontFile)\n            backbutton.fontColor = UIColor.blueColor()\n            backbutton.name = \"BACK\"\n            backbutton.text = \"BACK\"\n            backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n            backbutton.zPosition = 3\n            self.addChild(backbutton)\n        }\n        }\n    ```", "```swift\n    var shaderSceneInstance : ShaderDemo?\n    func addShaderSceneBtn()\n        {\n            var backbutton = SKLabelNode(fontNamed: FontFile)\n            backbutton.fontColor = UIColor.blueColor()\n            backbutton.name = \"SHADOWS\"\n            backbutton.text = \"SHADOW EFFECT\"\n            backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n            backbutton.zPosition = 3\n            self.addChild(backbutton)\n        }\n    ```", "```swift\nfunc goToShaderScene(){\n        let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n        shaderSceneInstance = ShaderDemo(size: self.size)\n        shaderSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n        self.view?.presentScene(shaderSceneInstance , transition:transitionEffect)\n\n    }\n```", "```swift\noverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == PlayButton.name {\n                goToGameScene()\n                //goToShaderScene()\n\n            }\n            else if node.name == \"SHADOWS\"\n            {\n              goToShaderScene()\n            }\n        }\n    }\n    func goToShaderScene(){\n        let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n        shaderSceneInstance = ShaderDemo(size: self.size)\n        shaderSceneInstance!.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n        self.view?.presentScene(shaderSceneInstance , transition:transitionEffect)\n\n    }\n```"]