["```swift\n@import GameKit;\n\n@interface MultiplayerHelper : NSObject\n\n@property (nonatomic, readonly) UIViewController *authenticationViewController;\n@property (nonatomic, readonly) NSError *lastError;\n\n+ (instancetype)sharedGameKitHelper;\n\n@end\n```", "```swift\n#import \"MultiplayerHelper.h\"\n\n@import GameKit;\n\n@implementation MultiplayerHelper {\n    BOOL _enableGameCenter;\n}\n\n+ (instancetype)sharedMultiplayerHelper\n{\n    static MultiplayerHelper *sharedMultiplayerHelper;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedMultiplayerHelper = [[MultiplayerHelper alloc] init];\n    });\n    return sharedMultiplayerHelper;\n}\n\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        _enableGameCenter = YES;\n    }\n    return self;\n}\n\n- (void)authenticateLocalPlayer\n{\n\n    GKLocalPlayer *localPlayer = [GKLocalPlayer localPlayer];\n\n    localPlayer.authenticateHandler  =\n    ^(UIViewController *viewController, NSError *error) {\n\n        [self setLastError:error];\n\n        if(viewController != nil) {\n\n            [self setAuthenticationViewController:viewController];\n        } else if([GKLocalPlayer localPlayer].isAuthenticated) {\n\n            _enableGameCenter = YES;\n        } else {\n\n            _enableGameCenter = NO;\n        }\n    };\n}\n\n- (void)setAuthenticationViewController:(UIViewController *)authenticationViewController\n{\n}\n\n- (void)setLastError:(NSError *)error\n{\n}\n\n@end\n```", "```swift\nNSString *const PresentAuthenticationViewController = @\"present_authentication_view_controller\";\n```", "```swift\n if (authenticationViewController != nil) {\n        _authenticationViewController = authenticationViewController;\n        [[NSNotificationCenter defaultCenter]\n         postNotificationName:PresentAuthenticationViewController\n         object:self];\n    }\n```", "```swift\n_lastError = [error copy];\n  if (_lastError) {\n    NSLog(@\"MultiplayerHelper ERROR: %@\",\n          [[_lastError userInfo] description]);\n  }\n```", "```swift\nextern NSString *const PresentAuthenticationViewController;\n```", "```swift\n(void)authenticateLocalPlayer;\n```", "```swift\n@import GameKit;\nextern NSString *const PresentAuthenticationViewController;\n@interface MultiplayerHelper : NSObject\n\n@property (nonatomic, readonly) UIViewController *authenticationViewController;\n@property (nonatomic, readonly) NSError *lastError;\n\n- (void)authenticateLocalPlayer;\n+ (instancetype)sharedMultiplayerHelper;\n\n@end\n```", "```swift\n#import \"MultiplayerHelper.h\"\n\n@import GameKit;\n\nNSString *const PresentAuthenticationViewController = @\"present_authentication_view_controller\";\n\n@implementation MultiplayerHelper {\n    BOOL _enableGameCenter;\n}\n\n+ (instancetype)sharedMultiplayerHelper\n{\n    static MultiplayerHelper *sharedMultiplayerHelper;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        sharedMultiplayerHelper = [[MultiplayerHelper alloc] init];\n    });\n    return sharedMultiplayerHelper;\n}\n\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        _enableGameCenter = YES;\n    }\n    return self;\n}\n\n- (void)authenticateLocalPlayer\n{\n\n    GKLocalPlayer *localPlayer = [GKLocalPlayer localPlayer];\n\n    localPlayer.authenticateHandler  =\n    ^(UIViewController *viewController, NSError *error) {\n\n        [self setLastError:error];\n\n        if(viewController != nil) {\n\n            [self setAuthenticationViewController:viewController];\n        } else if([GKLocalPlayer localPlayer].isAuthenticated) {\n\n            _enableGameCenter = YES;\n        } else {\n\n            _enableGameCenter = NO;\n        }\n    };\n}\n\n- (void)setAuthenticationViewController:(UIViewController *)authenticationViewController\n{\n    if (authenticationViewController != nil) {\n        _authenticationViewController = authenticationViewController;\n        [[NSNotificationCenter defaultCenter]\n         postNotificationName:PresentAuthenticationViewController\n         object:self];\n    }\n}\n\n- (void)setLastError:(NSError *)error\n{\n    _lastError = [error copy];\n    if (_lastError) {\n        NSLog(@\"MultiplayerHelper ERROR: %@\",\n              [[_lastError userInfo] description]);\n    }\n}\n\n@end\n```", "```swift\n  [[NSNotificationCenter defaultCenter]\n     addObserver:self\n     selector:@selector(showAuthenticationViewController)\n     name:PresentAuthenticationViewController\n     object:nil];\n\n    [[MultiplayerHelper sharedMultiplayerHelper]\n     authenticateLocalPlayer];\n```", "```swift\n- (void)showAuthenticationViewController\n{\n    MultiplayerHelper *multiplayerHelper =\n    [MultiplayerHelper sharedMultiplayerHelper];\n\n    [self presentViewController:\n     multiplayerHelper.authenticationViewController\n                                         animated:YES\n                                       completion:nil];\n}\n- (void)dealloc\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n```", "```swift\n@protocol MultiPlayerHelperDelegate\n-(void)matchStarted;\n-(void)matchEnded;\n-(void)match:(GKMatch *)match didReceiveData:(NSData *)data fromPlayer:(NSString *)playerID;\n@end\n```", "```swift\n@interface MultiplayerHelper : NSObject<GKMatchmakerViewControllerDelegate, GKMatchDelegate>\n```", "```swift\n@property (nonatomic, strong) GKMatch *match;\n@property (nonatomic, assign) id <MultiPlayerHelperDelegate> delegate;\n\n- (void)findMatchWithMinPlayers:(int)minPlayers maxPlayers:(int)maxPlayers\n                 viewController:(UIViewController *)viewController\n                 delegate:(id<MultiPlayerHelperDelegate>)delegate;\n```", "```swift\nBOOL _matchStarted;\n```", "```swift\n- (void)findMatchWithMinPlayers:(int)minPlayers maxPlayers:(int)maxPlayers\n                 viewController:(UIViewController *)viewController\n                       delegate:(id<MultiPlayerHelperDelegate>)delegate {\n\n    if (!_enableGameCenter) return;\n\n    _matchStarted = NO;\n    self.match = nil;\n    _delegate = delegate;\n    [viewController dismissViewControllerAnimated:NO completion:nil];\n\n    GKMatchRequest *request = [[GKMatchRequest alloc] init];\n    request.minPlayers = minPlayers;\n    request.maxPlayers = maxPlayers;\n\n    GKMatchmakerViewController *mmvc =\n    [[GKMatchmakerViewController alloc] initWithMatchRequest:request];\n    mmvc.matchmakerDelegate = self;\n\n    [viewController presentViewController:mmvc animated:YES completion:nil];\n}\n```", "```swift\n- (void)matchmakerViewControllerWasCancelled:(GKMatchmakerViewController *)viewController {\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n}\n```", "```swift\n- (void)matchmakerViewController:(GKMatchmakerViewController *)viewController didFailWithError:(NSError *)error {\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n    NSLog(@\"Well that didn't work. Here's why: %@\", error.localizedDescription);\n}\n```", "```swift\n- (void)matchmakerViewController:(GKMatchmakerViewController *)viewController didFindMatch:(GKMatch *)match {\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n    self.match = match;\n    match.delegate = self;\n    if (!_matchStarted && match.expectedPlayerCount == 0) {\n        NSLog(@\"Ready to start playing!\");\n    }\n}\n\n#pragma mark GKMatchDelegate\n```", "```swift\n- (void)match:(GKMatch *)match didReceiveData:(NSData *)data fromPlayer:(NSString *)playerID {\n    if (_match != match) return;\n\n    [_delegate match:match didReceiveData:data fromPlayer:playerID];\n}\n```", "```swift\n- (void)match:(GKMatch *)match player:(NSString *)playerID didChangeState:(GKPlayerConnectionState)state {\n    if (_match != match) return;\n\n    switch (state) {\n        case GKPlayerStateConnected:\n\n            NSLog(@\"Player connected!\");\n\n            if (!_matchStarted && match.expectedPlayerCount == 0) {\n                NSLog(@\"Ready to start match!\");\n            }\n\n            break;\n        case GKPlayerStateDisconnected:\n\n            NSLog(@\"Player disconnected!\");\n            _matchStarted = NO;\n            [_delegate matchEnded];\n            break;\n    }\n}\n```", "```swift\n- (void)match:(GKMatch *)match connectionWithPlayerFailed:(NSString *)playerID withError:(NSError *)error {\n\n    if (_match != match) return;\n\n    NSLog(@\"Failed to connect to player with error: %@\", error.localizedDescription);\n    _matchStarted = NO;\n    [_delegate matchEnded];\n}\n```", "```swift\n- (void)match:(GKMatch *)match didFailWithError:(NSError *)error {\n\n    if (_match != match) return;\n\n    NSLog(@\"Match failed with error: %@\", error.localizedDescription);\n    _matchStarted = NO;\n    [_delegate matchEnded];\n}\n```", "```swift\nNSString *const LocalPlayerIsAuthenticated = @\"local_player_authenticated\";\n```", "```swift\n- (void)authenticateLocalPlayer\n{\n\n    GKLocalPlayer *localPlayer = [GKLocalPlayer localPlayer];\n\n    if (localPlayer.isAuthenticated) {\n        [[NSNotificationCenter defaultCenter] postNotificationName:LocalPlayerIsAuthenticated object:nil];\n        return;\n    }\n\n    localPlayer.authenticateHandler  =\n    ^(UIViewController *viewController, NSError *error) {\n\n        [self setLastError:error];\n\n        if(viewController != nil) {\n\n            [self setAuthenticationViewController:viewController];\n        } else if([GKLocalPlayer localPlayer].isAuthenticated) {\n\n            _enableGameCenter = YES;\n            [[NSNotificationCenter defaultCenter] postNotificationName:LocalPlayerIsAuthenticated object:nil];\n        } else {\n\n            _enableGameCenter = NO;\n        }\n    };\n}\n```", "```swift\nextern NSString *const LocalPlayerIsAuthenticated;\n```", "```swift\n#import <UIKit/UIKit.h>\n#import <SpriteKit/SpriteKit.h>\n#import <iAd/iAd.h>\n#import \"MultiplayerHelper.h\"\n\n@interface ViewController : UIViewController <ADBannerViewDelegate, MultiPlayerHelperDelegate> {\n    ADBannerView *adView;\n}\n\n@end\n```", "```swift\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playerAuthenticated)\nname:LocalPlayerIsAuthenticated object:nil];\n```", "```swift\n- (void)playerAuthenticated {\n    [[MultiplayerHelper sharedMultiplayerHelper] findMatchWithMinPlayers:2 maxPlayers:2 viewController:self delegate:self];\n}\n```", "```swift\n#pragma mark MultiPlayerHelperDelegate\n\n- (void)matchStarted {    \n    NSLog(@\"Game started\");        \n}\n\n- (void)matchEnded {    \n    NSLog(@\"Game ended\");    \n}\n\n- (void)match:(GKMatch *)match didReceiveData:(NSData *)data fromPlayer:(NSString *)playerID {\n    NSLog(@\"Received data\");\n}\n```", "```swift\n@property(nonatomic, strong) NSMutableDictionary *playersDict;\n```", "```swift\n- (void)lookupPlayers {\n\n    NSLog(@\"Looking up %lu players...\", (unsigned long)_match.playerIDs.count);\n\n    [GKPlayer loadPlayersForIdentifiers:_match.playerIDs withCompletionHandler:^(NSArray *players, NSError *error) {\n\n        if (error != nil) {\n            NSLog(@\"Error retrieving player info: %@\", error.localizedDescription);\n            _matchStarted = NO;\n            [_delegate matchEnded];\n        } else {\n\n            // fill up that there dictionary\n            _playersDict = [NSMutableDictionary dictionaryWithCapacity:players.count];\n            for (GKPlayer *player in players) {\n                NSLog(@\"Found this person to play with: %@\", player.alias);\n                [_playersDict setObject:player forKey:player.playerID];\n            }\n            [_playersDict setObject:[GKLocalPlayer localPlayer] forKey:[GKLocalPlayer localPlayer].playerID];\n\n            // Let me know if the match can start k?\n            _matchStarted = YES;\n            [_delegate matchStarted];\n        }\n    }];\n}\n```", "```swift\n- (void)matchmakerViewController:(GKMatchmakerViewController *)viewController didFindMatch:(GKMatch *)match {\n    [viewController dismissViewControllerAnimated:YES completion:nil];\n    self.match = match;\n    match.delegate = self;\n    if (!_matchStarted && match.expectedPlayerCount == 0) {\n        NSLog(@\"Ready to play!\");\n        [self lookupPlayers];\n    }\n}\n```", "```swift\n- (void)match:(GKMatch *)match player:(NSString *)playerID didChangeState:(GKPlayerConnectionState)state {\n    if (_match != match) return;\n\n    switch (state) {\n        case GKPlayerStateConnected:\n            // handle a new player connection.\n            NSLog(@\"Player connected!\");\n\n            if (!_matchStarted && match.expectedPlayerCount == 0) {\n                NSLog(@\"LET'S PLAY YA\");\n                [self lookupPlayers];\n            }\n\n            break;\n        case GKPlayerStateDisconnected:\n            // a player just disconnected.\n            NSLog(@\"Player disconnected!\");\n            _matchStarted = NO;\n            [_delegate matchEnded];\n            break;\n    }\n}\n```", "```swift\n2015-10-26 18:52:13.867 ADESA[787:60b] Ready to start match!\n2015-10-26 18:52:13.874 ADESA[787:60b] Looking up 1 players...\n2015-10-26 18:52:13.894 ADESA[787:60b] Found player: miigman\n2015-10-26 18:52:13.895 ADESA[787:60b] Match has started successfully\n```"]