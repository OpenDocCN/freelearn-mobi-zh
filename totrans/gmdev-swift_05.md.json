["```swift\nimport SpriteKit\n\nclass Star: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"goods.atlas\")\n    var pulseAnimation = SKAction()\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 40, height: 38)) {\n        parentNode.addChild(self)\n        createAnimations()\n        self.size = size\n        self.position = position\n        self.physicsBody = SKPhysicsBody(circleOfRadius: \n            size.width / 2)\n        self.physicsBody?.affectedByGravity = false\n        // Since the star texture is only one frame, set it here:\n        self.texture = \n            textureAtlas.textureNamed(\"power-up-star.png\")\n        self.runAction(pulseAnimation)\n    }\n\n    func createAnimations() {\n        // Scale the star smaller and fade it slightly:\n        let pulseOutGroup = SKAction.group([\n            SKAction.fadeAlphaTo(0.85, duration: 0.8),\n            SKAction.scaleTo(0.6, duration: 0.8),\n            SKAction.rotateByAngle(-0.3, duration: 0.8)\n            ]);\n        // Push the star big again, and fade it back in:\n        let pulseInGroup = SKAction.group([\n            SKAction.fadeAlphaTo(1, duration: 1.5),\n            SKAction.scaleTo(1, duration: 1.5),\n            SKAction.rotateByAngle(3.5, duration: 1.5)\n            ]);\n        // Combine the two into a sequence:\n        let pulseSequence = SKAction.sequence([pulseOutGroup, \n            pulseInGroup])\n        pulseAnimation = \n            SKAction.repeatActionForever(pulseSequence)\n    }\n\n    func onTap() {}\n}\n```", "```swift\nimport SpriteKit\n\nclass MadFly: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"enemies.atlas\")\n    var flyAnimation = SKAction()\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 61, height: 29)) {\n        parentNode.addChild(self)\n        createAnimations()\n        self.size = size\n        self.position = position\n        self.runAction(flyAnimation)\n        self.physicsBody = SKPhysicsBody(circleOfRadius: \n            size.width / 2)\n        self.physicsBody?.affectedByGravity = false\n    }\n\n    func createAnimations() {\n        let flyFrames:[SKTexture] = [\n            textureAtlas.textureNamed(\"mad-fly-1.png\"),\n            textureAtlas.textureNamed(\"mad-fly-2.png\")\n        ]\n        let flyAction = SKAction.animateWithTextures(flyFrames, \n            timePerFrame: 0.14)\n        flyAnimation = SKAction.repeatActionForever(flyAction)\n    }\n\n    func onTap() {}\n}\n```", "```swift\nimport SpriteKit\n\nclass Bat: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"enemies.atlas\")\n    var flyAnimation = SKAction()\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 44, height: 24)) {\n        parentNode.addChild(self)\n        createAnimations()\n        self.size = size\n        self.position = position\n        self.runAction(flyAnimation)\n        self.physicsBody = SKPhysicsBody(circleOfRadius: \n            size.width / 2)\n        self.physicsBody?.affectedByGravity = false\n    }\n\n    func createAnimations() {\n        // The Bat has 4 animation textures:\n        let flyFrames:[SKTexture] = [\n            textureAtlas.textureNamed(\"bat-fly-1.png\"),\n            textureAtlas.textureNamed(\"bat-fly-2.png\"),\n            textureAtlas.textureNamed(\"bat-fly-3.png\"),\n            textureAtlas.textureNamed(\"bat-fly-4.png\"),\n            textureAtlas.textureNamed(\"bat-fly-3.png\"),\n            textureAtlas.textureNamed(\"bat-fly-2.png\")\n        ]\n        let flyAction = SKAction.animateWithTextures(flyFrames, \n            timePerFrame: 0.06)\n        flyAnimation = SKAction.repeatActionForever(flyAction)\n    }\n\n    func onTap() {}\n}\n```", "```swift\nimport SpriteKit\n\nclass Ghost: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"enemies.atlas\")\n    var fadeAnimation = SKAction()\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 30, height: 44)) {\n        parentNode.addChild(self)\n        createAnimations()\n        self.size = size\n        self.position = position\n        self.physicsBody = SKPhysicsBody(circleOfRadius: \n            size.width / 2)\n        self.physicsBody?.affectedByGravity = false\n        self.texture = \n            textureAtlas.textureNamed(\"ghost-frown.png\")\n        self.runAction(fadeAnimation)\n        // Start the ghost semi-transparent:\n        self.alpha = 0.8;\n    }\n\n    func createAnimations() {\n        // Create a fade out action group:\n        // The ghost becomes smaller and more transparent.\n        let fadeOutGroup = SKAction.group([\n            SKAction.fadeAlphaTo(0.3, duration: 2),\n            SKAction.scaleTo(0.8, duration: 2)\n            ]);\n        // Create a fade in action group:\n        // The ghost returns to full size and transparency.\n        let fadeInGroup = SKAction.group([\n            SKAction.fadeAlphaTo(0.8, duration: 2),\n            SKAction.scaleTo(1, duration: 2)\n            ]);\n        // Package the groups into a sequence, then a \n        // repeatActionForever action:\n        let fadeSequence = SKAction.sequence([fadeOutGroup, \n            fadeInGroup])\n        fadeAnimation = SKAction.repeatActionForever(fadeSequence)\n    }\n\n    func onTap() {}\n}\n```", "```swift\nimport SpriteKit\n\nclass Blade: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"enemies.atlas\")\n    var spinAnimation = SKAction()\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 185, height: 92)) {\n        parentNode.addChild(self)\n        self.size = size\n        self.position = position\n        // Create a physics body shaped by the blade texture:\n        self.physicsBody = SKPhysicsBody(\n            texture: textureAtlas.textureNamed(\"blade-1.png\"),\n            size: size)\n        self.physicsBody?.affectedByGravity = false\n        // No dynamic body for the blade, which never moves:\n        self.physicsBody?.dynamic = false\n        createAnimations()\n        self.runAction(spinAnimation)\n    }\n\n    func createAnimations() {\n        let spinFrames:[SKTexture] = [\n            textureAtlas.textureNamed(\"blade-1.png\"),\n            textureAtlas.textureNamed(\"blade-2.png\")\n        ]\n        let spinAction = SKAction.animateWithTextures(spinFrames, \n            timePerFrame: 0.07)\n        spinAnimation = SKAction.repeatActionForever(spinAction)\n    }\n\n    func onTap() {}\n}\n```", "```swift\nimport SpriteKit\n\nclass Coin: SKSpriteNode, GameSprite {\n    var textureAtlas:SKTextureAtlas = \n        SKTextureAtlas(named:\"goods.atlas\")\n    // Store a default value for the bronze coin:\n    var value = 1\n\n    func spawn(parentNode:SKNode, position: CGPoint,\n        size: CGSize = CGSize(width: 26, height: 26)) {\n        parentNode.addChild(self)\n        self.size = size\n        self.position = position\n        self.physicsBody = SKPhysicsBody(circleOfRadius: \n            size.width / 2)\n        self.physicsBody?.affectedByGravity = false\n        self.texture =\n            textureAtlas.textureNamed(\"coin-bronze.png\")\n    }\n\n    // A function to transform this coin into gold!\n    func turnToGold() {\n        self.texture = \n            textureAtlas.textureNamed(\"coin-gold.png\")\n        self.value = 5\n    }\n\n    func onTap() {}\n}\n```", "```swift\n// Spawn a bat:\nlet bat = Bat()\nbat.spawn(world, position: CGPoint(x: 400, y: 200))\n\n// A blade:\nlet blade = Blade()\nblade.spawn(world, position: CGPoint(x: 300, y: 76))\n\n// A mad fly:\nlet madFly = MadFly()\nmadFly.spawn(world, position: CGPoint(x: 50, y: 50))\n\n// A bronze coin:\nlet bronzeCoin = Coin()\nbronzeCoin.spawn(world, position: CGPoint(x: 490, y: 250))\n\n// A gold coin:\nlet goldCoin = Coin()\ngoldCoin.spawn(world, position: CGPoint(x: 460, y: 250))\ngoldCoin.turnToGold()\n\n// A ghost!\nlet ghost = Ghost()\nghost.spawn(world, position: CGPoint(x: 50, y: 300))\n\n// The powerup star:\nlet star = Star()\nstar.spawn(world, position: CGPoint(x: 250, y: 250))\n```", "```swift\noverride func didMoveToView(view: SKView) {\n    // Set a sky-blue background color:\n    self.backgroundColor = UIColor(red: 0.4, green: 0.6, blue: \n        0.95, alpha: 1.0)\n\n    // Add the world node as a child of the scene:\n    self.addChild(world)\n\n    // Store the vertical center of the screen:\n    screenCenterY = self.size.height / 2\n\n    // Spawn the ground:\n    let groundPosition = CGPoint(x: -self.size.width, y: 30)\n    let groundSize = CGSize(width: self.size.width * 3, height: 0)\n    ground.spawn(world, position: groundPosition, size: \n        groundSize)\n\n    // Spawn the player:\n    player.spawn(world, position: initialPlayerPosition)\n\n    // Set gravity\n    self.physicsWorld.gravity = CGVector(dx: 0, dy: -5)\n}\n```"]