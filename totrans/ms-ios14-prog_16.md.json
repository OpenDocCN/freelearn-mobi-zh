["```swift\nvar body: some View {\n  NavigationView {\n    if dataManager.loading {\n      Text(\"Loading...\")\n    } else {\n      CoinListView(data: dataManager.coins.data)\n    }\n  }\n}\n```", "```swift\nvar body: some View {\n  VStack {\n    ForEach(data, id: \\.symbol){ coin in\n      CoinRow(coin: coin)\n    }\n  }\n}\n```", "```swift\n@main\nstruct CryptoWidgetExtension: Widget {\n    let kind: String = \"CryptoWidgetExtension\"\n    var body: some WidgetConfiguration {\n        IntentConfiguration(kind: kind, intent: ConfigurationIntent.self, provider: Provider()) { entry in\n            CryptoWidgetExtensionEntryView(entry: entry)\n        }\n        .configurationDisplayName(\"My Widget\")\n        .description(\"This is an example widget.\")\n    }\n}\n```", "```swift\n .supportedFamilies([.systemSmall])\n```", "```swift\nstruct CryptoWidgetExtension_Previews: PreviewProvider {\n    static var previews: some View {\n        CryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent()))\n            .previewContext(WidgetPreviewContext(family: .systemSmall))\n    }\n}\n```", "```swift\nCryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent()))\n    .previewContext(WidgetPreviewContext(family: .systemSmall))\n```", "```swift\nstruct CryptoWidgetExtensionEntryView : View {\n    var entry: Provider.Entry\n    var body: some View {\n        Text(entry.date, style: .time)\n    }\n}\n```", "```swift\nstruct SimpleEntry: TimelineEntry {\n  let date: Date\n  let configuration: ConfigurationIntent\n  let coins: [Coin]\n}\n```", "```swift\nCannot find type 'Coin' in scope\n```", "```swift\nstruct Provider: IntentTimelineProvider {\n    let coins = [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200)))]\n//…\n```", "```swift\n    SimpleEntry(date: Date(), configuration: ConfigurationIntent(), coins: coins)\n    ```", "```swift\n    let entry = SimpleEntry(date: Date(), configuration: configuration, coins: coins)\n    ```", "```swift\n    let entry = SimpleEntry(date: entryDate, configuration: configuration, coins: coins)\n    ```", "```swift\nCryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent(), coins: [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200)))]))\n          .previewContext(WidgetPreviewContext(family: .systemSmall))\n```", "```swift\nstruct CryptoWidgetExtensionEntryView : View {\n  var entry: Provider.Entry\n  var body: some View {\n      Text(entry.date, style: .time)\n  }\n}\n```", "```swift\nstruct CryptoWidgetExtensionEntryView : View {\n  var entry: Provider.Entry\n  var body: some View {\n    CoinDetail(coin: entry.coins[0])\n  }\n}\n```", "```swift\nfunc placeholder(in context: Context) -> SimpleEntry \n```", "```swift\nstruct PlaceholderView : View {\n  let coins = [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200)))]\n    var body: some View {\n      CryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent(), coins: coins)).redacted(reason: .placeholder)\n    }\n}\n```", "```swift\nstruct CryptoWidgetExtension_Previews: PreviewProvider {\n    static var previews: some View {\n      Group {\n        CryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent(), coins: [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200)))]))\n          .previewContext(WidgetPreviewContext(family: .systemSmall))\n        PlaceholderView()\n          .previewContext(WidgetPreviewContext(family: .systemSmall))\n      }\n    }\n}\n```", "```swift\n.supportedFamilies([.systemSmall, .systemMedium])\n```", "```swift\nGroup {\n  CryptoWidgetExtensionEntryView(entry: SimpleEntry(date: Date(), configuration: ConfigurationIntent(), coins: [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200))), Coin(id: 1, name: \"Ethereum\", symbol: \"ETH\", quote: Quote(USD: QuoteData(price: 1200)))]))\n    .previewContext(WidgetPreviewContext(family: .systemMedium))\n  PlaceholderView()\n    .previewContext(WidgetPreviewContext(family: .systemMedium))\n}\n```", "```swift\nstruct CryptoWidgetExtensionEntryView : View {\n  var entry: Provider.Entry\n  //1\n  @Environment(\\.widgetFamily) var family\n  //2\n  @ViewBuilder\n  var body: some View {\n    switch family {\n    //3\n    case .systemSmall where entry.coins.count > 0:\n      CoinDetail(coin: entry.coins[0])\n    //4\n    case .systemMedium where entry.coins.count > 0:\n      HStack(alignment: .center) {\n        Spacer()\n        CoinDetail(coin: entry.coins.first!)\n        Spacer()\n        CoinListView(data: entry.coins)\n        Spacer()\n      }\n    //5\n    default:\n      PlaceholderView()\n    }\n  }\n}\n```", "```swift\n@ObservedObject var dataManager = DataManager()\n```", "```swift\nlet coins = [Coin(id: 1, name: \"Bitcoin\", symbol: \"BTC\", quote: Quote(USD: QuoteData(price: 20000))), Coin(id: 1, name: \"Litecoin\", symbol: \"LTC\", quote: Quote(USD: QuoteData(price: 200)))]\n```", "```swift\n    case .systemSmall where entry.coins.count > 0:\n          CoinDetail(coin: entry.coins[0]) \n    ```", "```swift\n    case .systemSmall where entry.coins.count > 0:\n      switch entry.configuration.coinselect) to know which coin from the enum the user selected. Based on that, we are displaying a specific coin in the small-sized widget.Try to build the project. You may get a compile error. This error happens because the widget doesn't yet know about the custom Siri intent type (even though Xcode generated it for us). This error may be fixed in future versions of Xcode. If you have an error, check the following:\n    ```", "```swift\n    func refresh(completionHandler: @escaping (CoinList) -> Void) {\n      guard let url = URL(string: apiUrl) else { return }\n      var request = URLRequest(url: url)\n      request.setValue(apiKeyValue, forHTTPHeaderField: apiKeyHeader)\n      URLSession.shared.dataTask(with: request){ (data, _, _) in\n        print(\"Update coins\")\n        guard let data = data else { return }\n        let coins = try! JSONDecoder().decode(CoinList.self, from: data)\n        DispatchQueue.main.async {\n          print(coins)\n          self.coins = coins\n          self.loading = false\n          completionHandler(coins)\n        }\n      }.resume()\n    }\n    ```", "```swift\n    func getTimeline(for configuration: ConfigurationIntent, in context: Context, completion: @escaping (Timeline<Entry>) -> ()) {\n      print(\"New Timeline \\(Date())\")\n      dataManager.refresh { (coins) in\n        let currentDate = Date()\n        let futureDate = Calendar.current.date(byAdding: .minute, value: 15, to: currentDate)!\n        let timeline = Timeline(entries: [SimpleEntry(date: Date(), configuration: configuration, coins: coins.data)], policy: .after(futureDate))\n        completion(timeline)\n      }\n    }\n    ```", "```swift\n    New Timeline 2021-01-23 20:51:51 +0000\n    ```", "```swift\n    New Timeline 2021-01-23 21:06:52 +0000\n    ```"]