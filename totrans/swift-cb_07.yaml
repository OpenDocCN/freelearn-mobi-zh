- en: Swift Playgrounds
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we have been using Swift Playgrounds to work through code
    examples as we explore the Swift language. Playgrounds are great for this use
    case, as they allow you to explore code and framework APIs without needing the
    infrastructure of an iOS, macOS, or tvOS app to execute the code.
  prefs: []
  type: TYPE_NORMAL
- en: Their features go beyond how we have used them so far in this book, and in this
    chapter, we will explore some of those features, from using additional code and
    resources to creating fully interactive experiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Swift Playgrounds for UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing resources into playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing code into playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-page playgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Swift Playgrounds on iPadOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the code for this chapter can be found in this book's GitHub repository
    at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/37t4f0A](https://bit.ly/37t4f0A).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Swift Playgrounds for UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use Playgrounds to experiment with UI and test custom views and interfaces.
    In this recipe, we will build a bar chart view that we can use to display numerical
    data in chart form and use a playground to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we'll create an iOS-based playground to build our bar chart. In Chapter
    1, *Swift Building Blocks*, we went through creating a new playground, so return
    there if you need a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a custom view that will display information in bar chart form,
    and use that to test some features of playgrounds. You can either enter the following
    code into a new iOS-based playground or download the playground named `Simple_iOS.playground`
    from this book''s GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Color` struct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `Bar` struct and `BarView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `BarChart` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the code that we defined in the **Getting ready** section, the `BarChart`
    view can be created with a frame and a background color, and then bars can be
    added in the form of a `Bar` struct containing a value and a color. The `BarChart`
    view uses these to create subviews of the correct relative size and scale to represent
    the values of the bars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write some code to make use of our `BarChart` view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following into the playground at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Press the blue play button at the bottom-left of the playground window to execute
    the code. As your code executes, you will see that the playground sidebar fills
    up with information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chapter 1, *Swift Building Blocks*, we saw that playgrounds have a timeline
    that provides information about each line of execution. As you pass your cursor
    over the line, you see an eye-shaped icon that will display a preview of the result
    of that line of execution. Where the line involves a UI element such as `view`,
    the playground will render that view and display it in a preview box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38e889da-668d-46db-909a-ca90e823c1c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – BarChart preview box
  prefs: []
  type: TYPE_NORMAL
- en: 'The same is true for the pinned inline preview that you can get by pressing
    the square button in the timeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d5b513b-badc-43c0-a5ff-b7845022ad43.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – BarChart inline preview
  prefs: []
  type: TYPE_NORMAL
- en: These features can be great for testing and tweaking view code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the purpose of the playground is to demo or experiment with a custom view
    component and you''d like a more prominent view output, you can use the playground''s
    live view feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `PlaygroundSupport` framework at the top of the playground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `PlaygroundSupport` framework provides a number of features for accessing
    various features of the playground.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to set our `BarChart` view to be the playground''s live view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the playground''s live view isn''t visible, you can display it from the
    menu. Go to Editor | Live View:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86c567e5-614c-4f42-befc-e780e44af661.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Live view
  prefs: []
  type: TYPE_NORMAL
- en: This view will be updated as the code in the playground changes. Try changing
    the value of the bars and see the view change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A playground''s live view can be anything that conforms to `PlaygroundLiveViewable`.
    On iOS, both `UIView` and `UIViewController` conform to `PlaygroundLiveViewable`,
    as do their equivalents on macOS: `NSView` and `NSViewController`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, we construct a `BarChart`, which is a `UIView`, and assign
    it to the `liveView` property of the current `PlaygroundPage`.
  prefs: []
  type: TYPE_NORMAL
- en: These live views respond to touch events just as they would in a macOS app or
    in the iOS simulator. Therefore, you can use them to test interactive views and
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, playgrounds do not currently support interface builder layout
    files, which are the `.xibs` and `.storyboard` files. Therefore, to use Playgrounds
    with your custom views, you will have to lay out your views programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that iOS-based playgrounds support many, but not all, of the frameworks
    available in the iOS SDK, so this may limit what you can do in a playground.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding example, and for most of this book, we focused on iOS-based
    playgrounds. However, macOS-based playgrounds are just as useful for the macOS
    platform and can also be used for UI testing and experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: You will find a macOS-based playground called `Simple_macOS.playground` that
    also creates a simple bar chart view in this book's GitHub repository at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/01_Using_Swift_Playgrounds_for_UI](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/01_Using_Swift_Playgrounds_for_UI)
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can create a new macOS-based playground and enter the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Color` struct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `Bar` struct and `BarView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `BarChart` view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `BarChart` to display information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This macOS version of our custom `barView` works exactly like the iOS version,
    and the live view for a macOS-based playground works exactly like its iOS-based
    counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to iOS, macOS-based playgrounds support many, but not all, of the frameworks
    available in the macOS SDK, so this may limit what you can do in a playground.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you can see from this recipe that Swift Playgrounds can be really
    useful for viewing UI experimentation on both iOS and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apple's reference for the Playground Support framework can be found at [http://swiftbook.link/docs/playgroundsupport](http://swiftbook.link/docs/playgroundsupport).
  prefs: []
  type: TYPE_NORMAL
- en: Importing resources into playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While building apps, we will often need to include resources, such as images.
    How can we do the same with playgrounds so that our UI can incorporate these images?
    That is what we will investigate in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We will improve our bar chart custom view from the previous recipe by adding
    a semi-transparent image to provide a texture for the bars.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will start with the playground from the previous recipe.
    The playground is called `Simple_iOS.playground`, and you can get it from the
    GitHub repository for this book at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/01_Using_Swift_Playgrounds_for_UI](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/01_Using_Swift_Playgrounds_for_UI)
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using a semi-transparent texture image for this recipe. You can
    supply your own, or download a sample one from here: [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/02_Import_Resources_into_Playgrounds/EmbeddedResource.playground/Resources](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/02_Import_Resources_into_Playgrounds/EmbeddedResource.playground/Resources)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following steps to understand how to add our image
    to the playground:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open up Xcode''s project navigator, which is often not visible by
    default when a playground is opened. To reveal the project navigator, select View
    | Navigators | Project from the menu. Alternatively, you can select the left pane
    reveal button in the top-left corner of the Xcode window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43cbb9b5-0d88-41a1-bb7c-5ff765b0dad2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Project navigator
  prefs: []
  type: TYPE_NORMAL
- en: The playground will be listed at the top of the project navigator, along with
    a disclosure triangle.
  prefs: []
  type: TYPE_NORMAL
- en: Select the triangle to reveal folders named `Sources` and `Resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the texture image from Finder into the `Resources` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9252bd56-5d3a-4cc4-b9c5-39ad0c0f7279.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Adding a file to the project
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have embedded our texture image within our playground, we need to
    make use of it. We want each bar in the bar chart to have a settable color, but
    for the texture to sit on top of that color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `BarView` part of our code to use the texture image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can retrieve the image in the same way we would in a full app by referencing
    the filename of the image, without the file extension, in a `UIImage` initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the playground is executed, you will see that our bar chart looks a lot
    more interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82aa36b1-7709-45fe-ac97-d578eb0237bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Textured bar chart
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand where the image that we added is stored, it helps to know how
    playgrounds are structured.
  prefs: []
  type: TYPE_NORMAL
- en: 'A playground is actually a folder, but with a `.playground` file extension.
    We can see this by taking a playground file and showing the context menu, which
    can be done by right-clicking or holding *Ctrl* while clicking on the file. From
    this menu, select Show Package Contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac4a88cc-26b3-4f6a-9efe-284d1b2f6daf.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Viewing Package Contents
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the playground as a folder, showing its contents. In there,
    you will find a number of files, including one called `Contents.swift`, which
    is the Swift file containing the code that is executed. There is also a folder
    called `Resources`, which contains the texture image we imported:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5abe1ff-9729-4f31-b307-fde116dc58df.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Package Contents
  prefs: []
  type: TYPE_NORMAL
- en: By dragging the image into the file navigator, Xcode created this folder and
    placed the image in it. Alternatively, we could have created this folder manually
    and dropped it in the image. Playgrounds will look for a folder named `Resources`,
    and all the resources in it will be made available from the playground.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The result of this recipe is available as `EmbeddedResources.playground` in
    the GitHub repository for this book, in the `chapter 7` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Importing code into playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen throughout this chapter, and this book, playgrounds are a great
    canvas for exploring APIs, frameworks, and custom code. However, if you want to
    explore uses for your own code, it appears that you need to include all the code
    needed in the playground, and that can make it long and unwieldy.
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't need to be that way. In this recipe, we will see how you can embed
    Swift code in your playground and make use of it from your playground code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use the playground from the previous recipe, called
    `EmbeddedResources.playground`, which can be retrieved from this book's GitHub
    repository at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/02_Import_Resources_into_Playgrounds](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/02_Import_Resources_into_Playgrounds).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will take the `BarChart` custom view and related code and move it to a separate
    file embedded within the playground, leaving us free to use the playground to
    experiment with our custom view:'
  prefs: []
  type: TYPE_NORMAL
- en: If the playground's project navigator isn't visible, select View | Navigators
    | Project from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Sources folder and then select File | New | File from the menu to
    create a new Swift file in your `**Sources**` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa82d350-1fc3-440d-a597-f7f798c30d73.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Sources folder
  prefs: []
  type: TYPE_NORMAL
- en: If you already have Swift files that you want to embed in a playground, you
    can drag the files into the `Sources` folder, just like we did with our texture
    image in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new file `Color.swift`, as we will use this to hold our `Color` struct
    that is currently in the main playground content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code into `Color.swift`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have added `public` access controls to the `Color` struct and its
    initializer; we will see more about that as we progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another new Swift file in the `Sources` folder as we did earlier, called
    `BarChart.swift`, and then enter the rest of the code needed to define the `BarChart`
    custom view, starting with the `Bar` struct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is followed by `BarView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we have `BarChart`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `BarChart` implementation code contained in the `Sources` folder,
    the playground contents can be just for experimenting with the `BarChart` custom
    view. Remove the code we placed in the other files and you are left with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In moving the `BarChart` implementation to embedded Swift files, we added `public`
    access control at points where we wanted it to be accessible from the playground
    content. This is because code within the `Sources` folder acts as a kind of lightweight
    module in terms of access control.
  prefs: []
  type: TYPE_NORMAL
- en: Anything with the default `internal` access control is only accessible to other
    code inside the `Sources` folder. To make it accessible to code in the main playground
    content, it needs to be declared as `public` or `open`. This is really useful,
    as it allows you to be in control of what you expose to the playground content;
    so, you can provide well-designed APIs that don't expose the underlying complexity.
  prefs: []
  type: TYPE_NORMAL
- en: If you require a refresher on access controls or want to learn more, check out
    the recipe entitled *Controlling access with access control*, in [Chapter 2](67605929-e031-49f6-83a9-9f7352e9bad3.xhtml),
    *Mastering the Building Blocks*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The result of this recipe can be found in `EmbeddedSources.playground` in this
    book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Further information about Swift access controls can be found in [Chapter 2](67605929-e031-49f6-83a9-9f7352e9bad3.xhtml),
    *Mastering the Building Blocks*.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-page playgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've discussed how playgrounds can be a great tool for exploring APIs and experimenting
    with UIs. However, playgrounds can also be used for documenting APIs, and providing
    rich, linkable content. Swift Playgrounds provides support for rich text formatting
    in comments and multiple pages of content, and we will explore those features
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the playground we used in the last recipe, which displayed
    our custom `BarChart` view. You can get the playground, called `EmbeddedSources.playground`,
    from the GitHub repository for this book at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: We will use our `BarChart` view to display the price in US dollars of three
    different cryptocurrencies over a 6-month period between January 2020 and June
    2020\. We can show each type of currency on a different playground page.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know more about cryptocurrencies, you can watch this explanatory
    video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://swiftbook.link/videos/cryptocurrencies](http://swiftbook.link/videos/cryptocurrencies).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, playgrounds have just one Swift content file, but for our purpose,
    we want to have three pages in our playground, one for each of the three cryptocurrencies
    we will document: Bitcoin, Etherium, and Lightcoin. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: If the project navigator isn't visible, you should make it visible using the
    menu by selecting View | Navigators | Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create a new playground page, you can click on the plus button in the bottom
    left-hand corner of the project navigator, or select File | New | Playground Page
    from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d036058-f503-42c7-9d68-8f2750155e88.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – New Playground Page
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a new playground page, the existing contents of the playground
    become a playground page, and another blank page is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b19ed5fc-387a-433b-9621-055121c7a461.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Creating a new page in Playgrounds
  prefs: []
  type: TYPE_NORMAL
- en: 'Create three pages in total, as we will display data on three different cryptocurrencies,
    and rename them as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Bitcoin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Etherium`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lightcoin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these pages can use the `BarChart` code in the `Sources` folder that
    we added in the previous recipe, so we can create a `BarChart` view on each page
    to chart the value of each currency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code into the `Bitcoin` playground page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enter the following code into the `Etherium` playground page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, enter the following code into the `Lightcoin` playground page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Each page displays the value history as a bar chart when run, and you can use
    the project navigator to switch between them.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we did in previous recipes, we can take a look inside the playground to
    see how each playground page is represented. Right-click on the playground, or
    hold *Ctrl* while clicking on it. From this menu, select Show Package Contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6507b3a7-71a9-4d35-b158-fadb2227bf4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Viewing Package Contents
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that the `Contents.swift` folder that we saw earlier has been
    replaced with a folder containing three `.xcplaygroundpage` files, one for each
    page in the playground:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b6ba5b8-7ac1-4e6a-9ed9-1c9facc79830.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Extracted content
  prefs: []
  type: TYPE_NORMAL
- en: Each of these `.playgroundpage` files is essentially a playground in itself.
    You can right-click on `.playgroundpage` and select Show Package Contents, and
    you will see the same playground structure that we saw previously. Much like the
    normal playground, a `.xcplaygroundpage` file can contain the `Sources` and `Resources`
    subfolders, and placing code and resources in these will make them visible to
    just that page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we can now add multiple pages of content and have the ability to embed
    code and resources, Swift Playgrounds appears very useful in terms of interactive
    code documentation. To assist in this use case, it would be great if we could
    have some control over the presentation of our comments; well we can, as playgrounds
    support comments in **Markdown**.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is a lightweight text formatting syntax, invented by *John Gruber*,
    and is widely used to write text that can then be rendered with rich text formatting.
    More details about Markdown can be found at [http://swiftbook.link/markdown/docs](http://swiftbook.link/markdown/docs).
  prefs: []
  type: TYPE_NORMAL
- en: We won't delve into the Markdown syntax, but you can find a useful *cheat sheet*
    at [http://swiftbook.link/markdown/cheatsheet](http://swiftbook.link/markdown/cheatsheet).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our playground, open up the File Inspector window by selecting from the
    menu View | Inspectors | File and look under Playground Settings. You will see
    an option for Render Documentation. Ensure that this is set to off while we write
    some Markdown comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5120e954-28b5-446c-aa7f-8fec187b91d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Playground Settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now add some comments to our `Bitcoin` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To indicate to the playground that your comments contain Markdown formatting,
    a colon, `:`, is added after the opening of the comment block. This works for
    multi-line comments, `/*:`, and single-line comments, `//:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these comments in place, let''s turn Render Documentation back on and
    see what the comments look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d24515e8-fc57-49e2-a82a-6f46534368e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Rendered document
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, playgrounds also support the creation of Markdown links between
    the playground pages; you can link to the next page with `@next` and to the previous
    page with `@previous`. So, in Markdown, the links will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It is left as an exercise to the reader to add Markdown comments to the other
    two pages and provide links between the pages.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The result of this recipe can be found as `MultiplePages.playground` in the
    GitHub repository for this book at [https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/04_Multi-Page_Playgrounds/MultiplePages.playground](https://github.com/PacktPublishing/Swift-Cookbook-Second-Edition/tree/master/Chapter07/04_Multi-Page_Playgrounds/MultiplePages.playground).
  prefs: []
  type: TYPE_NORMAL
- en: Further information pertaining to the Markdown syntax can be found at [http://swiftbook.link/markdown/docs](http://swiftbook.link/markdown/docs).
  prefs: []
  type: TYPE_NORMAL
- en: Using Swift Playgrounds on iPadOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2016, Apple released an iPad-only app called Swift Playgrounds. Taken from
    the success of Playgrounds from Xcode, Swift Playgrounds for iPadOS went a step
    further and added an additional educational element to the app. In 2020, Apple
    also released a version for macOS, opening the doors for educational purposes
    and to those starting out who may feel a little intimidated by the Xcode IDE.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how we can more easily replicate a recipe
    similar to that from [Chapter 6](32abd392-d947-461c-a9e9-912b34704c9b.xhtml),
    *Building iOS Apps with Swift*, straight on our iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you'll need either an iPad running iOS 14.0 in order to download
    Swift Playgrounds from the App Store or alternatively, you can download the macOS
    version from the Mac App Store and follow along with this recipe too.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start by launching the Swift Playgrounds app from your device. You should
    be presented with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4202ce08-141b-4d26-b348-ca71a4ebdf8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Swift Playgrounds on iPadOS
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can either scroll along with the Get a Playground carousel until you
    see Blank or tap on the new document icon on the top left next to Locations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new document will be created and added to your playgrounds. Tap on this to
    open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Welcome to the Playgrounds Editor. This is where we can go ahead and write
    code, with a sense of familiarity that you''ll get from developing in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b43150d-b4d6-4f00-b312-fa0d08b4fb98.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – My Playground
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by doing something simple, just to get familiar with the IDE (*yes,
    I''m calling it an IDE - it kind of is in a way...*):'
  prefs: []
  type: TYPE_NORMAL
- en: Tap on the screen to raise the keyboard. If the keyboard doesn't raise, simply
    press the chevron on the right-hand side of the bottom toolbar. While you are
    down there, take a look at some of the available keyword suggestions – let, var,
    if, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go ahead and tap on the let constant. You will notice that the following is
    autopopulated for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: With the name placeholder highlighted, simply start typing your variable name,
    create one called `isSwitchedOn`, and now press the *tab* key to move the highlighted
    placeholder over to the `value`here. Then, type the word `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just as you would expect in Swift, type inference kicks in and we've created
    a constant Bool called `isSwitchedOn` with the value of `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, on a new line, tap on `if` and complete the following highlighted code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once done, press the Run My Code button and you should observe that a red indicator
    appears on the icon to the left of this button. Tap on that to reveal the console
    window and check out your print statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pretty cool hey! OK, so let''s do something a bit more complex and fun. Create
    another project and call it `Quotes` (or whatever name you prefer):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add a couple of imports if they are not already there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is followed by the third line, which sets the playground to run continuously.
    We'll go into more details as to why we need that in our *How it works...* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll continue by creating a couple of structs, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'These match the response type from the API we are about to call. Next, let''s
    create a function similar to the `fetchRepos()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: For simplicity, I've made some small tweaks here, as highlighted in the preceding
    code. We have just made an adjustment to the `return` type, returning our codable
    object that we created in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: We're also calling a different API, one that will return us with an array of
    quotes that we can iterate through.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s call our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''re just iterating around the response, but you should see the following
    red badge appear next to our console icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7150ec30-df04-400a-9e2b-5bb0f5286afa.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – The Stop running button
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and tap on the icon and see the results logged to the console. If everything
    is going well, you should now see a list of 10 quotes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this all working, let''s take a look at how we can arrange our code a
    little better, much like Playgrounds in Xcode. Our main Swift file is embedded
    within a single root file; however, we are given support for **modules** with
    the addition of shared code files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access these, press on the navigation icon in the top-left corner next to
    the close button. When pressed, it should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c14fb91a-fc89-4bf8-8120-2ec132994266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Project navigation window
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry too much about the file structure, we'll go through that in the
    *How it works...* section later; all you need to know for now is that all code
    that can be used (or *shared*) by the playground file is within a module called
    UserModule (which can be renamed should you wish).
  prefs: []
  type: TYPE_NORMAL
- en: Under here is a file called `SharedCode.swift`. Highlight this and cut and paste
    the codable structs from the main project into here. You can rename `SharedCode.swift`
    to `Models.swift` if you like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the project again and you''ll notice that you''re given the following compiler
    error – Property cannot be declared public because its type uses an internal type*.*
    Basically, due to the way Swift Playgrounds interprets external files, you need
    to make the structs public:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run this again and you''ll see the logic working again in all its glory, but
    as nice as it is to see this in the output window, let''s again take a look at
    how we can add this to our `liveView` canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by programmatically creating a `TableViewController()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll override `viewWillLoad()` and add in our code here to call our `fetchQuotes()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''ll need to add a couple of class properties, so incorporate the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`URLSession` will be used for our `fetchQuotes()` function just as we needed
    before. The quotes array will be where we store all our quotes from the API response.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, copy the `fetchQuotes()` function into the `TableViewController` class
    (currently this will sit outside).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can extend `viewDidLoad()` to call our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in the preceding code, rather than printing the output to the console,
    we'll now add this to our quotes array. Once our array has been populated and
    we're no longer iterating around the response, we can call `reloadData()` on our
    table view, which we'll need to do inside `DispatchQueue.main.async` to force
    the reload on the main thread (as we're currently inside an asynchronous response
    callback from our API).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is done, let''s add in some `UITableView` delegates that are required
    in order for our Table view to display our data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We will now need to add `numberOfSections()` in any order, which will return
    `1` followed by `numberOfRowsInSection()`, which will return the number of quotes
    in our array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add in the `cellForRowAt()` delegate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Here, we simply create an instance of `UITableViewCell()`. If no reuse identifier
    is set, we'll add one to our cell (we've called ours `table.view.cell`, but you
    can call it anything you want). Then, using the current index of the cell being
    called, we obtain the text from our quotes array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to assign `TableViewContoller` to our Live view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Press Run My Code and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0474ab16-5dc9-44e2-ad2f-e80ec4dcc0b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Results live view
  prefs: []
  type: TYPE_NORMAL
- en: Whether your using Playground on the iPad or via the Mac App Store, it goes
    without saying that it's certainly a powerful alternative to Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Swift Playgrounds has some powerful features, and especially if you're used
    to using Xcode, you'll immediately start to make a comparison (I know I did).
    But taking a step back and seeing how it all wonderfully knits together certainly
    opened my eyes to not only writing code but developing on an iPad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code completion. Normally with Xcode, we''ll expect
    this to show up when we''re typing away, in a small dialog/table next to our text,
    but with Swift Playgrounds on iPadOS, we get this in the form of a horizontal
    scroll bar at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44568049-8fcc-4144-90a9-8d82003a2d7f.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Syntax suggestions
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see an example of code completion on `UITableView`. Notice that
    immediately we're given multiple options that refer to just UITableViews. Go ahead
    and re-implement the delegate you did earlier, and you will then see another show
    up in the suggestions as you start to type `numberOf` – it just works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to note is compiler errors, displayed in a similar way to how
    Xcode does it (although more in line with your code in the editor). The following
    red symbol with a description of your error will be presented when running your
    code. Tapping on the button will collapse the error, allowing you to inspect your
    code in a little more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e2c5a79-418d-401c-874d-707eb8dc6ed0.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – Error inspection
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if you have a number of errors, then you can simply click on
    the red icon to the left of the + icon in the menu bar to display a list of current
    errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4dc3ee08-c202-44a4-afea-d96bccf41625.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Error indicator
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, the compiler may not always give you errors and you may
    be forced to "step through" your code in order to find out what exactly is going
    on in your logic. If we refer back to the *How to do it...* section, you''ll remember
    that we needed to add the following line of code to make our function work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This was due to our playground finishing its execution before our API had returned
    the call. Let's comment this out for the moment and run our code and you will
    notice that it never displays our list of quotes, but we want to see what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'To the left of the Run My Code button is a timer icon. Tap on this to see the
    following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c61087e-06f9-4c53-8261-6ebd7ec40d27.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – Running my code options
  prefs: []
  type: TYPE_NORMAL
- en: '**Run My Code** is highlighted by default, but two additional options exist
    – **Step Through My Code** and **Step Slowly**. What these do (essentially the
    same thing, although one does it more slowly than the other) is highlight each
    line of code as it is executed, or intended to be executed, allowing you to follow
    and check any potential logic issues. For those who are already familiar with
    Xcode''s IDE, this is common practice for debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: Tap on one of these two options with the preceding code commented out and you'll
    see that our code never finishes (because the main, synchronous function finished
    before the completion handler fired). If you try this a few times, you'll notice
    that it does occasionally stop at different points inside the completion. Uncomment
    the line and watch it step through right to the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to note is the object menu to the top right. Pressing on the
    plus button provides a plethora of code snippets to choose from, while you can
    also import images into an asset like a catalog, allowing you to reference image
    literals just like you can in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d13fa924-6cdd-48a8-afd6-9f150121f4a4.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Layout result
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I'd like to touch on the file inspector again over on the left-hand
    side. If you open this up again, you'll see an Edit button, which, in turn, does
    what it says on the tin. It lets you edit, rename, and re-order Swift files for
    your project and module.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier in this recipe, Swift Playgrounds is designed for both
    iPadOS and macOS, with both working in identical ways, and you should be able
    to follow this recipe perfectly on both (hint, I wrote half of this recipe on
    the iPad and the other on the Mac version just to test it out!).
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One final section worth going over is the Tools section. Click on the three
    dots to the right of the **+** icon in the top-right corner. You should now be
    presented with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b1ec6b2-f46b-46b3-bccf-f89daa373fa9.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Playground options
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go through each of these individually or collectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Playgrounds Help / Documentation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you would expect, Help is focused around the App/IDE and interface giving
    you an overview of what is available, while Documentation is Apple-specific API
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Take Picture / Create PDF**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These options share a screenshot or PDF of the canvas in its current state.
    Other standard iPadOS sharing options are also available.
  prefs: []
  type: TYPE_NORMAL
- en: '**Record Movie / Broadcast Live**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Record Movie starts a "screen recorder"-like scenario with stop and record controls
    that appear at the top of your screen. Broadcasting alternatively hooks into third-party
    apps that can be found on the Apple App Store that support broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Share / Advanced**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share initiates the default iPadOS share sheet for the option to share your
    current playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced gives you two options, one to export your playbook, and the second
    to take a more in-depth look at your current playbook's hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: '**License agreements**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is nothing to write home about, just your usual software license agreement
    information.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Apple''s Swift Playgrounds page**: [https://www.apple.com/swift/playgrounds/](https://www.apple.com/swift/playgrounds/)'
  prefs: []
  type: TYPE_NORMAL
