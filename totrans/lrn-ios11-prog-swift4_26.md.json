["```\nenum Shortcut: String {\n      case openMap\n      case openLocations\n      case openLosAngeles\n      case openLasVegas\n\n      init?(with identifier: String) {\n            guard let shortIdentifier = identifier.components(separatedBy: \".\").last else { return nil }\n            self.init(rawValue: shortIdentifier)\n      }\n\n      var type: String {\n            guard let identifier = Bundle.main.bundleIdentifier else { return \"\" }\n            return identifier + \".\\(self.rawValue)\"\n      }\n}\n```", "```\nvar launchedShortcutItem: UIApplicationShortcutItem?\nstatic let applicationShortcutUserInfoIconKey = \"applicationShortcutUserInfoIconKey\"\n```", "```\nif let shortcutItem = launchOptions?[UIApplicationLaunchOptionsKey.shortcutItem] as? UIApplicationShortcutItem\n```", "```\nlet laShortcut = UIMutableApplicationShortcutItem(type: Shortcut.openLosAngeles.type, localizedTitle: \"Los Angeles\", localizedSubtitle: \"\", icon: UIApplicationShortcutIcon(templateImageName: \"shortcut-city\"), userInfo:nil)\n```", "```\nlet lvShortcut = UIMutableApplicationShortcutItem(type: Shortcut.openLasVegas.type, localizedTitle: \"Las Vegas\", localizedSubtitle: \"\", icon: UIApplicationShortcutIcon(templateImageName: \"shortcut-city\"), userInfo: nil)\n```", "```\nreturn isPerformingAdditionalDelegateHandling\n```", "```\nreturn checkShortCut(application, launchOptions: launchOptions)\n```", "```\nguard Shortcut(with: item.type) != nil, let shortCutType = item.type as String?, let tabBarController = self.window?.rootViewController as? UITabBarController else { return false }\n```", "```\ntabBarController.selectedIndex = 0\nlet navController = self.window?.rootViewController?.childViewControllers.first as! UINavigationController\nlet viewController = navController.childViewControllers.first as! ExploreViewController\nviewController.performSegue(withIdentifier: \"locationList\", sender: self)\n```", "```\ntabBarController.selectedIndex = 1\nisHandled = true\n```", "```\nlet navController = self.window?.rootViewController?.childViewControllers.first as! UINavigationController\nlet viewController = navController.childViewControllers.first as! ExploreViewController\nviewController.selectedCity = LocationItem(state: \"CA\", city: \"Los Angeles\")\n\ntabBarController.selectedIndex = 1\ntabBarController.selectedIndex = 0\nisHandled = true\n```", "```\nlet navController = self.window?.rootViewController?.childViewControllers.first as! UINavigationController\nlet viewController = navController.childViewControllers.first as! ExploreViewController\nviewController.selectedCity = LocationItem(state: \"NV\", city: \"Las Vegas\")\n\ntabBarController.selectedIndex = 1\ntabBarController.selectedIndex = 0\nisHandled = true\n```", "```\nfunc application(_ application: UIApplication, performActionFor shortcutItem: UIApplicationShortcutItem, completionHandler: @escaping (Bool) -> Void) {\n   let handledShortCutItem = handleShortCut(shortcutItem)\n   completionHandler(handledShortCutItem)\n}\n```", "```\nguard let item = launchedShortcutItem else { return }\n_ = handleShortCut(item)\n\nlaunchedShortcutItem = nil\nif (application.applicationIconBadgeNumber != 0) {\n  application.applicationIconBadgeNumber = 0\n}\n```", "```\nUIApplicationShortcutItemIconFile\nUIApplicationShortcutItemTitle\nUIApplicationShortcutItemType\n```", "```\nfunc addFavorite(by restaurantID:Int) {\n   let item = Favorite(context: container.viewContext)\n   item.restaurantID = Int32(restaurantID)\n\n   save()\n}\n```", "```\nfunc isFavorite(with identifier:Int) -> Bool {\n   let moc = container.viewContext\n   let request:NSFetchRequest<Favorite> = Favorite.fetchRequest()\n   let predicate = NSPredicate(format: \"restaurantID = %i\", Int32(identifier))\n   request.predicate = predicate\n\n   do {\n         let count = try moc.count(for: request)\n         if count == 0 { return false }\n         else { return true }\n   } catch {\n         fatalError(\"Failed to fetch reviews: \\(error)\")\n   }\n}\n```", "```\nlet restaurantDetail : UIStoryboard = UIStoryboard(name: \"RestaurantDetail\", bundle: nil)\nguard let indexPath = collectionView?.indexPathForItem(at: location), let cell = collectionView?.cellForItem(at: indexPath), let detailVC = restaurantDetail.instantiateViewController(withIdentifier: \"RestaurantDetail\") as? RestaurantDetailViewController else { return nil }\n```", "```\nselectedRestaurant = manager.restaurantItem(at: indexPath)\ndetailVC.selectedRestaurant = selectedRestaurant\ndetailVC.preferredContentSize = CGSize(width: 0.0, height: 450)\npreviewingContext.sourceRect = cell.frame\n```", "```\nfunc previewingContext(_ previewingContext: UIViewControllerPreviewing, commit viewControllerToCommit: UIViewController) {   \n   show(viewControllerToCommit, sender: self)\n}\n```", "```\nfunc setup3DTouch() {\n   if( traitCollection.forceTouchCapability == .available){\n         registerForPreviewing(with: self, sourceView: view)\n   }\n}\n```", "```\noverride var previewActionItems: [UIPreviewActionItem] {\n   let favorite = UIPreviewAction(title: \"Favorite\", style: .default) { (action, viewController) -> Void in\n         let manager = CoreDataManager()\n         if let id = self.selectedRestaurant?.restaurantID { manager.addFavorite(by: id) }\n   }\n\n   let cancel = UIPreviewAction(title: \"Cancel\", style: .destructive) { (action, viewController) -> Void in\n         print(\"You hit cancel\")\n   }\n\n   return [favorite, cancel]\n}\n```", "```\nfunc checkFavorites() {\n   let manager = CoreDataManager()\n   if let id = selectedRestaurant?.restaurantID {\n         let isFavorite = manager.isFavorite(with: id)\n         let btnImage = UIButton()\n         btnImage.frame = CGRect(x: 0, y: 0, width: 30, height: 30)\n         btnImage.addTarget(self, action: #selector(getter: UIDynamicBehavior.action), for: .touchUpInside)\n\n         if isFavorite {\n               btnImage.setImage(UIImage(named: \"heart-selected\"), for: .normal)\n               btnHeart.customView = btnImage\n         }\n         else {\n               btnImage.setImage(UIImage(named: \"heart-unselected\"), for: .normal)\n               btnHeart.customView = btnImage\n         }\n   }\n}\n```"]