- en: Adding an Explosion and Creating a UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations on having made it so far! By now, you must be equipped with
    almost all of the basics needed for you to get started on your journey of game
    development. This chapter will serve as a finishing touch for our game, and we
    will complete our explosion part by adding an explosion to our game scene. Once
    we are done with that, we will create a simple UI for our game that will include
    displaying our score and distance on the screen. So, buckle up! You are about
    to finish the game we started. We will be learning the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding an explosion to our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a tutorial with instructions for the player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the score on the screen with our UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, before we move on to our UI, let's first finish up with our explosion
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an explosion to our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 7*](f605aac3-7f23-4895-b920-90515cff2b48.xhtml), *Adding Boundaries
    and Using Sprites to Create Explosions*, we have already created our `ExplosionEffect.java`
    class file. Now, we are left with just one task: to spawn our explosion on the
    screen. Now, just for reference, we will take a look at the image we will use
    for our explosion file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_08_01.png)`Explosion.png` file sprite sheet'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the last frame of our explosion has almost no image in it. This is
    because we are not going to destroy this object; we are simply going to spawn
    it and let it play its animation for now.
  prefs: []
  type: TYPE_NORMAL
- en: Let's proceed and get our explosion running on our game screen. Again, here
    we will break down our process into simple steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you should be aware by now, we will work on our `GameView.java` file to
    display our explosion. So, open up your `GameView.java` file. We will start by
    creating a few variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We created the `explosionEffect` variable to get a reference to our `ExplosionEffect`
    class and the other variables we have created in order to make our player reset
    after it collides. So, basically, what we will do is that once the player collides
    with a rock, an explosion animation will play and the player will get reset to
    the initial state.
  prefs: []
  type: TYPE_NORMAL
- en: Some optimizations and improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will do some optimizations to our game by shifting our `mainThread` after
    our surface has been created. So, we will remove `mainThread = new MainGameThread(getHolder(),
    this);` from our constructor and write it just above the place where we start
    running it in our `surfaceCreated()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Looks neat! Now, we will also need to make a few improvements to our touch
    events because we will be resetting our game to its initial state if our player
    collides with a rock. So, we need to make sure that we can play only if our game is
    in a play mode or if a new game has been created or reset. So, we will modify
    our `onTouchEvent()` to look somewhat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are simply setting up a few parameters for getting more control over
    our player movement. As you can see from our first `if` block, if `getPlaying()`,
    `newGameCreated` , and `reset` return a `false` value, then we will `setPlaying`
    to `true` and `setUp` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if our `getPlaying()` is already `true`, then we will check whether the
    game has started; if not, we will set our `started` variable to `true`, `reset`
    to `false`, and `setUp()` to true.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are set with our new game, playing, and reset logic for playing the
    game. We handle our reset variables here, but we also have to handle them in the
    `newGame()` function that we created earlier. However, before we do that, let's
    reference our explosion effect and tell it exactly where and when to spawn.
  prefs: []
  type: TYPE_NORMAL
- en: Spawning our explosion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need our explosion to spawn after our player has collided with our rocks.
    Once our player collides with a rock, the game is over. So, all of that is handled
    in our `update()` function wherein we have already created an else block for our
    `newGame()` function to be called. Let''s utilize that and write our logic to
    spawn an explosion. Our objective here is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Spawn the explosion effect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start a counter to wait for a certain time after a collision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reset the game after a certain time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note here that the dimensions of our image are 500 x 500, so we will be splitting
    our image into equal parts for each of our frames, thereby giving us 25 parts,
    which are 100 x 100 in dimension. We will pass each into our constructor as width,
    height, and number of frames. If the dimensions of the image that you are using
    for your game are different, then you need to calculate your dimensions and then
    use the values as per your image size.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go to our `else` block of the `update()` function and modify our previously
    written code to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, here we are resetting our player's `y` acceleration and spawning our explosion.
    Then, after waiting for a certain period of time, we call in the function to reset
    our game.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the explosion on the screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We still have to draw our explosion effect on the screen, and yes, you are
    right! We will do so in our `draw()` method. We also have to make sure that we
    draw our explosion only once, that is, at the start of the game, and so we will
    use our started variable to keep track of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re all set with our draw logic as well. We''re done with the entire logic
    for our explosion effect, and now your entire code for the `GameView.java` file
    should look somewhat like the following; all the changes done in this chapter
    are marked in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now you can test your explosion in the game by playing it on your device!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Our explosion effect in action
  prefs: []
  type: TYPE_NORMAL
- en: Kaboom! We're now done with our sprite explosion effect! Now, we will move on
    to the final part of this game-- the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI for our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are not familiar with the term the UI, you must be wondering what the
    heck is it? UI is an abbreviation for User Interface. To put simply, a UI can
    consist of all the information you need to display on your game screen or your
    onscreen controls. Common elements of a UI include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Text displayed on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joystick pad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorial instructions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this part of our chapter, we will learn how to display text on the screen.
    We will also instruct the player how to play the game. We will display the following
    on our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Distance ran
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instructions on how to play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, here we have to display the best score. However, we haven''t created our
    best score variable yet. For this part, we will work entirely in our `GameView.java`
    file. So, let''s define our best score variable in this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We're now ready to show our UI data on the screen. Our UI will be entirely based
    on the `draw()` function, and so we will define a method called as `drawText()`,
    which should be called from our `draw()` method in the class. So, before we actually
    call our `drawText()` method, let's write some code for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before that, let''s calculate our best score first. Now, obviously, our best
    score will be calculated after our first game is over, so we will put that logic
    into our `newGame()` function. The logic for this is fairly simple. If our current
    score is greater than the `bestScore` that is initialized to `0`, then our `bestScore`
    equals our current score that we get through `playerCharacter.getScore();` and
    that would be in our `newGame()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright, that''s sorted, and now we have our `bestScore` variable ready to
    hold our best score; our `newGame()` function would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now write our `drawText()` method. To do so, we will use the help of
    the `Paint` class in Android. The `Paint` class holds the information about style;
    color, and how to draw geometries, texts, and bitmaps. Using this class, we can define
    the color, size, and typeface of our text. Then using our canvas as a reference,
    we can draw text on our canvas. So let''s display our current distance and best
    score on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, that looks awesome, but hey, we''re still left with one part: the tutorial.
    As soon as the game starts, we need to instruct the player how to play the game.
    So, we will add an `if` statement to control the visibility of our tutorial message.
    We will guide our player to `Tap To Start`, `Keep Pressed To Go Up`, and `Release
    To Go Down`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright, we are done with our `drawText()` method, and in its entirety it would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, there''s one last thing remaining to do. We need to call our `drawText()`
    method. Any guesses where we will do this? We will do so in our `draw()` method
    of our class; let''s do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You are all set with your code for displaying the text components on our screen
    and now have a working game with a UI to display your tutorial message, distance
    covered, and best score on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review our code changes that we did in this part of our chapter; code
    changes are marked in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have completed all these steps, then you can go ahead and test your
    game on your device or emulator now. You will get an output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Tutorial displaying our message
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see our score in the game while playing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B05066_08_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Distance covered and best score updating as we play
  prefs: []
  type: TYPE_NORMAL
- en: So, here we wrap up our 2D game. Now, based on your understanding of the previous
    chapters, you can add in elements to this game such as coins, more obstacles,
    and anything that you can imagine. It is recommended by now that you customize
    this game as much as possible according to your understanding, or alternatively,
    you can also start creating a new game altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created our explosion and displayed our tutorial message, distance covered,
    and best score on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to create texts on the screen that helped us to display our score,
    and finally implemented our explosion logic to make the explosion appear on the
    screen after colliding with rocks. This is it for our 3D game. After this, you
    can build your game, test it on your device, or even tweak it further to add in
    more obstacles or make it as interesting as you want. You are only restricted
    by your imagination.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we wrap up our 2D game, and we will take a look at how to make a
    shift into the 3D world in our next chapter.
  prefs: []
  type: TYPE_NORMAL
