["```kt\nfun calculateDisplacement(initialSpeed: Float, \n                          acceleration: Float, \n                          duration: Long): Double =\n    initialSpeed * duration + 0.5 * acceleration * duration * duration\n```", "```kt\nfun calculateDisplacement(acceleration: Float, duration: Long): Double = calculateDisplacement(0f, acceleration, duration)\n```", "```kt\nfun calculateDisplacement(initialSpeed: Float, \n                          acceleration: Float, \n                          duration: Long): Double =\n    initialSpeed * duration + 0.5 * acceleration * duration * \n    duration\n```", "```kt\nfun calculateDisplacement(initialSpeed: Float = 0f, \n                          acceleration: Float, \n```", "```kt\n                          duration: Long): Double =\n    initialSpeed * duration + 0.5 * acceleration * duration * \n    duration\n```", "```kt\nval displacement = calculateDisplacement(acceleration = 9.81f, duration = 1000)\n```", "```kt\nval displacement = calculateDisplacement(10f, 9.81f, 1000)\n```", "```kt\ninterface MyInterface {\n    fun foo() {\n        // default function body\n    }\n}\n```", "```kt\ninterface EmailValidator {}\n```", "```kt\ninterface EmailValidator {\n    var input: String\n}\n```", "```kt\ninterface EmailValidator {\n    var input: String\n    fun isEmailValid(): Boolean = input.contains(\"@\")\n}\n```", "```kt\ninterface EmailValidator {\n    var input: String\n\n    fun isEmailValid(): Boolean = input.contains(\"@\")\n\n    fun getUserLogin(): String =\n        if (isEmailValid()) {\n            input.substringBefore(\"@\")\n        } else {\n            \"\"\n        }\n}\n```", "```kt\nclass RegistrationForm() {\n    fun onInputTextUpdated(text: String) {\n        // do some actions on text changed\n    }\n}\n```", "```kt\nclass RegistrationForm(override var input: String = \"\"): EmailValidator {\n    fun onInputTextUpdated(newText: String) {\n        this.input = newText\n\n        if (!isEmailValid()) {\n            print(\"Wait! You've entered wrong email...\")\n        } else {\n            print(\"Email is correct, thanks: ${getUserLogin()}!\")\n        }\n    }\n}\n```", "```kt\ninterface A {\n    fun foo() {\n        // some operations \n    }\n}\n\ninterface B {\n    fun foo() {\n        // other operations\n    }\n}\n```", "```kt\nclass MyClass: A, B {\n    override fun foo() {\n        print(\"I'm the first one here!\")\n    }\n}\n```", "```kt\nClass 'MyClass' must override public open fun foo(): Unit because it inherits multiple interface methods of it.\n```", "```kt\nfun SomeClass.newFunctionName(args): ReturnType {\n    // body\n}\n```", "```kt\nfun <T> Array<T>.swap(a: T, b: T) {\n    val positionA = indexOf(a)\n    val positionB = indexOf(b)\n\n    if (positionA < 0 || positionB < 0) {\n        throw IllegalArgumentException(\"Given param doesn't belong\n        to the array\")\n    }\n\n    val tmp = this[positionA]\n    this[positionA] = this[positionB]\n    this[positionB] = tmp\n}\n```", "```kt\nval array: Array<String> = arrayOf(\"a\", \"b\", \"c\", \"d\")\narray.swap(\"c\", \"b\")\nprint(array.joinToString())\n```", "```kt\na, c, b, d\n```", "```kt\nval <T> List<T>.lastIndex: Int  get() = size - 1\n```", "```kt\ndata class User(val login: String, val email: String, val birthday: LocalDate)\n\nfun getUser() = User(\"Agata\", \"ag@t.pl\", LocalDate.of(1990, 1, 18))\n\nval (name, mail, birthday) = getUser()\n\nprint(\"$name was born on $birthday\")\n```", "```kt\nAgata was born on 1990-01-18\n```", "```kt\n// Java code\npublic class LightBulb {\n    private final int id;\n    private boolean turnedOn = false;\n\n    public LightBulb(int id) {\n        this.id = id;\n    }\n\n    public void setTurnedOn(boolean turnedOn) {\n        this.turnedOn = turnedOn;\n    }\n\n    public boolean getTurnedOn() {\n        return turnedOn;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n```", "```kt\noperator fun LightBulb.component1() = this.id\n\n```", "```kt\noperator fun LightBulb.component2() = this.turnedOn\n```", "```kt\nval (id, turnedOn) = LightBulb(1)\nprint(\"Light bulb number $id is turned ${if (turnedOn) \"on\" else \"off\"}\")\n```", "```kt\nLight bulb number 1 is turned off\n```", "```kt\nval (_, turnedOn) = LightBulb(1)\nprint(\"Light bulb is turned ${if (turnedOn) \"on\" else \"off\"}\")\n```", "```kt\nval (login, domain) = \"agata@magdalena.com\".split(\"@\")\nprint(\"login: $login, domain: $domain\")\n```", "```kt\nlogin: agata, domain: magdalena.com\n```", "```kt\nlistOf(LightBulb(0), LightBulb(1))\n        .filter { (_, isOn) -> isOn }\n        .map { (id, _) -> id }\n```", "```kt\nval lightBulbsWithNames = \n        mapOf(LightBulb(0) to \"Bedroom\", LightBulb(1) to \"Kitchen\")\n\nfor ((lightbulb, name) in lightBulbsWithNames) {\n    lightbulb.turnedOn = true\n}\n```", "```kt\ndata class DivisionResult(val quotient: Int, val remainder: Int)\n```", "```kt\nfun divide(dividend: Int, divisor: Int): DivisionResult {\n    val quotient = dividend.div(divisor)\n    val remainder = dividend.rem(divisor)\n    return DivisionResult(quotient, remainder)\n}\n```", "```kt\nval dividend = 10\nval divisor = 3\nval (quotient, remainder) = divide(dividend, divisor)\n\nprint(\"$dividend / $divisor = $quotient r $remainder\")\n```", "```kt\n10 / 3 = 3 r 1\n```", "```kt\nfun getBestScore(): Pair<String, Int> = Pair(\"Max\", 1000)\nval (name, score) = getBestScore()\nprint(\"User $name has the best score of $score points\")\n```", "```kt\ninline fun performHavingLock(lock: Lock, task: () -> Unit) {\n    lock.lock()\n    try {\n       task()\n    }\n    finally {\n        lock.unlock()\n    }\n}\n```", "```kt\nperformHavingLock(ReentrantLock()) {\n print(\"Wait for it!\")\n}\n```", "```kt\nWait for it!\n```", "```kt\nLock lock = (Lock)(new ReentrantLock());\nlock.lock();\n\ntry {\n   String var2 = \"Wait for it!\";\n   System.out.print(var2);\n} finally {\n   lock.unlock();\n}\n```", "```kt\ninline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {  \n    // ... \n}\n```", "```kt\nval foo: Foo  \n    inline get() = Foo()  \n\nvar bar: Bar  \n    get() = ...  \n    inline set(v) { ... }\n```", "```kt\ninline var bar: Bar  \n    get() = ...  \n    set(v) { ... }\n```", "```kt\ninfix fun String.concat(next: String): String = this + next\n```", "```kt\nprint(\"This\" concat \"is\" concat \"weird\")\n```", "```kt\nThisisweird\n```", "```kt\nval namesWithBirthdays: Map<String, LocalDate> =\n        mapOf(\"Agata\" to LocalDate.of(1990, 1, 18))\n```", "```kt\ndata class ApiResponse(val gifsWithPandas: List<ByteArray>)\ndata class Error(val message: String)\n\nfun parseJsonResponse(json: String): ApiResponse {\n    Gson().fromJson(json, ApiResponse::class.java)\n}\n```", "```kt\ndependencies {\n    compile 'com.google.code.gson:gson:2.8.2'\n}\n```", "```kt\ninline fun <reified T> Gson.fromJson(json: String): T { \n    return fromJson(json, T::class.java)\n}\n```", "```kt\ndata class ApiResponse(val gifsWithPandas: List<ByteArray>)\n\nval response = Gson().fromJson<ApiResponse>(json)\n```", "```kt\nval response: ApiResponse = Gson().fromJson(json)\n```", "```kt\ndata class Position(val x: Float, val y: Float, val z: Float)\n```", "```kt\ndata class Position(val x: Float, val y: Float, val z: Float) {\n    operator fun plus(other: Position) = \n      Position(x + other.x, y + other.y, z + other.z)\n}\n```", "```kt\ndata class Position(val x: Float, val y: Float, val z: Float) {\n    operator fun plus(other: Position) = \n      Position(x + other.x, y + other.y, z + other.z)\n\n    operator fun minus(other: Position) = \n      Position(x - other.x, y - other.y, z - other.z)\n}\n```", "```kt\nval position1 = Position(132.5f, 4f, 3.43f)\nval position2 = position1 - Position(1.5f, 400f, 11.56f)\nprint(position2)\n```", "```kt\nPosition(x=131.0, y=-396.0, z=-8.13)\n```", "```kt\nvar position = Position(132.5f, 4f, 3.5f)\nposition += Position(1f, 1f, 1f)\nprint(position)\n```", "```kt\nPosition(x=133.5, y=5.0, z=4.5)\n```", "```kt\npublic class Position { \n        private final float x; \n        private final float y; \n        private final float z;\n\n        public Position(float x, float y, float z) { \n            this.x = x; \n            this.y = y; \n            this.z = z;\n        } \n\n        public int getX() { \n            return x; \n        } \n\n        public int getY() { \n            return y; \n        } \n\n        public float getZ() {\n            return z;\n        }\n\n```", "```kt\n       public Position plus(Position pos) { \n return new Position(pos.getX() + x, pos.getY() + y,\n            pos.getZ() + z); \n } \n}\n```", "```kt\nval position = Position(2.f, 9.f, 55.5f) += (2.f, 2.f, 2.f)\n```", "```kt\nval list = mutableListOf(\"A\", \"B\", \"C\")\nlist += \"D\"\nprint(list)\n```", "```kt\n[A, B, C, D]\n```"]