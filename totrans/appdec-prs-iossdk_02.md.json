["```swift\nvisitedCount:1122, userName:\"Jack Samuel\", userId:1232333332\n```", "```swift\nPFObject *userObject = [PFObject currentUser];\n[userObject setObject:[NSNumber numberWithInt:1122] forKey:@\"visitedCount\"];\n[userObject setObject:@\"Jack Samuel\" forKey:@\"userName\"];\n[userObject setObject:@\"1232333332\" forKey:@\"userId\"];\n[userObject saveInBackground];\n```", "```swift\nobjectId: \"xWMyZ4YEGZ\", visitedCount: 1122, userName: \"Jack Samuel\", userId: \"1232333332\",\ncreatedAt:\"2011-06-10T18:33:42Z\", updatedAt:\"2011-06-10T18:33:42Z\"\n```", "```swift\n    [userObject saveInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n            if (succeeded)\n                NSLog(@\"Success\");\n            else\n                NSLog(@\"Error  %@\",error);\n        }];\n    ```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"]; // 1\n[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\" block:^(PFObject  *gameScore, NSError *error) { //2\n    // Do something with the returned PFObject in the gameScore variable.\n   int score = [[gameScore objectForKey:@\"score\"] intValue];\n   NSString *playerName = [gameScore objectForKey:@\"playerName\"]; //3\n   BOOL cheatMode = [[gameScore objectForKey:@\"cheatMode\"] boolValue];\n         NSLog(@\"%@\", gameScore);\n}];\n// The InBackground methods are asynchronous, so the code written after this will be executed\n// immediately.  The codes which are dependent on the query result should be moved\n// inside the completion block above.\n```", "```swift\nNSString *objectId = gameScore.objectId;\nNSDate *updatedAt = gameScore.updatedAt;\nNSDate *createdAt = gameScore.createdAt;\n```", "```swift\n[myObject refresh];\n```", "```swift\n// Create the object.\nPFObject *gameScore = [PFObject objectWithClassName:@\"GameScore\"];\n[gameScore setObject:[NSNumber numberWithInt:1337] forKey:@\"score\"];\n[gameScore setObject:@\"Sean Plott\" forKey:@\"playerName\"];\n[gameScore setObject:[NSNumber numberWithBool:NO] forKey:@\"cheatMode\"];\n[gameScore saveEventually];\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n\n// Retrieve the object by id\n[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\" block:^(PFObject *gameScore, NSError *error) {\n\n    // Now let's update it with some new data. In this case, only cheatMode and score\n    // will get sent to the cloud. playerName hasn't changed.\n    [gameScore setObject:[NSNumber numberWithBool:YES] forKey:@\"cheatMode\"];\n    [gameScore setObject:[NSNumber numberWithInt:1338] forKey:@\"score\"];\n    [gameScore saveInBackground];\n\n}];\n```", "```swift\n[gameScore incrementKey:@\"score\"];\n[gameScore saveInBackground];\n```", "```swift\n[gameScore incrementKey:@\"score\" byAmount:8];\n```", "```swift\n[gameScore addObject:@\"flying\" forKey:@\"skills\"];\n```", "```swift\n[gameScore addObjectsFromArray:[NSArray arrayWithObjects:@\"flying\", @\"kungfu\", nil] forKey:@\"skills\"];\n```", "```swift\n[gameScore addUniqueObjectsFromArray:[NSArray arrayWithObjects:@\"flying\", @\"kungfu\", nil] forKey:@\"skills\"];\n[gameScore saveInBackground];\n```", "```swift\n[myObject deleteInBackground];\n```", "```swift\n[ myObject deleteInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {\n        if (error) {\n            // handle error\n        }\n        if (succeeded) {\n            //code on success\n        }\n    }];\n```", "```swift\n// Create course data\nPFObject *myCourse = [PFObject objectWithClassName:@\"Course\"];\n[myCourse setObject:@\"MBA\" forKey:@\"courseName\"];\n[myCourse setObject:@\"2 years\" forKey:@\"courseDuration\"];\n\n// Create student data\nPFObject *studentData = [PFObject objectWithClassName:@\"Student\"];\n[studentData setObject:@\"Jack Samuel\" forKey:@\"name\"];\n[studentData setObject:[NSNumber numberWithInt:22] forKey:@\"age\"];\n\n// Add a relation between the student and course\n[studentData setObject:myCourse forKey:@\"registeredCourse\"];\n\n// This will save both myPost and myComment\n[studentData saveInBackground];\n```", "```swift\n// Add a relation between the Post with objectId \"1zEcyElZ80\" and the comment\n[studentData setObject:[PFObject objectWithoutDataWithClassName:@\"Course\" objectId:@\"1zEcyElZ80\"] \n              forKey:@\"registeredCourse\"];\n```", "```swift\nNSNumber *number = [NSNumber numberWithInt:42];\nNSString *string = [NSString stringWithFormat:@\"the number is %i\", number];\nNSDate *date = [NSDate date];\nNSData *data = [@\"foo\" dataUsingEncoding:NSUTF8StringEncoding];\nNSArray *array = [NSArray arrayWithObjects:string, number, nil];\nNSDictionary *dictionary = [NSDictionary dictionaryWithObjectsAndKeys:number, @\"number\",string, @\"string\",\nnil];\nNSNull *null = [NSNull null];\n\nPFObject *bigObject = [PFObject objectWithClassName:@\"BigObject\"];\n[bigObject setObject:number     forKey:@\"myNumber\"];\n[bigObject setObject:string     forKey:@\"myString\"];\n[bigObject setObject:date       forKey:@\"myDate\"];\n[bigObject setObject:data       forKey:@\"myData\"];\n[bigObject setObject:array      forKey:@\"myArray\"];\n[bigObject setObject:dictionary forKey:@\"myDictionary\"];\n[bigObject setObject:null       forKey:@\"myNull\"];\n[bigObject saveInBackground];\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"GameScore\"];\n\n// Retrieve the object by id\n[query getObjectInBackgroundWithId:@\"xWMyZ4YEGZ\" block:^(PFObject *gameScore, NSError *error) {\n\n    // Now let's update it with some new data. In this case, only cheatMode and score\n    // will get sent to the cloud. playerName hasn't changed.\n    [gameScore setObject:[NSNumber numberWithBool:YES] forKey:@\"cheatMode\"];\n    [gameScore setObject:[NSNumber numberWithInt:1338] forKey:@\"score\"];\n    [gameScore saveInBackground];\n\n}];\n```", "```swift\nfindObjectsInBackgroundWithBlock: \n```", "```swift\nfindObjectsInBackgroundWithTarget:selector:\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\n[query whereKey:@\"registeredCourse\" equalTo:@\"MBA\"];\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // The find succeeded.\n    NSLog(@\"Successfully retrieved list of %d students.\", objects.count);\n  } else {\n    // Log details of the failure\n    NSLog(@\"Error: %@ %@\", error, [error userInfo]);\n  }\n}];\n```", "```swift\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"studentName = 'Jack Samuel'\"];\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\" predicate:predicate];\n```", "```swift\n    [query whereKey:@\"studentName\" notEqualTo:@\"John Simon\"];\n    ```", "```swift\n    [query whereKey:@\"studentName\" notEqualTo:@\"John Simon\"];\n    [query whereKey:@\"studentAge\" greaterThan:[NSNumber numberWithInt:18]];\n    ```", "```swift\n    query.limit = 10;\n    ```", "```swift\n    PFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\n    [query whereKey:@\"studentName\" equalTo:@\"John\"];\n    [query getFirstObjectInBackgroundWithBlock:^(PFObject *object, NSError *error) {\n      if (!object) {\n        NSLog(@\"The getFirstObject request failed.\");\n      } else {\n        // The find succeeded.\n        NSLog(@\"Successfully retrieved the object.\");\n      }\n    }];\n    ```", "```swift\n    query.skip = 10; // skip the first 10 results\n    ```", "```swift\n    // Sorts the results in ascending order by the name field\n    [query orderByAscending:@\"studentName\"];\n\n    // Sorts the results in descending order by the name field\n    [query orderByDescending:@\"studentName\"];\n    ```", "```swift\n    // Fetch list of students who scored < 50\n    [query whereKey:@\"score\" lessThan:[NSNumber numberWithInt:50]];\n\n    // Fetch list of students who scored <= 50\n    [query whereKey:@\"score\" lessThanOrEqualTo:[NSNumber numberWithInt:50]];\n    ```", "```swift\n    // Finds scores from any of Jonathan, Dario, or Shawn\n    NSArray *names = [NSArray arrayWithObjects:@\"Jonathan Walsh\",\n      @\"Dario Wunsch\",@\"Shawn Simon\",nil];\n    [query whereKey:@\"studentName\" containedIn:names];\n           Fetch objects excluding the data provided in the array.\n    // Finds scores from anyone who is neither Jonathan, Dario, nor Shawn\n    NSArray *names = [NSArray arrayWithObjects:@\"Jonathan Walsh\",@\"Dario Wunsch\",@\"Shawn Simon\",nil];\n    [query whereKey:@\"studentName\" notContainedIn:names];\n    ```", "```swift\n// Find objects where the array in arrayKey contains 2.\n[query whereKey:@\"arrayKey\" equalTo:[NSNumber numberWithInt:2]];\n```", "```swift\n// Find objects where the array in arrayKey contains each of the\n// elements 2, 3, and 4.\n[query whereKey:@\"arrayKey\" containsAllObjectsInArray:@[@2, @3, @4]];\n```", "```swift\n// Finds student name that start with \"Stuart\".\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\n[query whereKey:@\"name\" hasPrefix:@\"Stuart\"];\n```", "```swift\n// Assume PFObject *myPost was previously created.\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\n[query whereKey:@\"course\" equalTo:myCourse];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *studentList, NSError *error) {\n    // list of student enrolled for MBA course\n}];\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"student\"];\n\n// Retrieve the top scorer\n[query orderByAscending:@\"score\"];\n\n// Only retrieve the top ten\nquery.limit = [NSNumber numberWithInt:10];\n\n// Include the course data with each student score\n[query includeKey:@\"course\"];\n\n[query findObjectsInBackgroundWithBlock:^(NSArray *students, NSError *error) {\n    // Top ten scorer Students from all courses\n}];\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\n[query whereKey:@\"studentName\" equalTo:@\"Sean\"];\n[query countObjectsInBackgroundWithBlock:^(int count, NSError *error) {\n  if (!error) {\n    // The count request succeeded. Log the count\n  } else {\n    // The request failed\n  }\n}];\n```", "```swift\n// Query to fetch the list of students with highest score\nPFQuery *highestScorer = [PFQuery queryWithClassName:@\"Student\"];\n[lotsOfWins whereKey:@\"score\" greaterThan:[NSNumber numberWithInt:150]];\n\n// Query to fetch the list of students with lowest score \nPFQuery *lowestScorer = [PFQuery queryWithClassName:@\"Player\"];\n[fewWins whereKey:@\"score\" lessThan:[NSNumber numberWithInt:5]];\n\nPFQuery *query = [PFQuery orQueryWithSubqueries:[NSArray arrayWithObjects:highestScorer,lowestScorer,nil]];\n[query findObjectsInBackgroundWithBlock:^(NSArray *results, NSError *error) {\n  // results contains students with highest and lowest score.\n  }];\n```", "```swift\nPFQuery *query = [PFQuery queryWithClassName:@\"Student\"];\nquery.cachePolicy = kPFCachePolicyNetworkElseCache;\n[query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {\n  if (!error) {\n    // Results were successfully found, looking first on the\n    // network and then on disk.\n  } else {\n    // The network was inaccessible and we have no cached data for\n    // this query.\n  }\n}];\n```", "```swift\n    BOOL isInCache = [query hasCachedResult];\n    ```", "```swift\n    [query clearCachedResult];\n    ```", "```swift\n    [PFQuery clearAllCachedResults];\n    ```", "```swift\n    query.maxCacheAge = 60 * 60 * 24;  // One day, in seconds.\n    ```"]