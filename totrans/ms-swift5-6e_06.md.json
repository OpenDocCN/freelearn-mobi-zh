["```swift\nif (x > y) \n    x=0 \n```", "```swift\nif (x > y) { \n    x=0\n} \n```", "```swift\nif x > y { \n    x=0\n} \n```", "```swift\nif condition { \n    block of code\n} \n```", "```swift\nlet teamOneScore = 7 \nlet teamTwoScore = 6\nif teamOneScore > teamTwoScore { \n    print(\"Team One Won\")\n} \n```", "```swift\nif condition {\n    block of code if true\n} else {\n    block of code if not true\n} \n```", "```swift\nlet teamOneScore = 7 \nlet teamTwoScore = 6\nif teamOneScore > teamTwoScore{ \n    print(\"Team One Won\")\n} else {\n    print(\"Team Two Won\")\n} \n```", "```swift\nlet teamOneScore = 7 \nlet teamTwoScore = 6\nif teamOneScore > teamTwoScore { \n    print(\"Team One Won\")\n} else if teamTwoScore > teamOneScore { \n    print(\"Team Two Won\")\n} else {\n    print(\"We have a tie\")\n} \n```", "```swift\nvar x = 9 \nif x > 10 {\n// Functional code here\n} else {\n// Do error condition\n} \n```", "```swift\nvar x = 9\nguard x > 10 else {\n    // Do error condition \n    return\n}\n//Functional code here \n```", "```swift\nfunc guardFunction(str: String?) { \n    guard let goodStr = str else { \n        print(\"Input was nil\")\n        return\n}\n    print(\"Input was \\(goodStr)\")\n} \n```", "```swift\nswitch value { \n    case match1:\n        block of code \n    case match2:\n        block of code\n        //as many cases as needed \n    default:\n        block of code\n} \n```", "```swift\nvar speed = 300000000\nswitch speed {\n    case 300000000:\n        print(\"Speed of light\") \n    case 340:\n        print(\"Speed of sound\") \n    default:\n        print(\"Unknown speed\")\n} \n```", "```swift\nvar num = 5 \nswitch num {\n    case 1 :\n        print(\"number is one\") \n    case 2 :\n        print(\"Number is two\") \n    case 3 :\n        print(\"Number is three\")\n} \n```", "```swift\nvar char : Character = \"e\" \nswitch char {\n    case \"a\", \"e\", \"i\", \"o\", \"u\": \n        print(\"letter is a vowel\")\n    case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\",\"x\", \"y\", \"z\":\n        print(\"letter is a consonant\") \n    default:\n        print(\"unknown letter\")\n} \n```", "```swift\nvar grade = 93\nswitch grade {\n    case 90...100: print(\"Grade is an A\")\n    case 80...89: print(\"Grade is a B\")\n    case 70...79: print(\"Grade is an C\")\n    case 60...69: print(\"Grade is a D\")\n    case 0...59: print(\"Grade is a F\")\n    default:\n        print(\"Unknown Grade\")\n} \n```", "```swift\nvar studentId = 4 \nvar grade = 57 \nswitch grade {\n    case 90...100: \n        print(\"Grade is an A\")\n    case 80...89: \n        print(\"Grade is a B\")\n    case 70...79: \n        print(\"Grade is an C\")\n    case 55...69 where studentId == 4: \n        print(\"Grade is a D for student 4\")\n    case 60...69: \n        print(\"Grade is a D\")\n    case 0...59: \n        print(\"Grade is a F\")\n    default:\n        print(\"Unknown Grade\")\n} \n```", "```swift\nvar studentId = 4 \nvar grade = 57 \nswitch grade {\n    case 90...100: \n        print(\"Grade is an A\")\n    case 80...89: \n        print(\"Grade is a B\")\n    case 70...79: \n        print(\"Grade is an C\")\n    case 60...69: \n        print(\"Grade is a D\")\n    case 0...59: \n        print(\"Grade is a F\")\n        //The following case statement would never be reached because\n        //the grades would always match one of the previous two \n    case 55...69 where studentId == 4:\n        print(\"Grade is a D for student 4\")\n    default:\n        print(\"Unknown Grade\")\n} \n```", "```swift\nenum Product {\n    case Book(String, Double, Int) \n    case Puzzle(String, Double)\n}\nvar order = Product.Book(\"Mastering Swift 4\", 49.99, 2017) \nswitch order {\n    case .Book(let name, let price, let year):\n        print(\"You ordered the book \\(name): \\(year) for \\(price)\") \n    case .Puzzle(let name, let price):\n        print(\"You ordered the Puzzle \\(name) for \\(price)\")\n} \n```", "```swift\nenum Planets {\n    case Mercury, Venus, Earth, Mars, Jupiter \n    case Saturn, Uranus, Neptune\n}\nvar planetWeLiveOn = Planets.Earth\n// Using the switch statement \nswitch planetWeLiveOn {\n    case .Mercury:\n        print(\"We live on Mercury, it is very hot!\") \n    case .Venus:\n        print(\"We live on Venus, it is very hot!\") \n    case .Earth:\n        print(\"We live on Earth, just right\") \n    case .Mars:\n        print(\"We live on Mars, a little cold\") \n    case .Jupiter, .Saturn, .Uranus, .Neptune:\n        print(\"Where do we live?\")\n} \n```", "```swift\nswitch planetWeLiveOn { \n    case .Mercury:\n        print(\"We live on Mercury, it is very hot!\") \n    case .Venus:\n        print(\"We live on Venus, it is very hot!\") \n    case .Earth:\n        print(\"We live on Earth, just right\") \n    case .Mars:\n        print(\"We live on Mars, a little cold\") \n    case .Jupiter, .Saturn, .Uranus, .Neptune:\n        print(\"Where do we live?\") \n    @unknown default:\n        print(\"Unknown planet\")\n} \n```", "```swift\nvar cities1 = [\"London\", \"Paris\", \"Seattle\", \"Boston\", \"Moscow\"]\nvar cities2 = [\"London\", \"Paris\", \"Tulsa\", \"Boston\", \"Tokyo\"]\nlet diff = cities2.difference(from: cities1)\nfor change in diff {\n    switch change {\n    case .remove(let offset, let element, _ ):\n        cities2.remove(at: offset)\n    case .insert(let offset, let element, _):\n        cities2.insert(element, at: offset)\n} \n```", "```swift\npublic enum Change {\n    case insert(offset: Int, element: ChangeElement, associatedWith: Int?)\n    case remove(offset: Int, element: ChangeElement, associatedWith: Int?)\n} \n```", "```swift\nvar cities1 = [\"London\", \"Paris\", \"Seattle\", \"Boston\", \"Moscow\"]\nvar cities2 = [\"London\", \"Paris\", \"Tulsa\", \"Boston\", \"Tokyo\"]\nfor change in diff {\n    switch change {\n    case .remove(let offset, let element, _ ):\n        cities2.remove(at: offset)\n    default:\n        break\n    }\n} \n```", "```swift\nlet myDog = (\"Maple\", 4)\nswitch myDog {\n    case (\"Lily\", let age):\n        print(\"Lily is my dog and is \\(age)\") \n    case (\"Maple\", let age):\n        print(\"Maple is my dog and is \\(age)\") \n    case (\"Dash\", let age):\n        print(\"Dash is my dog and is \\(age)\") \n    default:\n        print(\"unknown dog\")\n} \n```", "```swift\nswitch myDog { \n    case(_, 0...1): \n        print(\"Your dog is a puppy\") \n    case(_, 2...7): \n        print(\"Your dog is middle aged\") \n    case(_, 8...): \n        print(\"Your dog is getting old\") \n    default: \n        print(\"Unknown\") \n} \n```", "```swift\nlet myNumber = 10 \nswitch myNumber {\n    case _ where myNumber.isMultiple(of: 2): \n        print(\"Multiple of 2\")\n    case _ where myNumber.isMultiple(of: 3): \n        print(\"Multiple of 3\")\n    default:\n        print(\"No Match\")\n} \n```", "```swift\nfor variable in collection/range { \n    block of code\n} \n```", "```swift\nfor index in 1...5 { \n    print(index)\n} \n```", "```swift\nvar countries = [\"USA\",\"UK\", \"IN\"] \nfor item in countries {\n    print(item)\n} \n```", "```swift\nvar dic = [\"USA\": \"United States\", \"UK\": \"United Kingdom\",\"IN\":\"India\"]\nfor (abbr, name) in dic { \n    print(\"\\(abbr) --\\(name)\")\n} \n```", "```swift\nwhile condition { \n    block of code\n} \n```", "```swift\nvar ran = 0 while ran < 7 {\n    ran = Int.random(in: 1..<20)\n} \n```", "```swift\nrepeat {\n    block of code\n} while condition \n```", "```swift\nvar ran: Int repeat {\n    ran = Int.random(in: 1..>20)\n} while ran < 4 \n```", "```swift\nfor number in 1...30 { \n    if number % 3 == 0 {\n        print(number)\n    }\n} \n```", "```swift\nfor number in 1...30 where number % 3 == 0 { \n    print(number)\n} \n```", "```swift\nvar worldSeriesWinners = [ \n    (\"Red Sox\", 2004),\n    (\"White Sox\", 2005),\n    (\"Cardinals\", 2006),\n    (\"Red Sox\", 2007),\n    (\"Phillies\", 2008),\n    (\"Yankees\", 2009),\n    (\"Giants\", 2010),\n    (\"Cardinals\", 2011),\n    (\"Giants\", 2012),\n    (\"Red Sox\", 2013),\n    (\"Giants\", 2014),\n    (\"Royals\", 2015)\n]\nfor case let (\"Red Sox\", year) in worldSeriesWinners { \n    print(year)\n} \n```", "```swift\nlet myNumbers: [Int?] = [1, 2, nil, 4, 5, nil, 6]\nfor case let .some(num) in myNumbers { \n    print(num)\n} \n```", "```swift\nenum Optional < Wrapped > { \n    case none,\n    case some(Wrapped)\n} \n```", "```swift\nlet myNumbers: [Int?] = [1, 2, nil, 4, 5, nil, 6]\nfor case let num? in myNumbers where num < 3 { \n    print(num)\n} \n```", "```swift\nlet myNumbers: [Int?] = [1, 2, nil, 4, 5, nil, 6]\nfor num in myNumbers {\n    if let num = num {\n        if num < 3 {\n            print(num)\n        }\n    }\n} \n```", "```swift\nenum Identifier { \n    case Name(String) \n    case Number(Int) \n    case NoIdentifier\n}\nvar playerIdentifier = Identifier.Number(2) \nif case let .Number(num) = playerIdentifier {\n    print(\"Player's number is \\(num)\")\n} \n```", "```swift\nvar playerIdentifier = Identifier.Number(2)\nif case let .Number(num) = playerIdentifier, num == 2 { \n    print(\"Player is either XanderBogarts or Derek Jeter\")\n} \n```", "```swift\nfor i in 1...10 { \n    if i % 2 == 0 {\n        continue\n}\n    print(\"\\(i) is odd\")\n} \n```", "```swift\n1 is odd\n3 is odd\n5 is odd\n7 is odd\n9 is odd \n```", "```swift\nfor i in 1...10 { \n    if i % 2 == 0 {\n        break\n}\n    print(\"\\(i) is odd\")\n} \n```", "```swift\n1 is odd \n```", "```swift\nvar name = \"Jon\"\nvar sport = \"Baseball\"\nswitch sport {\n    case \"Baseball\":\n        print(\"\\name) plays Baseball\")\n        fallthrough\n    case \"Basketball\":\n        print(\"\\(name) plays Basketball\")\n        fallthrough\n    default:\n        print(\"Unknown sport\")\n} \n```", "```swift\nJon plays Baseball\nJon plays Basketball\nUnknown sport \n```"]