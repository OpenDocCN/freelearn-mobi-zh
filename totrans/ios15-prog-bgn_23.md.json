["```swift\n    struct FilterItem {\n       let filter: String?\n       let name: String?\n       init(dict: [String: String]) {\n          self.filter = dict[\"filter\"] \n          self.name = dict[\"name\"]\n       }\n    }\n    ```", "```swift\n    class FilterDataManager: DataManager {\n       func fetch() -> [FilterItem] {\n          var filterItems: [FilterItem] = []\n          for data in loadPlist(file: \"FilterData\") {\n             filterItems.append(FilterItem(dict: \n             data as! [String: String]))\n          }\n          return filterItems\n       }\n    }\n    ```", "```swift\n    import UIKit framework provides the required infrastructure for your iOS app. You import UIKit instead of Foundation because support for the UIImage class is not available in Foundation.\n\n    ```", "```swift\n\n    Core Image is an image processing and analysis technology that provides high-performance processing for still and video images. You import `CoreImage` as it is required to access the built-in photo filters.\n\n    ```", "```swift\n\n    Here, you declare a protocol named `ImageFiltering`. This protocol specifies a method, `apply(filter:originalImage:)`, that takes a filter name and an image as parameters.\n\n    ```", "```swift\n\n    This extension of the `ImageFiltering` protocol contains the implementation of the `apply(filter:originalImage:)` method. This means that any class that adopts the `ImageFiltering` protocol will be able to execute this method.\n\n    ```", "```swift\n\n    This statement converts the original image to a `CIImage` instance so that you can apply filters to it, and assigns it to `initialCIImage`.\n\n    ```", "```swift\n\n    This statement stores the original image orientation in `originalOrientation`.\n\n    ```", "```swift\n\n    This `guard` statement gets the filter with the same name as `filter` and assigns it to `ciFilter`, and returns the original image if the filter is not found.\n\n    ```", "```swift\n\n    These statements apply the selected filter to `initialCIImage` and store the result in `filteredCIImage`.\n\n    ```", "```swift\n\n    These statements convert the `CIImage` instance stored in `filteredCIImage` back into a `UIImage` instance and returns it.\n    ```", "```swift\n    import UIKit\n    class FilterCell: UICollectionViewCell {\n    FilterCell class has two properties: a label, nameLabel, and an image view, thumbnailImageView. The label will display the filter name, while the image view will display a thumbnail preview of the filter.This class also contains two methods, `awakeFromNib()` and  `set(filterItem:imageForThumbnail:)`. The `awakeFromNib()` method is called after the `FilterCell` instance has been loaded, and the two statements inside it round the corners of the image view. The `set(filterItem:imageForThumbnail:)` method takes `UIImage` and `FilterItem` instances as parameters, assigns the `name` property of the `FilterItem` instance to `nameLabel`, applies the filter specified by the `filter` property to the `UIImage` instance, and assigns the image with the filter applied to `thumbnailImageView`. Important InformationFor more details about `awakeFromNib()`, see this link: [https://developer.apple.com/documentation/objectivec/nsobject/1402907-awakefromnib](https://developer.apple.com/documentation/objectivec/nsobject/1402907-awakefromnib).\n    ```", "```swift\n    import UIKit\n    AVFoundation framework. This framework contains methods for capturing, processing, synthesizing, controlling, importing, and exporting audiovisual media on Apple platforms.\n\n    ```", "```swift\n\n    This statement declares the `PhotoFilterViewController` class, a subclass of the `UIViewController` class.\n\n    ```", "```swift\n\n    This is an outlet for the image view that will display the user-selected photo with the filter applied. \n\n    ```", "```swift\n\n    This is an outlet for the collection view that will display thumbnail previews of each filter.\n\n    ```", "```swift\n\n    This statement assigns an instance of the `FilterDataManager` class to the  `manager` property.\n\n    ```", "```swift\n\n    Each restaurant has a unique numeric identifier. This property is used to store that identifier. You'll see how it's used when storing photos using `FilterItem` instances provided by `manager`.\n\n    ```", "```swift\n\n    This method calls an `initialize()` method when the `PhotoFilterViewController` instance loads its view. Note that this will generate an error, since `initialize()` hasn't been implemented yet.\n    ```", "```swift\n    // MARK: - Private Extension\n    private extension PhotoFilterViewController {\n       func initialize() { \n          setupCollectionView() \n          checkSource()\n       }\n    }\n    ```", "```swift\n    func setupCollectionView() {\n       let layout = UICollectionViewFlowLayout() \n       layout.scrollDirection = .horizontal \n       layout.sectionInset = UIEdgeInsets(top: 7, \n       left: 7, bottom: 7, right: 7) \n       layout.minimumInteritemSpacing = 0 \n       layout.minimumLineSpacing = 7\n       collectionView.collectionViewLayout = layout \n       collectionView.dataSource = self \n       collectionView.delegate = self\n    }\n    func checkSource() {\n       let cameraMediaType = AVMediaType.video \n       let cameraAuthorizationStatus = \n       AVCaptureDevice.authorizationStatus(for: \n       cameraMediaType)\n       switch cameraAuthorizationStatus { \n       case .notDetermined: \n          AVCaptureDevice.requestAccess(for: \n          cameraMediaType) { granted in \n             if granted {\n                DispatchQueue.main.async {\n                   self.showCameraUserInterface()\n                }\n             }\n          }\n       case .authorized: \n          self.showCameraUserInterface() \n       default: \n          break\n       }\n    }\n    ```", "```swift\n    setupCollectionView() \n    ```", "```swift\n    checkSource() \n    ```", "```swift\n    func showApplyFilterInterface() {\n       filters = manager.fetch()\n       if let mainImage = self.mainImage { \n          mainImageView.image = mainImage \n          collectionView.reloadData()\n       }\n    }\n    @IBAction func onPhotoTapped(_ sender: Any) {\n       checkSource()\n    }\n    ```", "```swift\n    showApplyFilterInterface() \n    ```", "```swift\n    onPhotoTapped() \n    ```", "```swift\n    extension PhotoFilterViewController: \n    UICollectionViewDataSource {\n       func collectionView(_ collectionView: \n       UICollectionView, numberOfItemsInSection \n       section: Int) -> Int {\n          filters.count\n       }\n       func collectionView(_ collectionView: \n       UICollectionView, cellForItemAt indexPath: \n       IndexPath) -> UICollectionViewCell {\n          let cell = collectionView\n          .dequeueReusableCell\n          (withReuseIdentifier: \"filterCell\", \n          for: indexPath) as! FilterCell\n          let filterItem = filters[indexPath.row]\n          if let thumbnail = thumbnail {\n             cell.set(filterItem: filterItem, \n             imageForThumbnail: thumbnail)\n          }\n          return cell\n       }\n    }\n    collectionView(_:numberOfItemsInSection:) \n    ```", "```swift\n    collectionView(_:cellForItemAt:) \n    ```", "```swift\n    extension PhotoFilterViewController: \n    UICollectionViewDelegateFlowLayout {\n       func collectionView(_ collectionView: \n       UICollectionView, layout \n       collectionViewLayout: \n       UICollectionViewLayout, sizeForItemAt \n       indexPath: IndexPath) -> CGSize {\n          let collectionViewHeight = \n          collectionView.frame.size.height \n          let topInset = 14.0\n          let cellHeight = collectionViewHeight - \n          topInset\n          return CGSize(width: 150, height: \n          cellHeight)\n       }\n    }\n    ```", "```swift\nextension PhotoFilterViewController: UIImagePickerControllerDelegate, \nUINavigationControllerDelegate {\n   func showCameraUserInterface() {\n      let imagePicker = UIImagePickerController()\n      imagePicker.delegate = self\n   #if targetEnvironment(simulator)\n      imagePicker.sourceType = \n      UIImagePickerController.SourceType.photoLibrary\n   #else\n      imagePicker.sourceType = \n      UIImagePickerController.SourceType.camera\n      imagePicker.showsCameraControls = true\n   #endif\n      imagePicker.mediaTypes = [\"public.image\"]\n      imagePicker.allowsEditing = true \n      self.present(imagePicker, animated: true, \n      completion: nil)\n   }\n   func imagePickerControllerDidCancel(_ picker: \n   UIImagePickerController) {\n      picker.dismiss(animated: true, completion: nil)\n   }\n   func imagePickerController(_ picker: \n   UIImagePickerController, \n   didFinishPickingMediaWithInfo info:\n   [UIImagePickerController.InfoKey : Any]) {\n      if let selectedImage = \n      info[UIImagePickerController.InfoKey\n      .editedImage] as? UIImage {\n         self.thumbnail = \n         selectedImage.preparingThumbnail(of: \n         CGSize(width: 100, height: 100))\n         let mainImageViewSize = \n         mainImageView.frame.size\n         self.mainImage = \n         selectedImage.preparingThumbnail(of: \n         mainImageViewSize)\n      }\n      picker.dismiss(animated: true){ \n         self.showApplyFilterInterface()\n      }\n   }\n}\n```", "```swift\nlet imagePicker = UIImagePickerController()\n```", "```swift\nimagePicker.delegate = self\n```", "```swift\n#if targetEnvironment(simulator)\n   imagePicker.sourceType = \n   UIImagePickerController.SourceType.photoLibrary\n#else\n   imagePicker.sourceType = \n   UIImagePickerController.SourceType.camera\n   imagePicker.showsCameraControls = true\n#endif\n```", "```swift\nimagePicker.mediaTypes = [\"public.image\"]\n```", "```swift\nimagePicker.allowsEditing = true \n```", "```swift\nself.present(imagePicker, animated: true, completion: nil)\n```", "```swift\nextension PhotoFilterViewController: ImageFiltering {\n   func filterMainImage(filterItem: FilterItem) {\n      if let mainImage = mainImage, let filter = \n      filterItem.filter {\n         if filter != \"None\" {\n            mainImageView.image = \n            self.apply(filter: filter, \n            originalImage: mainImage)\n         } else {\n            mainImageView.image = mainImage\n         }\n      }\n   }\n}\n```", "```swift\nextension PhotoFilterViewController: \nUICollectionViewDelegate {\n   func collectionView(_ collectionView: \n   UICollectionView, didSelectItemAt \n   indexPath: IndexPath) { \n      let filterItem = self.filters[indexPath.row] \n      filterMainImage(filterItem: filterItem)\n   }\n}\n```", "```swift\n    NSPhotoLibraryUsageDescription\n    NSCameraUsageDescription\n    ```"]