- en: Chapter 3. Building Blocks on the Android SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know how to create test projects and run the tests. It is now time to
    start digging a bit deeper to find the building blocks available to create the
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, in this third chapter, we will be covering:'
  prefs: []
  type: TYPE_NORMAL
- en: Common assertions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View assertions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other assertion types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TouchUtils, intended to test User Interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mock objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instrumentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestCase class hierarchies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be analyzing these components and showing examples of their use when
    applicable. The examples in this chapter are intentionally split from the original
    Android project containing them to let you concentrate and focus only on the subject
    being presented, although the complete examples can be downloaded as explained
    later. Right now, we are interested in the trees and not the forest.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the examples presented, we will be identifying common, reusable patterns
    that will help you in the creation of tests for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: The demonstration application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a very simple application to demonstrate the use of some of
    the tests in this chapter. The source for this application can be downloaded from
    [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot shows this application running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The demonstration application](img/3500_03_01(2).jpg)'
  prefs: []
  type: TYPE_IMG
- en: Assertions in depth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assertions are methods that should check for a condition that could be evaluated
    and throw an exception if the condition is not met, thus aborting the execution
    of the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JUnit API includes the class `Assert`, which is the base class all of the
    test case classes. It holds several assertion methods useful for writing tests.
    These inherited methods test for a variety of conditions and are overloaded to
    support different parameter types. They can be grouped together in different sets,
    depending on the condition checked; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEquals`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertFalse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNotNull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNotSame`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertSame`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTrue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fail`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The condition tested is pretty obvious and easily identifiable by the method
    name. Perhaps the ones that deserve some attention are `assertEquals()` and `assertSame()`.
    The former when used on objects asserts that both objects passed as parameters
    are equal, calling the objects' `equals()` method. The latter asserts that both
    objects refer to the same object. If in some case `equals()` is not implemented
    by the class, then `assertEquals()` and `assertSame()` will do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: When one of these assertions fails inside a test an `AssertionFailedException`
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Occasionally, during the development process you may need to create a test
    that you are not implementing at that precise time. However, you want to flag
    that the creation of the test was postponed. We did this in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Testing"), *Getting Started with Testing* when
    we added just the test method stubs. In those cases you may use the `fail` method
    which always fails and use a custom message indicating the condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another common use for `fail()` that is worth mentioning. If we need
    to test if a method throws an exception we can surround the code with a try-catch
    block and force a fail if the exception was not thrown. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Custom messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Speaking about custom messages, it is worth knowing that all `assert` methods
    provide an overloaded version including a custom `String` message. Should the
    assertion fail this custom message will be printed by the test runner instead
    of a default message. This custom message is extremely useful for easily identifying
    the failure once you are looking at the test report, so it is highly recommended
    as a best practice to use this version.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a trivial test using this recommendation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the example we can see another practice that would help you organize and
    understand your tests easily. This is the use of explicit names for variables
    holding the expected and actual values.
  prefs: []
  type: TYPE_NORMAL
- en: Static imports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Though basic assertion methods are inherited from the Assert base class, some
    other assertions need specific imports. To improve readability of your tests there
    is a pattern of importing the assert methods statically from the corresponding
    classes. Using this pattern instead of having:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can simplify it by adding the static import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Eclipse doesn''t usually handle these static imports automatically, so if you
    want content assist (*Ctrl+SPACE*) to add static imports for you when you type
    the beginning of one of these asserts, you should add the classes to the Favorites
    list in Eclipse. To do this, navigate to **Window | Preferences | Java | Editor
    | Content Assist | Favorites | New Type**. Type in: **android.test.ViewAsserts**
    and then add another type: **android.test.MoreAsserts**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Static imports](img/3500_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: View assertions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The assertions introduced earlier handle a variety of types as parameters but
    they are only intended to test simple conditions or simple objects.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have `assertEquals(short expected, short actual)` to test `short`
    values, `assertEquals(int expected, int actual)` to test integer values, `assertEquals(Object
    expected, Object actual)` to test any `Object` instance, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Usually while testing user interfaces in Android, you will face the necessity
    of more sophisticated methods, mainly related with `Views`. In this respect, Android
    provides a class with plenty of assertions in `android.test.ViewAsserts` (see
    [http://developer.android.com/reference/android/test/ViewAsserts.html](http://developer.android.com/reference/android/test/ViewAsserts.html)
    for details) that test the relationships between Views and their absolute and
    relative positions on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'These methods are also overloaded to provide different conditions. Among the
    assertions, we can find:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertBaselineAligned:` Asserts that two views are aligned on their baseline,
    that is their baselines are on the same y location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertBottomAligned:` Asserts that two views are bottom aligned, that is their
    bottom edges are on the same y location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGroupContains:` Asserts that the specified group contains a specific
    child once and only once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGroupIntegrity:` Asserts the specified group''s integrity. The children
    count should be >= 0 and each child should be non-null.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertGroupNotContains:` Asserts that the specified group does not contain
    a specific child.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertHasScreenCoordinates:` Asserts that a view has a particular x and y
    position on the visible screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertHorizontalCenterAligned:` Asserts that the test view is horizontally
    center aligned with respect to the reference view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertLeftAligned:` Asserts that two views are left aligned, that is their
    left edges are on the same x location. An optional margin can also be provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertOffScreenAbove:` Asserts that the specified view is above the visible
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertOffScreenBelow:` Asserts that the specified view is below the visible
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertOnScreen:` Asserts that a view is on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertRightAligned:` Asserts that two views are right-aligned, that is their
    right edges are on the same x location. An optional margin can also be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertTopAligned:` Asserts that two views are top-aligned, that is their top
    edges are on the same y location. An optional margin can also be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertVerticalCenterAligned:` Asserts that the test view is vertically center
    aligned with respect to the reference view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example shows how you can use `ViewAsserts` to test the user
    interface layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `assertOnScreen` method uses an origin to start looking for the requested
    `Views`. In this case we are using the top-level window decor View. If for some
    reason you don't need to go that high in the hierarchy or if this approach is
    not suitable for your test, you may use another root `View` in the hierarchy;
    for example `View.getRootView()` which in our concrete example would be `mMessage.getRootView().`
  prefs: []
  type: TYPE_NORMAL
- en: Even more assertions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the assertions reviewed previously do not seem to be enough for your tests'
    needs, there is yet another class included in the Android framework that covers
    other cases. This class is `MoreAsserts` ([http://developer.android.com/reference/android/test/MoreAsserts.html](http://developer.android.com/reference/android/test/MoreAsserts.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'These methods are also overloaded, to support different conditions. Among these
    assertions we can find:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assertAssignableFrom:` Asserts that an object is assignable to a class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertContainsRegex:` Asserts that an expected `Regex` matches any substring
    of the specified `String`. It fails with the specified message if it does not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertContainsInAnyOrder:` Asserts that the specified `Iterable` contains
    precisely the elements expected, but in any order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertContainsInOrder:` Asserts that the specified `Iterable` contains precisely
    the elements expected, in the same order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertEmpty:` Asserts that an `Iterable` is empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertEquals` for some `Collections` not covered in JUnit asserts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertMatchesRegex:` Asserts that the specified `Regex` exactly matches the
    `String` and fails with the provided message if it does not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNotContainsRegex:` Asserts that the specified `Regex` does not match
    any substring of the specified String, and fails with the provided message if
    it does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNotEmpty:` Asserts that some `Collections` not covered in JUnit asserts
    are not empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assertNotMatchesRegex:` Asserts that the specified `Regex` does not exactly
    match the specified String, and fails with the provided message if it does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkEqualsAndHashCodeMethods:` Utility for testing `equals()` and `hashCode()`
    results at once. Tests that `equals()` applied to both objects matches the specified
    result.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This test below checks for an error during the invocation of the capitalization
    method called via a click on the UI button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that because this is a test that modifies the user interface, we must
    annotate it with `@UiThreadTest`, otherwise it won''t be able to alter the UI
    from a different thread and we will receive the following exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '**03-02 23:06:05.826: INFO/TestRunner(610): ----- begin exception -----**'
  prefs: []
  type: TYPE_NORMAL
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): android.view.ViewRoot$CalledFromWrongThreadException:
    Only the original thread that created a view hierarchy can touch its views**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): at android.view.ViewRoot.checkThread(ViewRoot.java:2932)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[...]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**03-02 23:06:05.862: INFO/TestRunner(610): at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1447)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**03-02 23:06:05.892: INFO/TestRunner(610): ----- end exception -----**'
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with regular expressions, invest some time and visit
    [http://developer.android.com/reference/java/util/regex/package-summary.html](http://developer.android.com/reference/java/util/regex/package-summary.html),
    it will be worth it!
  prefs: []
  type: TYPE_NORMAL
- en: In this particular case, we are looking for the word "ERROR" contained in the
    result with a case insensitive match (setting the flag 'i' for this purpose).
    That is, if for some reason capitalization didn't work in our application and
    it contains an error message we will detect this condition with the assertion.
  prefs: []
  type: TYPE_NORMAL
- en: The TouchUtils class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, when testing UIs, it is helpful to simulate different kinds of touch
    events. These touch events can be generated in many different ways but probably
    `android.test.TouchUtils` is the simplest to use. This class provides reusable
    methods for generating touch events in test cases that are derived from `InstrumentationTestCase`.
  prefs: []
  type: TYPE_NORMAL
- en: Featured methods allow simulated interaction with the UI under test. `TouchUtils`
    provides the infrastructure to inject the events using the correct UI or main
    thread, so no special handling is needed and you don't need to annotate the test
    using `@UIThreadTest`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mentioned methods support:'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on a View and releasing it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tapping on a View, that is touching it and quickly releasing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long clicking on a View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following test represents a typical usage of `TouchUtils:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This test does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Repositions the list at the beginning to start from a known condition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll the list several times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the first visible position to see that the list was correctly scrolled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the content of the element to verify that it is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even the most complex UIs can be tested in this way and it will help you detect
    a variety of conditions that could potentially affect the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Mock Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We visited the Mock Objects provided by the Android testing framework in [Chapter
    1](ch01.html "Chapter 1. Getting Started with Testing"), *Getting Started with
    Testing* and evaluated the concerns regarding not using real objects in order
    to isolate our tests from the surrounding environment.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter deals with Test Driven Development, and if we were Test Driven
    Development purists we may argue about the use of mock objects and be more inclined
    to use real ones. Martin Fowler calls these two styles the *Classical* and *Mockist*
    Test Driven Development dichotomy in his great article *Mocks Aren't Stubs*. It
    can be read online at [http://www.martinfowler.com/articles/mocksArentStubs.html](http://www.martinfowler.com/articles/mocksArentStubs.html).
  prefs: []
  type: TYPE_NORMAL
- en: Independent of that discussion, we are introducing here the available Mock Objects
    as one of the available building blocks because sometimes introducing mock objects
    in our tests is recommended, desirable, useful, or even unavoidable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android SDK provides some classes in the subpackage `android.test.mock` to
    help us in this quest:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MockApplication:` A mock implementation of the `Application` class. All methods
    are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockContentProvider:` A mock implementation of `ContentProvider`. All methods
    are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockContentResolver:` A mock implementation of the `ContentResolver` class
    that isolates the test code from the real content system. All methods are non-functional
    and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockContext:` A mock Context class. This can be used to inject other dependencies.
    All methods are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockCursor:` A mock Cursor class that isolates the test code from real Cursor
    implementation. All methods are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockDialogInterface:` A mock implementation of `DialogInterface` class. All
    methods are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockPackageManager:` A mock implementation of `PackageManager` class. All
    methods are non-functional and throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MockResources:` A mock Resources class. All methods are non-functional and
    throw `UnsupportedOperationException`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we mentioned, all of these classes have non-functional methods that throw
    `UnsupportedOperationException` if used. So, if you need to use some of these
    methods or if you detect that your test is failing with this `Exception`, you
    should extend one of these base classes and provide the required functionality.
  prefs: []
  type: TYPE_NORMAL
- en: MockContext overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MockContext` class implements all methods in a non-functional way and throws
    `UnsupportedOperationException`. So, if you forgot to implement one of the needed
    methods for the test case you are handling, this exception will be thrown and
    you can instantly detect the situation.
  prefs: []
  type: TYPE_NORMAL
- en: This mock can be used to inject other dependencies, mocks, or monitors into
    the classes under test. A finer level of control can be obtained by extending
    this class.
  prefs: []
  type: TYPE_NORMAL
- en: Extend this class to provide your desired behavior, overriding the corresponding
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: As we will cover next, the Android SDK provides some pre-built mock `Contexts`
    that are useful in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: The IsolatedContext class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your tests you may find the need to isolate the `Activity` under test to
    prevent interaction with other components. This can be a complete isolation, but
    sometimes this isolation avoids interacting with other components and for your
    `Activity` to behave correctly some connection with the system is still required.
  prefs: []
  type: TYPE_NORMAL
- en: For those cases, the Android SDK provides `android.test.IsolatedContext`, a
    mock `Context` that prevents interaction with most of the underlying system but
    also satisfies the needs of interacting with other packages or components like
    `Services` or `ContentProviders.`
  prefs: []
  type: TYPE_NORMAL
- en: Alternate route to file and database operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, all we need is to be able to provide an alternate route to the
    file and database operations. For example, if we are testing the application on
    a real device, perhaps we don't want to affect existing files during our tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Such cases can take advantage of another class that is not part of the `android.test.mock`
    subpackage but of `android.test` instead: `RenamingDelegatingContext`.'
  prefs: []
  type: TYPE_NORMAL
- en: This class lets us alter operations on files and databases by having a prefix
    that is specified in the constructor. All other operations are delegated to the
    delegating Context that you must specify in the constructor too.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose our `Activity` under test uses some files we want to control in some
    way, maybe introducing specialized content or a fixture to drive our tests and
    we don't want to or we can't use the real files. In this case we create a `RenamingDelegatingContext`
    specifying a prefix; we add this prefix to the replacement file names and our
    unchanged `Activity` will use them instead.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if our Activity tries to access a file named `birthdays.txt`, and
    we provide `RenamingDelegatingContext` specifying the prefix "test", then this
    same Activity will access the file `testbirthdays.txt` instead, when it is being
    tested.
  prefs: []
  type: TYPE_NORMAL
- en: The MockContentResolver class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MockContentResolver` class implements all methods in a non-functional way
    and throws the exception `UnsupportedOperationException` if you attempt to use
    them. The reason for this class is to isolate tests from the real content.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say your application uses a `ContentProvider` maybe from more than one
    `Activity`. You can create unit-tests for this `ContentProvider` using `ProviderTestCase2`,
    which we will be looking at shortly, and in some cases implementing a `RenamingDelegatingContext`
    as previously described.
  prefs: []
  type: TYPE_NORMAL
- en: But when we try to produce functional or integration tests of our Activities
    against the `ContentProvider`, it's not so evident what test case to use. The
    most obvious choice is `ActivityInstrumentationTestCase2` if your functional tests
    mainly simulate user experience because you may need `sendKeys()` or similar methods,
    which are readily available in these tests.
  prefs: []
  type: TYPE_NORMAL
- en: The first problem you may encounter then is that it's not clear where to inject
    a `MockContentResolver` in your test to be able to use a test database instance
    or database fixture with your `ContentProvider`. There's no way to inject a `MockContext`
    either.
  prefs: []
  type: TYPE_NORMAL
- en: This problem will be solved in [Chapter 7](ch07.html "Chapter 7. Testing Recipes"),
    *Testing Recipes* where further details are provided.
  prefs: []
  type: TYPE_NORMAL
- en: The TestCase base class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the base class of all other test cases in the JUnit framework. It implements
    the basic methods that we were analyzing in previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: '`TestCase` also implements the `junit.framework.Test` interface.'
  prefs: []
  type: TYPE_NORMAL
- en: This is the UML class diagram of `TestCase` and the `Test` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![The TestCase base class](img/3500_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Test cases should either extend `TestCase` directly or one of its descendants.
  prefs: []
  type: TYPE_NORMAL
- en: There are other methods beside the ones explained before.
  prefs: []
  type: TYPE_NORMAL
- en: The no-argument constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All test cases require a default constructor because sometimes, depending on
    the test runner used, this is the only constructor that is invoked. It is also
    used for serialization.
  prefs: []
  type: TYPE_NORMAL
- en: According to the documentation, this method is not intended to be used by mere
    mortals without calling `setName(String name)`.
  prefs: []
  type: TYPE_NORMAL
- en: A common pattern is to use a default constant test case name in this constructor
    and invoke the **Given name** constructor afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The given name constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This constructor takes a name as an argument to give to the test case. It will
    appear in test reports and will be helpful when you try to identify failed tests.
  prefs: []
  type: TYPE_NORMAL
- en: The setName() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some classes extending `TestCase` that don't provide a given name
    constructor. In such cases the only alternative is to call `setName(String name)`.
  prefs: []
  type: TYPE_NORMAL
- en: The AndroidTestCase base class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class can be used as a base class for general purpose Android test cases.
  prefs: []
  type: TYPE_NORMAL
- en: This is the UML class diagram of `AndroidTestCase` and the closest related classes.
  prefs: []
  type: TYPE_NORMAL
- en: '![The AndroidTestCase base class](img/3500_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use this class when you need access to an Activity Context like Resources, databases,
    or files in the filesystem. Context is stored as a field in this class conveniently
    named `mContext` and can be used inside the tests if needed. The `getContext()`
    method can be used too.
  prefs: []
  type: TYPE_NORMAL
- en: Tests based on this class can start more than one `Activity` using `Context.startActivity()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various test cases in Android SDK that extend this base class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ApplicationTestCase<T extends Application>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProviderTestCase2<T extends ContentProvider>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServiceTestCase<T extends Service>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The assertActivityRequiresPermission() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This assertion method checks that the launching of a particular `Activity`
    is protected by specific permission. It takes three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`packageName:` A String indicating the package name of the Activity to launch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`className:` A String indicating the class of the Activity to launch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`permission:` A String with the permission to query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Activity` is launched and then a `SecurityException` is expected mentioning
    that the required permission is missing in the error message. The Activity is
    not handled by this test and thus an `Instrumentation` is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This test checks the requirement of the `android.Manifest.permission.WRITE_EXTERNAL_STORAGE`
    permission, needed to write to external storage, in the Activity `MyContactsActivity:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always use the constants describing the permissions from `android.Manifest.permission`,
    not the `Strings`, so if the implementation changes your code will still be valid.
  prefs: []
  type: TYPE_NORMAL
- en: The assertReadingContentUriRequiresPermission method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This assertion method checks that reading from a specific URI requires the permission
    provided as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It takes two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uri:` The URI that requires a permission to query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`permission:` A String containing the permission to query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `SecurityException` is generated containing the specified permission, this
    assertion is validated.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This test tries to read contacts and verifies that the correct `SecurityException`
    is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The assertWritingContentUriRequiresPermission() method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The signature for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This assertion method checks that inserting into a specific URI requires the
    permission provided as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It takes 2 parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uri:` The URI that requires a permission to query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`permission:` A String containing the permission to query'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `SecurityException` containing the specified permission is generated, this
    assertion is validated.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This test tries to write to Contacts and verifies that the correct `SecurityException`
    is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Instrumentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instrumentation is instantiated by the system before any of the application
    code is run, allowing it to monitor all of the interaction between the system
    and the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with many other Android application components, Instrumentation implementations
    are described in the `AndroidManifest.xml` under the tag`<instrumentation>`. For
    example, if you open our tests'' `AndroidManifest.xml` and look inside you will
    find:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is the Instrumentation declaration.
  prefs: []
  type: TYPE_NORMAL
- en: The `targetPackage` attribute defines the name of the package under test, `name`
    the name of the test runner, and `label` the text that will be displayed when
    this instrumentation is listed.
  prefs: []
  type: TYPE_NORMAL
- en: Please note as mentioned earlier, this declaration belongs to the test project
    and not to the main project.
  prefs: []
  type: TYPE_NORMAL
- en: The ActivityMonitor inner class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the Instrumentation class is used to monitor the interaction
    between the system and the application or Activities under test. The inner class
    `Instrumentation.ActivityMonitor` allows monitoring of a single Activity within
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s pretend that we have a `TextField` in our `Activity` that holds a URL
    and has its auto link property set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to verify that when clicked the hyperlink is correctly followed
    and a Brower is invoked, we can create a test like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the instrumentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a monitor based on an `IntentFilter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for the activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the monitor hits were incremented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the monitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using monitors we can test even the most complex interactions with the system
    and other Activities. This is a very powerful tool for creating integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: The InstrumentationTestCase class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `InstrumentationTestCase` class is the direct or indirect base class for
    various test cases that have access to Instrumentation. This is the list of the
    most important direct and indirect subclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActivityTestCase`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProviderTestCase2<T extends ContentProvider>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SingleLaunchActivityTestCase<T extends Activity>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SyncBaseInstrumentation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityInstrumentationTestCase2<T extends Activity>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityUnitTestCase<T extends Activity>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the UML class diagram of `InstrumentationTestCase` and the closest
    related classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The InstrumentationTestCase class](img/3500_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`InstrumentationTestCase` is in the `android.test` package, not shown in the
    image, and extends `junit.framework.TestCase` which extends `junit.framework.Assert`.'
  prefs: []
  type: TYPE_NORMAL
- en: The launchActivity and launchActivityWithIntent method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These utility methods are used to launch Activities from the test. If the `Intent`
    is not specified using the second option, a default `Intent` is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the template class parameter `T` is used in `activityCls` and as the
    return type, limiting its use to Activities of that type.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to specify a custom `Intent`, you can use the following code that
    also adds the `intent` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The sendKeys and sendRepeatedKeys methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When testing Activities' UI you will face the need to simulate the interaction
    with qwerty-based keyboards or DPAD buttons to send keys to complete fields, select
    shortcuts, or navigate throughout the different components.
  prefs: []
  type: TYPE_NORMAL
- en: This is what the different `sendKeys` and `sendRepeatedKeys` are for.
  prefs: []
  type: TYPE_NORMAL
- en: There is one version of `sendKeys` that accepts integer keys values. They can
    be obtained from constants defined in the `KeyEvent` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use the `sendKeys` method in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are sending *H, E*, and *Y* letter keys, the exclamation mark, and
    then the *Enter* key using their integer representations to the Activity under
    test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can create a String concatenating the keys we desire to send
    discarding the KEYCODE prefix and separating them with spaces that are ultimately
    ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, we did exactly the same as the previous test but using a `String`. Note
    that every key in the `String` can be prefixed by a repeating factor followed
    by '*' and the key to be repeated. We used 3*E in our previous example which is
    the same as "E E E", three times the letter *E*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If sending repeated keys is what we need in our tests, there is also another
    alternative that is specifically intended for these cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This is the same test implemented in a different manner. Each key is preceded
    by the repetition number.
  prefs: []
  type: TYPE_NORMAL
- en: The runTestOnUiThread helper method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `runTestOnUiThread` method is a helper method for running portions of a
    test on the UI thread.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, as we have discussed before, to run a test on the UI thread we
    can annotate it with `@UiThreadTest`.
  prefs: []
  type: TYPE_NORMAL
- en: But sometimes, we need to run only parts of the test on the UI thread because
    other parts of it are not suitable to run on that thread, or are using helper
    methods that provide the infrastructure to use that thread, like `TouchUtils`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The most common pattern is changing the focus before sending keys, so the keys
    are correctly sent to the objective `View:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We request the focus for the `mMessage EditText` before waiting for the application
    to be idle, using `Instrumentation.waitForIdleSync()`, and then sending the key
    sequence to it. Afterwards, using `TouchUtils.clickView()`, we click the `Button`
    to finally check the content of the field after the conversion.
  prefs: []
  type: TYPE_NORMAL
- en: The ActivityTestCase class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is mainly a class holding common code for other test cases that access
    Instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: You may use this class if you are implementing specific behavior for test cases
    and existing alternatives don't fit your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is not the case, you may find the following options more suitable for
    your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActivityInstrumentationTestCase2<T extends Activity>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActivityUnitTestCase<T extends Activity>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the UML class diagram of `ActivityTestCase` and the closest related
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ActivityTestCase class](img/3500_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The abstract class `android.testActivityTestCase` extends `android.test.InstrumentationTestCase`
    and serves as a base class for other different test cases, such as `android.test.ActivityInstrumentationTestCase,
    android.test.ActivityInstrumentationTestCase2`, and `android.test.ActivityUnitTestCase`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`android.test.ActivityInstrumentationTestCase` is a deprecated class since
    Android API Level 3 (Android 1.5) and should not be used in newer projects.'
  prefs: []
  type: TYPE_NORMAL
- en: The scrubClass method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is one of the protected methods in the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: It is invoked from the `tearDown()` method in several test cases implementation
    in order to clean up class' variables that may have been instantiated as non-static
    inner classes avoiding the need to hold references to them.
  prefs: []
  type: TYPE_NORMAL
- en: This is in order to prevent memory leaks for large test suites.
  prefs: []
  type: TYPE_NORMAL
- en: '`IllegalAccessException` is thrown if a problem accessing these variables is
    found.'
  prefs: []
  type: TYPE_NORMAL
- en: The ActivityInstrumentationTestCase2 class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class will probably be the one you use the most in writing Android test
    cases. It provides functional testing of a single `Activity`.
  prefs: []
  type: TYPE_NORMAL
- en: This class has access to Instrumentation and will create the `Activity` under
    test using the system infrastructure by calling `InstrumentationTestCase.launchActivity().`
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the UML class diagram showing `ActivityInstrumentationTestCase2` and
    the closest related classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ActivityInstrumentationTestCase2 class](img/3500_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The class `android.test.ActivityInstrumentationTestCase2` extends `android.test.ActivityTestCase`.
    This diagram also shows `ActivityUnitTestCase`, which also extends `ActivityTestCase`.
    Class template parameter T represents the Activity's class.
  prefs: []
  type: TYPE_NORMAL
- en: The `Activity` can then be manipulated and monitored after creation.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to provide a custom Intent to start your `Activity`, before invoking
    `getActivity()` you may inject an Intent with `setActivityIntent(Intent intent).`
  prefs: []
  type: TYPE_NORMAL
- en: This functional test would be very useful for testing interaction through the
    user interface as events can be injected to simulate user behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It should be invoked with an instance of the `Activity` class for the same `Activity`
    used as a class template parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The setUp method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen before in [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Testing"), *Getting Started with Testing* the `setUp` method is the best
    place to initialize the test case fields and other fixture components requiring
    initialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example showing some of the patterns that you may find repeatedly
    in your test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We performed the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Invoke the super method. This is a JUnit pattern that should be followed here
    to ensure correct operation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable touch mode. This should be done before the `Activity` is created by
    invoking `getActivity()` to have some effect. It sets the initial touch mode of
    the `Activity` under test to disabled. Touch mode is a fundamental Android UI
    concept and is discussed in [http://developer.android.com/resources/articles/touch-mode.html](http://developer.android.com/resources/articles/touch-mode.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Activity using `getActivity()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the instrumentation. We have access to the Instrumentation because `ActivityInstrumentationTestCase2`
    extends `InstrumentationTestCase`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Views and set fields. In these operations, note that the R class used
    is from the target package, not from the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tearDown method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually this method cleans up what was initialized in `setUp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we are only invoking the super method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The testPreconditions method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This method is used to check for some initial conditions to run our tests correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Despite its name, it is not guaranteed that this test is run before other tests.
    However, it is a good practice to collect all of the precondition tests under
    this custom name.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a `testPrecondition` test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We check only for not null values, but in this case asserting this we can also
    be sure that the Views were found using the specific IDs and that their types
    were correct, otherwise they are assigned in `setUp.`
  prefs: []
  type: TYPE_NORMAL
- en: The ProviderTestCase2<T> class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a test case designed to test the `ContentProvider` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the UML class diagram of `ProviderTestCase2` and the closest related
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ProviderTestCase2<T> class](img/3500_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The class `android.test.ProviderTestCase2` also extends `AndroidTestCase`. Class
    template parameter T represents the `ContentProvider` under test. Implementation
    of this test uses an `IsolatedContext` and a `MockContentResolver`, mock objects
    that we described earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It should be invoked with an instance of the `ContentProvider` class for the
    same `ContentProvider` used as a class template parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter is the authority for the provider, usually defined as `AUTHORITY`
    constant in the `ContentProvider` class.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a typical example of a `ContentProvider` test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In this test we are expecting the query to return a `Cursor` containing 2 rows.
    This is just an example—use the number of rows that applies for your particular
    case, and asserting this condition.
  prefs: []
  type: TYPE_NORMAL
- en: Usually in the `setUp` method we obtain a reference to the provider, `mProvider`
    in this example, using `getProvider()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is interesting to note is that because these tests are using `MockContentResolver`
    and `IsolatedContext`, the content of the real database is not affected and we
    can also run tests like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This test deletes some content of the database, but the database is restored
    to its initial content so as not to affect other tests.
  prefs: []
  type: TYPE_NORMAL
- en: The ServiceTestCase<T>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a test case specially created to test Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class, `ServiceTestCase<T>`, extends `AndroidTestCase` as is shown in
    this UML class diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ServiceTestCase<T>](img/3500_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Methods to exercise the service lifecycle like `setupService, startService,
    bindService`, and `shutDownService` are also included in this class.
  prefs: []
  type: TYPE_NORMAL
- en: The constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is only one public, non deprecated constructor for this class. This is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: It should be invoked with an instance of the `Service` class for the same `Service`
    used as a class template parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The TestSuiteBuilder.FailedToCreateTests class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The class `TestSuiteBuilder.FailedToCreateTests` is a special `TestCase` used
    to indicate a failure during the `build()` step.
  prefs: []
  type: TYPE_NORMAL
- en: 'That is, if during the test suite creation an error is detected, you will be
    receiving an exception like this one indicating the failure to construct the test
    suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Using external libraries in test projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your main Android project may require external libraries. Let's pretend that
    in one `Activity` we are creating objects from a class that is part of an external
    library. For the sake of our example, let's say the library is called `libdummy-0.0.1-SNAPSHOT.jar`
    and the mentioned class is `Dummy`. A dummy class that doesn't do anything is
    used here only to not divert your attention from the main objective which is including
    any library you may need, not just a particular one.
  prefs: []
  type: TYPE_NORMAL
- en: 'So our `Activity` would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This library should be added to the project's Java Build Path as usual as a
    JAR or external JAR depending on where the file is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a simple test. From our previous experience, we know that
    if we need to test an `Activity` we should use `ActivityInstrumentationTestCase2`,
    and this is precisely what we will do. Our simple test will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, this test won''t compile. The problem is that we are referencing
    a missing class. Our test project doesn''t know anything about `Dummy` class or
    the `libdummy` library and hence we receive this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The method getDummy() from the type DummyActivity refers to the missing type
    Dummy**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets add the `libdummy` library to the test project''s properties using the
    **Add External JARs..**. button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using external libraries in test projects](img/3500_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, doing this will lead us to another error. If you run the tests, these
    are the errors you''ll receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): FATAL EXCEPTION: main**'
  prefs: []
  type: TYPE_NORMAL
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): java.lang.IllegalAccessError:
    Class ref in pre-verified class resolved to unexpected implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: '**...[lines removed for brevity]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:868)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:626)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**08-10 00:26:11.820: ERROR/AndroidRuntime(510): at dalvik.system.NativeStart.main(Native
    Method)**'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this problem is that adding the library to both projects results
    in the same classes being inserted into both APKs. The tester project, however,
    loads classes from the tested project. The classes in the library will be loaded
    from the tester project but the classes in the tested project will refer to the
    copies in the tested project's APK. Hence the reference error.
  prefs: []
  type: TYPE_NORMAL
- en: The way to solve this problem is to export the `libdummy` entry to dependent
    projects and remove the JAR from the test project Java Build Path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how to do this in the main project''s properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using external libraries in test projects](img/3500_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that `libdummy-0.0.1-SNAPSHOT.jar` is now checked in **Order and Export**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We investigated the most relevant building blocks and reusable patterns for
    creating our tests. Along this journey we:'
  prefs: []
  type: TYPE_NORMAL
- en: Used several types of assertions from the most common ones found usually in
    JUnit tests to the most specialized assertions found in the Android SDK to exercise
    application UIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explained mock objects and their use in Android tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exemplified the use of the different tests available in the Android SDK from
    unit to functional tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Illustrated the relationships between the most common classes using UML class
    diagrams to clearly understand them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dug into Instrumentation and different monitors available for Activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have all the building blocks it is time to start creating more and
    more tests to acquire the experience needed to master the technique.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter introduces Test Driven Development using a sample project to
    expose all of its advantages.
  prefs: []
  type: TYPE_NORMAL
