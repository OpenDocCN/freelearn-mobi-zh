- en: Chapter 8. Let's Build a Platformer!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we're familiar with handling input and assets, why don't we build a
    platformer prototype? This should be a nice challenge that will introduce us to
    some more concepts and ways to work with Moai SDK.
  prefs: []
  type: TYPE_NORMAL
- en: In order to build this game, we'll copy the full content of the previous chapter's
    code and clean everything from `game.lua` that is specific to the *Concentration*
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Remove all the constants on the top of the file, the definition for the tile
    (but keep `resource_definitions` since we're going to use it).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove `self.wasClicking = false` from the `Game:start ()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the calls to `initializeTiles` and `restartGamePlay` from `Game:initialize
    ()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the methods `Game:initializeTiles()`, `Game:restartGamePlay ()`, `Game:choseCell
    ()`, `Game:alreadySelectedTile()`, `Game:swapTile ()`, `Game:resetTiles ()`, and
    `Game:removeTiles()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That should be it; now you should be good to go.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to insert a background to our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we're going to do is display a background. This should be pretty
    easy for you right now. A good idea will be searching [www.opengameart.org](http://www.opengameart.org)
    for a suitable background. That's what has been done in the code for this chapter,
    and you'll find a background in there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add the definition. If you''re using an image other than the one provided
    in the book''s code, just go ahead and change the dimensions and filename (this
    code should go inside `resources_definition`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s add a line at the bottom of the `initialize ()` method to load
    the background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And now let''s define that method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is nothing new, right? It's the same thing we did to load an image in [Chapter
    5](ch05.html "Chapter 5. Showing Images on the Screen"), *Showing Images on the
    Screen*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's play with the camera and scroll it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take into account the platform you're targeting when loading backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: The maximum texture size differs according to the **Shader Model**. You will
    be safe if you're using textures that are 1024 x 1024 or smaller; if you find
    yourself having textures that don't show up on the screen, double-check this.
    Remember that you can always split the textures into smaller ones and load several
    of them in different Props. We ran into this problem with the second scene in
    *The Insulines*; it wasn't working on some computers because it was huge, so we
    had to split it.
  prefs: []
  type: TYPE_NORMAL
- en: Camera and scrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're planning to create games in 2D, an important thing to master is how
    to use a camera, and that's what we'll do now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter this code at the beginning of `Game:initialize ()` in `game.lua`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What we're doing here is creating a new camera using the built-in `MOAICamera2D`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to assign that camera to each layer. Below the viewport assignment
    `(self.layer:setViewport ( viewport ))`, add the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This binds the layer to that camera. And that's it; when you move the camera,
    you'll see that the viewport will follow, and if you scale the camera up and down,
    it will zoom in and zoom out accordingly. We'll write a few lines to demonstrate
    this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Game:processInput ()` write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are using a method from `InputManager` that returns the difference between
    the current mouse position and the previous one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We move the camera using the `moveLoc ()` method and passing the delta in `x`,
    nothing in `y`. The third parameter tells `moveLoc ()` to take half-a-second to
    do the movement. The third parameter is used to define the curve of the animation,
    in this case, we're making it linear, so it will make a movement that is constant
    in speed. We'll go more into this later.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`MOAIEaseType` defines a bunch of useful curves for our animations; you can
    check them out at [http://getmoai.com/docs/class_m_o_a_i_ease_type.html](http://getmoai.com/docs/class_m_o_a_i_ease_type.html).'
  prefs: []
  type: TYPE_NORMAL
- en: If you run the game now, you'll see that when you move the mouse, the background
    scrolls to the left and right. That's a consequence of the camera being moved.
  prefs: []
  type: TYPE_NORMAL
- en: So, instead of moving all of the objects on screen, you just move the camera
    when you want to scroll.
  prefs: []
  type: TYPE_NORMAL
- en: What we can do later is scroll the camera to follow our character's movements.
  prefs: []
  type: TYPE_NORMAL
- en: Parallax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parallax is an effect that's often used (and abused) in games because it creates
    a feeling of depth in 2D scenes. The main idea is to create layers of images,
    which are at different distances, which move at different speeds when scrolling.
    This mimics what happens in reality with objects that are at different distances
    from a viewer (the objects far away move slower than the near ones).
  prefs: []
  type: TYPE_NORMAL
- en: We can achieve this by splitting the background into different images (each
    one representing a different plane).
  prefs: []
  type: TYPE_NORMAL
- en: '![Parallax](img/5064_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we see the old background split into three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: A cloudy background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tower that is far away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some hills that are nearer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, what we need to do is make them move at different speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Moai SDK, you can implement this using a `MOAILayer2D` method called `setParallax
    ()`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw, we'll need a couple of layers to do this. We'll replace our current
    layer with a table of layers. On `Game:initialize ()`, replace the lines for the
    layer initialization with a call to `self:setupLayers ()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then we create the actual method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll create a layer per depth plane that we want. We''ll use three planes
    in this example: a background, a far away plane, and a main plane. (Our character
    and all of the game objects should go inside the main plane)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Then we iterate through all of the layers and assign the viewport and the camera
    correctly.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Now, we create a render table with the layers in order.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: We'll then make it active.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have our layers ready to play with parallax.
  prefs: []
  type: TYPE_NORMAL
- en: Adding images to the different distances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we''ll show images on each layer for you to see how cool this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the three resource definitions we''ll need: one for each layer. The
    images can be found in the source code for this chapter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is some more information that we'll need, but instead of adding it into
    the `resource_definitions` table, we'll create another table. Even if the objects
    and definitions look the same, there is a slight conceptual difference between
    them, so it is better to keep them separated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write the following code below the `resource_definitions` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we're doing here is defining the position and the parallax information
    for each object we're creating. Well, strictly, the parallax is for the layer
    that contains the object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we''ll rewrite `Game:loadBackground ()` to look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We iterate through all the things we defined in `background_objects`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: We load the deck using the keys from the `background_objects` table.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Here we use the position attribute we defined in `background_objects`:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'And here we make use of `setParallax` and use the parallax attribute we defined
    in background objects:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: And that's it, we're now good to go. Run the game and move the mouse. You should
    now see the three different layers moving at different speeds.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to add the main character, so let's jump straight to that!
  prefs: []
  type: TYPE_NORMAL
- en: Main character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create our character, we'll need a sprite sheet with animations
    for walking, running, and jumping.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should look something like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Main character](img/5064_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First of all, we''ll create a resource definition as follows (put this below
    the background resource definition):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is pretty much the same as we used for our *Concentration* game, but note
    that we added `width` and `height`. That's the size of the tile. In the *Concentration*
    game, we defined the size of the tile in the grid, but now there is no grid, so
    we need to define it here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to handle that definition, we need to add some lines to `resource_manager.lua`,
    inside `loadTiledImage`, just below the call to `setSize()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code is similar to that in `loadImage`; the difference is that
    we divide `width` and `height` by two and use the resulting values as the rectangle's
    dimensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create a file called `character.lua` to start creating our character
    (don''t forget to `require` that file in `game.lua`) and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is basically the same as what we've been doing in order to load images
    on screen; the important part here is that initialize receives a layer as a parameter
    and adds the Prop to that layer. Can you guess why?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the reason: put the following line at the bottom of `Game:initialize
    ()` in `game.lua` (just below the call to `loadBackground`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And voilà, we have our character on screen. Loving it? I think it's pretty static.
    Let's add some animations.
  prefs: []
  type: TYPE_NORMAL
- en: Animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are going to work on the animations. We''ll introduce three new classes
    in this section: `MOAIDeckRemapper`, `MOAIAnimCurve`, and `MOAIAnim`. Let''s see
    how these interact.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, on the `character_object` table on `character.lua`, let''s add
    the following (below position):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the definition for the three animations we're going to use. Take a look
    at it and see that we define a start frame (the tileset index where the animation
    starts), the frame count (the amount of frames for the animation; these frames
    need to be sequentially placed in the tileset, as per the preceding example),
    the time between each frame, and the animation mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Similar to `MOAIEaseType`, `MOAITimer` has a bunch of different animation modes.
    You can check them out at [http://getmoai.com/docs/class_m_o_a_i_timer.html](http://getmoai.com/docs/class_m_o_a_i_timer.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we need to add a `MOAIDeckRemapper`. `MOAIDeckRemapper` is used in combination
    with an animation curve in order to tell the Prop which tileset index should be
    displayed in each animation step. Enter the following code in `Character:initialize()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll remap just one index (the character animation frame), so we reserve just
    one remapper index.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Then we assign the remapper to the Prop.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Animations](img/5064_08_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: For the animation to work, we need to create a curve. It will be used to tell
    our `MOAIDeckRemapper` instance which tileset index should be used at a given
    animation step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The remapper will be in charge of changing the current Prop's index to the correct
    one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The interesting thing is that these curves are defined using keys that set the
    value for a given point in the animation. These values are then interpolated using
    a `MOAIEaseType` curve.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is really nice, since we don't have to specify each point in our animation,
    just two of them and the rest are interpolated. Let's see how this works.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's create a method that will add an animation and review it step by step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we create an animation curve. These curves are used to generate a specific
    behavior on how to move through the frames. We create a series of points that
    will create a curve (interpolating values). The animation will query the curve
    at a specific point of time and use its value.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: A **key** is a value that we use to define the curve. We'll need two keys here
    (the start and the end of the curve), but you might want more than one (for example,
    if some part of the animation needs to run faster than the others or stuff like
    that).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using `setKey ()` we define a key:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The first parameter is the key number (starting at one). The second is the time
    at which that key should happen; in this case, since it's the first key for our
    animation, the time is zero. Then, we pass the value of that key; in our case,
    it'll be our `startFrame`, and then `MOAIEaseType`. Ease types are a way to tell
    animations to use different curves. In this case, we're using a linear curve.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The second key will be the last one. For the second parameter (`time`), we multiply
    the time between frames by the frame count, should be the total time for the animation.
    After that, we tell it to stop at `frameCount` frames after `startFrame` and,
    again, we use linear interpolation.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating our animation, this will create a linear function from `startFrame`
    at time 0 to `startFrame + frameCount` at the end of the curve. Just what we want
    for our animation.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Next, we create our animation, reserve one link that will be used to connect
    the curve to the remapper, and then we connect them.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What will happen here is that when we start the animation, it will iterate through
    the curve passing the result of the curve to the remapper. When that happens,
    the remapper will change the image displayed by the Prop. The one at the end of
    the call is the index of the remapper we'll be using; since we only reserved one,
    we pass one there.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here we set the animation mode we defined.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: To finish this, we store the animation under the name we passed as a parameter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The way this works is not trivial, so it may take a while for you to process
    it. You should play around with the definition and parameters to get an idea of
    how the `MOAIAnim` + `MOAIAnimCurve` + `MOAIDeckRemapper` workflow interacts.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll define some auxiliary methods to work with these animations:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`getAnimation` returns the animation that is indexed by name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this method, we stop the animation that is currently running if it exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following method is used to start an animation. Let's take a look at it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we stop the current animation.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Stopping the animation is really important, because a running animation consumes
    some memory, and if we don't stop it, we'll end up having tons of animations running
    all the time and consuming a lot of memory. We figured this out while developing
    *The Insulines* as well.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Then we get the animation indexed by name.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: And then we start it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: We then return it, in case we want to do something with it later (such as blocking
    the coroutine to chain multiple animations, remember?).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last thing we need to do is parse all of the animations we defined inside
    `character_object` and create the necessary animations. To do this, go to `Character:initialize`,
    and at the bottom, include the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we are iterating through all of the defined animations and are using the
    attributes as parameters for our `addAnimation ()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be that all the animations will be inside `Character.animations`
    and we''ll be able to access them through the methods created earlier (`startAnimation`
    and `stopAnimation`). To see if everything works fine, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This should start the running animation. You will want to experiment a little
    bit with this by changing the parameters in the definitions and calling different
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started to implement the initial structure for our platformer
    prototype. We created a camera and learned how to move it. We also played with
    layers and parallax. Then we added our character and learned about how to create
    animations from a tiled image.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll introduce some physics to the prototype using Box2D,
    which is already shipped with Moai SDK.
  prefs: []
  type: TYPE_NORMAL
