["```swift\nimport SpriteKit\n\nclass EncounterManager {\n    // Store your encounter file names:\n    let encounterNames:[String] = [\n        \"EncounterBats\"\n    ]\n    // Each encounter is an SKNode, store an array:\n    var encounters:[SKNode] = []\n\n    init() {\n        // Loop through each encounter scene:\n        for encounterFileName in encounterNames {\n            // Create a new node for the encounter:\n            let encounter = SKNode()\n\n            // Load this scene file into a SKScene instance:\n            if let encounterScene = SKScene(fileNamed: \n                encounterFileName) {\n                // Loop through each placeholder, spawn the \n                // appropriate game object:\n                for placeholder in encounterScene.children {\n                    if let node = placeholder as? SKNode {\n                        switch node.name! {\n                        case \"Bat\":\n                            let bat = Bat()\n                            bat.spawn(encounter, position: \n                                node.position)\n                        case \"Bee\":\n                            let bee = Bee()\n                            bee.spawn(encounter, position: \n                                node.position)\n                        case \"Blade\":\n                            let blade = Blade()\n                            blade.spawn(encounter, position: \n                                node.position)\n                        case \"Ghost\":\n                            let ghost = Ghost()\n                            ghost.spawn(encounter, position: \n                                node.position)\n                        case \"MadFly\":\n                            let madFly = MadFly()\n                            madFly.spawn(encounter, position: \n                                node.position)\n                        case \"GoldCoin\":\n                            let coin = Coin()\n                            coin.spawn(encounter, position: \n                                node.position)\n                            coin.turnToGold()\n                        case \"BronzeCoin\":\n                            let coin = Coin()\n                            coin.spawn(encounter, position: \n                                node.position)\n                        default:\n                            println(\"Name error: \\(node.name)\") \n                        }\n                    }\n                }\n            }\n\n            // Add the populated encounter node to the array:\n            encounters.append(encounter)\n        }\n    }\n\n    // We will call this addEncountersToWorld function from\n    // the GameScene to append all of the encounter nodes to the\n    // world node from our GameScene:\n    func addEncountersToWorld(world:SKNode) {\n        for index in 0 ... encounters.count - 1 {\n            // Spawn the encounters behind the action, with\n            // increasing height so they do not collide:\n            encounters[index].position = CGPoint(x: -2000, y: \n                index * 1000)\n            world.addChild(encounters[index])\n        }\n    }\n}\n```", "```swift\n    let encounterManager = EncounterManager()\n    ```", "```swift\n    encounterManager.addEncountersToWorld(self.world)\n    ```", "```swift\n    encounterManager.encounters[0].position = CGPoint(x: 300, y: 0)\n    ```", "```swift\n// Store your encounter file names:\nlet encounterNames:[String] = [\n    \"EncounterBats\",\n    \"EncounterBees\",\n    \"EncounterCoins\"\n]\n```", "```swift\nvar currentEncounterIndex:Int?\nvar previousEncounterIndex:Int?\n```", "```swift\n// Store the initial positions of the children of a node:\nfunc saveSpritePositions(node:SKNode) {\n    for sprite in node.children {\n        if let spriteNode = sprite as? SKSpriteNode {\n            let initialPositionValue = NSValue(CGPoint: \n                sprite.position)\n            spriteNode.userData = [\"initialPosition\": \n                initialPositionValue]\n            // Save the positions for children of this node:\n            saveSpritePositions(spriteNode)\n        }\n    }\n}\n\n// Reset all children nodes to their original position:\nfunc resetSpritePositions(node:SKNode) {\n    for sprite in node.children {\n        if let spriteNode = sprite as? SKSpriteNode {\n            // Remove any linear or angular velocity:\n            spriteNode.physicsBody?.velocity = CGVector(dx: 0,\n                dy: 0)\n            spriteNode.physicsBody?.angularVelocity = 0\n            // Reset the rotation of the sprite:\n            spriteNode.zRotation = 0\n            if let initialPositionVal = spriteNode.userData?.valueForKey(\"initialPosition\") as? NSValue {\n                // Reset the position of the sprite:\n                spriteNode.position = \n                    initialPositionVal.CGPointValue()\n            }\n\n            // Reset positions on this node's children\n            resetSpritePositions(spriteNode)\n        }\n    }\n}\n```", "```swift\n// Add the populated encounter node to the encounter array:\nencounters.append(encounter)\n// Save initial sprite positions for this encounter:\nsaveSpritePositions(encounter)\n\n```", "```swift\nfunc placeNextEncounter(currentXPos:CGFloat) {\n    // Count the encounters in a random ready type (Uint32):\n    let encounterCount = UInt32(encounters.count)\n    // The game requires at least 3 encounters to function\n    // so exit this function if there are less than 3\n    if encounterCount < 3 { return }\n\n    // We need to pick an encounter that is not\n    // currently displayed on the screen.\n    var nextEncounterIndex:Int?\n    var trulyNew:Bool?\n    // The current encounter and the directly previous encounter\n    // can potentially be on the screen at this time.\n    // Pick until we get a new encounter\n    while trulyNew == false || trulyNew == nil {\n        // Pick a random encounter to set next:\n        nextEncounterIndex = \n            Int(arc4random_uniform(encounterCount))\n        // First, assert that this is a new encounter:\n        trulyNew = true\n        // Test if it is instead the current encounter:\n        if let currentIndex = currentEncounterIndex {\n            if (nextEncounterIndex == currentIndex) {\n                trulyNew = false\n            }\n        }\n        // Test if it is the directly previous encounter:\n        if let previousIndex = previousEncounterIndex {\n            if (nextEncounterIndex == previousIndex) {\n                trulyNew = false\n            }\n        }\n    }\n\n    // Keep track of the current encounter:\n    previousEncounterIndex = currentEncounterIndex\n    currentEncounterIndex = nextEncounterIndex\n\n    // Reset the new encounter and position it ahead of the player\n    let encounter = encounters[currentEncounterIndex!]\n    encounter.position = CGPoint(x: currentXPos + 1000, y: 0)\n    resetSpritePositions(encounter)\n}\n```", "```swift\n    var nextEncounterSpawnPosition = CGFloat(150)\n    ```", "```swift\n    // Check to see if we should set a new encounter:\n    if player.position.x > nextEncounterSpawnPosition {\n        encounterManager.placeNextEncounter( nextEncounterSpawnPosition)\n        nextEncounterSpawnPosition += 1400\n    }\n    ```", "```swift\n    let powerUpStar = Star()\n    ```", "```swift\n    // Spawn the star, out of the way for now\n    powerUpStar.spawn(world, position: CGPoint(x: -2000, y: - 2000))\n    ```", "```swift\n    // Check to see if we should set a new encounter:\n    if player.position.x > nextEncounterSpawnPosition {\n    encounterManager.placeNextEncounter(\n        nextEncounterSpawnPosition)\n        nextEncounterSpawnPosition += 1400\n\n        // Each encounter has a 10% chance to spawn a star:\n        let starRoll = Int(arc4random_uniform(10))\n        if starRoll == 0 {\n            if abs(player.position.x - powerUpStar.position.x) > 1200 {\n                // Only move the star if it is off the screen.\n                let randomYPos = CGFloat(arc4random_uniform(400))\n                powerUpStar.position = CGPoint(x: \n                    nextEncounterSpawnPosition, y: randomYPos)\n                powerUpStar.physicsBody?.angularVelocity = 0\n                powerUpStar.physicsBody?.velocity = CGVector(dx: 0, dy: 0)\n            }\n        }\n    }\n    ```"]