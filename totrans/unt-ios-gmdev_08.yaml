- en: Chapter 8. Multimedia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have spent some time exploring the gameplay components of our game
    and building systems for control, we need to spend some time examining the components
    of the game that deal with video and audio. Things such as background music, the
    sounds of enemies, and playing movies are important parts that our game needs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to play background music
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to add ambient sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to play movies that are embedded in the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to stream movies from remote locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get on with it...
  prefs: []
  type: TYPE_NORMAL
- en: Important preliminary points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have some understanding of compressed audio formats
    such as MP3 and OGG, as well as video formats such as MP4\. Further, it assumes
    that you know how to create this content using your favorite tools.
  prefs: []
  type: TYPE_NORMAL
- en: Audio capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our game is very quiet right now. Even though we can see the actions of our
    player, we cannot hear what the player is doing — nor do we have a feel for the
    environment itself. We want to add some sounds that will exist in the environment
    and we want to provide some feedback when things happen in the game.
  prefs: []
  type: TYPE_NORMAL
- en: Playing sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the Unity Fundamentals, all audio that is played is done so
    from the perspective of the AudioListener. So, if we want to have something in
    our game make noise, we simply need to add an AudioSource to that GameObject and
    we will get a sound. In our design we call for having ambient sounds in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Adding ambient sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we're in our town we want it to sound like a town that is in the middle
    of the forest. To accomplish this we should have some ambient sound that is low
    volume that just blends in to the environment. A good source of Creative Commons
    licensed sounds is The Freesound Project which can be found at [http://www.freesound.org](http://www.freesound.org).
    There are a number of good candidates on the site and I have picked up one from
    user reinsamba for this test. You will find a copy of it in the assets folder
    of the project called `evening in the forest.wav`.
  prefs: []
  type: TYPE_NORMAL
- en: To keep your assets organized create an `Ambient Audio` folder in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simply drag the asset, an `evening in the forest.wav` file in this case, into
    the project and Unity will perform the necessary conversion:![Time for action
    — Adding ambient sounds](img/978-1-84969-040-9_8_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you have a usable AudioSource that can be added to other GameObjects in
    the scene. But remember, Unity will not distort the assets unless we tell it to
    by changing some properties of the original audio file. We brought in a fairly
    sizable AudioSource as a `.wav` file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tell Unity to compress this asset by selecting **Compressed** from the **Audio
    Format** option so that the file doesn't take up as much space. Also, check the
    **Hardware decoding** checkbox so that Unity will use the iOS hardware built into
    an iOS device:![Time for action — Adding ambient sounds](img/978-1-84969-040-9_8_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If hardware isn't available, Unity will automatically fall back to software
    decoding. In our case here we are going from a 26.2MB Wav file to a 0.6MB compressed
    MP3 file. If you want a higher quality sample you can adjust the Compression slider
    to a higher value, but in our case this is simple ambient noise so we don't need
    an excessive amount of fidelity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have created the AudioSource we need to attach it to a GameObject
    so that it will play. Since this is the sound of the environment, we can attach
    this to the ground that the player will walk around on.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Simply drag the Audio source onto the ground in the **Scene** view, or drag
    it over to the ground in the **Hierarchy** view. Either will result in an AudioSource
    Component being added to the ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the audio continues to play by selecting the **Loop** option from
    the **Audio Source properties** in the **Inspector:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Time for action — Adding ambient sounds](img/978-1-84969-040-9_8_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have told this AudioSource to loop its audio so we should hear this audio
    clip for the duration of the game while we're on this ground GameObject. One special
    note about compressed audio in iOS is that the compression process may tweak the
    beginning or end of your audio data, so you will want to listen to it after compressing
    it to make sure that it still loops properly.
  prefs: []
  type: TYPE_NORMAL
- en: We didn't necessarily have to attach the sound to the ground, we could have
    attached it to a different object. For example, if we wanted to give a marketplace
    the sounds of marketplace chatter we could attach that directly to the GameObject
    that represents the marketplace and when the player walks away from it, the sound
    would diminish.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just created an ambient sound track for our world. By importing a `.wav`
    file and compressing it we have integrated an asset that is suitable for use on
    our mobile platform and can use the iOS device hardware to decompress the audio
    stream. Since we've attached this AudioSource to the ground of our world, we can
    be certain that it will be audible as we move through our environment. With this
    we have created some atmosphere for our world and given this area of the world
    a personality.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Adding sounds to actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we have created some background ambient sounds, we still don't have any
    sounds for actions that take place in the game. For example, if we use our ranged
    attack swipe gesture and throw something, our player should make some sound as
    he is going through the throw animation and the thrown object should make a sound
    if it hits the ground — or some other object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s import a simple sound that we will play when the player is going to
    throw something for their range attack. Once again I have utilized a Creative
    Commons Licensed sound from [www.freesound.org](http://www.freesound.org). The
    author of this sound is Sruddi1 and I have sampled the sound to contain a single
    grunt that will be the sound our character makes when they perform a ranged attack.
    I have compressed this sound similar to the steps used when importing our ambient
    sound:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Adding sounds to actions](img/978-1-84969-040-9_8_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now all we need to do is associate this grunt sound with a scripted action that
    would be the user throwing something. Accomplishing this is a simple extension
    of some of the skills we learned earlier in the book. Remember, from the scripting
    section that we can pass variables to scripts and those objects can be references
    to things from Unity. We need to create a simple script that represents the action
    and expose a variable that will contain the sound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will now play the desired `AudioClip` whenever it is invoked. All
    you have to do is drag an `AudioClip` onto the component that you''ve attached
    this script to and that is what will be played:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action — Adding sounds to actions](img/978-1-84969-040-9_8_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is important to note that you don't necessarily have to attach an `AudioClip`
    to an in-game object in order to play a sound. You can create a `GameObject` on
    the fly when you want to play an `AudioClip`. In fact, this is very useful if
    you want to create sounds on the fly as a result of detecting some event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So if we have installed this `AudioEngine` to a `GameObject` in the scene we
    can simply reference it and tell it to play the specific `AudioClip` that we want
    to play and tell it where we want it to sound like it is positioned.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created a sound that will play whenever a user performs the ranged attack
    gesture. By updating our script which animates a player when the ranged attack
    gesture is detected, we have specified a new `AudioClip` that we can play in our
    script by performing a simple scripting call. We can perform similar actions now
    when a player swings a sword, hits an enemy, and so on. We only need to expose
    an `AudioClip` variable in those scripts and pass along the sound that we want
    to play.
  prefs: []
  type: TYPE_NORMAL
- en: Playing music
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Playing music in Unity has some particular nuances to get it working properly.
    While it is true that music is just like any other sound, just that it has a relationship
    to the player's position in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — The sound of music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our application we want to have music playing constantly. We can accomplish
    this by attaching a `GameObject` to the player or camera object and having the
    music play from there. If you attempt this, your sound system will play music
    just fine until the scene changes. As such, the primary difference between playing
    sound and building a music system is making sure that the music keeps playing.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `Music`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import your favorite `.mp3` file into the game project. In the project's sample
    files you will find the track Orc March by basematic. You can find other creative
    commons music at [http://www.ccmixter.org/:](http://www.ccmixter.org/)![Time for
    action — The sound of music](img/978-1-84969-040-9_8_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an empty Game Object called **MusicPlayer** and make it the child of
    the **Main Camera:**![Time for action — The sound of music](img/978-1-84969-040-9_8_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an **Audio Source** component to the **MusicPlayer** Game Object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to ensure that our **MusicPlayer** object does not get destroyed
    as we move between scenes, by creating a script in Unity that is attached to the
    next scene. To do this create a second scene in the game called `scene_2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script called `MusicPreserver` and fill it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Attach the MusicPreserver script to the new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now play music in our game and have that music active as we move across
    scenes. This will give us the ability to set moods for areas of our game, yet
    give the flexibility of being able to change the scene data while the music continues
    to play.
  prefs: []
  type: TYPE_NORMAL
- en: By default, when Unity loads a new level or scene, all of the objects in the
    previous scene are destroyed (which would normally stop our music). The key to
    preserving the music is the `DontDestroyOnLoad` method which will tell Unity to
    leave this Game Object alone when it is disposing of objects from the original
    scene. Now we can have real music sound tracks that span our entire game.
  prefs: []
  type: TYPE_NORMAL
- en: Video capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iOS devices have standard hardware accelerated playback for H.264 encoded video.
    Apple exposes interfaces to play this content using the `MPMoviePlayerController`
    class in the SDK. This class permits one to play a movie that is located on the
    device, or to stream one that is located at some arbitrary URL on the Internet.
    Unity exposes both of these methods in `iPhoneUtils` using the `PlayMovie` or
    `PlayMovieURL` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'iOS device video encoding is very specific, regardless of whether you are streaming
    video in the WebKit web browser using a UIWebView or doing it in Unity. The video
    must be compressed using the following compression standards:'
  prefs: []
  type: TYPE_NORMAL
- en: H.264 Baseline Profile Level 3.0 video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support resolutions up to 640x480 at 30fps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B Frames are not supported in the Baseline Profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MPEG-4 Part 2 video (Simple Profile)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need some tools to help you create video that will work with iOS devices,
    you can examine the Quicktime Player itself and its video export options, as well
    as Handbrake. Handbrake ( [http://www.handbrake.fr](http://www.handbrake.fr))
    has specific profiles for encoding video for the iOS platform devices.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Playing embedded video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our application design we are supposed to play an introduction movie when
    the application first starts. This video is normally some animated logo or similar
    and in our case it will be the Sojourner Mobile intro movie (sometimes referred
    to as an interstitial).
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to assume that you aren't a video engineer and don't know a lot about
    MPEG-4, H.264, or B Frames, but you have some content that you want to get into
    your iOS project. This is one thing that gives a lot of new developers trouble
    and results in video not displaying on the device.
  prefs: []
  type: TYPE_NORMAL
- en: We can avoid all of this drama by simply using a tool that was designed for
    producing content for iOS devices. One such tool that you can use for this is
    iMovie. It has functionality for exporting iOS device compliant video that you
    can use with your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Import your content into iMovie and export it using the **Share** menu:![Time
    for action — Playing embedded video](img/978-1-84969-040-9_8_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted for the video type that you want to export to, choose the Mobile
    size and press the **Export** button:![Time for action — Playing embedded video](img/978-1-84969-040-9_8_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you can choose the Medium size as well, but since this is media that
    is being embedded into our game, and will count against our maximum application
    size, it is best to keep this content as small as possible so that you can keep
    it for other things such as game assets.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next we need to move the video into a special Unity assets folder called `StreamingAssets`.
    Unity will copy the files in this directory into our application bundle and put
    them in the appropriate location on the device so we can play them back at runtime:![Time
    for action — Playing embedded video](img/978-1-84969-040-9_8_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our asset in the game we need to play it. The best way to do
    this is to have a single scene that does nothing other than display our movie
    and then loads the IntroCity scene.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's create a new scene called **GameIntro** that will serve this purpose:![Time
    for action — Playing embedded video](img/978-1-84969-040-9_8_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our **GameIntro** scene we can create an empty **GameObject**
    and attach a script to it that will play our movie and load the next level after
    it's over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, all we need is a simple script that we can attach to this **GameObject**
    and have start in the `Start()` of the script. We need to use the C# co-routine
    version of the `Start()` method as opposed to our normal version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this script attached to our empty **GameObject** we now have a complete
    intro movie system and when we start the game we will be greeted with the Interstitial
    of our company.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just finished our introduction scene by playing a movie to display our
    studio intro movie and then loading the level that we had been working on, which
    is the beginning town-level. Now our content is beginning to feel like the content
    that we would find on the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — Streaming video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is make sure that an Internet connection is available.
    Once we know that the Internet is available we can start to stream our video.
    We need to check for a network connection because we want to respect the fact
    that our user may deactivate the network connection for Airplane Mode, trying
    to preserve battery life, or because our device may not be in an area of network
    connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can determine whether or not the iOS device can reach the network by using
    the iPhoneSettings'' `internetReachability` class variable. This will be updated
    as the network status changes and will also tell you what type of Internet connection
    you have available. For our purposes we simply need to check whether or not there
    is a connection of any kind. We can resolve this with a simple condition check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It is very important that you perform this check for Internet connectivity.
    If your application tries to reach out to the Internet and fails and you do not
    deal with this gracefully, by either showing an error that is visible to the user
    or not performing the functionality that requires network access, Apple will reject
    the application. You should be prepared to test your game in Airplane Mode exclusively
    to know whether or not it is going to behave properly if there is no network connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we know that we can reach the Internet, we want to stream some video to
    the device. I have stored a video online that the iOS device can stream from our
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see this isn't much different from playing back content that is stored
    on the device. As we want this to behave like a commercial we want to remove the
    player's ability to cancel this video or skip through it so we use the `iPhoneMovieControlMode.Hidden`
    enumeration to ensure that the player will have to watch the movie.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have performed network detection to determine whether or not an Internet
    connection is available. After ensuring that a network connection was available
    we connected to a stream on the Internet and began playing our commercial.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we performed all of the steps necessary to handle multimedia
    in our project. We've given more of a soul to our game by providing the expected
    environmental cues of video and audio that people have come to expect in games,
    to make our games as professionally built as those already in the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we covered:'
  prefs: []
  type: TYPE_NORMAL
- en: How to add ambient sound to the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add background music to the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to play sound based upon actions in a script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to play video embedded in the Unity project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to detect whether or not our network connection is active
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to play video hosted on an external website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned about these and formed the core of our game, it's time
    to take a step back and begin looking at how we can check for performance issues
    and debug our application.
  prefs: []
  type: TYPE_NORMAL
