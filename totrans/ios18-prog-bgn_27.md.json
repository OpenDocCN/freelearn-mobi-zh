["```swift\n    import UIKit\n    **import** **SwiftData**\n    **@Model**\n    class JournalEntry {\n        //MARK: - Properties\n        let date: Date \n    ```", "```swift\n    let body: String\n    **@Attribute****(.****externalStorage****)** **let****photoData****:** **Data****?**\n    let latitude: Double? \n    ```", "```swift\n    // MARK: - Properties\n    **var** date: Date\n    **var** rating: Int\n    **var** title: String\n    **var** body: String\n    @Attribute(.externalStorage) **var** photoData: Data?\n    **var** latitude: Double?\n    **var** longitude: Double? \n    ```", "```swift\n    self.body = body\n    **self****.****photoData****=** **ph********oto****?****.jpegData(compressionQuality:** **1.0****)**\n    self.latitude = latitude**** \n    ```", "```swift\n    titleLabel.text = selectedJournalEntry?.title\n    bodyTextView.text = selectedJournalEntry?.body\n    **if****let** **photoData** **=****selectedJournalEntry****?****.****photoData** **{**\n    **photoImageView****.****image****=****UIImage****(****data****:** **photoData****)**\n    **}** \n    ```", "```swift\n    let journalEntry = journalEntries[indexPath.row]\n    **if****let** **photoData** **=** **journalEntry.****photoData** **{**\n    **Task** **{**\n     **journalCell.****photoImageView.****image****=****UIImage****(****data****: ****    photoData)**\n\n     **}**\n    **}**\n    journalCell.dateLabel.text = journalEntry.date.formatted(\n      .dateTime.month().day().year()\n    ) \n    ```", "```swift\n    import SwiftData \n    ```", "```swift\n    class SharedData {\n      // MARK: - Properties\n      @MainActor static let shared = SharedData()\n      let container: ModelContainer\n      let context: ModelContext\n\n      // MARK: - Initialization\n      private init() {\n        do {\n          container = try ModelContainer(for:       JournalEntry.self)\n          context = ModelContext(container)   \n        } catch {\n          fatalError(\"Could not create SwiftData model \n          container or context\")\n        }\n      } \n    } \n    ```", "```swift\n    func loadJournalEntries() -> [JournalEntry] {\n      let descriptor = FetchDescriptor<JournalEntry>(sortBy:  \n      [SortDescriptor<JournalEntry>(\\.date, order: .reverse)])\n      do {\n        let journalEntries = try context.fetch(descriptor)\n        return journalEntries\n      } catch {\n        return []\n      }\n    } \n    ```", "```swift\nfunc loadJournalEntries() -> [JournalEntry] { \n```", "```swift\nlet descriptor = FetchDescriptor<JournalEntry>(sortBy:  \n[SortDescriptor<JournalEntry>(\\.date, order: .reverse)]) \n```", "```swift\ndo {\n  let journalEntries = try context.fetch(descriptor)\n  return journalEntries\n} catch {\n  return []\n  }\n} \n```", "```swift\n    func saveJournalEntry(_ journalEntry: JournalEntry) {\n      context.insert(journalEntry)\n      try? context.save()\n    } \n    ```", "```swift\n    func deleteJournalEntry(_ journalEntry: JournalEntry) {\n      context.delete(journalEntry)\n      try? context.save()\n    } \n    ```", "```swift\n    func fetchJournalEntries() {\n      journalEntries =\n      SharedData.shared.loadJournalEntries()\n      tableView.reloadData()\n    } \n    ```", "```swift\n    override func viewDidLoad() {\n      super.viewDidLoad()\n      **fetchJournalEntries****()**\n    } \n    ```", "```swift\n    @IBAction func unwindNewEntrySave(segue: UIStoryboardSegue) {\n      if let sourceViewController = segue.source as?\n      AddJournalEntryViewController, let newJournalEntry =\n      sourceViewController.newJournalEntry {\n    **SharedData****.****shared****.****saveJournalEntry****(newJournalEntry)**\n    **fetchJournalEntries****()**\n      }\n    } \n    ```", "```swift\n    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n      if editingStyle == .delete {\n        **SharedData****.****shared****.****deleteJournalEntry****(****journalEntries****[indexPath.****row****])**\n\n        **fetchJournalEntries****()**\n      }\n    } \n    ```"]