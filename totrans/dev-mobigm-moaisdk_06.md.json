["```swift\nRESOURCE_TYPE_IMAGE = 0\nRESOURCE_TYPE_TILED_IMAGE = 1\nRESOURCE_TYPE_FONT = 2\nRESOURCE_TYPE_SOUND = 3\n```", "```swift\nmodule ( “ResourceDefinitions”, package.seeall )\n```", "```swift\nlocal definitions = {}\n```", "```swift\nfunction ResourceDefinitions:set(name, definition)\n    definitions[name] = definition\nend\n```", "```swift\nfunction ResourceDefinitions:get(name)\n    return definitions[name]\nend\n```", "```swift\nfunction ResourceDefinitions:remove (name)\n  definitions[name] = nil\nend\n```", "```swift\nmodule ( “ResourceManager”, package.seeall )\n```", "```swift\nASSETS_PATH = ‘assets/’\n```", "```swift\nlocal cache = {}\n```", "```swift\nfunction ResourceManager:get ( name )\n    if (not self:loaded ( name )) then\n        self:load ( name )\n    end\n\n    return cache[name]\nend\n```", "```swift\nfunction ResourceManager:loaded ( name )\n  return cache[name] ~= nil\nend\n```", "```swift\nfunction ResourceManager:load ( name )\n```", "```swift\n    local resourceDefinition = ResourceDefinitions:get( name )\n```", "```swift\n    if not resourceDefinition then\n        print(“ERROR: Missing resource definition for “ .. name )\n```", "```swift\n    else\n        local resource\n```", "```swift\n    if (resourceDefinition.type == RESOURCE_TYPE_IMAGE) then\n        resource = self:loadImage ( resourceDefinition )\n    elseif (resourceDefinition.type == RESOURCE_TYPE_TILED_IMAGE) then\n        resource = self:loadTiledImage ( resourceDefinition )\n    elseif (resourceDefinition.type == RESOURCE_TYPE_FONT) then\n        resource = self:loadFont ( resourceDefinition )\n    elseif (resourceDefinition.type == RESOURCE_TYPE_SOUND) then\n        resource = self:loadSound ( resourceDefinition )\n    end\n```", "```swift\n    -- store the resource under the name on cache\n    cache[name] = resource\n    end\nend\n```", "```swift\n{\n    type = RESOURCE_TYPE_IMAGE\n    fileName = “tile_back.png”,\n    width = 62, \n    height = 62,\n}\n```", "```swift\n{\n    type = RESOURCE_TYPE_IMAGE\n    fileName = “tile_back.png”,\n    coords = { -10, -10, 10, 10 }\n}\n```", "```swift\nfunction ResourceManager:loadImage ( definition )\n    local image\n```", "```swift\n    local filePath = ASSETS_PATH .. definition.fileName\n```", "```swift\n    if definition.coords then\n    image = self:loadGfxQuad2D ( filePath, definition.coords )\n```", "```swift\n  else \n    local halfWidth = definition.width / 2\n    local halfHeight = definition.height / 2\n    image = self:loadGfxQuad2D(filePath, {-halfWidth, -halfHeight, halfWidth, halfHeight} ) \n```", "```swift\n    end\n    return image\nend\n```", "```swift\nfunction ResourceManager:loadGfxQuad2D ( filePath, coords )\n    local image = MOAIGfxQuad2D.new ()\n\n    image:setTexture ( filePath )\n    image:setRect ( unpack(cords) )\n\n    return image\nend\n```", "```swift\nx, y = unpack ( position_table )\n```", "```swift\n{\n    type = RESOURCE_TYPE_TILED_IMAGE, \n    fileName = ‘tiles.png’, \n    tileMapSize = {3, 2}\n}\n```", "```swift\nfunction ResourceManager:loadTiledImage ( definition )\n\n    local tiledImage = MOAITileDeck2D.new ()\n\n    local filePath = ASSETS_PATH .. definition.fileName\n\n    tiledImage:setTexture ( filePath )\n```", "```swift\n    tiledImage:setSize ( unpack (definition.tileMapSize) )\n```", "```swift\n    -- return the final image\n    return tiledImage\n\nend\n```", "```swift\n{\n    type = RESOURCE_TYPE_FONT,\n    fileName = ‘myfont.ttf’,\n    glyphs = “0123456789”,\n    fontSize = 26,\n    dpi = 160\n}\n```", "```swift\nfunction ResourceManager:loadFont ( definition )\n    local font = MOAIFont.new ()\n    local filePath = ASSETS_PATH .. definition.fileName\n    font:loadFromTTF ( filePath, definition.glyphs, \n    definition.fontSize, definition.dpi )\n    return font\nend\n```", "```swift\n{\n  type = RESOURCE_TYPE_SOUND, \n  fileName = ‘sugarfree.mp3’, \n  loop = true,\n  volume = 0.6\n}\n```", "```swift\nfunction ResourceManager:loadSound ( definition )\n    local sound = MOAIUntzSound.new ()\n\n    local filePath = ASSETS_PATH .. definition.fileName\n    sound:load ( filePath )\n\n    sound:setVolume ( definition.volume )\n    sound:setLooping ( definition.loop )\n\n    return sound\nend\n```"]