- en: Chapter 7. Voice-activated Arduino
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use another feature of Android devices to control
    an Arduino system: voice recognition. We will control a relay that is connected
    to an Arduino board by sending vocal commands from the phone.'
  prefs: []
  type: TYPE_NORMAL
- en: This relay can be connected to many things. For example, it can be connected
    to an electric door lock so that you could open and close a door by just speaking
    into your phone. You can also connect the relay to a lamp, to switch the lamp
    on and off by giving a vocal command to your phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect a relay and a Bluetooth module to an Arduino board so that it can be
    controlled from the Android application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build an application using the Android speech API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control the relay on the Arduino board by voice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you will need for this project is an Arduino Uno board.
  prefs: []
  type: TYPE_NORMAL
- en: Then you will need a BLE module. We chose the Adafruit nRF8001 chip because
    it comes with a nice Arduino library and it has already existing examples of Android
    apps to control the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need a relay module. For this project, we used a 5V relay module
    from Polulu, which is the same as the one we used in the previous chapters. This
    is an image of the relay we used for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, to make the different electrical connections, you will also need a
    breadboard and some jumper wires.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the list of all hardware parts you will need for this project, along
    with links to find these parts on the Web:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board ([http://www.adafruit.com/product/50](http://www.adafruit.com/product/50))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 5V relay module ([http://www.pololu.com/product/2480](http://www.pololu.com/product/2480))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Adafruit nRF8001 breakout board ([https://www.adafruit.com/products/1697](https://www.adafruit.com/products/1697))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The breadboard ([https://www.adafruit.com/product/64](https://www.adafruit.com/product/64))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires ([https://www.adafruit.com/product/758](https://www.adafruit.com/product/758))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that these are all the components we already used in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the software side, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino IDE ([http://arduino.cc/en/Main/Software](http://arduino.cc/en/Main/Software))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Arduino aREST library ([https://github.com/marcoschwartz/aREST/](https://github.com/marcoschwartz/aREST/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nRF8001 Arduino library for the BLE chip ([https://github.com/adafruit/Adafruit_nRF8001](https://github.com/adafruit/Adafruit_nRF8001))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install a given library, simply extract the folder in your `Arduino/libraries`
    folder (or create this folder if it doesn't exist yet).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the hardware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now build the hardware part of the project. To help you out, the following
    is the schematic of the project, without the relay being connected yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that these instructions are the same as in the previous chapter. Therefore,
    you can just use the same configuration if you still have it built on your desk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to place the Bluetooth module on the breadboard. Then, connect
    the power supply from the Arduino board to the breadboard: 5V of the Arduino board
    goes to the red power rail and **GND** goes to the blue power rail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now connect the BLE module. First, connect the power supply of the
    module: **GND** goes to the blue power rail, and **VIN** goes to the red power
    rail. After this, you need to connect the different wires responsible for the
    SPI interface: **SCK** to Arduino pin **13**, **MISO** to Arduino pin **12**,
    and **MOSI** to Arduino pin **11**. Then connect the **REQ** pin to Arduino pin
    **10**. Finally, connect the **RDY** pin to Arduino pin **2**, and the **RST**
    pin to Arduino pin **9**.'
  prefs: []
  type: TYPE_NORMAL
- en: For the relay module, connect the **VCC** pin to the red power rail on the breadboard
    and the **GND** pin on the blue power rail. Finally, connect the **SIG** pin of
    the relay to pin number **7** of the Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an image of an overview of the assembled project (for the
    precise connections between the elements, refer to the preceding instructions):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The close-up image of the relay and BLE module can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the hardware](img/0389OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing the Arduino sketch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now write the sketch to control the relay from an Android device. Note
    that this is the same sketch as in the previous chapter, so you can skip it if
    you already did this part for the last chapter. The following is the complete
    sketch for this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see the details of the sketch. It starts by importing the required
    libraries for the nRF8001 module and the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will define which pin the BLE module is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to declare which pin the relay is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we can create an instance of the aREST API that will be used to
    handle the requests coming via Bluetooth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also create an instance of the nRF8001 chip library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `setup()` function of the sketch, we will initialize serial communications
    and print a welcome message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also give a name to the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will set the relay pin so it becomes an output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `loop()` function of the sketch, we will check the status of the
    BLE chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if any device is connected to the chip, we will process any incoming
    request with the aREST library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that all the code for this chapter can be found in the GitHub repository
    of the book at [https://github.com/marcoschwartz/arduino-android-blueprints](https://github.com/marcoschwartz/arduino-android-blueprints).
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to upload the sketch to your Arduino board. When this is done,
    you can move on to the development of the Android app to control the Arduino board
    via the BLE sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Android app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we will be implementing an Android app that leverages the use
    of the Speech Recognition API and we are going output that text in an `EditText`
    field. In the background, we will also include the BLE services in order to connect
    to the BLE module and be able to send messages to it. Once we have the BLE and
    Speech Recognition API set up, we will be able to connect them both by setting
    up conditions where if the speech is recognized as `switch on`, it will switch
    on the relay, whereas if `switch off` is recognized, the relay will be switched
    off.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assume that you will switch on the `Auto-Import` function within your
    preferences. If not, kindly activate it by going to the **Auto-Import** preferences
    and selecting all the available options. The **Auto-Import** preferences are available
    on Mac and Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On a Mac, navigate to **Android Studio** > **Preferences** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, navigate to **File** > **Settings** > **Editor** > **Auto-Import**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `Talk to Arduino`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `18`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: `MainScreen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain**: `arduinoandroid.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to make this project work, we will need to first go over to the Android
    `Manifest` file, which is available at `app` > `src` > `ma` `in` > `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the Android user interface and permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we open the file, we need to add permissions for access to Bluetooth functionality;
    this will allow us to transmit the voice messages to the Arduino. The following
    two lines of XML need to be added to the Android `Manifest` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The next step that we will take is to set up the very basic Android layout file
    so that we are able to implement the app's functions and to allow the user to
    activate the voice recognition intent.
  prefs: []
  type: TYPE_NORMAL
- en: In our project, we will navigate to the main layout file, which can be accessed
    from `app` > `src` > `res` > `layout` > `activity_speech.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By replacing the current code with the following, we will add a relative layout
    with two buttons, an `EditText` field and a `TextView` field, which will allow
    us to see the outcome of our voice input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Coding the app's internals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will then move on to the `MainScreen.java` file, which is available at `app`
    > `src` > `main` > `java` > `package name` > `MainScreen.java`.
  prefs: []
  type: TYPE_NORMAL
- en: We will then replace the current code with the following code, which we will
    walk through step-by-step and with **Auto-import** enabled; Android Studio will
    automatically import all the statements that we will need for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feel free to follow along the project through the GitHub repository where all
    the source is available for the users of our book in its entirety. The repository
    is available at [https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino](https://github.com/marcoschwartz/arduino-android-blueprints/tree/master/chapter7/TalktoArduino).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start off by declaring the class that extends `Activity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are all the variables that are needed to be declared in order
    to work with the BLE module, log tag for logging purposes, user interface elements,
    and Bluetooth characteristics for voice recognition requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `OnCreate()` method, we will initialize the user interface layout that
    we implemented earlier and connect the user interface elements to the different
    methods within our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `recordSpeech()` method allows us to launch the Google speech recognition
    intent where we can modify the message that we will show the user. In this case,
    we decided to replace the default text with the prompt, "You can now send a command
    to the Arduino":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onActivityResult()` method allows the application to process what has
    been recognized and implement methods based on what has been received. In the
    following method, we will take the speech that has been recognized, output it
    in the `EditText` field that we set up earlier and, depending on the output, we
    will send the commands via BLE to switch on or switch off the relay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code deals with making sure the Bluetooth callback output is
    being sent to its associated `TextView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we will deal with all the `BluetoothGattCallback` class that needs to
    be implemented to connect to the BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following `onStart()` and `onStop()` methods, we are making sure that
    we start scanning of BLE devices and that Bluetooth scanning stops when we close
    the application so as to prevent the battery drain and ensure optimization of
    device memory resources for tasks running in the foreground:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following methods deal with the starting, stopping, and restarting of the
    Bluetooth scan callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scanCallback()` method is concerned mostly with the main logic to get
    the Bluetooth device addresses and maintain the necessary connections between
    the Android device and BLE module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to the previous chapters of the book, you will recognize that we
    have transferred the UUID parsing to a `utility` class in order to refactor the
    code and make our code more readable. In order to create a `utility` class, we
    first need to right-click on our package name and create a new package and call
    it `Bluetooth`.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we will right-click on the new package, select **New** > **Java
    Class**, and name the new class as `BluetoothUtils`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After those two steps, we will replace the code within the class with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once you have included this code, you can go ahead and build and run this app
    on your Android physical device, which is running Android 4.3 or higher and connected
    to the Internet, due to the fact that most of the speech recognition services
    work via the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you load the app, you should start off with something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the app''s internals](img/0389OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This base project offers endless possibilities and you can possibly include
    other commands that can be recognized and connect other components and sensors
    in order to enhance the capabilities of your voice-activated app. We hope that
    with this baseline project, we can inspire you to enhance your projects further
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's summarize what we did in this chapter. As usual, we connected a BLE module
    to our Arduino board so that it can receive commands via the Android phone. We
    also connected a simple relay module to the board, to control it via an Android
    application. Then we designed an application using the Android speech engine to
    control the relay depending on what the user says to the Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will use another feature of the Android phone to control
    Arduino projects: NFC. We will use NFC to control the state of a relay just by
    putting our phone in front of an Arduino NFC shield.'
  prefs: []
  type: TYPE_NORMAL
