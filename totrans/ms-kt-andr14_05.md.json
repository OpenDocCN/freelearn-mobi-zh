["```kt\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun PacktCenterAlignedTopBar() {\n    CenterAlignedTopAppBar(\n        title = {\n            Text(text = \"Packt Publishing\")\n        }\n    )\n}\n```", "```kt\nFloatingActionButton(\n    onClick = { /*TODO*/ },\n    content = {\n        Icon(\n            imageVector = Icons.Default.Add ,\n            contentDescription = \"New Chat\"\n        )\n    }\n)\n```", "```kt\nExtendedFloatingActionButton(\n    onClick = { /*TODO*/ },\n    content = {\n        Icon(\n            imageVector = Icons.Default.Add ,\n            contentDescription = \"New Chat\"\n        )\n        Text(\n            modifier = Modifier.padding(10.dp),\n            text = \"New Chat\"\n        )\n    }\n)\n```", "```kt\nBottomAppBar(\n    actions = {\n        Icon(imageVector = Icons.Rounded.Home, contentDescription = \"Home Screen\")\n        Icon(imageVector = Icons.Rounded.ShoppingCart, contentDescription = \"Cart Screen\")\n        Icon(imageVector = Icons.Rounded.AccountCircle, contentDescription = \"Account Screen\")\n    }\n)\n```", "```kt\nBottomAppBar(\n    actions = {\n        Icon(imageVector = Icons.Rounded.Home, contentDescription = \"Home Screen\")\n        Icon(imageVector = Icons.Rounded.ShoppingCart, contentDescription = \"Cart Screen\")\n        Icon(imageVector = Icons.Rounded.AccountCircle, contentDescription = \"Account Screen\")\n    },\n    floatingActionButton = {\n        PacktFloatingActionButton()\n    }\n)\n```", "```kt\nScaffold(\n    topBar = {\n        PacktSmallTopAppBar()\n    },\n    bottomBar = {\n        PacktBottomNavigationBar()\n    },\n    floatingActionButton = {\n        PacktFloatingActionButton()\n    },\n    content = { paddingValues ->\n      Column(\n          modifier = Modifier\n              .fillMaxSize()\n              .padding(paddingValues)\n              .background(Color.Gray.copy(alpha = 0.1f)),\n          verticalArrangement = Arrangement.Center,\n          horizontalAlignment = Alignment.CenterHorizontally\n      ) {\n          Text(\n              modifier = Modifier.padding(10.dp),\n              text = \"Mastering Kotlin for Android Development - Chapter 4\",\n              textAlign = TextAlign.Center\n          )\n        }\n    }\n)\n```", "```kt\nimplementation 'androidx.core:core-ktx:1.10.1'\nimplementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')\nimplementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'\nimplementation 'androidx.activity:activity-compose:1.7.2'\nimplementation platform('androidx.compose:compose-bom:2022.10.00')\nimplementation 'androidx.compose.ui:ui'\nimplementation 'androidx.compose.ui:ui-graphics'\nimplementation 'androidx.compose.ui:ui-tooling-preview'\nimplementation 'androidx.compose.material3:material3'\ntestImplementation 'junit:junit:4.13.2'\nandroidTestImplementation 'androidx.test.ext:junit:1.1.5'\nandroidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'\nandroidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')\nandroidTestImplementation 'androidx.compose.ui:ui-test-junit4'\ndebugImplementation 'androidx.compose.ui:ui-tooling'\ndebugImplementation 'androidx.compose.ui:ui-test-manifest'\n```", "```kt\nval Purple80 = Color(0xFFD0BCFF)\nval PurpleGrey80 = Color(0xFFCCC2DC)\nval Pink80 = Color(0xFFEFB8C8)\nval Purple40 = Color(0xFF6650a4)\nval PurpleGrey40 = Color(0xFF625b71)\nval Pink40 = Color(0xFF7D5260)\n```", "```kt\nval md_theme_light_primary = Color(0xFF006C49)\nval md_theme_light_onPrimary = Color(0xFFFFFFFF)\nval md_theme_light_primaryContainer = Color(0xFF7AFAC0)\nval md_theme_light_onPrimaryContainer = Color(0xFF002113)\nval md_theme_light_secondary = Color(0xFF4D6357)\nval md_theme_light_onSecondary = Color(0xFFFFFFFF)\nval md_theme_light_secondaryContainer = Color(0xFFD0E8D8)\nval md_theme_light_onSecondaryContainer = Color(0xFF0A1F16)\nval md_theme_light_tertiary = Color(0xFF3D6473)\nval md_theme_light_onTertiary = Color(0xFFFFFFFF)\nval md_theme_light_tertiaryContainer = Color(0xFFC0E9FB)\nval md_theme_light_onTertiaryContainer = Color(0xFF001F29)\nval md_theme_light_error = Color(0xFFBA1A1A)\nval md_theme_light_errorContainer = Color(0xFFFFDAD6)\nval md_theme_light_onError = Color(0xFFFFFFFF)\nval md_theme_light_onErrorContainer = Color(0xFF410002)\nval md_theme_light_background = Color(0xFFFBFDF9)\nval md_theme_light_onBackground = Color(0xFF191C1A)\nval md_theme_light_surface = Color(0xFFFBFDF9)\nval md_theme_light_onSurface = Color(0xFF191C1A)\nval md_theme_light_surfaceVariant = Color(0xFFDCE5DD)\nval md_theme_light_onSurfaceVariant = Color(0xFF404943)\nval md_theme_light_outline = Color(0xFF707973)\nval md_theme_light_inverseOnSurface = Color(0xFFEFF1ED)\nval md_theme_light_inverseSurface = Color(0xFF2E312F)\nval md_theme_light_inversePrimary = Color(0xFF5CDDA5)\nval md_theme_light_shadow = Color(0xFF000000)\nval md_theme_light_surfaceTint = Color(0xFF006C49)\nval md_theme_light_outlineVariant = Color(0xFFC0C9C1)\nval md_theme_light_scrim = Color(0xFF000000)\nval md_theme_dark_primary = Color(0xFF5CDDA5)\nval md_theme_dark_onPrimary = Color(0xFF003824)\nval md_theme_dark_primaryContainer = Color(0xFF005236)\nval md_theme_dark_onPrimaryContainer = Color(0xFF7AFAC0)\nval md_theme_dark_secondary = Color(0xFFB4CCBD)\nval md_theme_dark_onSecondary = Color(0xFF20352A)\nval md_theme_dark_secondaryContainer = Color(0xFF364B40)\nval md_theme_dark_onSecondaryContainer = Color(0xFFD0E8D8)\nval md_theme_dark_tertiary = Color(0xFFA5CDDE)\nval md_theme_dark_onTertiary = Color(0xFF063543)\nval md_theme_dark_tertiaryContainer = Color(0xFF244C5A)\nval md_theme_dark_onTertiaryContainer = Color(0xFFC0E9FB)\nval md_theme_dark_error = Color(0xFFFFB4AB)\nval md_theme_dark_errorContainer = Color(0xFF93000A)\nval md_theme_dark_onError = Color(0xFF690005)\nval md_theme_dark_onErrorContainer = Color(0xFFFFDAD6)\nval md_theme_dark_background = Color(0xFF191C1A)\nval md_theme_dark_onBackground = Color(0xFFE1E3DF)\nval md_theme_dark_surface = Color(0xFF191C1A)\nval md_theme_dark_onSurface = Color(0xFFE1E3DF)\nval md_theme_dark_surfaceVariant = Color(0xFF404943)\nval md_theme_dark_onSurfaceVariant = Color(0xFFC0C9C1)\nval md_theme_dark_outline = Color(0xFF8A938C)\nval md_theme_dark_inverseOnSurface = Color(0xFF191C1A)\nval md_theme_dark_inverseSurface = Color(0xFFE1E3DF)\nval md_theme_dark_inversePrimary = Color(0xFF006C49)\nval md_theme_dark_shadow = Color(0xFF000000)\nval md_theme_dark_surfaceTint = Color(0xFF5CDDA5)\nval md_theme_dark_outlineVariant = Color(0xFF404943)\nval md_theme_dark_scrim = Color(0xFF000000)\n```", "```kt\nprivate val DarkColorScheme = darkColorScheme(\n    primary = md_theme_light_primary,\n    onPrimary = md_theme_light_onPrimary,\n    primaryContainer = md_theme_light_primaryContainer,\n    onPrimaryContainer = md_theme_light_onPrimaryContainer,\n    secondary = md_theme_light_secondary,\n    onSecondary = md_theme_light_onSecondary,\n    secondaryContainer = md_theme_light_secondaryContainer,\n    onSecondaryContainer = md_theme_light_onSecondaryContainer,\n    tertiary = md_theme_light_tertiary,\n    onTertiary = md_theme_light_onTertiary,\n    tertiaryContainer = md_theme_light_tertiaryContainer,\n    onTertiaryContainer = md_theme_light_onTertiaryContainer,\n    error = md_theme_light_error,\n    errorContainer = md_theme_light_errorContainer,\n    onError = md_theme_light_onError,\n    onErrorContainer = md_theme_light_onErrorContainer,\n    background = md_theme_light_background,\n    onBackground = md_theme_light_onBackground,\n    surface = md_theme_light_surface,\n    onSurface = md_theme_light_onSurface,\n    surfaceVariant = md_theme_light_surfaceVariant,\n    onSurfaceVariant = md_theme_light_onSurfaceVariant,\n    outline = md_theme_light_outline,\n    inverseOnSurface = md_theme_light_inverseOnSurface,\n    inverseSurface = md_theme_light_inverseSurface,\n    inversePrimary = md_theme_light_inversePrimary,\n    surfaceTint = md_theme_light_surfaceTint,\n    outlineVariant = md_theme_light_outlineVariant,\n    scrim = md_theme_light_scrim,\n)\n```", "```kt\n@Composable\nfun ChapterFourTheme(\n    darkTheme: Boolean = isSystemInDarkTheme(),\n    dynamicColor: Boolean = true,\n    content: @Composable () -> Unit\n) {\n    val colorScheme = when {\n        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {\n            val context = LocalContext.current\n            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)\n        }\n        darkTheme -> DarkColorScheme\n        else -> LightColorScheme\n    }\n    val view = LocalView.current\n    if (!view.isInEditMode) {\n        SideEffect {\n            val window = (view.context as Activity).window\n            window.statusBarColor = colorScheme.primary.toArgb()\n            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme\n        }\n    }\n    MaterialTheme(\n        colorScheme = colorScheme,\n        typography = Typography,\n        content = content\n    )\n}\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ChapterFourTheme {\n                PacktScaffold()\n            }\n        }\n    }\n}\n```", "```kt\nimplementation 'androidx.compose.material3:material3-window-size-class'\n```", "```kt\nwhen(calculateWindowSizeClass(activity = this).widthSizeClass) {\n    WindowWidthSizeClass.Compact -> {\n        CharactersScreen(\n            navigationOptions = NavigationOptions.BottomNavigation,\n            showDetails = false\n        )\n    }\n    WindowWidthSizeClass.Medium -> {\n        CharactersScreen(\n            navigationOptions = NavigationOptions.NavigationRail,\n            showDetails = true\n        )\n    }\n    WindowWidthSizeClass.Expanded -> {\n        CharactersScreen(\n            navigationOptions = NavigationOptions.NavigationDrawer,\n            showDetails = true\n        )\n    }\n    else -> {\n        CharactersScreen(\n            navigationOptions = NavigationOptions.BottomNavigation,\n            showDetails = false\n        )\n    }\n}\n```", "```kt\n    Icon(\n        modifier = Modifier.size(48.dp),\n        painter = painterResource(id = R.drawable.ic_launcher_foreground),\n        contentDescription = \"Icon\"\n    )\n    ```", "```kt\n    Text(\n        modifier = Modifier\n            .clickable(\n                onClick = { /*TODO*/ },\n                onClickLabel = \"Click Me\"\n            )\n            .padding(10.dp),\n        text = \"Click Me\"\n    )\n    ```", "```kt\n    Text(\n        modifier = Modifier\n            .semantics { heading() }\n            .padding(10.dp),\n        text = \"Heading One\"\n    )\n    ```", "```kt\n    Button(\n        modifier = Modifier\n            .semantics { stateDescription = \"Disabled\" }\n            .padding(10.dp),\n        onClick = { /*TODO*/ },\n        enabled = false\n    ) {\n        Text(text = \"Disabled Button\")\n    }\n    ```", "```kt\n    Column(\n        modifier = Modifier\n            .padding(10.dp)\n            .semantics(mergeDescendants = true) { }\n    ) {\n        Text(text = \"Heading One\")\n        Text(text = \"Heading Two\")\n        Text(text = \"Heading Three\")\n    }\n    ```"]