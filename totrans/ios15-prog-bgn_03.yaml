- en: '*Chapter 2*: Simple Values and Types'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 2 章*：简单值和类型'
- en: Now that you have had a short tour of Xcode, let's look at the Swift programming
    language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经对 Xcode 进行了简要的浏览，让我们来看看 Swift 编程语言。
- en: First, you'll explore **Swift playgrounds**, an interactive environment where
    you can type in Swift code and have the results displayed immediately. Next, you'll
    study how Swift represents and stores various types of data. After that, you'll
    look at some cool Swift features such as **type inference** and **type safety**,
    which help you to write code more concisely and avoid common errors. Finally,
    you'll learn how to perform common operations on data and how to print messages
    to the Debug area to help you troubleshoot issues.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您将探索 **Swift 游乐场**，这是一个交互式环境，您可以在此输入 Swift 代码并立即显示结果。接下来，您将学习 Swift 如何表示和存储各种类型的数据。然后，您将了解一些酷炫的
    Swift 功能，如 **类型推断** 和 **类型安全**，这些功能可以帮助您编写更简洁的代码并避免常见错误。最后，您将学习如何对数据进行常见操作，以及如何将消息打印到调试区域以帮助您解决问题。
- en: By the end of this chapter, you should be able to write simple programs that
    can store and process letters and numbers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该能够编写能够存储和处理字母和数字的简单程序。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Understanding Swift playgrounds
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Swift 游乐场
- en: Exploring data types
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索数据类型
- en: Exploring constants and variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索常量和变量
- en: Understanding type inference and type safety
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解类型推断和类型安全
- en: Exploring operators
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索运算符
- en: Using the `print()` statement
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `print()` 语句
- en: Important Information
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要信息
- en: For more information about the latest version of the Swift language, visit [https://docs.swift.org/swift-book/](https://docs.swift.org/swift-book/).
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于 Swift 语言最新版本的信息，请访问 [https://docs.swift.org/swift-book/](https://docs.swift.org/swift-book/)。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To do the exercises for this chapter, you will need the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，您需要以下内容：
- en: An Apple Mac computer running macOS 11 Big Sur or macOS 12 Monterey
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 macOS 11 Big Sur 或 macOS 12 Monterey 的 Apple Mac 计算机
- en: Xcode 13 installed (refer to [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016),
    *Getting Familiar with Xcode*, for instructions on how to install Xcode)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Xcode 13（有关安装 Xcode 的说明，请参阅 [*第 1 章*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016)，*熟悉
    Xcode*）
- en: 'The Xcode playground for this chapter is in the `Chapter02` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 Xcode 游乐场位于本书代码包的 `Chapter02` 文件夹中，可在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：
- en: '[https://bit.ly/3bTuizM](https://bit.ly/3bTuizM)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3bTuizM](https://bit.ly/3bTuizM)'
- en: In the next section, you'll create a new playground, where you can type in the
    code presented in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将创建一个新的游乐场，您可以在其中输入本章中展示的代码。
- en: Understanding Swift playgrounds
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Swift 游乐场
- en: Playgrounds are interactive coding environments. You type code in the left-hand
    pane, and the results are displayed immediately in the right-hand pane. It's a
    great way to experiment with code and to explore system APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场是交互式编码环境。您在左侧窗格中输入代码，结果会立即在右侧窗格中显示。这是一种很好的实验代码和探索系统 API 的方法。
- en: Important Information
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'API is an acronym for Application Programming Interface. To learn more, visit
    this link: [https://en.wikipedia.org/wiki/API](https://en.wikipedia.org/wiki/API).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: API 是应用程序编程接口的缩写。要了解更多信息，请访问此链接：[https://en.wikipedia.org/wiki/API](https://en.wikipedia.org/wiki/API)。
- en: 'Let''s start by creating a new playground and examining its user interface.
    Follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的游乐场并检查其用户界面开始。按照以下步骤进行：
- en: 'To create a playground, launch Xcode and choose **File** | **New** | **Playground...**
    from the Xcode menu bar:![Figure 2.1: Xcode menu bar with File | New | Playground...
    selected'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建游乐场，启动 Xcode 并从 Xcode 菜单栏选择 **File** | **New** | **Playground...**：![图 2.1：Xcode
    菜单栏，选中 File | New | Playground...
- en: '](img/Figure_2.1_B17469.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_2.1_B17469.jpg]'
- en: 'Figure 2.1: Xcode menu bar with File | New | Playground... selected'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.1：Xcode 菜单栏，选中 File | New | Playground... ![图 2.1：Xcode 菜单栏，选中 File | New
    | Playground...
- en: 'The template screen appears. **iOS** should already be selected. Choose **Blank**
    and click **Next**:![Figure 2.2: Choose a template for your new playground: screen'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模板屏幕出现。**iOS** 应已选中。选择 **空白** 并点击 **下一步**：![图 2.2：为您的新的游乐场选择一个模板：屏幕
- en: '](img/Figure_2.2_B17469.jpg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_2.2_B17469.jpg]'
- en: 'Figure 2.2: Choose a template for your new playground: screen'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.2：为您的新的playground选择一个模板：屏幕
- en: 'Name your playground `SimpleValues` and save it anywhere you like. Click **Create**
    when done:![Figure 2.3: Save dialog box'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将playground命名为`SimpleValues`并保存到您喜欢的任何位置。完成后点击**创建**：![Figure_2.3: Save dialog
    box]'
- en: '](img/Figure_2.3_B17469.jpg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_2.3_B17469.jpg]'
- en: 'Figure 2.3: Save dialog box'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.3：保存对话框
- en: 'You should see the playground on the screen:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该在屏幕上看到playground：
- en: '![Figure 2.4: Xcode playground user interface'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.4: Xcode playground用户界面]'
- en: '](img/Figure_2.4_B17469.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.4_B17469.jpg]'
- en: 'Figure 2.4: Xcode playground user interface'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：Xcode playground用户界面
- en: 'As you can see, it''s much simpler than an Xcode project. Let''s look at the
    interface in more detail:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它比Xcode项目简单得多。让我们更详细地看看界面：
- en: '**Navigator button (1)** - Shows or hides the Navigator area.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航器按钮（1）** - 显示或隐藏**导航器**区域。'
- en: '**Activity View (2)** - Shows the current operation or status.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动视图（2）** - 显示当前操作或状态。'
- en: '**Library button (3)** - Displays code snippets and other resources.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库按钮（3）** - 显示代码片段和其他资源。'
- en: '**Inspector button (4)** - Shows or hides the **Inspector** area.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查器按钮（4）** - 显示或隐藏**检查器**区域。'
- en: '**Navigator area (5)** - Provides quick access to various parts of your project.
    The Project navigator is displayed by default.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航器区域（5）** - 提供快速访问项目各个部分的途径。默认情况下显示项目导航器。'
- en: '**Editor area (6)** - You write code here.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器区域（6）** - 您在这里编写代码。'
- en: '**Results area (7)** - Provides immediate feedback to the code you write.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果区域（7）** - 为您编写的代码提供即时反馈。'
- en: '**Play button (8)** - Executes code from a selected line.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**播放按钮（8）** - 从所选行执行代码。'
- en: '**Border (9)** - This border separates the **Editor** and **Results** areas.
    If you find that the results displayed in the **Results** area are truncated,
    drag the border to the left to increase its size.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边框（9）** - 这个边框将**编辑器**和**结果**区域分开。如果您发现**结果**区域显示的结果被截断，将边框向左拖动以增加其大小。'
- en: '**Play/Stop button (10)** - Executes or stops the execution of all code in
    the playground.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**播放/停止按钮（10）** - 执行或停止playground中所有代码的执行。'
- en: '`print()` command.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print()`命令。'
- en: '**Debug button (12)** - Shows and hides the **Debug** area.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试按钮（12）** - 显示或隐藏**调试**区域。'
- en: You may find the code in the playground too small and hard to read. Let's see
    how to make it larger in the next section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现playground中的代码太小，难以阅读。让我们看看如何在下一节中使其变大。
- en: Customizing fonts and colors
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制字体和颜色
- en: 'Xcode has extensive customization options available. You can access them in
    the **Preferences...** menu. If you find that the text is small and hard to see,
    follow these steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode提供了广泛的定制选项。您可以在**首选项...**菜单中访问它们。如果您发现文本太小，难以看清，请按照以下步骤操作：
- en: Choose **Preferences...** from the **Xcode** menu to display the preferences
    window.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Xcode**菜单中选择**首选项...**以显示首选项窗口。
- en: 'In the preferences window, click **Themes** and choose **Presentation (Light)**
    to make your code larger and easier to read:![Figure 2.5: Xcode Preferences window
    with the Themes pane selected'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在首选项窗口中，点击**主题**并选择**演示（浅色）**以使代码更大，更容易阅读：![Figure_2.5: Xcode Preferences window
    with the Themes pane selected]'
- en: '](img/Figure_2.5_B17469.jpg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_2.5_B17469.jpg]'
- en: 'Figure 2.5: Xcode Preferences window with the Themes pane selected'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.5：选择主题面板的Xcode首选项窗口
- en: Close the preferences window to return to the playground. Note that the text
    in the playground is larger than before. You can also try the other themes if
    you wish.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭首选项窗口返回到playground。注意，playground中的文本比之前大。如果您愿意，也可以尝试其他主题。
- en: Now that you've customized the fonts and colors to your liking, let's see how
    to run code in a playground in the next section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经将字体和颜色定制到您喜欢的样子，让我们看看如何在下一节中在playground中运行代码。
- en: Running playground code
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行playground代码
- en: 'Your playground already has an instruction in it. To execute the instruction,
    follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您的playground中已经有一个指令。要执行指令，请按照以下步骤操作：
- en: 'Click the **Play/Stop** button in the bottom-left corner of the playground.
    You may see the following dialog box:![Figure 2.6: Developer Tools Access dialog
    box'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '点击playground左下角的**播放/停止**按钮。您可能会看到一个以下对话框：![Figure_2.6: Developer Tools Access
    dialog box]'
- en: '](img/Figure_2.6_B17469.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Figure_2.6_B17469.jpg]'
- en: 'Figure 2.6: Developer Tools Access dialog box'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.6：开发者工具访问对话框
- en: 'Enter the `"Hello, playground"` displayed in the **Results** area:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**结果**区域显示的`"Hello, playground"`中输入：
- en: '![Figure 2.7: Playground showing "Hello, playground" in the Results area'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.7: Playground showing "Hello, playground" in the Results area]'
- en: '](img/Figure_2.7_B17469.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.7_B17469.jpg]'
- en: 'Figure 2.7: Playground showing "Hello, playground" in the Results area'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7：游乐场中结果区域显示 "Hello, playground"
- en: Tip
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can use the keyboard shortcut *Command + Shift + Return* to run the code
    in your Playground.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用键盘快捷键 *Command + Shift + Return* 来在游乐场中运行代码。
- en: To prepare the playground for use in the remainder of this chapter, delete the
    `var greeting = "Hello, playground"` instruction from the playground. As you go
    along, type the code shown in this chapter into the playground, and if necessary,
    click the **Play/Stop** button to run it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备在本章剩余部分使用游乐场，请从游乐场中删除 `var greeting = "Hello, playground"` 指令。在编写代码的过程中，将本章中显示的代码输入到游乐场中，并在必要时点击
    **播放/停止** 按钮来运行它。
- en: Let's dive into the simple data types used in Swift in the next section.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入下一节，了解 Swift 中使用的简单数据类型。
- en: Exploring data types
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索数据类型
- en: All programming languages can store numbers, logic states, and words, and Swift
    is no different. Even if you're an experienced programmer, you may find that Swift
    represents these objects differently from other languages that you may be familiar
    with.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有编程语言都可以存储数字、逻辑状态和单词，Swift 也不例外。即使你是一位经验丰富的程序员，你也可能会发现 Swift 以与其他你可能熟悉的语言不同的方式表示这些对象。
- en: Important Information
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on data types, visit: [https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关数据类型的信息，请访问：[https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html](https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html)。
- en: Let's walk through the Swift versions of **integers**, **floating-point numbers**,
    **Booleans**, and **strings**, in the next sections.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按顺序介绍 Swift 中的 **整数**、**浮点数**、**布尔值** 和 **字符串**，在下一节中。
- en: Representing integers
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整数的表示
- en: 'Let''s say you want to store the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想存储以下内容：
- en: The number of restaurants in a city
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 城市中的餐馆数量
- en: Passengers in an airplane
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞机上的乘客
- en: Rooms in a hotel
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 酒店房间
- en: You would use integers, which are numbers without a fractional component (including
    negative numbers).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用整数，这些是没有分数部分的数字（包括负数）。
- en: Integers in Swift are represented by the `Int` type.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 中的整数由 `Int` 类型表示。
- en: Representing floating-point numbers
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浮点数的表示
- en: 'Let''s say you want to store the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想存储以下内容：
- en: Pi (3.14159...)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 圆周率（3.14159...）
- en: Absolute zero (-273.15 °C)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绝对零度（-273.15 °C）
- en: You would use floating-point numbers, which are numbers with a fractional component.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用浮点数，这些是带有分数部分的数字。
- en: The default type for floating-point numbers in Swift is `Double`, which uses
    64 bits, including negative numbers. You can also use `Float`, which uses 32 bits,
    but `Double` is preferred.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 中浮点数的默认类型是 `Double`，它使用 64 位，包括负数。您还可以使用 `Float`，它使用 32 位，但 `Double` 更受欢迎。
- en: Representing Booleans
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示布尔值
- en: 'Let''s say you want to store answers to simple yes/no questions, such as the
    following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想存储对简单是/否问题的答案，例如以下内容：
- en: Is it raining?
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下雨吗？
- en: Are there any available seats at the restaurant?
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐厅里还有空位吗？
- en: For this, you use Boolean values.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，你使用布尔值。
- en: Swift provides a `Bool` type that can either be `true` or `false`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 提供了一个 `Bool` 类型，可以是 `true` 或 `false`。
- en: Representing strings
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示字符串
- en: 'Let''s say you want to store the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想存储以下内容：
- en: The name of a restaurant, such as "Bombay Palace"
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 餐馆的名称，例如 "Bombay Palace"
- en: A job description, such as "Accountant" or "Programmer"
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 职位描述，例如 "会计师" 或 "程序员"
- en: A kind of fruit, such as "banana"
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种水果，例如 "香蕉"
- en: You would use Swift's `String` type, which represents a sequence of characters,
    and is fully Unicode-compliant. This makes it easy to represent different fonts
    and languages.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你会使用 Swift 的 `String` 类型，它表示字符序列，并且完全符合 Unicode。这使得表示不同的字体和语言变得容易。
- en: Important Information
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'To learn more about Unicode, visit this link: [https://home.unicode.org/basic-info/faq/](https://home.unicode.org/basic-info/faq/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Unicode 的信息，请访问此链接：[https://home.unicode.org/basic-info/faq/](https://home.unicode.org/basic-info/faq/)。
- en: Now that you know how Swift represents these common data types, let's try them
    out in the playground you created earlier in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Swift 如何表示这些常见数据类型，让我们在之前创建的游乐场中尝试它们，在下一节中。
- en: Using common data types in the playground
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在游乐场中使用常见数据类型
- en: 'Anything that you type into a playground will be executed, and the results
    will appear in the **Results** area. Let''s see what happens when you type in
    numbers, Boolean values, and strings into your playground and execute it. Follow
    these steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您在游乐场中输入的任何内容都将被执行，结果将出现在**结果**区域。让我们看看当您在游乐场中输入数字、布尔值和字符串并执行时会发生什么。按照以下步骤操作：
- en: Type the following code into the `//` in front of it is a **comment**. Comments
    are a great way to create notes or reminders to yourself and will be ignored by
    Xcode.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在它前面的`//`中输入以下代码是一个**注释**。注释是创建笔记或提醒给自己的一种好方法，并且将被Xcode忽略。
- en: Click the **Play/Stop** button to run your code.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**播放/停止**按钮来运行您的代码。
- en: 'Wait a few seconds. Xcode will evaluate your input and display results in the
    Results area, as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟。Xcode将评估您的输入并在结果区域显示结果，如下所示：
- en: '[PRE0]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that comments do not appear in the Results area.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，注释不会出现在结果区域。
- en: Cool! You have just created and run your first playground. Let's look at how
    to store different data types in the next section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您刚刚创建并运行了您的第一个游乐场。让我们看看如何在下一节中存储不同的数据类型。
- en: Exploring constants and variables
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索常量和变量
- en: Now that you know about the simple data types that Swift supports, let's look
    at how to store them, so you can perform operations on them later.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Swift支持的基本数据类型，让我们看看如何存储它们，这样您以后就可以对它们进行操作。
- en: You can use **constants** or **variables** to store data. Both are containers
    that have a name, but a constant's value can only be set once and cannot be changed
    after it has been set, whereas a variable's value can be changed at any time.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用**常量**或**变量**来存储数据。两者都是具有名称的容器，但常量的值只能设置一次，一旦设置后就不能更改，而变量的值可以在任何时候更改。
- en: You must declare constants and variables before you use them. Constants are
    declared with the `let` keyword whereas variables are declared with the `var`
    keyword.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用之前，您必须声明常量和变量。常量使用`let`关键字声明，而变量使用`var`关键字声明。
- en: 'Let''s explore how constants and variables work by implementing them in your
    playground. Follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在您的游乐场中实现它们来探索常量和变量是如何工作的。按照以下步骤操作：
- en: 'Add the following code to your playground to declare three constants:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以声明三个常量：
- en: '[PRE1]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Click the `"Ahmad Sahar"`, is used to assign the value for `myName`. These are
    known as **string literals**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`"Ahmad Sahar"`，用于为`myName`分配值。这些被称为**字符串字面量**。
- en: 'Add the following code after the constant declarations to declare three variables:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在常量声明之后添加以下代码以声明三个变量：
- en: '[PRE2]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Similar to constants, a container is created and named in each case, and the
    assigned value stored.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与常量类似，每个情况下都会创建一个容器并命名，然后存储分配的值。
- en: Tip
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: The stored values are displayed in the Results area.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 存储的值将在结果区域显示。
- en: 'The value of a constant can''t be changed once it is set. To test this, add
    the following code after the variable declarations:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 常量的值一旦设置就无法更改。为了测试这一点，在变量声明之后添加以下代码：
- en: '[PRE3]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you''re typing the second line of code, a pop-up menu will appear with suggestions:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您输入第二行代码时，将出现一个带有建议的弹出菜单：
- en: '![Figure 2.8: Autocomplete pop-up menu'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.8：自动完成弹出菜单'
- en: '](img/Figure_2.8_B17469.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 2.8](img/Figure_2.8_B17469.jpg)'
- en: 'Figure 2.8: Autocomplete pop-up menu'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.8：自动完成弹出菜单
- en: Use the up and down arrow keys to choose the `isRaining` constant and press
    the *Tab* key to select it. This feature is called **autocomplete** and helps
    to prevent typing mistakes when you're entering code.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用上下箭头键选择`isRaining`常量，然后按*Tab*键选择它。这个功能被称为**自动完成**，可以帮助您在输入代码时防止输入错误。
- en: 'When you have finished typing, wait a few seconds. On the second line, you
    should see a red circle with a white dot in the middle appear:![Figure 2.9: Error
    notification'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入完成后，等待几秒钟。在第二行，您应该看到一个带有白色点的红色圆圈：![图 2.9：错误通知
- en: '](img/Figure_2.9_B17469.jpg)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 2.9](img/Figure_2.9_B17469.jpg)'
- en: 'Figure 2.9: Error notification'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.9：错误通知
- en: This means there is an error in your program, and Xcode thinks it can be fixed.
    The error appears because you are trying to assign a new value to a constant after
    its initial value has been set.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着您的程序中存在错误，Xcode认为它可以修复。错误出现是因为您在常量的初始值设置后尝试为其分配新值。
- en: 'Click the red circle to expand the error message. You should see the following
    box with a **Fix** button:![Figure 2.10: Expanded error notification'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色圆圈以展开错误消息。您应该看到一个带有**修复**按钮的以下框：![图 2.10：展开的错误通知
- en: '](img/Figure_2.10_B17469.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 2.10](img/Figure_2.10_B17469.jpg)'
- en: 'Figure 2.10: Expanded error notification'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.10：扩展的错误通知
- en: 'Xcode tells you what the problem is (**Cannot assign to value: ''isRaining''
    is a ''let'' constant**) and suggests a correction (**Change ''let'' to ''var''
    to make it mutable**).'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Xcode 会告诉您问题所在（**无法赋值：'isRaining' 是一个 'let' 常量**）并建议一个修正（**将 'let' 更改为 'var'
    以使其可变**）。
- en: Click the **Fix** button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **修复** 按钮。
- en: 'You should see that the `isRaining` constant declaration has been changed to
    a variable declaration:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到 `isRaining` 常量声明已被更改为变量声明：
- en: '![Figure 2.11: Code with fix applied'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11：应用修复后的代码'
- en: '](img/Figure_2.11_B17469.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B17469.jpg)'
- en: 'Figure 2.11: Code with fix applied'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11：应用修复后的代码
- en: Since a new value can be assigned to a variable after it has been created, the
    error is resolved. Do note, however, that the suggested correction might not be
    the best solution.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新值可以在创建变量后分配，错误得到了解决。但是，请注意，建议的修正可能不是最佳解决方案。
- en: If you look at the code you typed in, you might be wondering how Xcode knows
    the type of data stored in a variable or constant. You'll learn about how that
    is done in the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看输入的代码，可能会想知道 Xcode 如何知道变量或常量中存储的数据类型。您将在下一节中了解这一点。
- en: Understanding type inference and type safety
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解类型推断和类型安全
- en: 'In the previous section, you declared constants and variables and assigned
    values to them. Swift automatically determines the constant or variable type based
    on the value you supplied. This is called **type inference**. You can see the
    type of a constant or variable by holding down the *Option* key and clicking its
    name. To see this in action, follow these steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您声明了常量和变量，并给它们赋值。Swift 会根据您提供的值自动确定常量或变量的类型，这被称为 **类型推断**。您可以通过按住 *Option*
    键并单击其名称来查看常量或变量的类型。要查看实际操作，请按照以下步骤进行：
- en: 'Add the following code to your playground to declare a string:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以声明一个字符串：
- en: '[PRE4]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Click the **Play/Stop** button to run it.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **播放/停止** 按钮来运行它。
- en: 'Hold down the *Option* key and click `cuisine` to reveal the constant type.
    You should see the following:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住 *Option* 键并单击 `cuisine` 以显示常量类型。您应该看到以下内容：
- en: '![Figure 2.12: Type declaration pop-up'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12：类型声明弹出窗口](img/Figure_2.11_B17469.jpg)'
- en: '](img/Figure_2.12_B17469.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B17469.jpg)'
- en: 'Figure 2.12: Type declaration pop-up'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12：类型声明弹出窗口
- en: As you can see, `cuisine`'s type is `String`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`cuisine` 的类型是 `String`。
- en: What if you want to set a specific type for a variable or constant? You'll see
    how to do that in the next section.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为变量或常量设置特定的类型，您将在下一节中了解如何操作。
- en: Using type annotation to specify a type
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型注解来指定类型
- en: You've seen that Xcode tries to automatically determine the data type of a variable
    or constant based on the value provided. However, at times, you may wish to specify
    a type instead of letting Xcode do it for you. To do this, type a colon after
    a constant or variable name, followed by the desired type. This is known as **type
    annotation**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到 Xcode 会尝试根据提供的值自动确定变量或常量的数据类型。然而，有时您可能希望指定一个类型而不是让 Xcode 为您做这件事。为此，在常量或变量名称后输入一个冒号，后跟所需类型。这被称为
    **类型注解**。
- en: 'Add the following code to your playground to declare a variable with a specific
    type, and click the **Play/Stop** button to run it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以声明一个具有特定类型的变量，并点击 **播放/停止** 按钮来运行它：
- en: '[PRE5]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, you specified `restaurantRating` has a specific type, `Double`. Even though
    you assigned an integer to `restaurantRating`, it will be stored as a floating-point
    number.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您指定了 `restaurantRating` 具有特定的类型，`Double`。即使您分配了一个整数给 `restaurantRating`，它也会被存储为浮点数。
- en: In the next section, you'll learn how Xcode helps you reduce the number of errors
    in your program by enforcing **type safety**.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将了解 Xcode 如何通过强制执行 **类型安全** 来帮助您减少程序中的错误数量。
- en: Using type safety to check values
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类型安全来检查值
- en: 'Swift is a type-safe language. It checks to see whether you''re assigning values
    of the correct type to variables and flags mismatched types as errors. Let''s
    see how this works by following these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 是一种类型安全的语言。它会检查您是否正在将正确类型的值分配给变量，并将不匹配的类型标记为错误。让我们通过以下步骤来了解它是如何工作的：
- en: 'Add the following code to your playground to assign a string to `restaurantRating`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，以将字符串赋值给 `restaurantRating`：
- en: '[PRE6]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Click the **Play/Stop** button to run the code.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **播放/停止** 按钮来运行代码。
- en: You should see a red circle with an **x** inside it. The exclamation mark means
    Xcode can't suggest a fix for this. Click on the red circle.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到一个带有**x**的红色圆圈。感叹号表示Xcode无法为此提供修复建议。点击红色圆圈。
- en: 'Since you are trying to assign a string to a variable of type `Double`, the
    following error message is displayed:![Figure 2.13: Expanded error notification
    with no fix'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '由于你试图将一个字符串赋值给类型为`Double`的变量，因此显示以下错误信息：![Figure 2.13: Expanded error notification
    with no fix]'
- en: '](img/Figure_2.13_B17469.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/Figure_2.13_B17469.jpg]'
- en: 'Figure 2.13: Expanded error notification with no fix'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.13：无修复建议的扩展错误通知
- en: 'Comment out the line by typing `//` before it as shown:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该行前输入`//`来注释掉它，如下所示：
- en: '[PRE7]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The red circle disappears as there are no more errors in your program.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 红色圆圈消失了，因为你的程序中没有错误了。
- en: Tip
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Selecting lines of code and typing *Command + /* will comment them out.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择代码行并输入*Command + /* 来注释掉它们。
- en: Now that you know how to store data in constants and variables, let's look at
    how to perform operations on them in the next section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何在常量和变量中存储数据，让我们看看如何在下一节中对这些数据进行操作。
- en: Exploring operators
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索操作符
- en: You can perform arithmetic, comparison, and logical operations in Swift. `true`
    or `false`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Swift中执行算术、比较和逻辑操作。`true`或`false`。
- en: Important Information
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: For more information on operators, visit [https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 关于操作符的更多信息，请访问[https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html](https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html)。
- en: Let's look at each operator type in more detail. You'll start with arithmetic
    operators (addition, subtraction, multiplication, and division) in the next section.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看每种操作符类型。你将在下一节开始学习算术操作符（加法、减法、乘法和除法）。
- en: Using arithmetic operators
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用算术操作符
- en: 'You can perform mathematical operations on integer and floating-point numbers
    by using the standard arithmetic operators shown here:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这里显示的标准算术操作符对整数和浮点数执行数学运算：
- en: '![Figure 2.14: Arithmetic operators'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.14: Arithmetic operators]'
- en: '](img/Figure_2.14_B17469.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.14_B17469.jpg]'
- en: 'Figure 2.14: Arithmetic operators'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：算术操作符
- en: 'Let''s see how these operators are used. Follow these steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些操作符是如何使用的。按照以下步骤操作：
- en: 'Add the following code to add arithmetic operations to your playground:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的playground中，以添加算术运算：
- en: '[PRE8]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Click the `43`, `-11`, `-55`, and `-5`, respectively. Note that 55 divided by
    10 returns 5 instead of 5.5, as both numbers are integers.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`43`、`-11`、`-55`和`-5`，分别。请注意，55除以10返回5而不是5.5，因为这两个数都是整数。
- en: 'Operators can only work with operands of the same type. Enter the following
    code and run it to see what happens if the operands are of different types:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作符只能与相同类型的操作数一起工作。输入以下代码并运行它，看看如果操作数是不同类型会发生什么：
- en: '[PRE9]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You'll get an error message, `a` and `b` are different types. Note that Xcode
    can't fix this automatically, so it does not display any fix-it suggestions.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会得到一个错误信息，“a”和“b”是不同类型。请注意，Xcode无法自动修复这个问题，因此不会显示任何修复建议。
- en: 'To fix the error, modify the program as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了修复错误，按照以下方式修改程序：
- en: '[PRE10]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`Double(a)` gets the value stored in `a` and creates a floating-point number
    from it. Both operands are now of the same type, and now you can add the value
    in `b` to it. The value stored in `c` is `24.0`, and `24` will be displayed in
    the Results area.'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Double(a)`从`a`中获取存储的值并从中创建一个浮点数。现在两个操作数都是相同类型，现在你可以将`b`中的值加到它上面。存储在`c`中的值是`24.0`，`24`将在结果区域显示。'
- en: Now that you know how to use arithmetic operators, you'll look at compound assignment
    operators (`+=`, `-=`, `*=` and `/=`) in the next section.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何使用算术操作符，你将在下一节中查看复合赋值操作符（`+=`、`-=`、`*=` 和 `/=`）。
- en: Using compound assignment operators
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用复合赋值操作符
- en: 'You can perform an operation on a value and assign the result to a variable
    using compound assignment operators shown here:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用这里显示的复合赋值操作符对一个值执行操作并将结果赋给一个变量：
- en: '![Figure 2.15: Compound assignment operators'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.15: Compound assignment operators]'
- en: '](img/Figure_2.15_B17469.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.15_B17469.jpg]'
- en: 'Figure 2.15: Compound assignment operators'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15：复合赋值操作符
- en: 'Let''s see how these operators are used. Add the following code to your playground
    and click the **Play/Stop** button to run it:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些操作符是如何使用的。将以下代码添加到你的playground中，并点击**播放/停止**按钮来运行它：
- en: '[PRE11]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `a += 2` expression is shorthand for `a = a + 2`, so the value in `a` is
    now `1 + 2`, and `3` will be assigned to `a`. In the same way, `a -= 1` is shorthand
    for `a = a - 1`, so the value in `a` is now `3 - 1`, and `2` will be assigned
    to `a`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`a += 2` 表达式是 `a = a + 2` 的简写，所以 `a` 中的值现在是 `1 + 2`，并将 `3` 赋值给 `a`。同样，`a -=
    1` 是 `a = a - 1` 的简写，所以 `a` 中的值现在是 `3 - 1`，并将 `2` 赋值给 `a`。'
- en: Now that you are familiar with compound assignment operators, let's look at
    comparison operators (`==`, `/=`, `>`, `<`, `>=,` and `<=`) in the next section.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了复合赋值运算符，让我们在下一节看看比较运算符（`==`、`/=`、`>`、`<`、`>=` 和 `<=`）。
- en: Using comparison operators
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用比较运算符
- en: 'You can compare one value to another using comparison operators, and the result
    will be true or false. You can use the following comparison operators:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用比较运算符将一个值与另一个值进行比较，结果将是 `true` 或 `false`。你可以使用以下比较运算符：
- en: '![Figure 2.16: Comparison operators'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.16: Comparison operators]'
- en: '](img/Figure_2.16_B17469.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.16_B17469.jpg]'
- en: 'Figure 2.16: Comparison operators'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16：比较运算符
- en: 'Let''s see how these operators are used. Add the following code to your playground
    and click the **Play/Stop** button to run it:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些运算符是如何使用的。将以下代码添加到你的游乐场中，并点击 **Play/Stop** 按钮来运行它：
- en: '[PRE12]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s see how this works:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '`1 == 1` returns `true` because 1 is equal to 1.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 == 1` 返回 `true`，因为 1 等于 1。'
- en: '`2 != 1` returns `true` because 2 is not equal to 1.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 != 1` 返回 `true`，因为 2 不等于 1。'
- en: '`2 > 1` returns `true` because 2 is greater than 1.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 > 1` 返回 `true`，因为 2 大于 1。'
- en: '`1 < 2` returns `true` because 1 is less than 2.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 < 2` 返回 `true`，因为 1 小于 2。'
- en: '`1 >= 1` returns `true` because 1 is greater than or equal to 1.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1 >= 1` 返回 `true`，因为 1 大于或等于 1。'
- en: '`2 <= 1` returns `false` because 2 is not less than or equal to 1.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`2 <= 1` 返回 `false`，因为 2 不小于或等于 1。'
- en: The returned Boolean values will be displayed in the **Results** area.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的布尔值将在**结果**区域显示。
- en: What happens if you want to check more than one condition? That's where logical
    operators (**AND**, **OR** and **NOT**) come in. You'll study those in the next
    section.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检查多个条件，那逻辑运算符（**AND**、**OR** 和 **NOT**）就派上用场了。你将在下一节学习这些内容。
- en: Using logical operators
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用逻辑运算符
- en: Logical operators are handy when you deal with two or more conditions. For example,
    if you are at a convenience store, you can pay for items if you have cash or a
    credit card. **OR** is the logical operator in this case.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当你处理两个或更多条件时，逻辑运算符很有用。例如，如果你在便利店，如果你有现金或信用卡，你可以为商品付款。在这种情况下，**OR** 是逻辑运算符。
- en: 'You can use the following logical operators:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下逻辑运算符：
- en: '![Figure 2.17: Logical operators'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.17: Logical operators]'
- en: '](img/Figure_2.17_B17469.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_2.17_B17469.jpg]'
- en: 'Figure 2.17: Logical operators'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17：逻辑运算符
- en: 'To see how these operators are used, add the following code to your playground
    and click the **Play/Stop** button to run it:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看这些运算符的使用方法，请将以下代码添加到你的游乐场中，并点击 **Play/Stop** 按钮来运行它：
- en: '[PRE13]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s see how this works:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '`(1 == 1) && (2 == 2)` returns `true` as both operands are `true`, so `true`
    AND `true` returns `true`.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) && (2 == 2)` 返回 `true`，因为两个操作数都是 `true`，所以 `true` AND `true` 返回 `true`。'
- en: '`(1 == 1) && (2 != 2)` returns `false` as one operand is `false`, so `true`
    AND `false` returns `false`.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) && (2 != 2)` 返回 `false`，因为一个操作数是 `false`，所以 `true` AND `false` 返回
    `false`。'
- en: '`(1 == 1) || (2 == 2)` returns `true` as both operands are `true`, so `true`
    OR `true` returns `true`.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) || (2 == 2)` 返回 `true`，因为两个操作数都是 `true`，所以 `true` OR `true` 返回 `true`。'
- en: '`(1 == 1) || (2 != 2)` returns `true` as one operand is `true`, so `true` OR
    `false` returns `true`.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 == 1) || (2 != 2)` 返回 `true`，因为一个操作数是 `true`，所以 `true` OR `false` 返回 `true`。'
- en: '`(1 != 1) || (2 != 2)` returns `false` as both operands are `false`, so `false`
    OR `false` returns `false`.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1 != 1) || (2 != 2)` 返回 `false`，因为两个操作数都是 `false`，所以 `false` OR `false` 返回
    `false`。'
- en: '`!(1 == 1)` returns `false` as `1==1` is `true`, so NOT `true` returns `false`.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!(1 == 1)` 返回 `false`，因为 `1==1` 是 `true`，所以 NOT `true` 返回 `false`。'
- en: The returned Boolean values will be displayed in the Results area.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的布尔值将在结果区域显示。
- en: So far, you've only worked with numbers. In the next section, you'll see how
    you can perform operations on words and sentences, which are stored as strings
    using Swift's `String` type.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只处理过数字。在下一节中，你将看到如何使用 Swift 的 `String` 类型对单词和句子进行操作，它们作为字符串存储。
- en: Performing string operations
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行字符串操作
- en: As you have seen earlier, a string is a series of characters. They are represented
    by the `String` type, and they are fully Unicode-compliant.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如你之前所见，字符串是一系列字符。它们由 `String` 类型表示，并且完全符合 Unicode 标准。
- en: Important Information
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on strings, visit: [https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关字符串的信息，请访问：[https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html](https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html)。
- en: 'Let''s learn about some common string operations. Follow these steps:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一些常见的字符串操作。按照以下步骤操作：
- en: You can join two strings together using the `+` operator. Add the following
    code to your playground and click the `"Good"` and `" Morning"` are joined together
    and `"Good Morning"` is displayed in the Results area.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用 `+` 运算符将两个字符串连接起来。将以下代码添加到您的游乐场中，然后点击 `"Good"` 和 `"Morning"` 将被连接，并在结果区域显示
    `"Good Morning"`。
- en: You can combine strings with constants and variables of other types by `rating`
    constant contains `3.5`, a value of type `Double`. Putting `rating` in between
    the brackets of `String()` gets the value stored in `rating` and creates a new
    string based on it, `"3.5"`, which is combined with the string in the `ratingResult`
    variable, returning the string `"The restaurant rating is 3.5``"`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过 `rating` 常量（包含 `3.5`，类型为 `Double`）与其他类型的常量和变量结合使用。将 `rating` 放在 `String()`
    的括号中，获取存储在 `rating` 中的值，并基于它创建一个新的字符串 `"3.5"`，然后将其与 `ratingResult` 变量中的字符串结合，返回字符串
    `"The restaurant rating is 3.5"`。
- en: 'There is a simpler way of combining strings, called `\(`" and "`)`" in a string.
    Enter the following code and run it:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一种更简单的方法来组合字符串，称为字符串中的 `\(`" 和 "`)`" 。输入以下代码并运行它：
- en: '[PRE14]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As in the previous example, the value in `rating` is used to create a new string,
    `"3.5"`, returning the string `"The restaurant rating is 3.5"`.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前例所示，`rating` 中的值用于创建一个新的字符串 `"3.5"`，返回字符串 `"The restaurant rating is 3.5"`。
- en: Thus far, you can see the results of your instructions in the Results area.
    However, when you're writing your app using Xcode, you won't have access to the
    Results area that you see in your playground. To display the contents of variables
    and constants while your program is running, you'll learn how to print them to
    the Debug area in the next section.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您可以在结果区域看到您指令的结果。然而，当您使用 Xcode 编写应用程序时，您将无法访问在游乐场中看到的那个结果区域。为了在程序运行时显示变量和常量的内容，您将在下一节中学习如何将它们打印到调试区域。
- en: Using the print() statement
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `print()` 语句
- en: As you have seen in [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016)*,
    Getting Familiar with Xcode*, an Xcode project does not have a Results area that
    a playground has, but both project and playground have a Debug area. Using the
    `print()` statement will print anything between the brackets to the Debug area.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在 [*第 1 章*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016)*，熟悉 Xcode* 中所见，Xcode
    项目没有游乐场那样的结果区域，但项目和游乐场都有调试区域。使用 `print()` 语句会将括号之间的任何内容打印到调试区域。
- en: Important Information
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: The `print()` statement is a **function**. You'll learn more about functions
    in [*Chapter 6*](B17469_06_Final_VK_ePub.xhtml#_idTextAnchor094)*, Functions and
    Closures*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()` 语句是一个 **函数**。您将在 [*第 6 章*](B17469_06_Final_VK_ePub.xhtml#_idTextAnchor094)*，函数和闭包*
    中了解更多关于函数的内容。'
- en: 'Add the following code to your playground and click the **Play/Stop** button
    to run it:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的游乐场中，然后点击 **播放/停止** 按钮来运行它：
- en: '[PRE15]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You''ll see the value of `ratingResult` appear in the Debug area:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到 `ratingResult` 的值出现在调试区域：
- en: '![Figure 2.18: Debug area showing result of print() statement'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.18：调试区域显示 `print()` 语句的结果'
- en: '](img/Figure_2.18_B17469.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.18：调试区域显示 `print()` 语句的结果](img/Figure_2.18_B17469.jpg)'
- en: 'Figure 2.18: Debug area showing result of print() statement'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18：调试区域显示 `print()` 语句的结果
- en: When you're just starting out, feel free to use as many `print()` statements
    as you like. It's a really good way to understand what is happening in your program.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始学习时，可以随意使用尽可能多的 `print()` 语句。这是一种非常好的理解程序中发生情况的方法。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this lesson, you learned how to create and use playground files, which allow
    you to explore and experiment with Swift.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课中，您学习了如何创建和使用游乐场文件，这允许您探索和实验 Swift。
- en: You saw how Swift represents different types of data, and how to use constants
    and variables. This enables you to store numbers, Boolean values, and strings
    in your program
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到了 Swift 如何表示不同类型的数据，以及如何使用常量和变量。这使得您可以在程序中存储数字、布尔值和字符串。
- en: You also learned about type inference, type annotation, and type safety, which
    help you to write code concisely and with fewer errors.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您还了解了类型推断、类型注解和类型安全，这些有助于您编写简洁且错误更少的代码。
- en: You looked at how to perform operations on numbers and strings, which lets you
    perform simple data processing tasks.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了如何对数字和字符串进行操作，这让你能够执行简单的数据处理任务。
- en: You learned how to fix errors, and how to print to the Debug area, which is
    useful when you're trying to find and fix errors in the programs that you write.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何修复错误，以及如何将输出打印到调试区域，这在尝试查找和修复你编写的程序中的错误时非常有用。
- en: In the next chapter, you'll look at **conditionals** and **optionals**. Conditionals
    deal with making logical choices in your program, and optionals deal with cases
    where a variable may or may not have a value.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习**条件语句**和**可选参数**。条件语句用于在程序中做出逻辑选择，而可选参数则处理变量可能或可能没有值的情况。
