["```java\n/*\n* Copyright (C) 2009 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n* either express or implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\npackage com.android.cts.appaccessdata;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport android.test.AndroidTestCase;\n/**\n* Test that another app's private data cannot be accessed.\n*\n* Assumes that {@link APP_WITH_DATA_PKG} has already created the private data.\n*/\npublic class AccessPrivateDataTest extends AndroidTestCase {\n/**\n* The Android package name of the application that owns the private data\n*/\nprivate static final String APP_WITH_DATA_PKG = \"com.android.cts.appwithdata\";\n\n```", "```java\n    /**\n    * Name of private file to access. This must match the name * of the file created by\n    * {@link APP_WITH_DATA_PKG}.\n    */\n    private static final String PRIVATE_FILE_NAME = \"private_file.txt\";\n    /**\n    * Tests that another app's private file cannot be accessed\n    * @throws IOException\n    */\n    public void testAccessPrivateData() throws IOException {\n    try {\n    // construct the absolute file path to the app's private file\n    String privateFilePath = String.format( \"/data/data/%s/%s\", APP_WITH_DATA_PKG, PRIVATE_FILE_NAME);\n    FileInputStream inputStream = new FileInputStream(privateFilePath);\n    inputStream.read();\n    inputStream.close();\n    fail(\"Was able to access another app's private data\");\n    } catch (FileNotFoundException e) {\n    // expected\n    } catch (SecurityException e) {\n    // also valid\n    }\n    }\n    }\n\n    ```", "```java\nprivate static class RenamingMockContext extends RenamingDelegatingContext {\nprivate static final String PREFIX = \"test.\";\npublic RenamingMockContext(Context context) {\nsuper(new DelegatedMockContext(context), PREFIX);\n}\nprivate static class DelegatedMockContext extends MockContext {\npublic DelegatedMockContext(Context context) {\n// TODO Auto-generated constructor stub\n}\n}\n}\n\n```", "```java\npublic class TemperatureConverterApplicationTests extends\nApplicationTestCase<TemperatureConverterApplication> {\nprivate TemperatureConverterApplication mApplication;\npublic TemperatureConverterApplicationTests() {\nthis(\"TemperatureConverterApplicationTests\");\n}\npublic TemperatureConverterApplicationTests(String name) {\nsuper(TemperatureConverterApplication.class);\nsetName(name);\n}\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp(); final RenamingMockContext mockContext = new RenamingMockContext(getContext());\nsetContext(mockContext);\ncreateApplication();\nmApplication = getApplication();\n}\n@Override\nprotected void tearDown() throws Exception {\nsuper.tearDown();\n}\npublic final void testPreconditions() {\nassertNotNull(mApplication);\n}\npublic final void testSetDecimalPlaces() {\nfinal int expected = 3;\nmApplication.setDecimalPlaces(expected);\nassertEquals(expected, mApplication.getDecimalPlaces());\n}\n}\n\n```", "```java\n/**\n* Copyright (C) 2010-2011 Diego Torres Milano\n*/\npackage com.example.aatg.tc;\nimport android.app.Application;\n/**\n* @author diego\n*\n*/\npublic class TemperatureConverterApplication extends\nApplication {\n/**\n*\n*/\npublic TemperatureConverterApplication() {\n// TODO Auto-generated constructor stub\n}\npublic void setDecimalPlaces(int expected) {\n// TODO Auto-generated method stub\n}\npublic Object getDecimalPlaces() {\n// TODO Auto-generated method stub\nreturn null;\n}\n}\n\n```", "```java\n/**\n* Copyright (C) 2010-2011 Diego Torres Milano\n*/\npackage com.example.aatg.tc;\nimport android.app.Application;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.Editor;\nimport android.preference.PreferenceManager;\n/**\n* @author diego\n*\n*/\npublic class TemperatureConverterApplication extends Application {\nprivate static final String TAG = \"TemperatureConverterApplication\";\npublic static final int DECIMAL_PLACES_DEFAULT = 2;\npublic static final String DECIMAL_PLACES = \"decimalPlaces\";\nprivate SharedPreferences mSharedPreferences;\n/**\n*\n*/\npublic TemperatureConverterApplication() {\n// TODO Auto-generated constructor stub\n}\n@Override\npublic void onCreate() {\nsuper.onCreate();\nmSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n}\npublic void setDecimalPlaces(int d) {\nfinal Editor editor = mSharedPreferences.edit();\neditor.putString(DECIMAL_PLACES, Integer.toString(d));\neditor.commit();\n}\npublic int getDecimalPlaces() {\nreturn Integer.parseInt( mSharedPreferences.getString(DECIMAL_PLACES, Integer.toString(DECIMAL_PLACES_DEFAULT)));\n}\n}\n\n```", "```java\nprivate static class RenamingMockContext extends RenamingDelegatingContext {\n/**\n* The renaming prefix.\n*/\nprivate static final String PREFIX = \"test.\";\npublic RenamingMockContext(Context context) {\nsuper(new DelegatedMockContext(context), PREFIX);\n}\nprivate static class DelegatedMockContext extends MockContext {\nprivate Context mDelegatedContext;\npublic DelegatedMockContext(Context context) {\nmDelegatedContext = context;\n} @Override\npublic String getPackageName() {\nreturn mDelegatedContext.getPackageName();\n}\n}\n\n```", "```java\n@Override\npublic SharedPreferences getSharedPreferences( String name, int mode) {\nreturn mDelegatedContext.getSharedPreferences( PREFIX + name, mode);\n}\n\n```", "```java\n/*\n* Copyright (C) 2008 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n* implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\npackage com.example.android.apis.app;\nimport com.example.android.apis.R;\nimport com.example.android.apis.view.Focus2ActivityTest;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.test.ActivityUnitTestCase;\nimport android.test.suitebuilder.annotation.MediumTest;\nimport android.widget.Button;\n\n```", "```java\n/**\n* This demonstrates completely isolated \"unit test\" of an Activity\n* class.\n*\n* <p>This model for testing creates the entire Activity (\n* like {@link Focus2ActivityTest}) but does\n* not attach it to the system (for example, it cannot launch another\n* Activity).\n* It allows you to inject additional behaviors via the\n* {@link android.test.ActivityUnitTestCase#setActivityContext(\n* Context)} and\n* {@link android.test.ActivityUnitTestCase#setApplication(\n* android.app.Application)} methods.\n* It also allows you to more carefully test your Activity's\n* performance\n* Writing unit tests in this manner requires more care and\n* attention, but allows you to test\n* very specific behaviors, and can also be an easier way\n* to test error conditions.\n*\n* <p>Because ActivityUnitTestCase creates the Activity\n* under test completely outside of\n* the usual system, tests of layout and point-click UI\n* interaction are much less useful\n* in this configuration. It's more useful here to concentrate\n* on tests that involve the\n* underlying data model, internal business logic, or exercising\n* your Activity's life cycle.\n*\n* <p>See {@link com.example.android.apis.AllTests} for\n* documentation on running\n* all tests and individual tests in this application.\n*/\npublic class ForwardingTest extends ActivityUnitTestCase<Forwarding> {\nprivate Intent mStartIntent;\nprivate Button mButton;\npublic ForwardingTest() {\nsuper(Forwarding.class);\n}\n\n```", "```java\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\n// In setUp, you can create any shared test data, // or set up mock components to inject\n// into your Activity. But do not call startActivity() // until the actual test methods.\n// into your Activity. But do not call startActivity() // until the actual test methods.\nmStartIntent = new Intent(Intent.ACTION_MAIN);\n}\n\n```", "```java\n/**\n* The name 'test preconditions' is a convention to\n* signal that if this\n* test doesn't pass, the test case was not set up\n* properly and it might\n* explain any and all failures in other tests.\n* This is not guaranteed\n* to run before other tests, as junit uses reflection\n* to find the tests.\n*/\n@MediumTest\npublic void testPreconditions() {\nstartActivity(mStartIntent, null, null);\nmButton = (Button) getActivity().findViewById(R.id.go);\nassertNotNull(getActivity());\nassertNotNull(mButton);\n}\n\n```", "```java\n/**\n* This test demonstrates examining the way that activity calls\n* startActivity() to launch\n* other activities.\n*/\n@MediumTest\npublic void testSubLaunch() {\nForwarding activity = startActivity( mStartIntent, null, null);\nmButton = (Button) activity.findViewById(R.id.go);\n// This test confirms that when you click the button, // the activity attempts to open\n// another activity (by calling startActivity) and // close itself (by calling finish()).\nmButton.performClick();\nassertNotNull(getStartedActivityIntent());\nassertTrue(isFinishCalled());\n}\n\n```", "```java\n/**\n* This test demonstrates ways to exercise the Activity's\n* life cycle.\n*/\n@MediumTest\npublic void testLifeCycleCreate() {\nForwarding activity = startActivity( mStartIntent, null, null);\n// At this point, onCreate() has been called, but nothing else\n// Complete the startup of the activity\ngetInstrumentation().callActivityOnStart(activity);\ngetInstrumentation().callActivityOnResume(activity);\n// At this point you could test for various configuration // aspects, or you could\n// use a Mock Context to confirm that your activity has made // certain calls to the system\n// and set itself up properly.\ngetInstrumentation().callActivityOnPause(activity);\n// At this point you could confirm that the activity has // paused properly, as if it is\n// no longer the topmost activity on screen.\ngetInstrumentation().callActivityOnStop(activity);\n// At this point, you could confirm that the activity has // shut itself down appropriately,\n// or you could use a Mock Context to confirm that your // activity has released any system\n// resources it should no longer be holding.\n// ActivityUnitTestCase.tearDown(), which is always // automatically called, will take care\n// of calling onDestroy().\n}\n}\n\n```", "```java\n$ adb -e shell am instrument -w -e class com.example.android.apis.app.ForwardingTest com.example.android.apis.tests/android.test.InstrumentationTestRunner\n\n```", "```java\npackage com.example.aatg.mockcontextexample;\nimport android.app.Activity;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.widget.TextView;\nimport java.io.FileInputStream;\npublic class MockContextExampleActivity extends Activity {\npublic final static String FILE_NAME = \"myfile.txt\";\nprivate TextView mTv;\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\nmTv = (TextView) findViewById(R.id.TextView01);\nfinal byte[] buffer = new byte[1024];\ntry {\nfinal FileInputStream fis = openFileInput(FILE_NAME);\nfinal int n = fis.read(buffer);\nmTv.setText(new String(buffer, 0, n-1));\n} catch (Exception e) {\nmTv.setText(e.toString());\nmTv.setTextColor(Color.RED);\n}\n}\npublic String getText() {\nreturn mTv.getText().toString();\n}\n}\n\n```", "```java\n$ adb shell echo \"This is real data\" \\> \\ /data/data/com.example.aatg.mockcontextexample/files/myfile.txt\n$ adb shell echo \"This is *MOCK* data\" \\> \\ /data/data/com.example.aatg.mockcontextexample/files/test.myfile.txt\n\n```", "```java\npackage com.example.aatg.mockcontextexample.test;\nimport com.example.aatg.mockcontextexample. MockContextExampleActivity;\nimport android.content.Intent;\nimport android.test.ActivityUnitTestCase;\nimport android.test.RenamingDelegatingContext;\npublic class MockContextExampleTest extends ActivityUnitTestCase<MockContextExampleActivity> {\nprivate static final String PREFIX = \"test.\";\nprivate RenamingDelegatingContext mMockContext;\npublic MockContextExampleTest() {\nsuper(MockContextExampleActivity.class);\n}\nprotected void setUp() throws Exception {\nsuper.setUp();\nmMockContext = new RenamingDelegatingContext( getInstrumentation().getTargetContext(), PREFIX);\nmMockContext.makeExistingFilesAndDbsAccessible();\n}\nprotected void tearDown() throws Exception {\nsuper.tearDown();\n}\npublic void testSampleTextDisplayed() {\nsetActivityContext(mMockContext);\nstartActivity(new Intent(), null, null);\nfinal MockContextExampleActivity activity = getActivity();\nassertNotNull(activity);\nString text = activity.getText();\nassertEquals(\"This is *MOCK* data\", text);\n}\n}\n\n```", "```java\n/*\n* Copyright (C) 2010 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n* or implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\npackage com.android.browser;\nimport android.app.SearchManager;\nimport android.content.ContentValues;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.test.AndroidTestCase;\nimport android.test.suitebuilder.annotation.MediumTest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n```", "```java\n/**\n* Unit tests for {@link BrowserProvider}.\n*/\n@MediumTest\npublic class BrowserProviderTests extends AndroidTestCase {\nprivate ArrayList<Uri> mDeleteUris;\n@Override\nprotected void setUp() throws Exception {\nmDeleteUris = new ArrayList<Uri>();\nsuper.setUp();\n}\n@Override\nprotected void tearDown() throws Exception {\nfor (Uri uri : mDeleteUris) {\ndeleteUri(uri);\n}\nsuper.tearDown();\n}\n\n```", "```java\npublic void testHasDefaultBookmarks() {\nCursor c = getBookmarksSuggest(\"\");\ntry {\nassertTrue(\"No default bookmarks\", c.getCount() > 0);\n} finally {\nc.close();\n}\n}\npublic void testPartialFirstTitleWord() {\nassertInsertQuery(\"http://www.example.com/rasdfe\", \"nfgjra sdfywe\", \"nfgj\");\n}\npublic void testFullFirstTitleWord() {\nassertInsertQuery(\"http://www.example.com/\", \"nfgjra dfger\", \"nfgjra\");\n}\npublic void testFullFirstTitleWordPartialSecond() {\nassertInsertQuery(\"http://www.example.com/\", \"nfgjra dfger\", \"nfgjra df\");\n}\npublic void testFullTitle() {\nassertInsertQuery(\"http://www.example.com/\", \"nfgjra dfger\", \"nfgjra dfger\");\n}\n\n```", "```java\n// Not implemented in BrowserProvider\n// public void testFullSecondTitleWord() {\n// assertInsertQuery(\"http://www.example.com/rasdfe\", // \"nfgjra sdfywe\", \"sdfywe\");\n// }\npublic void testFullTitleJapanese() {\nString title = \"\\u30ae\\u30e3\\u30e9\\u30ea\\u30fc\\ u30fcGoogle\\u691c\\u7d22\";\nassertInsertQuery(\"http://www.example.com/sdaga\", title, title);\n}\npublic void testPartialTitleJapanese() {\nString title = \"\\u30ae\\u30e3\\u30e9\\u30ea\\u30fc\\ u30fcGoogle\\u691c\\u7d22\";\nString query = \"\\u30ae\\u30e3\\u30e9\\u30ea\\u30fc\";\nassertInsertQuery(\"http://www.example.com/sdaga\", title, query);\n}\n// Test for http://b/issue?id=2152749\npublic void testSoundmarkTitleJapanese() {\nString title = \"\\u30ae\\u30e3\\u30e9\\u30ea\\u30fc\\ u30fcGoogle\\u691c\\u7d22\";\nString query = \"\\u30ad\\u30e3\\u30e9\\u30ea\\u30fc\";\nassertInsertQuery(\"http://www.example.com/sdaga\", title, query);\n}\n\n```", "```java\n//\n// Utilities\n//\nprivate void assertInsertQuery(String url, String title, String query) {\naddBookmark(url, title);\nassertQueryReturns(url, title, query);\n}\nprivate void assertQueryReturns(String url, String title, String query) {\nCursor c = getBookmarksSuggest(query);\ntry {\nassertTrue(title + \" not matched by \" + query, c.getCount() > 0);\nassertTrue(\"More than one result for \" + query, c.getCount() == 1);\nwhile (c.moveToNext()) {\nString text1 = getCol(c, SearchManager.SUGGEST_COLUMN_TEXT_1);\nassertNotNull(text1);\nassertEquals(\"Bad title\", title, text1);\nString text2 = getCol(c, SearchManager.SUGGEST_COLUMN_TEXT_2);\nassertNotNull(text2);\nString data = getCol(c, SearchManager.SUGGEST_COLUMN_INTENT_DATA);\nassertNotNull(data);\nassertEquals(\"Bad URL\", url, data);\n}\n} finally {\nc.close();\n}\n}\nprivate Cursor getBookmarksSuggest(String query) {\nUri suggestUri = Uri.parse( \"content://browser/bookmarks/search_suggest_query\");\nString[] selectionArgs = { query };\nCursor c = getContext().getContentResolver().query( suggestUri, null, \"url LIKE ?\",selectionArgs, null);\nassertNotNull(c);\nreturn c;\n}\nprivate void addBookmark(String url, String title) {\nUri uri = insertBookmark(url, title);\nassertNotNull(uri);\nassertFalse( android.provider.Browser.BOOKMARKS_URI.equals(uri));\nmDeleteUris.add(uri);\n}\nprivate Uri insertBookmark(String url, String title) {\nContentValues values = new ContentValues();\nvalues.put(\"title\", title);\nvalues.put(\"url\", url);\nvalues.put(\"visits\", 0);\nvalues.put(\"date\", 0);\nvalues.put(\"created\", 0);\nvalues.put(\"bookmark\", 1);\nreturn getContext().getContentResolver().insert( android.provider.Browser.BOOKMARKS_URI, values);\n}\nprivate void deleteUri(Uri uri) {\nint count = getContext().getContentResolver(). delete(uri, null, null);\nassertEquals(\"Failed to delete \" + uri, 1, count);\n}\nprivate static String getCol(Cursor c, String name) {\nint col = c.getColumnIndex(name);\nString msg = \"Column \" + name + \" not found, columns: \" + Arrays.toString(c.getColumnNames());\nassertTrue(msg, col >= 0);\nreturn c.getString(col);\n}\n}\n\n```", "```java\npublic final void testExceptionForLessThanAbsoluteZeroF() {\ntry {\nTemperatureConverter.fahrenheitToCelsius( TemperatureConverter.ABSOLUTE_ZERO_F-1);\nfail();\n}\ncatch (InvalidTemperatureException ex) {\n// do nothing\n}\n}\npublic final void testExceptionForLessThanAbsoluteZeroC() {\ntry {\nTemperatureConverter.celsiusToFahrenheit( TemperatureConverter.ABSOLUTE_ZERO_C-1);\nfail();\n}\ncatch (InvalidTemperatureException ex) {\n// do nothing\n}\n}\n\n```", "```java\npublic void testLifeCycleCreate() {\nForwarding activity = startActivity(mStartIntent, null, null);\n// At this point, onCreate() has been called,\n// but nothing else\n// Complete the startup of the activity\ngetInstrumentation().callActivityOnStart(activity);\ngetInstrumentation().callActivityOnResume(activity);\n// At this point you could test for various\n// configuration aspects, or you could\n// use a Mock Context to confirm that your activity has made\n// certain calls to the system and set itself up properly.\ngetInstrumentation().callActivityOnPause(activity);\n// At this point you could confirm that the activity has\n// paused properly, as if it is\n// no longer the topmost activity on screen.\ngetInstrumentation().callActivityOnStop(activity);\n// At this point, you could confirm that the activity\n// has shut itself down appropriately,\n// or you could use a Mock Context to confirm that your\n// activity has released any system\n// resources it should no longer be holding.\n// ActivityUnitTestCase.tearDown(), which is always\n// automatically called, will take care\n// of calling onDestroy().\n}\n\n```", "```java\n/*\n* Copyright (C) 2008 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n* implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\npackage com.example.android.apis.app;\nimport android.app.Notification;\nimport android.app.NotificationManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.test.MoreAsserts;\nimport android.test.ServiceTestCase;\nimport android.test.suitebuilder.annotation.MediumTest;\nimport android.test.suitebuilder.annotation.SmallTest;\n\n```", "```java\n/**\n* This is a simple framework for a test of a Service.\n* See {@link android.test.ServiceTestCase\n* ServiceTestCase} for more information on how to write and\n* extend service tests.\n*\n* To run this test, you can type:\n* adb shell am instrument -w \\\n* -e class com.example.android.apis.app.LocalServiceTest \\\n* com.example.android.apis.tests/android.test.\n* InstrumentationTestRunner\n*/\npublic class LocalServiceTest extends ServiceTestCase<LocalService> {\npublic LocalServiceTest() {\nsuper(LocalService.class);\n}\n\n```", "```java\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\n}\n\n```", "```java\n/**\n* The name 'test preconditions' is a convention to signal that\n* if this\n* test doesn't pass, the test case was not set up properly and\n* it might\n* explain any and all failures in other tests. This is not\n* guaranteed to run before other tests, as junit uses\n* reflection to find the tests.\n*/\n@SmallTest\npublic void testPreconditions() {\n}\n\n```", "```java\n/**\n* Test basic startup/shutdown of Service\n*/\n@SmallTest\npublic void testStartable() {\nIntent startIntent = new Intent();\nstartIntent.setClass(getContext(), LocalService.class);\nstartService(startIntent);\n}\n/**\n* Test binding to service\n*/\n@MediumTest\npublic void testBindable() {\nIntent startIntent = new Intent();\nstartIntent.setClass(getContext(), LocalService.class);\nIBinder service = bindService(startIntent);\n}\n}\n\n```", "```java\n/**\n* Class for clients to access. Because we know this service\n* always runs in the same process as its clients,\n* we don't need to deal with IPC.\n*/\npublic class LocalBinder extends Binder {\nLocalService getService() {\nreturn LocalService.this;\n}\n}\n\n```", "```java\nimport static org.easymock.EasyMock.*;\n\n```", "```java\n$ mkdir mylib-1.0\n$ (cd mylib-1.0; jar xf /path/to/mylib-1.0.jar)\n$ mv mylib-1.0/META-INF/LICENSE mylib-1.0/META-INF/LICENSE.mylib\n$ mv mylib-1.0/META-INF/NOTICE mylib-1.0/META-INF/NOTICE.mylib\n$ (cd mylib-1.0; jar cf /path/to/mylib-1.0-android.jar .)\n\n```", "```java\n/**\n* Test method for {@link com.example.aatg.tc.EditNumber}.\n* Several input strings are set and compared against the\n* expected results after filters are applied.\n* This test use {@link EasyMock}\n*/\npublic final void testTextChanged() {\nfinal String[] sai = new String[] {\nnull, \"\", \"1\", \"123\", \"-123\", \"0\", \"1.2\", \"-1.2\", \"1-2-3\", \"+1\", \"1.2.3\" };\nfinal String[] sar = new String[] {\n\"\", \"\", \"1\", \"123\", \"-123\", \"0\", \"1.2\", \"-1.2\", \"123\", \"1\", \"12.3\" };\n// mock\nfinal TextWatcher watcher = createMock(TextWatcher.class);\nmEditNumber.addTextChangedListener(watcher);\nfor (int i=1; i < sai.length; i++) {\n// record\nwatcher.beforeTextChanged(stringCmp(sar[i-1]), eq(0),\neq(sar[i-1].length()), eq(sar[i].length()));\nwatcher.onTextChanged(stringCmp(sar[i]), eq(0),\neq(sar[i-1].length()), eq(sar[i].length()));\nwatcher.afterTextChanged(stringCmp(\nEditable.Factory.getInstance().newEditable(sar[i])));\n// replay\nreplay(watcher);\n// exercise\nmEditNumber.setText(sai[i]);\n// test\nfinal String actual = mEditNumber.getText().toString();\nassertEquals(sai[i] + \" => \" + sar[i] + \" => \" + actual, sar[i], actual);\n// verify\nverify(watcher);\n// reset\nreset(watcher);\n}\n}\n\n```", "```java\npublic static <T> T cmp(T value, Comparator<? super T> comparator, LogicalOperator operator)\n\n```", "```java\npublic static final class StringComparator<T> implements Comparator<T> {\n/* (non-Javadoc)\n* @see java.util.Comparator#compare( java.lang.Object, java.lang.Object)\n*\n* Return the {@link String} comparison of the arguments.\n*/\n@Override\npublic int compare(T object1, T object2) {\nreturn object1.toString().compareTo(object2.toString());\n}\n}\n\n```", "```java\n/**\n* Return {@link EasyMock.cmp} using a {@link StringComparator} and\n* {@link LogicalOperator.EQUAL}\n*\n* @param <T> The original class of the arguments\n* @param o The argument to the comparison\n* @return {@link EasyMock.cmp}\n*/\npublic static <T> T stringCmp(T o) {\nreturn cmp(o, new StringComparator<T>(), LogicalOperator.EQUAL);\n}\n\n```", "```java\nwatcher.beforeTextChanged(stringCmp(sar[i-1]), …\n\n```", "```java\nimport org.hamcrest.integration.EasyMock2Adapter;\nimport org.hamcrest.object.HasToString;\n/**\n* Create an {@link EasyMock2Adapter} using a\n* {@link HasToString.hasToString}\n*\n* @param <T> The original class of the arguments\n* @param o The argument to the comparison\n* @return o\n*/\npublic static <T> T hasToString(T o) {\nEasyMock2Adapter.adapt(\nHasToString.hasToString(o.toString()));\nreturn o;\n}\n\n```", "```java\n// record\nwatcher.beforeTextChanged(hasToString(sar[i-1]), eq(0),\neq(sar[i-1].length()), eq(sar[i].length()));\nwatcher.onTextChanged(hasToString(sar[i]), eq(0),\neq(sar[i-1].length()), eq(sar[i].length()));\nwatcher.afterTextChanged(hasToString(\nEditable.Factory.getInstance().newEditable(sar[i])));\n\n```", "```java\n/*\n* Copyright (C) 2008 The Android Open Source Project\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n* either express or implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\npackage com.example.android.apis.view;\nimport com.example.android.apis.R;\nimport android.content.Context;\nimport android.test.AndroidTestCase;\nimport android.test.suitebuilder.annotation.SmallTest;\nimport android.view.FocusFinder;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\n\n```", "```java\n/**\n* This exercises the same logic as {@link Focus2ActivityTest} but in\n* a lighter weight manner; it doesn't need to launch the activity,\n* and it can test the focus behavior by calling {@link FocusFinder}\n* methods directly.\n*\n* {@link Focus2ActivityTest} is still useful to verify that, at an\n* end to end level, key events actually translate to focus\n* transitioning in the way we expect.\n* A good complementary way to use both types of tests might be to\n* have more exhaustive coverage in the lighter weight test case,\n* and a few end to end scenarios in the functional {@link\n* android.test.ActivityInstrumentationTestCase}.\n* This would provide reasonable assurance that the end to end\n* system is working, while avoiding the overhead of\n* having every corner case exercised in the slower,\n* heavier weight way.\n*\n* Even as a lighter weight test, this test still needs access to a\n* {@link Context} to inflate the file, which is why it extends\n* {@link AndroidTestCase}.\n*\n* If you ever need a context to do your work in tests, you can\n* extend {@link AndroidTestCase}, and when run via an {@link\n* android.test.InstrumentationTestRunner},\n* the context will be injected for you.\n*\n* See {@link com.example.android.apis.app.ForwardingTest} for\n* an example of an Activity unit test.\n*\n* See {@link com.example.android.apis.AllTests} for\n* documentation on running\n* all tests and individual tests in this application.\n*/\npublic class Focus2AndroidTest extends AndroidTestCase {\n\n```", "```java\nprivate FocusFinder mFocusFinder;\nprivate ViewGroup mRoot;\nprivate Button mLeftButton;\nprivate Button mCenterButton;\nprivate Button mRightButton;\n@Override\nprotected void setUp() throws Exception {\nsuper.setUp();\nmFocusFinder = FocusFinder.getInstance();\n// inflate the layout\nfinal Context context = getContext();\nfinal LayoutInflater inflater = LayoutInflater.from(context);\nmRoot = (ViewGroup) inflater.inflate(R.layout.focus_2, null);\n// manually measure it, and lay it out\nmRoot.measure(500, 500);\nmRoot.layout(0, 0, 500, 500);\nmLeftButton = (Button) mRoot.findViewById(R.id.leftButton);\nmCenterButton = (Button) mRoot.findViewById(R.id.centerButton);\nmRightButton = (Button) mRoot.findViewById( R.id.rightButton);\n}\n\n```", "```java\n    /**\n    * The name 'test preconditions' is a convention to signal\n    * that if this test doesn't pass, the test case was not\n    * set up properly and it might explain any and all failures\n    * in other tests. This is not guaranteed to run before\n    * other tests, as junit uses reflection to find the tests.\n    */\n    @SmallTest\n    public void testPreconditions() {\n    assertNotNull(mLeftButton);\n    assertTrue(\"center button should be right of left button\",\n    mLeftButton.getRight() < mCenterButton.getLeft());\n    assertTrue(\"right button should be right of center button\",\n    mCenterButton.getRight() < mRightButton.getLeft());\n    }\n\n    ```", "```java\n@SmallTest\npublic void testGoingRightFromLeftButtonJumpsOverCenterToRight() {\nassertEquals(\"right should be next focus from left\", mRightButton, mFocusFinder.findNextFocus( mRoot, mLeftButton, View.FOCUS_RIGHT));\n}\n@SmallTest\npublic void testGoingLeftFromRightButtonGoesToCenter() {\nassertEquals(\"center should be next focus from right\", mCenterButton, mFocusFinder.findNextFocus( mRoot, mRightButton, View.FOCUS_LEFT));\n}\n}\n\n```", "```java\npackage com.example.aatg.parserexample;\nimport org.xmlpull.v1.XmlPullParser;\nimport org.xmlpull.v1.XmlPullParserFactory;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\npublic class ParserExampleActivity extends Activity {\n/** Called when the activity is first created. */\n@Override\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.main);\n}\npublic String parseXml(InputStream xml) {\ntry {\nXmlPullParserFactory factory = XmlPullParserFactory.newInstance();\nfactory.setNamespaceAware(true);\nXmlPullParser parser = factory.newPullParser();\nparser.setInput(new InputStreamReader(xml));\nint eventType = parser.getEventType();\nStringBuilder sb = new StringBuilder();\nwhile (eventType != XmlPullParser.END_DOCUMENT) {\nif(eventType == XmlPullParser.TEXT) {\nsb.append(parser.getText());\n}\neventType = parser.next();\n}\nreturn sb.toString();\n}\ncatch (Exception e) {\n// TODO Auto-generated catch block\ne.printStackTrace();\n}\nreturn null;\n}\n}\n\n```", "```java\npackage com.example.aatg.parserexample.test;\nimport com.example.aatg.parserexample.ParserExampleActivity;\nimport android.test.ActivityInstrumentationTestCase2;\nimport java.io.IOException;\nimport java.io.InputStream;\npublic class ParserExampleActivityTest extends ActivityInstrumentationTestCase2<ParserExampleActivity> {\npublic ParserExampleActivityTest() {\nsuper(ParserExampleActivity.class);\n}\nprotected void setUp() throws Exception {\nsuper.setUp();\n}\nprotected void tearDown() throws Exception {\nsuper.tearDown();\n}\npublic final void testParseXml() {\nParserExampleActivity activity = getActivity();\nString result = null;\ntry {\nInputStream myxml = getInstrumentation().getContext(). getAssets().open(\"my_document.xml\");\nresult = activity.parseXml(myxml);\n} catch (IOException e) {\nfail(e.getLocalizedMessage());\n}\nassertNotNull(result);\n}\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- place this file in assets/my_document.xml -->\n<my>This is my document</my>\n\n```", "```java\npublic final void assertNotInLowMemoryCondition() {\n//Verification: check if it is in low memory\nActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();\n((ActivityManager)getActivity().getSystemService( Context.ACTIVITY_SERVICE)).getMemoryInfo(mi);\nassertFalse(\"Low memory condition\", mi.lowMemory);\n}\n\n```", "```java\npublic final String captureProcessInfo() {\nString cmd = \"ps\";\nString memoryUsage = null;\nint ch; // the character read\ntry {\nProcess p = Runtime.getRuntime().exec(cmd);\nInputStream in = p.getInputStream();\nStringBuffer sb = new StringBuffer(512);\nwhile ((ch = in.read()) != -1) {\nsb.append((char) ch);\n}\nmemoryUsage = sb.toString();\n} catch (IOException e) {\nfail(e.getLocalizedMessage());\n}\nreturn memoryUsage;\n}\n\n```", "```java\nLog.d(TAG, captureProcessInfo());\n\n```"]