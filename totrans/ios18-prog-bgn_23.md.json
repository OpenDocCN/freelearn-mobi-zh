["```swift\n    extension AddJournalEntryViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    } \n    ```", "```swift\n    @IBAction func getPhoto(_ sender: UITapGestureRecognizer) {\n    **let****imagePickerController****=****UIImagePickerController****()**\n    **imagePickerController.****delegate****=****self**\n    **#if****targetEnvironment(simulator)**\n    **imagePickerController.****sourceType****=****.****photoLibrary**\n    **#else**\n     **imagePickerController.****sourceType** **= .****camera**\n     **imagePickerController.****showsCameraControls** **=** **true**\n    **#endif**\n    **present****(imagePickerController,** **animated****:** **true****)**\n    } \n    ```", "```swift\n    let imagePickerController = UIImagePickerController() \n    ```", "```swift\n    imagePickerController.delegate = self \n    ```", "```swift\n    #if targetEnvironment(simulator)\n    imagePickerController.sourceType = .photoLibrary\n    #else\n    imagePickerController.sourceType = .camera\n    imagePickerController.showsCameraControls = true\n    #endif \n    ```", "```swift\n    present(imagePickerController, animated: true) \n    ```", "```swift\n// MARK: - UIImagePickerControllerDelegate\nfunc imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n  dismiss(animated: true)\n}\nfunc imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n  guard let selectedImage =\n  info[UIImagePickerController.InfoKey.originalImage]\n  as? UIImage else {\n    fatalError(\"Expected a dictionary containing an image,\n    but was provided the following: \\(info)\")\n  }\n  let smallerImage = selectedImage.preparingThumbnail(\n  of: CGSize(width: 300, height: 300))\n  photoImageView.image = smallerImage\n  dismiss(animated: true)\n} \n```"]