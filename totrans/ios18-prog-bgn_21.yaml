- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with JSON Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you modified the Add Journal Entry screen so that the
    user can add their current location to a new journal entry, and configured the
    Map screen to display a region centered on your current location as well as pins
    representing the locations where the journal entries are made. However, since
    the `MapViewController` instance does not have access to the `journalEntries`
    array in the `JournalListViewcontroller` instance, newly added journal entries
    do not appear on the Map screen as pins. Also, all newly added journal entries
    are lost when you quit the app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create a **singleton**, `SharedData`, that will provide
    journal entry data to both the Journal List and Map screens. This class will also
    be used to load journal entry data from a file on your device when the app starts
    up and save journal entry data to a file on your device when you add or delete
    journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start by creating the `SharedData` class and configuring your app to
    use it. Next, you’ll modify the `JournalEntry` class to be compatible with the
    **JSON** format, so you can save journal entries to a JSON file and load journal
    entries from a JSON file. After that, you’ll add methods to save journal entry
    data when you add or delete journal entries, and to load journal entry data when
    your app is starting up.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll know how to create a class to store, load,
    and save data from JSON files for use in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a singleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the `JournalEntry` class to be JSON-compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading and saving JSON data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter18` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/lJ4zuzzyjYE](https://youtu.be/lJ4zuzzyjYE%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating a new singleton to store the data used by your app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a singleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present, when you add new journal entries to your app, they will appear on
    the Journal List screen, but when you switch to the Map screen, the newly added
    journal entries are not present. This is because the `MapViewController` instance
    does not have access to the `journalEntries` array in the `JournalListViewcontroller`
    instance. To solve this issue, you’ll create a new singleton to store your app
    data. A singleton is created once and then referenced throughout your app. This
    means that the `JournalListViewController` class and the `MapViewController` class
    will be getting their data from a single source.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on singletons, see [https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton](https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create a singleton named `SharedData` and configure the `JournalListViewController`
    and `MapViewController` classes to use it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, move the **Model** group that is inside the **Journal
    List Screen** group to a new location just below the **SceneDelegate** file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_18_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: Model group moved to a new location'
  prefs: []
  type: TYPE_NORMAL
- en: This reflects the fact that the model objects are no longer solely used by the
    Journal List screen, but are used by the entire app.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **Model** group and choose **New File from Template...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `SharedData` and then click **Create**. It will appear in the
    Project navigator and its contents will appear in the Editor area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the contents of this file with the following code to declare and define
    the `SharedData` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This statement creates a single instance of this class, which means that the
    only instance of `SharedData` in your app is stored in the `shared` property.
    This property is marked with `@MainActor` to ensure that it should only be accessed
    from the main queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, watch Apple’s WWDC 2022 video titled *Eliminate data
    races using Swift Concurrency* here: [https://developer.apple.com/videos/play/wwdc2022/110351/](https://developer.apple.com/videos/play/wwdc2022/110351/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This statement creates an empty array named `journalEntries` that will be used
    to store `JournalEntry` instances. The private keyword means that the `journalEntries`
    array may only be modified by methods in the `SharedData` class. This is to ensure
    that no other part of your app can make changes to the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `init()` method has an empty body. This prevents the accidental creation
    of a `SharedData()` instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the number of items in the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the `JournalEntry` instance located at the specified index
    in the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This method returns a copy of the `JournalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This method inserts the `JournalEntry` instance that was passed into the `JournalEntries`
    array at index `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This method removes the `JournalEntry` instance at the specified index from
    the `JournalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have created the `SharedData` class, you’ll modify your app to
    use it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file. Remove
    the `journalEntries` property from the `JournalListViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `viewDidLoad()`, remove the statement that creates the sample data and appends
    it to the `journalEntries` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `tableView(_:numberOfRowsInSection:)` method to get the number of
    rows for the table view from `SharedData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `tableView(_:cellForRowAt:)` method to get the required `JournalEntry`
    instance from `SharedData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `tableView(_:commit:forRowAt:)` method to remove the selected `JournalEntry`
    instance from `SharedData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `prepare(for:sender:)` method to use `SharedData` to get the selected
    `JournalEntry` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `unwindNewEntrySave(segue:)` method to add a new `JournalEntry`
    instance to `SharedData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have made all the required changes to the `JournalListViewController` class.
    Now you will modify the `MapViewController` class to use `SharedData`. As noted
    in the previous chapter, when running your app on an actual device, it takes a
    long time to determine the device’s location, and the map on the Map screen will
    not be updated if the user’s location changes. You’ll address both of these issues
    as well. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **MapViewController** file. Remove the
    `annotations` property from the `MapViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `viewDidLoad()` method by removing the highlighted statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To reduce the time taken to determine the user’s location, add a statement
    to `fetchUserLocation()` as shown to set the location manager instance’s accuracy
    to `kCLLocationAcccuracyKilometer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The default value of this property is `kCLLocationAccuracyBest`, which takes
    a relatively long time to determine. This trade-off is acceptable since the *JRNL*
    app does not require the highest level of accuracy when displaying annotations
    on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the user’s location whenever the Map screen appears, first implement
    the following method after the `viewDidLoad()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `viewIsAppearing()` view controller lifecycle method was introduced during
    WWDC 2023\. You can learn more about this method at this link: [https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing](https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following statement to the `updateMapWithLocation(_:)` method as shown
    so that the map view gets all the annotations from `SharedData` after the user’s
    location has been determined and the map region has been set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this change, if you are on the Journal List screen, tapping the **Map**
    tab bar button will update the user’s location, redraw the map on the Map screen,
    and reload the map annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have made all the required changes to the `MapViewController` class. Now
    let’s test your app. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Simulator, and choose **Location** | **Apple** from Simulator’s **Features**
    menu to simulate a location. Build and run your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **+** button and add a new journal entry. Make sure the **Get Location**
    switch is on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_18_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: Simulator showing Add New Journal Entry screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap the **Map** tab button to go to the Map screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_18_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: Simulator showing the Map tab button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the journal entry you added earlier is visible as a pin on the Map screen.
    Tap the pin and then tap the callout button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_18_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.4: Simulator showing pin callout button'
  prefs: []
  type: TYPE_NORMAL
- en: 'The journal entry details are displayed on the Journal Entry Detail screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_18_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.5: Simulator showing Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a singleton and configured your app to use it,
    but the data is lost once the app quits. Later, you will write code to save journal
    entries to your device storage. But before you can do that, you’ll modify the
    `JournalEntry` class so that the data in it can be stored in JSON format. You’ll
    do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the JournalEntry class to be JSON-compatible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At present, all app data is lost when you quit the app. You will need to implement
    a way to save your app data. iOS provides many ways to store your app data. One
    of them is converting the data to **JavaScript Object Notation** (**JSON**) format,
    and then writing it as a file to your device storage. JSON is a way to structure
    data in a file that can be easily read by both people and computers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you to understand the JSON format, look at the sample shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This sample is a representation of the `journalEntries` array in JSON format.
    As you can see, it starts with an opening square bracket, and each item inside
    consists of key-value pairs containing journal entry information, enclosed by
    curly braces and separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: At the very end of the file, you can see a closing square bracket. The square
    brackets denote arrays, and the curly braces denote dictionaries. The keys in
    the dictionary correspond to the properties in a `JournalEntry` instance, and
    the values correspond to the values assigned to those properties.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about using JSON with Swift types, see [https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types).
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about parsing JSON files, watch the video available here: [https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4](https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4).'
  prefs: []
  type: TYPE_NORMAL
- en: A custom Swift type needs to conform to the `Codable` protocol before it can
    be converted to and from JSON.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `Codable`, see [https://developer.apple.com/documentation/swift/codable](https://developer.apple.com/documentation/swift/codable).
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON supports dates, strings, numbers, Boolean values, and `null` values, but
    it does not support images. To conform to the `Codable` protocol, you will modify
    the `JournalEntry` class to use types that are supported by JSON and modify the
    rest of your app to work with the updated `JournalEntry` instance. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntry** file. Modify the `JournalEntry`
    class declaration as shown to adopt the `Codable` protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An error will appear because the `UIImage` type does not conform to `Codable`.
    Modify the `photo` property as shown to make `JournalEntry` conform to `Codable`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The error will disappear, but another error will appear in the initializer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the initializer as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This converts the value in the `photo` argument into a `Data` instance and assigns
    it to `photoData`.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the `Data` type, see [https://developer.apple.com/documentation/foundation/data](https://developer.apple.com/documentation/foundation/data).
  prefs: []
  type: TYPE_NORMAL
- en: 'All the errors in the initializer are gone, but if you build your app now,
    you’ll see other errors appear. Let’s fix them now. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file. Modify
    the `tableView(_:cellForRowAt:)` method in the `JournalListViewController` class
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The updated code converts the data stored in `photoData` back into a `UIImage`
    and assigns it to the image view in `journalCell`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntryDetailViewController** file.
    Modify the `viewDidLoad()` method as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The updated code converts the data stored in `photoData` to a `UIImage` instance
    and assigns it to the `image` property of `photoImageView`. There should be no
    more errors in your app at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. Verify that the simulated location has been set and
    add a new journal entry. Your app should work the way it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the image is now black instead of blue. This is due to the image conversion
    process and will not be noticeable when you use images from your camera or photo
    library. You will learn how to do so in *Chapter 20*, *Getting Started with the
    Camera and Photo Library*.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully modified the `JournalEntry` class to conform to the `Codable`
    protocol, and you have addressed all the errors in your app. In the next section,
    you’ll implement saving and loading app data, so it will not be lost when you
    quit your app.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and saving JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have modified the `JournalEntry` class to conform to the `Codable`
    protocol, you are ready to implement loading data from and saving data to JSON
    files.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier for you to work with JSON files, Apple provides `JSONDecoder`
    and `JSONEncoder` classes.
  prefs: []
  type: TYPE_NORMAL
- en: A `JSONDecoder` instance decodes instances of a data type from JSON objects,
    and you will use it when loading files from your device storage.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `JSONDecoder`, see [https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder).
  prefs: []
  type: TYPE_NORMAL
- en: A `JSONEncoder` instance encodes instances of a data type to JSON objects, and
    you will use it when saving files to your device storage.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about `JSONEncoder`, see [https://developer.apple.com/documentation/foundation/jsonencoder](https://developer.apple.com/documentation/foundation/jsonencoder).
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll now implement the methods to load data from a file and save data to
    a file in the `SharedData` class. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **SharedData** file. In the `SharedData`
    class, implement a method to get the location where you can load or save a file
    on your device storage before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is analogous to getting the path to the Documents directory in your home
    directory on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about accessing the iOS file system, see [https://developer.apple.com/documentation/foundation/filemanager](https://developer.apple.com/documentation/foundation/filemanager).
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a method to load journal entries from a file on your device storage
    after the `documentDirectory()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method uses the `documentDirectory()` method to get the location where
    files can be loaded from. Then it specifies a file name, `journalEntriesData.json`,
    where the data is saved and appends that to the path. It then attempts to load
    the file. If successful, it attempts to decode the data into an array of `JournalEntry`
    instances and assign it to the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a method to save journal entries to a file on your device storage
    after the `loadJournalEntriesData()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method uses the `documentDirectory()` method to get the location where
    files can be saved. Then it specifies a file name where the data is to be saved
    and appends that to the path. It then attempts to use a `JSONEncoder` instance
    to encode the `journalEntries` array to JSON format and subsequently write it
    to the file specified earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have implemented the methods to load and save journal entries in your app.
    Now you’ll modify the `JournalListViewController` class to call these methods
    at appropriate times. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file. In
    the `JournalListViewController` class, modify `viewDidLoad()` to call the `loadJournalEntriesData()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will load any saved journal entries as the app is starting up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `tableView(_:commit:forRowAt:)` method to call the `saveJournalEntriesData()`
    method after a row has been removed from the table view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `unwindNewEntrySave(segue:)` method to call `saveJournalEntriesData()`
    after a new journal entry has been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build and run your app. Verify a simulated location has been set and add a new
    journal entry. Your app should work the way it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Stop your app and run it again. The journal entry you added earlier should
    still be present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_18_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.6: Simulator showing persistent app data in your app'
  prefs: []
  type: TYPE_NORMAL
- en: If you are running your app in Simulator, you can use a `print(filePath)` statement
    in the `saveJournalEntriesData()` method to print the file path to the Debug area.
    This will tell you where the `journalEntriesData.json` file is saved on your Mac.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully implemented saving and loading using JSON files for your
    app! Fantastic job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a singleton, `SharedData`, and configured your
    app to use it. Next, you modified the `JournalEntry` class to be compatible with
    the JSON format, so you can save journal entries to a JSON file and load journal
    entries from a JSON file. After that, you added methods to save journal entry
    data when you add or delete journal entries, and to load journal entry data when
    your app is starting up.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to create a class to store, load, and save data from JSON files
    for use in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll implement a custom user interface element that allows
    you to set star ratings for journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
