- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Getting Started with JSON Files
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 JSON 文件
- en: In the previous chapter, you modified the Add Journal Entry screen so that the
    user can add their current location to a new journal entry, and configured the
    Map screen to display a region centered on your current location as well as pins
    representing the locations where the journal entries are made. However, since
    the `MapViewController` instance does not have access to the `journalEntries`
    array in the `JournalListViewcontroller` instance, newly added journal entries
    do not appear on the Map screen as pins. Also, all newly added journal entries
    are lost when you quit the app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你修改了添加日志条目屏幕，以便用户可以将他们的当前位置添加到新的日志条目中，并配置地图屏幕以显示以你的当前位置为中心的区域以及代表日志条目位置的标记。然而，由于
    `MapViewController` 实例无法访问 `JournalListViewcontroller` 实例中的 `journalEntries` 数组，新添加的日志条目不会在地图屏幕上作为标记出现。此外，当你退出应用程序时，所有新添加的日志条目都会丢失。
- en: In this chapter, you will create a **singleton**, `SharedData`, that will provide
    journal entry data to both the Journal List and Map screens. This class will also
    be used to load journal entry data from a file on your device when the app starts
    up and save journal entry data to a file on your device when you add or delete
    journal entries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建一个 **单例**，`SharedData`，它将为日志列表和地图屏幕提供日志条目数据。此类还将用于在应用程序启动时从你的设备上的文件中加载日志条目数据，并在你添加或删除日志条目时将日志条目数据保存到你的设备上的文件中。
- en: You’ll start by creating the `SharedData` class and configuring your app to
    use it. Next, you’ll modify the `JournalEntry` class to be compatible with the
    **JSON** format, so you can save journal entries to a JSON file and load journal
    entries from a JSON file. After that, you’ll add methods to save journal entry
    data when you add or delete journal entries, and to load journal entry data when
    your app is starting up.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从创建 `SharedData` 类并配置你的应用程序使用它开始。接下来，你将修改 `JournalEntry` 类以兼容 **JSON** 格式，这样你就可以将日志条目保存到
    JSON 文件中，并从 JSON 文件中加载日志条目。之后，你将添加方法在添加或删除日志条目时保存日志条目数据，以及在应用程序启动时加载日志条目数据。
- en: By the end of this chapter, you’ll know how to create a class to store, load,
    and save data from JSON files for use in your own apps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何创建一个类来存储、加载和从 JSON 文件中保存数据，以便在你的应用程序中使用。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a singleton
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个单例
- en: Modifying the `JournalEntry` class to be JSON-compatible
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 `JournalEntry` 类以兼容 JSON
- en: Loading and saving JSON data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载和保存 JSON 数据
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你将继续在上一章中修改的 `JRNL` 项目上工作。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter18` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书代码包中的 `Chapter18` 文件夹包含本章的资源文件和完成的 Xcode 项目，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用：
- en: '[https://youtu.be/lJ4zuzzyjYE](https://youtu.be/lJ4zuzzyjYE%0D)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/lJ4zuzzyjYE](https://youtu.be/lJ4zuzzyjYE%0D)'
- en: Let’s start by creating a new singleton to store the data used by your app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的单例来存储你的应用程序使用的数据开始。
- en: Creating a singleton
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个单例
- en: At present, when you add new journal entries to your app, they will appear on
    the Journal List screen, but when you switch to the Map screen, the newly added
    journal entries are not present. This is because the `MapViewController` instance
    does not have access to the `journalEntries` array in the `JournalListViewcontroller`
    instance. To solve this issue, you’ll create a new singleton to store your app
    data. A singleton is created once and then referenced throughout your app. This
    means that the `JournalListViewController` class and the `MapViewController` class
    will be getting their data from a single source.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当你向你的应用程序中添加新的日志条目时，它们将出现在日志列表屏幕上，但当你切换到地图屏幕时，新添加的日志条目并不存在。这是因为 `MapViewController`
    实例无法访问 `JournalListViewcontroller` 实例中的 `journalEntries` 数组。为了解决这个问题，你将创建一个新的单例来存储你的应用程序数据。单例只创建一次，然后在你的应用程序中引用。这意味着
    `JournalListViewController` 类和 `MapViewController` 类将从单一来源获取数据。
- en: For more information on singletons, see [https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton](https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于单例的更多信息，请参阅[https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton](https://developer.apple.com/documentation/swift/managing-a-shared-resource-using-a-singleton)。
- en: 'You will create a singleton named `SharedData` and configure the `JournalListViewController`
    and `MapViewController` classes to use it. Follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个名为 `SharedData` 的单例，并配置 `JournalListViewController` 和 `MapViewController`
    类以使用它。按照以下步骤操作：
- en: 'In the Project navigator, move the **Model** group that is inside the **Journal
    List Screen** group to a new location just below the **SceneDelegate** file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，将位于 **Journal List Screen** 组内的 **Model** 组移动到 **SceneDelegate** 文件下方的新位置：
- en: '![](img/B31371_18_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_18_01.png)'
- en: 'Figure 18.1: Model group moved to a new location'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1：模型组移动到新位置
- en: This reflects the fact that the model objects are no longer solely used by the
    Journal List screen, but are used by the entire app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这反映了模型对象不再仅由 Journal List 屏幕使用，而是被整个应用程序使用。
- en: Right-click the **Model** group and choose **New File from Template...**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **Model** 组，并选择 **从模板新建文件...**。
- en: '**iOS** should already be selected. Choose **Swift File** and click **Next**.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **Swift 文件** 并点击 **下一步**。'
- en: Name the file `SharedData` and then click **Create**. It will appear in the
    Project navigator and its contents will appear in the Editor area.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `SharedData`，然后点击 **创建**。它将出现在项目导航器中，其内容将出现在编辑器区域。
- en: 'Replace the contents of this file with the following code to declare and define
    the `SharedData` class:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件的内容替换为以下代码以声明和定义 `SharedData` 类：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break this down:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This statement creates a single instance of this class, which means that the
    only instance of `SharedData` in your app is stored in the `shared` property.
    This property is marked with `@MainActor` to ensure that it should only be accessed
    from the main queue.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句创建此类的单个实例，这意味着你的应用程序中 `SharedData` 的唯一实例存储在 `shared` 属性中。此属性标记为 `@MainActor`
    以确保它只能从主队列访问。
- en: 'For more information, watch Apple’s WWDC 2022 video titled *Eliminate data
    races using Swift Concurrency* here: [https://developer.apple.com/videos/play/wwdc2022/110351/](https://developer.apple.com/videos/play/wwdc2022/110351/).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请观看 Apple 的 WWDC 2022 视频标题为 *使用 Swift Concurrency 消除数据竞争*，在此处：[https://developer.apple.com/videos/play/wwdc2022/110351/](https://developer.apple.com/videos/play/wwdc2022/110351/)。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This statement creates an empty array named `journalEntries` that will be used
    to store `JournalEntry` instances. The private keyword means that the `journalEntries`
    array may only be modified by methods in the `SharedData` class. This is to ensure
    that no other part of your app can make changes to the `journalEntries` array.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句创建一个名为 `journalEntries` 的空数组，该数组将用于存储 `JournalEntry` 实例。私有关键字意味着 `journalEntries`
    数组只能由 `SharedData` 类中的方法修改。这是为了确保应用程序的任何其他部分都不能更改 `journalEntries` 数组。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `init()` method has an empty body. This prevents the accidental creation
    of a `SharedData()` instance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`init()` 方法体为空。这防止了意外创建 `SharedData()` 实例。'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method returns the number of items in the `journalEntries` array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回 `journalEntries` 数组中的项目数量。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This method returns the `JournalEntry` instance located at the specified index
    in the `journalEntries` array.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回位于 `journalEntries` 数组指定索引处的 `JournalEntry` 实例。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method returns a copy of the `JournalEntries` array.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回 `JournalEntries` 数组的副本。
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method inserts the `JournalEntry` instance that was passed into the `JournalEntries`
    array at index `0`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将传入的 `JournalEntry` 实例插入到 `JournalEntries` 数组的索引 `0` 处。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method removes the `JournalEntry` instance at the specified index from
    the `JournalEntries` array.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法从 `JournalEntries` 数组中移除指定索引处的 `JournalEntry` 实例。
- en: 'Now that you have created the `SharedData` class, you’ll modify your app to
    use it. Follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已创建了 `SharedData` 类，您将修改应用程序以使用它。按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalListViewController** file. Remove
    the `journalEntries` property from the `JournalListViewController` class:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalListViewController** 文件。从 `JournalListViewController` 类中移除
    `journalEntries` 属性：
- en: '[PRE9]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In `viewDidLoad()`, remove the statement that creates the sample data and appends
    it to the `journalEntries` array:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `viewDidLoad()` 方法中，移除创建样本数据并将其追加到 `journalEntries` 数组的语句：
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Modify the `tableView(_:numberOfRowsInSection:)` method to get the number of
    rows for the table view from `SharedData`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:numberOfRowsInSection:)` 方法以从 `SharedData` 获取表格视图的行数：
- en: '[PRE11]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Modify the `tableView(_:cellForRowAt:)` method to get the required `JournalEntry`
    instance from `SharedData`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:cellForRowAt:)` 方法以从 `SharedData` 获取所需的 `JournalEntry` 实例：
- en: '[PRE12]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Modify the `tableView(_:commit:forRowAt:)` method to remove the selected `JournalEntry`
    instance from `SharedData`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:commit:forRowAt:)` 方法以从 `SharedData` 中移除选中的 `JournalEntry` 实例：
- en: '[PRE13]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Modify the `prepare(for:sender:)` method to use `SharedData` to get the selected
    `JournalEntry` instance:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `prepare(for:sender:)` 方法以使用 `SharedData` 获取选中的 `JournalEntry` 实例：
- en: '[PRE14]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Modify the `unwindNewEntrySave(segue:)` method to add a new `JournalEntry`
    instance to `SharedData`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `unwindNewEntrySave(segue:)` 方法以向 `SharedData` 添加新的 `JournalEntry` 实例：
- en: '[PRE15]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You have made all the required changes to the `JournalListViewController` class.
    Now you will modify the `MapViewController` class to use `SharedData`. As noted
    in the previous chapter, when running your app on an actual device, it takes a
    long time to determine the device’s location, and the map on the Map screen will
    not be updated if the user’s location changes. You’ll address both of these issues
    as well. Follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经对 `JournalListViewController` 类做了所有必要的修改。现在你将修改 `MapViewController` 类以使用
    `SharedData`。正如前一章所述，当在实际设备上运行你的应用时，确定设备位置需要很长时间，如果用户的位置发生变化，地图屏幕上的地图将不会更新。你将解决这两个问题。按照以下步骤操作：
- en: 'In the Project navigator, click the **MapViewController** file. Remove the
    `annotations` property from the `MapViewController` class:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **MapViewController** 文件。从 `MapViewController` 类中移除 `annotations`
    属性：
- en: '[PRE16]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Modify the `viewDidLoad()` method by removing the highlighted statements:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过删除高亮语句来修改 `viewDidLoad()` 方法：
- en: '[PRE17]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To reduce the time taken to determine the user’s location, add a statement
    to `fetchUserLocation()` as shown to set the location manager instance’s accuracy
    to `kCLLocationAcccuracyKilometer`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了减少确定用户位置所需的时间，向 `fetchUserLocation()` 中添加一个语句，如图所示，将位置管理器实例的精度设置为 `kCLLocationAccuracyKilometer`：
- en: '[PRE18]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The default value of this property is `kCLLocationAccuracyBest`, which takes
    a relatively long time to determine. This trade-off is acceptable since the *JRNL*
    app does not require the highest level of accuracy when displaying annotations
    on the map.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的默认值为 `kCLLocationAccuracyBest`，它需要相对较长的时间来确定。这种权衡是可以接受的，因为 *JRNL* 应用在显示地图上的注释时不需要最高级别的精度。
- en: 'To update the user’s location whenever the Map screen appears, first implement
    the following method after the `viewDidLoad()` method:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在地图屏幕出现时更新用户的位置，首先在 `viewDidLoad()` 方法之后实现以下方法：
- en: '[PRE19]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `viewIsAppearing()` view controller lifecycle method was introduced during
    WWDC 2023\. You can learn more about this method at this link: [https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing](https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewIsAppearing()` 视图控制器生命周期方法是在 WWDC 2023 上引入的。你可以通过此链接了解更多关于此方法的信息：[https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing](https://developer.apple.com/documentation/uikit/uiviewcontroller/4195485-viewisappearing)。'
- en: 'Add the following statement to the `updateMapWithLocation(_:)` method as shown
    so that the map view gets all the annotations from `SharedData` after the user’s
    location has been determined and the map region has been set:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `updateMapWithLocation(_:)` 方法中添加以下语句，如图所示，以便在确定用户位置并设置地图区域后，地图视图从 `SharedData`
    获取所有注释：
- en: '[PRE20]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With this change, if you are on the Journal List screen, tapping the **Map**
    tab bar button will update the user’s location, redraw the map on the Map screen,
    and reload the map annotations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个修改，如果你在期刊列表屏幕上，点击 **Map** 标签栏按钮将更新用户的位置，在地图屏幕上重新绘制地图，并重新加载地图注释。
- en: 'You have made all the required changes to the `MapViewController` class. Now
    let’s test your app. Follow these steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经对 `MapViewController` 类做了所有必要的修改。现在让我们测试你的应用。按照以下步骤操作：
- en: Launch Simulator, and choose **Location** | **Apple** from Simulator’s **Features**
    menu to simulate a location. Build and run your app.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动模拟器，并在模拟器的 **Features** 菜单中选择 **Location** | **Apple** 来模拟位置。构建并运行你的应用。
- en: 'Click the **+** button and add a new journal entry. Make sure the **Get Location**
    switch is on:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **+** 按钮添加一个新的期刊条目。确保 **Get Location** 开关处于开启状态：
- en: '![](img/B31371_18_02.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_18_02.png)'
- en: 'Figure 18.2: Simulator showing Add New Journal Entry screen'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2：模拟器显示添加新期刊条目屏幕
- en: 'Tap the **Map** tab button to go to the Map screen:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Map** 标签按钮进入地图屏幕：
- en: '![](img/B31371_18_03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_18_03.png)'
- en: 'Figure 18.3: Simulator showing the Map tab button'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3：模拟器显示地图标签按钮
- en: 'Note the journal entry you added earlier is visible as a pin on the Map screen.
    Tap the pin and then tap the callout button:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意您之前添加的日记条目在地图屏幕上作为图钉可见。点击图钉，然后点击呼叫按钮：
- en: '![](img/B31371_18_04.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_18_04.png)'
- en: 'Figure 18.4: Simulator showing pin callout button'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.4：模拟器显示图钉呼叫按钮
- en: 'The journal entry details are displayed on the Journal Entry Detail screen:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 日记条目详情显示在日记条目详情屏幕上：
- en: '![](img/B31371_18_05.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_18_05.png)'
- en: 'Figure 18.5: Simulator showing Journal Entry Detail screen'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.5：模拟器显示日记条目详情屏幕
- en: You have successfully created a singleton and configured your app to use it,
    but the data is lost once the app quits. Later, you will write code to save journal
    entries to your device storage. But before you can do that, you’ll modify the
    `JournalEntry` class so that the data in it can be stored in JSON format. You’ll
    do this in the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功创建了一个单例并配置了您的应用使用它，但一旦应用退出，数据就会丢失。稍后，您将编写代码将日记条目保存到您的设备存储。但在您能够这样做之前，您将修改
    `JournalEntry` 类，以便其中的数据可以以 JSON 格式存储。您将在下一节中这样做。
- en: Modifying the JournalEntry class to be JSON-compatible
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 `JournalEntry` 类修改为与 JSON 兼容
- en: At present, all app data is lost when you quit the app. You will need to implement
    a way to save your app data. iOS provides many ways to store your app data. One
    of them is converting the data to **JavaScript Object Notation** (**JSON**) format,
    and then writing it as a file to your device storage. JSON is a way to structure
    data in a file that can be easily read by both people and computers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当您退出应用时，所有应用数据都会丢失。您需要实现一种保存应用数据的方法。iOS 提供了许多存储应用数据的方式。其中之一是将数据转换为 **JavaScript
    对象表示法**（**JSON**）格式，然后将其作为文件写入您的设备存储。JSON 是一种在文件中结构化数据的方式，可以很容易地被人和计算机读取。
- en: 'To help you to understand the JSON format, look at the sample shown below:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您理解 JSON 格式，请查看下面的示例：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This sample is a representation of the `journalEntries` array in JSON format.
    As you can see, it starts with an opening square bracket, and each item inside
    consists of key-value pairs containing journal entry information, enclosed by
    curly braces and separated by commas.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例是 JSON 格式中 `journalEntries` 数组的表示。如您所见，它以一个开方括号开始，每个内部项目都由包含日记条目信息的键值对组成，这些键值对被花括号包围并用逗号分隔。
- en: At the very end of the file, you can see a closing square bracket. The square
    brackets denote arrays, and the curly braces denote dictionaries. The keys in
    the dictionary correspond to the properties in a `JournalEntry` instance, and
    the values correspond to the values assigned to those properties.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的最后，您可以看到一个闭方括号。方括号表示数组，花括号表示字典。字典中的键对应于 `JournalEntry` 实例中的属性，而值对应于分配给这些属性的值。
- en: To learn more about using JSON with Swift types, see [https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于在 Swift 类型中使用 JSON 的信息，请参阅 [https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types](https://developer.apple.com/documentation/foundation/archives_and_serialization/using_json_with_custom_types)。
- en: 'To learn more about parsing JSON files, watch the video available here: [https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4](https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4).'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于解析 JSON 文件的信息，请观看这里可用的视频：[https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4](https://devstreaming-cdn.apple.com/videos/wwdc/2017/212vz78e2gzl2/212/212_hd_whats_new_in_foundation.mp4)。
- en: A custom Swift type needs to conform to the `Codable` protocol before it can
    be converted to and from JSON.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在将自定义 Swift 类型转换为 JSON 或从 JSON 转换之前，它需要遵守 `Codable` 协议。
- en: To learn more about `Codable`, see [https://developer.apple.com/documentation/swift/codable](https://developer.apple.com/documentation/swift/codable).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `Codable` 的信息，请参阅 [https://developer.apple.com/documentation/swift/codable](https://developer.apple.com/documentation/swift/codable)。
- en: 'JSON supports dates, strings, numbers, Boolean values, and `null` values, but
    it does not support images. To conform to the `Codable` protocol, you will modify
    the `JournalEntry` class to use types that are supported by JSON and modify the
    rest of your app to work with the updated `JournalEntry` instance. Follow these
    steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 支持日期、字符串、数字、布尔值和 `null` 值，但不支持图像。为了遵循 `Codable` 协议，你需要修改 `JournalEntry`
    类以使用 JSON 支持的类型，并修改应用的其他部分以与更新的 `JournalEntry` 实例一起工作。按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalEntry** file. Modify the `JournalEntry`
    class declaration as shown to adopt the `Codable` protocol:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalEntry** 文件。按照以下方式修改 `JournalEntry` 类声明以采用 `Codable` 协议：
- en: '[PRE22]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An error will appear because the `UIImage` type does not conform to `Codable`.
    Modify the `photo` property as shown to make `JournalEntry` conform to `Codable`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会显示一个错误，因为 `UIImage` 类型不遵循 `Codable` 协议。按照以下方式修改 `photo` 属性，使 `JournalEntry`
    遵循 `Codable` 协议：
- en: '[PRE23]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The error will disappear, but another error will appear in the initializer.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 错误将会消失，但在初始化器中会出现另一个错误。
- en: 'Modify the initializer as shown:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改初始化器：
- en: '[PRE24]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This converts the value in the `photo` argument into a `Data` instance and assigns
    it to `photoData`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `photo` 参数中的值转换为 `Data` 实例，并将其分配给 `photoData`。
- en: To learn more about the `Data` type, see [https://developer.apple.com/documentation/foundation/data](https://developer.apple.com/documentation/foundation/data).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `Data` 类型的信息，请参阅 [https://developer.apple.com/documentation/foundation/data](https://developer.apple.com/documentation/foundation/data)。
- en: 'All the errors in the initializer are gone, but if you build your app now,
    you’ll see other errors appear. Let’s fix them now. Follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化器中的所有错误都已消失，但如果你现在构建你的应用，你会看到其他错误出现。让我们现在修复它们。按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalListViewController** file. Modify
    the `tableView(_:cellForRowAt:)` method in the `JournalListViewController` class
    as shown:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalListViewController** 文件。按照以下方式修改 `JournalListViewController`
    类中的 `tableView(_:cellForRowAt:)` 方法：
- en: '[PRE25]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The updated code converts the data stored in `photoData` back into a `UIImage`
    and assigns it to the image view in `journalCell`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的代码将存储在 `photoData` 中的数据转换回 `UIImage`，并将其分配给 `journalCell` 中的图像视图。
- en: 'In the Project navigator, click the **JournalEntryDetailViewController** file.
    Modify the `viewDidLoad()` method as shown:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalEntryDetailViewController** 文件。按照以下方式修改 `viewDidLoad()`
    方法：
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The updated code converts the data stored in `photoData` to a `UIImage` instance
    and assigns it to the `image` property of `photoImageView`. There should be no
    more errors in your app at this point.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后的代码将存储在 `photoData` 中的数据转换为 `UIImage` 实例，并将其分配给 `photoImageView` 的 `image`
    属性。在这个阶段，你的应用中应该不再有错误。
- en: Build and run your app. Verify that the simulated location has been set and
    add a new journal entry. Your app should work the way it did before.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。验证模拟位置是否已设置，并添加一个新的日志条目。你的应用应该像之前一样工作。
- en: Note that the image is now black instead of blue. This is due to the image conversion
    process and will not be noticeable when you use images from your camera or photo
    library. You will learn how to do so in *Chapter 20*, *Getting Started with the
    Camera and Photo Library*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，图像现在是黑色而不是蓝色。这是由于图像转换过程造成的，当你使用相机或照片库中的图像时，这不会引起注意。你将在 *第20章*，*开始使用相机和照片库*
    中学习如何做到这一点。
- en: You have successfully modified the `JournalEntry` class to conform to the `Codable`
    protocol, and you have addressed all the errors in your app. In the next section,
    you’ll implement saving and loading app data, so it will not be lost when you
    quit your app.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功修改了 `JournalEntry` 类以遵循 `Codable` 协议，并且已经解决了应用中的所有错误。在下一节中，你将实现保存和加载数据，这样在退出应用时数据就不会丢失。
- en: Loading and saving JSON data
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和保存 JSON 数据
- en: Now that you have modified the `JournalEntry` class to conform to the `Codable`
    protocol, you are ready to implement loading data from and saving data to JSON
    files.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经修改了 `JournalEntry` 类以遵循 `Codable` 协议，你就可以开始实现从 JSON 文件加载数据和保存数据了。
- en: To make it easier for you to work with JSON files, Apple provides `JSONDecoder`
    and `JSONEncoder` classes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你更容易地处理 JSON 文件，Apple 提供了 `JSONDecoder` 和 `JSONEncoder` 类。
- en: A `JSONDecoder` instance decodes instances of a data type from JSON objects,
    and you will use it when loading files from your device storage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONDecoder` 实例从 JSON 对象解码数据类型实例，你将在从设备存储加载文件时使用它。'
- en: To learn more about `JSONDecoder`, see [https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `JSONDecoder` 的信息，请参阅 [https://developer.apple.com/documentation/foundation/jsondecoder](https://developer.apple.com/documentation/foundation/jsondecoder)。
- en: A `JSONEncoder` instance encodes instances of a data type to JSON objects, and
    you will use it when saving files to your device storage.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`JSONEncoder` 实例将数据类型实例编码为JSON对象，您将在将文件保存到设备存储时使用它。'
- en: To learn more about `JSONEncoder`, see [https://developer.apple.com/documentation/foundation/jsonencoder](https://developer.apple.com/documentation/foundation/jsonencoder).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 `JSONEncoder` 的信息，请参阅 [https://developer.apple.com/documentation/foundation/jsonencoder](https://developer.apple.com/documentation/foundation/jsonencoder)。
- en: 'You’ll now implement the methods to load data from a file and save data to
    a file in the `SharedData` class. Follow these steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将在 `SharedData` 类中实现从文件加载数据和将数据保存到文件的方法。按照以下步骤操作：
- en: 'In the Project navigator, click the **SharedData** file. In the `SharedData`
    class, implement a method to get the location where you can load or save a file
    on your device storage before the closing curly brace:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **SharedData** 文件。在 `SharedData` 类中，在闭合花括号之前实现一个获取您可以在设备存储上加载或保存文件的位置的方法：
- en: '[PRE27]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is analogous to getting the path to the Documents directory in your home
    directory on your Mac.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这与在您的Mac上获取家目录中Documents目录的路径类似。
- en: To learn more about accessing the iOS file system, see [https://developer.apple.com/documentation/foundation/filemanager](https://developer.apple.com/documentation/foundation/filemanager).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于访问iOS文件系统的信息，请参阅 [https://developer.apple.com/documentation/foundation/filemanager](https://developer.apple.com/documentation/foundation/filemanager)。
- en: 'Implement a method to load journal entries from a file on your device storage
    after the `documentDirectory()` method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `documentDirectory()` 方法之后实现一个从设备存储上的文件加载日记条目的方法：
- en: '[PRE28]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This method uses the `documentDirectory()` method to get the location where
    files can be loaded from. Then it specifies a file name, `journalEntriesData.json`,
    where the data is saved and appends that to the path. It then attempts to load
    the file. If successful, it attempts to decode the data into an array of `JournalEntry`
    instances and assign it to the `journalEntries` array.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用 `documentDirectory()` 方法获取可以从中加载文件的位置。然后它指定一个文件名，`journalEntriesData.json`，数据将被保存并附加到路径上。然后它尝试加载该文件。如果成功，它尝试将数据解码为
    `JournalEntry` 实例的数组并将其分配给 `journalEntries` 数组。
- en: 'Implement a method to save journal entries to a file on your device storage
    after the `loadJournalEntriesData()` method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `loadJournalEntriesData()` 方法之后实现一个将日记条目保存到设备存储上的文件的方法：
- en: '[PRE29]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This method uses the `documentDirectory()` method to get the location where
    files can be saved. Then it specifies a file name where the data is to be saved
    and appends that to the path. It then attempts to use a `JSONEncoder` instance
    to encode the `journalEntries` array to JSON format and subsequently write it
    to the file specified earlier.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用 `documentDirectory()` 方法获取可以保存文件的位置。然后它指定一个要保存数据的文件名并将其附加到路径上。然后它尝试使用
    `JSONEncoder` 实例将 `journalEntries` 数组编码为JSON格式，并将其写入之前指定的文件。
- en: 'You have implemented the methods to load and save journal entries in your app.
    Now you’ll modify the `JournalListViewController` class to call these methods
    at appropriate times. Follow these steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在您的应用中实现了加载数据和保存日记条目的方法。现在，您将修改 `JournalListViewController` 类，在适当的时候调用这些方法。按照以下步骤操作：
- en: 'In the Project navigator, click the **JournalListViewController** file. In
    the `JournalListViewController` class, modify `viewDidLoad()` to call the `loadJournalEntriesData()`
    method:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，点击 **JournalListViewController** 文件。在 `JournalListViewController` 类中，修改
    `viewDidLoad()` 以调用 `loadJournalEntriesData()` 方法：
- en: '[PRE30]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will load any saved journal entries as the app is starting up.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在应用启动时加载任何已保存的日记条目。
- en: 'Modify the `tableView(_:commit:forRowAt:)` method to call the `saveJournalEntriesData()`
    method after a row has been removed from the table view:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `tableView(_:commit:forRowAt:)` 方法，在从表格视图中删除一行后调用 `saveJournalEntriesData()`
    方法：
- en: '[PRE31]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Modify the `unwindNewEntrySave(segue:)` method to call `saveJournalEntriesData()`
    after a new journal entry has been added:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `unwindNewEntrySave(segue:)` 方法，在添加新的日记条目后调用 `saveJournalEntriesData()` 方法：
- en: '[PRE32]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Build and run your app. Verify a simulated location has been set and add a new
    journal entry. Your app should work the way it did before.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。验证已设置模拟位置，并添加一个新的日记条目。您的应用应该像之前一样工作。
- en: 'Stop your app and run it again. The journal entry you added earlier should
    still be present:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止你的应用程序并重新运行它。你之前添加的日记条目应该仍然存在：
- en: '![](img/B31371_18_06.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_18_06.png)'
- en: 'Figure 18.6: Simulator showing persistent app data in your app'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.6：模拟器显示应用程序中的持久化应用程序数据
- en: If you are running your app in Simulator, you can use a `print(filePath)` statement
    in the `saveJournalEntriesData()` method to print the file path to the Debug area.
    This will tell you where the `journalEntriesData.json` file is saved on your Mac.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在模拟器中运行你的应用程序，你可以在`saveJournalEntriesData()`方法中使用`print(filePath)`语句将文件路径打印到调试区域。这将告诉你`journalEntriesData.json`文件在您的Mac上保存的位置。
- en: You have successfully implemented saving and loading using JSON files for your
    app! Fantastic job!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功实现了使用JSON文件为你的应用程序保存和加载！做得好！
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created a singleton, `SharedData`, and configured your
    app to use it. Next, you modified the `JournalEntry` class to be compatible with
    the JSON format, so you can save journal entries to a JSON file and load journal
    entries from a JSON file. After that, you added methods to save journal entry
    data when you add or delete journal entries, and to load journal entry data when
    your app is starting up.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了一个单例`SharedData`，并配置了你的应用程序使用它。接下来，你修改了`JournalEntry`类以兼容JSON格式，这样你就可以将日记条目保存到JSON文件中，并从JSON文件中加载日记条目。之后，你添加了在添加或删除日记条目时保存日记条目数据的方法，以及在应用程序启动时加载日记条目数据的方法。
- en: You now know how to create a class to store, load, and save data from JSON files
    for use in your own apps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何创建一个类来存储、加载和保存数据，以便在您的应用程序中使用JSON文件。
- en: In the next chapter, you’ll implement a custom user interface element that allows
    you to set star ratings for journal entries.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将实现一个自定义用户界面元素，允许你为日记条目设置星级评分。
- en: Join us on Discord!
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过“问我任何问题”的环节与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
