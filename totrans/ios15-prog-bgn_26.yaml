- en: '*Chapter 22*: Getting Started with Mac Catalyst'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple's Mac Catalyst feature allows you to make a Mac version of an iPad app.
    This allows you to share the same project and source code for both platforms,
    making it easier to maintain. During WWDC2021, Apple announced updates to Mac
    Catalyst that allow you to add more features just for Mac, such as keyboard navigation
    and printing using *Command + P*. This chapter will focus on how to make your
    existing iPhone app run on iPad, so you can make a Mac version of it. By doing
    so, you will be able to reach an audience of over 100 million active Mac users.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll modify your app to make it run on iPads and Macs. First,
    you'll fix some user interface issues in your app. Next, you'll learn how to make
    your app's user interface work on the iPad, taking advantage of the iPad's larger
    screen size. After that, you'll use the iPad version of your app to create the
    Mac version.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll be able to make your existing iOS apps run
    well on all iOS devices, and also be able to make Mac apps from your iPad apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Fixing user interface issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your app run on all iOS devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your app run on the Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you modified in the
    previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter22` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3IbY41R](https://bit.ly/3IbY41R)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by making some changes to the user interface to make it look better.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing user interface issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the things that you will find is that an iOS app is never really done.
    You''ll always find ways to improve and refine your app. Build and run your app,
    and compare it with the design shown in the app tour (in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*). You will notice upon close inspection that your
    app''s screens have minor differences when compared to the screens shown in the
    app tour, and require changes. Let''s start with the **Explore** screen for your
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.1: iOS Simulator showing Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.1: iOS Simulator showing Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes required for the **Explore** screen are as follows. Refer to the
    numbers to see the part that needs to be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: The navigation bar (**1**) is not present on the app tour and will have to be
    removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection view cells (**2**) have sharp edges. You'll implement rounded
    corners for the cells to match the cells shown in the app tour.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tab bar buttons are blue (**3**). You'll change the tab bar button color
    to red to match the app tour.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s see the **Locations** screen for your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.2: iOS Simulator showing Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.2: iOS Simulator showing Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: The large title at the top of the **Locations** screen shown in the app tour
    is missing, and you will have to add it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are only four minor changes that need to be made, and
    these changes are easy to implement. You''ll start by modifying the **Explore**
    screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `ExploreViewController` file inside the `Explore` folder in the Project
    navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `viewWillAppear()` method after the `viewDidLoad()` method, and add code
    inside this method to hide the navigation controller''s navigation bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that if you add this code to `viewDidLoad()`, the navigation bar will be
    hidden only when the **Explore** screen first appears, and will reappear when
    you transition from either the **Locations** screen or the **Restaurant List**
    screen back to the **Explore** screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To round the corners of the collection view cells on the `ExploreCell` file
    (inside the `View` folder in the `Explore` folder) in the Project navigator, and
    add the following method after the outlet declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To change the colors of the tab bar buttons, click the `AppDelegate` file in
    the Project navigator and add a `private` extension containing the following methods
    after the last curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `AppDelegate` file contains the declaration and the definition of the `AppDelegate`
    class. This class handles application events, for example, what happens when an
    application is launched, sent to the background, terminated, and so on. You can
    add code here to configure your app as it is starting up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you have done before, you'll use an `initialize()` method to call all other
    setup methods. In this case, the `initialize()` method calls the `setupDefaultColors()`
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `setupDefaultColors()` method will change the tint colors for items in the
    tab bar and navigation bar to red. It makes use of the `appearance()` method,
    which sets attributes globally for every tab and nav bar that has been or will
    be created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'More information about the `appearance()` method can be found here: [https://developer.apple.com/documentation/uikit/uiappearance](https://developer.apple.com/documentation/uikit/uiappearance).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have to call the `initialize()` method as the app is starting up, so modify
    the `application(_:didFinishLaunchingWithOptions:)` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the `Main` storyboard file in the Project navigator. Under the **Explore
    View Controller Scene**, click **Explore Image View**. Select the Attributes inspector
    and under **View**, change the **Content Mode** to **Aspect Fill**:![Figure 22.3:
    Main storyboard file showing Explore Image View set to Aspect Fill'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.3: Main storyboard file showing Explore Image View set to Aspect
    Fill'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This allows images to take up the full image view frame and display the rounded
    corners you coded in *Step 3*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your app. The **Explore** screen should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 22.4: iOS Simulator showing updated Explore screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_22.04_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.4: iOS Simulator showing updated Explore screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You'll see that the navigation bar is gone, the corners of each cell are rounded,
    and the **Explore** and **Map** button icons and titles are now red when selected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, you'll update the `LocationViewController` class. Click the `LocationViewController`
    file inside the `Location` folder in the Project navigator and modify the `initialize()`
    method to set a title for the `title` property that can be displayed in the navigation
    bar. This code sets the title to `Select a location` and displays it in large
    letters at the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build and run your app, and tap the **LOCATION** button. The **Locations**
    screen should look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 22.5: iOS Simulator showing updated Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.5: iOS Simulator showing updated Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: You'll see **Select a location** in large letters at the top of the screen,
    and the **Cancel** and **Done** buttons are now red.
  prefs: []
  type: TYPE_NORMAL
- en: Great! You've finished cleaning up the design for the app on the iPhone. The
    four issues mentioned earlier have been addressed, and your app's screens now
    look exactly like the screens shown in the app tour. As you can see, even minor
    changes can make your app more visually appealing.
  prefs: []
  type: TYPE_NORMAL
- en: So far, you've been running your app in the iPhone simulator. In the next section,
    you'll run your app in the iPad simulator to see what changes are required. You'll
    then modify your app so that the user interface will take advantage of the iPad's
    larger screen.
  prefs: []
  type: TYPE_NORMAL
- en: Making your app run on all iOS devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can make a Mac app from your existing iOS app, you need to modify
    the user interface to work with iPad. To see what changes you will need to make,
    you''ll build and run your app on the iPad simulator. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the simulator if it is running. Choose **iPad Pro (9.7-inch)** from the
    list of simulators in the **Scheme** menu and run your app:![Figure 22.6: Scheme
    menu with iPad Pro (9.7-inch) selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.6: Scheme menu with iPad Pro (9.7-inch) selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The iPad simulator will launch and appear as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![ Figure 22.7: iPad simulator showing Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.7: iPad simulator showing Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the collection view on the **Explore** screen automatically
    takes up the whole width of the screen, and the collection view cells are the
    same size that they were on the iPhone. Even though you can use exactly the same
    user interface for both iPhone and iPad, it would be better if you could customize
    it to suit each device.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you'll add some code so your app can identify the type of device
    it's running on. Next, you'll update your app's user interface to suit the iPad's
    larger screen and make your app automatically switch the user interface based
    on the device type.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to make your app detect the type of device it is running on in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying device type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to add some code to your app so that it knows the device it is running
    on. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Swift File** and then click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `Device`. Click `Device` file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file as shown to create a `Device` enumeration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, an enumeration is used instead of a class or structure because you can't
    accidentally make an instance of it. The `UIDevice` class represents the device
    the app is running on. `UIDevice.current.userInterfaceIdiom` returns `.phone`
    if the app is running on an iPhone, and returns `.pad` if the app is running on
    an iPad. So `isPhone` returns `true` when the app is running on the iPhone, and
    `isPad` returns `true` when the app is running on the iPad.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to device type, you also have to consider device orientation. For
    example, an iPhone in landscape orientation is wider than an iPhone in portrait
    orientation even though it is the same iPhone. Let's learn how to handle device
    orientation using **size classes** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding size classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although you can now identify what kind of device your app is running on, you
    also have to consider the effects of device orientation on your user interface.
    It can be challenging to do this as there is a wide variety of screen sizes, in
    both portrait and landscape orientation. To make this easier, instead of using
    the physical resolution of the device, you will use size classes.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on size classes, see this link: [https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Size classes are traits which are automatically assigned to a view. Two classes
    are defined which describe the height and width of a view; regular (expansive
    space) and compact (constrained space). Let''s look at size classes for a full-screen
    view on different devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.8: Size classes for different iOS devices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.8: Size classes for different iOS devices'
  prefs: []
  type: TYPE_NORMAL
- en: You'll have to consider not only the device type, but also the size class when
    you're designing the user interface. In the next section, you'll learn how to
    set the collection view cell size based on device and size class.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Explore screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the **Explore** screen, let''s say you have decided to display three columns
    on the iPad, two columns for the compact width size class and three columns for
    the regular width size class. You''ll add methods to set the size of the collection
    view cell depending on the device and orientation. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ExploreViewController` file in the Project navigator and modify
    the `initialize()` method inside the `private` extension as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `setupCollectionView()` method will be used to add a `UICollectionViewFlowLayout`
    instance to the collection view in the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method creates an instance of the `UICollectionViewFlowLayout` class, sets
    all the edge insets for the collection view to `7` points, sets the minimum interitem
    spacing to `0` points, sets the minimum line spacing to `7` points, and assigns
    it to the collection view. Remember that you initially set these values for the
    collection view using the Size inspector in [*Chapter 10*](B17469_10_Final_VK_ePub.xhtml#_idTextAnchor155)*,
    Building Your User Interface*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an extension containing the methods that will set the size of the collection
    view cells and the collection view section header after the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These methods are declared in the `UICollectionViewDelegateFlowLayout` protocol,
    and they define item size and spacing in the collection view. They will override
    the settings in the Size inspector. Let''s break them down:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns a `CGSize` instance that the collection view cell size should
    be set to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `columns` variable determines how many columns appear on screen, and is
    initially set to `2`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Checks to see whether the app is running on an iPad or the `horizontalSizeClass`
    property is not `.compact`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the app is running on an iPad or the horizontal size class is not `.compact`,
    set `columns` to `3`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Gets the width of the screen and assigns it to `viewWidth`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Subtracts the space used for the edge insets so the cell size can be determined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Gets the width of the cell by dividing `contentWidth` by `columns`, and assigns
    it to `cellWidth`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sets the height of the cell to be the same as the width of the cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Returns the cell size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Assume you're running on iPhone 13 Pro Max in portrait mode. `columns` is set
    to `2`. `viewWidth` would be assigned the width of the iPhone screen, which is
    `414` points. `contentWidth` is set to 414 - (7 x 3) = `393`. `cellWidth` is set
    to `contentWidth` / `columns` = `196.5`, and `cellHeight` is set to `cellWidth`,
    so the `CGSize` returned would be `(196.5, 196.5)`, enabling two cells to fit
    in a row.
  prefs: []
  type: TYPE_NORMAL
- en: When you rotate the same iPhone to landscape mode, `columns` is set to `3`.
    `viewWidth` would be assigned the height of the iPhone screen, which is `896`
    points. `contentWidth` is set to 896 - (7 x 4) = `868`. `cellWidth` is set to
    `contentWidth` / `columns` = `289.3`, and `cellHeight` is set to `cellWidth`,
    so the `CGSize` returned would be `(289.3, 289.3)`, enabling three cells to fit
    in a row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This method returns the size the collection view section header should be set
    to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The width of the collection view section header will depend on device orientation
    but the height will always be `100`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app on the iPad simulator. You should see three columns
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.9: iPad simulator showing updated Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.9: iPad simulator showing updated Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app on the iPhone 13 Pro Max simulator, you should see two
    columns displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.10: iPhone 13 Pro Max Simulator showing updated Explore screen
    in portrait mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.10_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.10: iPhone 13 Pro Max Simulator showing updated Explore screen in
    portrait mode'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Device** | **Rotate Left** in the simulator menu, you will see three
    columns displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.11: iPhone 13 Pro Max Simulator showing updated Explore screen
    in landscape mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.11_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.11: iPhone 13 Pro Max Simulator showing updated Explore screen in
    landscape mode'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Device** | **Rotate Right** in the simulator menu to return to a vertical
    orientation.
  prefs: []
  type: TYPE_NORMAL
- en: You have completed modifying the `RestaurantListViewController` class in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Restaurant List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already modified the **Explore** screen to automatically adapt to
    the device your app is running on. You''ll now do the same for the **Restaurant
    List** screen. If you build and run on the iPad simulator, this is what the **Restaurant
    List** screen looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.12: iPad Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.12_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.12: iPad Simulator showing Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are only two columns, and there is a large white space
    between them. Let''s say you want three columns on the iPad, one column for the
    compact width size class and two columns for the regular width size class. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `RestaurantListViewController` file inside the `Restaurants` folder
    in the Project navigator. Create an `initialize()` method inside the `private`
    extension before all other code already in the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `createData()` and `setupTitle()` methods are both called in `viewDidAppear()`,
    but you'll modify `viewDidAppear()` to call `initialize()` instead later. You'll
    see an error because the `setupCollectionView()` method is not declared or defined
    yet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare and define the `setupCollectionView()` method in the `private` extension
    after the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just like before, `setupCollectionView()` creates an instance of the `UICollectionViewFlowLayout`
    class, configures it, and assigns it to the collection view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an extension containing `UICollectionViewDelegateFlowLayout` methods after
    the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `collectionView(_:layout:sizeForItemAt:)` method implemented here works
    almost exactly the same as the implementation in the `ExploreViewController` class,
    but `cellHeight` is set to `312` points instead of being set to `cellWidth`. Note
    that if you're not running your app on an iPad, `columns` will be set to `1` for
    the compact width size class and to `2` for the regular width size class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `viewDidAppear()` by removing calls to the `createData()` and `setupTitle()`
    methods and adding a call for the `initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your app on the iPad simulator, and go to the **Restaurant List**
    screen, as shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 22.13: iPad Simulator showing updated Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.13_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.13: iPad Simulator showing updated Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three columns now, and the wide white gap is gone. Now build and
    run your app on the iPhone 13 Pro Max simulator. The **Restaurant List** screen
    should display a single column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.14: iPhone 13 Pro Max Simulator showing updated Restaurant List
    screen in portrait mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.14_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.14: iPhone 13 Pro Max Simulator showing updated Restaurant List screen
    in portrait mode'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Device** | **Rotate Left** in the simulator menu, and you should see
    two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 22.15: iPhone 13 Pro Max Simulator showing updated Restaurant List
    screen in landscape mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.15_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.15: iPhone 13 Pro Max Simulator showing updated Restaurant List screen
    in landscape mode'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Device** | **Rotate Right** in the simulator menu, and quit the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: The **Explore** screen and the **Restaurant List** screen have been updated
    and now your app looks good on the iPad. It's now a perfect candidate to be made
    into a Mac app. Let's see how you can build a Mac app from your existing iPad
    app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the app to work on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have modified your app's screens to work well on all iOS devices. Now you'll
    learn how to make your app run on a Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Apple have updated Mac Catalyst during WWDC2021, which makes it possible to
    build a Mac app from an existing iPad app with Mac-specific optimizations. As
    you will see, both apps will share the same project and source code.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch the video at the following link to see the latest updates to Mac Catalyst
    announced by Apple during WWDC2021: [https://developer.apple.com/videos/play/wwdc2021/10052/](https://developer.apple.com/videos/play/wwdc2021/10052/).'
  prefs: []
  type: TYPE_NORMAL
- en: More information about Mac Catalyst is available at [https://developer.apple.com/mac-catalyst/](https://developer.apple.com/mac-catalyst/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, note that this only works if have a free or paid Apple developer
    account. If you use the project files in the `Chapter24` folder downloaded from
    GitHub at [https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition),
    you have to set the development team for your app to make it run on your Mac.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select your project in the Project navigator:![Figure 22.16: Project navigator
    showing LetsEat project selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.16: Project navigator showing LetsEat project selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **General** tab, tick the **Mac** checkbox:![Figure 22.17: Editor area
    showing Mac checkbox in General pane'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.17: Editor area showing Mac checkbox in General pane'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Enable Mac support?** dialog box, click **Enable**:![Figure 22.18:
    Enable Mac support? dialog box'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.18_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.18: Enable Mac support? dialog box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the **Mac** checkbox is now ticked:![Figure 22.19: Editor area showing
    Mac checkbox ticked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.19: Editor area showing Mac checkbox ticked'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your app will be recompiled to run on your Mac. Note the **Show "Designed for
    iPad" Run Destination** checkbox. If you have an Apple Silicon Mac, you can select
    this destination to run your unmodified iPad apps natively on your Mac.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your Mac has been set as the run destination. Build and run your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If your project fails to build, click the Issue navigator button and check
    the error message:![Figure 22.20: Issue navigator showing error message'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.20: Issue navigator showing error message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you see the error shown here, this is because you need a free or paid developer
    account to run your app on actual hardware.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check to see that your developer account has been added to Xcode in **Xcode**
    | **Preferences** | **Accounts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding your developer account to Xcode is covered in *Chapter 1, Getting Familiar
    with Xcode*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Signing & Capabilities** tab. Select your paid or free developer
    account in the **Team** drop-down menu:![Figure 22.21: Editor area showing Team
    drop-down menu in Signing & Capabilities tab'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_22.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 22.21: Editor area showing Team drop-down menu in Signing & Capabilities
    tab'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run again, and you should see your app running on your Mac:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 22.22: LetsEat Mac app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_22.22_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 22.22: LetsEat Mac app'
  prefs: []
  type: TYPE_NORMAL
- en: Your app is now running on your Mac! Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: If you still see errors, try changing the **Bundle Identifier** value to a unique
    value, and try running your app on your iOS device first.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll need to do some more work to make it a really nice Mac app, but that
    is beyond the scope of this book. Apple has a great tutorial on how to do so at
    this link: [https://developer.apple.com/tutorials/mac-catalyst](https://developer.apple.com/tutorials/mac-catalyst).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build a Mac app from an existing iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: You started by refining your app's user interface when running on the iPhone.
    Next, you added some code to make your app detect the device that it's running
    on, and modified your app's screens to work on all iOS devices. Finally, you used
    Mac Catalyst to build a Mac app from your iPad app. Your app now works great on
    iPhone, iPad, and Mac.
  prefs: []
  type: TYPE_NORMAL
- en: You're now able to make your existing iPhone apps run well on iPad, and also
    to make Mac apps from your iPad apps. As you have seen, once you have an iPhone
    app, you can make it work on iPad and Mac with relatively little effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn a completely new way to build apps using **SwiftUI**,
    a modern way to write apps for any Apple platform.
  prefs: []
  type: TYPE_NORMAL
