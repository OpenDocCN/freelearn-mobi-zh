["```kt\n@Composable\nfun AudioPlayerComposable() {\n    val context = LocalContext.current\n    val mediaPlayer = remember { MediaPlayer.create(\n        context, R.raw.my_audio_file) }\n    // Observe lifecycle to release MediaPlayer\n    ObserveLifecycle(owner = ProcessLifecycleOwner.get()) {\n        onExit = {\n            mediaPlayer.release()\n        }\n    }\n    Column(modifier = Modifier.padding(16.dp)) {\n        Button(onClick = {\n            if (!mediaPlayer.isPlaying) {\n                mediaPlayer.start()\n            }\n        }) {\n            Text(\"Play\")\n        }\n        Button(onClick = {\n            if (mediaPlayer.isPlaying) {\n                mediaPlayer.pause() // Use pause or stop\n                                       based on your need\n            }\n        }) {\n            Text(\"Stop\")\n        }\n    }\n}\n@Composable\nfun ObserveLifecycle(owner: LifecycleOwner, onExit: () ->\nUnit) {\n    // Use DisposableEffect to manage lifecycle\n    DisposableEffect(owner) {\n        val observer = LifecycleEventObserver { _, event ->\n            if (event == Lifecycle.Event.ON_DESTROY) {\n                onExit()\n            }\n        }\n        owner.lifecycle.addObserver(observer)\n        onDispose {\n            owner.lifecycle.removeObserver(observer)\n        }\n    }\n}\n```", "```kt\n@Composable\nfun VideoPlayer(modifier: Modifier = Modifier, videoUrl:\nString) {\n    val context = LocalContext.current\n    AndroidView(\n        modifier = modifier,\n        factory = { ctx ->\n            VideoView(ctx).apply {\n                val mediaController = MediaController(ctx)\n                setMediaController(mediaController)\n                mediaController.setAnchorView(this)\n                setVideoURI(Uri.parse(videoUrl))\n                start() // Auto-start playback\n            }\n        }\n    )\n}\n```", "```kt\nval context = ... // Your context here\nval player = ExoPlayer.Builder(context).build().apply {\n    // Media item to be played\n    val mediaItem =\n        MediaItem.fromUri(\"http://example.com/media.mp3\")\n    // Set the media item to be played\n    setMediaItem(mediaItem)\n    // Prepare the player\n    prepare()\n    // Start playback\n    playWhenReady = true\n}\n```", "```kt\nval mediaItem =\n    MediaItem.fromUri(\"https://example.com/video.mp4\")\nplayer.setMediaItem(mediaItem)\nplayer.prepare() // Prepares the player with the provided\n                    MediaItem\nplayer.playWhenReady = true // Starts playback as soon as\n                               preparation is complete\n```", "```kt\nval trackSelector =\n    DefaultTrackSelector(context).apply {\n        setParameters(buildUponParameters()\n            .setPreferredAudioLanguage(\"en\")\n}\nval player = ExoPlayer.Builder(context)\n    .setTrackSelector(trackSelector)\n    .build()\n```", "```kt\nval loadControl = DefaultLoadControl.Builder().apply {\n    // Set minimum buffer duration to 2 minutes\n    setBufferDurationsMs(\n        minBufferMs = 2 * 60 * 1000,\n        maxBufferMs =\n            DefaultLoadControl.DEFAULT_MAX_BUFFER_MS,\n        bufferForPlaybackMs =\n            DefaultLoadControl\n            .DEFAULT_BUFFER_FOR_PLAYBACK_MS,\n        bufferForPlaybackAfterRebufferMs =\n            DefaultLoadControl\n            .DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS\n    )\n}.build()\nval player = ExoPlayer.Builder(context)\n    .setLoadControl(loadControl)\n    .build()\n// Continue setting up the player as before\n```", "```kt\nclass GrayscaleVideoRenderer(\n    eventHandler: Handler,\n    videoListener: VideoRendererEventListener,\n    maxDroppedFrameCountToNotify: Int\n) : SimpleDecoderVideoRenderer(eventHandler, videoListener, maxDroppedFrameCountToNotify) {\n    override fun onOutputFormatChanged(format: Format,\n    outputMediaFormat: MediaFormat?) {\n        super.onOutputFormatChanged(format,\n            outputMediaFormat)\n        // Setup to modify the color format to grayscale\n    }\n    override fun renderOutputBufferToSurface(buffer:\n    OutputBuffer, surface: Surface,\n    presentationTimeUs: Long) {\n        // Apply grayscale effect to the buffer before\n           rendering to the surface\n    }\n}\n```", "```kt\n[versions]\n...\nexoPlayer = \"1.2.1\"\n[libraries]\n...\nexoPlayer-core = { module = \"androidx.media3:media3-exoplayer\", version.ref = \"exoPlayer\" }\nexoPlayer-ui = { module = \" androidx.media3:media3-ui\", version.ref = \"exoPlayer\" }\n```", "```kt\ndependencies {\n    implementation(libs.exoPlayer.core)\n    implementation(libs.exoPlayer.ui)\n}\n```", "```kt\n@Composable\nfun PlaybackScreen() {\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color.Black)\n    ) {\n        TopMediaRow(Modifier.align(Alignment.TopCenter))\n        PlayPauseButton(Modifier.align(Alignment.Center))\n        ProgressBarWithTime(Modifier\n            .align(Alignment.BottomCenter))\n    }\n}\n```", "```kt\n@Composable\nfun TopMediaRow(modifier: Modifier = Modifier) {\n    Row(\n        modifier = modifier.fillMaxWidth().padding(20.dp),\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Text(text = \"S1:E1 - Pilot\", color = Color.White)\n        Icon(imageVector = Icons.Default.Close,\n            contentDescription = \"Close\",\n                tint = Color.White)\n    }\n}\n```", "```kt\n@Composable\nfun PlayPauseButton(modifier: Modifier = Modifier) {\n    Row(\n        horizontalArrangement = Arrangement.Center,\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = modifier\n    ) {\n        IconButton(\n            modifier = Modifier.padding(20.dp),\n            onClick = { /* Rewind action */ })\n        {\n            Icon(\n                modifier = Modifier\n                    .height(80.dp)\n                    .width(80.dp),\n                imageVector = Icons.Default.ArrowBack,\n                contentDescription = \"Rewind 10s\",\n                tint = Color.White)\n        }\n        IconButton(\n            modifier = Modifier\n                .padding(20.dp),\n            onClick = { /* Play/Pause action */ }\n        ) {\n            Icon(\n            modifier = Modifier\n                .height(80.dp)\n                .width(80.dp),\n            imageVector = Icons.Default.PlayArrow,\n            contentDescription = \"Play/Pause\",\n            tint = Color.White)\n        }\n        IconButton(\n            modifier = Modifier\n                .padding(20.dp),\n            onClick = { /* Fast-forward action */ }) {\n            Icon(\n                modifier = Modifier\n                    .height(80.dp)\n                    .width(80.dp),\n                imageVector = Icons.Default.ArrowForward,\n                contentDescription = \"Fast-forward 10s\",\n                tint = Color.White)\n        }\n    }\n}\n```", "```kt\n@Composable\nfun ProgressBarWithTime(modifier: Modifier = Modifier) {\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .wrapContentHeight()\n            .padding(horizontal = 16.dp, vertical = 8.dp),\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n            val progress = remember { mutableStateOf(0.3f)\n                } // Dummy progress\n            val formattedTime = \"22:49\" // Dummy time\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                verticalAlignment =\n                    Alignment.CenterVertically\n            ) {\n                Slider(\n                    value = progress.value,\n                    onValueChange =\n                        { progress.value = it },\n                    modifier = Modifier.weight(1f)\n                )\n                Spacer(modifier = Modifier.width(8.dp))\n                Text(text = formattedTime,\n                    color = Color.White)\n            }\n    }\n}\n```", "```kt\n@Composable\nfun PlaybackScreen() {\n    val isControlsVisible = remember { mutableStateOf(true) }\n    val coroutineScope = rememberCoroutineScope()\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color.Black)\n            .pointerInput(Unit) {\n                detectTapGestures(\n                    onPress = {\n                        // Reset the visibility timer on\n                           user interaction\n                        isControlsVisible.value = true\n                        coroutineScope.launch {\n                            delay(15000) // 15 seconds\n                                            delay\n                            isControlsVisible.value = false\n                        }\n                    }\n                )\n            }\n    ) {\n        if (isControlsVisible.value) {\n            TopMediaRow(Modifier.align(Alignment.TopCenter))\n            PlayPauseButton(Modifier.align(\n                Alignment.Center))\n            ProgressBarWithTime(Modifier.align(\n                Alignment.BottomCenter))\n        }\n    }\n}\n```", "```kt\nclass PlaybackActivity: ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            PlaybackScreen()\n        }\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android =\n\"http://schemas.android.com/apk/res/android\">\n    <application>\n        <activity android:name =\n        \"com.packt.playback.presentation.PlaybackActivity\"\n        android:screenOrientation=\"landscape\"/>\n    </application>\n</manifest>\n```", "```kt\n@HiltViewModel\nclass PlaybackViewModel @Inject constructor(): ViewModel()\n{\n    lateinit var player: ExoPlayer\n    @OptIn(UnstableApi::class)\n    private fun preparePlayerWithMediaSource(exoPlayer:\n    ExoPlayer) {\n        val mediaUrl = \"https://example.com/media.mp4\"\n        val mediaSource = ProgressiveMediaSource.Factory(\n            DefaultHttpDataSource.Factory())\n            .createMediaSource(MediaItem.fromUri(mediaUrl))\n        exoPlayer.setMediaSource(mediaSource)\n        exoPlayer.prepare()\n    }\n    fun setupPlayer(context: Context) {\n        player = ExoPlayer.Builder(context).build().also {\n        exoPlayer ->\n            preparePlayerWithMediaSource(exoPlayer)\n        }\n    }\n    override fun onCleared() {\n        super.onCleared()\n        player.release()\n        progressUpdateJob?.cancel()\n    }\n}\n```", "```kt\n@Composable\nfun PlaybackScreen() {\n    val viewModel: PlaybackViewModel = hiltViewModel()\n    val isControlsVisible = remember { mutableStateOf(true) }\n    val coroutineScope = rememberCoroutineScope()\n    viewModel.setupPlayer(LocalContext.current)\n    Box(\n        modifier = Modifier\n            .fillMaxSize()\n            .background(Color.Black)\n            .pointerInput(Unit) {\n                detectTapGestures(\n                    onPress = {\n                        isControlsVisible.value = true\n                        coroutineScope.launch {\n                            delay(15000) // 15 seconds\n                                            delay\n                            isControlsVisible.value = false\n                        }\n                    }\n                )\n            }\n    ) {\n        VideoPlayerComposable(\n            modifier = Modifier.matchParentSize(),\n            player = viewModel.player\n        )\n        if (isControlsVisible.value) {\n            ...\n        }\n    }\n}\n```", "```kt\n@Composable\nfun VideoPlayerComposable(\n    modifier: Modifier = Modifier,\n    player: ExoPlayer\n) {\n    AndroidView(\n        factory = { ctx ->\n            PlayerView(ctx).apply {\n                layoutParams = ViewGroup.LayoutParams(\n                    MATCH_PARENT, MATCH_PARENT)\n                setPlayer(player)\n                useController = false\n            }\n        },\n        modifier = modifier,\n        update = { view ->\n            view.player = player\n        }\n    )\n}\n```", "```kt\n@Composable\nfun PlayPauseButton(\n    isPlaying: Boolean,\n    onRewind: () -> Unit,\n    onPlayPause: () -> Unit,\n    onFastForward: () -> Unit,\n    modifier: Modifier = Modifier,\n    ) {\n    Row(\n        horizontalArrangement = Arrangement.Center,\n        verticalAlignment = Alignment.CenterVertically,\n        modifier = modifier\n    ) {\n        IconButton(\n            onClick = onRewind,\n            modifier = Modifier.padding(20.dp)\n        ) {\n            Icon(\n                modifier = Modifier\n                    .height(80.dp)\n                    .width(80.dp),\n                imageVector = Icons.Default.ArrowBack,\n                contentDescription = \"Rewind 10s\",\n                tint = Color.White\n            )\n        }\n        IconButton(\n            onClick = onPlayPause,\n            modifier = Modifier.padding(20.dp)\n        ) {\n            Icon(\n                modifier = Modifier\n                    .height(80.dp)\n                    .width(80.dp),\n                imageVector = if (isPlaying)\n                    Icons.Default.Close else\n                    Icons.Default.PlayArrow,\n                contentDescription = if (isPlaying) \"Pause\"\n                    else \"Play\",\n                tint = Color.White\n            )\n        }\n        IconButton(\n            onClick = onFastForward,\n            modifier = Modifier.padding(20.dp)\n        ) {\n            Icon(\n                modifier = Modifier\n                    .height(80.dp)\n                    .width(80.dp),\n                imageVector = Icons.Default.ArrowForward,\n                contentDescription = \"Fast-forward 10s\",\n                tint = Color.White\n            )\n        }\n    }\n}\n```", "```kt\nval isPlaying = viewModel.isPlaying.collectAsState()\nPlayPauseButton(\n    isPlaying = isPlaying.value,\n    onRewind = { viewModel.rewind() },\n    onFastForward = {viewModel.fastForward() },\n    onPlayPause = {viewModel.togglePlayPause() },\n    modifier = Modifier.align(Alignment.Center)\n)\n```", "```kt\nprivate val _isPlaying = MutableStateFlow<Boolean>(false)\nval isPlaying: MutableStateFlow<Boolean> = _isPlaying\nfun setupPlayer(context: Context) {\n    player = ExoPlayer.Builder(context).build().also {\n    exoPlayer ->\n        preparePlayerWithMediaSource(exoPlayer)\n        exoPlayer.addListener(object : Player.Listener {\n            override fun onIsPlayingChanged(isPlaying:\n            Boolean) {\n                _isPlaying.value = isPlaying\n            }\n            override fun onPlaybackStateChanged(\n            playbackState: Int) {\n                super.onPlaybackStateChanged(playbackState)\n            }\n            override fun onPositionDiscontinuity(\n            oldPosition: Player.PositionInfo, newPosition:\n            Player.PositionInfo, reason: Int) {\n                super.onPositionDiscontinuity(oldPosition,\n                    newPosition, reason)\n            }\n            override fun onTimelineChanged(timeline:\n            Timeline, reason: Int) {\n                super.onTimelineChanged(timeline, reason)\n            }\n        })\n    }\n}\nfun togglePlayPause() {\n    if (player.isPlaying) {\n        player.pause()\n    } else {\n        player.play()\n    }\n}\nfun rewind() {\n    val newPosition =\n        (player.currentPosition - 10000).coerceAtLeast(0)\n    player.seekTo(newPosition)\n}\nfun fastForward() {\n    val newPosition =\n        (player.currentPosition + 10000)\n            .coerceAtMost(player.duration)\n    player.seekTo(newPosition)\n}\n```", "```kt\n@Composable\nfun ProgressBarWithTime(\n    currentPosition: Long,\n    duration: Long,\n    onSeek: (Long) -> Unit,\n    modifier: Modifier = Modifier,\n) {\n    val progress =\n        if (duration > 0) currentPosition.toFloat() /\n            duration else 0f\n    val formattedTime =\n        \"${formatTime(currentPosition)} /\n            ${formatTime(duration)}\"\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .wrapContentHeight()\n            .padding(horizontal = 16.dp, vertical = 8.dp),\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Slider(\n            value = progress,\n            onValueChange = { newValue ->\n                val newPosition =\n                    (newValue * duration).toLong()\n                onSeek(newPosition)\n            },\n            modifier = Modifier.weight(1f),\n            valueRange = 0f..1f\n        )\n        Spacer(modifier = Modifier.width(8.dp))\n        Text(text = formattedTime, color = Color.White)\n    }\n}\n```", "```kt\nfun formatTime(millis: Long): String {\n    val totalSeconds = millis / 1000\n    val hours = totalSeconds / 3600\n    val minutes = (totalSeconds % 3600) / 60\n    val seconds = totalSeconds % 60\n    return if (hours > 0) {\n        String.format(\"%02d:%02d:%02d\", hours, minutes,\n            seconds)\n    } else {\n        String.format(\"%02d:%02d\", minutes, seconds)\n    }\n}\n```", "```kt\nval currentPosition =\n    viewModel.currentPosition.collectAsState()\nval duration = viewModel.duration.collectAsState()\nProgressBarWithTime(\n    currentPosition = currentPosition.value,\n    duration = duration.value,\n    onSeek = { newPosition ->\n        viewModel.seekTo(newPosition)\n    },\n    modifier = Modifier.align(Alignment.BottomCenter)\n)\n```", "```kt\nprivate val _currentPosition = MutableStateFlow<Long>(0L)\nval currentPosition: StateFlow<Long> = _currentPosition\nprivate val _duration = MutableStateFlow<Long>(0L)\nval duration: MutableStateFlow<Long> = _duration\nprivate var progressUpdateJob: Job? = null\nfun setupPlayer(context: Context) {\n    player = ExoPlayer.Builder(context).build().also {\n    exoPlayer ->\n        preparePlayerWithMediaSource(exoPlayer)\n        exoPlayer.addListener(object : Player.Listener {\n            override fun onIsPlayingChanged(isPlaying:\n            Boolean) {\n                _isPlaying.value = isPlaying\n                if (isPlaying) {\n                    startPeriodicProgressUpdate()\n                } else {\n                    progressUpdateJob?.cancel()\n                }\n            }\n            override fun onPlaybackStateChanged\n            (playbackState: Int) {\n                super.onPlaybackStateChanged(playbackState)\n                if (playbackState == Player.STATE_READY ||\n                playbackState == Player.STATE_BUFFERING) {\n                    _duration.value = exoPlayer.duration\n                }\n            }\n            override fun onPositionDiscontinuity(\n            oldPosition: Player.PositionInfo, newPosition:\n            Player.PositionInfo, reason: Int) {\n                super.onPositionDiscontinuity(oldPosition,\n                    newPosition, reason)\n                _currentPosition.value =\n                    newPosition.positionMs\n            }\n            override fun onTimelineChanged(timeline:\n            Timeline, reason: Int) {\n                super.onTimelineChanged(timeline, reason)\n                if (!timeline.isEmpty) {\n                    _duration.value = exoPlayer.duration\n                }\n            }\n        })\n    }\n}\nprivate fun startPeriodicProgressUpdate() {\n    progressUpdateJob?.cancel()\n    progressUpdateJob = viewModelScope.launch {\n        while (coroutineContext.isActive) {\n            val currentPosition = player.currentPosition\n            _currentPosition.value = currentPosition\n            delay(1000)\n        }\n    }\n}\nfun seekTo(position: Long) {\n    if (::player.isInitialized && position >= 0 &&\n    position <= player.duration) {\n        player.seekTo(position)\n    }\n}\noverride fun onCleared() {\n    super.onCleared()\n    player.release()\n    progressUpdateJob?.cancel()\n}\n```", "```kt\n1\n00:00:01,000 --> 00:00:03,000\nHello, welcome to our video!\n2\n00:00:05,000 --> 00:00:08,000\nToday, we'll be discussing how to create a simple SRT file.\n3\n00:00:10,000 --> 00:00:12,000\nLet's get started.\n4\n00:00:15,000 --> 00:00:20,000\nSubtitles primarily enhance accessibility and also can be very helpful for understanding dialogue, especially in noisy environments.\n5\n00:00:22,500 --> 00:00:25,000\nAnd that's all there is to it!\n```", "```kt\n@OptIn(UnstableApi::class)\nprivate fun preparePlayerWithMediaSource(exoPlayer:\nExoPlayer) {\n        val mediaUrl = \"https://example.com/media.mp4\"\n        val subtitleUrl =\n            \"https://example.com/subtitles.srt\"\n        val videoMediaSource =\n            ProgressiveMediaSource.Factory(\n                DefaultHttpDataSource.Factory()\n        ).createMediaSource(MediaItem.fromUri(mediaUrl))\n        val subtitleSource =\n            MediaItem.SubtitleConfiguration.Builder(\n                Uri.parse(subtitleUrl)).build()\n        val subtitleMediaSource =\n            SingleSampleMediaSource.Factory(\n                DefaultHttpDataSource.Factory()\n        ).createMediaSource(subtitleSource, C.TIME_UNSET)\n        val mergedSource =\n            MergingMediaSource(videoMediaSource,\n                subtitleMediaSource)\n        exoPlayer.setMediaSource(mergedSource)\n        exoPlayer.prepare()\n}\n```"]