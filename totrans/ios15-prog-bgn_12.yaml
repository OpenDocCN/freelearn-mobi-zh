- en: '*Chapter 10*: Building Your User Interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you created a new Xcode project, added a tab bar to
    your app that allowed the user to select between the `Assets.xcassets` file that
    contains resources for your app, and modified the **Launch** screen of your app
    with a custom color and icon. When your app is launched, you should see the **Launch**
    screen briefly. After that, the **Explore** screen is displayed, but it is currently
    blank.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, the **Explore** screen should display a collection
    view showing a list of cuisines in collection view cells and a collection view
    section header containing a **LOCATION** button. Tapping the **LOCATION** button
    should display a **Locations** screen containing a list of locations.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will make the **Explore** screen display a **collection
    view** containing 20 empty **collection view cells**, as well as a **collection
    view section header** containing a button that will display a view representing
    the **Locations** screen when tapped. You'll also configure a **Cancel** button
    to dismiss this view and return you to the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: You'll be adding a small amount of code to your app, but don't worry too much
    about thisâ€”you'll learn more about it in the next part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to add view controllers
    to a storyboard scene, link outlets in view controllers to scenes, set up collection
    view cells and collection view section headers, and present a view controller
    modally.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a collection view to the **Explore** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting storyboard elements to outlets in a view controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring data source methods for the collection view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a collection view section header to the collection view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring storyboard element sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting a view modally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `LetsEat` project that you created in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter10` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3kjIKFQ](https://bit.ly/3kjIKFQ)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding a collection view to the **Explore** scene, which will
    eventually display the list of cuisines and the **LOCATION** button.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a collection view to the Explore screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A collection view is an instance of the `UICollectionView` class. Like a spreadsheet
    program, it displays a grid of cells. Each cell in a collection view is a collection
    view cell, which is an instance of the `UICollectionViewCell` class. You'll start
    by adding a collection view to the view controller scene for the `Main` storyboard
    file, then you'll add Auto Layout constraints to make it fill the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Auto Layout and how to use it, go to [https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `LetsEat` project you created in the previous chapter and run the
    app to make sure everything still works as it should, then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator, and click the Library
    button:![Figure 10.1: Toolbar with the Library button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.01_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.1: Toolbar with the Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The library will appear. Make sure the Objects button is selected, then type
    `collec` in the filter field. A **Collection View** object will appear as one
    of the results. Drag it to the middle of the view of the **View Controller Scene**
    for the **Explore** screen:![Figure 10.2: Library with Collection View object
    selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.02_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.2: Library with Collection View object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The collection view (containing a single prototype cell) has been added, but
    it only takes up a small part of the screen. As shown in the app tour in the previous
    chapter, it should fill the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will use the **Auto Layout Add New Constraints** button to bind the edges
    of the collection view to the edges of its enclosing view. Make sure the collection
    view is selected. Click the Auto Layout Add New Constraints button:![Figure 10.3:
    View controller scene with collection view selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.03_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.3: View controller scene with collection view selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Type `0` in the top, left, right, and bottom edge constraint fields and click
    all the pale red struts. Make sure all the struts have turned bright red. Click
    the `0`, binding the collection view's edges to those of the enclosing view. Now
    the collection view will fill the screen, regardless of device and orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that all four sides of the collection view are now bound to the edges
    of the screen as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5: View controller scene with collection view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.5: View controller scene with collection view filling the screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have added a collection view to the view of the view controller scene for
    the **Explore** screen, and used Auto Layout constraints to make it fill the screen,
    but the **Explore** screen will still be blank when you run the app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will add a `ExploreViewController` class, and you'll
    connect outlets in this class to the UI elements in the `ExploreViewController`
    class to control what is displayed by the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting storyboard elements to outlets in a view controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've added a collection view to the `UIViewController` subclass in that file,
    and connect UI elements in the `UIViewController` subclass.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: The Model-View-Controller design pattern and collection view controllers will
    be explained in more detail in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194),
    *Getting Started with MVC and Collection Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding a Cocoa Touch Class file to your project so you can declare
    and define a `UIViewController` subclass in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Cocoa Touch Class file to your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cocoa Touch** is the application development environment for building apps
    for iOS, iPadOS, watchOS, and tvOS. A Cocoa Touch Class file makes it easy for
    you to implement any Cocoa Touch class or subclass. It contains boilerplate code
    based on the superclass that you specified when you create it. You''ll add a Cocoa
    Touch Class file to your project in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will make a new `Explore` group in your project to keep things organized.
    Next, you will create and add a Cocoa Touch Class file, `ExploreViewController`,
    to this group. You''ll declare and define a subclass of the `UIViewController`
    class named `ExploreViewController` in this file and make an instance of this
    class the view controller for the **Explore** screen. You''ll add properties and
    methods to this class to manage the collection view that you added in the previous
    section. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `LetsEat` group in the Project navigator and choose **New
    Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The name of the group will be highlighted. Change it to `Explore` and press
    *Return* on the keyboard when you''re done:![Figure 10.6: Project navigator with
    Explore group selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.06_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.6: Project navigator with Explore group selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you make a mistake, press *Return* once more. This makes the field editable
    so that you can make changes to the name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `Explore` group in the Project navigator and choose **New
    File...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**:![Figure 10.7: Choose a template for your new file screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.07_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.7: Choose a template for your new file screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Choose options for your new file** screen will appear:![Figure 10.8:
    Choose options for your new file screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.08_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.8: Choose options for your new file screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the following in the `ExploreViewController`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`UIViewController`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `ExploreViewController` file has been added to the project inside the
    `Explore` folder in the Project navigator. Review the code in the Editor area.
    Note that `ExploreViewController` is a subclass of `UIViewController`, which means
    it inherits properties and methods from the `UIViewController` class. There is
    one method, `viewDidLoad()`, inside the class definition, but it won't be used
    right now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the commented code after the `viewDidLoad()` class from the `ExploreViewController`
    file so that it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9: Editing area showing ExploreViewController.swift''s contents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.9: Editing area showing ExploreViewController.swift''s contents'
  prefs: []
  type: TYPE_NORMAL
- en: You have just added the `ExploreViewController` file containing the `ExploreViewController`
    class declaration and definition to your app.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to assign the `ExploreViewController` class as the identity
    of the view controller for the **Explore** screen and assign an **outlet** for
    the collection view that you added to the view controller scene earlier. You'll
    see how this is done in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting storyboard elements to the view controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's review where you are now. In the `Main` storyboard file, you have a view
    controller scene for the `ExploreViewController` file, you have code that declares
    and defines the `ExploreViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to assign the `ExploreViewController` class as the identity for the
    `ExploreViewController` class the view controller for the **Explore** screen when
    you run your app and enable you to manage what is displayed by the collection
    view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `Main` storyboard file in the Project navigator. Make sure the
    **View Controller Scene** for the **Explore** screen is selected. Click the **View
    Controller** icon in the document outline and click on the Identity inspector
    button:![Figure 10.10: Identity inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.10: Identity inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under `ExploreViewController`:![Figure 10.11: Identity inspector with Class
    set to ExploreViewController'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.11: Identity inspector with Class set to ExploreViewController'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This creates an instance of `ExploreViewController` as the view controller for
    this scene when you run the app. Note that the scene name has changed from **View
    Controller Scene** to **Explore View Controller Scene**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let's create the outlet for the collection view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Navigator and Inspector buttons to hide the Navigator and Inspector
    areas so you have more room to work:![Figure 10.12: Toolbar showing Navigator
    and Inspector buttons'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.12: Toolbar showing Navigator and Inspector buttons'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Adjust Editor Options button:![Figure 10.13: Adjust Editor Options
    button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.13: Adjust Editor Options button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **Assistant** from the pop-up menu:![Figure 10.14: Adjust Editor Options
    menu with Assistant selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.14: Adjust Editor Options menu with Assistant selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will display any Swift files associated with this scene in an assistant
    editor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As you can see, the `Main` storyboard file''s content appears on the left and
    the `ExploreViewController` class definition appears on the right-hand side of
    the Editor area. Look at the bar just above the code. Verify that `ExploreViewController.swift`
    is selected:![Figure 10.15: Bar showing ExploreViewController.swift selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.15: Bar showing ExploreViewController.swift selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don't see `ExploreViewController.swift` selected, click the bar and select
    `ExploreViewController.swift` from the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To connect the collection view in the `ExploreViewController` class, *Ctrl*
    + *Drag* from the collection view to the `ExploreViewController` file, just below
    the class name declaration:![Figure 10.16: Editing area'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.16: Editing area'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A small pop-up dialog box will appear. Type the name of the outlet, `collectionView`,
    into the **Name** text field, set **Storage** to **Strong**, and click **Connect**:![Figure
    10.17: Pop-up dialog box for outlet creation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.17: Pop-up dialog box for outlet creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that the code that creates the `collectionView` outlet has been automatically
    added to the `ExploreViewController` file. Note the `IBOutlet` keyword, which
    indicates that `collectionView` is an outlet. After you have done so, click the
    **x** to close the assistant editor window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.18: Editing area showing collectionView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.18_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.18: Editing area showing collectionView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: The `ExploreViewController` class now has an outlet, `collectionView`, for the
    collection view in the `ExploreViewController` instance can manage what the collection
    view displays.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is common to make mistakes when using *Ctrl + Drag* to drag from an element
    in a storyboard scene to a Cocoa Touch Class file. If you make a mistake while
    doing so, this may cause a crash to occur when the app is launched. To check if
    there are any errors in the connection between the collection view and `ExploreViewController`
    class, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to display the Navigator and Inspector
    areas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `collectionView` outlet connected to the collection view in the **Outlets**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you see a tiny error icon, click on the **x** to break the connection:![Figure
    10.20: Connections inspector showing collectionView outlet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.20: Connections inspector showing collectionView outlet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under **Outlets**, drag from the **collectionView** outlet back to the collection
    view to re-establish the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.21: Editing area showing collection view to be connected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.21_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.21: Editing area showing collection view to be connected'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you've assigned the `ExploreViewController` class as the identity
    for the `ExploreViewController` class for the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: In order to display collection view cells on screen, you will need to implement
    data source methods for the collection view by adding some code to the `ExploreViewController`
    class. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring data source methods for the collection view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your app is running, an instance of the `ExploreViewController` class acts
    as the view controller for the `UICollectionViewDataSource`, for this purpose.
    All you need to do is connect the collection view's `dataSource` outlet to the
    `ExploreViewController` class and implement the required methods of this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The collection view also needs to know what to do if the user taps on a collection
    view cell. Again, the view controller for the collection view is responsible,
    and Apple has created the `UICollectionViewDelegate` protocol for this purpose.
    You will connect the collection view's `delegate` outlet to the `ExploreViewController`
    class, but you won't be implementing any methods from this protocol yet.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Protocols are covered in [*Chapter 8*](B17469_08_Final_VK_ePub.xhtml#_idTextAnchor123)*,
    Protocols, Extensions, and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to type in a small amount of code in this chapter. Don't worry
    about what it means; you'll learn more about collection view controllers and their
    associated protocols in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)*,
    Getting Started with MVC and Collection Views*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll use the Connections inspector to assign the collection
    view's `dataSource` and `delegate` outlets to the `ExploreViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the delegate and data source properties of the collection view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An instance of the `ExploreViewController` class will provide the data that
    the collection view will display, as well as the methods that will be executed
    when the user interacts with the collection view. You need to connect the collection
    view''s `dataSource` and `delegate` properties to outlets in the `ExploreViewController`
    class for this to work. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the Navigator and Inspector buttons to display the Navigator and Inspector
    areas again if you haven't done so already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Main` storyboard file should still be selected. Click the `dataSource`
    and `delegate` outlets. Drag from each empty circle to the **ExploreViewController**
    icon in the document outline:![Figure 10.22: Connections Inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.22: Connections Inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify the `dataSource` and `delegate` properties of the collection view have
    been connected to outlets in the `ExploreViewController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.23: Connections Inspector with dataSource and delegate outlets
    set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.23_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.23: Connections Inspector with dataSource and delegate outlets set'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will add some code to make the `ExploreViewController`
    class conform to the `UICollectionViewDataSource` protocol, and configure the
    collection view to display 20 collection view cells when you run your app.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting the UICollectionViewDataSource and UICollectionViewDelegate protocols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, you''ve made the `ExploreViewController` class the data source and
    delegate for the collection view. The next step is to make it adopt the `UICollectionViewDataSource`
    and `UICollectionViewDelegate` protocols and implement any required methods. You''ll
    also change the color of the collection view cells to make them visible on screen.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Collection View Cell** in the document outline. This represents the
    collection view cells that the collection view will display. Make sure the Attributes
    inspector is selected:![Figure 10.24: Attributes inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.24_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.24: Attributes inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under `exploreCell` and press Return. The name `Light Gray Color` so that you
    can see them when you run the app:![Figure 10.25: Attributes inspector with identity
    and background color set'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.25_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.25: Attributes inspector with identity and background color set'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the `ExploreViewController` file in the Project navigator. Type in
    the following code after the class declaration to make the `ExploreViewController`
    class adopt the `UICollectionViewDataSource` and `UICollectionViewDelegate` protocols:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few seconds, an error will appear. Click on it to display an error message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The error message says that `UICollectionViewDataSource` protocol to make `ExploreViewController`
    conform to it. Click `ExploreViewController` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the stubs for the two required methods for the `UICollectionViewDataSource`
    protocol have been automatically inserted into the `ExploreViewController` file
    as shown:![Figure 10.26: Editing area showing UICollectionViewDataSource method
    stubs'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.26_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.26: Editing area showing UICollectionViewDataSource method stubs'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first method tells the collection view how many cells to display, while
    the second method tells the collection view what to display in each collection
    view cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the `code` text in the first method with `20` (the `return` keyword
    is optional if it''s just a single line of code). This tells the collection view
    to display 20 cells:![Figure 10.27: Editing area showing code to display 20 cells'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.27_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.27: Editing area showing code to display 20 cells'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace the `code` text in the second method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't worry about what this means for now as you'll learn more about collection
    views in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194), *Getting
    Started with MVC and Collection Views*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your app. You should see the simulator display a grid of 20 light
    gray collection view cells as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.28: iOS Simulator showing 20 collection view cells'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.28_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.28: iOS Simulator showing 20 collection view cells'
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, there should be a **LOCATION** button at the
    top right of this screen. You will enable the section header for the collection
    view to house this button in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a section header to the collection view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A collection view can be configured with a section header and a section footer.
    Both of them are instances of the `UICollectionReusableView` class. You''ll enable
    the section header for the collection view in the **Explore** screen, so you''ll
    have a place to put the **LOCATION** button. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator and click the **Collection
    View** in the document outline. Click the Attributes inspector button. Under **Collection
    View**, tick the checkbox for **Section Header**:![Figure 10.29: Attributes inspector
    with Section Header checkbox ticked'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.29_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.29: Attributes inspector with Section Header checkbox ticked'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This enables the section header for the collection view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that `header` and press *Return* when you''re done:![Figure 10.30: Attributes
    inspector with Identifier set to header'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.30_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.30: Attributes inspector with Identifier set to header'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the `ExploreViewController` file in the Project navigator. Just before
    the data source methods, type in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method returns the instance of `UICollectionReusableView` with the identifier
    `header` that you just configured, which will be displayed onscreen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Build and run your app. You should see the collection view section header as
    a white space between the collection view cells and the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.31: iOS Simulator showing collection view section header'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.31_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.31: iOS Simulator showing collection view section header'
  prefs: []
  type: TYPE_NORMAL
- en: Before you add the **LOCATION** button, you'll need to increase the collection
    view section header's height and the collection view cell size to make them match
    the **Explore** screen shown in the app tour (refer to [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*). You will set the cell size and the header height
    using the **Size inspector** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring storyboard element sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Size inspector is used to change the size of storyboard elements. You will
    use it to change the size of the collection view cell and collection view section
    header to make them match the **Explore** screen that was shown in the app tour
    in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133), *Setting Up
    the User Interface*. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator and click the **Collection
    View** in the document outline. Click the Size inspector button:![Figure 10.32:
    Size inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.32_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.32: Size inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The collection view size settings will be displayed in the Size inspector as
    shown:![Figure 10.33: Size inspector showing size settings for the collection
    view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.33_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.33: Size inspector showing size settings for the collection view'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Configure the collection view size settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`177` and `177`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0` and `100`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`0` and `7`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`7`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember to press *Return* after changing each value.
  prefs: []
  type: TYPE_NORMAL
- en: The units that are used in the Size inspector are points. Each point may refer
    to one or more pixels on the device screen. For the iPhone SE (2nd generation),
    the screen is 375 points wide and 667 points high, although the actual screen
    resolution is 750 x 1,334 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cell Size** determines the size of the collection view cell. **Header Size**
    determines the size of the collection view section header. **Min Spacing** determines
    the space between cells. **Section Insets** determines the space between the section
    containing the cells to the sides of the enclosing view. These settings are specific
    to the iPhone SE (2nd generation). In [*Chapter 22*](B17469_22_Final_VK_ePub.xhtml#_idTextAnchor431),
    *Getting Started with Mac Catalyst*, you will calculate the optimum cell size
    based on the dimensions of the device screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app, and you should see the **Explore** screen display 20
    collection view cells and a collection view section header:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.34: iOS simulator showing resized collection view cells and section
    header'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.34_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.34: iOS simulator showing resized collection view cells and section
    header'
  prefs: []
  type: TYPE_NORMAL
- en: Note that although there is no data in the cells and no button in the header,
    it looks similar to the **Explore** screen that was shown in the app tour in [*Chapter
    9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133)*, Setting Up the User Interface*.
    You will configure the cells to display data in the next part of this book. For
    now, let's add a button to the collection view section header, which will be used
    later to display the **Locations** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting a view modally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will add a button to the collection view section header.
    When tapped, this button will display a view showing the **Locations** screen.
    This view will be from a new view controller scene embedded in a navigation controller,
    which you will add to the project. The view will be presented modally, which means
    you won't be able to do anything else until it is dismissed. To dismiss it, you'll
    add a **Cancel** button to the view's navigation bar. You'll also add a **Done**
    button, but you'll only implement its functionality in [*Chapter 17*](B17469_17_Final_VK_ePub.xhtml#_idTextAnchor248)*,
    Getting Started with JSON Files*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by adding a button from the library to the collection view section
    header.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to the collection view header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, there is a **LOCATION** button at the top right-hand
    side of the screen. You''ll add a button to represent the **LOCATION** button
    in the collection view section header. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator. Make sure the **Explore
    View Controller Scene** is selected. Click the Library button to display the library:![Figure
    10.35: Toolbar with Library button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.35_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.35: Toolbar with Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `button` in the filter field. A **Button** object will appear in the results.
    Drag the button to the collection view section header:![Figure 10.36: Library
    with Button object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.36_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.36: Library with Button object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Position the button to the right-hand side of the collection view section header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.37: Collection view section header with button added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.37_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.37: Collection view section header with button added'
  prefs: []
  type: TYPE_NORMAL
- en: Its exact placement isn't important right now as you will customize the button's
    position in [*Chapter 12*](B17469_12_Final_VK_ePub.xhtml#_idTextAnchor182), *Modifying
    and Configuring Cells*.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a button in your collection view section header. Next, you will
    add a view controller scene to represent the **Locations** screen that will appear
    when the button is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new view controller scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the app tour in [*Chapter 9*](B17469_09_Final_VK_ePub.xhtml#_idTextAnchor133),
    *Setting Up the User Interface*, when you tap the **LOCATION** button, a list
    of locations will appear in the **Locations** screen. You''ll add a new view controller
    scene to your project to represent this screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button to display the library and type `view con` in the
    filter field. A **View Controller** object will be among the search results. Drag
    the **View Controller** object onto the storyboard:![Figure 10.38: Library with
    View Controller object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.38_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.38: Library with View Controller object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Position it to the right of the **Explore View Controller Scene**:![Figure
    10.39: Editing area showing view controller scene next to Explore View Controller
    Scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.39_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.39: Editing area showing view controller scene next to Explore View
    Controller Scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The newly added view controller scene should already be selected. In the document
    outline, click on the **View Controller** icon for this scene:![Figure 10.40:
    Document outline with View Controller selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.40_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.40: Document outline with View Controller selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need space for the **Cancel** and **Done** buttons, so you will embed
    this view controller scene in a navigation controller to provide a navigation
    bar where the buttons can be placed. Choose **Embed In** | **Navigation Controller**
    from the **Editor** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A navigation controller scene will appear to the left of the view controller
    scene:![Figure 10.41: Editing area showing view controller scene embedded in a
    navigation controller'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.41_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.41: Editing area showing view controller scene embedded in a navigation
    controller'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Ctrl* + *Drag* from the button to the navigation controller scene:![Figure
    10.42: Editing area showing button in Explore View Controller Scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.42_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.42: Editing area showing button in Explore View Controller Scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The Segue pop-up menu will appear. Choose **Present Modally**:![Figure 10.43:
    Segue pop-up menu with Present Modally selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.43_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.43: Segue pop-up menu with Present Modally selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This makes the view controller's view slide up from the bottom of the screen
    when the button is tapped. You won't be able to interact with any other view until
    this view is dismissed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that a segue has linked the **Explore View Controller Scene** and the
    navigation controller scene together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.44: Editing area showing segue between Explore View Controller
    Scene'
  prefs: []
  type: TYPE_NORMAL
- en: and navigation controller scene
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.44_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.44: Editing area showing segue between Explore View Controller Scene
    and navigation controller scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. If you click the button, the new view controller''s
    view should slide up from the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.45: iOS simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.45_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.45: iOS simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, you can't dismiss this view. In the next section, you will add
    a **Cancel** button to the navigation bar and program it to dismiss the view.
    You'll also add a **Done** button, but you won't program it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Cancel and Done buttons to the navigation bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the benefits of embedding a view controller in a navigation controller
    is the navigation bar at the top of the screen. You can place buttons on its left-
    and right-hand sides. Follow these steps to add the **Cancel** and **Done** buttons
    to the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Navigation Item** for the **View Controller Scene** in the document
    outline. Click the Library button:![Figure 10.46: Toolbar with Library button
    shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.46_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.46: Toolbar with Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `bar b` into the filter field and drag two **Bar Button Item** objects
    to each side of the navigation bar:![Figure 10.47: Library with Bar Button Item
    objects selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.47_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.47: Library with Bar Button Item objects selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Item** button on the right:![Figure 10.48: View controller scene
    with right button selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.48_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.48: View controller scene with right button selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Under **Bar Button Item**, choose **Done**
    from the **System Item** menu:![Figure 10.49: Attributes inspector with System
    Item set to Done'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.49_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.49: Attributes inspector with System Item set to Done'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the `viewControllers`, that holds an array of view controllers. When you
    click the button in the `viewControllers` array and its view appears from the
    bottom of the screen, covering the **Explore** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To dismiss the view, you will link the `ExploreViewController` class which
    will be executed when the `ExploreViewController` file and add the following method
    at the bottom of the file, just before the last curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click on the `Main` storyboard file in the Project navigator. *Ctrl + Drag*
    from the **Cancel** button to the scene exit icon (the third icon) and choose
    **unwindLocationCancelWithSegue:** from the pop-up menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.51: View controller scene showing Cancel button action being set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.51_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.51: View controller scene showing Cancel button action being set'
  prefs: []
  type: TYPE_NORMAL
- en: When your app is running, clicking the `viewControllers` array, making the view
    that is presented modally go away and executes the `unwindLocationCancel(segue:)`
    method. Note that this method doesn't do anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and click the button in the section header of the **Explore**
    screen. The new view will appear onscreen. When you click the **Cancel** button,
    the new view disappears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.52: iOS Simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.52_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.52: iOS Simulator showing Explore and Locations screens'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've completed the basic structure for the **Explore** screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you added a collection view to the `Main` storyboard file and
    added a new file, `ExploreViewController`, which contains the implementation of
    the `ExploreViewController` class. You made the `ExploreViewController` class
    the view controller for the scene containing the collection view. Then, you modified
    the `ExploreViewController` class to have an outlet for the collection view in
    the storyboard, and made it the data source and delegate for the collection view.
    You added a collection view section header to the collection view and set the
    size for the collection view cells and collection view section header. Finally,
    you added a button to display a second view and configured a **Cancel** button
    to dismiss it.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should be fairly proficient in using Interface Builder to
    add views and view controllers to a storyboard scene, link view controller outlets
    to UI elements in storyboards, set up collection view cells and section headers,
    and present views modally. This will be very useful when you're designing the
    user interface for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll configure the new view controller to display a table
    view, implement the remaining screens of your app, and implement a map view for
    the **Map** screen.
  prefs: []
  type: TYPE_NORMAL
