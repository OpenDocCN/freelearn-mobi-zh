["```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<RelativeLayout  \n\n  android:layout_width=\"match_parent\" \n  android:layout_height=\"match_parent\" \n  android:paddingBottom=\"@dimen/activity_vertical_margin\" \n  android:paddingLeft=\"@dimen/activity_horizontal_margin\" \n  android:paddingRight=\"@dimen/activity_horizontal_margin\" \n  android:paddingTop=\"@dimen/activity_vertical_margin\" \n  app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" \n  tools:context=\"com.example.jessica.myapplication.MainActivity\" \n  tools:showIn=\"@layout/app_bar_main\"> \n\n  <ImageView \n      android:layout_width=\"175dp\" \n      android:layout_height=\"225dp\" \n      android:id=\"@+id/imageView2\" \n      android:src=\"img/mushroomtoast\" \n      android:layout_below=\"@+id/textView2\" \n      android:layout_toEndOf=\"@+id/textView2\" /> \n\n  <ImageView \n      android:layout_width=\"175dp\" \n      android:layout_height=\"225dp\" \n      android:id=\"@+id/imageView3\" \n      android:src=\"img/sundayroast\" \n      android:layout_below=\"@+id/imageView2\" \n      android:layout_alignStart=\"@+id/imageView2\" /> \n\n  <TextView \n      android:paddingTop=\"10dp\" \n      android:layout_width=\"wrap_content\" \n      android:layout_height=\"wrap_content\" \n      android:textSize=\"40sp\" \n      android:text=\"@string/welcome!\" \n      android:id=\"@+id/textView2\" \n      android:layout_alignParentTop=\"true\" \n      android:layout_alignParentStart=\"true\" /> \n\n</RelativeLayout> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<menu > \n\n  <group  \n\n//This is an optional, invisible container that groups related <items> together in the navigation drawer// \n\nandroid:checkableBehavior=\"single\"> \n\n//This is another optional element that defines the checkable behavior for either individual menu items (via the android:checkable attribute in an <item> element) or for an entire group, via android:checkableBehavior in a <group> element. In this example, we're marking all <items> in this <group> as checkable. The \"single\" value means that the user can only select one item at a time, within this group. The other potential values are \"none\" (the user can't check any items in the group) or \"all\" (the user can select multiple items in this group at any one time)// \n\n    <item \n\n//Creates a new menu item// \n\n          android:id=\"@+id/nav_camera\" \n\n//Assigns the menu item a unique resource ID so the app recognizes when the user selects this item in the menu// \n\n          android:icon=\"@drawable/ic_menu_camera\" \n\n//Defines what drawable to use as this item's icon// \n\n          android: /> \n\n//The text you want to display in the navigation drawer// \n\n      <item \n     ............ \n     ............ \n     ............ \n\n  </group> \n\n//This is the end of this particular group//  \n\n  <item android:> \n      <menu> \n\n//This is the start of a new group// \n\n     ............ \n     ............ \n     ............ \n\n      </menu> \n  </item> \n\n</menu> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<menu > \n\n  <group android:checkableBehavior=\"single\"> \n      <item \n          android:id=\"@+id/breakfast\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/lunch\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/dinners\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/healthy\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/lightmeals\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/vegan\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n      <item \n          android:id=\"@+id/budget\" \n          android:icon=\"@drawable/ic_local_dining\" \n          android: /> \n\n  </group> \n\n  <item \n      android:id=\"@+id/scrapbook\" \n      android:icon=\"@drawable/ic_scrapbook\" \n      android: /> \n  <item \n      android:id=\"@+id/search\" \n      android:icon=\"@drawable/ic_search\" \n      android: /> \n     ............ \n     ............ \n     ............ \n\n</menu> \n\n```", "```java\n<string name=\"sResults\">Search Results...</string>) \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n  android:layout_width=\"match_parent\" \n  android:layout_height=\"match_parent\" \n  android:orientation=\"vertical\" > \n\n  <TextView \n      android:id=\"@+id/textview\" \n      android:text=\"@string/sResults\" \n      android:textSize=\"30dp\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"wrap_content\" \n      android:paddingTop=\"10dp\" \n      android:paddingLeft=\"10dp\"/> \n\n  <ListView \n      android:id=\"@+id/listview\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n      /> \n\n</LinearLayout> \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n  android:layout_width=\"match_parent\" \n  android:layout_height=\"match_parent\" \n  android:orientation=\"horizontal\"  > \n\n  <ImageView \n      android:id=\"@+id/images\" \n      android:layout_width=\"250dp\" \n      android:layout_height=\"150dp\" \n      android:paddingTop=\"10dp\" \n      android:paddingRight=\"5dp\" \n      android:paddingBottom=\"10dp\"  /> \n\n      <TextView \n          android:id=\"@+id/recipe\" \n          android:layout_width=\"wrap_content\" \n          android:layout_height=\"wrap_content\" \n          android:textSize=\"20dp\" \n          android:paddingRight=\"10dp\"/> \n\n  </LinearLayout> \n\n```", "```java\npackage com.example.jessica.myapplication; \n\nimport java.util.ArrayList; \nimport java.util.HashMap; \nimport java.util.List; \n\nimport android.app.Activity; \nimport android.widget.ListView; \nimport android.os.Bundle; \nimport android.widget.SimpleAdapter; \n\npublic class MainActivity extends Activity { \n\n    String[] recipes = new String[] { \n\n//Create a recipes array// \n\n          \"Easy veggie chilli\", \n          \"Deep fried calamari with garlic and lemon mayo\", \n          \"Best-ever chocolate brownies\", \n          \"Everyday fish pie with cheesy sauce\", \n          \"Seared tuna with stir-fried veggies\", \n          \"American style blueberry pancakes with strawberry and banana\", \n          \"Full English fry up\", \n          \"Kashmiri curry\", \n          \"Red berry pancakes with cream\", \n          \"Sticky sweet and sour prawns\", \n          \"Surf and turf for two\" \n  }; \n\n//Add all the preceding titles to the recipes array//  \n\n  int[] images = new int[]{ \n\n//Create an images array//  \n\n          R.drawable.chilli, \n          R.drawable.calamari, \n          R.drawable.brownies, \n          R.drawable.pie, \n          R.drawable.tuna, \n          R.drawable.blueberrypancake, \n          R.drawable.fryup, \n          R.drawable.kashmiricurry, \n          R.drawable.redberrypancake, \n          R.drawable.sweetandsourprawns, \n          R.drawable.surfandturf \n  }; \n\n//Add all the preceding image files to the images array//  \n\n  @Override \n  public void onCreate(Bundle savedInstanceState) { \n      super.onCreate(savedInstanceState); \n      setContentView(R.layout.activity_main); \n\n      List<HashMap<String,String>> aList = new\n      ArrayList<HashMap<String,String>>(); \n\n//Create an array list, called aList//  \n\n      for(int i=0;i<10;i++){ \n          HashMap<String, String> myMap = new\n          HashMap<String,String>(); \n          myMap.put(\"recipe\", recipes[i]); \n          myMap.put(\"images\", Integer.toString(images[i]) ); \n          aList.add(myMap); \n      } \n\n//Add recipes and images to aList//  \n\n      String[] from = { \"images\",\"recipe\", }; \n\n      int[] to = { R.id.images,R.id.recipe}; \n\n//Use the ImageView and TextView from simple_list_layout.xm// \n\n      SimpleAdapter adapter = new\n      SimpleAdapter(getBaseContext(), aList,\n      R.layout.simple_list_layout, from, to); \n\n//Create a new SimpleAdapter and feed it three parameters. The first parameter is the context reference (getBaseContext); the second is the collection of data we want to display (aList), and the third is the layout we want to use for each row (simple_layout_list.xml)// \n\n      ListView listView = ( ListView )\n      findViewById(R.id.listview); \n\n//Get the ListView object// \n\n       listView.setAdapter(adapter); \n\n//Assign the adapter to the ListView object// \n\n  } \n} \n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<resources> \n\n//<Resources> must always be the root node of your styles.xml file // \n\n   <style name=\"FooterFont\" parent=\"@android:style/FooterText\"> \n\n//Create a new style and assign it a name. In this example, I'm using FooterFont// \n\n       <item name=\"android:layout_width\">match_parent</item> \n\n//Add each property to your style using the <item> element//  \n\n       <item name=\"android:layout_height\">wrap_content</item> \n\n//The value of each <item> can be a string, a color, a reference to another resource, or another valid value. You'll find a few examples of possible <item> elements below// \n\n      <item name=\"android:layout_width\">wrap_content</item> \n       <item name=\"android:textColor\">#ffff0000</item> \n      <item name=\"android:textSize\">12sp</item> \n       <item name=\"android:typeface\">sans_serif</item> \n\n   </style> \n\n//End of the FooterFont style// \n\n<style name=\"CodeFont\" parent=\"@android:style/TextAppearance.Medium\"> \n\n//Start of a new CodeFont style// \n\n     ............ \n     ............ \n     ............ \n\n//This is where you'd define the CodeFont attributes// \n\n   </style> \n\n//End of the CodeFont style// \n\n</resources> \n\n```", "```java\n<TextView \n   style=\"@style/CodeFont\" \n   android:text=\"@string/helloworld\" /> \n\n```", "```java\n<style name=\"MyAppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"> \n\n//Creates a new style/theme called MyAppTheme that inherits from the Theme.AppCompat.Light.DarkActionBar platform theme. MyAppTheme will inherit all the characteristics of its parent//  \n\n  <item name=\"colorPrimary\">@color/colorPrimary</item> \n\n  <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item> \n  <item name=\"colorAccent\">@color/colorAccent</item> \n\n//Define whatever properties you want to add or change. Here, I'm overriding the parent theme's colorPrimary, colorPrimaryDark and colorAccent values with values I've defined in my project's colors.xml file//  \n\n</style> \n\n```", "```java\n   <style name=\"FooterText.Large\"> \n\n//Notice there's no parent attribute in the <style> tag. Instead, I'm using the name of the original style (FooterText), and affixing the name of the new style (Large)//  \n\n           <item name=\"android:textSize\">20sp</item> \n   </style> \n\n```", "```java\n<style name=\"MyTheme\" parent=\"android:Theme.Light\"> \n\n//Create a new style called MyTheme, that inherits from the android:Theme.Light platform theme// \n\n   <item\n name=\"android:windowBackground\">@color/custom_theme_color</item> \n\n//This is where you add your own attributes, or override existing attributes//  \n\n   <item name=\"android:colorBackground\">@color/custom_theme_color</item> \n\n</style> \n\n```", "```java\n<activity android:theme=\"@style/CustomTheme\"> \n\n```", "```java\n<application android:theme=\"@style/CustomTheme\"> \n\n```"]