- en: Chapter 9. Adding Audio to Our Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the previous chapter, we learned about artificial intelligence. We learned
    theory about finite state machines and fuzzy logic. We applied these elements
    to our game. We also implemented the remaining gameplay elements into our game.
    In this chapter, we are going to add music and sound to our game. Audio in itself
    is an important aspect to any game as it is part of the player''s experience.
    Try to play your favorite game without music and you''ll find yourself having
    a different experience when playing the game.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading sound and music files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating our own sound effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's add music and sound to our game, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Finding music and sound
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a game, the developer is usually not a jack of all trades and
    may have a hard time when looking for sound and music. Apple's own GarageBand
    provides an easy way to create music using predefined loops or even one's own
    instruments. Another possibility is to find talented people who can help to create
    audio files. One of the places to look out for are the TIGSource forums—a place
    for independent game developers—which has a portfolio section at [http://forums.tigsource.com/index.php?board=43.0](http://forums.tigsource.com/index.php?board=43.0)
    and a section that offers paid work at [http://forums.tigsource.com/index.php?board=40.0](http://forums.tigsource.com/index.php?board=40.0).
  prefs: []
  type: TYPE_NORMAL
- en: Generating sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Bxfr** is a procedural sound generator which is often used in game jams.
    It is available online at [http://www.bfxr.net/](http://www.bfxr.net/); the standalone
    versions for Windows and Mac OS X can be downloaded from this link as well. Its
    purpose is to generate 8-bit sound effects in just a few clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating sound effects](img/1509OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First of all, we need to select a type, which we can then modify with several
    sliders such as the frequency or the length of the sound.
  prefs: []
  type: TYPE_NORMAL
- en: Once we are done, we can export the sound effect using the **Export Wav** button.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about audio formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sparrow allows all audio files supported by iOS to be loaded. Some audio codecs
    support hardware-assisted decoding, while others don't.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS devices contain specialized hardware that can handle the encoding and
    decoding of certain audio formats (for example, AIFC), thereby freeing up the
    CPU that would otherwise be required to handle these expensive operations. The
    drawback of the hardware-assisted approach is that only one file can be handled
    at a time. For example, you can't play background music and sound effects with
    it simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about how iOS handles audio playback, take a look at Apple's
    documentation at [https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/UsingAudio/UsingAudio.html](https://developer.apple.com/library/ios/documentation/audiovideo/conceptual/multimediapg/UsingAudio/UsingAudio.html).
  prefs: []
  type: TYPE_NORMAL
- en: The best formats for audio formats in Sparrow are AIFC and CAFF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what they are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AIFC is a compressed **Audio Interchange Format** (**AIFF**) file. This is
    usually the best option for background music. There is one other thing to consider:
    if the audio playback is hardware-assisted (as it is in the case of AIFC), only
    one file can be played at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Core Audio File Format** (**CAFF**) is an uncompressed audio format. This
    format is best used for short sound effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both these formats have the lowest footprint on the CPU. If application size
    is an issue, there is an unconventional way to solve this: some devices still
    only have mono speakers, so converting audio files to mono could be a valid option
    if there are a lot of sound files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert audio files, the iOS SDK provides a command-line tool called **afconvert**.
    Assuming our audio file is called `myAudioFile.wav`, we can use the following
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convert to CAFF**: The command to convert to CAFF is `afconvert –f caff –d
    LE16 myAudioFile.wav`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convert to AIFC**: The command to convert to AIFC is `afconvert –f AIFC –d
    ima4 myAudioFile.wav`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Music and sound effects for our game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The necessary audio files are once again uploaded to our GitHub repository.
    In order to use them, download them from [https://github.com/freezedev/pirategame-assets/releases/download/0.9/Audio_09.zip](https://github.com/freezedev/pirategame-assets/releases/download/0.9/Audio_09.zip),
    extract the file, and copy the contents in our template. When copying the files
    to the project, we need to make sure that we add them to the target.
  prefs: []
  type: TYPE_NORMAL
- en: Adding audio playback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know about audio formats, we can generate sounds for ourselves if
    needed, and if we have the necessary files, we can play some audio.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the audio engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can play any sounds, we need to start the audio engine.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – getting audio files to play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to start the audio engine:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our Xcode project if it's not already open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the `Game.m` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the initializer, start the audio engine as shown; it should be one of
    the first few statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `dealloc` method that stops the audio engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we run this example in the simulator, we might see the following lines
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – getting audio files to play](img/1509OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To play any audio file, we need to start the audio engine at the start of our
    application, which in our case, is the initializer from the `Game` class.
  prefs: []
  type: TYPE_NORMAL
- en: There are different operational modes for the audio engine, which influence
    how the iPod music app will behave when we run our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the audio is muted, the game audio will be muted as well. This is the default
    operational mode; other modes include the game audio continue even when the device
    is muted or the iPod music mixes with the game audio. Take a look at what the
    latter will look like in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For more through information, take a look at the Sparrow SPAudioEngine documentation
    at [http://doc.sparrow-framework.org/v2/Classes/SPAudioEngine.html](http://doc.sparrow-framework.org/v2/Classes/SPAudioEngine.html).
  prefs: []
  type: TYPE_NORMAL
- en: When we run this example, we get some information about the audio engine in
    the console.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, the audio engine starts and stops when the game starts or stops,
    respectively. It's also a good idea to start and stop the engine if the background
    and foreground events (such as `applicationWillResignActive` and `applicationDidBecomeActive`)
    are triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Playing music in our scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the audio engine is up and running, let's play the background music.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – playing music in our scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to play background music in our scenes:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Scene.h` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an instance variable named `backgroundMusic`, which is a pointer to `SPSoundChannel`
    using the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a method called `stop` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the `Scene.m` file, define the `stop` method with an empty body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `showScene` method in the `SceneDirector.m` file to fit the following
    block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switch to `PirateCove.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the initializer, add the following lines at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `reset` method to look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the scene''s `stop` method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example and you will see the following output. We can now hear the music
    in the background.![Time for action – playing music in our scenes](img/1509OS_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we added an instance variable (`backgroundMusic`) to hold the
    background music. The `SPSound` variable holds the data of a sound file while
    `SPSoundChannel` plays the sound itself, similar to the relationship between `SPTexture`
    and `SPImage`. It is recommended that you keep a reference to `SPSoundChannel`.
    This is required if we want to stop the playback sound for any reason whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: To allow us to have background music in multiple scenes, we need to stop the
    background music from the current scene and start the music from the next scene
    because we don't want to run into any nasty side effects. These side effects are
    that the first music file will use the hardware codec and the second one will
    use software decoding, thereby heavily impacting the performance of our game.
    Both music files will play, though.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to stop the background music when we are in the scene, we can utilize
    the scene's `reset` method. Now, we wanted to do the same only when the scene
    is deactivated. We first declared the `stop` method for exactly this purpose in
    step 3 and implemented it as an empty method in the step afterwards. In the `SceneManager`
    class, we need to call the `stop` method of each scene when we are hiding the
    scene.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the initializer of the `PirateCove` scene, we created a local `SPSound`
    variable that loads the music file through our asset management system. We then
    used the `createChannel` method and saved the result in the instance variable.
    We want to loop the music endlessly, so we set the `loop` property to `YES`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 8, we updated the `reset` method to play the background music and in
    step 9, we overwrote the `stop` method and stopped the background music.
  prefs: []
  type: TYPE_NORMAL
- en: When we run this example now, we can hear the music playing in a loop.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the pirate cove scene has some background music, go ahead and give
    the battlefield some music.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a sound effect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our audio engine is up and running; we already know that it works because we
    have played some music, and now it's time to add the sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – sound effects in the pirate cove
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add sound effects to the pirate cove scene, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `PirateCove.m` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update both the `onUpdateDamage` and `onUpdateHitpoints` methods to play a
    sound effect, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the example and you will see the following output. We can now hear a sound
    if we successfully upgrade our pirate ship.![Time for action – sound effects in
    the pirate cove](img/1509OS_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside the pirate cove scene, we added a sound effect to both the `onUpdateDamage`
    and the `onUpdateHitpoints` methods. We got the powerup file through the asset
    management system and then played the sound directly. This method is useful for
    short sounds and at places where we don't need to keep a reference to manipulate
    the playback of the audio channel afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we run this example, we can hear a sound effect once we successfully
    upgrade our ship.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go ahead and add the following sound effects in the battlefield:'
  prefs: []
  type: TYPE_NORMAL
- en: When a ship is hit (the `hit` method in the `Ship` class)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a ship shoots (the `shoot` method in the `Ship` class)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a ship gets destroyed (hit points getter in the `Ship` class)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. AAC audio files offer hardware-assisted encoding.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. If `SPSound` only contains the sound data, which class should be used to
    play an audio file?
  prefs: []
  type: TYPE_NORMAL
- en: '`AVAudioSession`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SPSoundChannel`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SPAudio`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. To play any sounds at all, we need to initialize the audio engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to load and play audio files. Specifically,
    we covered data formats and the basic usage of audio in Sparrow.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our game has some audio, let's polish our game—which is the topic of
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
