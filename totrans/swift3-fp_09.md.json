["```swift\nstruct Producer {\n    let name: String\n    let address: String\n}\n\nclass Product {\n    var name: String = \"\"\n    var price: Double = 0.0\n    var quantity: Int = 0\n    var producer: Producer\n\n    init(name: String,\n        price: Double,\n     quantity: Int,\n     producer: Producer) {\n\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n        self.producer = producer\n    }\n}\n\n```", "```swift\nlet producer = Producer(name: \"ABC\",\n                     address: \"Toronto, Ontario, Canada\")\n\nvar bananas = Product(name: \"Banana\",\n                     price: 0.79,\n                  quantity: 2,\n                  producer: producer)\n\nvar oranges = Product(name: \"Orange\",\n                     price: 2.99,\n                  quantity: 1,\n                  producer: producer)\n\nvar apples = Product(name: \"Apple\",\n                    price: 3.99,\n                 quantity: 3,\n                 producer: producer)\n\nvar products = [bananas, oranges, apples]\n\n```", "```swift\nclass ProductTracker {\n    private var products: [Product] = []\n    private var lastModified: NSDate?\n\n    func addNewProduct(item: Product) -> (date: NSDate,\n                                  productCount: Int) {\n        products.append(item)\n        lastModified = NSDate()\n        return (date: lastModified!, productCount: products.count)\n    }\n\n    func lastModifiedDate() -> NSDate? {\n        return lastModified\n    }\n\n    func productList() -> [Product] {\n        return products\n    }\n}\n\n```", "```swift\nlet numbers: [Int] = [1, 2, 3, 4, 5]\nlet sumOfEvens = numbers.reduce(0){$0 + (($1 % 2 == 0) ? $1 : 0) }\n\n```", "```swift\nprint(numbers) // [1, 2, 3, 4, 5] \nprint(sumOfEvens) // 6\n\n```", "```swift\nfunc sendRequest() {\n    let sessionConfig = URLSessionConfiguration.default()\n    let session = URLSession(configuration: sessionConfig,\n                                  delegate: nil,\n                             delegateQueue: nil)\n\n    var url: NSURL?\n    var request: URLRequest\n\n    /* First request block starts: */\n    url = URL(string: \"https://httpbin.org/get\")\n    request = URLRequest(url: url! as URL)\n    request.httpMethod = \"GET\"\n\n    let task = session.dataTask(with: request,\n                   completionHandler: {\n\n        (data: Data?, response: URLResponse?, error: NSError?) -> Void in\n        if (error == nil) {\n            let statusCode = (response as! HTTPURLResponse).statusCode\n            print(\"URL Session Task Succeeded: HTTP \\(statusCode)\")\n        } else {\n            print(\"URL Session Task Failed: %@\",   error!.localizedDescription);\n        }\n        })\n    task.resume()\n    /* First request block ends */\n\n    /* Second request block starts */\n    url = URL(string: \"http://requestb.in/1g4pzn21\") // replace with\n      a new requestb.in\n    request = URLRequest(url: url! as URL)\n\n    let secondTask = session.dataTask(with: request,\n                         completionHandler: {\n\n        (data: Data?, response: URLResponse?, error: NSError?) -> Void in\n        if (error == nil) {\n            let statusCode = (response as! HTTPURLResponse).statusCode\n            print(\"URL Session Task Succeeded: HTTP \\(statusCode)\")\n        } else {\n            print(\"URL Session Task Failed: %@\",\n              error!.localizedDescription);\n        }\n    })\n    secondTask.resume()\n}\n\n```", "```swift\nurl = URL(string: \"https://httpbin.org/get\")\n      request = URLRequest(url: url! as URL)\n      request.httpMethod = \"GET\"\n```", "```swift\nstruct FunctionalProduct {\n    let name: String\n    let price: Double\n    let quantity: Int\n    let producer: Producer\n}\n\n```", "```swift\nstruct FunctionalProductTracker {\n    let products: [FunctionalProduct]\n    let lastModified: NSDate\n\n    func addNewProduct(item: FunctionalProduct) -> (date: NSDate,\n                                                products:\n                                                  [FunctionalProduct]) {\n\n        let newProducts = self.products + [item]\n        return (date: NSDate(), products: newProducts)\n    }\n}\n\n```", "```swift\nlet mexicanBananas = FunctionalProduct(name: bananas.name,\n                                      price: bananas.price,\n                                   quantity: bananas.quantity,\n                                   producer: Producer(name: \"XYZ\",\n                                                   address: \"New Mexico,\n                                                     Mexico\"))\n```", "```swift\ninit(products: [FunctionalProduct],\n    lastModified: NSDate) {\n\n    self.products = products\n    self.lastModified = lastModified\n    }\n\n    init(productTracker: FunctionalProductTracker,\n               products: [FunctionalProduct]? = nil,\n           lastModified: NSDate? = nil) {\n\n    self.products = products ?? productTracker.products\n    self.lastModified = lastModified ?? productTracker.lastModified\n }\n\n```", "```swift\n  func addNewProduct(item: FunctionalProduct) -> FunctionalProductTracker {\n\n    return FunctionalProductTracker(productTracker: self,\n                                          products: self.products + [item])\n}\n\n```", "```swift\nstruct Lens<Whole, Part> {\n    let get: Whole -> Part\n    let set: (Part, Whole) -> Whole\n}\n\n```", "```swift\nlet prodProducerLens: Lens<FunctionalProduct, Producer> =\n  Lens(get: { $0.producer},\n       set: { FunctionalProduct(name: $1.name,\n                               price: $1.price,\n                            quantity: $1.quantity,\n                            producer: $0)})\n```", "```swift\nlet mexicanBananas2 = prodProducerLens.set(Producer(name: \"QAZ\",\n                                                 address: \"Yucatan,\n                                                   Mexico\"),\n                                           mexicanBananas)\n```", "```swift\nlet chineeseProducer = Producer(name: \"KGJ\",\n                             address: \"Beijing, China\")\n\n```", "```swift\nlet producerAddressLens: Lens<Producer, String> =\n  Lens(get: { $0.address },\n       set: { Producer(name: $1.name,\n                    address: $0)})\n\nlet chineeseProducer2 = producerAddressLens.set(\"Shanghai, China\",\n  chineeseProducer)\n```", "```swift\nlet chineseBananaProducer = prodProducerLens.set(\n  producerAddressLens.set(\"Shanghai, China\", chineseProducer), \n  mexicanBananas2)\n```", "```swift\ninfix operator >>> { associativity right precedence 100 }\n\nfunc >>><A,B,C>(l: Lens<A,B>, r: Lens<B,C>) -> Lens<A,C> {\n    return Lens(get: { r.get(l.get($0)) },\n                set: { (c, a) in\n                    l.set(r.set(c,l.get(a)), a)\n    })\n}\n\n```", "```swift\nlet prodProducerAddress = prodProducerLens >>> producerAddressLens\nlet mexicanBananaProducerAddress = prodProducerAddress.get(mexicanBananas2)\nlet newProducer = prodProducerAddress.set(\"Acupulco, Mexico\",\n  mexicanBananas2)\nprint(newProducer)\n\n```", "```swift\nFunctionalProduct(name: \"Banana\",\n                  price: 0.79,\n                  quantity: 2,\n                  producer: Producer(name: \"QAZ\", address: \"Acupulco, Mexico\"))\n```"]