["```kt\n@Dao\n```", "```kt\ninterface MovieDao {\n```", "```kt\n    @Query(\"SELECT * FROM movies\")\n```", "```kt\n    fun getMovies(): List<Movie>\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\n@Dao\n```", "```kt\ninterface MovieDao {\n```", "```kt\n    @Query(\"SELECT * FROM movies\")\n```", "```kt\n    fun getMovies(): Flow<List<Movie>>\n```", "```kt\n    ...\n```", "```kt\n}\n```", "```kt\ndependencies {\n```", "```kt\n    ...\n```", "```kt\n    implementation ‘androidx.lifecycle:lifecycle-livedata-\n```", "```kt\n      ktx:2.2.0'\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            viewModel.fetchMovies().collect { movie ->\n```", "```kt\n                Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchMovies(): Flow<Movie> {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            viewModel.fetchMovies()\n```", "```kt\n                .flowOn(Dispatchers.IO)\n```", "```kt\n                .collect { movie ->\n```", "```kt\n                    Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            viewModel.fetchMovies()\n```", "```kt\n                .flowOn(Dispatchers.IO)\n```", "```kt\n                .map { ... }\n```", "```kt\n                .collect { movie ->\n```", "```kt\n                    Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\ndependencies {\n```", "```kt\n    ...    \n```", "```kt\n    implementation ‘androidx.lifecycle:lifecycle-runtime-\n```", "```kt\n      ktx:2.4.1\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                viewModel.fetchMovies()\n```", "```kt\n                    .collect { movie ->\n```", "```kt\n                        Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n                    }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              launch {\n```", "```kt\n                 viewModel.fetchMovies().collect { movie ->\n```", "```kt\n                      Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n                    }\n```", "```kt\n                }\n```", "```kt\n              launch {\n```", "```kt\n                  viewModel.fetchTVShows.collect { show ->\n```", "```kt\n                      Log.d(\"tv shows\", \"${show.title}\")\n```", "```kt\n                    }\n```", "```kt\n                }\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            viewModel.fetchMovies()          \n```", "```kt\n                .flowWithLifecycle(lifecycle,\n```", "```kt\n                  Lifecycle.State.STARTED)\n```", "```kt\n                .collect { movie ->\n```", "```kt\n                    Log.d(\"movies\", \"${movie.title}\")\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchMovieTitles(): Flow<String> = flow {\n```", "```kt\n        val movies = fetchMoviesFromNetwork()\n```", "```kt\n        movies.forEach { movie -> \n```", "```kt\n            emit(movie.title)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n    private fun fetchMoviesFromNetwork(): List<Movie> {\n```", "```kt\n         …\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchTop3Titles(): Flow<List<Movie>> {\n```", "```kt\n        val movies = fetchMoviesFromNetwork().sortedBy {\n```", "```kt\n            it.popularity }\n```", "```kt\n        return flowOf(movies[0].title, \n```", "```kt\n            movies[1].title, \n```", "```kt\n            movies[2].title)\n```", "```kt\n    }\n```", "```kt\n    private fun fetchMoviesFromNetwork(): List<Movie> {\n```", "```kt\n        …\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    private fun fetchMovieIds(): Flow<Int> {\n```", "```kt\n        val movies: List<Movie> = fetchMoviesFromNetwork()\n```", "```kt\n        return movies.map { it.id }.asFlow()\n```", "```kt\n    }\n```", "```kt\n    private fun fetchMoviesFromNetwork(): List<Movie> {\n```", "```kt\n        …\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                val topMovie =\n```", "```kt\n                  viewModel.fetchMovies().firstOrNull()\n```", "```kt\n                displayMovie(topMovie)\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchTopMovies(): Flow<Movie> {\n```", "```kt\n        return fetchMoviesFlow()\n```", "```kt\n            .transform {\n```", "```kt\n                if (it.popularity > 0.5f) emit(it)\n```", "```kt\n            }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                viewModel.fetchMovies()\n```", "```kt\n                    .buffer()\n```", "```kt\n                    .collect { movie ->\n```", "```kt\n                        processMovie(movie)\n```", "```kt\n                    }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                viewModel.getTopMovie()\n```", "```kt\n                    .conflate()\n```", "```kt\n                    .collect { movie ->\n```", "```kt\n                        processMovie(movie)\n```", "```kt\n                    }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                viewModel.getTopMovie()\n```", "```kt\n                    .collectLatest { movie ->\n```", "```kt\n                        displayMovie(movie)\n```", "```kt\n                    }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                merge(viewModel.fetchMoviesFromDb(),\n```", "```kt\n                  viewModel.fetchMoviesFromNetwork())\n```", "```kt\n                    .collect { movie ->\n```", "```kt\n                        processMovie(movie)\n```", "```kt\n                    }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                val userFlow = viewModel.getUsers()\n```", "```kt\n                val taskFlow = viewModel.getTasks()\n```", "```kt\n                userFlow.zip(taskFlow) { user, task ->\n```", "```kt\n                    AssignedTask(user, task)\n```", "```kt\n                }.collect { assignedTask ->\n```", "```kt\n                    displayAssignedTask(assignedTask)\n```", "```kt\n                }  \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                val yourMesssage =\n```", "```kt\n                  viewModel.getLastMessageSent()\n```", "```kt\n                val friendMessage =\n```", "```kt\n                  viewModel.getLastMessageReceived()\n```", "```kt\n                userFlow.combine(taskFlow) { yourMesssage,\n```", "```kt\n                  friendMessage ->\n```", "```kt\n                    Conversation(yourMessage,\n```", "```kt\n                      friendMessage)\n```", "```kt\n                }.collect { conversation ->\n```", "```kt\n                    displayConversation(conversation)\n```", "```kt\n                }  \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    private val _message = MutableSharedFlow<String>()\n```", "```kt\n    val movies: SharedFlow<String> =\n```", "```kt\n      _message.asSharedFlow()\n```", "```kt\n    ...\n```", "```kt\n    fun onError(): Flow<List<Movie>> {\n```", "```kt\n        ...\n```", "```kt\n        _message.emit(\"An error was encountered\")\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    private val _movies =\n```", "```kt\n      MutableStateFlow(emptyList<Movie>())\n```", "```kt\n    val movies: StateFlow<List<Movie>> = _movies\n```", "```kt\n    ...\n```", "```kt\n    fun fetchMovies(): Flow<List<Movie>> {\n```", "```kt\n        ...\n```", "```kt\n        _movies.value = movieRepository.fetchMovies()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n    ...\n```", "```kt\n    override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n        ...\n```", "```kt\n        lifecycleScope.launch {\n```", "```kt\n            repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n                viewModel.movies.collect { movies ->\n```", "```kt\n                    displayMovies(movies)\n```", "```kt\n                }   \n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n    fun fetchMoviesFlow(): Flow<List<Movie>> {\n        return flow {\n            emit(movieService.getMovies(apiKey).results)\n        }.flowOn(Dispatchers.IO)\n    }\n    ```", "```kt\n    private val _movies =\n      MutableStateFlow(emptyList<Movie>())\n    val movies: StateFlow<List<Movie>> = _movies\n    ```", "```kt\n    private val _error = MutableStateFlow(\"\")\n    val error: StateFlow<String> = _error\n    ```", "```kt\n    private val _loading = MutableStateFlow(true)\n    val loading: StateFlow<String> = _loading\n    ```", "```kt\n    fun fetchMovies() {\n        _loading.value = true\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .collect {\n                    _movies.value = it\n                    _loading.value = false\n                }\n        }\n    }\n    ```", "```kt\n    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'\n    ```", "```kt\n    lifecycleScope.launch {\n       repeatOnLifecycle(Lifecycle.State.STARTED) {\n           launch {\n               movieViewModel.movies.collect { movies ->\n                   movieAdapter.addMovies(movies)\n               }\n           }\n           launch {\n               movieViewModel.error.collect { error ->\n                   if (error.isNotEmpty())\n                     Snackbar.make(recyclerView, error, \n                     Snackbar.LENGTH_LONG).show()\n               }\n           }\n           launch {\n               movieViewModel.loading.collect { loading ->\n                   progressBar.isVisible = loading\n               }\n           }\n       }\n    }\n    ```"]