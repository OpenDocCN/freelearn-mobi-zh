["```swift\n#include <library_1.h>\n#include <library_2.h>\n\n#define SOMETHING A_VALUE\n\n// Function prototypes\n\nvoid callback_1();\n\n// Global variables\n\nboolean  var_1;\n\n// Called only once at power on or reset\n\nvoid setup() {\n\n...\n}\n\n// Called over and over again\n\nvoid loop() {\n...\n}\n\n// Callbacks \n\nvoid callback_1() {\n...\n}\n\n// Additional functions\n\nvoid function_1() {\n...\n}\n```", "```swift\nOneWire oneWire(ONE_WIRE_BUS);\nDallasTemperature sensors(&oneWire);\n```", "```swift\nDeviceAddress temperatureSensorAddress;\n```", "```swift\nAdafruit_BLE_UART uart = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n```", "```swift\nServo myservo;\n```", "```swift\nboolean  iOSConnected;\nboolean  manuallyLocked;\n```", "```swift\nSerial.begin(9600);\nwhile (!Serial); // Leonardo/Micro should wait for serial init\n```", "```swift\nsensors.begin();\n```", "```swift\nif (!sensors.getAddress(temperatureSensorAddress, 0)) \n    Serial.println(\"Unable to find address for Device 0\");\n```", "```swift\nsensors.setResolution(temperatureSensorAddress, 9);\n```", "```swift\nmyservo.attach(SERVOPIN);\n```", "```swift\npinMode(PHOTORESISTORPIN, INPUT);\npinMode(SWITCHPIN, INPUT);\n```", "```swift\nuart.setACIcallback(aciCallback);\n```", "```swift\nuart.setRXcallback(rxCallback);\n```", "```swift\nunsigned int light = analogRead(PHOTORESISTORPIN);\n```", "```swift\nboolean lacthIsOpened = digitalRead(SWITCHPIN);\n```", "```swift\nsensors.requestTemperatures();\nfloat temperature = sensors.getTempC(temperatureSensorAddress);\n```", "```swift\nif (!manuallyLocked) {\n\n    if (aboveThreshold(light, LIGHT_THRESHOLD, 30) && betweenThresholds(temperature, LOW_TEMPERATURE_THRESHOLD, HIGH_TEMPERATURE_THRESHOLD)) {\n      Serial.println(\"Unlocked\");\n      myservo.write(UNLOCKED_POSITION);\n    }  \n\n    if (belowThreshold(light, LIGHT_THRESHOLD, 30) || !betweenThresholds(temperature, LOW_TEMPERATURE_THRESHOLD, HIGH_TEMPERATURE_THRESHOLD)) {\n      Serial.println(\"Locked\");\n      myservo.write(LOCKED_POSITION);\n    }\n\n  }\n```", "```swift\nmyservo.write(UNLOCKED_POSITION);\n```", "```swift\nmyservo.write(LOCKED_POSITION);\n```", "```swift\nvoid rxCallback(uint8_t *buffer, uint8_t len) {\n\n  if (len > 0) {\n\n    // Data received from the iOS device\n    // Received only one byte which has value 48 (character 0) or 49 (character 1)\n\n    manuallyLocked = buffer[0] - '0';\n    if (manuallyLocked) {\n      Serial.println(\"Manual Lock\");\n      myservo.write(LOCKED_POSITION);\n    }\n\n  }\n}\n```", "```swift\ns:latch_position;t:temperature\n```", "```swift\nif (iOSConnected) {\n\n    // When the iOS device is connected some data are transferred to it\n\n    char buffer[32];\n    char tempBuffer[6];\n\n    // Data sent to iOS\n    // s:latch_position;t:temperature\n\n    dtostrf(temperature, 0, 2, tempBuffer);\n\n    snprintf(buffer, 32, \"s:%d;t:%s\", lacthIsOpened, tempBuffer);\n    uart.write((uint8_t *)buffer, strlen(buffer));\n  }\n```", "```swift\nvoid aciCallback(aci_evt_opcode_t event) {\n\n  if (event == ACI_EVT_DEVICE_STARTED)\n    Serial.println(F(\"Advertising started\"));\n\n  if (event == ACI_EVT_CONNECTED) {\n\n    iOSConnected = true;\n\n    char buffer[16];\n    snprintf(buffer, 16, \"m:%d\", manuallyLocked);\n    uart.write((uint8_t *)buffer, strlen(buffer));\n  }\n\n  if (event == ACI_EVT_DISCONNECTED) {\n    iOSConnected = false;\n  }\n}\n```", "```swift\n#define LOW_TEMPERATURE_THRESHOLD    2\n#define HIGH_TEMPERATURE_THRESHOLD   33\n```", "```swift\n#define LIGHT_THRESHOLD             700\n```", "```swift\n#define LOCKED_POSITION             180\n#define UNLOCKED_POSITION            65\n```", "```swift\n@interface PetDoorLockerViewController ()\n\n@property (strong, nonatomic) IBOutlet UIView       *doorStatus;\n@property (strong, nonatomic) IBOutlet UILabel      *temperature;\n@property (strong, nonatomic) IBOutlet UISwitch     *manualLockSwitch;\n\n@end\n```", "```swift\n@interface BLEConnectionViewController ()\n\n@property (strong, nonatomic) IBOutlet UILabel  *deviceUUIDLabel;\n\n@property (strong, nonatomic) CBCentralManager  *centralManager;\n\n@end\n```", "```swift\n-(void)viewDidAppear:(BOOL)animated {\n\n    _centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];\n}\n```", "```swift\n#import <UIKit/UIKit.h>\n#import <CoreBluetooth/CoreBluetooth.h>\n\n@interface BLEConnectionViewController : UIViewController <CBCentralManagerDelegate>\n\n@end\n```", "```swift\n    - (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNumber *)RSSI {\n\n        [_scanningTimer invalidate];\n        _deviceUUIDLabel.text = peripheral.identifier.UUIDString;\n\n        NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n\n        [userDefaults setObject:peripheral.identifier.UUIDString\n                         forKey:@\"PetDoorLockerDevice\"];\n\n        [userDefaults synchronize];\n    }\n    ```", "```swift\n_deviceUUIDLabel.text = peripheral.identifier.UUIDString;\n```", "```swift\n[_scanningTimer invalidate];\n```", "```swift\n- (IBAction)startScanning:(UIButton *)sender {\n\n    if (_centralManager.state != CBCentralManagerStatePoweredOn)\n        return;\n\n     [_centralManager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:NRF8001BB_SERVICE_UUID]] options:nil];\n\n    _deviceUUIDLabel.text = @\"Scanning...\";\n\n    _scanningTimer = [NSTimer scheduledTimerWithTimeInterval:(float)5.0 target:self selector:@selector(scanningTimedOut:) userInfo:nil repeats:NO];\n}\n```", "```swift\n@interface BLEConnectionViewController ()\n\n@property (strong, nonatomic) IBOutlet UILabel      *deviceUUIDLabel;\n\n@property (strong, nonatomic) CBCentralManager      *centralManager;\n@property (strong, nonatomic) NSTimer               *scanningTimer;\n\n@end\n```", "```swift\n_scanningTimer = [NSTimer scheduledTimerWithTimeInterval:(float)5.0 target:self selector:@selector(scanningTimedOut:) userInfo:nil repeats:NO];\n```", "```swift\n-(void) scanningTimedOut:(NSTimer *)timer {\n\n    [_centralManager stopScan];\n    _deviceUUIDLabel.text = @\"No device in range\";\n}\n```", "```swift\n- (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary *)advertisementData RSSI:(NSNumber *)RSSI {\n\n    [_scanningTimer invalidate];\n    _deviceUUIDLabel.text = peripheral.identifier.UUIDString;\n\n    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];\n\n    [userDefaults setObject:peripheral.identifier.UUIDString\n                     forKey:@\"PetDoorLockerDevice\"];\n\n    [userDefaults synchronize];\n}\n```", "```swift\n#define NRF8001BB_SERVICE_UUID                      @\"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\"\n#define NRF8001BB_CHAR_TX_UUID                      @\"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\"\n#define NRF8001BB_CHAR_RX_UUID                      @\"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\"\n\n@interface PetDoorLockerViewController ()\n\n…\n\n@property (strong, nonatomic) CBCentralManager      *centralManager;\n@property (strong, nonatomic) CBPeripheral          *arduinoDevice;\n@property (strong, nonatomic) CBCharacteristic      *sendCharacteristic;\n\n@end\n```", "```swift\n- (void)centralManagerDidUpdateState:(CBCentralManager *)central {\n\n    NSLog(@\"Status of CoreBluetooth central manager changed %ld (%s)\", central.state, [self centralManagerStateToString:central.state]);\n\n    if (central.state == CBCentralManagerStatePoweredOn) {\n\n        [self connect];\n    }\n}\n```", "```swift\n-(void)viewDidAppear:(BOOL)animated {\n\n    [super viewDidAppear:animated];\n\n    [self connect];\n}\n```", "```swift\n-(void)viewDidDisappear:(BOOL)animated {\n\n    [super viewDidDisappear:animated];\n\n    [self disconnect];\n}\n```", "```swift\n-(void)connect {\n\n    if (_arduinoDevice == nil) {\n\n        // We need to retrieve the Arduino peripheral\n\n        NSString *deviceIdentifier = [[NSUserDefaults standardUserDefaults] objectForKey:@\"PetDoorLockerDevice\"];\n\n        if (deviceIdentifier!=nil) {\n\n            NSArray *devices = [_centralManager retrievePeripheralsWithIdentifiers:@[[CBUUID UUIDWithString:deviceIdentifier]]];\n            _arduinoDevice = devices[0];\n _arduinoDevice.delegate = self;\n        }\n        else {\n\n            …\n            …\n\n            return;\n        }\n    }\n\n    [_centralManager connectPeripheral:_arduinoDevice options:nil];\n}\n```", "```swift\n- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {\n\n    [peripheral discoverServices:@[[CBUUID UUIDWithString:NRF8001BB_SERVICE_UUID]]];\n\n}\n```", "```swift\n- (void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSError *)error {\n\n    …\n\n    for (int i=0; i < peripheral.services.count; i++) {\n\n        CBService *s = [peripheral.services objectAtIndex:i];\n        [peripheral discoverCharacteristics:nil forService:s];\n    }\n}\n```", "```swift\n[peripheral setNotifyValue:YES forCharacteristic:characteristic];\n```", "```swift\n-(void)dataReceived:(NSString *)content {\n\n    // Messages has the following formats:\n    //\n    //  1) m:0|1\n    //\n    //  2) s:0|1;t:temperature\n\n    NSArray *messages = [content componentsSeparatedByString:@\";\"];\n\n    for (int i=0; i<messages.count; i++) {\n\n        NSArray *components = [messages[i] componentsSeparatedByString:@\":\"];\n\n        NSString *command = components[0];\n        NSString *value   = components[1];\n\n        if ([command isEqualToString:@\"m\"]) {\n            _manualLockSwitch.on = [value boolValue];\n        }\n\n        if ([command isEqualToString:@\"s\"]) {\n\n            BOOL doorUnlocked = [value boolValue];\n\n            if (doorUnlocked) {\n\n                _doorStatus.backgroundColor = [UIColor greenColor];\n            }\n            else {\n\n                _doorStatus.backgroundColor = [UIColor redColor];\n            }\n        }\n\n        if ([command isEqualToString:@\"t\"]) {\n            _temperature.text = value;\n        }\n    }\n}\n```", "```swift\n_manualLockSwitch.on = [value boolValue];\n```", "```swift\nBOOL doorUnlocked = [value boolValue];\n\nif (doorUnlocked) {\n\n    _doorStatus.backgroundColor = [UIColor greenColor];\n}\nelse {\n\n    _doorStatus.backgroundColor = [UIColor redColor];\n}\n```", "```swift\nif ([command isEqualToString:@\"t\"]) {\n    _temperature.text = value;\n}\n```", "```swift\n- (IBAction)switchChanged:(UISwitch *)sender {\n\n    NSData* data;\n\n    if (sender.on)\n        data=[@\"1\" dataUsingEncoding:NSUTF8StringEncoding];\n    else\n        data=[@\"0\" dataUsingEncoding:NSUTF8StringEncoding];\n\n    [_arduinoDevice writeValue:data forCharacteristic:_sendCharacteristic type:CBCharacteristicWriteWithoutResponse];\n\n}\n```", "```swift\n-(void)connect;\n-(void)disconnect;\n```", "```swift\n-(void)disconnect {\n\n    if (_arduinoDevice != nil) {\n        [_centralManager cancelPeripheralConnection:_arduinoDevice];\n        _doorStatus.backgroundColor = [UIColor lightGrayColor];\n    }\n}\n```", "```swift\n- (IBAction)reconnect:(UIButton *)sender {\n\n    [self disconnect];\n    [self connect];\n}\n```", "```swift\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n\n    UITabBarController *tabController = (UITabBarController *)_window.rootViewController;\n    PetDoorLockerViewController *petDorLockerController = tabController.viewControllers[0];\n\n    [petDorLockerController disconnect];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n\n    UITabBarController *tabController = (UITabBarController *)_window.rootViewController;\n    PetDoorLockerViewController *petDorLockerController = tabController.viewControllers[0];\n\n    [petDorLockerController connect];\n}\n```"]