["```\nvar selectedRestaurantID:Int?\n```", "```\n@IBAction func onSaveTapped(_ sender: Any) {\n\n  var item = ReviewItem()\n  item.name = tfName.text\n  item.customerReview = tvReview.text\n  item.restaurantID = selectedRestaurantID\n  item.rating = Float(ratingView.rating)\n  let manager = CoreDataManager()\n  manager.addReview(item)\n  dismiss(animated: true, completion: nil)\n}\n```", "```\nvar restaurantID:String?\n```", "```\ncase restaurantID = \"id\"\n```", "```\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n   if let identifier = segue.identifier {\n         switch identifier {\n         case Segue.showReview.rawValue:\n               showReview(segue: segue)\n         default:\n               print(\"Segue not added\")\n         }\n   }\n}\n```", "```\nfunc showReview(segue:UIStoryboardSegue) {\n    guard let navController = segue.destination as? UINavigationController,\n        let viewController = navController.topViewController as? ReviewFormViewController else {\n            return\n    }\n    viewController.selectedRestaurantID = selectedRestaurant?.restaurantID\n}\n```", "```\nprivate extension ReviewFormViewController {\n    @IBAction func onSaveTapped(_ sender: Any) {\n        var item = ReviewItem()\n        item.name = tfName.text\n        item.customerReview = tvReview.text\n        item.restaurantID = selectedRestaurantID\n        item.rating = Float(ratingView.rating)\n        let manager = CoreDataManager()\n        manager.addReview(item)\n        dismiss(animated: true, completion: nil)\n    }\n}\n```", "```\nprint(selectedRestaurantID as Any)\n```", "```\nfunc checkSavedPhoto() {\n    if let img = self.imgExample.image {\n      var item = RestaurantPhotoItem()\n      item.photo = generate(image: img, ratio: CGFloat(102))\n      item.date = NSDate() as Date\n      item.restaurantID = selectedRestaurantID\n      let manager = CoreDataManager()\n      manager.addPhoto(item)\n    }\n}\n```", "```\n @IBAction func onSaveTapped(_ sender: AnyObject) {\n    DispatchQueue.main.async {\n        self.checkSavedPhoto()\n    }\n}\n```", "```\ncase showPhotoFilter\n```", "```\noverride func prepare(for segue: UIStoryboardSegue, sender: Any?) {\n   if let identifier = segue.identifier {\n         switch identifier {\n         case Segue.showReview.rawValue:\n               showReview(segue: segue)\n         case Segue.showPhotoFilter.rawValue:\n               showPhotoFilter(segue: segue)\n         default:\n               print(\"Segue not added\")\n         }\n   }\n}\n```", "```\nfunc showPhotoFilter(segue:UIStoryboardSegue) {\n    guard let navController = segue.destination as? UINavigationController,\n        let viewController = navController.topViewController as? PhotoFilterViewController else {\n            return\n    }\n    viewController.selectedRestaurantID = selectedRestaurant?.restaurantID\n}\n```", "```\nimport UIKit\nclass ReviewsViewController: UIViewController {\n    @IBOutlet weak var collectionView: UICollectionView!\n    var selectedRestaurantID:Int?\n    let manager = CoreDataManager()\n    var data: [ReviewItem] = []\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        initialize()\n    }\n\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        setupDefaults()\n    }\n}\n```", "```\nprivate extension ReviewsViewController {\n    func initialize() {\n        setupCollectionView()\n    }\n\n    func setupDefaults() {\n        checkReviews()\n    }\n\n    func setupCollectionView() {\n        let flow = UICollectionViewFlowLayout()\n        flow.sectionInset = UIEdgeInsets(top: 7, left: 7, bottom: 7, right: 7)\n        flow.minimumInteritemSpacing = 0\n        flow.minimumLineSpacing = 7\n        flow.scrollDirection = .horizontal\n        collectionView?.collectionViewLayout = flow\n    }\n\n    func checkReviews() {\n        let viewController = self.parent as? RestaurantDetailViewController\n        if let id = viewController?.selectedRestaurant?.restaurantID {\n            if data.count > 0 { data.removeAll() }\n            data = manager.fetchReviews(by: id)\n            if data.count > 0 {\n                collectionView.backgroundView = nil\n            }\n            else {\n                let view = NoDataView(frame: CGRect(x: 0, y: 0, width: collectionView.frame.width, height: collectionView.frame.height))\n                view.set(title: \"Reviews\")\n                view.set(desc: \"There are currently no reviews\")\n                collectionView.backgroundView = view\n            }\n            collectionView.reloadData()\n        }\n    }\n}\n```", "```\nextension ReviewsViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        return collectionView.dequeueReusableCell(withReuseIdentifier: \"reviewCell\", for: indexPath)\n    }\n}\n```", "```\nextension ReviewsViewController: UICollectionViewDelegateFlowLayout {\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath:IndexPath) -> CGSize {\n        if data.count == 1 {\n           let width = collectionView.frame.size.width - 14\n            return CGSize(width: width, height: 200)\n        }\n        else {\n           let width = collectionView.frame.size.width - 21\n            return CGSize(width: width, height: 200)\n        }\n    }\n}\n```", "```\n@IBOutlet weak var lblTitle: UILabel!\n@IBOutlet weak var lblDate: UILabel!\n@IBOutlet weak var lblName: UILabel!\n@IBOutlet weak var lblReview: UILabel!\n@IBOutlet weak var ratingView: RatingView!\n```", "```\nfunc fetchRestaurantRating(by identifier:Int) -> Float {\n    let reviews = fetchReviews(by: identifier).map({ $0 })\n    let sum = reviews.reduce(0, {$0 + ($1.rating ?? 0)})\n    return sum / Float(reviews.count)\n}\n```", "```\nlet manager = CoreDataManager()\n```", "```\nfunc createRating() {\n    if let id = selectedRestaurant?.restaurantID {\n        let value = manager.fetchRestaurantRating(by: id)\n        ratingView.rating = CGFloat(value)\n        if value.isNaN { lblOverallRating.text = \"0\" }\n        else { lblOverallRating.text = \"\\(value)\" }\n    }\n}\n```"]