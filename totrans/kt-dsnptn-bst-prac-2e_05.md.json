["```kt\nenum class Direction { \n```", "```kt\n    LEFT, RIGHT \n```", "```kt\n}\n```", "```kt\ndata class Projectile(private var x: Int, \n```", "```kt\n                      private var y: Int, \n```", "```kt\n                      private var direction: Direction)\n```", "```kt\nclass OurHero { \n```", "```kt\n    private var direction = Direction.LEFT \n```", "```kt\n    private var x: Int = 42 \n```", "```kt\n    private var y: Int = 173 \n```", "```kt\n    fun shoot(): Projectile { \n```", "```kt\n        return Projectile(x, y, direction) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\ninterface Weapon { \n```", "```kt\n    fun shoot(x: Int, \n```", "```kt\n              y: Int, \n```", "```kt\n              direction: Direction): Projectile \n```", "```kt\n}\n```", "```kt\n// Flies straight \n```", "```kt\nclass Peashooter : Weapon {\n```", "```kt\n    override fun shoot(\n```", "```kt\n        x: Int,\n```", "```kt\n        y: Int,\n```", "```kt\n        direction: Direction\n```", "```kt\n    ) = Projectile(x, y, direction)\n```", "```kt\n}\n```", "```kt\n// Returns back after reaching end of the screen\n```", "```kt\nclass Banana : Weapon {\n```", "```kt\n    override fun shoot(\n```", "```kt\n        x: Int,\n```", "```kt\n        y: Int,\n```", "```kt\n        direction: Direction\n```", "```kt\n    ) = Projectile(x, y, direction)\n```", "```kt\n}\n```", "```kt\n// Other similar implementations here \n```", "```kt\nprivate var currentWeapon: Weapon = Peashooter()\n```", "```kt\nfun shoot(): Projectile = currentWeapon.shoot(x, y,   direction)\n```", "```kt\nfun equip(weapon: Weapon) { \n```", "```kt\n    currentWeapon = weapon \n```", "```kt\n}\n```", "```kt\nval x = 7\n```", "```kt\nvar myPet = Canary(\"Michael\")\n```", "```kt\nval square = fun(x: Int): Long { \n```", "```kt\n    return (x * x).toLong() \n```", "```kt\n}\n```", "```kt\nobject Weapons {\n```", "```kt\n    // Flies straight\n```", "```kt\n    fun peashooter(x: Int, y: Int, direction: Direction): \n```", "```kt\n        Projectile {\n```", "```kt\n        return Projectile(x, y, direction)\n```", "```kt\n    }\n```", "```kt\n    // Returns back after reaching end of the screen\n```", "```kt\n    fun banana(x: Int, y: Int, direction: Direction): \n```", "```kt\n        Projectile {\n```", "```kt\n        return Projectile(x, y, direction)\n```", "```kt\n    }\n```", "```kt\n    // Other similar implementations here   \n```", "```kt\n}  \n```", "```kt\nclass OurHero { \n```", "```kt\n    var currentWeapon = Weapons::peashooter \n```", "```kt\n    val shoot = fun() { \n```", "```kt\n        currentWeapon(x, y, direction) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nval hero = OurHero()\n```", "```kt\nhero.shoot()\n```", "```kt\nhero.currentWeapon = Weapons::banana\n```", "```kt\nhero.shoot()\n```", "```kt\nval platoon = Squad(\n```", "```kt\n    Trooper(),\n```", "```kt\n    Squad(\n```", "```kt\n        Trooper(),\n```", "```kt\n    ),\n```", "```kt\n    Trooper(),\n```", "```kt\n    Squad(\n```", "```kt\n        Trooper(),\n```", "```kt\n        Trooper(),\n```", "```kt\n    ),\n```", "```kt\n    Trooper()\n```", "```kt\n)\n```", "```kt\nfor (trooper in platoon) {\n```", "```kt\n    println(trooper)\n```", "```kt\n}\n```", "```kt\n>For loop range must have an iterator method \n```", "```kt\noperator fun iterator() = ...\n```", "```kt\noperator fun iterator() = object: Iterator<Trooper> {\n```", "```kt\n    override fun hasNext(): Boolean {\n```", "```kt\n        // Are there more objects to iterate over?\n```", "```kt\n    }\n```", "```kt\n    override fun next(): Trooper {\n```", "```kt\n        // Return next Trooper\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n    operator fun iterator() = object: Iterator<Trooper> { \n        private var i = 0 \n        // More code here \n    }\n    ```", "```kt\n    override fun hasNext(): Boolean { \n        return i < units.size \n    }\n    ```", "```kt\n    override fun next() = units[i++]\n    ```", "```kt\n    fun <T> printAnything(iter: Iterator<T>) { \n        while (iter.hasNext()) { \n            println(iter.next()) \n        } \n    }\n    ```", "```kt\ninterface WhatCanHappen { \n```", "```kt\n    fun seeHero() \n```", "```kt\n    fun getHit(pointsOfDamage: Int) \n```", "```kt\n    fun calmAgain() \n```", "```kt\n}\n```", "```kt\nclass Snail : WhatCanHappen { \n```", "```kt\n    private var healthPoints = 10 \n```", "```kt\n    override fun seeHero() { \n```", "```kt\n    } \n```", "```kt\n    override fun getHit(pointsOfDamage: Int) { \n```", "```kt\n    } \n```", "```kt\n    override fun calmAgain() { \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nsealed class Mood { \n```", "```kt\n   // Some abstract methods here, like draw(), for example \n```", "```kt\n}\n```", "```kt\nobject Still : Mood()\n```", "```kt\nobject Aggressive : Mood()\n```", "```kt\nobject Retreating : Mood()\n```", "```kt\nobject Dead : Mood()\n```", "```kt\nclass Snail : WhatCanHappen { \n```", "```kt\n    private var mood: Mood = Still \n```", "```kt\n    // As before \n```", "```kt\n}\n```", "```kt\noverride fun seeHero() {\n```", "```kt\n    mood = when(mood) {\n```", "```kt\n        is Still -> Aggressive\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\noverride fun seeHero() {\n```", "```kt\n    mood = when(mood) {\n```", "```kt\n        is Still -> Aggressive\n```", "```kt\n        else -> mood\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\noverride fun getHit(pointsOfDamage: Int) {\n```", "```kt\n    healthPoints -= pointsOfDamage\n```", "```kt\n    mood = when {\n```", "```kt\n        (healthPoints <= 0) -> Dead\n```", "```kt\n        mood is Aggressive -> Retreating\n```", "```kt\n        else -> mood\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass Snail { \n```", "```kt\n    internal var mood: Mood = Still(this) \n```", "```kt\n    private var healthPoints = 10 \n```", "```kt\n    // That's all! \n```", "```kt\n}\n```", "```kt\nsealed class Mood : WhatCanHappen\n```", "```kt\nclass Still(private val snail: Snail) : Mood() {\n```", "```kt\n    override fun seeHero() {\n```", "```kt\n        snail.mood = Aggressive\n```", "```kt\n    }\n```", "```kt\n    override fun getHit(pointsOfDamage: Int) {\n```", "```kt\n        // Same logic from before\n```", "```kt\n    }\n```", "```kt\n    override fun calmAgain() {   \n```", "```kt\n       // Return to Still state\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass Stormtrooper(...) { \n```", "```kt\n    fun attack(x: Long, y: Long) { \n```", "```kt\n        println(\"Attacking ($x, $y)\") \n```", "```kt\n        // Actual code here \n```", "```kt\n    } \n```", "```kt\n    fun move(x: Long, y: Long) { \n```", "```kt\n        println(\"Moving to ($x, $y)\") \n```", "```kt\n        // Actual code here \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\n[storm trooper](0, 0) -> good direction  -> (20, 0) \n```", "```kt\n          [rebel] [rebel]                     \n```", "```kt\n        [rebel] [rebel] [rebel]               \n```", "```kt\n           [rebel] [rebel] \n```", "```kt\n            (5, 20)                        (20, 20)\n```", "```kt\nclass Trooper { \n```", "```kt\n    private val orders = mutableListOf<Any>()  \n```", "```kt\n    fun addOrder(order: Any) {\n```", "```kt\n        this.orders.add(order)\n```", "```kt\n    } \n```", "```kt\n    // More code here \n```", "```kt\n}\n```", "```kt\nclass Trooper { \n```", "```kt\n    ... \n```", "```kt\n    // This will be triggered from the outside once in a while\n```", "```kt\n    fun executeOrders() {\n```", "```kt\n        while (orders.isNotEmpty()) {\n```", "```kt\n            val order = orders.removeFirst()\n```", "```kt\n            order.execute() // Compile error for now \n```", "```kt\n        }\n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\ninterface Command { \n```", "```kt\n    fun execute() \n```", "```kt\n}\n```", "```kt\nprivate val commands = mutableListOf<Command>()\n```", "```kt\nfun command(): Unit { \n```", "```kt\n    // Some code here \n```", "```kt\n}\n```", "```kt\n() -> Unit\n```", "```kt\ntypealias Command = ()-> Unit\n```", "```kt\ncommand.execute() // Unresolved reference: execute \n```", "```kt\ncommand.invoke() // Compiles\n```", "```kt\nfun executeOrders() {\n```", "```kt\n    while (orders.isNotEmpty()) {\n```", "```kt\n        val order = orders.removeFirst()\n```", "```kt\n        order() // Executed the next order\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\n(x: Int, y: Int)-> Unit\n```", "```kt\nval moveGenerator = fun(trooper: Trooper, \n```", "```kt\n                        x: Int, \n```", "```kt\n                        y: Int): Command { \n```", "```kt\n    return fun() { \n```", "```kt\n        trooper.move(x, y) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nfun appendMove(x: Int, y: Int) = apply { \n```", "```kt\n    commands.add(moveGenerator(this, x, y)) \n```", "```kt\n}\n```", "```kt\nval trooper = Trooper() \n```", "```kt\ntrooper.appendMove(20, 0) \n```", "```kt\n    .appendMove(20, 20) \n```", "```kt\n    .appendMove(5, 20) \n```", "```kt\n    .execute()\n```", "```kt\n> Moving to (20, 0) \n```", "```kt\n> Moving to (20, 20) \n```", "```kt\n> Moving to (5, 20)\n```", "```kt\nprivate val commands =   mutableListOf<Pair<Command, Command>>()\n```", "```kt\nfun appendMove(x: Int, y: Int) = apply { \n```", "```kt\n    val oppositeMove = /* If it's the first command,       generate move to current location. Otherwise, get the       previous command */ \n```", "```kt\n    commands.add(moveGenerator(this, x, y) to oppositeMove) \n```", "```kt\n}\n```", "```kt\ndata class Request(val email: String, val question: String)\n```", "```kt\nfun handleRequest(r: Request) {\n```", "```kt\n    // Validate \n```", "```kt\n    if (r.email.isEmpty() || r.question.isEmpty()) {\n```", "```kt\n        return\n```", "```kt\n    }\n```", "```kt\n    // Authenticate \n```", "```kt\n    // Make sure that you know whos is this user \n```", "```kt\n    if (r.isKnownEmail()) {\n```", "```kt\n        return\n```", "```kt\n    }\n```", "```kt\n    // Authorize \n```", "```kt\n    // Requests from juniors are automatically ignored by \n```", "```kt\n       architects \n```", "```kt\n    if (r.isFromJuniorDeveloper()) {\n```", "```kt\n        return\n```", "```kt\n    }\n```", "```kt\n    println(\"I don't know. Did you check StackOverflow?\")\n```", "```kt\n}\n```", "```kt\ninterface Handler { \n```", "```kt\n    fun handle(request: Request): Response \n```", "```kt\n}\n```", "```kt\ndata class Response(val answer: String)\n```", "```kt\nclass BasicValidationHandler(private val next: Handler) :   Handler { \n```", "```kt\n    override fun handle(request: Request): Response { \n```", "```kt\n        if (request.email.isEmpty() ||\n```", "```kt\n          request.question.isEmpty()) { \n```", "```kt\n            throw IllegalArgumentException() \n```", "```kt\n        } \n```", "```kt\n        return next.handle(request) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nval req = Request(\"developer@company.com\",          \"Who broke my build?\") \n```", "```kt\nval chain = BasicValidationHandler(\n```", "```kt\n    KnownEmailHandler(\n```", "```kt\n        JuniorDeveloperFilterHandler(\n```", "```kt\n            AnswerHandler()\n```", "```kt\n        )\n```", "```kt\n    )\n```", "```kt\n) \n```", "```kt\nval res = chain.handle(req) \n```", "```kt\ntypealias Handler = (request: Request) -> Response\n```", "```kt\nval authentication = fun(next: Handler) =\n```", "```kt\n    fun(request: Request): Response {\n```", "```kt\n        if (!request.isKnownEmail()) {\n```", "```kt\n            throw IllegalArgumentException()\n```", "```kt\n        }\n```", "```kt\n        return next(request)\n```", "```kt\n    }\n```", "```kt\nval req = Request(\"developer@company.com\",     \"Why do we need Software Architects?\") \n```", "```kt\nval chain = basicValidation(authentication\n```", "```kt\n  (finalResponse())) \n```", "```kt\nval res = chain(req) \n```", "```kt\nprintln(res)\n```", "```kt\nval sql = select(\"name, age\") {\n```", "```kt\n    from(\"users\") {\n```", "```kt\n        where(\"age > 25\")\n```", "```kt\n    } // Closes from\n```", "```kt\n} // Closes select \n```", "```kt\nprintln(sql)\n```", "```kt\n> SELECT name, age FROM users WHERE age > 25\n```", "```kt\nfun select(columns: String, from: SelectClause.()->Unit):  \n```", "```kt\n    SelectClause { \n```", "```kt\n    return SelectClause(columns).apply(from) \n```", "```kt\n}\n```", "```kt\nSelectClause.()->Unit\n```", "```kt\n(SelectClause)->Unit\n```", "```kt\nSelectClause(columns).apply(from)\n```", "```kt\nval selectClause = SelectClause(columns) \n```", "```kt\nfrom(selectClause) \n```", "```kt\nreturn selectClause\n```", "```kt\nselect(\"name, age\", { \n```", "```kt\n    this@select.from(\"users\", { \n```", "```kt\n        where(\"age > 25\") \n```", "```kt\n    }) \n```", "```kt\n})\n```", "```kt\nclass SelectClause(private val columns: String) {\n```", "```kt\n    private lateinit var from: FromClause\n```", "```kt\n    fun from(\n```", "```kt\n        table: String,\n```", "```kt\n        where: FromClause.() -> Unit\n```", "```kt\n    ): FromClause {\n```", "```kt\n        this.from = FromClause(table)\n```", "```kt\n        return this.from.apply(where)\n```", "```kt\n    }\n```", "```kt\n    override fun toString() = \"SELECT $columns $from\"\n```", "```kt\n}\n```", "```kt\nselect(\"name, age\", { \n```", "```kt\n    this@select.from(\"users\", { \n```", "```kt\n        this@from.where(\"age > 25\") \n```", "```kt\n    }) \n```", "```kt\n})\n```", "```kt\nclass FromClause(private val table: String) {\n```", "```kt\n    private lateinit var where: WhereClause\n```", "```kt\n    fun where(conditions: String) = this.apply {\n```", "```kt\n        where = WhereClause(conditions)\n```", "```kt\n    }\n```", "```kt\n    override fun toString() = \"FROM $table $where\"\n```", "```kt\n}\n```", "```kt\nclass WhereClause(private val conditions: String) {\n```", "```kt\n    override fun toString() = \"WHERE $conditions\"\n```", "```kt\n}\n```", "```kt\nclass FromClause(private val table: String) { \n```", "```kt\n    // More code here... \n```", "```kt\n    override fun toString() = \"FROM $table $where\"\n```", "```kt\n}\n```", "```kt\nclass SelectClause(private val columns: String) { \n```", "```kt\n    // More code here... \n```", "```kt\n    override fun toString() = \"SELECT $columns $from\" \n```", "```kt\n}\n```", "```kt\nval sql = select(\"name, age\") { \n```", "```kt\n              from(\"users\") { \n```", "```kt\n                  where(\"age > 25\") \n```", "```kt\n              } // Closes from \n```", "```kt\n          } // Closes select\n```", "```kt\ninterface QA { \n```", "```kt\n    fun doesMyCodeWork(): Boolean \n```", "```kt\n} \n```", "```kt\ninterface Parrot { \n```", "```kt\n    fun isEating(): Boolean \n```", "```kt\n    fun isSleeping(): Boolean \n```", "```kt\n} \n```", "```kt\nobject Kenny : QA, Parrot { \n```", "```kt\n    // Implements interface methods based on parrot     // schedule \n```", "```kt\n}\n```", "```kt\nobject Me\n```", "```kt\nobject MyCompany {\n```", "```kt\n    val cto = Me\n```", "```kt\n    val qa = Kenny\n```", "```kt\n    fun taskCompleted() {\n```", "```kt\n        if (!qa.isEating() && !qa.isSleeping()) {\n```", "```kt\n            println(qa.doesMyCodeWork())\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nobject Kenny : ... { \n```", "```kt\n    val developer = Me \n```", "```kt\n}\n```", "```kt\nclass MyCompany { \n```", "```kt\n    ... \n```", "```kt\n    val qa2 = Brad \n```", "```kt\n    fun taskCompleted() { \n```", "```kt\n        ... \n```", "```kt\n        else if (!qa2.isEating() && !qa2.isSleeping()) { \n```", "```kt\n            println(qa2.doesMyCodeWork()) \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nobject Brad : QA, Parrot { \n```", "```kt\n    val senior = Kenny \n```", "```kt\n    val developer = Me \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nobject George : QA, Owl { \n```", "```kt\n    val developer = Me \n```", "```kt\n    val mate = Kenny\n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nclass MyCompany { \n```", "```kt\n    ... \n```", "```kt\n    val qa3 = George \n```", "```kt\n    fun taskCompleted() { \n```", "```kt\n        ... \n```", "```kt\n        else if (!qa3.isWatchingFootball()) { \n```", "```kt\n            println(qa3.doesMyCodeWork()) \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nobject Kenny : QA, Parrot { \n```", "```kt\n    val peer = George \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\ninterface Copywriter { \n```", "```kt\n    fun areAllTextsCorrect(): Boolean \n```", "```kt\n} \n```", "```kt\ninterface Kiwi \n```", "```kt\nobject Sandra : Copywriter, Kiwi { \n```", "```kt\n    override fun areAllTextsCorrect(): Boolean { \n```", "```kt\n        return ... \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass MyMind { \n```", "```kt\n    ... \n```", "```kt\n    val translator = Sandra \n```", "```kt\n    fun taskCompleted(isMajorRelease: Boolean) { \n```", "```kt\n        ... \n```", "```kt\n        if (isMajorRelease) { \n```", "```kt\n            println(translator.areAllTranslationsCorrect()) \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\ninterface Manager { \n```", "```kt\n    fun isAllGood(majorRelease: Boolean): Boolean \n```", "```kt\n}\n```", "```kt\nobject Michael : Canary, ProductManager {\n```", "```kt\n    private val kenny = Kenny(this)\n```", "```kt\n    private val brad = Brad(this)\n```", "```kt\n    override fun isAllGood(majorRelease: Boolean): Boolean {\n```", "```kt\n        if (!kenny.isEating() && !kenny.isSleeping()) {\n```", "```kt\n            println(kenny.doesMyCodeWork())\n```", "```kt\n        } else if (!brad.isEating() && !brad.isSleeping()) {\n```", "```kt\n            println(brad.doesMyCodeWork())\n```", "```kt\n        }\n```", "```kt\n        return true\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MyCompany(private val manager: Manager) { \n```", "```kt\n    fun taskCompleted(isMajorRelease: Boolean) { \n```", "```kt\n        println(manager.isAllGood(isMajorRelease)) \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass Brad(private val manager: Manager) : ... { \n```", "```kt\n   // No reference to Me here \n```", "```kt\n   ... \n```", "```kt\n}\n```", "```kt\nclass Kenny(private val manager: Manager) : ... { \n```", "```kt\n   // No reference to George, or anyone else \n```", "```kt\n   ... \n```", "```kt\n}\n```", "```kt\nclass Manager { \n```", "```kt\n    private var thoughts = mutableListOf<String>()\n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nclass Manager {\n```", "```kt\n    ...\n```", "```kt\n    fun think(thought: String) {\n```", "```kt\n        thoughts.add(thought)\n```", "```kt\n        if (thoughts.size > 2) {\n```", "```kt\n            thoughts.removeFirst()\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nmichael.think(\"Need to implement Coconut Cannon\")\n```", "```kt\nmichael.think(\"Should get some coffee\")\n```", "```kt\nmichael.think(\"Or maybe tea?\") // Forgot about Coconut   Cannon\n```", "```kt\nmichael.think(\"No, actually, let's implement Pineapple   Launcher\") // Forgot that he wanted coffee\n```", "```kt\nclass Manager { \n```", "```kt\n    ...\n```", "```kt\n    inner class Memory(private val mindState: List<String>) {\n```", "```kt\n        fun restore() {\n```", "```kt\n            thoughts = mindState.toMutableList()\n```", "```kt\n        }\n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nfun saveThatThought(): Memory {\n```", "```kt\n    return Memory(thoughts.toList())\n```", "```kt\n}\n```", "```kt\nval michael = Manager()\n```", "```kt\nmichael.think(\"Need to implement Coconut Cannon\")\n```", "```kt\nmichael.think(\"Should get some coffee\")\n```", "```kt\nval memento = michael.saveThatThought()\n```", "```kt\nmichael.think(\"Or maybe tea?\")\n```", "```kt\nmichael.think(\"No, actually, let's implement Pineapple   Launcher\")\n```", "```kt\nclass Manager {\n```", "```kt\n    ... \n```", "```kt\n    fun `what was I thinking back then?`(memory: Memory) {\n```", "```kt\n        memory.restore()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nwith(michael) {\n```", "```kt\n    think(\"Or maybe tea?\")\n```", "```kt\n    think(\"No, actually, let's implement Pineapple         Launcher\")\n```", "```kt\n}\n```", "```kt\nmichael.`what was I thinking back then?`(memento)\n```", "```kt\nPage(Container(Image(), \n```", "```kt\n               Link(), \n```", "```kt\n               Image()), \n```", "```kt\n     Table(), \n```", "```kt\n     Link(), \n```", "```kt\n     Container(Table(), \n```", "```kt\n               Link()), \n```", "```kt\n     Container(Image(), \n```", "```kt\n               Container(Image(), \n```", "```kt\n                         Link())))\n```", "```kt\nfun collectLinks(page: Page): List<String> { \n```", "```kt\n    // No need for intermediate variable there \n```", "```kt\n    return LinksCrawler().run { \n```", "```kt\n        page.accept(this) \n```", "```kt\n        this.links \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nprivate fun Container.accept(feature: LinksCrawler) { \n```", "```kt\n    feature.visit(this) \n```", "```kt\n} \n```", "```kt\n// Or using a shorter syntax: \n```", "```kt\nprivate fun Page.accept(feature: LinksCrawler) =   feature.visit(this)\n```", "```kt\nclass LinksCrawler { \n```", "```kt\n    private var _links = mutableListOf<String>() \n```", "```kt\n    val links \n```", "```kt\n        get()= _links.toList() \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nclass LinksCrawler { \n```", "```kt\n    ... \n```", "```kt\n    fun visit(page: Page) { \n```", "```kt\n        visit(page.elements) \n```", "```kt\n    } \n```", "```kt\n    fun visit(container: Container) =         visit(container.elements) \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nsealed class HtmlElement \n```", "```kt\nclass Container(...) : HtmlElement(){ \n```", "```kt\n    ... \n```", "```kt\n} \n```", "```kt\nclass Image(...) : HtmlElement() { \n```", "```kt\n    ... \n```", "```kt\n} \n```", "```kt\nclass Link(...) : HtmlElement() { \n```", "```kt\n    ... \n```", "```kt\n} \n```", "```kt\nclass Table : HtmlElement()\n```", "```kt\nclass LinksCrawler { \n```", "```kt\n    ... \n```", "```kt\n    private fun visit(elements: List<HtmlElement>) { \n```", "```kt\n        for (e in elements) { \n```", "```kt\n            when (e) { \n```", "```kt\n                is Container -> e.accept(this) \n```", "```kt\n                is Link -> _links.add(e.href) \n```", "```kt\n                is Image -> _links.add(e.src) \n```", "```kt\n                else -> {} \n```", "```kt\n            } \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nabstract class DayRoutine { \n```", "```kt\n    private fun arriveToWork() { \n```", "```kt\n        println(\"Hi boss! I appear in the office \n```", "```kt\n            sometimes!\") \n```", "```kt\n    } \n```", "```kt\n    private fun drinkCoffee() { \n```", "```kt\n        println(\"Coffee is delicious today\") \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n    private fun goToLunch() { \n```", "```kt\n        println(\"Hamburger and chips, please!\") \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n    private fun goHome() { \n```", "```kt\n        // Very important no one notices me, so I must keep         // quiet! \n```", "```kt\n        println() \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nabstract class DayRoutine { \n```", "```kt\n    ... \n```", "```kt\n    abstract fun doBeforeLunch() \n```", "```kt\n    ... \n```", "```kt\n    abstract fun doAfterLunch() \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nabstract class DayRoutine { \n```", "```kt\n    ... \n```", "```kt\n    open fun bossHook() { \n```", "```kt\n        // Hope he doesn't hook me there \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nabstract class DayRoutine { \n```", "```kt\n    ... \n```", "```kt\n    fun runSchedule() { \n```", "```kt\n        arriveToWork() \n```", "```kt\n        drinkCoffee() \n```", "```kt\n        doAfterLunch() \n```", "```kt\n        goToLunch() \n```", "```kt\n        doAfterLunch() \n```", "```kt\n        goHome() \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass MondaySchedule : DayRoutine() { \n```", "```kt\n    override fun doBeforeLunch() { \n```", "```kt\n        println(\"Some pointless meeting\") \n```", "```kt\n        println(\"Code review. What this does?\") \n```", "```kt\n    } \n```", "```kt\n    override fun doAfterLunch() { \n```", "```kt\n        println(\"Meeting with Ralf\") \n```", "```kt\n        println(\"Telling jokes to other architects\") \n```", "```kt\n    } \n```", "```kt\n    override fun bossHook() { \n```", "```kt\n        println(\"Hey, can I have you for a sec in my             office?\") \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nfun runSchedule(beforeLunch: () -> Unit, \n```", "```kt\n               afterLunch: () -> Unit, \n```", "```kt\n               bossHook: (() -> Unit)? = fun() { println() }) { \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nfun runSchedule(...) { \n```", "```kt\n    ... \n```", "```kt\n    arriveToWork() \n```", "```kt\n    drinkCoffee() \n```", "```kt\n    beforeLunch() \n```", "```kt\n    goToLunch() \n```", "```kt\n    afterLunch() \n```", "```kt\n    bossHook?.let { it() } \n```", "```kt\n    goHome() \n```", "```kt\n}\n```", "```kt\n?.let { it() }\n```", "```kt\nfun runSchedule(...) { \n```", "```kt\n    fun arriveToWork(){ \n```", "```kt\n        println(\"How are you all?\") \n```", "```kt\n    } \n```", "```kt\n    val drinkCoffee = { println(\"Did someone left the milk         out?\") } \n```", "```kt\n    fun goToLunch() = println(\"I would like something         italian\") \n```", "```kt\n    val goHome = fun () { \n```", "```kt\n        println(\"Finally some rest\") \n```", "```kt\n    } \n```", "```kt\n    arriveToWork() \n```", "```kt\n    drinkCoffee() \n```", "```kt\n    ... \n```", "```kt\n    goToLunch() \n```", "```kt\n    ... \n```", "```kt\n    goHome() \n```", "```kt\n}\n```", "```kt\nclass Bat { \n```", "```kt\n    fun screech() { \n```", "```kt\n        println(\"Eeeeeee\") \n```", "```kt\n    } \n```", "```kt\n} \n```", "```kt\nclass Turkey { \n```", "```kt\n    fun gobble() { \n```", "```kt\n        println(\"Gob-gob\") \n```", "```kt\n    } \n```", "```kt\n} \n```", "```kt\nclass Dog { \n```", "```kt\n    fun bark() { \n```", "```kt\n        println(\"Woof\") \n```", "```kt\n    } \n```", "```kt\n    fun howl() { \n```", "```kt\n        println(\"Auuuu\") \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass Cat {\n```", "```kt\n    fun joinChoir(whatToCall: ()->Unit) {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n    fun leaveChoir(whatNotToCall: ()->Unit) {\n```", "```kt\n        ...\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nval catTheConductor = Cat() \n```", "```kt\nval bat = Bat() \n```", "```kt\nval dog = Dog() \n```", "```kt\nval turkey = Turkey() \n```", "```kt\ncatTheConductor.joinChoir(bat::screech) \n```", "```kt\ncatTheConductor.joinChoir(dog::howl) \n```", "```kt\ncatTheConductor.joinChoir(dog::bark) \n```", "```kt\ncatTheConductor.joinChoir(turkey::gobble)\n```", "```kt\nclass Cat { \n```", "```kt\n    private val participants = mutableMapOf<()->Unit, ()-        >Unit>() \n```", "```kt\n    fun joinChoir(whatToCall: ()->Unit) { \n```", "```kt\n        participants[whatToCall] = whatToCall \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\nclass Cat { \n```", "```kt\n    ... \n```", "```kt\n    fun leaveChoir(whatNotToCall: ()->Unit) { \n```", "```kt\n        participants.remove(whatNotToCall) \n```", "```kt\n    } \n```", "```kt\n    ... \n```", "```kt\n}\n```", "```kt\ncatTheConductor.leaveChoir(bat::screech)\n```", "```kt\ntypealias Times = Int \n```", "```kt\nclass Cat { \n```", "```kt\n    ... \n```", "```kt\n    fun conduct(n: Times) { \n```", "```kt\n        for (p in participants.values) { \n```", "```kt\n            for (i in 1..n) { \n```", "```kt\n                p() \n```", "```kt\n            } \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass Cat { \n```", "```kt\n    private val participants = mutableMapOf<(Int)->Unit, \n```", "```kt\n         (Int)->Unit>() \n```", "```kt\n    fun joinChoir(whatToCall: (Int)->Unit) { \n```", "```kt\n        ... \n```", "```kt\n    } \n```", "```kt\n    fun leaveChoir(whatNotToCall: (Int)->Unit) { \n```", "```kt\n        ... \n```", "```kt\n    } \n```", "```kt\n    fun conduct(n: Times) { \n```", "```kt\n        for (p in participants.values) { \n```", "```kt\n            p(n) \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nclass Turkey { \n```", "```kt\n    fun gobble(repeat: Times) { \n```", "```kt\n        for (i in 1..repeat) { \n```", "```kt\n            println(\"Gob-gob\") \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\nenum class SoundPitch {HIGH, LOW} \n```", "```kt\ndata class Message(val repeat: Times, val pitch:     SoundPitch) \n```", "```kt\nclass Bat { \n```", "```kt\n    fun screech(message: Message) { \n```", "```kt\n        for (i in 1..message.repeat) { \n```", "```kt\n            println(\"${message.pitch} Eeeeeee\") \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```", "```kt\ninterface Message { \n```", "```kt\n    val repeat: Times \n```", "```kt\n    val pitch: SoundPitch  \n```", "```kt\n} \n```", "```kt\ndata class LowMessage(override val repeat: Times) : Message { \n```", "```kt\n    override val pitch = SoundPitch.LOW \n```", "```kt\n} \n```", "```kt\ndata class HighMessage(override val repeat: Times) : \n```", "```kt\n  Message { \n```", "```kt\n    override val pitch = SoundPitch.HIGH \n```", "```kt\n} \n```", "```kt\nclass Bat { \n```", "```kt\n    fun screech(message: Message) { \n```", "```kt\n        when (message) { \n```", "```kt\n            is HighMessage -> { \n```", "```kt\n                for (i in 1..message.repeat) { \n```", "```kt\n                    println(\"${message.pitch} Eeeeeee\") \n```", "```kt\n                } \n```", "```kt\n            } \n```", "```kt\n            else -> println(\"Can't :(\") \n```", "```kt\n        } \n```", "```kt\n    } \n```", "```kt\n}\n```"]