["```kt\ncloseButton.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    finish();\n  }\n});\n```", "```kt\npublic class MyListenerActivity extends Activity implements View.OnClickListener {\n  @Override\n  protected void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.eventful_layout);\n\n    findViewById(R.id.open).setOnClickListener(this);\n    findViewById(R.id.find).setOnClickListener(this);\n    findViewById(R.id.close).setOnClickListener(this);\n  }\n\n  // ...\n\n  @Override\n  public void onClick(View v) {\n    switch (v.getId()){\n      case R.id.open:\n        onOpen();\n        break;\n      case R.id.find:\n        onFind();\n        break;\n      case R.id.close:\n        onClose();\n        break;\n    }\n  }\n}\n```", "```kt\nprivate final DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.LONG);\n```", "```kt\nprivate final TextView display;\n\nprivate DatePickerDialog dialog = null;\nprivate Date currentDate = null;\n```", "```kt\npublic DatePickerWrapper(final TextView display) {\n  this.display = display;\n  this.display.setFocusable(true);\n  this.display.setClickable(true);\n  this.display.setOnClickListener(this);\n  this.display.setOnFocusChangeListener(this);\n\n  this.setDate(new Date());\n}\n```", "```kt\npublic void setDate(final Date date) {\n  if(date == null) {\n    throw new IllegalArgumentException(\"date may not be null\");\n  }\n\n  this.currentDate = (Date) date.clone();\n  this.display.setText(dateFormat.format(currentDate));\n\n  if(this.dialog != null) {\n    final GregorianCalendar calendar = new GregorianCalendar();\n    calendar.setTime(currentDate);\n    this.dialog.updateDate(\n        calendar.get(Calendar.YEAR),\n        calendar.get(Calendar.MONTH),\n        calendar.get(Calendar.DAY_OF_MONTH)\n    );\n  }\n}\n\npublic Date getDate() {\n  return currentDate;\n}\n```", "```kt\nvoid openDatePickerDialog() {\n  if (dialog == null) {\n    final GregorianCalendar calendar = new GregorianCalendar();\n    calendar.setTime(getDate());\n    dialog = new DatePickerDialog(\n        display.getContext(),\n        this,\n        calendar.get(Calendar.YEAR),\n        calendar.get(Calendar.MONTH),\n        calendar.get(Calendar.DAY_OF_MONTH)\n    );\n  }\n  dialog.show();\n}\n```", "```kt\n@Override\npublic void onClick(final View v) {\n  openDatePickerDialog();\n}\n\n@Override\npublic void onFocusChange(final View v, final boolean hasFocus) {\n  if (hasFocus) {\n    openDatePickerDialog();\n  }\n}\n```", "```kt\n@Override\npublic void onDateSet(\n      final DatePicker view,\n      final int year,\n      final int month,\n      final int dayOfMonth) {\n\n  final Calendar calendar = new GregorianCalendar(\n      year, month, dayOfMonth\n  );\n\n  setDate(calendar.getTime());\n}\n```", "```kt\nprivate DatePickerWrapper selectedDate;\n```", "```kt\nfab.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View view) {\n    Snackbar.make(\n        view,\n        \"Replace with your own action\",\n        Snackbar.LENGTH_LONG\n    ).setAction(\"Action\", null).show();\n  }\n});\n```", "```kt\nselectedDate = new DatePickerWrapper((TextView) findViewById(R.id.date));\n```", "```kt\nprivate final TextView label;\n\npublic IconPickerWrapper(final TextView label) {\n  this.label = label;\n}\n```", "```kt\npublic void setLabelText(final CharSequence text) {\n  label.setText(text);\n}\n```", "```kt\n@Override\npublic void onCheckedChanged(\n    final RadioGroup group,\n    final int checkedId) {\n\n  final View selected = group.findViewById(checkedId);\n  setLabelText(view.getContentDescription());\n}\n```", "```kt\nprivate RadioGroup categories;\n```", "```kt\ncategories = (RadioGroup) findViewById(R.id.categories);\ncategories.setOnCheckedChangeListener(\n  new IconPickerWrapper(\n      (TextView) findViewById(R.id.selected_category)\n  )\n);\n```", "```kt\ncategories.check(R.id.other);\n```", "```kt\npublic class CaptureClaimActivity extends AppCompatActivity\n                                  implements View.OnClickListener {\n```", "```kt\nprivate static final int REQUEST_ATTACH_FILE = 1;\nprivate static final int REQUEST_ATTACH_PERMISSION = 1001;\n```", "```kt\nFloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\n```", "```kt\nFloatingActionButton attach = (FloatingActionButton) findViewById(R.id.attach);\n```", "```kt\nattach.setOnClickListener(this);\n```", "```kt\n@Override\npublic void onClick(View v) {\n  switch (v.getId()){\n    case R.id.attach:\n      onAttachClick();\n      break;\n  }\n}\n```", "```kt\n<manifest \n    package=\"com.packtpub.claim\">\n\n <uses-permission\n android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n android:maxSdkVersion=\"23\" />\n\n    <application\n        android:name=\".ClaimApplication\"\n```", "```kt\npublic void onAttachClick() {\n  final int permissionStatus = ContextCompat.checkSelfPermission(\n    this,\n    Manifest.permission.READ_EXTERNAL_STORAGE);\n\n  if (permissionStatus != PackageManager.PERMISSION_GRANTED) {\n    ActivityCompat.requestPermissions(\n      this,\n      new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},\n      REQUEST_ATTACH_PERMISSION);\n    return;\n  }\n```", "```kt\n  final Intent attach = new Intent(Intent.ACTION_GET_CONTENT)\n        .addCategory(Intent.CATEGORY_OPENABLE)\n        .setType(\"*/*\");\n\n  startActivityForResult(attach, REQUEST_ATTACH_FILE);\n}\n```", "```kt\n@Override\npublic void onRequestPermissionsResult(\n      final int requestCode,\n      final String[] permissions,\n      final int[] grantResults) {\n\n  switch (requestCode) {\n    case REQUEST_ATTACH_PERMISSION:\n      if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n        onAttachClick();\n      }\n      break;\n  }\n}\n```", "```kt\n@Override\nprotected void onActivityResult(\n      final int requestCode,\n      final int resultCode,\n      final Intent data) {\n\n  switch (requestCode) {\n    case REQUEST_ATTACH_FILE:\n      onAttachFileResult(resultCode, data);\n      break;\n  }\n}\n```", "```kt\npublic void onAttachFileResult(\n    final int resultCode, final Intent data) {\n```", "```kt\nif (resultCode != RESULT_OK\n    || data == null\n    || data.getData() == null) {\n  return;\n}\n```", "```kt\nToast.makeText(this, data.getDataString(), Toast.LENGTH_SHORT).show();\n```", "```kt\npublic abstract class ActionCommand<P, R> {\n```", "```kt\nprivate static final Handler MAIN_HANDLER = new Handler(Looper.getMainLooper());\n```", "```kt\npublic abstract R onBackground(final P value) throws Exception;\npublic abstract void onForeground(final R value);\n\npublic void onError(final Exception error) {\n  Log.e(\n      getClass().getSimpleName(),\n      \"Error while processing data\",\n      error\n  );\n}\n```", "```kt\npublic void exec(final P parameter) {\n   exec(parameter, AsyncTask.SERIAL_EXECUTOR);\n}\n\npublic void exec(final P parameter, final Executor background) {\n   background.execute(new ActionCommandRunner(parameter, this));\n}\n```", "```kt\nprivate static class ActionCommandRunner implements Runnable {\n```", "```kt\nprivate static final int STATE_BACKGROUND = 1;\nprivate static final int STATE_FOREGROUND = 2;\nprivate static final int STATE_ERROR = 3;\nprivate int state = STATE_BACKGROUND;\n```", "```kt\nprivate final ActionCommand command;\nprivate Object value;\n\nActionCommandRunner(\n       final Object value,\n       final ActionCommand command) {\n\n   this.value = value;\n   this.command = command;\n}\n```", "```kt\nvoid onBackground() {\n   try {\n       // our current \"value\" is the commands parameter\n       this.value = command.onBackground(value);\n       this.state = STATE_FOREGROUND;\n   } catch (final Exception error) {\n       this.value = error;\n       this.state = STATE_ERROR;\n   } finally {\n       MAIN_HANDLER.post(this);\n   }\n}\n\nvoid onForeground() {\n   try {\n       command.onForeground(value);\n   } catch (final Exception error) {\n       this.value = error;\n       this.state = STATE_ERROR;\n\n       // we go into an error state, and foreground to deliver it\n       MAIN_HANDLER.post(this);\n   }\n}\n\nvoid onError() {\n   command.onError((Exception) value);\n}\n```", "```kt\n@Override\npublic void run() {\n   switch (state) {\n       case STATE_BACKGROUND:\n           onBackground();\n           break;\n       case STATE_FOREGROUND:\n           onForeground();\n           break;\n       case STATE_ERROR:\n           onError();\n           break;\n   }\n}\n```", "```kt\npublic class MultiOnClickListener implements View.OnClickListener {\n  private final List<View.OnClickListener> listeners =\n      new CopyOnWriteArrayList<>();\n\n  public MultiOnClickListener(\n      final View.OnClickListener... listeners) {\n    this.listeners.addAll(Arrays.asList(listeners));\n  }\n\n  @Override\n  public void onClick(View v) {\n    for (final View.OnClickListener listener : listeners)\n      listener.onClick(v);\n  }\n\n  public void addOnClickListener(\n      final View.OnClickListener listener) {\n    if (listener == null) return;\n      listeners.add(listener);\n  }\n\n  public void removeOnClickListener(\n      final View.OnClickListener listener) {\n    if (listener == null) return;\n    listeners.remove(listener);\n  }\n}\n```"]