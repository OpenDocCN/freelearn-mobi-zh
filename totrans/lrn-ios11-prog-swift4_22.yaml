- en: Saving Reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are just about done with our app. In this chapter, we will finally start
    saving reviews and photos into Core Data. We will then learn how to pull data
    from Core Data and display them in our app. A lot of the setup is already done
    for us and most of what we are doing is calling methods we created earlier in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Save items to Core Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch items from Core Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display items from Core Data into a Table View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will start with saving reviews into Core Data. Open up `ReviewFormViewController.swift`
    and above the `@IBOutlets` add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, delete everything inside your `onSavedTapped(:)` method and then add
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code is all we need to do to save an item into Core Data using our `CoreDataManager`.
    To display reviews for a particular restaurant, we need to save all reviews with
    a restaurant identifier. Then, when we go to a certain restaurant, we will use
    the restaurant identifier to search Core Data to see if there are any saved reviews.
    We pass this identifier using a segue.
  prefs: []
  type: TYPE_NORMAL
- en: Open `RestaurantDetail.storyboard` and select the segue we are using to go to
    the `ReviewForm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Attributes inspector of the Utilities panel, update Identifier under
    Storyboard Segue to say `showReview`. Then, hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to make sure that, when a user creates a review, we pass `restaurantID`
    to the Review Form View Controller. We need to update our `RestaurantItem` so
    it has an ID. Open `RestaurantItem` after var `imageURL:String?` and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside the enum `CodingKeys:String` add the new case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `RestaurantDetailViewController.swift` and add this method after the `viewDidLoad()`
    method (ignore the errors for now):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `prepare()` method inside the `RestaurantDetailViewController` will check
    for the `showReview` segue identifier. If successful, it will call the `showReview()`
    method, which will take you to the Reviews list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following method above the `createRating()` method inside the
    private extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: While we are cleaning up, move the `initialize()` method into the `private`
    extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open `ReviewFormViewController`; let''s create a `private` extension
    and move`onSaveTapped(_:)` into it. Then, delete everything inside the method
    and update the method with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's make sure we are passing the `restaurantID` by adding a `print` statement
    inside `ReviewFormViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `-viewDidLoad()` method, add the following `print` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let's build and run the project by hitting the Play button (or use ⌘ + *R*).
    You should now be able to see `restaurantID` in the console. You can create a
    review and, after you save the review, you are brought back to the restaurant
    detail view, but we are still missing displaying our reviews in restaurant details.
    We will work on this later in this chapter. Before we do that, let's look at how
    we can save photos into Core Data.
  prefs: []
  type: TYPE_NORMAL
- en: Saving photos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Saving reviews was pretty simple and there is essentially no difference in
    saving photos. Our code will be pretty similar to what we did with reviews. Open
    the `PhotoFilterViewController`, delete everything inside the `checkSavedPhoto()`
    method, and update it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This method will make sure that we have an image and then save it to Core Data
    with its restaurant ID. We need to add a method for when Save is tapped. Add the
    following method inside the private extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, when a user taps the Save button, this will make sure that an image is
    saved; if so, it will save the data to Core Data. Before we can save, we need
    to pass the restaurant identifier to the PhotoFilterViewController.swift.
  prefs: []
  type: TYPE_NORMAL
- en: Open RestaurantDetail.storyboard and select the segue we are using to go to
    the Photo Filter View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Attributes inspector of the Utilities panel, update Identifier under
    Storyboard Segue to say `showPhotoFilter`. Then, hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, open the `Segue.swift` file in the `Misc` folder under the `Common`
    folder and verify that the following `case` statement is included; if not, add
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `RestaurantDetailViewController.swift`, update your `prepare` method
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following method after the `showReview()` method inside your
    `private` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are passing the restaurant identifier to our photos and we now have our photos
    saved in Core Data. After you save a photo, you are brought back to the restaurant
    detail view but next we need to display the photos in our Detail section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are missing one last thing. The photo review and review sections need to
    pull data from the database for it to be displayed. We need to create a class
    for each one, so let''s start by adding this class now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `Reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, right-click the folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Class: `ReviewsViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hit Next and then Create. When the file opens, replace everything with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add our `private` extension by adding the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We are doing the basic setup that we did before. Our `checkReviews()` method
    is a bit different, because we are first checking to see if there are any reviews
    at all.  If there are not, we display a message that says `There are currently
    no reviews. If there are, we do not display anything.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add our Collection View extensions by adding the following to
    our data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add our Collection View extensions by adding the following to
    our layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, for our Collection View to work, we need to create our cell and an extension
    of this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71ab0552-80b5-4466-a98f-479fd5617c2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click the `Review` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ReviewCell`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UICollectionViewCell`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and open up `RestaurantDetail.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `Container` that we created for `Reviews` and select the cell inside
    the Collection View. Select the View Controller and in the Identity inspector
    and under Custom Class set Class to ReviewsViewController.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Utilities panel, under the Size inspector, update the Size to Custom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set Width to `350` and Height to `200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Attributes inspector, set the Identifier to `reviewCell` and the background
    color to `#F2F2F2`. You can add this color to your Color set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then under Identity inspector, update the class to `ReviewCell`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Collection View, and in the Identity inspector click and drag from
    dataSource and delegate to the View Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the cell UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s get all of our UI elements into the `reviewCell` (the example shown
    earlier):'
  prefs: []
  type: TYPE_NORMAL
- en: In the object library of the Utilities panel, type label in the filter field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag out four Labels into the Cell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select one of the Labels and, in the Size inspector, update the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `8`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `116`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, select the Attributes inspector in the Utilities panel; update the Font
    to Avenir Next Condensed Demi Bold and set the Size to `16`**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select another label and update the following values in the Size inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `245`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `97`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `21`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, select the Attributes inspector in the Utilities panel; update the Font
    to Avenir Next Condensed Medium, set the Size to `16`, and set Color to LetsEat
    Light Grey**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select another label and update the following values in the Size inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `245.5`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `21`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `97`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `21`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, select the Attributes inspector in the Utilities panel; update the Font
    to Avenir Next Condensed Medium, set the Size to `16`, and set color to LetsEat
    Light Grey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the last label and update the following values in the Size inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'X: `8`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Y: `54`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Width: `334`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: `137`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, select the Attributes inspector in the Utilities panel; update the Font
    to Avenir Next Condensed Regular and set the Size to `16`**.** Now, set Lines
    to `6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are done with setting up our cell, but we just need to add Auto Layout to
    our cells.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Auto Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we do not add Auto Layout to our cells, they will not look correct; so,
    let''s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `RestaurantDetail.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the Container View, the one used for reviews, and then the Pin
    icon. Enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `0`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bottom: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, select the Collection View, the one used for reviews, and then the Pin
    icon. Enter the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Top: `0`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Right: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bottom: `` `0` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Left: `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constrain to margins: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Add 4 Constraints.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build and run your project and add a couple of reviews; you should now see
    reviews appearing in your restaurant details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce8f522a-02b5-4e7b-ac02-0d46badfc75b.png)'
  prefs: []
  type: TYPE_IMG
- en: We have two more things I would like to update before the end of this chapter. 
    Now that we are saving reviews, we have an overall rating for restaurants. Let's
    add this next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an overall rating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add an overall rating, we need to pull all of the reviews from Core Data,
    add them all together, and get an average. Let''s add a new method to our Core
    Data manager to handle this. Please add the following inside `CoreDataManager.swift`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, we fetch all of the reviews for a restaurant by their ID. 
    Then, we use the `reduce` method to add them all together, and then finally we
    calculate the average. Now let''s use this newly created method.  Open up `RestaurantDetailViewController.swift`.
    Under our `selectedRestaurant` variable add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, under the `createRating()` method, we just set our rating to `3.5` stars. 
    Update this method to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our method is checking to make sure we have a restaurant ID.  If we do,
    then we set the rating for `ratingView`. We also update the overall label to display
    the average. Build and run your project and you should now see a rating for restaurants
    that have them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89a808cd-0ccd-4b77-8969-9980b561c0e6.png)'
  prefs: []
  type: TYPE_IMG
- en: We are finished with this chapter, but there is one section left that we did
    not do and that's Photo Reviews. Your challenge is to add photo reviews and get
    them displayed in the Collection View.  We covered everything in the chapter,
    and all of the code is the same.  If you get stuck, feel free to use the project
    files in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot in this chapter and we've now finished building our main app's
    primary functionality. Our app is starting to take shape. We were able to create
    a Core Data model and can now save reviews to the Core Data. We also can display
    all the reviews for a restaurant or pull out the last review and display it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will work on putting the final touches to our app to
    make it more of a universal app. Once we do that, our main app is finished and
    we can focus on adding some cool features, such as an iMessage app, notifications,
    and 3D Touch.
  prefs: []
  type: TYPE_NORMAL
