["```kt\n    dependencies {\n        […]\n        androidTestImplementation \"androidx.compose.ui:ui-\n            test-junit4:$compose_version\"\n        debugImplementation \"androidx.compose.ui:ui-test-\n            manifest:$compose_version\"\n    }\n    ```", "```kt\n    import androidx.compose.ui.test.junit4.*\n    import org.junit.Rule\n    class RestaurantsScreenTest {\n        @get:Rule\n    val testRule: ComposeContentTestRule = \n            createComposeRule()\n    }\n    ```", "```kt\n@Composable\nfun RestaurantsScreen(\n    state: RestaurantsScreenState,\n    onItemClick: (id: Int) -> Unit,\n    onFavoriteClick: (id: Int, oldValue: Boolean) -> Unit\n) {\n    Box(…) {\n        LazyColumn(…) {\n            items(state.restaurants) { restaurant ->\n                RestaurantItem(restaurant,\n                   onFavoriteClick = { id, oldValue ->\n                        onFavoriteClick(id, oldValue) },\n                   onItemClick = { id -> \n                        onItemClick (id) })\n            }\n        }\n        if(state.isLoading)\n            CircularProgressIndicator()\n        if(state.error != null)\n            Text(state.error)\n    }\n}\n```", "```kt\nclass RestaurantsViewModel @Inject constructor(…) : ViewModel() {\n    private val _state = mutableStateOf(\n        RestaurantsScreenState(\n            restaurants = listOf(),\n            isLoading = true\n        )\n    )\n    […]\n    private val errorHandler = CoroutineExceptionHandler\n    { ... ->\n        exception.printStackTrace()\n        _state.value = _state.value.copy(\n            error = exception.message,\n            isLoading = false)\n}\n    init { getRestaurants() }\n    fun toggleFavorite(itemId: Int, oldValue: Boolean) {\n        […]\n    }\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getRestaurantsUseCase()\n            _state.value = _state.value.copy(\n                restaurants = restaurants,\n                isLoading = false)\n        }\n    }\n}\n```", "```kt\n    class RestaurantsScreenTest {\n        @get:Rule\n        val testRule: ComposeContentTestRule = \n            createComposeRule()\n\n        @Test\n        fun initialState_isRendered() {  }\n    }\n    ```", "```kt\n        @Test\n        fun initialState_isRendered() {\n            testRule.setContent { }\n        }\n    ```", "```kt\n@Test\nfun initialState_isRendered() {\n    testRule.setContent {\n        RestaurantsAppTheme {\n            RestaurantsScreen()\n        }\n    }\n}\n```", "```kt\n        @Test\n        fun initialState_isRendered() {\n            testRule.setContent {\n                RestaurantsAppTheme {\n                    RestaurantsScreen(\n                        state = RestaurantsScreenState(\n                            restaurants = emptyList(),\n                            isLoading = true),\n    onFavoriteClick = \n                            {  _: Int, _: Boolean ->  },\n                        onItemClick = { })\n                }\n            }\n        }\n    ```", "```kt\n@Composable\nfun RestaurantsScreen(…) {\n    Box(…) {\n        LazyColumn(…) {…}\n        if(state.isLoading)\n            CircularProgressIndicator()\n        if(state.error != null)\n            Text(state.error)\n    }\n}\n```", "```kt\n@Composable\nfun RestaurantsScreen(…) {\n    Box(…) {\n        LazyColumn(…) {…}\n        if(state.isLoading)\n            CircularProgressIndicator()\n        […]\n    }\n}\n```", "```kt\n    object Description {\n        const val RESTAURANTS_LOADING =\n                \"Circular loading icon\"\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen(…) {\n        Box(…) {\n            LazyColumn(…) { … }\n            if (state.isLoading)\n                CircularProgressIndicator(\n                    Modifier.semantics {\n                        this.contentDescription =\n                           Description.RESTAURANTS_LOADING\n                    })\n            […]\n        }\n    }\n    ```", "```kt\n    @Test\n    fun initialState_isRendered() {\n        testRule.setContent {\n            RestaurantsAppTheme { RestaurantsScreen(…) }\n    initialState_isRendered() method, every test method has two parts – the setup of the expected behavior and then the assertions that verify that the resultant behavior is correct.\n    ```", "```kt\n    @Test\n    fun stateWithContent_isRendered() {\n        testRule.setContent {\n            RestaurantsAppTheme {\n                RestaurantsScreen(\n                    state = RestaurantsScreenState(\n                        restaurants =,\n                        isLoading = false),\n                    onFavoriteClick =  \n                        { _: Int, _: Boolean -> },\n                    onItemClick = { }\n                )\n            }\n        }\n    }\n    ```", "```kt\n    object DummyContent {\n        fun getDomainRestaurants() = arrayListOf(\n            Restaurant(0, \"title0\", \"description0\", false),\n            Restaurant(1, \"title1\", \"description1\", false),\n            Restaurant(2, \"title2\", \"description2\", false),\n            Restaurant(3, \"title3\", \"description3\", false))\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_isRendered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        testRule.setContent {\n            RestaurantsAppTheme {\n                RestaurantsScreen(\n                    state = RestaurantsScreenState(\n                        restaurants = restaurants,\n                        isLoading = false), […])\n            }\n        }\n    }\n    ```", "```kt\n@Composable\nfun RestaurantsScreen(state: RestaurantsScreenState, […]) {\n    Box(…) {\n        LazyColumn(…) {\n            items(state.restaurants) { restaurant ->\n                 RestaurantItem(…)\n             }\n        }\n        if(state.isLoading)\n            CircularProgressIndicator()\n        if(state.error != null)\n            Text(state.error)\n    }\n}\n```", "```kt\n@Test\nfun stateWithContent_isRendered() {\n    val restaurants = DummyContent.getDomainRestaurants()\n    testRule.setContent {\n        RestaurantsAppTheme {\n            RestaurantsScreen(\n                state = RestaurantsScreenState(\n                    restaurants = restaurants,\n                    isLoading = false\n                ),\n                […])\n        }\n    }\n    testRule.onNodeWithText(restaurants[0].title)\n        .assertIsDisplayed()\n}\n```", "```kt\n    @Test\n    fun stateWithContent_isRendered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        testRule.setContent { ... }\n        testRule.onNodeWithText(restaurants[0].title)\n    .assertIsDisplayed()\n        testRule.onNodeWithText(restaurants[0].description)\n            .assertIsDisplayed()\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_isRendered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        testRule.setContent { … }\n        testRule.onNodeWithText(restaurants[0].title)\n            .assertIsDisplayed()\n        testRule.onNodeWithText(restaurants[0].description)\n            .assertIsDisplayed()\n        testRule.onNodeWithContentDescription(\n            Description.RESTAURANTS_LOADING\n        ).assertDoesNotExist()\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_ClickOnItem_isRegistered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        val targetRestaurant = restaurants[0]\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_ClickOnItem_isRegistered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n    val targetRestaurant = restaurants[0]\n        testRule.setContent {\n            RestaurantsAppTheme {\n                RestaurantsScreen(\n                    state = RestaurantsScreenState(\n                        restaurants = restaurants,\n                        isLoading = false),\n                    onFavoriteClick = { _, _ -> },\n                    onItemClick = { id ->  })\n            }\n        }\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_ClickOnItem_isRegistered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        val targetRestaurant = restaurants[0]\n        testRule.setContent {\n            RestaurantsAppTheme {\n                RestaurantsScreen(\n                    state = RestaurantsScreenState(\n                        restaurants = restaurants,\n                        isLoading = false),\n                    onFavoriteClick = { _, _ -> },\n                    onItemClick = { id -> })\n            }\n        }\n        testRule.onNodeWithText(targetRestaurant.title)\n            .performClick()\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_ClickOnItem_isRegistered() {\n        val restaurants = DummyContent.getDomainRestaurants()\n        val targetRestaurant = restaurants[0]\n        testRule.setContent {\n            RestaurantsAppTheme {\n                RestaurantsScreen(\n                    state = RestaurantsScreenState(\n                        restaurants = restaurants,\n                        isLoading = false),\n                    onFavoriteClick = { _, _ -> },\n                    onItemClick = { id ->\n                        assert(id == targetRestaurant.id)\n                    }\n                )\n            }\n        }\n        testRule.onNodeWithText(targetRestaurant.title)\n            .performClick()\n    }\n    ```", "```kt\nclass RestaurantsViewModel @Inject constructor(…) : ViewModel() {\n    private val _state = mutableStateOf(\n        RestaurantsScreenState(\n            restaurants = listOf(),\n            isLoading = true\n        )\n    )\n    […]\n    private val errorHandler = CoroutineExceptionHandler\n    { … ->\n        exception.printStackTrace()\n        _state.value = _state.value.copy(\n            error = exception.message, \n            isLoading = false)\n    }\n    init { getRestaurants() }\n    fun toggleFavorite(itemId: Int, oldValue: Boolean) {\n        […] \n    }\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getRestaurantsUseCase()\n            _state.value = _state.value.copy(\n                restaurants = restaurants,\n                isLoading = false)\n        }\n    }\n}\n```", "```kt\n        @Test\n        fun initialState_isProduced() {  }\n    ```", "```kt\n    @Test\n    fun initialState_isProduced() {\n        val viewModel = getViewModel()\n    }\n    ```", "```kt\n    private fun getViewModel(): RestaurantsViewModel {\n        return RestaurantsViewModel()\n    }\n    ```", "```kt\n    private fun getViewModel(): RestaurantsViewModel {\n        val restaurantsRepository = \n            RestaurantsRepository(?, ?)\n        val getSortedRestaurantsUseCase =\n            GetSortedRestaurantsUseCase(restaurantsRepository)\n        val getInitialRestaurantsUseCase =\n            GetInitialRestaurantsUseCase(\n                restaurantsRepository,\n                getSortedRestaurantsUseCase)\n        val toggleRestaurantUseCase =\n            ToggleRestaurantUseCase(\n                restaurantsRepository,\n                getSortedRestaurantsUseCase\n            )\n    return RestaurantsViewModel(\n            getInitialRestaurantsUseCase,\n            toggleRestaurantUseCase\n        )\n    }\n    ```", "```kt\n    class FakeApiService : RestaurantsApiService {\n        override suspend fun getRestaurants()\n                : List<RemoteRestaurant> {\n            delay(1000)\n            return DummyContent.getRemoteRestaurants()\n        }\n        override suspend fun getRestaurant(id: Int)\n                : Map<String, RemoteRestaurant> {\n            TODO(\"Not yet implemented\")\n        }\n    }\n    ```", "```kt\n    object DummyContent {\n        fun getDomainRestaurants() = arrayListOf(…)\n        fun getRemoteRestaurants() = getDomainRestaurants()\n            .map {\n                RemoteRestaurant(\n                    it.id,\n                    it.title,\n                    it.description\n                )\n            }\n    }\n    ```", "```kt\n    class FakeRoomDao : RestaurantsDao {\n        private var restaurants =\n                  HashMap<Int, LocalRestaurant>()\n        override suspend fun getAll()\n                : List<LocalRestaurant> {\n            delay(1000)\n            return restaurants.values.toList()\n        }\n        override suspend fun addAll(\n            restaurants: List<LocalRestaurant>\n        ) {\n            restaurants.forEach { \n                this.restaurants[it.id] = it \n            }\n        }\n        override suspend fun update(\n            partialRestaurant: PartialLocalRestaurant\n        ) {\n            delay(1000)\n            updateRestaurant(partialRestaurant)\n        }\n        override suspend fun updateAll(\n            partialRestaurants: List<PartialLocalRestaurant>\n        ) {\n            delay(1000)\n            partialRestaurants.forEach { \n                updateRestaurant(it) \n            }\n        }\n        override suspend fun getAllFavorited()\n                : List<LocalRestaurant> {\n            return restaurants.values.toList()\n                .filter { it.isFavorite }\n        }\n    }\n    ```", "```kt\n    class FakeRoomDao : RestaurantsDao {\n        [...]\n        override suspend fun getAllFavorited()\n                : List<LocalRestaurant> { ... }\n        private fun updateRestaurant(\n            partialRestaurant: PartialLocalRestaurant\n        ) {\n    val restaurant = \n               this.restaurants[partialRestaurant.id]\n           if (restaurant != null)\n               this.restaurants[partialRestaurant.id] =\n                   restaurant.copy(\n    isFavorite = \n                           partialRestaurant.isFavorite\n                   )\n        }\n    }\n    ```", "```kt\nprivate fun getViewModel(): RestaurantsViewModel {\n    val restaurantsRepository = RestaurantsRepository(\n        FakeApiService(), FakeRoomDao())\n    […]\n    return RestaurantsViewModel(…)\n}\n```", "```kt\n@Test\nfun initialState_isProduced() {\n    val viewModel = getViewModel()\n}\n```", "```kt\n    @Test\n    fun initialState_isProduced() {\n        val viewModel = getViewModel()\n        val initialState = viewModel.state.value\n    }\n    ```", "```kt\n    @Test\n    fun initialState_isProduced() {\n        val viewModel = getViewModel()\n        val initialState = viewModel.state.value\n        assert(\n            initialState == RestaurantsScreenState(\n                restaurants = emptyList(),\n                isLoading = true,\n                error = null)\n        )\n    }\n    ```", "```kt\n@HiltViewModel\nclass RestaurantsViewModel @Inject constructor(...) : […] {\n    [...]\n    fun toggleFavorite(itemId: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) { ... }\n    }\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) { ... }\n    }\n}\n```", "```kt\n    dependencies {\n        […]\n        testImplementation \"com.google.truth:truth:1.1.2\"\n        testImplementation 'org.jetbrains.kotlinx:kotlinx-\n            coroutines-test:1.6.1'\n    }\n    ```", "```kt\n    @ExperimentalCoroutinesApi\n    class RestaurantsViewModelTest {\n        private val dispatcher = StandardTestDispatcher()\n        private val scope = TestScope(dispatcher)\n        @Test\n        fun initialState_isProduced() {…}\n        private fun getViewModel(): RestaurantsViewModel {…}\n    }\n    ```", "```kt\n    @Test\n    fun initialState_isProduced() = scope.runTest {\n        val viewModel = getViewModel()\n    val initialState = viewModel.state.value\n        assert(\n            initialState == RestaurantsScreenState(\n                restaurants = emptyList(),\n                isLoading = true,\n                error = null))\n    }\n    ```", "```kt\n@HiltViewModel\nclass RestaurantsViewModel @Inject constructor(...) : […] {\n    [...]\n    fun toggleFavorite(itemId: Int, oldValue: Boolean) {\n        viewModelScope.launch(errorHandler) { ... }\n    }\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) { ... }\n    }\n}\n```", "```kt\n    @HiltViewModel\n    class RestaurantsViewModel @Inject constructor(\n       private val getRestaurantsUseCase: […],\n       private val toggleRestaurantsUseCase: […],\n       private val dispatcher: CoroutineDispatcher) :  \n    ViewModel(){\n        [...]\n        fun toggleFavorite(itemId: Int, oldValue: Boolean) {\n            viewModelScope.launch(errorHandler \n                + dispatcher) { … }\n        }\n        private fun getRestaurants() {\n            viewModelScope.launch(errorHandler \n                + dispatcher) { … }\n        }\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object DispatcherModule {\n        @Provides\n        fun providesMainDispatcher(): CoroutineDispatcher \n            = Dispatchers.Main\n    }\n    ```", "```kt\n    @Qualifier\n    @Retention(AnnotationRetention.BINARY)\n    annotation class MainDispatcher\n\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object DispatcherModule {…}\n    ```", "```kt\n    @Qualifier\n    @Retention(AnnotationRetention.BINARY)\n    annotation class MainDispatcher\n    @Module\n    @InstallIn(SingletonComponent::class)\n    object DispatcherModule {\n        @MainDispatcher\n        @Provides\n        fun providesMainDispatcher(): CoroutineDispatcher\n            = Dispatchers.Main\n    }\n    ```", "```kt\n    @HiltViewModel\n    class RestaurantsViewModel @Inject constructor(\n       private val getRestaurantsUseCase: […],\n       private val toggleRestaurantsUseCase: […],\n       @MainDispatcher private val dispatcher: \n    CoroutineDispatcher\n    ) : ViewModel() { ... }\n    ```", "```kt\n    @ExperimentalCoroutinesApi\n    class RestaurantsViewModelTest {\n        private val dispatcher = StandardTestDispatcher()\n        private val scope = TestScope(dispatcher)\n        @Test\n        fun initialState_isProduced() = scope.runTest {…}\n        private fun getViewModel(): RestaurantsViewModel {\n            […]\n            return RestaurantsViewModel(\n                getInitialRestaurantsUseCase,\n                toggleRestaurantUseCase,\n                dispatcher)\n        }\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_isProduced() = scope.runTest {\n        val testVM = getViewModel()\n        val currentState = testVM.state.value\n        assert(\n            currentState == RestaurantsScreenState(\n                restaurants = \n                       DummyContent.getDomainRestaurants(),\n                isLoading = false,\n                error = null)\n        )\n    }\n    ```", "```kt\n    @Test\n    fun stateWithContent_isProduced() = scope.runTest {\n        val testVM = getViewModel()\n        advanceUntilIdle()\n        val currentState = testVM.state.value\n        assert(\n            currentState == RestaurantsScreenState(\n                restaurants = \n                    DummyContent.getDomainRestaurants(),\n                isLoading = false,\n                error = null)\n        )\n    }\n    ```", "```kt\n@Singleton\nclass RestaurantsRepository @Inject constructor(…) {\n    suspend fun toggleFavoriteRestaurant(…) =\n        withContext(Dispatchers.IO) {…}\n    suspend fun getRestaurants() : List<Restaurant> {\n        return withContext(Dispatchers.IO) {…}\n    }\n    suspend fun loadRestaurants() {\n        return withContext(Dispatchers.IO) {…}\n    }\n    private suspend fun refreshCache() {…}\n}\n```", "```kt\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class MainDispatcher\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class IoDispatcher                         \n@Module\n@InstallIn(SingletonComponent::class)\nobject DispatcherModule {\n    @MainDispatcher\n    @Provides\n    fun providesMainDispatcher(): CoroutineDispatcher =        \nDispatchers.Main\n    @IoDispatcher\n    @Provides\nfun providesIoDispatcher(): CoroutineDispatcher = \n        Dispatchers.IO\n}\n```", "```kt\n    @Singleton\n    class RestaurantsRepository @Inject constructor(\n        private val restInterface: RestaurantsApiService,\n        private val restaurantsDao: RestaurantsDao,\n    @IoDispatcher private val dispatcher: \n            CoroutineDispatcher\n    ) {\n        suspend fun toggleFavoriteRestaurant(…) =  \n            withContext(dispatcher) {…}\n        suspend fun getRestaurants() : List<Restaurant> {\n            return withContext(dispatcher) {…}\n        }\n        suspend fun loadRestaurants() {\n            return withContext(dispatcher) {…}\n        }\n        private suspend fun refreshCache() {…}            }\n    ```", "```kt\n    private fun getViewModel(): RestaurantsViewModel {\n        val restaurantsRepository = RestaurantsRepository(\n            FakeApiService(), \n            FakeRoomDao(),\n            dispatcher)\n        […]\n        return RestaurantsViewModel(\n            getInitialRestaurantsUseCase,\n            toggleRestaurantUseCase,\n            dispatcher)\n    }\n    ```", "```kt\n@ExperimentalCoroutinesApi\nclass ToggleRestaurantUseCaseTest {\n    private val dispatcher = StandardTestDispatcher()\n    private val scope = TestScope(dispatcher)\n    @Test\n    fun toggleRestaurant_IsUpdatingFavoriteField() = \n            scope.runTest {\n        // Setup useCase\n        val restaurantsRepository = RestaurantsRepository(\n            FakeApiService(),\n            FakeRoomDao(),\n            dispatcher)\n        val getSortedRestaurantsUseCase = \n            GetSortedRestaurantsUseCase(restaurantsRepository)\n        val useCase = ToggleRestaurantUseCase(\n            restaurantsRepository,\n            getSortedRestaurantsUseCase)\n        // Preload data\n        restaurantsRepository.loadRestaurants()\n        advanceUntilIdle()\n        // Execute useCase\n        val restaurants = DummyContent.getDomainRestaurants()\n        val targetItem = restaurants[0]\n        val isFavorite = targetItem.isFavorite\n        val updatedRestaurants = useCase(\n            targetItem.id, \n            isFavorite\n        )\n        advanceUntilIdle()\n        // Assertion\n        restaurants[0] = targetItem.copy(isFavorite = \n            !isFavorite)\n        assert(updatedRestaurants == restaurants)\n    }\n}\n```"]