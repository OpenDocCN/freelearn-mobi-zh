- en: Chapter 9. Handling Multiple Devices and Networking your Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Allowing your application to integrate with social networks is a great way to
    promote your finished product. Many games enable the player to upload their high
    scores and share them among other users playing the same title. Some provide challenges
    that need to be completed successfully in order to unlock achievements. Social
    networks enhance the gaming experience and provide great exposure for the developer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We'll also go into more detail about build configuration since we're getting
    more accustomed to programming. Understanding the importance of configuring your
    device builds is mandatory for cross-platform development. This is a capability
    that Corona SDK can handle with ease across iOS and Android devices.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages to Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding achievements and leaderboards with OpenFeint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's add in these finishing touches!
  prefs: []
  type: TYPE_NORMAL
- en: Return to configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build settings and runtime configuration were briefly discussed in [Chapter
    2](ch02.html "Chapter 2. Lua Crash Course and the Corona Framework"), *Lua Crash
    Course and the Corona Framework*. Let's get into more specific details on handling
    a variety of devices on the iOS and Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Build configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a variety of ways to handle device orientation to match the settings
    your game design requires.
  prefs: []
  type: TYPE_NORMAL
- en: Orientation support (iOS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are scenarios in which you want the native UI elements to autorotate,
    or to be oriented in a certain way, but you also want to maintain a fixed coordinate
    system within Corona.
  prefs: []
  type: TYPE_NORMAL
- en: 'To lock Corona''s orientation while allowing native iPhone UI elements to rotate,
    add a content parameter in `build.settings` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To lock Corona's internal coordinate system to portrait orientation while locking
    iPhone UI elements to landscape orientation, you could do the following in `build.settings:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Orientation support (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Android platform supports two orientations: `portrait` and `landscapeRight`.
    The orientations *landscapeLeft* and *portraitUpsideDown* have no effect on Android.
    Also, autorotation is not currently supported on Android. The default orientation
    doesn''t affect Android devices. The orientation is initialized to the actual
    orientation of the device (unless only one orientation is specified).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of an Android-specific `build.settings` file (you may also
    combine Android and iPhone settings in the same file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Version code and version name (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `versionCode` and `versionName` can be set within an optional`"android"`
    table in `build.settings`.
  prefs: []
  type: TYPE_NORMAL
- en: The `versionCode` field is defaulted to`"1"`, while the `versionName` field
    is defaulted at`"1.0"` if it's not set in the `build.settings` file. When an updated
    version of an application is submitted to the Google Play Store, the `versionCode`
    and `versionName` also have to be updated. All version numbers for `versionCode`
    have to be whole numbers. The `versionCode` cannot contain any decimal numbers.
    The `versionName` can contain decimals.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, see *android:versionCode* and *android:versionName:*`http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode.`
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `versionCode` is an internal number used to distinguish application releases
    for the Google Play Store. It is not the same as the version provided by the Corona
    build dialog. The `versionName` is the version number shown to users.
  prefs: []
  type: TYPE_NORMAL
- en: Application permissions (Android)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An optional`"androidPermissions"` table can be used to specify permissions,
    using string values as given in the *Android Manifest Reference:* [http://developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).
  prefs: []
  type: TYPE_NORMAL
- en: Developers should use permissions that match their application requirements.
    For example, if network access is required, the Internet permission needs to be
    set.
  prefs: []
  type: TYPE_NORMAL
- en: Content scaling on an easier level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Content scaling throughout multiple devices can be frustrating at times if you've
    never addressed them before. While the iPhone and iPhone 4 are easy to scale across
    evenly, it takes some other individual sizes to manipulate screen sizes with the
    iPad, which is at 768 x 1024\. The Droid is 480 x 854 and Samsung Galaxy tablet
    is 600 x 1024 just to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: When setting up your `config.lua` like we've done in the previous chapters,
    we had our content set to `width = 320, height = 480`, and `scale = "letterbox"`.
    If building for Android devices,`"zoomStretch"` works best to accommodate varying
    screen sizes on the platform. This helps to build between iOS/Android devices
    together and present display images that are large enough to fit on a variety
    of screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to scale for larger screen sizes and then scale down, use the screen
    size of the iPad. Your `config.lua` would look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: While the preceding example is another solution to scale content, it's important
    to remember the limitations in texture memory involved with larger (high resolution)
    images. While devices such as the iPad, iPhone 4, and the Samsung Galaxy tablet
    will handle this just fine, the iPhone 3GS and older devices will have far less
    texture memory available to handle large graphics.
  prefs: []
  type: TYPE_NORMAL
- en: A way to resolve this potential problem is to use *Dynamic Image Resolution*
    to substitute assets that are better suited for low-end devices and high-end devices.
    We will discuss this topic in more detail later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The best of both worlds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you may have noticed, some of the background images we used in our sample
    apps are scaled at 380 x 570\. This happens to be the size that fills the entire
    screen on all common devices for both iOS and Android. And better yet, it is a
    middle ground for compensating for higher- and lower-resolution images on any
    device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for your content to be displayed as evenly as possible, the following
    must be set up accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Settings for the `config.lua` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In any file that contains any of your display images, a typical background
    would be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Any content with a size of 320 x 480 is considered the focus area. Anything
    outside of the area is cropped, but will fill the screen with content on any device.
  prefs: []
  type: TYPE_NORMAL
- en: The deeper meaning of dynamic image resolutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We know we can swap base images`"image.png"` used for iOS devices (3GS and lower)
    and double-resolution images`"image@2x.png"` (for the iPhone 4 which has retina
    display). This only occurs since Apple devices can tell when the screen size is
    twice the resolution size of the original content.
  prefs: []
  type: TYPE_NORMAL
- en: A naming scheme is available for use to handle devices such as the iPad and
    Android handsets. Knowing how to handle the scaling of assets affected for the
    device proposed is half the battle. We'll have to define what resolution scale
    needs to be addressed for Corona to access the assets they're directed towards.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the line: `display.newImageRect( [parentGroup,] filename [, baseDirectory]
    w, h )` will call out your dynamic resolution images.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, we''ve used `["@2x"] = 2` to call out the higher resolution image
    when available in our project for iOS devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example will only work for iPhone 4 and iPad since it surpasses
    the base size of 320 x 480 on both devices. If we wanted to make it accessible
    to the Droid, the scale threshold would be 1.5\. For an Android tablet to work,
    such as the Samsung Galaxy tablet, the scale threshold is 1.875\. So how do we
    figure out these numbers? Simple. Take the width of the higher-end device and
    divide it by 320 (the base size). For example:'
  prefs: []
  type: TYPE_NORMAL
- en: The Droid dimensions are 480 x 854\. Divide 480 by 320 and it equals 1.5.
  prefs: []
  type: TYPE_NORMAL
- en: The Samsung Galaxy tablet dimensions are 600 x 1024\. Divide 600 by 320 and
    it equals 1.875.
  prefs: []
  type: TYPE_NORMAL
- en: 'If trying to manage both iOS and Android devices in the same project, you can
    change your `imageSuffix` in the `config.lua` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: -- or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using either of the preceding examples will trigger the proposed Android devices
    to display the higher resolution image.
  prefs: []
  type: TYPE_NORMAL
- en: The `imageSuffix` doesn't necessarily have to be`"@2x"`, it can be anything
    like`"@2", "_lrg"`, or even`"-2x"`. As long as your higher-resolution image has
    the intended suffix after the primary image name, it'll work just fine.
  prefs: []
  type: TYPE_NORMAL
- en: High-resolution sprite sheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: High-resolution sprite sheets are not handled the same way as dynamic image
    resolutions. While you can continue using the same naming convention to differentiate
    your high-resolution images from your basic images, the image will not be able
    to use `display.newImageRect()when` referring to sprite sheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your current content scale is `width = 320, height = 480`, and `scale =
    "letterbox"` in your `config.lua` file, then the scale output for the following
    devices will demonstrate the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iPhone = 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iPhone 4 = 0.5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Droid = 0.666666668653488`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iPad = 0.46875`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a basic sprite sheet that matches the scale for an iPhone will display
    sharp and clean images. When the same sprite sheet is applied to the iPhone 4,
    the display will match the content scale of the device, but the sprite sheet will
    look slightly pixilated and blurry around the edges. Using `display.contentScaleX`
    and calling some methods will solve that problem for you. Notice that `displayScale
    < 1` will access the high-resolution sprite sheet based on the preceding device
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Networking your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have completed developing your main game framework, it's good to think
    about how to network it if you decide to do so.
  prefs: []
  type: TYPE_NORMAL
- en: We all have used some kind of networking tool during some point in our lives,
    such as Twitter and Facebook. Maybe you currently use these applications, but
    the point is you've read updates from other users about a new game that came out
    or someone is spreading the word to download a game and compete with them. You
    can be that developer and develop the game they're talking about!
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating networking mechanisms in your game does not have to be a hassle.
    It only takes several lines of code to get it working.
  prefs: []
  type: TYPE_NORMAL
- en: Posting to Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tweet, tweet, tweet... Twitter is a networking tool that connects you to the
    latest information that appeals to your interests. It is also a great tool to
    share information with others about your business and of course your game. Reach
    out to the game development audience by promoting your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for posting on Twitter to work, you need to create a Twitter account
    at: [http://twitter.com/](http://twitter.com/) and make sure that you''re logged
    in.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding Twitter in your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to implement Twitter in our apps by accessing a web service through
    UI buttons.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Twitter Web Pop-Up` project folder to your
    desktop. All the configuration, libraries, and assets needed are already included.
    You can download the project files accompanying this book from the Packt website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a local function called `onOpenTouch()` with an event parameter. Add
    in an `if` statement so the event receives a`"release"` action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the local variable called `message`, add in the following string statement
    and concatenate `score`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add in `local myString` and apply a `string.gsub()` for `message` to replace
    space instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Introduce the `native.showWebPopup()` function that links to the Twitter account.
    Concatenate `myString` to include the pre-loaded message. Close the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set up the `openBtn` UI function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a local function called `onCloseTouch()` with an `event` parameter. Add
    an `if` statement with `event.phase == "release"` to activate `native.cancelWebPopup()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set up the `closeBtn` UI function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and run the project in the simulator. Make sure you're connected
    to the Internet to see the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're currently not logged in to your Twitter account, you'll be asked to
    log in before you see the results of the tweet from our code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—adding Twitter in your apps](img/1888_09_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Near the top of the code we set a variable, `local score = 100`. This will be
    used in our Twitter message.
  prefs: []
  type: TYPE_NORMAL
- en: In the `onOpenTouch(event)` function, a web pop-up will load upon the release
    of `openBtn`. The text that will be posted is displayed in a string format under
    the variable, local message. You will notice that we concatenate `score` into
    the string so it displays the value in the message post.
  prefs: []
  type: TYPE_NORMAL
- en: '`local myString, string.gsub()` is used to replace all the instances indicated
    in a pattern inside the string. In this case, it takes the string inside message
    and searches for every empty space between each word and replaces it with `%20\.
    %20` encodes URL parameters to indicate spaces. The extra `%` acts as an escape
    character.'
  prefs: []
  type: TYPE_NORMAL
- en: The `native.showWebPopup()` function displays at dimensions 320 x 300; about
    half the screen size on a device. The URL to display the Twitter message dialog
    is added and concatenates `myString`.
  prefs: []
  type: TYPE_NORMAL
- en: When the web pop-up no longer needs to be used and needs to be closed, `onCloseTouch(event)`
    is called by `closeBtn`. This will take the `event` parameter`"release"` and call
    the `native.cancelWebPopup()`. This particular function will dismiss the current
    web pop-up.
  prefs: []
  type: TYPE_NORMAL
- en: Posting to Facebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another social networking tool that can be used to share information about your
    game is Facebook. You can easily customize a post to link information about your
    game or share messages about high scores and insist upon other users downloading
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to post messages to Facebook, you need to be logged in to your Facebook
    account or create one at: [http://www.facebook.com/](http://www.facebook.com/).
    You will have to obtain an App ID from the *Facebook Developer* website at: [https://developers.facebook.com/](http://https://developers.facebook.com/).
    The App ID is a unique identifier for your site that determines what the right
    level of security is in place between the user and the app page/website.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created an App ID, you will also need to edit the app information
    and choose how you want it to integrate with Facebook. You are given several choices,
    such as: Website, Native iOS App, and Native Android App, just to name a few.
    The website integration must be selected and filled in with a valid URL in order
    for Facebook to redirect to the specified URL for posts dealing with web pop-ups.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—adding Facebook to your apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to our Twitter example, we'll be incorporating Facebook posts with a
    web pop-up as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Facebook Web Pop-Up` project folder to
    your desktop. All the configuration, libraries, and assets needed are already
    included. You can download the project files accompanying this book from the Packt
    website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a local function called `onOpenTouch()` with an event parameter. Add
    in an `if` statement when the event receives a`"release"` action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add in the following local variables that include the strings we'll be implementing
    into the Facebook post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Introduce the native web pop-up function that links to the Facebook account.
    Include parameters for the Facebook Dialog box that redirects the URL of your
    preferred website, the display with a touch mode that connects to your app URL,
    and an image URL that presents your app icon or company logo. Concatenate all
    variables with string methods to output all messages. Close the function. Add
    in the `openBtn` UI function. (You will need to replace all the URL information
    below with your own).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More information pertaining to the Facebook Dialog can be found on the *Facebook
    Developers* website at: [http://developers.facebook.com/docs/reference/dialogs/](http://developers.facebook.com/docs/reference/dialogs/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a local function called `onCloseTouch()` with an event parameter. Add
    an `if` statement with `event.phase == "release"` to activate `native.cancelWebPopup()`.
    Set up the `closeBtn` UI function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and run the project in the simulator. Make sure you're connected
    to the Internet and your Facebook account to see the results.![Time for action—adding
    Facebook to your apps](img/1888_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the `onOpenTouch(event)` function, several variables are called when
    `openBtn` is pressed and released. Notice that `local appId` indicates a string
    of numbers that you can obtain after creating an app on the Facebook Developers
    website.
  prefs: []
  type: TYPE_NORMAL
- en: '`message1, message2`, and `message3` are the strings that display the message
    post. `myString1, myString2`, and `myString3` help replace the spaces indicated
    in `message1, message2`, and `message3`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `native.showWebPopup()` function displays with a dimension of 320 x 300
    and presents the dialog URL to Facebook. The following parameters display accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app_id`—Example: `"1234567"` (This is your unique ID created on the Facebook
    Developer website).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redirect_uri`—The URL to redirect to after the user clicks a button on the
    dialog. This is required in the parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display`—Displays the mode to render the dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touch`—Used on smart phone devices like iPhone and Android. Fits the dialog
    screen within small dimensions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`—The link attached to the post.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture`—The URL of a picture to the post.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name—name` of the link attachment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caption`—Caption of the link (appears beneath the link name).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`—Description of the link (appears beneath the link caption).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the web pop-up no longer needs to be used and needs to be closed, `onCloseTouch(event)`
    is called by `closeBtn`. This will take the event parameter`"release"` and call
    `native.cancelWebPopup()`. This particular function will dismiss the current web
    pop-up.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This library supplies a number of functions that interface to [http://www.facebook.com](http://www.facebook.com)
    through the official Facebook Connect interface.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—posting scores using Facebook Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook Connect is another way to post on the wall feed by using the native
    Facebook UI features. We'll be creating a different way to post messages and scores
    to the newsfeed. In order to see how Facebook Connect operates, you need to load
    the build to a device to view the results. It will not run in the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Chapter 9` folder, copy the `Facebook Connect` project folder to your
    desktop. All the configuration, libraries, and assets needed are already included.
    You can download the project files accompanying this book from the Packt website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `main.lua` file and save it to the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the following variables at the beginning of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a local function called `onFBTouch()` with an event parameter. Add in
    an `if` statement containing `event.phase == release`. Also include your Facebook
    app ID in a string format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create another local function within `onFBTouch(event)` called `facebookListener()`
    with an event parameter as well. Include an `if` statement that refers to`"session"
    == event.type`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add in another `if` statement where`"login" == event.phase`. Include a local
    variable called `theMessage` to display the message you want to share with other
    Facebook users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add in the `facebook.request()` function that will post the following messages
    to the user's Facebook wall. Close any remaining `if` statements with `end` in
    the `facebookListener(event)` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `link` parameter demonstrates a URL for an iOS application. You can direct
    the URL to an Android application that will look something like: [https://play.google.com/store/apps/details?id=com.yourcompany.yourappname](https://play.google.com/store/apps/details?id=com.yourcompany.yourappname)
    or a general website URL of your choosing.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Call the `facebook.login()` that includes your appID, listener, and permissions
    to post on the user's Facebook wall. Close the remainder of the `onFBTouch(event)`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enable the `fbBtn` UI function and save your file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new device build for either iOS or Android. Load the build to your
    device and run the application. You will be asked to log in to your Facebook account
    before you can see the results from the application.![Time for action—posting
    scores using Facebook Connect](img/1888_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most important things that needs to be done is `require "facebook"`
    in order to have the Facebook API to work. We also created a local variable called
    `score` with the value of 100.
  prefs: []
  type: TYPE_NORMAL
- en: The `onFBTouch(event)` function will initiate the event parameter upon`"release"`
    of `fbBtn`. Within the function, `fbAppID` is included with characters in a string
    format. This will be a unique set of numbers that you must obtain from the Facebook
    Developers website. The App ID will be created for you when you make an App page
    on the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another function, `facebookListener(event)`, is created and it will initiate
    all `fbConnect` events. Under the `if` statement containing `("login" == event.phase
    )` will request to post a message to your feed through`"me/feed, "POST"`. The
    feed contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`message=theMessage`—Refers to the string belonging to the variable. It also
    concatenates scores so it displays the value as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`—A message that includes your app name or subject matter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`caption`—A short persuasive message to catch other users attention about playing
    the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`link`—The URL to download the game from either the App Store or Google Play
    Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picture`—A URL containing your image that displays your app icon or visual
    representation of the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the parameters are set, `facebook.login()` will refer to `fbAppID` and
    `facebookListener()` to see if a valid application ID is being used to post on
    Facebook. Upon success, the post is published through`"publish_stream".`
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—create a dialog box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See if you can figure out how to display a dialog box using Facebook Connect
    and using the same setup as the preceding example. The following line will display
    this as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now see where in the code `facebook.showDialog()` can be accessed. This is another
    way of posting messages to Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: The wonders of OpenFeint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenFeint is a third-party library that enables social gaming features such
    as public leaderboards and achievements. For more information, see [http://www.openfeint.com/](http://www.openfeint.com/).
  prefs: []
  type: TYPE_NORMAL
- en: It is very simple to implement leaderboards and achievements once you are ready
    to network your mobile game to the public.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to create a user account on the OpenFeint Developer site at:
    [http://www.openfeint.com/developers](http://www.openfeint.com/developers) to
    integrate its features in your application.'
  prefs: []
  type: TYPE_NORMAL
- en: Game network API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Game network allows access to third-party libraries such as OpenFeint, Papaya,
    and Game Center which enable social gaming features such as public leaderboards
    and achievements. The API will be able to access those libraries once you implement
    them in your application. We'll be focusing on the easy-to-use OpenFeint library,
    which will implement the following features from the game network API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line makes the game network features available under the OpenFeint
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: gameNetwork.init()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initializes ans (product key, secret, display name, and so on) required by the
    game network provider. After you have logged in to your OpenFeint developer account,
    you'll need to select the **Add New Game** button and create a new application
    name. The **App ID, Product Key**, and **Product Secret** can be found in the
    **Application Information** section of your application name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`providerName`—The string of the game network provider ("openfeint")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parms`—Additional parameters required by the`"openfeint"` provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Product Key`—The string of your application''s OpenFeint product key (provided
    by OpenFeint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Product Secret`—The string of your application''s product secret (provided
    by OpenFeint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Display Name`—The string of the name to display in OpenFeint leaderboards
    and other views'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App ID`—The string of the application ID (provided by OpenFeint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Initializes an app with the specified product key, secret, and display name.
    This should only be called once.
  prefs: []
  type: TYPE_NORMAL
- en: gameNetwork.show()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Shows information from the game network provider on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the OpenFeint provider, launch the OpenFeint dashboard in one of the following
    configurations: leaderboards, challenges, achievements, friends, playing, or high
    score.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`—Strings supported by the OpenFeint provider:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show()`—Launches the OpenFeint dashboard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "leaderboards")`—Opens the user''s Leaderboard dashboard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "challenges")`—Opens the user''s Challenge dashboard (not
    supported in Android)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "achievements")`—Opens the user''s Achievements dashboard'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "friends")`—Opens the user''s Friends dashboard (not supported
    in Android)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "playing ")`—Opens the user''s Playing dashboard (not supported
    in Android)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gameNetwork.show( "highscore", "LeaderboardID")`—Opens the user''s High Score
    dashboard for a particular item'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-String`—When the OpenFeint dashboard view is`"highscore"`, the string
    should contain the`"leaderboardID"` property whose value is the corresponding
    OpenFeint leaderboard ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gameNetwork.request()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Send or request information to/from the game network provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`command`—Strings supported by the OpenFeint provider:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setHighScore`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unlockAchievement`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uploadBlob`—Not supported on Android'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downloadBlob`—Not supported on Android'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parms`—Parameters used in the preceding OpenFeint commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setHighScore: { leaderboardID="123456", score=50 }`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unlockAchievement: "achievementId"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uploadBlob: "uploadBlob", key, data`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downloadBlob: key, [listener]`—listener for`"completion"` event with`"blob"`
    key set'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following unlocks the specified achievement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following sets a high score on the leaderboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding function takes a table as the parameter with the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`leaderboardID:` String. The ID of the OpenFeint leaderboard where the high
    score should be posted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score:` Number. The new high score value to post to the specified leaderboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`displayText:` String. An optional string to display in place of the numeric
    score specified by the value assigned to the score parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following saves a blob of game data in the cloud, using OpenFeint''s *Network
    Save Card* feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following downloads data saved previously saved uploadBlob:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: OpenFeint in a jiffy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What better way to implement OpenFeint than by using a game we have already
    made in this book!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—setting up OpenFeint leaderboards and achievements in Egg Drop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be incorporating our Egg Drop game with the OpenFeint features that we
    have discussed so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an account on the OpenFeint Developers site: [http://openfeint.com/developers](http://openfeint.com/developers).
    You can use **Egg Drop** as the game name to test and then delete it later. You
    can choose to have it work for iOS or Android or both. The choice is up to you.
    Once you''re logged in, click on the **Account Information** tab to view the **Product
    key, Product secret**, and **Client Application ID**. These will need to be added
    into your application.![Time for action—setting up OpenFeint leaderboards and
    achievements in Egg Drop](img/1888_09_04.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Chapter 9` folder, copy the `Egg Drop with OF` project folder to your
    desktop. You can download the project files accompanying this book from the Packt
    website. Open up the `mainmenu.lua` file. Insert the game network features after
    the UI module and initialize it with information obtained from the OpenFeint developer
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Underneath the chunk of code pertaining to `optBtn`, create a new UI button
    called `local ofBtn` that transitions from offscreen to y=280 in 500 milliseconds.
    Add in a local function called `onOFTouch()` with an `event` parameter. Upon an
    `event.phase == "release"` have the game network display the leaderboard. Save
    and close your file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go back into the OpenFeint developer portal and click on the **Features** tab
    and then the **Achievements** tab. Click on the orange button that says **Add
    Achievement**.![Time for action—setting up OpenFeint leaderboards and achievements
    in Egg Drop](img/1888_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The particular achievement we will create is when the character catches his
    first egg. Create a title for the achievement, determine a point value you want
    to determine out of 1000 Feint points, and write a short subscription. You can
    add an achievement icon if you wish, but is not necessary for this tutorial. Click
    on **Save Achievement** when you have finished.![Time for action—setting up OpenFeint
    leaderboards and achievements in Egg Drop](img/1888_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screen, you will see the achievement added along with a **Unique
    ID**, which we'll be using to create an achievement in the game. You will be using
    your own Unique ID that is generated for you in OpenFeint unlike the one displayed
    in the following screenshot:![Time for action—setting up OpenFeint leaderboards
    and achievements in Egg Drop](img/1888_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `maingame.lua` file in the project folder. In the `onEggCollision()`
    function, locate the `if` statement containing `event.force > 1.0 and self.isHit
    == false`. Create another `if` statement near the bottom of the function that
    requests `gameNetwork()`, the achievement, and your own Unique ID when one egg
    has been caught.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go back to the OpenFeint developer portal and click on the **Leaderboards**
    tab. Click on the orange button that says **Add Leaderboard**. You can create
    any name that pertains to the level. You can keep the checkboxes as is. Click
    on the **Save Leaderboard** button.![Time for action—setting up OpenFeint leaderboards
    and achievements in Egg Drop](img/1888_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be greeted with your new Unique ID for the Leaderboard on the next
    screen.![Time for action—setting up OpenFeint leaderboards and achievements in
    Egg Drop](img/1888_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `maingame.lua` file, locate the `callGameOver()` function. Within the
    `if` statement that says `gameScore > highScore`, add in the `gameNetwork()` request
    to post the highest score of the game to OpenFeint. Use the Unique ID to fill
    in the `Leaderboard ID`. You will be using your own Unique ID for the Leaderboard
    which was generated for you in OpenFeint to determine the high score, `score=gamescore`.
    Save your file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding achievements and leaderboards is done! OpenFeint capabilities cannot
    be run on the simulator. You'll have to load the game build to a device to view
    the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`gameNetwork.init()` initializes an app with the parameters `("openfeint","<OpenFeint
    Product Key>", "<OpenFeint Product Secret>", "Display Name", "<App ID>")` required
    by the game network provider.'
  prefs: []
  type: TYPE_NORMAL
- en: The main menu displays `ofBtn` and establishes the connection to `gameNetwork.show
    ( "leaderboards" )` and opens the user's Leaderboard dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: When adding achievements, we added `if eggCount == 1 then gameNetwork.request(
    "unlockAchievement", "1315272" ) end` in the `onEggCollision()` function because
    we know that `eggCount` is tracked through every collision made by the main character.
    This will unlock the achievement in OpenFeint since we specified it through the
    unique ID we created.
  prefs: []
  type: TYPE_NORMAL
- en: Leaderboards keep track of the high scores implemented overall in each level.
    We added `gameNetwork.request( "setHighScore", { leaderboardID="957686", score=gameScore
    } )` within the `callGameOver()` function and inside the `if` statement that compares
    `gameScore` and `highScore`. If a high score is achieved for the level, it is
    sent to the leaderboard in OpenFeint under the unique ID set in the developer
    portal.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having an OpenFeint membership does not cost any money when you register under
    the developer portal. When you have completed your game, make sure to register
    it so it will have full access to OpenFeint features amongst the public.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero—adding more OpenFeint achievements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By using the current game, try coming up with other achievements that can be
    unlocked and figure out how they can be accessed by OpenFeint. Here are some ideas
    to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: Reaching a certain amount of points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching a certain amount of eggs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching a certain amount of eggs with all three lives available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many possibilities that can be created. Give it a try!
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz—handling social networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the specific API that scales down high-resolution sprite sheets?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `object.xScale`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. `display.contentScaleX`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. `object.xReference`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. None of the above
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the maximum amount of Feint points that can be given to a user in OpenFeint
    throughout the application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. 200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. 750
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. 10000
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. 1000
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of the following are valid parameters required for `gameNetwork.init()?`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. App ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. Product Key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. Product Secret
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. All of the above
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered several more areas on enhancing configuration settings and integrating
    three of the most popular social networks in today's media in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We took an in-depth look into:'
  prefs: []
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic content scaling and dynamic image resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-resolution sprite sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post message feeds to Twitter and Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement achievements and leaderboards in OpenFeint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will go over the process on how to submit our games
    to the App Store and Google Play Store. You don't want to miss this for the world!
  prefs: []
  type: TYPE_NORMAL
