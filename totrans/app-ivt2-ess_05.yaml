- en: Chapter 5. Building an Event App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve successfully created a game app, let''s try something new!
    In this chapter, you will learn to use more components and blocks—this time, to
    create an event app. This type of app is helpful to organize an event where you
    will gather a group of people for a specific activity, such as a party, book club,
    outing, or meeting. In building this type of app, you will learn how to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Include images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a navigation menu of buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add multiple screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use multiple labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a map feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are transitioning into a beginner-intermediate level of app-making, so you
    will discover that some features in this app require multiple steps. For example,
    in this chapter, we will be setting up the user interface for the RSVP form and
    the Guest List display, but we will actually be creating the database and coding
    the blocks for these in [Chapter 6](part0041_split_000.html#173722-9c0b907946184095a315b26c8a9b12bc
    "Chapter 6. Introduction to Databases"), *Introduction to Databases*.
  prefs: []
  type: TYPE_NORMAL
- en: As with any tutorial, this one will most probably spark creative ideas about
    other ways you could use these components or more features you may want to add
    to the app. Be sure to jot down your jolts of inspiration in a notebook when they
    occur. We recommend saving your app building ideas and concepts in one place.
    You will amass a valuable resource for when you finish the tutorials and embark
    out on your own app development.
  prefs: []
  type: TYPE_NORMAL
- en: User Interface for an event app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sign into App Inventor by clicking on the **Create Apps** button on the App
    Inventor home page ([http://appinventor.mit.edu/explore/](http://appinventor.mit.edu/explore/))
    and logging into your Google account. Once you are in App Inventor, click on **Start
    new project** in the upper-left corner of the screen (the location is the same
    whether you are in the **Projects** view or in the **Designer** view). A pop-up
    window will appear (as shown in the following screenshot); type `EventApp` for
    the project name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User Interface for an event app](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on **OK**, you will be taken into the **Designer** view.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the background image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will gain experience in using the media tool to include
    images in your app. All the apps include some sort of artwork (logos, icons, photos,
    and so on), so learning to include image files will come in handy. We've decided
    to create a pool party for our EventApp tutorial, and to keep with the theme,
    we will set the background image for Screen1 to a water image. It is extremely
    important to note that you *cannot* use just any image, logo, or artwork from
    the Internet in your app. Artwork (this includes photography) is copyrighted,
    and if you use someone else's artwork without permission (and without paying for
    it), you will be violating copyright law. Thus, we are taking the time to explain
    how to find usable, free artwork. Google makes it easy to find artwork that is
    free to reuse or remix.
  prefs: []
  type: TYPE_NORMAL
- en: Type in the topic you are looking for in the Google search bar. In this case,
    we will type in **pool**. Press return on your keyboard or click on the blue magnifying
    glass icon next to the search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google will display the results. Below the search bar, you will see a horizontal
    list of options; click on **Images**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To the far right of **Images**, click on **Search Tools**. This button will
    reveal a pop-up window with more options. They include the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not filtered by license *(do not use this option)*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeled for reuse with modification
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeled for reuse
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeled for noncommercial reuse with modification
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Labeled for noncommercial reuse
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The following screenshot displays the Google search options for our pool image
    search:![Setting the background image](img/00143.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting an option from the drop-down menu in this case, Labeled for reuse
    will filter the displayed results to only include images with a license for that
    particular category. Again, we cannot stress enough that it is good practice to
    pick images labeled for reuse. This way, you can use them commercially in case
    you ever decide to sell your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick explanation of some helpful terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free to use or share**: You are allowed to use or share the content if you
    do not alter it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free to use, share, or modify**: You are allowed to use, share, or change
    the content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commercially**: If you think you may ever want to sell an app that uses artwork
    from the Internet, make sure you choose artwork that is available for commercial
    use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also search online for *Creative Commons* images that come with many
    different licenses. Some photos require attribution, meaning that you are required
    to give the photographer credit by including the text: *photo by (and the name
    of the photographer)*. You do not have to give attribution if the artwork is free
    to use commercially or if it is considered in the public domain (free unrestricted
    use).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more detailed information on license types, visit [https://creativecommons.org/licenses/](https://creativecommons.org/licenses/).
    An especially interesting side note: the Creative Commons organization was cofounded
    by Hal Abelson, the creator of MIT App Inventor.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you find an image you like that is free to use, download it to your computer
    (by right-clicking on the image on a Windows machine or by clicking and holding
    down the **Option** key on a Mac). You will see a pop-up window. Click on **Save
    Image As...**. This will launch another pop-up window where you can rename the
    file to something that is descriptive or memorable and choose the location on
    your computer where you would like to save the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the image is saved on your computer, there are two methods to upload a
    photo: through the **Media** panel or through the **Properties** panel—steps for
    both are exactly the same. Note that the only way to delete media files is via
    the **Media** panel.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we will be adding a pool water image as the background image to our app,
    we will upload it to Screen1\. When **Screen1** is highlighted, there will be
    an option in the **Properties** panel called **BackgroundImage**. Since our screen
    is empty, it will say **None**. When you click on the text **None**, a drop-down
    menu will appear, enabling you to upload an image, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the background image](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **Upload File…** button, a pop-up window will appear,
    enabling you to choose an image from your computer. We named ours **Pool Image.png**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the background image](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on **OK**, the image name will appear on the drop-down menu
    in the **Properties** and **Media** panels and the actual image will appear on
    **Screen1** as the background image, as shown in the following screenshot (note:
    we named the image `Pool Image.png`; but when it was uploaded to App Inventor,
    it was assigned a new name: `PoolImage.png` with no spaces). If your photo isn''t
    centered, you can always adjust the **AlignHorizontal** and **AlignVertical**
    properties by choosing **Center** from the drop-down menus, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the background image](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an image component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will add another image to lay over the background image. We used Illustrator
    and Photoshop to create some artwork and saved it as a `.png` file. If you don't
    have these software programs, you can use free editors, such as Inkscape (Windows/Linux),
    Affinity Designer (Mac), or Gimp (multi-platform) to create artwork. You could
    make an image similar to ours or a new design, or find Creative Commons image
    online.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the far left column in the Designer, in the **User Interface** palette drawer,
    choose the **Image** Component and drag it to the **Viewer**. You will notice
    that a small image component icon sits in the upper-left corner of the Viewer.
    We want to center it. There are two ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Screen1** in the **Components** panel, and in the **Properties**
    panel, select **Center** from both the **AlignHorizontal** and **AlignVertical**
    drop-down lists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we are going to be adding many components to our home screen, we are going
    to walk you through a more complex method that requires an extra component. Go
    to Layout drawer and drag out the **VerticalArrangement** component onto the **Viewer**.
    Notice how it sits below the **Image** Component icon. Click on the **Image Component**
    icon and drag it into the VerticalArrangement box. In the **Components** panel,
    select **VerticalArrangement** and go to the **Properties** panel. In both the
    **Height** and **Width** options, select **Fill Parent** from the drop-down menu
    and click on **OK** for each. You will see the VerticalArrangement component expand
    to fill the screen. Still in the **Properties** panel, go to the **AlignVertical**
    and **AlignHorizonal** options and select **Center** from each drop-down menu.
    Notice how the Image component is now centered in the Viewer on Screen1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next we will change the name of the Image component. Go to the **Components**
    panel and select **Image1**. Once it is highlighted, click on **Rename** at the
    bottom of the panel to see a pop-up window where you can enter a new name, `Pool
    Party Message`. Click on **OK**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an image component](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that App Inventor replaces the spaces with underscores, so the Image component
    name will now appear as **Pool_Party_Message** in the **Components** panel. Now,
    we will upload the actual image for the Image component. With **Pool_Party_Message**
    highlighted, go to the **Properties** panel and click on **None** under **Picture**
    to open the **Upload File** dialogue. Choose the image you want to use (we named
    our image in a similar way: `PoolPartyMessage.png`) and click on **OK**. Notice
    that the image name appears in the Properties panel under Picture and in the Media
    panel, and the actual image is displayed over our background image on Screen1
    in the Viewer, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an image component](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As a mobile apps user, you may have noticed that apps have some sort of navigation
    bar. We will build ours across the bottom of the screen by adding five buttons:
    **Home**, **Info**, **RSVP**, **Guests**, and **Map**.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to place our buttons within a **HorizontalArrangement** component.
    Drag it from the same place you found VerticalArrangement (the Layout drawer drawer)
    and drop it underneath **VerticalArrangment** that currently exist on the **Viewer**.
    You can double-check that **HorizontalArrangement** is indeed below and not within
    VerticalArrangement by seeing that their names align in the Components panel column,
    as shown in the following screenshot. The list of components shows that Pool_Party_Message
    is indented so that it is indeed within the VerticalArrangement1 component, but
    HorizontalArrangement1 is not. Next, set the properties for **HorizontalArrangement1**
    to match those indicated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding buttons](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the **User Interface** palette, drag out a **Button**, and place it inside
    **HorizontalArrangement** in the **Viewer**. Repeat this step four more times.
    You will now have five buttons at the bottom of the screen, as shown in the following
    screenshot. Since we already set the height of HorizontalArrangement to `50` pixels,
    you can set the **Height** property of all the buttons to **Fill parent**. This
    way, they will stretch only to the height of `50` pixels. Do the same for the
    **Width** property and all the buttons will automatically size evenly across the
    width of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding buttons](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Button1** in the **Components** panel and rename it to **HomeButton**.
    In the **Properties** panel, change **BackgroundColor** to **None**, check **Enabled**
    and **FontBold**, and set **FontSize** to `14`. Under **Text**, type **Home**,
    and select **Center** for **TextAlignment** and **Black** for **TextColor**, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding buttons](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat these steps for all of the other buttons, renaming the buttons and changing
    the text on the buttons to reflect the names indicated in the following screenshot.
    Set all of the buttons'' **TextColor** to **White**. We are using different colors
    to aid navigation. When the user is on the **Home** screen, he or she will see
    the **Home** button''s **TextColor** in black, while the other buttons will be
    white, as shown in the next screenshot. When we build the next screen (**Info**),
    we will make the **Info** button''s text black, and change the **Home** text button
    to white, like the others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding buttons](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here's an ideal example of why you would want to always take advantage of the
    live development environment and monitor changes you make to your app on your
    mobile device. The screenshot on the left-hand side is from the **Viewer** in
    the **Designer** window. It shows the home screen (**Screen1**) with the background
    image, the graphic, and the bottom menu bar we just built. If you relied only
    on this view from your computer screen, you might attempt to respace the buttons
    because it looks like the right button is cut off.
  prefs: []
  type: TYPE_NORMAL
- en: But if you were to look at this same view on your mobile device, you would see
    the screenshot on the right-hand side with all the buttons fitting evenly across
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding buttons](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the ActivityStarter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our app will feature a map, because anytime you host an event, guests will
    need to know the address and it is helpful to provide the location via GPS. For
    the EventApp app to launch Google Maps when a user presses the Map button, we
    will use the ActivityStarter Component. Go to the **Designer**, and in the **Connectivity**
    Palette, drag **ActivityStarter** onto the **Viewer** and notice how it drops
    down below the **Viewer** (see the following screenshot) unlike all of the other
    components we have used so far. This is because **ActivityStarter** is a nonvisible
    component; the user won''t see it on the screen or even know that they have launched
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the ActivityStarter](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the app to launch the correct map, you will need to input some instructions
    in the **Properties** panel. Insert the following text into the blank text boxes
    beneath each property heading `Action`, `ActivityClass`, `ActivityPackage`, and
    `DataUri`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Action**: `android.intent.action.VIEW`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ActivityClass**: `com.google.android.maps.MapsActivity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ActivityPackage**: `com.google.android.apps.maps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DataUri**: `http://maps.google.com/mapsq=1600+Amphitheatre+Parkway+Mountain+View+CA`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might be wondering what all of these properties mean. The **ActivityPackage**
    property tells ActivityStarter what package to launch (in the Android programming
    jargon, the app files are called packages). Every Android app consists of one
    or more activities. Think of these activities as main parts of the app. The **ActivityClass**
    property mentions specifically which activity of the Maps app to start. The **Action**
    property provides more details about the activity that is being launched. Finally,
    the **DataUri** property specifies the web location that the map is pointing to.
    The first part of the URL, [http://maps.google.com/maps?q=](http://maps.google.com/maps?q=),
    basically means that we are querying Google Maps (the `q` stands for query) and
    the second part of the URL specifies the exact location we are looking for. In
    URLs, blank spaces are not allowed, so the conventional format is to replace all
    the black spaces with plus signs. Thus, when we specify the address of our pool
    party (is fictionally at the Google headquarters in Mountain View, CA), all the
    blank spaces between different words will be replaced by plus signs, as shown
    in the previous list under the **DataUri** property heading.
  prefs: []
  type: TYPE_NORMAL
- en: When creating your own event app with a different location, you will use the
    same information for **Action**, **ActivityClass**, and **ActivityPackage**, but
    for the **DataUri** property, you will insert your address after the equals sign
    ([http://maps.google.com/maps?q=](http://maps.google.com/maps?q=)). Remember to
    replace all the spaces in your address with plus signs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a sample of what your screen should resemble. Because the text
    boxes on your screen are small, it will not display the full information without
    scrolling the cursor to the right using the arrow keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the ActivityStarter](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We currently have our home screen called Screen1 (because App Inventor does
    not allow you to rename Screen1). We will now add three more screens; each one
    will be associated with a button. Above the **Viewer** and below **Projects**
    in the top menu bar, you will see a row of three buttons: **Screen1** (our current
    screen), **Add Screen...**, and **Remove Screen**, which is grayed out, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding screens](img/00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Add Screen** button and a pop-up window will ask you to input
    the new screen name. Type `Info_Screen` as shown in the following screenshot.
    Click on **OK**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding screens](img/00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat the same procedure to add two more screens and name them **RSVP_Screen**
    and **GuestList_Screen**. Now, all of your screens will appear in the drop-down
    menu under the first menu button, and you can navigate between screens by selecting
    a different one. The next screenshot shows the name **Screen1** on the button
    to indicate the name of the screen that is currently open:'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding screens](img/00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added the additional screens, you will need to recreate the user
    interface for them. This means that, for each screen, you will add some of the
    same elements you added to Screen1: the pool image as the background image, a
    VerticalArrangement, a HorizontalArrangement, and five buttons. Note that it is
    vital to rename the five buttons to the exact same names as on Screen1 because
    we will be programming each button with the same name to do the same thing (to
    open its appropriate screen) and if a button is misnamed on one of the screens,
    it won''t work (note that we are referring to the actual button names, not the
    text that appears on the buttons). Also, remember to make the text of all the
    buttons white, except for the button of the screen that you have open (that is,
    when GuestList_Screen is open, the Guests button text should be black; when RSVP_Screen
    is open, the RSVP button text should be black, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: Programming the blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've designed most of the user interface of the Event app, we will
    switch to the Blocks editor to program our app. Click on the **Blocks** button
    in the upper-right corner of the Designer. You will find that throughout the building
    of this app (as with any app), you will go back and forth between the Designer
    and Blocks editor.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating between screens and launching maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Blocks editor, we will code the navigation buttons to launch the appropriate
    screen. For example, when the user presses the Info button, we want the app to
    open Info_Screen.
  prefs: []
  type: TYPE_NORMAL
- en: Screen1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Blocks Editor, make sure you are on Screen1 by verifying that Screen1
    (and not one of the other screens) displays on the menu button. In the **Blocks**
    palette under **HorizontalArrangement**, you will see a list of the buttons that
    you just created in the Designer. (Notice how the button names are indented underneath
    HorizontalArrangement, this is a visual cue to remind you that they are contained
    within the HorizontalArrangement Component.) If you don't see all of the buttons
    displayed in the Palette, click on the plus sign to the left of HorizontalArrangement,
    it will toggle to a minus sign and display those items (in this case, 5 buttons)
    within.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **InfoButton** to reveal the blocks drawer and choose the first gold
    block **when InfoButton.Click**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the **Built-in** blocks, click on the gold **Control** blocks and scroll
    down to the **open another screen screenName** block. Insert this block into the
    **when InfoButton.Click** block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a blank pink **Text** block to it and type `Info_Screen` into the blank.
    Connect it to the **open another screen screenName** block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat these steps for **RSVPButton** and **GuestsButton**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For MapButton, we won''t be opening another screen; instead we will be launching
    the ActivityStarter (that we have already set to open Google Maps), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **MapButton** drawer, select the first block, when **MapButton.Click**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **ActivityStarter1** blocks drawer, select the purple **call ActivityStarter1.StartActivity**
    block. Connect the two blocks together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following screenshot shows all of the previous steps:![Screen1](img/00159.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing blocks between screens using the Backpack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you think about it, all the buttons on all the screens will do the same thing.
    Instead of rebuilding the exact same sets of blocks for all of the other screens,
    we can use the Backpack tool. There is a little backpack icon in the upper-right
    corner of the blocks Viewer, as shown in the earlier screenshot. This tool enables
    you to share blocks between screens and projects (note that the Backpack empties
    when you sign out).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to add blocks to the Backpack. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can drag the blocks directly to the Backpack (the simplest method).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or, you can right-click on block you want to add (similar to copying or pasting
    blocks, right-clicking to add blocks to the Backpack, will add all attached blocks).
    For example, right-click on the **when InfoButton.Click** block (or on a Mac,
    click on the control button on the keyboard while clicking on the event block)
    and a drop-down list will appear, as shown in the following screenshot. Select
    the fifth option, **Add to Backpack**; this will add the three blocks in this
    set (if you have your computer's sound on, you will hear an indicator sound).![Sharing
    blocks between screens using the Backpack](img/00160.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first time you do this the number in the parenthesis in the drop-down list
    will be **0** (as shown in the preceding screenshot). But after you add the first
    set of blocks to the Backpack and repeat the step for the next set of blocks,
    the number will increase. This number lets you know how many times you have added
    blocks to the Backpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the three other block sets to the **Backpack**, in the method you choose.
    After adding the blocks, click on the Backpack to reveal the four block sets you
    have added, as shown on the right-hand side of the following screenshot. Click
    on any white space in the **Viewer** to close the Backpack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing blocks between screens using the Backpack](img/00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can switch screens and retrieve our Backpack blocks. Click on the **Screen1**
    button above the **Viewer** to choose another screen from the drop-down list.
    Select **Info_Screen**.
  prefs: []
  type: TYPE_NORMAL
- en: If you think about it, we only need three of the four sets of blocks we added
    to the **BackPack**. We don't need the **InfoButton** blocks because we are currently
    on the **Info** screen, so we don't want the **InfoButton** to do anything. *To
    make a button not active or not do anything, we simply don't create any blocks
    (code) for it*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding blocks from the Backpack works in exactly the same way as adding blocks
    from a drawer. Click on **Backpack** to reveal the selection of blocks you've
    added and click on the **RSVPButton** block. You will see that they those blocks
    appear on the **Viewer**. Repeat the steps to add the **GuestsButton** and the
    **MapButton** blocks from the Backpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'We didn''t need to create the **HomeButton** blocks when we were on **Screen1**
    because that is essentially the Home screen. But, we do need to activate the Home
    Button on other screens so users can navigate back to Screen1 (or Home). let''s
    do that now that we are on the "Info_Screen. Copy and paste any event block on
    the screen and then click on the gold arrow to the right of the button name. It
    will reveal a drop-down list of all the buttons; choose **HomeButton**. Change
    the text in the pink Text block to **Screen1**. Your blocks for **Info_Screen**
    should look as like the following image. Repeat the same steps to add the Home
    Button blocks to the RSVP_Screen and the GuestList_Screen::'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing blocks between screens using the Backpack](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding text to screens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of **Info_Screen** is for the organizer (you) to provide guests
    with information about the event. This screen would display static text, but it
    could easily be updated. Let's switch back to the **Designer**.
  prefs: []
  type: TYPE_NORMAL
- en: 'An easy way to add text to a screen is with a **Label**. (Alternatively, you
    could also create the text on your computer using Photoshop or Gimp (or another
    design tool) and save it as an image file (JPG or PNG) and upload it to App Inventor
    using the Media tool). You will find the Label component in the **User Interface**
    drawer. We are going to create eight lines of text, so drag a Label onto the **Viewer**
    and repeat this seven more times. In the **Properties** panel, type your information
    in the text box under **Text**. You can copy our formatting for font, color, and
    layout, as shown in the following screenshot, or design your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding text to screens](img/00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have completed the first part of setting up an event app. In this chapter,
    you have learned how to find usable images online and how to use one as a background
    image on multiple screens. You also learned how to add artwork from a computer
    over a background image. You created a button navigation bar, coded buttons to
    open other screens, used the Backpack tool to copy blocks from one screen to another,
    entered informational text using labels, and did the setup for launching Google
    Maps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will concentrate mostly on creating a database for all
    of the data we will be collecting—the guests' names, the number of attendees,
    and the potluck items. To do this, we will teach you to use Google Fusion Tables
    and how to create an RSVP form and a guest list display using **ListView**. We
    are halfway toward completing a very practical app that you can use for multiple
    purposes. And, the skills you are learning will prove instrumental for any and
    all future app-making endeavors.
  prefs: []
  type: TYPE_NORMAL
