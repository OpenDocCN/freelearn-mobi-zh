- en: Chapter 10. Location Services and Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using region monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using significant-change location service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location services in the background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding map annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding map overlays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today's smartphones and handheld devices are equipped with high-accuracy Global
    Positioning System (GPS) hardware. GPS hardware receives location information
    from a constellation of satellites. Apart from the satellites, iOS devices take
    advantage of the cellular and Wi-fi networks to provide location information to
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss how to use the appropriate frameworks to take
    advantage of the location services of the device. Furthermore, we will learn how
    to display maps and annotate them. Specifically, we will focus on the following
    subjects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Location services:** They provide the available services on a device for
    providing location information. These services are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard location service:** This is the location service that depends fully
    on the device''s GPS module and provides the highest accuracy location data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Region monitoring service:** This is the location service that monitors boundary
    crossings'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Significant-change location service:** This is the service that monitors
    for significant changes in location'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CLLocationManager:` This is the class that allows us to use the location services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Compass:` This is the class that shows us how to use the built-in compass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MKMapView:` This is the view that is used to display maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MKAnnotation:` This is the class that allows us to add annotations on maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MKOverlay:` This is the class that allows us to add overlays on maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to receive the location information from
    the built-in GPS hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `LocationApp`. Add two buttons
    and a label on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve location data from the built-in GPS hardware, we need to use the
    `CoreLocaction` framework. It is exposed through the `MonoTouch.CoreLocation`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the start button to view your location coordinates on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Projects using the `CoreLocation` framework to determine current position can
    work on the simulator. However, the coordinates will be fixed, with values of
    either Apple's headquarters in California, or the central coordinates for the
    country of the Mac computer of which the simulator is running on.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The location data the GPS module provides can be accessed through the `CLLocationManager`
    class. After initializing an instance of the class, we need to subscribe to its
    `UpdatedLocation` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Location data will become available as they are issued through this event.
    It is good practice to also subscribe to the `Failed` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When the location manager first requests for location updates, the user is
    informed through a system-specific alert, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468EXP_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This alert basically asks for user permission to allow the application to retrieve
    location data. If the user denies this request, the `Failed` event will be triggered
    with the appropriate message. Future location requests will not trigger the permission
    alert, and the user will have to enable location services for the application
    through the device settings, so we need to handle this scenario accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'After subscribing to the appropriate events, we request the delivery of location
    updates through the `StartUpdatingLocation` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop receiving location updates, we call the `StopUpdatingLocation` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UpdatedLocation` event accepts delegates of the type `EventHandler<CLLocationUpdatedEventArgs>`.
    The `CLLocationUpdatedEventArgs` parameter contains two properties of the type
    `CLLocationCoordinate2D`. The `NewLocation` property contains the most recent
    location information, while the `OldLocation` property contains the previous location
    information. On the first location update, the `OldLocation` property will return
    `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The coordinates are returned as values of the type `double` and represent the
    coordinates of the position in degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Negative `latitude` values indicate south coordinates, and positive values indicate
    north coordinates. Negative `longitude` values indicate west coordinates, while
    positive `longitude` values indicate east coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: The `HorizontalAccuracy` property returns the accuracy in meters of the GPS
    fix. For example, a value of `17m` indicates that the location is determined within
    a circle of a diameter of 17m. Lower values indicate better accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: GPS accuracy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UpdateLocation` event might be triggered without a new reading from the
    GPS. This is why we are provided with the previous location, so that we can compare
    the two values for determining whether we have a location change. Also, there
    is always a margin of error in the location data, which is independent of GPS
    hardware, and there are variable factors that define it, such as surrounding buildings,
    various obstacles, and so on. You will notice that the `HorizontalAccuracy` will
    return lower values when the device is outdoors, while higher values will be returned
    when we use the GPS indoors or on a city street with tall buildings.
  prefs: []
  type: TYPE_NORMAL
- en: Location services availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all devices are equipped with location services hardware. Furthermore, even
    if a device is equipped with the appropriate hardware, location services could
    be disabled by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine if the location services are available or enabled on the device,
    we read the return value of the `CLLocationManager.LocationServicesEnabled` static
    property before initializing the location manager object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Location services usage indicator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When any type of location service is used, the location services icon appears
    on the right side of the status bar, next to the battery indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Location services usage indicator](img/1468EXP_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This indicator only appears on the device and not on the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Determining heading*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining heading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the built-in compass to determine heading.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `HeadingApp`. Just like in
    the previous task, add two buttons and a label on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The project in this task cannot be tested on the simulator. A device with compass
    hardware (magnetometer) is required.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Heading information is once more retrieved through the `CLLocationManager` class.
    Create and initialize an instance in the `MainController` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the start button and rotate the device to view the different heading values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve the heading information, we first need to subscribe to the location
    manager''s `UpdatedHeading` event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To initiate the delivery of heading information, we call the `StartUpdatingHeading`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `UpdatedHeading` event handler, we retrieve the heading information
    through the `MagneticHeading` property of the `CLHeading` object, exposed through
    the event arguments'' `NewHeading` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop retrieving heading updates, we call the `StopUpdatingHeading` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The heading is measured in degrees. The values for the four points of the horizon,
    as can be viewed on a simple compass, are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` **or** `360` **degrees:** North; the magnetometer will return values of
    up to `359.99` degrees, and then go to `0` when the device is heading north'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`90` **degrees:** East'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`180` **degrees:** South'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`270` **degrees:** West'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Magnetic versus true heading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Magnetic heading** is the heading that is based on what a normal compass
    will show as north. **True heading** is the true direction of north, based on
    the actual position of the Earth''s north pole. There is a slight difference between
    the two, which varies with time, and it is usually about `2` degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: The `CLHeading` class provides both readings through the `MagneticHeading` and
    `TrueHeading` properties. This provides a significant help to developers, since
    calculating the difference between the two requires either expensive equipment,
    or very difficult calculations based on the time of year and other factors.
  prefs: []
  type: TYPE_NORMAL
- en: Compass availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The magnetometer, a module that can determine the heading in degrees and provides
    compass functionality to devices, is not available on all devices. To check if
    a device can provide heading information, retrieve the value from the `CLLocationManager.HeadingAvailable`
    static property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Determining location*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using region monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to use the GPS to respond to region-specific
    position changes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `RegionApp`. Add two buttons
    and a label on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create two fields in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `ViewDidLoad` method, initialize it, and subscribe to the `UpdatedLocation,
    RegionEntered`, and `RegionLeft` events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following event handlers in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the start button''s `TouchUpInside` handler, call the `StartUpdatingLocation`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the stop button''s `TouchUpInside` handler, call the `StopMonitoring` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This application needs to be tested on a device that supports region monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Region monitoring is a feature that monitors for boundary crossings. When a
    boundary of a specific region is crossed, the `CLLocationManager` object issues
    the appropriate events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we define the region based on the current location; hence,
    we also subscribe to the `UpdatedLocation` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the application starts receiving location updates, it first checks for
    location accuracy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the desired accuracy is achieved (<100m, modify at your discretion), we
    initialize the `CLRegion` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `CLRegion` class is used to define regions. Here, we create the region to
    be monitored based on our current location in the first parameter. The second
    parameter declares the radius around the coordinate, in meters, defining the region
    boundary. The third parameter is a string identifier for the region.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start monitoring the region, we call the `StartMonitoring` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the region to be monitored, while the second parameter
    defines the desired accuracy in meters for the boundary crossings. This value
    acts as an accuracy offset that prevents the system from triggering successive
    `enter` and `left` events when the user is traveling close to the region's boundary.
  prefs: []
  type: TYPE_NORMAL
- en: When region monitoring has started, the appropriate events will be triggered
    when the device enters or leaves the region based on the desired accuracy value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Region monitoring is a very useful feature. For example, an application could
    provide specific information to users based on their proximity to various areas.
    Furthermore, it can notify of boundary crossings while the application is in the
    background.
  prefs: []
  type: TYPE_NORMAL
- en: Region monitoring availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To check if a device supports region monitoring, retrieve the value of the
    `RegionMonitoringAvailable` static property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using significant-change location service*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using significant-change location service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the significant-change location monitoring
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `SLCApp`. Add a label and two
    buttons on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following code in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **start** button to start monitoring for significant location changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The significant-change location service monitors for significant location changes
    and provides location information when these changes occur. In terms of power
    consumption, it is the less demanding location service. It uses the device's cellular
    radio transceiver to determine the user's location. Only devices equipped with
    a cellular radio transceiver can use this service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for using the significant-change location service is similar to the
    code of the standard location services. The only differences are the methods of
    starting and stopping the service. To start the service, we call the `StartMonitoringSignificantLocationChanges`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Location updates are issued through the `UpdatedLocation` event handler, which
    is the same event that we use for the standard location service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The significant-change location service can report location changes while in
    the background, waking up the application.
  prefs: []
  type: TYPE_NORMAL
- en: Significant-change location service availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To determine if a device is capable of using the significant-change location
    service, retrieve the value of the `SignificantLocationChangeMonitoringAvailable`
    static property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using region monitoring*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location services in the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to use location services while the application
    is in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `BackgroundLocationApp`. Just
    like in the previous tasks, add a label and two buttons on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Solution** pane, double-click on the **Info.plist** file to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Advanced** tab, add a new key by clicking on the plus (+) sign or
    by right-clicking and selecting **New Key** from the context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Required background modes** from the drop-down list, or just type `UIBackgroundModes`
    in the field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the key and right-click on the empty item below it. Click **New Key**
    on the context menu. In its **Value** field, enter the word `location`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document. When done, you should have something like in the following
    screenshot:![How to do it...](img/1468EXP_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `MainController` class, enter the same code as the one used in the *Determining
    location* recipe in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the `LocationManager_UpdatedLocation` method, add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Start** button to start receiving location updates. Press the **Home**
    button on the device to make the application move to the background. Watch MonoDevelop's
    **Application Output** pad displaying location updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To receive location updates while the application is in the background, we need
    to set the location value to the `UIBackgroundModes` key in the **Info.plist**
    file. This basically makes sure that the application has the appropriate permission
    to receive location updates while it is in the background and that it will not
    get suspended.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that the application is receiving location updates, check the
    status bar. The location services icon should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468EXP_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting the `UIBackgroundModes` key for location services is only needed for
    the standard location service. By default both the region monitoring and significant-change
    location services support delivery of location updates while the application is
    in the background. While one of these location services has started updating for
    location data, the application can even be terminated. When a location update
    is received, the application is started or woken up from the suspended state and
    is given a limited amount of time to execute code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine if an application has been started by one of these two location
    services, check the options parameter of the `FinishedLaunching` method in the
    `AppDelegate` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The options parameter is of the type `NSDictionary`. If this dictionary contains
    the `LaunchOptionsLocationKey`, then the application has been started or woken
    up from suspended state due to a location service. When that is the case, we need
    to call the `StartMonitoringSignificantLocationChanges` method on a `CLLocationManager`
    instance again to retrieve the location data.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies to region monitoring location service. Note that if we use
    either of these two location services, but our application does not support the
    background delivery of location events, then we have to make sure to stop monitoring
    for location updates when they are no longer needed. If we do not, then the location
    services will continue to run, causing significant battery drain.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting to supported hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If our application's features are fully dependent on location services and cannot
    operate correctly on devices that do not support them, we have to add the key
    `UIRequiredDeviceCapabilities` in the **Info.plist** file, with the value `location-services`.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, when the application requires the use of the standard location
    service, which uses the GPS hardware, we need to add the value `gps` to this key.
    This way, we make sure the application will not be available through the application
    store to devices that are not equipped with the appropriate hardware.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Determining location*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Development Tools"), Development Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating an iPhone project in MonoDevelop*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to display maps on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `MapDisplayApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add an `MKMapView` on the view of `MainController`. Enter the following `using`
    directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application either on the simulator or on the device. If
    the application is run on the simulator, the default location will be Apple's
    headquarters in **Cupertino:**![How to do it...](img/1468EXP_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zoom or pan the map to output the current location in the **Application Output**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MonoTouch.MapKit` namespace wraps all the objects contained in the `MapKit`
    framework. The `MapKit` framework uses Google maps to display maps.
  prefs: []
  type: TYPE_NORMAL
- en: The `MKMapView` is the default iOS view that displays maps. It is especially
    designed for this purpose, and it should not be sub-classed.
  prefs: []
  type: TYPE_NORMAL
- en: To display the user's location on the map, we set its `ShowsUserLocation` property
    to `true:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This activates the standard location service to start receiving location updates
    and handing them over to the `MKMapView` object internally.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine when the user zooms or pans the map, we subscribe to the `RegionChanged`
    event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the event handler, we retrieve the current location through the `UserLocation`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If the `ShowsUserLocation` property is set to `false`, the location services
    will not be activated, and the `UserLocation.Location` property will return `null`.
    It will also return `null` when the application runs for the first time, since
    it will ask the user for permission of using location services. However, a map
    will be displayed, as long as the device or simulator have an active Internet
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set the center coordinate of the map to be displayed with the `SetCenterCoordinate`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the map coordinates that we want the map to be centered
    at, represented by an object of the type `CLLocationCoordinate2D`. The second
    parameter declares if we want the centering of the map to be animated or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from centering the map, we can also set its zoom level. We do this through
    the `SetRegion` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is of type `MKCoordinateRegion`. Here, its `FromDistance`
    static method is used to create an instance. Its first parameter is the coordinate
    of the region's center, while the next two parameters represent the horizontal
    and vertical span of the map to display, in meters. What this basically means
    is that the region represented by this `MKCoordinateRegion` instance will have
    `mapCoordinates` at the center, and the horizontal and vertical part of the map
    will each represent `1000` meters on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `MKMapView` will set the actual region to an approximation to
    the values of `MKCoordinateRegion`. This is because the dimensions of `MKMapView`
    cannot always match the horizontal and vertical span values provided. For example,
    here we set a square region of `1000x1000` meters, but our `MKMapView` layout
    is not an absolute square, since it basically takes over all of the screen. We
    can retrieve the actual region of map the `MKMapView` is displaying through its
    `Region` property.
  prefs: []
  type: TYPE_NORMAL
- en: Things to have in mind when using MapKit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `MapKit` framework uses the Google Maps and Google Earth APIs to display
    maps. Usage of this framework binds the developer with Google's terms of service,
    which can be viewed at [http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html).
  prefs: []
  type: TYPE_NORMAL
- en: One important term that can directly affect whether your application will be
    rejected or not on the Application Store is the usage of the Google logo over
    the maps. Care should be taken that the logo is always visible when displaying
    maps.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Geocoding*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map annotations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map overlays*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geocoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide address, city, or country information
    based on location coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `GeocodingApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add an `MKMapView` on the top half of the view of `MainController` and a label
    and a button on the bottom half. Add the `MonoTouch.MapKit` and `MonoTouch.CoreLocation`
    namespaces.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `ViewDidLoad` override in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following nested class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application either on the simulator or on the device. If
    run on the device, when you tap on the button, location information about the
    country and area you are in at the present time will be displayed on the label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Geocoding** is the process of matching address information to geographic
    coordinates. **Reverse geocoding** is the process of matching geographic coordinates
    to address information. Only the latter is available on iOS. There are forward
    geocoding services available online that can be used, however.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To reverse geocode geographic coordinates, we use the `MKReverseGeocoder` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This class needs a delegate object that will provide the information. The class
    we will create for the delegate object of `MKReverseGeocoder` must inherit the
    `MKReverseGeocoderDelegate` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Inside the delegate object, we need to override two methods. The first one is
    `FoundWithPlacemark:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This is the method that will be triggered when the reverse geocoder retrieves
    the geocoding information. The information is contained in the `placemark` parameter,
    which is of the type `MKPlacemark`. As shown in the previous highlighted code,
    the information is available through various properties of the `MKPlacemark` class.
  prefs: []
  type: TYPE_NORMAL
- en: The second method we need to override is `FailedWithError:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This method is triggered when reverse geocoding fails for some reason. The information
    is contained in the `error` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initialize the instance of the `MKReverseGeocoder` class, we pass the coordinates
    with an object of the type `CLLocationCoordinate2D` that we want geocoding information
    for, to its constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After assigning its delegate object, we call the `Start` method to reverse
    geocode the coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Detailed information on the location address can be retrieved through the `AddressDisctionary`
    property of the `MKPlacemark` class, which is of the type `NSDictionary`.
  prefs: []
  type: TYPE_NORMAL
- en: Things to have in mind when using the MKReverseGeocoder class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MKReverseGeocoder` class is part of the `MapKit` framework. Usage of this
    class binds the developer to Google''s terms of service: [http://code.google.com/apis/maps/iphone/terms.html](http://code.google.com/apis/maps/iphone/terms.html).'
  prefs: []
  type: TYPE_NORMAL
- en: One important term of using the reverse geocoding service is that it should
    always be used in combination with a Google map. Furthermore, to avoid abuse of
    the service, Apple recommends not to make more than one reverse geocoding call
    per minute.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying maps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map annotations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map overlays*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding map annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss annotating a map to display various information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `MapAnnotateApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add an `MKMapView` on the view of `MainController`. Leave some room at the bottom,
    and add a button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the namespaces `MonoTouch.MapKit` and `Monotouch.CoreLocation`, and enter
    the following code in the `ViewDidLoad` override:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following nested class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the application either on the simulator or on the device. If
    run on the simulator, when you tap on the button, the result should be similar
    to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tapping on Add pin displays the callout bubble, with the annotation title and
    subtitle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Annotating maps is very useful for providing various information along with
    map data. We can use the `MKPointAnnotation` class to create a simple annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: We assign the map coordinates the annotation will appear on and, optionally,
    a title and a subtitle. We then add the annotation to the map view with the `AddAnnotation`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just adding an annotation object to a map view is not enough. The annotation
    needs a view that will display its information. This is accomplished by creating
    a delegate object for the map view and overriding its `GetViewForAnnotation` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the map already displays the user location, an annotation already exists,
    and it is of the type `MKUserLocation`. Inside the `GetViewForAnnotation`, we
    have to make sure to provide a view for our own annotation by checking the type
    of annotation parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we just return `null`. If the annotation parameter is of the
    type `MKPointAnnotation`, then we first try to retrieve the view for it, in a
    similar fashion to the `UITableView` that creates the cells it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If the result of the `DequeueReusableAnnotation` method is `null`, then we
    initialize a new instance for our annotation view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The view we create for the annotation here is of the type `MKPinAnnotationView`.
    This is the standard view that is represented by a pin on the map. The properties
    that we set are pretty straightforward and define its appearance and behavior.
    The `PinColor` property defines the color of the pin, the `AnimatesDrop` property
    defines if the pin will be displayed on the map with an animation, and the `CanShowCallout`
    property defines if the annotation view will display the information of its underlying
    annotation in a callout "bubble".
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have created the view for the annotation, we just return it from the
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also create custom annotations and annotation views. For annotations,
    we have to override the `MKAnnotation` class, while for annotation views we can
    override the `MKAnnotationView` class.
  prefs: []
  type: TYPE_NORMAL
- en: Annotation performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Theoretically, we can add as many annotations as we want to a map view. Although
    the `MKMapView` can manage a large amount of annotations efficiently, it is strongly
    advised to take into account a performance degradation. A way to overcome this
    is to display annotations depending on the current map region, which basically
    manages the zoom level of the map. Another way is to make sure we use the same
    instances of annotation views for the annotations that do not need different annotation
    views.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying maps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map overlays*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Displaying Data"), Displaying Data:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding map overlays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss using overlays to draw on a map.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `MapOverlayApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add an `MKMapView` on the view of `MainController`. Leave some room at the bottom,
    and add a button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the namespaces `MonoTouch.MapKit` and `Monotouch.CoreLocation`, and enter
    the following code in the `ViewDidLoad` override:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following nested class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the application either on the simulator or on the device. If
    run on the simulator, after tapping the button, the result should be similar to
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While an `MKAnnotation` represents a point on a map, an `MKOverlay` object can
    represent an area on a map. In this example, we use the `MKCircle` class, which
    inherits from `MKOverlay`, to display a circle over an area on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'We initialize an `MKCircle` instance with its `Circle` static method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter represents the coordinates of the center of the circle,
    while the second parameter represents the radius of the circle, in meters. After
    initialization, we add the overlay to the map view with the `AddOverlay` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like annotations, overlays require a view to display their information.
    To provide a view for our overlay, we override the `GetViewForOverlay` method
    in the map view''s delegate object implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Inside this method, we first check if the overlay parameter is the type we want;
    in this case, an `MKCircle:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create an instance of the `MKCircleView` class and return it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: We set the appropriate properties that will define the appearance of our overlay.
    In this case, we set the `FillColor, StrokeColor`, and `LineWidth` properties.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overlays are handled efficiently by the map view. One important thing that the
    map view takes care for us is that when we scale the map, the overlay is automatically
    scaled to match each zoom level. This way, we do not need to scale the overlay
    manually in code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom overlays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can create our own custom overlays. To do this, we need to override the `MKOverlay`
    class for the overlay and the `MKOverlayView` class for the overlay view.
  prefs: []
  type: TYPE_NORMAL
- en: Standard overlay objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from the `MKCircle`, the other standard overlay objects are `MKPolygon`
    for creating polygon shapes and `MKPolyline` for creating polylines, like in a
    track-recording application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying maps*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Adding map annotations*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
