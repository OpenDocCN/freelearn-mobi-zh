- en: Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知
- en: 'Notifications were first launched in 2009 and are a staple of the iOS system.
    Whether from your favorite app or a text message, you have encountered a notification
    at some point while using a smartphone. Pre-iOS 10, if you had to work with notifications
    in iOS, you had two types of push notifications: remote (from a server) and local.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通知首次于2009年推出，并成为iOS系统的基本功能。无论来自你最喜欢的应用还是短信，在使用智能手机的过程中，你肯定在某个时刻遇到过通知。在iOS 10之前，如果你需要在iOS中处理通知，你有两种类型的推送通知：远程（来自服务器）和本地。
- en: iOS 10 made changes to notifications that simplified them, but also made them
    more robust. In iOS 10, there is now one notification that covers both remote
    and local notifications, which is great for those who have worked with them in
    the past. Concerning breadth of functionality, notifications now allow you to
    embed rich media (such as images, video, and audio), as well as having custom
    UI content.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 10对通知进行了更改，简化了它们，但同时也使它们更加健壮。在iOS 10中，现在有一个通知涵盖了远程和本地通知，这对于以前使用过它们的人来说是个好消息。就功能范围而言，通知现在允许你嵌入丰富的媒体内容（如图片、视频和音频），以及具有自定义UI内容。
- en: In this chapter, we are going to learn how to create basic notifications, as
    well as notifications with embedded images. After we look at both of these examples,
    we also look at how to create a custom UI for our notifications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建基本通知，以及带有嵌入图片的通知。在查看这两个示例之后，我们还将探讨如何为我们的通知创建自定义UI。
- en: 'What we will cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的内容：
- en: Learning how to build basic notifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何构建基本通知
- en: Learning how to embed images into notifications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在通知中嵌入图片
- en: Learning how to build a custom notification UI
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何构建自定义通知UI
- en: Starting with the basics
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从基础知识开始
- en: Let's begin by getting our app to send us basic notifications. Inside of our
    restaurant details page, we have three buttons (9:30 PM, 10:00 PM, and 10:30 PM)
    that currently do not do anything. We are going to update those buttons so that,
    when you tap on one of them, it creates a restaurant reservation notification.
    If this were a real reservations app, we would want to store these reservations.
    When the reservation date and time neared, we would then post a notification to
    the user as a reminder. Doing all of that is beyond the scope of this book; so,
    we will just address creating a restaurant reservation notification.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从让我们的应用发送基本通知开始。在我们的餐厅详情页中，有三个按钮（晚上9:30、晚上10:00和晚上10:30），目前它们没有任何功能。我们将更新这些按钮，以便当你点击其中一个按钮时，它会创建一个餐厅预订通知。如果这是一个真正的预订应用，我们希望存储这些预订。当预订日期和时间临近时，我们将向用户发布通知作为提醒。完成所有这些超出了本书的范围；因此，我们只关注创建餐厅预订通知。
- en: Getting permission
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取权限
- en: 'Before we can send any notifications, we must get the user''s permission. Therefore,
    open the `AppDelegate.swift` file and add the following method after the `didFinishLaunchingWithOptions()`
    method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以发送任何通知之前，我们必须获得用户的许可。因此，打开`AppDelegate.swift`文件，并在`didFinishLaunchingWithOptions()`方法之后添加以下方法：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This method here checks for the user''s authorization. If the user has not
    been asked, it displays a message to the user for permission to use notifications.
    When you add this method, you will get an error. The reason for this error is
    that we need to `import UserNotifications`. At the top of the file, under `import
    UIKit`, add the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检查用户的授权。如果尚未询问用户，它将向用户显示一条消息，请求使用通知的权限。当你添加此方法时，你会得到一个错误。这个错误的原因是我们需要`import
    UserNotifications`。在文件的顶部，在`import UIKit`下添加以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, the method we just added needs to run inside of the `applicationDidFinishLaunching(application:launchOptions)`
    method. Add the following after `setupDefaultColors()`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们刚刚添加的方法需要在`applicationDidFinishLaunching(application:launchOptions)`方法内部运行。在`setupDefaultColors()`之后添加以下内容：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Your `applicationDidFinishLaunching(application:launchOptions)` method should
    now look like the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`applicationDidFinishLaunching(application:launchOptions)`方法现在应该看起来像以下这样：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*), and
    you should see the following message:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用⌘ + *R*）构建并运行项目，你应该会看到以下消息：
- en: '![](img/de156965-d152-4b7c-958a-ca7f9a3b2aa3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de156965-d152-4b7c-958a-ca7f9a3b2aa3.png)'
- en: Setting up notifications
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置通知
- en: 'Now that we have permission, we need to set up notifications. We start setting
    up our buttons:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了权限，我们需要设置通知。我们开始设置我们的按钮：
- en: 'Open the `RestaurantDetailViewController.swift` file and add the following
    method after our `showAllReviews()` method and before the last curly brace of
    our class file:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`RestaurantDetailViewController.swift`文件，在我们的`showAllReviews()`方法之后和类文件最后一个大括号之前添加以下方法：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file, and you see an empty circle appear next to this new `@IBAction`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，您会看到旁边出现一个空圆圈，这是新的`@IBAction`。
- en: Now, open the `RestaurantDetail.storyboard` and select the `RestaurantDetailViewController`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`RestaurantDetail.storyboard`并选择`RestaurantDetailViewController`。
- en: 'Select the Connections inspector in the Utilities panel and, under `Received
    Actions`, you see `onTimeTappedWithSender`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实用工具面板中选择连接检查器，在`Received Actions`下，您可以看到`onTimeTappedWithSender`：
- en: '![](img/9866cf43-882a-40ac-9bbb-4df6120dada0.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9866cf43-882a-40ac-9bbb-4df6120dada0.png)'
- en: Click and drag from the empty circle next to `onTimeTappedWithSender` to the
    first button (marked 9:30 PM) in the restaurant detail scene.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`onTimeTappedWithSender`旁边的空圆圈拖动到餐厅详情场景中第一个按钮（标记为晚上9:30）。
- en: '![](img/fd4ac628-0c89-439d-8ea4-fe8876dc7285.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd4ac628-0c89-439d-8ea4-fe8876dc7285.png)'
- en: In the prompt, select Touch Up Inside.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示中，选择Touch Up Inside。
- en: '![](img/c22425e4-3e2a-436c-a358-c51e2f4dc9a7.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c22425e4-3e2a-436c-a358-c51e2f4dc9a7.png)'
- en: Repeat these steps for the remaining two buttons (10:00 PM and 10:30 PM), clicking
    and dragging the same circle (now filled) to each of the remaining buttons in
    the scene and then choosing Touch Up Inside for each prompt that follows.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复这些步骤为剩余的两个按钮（晚上10:00和10:30）操作，点击并拖动相同的圆圈（现在已填充）到场景中剩余的每个按钮，然后为每个随后的提示选择Touch
    Up Inside。
- en: '![](img/a5961219-d435-425d-b2fd-11b3d95d24d9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a5961219-d435-425d-b2fd-11b3d95d24d9.png)'
- en: 'Now, open `RestaurantDetailViewController.swift`; this is where we need to
    get the time from inside of the buttons and pass them to our notifications. Add
    the following method after the `showAllReviews()` method and above the `onTimeTapped()`
    method:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`RestaurantDetailViewController.swift`；这是我们从中获取按钮内部时间并将其传递给通知的地方。在`showAllReviews()`方法之后和`onTimeTapped()`方法之上添加以下方法：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside of the `onTimeTapped()` method, add the following:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onTimeTapped()`方法内部添加以下内容：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We are now passing the time value to our `showNotification()` method. Build
    and run the project by hitting the Play button (or using ⌘ + *R*). You should
    now see the time of each selected button in the console.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将时间值传递给我们的`showNotification()`方法。通过点击播放按钮（或使用⌘ + *R*）构建和运行项目。您现在应该在控制台中看到每个所选按钮的时间。
- en: Showing notifications
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示通知
- en: 'Now that we have a time, let''s show our notification along with the time selected:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了时间，让我们显示与所选时间一起的通知：
- en: 'In the `RestaurantDetailViewController.swift` file, after `import LetsEatDataKit`,
    add the following:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`RestaurantDetailViewController.swift`文件中，在`import LetsEatDataKit`之后添加以下内容：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, inside of the `showNotification()` method, add the following:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`showNotification()`方法内部添加以下内容：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we are creating a notification content object. In this
    object, we are going to set the title, the body, the subtitle, the badge, and
    the sound.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们正在创建一个通知内容对象。在这个对象中，我们将设置标题、正文、副标题、徽章和声音。
- en: 'After the `initialize()` method, add the following method:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initialize()`方法之后添加以下方法：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This method is our `delegate` method for notifications. We get an error for
    our `delegate`, because we have not yet implemented the required functions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的通知`delegate`方法。由于我们尚未实现所需的函数，因此我们的`delegate`会有错误。
- en: 'Let''s do that now by creating an extension at the end of this file, after
    the last curly brace. You may already have an extension in this file for our map
    if you tackled the challenges at the end of [Chapter 11](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml),
    *Designing Static Tables*; if so, add this new extension after the last curly
    brace of that `Map` extension. In either case, add the following code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在通过在文件末尾创建一个扩展来实现这一点，在最后一个大括号之后。如果您在[第11章](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml)的挑战中完成了任务，那么您可能已经在文件中为我们的地图有一个扩展；如果是这样，在该`Map`扩展的最后一个大括号之后添加此新扩展。在任何情况下，添加以下代码：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we just need to call the `setupNotificationDefaults()` method inside
    of our `initialize()` method. Your updated `initialize()` method should now look
    like the following:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们只需在`initialize()`方法内部调用`setupNotificationDefaults()`方法。您的更新后的`initialize()`方法现在应如下所示：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*). Open
    a restaurant detail page, tap the time button, and wait five seconds. You should
    see the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 ⌘ + *R*）构建并运行项目。打开餐厅详情页面，点击时间按钮，并等待五秒钟。你应该会看到以下内容：
- en: '![](img/64c97206-46db-4e40-a230-29c00a343e4a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64c97206-46db-4e40-a230-29c00a343e4a.png)'
- en: 'Then, if you click and pull down on the notification, you should see the following:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果你点击并下拉通知，你应该会看到以下内容：
- en: '![](img/ba492d7a-8069-4dd5-bb2b-a784f0bc778a.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba492d7a-8069-4dd5-bb2b-a784f0bc778a.png)'
- en: We just implemented a basic notification; however, we can do so much more. Next,
    let's get an image inside of our notification.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚实现了一个基本的通知；然而，我们可以做更多的事情。接下来，让我们在通知中添加一张图片。
- en: Customizing our notifications
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制我们的通知
- en: Before we can embed an image, we need a test image. In the `Assets` folder of
    the Navigator panel, create a new group, called `Images`. Then, in the project
    folder for this book, open the `asset` folder for this chapter and drag the image
    assets into the `Images` folder that we just created.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够嵌入图片之前，我们需要一个测试图片。在导航面板的 `Assets` 文件夹中创建一个新的组，命名为 `Images`。然后，在本书的项目文件夹中打开本章的
    `asset` 文件夹，并将图片资源拖动到我们刚刚创建的 `Images` 文件夹中。
- en: Embedding images
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入图片
- en: 'Next, let''s embed our images. First, return to the `RestaurantDetailViewController.swift`
    file and, in the `showNotification()` method we created, remove the following
    code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们嵌入我们的图片。首先，回到 `RestaurantDetailViewController.swift` 文件，在创建的 `showNotification()`
    方法中，移除以下代码：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace the deleted section of code with the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将删除的代码部分替换为以下代码：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this `do...catch`, we are getting the image URL from our project and creating
    an attachment. We attach the rich media (here, an image) to the notification.
    The rest of the code is what we removed and just added back inside of the `do...catch`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `do...catch` 语句中，我们从我们的项目中获取图片 URL 并创建一个附件。我们将丰富的媒体（这里是一个图片）附加到通知上。其余的代码是我们移除并重新添加到
    `do...catch` 中的代码。
- en: 'Build and rerun the project by hitting the Play button (or using ⌘ + *R*).
    When you get to a restaurant detail page, tap the time button and wait five seconds.
    You should now see a thumbnail image in the notification:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用 ⌘ + *R*）构建并重新运行项目。当你到达餐厅详情页面时，点击时间按钮并等待五秒钟。你现在应该会在通知中看到一个缩略图图片：
- en: '![](img/b59e052f-17c8-4dc7-ba37-34a84f05459a.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b59e052f-17c8-4dc7-ba37-34a84f05459a.png)'
- en: 'Also, if you click and pull down on the notification, you should see the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你点击并下拉通知，你应该会看到以下内容：
- en: '![](img/89d06ba3-0aee-4fb3-a80d-98e006b43972.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89d06ba3-0aee-4fb3-a80d-98e006b43972.png)'
- en: 'Thus far, we have been receiving notifications while inside of the app. If
    you want to test notifications outside of the app, take the following steps. Build
    and run the project by hitting the Play button (or using ⌘ + *R*). When you get
    to a restaurant detail page, tap the time button and, then, immediately hit ⌘
    + *Shift* + *H*. This takes you out of the app, and you will then see the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在应用内部接收通知。如果你想在外部应用测试通知，请执行以下步骤。通过点击播放按钮（或使用 ⌘ + *R*）构建并运行项目。当你到达餐厅详情页面时，点击时间按钮，然后立即按
    ⌘ + *Shift* + *H*。这将你从应用中移除，然后你会看到以下内容：
- en: '![](img/e9303097-b8d7-4886-8b50-d2ec886f1dff.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9303097-b8d7-4886-8b50-d2ec886f1dff.png)'
- en: 'If you click and pull down on the notification, you will see the following :'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击并下拉通知，你会看到以下内容：
- en: '![](img/ce81687b-bc13-4167-ae4f-75c665238710.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce81687b-bc13-4167-ae4f-75c665238710.png)'
- en: Our notifications are looking good, but you really cannot do anything with them.
    It would be nice to confirm your reservation with a yes or no, for example. We
    need to add some buttons for the notifications to do this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的通知看起来不错，但你实际上无法对它们做任何事情。例如，确认预订时使用是或否会很好。我们需要为通知添加一些按钮来实现这一点。
- en: Adding buttons
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加按钮
- en: 'We only need to add a few things to add buttons to our notifications. First,
    we need to update our restaurant detail:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要添加一些东西来给通知添加按钮。首先，我们需要更新我们的餐厅详情：
- en: 'Inside of the `RestaurantDetailViewController.swift` file, add the following
    into the `showNotification()` method after `content.sound = UNNotificationSound.default()`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RestaurantDetailViewController.swift` 文件中，在 `content.sound = UNNotificationSound.default()`
    之后添加以下内容：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we need to create a file for our button identifiers. Right click the `Misc`
    folder inside of the `Common` folder and select New File.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个用于按钮标识符的文件。在 `Common` 文件夹内的 `Misc` 文件夹上右键点击，并选择新建文件。
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Swift File. Then, hit Next.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建新文件的选择模板屏幕中，选择顶部的iOS，然后选择Swift文件。然后点击下一步。
- en: Name this file `Identifier` and hit Create.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`Identifier`并点击创建。
- en: 'It is good practice to eliminate as many strings from your app as you can.
    Adding this file will not only eliminate strings, but it also keeps you from accidentally
    typing the wrong value. For example, we could easily misspell identifier. Therefore,
    it is a protective measure to have it in an `enum`. Add the following to the `import`
    statement in this new file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是将你应用中的字符串尽可能多地消除。添加此文件不仅会消除字符串，而且还能防止你意外输入错误的值。例如，我们很容易拼错标识符。因此，将其放在`enum`中是一个保护措施。将以下内容添加到新文件中的`import`语句：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will use this to create our button options for our notification. Open the
    `AppDelegate.swift` file. In the `checkNotifications()` method, add the following
    code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个来创建我们的通知按钮选项。打开`AppDelegate.swift`文件。在`checkNotifications()`方法中，添加以下代码：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add this code inside of the `requestAuthorization` block:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在`requestAuthorization`块内部添加此代码：
- en: '![](img/810fd1f9-8b8c-4786-a7a9-fc0fdb1d60e7.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/810fd1f9-8b8c-4786-a7a9-fc0fdb1d60e7.png)'
- en: 'In this code, we are setting up two actions: one for yes and one for no. We
    are creating a category and setting it to our notification category, which defines
    the type of notification that we want to use.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们设置了两个动作：一个用于是，一个用于否。我们创建了一个类别并将其设置为我们的通知类别，该类别定义了我们想要使用的通知类型。
- en: 'Lastly, we need to write code to handle when we receive a notification. Return
    to the `RestaurantDetailViewController.swift` file and add the following inside
    of your new extension for notifications after the `willPresent()` method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要编写代码来处理接收到通知的情况。返回到`RestaurantDetailViewController.swift`文件，并在`willPresent()`方法之后添加以下内容到你的新通知扩展中：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*). When
    you get the notification and pull down on it, you will see that you now have button
    options:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用⌘ + *R*）构建并运行项目。当你收到通知并下拉时，你会看到你现在有了按钮选项：
- en: '![](img/bed0c0e3-663d-459a-8a2c-267bfc60fa87.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bed0c0e3-663d-459a-8a2c-267bfc60fa87.png)'
- en: Inside of our `didReceive()` method, we are printing out what the user selected,
    but you can choose whatever `print` statement you would like.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`didReceive()`方法内部，我们正在打印用户选择的内容，但你可以选择任何你想要的`print`语句。
- en: Up until this point, we have looked at how to create basic notifications as
    well as notifications with images embedded in them. Next, we can take our app
    a step further by adding our custom UI into our notifications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了如何创建基本的通知以及包含嵌入图像的通知。接下来，我们可以通过将我们的自定义UI添加到通知中，将我们的应用提升到一个新的层次。
- en: Custom UI in notifications
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知中的自定义UI
- en: 'To add custom UI to our notifications, we need to add an extension. Let''s
    get started by doing the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要为我们的通知添加自定义UI，我们需要添加一个扩展。让我们通过以下步骤开始：
- en: In the Navigator panel, select the Project navigator and, then, your project.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中，选择项目导航器，然后选择你的项目。
- en: At the bottom of the TARGETS area, click the + button.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标区域底部，点击加号按钮。
- en: 'Select Notification Content Extension under Application Extension and, then,
    click Next:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序扩展下选择通知内容扩展，然后点击下一步：
- en: '![](img/2721b305-0bed-40d0-8b55-4f2f61a8ccb4.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2721b305-0bed-40d0-8b55-4f2f61a8ccb4.png)'
- en: 'In the options screen that appears, set Product Name to `LetsEatContentExtension`
    and click Finish:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，将产品名称设置为`LetsEatContentExtension`并点击完成：
- en: '![](img/f5ef2100-5432-4003-8509-6936932c589e.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5ef2100-5432-4003-8509-6936932c589e.png)'
- en: 'Next, select Activate on the screen that appears:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在出现的屏幕上选择激活：
- en: '![](img/5af05f58-cf5f-4d5b-b950-6a7d4f7300d1.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5af05f58-cf5f-4d5b-b950-6a7d4f7300d1.png)'
- en: This activation allows us to build and run our custom UI extension in the simulator.
    Now, you have a choice of running our app, the *iMessages* app, our kit or our
    custom UI extension.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此激活允许我们在模拟器中构建和运行我们的自定义UI扩展。现在，你可以选择运行我们的应用、*iMessages*应用、我们的工具包或我们的自定义UI扩展。
- en: Now that our extension is created, we need to be able to use it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了扩展，我们需要能够使用它。
- en: Open the `info.plist` file in our `LetsEatContentExtension` folder.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`LetsEatContentExtension`文件夹中的`info.plist`文件。
- en: Tap the `NSExtension` disclosure arrow to open up that key.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`NSExtension`展开箭头以打开该键。
- en: 'Then, tap the disclosure arrow to open `NSExtensionAttributes`, under which
    you can see `UNNotificationExtensionCategory`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击展开箭头以打开`NSExtensionAttributes`，其中你可以看到`UNNotificationExtensionCategory`：
- en: '![](img/24e0f077-1858-4978-a1cc-2883eb3e8617.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24e0f077-1858-4978-a1cc-2883eb3e8617.png)'
- en: This category is the name of the category of our notification we set earlier.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类别是我们之前设置的通知类别名称。
- en: Update `myNotificationCategory` to `reservationCategory`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`myNotificationCategory`更新为`reservationCategory`。
- en: 'Save the file and switch your target back to the *Let''s Eat* app. Build and
    run the project by hitting the Play button (or using ⌘ + *R*). This time, instead
    of seeing our custom image, we now have the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，并将目标切换回`Let's Eat`应用。通过点击播放按钮（或使用⌘ + *R*）来构建和运行项目。这次，我们不再看到自定义图像，而是有以下内容：
- en: '![](img/92f42f90-9248-45ae-ac73-1ed0ccf67b8b.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/92f42f90-9248-45ae-ac73-1ed0ccf67b8b.png)'
- en: You might have noticed something slightly off when you pulled down on the notification.
    The notification starts out large and then shrinks down. Inside of your `Info.plist`
    file, there is a property, `UNNotificationExtensionInitialContentSizeRatio`, that
    is currently set to `1`. Changing it to `0.25` makes this less obvious.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当你下拉通知时，你可能注意到了一些小问题。通知一开始很大，然后缩小。在你的`Info.plist`文件中，有一个属性`UNNotificationExtensionInitialContentSizeRatio`，目前设置为`1`。将其更改为`0.25`可以使这个问题不那么明显。
- en: 'Currently, this custom notification is showing us the custom and default content
    together. We can fix this by returning to our `Info.plist` inside of the `LetsEatContentExtension`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这个自定义通知同时显示了自定义内容和默认内容。我们可以通过回到`LetsEatContentExtension`内部的`Info.plist`来修复这个问题：
- en: 'Inside of `NSExtensionAttributes`, add a new item called `UNNotificationExtensionDefaultContentHidden`
    and set the type as Boolean and the value to YES:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`NSExtensionAttributes`内部，添加一个名为`UNNotificationExtensionDefaultContentHidden`的新项，并将类型设置为布尔值，值设为YES：
- en: '![](img/6066b63b-e8ca-4184-840f-99f355589838.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6066b63b-e8ca-4184-840f-99f355589838.png)'
- en: 'Save the file and build and run the project by hitting the Play button (or
    using ⌘ + *R*). Once you pull down on the notification, you see that the default
    content is hidden:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，通过点击播放按钮（或使用⌘ + *R*）来构建和运行项目。一旦你下拉通知，你会看到默认内容被隐藏：
- en: '![](img/1d245047-67c7-4f08-88e7-117f2cfc4162.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1d245047-67c7-4f08-88e7-117f2cfc4162.png)'
- en: You can now update the `MainInterface.storyboard` inside of your `LetsEatContentExtension`
    folder. In this book, we are not going to do this as we have done plenty of storyboarding,
    and this gives you an opportunity to practice what you have learned in this book
    to create a custom interface for this.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以更新`LetsEatContentExtension`文件夹内的`MainInterface.storyboard`。在这本书中，我们不会这样做，因为我们已经做了很多故事板设计，这给了你一个机会来练习你在本书中学到的知识，为这个应用创建一个自定义界面。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Notifications in iOS 10 are now even more powerful and really give you the flexibility
    to create rich custom content with very little work. In this chapter, we learned
    how to build basic notifications and then we stepped it up a bit more by adding
    embedded images into our notifications. Lastly, we briefly looked at how to add
    a custom notification using an extension.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 10中的通知现在更加强大，真正地给了你用很少的工作就能创建丰富自定义内容的能力。在本章中，我们学习了如何构建基本的通知，然后通过在通知中添加嵌入图像来进一步提升。最后，我们简要地了解了如何通过扩展添加自定义通知。
- en: In the next chapter, we will address how we can integrate 3D Touch into our
    app. 3D Touch allows users to jump into our app using shortcuts.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将3D Touch集成到我们的应用中。3D Touch允许用户通过快捷方式跳入我们的应用。
