- en: Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notifications were first launched in 2009 and are a staple of the iOS system.
    Whether from your favorite app or a text message, you have encountered a notification
    at some point while using a smartphone. Pre-iOS 10, if you had to work with notifications
    in iOS, you had two types of push notifications: remote (from a server) and local.'
  prefs: []
  type: TYPE_NORMAL
- en: iOS 10 made changes to notifications that simplified them, but also made them
    more robust. In iOS 10, there is now one notification that covers both remote
    and local notifications, which is great for those who have worked with them in
    the past. Concerning breadth of functionality, notifications now allow you to
    embed rich media (such as images, video, and audio), as well as having custom
    UI content.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to create basic notifications, as
    well as notifications with embedded images. After we look at both of these examples,
    we also look at how to create a custom UI for our notifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to build basic notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to embed images into notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to build a custom notification UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with the basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by getting our app to send us basic notifications. Inside of our
    restaurant details page, we have three buttons (9:30 PM, 10:00 PM, and 10:30 PM)
    that currently do not do anything. We are going to update those buttons so that,
    when you tap on one of them, it creates a restaurant reservation notification.
    If this were a real reservations app, we would want to store these reservations.
    When the reservation date and time neared, we would then post a notification to
    the user as a reminder. Doing all of that is beyond the scope of this book; so,
    we will just address creating a restaurant reservation notification.
  prefs: []
  type: TYPE_NORMAL
- en: Getting permission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can send any notifications, we must get the user''s permission. Therefore,
    open the `AppDelegate.swift` file and add the following method after the `didFinishLaunchingWithOptions()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This method here checks for the user''s authorization. If the user has not
    been asked, it displays a message to the user for permission to use notifications.
    When you add this method, you will get an error. The reason for this error is
    that we need to `import UserNotifications`. At the top of the file, under `import
    UIKit`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the method we just added needs to run inside of the `applicationDidFinishLaunching(application:launchOptions)`
    method. Add the following after `setupDefaultColors()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `applicationDidFinishLaunching(application:launchOptions)` method should
    now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*), and
    you should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de156965-d152-4b7c-958a-ca7f9a3b2aa3.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have permission, we need to set up notifications. We start setting
    up our buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `RestaurantDetailViewController.swift` file and add the following
    method after our `showAllReviews()` method and before the last curly brace of
    our class file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, and you see an empty circle appear next to this new `@IBAction`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the `RestaurantDetail.storyboard` and select the `RestaurantDetailViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Connections inspector in the Utilities panel and, under `Received
    Actions`, you see `onTimeTappedWithSender`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9866cf43-882a-40ac-9bbb-4df6120dada0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click and drag from the empty circle next to `onTimeTappedWithSender` to the
    first button (marked 9:30 PM) in the restaurant detail scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd4ac628-0c89-439d-8ea4-fe8876dc7285.png)'
  prefs: []
  type: TYPE_IMG
- en: In the prompt, select Touch Up Inside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c22425e4-3e2a-436c-a358-c51e2f4dc9a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat these steps for the remaining two buttons (10:00 PM and 10:30 PM), clicking
    and dragging the same circle (now filled) to each of the remaining buttons in
    the scene and then choosing Touch Up Inside for each prompt that follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5961219-d435-425d-b2fd-11b3d95d24d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open `RestaurantDetailViewController.swift`; this is where we need to
    get the time from inside of the buttons and pass them to our notifications. Add
    the following method after the `showAllReviews()` method and above the `onTimeTapped()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of the `onTimeTapped()` method, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We are now passing the time value to our `showNotification()` method. Build
    and run the project by hitting the Play button (or using ⌘ + *R*). You should
    now see the time of each selected button in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Showing notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a time, let''s show our notification along with the time selected:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `RestaurantDetailViewController.swift` file, after `import LetsEatDataKit`,
    add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, inside of the `showNotification()` method, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are creating a notification content object. In this
    object, we are going to set the title, the body, the subtitle, the badge, and
    the sound.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `initialize()` method, add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This method is our `delegate` method for notifications. We get an error for
    our `delegate`, because we have not yet implemented the required functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do that now by creating an extension at the end of this file, after
    the last curly brace. You may already have an extension in this file for our map
    if you tackled the challenges at the end of [Chapter 11](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml),
    *Designing Static Tables*; if so, add this new extension after the last curly
    brace of that `Map` extension. In either case, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we just need to call the `setupNotificationDefaults()` method inside
    of our `initialize()` method. Your updated `initialize()` method should now look
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*). Open
    a restaurant detail page, tap the time button, and wait five seconds. You should
    see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64c97206-46db-4e40-a230-29c00a343e4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, if you click and pull down on the notification, you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba492d7a-8069-4dd5-bb2b-a784f0bc778a.png)'
  prefs: []
  type: TYPE_IMG
- en: We just implemented a basic notification; however, we can do so much more. Next,
    let's get an image inside of our notification.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing our notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can embed an image, we need a test image. In the `Assets` folder of
    the Navigator panel, create a new group, called `Images`. Then, in the project
    folder for this book, open the `asset` folder for this chapter and drag the image
    assets into the `Images` folder that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let''s embed our images. First, return to the `RestaurantDetailViewController.swift`
    file and, in the `showNotification()` method we created, remove the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the deleted section of code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this `do...catch`, we are getting the image URL from our project and creating
    an attachment. We attach the rich media (here, an image) to the notification.
    The rest of the code is what we removed and just added back inside of the `do...catch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and rerun the project by hitting the Play button (or using ⌘ + *R*).
    When you get to a restaurant detail page, tap the time button and wait five seconds.
    You should now see a thumbnail image in the notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b59e052f-17c8-4dc7-ba37-34a84f05459a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you click and pull down on the notification, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89d06ba3-0aee-4fb3-a80d-98e006b43972.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thus far, we have been receiving notifications while inside of the app. If
    you want to test notifications outside of the app, take the following steps. Build
    and run the project by hitting the Play button (or using ⌘ + *R*). When you get
    to a restaurant detail page, tap the time button and, then, immediately hit ⌘
    + *Shift* + *H*. This takes you out of the app, and you will then see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9303097-b8d7-4886-8b50-d2ec886f1dff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click and pull down on the notification, you will see the following :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce81687b-bc13-4167-ae4f-75c665238710.png)'
  prefs: []
  type: TYPE_IMG
- en: Our notifications are looking good, but you really cannot do anything with them.
    It would be nice to confirm your reservation with a yes or no, for example. We
    need to add some buttons for the notifications to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We only need to add a few things to add buttons to our notifications. First,
    we need to update our restaurant detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the `RestaurantDetailViewController.swift` file, add the following
    into the `showNotification()` method after `content.sound = UNNotificationSound.default()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to create a file for our button identifiers. Right click the `Misc`
    folder inside of the `Common` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Swift File. Then, hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `Identifier` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is good practice to eliminate as many strings from your app as you can.
    Adding this file will not only eliminate strings, but it also keeps you from accidentally
    typing the wrong value. For example, we could easily misspell identifier. Therefore,
    it is a protective measure to have it in an `enum`. Add the following to the `import`
    statement in this new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use this to create our button options for our notification. Open the
    `AppDelegate.swift` file. In the `checkNotifications()` method, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this code inside of the `requestAuthorization` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/810fd1f9-8b8c-4786-a7a9-fc0fdb1d60e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this code, we are setting up two actions: one for yes and one for no. We
    are creating a category and setting it to our notification category, which defines
    the type of notification that we want to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we need to write code to handle when we receive a notification. Return
    to the `RestaurantDetailViewController.swift` file and add the following inside
    of your new extension for notifications after the `willPresent()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project by hitting the Play button (or using ⌘ + *R*). When
    you get the notification and pull down on it, you will see that you now have button
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bed0c0e3-663d-459a-8a2c-267bfc60fa87.png)'
  prefs: []
  type: TYPE_IMG
- en: Inside of our `didReceive()` method, we are printing out what the user selected,
    but you can choose whatever `print` statement you would like.
  prefs: []
  type: TYPE_NORMAL
- en: Up until this point, we have looked at how to create basic notifications as
    well as notifications with images embedded in them. Next, we can take our app
    a step further by adding our custom UI into our notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Custom UI in notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add custom UI to our notifications, we need to add an extension. Let''s
    get started by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Navigator panel, select the Project navigator and, then, your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the TARGETS area, click the + button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Notification Content Extension under Application Extension and, then,
    click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2721b305-0bed-40d0-8b55-4f2f61a8ccb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the options screen that appears, set Product Name to `LetsEatContentExtension`
    and click Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5ef2100-5432-4003-8509-6936932c589e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select Activate on the screen that appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5af05f58-cf5f-4d5b-b950-6a7d4f7300d1.png)'
  prefs: []
  type: TYPE_IMG
- en: This activation allows us to build and run our custom UI extension in the simulator.
    Now, you have a choice of running our app, the *iMessages* app, our kit or our
    custom UI extension.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our extension is created, we need to be able to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `info.plist` file in our `LetsEatContentExtension` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the `NSExtension` disclosure arrow to open up that key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, tap the disclosure arrow to open `NSExtensionAttributes`, under which
    you can see `UNNotificationExtensionCategory`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24e0f077-1858-4978-a1cc-2883eb3e8617.png)'
  prefs: []
  type: TYPE_IMG
- en: This category is the name of the category of our notification we set earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Update `myNotificationCategory` to `reservationCategory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the file and switch your target back to the *Let''s Eat* app. Build and
    run the project by hitting the Play button (or using ⌘ + *R*). This time, instead
    of seeing our custom image, we now have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92f42f90-9248-45ae-ac73-1ed0ccf67b8b.png)'
  prefs: []
  type: TYPE_IMG
- en: You might have noticed something slightly off when you pulled down on the notification.
    The notification starts out large and then shrinks down. Inside of your `Info.plist`
    file, there is a property, `UNNotificationExtensionInitialContentSizeRatio`, that
    is currently set to `1`. Changing it to `0.25` makes this less obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, this custom notification is showing us the custom and default content
    together. We can fix this by returning to our `Info.plist` inside of the `LetsEatContentExtension`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of `NSExtensionAttributes`, add a new item called `UNNotificationExtensionDefaultContentHidden`
    and set the type as Boolean and the value to YES:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6066b63b-e8ca-4184-840f-99f355589838.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the file and build and run the project by hitting the Play button (or
    using ⌘ + *R*). Once you pull down on the notification, you see that the default
    content is hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d245047-67c7-4f08-88e7-117f2cfc4162.png)'
  prefs: []
  type: TYPE_IMG
- en: You can now update the `MainInterface.storyboard` inside of your `LetsEatContentExtension`
    folder. In this book, we are not going to do this as we have done plenty of storyboarding,
    and this gives you an opportunity to practice what you have learned in this book
    to create a custom interface for this.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notifications in iOS 10 are now even more powerful and really give you the flexibility
    to create rich custom content with very little work. In this chapter, we learned
    how to build basic notifications and then we stepped it up a bit more by adding
    embedded images into our notifications. Lastly, we briefly looked at how to add
    a custom notification using an extension.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will address how we can integrate 3D Touch into our
    app. 3D Touch allows users to jump into our app using shortcuts.
  prefs: []
  type: TYPE_NORMAL
