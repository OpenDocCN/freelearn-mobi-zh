- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mac Project – App Store Body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on implementing the main body for the App Store
    project. In the previous chapter, we looked at the design of the App Store and
    more specifically the SideBar design. Then, we broke the SideBar down into all
    the necessary components required for our application requirements. We then implemented
    all the components using SwiftUI. At the end of the previous chapter, we only
    had a SideBar with some optional event tracking, but no content in the main body.
    The main section will be scrollable and showcase apps using icons and banners.
    Now we will analyze the main body, break it down into all the components it comprises,
    and implement all the components to provide an app store-like feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Main body overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the main body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra Tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have created an app store template with
    a scrollable view to showcase applications. This will serve as a solid foundation
    for further expanding the app store application or pivoting the project to something
    totally different while using the core structure we have implemented. As we reach
    the end of the chapter, I will give exercises to implement more advanced functionality
    in the app store. This will transition nicely into our fourth and final project,
    the Apple Watch Fitness Companion App.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install Xcode, just search for Xcode in the App Store, select, and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further information regarding the technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Main body overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take another look at the wireframes from [*Chapter
    6*](B18783_06.xhtml#_idTextAnchor354) and break them down into their individual
    components. The wireframe images for the app store and the main body have been
    provided in this section. These images depict the layout and design of the app
    store and the main body.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – App Store view](img/Figure_7.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – App Store view
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – App Store main body](img/Figure_7.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – App Store main body
  prefs: []
  type: TYPE_NORMAL
- en: Before we code our application, we will break down the main body into the elements
    that comprise it. As a little task, see whether you can figure out what these
    are, but don’t worry if you don’t know the exact UI component names. We will look
    at the components in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Image components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Image component is one of the core components offered by SwiftUI. It allows
    you to display an image, which can be used to provide a visual representation
    or to aid a body of text. We will use it in two main ways, firstly to showcase
    a particular app using a Highlight banner, and secondly to show a list/grid of
    applications. The following figures show the application icon and application
    highlight banner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – App icon](img/Figure_7.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – App icon
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Banner](img/Figure_7.04_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Banner
  prefs: []
  type: TYPE_NORMAL
- en: Text component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Text component is one of the simplest components offered by SwiftUI. It
    allows you to display a string of characters/numbers, which is very useful for
    headings and providing information. We will use it for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: App title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming section, we will proceed to develop the main body of our application
    using the SwiftUI components that we previously discussed. This implementation
    will be carried out with utmost precision and attention to detail.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the main body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will complete the third project in this book by implementing
    the main body of our application. Our first step will be to code the Highlight
    banner, followed by the app icons.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the highlight banner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firstly, we will add the code for a Highlight banner. The banner is simply
    going to be an image that spans the width of the body; we will give it some spacing
    for aesthetic purposes. It is common to add multiple banners throughout the page
    to highlight different applications and have carousel banners, which provide the
    ability to showcase multiple banners in a single section through a transition
    such as sliding. We will implement a single banner; however, adding more is simple.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by adding a banner image. My image is **728x90** pixels. Feel free
    to modify this to suit your needs. Select **Assets** from the **Project Navigator**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Assets location in Project Navigator](img/Figure_7.05_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Assets location in Project Navigator
  prefs: []
  type: TYPE_NORMAL
- en: Now, the **Assets** view will appear. Importing an image into **Assets** can
    be done in one of two ways
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Dragging and dropping the files into the **Assets** section:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 7.6 – Dragging and dropping asset\uFEFF](img/Figure_7.06_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Dragging and dropping asset
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-clicking the **Assets** section and selecting **Import…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Import… button](img/Figure_7.07_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Import… button
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the asset(s) have been imported, the **Assets** view will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Asset(s) imported](img/Figure_7.08_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Asset(s) imported
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'I am using the banner for my developer-centric podcast FireDEV. Feel free to
    use it and tune in to my podcast every Thursday at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spotify**: [https://open.spotify.com/show/387RiHksQE33KYHTitFXhg](https://open.spotify.com/show/387RiHksQE33KYHTitFXhg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple** **Podcasts**: [https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831](https://podcasts.apple.com/us/podcast/firedev-fireside-chat-with-industry-professionals/id1602599831)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google** **Podcasts**: [https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw](https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy83Yjg2YTNiNC9wb2RjYXN0L3Jzcw)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will add an `Image` component after the `List` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Banner added](img/Figure_7.09_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Banner added
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try and resize the window, there are restrictions. We need to make the
    banner resizable and maintain its original aspect ratio. Update the image code
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We made the image resizable, which allows it to change size based on the size
    of the window. This is very useful as the user will run the App Store on different
    screen sizes and may not always have it fullscreen. We then added horizontal padding
    to make sure it doesn’t touch the left or right edges. This can be omitted if
    you like, or you can specify a set amount of padding. Finally, we set it to `scaledToFit`,
    which maintains the original aspect ratio. Distortion is never a good idea. All
    of this results in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Banner updated](img/Figure_7.10_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Banner updated
  prefs: []
  type: TYPE_NORMAL
- en: 'As of now, the banner is always in the center. We want it at the top of the
    view. To achieve this result, we will enclose the image code we added previously
    within a `ScrollView` with an alignment of `topLeading`. Update the code like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also add a `Color.clear` instruction to make sure there is no background
    color, all of which results in the following awesome banner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Banner positioned at the top](img/Figure_7.11_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Banner positioned at the top
  prefs: []
  type: TYPE_NORMAL
- en: The highlight banner has been finished, which can be converted into a carousel.
    Moving forward, the app groups will be coded to showcase a list of application
    icons.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the app groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now implement the code to display app groups. These will contain an
    image representing the application icon and a label that represents the application
    name. Feel free to add more components to each group and arrange them as you see
    fit. I have added an app icon to the assets. I followed the previous steps to
    add images. Feel free to refer to those steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the following code before the body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be used in our grid and ensures the items have a minimum size of 300\.
    This is extremely useful as we don’t want them to become so small the user cannot
    see them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code beneath the banner code we added in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s break down the code before we run the application.
  prefs: []
  type: TYPE_NORMAL
- en: We create a `LazyVGrid` using `adaptiveColumns` and with `spacing` set to `20`.
    Feel free to change the spacing of the column sizing as you see fit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we use a `ForEach` loop that runs 20 times. Feel free to substitute the
    code with an array of items as done in the previous project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we create a `Label` component beneath the image. The label will be used
    as the name of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we create an `Image` component and a `Label` component, and we omit
    the `systemImage` parameter as it is not required by us. However, you must put
    something, hence the empty quotation marks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Running the application will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – App groups](img/Figure_7.12_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – App groups
  prefs: []
  type: TYPE_NORMAL
- en: 'We are almost done with this application. The application name is a little
    on the small side. Let’s make it bigger, and update `Label` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, running this will result in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Label font size increase](img/Figure_7.13_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Label font size increase
  prefs: []
  type: TYPE_NORMAL
- en: 'As a recap, here is the whole code for `MainView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The code is also available in the GitHub repository of the book.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented the main body for our App Store application,
    thus finishing our third project. There were two main sections – first, we implemented
    a Highlight Banner, which can be used multiple times throughout the view to showcase
    different applications. Then, we implemented a grid of app groups. Although the
    app information was hardcoded, it can be abstracted into an array, which can store
    more information for each application. In the next section, we will summarize
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Extra Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the application is complete, here is a list of extra tasks for you
    to complete to enhance your application:'
  prefs: []
  type: TYPE_NORMAL
- en: An app page, to which the user navigates when they click an app icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple highlight banners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the banner to be a carousel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different pages for the section in the sidebar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling data from an array or external source such as a database for the app
    metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will summarize what we have covered in this chapter,
    but first, we will look over the code to help with the extra tasks for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Search Functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add search functionality to the app, you can use the `.searchable` modifier
    provided by SwiftUI. Here’s the modified code with search functionality added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this modified code, I added the `.searchable(text: $searchText)` modifier
    to the `List` view, which enables search functionality. The `searchText` variable
    is used as the binding for the search text input.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I also added an `.onSubmit(of: .search)` modifier to the `List` view to handle
    the search submission. In this example, it prints the search text to the console,
    but you can customize the action based on your requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: With these modifications, users will be able to enter search queries and filter
    the items in the list based on the entered text.
  prefs: []
  type: TYPE_NORMAL
- en: App Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To provide an enhanced page with more information when the user clicks on an
    app, you can create a new view that displays detailed information about the selected
    app. Here’s an example of how you can modify the code to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this modified code, I added a new `AppDetailsView`, which takes the selected
    app name as a parameter and displays more detailed information about the app.
    You can customize the content of this view based on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'I also added a new `@State` variable called `selectedApp` to track the selected
    app name. When a user taps on an app in the list or label, the corresponding app
    name is assigned to `selectedApp`, and `AppDetailsView` is presented as a sheet
    using `.sheet(item: $selectedApp)`. When the user dismisses the sheet, `selectedApp`
    is set back to `nil`.'
  prefs: []
  type: TYPE_NORMAL
- en: In `AppDetailsView`, I simply display the app name for demonstration purposes.
    You can add more information and customize the layout as per your app’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: With these modifications, when a user taps on an app, a new sheet will appear
    showing the enhanced page with more information about the selected app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we successfully implemented the main body for the app store
    application. We started by analyzing the wireframes and breaking down each element
    into SwiftUI components. We then meticulously implemented the SwiftUI components
    to match the design from the wireframe. We implemented a scrollable stack with
    a highlight banner and app icons. We also looked at a few extra task implementations
    at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin working on our fourth and final application,
    which is the fitness companion app for Apple Watch. Our focus will be on analyzing
    the design and breaking it down to gain a better understanding of how we can implement
    this application on our next platform.
  prefs: []
  type: TYPE_NORMAL
