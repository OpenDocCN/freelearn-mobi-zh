- en: Chapter 8. It's Too Dangerous to Go Alone, Take a Friend!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve done it! You''ve officially released your game and it''s doing great!
    But now you want to add more features and push an update, right? Because the same
    thing over and over is kind of repetitive and we don''t want to lose people''s
    interest. This is what we will discuss in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game Center integration (we mix multiplayer and Game Center)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing an update to the AppStore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we can make things super fun for our players because, really, who doesn't
    like playing with friends? It's going to be a fair amount of work, but hey, it
    will be totally worth it!
  prefs: []
  type: TYPE_NORMAL
- en: Let's do this...
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm sure all of us remember sitting down in front of our old CRT TV with a friend
    and loading up *Super Mario 3* (blowing on the cartridge before inserting it to
    ensure that it works) and playing together for hours on end.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the split screen multiplayer was introduced and that blew everyone's minds.
    "We can play together at the same time? We don't have to take turns? Awesome sauce!"
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are in the age of Bluetooth/online multiplayer games. No more are we
    sitting down with friends in the same room to play our games; no, we are antisocial
    now. That's not an issue though; it does leave a smaller mess to clean up when
    you're done playing. This is what will integrate—multiplayer with matchmaking—and
    it will be so cool!
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, however, we do need to enable and integrate **Game Center**
    into our game. To start doing this, let''s open up our project in Xcode. With
    our project selected on the left-hand side, click on the **Capabilities** tab
    in the center of the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplayer integration](img/B03553_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, scroll through the list of capabilities we can add and find **Game Center**
    (it's usually the third one in this list). Click on the arrow to roll out the
    options. You will see a button that says **OFF**, click that button to turn on
    **Game Center**.
  prefs: []
  type: TYPE_NORMAL
- en: We can't run our game and expect **Game Center** to automatically work, no no!
    For that, we actually have to authenticate the user by logging them in when our
    app opens up.
  prefs: []
  type: TYPE_NORMAL
- en: In order to ensure that everything is organized within our app, we will create
    a new group (or folder) within our project and name it `Multiplayer.`
  prefs: []
  type: TYPE_NORMAL
- en: We will then have to create a new class (by navigating to **File** | **New**
    | **File**) and create a new `.h` file as well as a new `.m` file and name them
    both `MultiplayerHelper`. Then, drag the two files into the `Multiplayer` folder
    we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now replace the code within `MultiplayerHelper.h` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This imports the `GameKit` API (we will use this to connect the two players
    together) and then defines two properties—one is a view controller that we will
    use to display the Game Center authentication and the other is used to keep track
    of the last error (if any) that occurred while interacting with Game Center.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s pop on over to our `.m` file and change the code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I know this does seem a bit daunting at first, but let's break it all down.
    At once, we get an instance of the `GKLocalPlayer` class, which represents the
    currently authenticated player. We then give `GKLocalPlayer` an authentication
    handler, which the `GameKit` API will call.
  prefs: []
  type: TYPE_NORMAL
- en: We set up a method to store any errors that may appear for easy debugging with
    the `setLastError:` method.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we check whether the player is logged in to Game Center in either the
    GC app or anywhere else within your device. If not, the `GameKit` API will attempt
    to authenticate the user. This is where we display the authentication window (we
    all know the Game Center login popup window, don't we?). It's ideal for authenticating
    the user as soon as possible. No one wants to be interrupted with the authentication
    window midway through gameplay or while typing game settings.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if the player is logged in, the `authenticated` property of the
    `Game Kit` local player will be set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the last method is just turning Game Center off. Who knows, maybe the
    player doesn't want to be bothered by it, so all the features get shut off.
  prefs: []
  type: TYPE_NORMAL
- en: As Game Center authentication occurs in the background of the app, the game
    can authenticate at any time when the app is open, irrespective of whether the
    player is navigating screens or fighting a boss battle. That's not what we want.
    In order to counteract this from killing our game, we will use a bit of trickery.
    Basically, we will get Game Center to create a notification, and the current view
    that we are on will be responsible for displaying it. So, for example, if the
    notification is called in the main menu, no problem, we will call it right away.
    However, if we are mid-level and the notification is called, we will need to display
    the authentication window at a convenient time, such as when the player pauses
    or dies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to define the notification. So, in our `MultiplayerHelper.m`
    file, we will add the following line directly at the top of the file, just under
    the `@import GameKit` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Further down in our `setAuthenticationViewController:` method, add the following
    block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: All that this method does is store and send the notification to the current
    view controller. Are you following me? I know it's a lot to take in, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now scroll down to our `-(void)setLastError:` method and add the following
    code within the parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will just send a log into the console if anything awry occurs. We set `MultiplayerHelper`
    first before the error so in the log we will actually see `MultiplayerHelper Error:`
    "`Connection Failed`" This way it is much easier to see what error is being thrown.
    There can be a lot of times a connection fails, by doing this we will be able
    to tell, not only what the error is, but what is causing the error. This is a
    good practice to follow; it makes things a heck of a lot easier when debugging
    issues!
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to hop on over to our `MultiplayerHelper.h` file, and we need
    to add an external linkage method just above the `interface` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will allow us to access this function through other parts of our project,
    so we can show the authentication view whenever needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add in a declaration to authenticate the local player just
    above `@end`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's all we need to authenticate the player!
  prefs: []
  type: TYPE_NORMAL
- en: 'For the moment, the content of your `MultiplayerHelper.h` file should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the content of your `MultiplayerHelper.m` file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With that all sorted out (hopefully everything is working perfectly for you),
    we will hop into our `ViewController.m` file, and we will add the following functions
    inside the `(void)viewDidAppear:` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Again, we will use the `NSNotificationCenter` method, which will allow each
    `ViewController` class to send a notification, in this case to display the authentication
    view controller, so it can be handled differently depending on where it's being
    called in the `ViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the method to actually show the authentication view controller.
    Further in the `ViewController.m` file, add the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run and test the game after a few seconds, you will be greeted with
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplayer integration](img/B03553_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you type your credentials, you will be logged in, and then you will see
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplayer integration](img/B03553_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We aren't done yet! We still need to search for other players to play with.
    The great thing about Game Center is that a matchmaking system is built right
    into the API, so we don't have to do any funky complicated programming or GUI
    creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s hop back over to our `MultiPlayerHelper.h` file so that we can make
    the following changes by adding this block of code after our `@import` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We then have to modify our `@interface` line, so we can support the matchmaking
    protocol we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then add these functions after our `@interface` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Whoa, whoa! Settle down there, cowboy! That's some trickery I've never seen
    before! Let's break it down!
  prefs: []
  type: TYPE_NORMAL
- en: First, we added a new protocol entitled `MultiPlayerHelperDelegate`. This is
    so we can notify other objects and functions when certain events occur, such as
    a new game starting or ending.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `MultiplayerHelper` class defines two new protocols. The first protocol
    is the `GKMatchmakerViewControllerDelegate` function, which enables the `MultiplayerHelper`
    class to notify the player when it's found a new match. The second protocol is
    the `GKMatchDelegate` function, which is for Game Center to notify `MultiplayerHelper`
    if new data is coming in or if we lose the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the next action allows the `MultiplayerHelper` class to search for
    someone to play with.
  prefs: []
  type: TYPE_NORMAL
- en: Easy, right? YES!
  prefs: []
  type: TYPE_NORMAL
- en: We will now hop over to our `GameKitHelper.m` file so that we can add more functions!
  prefs: []
  type: TYPE_NORMAL
- en: 'The first function has to be added within our `@implementation` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a simple `true` or `false` statement that we will call if there is
    a new match beginning. Now, we will add the following function (I added it just
    after the `(void)authenticateLocalPlayer` method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is the function that will allow a match to be found. We set it up so that,
    if the player doesn't sign in to Game Center, it will invalidate and do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we begin the search for a new match. This method allows us to customize
    the type of match we want, for example, the minimum or maximum players desired
    in the match. You can create a GUI so that the matchmaker can customize the match
    himself like in your typical FPS game.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we create a new instance of the Game Kit `MatchMakerViewController` function
    by setting the delegate to our `MultiplayerHelper` object, and it then pops it
    into the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `MatchMakerViewController` function begins to start searching.
    It will send out some call-backs, which we will now add. Insert the following
    directly after that method we just added; the first will be called when the user
    cancels searching for a friend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The next is when the matchmaking process has failed; we then show in the log
    what happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, we've located a match!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code tells us whether the match has received any data
    sent from the player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells us if there''s a change in the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This will tell us if the game can''t start for some odd reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, this tells us if there was an error in connecting to any player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add another `NSString` class at the top of our `MultiplayerHelper.m`
    file. Add the following declaration just under the definition of our `present_authentication_view_controller`
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then scroll down to our `authenticatedLocalPlayer` method, and we will
    edit it so that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Again, what we did here is create a new notification (the `NSString` class)
    to be called later on when the player is authenticated, as we will handle the
    calling of that notification momentarily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s pop back over to our `MultiPlayerHelper.h` file, where we will add the
    following line of code just below the `@import` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, this is an external linkage that we will access later. For the moment,
    we will change our `ViewController.h` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We needed to adjust the `ViewController` interface to implement the `MultiPlayerHelperDelegate`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to adjust our `ViewController.m` file with the following additions
    and changes. First, we will add this block to our `(void)viewDidAppear` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows us how we accept the notification we created earlier
    to authenticate the player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following definitions under the `dealloc` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: These will simply log each notification that comes through the `MultiPlayerHelperDelegate`
    method, so when a game begins or ends or when data is received, you will see a
    log in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run it, and you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplayer integration](img/B03553_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome!! That part is looking pretty cool, but we still have quite a way to
    go.
  prefs: []
  type: TYPE_NORMAL
- en: Game Center integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matchmaker, matchmaker find me a match! Now's the time to start finding our
    friends!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s pop over to our `MultiplayerHelper.h` file so that we can add in a new
    dictionary to store the players we find. Just after the `@interface` line, add
    in the following declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This dictionary allows Game Kit to easily look up player data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will go over to our `MultiplayerHelper.m` file and make a few new changes.
    First, we will add a new method just after we authenticate our local player:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to actually call this method, and we will call it in two separate
    areas. In the first method, we will adjust the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to adjust yet another method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you were to test our code on two devices, you should get the following
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: That's it! Now all that is required to finish our multiplayer integration is
    to handle the controls between the two connected devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the multiplayer features all integrated, it's up to you to
    make both players appear! (You didn't think I would make it that easy for you,
    did you?)
  prefs: []
  type: TYPE_NORMAL
- en: Most of the work has been completed for you; just keep in mind how to work between
    multiple classes. Want a hint? Send messages! For example, when you press the
    jump button, send the `MultiPlayerHelper` method a message to make `player2` move
    within the `GameScene` class. Oh, and don't forget to set up `player2`.
  prefs: []
  type: TYPE_NORMAL
- en: I know you can do it!
  prefs: []
  type: TYPE_NORMAL
- en: This will be the final challenge for you.
  prefs: []
  type: TYPE_NORMAL
- en: When you're done...
  prefs: []
  type: TYPE_NORMAL
- en: Pushing updates to the AppStore!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have completed your awesome new multiplayer game, it's time to
    push the latest version of your game to the AppStore! Do you remember how we pushed
    our game in the first place? The steps are very similar!
  prefs: []
  type: TYPE_NORMAL
- en: To begin, simply log in to [itunesconnect.apple.com](http://itunesconnect.apple.com)
    and, in the **My Apps** section, click on the app you want to update.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have selected the app, you will be greeted with a big blue circle with
    an **i** in the center asking you to create a new app version if you want to change
    the app information. Well how the heck do I do that?!
  prefs: []
  type: TYPE_NORMAL
- en: It's easy, try to stay calm.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the sidebar, simply click on the **+** button where it says **VERSION OR
    PLATFORM**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing this book, it will ask you whether you want to create
    a new iOS version or a tvOS version.
  prefs: []
  type: TYPE_NORMAL
- en: For this book (because we didn't cover tvOS).
  prefs: []
  type: TYPE_NORMAL
- en: ITunes connect will then ask you to type in the new version number. When you
    click on **Done**, it will appear above the current version that says **Ready
    for Sale**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on the new version, you will be asked to fill in new version
    information and upload new screenshots, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can then change the description of the app and contact information and select
    when you want the app to be released. When you have it all filled out and all
    the new screenshots uploaded, you can exit your browser and open up Xcode again.
  prefs: []
  type: TYPE_NORMAL
- en: I know, earlier we used Application Loader, but Xcode seems to be a much easier
    way to do it because you can build and submit directly through it.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember how we do this? No problem!
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the scheme at the top of our project and ensure that we have a device
    build selected (otherwise, the archive option will not be available), as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have a device build selected, navigate to **Product** | **Archive**.
    Xcode will now build our app and archive it for AppStore submission. Once it's
    done, it will show you the organizer with all the builds of our app and the other
    apps we have built in the past. The most recent build will automatically be selected.
    On the sidebar, simply click on **Upload to App Store**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Xcode will validate our package, sign it, and then archive it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing updates to the AppStore!](img/B03553_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once that's done, simply click on the **Upload** button! Xcode will automatically
    upload your project file to the AppStore. Don't forget to change the version number
    in the list before you upload it, or else it will come up with an error after
    the upload.
  prefs: []
  type: TYPE_NORMAL
- en: Now all you have to do is wait for your awesome new version to be released!
  prefs: []
  type: TYPE_NORMAL
- en: I'm so proud of you guys! You've come such a long way!
  prefs: []
  type: TYPE_NORMAL
- en: I didn't forget... I just missed it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Did you have any issues when implementing the multiplayer functionality of our
    game? Did it show you it wasn't recognized by Game Center? Silly me! I forgot
    to mention a somewhat critical step to follow... Oops! Hey, it happens!
  prefs: []
  type: TYPE_NORMAL
- en: So, if you did get that error when running your app on a device or even in the
    simulator, it's because your game hasn't been registered in Game Center.
  prefs: []
  type: TYPE_NORMAL
- en: How do you do this?
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [itunesconnect.apple.com](http://itunesconnect.apple.com) again, go
    to **My Apps**, and then open up your app. Scroll down and, if you see a gray
    box with the text **Click + to select Multiplayer Compatibility for this app version**
    under the **Multiplayer Compatibility** section, then you know where I've, you've,
    I've, you've gone wrong.
  prefs: []
  type: TYPE_NORMAL
- en: '![I didn''t forget... I just missed it](img/B03553_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simply click the **+** button and select your app to add multiplayer compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: You're done!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Guys, I'm so happy you've come all this way with me! I know, at times it may
    have been confusing or a lot to take in, but you've made it!
  prefs: []
  type: TYPE_NORMAL
- en: I hope you will be able to Master iOS Development with all the knowledge and
    tips and tricks I have taught you!
  prefs: []
  type: TYPE_NORMAL
- en: Have an awesome game development career, and never give up on your dreams and
    passions. The following image shows us the final result when the game is all completed.
  prefs: []
  type: TYPE_NORMAL
- en: '![You''re done!](img/B03553_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed implementing multiplayer integration! We set up GameCenter for
    our game, and we even got player authentication and match searching all ready
    to go. It's all up to you to finish the awesome project. We also discussed how
    to upload an update of our game, so the millions around the world can enjoy your
    newest update.
  prefs: []
  type: TYPE_NORMAL
