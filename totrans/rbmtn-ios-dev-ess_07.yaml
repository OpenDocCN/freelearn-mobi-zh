- en: Chapter 7. Interface Builder and WebView – More Goodies!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"Time is precious; waste it wisely."*'
  prefs: []
  type: TYPE_NORMAL
- en: '*–*Anonymous**'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will learn about some features of iOS development with RubyMotion.
    Xcode is a very advanced IDE and has many qualities, which we can exploit to develop
    faster and better iOS applications. In this chapter we will also learn how to
    use an **Interface Builder** for rapid development with RubyMotion. We will also
    have a look at some key elements of Xcode, such as `.xib`, `.nib`, and WebView,
    to create real-life interactive apps.
  prefs: []
  type: TYPE_NORMAL
- en: Interface Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode's Interface Builder allows you to create your application's user interface
    visually, instead of writing code. Interface Builder is a great tool that is very
    simple to use and is pivotal in making iOS development really fast. Therefore,
    the Interface Builder used along with RubyMotion further reduces development time.
    We can say these are two delicious recipes independently, but when used together,
    it's the ultimate formula to make beautiful iOS apps as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Interface Builder comes with Xcode. Before we jump into using Interface Builder,
    it's important to understand that although Interface Builder creates the UI using
    the drag-and-drop mechanism, it is however not creating the Objective-C code behind
    the scene. It's creating an XML description of the GUI you're building, and the
    Cocoa Touch framework uses that XML to actually create the UI elements, such as
    label and textbox, for your application at runtime. Everything we do in Interface
    Builder could be done by writing lines of Ruby code—that's exactly what we have
    been doing from the beginning of this book—but shortly you will see how things
    get really easy with a GUI builder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XCode uses XML only for the editing stage, which is then compiled to nibs. Cocoa
    Touch never sees the XML source.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin using Interface Builder, let's understand some jargon associated
    with XCode development. The GUI builder provides options to drag-and-drop buttons,
    table views, and text fields into your app window. The resulting interface is
    stored as a `.xib` file. A `.xib` file is an XML representation of your objects
    and their instance variables, and it is compiled into a `.nib` file when your
    application is built. The `.xib` file is easier to work with but the `.nib` file
    is smaller and easier to parse, that's why the file that actually ships with your
    application is a `.nib` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.nib` file is short for NeXT Interface Builder.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try the Interface Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we have created the views for our **Restro** application views by writing
    code in Ruby. In this section, let's create a view using the GUI-based Interface
    Builder. We will create a **Contact Us** form and use it in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Interface Builder is integrated into Xcode, which is a one stop IDE for
    any Apple-related development, whether it''s for iOS devices or Mac. We will create
    a `.xib` file and then use this file in our RubyMotion project by performing the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode and click on **Create a new Xcode Project**.![Let's try the Interface
    Builder](img/5220OT_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Single View Application**, as we need only one `.xib` file.![Let's
    try the Interface Builder](img/5220OT_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter this data in the project-creation wizard. Notice that we have selected
    the device as **iPhone**. We can also see the other options, such as **iPad**
    and **Universal**. If you want to create a single application to be used on both
    iPhone and iPad, use the **Universal** option from the drop-down list. Also, unselect
    the **Use Storyboards** option.![Let's try the Interface Builder](img/5220OT_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the project in a folder of your choice; your project will then be loaded
    in XCode. Click on `ViewController.xib` and you will be able to see the Interface
    Builder.![Let's try the Interface Builder](img/5220OT_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Interface Builder has a fairly simple layout; it consists of four main
    windows:'
  prefs: []
  type: TYPE_NORMAL
- en: View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The View window is where you construct your interface. You will drag-and-drop
    items from the Library window onto the View window to place them. The document
    browser allows you to browse hierarchically the elements you have placed in your
    `.nib` file. Finally, the Inspector window shows you all of the different attributes
    of the selected element and allows you to edit them.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now the magic begins; drag **Navigation Bar** from Library to view the
    section as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s try the Interface Builder](img/5220OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you select **Navigation Bar**, you will see many properties in the Inspector
    window. Change the tag value to **1** in the Inspector window. Remember that we
    will use this tag value in the RubyMotion project code. We need to wire our `View
    Controller` elements. The easiest way to do this is to use its **Tag** attribute.
    **Tag** is an `integer` property of the `UIView` class that you can use to identify
    your views. Basically, you have to set a unique integer for each `UIView` class
    you need to access from your `UIViewController` element.
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s try the Interface Builder](img/5220OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, add a text field for e-mail and change the value for the placeholder
    to `Email` as shown in the following screenshot. There are a lot of properties
    associated with every Library object; for example, in case of a text field, we
    have changed the keyboard value to `Email` as it suits our requirement; but you
    are free to go ahead and play with other properties too. Using `Email` will show
    a keyboard customized for entering e-mail addresses.
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s try the Interface Builder](img/5220OT_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need a button. Let's drag-and-drop a button onto the View window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s try the Interface Builder](img/5220OT_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .xib to RubyMotion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will import our `.xib` file into our RubyMotion project.
    Open the folder of the Xcode project and locate `ViewController.xib`. It's inside
    a folder named `en.lproj`; copy it into the `resources` folder of your **Restro**
    application, which we created in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `about_controller.rb file` in the `restro` app, which we created
    in the last chapter, with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we have imported the `.xib` file from Xcode to the RubyMotion project, RubyMotion
    creates a `.nib` file automatically when we build the code with the `Rake` command.
    Here, we are creating a `View Controller` variable with an initializer `initWithNibName`
    that receives a parameter, which will be the name of the `.nib` file. This initializer
    has the responsibility of instantiating the `.nib` file and wiring the `View`
    declared in the `view` property of the `View Controller variable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file `contact_us_controller.rb` inside the app folder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s fire up the terminal and run the application with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![.xib to RubyMotion](img/5220OT_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s update `contact_us_controller.rb` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start the application by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Enter a few incorrect values in the form and you will get **Invalid value**
    printed on the terminal. Once you enter the values correctly in the form and submit
    it, it will be pulled down.
  prefs: []
  type: TYPE_NORMAL
- en: '![.xib to RubyMotion](img/5220OT_07_10_New.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's understand the code. First we have assigned the tags to the attributes
    that we had created in Interface Builder. And then we have used these tags to
    wire our variables to those components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will retrieve a subview of `self.view` based on its tag.
  prefs: []
  type: TYPE_NORMAL
- en: We have also created an `action` item for the **Submit** button. That means
    when we click on the **Submit** button, it will call the action `send_message`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the `send_message` action, we are checking whether the form is valid or not.
  prefs: []
  type: TYPE_NORMAL
- en: Some developers like to design the user interface using Interface Builder; others
    prefer to work entirely with code. One of the reasons is that when connecting
    Interface Builder outlets and actions to your code, it is easy to make a mistake.
    This often results in an error that is more difficult to debug than if you had
    simply written the entire code, as you have to debug in two places (Interface
    Builder and your code) instead of just one (the code).
  prefs: []
  type: TYPE_NORMAL
- en: UIWebView – embed web content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a possibility that we have to show web content in our application.
    The `UIWebView` class helps us to do exactly that. To do this, simply create a
    `UIWebView` object, attach it to a window, and send a request to load web content.
    We can also use this class to move back and forth in the history of web pages
    and you can even set some web content properties programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create a `UIWebView` class that displays [www.rubymotion.com](http://www.rubymotion.com)
    in our view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `about_controller.rb` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s understand the code. Take the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `NSURL.URLWithString` tells our application that the text passed is a
    web address or a URL, which is now an `NSURL` object called `url`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`NSURLRequest.requestWithURL` processes the `url` variable passed as a request.
    It is now a request object called `request`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we load the request into the WebView class, which we have named `@my_web_view`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fire up the terminal and run our application as follows to see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UIWebView – embed web content](img/5220OT_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s recap what we have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode Interface Builder with RubyMotion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using WebView to embed web content in your application with RubyMotion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter we will focus on a pivotal part of the software development
    lifecycle, which is testing. We will learn how to write test cases for the RubyMotion
    project and test our application on iOS devices.
  prefs: []
  type: TYPE_NORMAL
