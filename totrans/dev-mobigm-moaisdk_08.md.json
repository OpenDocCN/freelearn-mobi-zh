["```swift\n      background = {\n        type = RESOURCE_TYPE_IMAGE, \n        fileName = 'background/wizardtower.png', \n        width = 1000, height = 700\n      },\n    ```", "```swift\n    self:loadBackground ()\n    ```", "```swift\n    function Game:loadBackground()\n\n      self.background = {}\n      self.background.deck = ResourceManager:get('background')\n\n      local prop = MOAIProp2D.new ()\n      prop:setDeck (self.background.deck)\n      prop:setLoc (0, 0)\n\n      self.background.prop = prop\n\n      self.layer:insertProp (prop)\n\n    end\n    ```", "```swift\n  self.camera = MOAICamera2D.new ()\n```", "```swift\n      self.layer:setCamera ( self.camera )\n    ```", "```swift\n      local x, y = InputManager:deltaPosition () \n    ```", "```swift\n      self.camera:moveLoc ( x, 0, 0.5, MOAIEaseType.LINEAR )\n    ```", "```swift\n    function Game:setupLayers ()\n\n      self.layers = {}\n      self.layers.background = MOAILayer2D.new ()\n      self.layers.farAway = MOAILayer2D.new ()\n      self.layers.main = MOAILayer2D.new ()\n    ```", "```swift\n         for key, layer in pairs ( self.layers ) do\n            layer:setViewport ( viewport )\n            layer:setCamera ( self.camera )\n          end\n        ```", "```swift\n          local renderTable = {\n            self.layers.background,\n            self.layers.farAway,\n            self.layers.main\n          }\n        ```", "```swift\n          MOAIRenderMgr.setRenderTable(renderTable)\n        end\n        ```", "```swift\nlocal resource_definitions = {\n\n  background = {\n    type = RESOURCE_TYPE_IMAGE, \n    fileName = 'background/background_parallax.png', \n    width = 1500, height = 197,\n  },\n\n  farAway = {\n    type = RESOURCE_TYPE_IMAGE, \n    fileName = 'background/far_away_parallax.png', \n    width = 625, height = 205,\n  },\n\n  main = {\n    type = RESOURCE_TYPE_IMAGE, \n    fileName = 'background/main_parallax.png', \n    width = 975, height = 171,\n  },\n\n}\n```", "```swift\n    local background_objects = {\n\n      background = {\n        position = { 0, 70 },\n        parallax = { 0.05, 0.05 }\n      },\n\n      farAway = {\n        position = { 0, 50 },\n        parallax = { 0.1, 0.1 }\n      },\n\n      main = {\n        position = { 0, -75 },\n        parallax = { 1, 1 }\n      },\n\n    }\n    ```", "```swift\n    function Game:loadBackground ()\n\n      self.background = {}\n\n      for name, attributes in pairs(background_objects) do\n    ```", "```swift\n            local b = {}\n            b.deck = ResourceManager:get ( name )\n        ```", "```swift\n            b.prop = MOAIProp2D.new ()\n            b.prop:setDeck ( b.deck )\n            b.prop:setLoc ( unpack(attributes.position) )\n        ```", "```swift\n            self.layers[name]:insertProp ( b.prop )\n        self.layers[name]:setParallax ( unpack(attributes.parallax) )\n        ```", "```swift\n            self.background[name] = b\n          end\n\n        end\n        ```", "```swift\n      character = {\n        type = RESOURCE_TYPE_TILED_IMAGE,\n        fileName = 'character/character.png',\n        tileMapSize = {20, 6},\n        width = 64, height = 64,\n      }\n    ```", "```swift\n      if definition.width and definition.height then\n        local half_width = definition.width / 2\n        local half_height = definition.height / 2\n        tiledImage:setRect ( -half_width, -half_height, half_width, half_height )\n      end\n    ```", "```swift\n    module ( \"Character\", package.seeall )\n\n    local character_object = {\n      position = { 0, 0 },\n    }\n    This table will be used to setup some initialization parameters.\n    function Character:initialize (layer)\n      self.deck = ResourceManager:get ( 'character' )\n      self.prop = MOAIProp2D.new ()\n      self.prop:setDeck ( self.deck )\n      self.prop:setLoc ( unpack(character_object.position) )\n      layer:insertProp ( self.prop )\n    end\n    ```", "```swift\n  Character:initialize ( self.layers.main )\n```", "```swift\n    animations = {\n        idle = {\n          startFrame = 1,\n          frameCount = 9,\n          time = 0.1,\n          mode = MOAITimer.LOOP\n        },\n\n        run = {\n          startFrame = 41,\n          frameCount = 16,\n          time = 0.03,\n          mode = MOAITimer.LOOP\n        },\n\n        jump = {\n          startFrame = 89,\n          frameCount = 3,\n          time = 0.1,\n          mode = MOAITimer.NORMAL\n        },\n      }\n    ```", "```swift\n      self.remapper = MOAIDeckRemapper.new ()\n      self.remapper:reserve ( 1 )\n    ```", "```swift\n          self.prop:setRemapper ( self.remapper )\n        ```", "```swift\n    function Character:addAnimation ( name, startFrame, frameCount, time, mode )\n      local curve = MOAIAnimCurve.new ()\n    ```", "```swift\n          curve:reserveKeys ( 2 )\n        ```", "```swift\n          curve:setKey ( 1, 0, startFrame, MOAIEaseType.LINEAR )\n        ```", "```swift\n          curve:setKey ( 2, time * frameCount, \n            startFrame + frameCount, MOAIEaseType.LINEAR )\n        ```", "```swift\n\n          local anim = MOAIAnim:new ()\n          anim:reserveLinks (1)\n          anim:setLink ( 1, curve, self.remapper, 1 )\n        ```", "```swift\n          anim:setMode ( mode )\n        ```", "```swift\n          self.animations[name] = anim\n\n        end\n        ```", "```swift\n        function Character:getAnimation ( name )\n          return self.animations[name]\n        end\n        ```", "```swift\n    function Character:stopCurrentAnimation ()\n\n      if self.currentAnimation then\n        self.currentAnimation:stop ()\n      end\n\n    end\n    ```", "```swift\n    function Character:startAnimation ( name )\n\n      self:stopCurrentAnimation ()\n    ```", "```swift\n          self.currentAnimation = self:getAnimation ( name )\n        ```", "```swift\n          self.currentAnimation:start ()\n        ```", "```swift\n          return self.currentAnimation\n        end\n        ```", "```swift\n      self.animations = {}\n\n      for name, def in pairs ( character_object.animations ) do\n        self:addAnimation ( name, def.startFrame, def.frameCount,\n          def.time, def.mode )\n      end\n    ```", "```swift\n  self:startAnimation ( 'run' )\n```"]