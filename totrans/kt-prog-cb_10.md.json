["```kt\ndependencies {\n    compile \"org.jetbrains.anko:anko-sqlite:$anko_version\"\n}\n```", "```kt\nclass DatabaseHelper(ctx: Context) : ManagedSQLiteOpenHelper(ctx, \"SupportDatabase\", null, 1) {\n    companion object {\n        private var instance: DatabaseHelper? = null\n\n        @Synchronized\n        fun getInstance(context: Context): DatabaseHelper {\n            if (instance == null) {\n                instance = DatabaseHelper(context.applicationContext)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.createTable(\"Requests\", true,\n                \"id\" to INTEGER + PRIMARY_KEY + UNIQUE,\n                \"name\" to TEXT,\n                \"message\" to TEXT)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.dropTable(\"Requests\", true)\n    }\n}\n```", "```kt\n// Access property for Context\nval Context.database: DatabaseHelper\n    get() = DatabaseHelper.getInstance(getApplicationContext())\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MainActivityUI().setContentView(this)\n        btn_send.onClick {\n database.use {\n insert(\"Requests\",\n \"id\" to 1,\n \"name\" to name.text.toString(),\n \"message\" to message.text.toString())\n }\n }\n    }\n\n    class MainActivityUI : AnkoComponent<MainActivity> {\n        override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n            verticalLayout {\n                gravity = Gravity.CENTER\n                padding = dip(20)\n\n                textView {\n                    gravity = Gravity.CENTER\n                    text = \"Enter your request\"\n                    textColor = Color.BLACK\n                    textSize = 24f\n                }.lparams(width = matchParent) {\n                    margin = dip(20)\n                }\n\n                val name = editText {\n                    id = R.id.name\n                    hint = \"What is your name?\"\n                }\n\n                editText {\n                    id = R.id.message\n                    hint = \"What is your message?\"\n                    lines = 3\n                }\n\n                button(\"Enter\") {\n                    id = R.id.btn_send\n                }\n            }\n        }\n    }\n}\n```", "```kt\ndb.createTable(\"Requests\", true,\n    \"id\" to INTEGER + PRIMARY_KEY + UNIQUE,\n    \"name\" to TEXT,\n    \"message\" to TEXT)\n```", "```kt\ndata class Customer(val id: Int, val name: String, val phone_num: String) {\n    companion object {\n        val COLUMN_ID = \"id\"\n        val TABLE_NAME = \"customers\"\n        val COLUMN_NAME = \"name\"\n        val COLUMN_PHONE_NUM = \"phone_num\"\n    }\n}\n```", "```kt\ndb.createTable(Customer.TABLE_NAME,\n        true,\n        Customer.COLUMN_ID to INTEGER + PRIMARY_KEY,\n        Customer.COLUMN_NAME to TEXT,\n        Customer.COLUMN_PHONE_NUM to TEXT)\n```", "```kt\nclass DatabaseHelper(ctx: Context) : ManagedSQLiteOpenHelper(ctx, \"SupportDatabase\", null, 1) {\n    companion object {\n        private var instance: DatabaseHelper? = null\n\n        @Synchronized\n        fun getInstance(context: Context): DatabaseHelper {\n            if (instance == null) {\n                instance = DatabaseHelper(context.applicationContext)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.createTable(\"Requests\", true,\n \"id\" to INTEGER + PRIMARY_KEY + UNIQUE,\n \"name\" to TEXT,\n \"message\" to TEXT)\n\n db.createTable(Customer.TABLE_NAME,\n true,\n Customer.COLUMN_ID to INTEGER + PRIMARY_KEY,\n Customer.COLUMN_NAME to TEXT,\n Customer.COLUMN_PHONE_NUM to TEXT)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.dropTable(\"Requests\", true)\n        db.dropTable(Customer.TABLE_NAME, true)\n    }\n}\n\n// Access property for Context\nval Context.database: DatabaseHelper\n    get() = DatabaseHelper.getInstance(getApplicationContext())\n```", "```kt\n@Inject\nlateinit var mPresenter:AddActivityMvpPresenter\n```", "```kt\n@Module\nclass AddActivityModule {\n  @Provides @ControllerScope\n  fun providesAddActivityPresenter(addActivityPresenter: AddActivityPresenter):AddActivityMvpPresenter =addActivityPresenter\n}\n```", "```kt\nclass AddActivityPresenter @Inject constructor(var mDataManager:DataManager):AddActivityMvpPresenter\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MainActivityUI().setContentView(this)\n        val btn_send = find<Button>(R.id.btn_send)\n        btn_send.onClick {\n            database.use {\n                insert(\"Requests\",\n                        \"name\" to name.text.toString(),\n                        \"message\" to message.text.toString())\n            }\n            toast(\"success\")\n            name.text.clear()\n            message.text.clear()\n        }\n        val btn_read = find<Button>(R.id.btn_read)\n        btn_read.onClick {\n            var reqs = database.use {\n                select(\"Requests\").parseList(classParser<Request>())\n }\n            for(x in reqs) {\n logd(x.name + \": \" + x.message)\n }\n        }\n    }\n\n    private fun logd(s: String) {\n        Log.d(\"request\", s)\n    }\n\n    class MainActivityUI : AnkoComponent<MainActivity> {\n        override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n            verticalLayout {\n                padding = dip(20)\n\n                textView {\n                    gravity = Gravity.CENTER\n                    text = \"Enter your request\"\n                    textColor = Color.BLACK\n                    textSize = 24f\n                }.lparams(width = matchParent) {\n                    margin = dip(20)\n                }\n\n                val name = editText {\n                    id = R.id.name\n                    hint = \"What is your name?\"\n                }\n\n                editText {\n                    id = R.id.message\n                    hint = \"What is your message?\"\n                    lines = 3\n                }\n\n                button(\"Enter\") {\n                    id = R.id.btn_send\n                }\n\n                button(\"Show me requests\") {\n                    id = R.id.btn_read\n                }\n            }\n        }\n    }\n\n    class Request(val id: Int, val name: String, val message: String)\n\n}\n```", "```kt\ndb.select(tableName, vararg columns) // where db is an instance of the SQLiteDatabase\n```", "```kt\n11-18 18:21:34.709 12523-12523/android.my_company.com.helloworldapp D/request: name 1: request 1\n11-18 18:21:34.709 12523-12523/android.my_company.com.helloworldapp D/request: name 2: request 2\n11-18 18:21:34.709 12523-12523/android.my_company.com.helloworldapp D/request: name 3 : request 3\n```", "```kt\nselect(\"Requests\")\n    .whereArgs(\"(id > {userId})\",\n        \"userId\" to 1)\n```", "```kt\n11-18 21:11:04.328 18149-18149/android.my_company.com.helloworldapp D/request: name 2: request 2\n11-18 21:11:04.329 18149-18149/android.my_company.com.helloworldapp D/request: name 3 : request 3\n```", "```kt\nclass Request(val id: Int, val name: String, val message: String)\n```", "```kt\nval rowParser = classParser<Person>()\n```", "```kt\ndata class Customer(val id: Int, val name: String, val phone_num: String) {\n    companion object {\n        val COLUMN_ID = \"id\"\n        val TABLE_NAME = \"customers\"\n        val COLUMN_NAME = \"name\"\n        val COLUMN_PHONE_NUM = \"phone_num\"\n    }\n}\n```", "```kt\nclass DatabaseHelper(ctx: Context) : ManagedSQLiteOpenHelper(ctx, \"SupportDatabase\", null, 1) {\n    companion object {\n        private var instance: DatabaseHelper? = null\n\n        @Synchronized\n        fun getInstance(context: Context): DatabaseHelper {\n            if (instance == null) {\n                instance = DatabaseHelper(context.applicationContext)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.createTable(Customer.TABLE_NAME,\n                true,\n                Customer.COLUMN_ID to INTEGER + PRIMARY_KEY,\n                Customer.COLUMN_NAME to TEXT,\n                Customer.COLUMN_PHONE_NUM to TEXT)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.dropTable(Customer.TABLE_NAME, true)\n    }\n}\n\n// Access property for Context\nval Context.database: DatabaseHelper\n    get() = DatabaseHelper.getInstance(getApplicationContext())\n```", "```kt\nvar customers = database.use {\n    select(Customer.TABLE_NAME)\n    .parseList(classParser<Customer>())\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MainActivityUI().setContentView(this)\n        val name = find<EditText>(R.id.name)\n        val phone = find<EditText>(R.id.phone)\n        btn_send.onClick {\n            database.use {\n                insert(Customer.TABLE_NAME,\n                        Customer.COLUMN_NAME to name.text.toString(),\n                        Customer.COLUMN_PHONE_NUM to phone.text.toString())\n            }\n            toast(\"success\")\n            name.text.clear()\n            phone.text.clear()\n        }\n        val btn_read = find<Button>(R.id.btn_read)\n        btn_read.onClick {\n            var customers = database.use {\n                select(Customer.TABLE_NAME)\n                        .parseList(classParser<Customer>())\n }\n            // customers is the list of objects which we can now iterate on to get individual values as objects of Customer class\n            for(c in customers) {\n debug(c.name + \" (\" + c.phone_num + \")\")\n }\n        }\n    }\n\n    private fun debug(s: String) {\n        Log.d(\"customer\", s)\n    }\n\n    class MainActivityUI : AnkoComponent<MainActivity> {\n        override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n            verticalLayout {\n                padding = dip(20)\n\n                textView {\n                    gravity = Gravity.CENTER\n                    text = \"Enter the customer\"\n                    textColor = Color.BLACK\n                    textSize = 24f\n                }.lparams(width = matchParent) {\n                    margin = dip(20)\n                }\n\n                val name = editText {\n                    id = R.id.name\n                    hint = \"Name\"\n                }\n\n                editText {\n                    id = R.id.phone\n                    hint = \"Phone no.\"\n                }\n\n                button(\"Enter\") {\n                    id = R.id.btn_send\n                }\n\n                button(\"Show me customers\") {\n                    id = R.id.btn_read\n                }\n\n                button(\"Delete all customers\") {\n                    id = R.id.btn_delete\n                }\n            }\n        }\n    }\n}\n```", "```kt\nparseSingle(rowParser): T\n```", "```kt\nbtn_read.onClick {\n    var c = database.use {\n        select(Customer.TABLE_NAME)\n            .whereArgs(\"(id = {userId})\",\n            \"userId\" to 1)\n .parseSingle(classParser<Customer>())\n    }\n    debug(c.name + \" (\" + c.phone_num + \")\")\n}\n```", "```kt\nandroid.database.sqlite.SQLiteException: parseSingle accepts only cursors with a single entry\n```", "```kt\nbtn_read.onClick {\n    var c = database.use {\n        select(Customer.TABLE_NAME)\n            .whereArgs(\"(id = {userId})\",\n            \"userId\" to 1)\n .parseOpt(classParser<Customer>())\n    }\n    debug(c?.name + \" (\" + c?.phone_num + \")\")\n}\n```", "```kt\n11-18 21:11:04.329 18149-18149/android.my_company.com.helloworldapp D/customer: null (null)\n```", "```kt\ndependencies {\n    compile \"org.jetbrains.anko:anko-sqlite:$anko_version\"\n}\n```", "```kt\nclass DatabaseHelper(ctx: Context) : ManagedSQLiteOpenHelper(ctx, \"SupportDatabase\", null, 1) {\n    companion object {\n        private var instance: DatabaseHelper? = null\n\n        @Synchronized\n        fun getInstance(context: Context): DatabaseHelper {\n            if (instance == null) {\n                instance = DatabaseHelper(context.applicationContext)\n            }\n            return instance!!\n        }\n    }\n\n    override fun onCreate(db: SQLiteDatabase) {\n        db.createTable(\"Requests\", true,\n                \"id\" to INTEGER + PRIMARY_KEY + UNIQUE + AUTOINCREMENT,\n                \"name\" to TEXT,\n                \"message\" to TEXT)\n    }\n\n    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {\n        db.dropTable(\"Requests\", true)\n    }\n}\n\n// Access property for Context\nval Context.database: DatabaseHelper\n    get() = DatabaseHelper.getInstance(getApplicationContext())\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MainActivityUI().setContentView(this)\n        btn_send.onClick {\n            database.use {\n insert(\"Requests\",\n \"name\" to name.text.toString(),\n \"message\" to message.text.toString())\n }\n            toast(\"success\")\n            name.text.clear()\n            message.text.clear()\n        }\n    }\n\n    class MainActivityUI : AnkoComponent<MainActivity> {\n        override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n            verticalLayout {\n                padding = dip(20)\n\n                textView {\n                    gravity = Gravity.CENTER\n                    text = \"Enter your request\"\n                    textColor = Color.BLACK\n                    textSize = 24f\n                }.lparams(width = matchParent) {\n                    margin = dip(20)\n                }\n\n                val name = editText {\n                    id = R.id.name\n                    hint = \"What is your name?\"\n                }\n\n                editText {\n                    id = R.id.message\n                    hint = \"What is your message?\"\n                    lines = 3\n                }\n\n                button(\"Enter\") {\n                    id = R.id.btn_send\n                }\n            }\n        }\n    }\n}\n```", "```kt\ndb.insert(TABLE_NAME, \n    COLUMN_NAME_1 to VALUE_1,\n    COLUMN_NAME_2 to VALUE_2,\n    COLUMN_NAME_3 to VALUE_3\n)\n```", "```kt\nclass SomeClass {\n\n    companion object {\n        var intro = \"I am some class. Pleased to meet you!\"\n        fun infoIntro(): String {\n            return \"I am some class. Pleased to meet you!\"\n        }\n    }\n}\n```", "```kt\nvar x = SomeClass.intro\ntoast(SomeClass.infoIntro())\n```", "```kt\nobject SomeClass {\n\n    var intro = \"I am some class. Pleased to meet you!\"\n    fun infoIntro(): String {\n        return \"I am some class. Pleased to meet you!\"\n    }\n}\n```", "```kt\nvar x = SomeClass.intro\ntoast(SomeClass.infoIntro())\n```", "```kt\npublic final class SomeClass {\n   @NotNull\n   private static String intro;\n   public static final SomeClass INSTANCE;\n\n   @NotNull\n   public final String getIntro() {\n      return intro;\n   }\n\n   public final void setIntro(@NotNull String var1) {\n      Intrinsics.checkParameterIsNotNull(var1, \"<set-?>\");\n      intro = var1;\n   }\n\n   @NotNull\n   public final String infoIntro() {\n      return \"I am some class. Pleased to meet you!\";\n   }\n\n   private SomeClass() {\n      INSTANCE = (SomeClass)this;\n      intro = \"I am some class. Pleased to meet you!\";\n   }\n\n   static {\n      new SomeClass();\n   }\n}\n```", "```kt\ncompile \"com.google.dagger:dagger:$daggerVersion\"\nkapt \"com.google.dagger:dagger-compiler:$daggerVersion\"\n```", "```kt\n@Module\nclass NetworkModule {\n    @Provides @Singleton\n    fun getHttpLoggingInterceptor():HttpLoggingInterceptor=\n            HttpLoggingInterceptor().\n                    setLevel(HttpLoggingInterceptor.Level.BODY)\n\n    @Provides\n    @Singleton\n    fun provideHttpCache( @AppContext application: App): Cache {\n        val cacheSize = 10 * 1024 * 1024\n        val cache = Cache(application.cacheDir, cacheSize.toLong())\n        return cache\n    }\n\n    @Provides\n    @Singleton\n    fun provideGson(): Gson {\n        val gsonBuilder = GsonBuilder()\n        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n        return gsonBuilder.create()\n    }\n\n    @Provides\n    @Singleton\n    fun provideOkhttpClient(cache: Cache, httpLoggingInterceptor: HttpLoggingInterceptor): OkHttpClient =\n            OkHttpClient.Builder().addInterceptor(httpLoggingInterceptor).cache(cache).build()\n\n    @Provides @Singleton \n    fun getRetrofit(okHttpClient: OkHttpClient): Retrofit =                                             Retrofit.Builder().addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n            .addConverterFactory(GsonConverterFactory.create())\n            .client(okHttpClient)\n            .baseUrl(AppConstants.INSTAGRAM_BASE_URL)\n            .build()\n\n}\n```", "```kt\n@Component(dependencies = arrayOf(ApplicationComponent::class)\n        , modules = arrayOf(AddActivityModule::class))\ninterface AddActivityComponent {\n    fun inject(addActivity: AddActivity)\n}\n```", "```kt\nclass AddActivity : BaseActivity<AddActivityMvpView,AddActivityMvpPresenter>(),AddActivityMvpView {\n\n    @Inject\n    lateinit var mPresenter:AddActivityMvpPresenter\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_add)\n        DaggerAddActivityComponent.builder()\n                .applicationComponent(applicationComponent)\n                .build()\n                .inject(this)\n    }\n}\n```", "```kt\nclass AddActivityPresenter @Inject constructor(var mDataManager:DataManager)\n```", "```kt\napply plugin: 'kotlin-kapt'  \ndependencies {  ...  \n    compile \"com.jakewharton:butterknife:$butterknife-version\"  \n    kapt \"com.jakewharton:butterknife-compiler:$butterknife-version\" }\n```", "```kt\n@BindView(R.id.headline) TextView headline;\n```", "```kt\n@BindView(R.id.headline) lateinit var headline: TextView\n```", "```kt\n@OnClick(R.id.button) \ninternal fun sayHello() {  \n    Toast.makeText(this, \"Hello, World!\", LENGTH_SHORT).show() \n}\n```"]