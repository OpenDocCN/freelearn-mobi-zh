["```kt\nfun saveDetails(user: User) {\n    startAnimation()\n    database.storeUser(user)\n    stopAnimation()\n}\n```", "```kt\nsuspend fun storeUser(user: User) {\n    // blocking action\n}\n```", "```kt\nfun saveDetails(user: User) {\n    GlobalScope.launch(Dispatchers.IO) {\nstartAnimation()\n        database.storeUser(user)\n        stopAnimation()\n    }\n}\n```", "```kt\nfun saveDetails(user: User) {\n    Log.d(\"TAG\", \"Preparing to launch coroutine\")\n    GlobalScope.launch(Dispatchers.IO) {\n        startAnimation()\n        Log.d(\"TAG\", \"Starting to do async work\")\n        database.storeUser(user)\n        Log.d(\"TAG\", \"Finished async work\")\n        stopAnimation()\n    }\n    Log.d(\"TAG\", \"Continuing program execution\")\n}\n```", "```kt\nval job = Job()\nval myScope = CoroutineScope(context = job + Dispatchers.IO)\n```", "```kt\n    override fun onDestroy() {\n        super.onDestroy()\n        job.cancel()\n    }\n    ```", "```kt\n    class UserFragment : Fragment() {\n        ...\n        fun saveDetails(user: User) {\n            lifecycleScope.launch(Dispatchers.IO) {\n                startAnimation()\n                database.storeUser(user)\n                stopAnimation()\n            }\n        }\n    }\n    ```", "```kt\n    class UserViewModel: ViewModel() {\n        fun saveDetails(user: User) {\n            // do some work\n            viewModelScope.launch(Dispatchers.IO) {\n                database.storeUser(user)\n            }\n            // do some other work\n        }\n    }\n    ```", "```kt\n    @Composable\n    fun UserComposable() {\n        val scope = rememberCoroutineScope()\n        LaunchedEffect(key1 = \"save_user\") {\n            scope.launch(Dispatchers.IO) { \n                viewModel.saveUser()\n            }\n        }\n    }\n    ```", "```kt\nval myScope = CoroutineScope(context = job + Dispatchers.IO)\n```", "```kt\nscope.launch(Dispatchers.IO) {\n    viewModel.saveUser()\n}\n```", "```kt\nclass UserFragment : Fragment() {\n    ...\n    fun saveDetails(user: User) {\n        lifecycleScope.launch(Dispatchers.IO) {\n            startAnimation()\n            database.storeUser(user)\n            stopAnimation()\n        }\n    }\n}\n```", "```kt\nfun saveDetails(user: User) {\n    lifecycleScope.launch(Dispatchers.Main) {\n        startAnimation()\n        withContext(Dispatchers.IO) {\n            database.storeUser(user)\n        }\n        stopAnimation()\n    }\n}\n```", "```kt\n    fun getUser() {\n        lifecycleScope.launch(Dispatchers.IO) {\n            val user = database.getUser()\n            // show details to UI\n        }\n    }\n    ```", "```kt\n    lifecycleScope.launch(Dispatchers.IO) {\n        val deferredAudio: Deferred<Audio> =\n            async { convertTextToSpeech(title) }\n        val titleAudio = deferredAudio.await()\n        playSound(titleAudio)\n    }\n    ```", "```kt\nlifecycleScope.launch(Dispatchers.IO) {\n    val deferredTitleAudio: Deferred<Audio> =\n        async { convertTextToSpeech(title) }\n    val deferredSubtitleAudio: Deferred<Audio> =\n        async { convertTextToSpeech(subtitle) }\n    playSounds(\n        deferredTitleAudio.await(),\n        deferredSubtitleAudio.await()\n    )\n}\n```", "```kt\nprivate fun getRestaurants() {\n    restaurantsCall = restInterface.getRestaurants()\n    restaurantsCall.enqueue(object : Callback\n        <List<Restaurant>> {\n            override fun onResponse(...) {\n                response.body()?.let { restaurants -> ... }\n            }\n            override fun onFailure(...) {\n                t.printStackTrace()\n            }\n        })\n}\n```", "```kt\n    interface RestaurantsApiService {\n        @GET(\"restaurants.json\")\n        suspend fun getRestaurants(): List<Restaurant>\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        val restaurants = restInterface.getRestaurants()\n    }\n    ```", "```kt\n    class RestaurantsViewModel(…): ViewModel() {\n        private var restInterface: RestaurantsApiService\n        val state = mutableStateOf(…)\n        val job = Job()\n        private val scope = CoroutineScope(job + \n            Dispatchers.IO)\n        …\n    }\n    ```", "```kt\n    override fun onCleared() {\n        super.onCleared()\n        job.cancel()\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        scope.launch {\n            val restaurants = restInterface.getRestaurants()\n        }\n    }\n    ```", "```kt\n    scope.launch {\n        val restaurants = restInterface.getRestaurants()\n        state.value = restaurants.restoreSelections()\n    }\n    ```", "```kt\n    scope.launch {\n        val restaurants = restInterface.getRestaurants()\n        withContext(Dispatchers.Main) {\n            state.value = restaurants.restoreSelections()\n        }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch {\n            val restaurants = …\n            …\n        }\n    }\n    ```", "```kt\n    viewModelScope.launch(Dispatchers.IO) {\n        val restaurants = restInterface.getRestaurants()\n        withContext(Dispatchers.Main) {\n            state.value = restaurants.restoreSelections()\n        }\n    }\n    ```", "```kt\nE/AndroidRuntime: FATAL EXCEPTION: DefaultDispatcher-worker-1\n```", "```kt\nviewModelScope.launch(Dispatchers.IO) {\n    try {\n        val restaurants = restInterface.getRestaurants()\n        // show restaurants\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}\n```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n        ...\n    private val errorHandler = \n            CoroutineExceptionHandler { _, exception ->\n                exception.printStackTrace()\n        }\n        ...\n    }\n    ```", "```kt\n    private fun getRestaurants() { \n           viewModelScope.launch(Dispatchers.IO +\n                                 errorHandler) { \n                … \n           } \n    }\n    ```", "```kt\nprivate fun getRestaurants() {\n    viewModelScope.launch(Dispatchers.IO + errorHandler) {\n        val restaurants = restInterface.getRestaurants()\n        withContext(Dispatchers.Main) {\n            state.value = restaurants.restoreSelections()\n        }\n    }\n}\n```", "```kt\n    private suspend fun getRemoteRestaurants(): List<Restaurant> {\n        return withContext(Dispatchers.IO) {\n            restInterface.getRestaurants()\n        }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(Dispatchers.IO + errorHandler) \n        {\n            val restaurants = getRemoteRestaurants()\n            withContext(Dispatchers.Main) {\n                state.value = restaurants.restoreSelections()\n            }\n        }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getRemoteRestaurants()\n            withContext(Dispatchers.Main) {\n                state.value = restaurants.\n                    restoreSelections()\n            }\n        }\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        viewModelScope.launch(errorHandler) {\n            val restaurants = getRemoteRestaurants()\n            state.value = restaurants.restoreSelections()\n        }\n    }\n    ```", "```kt\nprivate suspend fun getRemoteRestaurants()\n        : List<Restaurant> {\n    return withContext(Dispatchers.IO) {\n        restInterface.getRestaurants()\n    }\n}\n```"]