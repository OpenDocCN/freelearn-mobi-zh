["```swift\n    module ( \"PhysicsManager\", package.seeall )\n    function PhysicsManager:initialize ( layer )\n    ```", "```swift\n                self.world = MOAIBox2DWorld.new ()\n        ```", "```swift\n                self.world:setUnitsToMeters ( 1/38 )\n        ```", "```swift\n                self.world:setGravity ( 0, -10 )\n        ```", "```swift\n                self.world:start ()\n        ```", "```swift\n                    if layer then\n                        layer:setBox2DWorld ( self.world )\n                    end\n                end\n        ```", "```swift\n        self.floor = {}\n        self.floor.body = self.world:addBody ( MOAIBox2DBody.STATIC )\n        self.floor.body:setTransform ( 0, -WORLD_RESOLUTION_Y/2 )\n    ```", "```swift\n        self.floor.fixture = self.floor.body:addRect (\n        -WORLD_RESOLUTION_X/2, -50, \n        WORLD_RESOLUTION_X/2, 50 )\n    ```", "```swift\n        self.floor.fixture:setFriction ( 0 )\n    ```", "```swift\n    PhysicsManager:initialize ( self.layers.walkBehind )\n```", "```swift\n    function Character:initializePhysics ()\n        self.physics = {}\n    ```", "```swift\n        self.physics.body = \n        PhysicsManager.world:addBody ( MOAIBox2DBody.DYNAMIC )\n    ```", "```swift\n        self.physics.body:setTransform (\n        unpack(character_object.position) )\n    ```", "```swift\n        self.physics.fixture = self.physics.body:addRect( -32, -32, 32, 32 )\n    ```", "```swift\n        self.prop:setParent ( self.physics.body )\n    end\n    ```", "```swift\n    function Character:run ( direction, keyDown )\n        if keyDown then\n        self.prop:setScl ( direction, 1 )\n    ```", "```swift\n        velX, velY = self.physics.body:getLinearVelocity ()\n        self.physics.body:setLinearVelocity ( direction * 100, velY )\n    ```", "```swift\n       if(self.currentAnimation ~= self:getAnimation ( 'run' ) )and not self.jumping then\n            self:startAnimation('run')\n        end\n    ```", "```swift\n        else\n        if not self.jumping then\n            self:stopMoving ()\n        end\n        end\n    end\n    ```", "```swift\n    function Character:moveLeft ( keyDown )\n        self:run ( -1, keyDown )\n    end\n    function Character:moveRight( keyDown )\n        self:run ( 1, keyDown )\n    end\n    ```", "```swift\n    function Character:stopMoving ()\n        if not self.jumping then\n            self.physics.body:setLinearVelocity ( 0, 0 )\n            self:startAnimation ( 'idle' )\n        end\n    end\n    ```", "```swift\n    function Character:jump ( keyDown )\n        if keyDown and not self.jumping then\n            self.physics.body:applyForce ( 0, 8000 )\n            self.jumping = true\n            self:startAnimation ( 'jump' )\n        end\n    end\n    ```", "```swift\n    function Character:stopJumping ()\n        self.jumping = false\n        self:stopMoving ()\n    end\n    ```", "```swift\n    self.physics.fixture:setCollisionHandler (\n        onCollide, \n        MOAIBox2DArbiter.BEGIN )\n    ```", "```swift\n    function onCollide ( phase, fixtureA, fixtureB, arbiter )\n        if fixtureB == PhysicsManager.floor.fixture then\n            Character:stopJumping ()\n        end\n    end\n    ```", "```swift\n    function Game:keyPressed ( key, down )\n        if key == 'right' then Character:moveRight(down)end\n        if key == 'left' then Character:moveLeft(down)end\n        if key == 'up' then Character:jump(down)end\n    end\n    ```", "```swift\n    function InputManager:initialize ()\n        function onKeyboardEvent ( key, down )\n            if key == 119 then key = 'up' end\n            if key == 97 then key = 'left' end\n            if key == 100 then key = 'right' end\n            Game:keyPressed(key, down)\n        end\n    ```", "```swift\n            MOAIInputMgr.device.keyboard:setCallback( onKeyboardEvent )\n        end\n        ```", "```swift\n    local scene_objects = {\n        floor = {\n            type = MOAIBox2DBody.STATIC,\n            position = {0, -WORLD_RESOLUTION_Y/2},\n            friction = 0,\n            size = {2 * WORLD_RESOLUTION_X, 10}\n        }\n        platform1 = {\n            type = MOAIBox2DBody.STATIC,\n            position = {100, -50},\n            friction = 0,\n            size = {100, 20}\n        }\n    }\n    ```", "```swift\n    function Game:loadScene()\n        self.objects = {}\n        for key, attr in pairs(scene_objects)do\n    ```", "```swift\n            local body = PhysicsManager.world:addBody(attr.type)\n        ```", "```swift\n            body:setTransform ( unpack(attr.position) );\n            width, height = unpack ( attr.size );\n            local fixture = body:addRect (\n            -width/2, -height/2, width/2, height/2 )\n        ```", "```swift\n            fixture:setFriction ( attr.friction )\n        ```", "```swift\n            self.objects[key] = { body = body, fixture = fixture }\n            end\n        end\n        ```", "```swift\n        self:loadScene ()\n    ```", "```swift\n        function Game:belongsToScene ( fixture )\n            for key, object in pairs (self.objects )do\n                if object.fixture == fixture then\n                    return true\n                end\n            end\n            return false\n        end\n        ```", "```swift\n        function onCollide ( phase, fixtureA, fixtureB, arbiter )\n            if Game:belongsToScene ( fixtureB ) then\n                Character:stopJumping ()\n            end\n        end\n        ```"]