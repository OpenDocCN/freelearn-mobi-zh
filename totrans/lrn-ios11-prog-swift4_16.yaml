- en: Where Are We?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have all used a map at some point in our lives, either an actual map or a
    map on our phone or another device. Apple Maps has come a long way from when it
    was first announced in 2012\. Apple has made steady improvements to Apple Maps
    every year.
  prefs: []
  type: TYPE_NORMAL
- en: During this chapter, we will display our restaurant list using a map and custom
    pins. When users tap a pin on the map, they will be taken directly to the restaurant
    detail page that we created in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: What annotations are and how to add them to a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create custom annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a storyboard reference
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up map annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our map, we are going to drop pins down at each restaurant location. These
    pins are called annotations, more specifically, `MKAnnotation`. Since we are going
    to create multiple `MKAnnotation` protocols, we are going to create a class that
    subclasses `MKAnnotation`.
  prefs: []
  type: TYPE_NORMAL
- en: What is an MKAnnotation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`MKAnnotation` is a protocol that provides us with information related to a
    map view. Protocols provide a blueprint for methods, properties, and other required
    functionalities . The `MKAnnotation` will contain information, such as the coordinates
    (latitude and longitude), title, and subtitle of the annotation.'
  prefs: []
  type: TYPE_NORMAL
- en: To drop a pin onto a map, we must subclass the `MKAnnotation`. When we first
    looked at classes versus structs, we saw that classes could subclass or inherit
    from other classes, which means that we can get properties, methods, and additional
    requirements from the class that we are subclassing. Let's create an annotation
    that subclasses `MKAnnotation` and see how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a restaurant annotation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into creating our file, we should first look at the data that
    we will be using. The data for the map view will be the same data that we use
    for our restaurant-listing page. Let''s take a look at what the restaurant data
    will look like in plist format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33734dc7-def5-4ba6-97e2-f764e71fbbc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to create a file to represent this data for the map view, which will
    differ from the restaurant-listing page because we need to subclass `MKAnnotation`.
    Let''s get started by creating this file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Map` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New file*:*
  prefs: []
  type: TYPE_NORMAL
- en: Class*:* `RestaurantItem`
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Subclass*:* `NSObject`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Also create XIB*:* Unchecked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Language*:* `Swift`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this new `RestaurantItem.swift` file, under `import UIKit`, add `import MapKit`.
    We need this `import` statement so that Xcode knows where the files are that we
    are going to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to update our class declaration to make our annotation. Since
    this is subclassing `MKAnnotation`, we need to change what we currently have (`class
    RestaurantItem: NSObject`) to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will see an error when you add the `MKAnnotation`. Just ignore it for now,
    as we will fix this error shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the class declaration, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When the user taps on the annotation, the name of the restaurant and types of
    cuisine will appear along with a detail icon. This detail icon will take the user
    to the restaurant detail page. Then, we will pass along all of this data and use
    it to populate the restaurant detail page we created in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to initialize all of the data passed into the object. Therefore, let''s
    create a custom `init()` method to which we can pass a dictionary object through
    its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/224baa32-e55f-4e29-b9c4-9cd1c884257d.png)'
  prefs: []
  type: TYPE_IMG
- en: This method is large, but it is nothing you have not seen before. We are using
    the `if...let` statement to check for data in each element. If something is missing,
    it will not be sent.
  prefs: []
  type: TYPE_NORMAL
- en: Let's address the error now. The reason we are getting an error is because we
    are subclassing `MKAnnotation` and have not yet declared the coordinates, which
    is a required property. We also have two other optional properties—`title` and
    `subtitle`—that we are using for our map and that we need to declare. What we
    want to be able to do is pass the data that we have over to these three properties
    so that we can use them on our map.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get rid of the error, we need to add the coordinates first. We need to set
    up the latitude and longitude, so add the following after the `init()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`CLLocationCoordinate2D` is a class that is used by `MapKit` to set the exact
    location of a pin.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are using curly braces for this property. It is defined in `MKAnnotation`,
    and we are using the computed property to set the value. For the `coordinate`
    property, we will pass a latitude and longitude to it using a `CLLocationCoordinate2D`.
    In our `init()` method, we created the data that sets the latitude and longitude,
    and now, we are passing those coordinates over to the `coordinate` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do the same with `subtitle` by adding the following above the variable
    coordinate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The variable `subtitle` is a computed property, but this time we are using an
    `else...if` statement. We first check to see whether the array is empty; if so,
    nothing displays. If we only have one item in the array, we just return that item.
    Finally, if we have multiple items in our array, we take each item and put them
    in one string, separating each item with a comma. For example, if your array had
    the items `["American," "Bistro," "Burgers"]`, then we would create a string that
    looks like *American*, *Bistro*, *Burgers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to add the title. Enter the following above the `subtitle`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should no longer have an error, and should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/120174db-8c5d-44a5-81e0-9314e707da3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we want to create a manager that will take our data and create annotations
    for our map.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our Map Data Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, we will deal with data, but for now, we can mock up some
    data to set up our structure. We will use a plist to load our data, just like
    we did in the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `MapDataManager` file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Map` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `MapDataManager` and then hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to define our class definition, so add the following under the
    `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of the class declaration, add the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are keeping our array private since there is no reason to have
    to access this outside of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the following methods inside of our class declaration, after
    our variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bcd192a-e1e5-4172-8004-d017480bbd7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `fetch()` and `loadData()` methods are the same as those that we had in
    the `ExploreDataManager` file. However, the `fetch()` method here has something
    new inside of its parameters, specifically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is called a **closure block**, which allows us to signify when we have
    completed the method, and it then dictates an action to occur (here, returning
    an array of annotations). We will use these annotations to load pins on our map.
    We are looping through the `for...in` loop; when we are done, we call `completion()`.
    When we get to our `MapViewController `, you will see how we write this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at our `MapLocations.plist` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed176a87-db00-4a86-82c5-c551ee97cf59.png)'
  prefs: []
  type: TYPE_IMG
- en: This file is the same structure as our `ExploreData.plist` file. Our `Root`
    is an array, and each item inside of our `Root` is a dictionary item. There is
    an acronym that many programmers call  **DRY** (**don't repeat yourself**). Since
    both plist files have an array of dictionary objects, we can update our code so
    that we can use the same method in multiple places.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a base class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To keep from repeating ourselves, we are going to create a base class. This
    base class will have a new method called `load(file name:)`, but we will add a
    parameter to pass the file name. Let''s create a `DataManager` file now under
    our `Common` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `DataManager`, and then hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new file, we need to define our class definition; therefore, add the
    following under the `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of the protocol declaration, add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create an extension under the protocol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside of the `extension` declaration, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are done, your file should look like mine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fca202f-6951-4241-8e93-3ff9ee20a22a.png)'
  prefs: []
  type: TYPE_IMG
- en: Other than changing the function name to include parameters, we created the
    same function as we have in our `Explore` and `Map Data Manager` files. However,
    this function here is no longer a `private` method, because we want it to be accessible
    to any class that wants to use it.
  prefs: []
  type: TYPE_NORMAL
- en: By creating a protocol, we are using what is known as protocol-oriented programming.
    We will not get too heavily into the detail of this since there are plenty of
    books and videos on this topic. The central concept that you will want to understand
    is that we can use this in any class we want and have access to the `load(name:)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This is all we need to do in this file.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created this new protocol, we can access it anywhere we need
    it. Let''s first update our `MapDataManger` class to use our newly created protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `loadData()` function, because we will not need it anymore. You will
    see an error after you delete the `loadData()` method. This error is happening
    because we need to give the `fetch()` method a filename to load whenever we call
    the `loadData()` method. We will fix this shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we need to update our class declaration to say:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We now have our `MapDataManager` class using our `DataManager` protocol, which
    means that we will use the `load(name:)` method from our `DataManager` inside
    of our `MapDataManager`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s fix the error by updating our `fetch()` method from our data in
    `loadData()` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Your updated file should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc3744ca-5cf2-403e-8f97-e3fb23d172d4.png)'
  prefs: []
  type: TYPE_IMG
- en: We removed the error in our `MapDataManager`, but we need to do some refactoring
    of our `ExploreDataManager` file to do the same.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring ExploreDataManager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because our `loadData()` was written the same in both the `ExploreDataManager`
    and `MapDataManager` files, we need to update our `ExploreDataManager` in the
    same way we just did for the `MapDataManager`. Open `ExploreDataManager` and do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the private `loadData()` function, because we will not need it anymore.
    Again, ignore the error as we are going to fix this shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, update our class declaration to now say:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s fix the error by updating our `fetch()` method from for data in
    `loadData()` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Your updated function should now look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have completed refactoring our files, and we can now use the same method
    any time we need to load a plist that has an array of dictionary items.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring is something with which you will become more comfortable the more
    you write code. Understanding when to refactor is a bit harder when you first
    start out because you are still learning. The most prominent indicator that you
    need to refactor is when you have written something more than once. However, refactoring
    does not always work for everything; at times, writing the same code more than
    once can be unavoidable. Just being aware of when refactoring may be useful is
    a good sign, and half the battle to a greater understanding of this method. I
    have been coding for years; there will be times when I copy and paste something
    I wrote to see if it works and then never refactor. Then, months later, I will
    wonder why I did not write a method to handle it in both places.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and adding annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need to get our map hooked up and start getting the annotations displaying
    on the map. Then, we will customize our annotations to look like those in our
    design.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our Map View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to create our `MapViewController` file and then connect it with our
    `UIViewController` and map view in storyboard. First, let''s create this file:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Navigator panel, right-click on the `Controller` folder in the `Map`
    folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the Options screen that appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New file*:*
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `MapViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the `import UIKit` statement, add `import MapKit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your class declaration to include the following subclass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now connect this file with our `UIViewController` and our map view in
    storyboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following after the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Open your `Map.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Outline view, select the View Controller that contains the map view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Utilities panel, select the Identity inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, select `MapViewController`
    and hit *Enter* in order to connect the View Controller to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the Connections inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Outlets section, you will see an empty circle next to `mapView`. Click
    and drag the outlet to the map view in the View Controller in the Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to start working with our map, but first we need to add some things
    to our `MapDataManager`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MapDataManager.swift` file in the Navigator panel; underneath the
    `import Foundation` statement, add `import MapKit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following method to our `MapDataManager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we delve into the particular sections of this function, we need to understand
    what this function does. When you use a map and drop pins down onto it, you want
    the map to zoom into a particular area. To zoom in on a map, you need a latitude
    and longitude. What this method is doing is grabbing the first pin (or annotation)
    in the array and zooming in on the area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cc38cce-0099-4be6-a9f9-57a8ce09f582.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: Our method has two parameters, both of which are `CLLocationDegrees`.
    It is just a class that represents a latitude or longitude coordinate in degrees:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: This `guard` statement obtains the first item in the array. If
    there are no items in the array, it will just return an empty coordinate region.
    If there are items in the array, it will return the coordinate region:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: Here, we are creating an `MKCoordinate` with the latitude and longitude
    that we passed into the function. `MKCoordinateSpan` defines a span, in the latitude
    and longitude directions, to show on the map:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: Lastly, we are setting the center and the span of our region and
    returning them so that when the pins drop, the map can zoom in on the area:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s set up our `MapViewController` to display annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MapViewController.swift` file in the Navigator panel and delete both
    `didReceiveMemoryWarning()` and `prepare()` (which has been commented out), as
    we do not need them for our purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Directly under our `IBOutlet` statement, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside of the class definition, add the following method after `viewDidLoad()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this method, we are doing a couple of things. We first pass annotations through
    the parameter. When we call `fetch()` and it is completed, it will return the
    array of annotations. We will pass that array over to our `addMap(_ annotations:)`
    to use. Next, we set the region by obtaining it from our `MapDataManager`, thus
    setting the latitude and longitude delta. This will set our zoom and region for
    our map. Once we have that, we then pass all of our annotations for the map to
    display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we need to have our manager fetch the annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following method above `addMap(_ annotations:)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Inside of the `initialize()` method, we are setting the map delegate to the
    class. In previous chapters, we did this using storyboard; however, you can also
    do this with code. This line allows us to be notified when the user taps on an
    annotation or taps the disclosure indicator in the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we created a `fetch()` method in the `MapDataManager`,
    wherein we used a closure block. This closure block requires that we wrap it in
    curly braces. Once the `completion()` block is called in the manager, everything
    inside of the curly braces will run. For our purposes in building this app, we
    are going to have a small number of pins or annotations ; therefore, we do not
    need a completion block. However, if you have 100 or 500 annotations, for instance,
    a closure block would be more efficient. We will do more with this later so that
    you can get more practice with closure blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Add `initialize()` inside of `viewDidLoad()` so that everything will run when
    the view loads.
  prefs: []
  type: TYPE_NORMAL
- en: Before you build, make sure that you add the `MapLocations.plist` file into
    the `maps` folder. This file is in the book `assets` folder for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a2ef4a7-a905-41ee-b32a-9774d5b2e5cf.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now have pins on our map, but we need to update them so that they look more
    like the ones in our design. Let's learn how to customize the annotations in our
    map.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have ever owned an iPhone and used Apple Maps, you will be familiar with
    pins. When you have a map inside of your app, having custom pins (annotations)
    gives your app a bit more polish. Let's create our custom annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `MapViewController` in the Navigator panel and add the following directly
    under the `addMap(_ annotations:)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down this code so we can better understand what we are doing.
    We will break the function down into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/010d2d74-222c-4158-b899-ebdc03e5460e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start with A:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: This method will call the `mapView.delegate` we set up earlier,
    when annotations need to be placed. We will use this method to grab the annotations
    before they are placed and replace the default pins with custom pins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: Here, we set an identifier, similar to those that we set when using
    Collection Views and Table Views:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: This guard will ensure that our annotation is not the user location.
    If the annotation is the user location, the `guard` will return `nil`. Otherwise,
    it will move on through the method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: `MKAnnotationView` is the class name for the pin; here, we create
    a variable that we can use to set our custom image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: In this statement, we are checking to see whether there are any
    annotations already created that we can reuse. If so, we point them to the variable
    we just added previously. Otherwise, we create the annotation in the next `else`
    statement:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Part F**: If there are no annotations to reuse, we create a new `MKAnnotationView`
    and give it a callout with a button. A callout is a bubble that appears above
    the annotation when you tap it to display the title (restaurant name) and subtitle
    (cuisines) associated with that annotation. If the user selects this callout button,
    the user is taken to the restaurant detail view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Part G**: Here is where we make sure that our custom annotation will show
    a callout. We also set our custom image for our annotation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Part H**: Once we are finished going through the method, we return our custom
    annotation to the map. This method is called for every annotation that appears
    on the map:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build and run the project by hitting the Play button (or use *cmd* +
    *R*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a48e52d-37f6-44a6-bea4-6698780d423b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now have custom annotations displaying on our map. Each pin's callout shows
    the restaurant name as well as the cuisines for the restaurant associated with
    that particular pin. If you tap on the callout, the restaurant detail disclosure
    does not yet work. Let's now set that up.
  prefs: []
  type: TYPE_NORMAL
- en: Map to restaurant detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For us to go to the restaurant detail from the callout, we need to update our
    app so that our map can also open the restaurant detail. To do this, we must first
    create a storyboard reference.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a storyboard reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to link to the restaurant detail from the map, we need to create a
    storyboard reference:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Map.storyboard`, and in the object library of the Utilities panel,
    drag a Storyboard Reference into the `Map.storyboard` scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff07caac-9b83-4a85-a15d-093338c29c3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select the Attributes inspector in the Utilities panel, and update the
    storyboard under Storyboard Reference to say `RestaurantDetail`. Then, hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c84f149-da85-4ab4-8249-19366a0e05c6.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Ctrl* + drag from the Map View controller to the storyboard reference we just
    created and select Show on the screen that appears. Note that you can *Ctrl* +
    drag from either the Map View controller in the Outline view or the Map View controller
    icon in the scene, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6fcc930a-141f-4d53-acde-fe720a4a720a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the segue connecting the Map View controller to the storyboard reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ed59446-782d-4014-9e5e-51c6c51cff02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Attributes inspector, update the Identifier under Storyboard Segue to
    say `showDetail`. Then, hit *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5be16611-379f-45e9-9132-d78fae981c35.png)'
  prefs: []
  type: TYPE_IMG
- en: This identifier is what we are going to call whenever the restaurant detail
    disclosure is tapped. Let's connect our segue next.
  prefs: []
  type: TYPE_NORMAL
- en: Map to restaurant detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we connect our segue, we should create an enumeration (an `enum` for
    short) to keep track of our segues. An `enum` is a user-defined data type that
    consists of a set of related values:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Misc` folder inside the `Common` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `Segue` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under `import Foundation` in the new file, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: We will eventually need all of these segues, so we can add them once. Whenever
    we use a new one, I will refer back to this file. The next thing we need is to
    know when the user taps the detail disclosure of the callout.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MapViewController.swift` file, add the following under the `addMap(_
    annotations:)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using `performSegue()` to call our custom segue. Now, when you tap the
    annotation and then the callout, you will go to the restaurant-detail view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6359124d-3a55-493a-9f41-6b5889b3960a.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's build and run the project by hitting the Play button (or use *cmd* + *R*).
    We can now get to the restaurant detail view from the map.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to restaurant  detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, we are going to display the data in our restaurant detail.
    For now, we want to pass the data over to the detail view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this work, we need to update both our `RestaurantDetailViewController`
    (which we have not created yet) and the `MapViewController`. Let''s create the
    `RestaurantDetailViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Restaurant` folder and create a new group named `Restaurant
    Detail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the new `Restaurant Detail` folder and create a new group
    named `Controller`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click on the new `Controller` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your new file screen, select iOS at the top and
    then Cocoa Touch Class. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Options screen, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `RestaurantDetailViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UITableViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete everything after the `viewDidLoad()` method, as we do not need all of
    the other code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your file should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf9fc78d-ca66-4b06-bdb9-92b927128b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, inside of the class declaration, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code inside of `viewDidLoad()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should now look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe186c1e-0e40-4d7f-84b2-286a39dc9f00.png)'
  prefs: []
  type: TYPE_IMG
- en: Open your `RestaurantDetail.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Outline view, select the Table View Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Utilities panel, select the Identity inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Custom Class, in the Class drop-down menu, select RestaurantDetailViewController
    and hit *Enter* in order to connect the View Controller to the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is all we need to do in `RestaurantDetailViewController`. Next, we need
    to update our `MapViewController`**:**
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MapViewController.swift` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Directly under where we declare our manager, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code into the `calloutAccessoryControlTapped()` method
    above `performSegue`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Your file should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbbe86b3-c822-4e56-892c-9e04dd0cdddc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add the following code after `viewDidLoad()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You will see an error, but ignore it as we are going to fix this in the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we transition with a segue, this method gets called. First, we check
    for the `showDetail` identifier; if this identifier is called, we want to do something
    (in this case, get the selected restaurant and pass it to the detail view) before
    we transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code after the `addMap(_ annotations:)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are checking to make sure that the segue destination is  the `RestaurantDetailViewController`;
    if so, we make sure that we have a selected restaurant. When it is confirmed that
    the segue destination is  the `RestaurantDetailViewController` and we have a selected
    restaurant, we use the `selectedRestaurant` variable that we created in `RestaurantDetailViewController`
    and set it to the selected restaurant in `MapViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your file should now look like the following with the two new methods we just
    added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c97dcc80-0118-4dab-844b-7619b176b625.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s build and run the project by hitting the Play button (or using *cmd *+
    *R*) and test whether we can pass data to our `RestaurantDetailViewController`.
    You should see the following in your Debug panel, if everything worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec849fcd-7def-4ce6-bd0e-4f2b10deaf8f.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have our `RestaurantDetailViewController` capable of receiving data;
    in the next chapter, we will display that data. However, before we write any more
    code, we should organize our code a bit better.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we wrote an extension for our `DataManager`; extensions are useful
    for adding your functionality onto standard libraries, structs, or classes—such
    as arrays, ints, and strings—or onto your data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example. Let''s say that you wanted to know the length of a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: For us to access the count of the string, we would need to access the characters
    and then get a count.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s simplify this by creating an extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'With this  newly created `String` extension, we can now access the count by
    writing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, extensions are very powerful by enabling us to add extra functionality
    without having to change the main class or struct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Up until now, we have paid very little attention to file structure and more
    attention to understanding what we are writing. Organizing your code is also very
    important, which is why we are going to refactor our code. The refactoring will
    mostly consist of copying and pasting code that you have already written. Extensions
    can help us organize our code better and stay away from cluttering our View Controllers.
    Also, we can extend the functionality of View Controllers through extensions.
    We are going to update four classes: `ExploreViewController`, `RestaurantListViewController`,
    `LocationViewController`, and `MapViewController`.'
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring ExploreViewController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to divide our View Controller into distinct sections using what
    is known as a `MARK` comment. Let''s start with our `ExploreViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ExploreViewController` file, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember this should be outside
    of the class, not inside):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are creating two extensions. Our first one will be private and will
    be where we add any methods that we create that we need for this controller. Our
    second one is an extension that just deals with our `collectionview` data source.
    Let's keep going for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'We currently have an error because we are using `UICollectionViewDataSource`
    in two places. Delete `UICollectionViewDataSource` (including the comma) from
    the class definition at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f207b0f-2d93-4012-8fd1-1ff0fb157160.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s move all of our `CollectionViewDataSource` methods into our extension.
    You should be moving the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9381b58f-41ce-4045-9780-932af2529374.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your file, including the extension, should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28d74e84-b424-4a99-b828-acb98af1020a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you are probably wondering why we created the `private` extension. Well,
    one thing that I try to do is keep `viewDidLoad()` as clean as possible. Instead
    of writing a ton of code inside of `viewDidLoad()`, I like to create an `initialize()`
    method and call that instead. This way, it''s clear to anyone going into my code
    what I am doing. Let''s add the following to our `private` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can call `initialize()` inside of `viewDidLoad()`. When you are done,
    you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now, this might seem like we wrote extra code for nothing, but as your classes
    grow, you will see the benefit of doing this. Before we clean up the other files,
    let's look at what the `MARK` comment does.
  prefs: []
  type: TYPE_NORMAL
- en: Using the MARK  comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, our `MARK` comment may seem like a useless comment in our code,
    but it is more powerful than you think. Look at the bottom bar that is located
    to the right of  the Play and Stop buttons in Xcode and look for the last arrow.
    Mine says `No Selection`, but if you have your cursor on a method you might see
    that instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9c289725-4e3c-48d4-a73f-83d8a7e8a3bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on this last item and you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed4691f6-7997-4c4d-9a9e-e0e76fdfb5ee.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows all of your code divided just like our file. You can click on any
    method and the file will jump right to that method. Even if your file is long
    and you are looking for a method, you can use this technique to get where you
    need to be. We are done cleaning up our `ExploreViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring RestaurantViewController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now know our structure, so let''s update our `RestaurantViewController`.
    Even though we do not currently have anything to put in our `private` extension,
    we will add it anyway as good practice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our `RestaurantViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Next, delete the `UICollectionViewDataSource` subclass from the main class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s move all of our `CollectionViewDataSource` methods into our extension.
    You should be moving the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0378461f-8d08-462d-a21b-5a8ef03bb0e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your file, including the extension, should now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1ddb33b-bbc2-4cdf-bd6e-d9fca256f1cc.png)'
  prefs: []
  type: TYPE_IMG
- en: We successfully updated our `RestaurantListViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s take a look at our `LocationViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of our `LocationViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Next, remove the `UITableViewDataSource` subclass from the main class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s move all of our `TableViewDataSource` methods into our extension.
    You should be moving the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4a987b9-112e-4474-9ee3-003203584906.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your file, including the extension, should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/090ab242-4ff1-44c2-a080-345999907d8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, just like we did in our `ExploreViewController`, we want to create an
    `initialize()` method in our `private` extension and update `viewDidLoad()` to
    call `initialize()`. When you are done, your file should look like mine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b53e7ff9-2fec-4367-ab09-c020fd188551.png)'
  prefs: []
  type: TYPE_IMG
- en: We finish by  cleaning up our `LocationViewController`. Finally, let's take
    a look at our `MapViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring MapViewController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are just about done refactoring our files. The last file we need to refactor
    is our `MapViewController`. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of our `MapViewController`, after the last curly brace, hit *Enter*
    a couple of times and add the following code (remember, this should be outside
    of the class, not inside):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Next, remove the `MKMapViewDelegate` subclass from the main class and move it
    into our extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s move all of our `MKMapViewDelegate` methods into the extension.
    You should be moving the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99c87378-7d80-4e2e-bfbc-f59e255d939d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your extension should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ebe92ac-81d6-448d-b8d4-4377fd45fcbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s update our `private` extension by moving the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7234edf3-1f0e-4410-94a0-89c0669da022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you are done, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/443893a8-9365-4919-b90f-e7aeae067fc7.png)'
  prefs: []
  type: TYPE_IMG
- en: I did not include the `MKMapViewDelegate` extension because the file is too
    long. The extension is under our `private` extension. Why did I not move the `prepare()`
    method? The `prepare()` and `viewDidLoad()` methods are methods that are overrides
    for `UIViewController` in this case. We want to keep these methods inside of our
    main class declaration. The more we do this, the clearer it will become.
  prefs: []
  type: TYPE_NORMAL
- en: We finished cleaning up the four View Controllers. You might be wondering what
    the benefits of this are. In this project, it may not seem like these updates
    are very important, because we are not doing a lot in our View Controllers. However,
    as a project grows, there will be some cases where multiple protocols and delegates
    are adopted; thus, these updates will be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This class is subclassing a View Controller and adopting one protocol, three
    delegates, and one data source. If you have two methods for each one that you
    need, you would have 12 functions in your class that would need certain methods.
    Separating out our code makes it really easy to find where things are located.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed what `MKAnnotations` are and how to add and subclass
    them in order to use them on our map. We also learned how to customize our annotations.
    Our app now takes us from tapping on an annotation to a restaurant detail page.
    We also learned that extensions help to organize code as well as add functionality
    without having to change the main class or struct with which we are working.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to display data on our restaurant list. We
    will also set up our restaurant detail page to display data.
  prefs: []
  type: TYPE_NORMAL
