["```swift\n@interface DogClass\n@property NSString *dog_name;\n@property NSInteger number_legs;\n@end\n\nDogClass *mydog = [[DogClass alloc] init];\nNSString *string = [myDog valueForKey:@\"dog_name\"];\n[mydog setValue:@4 forKey:@\"number_legs\"];\n```", "```swift\n// The following line sets a property, directly.\n//Example A\nmyObject.myProperty = myValue;\n\n/*\n  While this other line sets the same property, this time using KVC.\n*/\n//Example B\n[myObject setValue:myValue forKey:@\"myProperty\"];\n```", "```swift\n- (void)tableView:(NSTableView *)aTableView\n    setMyObjectValue:(NSString *)anObject\n    forMyTableColumn:(NSTableColumn *)aTableColumn\n    row:(int)rowIndex\n{\n    if ([[aTableColumn identifier] isEqual:@\"myName\"])\n    {\n        [[myRecords objectAtIndex:rowIndex] setName:anObject];\n    }\n    else if ([[aTableColumn identifier] isEqual:@\"myAddress\"])\n    {\n        [[myRecords objectAtIndex:rowIndex] setAddress:anObject];\n    }\n}\n```", "```swift\n- (void)tableView:(NSTableView *)aTableView\n    setMyObjectValue:(NSString *)anObject\n    forMyTableColumn:(NSTableColumn *)aTableColumn\n    row:(int)rowIndex\n{\n    [[myRecords objectAtIndex:rowIndex] setValue:anObject forKey:[aTableColumn identifier]];\n}\n```", "```swift\n// Manual implementation of KVC setter for method.\nNSString *mySetterString = [@\"set\" stringByAppendingString:[myKeyString capitalizedString]];\n[myObject performSelector:NSSelectorFromString(mySetterString) withObject:myValue];\n\n// Manual implementation of KVC setter for instance variable.\nobject_setInstanceVariable(myObject, myKeyString, myValue);\n```", "```swift\nobjc_setAssociatedObject(myObject, myKey, myValue, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n```", "```swift\nobjc_msgSend(myObject, mySetterSelector, myValue);\n```", "```swift\n/*\n//------------------------------\n  We create the method called \"setCollectionValue:forKey:\"\n//------------------------------\n*/\n\n- (void)setCollectionValue:(id)value forKey:(NSString *)key\n{\n      /*\n     //------------------------------\n\t Here we set the value for key in a dictionary owned by the object.\n     //------------------------------\n     */\n\n      [collectionDictionary setObject:value forKey:key];\n}\n /*\n//------------------------------\n     Then, we create the method called \"getCollectionValueForKey:\"Note that it's a getter method, so it must return something â€“ (id)\n//------------------------------\n*/\n - (id)getCollectionValueForKey:(NSString *)key\n{\n    /* \n   //------------------------------\n    Here, we get the object from the dictionary, for the specified key and return it.\n   //------------------------------\n    */\n\n    return [collectionDictionary objectForKey:key];\n}\n```", "```swift\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\n}\n```", "```swift\n/*\n//------------------------------\n   We register the object \"developmentManager\" as the observer of \"developer\". It will then notify you when any change will take place for the key path \"developmentStage\".\n//------------------------------\n*/\n[developer addObserver:developmentManager forKeyPath:@\"developmentStage\" options:NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld context:nil];\n```", "```swift\n- (void)informNoProgress\n{\n  NSLog(@\"We had no progress today\");\n}\n\n- (void)informRealProgress\n{\n  NSLog(@\"Our today's progress is of %@ level\", developer.developmentStage);\n}\n```", "```swift\n-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context\n{\n    if([keyPath isEqualToString:@\"developmentStage\"])\n    {\n    /*\n    //------------------------------\n        Here we store the old and new values for further comparison.\n    //------------------------------\n    */\n     NSInteger oldStage = [changeobjectForKey:NSKeyValueChangeOldKey];\n    NSInteger newStage = [changeobjectForKey:NSKeyValueChangeNewKey];\n\n    /*\n    //------------------------------\n        Then, we check whether the oldStage level is lower than the newStage level\n    //------------------------------\n    */\n     if(oldStage < newStage)\n    {\n      /*\n      //------------------------------\n          If the value is lower, there is progress and we call the properly method to inform it\n      //------------------------------\n      */\n       [self informRealProgress];\n\n    } else {\n      /*\n      //------------------------------\n\t  However, if the old level is not lower, it means there was no progress, we call the method to inform it.\n      //------------------------------\n      */\n       [self informNoProgress];\n    }\n      }\n}\n```"]