- en: Chapter 5. Displaying Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editing a table: deleting rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editing a table: inserting rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching through the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying local content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying formatted text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed about some of the available options for
    data management in an iOS application. In this chapter, we will discuss various
    ways of displaying data to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will see how to use the following controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIPickerView:` This is the control that provides similar functionality to
    a list box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UITableView:` This is a very customizable view for displaying data. One of
    the most used controls in iOS applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UISearchBar` **and** `UISearchDisplayController:` These are a combination
    of controls that provide an easy-to-use interface for searching through data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIWebView:` This brings web browser functionality to applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QLPreviewController:` This displays various document formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, we will learn how to provide indexing in tables, to make large
    volumes of data easily accessible to the user. We will also discuss some of the
    available ways to display formatted text, even **Portable Document Format (PDF)**
    , and other documents.
  prefs: []
  type: TYPE_NORMAL
- en: Also, starting from this chapter, all code examples will use a default view
    controller named `MainController`, unless otherwise stated.
  prefs: []
  type: TYPE_NORMAL
- en: Providing lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the `UIPickerView` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIPickerView` class provides us with a control whose functionality is similar
    to a listbox, specifically designed for human fingers touching the screen. Its
    main difference to a common listbox is that each column can have its own number
    of rows. To get started, create a new iPhone project and name it `PickerViewApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `MainController.xib` file in Interface Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `UILabel` and a `UIPickerView` on the main View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in MonoDevelop, create a nested class in the `MainController` class that
    inherits from `UIPickerViewModel:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following constructor and fields in the nested class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now need to override four methods from the `UIPickerViewModel` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int GetComponentCount (UIPickerView picker)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int GetRowsInComponent (UIPickerView picker, int component)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string GetTitle (UIPickerView picker, int row, int component)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void Selected (UIPickerView picker, int row, int component)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, set the model object created to the picker view''s `Model` property
    inside the controller''s `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code can be found in the `PickerViewApp` project.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIPickerViewModel` class does not exist in `Objective-C`. MonoTouch provides
    this class as a wrapper around the native protocols `UIPickerViewDataSource` and
    `UIPickerViewDelegate` and contains both of these class' methods for us to override.
    This is extremely helpful, since we only have to implement and assign one class
    instead of two for our picker view. Both of these protocols are at the same time
    available as classes in MonoTouch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the constructor, we initialize the lists that will hold the data to
    be displayed in the picker. The four classes we need to override are responsible
    for displaying the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int GetComponentCount (UIPickerView picker):` This returns the number of columns
    we want the picker view to display.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int GetRowsInComponent (UIPickerView picker, int component):` This returns
    the number of rows each component will display.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string GetTitle (UIPickerView picker, int row, int component):` This returns
    the text of each row.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void Selected (UIPickerView picker, int row, int component):` This returns
    the action to take when the user selects an item from any component/row combination
    in the picker view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We use the lists we have assigned in the constructor to display the data. For
    example, the `GetTitle` method is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the application and select anything from the picker, the result
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468EXP_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can programmatically select the initial selection of the picker view by calling
    the method `Select (int, int, bool)`. The first two parameters reflect the row
    and component index respectively, while the `bool` parameter toggles the selection
    animation. The only thing to remember with this method is to call it after we
    have assigned the picker's `Model` property. An exception will occur otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: More information on UIPickerView customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from the options presented, we also have the option of setting the width
    of each component. To do this, we override the `GetComponentWidth (UIPickerView,
    int)` method, which returns a float that represents the width for each component.
  prefs: []
  type: TYPE_NORMAL
- en: We can also set custom views as items in the picker view, instead of plain text.
    This can be done by overriding the `GetView(UIPickerView, int, int, UIView)` method
    and returning the view we want to be displayed in each position in the `UIPickerView`
    control.
  prefs: []
  type: TYPE_NORMAL
- en: Date and time selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a control named `UIDatePicker` that is similar to the `UIPickerView`
    and is specifically customized for displaying and selecting date and time values.
    Note that although its user interface is the same as the picker view, it does
    not inherit the `UIPickerView` class. It just uses an instance of it as a sub-view.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying data in a table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the `UITableView` class to display
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UITableView` class, along with the `UITableViewCell` object, provides an
    interface for displaying data on the screen in multiple rows, but on a single
    column. To get started, create a new project in MonoDevelop, and name it `TableViewApp.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a view with controller to the project, and name it `TableController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `TableController` class' inheritance from `UIViewController` to `UITableViewController:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `TableController.xib` file in Interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the document's `UIView`, and add a `UITableView` in its place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the outlet named view of the `TableController` to the table view added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in MonoDevelop, create the following nested class inside the `TableController`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the controller''s `ViewDidLoad` method, and add the following line
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code can be found in the `TableViewApp` project.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The nested class that we created acts as the data source of the `UITableView`.
    It inherits from the MonoTouch `UITableViewSource` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like the `UIPickerView`, in the example discussed in the previous recipe, the
    `UITableViewSource` class does not exist in `Objective-C`. It is merely a wrapper
    object offered by MonoTouch around `UITableViewDelegate` and `UITableViewSource`
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: In its constructor, we initialize two variables. A string that will act as the
    cells' identifier and a generic `Dictionary` for our data source.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the `TableSource` class work, we need to override two methods. The
    first method, named `RowsInSection`, which returns the number of rows the table
    shall display. Here, we return the number of items in our data source object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The second method, `GetCell`, returns the `UITableViewCell` object that will
    be displayed in the table.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UITableViewCell` class represents a single row and manages its content
    in a `UITableView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be more efficient, the table view creates its cell objects when they are
    needed. For this reason, we need to get a previously used `UITableViewCell` from
    the table through its `DequeueReusableCell` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If no cells exist for the particular cell identifier, the method returns `null`.
    Hence, we create the cell that will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we assign the text that the particular cell will display and return it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `UITableViewCell` class contains two labels that can be used
    to display text. The main label can be accessed through the `TextLabel` property
    and the secondary label through the `DetailTextLabel` property. Note that when
    using a cell with the `Default` style, the `DetailTextLabel` property cannot be
    used and will return `null`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To provide functionality when the user selects a particular row, we need to
    override the `RowSelected` property in the class that acts as a `UITableViewSource`.
    By default, when the user taps on a row, the cell is highlighted with a blue color
    to indicate the selection. To de-select the row, we use the `UITableView.DeselectRow(NSIndexPath,
    bool)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: UITableView styles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UITableView` can be created with two different styles. The default style
    is `Plain`. The other style that can be used is the `Grouped` style. This style
    is being used in many iOS native applications, such as the `Settings` application.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `UITableView` supports display of data divided into different sections.
    We must explicitly return the number of rows that each section will have in the
    `RowsInSection` override if we want to use different sections.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Providing lists*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Customizing rows*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. User Interface: View Controllers"), User
    Interface: View Controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating* a *table controller*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will cover some of the different options available for customizing
    the display of content in table cells.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop in the same manner the project in the previous
    recipe was created. Name it `CustomRowsApp.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy and paste the `TableSource` class from the project in the previous task,
    inside the `TableController` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following changes in the `GetCell` override:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the `cellID` field and add a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize it in the constructor, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another `KeyValuePair` in the data source object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Compile and run the application on the simulator. The output should be something
    similar to the following, as explained in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A table cell can have four different cell styles, which are represented by
    the `UITableViewCellStyle` enumeration. Its values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Default:` This is the default cell style. Only the `TextLabel` property can
    be used to display text.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Subtitle:` This is a style that provides the `DetailTextLabel` as a sub-title
    to the `TextLabel`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Value1:` This is a style that displays both `TextLabel` and `DetailTextLabel`
    text in the same size, with different colors and aligned to the sides of the cell.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Value2:` This is a style that displays the `TextLabel` text smaller than the
    `DetailTextLabel` text. This style is used in the native `Contacts` application,
    in the contact details screen.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To easily use all available styles, we have added all the values of the `UITableViewCellStyle`
    enumeration in a `Dictionary:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we use different cell styles, hence different cells, we need one cell
    identifier for each string. To avoid declaring another list or more fields in
    the class, we use the data source for this reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To create each cell with a specific style, we extract the `UITableViewCellStyle`
    value from the `cellStyles` field, according to the current row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `DetailTextLabel` text for each cell, we just make sure we are not
    trying to set it on a cell with `Default` style, as the first one in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further customization can be done in a `UITableViewCell`. All views a cell contains,
    including the `TextLabel` and `DetailTextLabel,` are sub-views to the cell's view,
    which is exposed through its `ContentView` property. We can create custom views
    and add them as sub-views to it.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful properties of the UITableViewCell class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from adding text in the default labels, the `UITableViewCell` contains
    some other properties, whose values we can set, to add more default items in a
    cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ImageView:` This property accepts a `UIImageView`. We can use it to display
    an image in a cell, on its left side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AccessoryView:` This property accepts any instance of `UIView`. Its position
    defaults to the right of the cell, in the place of the cell''s `Accessory`, which
    is located at the right side of the cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Accessory:` This property accepts values of the type `UITableViewCellAccessory`.
    It provides predefined views for the cell''s accessory, such as a `DetailDisclosureButton`
    or a `Checkmark`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editing data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editing a table: deleting rows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to delete rows from a `UITableView`, with
    appropriate feedback to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `EditingTableDataApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a view controller to the project, and convert it to a `UITableViewController`
    as described in the *Displaying data in a table* section in this chapter, and
    name it `TableController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `UINavigationController` in the `AppDelegate` class. Initialize it, setting
    the `TableController` as its root controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Back in MonoDevelop, add three fields in the TableController class: `List<string>
    tableData, UIBarButtonItem buttonEdit`, and `UIBarButtonItem buttonDone`. Override
    the class'' `ViewDidLoad` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a proper table view source for the table, which accepts the `tableData`
    generic `List` as an argument in its constructor. Create the handler method `ButtonEdit_Clicked`,
    and enter the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the handler method `ButtonDone_Clicked`, and enter the following code
    in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, override the `CommitEditingStyle` method of the table source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we do here is make use of the navigation bar to add buttons
    that will handle the table''s edit mode. When the view loads, we set the edit
    button with the `SetRightBarButtonItem` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `ButtonEdit_Clicked` method, we set the table to editing mode. Then,
    we change the button in the navigation bar so that the user can exit from editing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SetEditing` method enables or disables the table''s editing mode. When
    a table view is in editing mode, a round red icon with the minus (-) symbol appears
    on the left side of each cell. When the user taps the icon, a confirmation red
    **Delete** button appears in the cell. To actually delete the row when the user
    confirms deletion by tapping on the **Delete** button, we must implement the `CommitEditingStyle`
    method in the table source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we need to do is check if the method was called as a result
    of the user tapping the `Delete` button. This is done by checking the `editingStyle`
    parameter, highlighted in this code. Then, we delete the data of the row from
    the data source and the row from the table with the `DeleteRows` method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The table view provides another, more direct way to the user for deleting rows.
    This can be accomplished by swiping the finger on the cell we want to delete.
    In this case, only the **Delete** button is shown. We still need to implement
    the `CommitEditingStyle` method in the table source to actually remove the row
    from the table.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that a navigation controller was used in this recipe doesn't mean it
    is the only way to accomplish the function of deleting rows. It is, however, a
    combination of view controllers that will be used most of the time, in real-world
    application scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Row removal animations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `UITableViewRowAnimation` enumeration used in the `DeleteRows` method represents
    the type of animation a row will be removed by. It contains various values (Left,
    `Right, Middle, Fade, Top, Bottom`, and `None)` for animating the row. Note that
    to accomplish the best result, the type of animation should be used according
    to the position of the row in the data source. For example, if the row to be removed
    is the last one on the table, it is best to use `UITableViewRowAnimation.Bottom`
    so that the row that should be removed will move downwards. If the row to be removed
    is the first one in the data source, it is best to use `UITableViewRowAnimation.Top`
    so the row that should be removed will move upwards. The rest of the options are
    more suitable for the intermediate rows, between the first and last.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editing a table: Inserting rows*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. User Interface: View Controllers"), User
    Interface: View Controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Navigating through different view controllers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editing a table: inserting rows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide the user with the ability to insert
    rows in a `UITableView`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this task, we will use the project `EditingTableDataApp` from the previous
    task. Open it in MonoDevelop.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add another `UIBarButtonItem` field in the `TableController` class, and initialize
    it in the `ViewDidLoad` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the handler method `ButtonAdd_Clicked:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `ButtonEdit_Clicked` method, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also add the following line in the `ButtonDone_Clicked` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the app on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Edit** button, and see the add button appear on the leftside in the
    navigation bar. Tap it and see the new row is added to the table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A system-default **Add** button is used here. When the user taps on the button,
    a new row is added in the table. The button is added in the edit button''s `Clicked`
    handler as the left button in the navigation bar. To remove it, we call the same
    method, passing as the `UIBarButtonItem` parameter, which is a `null` value inside
    the `ButtonDone_Clicked` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, when the user disables the editing mode, the `add` button will disappear.
    Next, all we need to do to add a row is add the data to the data source and force
    the table to reload, which is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the simplest way of inserting rows in a table. It is not the most efficient
    though. Calling the `UITableView.ReloadData` method causes the `UITableView` to
    reload everything, which will degrade performance if the table contains a large
    number of rows. To avoid this, you can replace the `ReloadData` call in this example
    with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `InsertRows` method causes the table view to reload only the part of its
    contents that are needed, in this case the last item in the data source. Note
    that with this method, we can also specify in which section of the table the cell
    will be inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Row re-ordering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another useful feature of the `UITableView` class is that of re-ordering rows.
    To demonstrate this, add the following method overrides in the table source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returning `true` in the `CanMoveRow` method enables re-ordering for all cells.
    This is indicated by a grip appearance icon displaying on the right side in each
    cell. When the user touches and drags the icon, the cell can be moved to another
    position. Inside the `MoveRow` method is where the actual re-ordering occurs.
    The only thing that needs to be done is to remove and re-insert the item in the
    data source in the desired index, using the `sourceIndexPath` and `destinationIndexPath`
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Editing a table: deleting rows*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide an index in a table, allowing the
    user to browse through the rows of a `UITableView` quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `TableIndexApp`. Add a `UITableViewController`
    as shown in the previous tasks in this chapter, and implement the `TableSource`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the table source class, override and implement the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The table source created in this task contains many different sections. For
    simplicity, each section contains one row. The `NumberOfSections` method returns
    the total number of sections the table will display.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set a title for each section, we must override the `TitleForHeader` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This implementation returns the first letter of each string in the data source.
    To provide the index, we override the `SectionIndexTitles` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, it returns the first letter of each item in the data source. The result
    of this project will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468EXP_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the user touches somewhere on the index, the table view will automatically
    scroll to that specific section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Indexing should be applied on tables with a `Plain` style. Applying an index
    in tables with a `Grouped` style set is not advisable, because the index will
    not be easily distinguished.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of a native iOS application with an index on a table can be found
    in the native `Contacts` application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Searching through the data*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching through the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to provide search functionality for the content
    in a table view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `SearchTableApp`. Add a `UITableViewController`,
    and name it `TableController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `TableController.xib` file in Interface Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Search Bar** and **Search Display Controller** in the `UITableView`.
    Note that after this action, some outlets are created and connected automatically.
    We need most of them, so we leave them as they are and save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in MonoDevelop, implement a class that will act as a delegate object for
    the search display controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `ViewDidLoad` method and assign the source and delegate objects
    in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can find the complete code in the `SearchTableApp` project. The result
    will be the common iOS search bar above the table, similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UISearchDisplayController` class provides a convenient way of search through
    data. It contains a `UISearchBar` that accepts input from the user and a `UITableView`
    that is used to display the results. After we add a search controller in a view
    controller, we can access it through that controller''s `SearchDisplayController`
    property. To trigger the results table, we must implement a `UISearchDisplayDelegate`
    and override its `ShouldReloadForSearchString`, which returns a boolean value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `ShouldReloadForSearchString` method override, we search our data
    source saving the filtered results in a new data source, according to its `forSearchString`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We then sort the results alphabetically and return `true`, so that the search
    controller''s table will reload its data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The search controller''s table view also needs a source object. In this example,
    we set it to the same object that we created for our table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using instances of the same object, we need to modify some things
    in it to display data according to which table calls it. So, for example, the
    `RowsInSection` method looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, we return the number of rows according to which table calls the method.
    Similarly, we need to set each cell''s text label inside the `GetCell` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user taps on the search bar, the keyboard appears, setting the search
    controller active. To de-activate it, we can hook on the search bar''s `SearchButtonClicked`
    event. This event will get triggered when the user taps on the keyboard''s **Search**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `SetActive` method is what we can use to enable or disable the search controller.
  prefs: []
  type: TYPE_NORMAL
- en: Providing search functionality to other controllers.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although this example uses a `UISearchDisplayController` in a `UITableViewController`,
    it does not mean that it is the only way it can be used. We can use a search controller
    with whatever kind of `UIViewController` we want. The only extra thing we need
    to do in this case is set the search controller's `SearchContentsController` property
    to the view controller it belongs to. This is being taken care of automatically
    by Interface Builder when we add a `UISearchDisplayController` in a `UITableViewController`,
    but not with other controllers.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying data in a table*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Table indexing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss displaying online content with the `UIWebView`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `WebBrowserApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `MainController.xib` file in Interface Builder, and add a `UIWebView`
    object on the main View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and connect an outlet for it with the name `webView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the `ViewDidAppear` method in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator. Watch the website load on
    the screen!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIWebView` class is iOS SDK''s web browser control. To load web content,
    we just have to call its `LoadRequest` method, which accepts a parameter of the
    type `NSUrlRequest`. The `NSUrlRequest` object contains the URL we want it to
    load:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIWebView` class contains some very useful events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LoadStarted:` It is triggered when the control has started loading content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoadFinished:` It is triggered when the content has finished loading successfully'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoadError:` It is triggered when loading of the content has failed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another important feature of the `UIWebView` is the automatic scaling of content.
    It can be activated by setting its `ScalePageToFit` property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying local content*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Displaying formatted text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Displaying documents*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying local content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss displaying local HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `LocalContentApp`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a `UIWebView` on the main view of `MainController`, and save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new folder to the project, and name it `html_content.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your content to that folder through MonoDevelop. Don't forget to set each
    file's **Build Action** to **Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the `ViewDidAppear` method in the `MainController` class, and enter
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View your HTML content displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zoom in to view the content larger, just like you would do for online content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process of displaying local content is the same as displaying online content.
    The `NSUrl` class has a static method that creates an instance, based on a file
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `UIWebView` is a very powerful control. It can be used to display everything
    the Safari browser on iOS can. This includes HTML, plain text, images, and PDF
    documents.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also navigate through the history of `UIWebView` with its `GoBack()`
    and `GoForward()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: UIWebView supported files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `UIWebView` control can be used to display other types of files as well.
    These file types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Excel (.xls)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keynote (.key.zip)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numbers (.numbers.zip)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pages (.pages.zip)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PDF (.pdf)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerPoint (.ppt)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Word (.doc)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rich Text Format** (.rtf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rich Text Format Directory (.rtfd.zip)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keynote ''09 (.key)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numbers ''09 (.numbers)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pages ''09 (.pages)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a simple web browser*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Displaying documents*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying formatted text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use the `UIWebView` class to display formatted
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we will work on the `LocalContentApp` project discussed previously.
    Open it in MonoDevelop.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Comment out the previous code in the `ViewDidAppear` method, and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Watch how the HTML string is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As discussed in [Chapter 2](ch02.html "Chapter 2. User Interface: Views"),
    *User Interface: Views*, the `UITextView` can be used to display large blocks
    of text and edit it, but it cannot display formatted text. The `UIWebView` can
    do this by passing our HTML-formatted text as a parameter to the `LoadHtmlString`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The second parameter is of the type `NSUrl`. Since we have created our HTML
    string in-code and there are no external references to other files, we don't need
    it, and so we just pass `null`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we would like to reference external files inside our HTML string, we should
    set the `NSUrl` parameter of `LoadHtmlString` to the path that contains the files,
    thus setting the base directory for the HTML. For example, consider the following
    HTML string, which references a file inside the `html_content` folder of the application
    bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to pass it to the `LoadHtmlString` to display the image, we should
    have also set the `baseUrl` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `bool` parameter of the `NSUrl` constructor indicates that the URL string
    of the first parameter is a path to a directory and should be treated like one.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the `UIWebView` can display a wide variety of content, it cannot be
    used to edit it.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing specific links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UIWebView` also provides control on how links that the user taps on be
    treated. To do this, we can assign a handler to its `ShouldStartLoad` property.
    It accepts delegates of the type `UIWebLoaderControl`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a simple web browser*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Displaying local content*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. User Interface: Views"),User Interface: Views:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying and editing text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to easily display various documents of different
    formats with the `QLPreviewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `DocumentPreviewApp`. Add a
    view with controller, and name it `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `MainController.xib` file in Interface Builder and add a `UIButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a folder named `docs` to the project and put some document files in it.
    The project `DocumentPreviewApp` contains three different documents: a `PDF`,
    a `DOCX`, and an `XLSX`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following `using` directive in the `MainController.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following nested class inside the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter the following code in the `ViewDidLoad` override of the `MainController:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `QLPreviewController` class provides a very convenient way of displaying
    multiple document formats at once. It is a controller that can be displayed either
    by pushing it in a navigation controller stack, or by presenting it modally.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define the documents that we want it to display, we have to create a `QLPreviewControllerDataSource`
    class and assign it to its `DataSource` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The `QLPreviewControllerDataSource` contains two methods we need to override:
    `PreviewItemCount`, which returns the number of items the controller has to display,
    and `GetPreviewItem,` which returns the actual item. This item is of the type
    `QLPreviewItem`, and we have to implement a method that inherits it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: In this class, we have to override two properties, both of which represent the
    information of the item to be previewed. These are `ItemTitle` and `ItemUrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the controller calls the `PreviewItemCount` method and it returns a number
    more than `1`, it adds a `UIToolbar` with two arrow buttons that allows the user
    to navigate through the documents. When the `GetPreviewItem` method is called,
    it sets the current title to its `ItemTitle` property and loads the document according
    to the `ItemUrl` property. If the button is tapped in this application, the result
    will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1468EXP_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot displays the `QLPreviewController` after navigating to the last
    document that is a file of the type `XLSX`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller contains a system-default **Done** button on its navigation bar.
    If the button is tapped, the controller is automatically dismissed. We can hook
    on its `WillDismiss` and/or `DidDismiss` events to provide extra behavior.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Displaying local content*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Displaying formatted text*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
