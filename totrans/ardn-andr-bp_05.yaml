- en: Chapter 5. Wi-Fi Remote Security Camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a Wi-Fi remote security camera. The camera itself
    will be based on the Arduino Yùn and a standard USB webcam. The Arduino Yùn is
    a powerful Arduino board that has an onboard Linux machine and Wi-Fi connectivity.
    The Arduino Yùn will take the video coming from the camera and stream it on the
    local Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will be able to access the video stream from our physical Android device.
    This will give us the mobile flexibility to access our video stream from anywhere
    in our home.
  prefs: []
  type: TYPE_NORMAL
- en: 'From this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Arduino Yùn and connect a USB camera to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Yùn to stream the video over your local Wi-Fi network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build an Android application to get the stream from the USB camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Wi-Fi remote security camera project is based around the Arduino Yùn board.
    The Arduino Yùn is a powerful Arduino board with integrated Wi-Fi and an onboard
    Linux machine based on a very small Linux distribution called OpenWrt. It also
    has a USB port so that you can connect hard drives, cameras, or other USB devices.
    We will use all these features in this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an image of the board that was used in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will also need a USB camera to stream live video with the Yùn. You can basically
    get any camera that is compatible with **USB Video Class** (**UVC**). For this
    project, I used a Logitech C270 HD camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you plan to use the camera for other applications, such as recording still
    pictures on the Yùn, you will also need a microSD card to save the data. Finally,
    you will need a micro USB cable to power the Yùn. The following is a list of all
    hardware components that are required for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino Yùn ([https://www.adafruit.com/products/1498](https://www.adafruit.com/products/1498))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A UVC compatible USB camera ([http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A micro USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 4 GB microSD card, which is optional ([https://www.adafruit.com/products/102](https://www.adafruit.com/products/102))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will need to configure your Arduino Yùn by following the official guide
    so that it can connect to your Wi-Fi network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://arduino.cc/en/Guide/ArduinoYùn](http://arduino.cc/en/Guide/ArduinoYùn)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that you might have problems configuring your Arduino Yùn if you are behind
    a proxy. If this is the case, try disabling the proxy to see if it solves the
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: If your Yùn is not recent, you might need to update OpenWrt (the Yùn's operating
    system) to the latest version. The procedure is described in the guide and can
    be found at [http://arduino.cc/en/Tutorial/YùnSysupgrade](http://arduino.cc/en/Tutorial/YùnSysupgrade).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the Wi-Fi configuration is done, we will install the required packages
    to handle the camera and stream video on your local Wi-Fi network. Go to a terminal
    (use a terminal software, such as PuTTY or OpenSSH, if you are using Windows),
    and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you need to change the command with the name of your Arduino Yùn
    that you defined when configuring it. If you forgot the name of your board, you
    will need to reset the Yùn and configure it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be prompted to enter your password that you defined during the
    Yùn''s configuration step. You will then be greeted by a screen similar to the
    one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware and software requirements](img/0389OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can are now logged into the Arduino Yùn. You can type the following command
    to update the list of available packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then type this command to install the required packages for live video streaming:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Hardware configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hardware configuration for this project is really simple. First, insert
    the formatted microSD card into the Arduino Yùn SD card reader, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware configuration](img/0389OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, you just have to connect the USB camera to the host USB port of
    the Yùn, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware configuration](img/0389OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To finish the hardware configuration of the project, simply connect the board
    to power via the micro USB port (actually, you don't even need to connect it to
    your computer, the Arduino Yùn can work completely independently!).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up video streaming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now set up the Arduino Yùn so that it continuously streams video. Once
    more log in to your Arduino Yùn using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, replace the command with the name of your Arduino Yùn. Then type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This basically means that it will start the streaming at a resolution of 640
    x 480, at 25 frames per second, and on the `8080` port.
  prefs: []
  type: TYPE_NORMAL
- en: You should see a series of commands being printed inside the terminal, meaning
    that the Yùn is now streaming live video on your Wi-Fi network. Now, go to your
    favorite web browser and type `yourYùnName.local:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: This will open the main streaming interface, where you can select the desired
    streaming type. To access the stream itself for a test, go to `http://arduinoYùn.local:8080/stream.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this link is only valid within your own local Wi-Fi network. You
    will be greeted with the live stream coming from your Arduino Yùn, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up video streaming](img/0389OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing a fullscreen stream player on Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this project, we will implement a very simple Android app that will show
    the MJPEG stream from our Arduino Yùn. We will assume that you will have switched
    on the `Auto-Import` function within your Android Studio preferences. If not,
    kindly activate it by going to the **Auto-Import** preferences and selecting all
    the available options. The **Auto-Import** preferences are available on Mac and
    Windows as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mac**: **Android Studio** > **Preferences** > **Editor** > **Auto-Import**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: **File** > **Settings** > **Editor** > **Auto-Import**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `Android Yùn Security`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum SDK**: `15`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project**: `Blank Activity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity Name**: `StreamActivity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this project, we will be working with three Java classes and we will need
    to create two classes, namely `MjpegInputStream` and `MjpegView`. The Java classes
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StreamActivity` (the main activity that is created upon the start of a new
    project)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MjpegInputStream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MjpegView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a new class, you will need to go to `app` > `src` > `main` > `java`
    > `com.domainofyourchoice.androidYùnsecurity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the package name and go on **New** > **Java Class**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a fullscreen stream player on Android](img/0389OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First things first; this application won''t be able to work if we don''t declare
    the Internet user permission. So, we head off to `AndroidManifest.xml` and we
    add the following line of code below the package name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Android manifest will look as follows when completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Then we head off to `StreamActivity.java` where we will start off our main streaming
    activity. In this project, we will use ASync tasks to do our network activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first declare `String TAG` (which we will be using for logging) and
    `MjpegView` (which refers to an instance of class that we have already created):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate` method, we will declare our URL and also declare a number
    of parameters to set the video stream to fullscreen. It''s important to replace
    `youripaddress` with the IP address that you can easily find out from the Arduino
    Yùn web panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to declare the `onPause()` method that will be implemented
    when the Android application is closed, where this method will pause the live
    stream so as to not use the battery resources of the Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we will implement `DoRead AsyncTask`, which will perform `HttpRequest`
    and communicate with the Arduino Yùn server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `StreamActivity.Java` class, we will implement `onPostExecute()`,
    which as part of the `AsyncTask` API will make sure that the video stream player
    shows up in the Main UI thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then open `MjpegInputStream.java`, where we will declare all the necessary
    code needed to parse the data that is streamed from the Arduino Yùn to the Android
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, we will head off to `MjpegView.java`, where we will be declaring
    a number of important methods to consolidate all of our application processes.
    The `MjpegView.java` class is available at [http://git.io/_Mu_Gw](http://git.io/_Mu_Gw).
  prefs: []
  type: TYPE_NORMAL
- en: Replace all the code within your version of the `MjpegView.java` class with
    the one from the online repository and ensure that the package name and other
    class references match the ones within your project.
  prefs: []
  type: TYPE_NORMAL
- en: Once you make sure that all your `import` statements are included within each
    class with the `Auto-Import` function, you could go ahead and build the app and
    test it on your physical device that is connected to the same Wi-Fi Network as
    your Arduino Yùn.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final project should look something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing a fullscreen stream player on Android](img/0389OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to go further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An interesting implementation and further improvement on the basic Android app
    would be to include the ability to take a snapshot when motion is detected in
    front of the camera. This can be achieved through the OpenCV library for Android,
    which is available at [http://opencv.org/platforms/android.html](http://opencv.org/platforms/android.html).
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the user interface could be improved to include the ability to
    take a picture of that particular scene. This project could also be combined with
    the mobile robot project, which we shall talk about later on, to have a live-streaming
    mobile robot that can be controlled from the same Android application. The use
    cases for modifying such a setup are endless, starting from remote baby monitors
    to medical monitoring devices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's summarize what we did in this chapter. We learned how to connect a USB
    camera to the Arduino Yùn, and configure the Arduino board so that it streams
    video to our local Wi-Fi network. Then we created a new Android application to
    watch the video stream of the camera on our Android phone or tablet. Therefore,
    we created a simple Wi-Fi security camera based on Arduino and Android.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will do something different. We will use the gyroscope
    of the Android phone to control a servomotor connected to an Arduino board. We
    will be able to control the angle of rotation of the servomotor just by titling
    the Android phone.
  prefs: []
  type: TYPE_NORMAL
