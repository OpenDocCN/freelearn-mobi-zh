- en: Chapter 5. Wi-Fi Remote Security Camera
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：Wi-Fi远程安全摄像头
- en: In this chapter, we will build a Wi-Fi remote security camera. The camera itself
    will be based on the Arduino Yùn and a standard USB webcam. The Arduino Yùn is
    a powerful Arduino board that has an onboard Linux machine and Wi-Fi connectivity.
    The Arduino Yùn will take the video coming from the camera and stream it on the
    local Wi-Fi network.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个Wi-Fi远程安全摄像头。摄像头本身将基于Arduino Yùn和一个标准的USB网络摄像头。Arduino Yùn是一款功能强大的Arduino板，它集成了Linux机器和Wi-Fi连接。Arduino
    Yùn将接收来自摄像头的视频并在本地Wi-Fi网络上进行流式传输。
- en: Then, we will be able to access the video stream from our physical Android device.
    This will give us the mobile flexibility to access our video stream from anywhere
    in our home.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将能够从我们的物理Android设备访问视频流。这将使我们能够在家里任何地方访问我们的视频流，提供移动灵活性。
- en: 'From this chapter, you will learn how to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章，你将学习如何：
- en: Use the Arduino Yùn and connect a USB camera to it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Arduino Yùn并连接一个USB摄像头到它
- en: Configure the Yùn to stream the video over your local Wi-Fi network
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Yùn以通过你的本地Wi-Fi网络传输视频
- en: Build an Android application to get the stream from the USB camera
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个Android应用程序以从USB摄像头获取流
- en: Hardware and software requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件和软件要求
- en: The Wi-Fi remote security camera project is based around the Arduino Yùn board.
    The Arduino Yùn is a powerful Arduino board with integrated Wi-Fi and an onboard
    Linux machine based on a very small Linux distribution called OpenWrt. It also
    has a USB port so that you can connect hard drives, cameras, or other USB devices.
    We will use all these features in this project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi远程安全摄像头项目基于Arduino Yùn板。Arduino Yùn是一款功能强大的Arduino板，集成了Wi-Fi，并基于一个非常小的Linux发行版OpenWrt。它还带有一个USB端口，以便你可以连接硬盘、摄像头或其他USB设备。我们将在这个项目中使用所有这些功能。
- en: 'The following is an image of the board that was used in this project:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在本项目中使用的电路板图片：
- en: '![Hardware and software requirements](img/0389OS_05_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_05_01.jpg)'
- en: You will also need a USB camera to stream live video with the Yùn. You can basically
    get any camera that is compatible with **USB Video Class** (**UVC**). For this
    project, I used a Logitech C270 HD camera.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个USB摄像头来与Yùn一起进行实时视频流。基本上，你可以获取任何兼容**USB视频类**（**UVC**）的摄像头。对于这个项目，我使用了Logitech
    C270 HD摄像头。
- en: 'If you plan to use the camera for other applications, such as recording still
    pictures on the Yùn, you will also need a microSD card to save the data. Finally,
    you will need a micro USB cable to power the Yùn. The following is a list of all
    hardware components that are required for this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划将摄像头用于其他应用，例如在Yùn上记录静态图片，你还需要一张microSD卡来保存数据。最后，你需要一条微型USB线来为Yùn供电。以下是本章所需的所有硬件组件列表：
- en: Arduino Yùn ([https://www.adafruit.com/products/1498](https://www.adafruit.com/products/1498))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arduino Yùn ([https://www.adafruit.com/products/1498](https://www.adafruit.com/products/1498))
- en: A UVC compatible USB camera ([http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一款UVC兼容的USB摄像头([http://en.wikipedia.org/wiki/List_of_USB_video_class_devices](http://en.wikipedia.org/wiki/List_of_USB_video_class_devices))
- en: A micro USB cable
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条微型USB线
- en: A 4 GB microSD card, which is optional ([https://www.adafruit.com/products/102](https://www.adafruit.com/products/102))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张4GB的microSD卡，这是可选的([https://www.adafruit.com/products/102](https://www.adafruit.com/products/102))
- en: 'You will need to configure your Arduino Yùn by following the official guide
    so that it can connect to your Wi-Fi network:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要按照官方指南配置你的Arduino Yùn，以便它能够连接到你的Wi-Fi网络：
- en: '[http://arduino.cc/en/Guide/ArduinoYùn](http://arduino.cc/en/Guide/ArduinoYùn)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://arduino.cc/en/Guide/ArduinoYùn](http://arduino.cc/en/Guide/ArduinoYùn)'
- en: Note that you might have problems configuring your Arduino Yùn if you are behind
    a proxy. If this is the case, try disabling the proxy to see if it solves the
    problem.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你在代理服务器后面，你可能会在配置Arduino Yùn时遇到问题。如果是这种情况，尝试禁用代理以查看是否解决问题。
- en: If your Yùn is not recent, you might need to update OpenWrt (the Yùn's operating
    system) to the latest version. The procedure is described in the guide and can
    be found at [http://arduino.cc/en/Tutorial/YùnSysupgrade](http://arduino.cc/en/Tutorial/YùnSysupgrade).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Yùn不是最新的，你可能需要将OpenWrt（Yùn的操作系统）更新到最新版本。该过程在指南中有描述，可以在[http://arduino.cc/en/Tutorial/YùnSysupgrade](http://arduino.cc/en/Tutorial/YùnSysupgrade)找到。
- en: 'After the Wi-Fi configuration is done, we will install the required packages
    to handle the camera and stream video on your local Wi-Fi network. Go to a terminal
    (use a terminal software, such as PuTTY or OpenSSH, if you are using Windows),
    and type the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Wi-Fi配置完成后，我们将安装处理摄像头和在本地Wi-Fi网络上直播视频所需的包。转到终端（如果你使用Windows，请使用终端软件，如PuTTY或OpenSSH），并输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Of course, you need to change the command with the name of your Arduino Yùn
    that you defined when configuring it. If you forgot the name of your board, you
    will need to reset the Yùn and configure it again.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你需要将命令替换为你配置时定义的Arduino Yùn的名称。如果你忘记了板子的名称，你需要重置Yùn并重新配置。
- en: 'You will then be prompted to enter your password that you defined during the
    Yùn''s configuration step. You will then be greeted by a screen similar to the
    one shown in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被提示输入你在Yùn配置步骤中定义的密码。然后，你会看到一个类似于以下截图的屏幕：
- en: '![Hardware and software requirements](img/0389OS_05_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![硬件和软件要求](img/0389OS_05_02.jpg)'
- en: 'You can are now logged into the Arduino Yùn. You can type the following command
    to update the list of available packages:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已登录到Arduino Yùn。你可以输入以下命令来更新可用包的列表：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then type this command to install the required packages for live video streaming:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输入以下命令来安装直播视频所需的包：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Hardware configuration
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件配置
- en: 'The hardware configuration for this project is really simple. First, insert
    the formatted microSD card into the Arduino Yùn SD card reader, as shown in the
    following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的硬件配置非常简单。首先，将格式化好的microSD卡插入Arduino Yùn SD卡读卡器，如下面的截图所示：
- en: '![Hardware configuration](img/0389OS_05_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![硬件配置](img/0389OS_05_03.jpg)'
- en: 'After this, you just have to connect the USB camera to the host USB port of
    the Yùn, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需将USB摄像头连接到Yùn的主USB端口，如下面的截图所示：
- en: '![Hardware configuration](img/0389OS_05_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![硬件配置](img/0389OS_05_04.jpg)'
- en: To finish the hardware configuration of the project, simply connect the board
    to power via the micro USB port (actually, you don't even need to connect it to
    your computer, the Arduino Yùn can work completely independently!).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成项目的硬件配置，只需通过micro USB端口连接到电源即可（实际上，你甚至不需要将其连接到电脑，Arduino Yùn可以完全独立工作！）。
- en: Setting up video streaming
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置视频流
- en: 'We will now set up the Arduino Yùn so that it continuously streams video. Once
    more log in to your Arduino Yùn using the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置Arduino Yùn，使其持续直播视频。再次使用以下命令登录到你的Arduino Yùn：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again, replace the command with the name of your Arduino Yùn. Then type the
    following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，将命令替换为你Arduino Yùn的名称。然后输入以下命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This basically means that it will start the streaming at a resolution of 640
    x 480, at 25 frames per second, and on the `8080` port.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上意味着它将以640 x 480的分辨率，每秒25帧的速度，在`8080`端口开始直播。
- en: You should see a series of commands being printed inside the terminal, meaning
    that the Yùn is now streaming live video on your Wi-Fi network. Now, go to your
    favorite web browser and type `yourYùnName.local:8080`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端内看到一系列命令被打印出来，这意味着Yùn现在正在你的Wi-Fi网络上直播视频。现在，打开你喜欢的网页浏览器，输入`yourYùnName.local:8080`。
- en: This will open the main streaming interface, where you can select the desired
    streaming type. To access the stream itself for a test, go to `http://arduinoYùn.local:8080/stream.html`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开主流媒体界面，你可以选择所需的流媒体类型。要测试访问流本身，请转到`http://arduinoYùn.local:8080/stream.html`。
- en: 'Note that this link is only valid within your own local Wi-Fi network. You
    will be greeted with the live stream coming from your Arduino Yùn, as shown in
    the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此链接仅在你自己的本地Wi-Fi网络内有效。你会看到一个来自你的Arduino Yùn的实时流，如下面的截图所示：
- en: '![Setting up video streaming](img/0389OS_05_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![设置视频流](img/0389OS_05_05.jpg)'
- en: Implementing a fullscreen stream player on Android
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android上实现全屏流媒体播放器
- en: 'In this project, we will implement a very simple Android app that will show
    the MJPEG stream from our Arduino Yùn. We will assume that you will have switched
    on the `Auto-Import` function within your Android Studio preferences. If not,
    kindly activate it by going to the **Auto-Import** preferences and selecting all
    the available options. The **Auto-Import** preferences are available on Mac and
    Windows as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将实现一个非常简单的Android应用程序，该程序将显示来自我们的Arduino Yùn的MJPEG流。我们假设您已经在Android
    Studio的首选项中开启了`Auto-Import`功能。如果没有，请通过前往**Auto-Import**首选项并选择所有可用选项来激活它。**Auto-Import**首选项在Mac和Windows上的位置如下：
- en: '**Mac**: **Android Studio** > **Preferences** > **Editor** > **Auto-Import**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**：**Android Studio** > **Preferences** > **Editor** > **Auto-Import**'
- en: '**Windows**: **File** > **Settings** > **Editor** > **Auto-Import**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：**File** > **Settings** > **Editor** > **Auto-Import**'
- en: 'With all the necessary settings in place, we will first start off by creating
    a new project where we will choose the following within the **New Project** setup:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好所有必要的设置后，我们将首先创建一个新项目，在**New Project**设置中选择以下内容：
- en: '**Name**: `Android Yùn Security`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：`Android Yùn Security`'
- en: '**Minimum SDK**: `15`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK**：`15`'
- en: '**Project**: `Blank Activity`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：`Blank Activity`'
- en: '**Activity Name**: `StreamActivity`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动名称**：`StreamActivity`'
- en: 'In this project, we will be working with three Java classes and we will need
    to create two classes, namely `MjpegInputStream` and `MjpegView`. The Java classes
    are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将与三个Java类一起工作，并需要创建两个类，即`MjpegInputStream`和`MjpegView`。Java类如下：
- en: '`StreamActivity` (the main activity that is created upon the start of a new
    project)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StreamActivity`（在启动新项目时创建的主要活动）'
- en: '`MjpegInputStream`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MjpegInputStream`'
- en: '`MjpegView`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MjpegView`'
- en: To create a new class, you will need to go to `app` > `src` > `main` > `java`
    > `com.domainofyourchoice.androidYùnsecurity`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新类，您需要前往`app` > `src` > `main` > `java` > `com.domainofyourchoice.androidYùnsecurity`。
- en: 'Right-click on the package name and go on **New** > **Java Class**, as shown
    in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击包名，然后选择**New** > **Java Class**，如下面的截图所示：
- en: '![Implementing a fullscreen stream player on Android](img/0389OS_05_06.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![在Android上实现全屏流播放器](img/0389OS_05_06.jpg)'
- en: 'First things first; this application won''t be able to work if we don''t declare
    the Internet user permission. So, we head off to `AndroidManifest.xml` and we
    add the following line of code below the package name:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要考虑的是；如果我们不声明网络用户权限，这个应用程序将无法工作。因此，我们前往`AndroidManifest.xml`文件，并在包名下方添加以下代码行：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Android manifest will look as follows when completed:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，Android清单将如下所示：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then we head off to `StreamActivity.java` where we will start off our main streaming
    activity. In this project, we will use ASync tasks to do our network activity.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们前往`StreamActivity.java`文件，在那里我们将开始我们的主要流媒体活动。在这个项目中，我们将使用ASync任务来进行网络活动。
- en: 'We will first declare `String TAG` (which we will be using for logging) and
    `MjpegView` (which refers to an instance of class that we have already created):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先声明`String TAG`（我们将用它进行日志记录）和`MjpegView`（它指的是我们已创建的类的实例）：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `onCreate` method, we will declare our URL and also declare a number
    of parameters to set the video stream to fullscreen. It''s important to replace
    `youripaddress` with the IP address that you can easily find out from the Arduino
    Yùn web panel:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCreate`方法中，我们将声明我们的URL，并声明一系列参数以将视频流设置为全屏。重要的是要将`youripaddress`替换为您可以从Arduino
    Yùn网络面板轻松找到的IP地址：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will also need to declare the `onPause()` method that will be implemented
    when the Android application is closed, where this method will pause the live
    stream so as to not use the battery resources of the Android device:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要声明`onPause()`方法，该方法将在Android应用程序关闭时实现，该方法将暂停实时流，以避免使用Android设备的电池资源：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After this, we will implement `DoRead AsyncTask`, which will perform `HttpRequest`
    and communicate with the Arduino Yùn server:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将实现`DoRead AsyncTask`，该任务将执行`HttpRequest`并与Arduino Yùn服务器通信：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Within the `StreamActivity.Java` class, we will implement `onPostExecute()`,
    which as part of the `AsyncTask` API will make sure that the video stream player
    shows up in the Main UI thread:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`StreamActivity.Java`类中，我们将实现`onPostExecute()`，它是`AsyncTask` API的一部分，将确保视频流播放器在主UI线程中显示：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will then open `MjpegInputStream.java`, where we will declare all the necessary
    code needed to parse the data that is streamed from the Arduino Yùn to the Android
    device:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将打开`MjpegInputStream.java`文件，在那里我们将声明所有必要的代码，以解析从Arduino Yùn流到Android设备的流数据：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Last but not least, we will head off to `MjpegView.java`, where we will be declaring
    a number of important methods to consolidate all of our application processes.
    The `MjpegView.java` class is available at [http://git.io/_Mu_Gw](http://git.io/_Mu_Gw).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将前往`MjpegView.java`，在那里我们将声明多个重要方法来整合我们所有的应用程序流程。`MjpegView.java`类可在[http://git.io/_Mu_Gw](http://git.io/_Mu_Gw)找到。
- en: Replace all the code within your version of the `MjpegView.java` class with
    the one from the online repository and ensure that the package name and other
    class references match the ones within your project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将你版本中的`MjpegView.java`类内的所有代码替换为在线仓库中的代码，并确保包名和其他类引用与项目中的相匹配。
- en: Once you make sure that all your `import` statements are included within each
    class with the `Auto-Import` function, you could go ahead and build the app and
    test it on your physical device that is connected to the same Wi-Fi Network as
    your Arduino Yùn.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确保所有`import`语句都包含在每个类中，并使用`Auto-Import`功能，你就可以继续构建应用并在连接到同一Wi-Fi网络的物理设备上测试它，该设备连接到Arduino
    Yùn。
- en: 'The final project should look something as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最终项目应该看起来如下：
- en: '![Implementing a fullscreen stream player on Android](img/0389OS_05_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![在Android上实现全屏流媒体播放器](img/0389OS_05_07.jpg)'
- en: How to go further
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何进一步
- en: An interesting implementation and further improvement on the basic Android app
    would be to include the ability to take a snapshot when motion is detected in
    front of the camera. This can be achieved through the OpenCV library for Android,
    which is available at [http://opencv.org/platforms/android.html](http://opencv.org/platforms/android.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本的Android应用上进行有趣的实现和进一步改进，可以包括在摄像头前检测到运动时能够捕捉快照的功能。这可以通过Android的OpenCV库实现，该库可在[http://opencv.org/platforms/android.html](http://opencv.org/platforms/android.html)找到。
- en: Furthermore, the user interface could be improved to include the ability to
    take a picture of that particular scene. This project could also be combined with
    the mobile robot project, which we shall talk about later on, to have a live-streaming
    mobile robot that can be controlled from the same Android application. The use
    cases for modifying such a setup are endless, starting from remote baby monitors
    to medical monitoring devices.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用户界面可以改进，包括捕捉特定场景照片的功能。这个项目也可以与稍后将要讨论的移动机器人项目结合，以拥有一个可以通过同一Android应用程序控制的实时流移动机器人。修改这种设置的用例是无限的，从远程婴儿监控到医疗监测设备。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's summarize what we did in this chapter. We learned how to connect a USB
    camera to the Arduino Yùn, and configure the Arduino board so that it streams
    video to our local Wi-Fi network. Then we created a new Android application to
    watch the video stream of the camera on our Android phone or tablet. Therefore,
    we created a simple Wi-Fi security camera based on Arduino and Android.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章我们做了什么。我们学习了如何将USB摄像头连接到Arduino Yùn，并配置Arduino板使其将视频流传输到我们的本地Wi-Fi网络。然后我们创建了一个新的Android应用程序，在Android手机或平板电脑上观看摄像头的视频流。因此，我们创建了一个基于Arduino和Android的简单Wi-Fi安全摄像头。
- en: In the next chapter, we will do something different. We will use the gyroscope
    of the Android phone to control a servomotor connected to an Arduino board. We
    will be able to control the angle of rotation of the servomotor just by titling
    the Android phone.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将做一些不同的事情。我们将使用Android手机的陀螺仪来控制连接到Arduino板上的伺服电机。我们只需倾斜Android手机就能控制伺服电机的旋转角度。
