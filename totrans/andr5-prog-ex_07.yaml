- en: Chapter 7. Maps, Locations, and Google Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Standard SDK APIs that we have used until now provide a powerful set of
    tools for developing all manner of apps. However, Google also provides a number
    of mobile services such as Gmail, Translate, and Maps. These, and a dozens of
    others, are available to us as developers, and Google provides APIs for us to
    interact with them and incorporate them into our own apps.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A complete and up-to-date list of all Google Services APIs can be found at:
    [https://developers.google.com/apis-explorer/#p/](https://developers.google.com/apis-explorer/#p/).'
  prefs: []
  type: TYPE_NORMAL
- en: Because apps connecting to Google Services use Google's data and servers, there
    is a simple authentication process required which is known as an API Key. In this
    chapter, we will see how to do this as we build a simple map-based app that displays
    a location of our choice. After this is done, we will use a `LocationListener`
    to track our app as the user moves around.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain an API Key to access Google Maps for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand permissions and how to apply them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access `LocationServices` with a `GoogleApiClient`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquire a device's last known location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a `LocationListener` to update the location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize location update intervals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Google Maps UI features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set mock locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquire a location with a `MapClickListener`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a location-aware app with Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get a very basic Google Map into one of our apps requires two distinct steps.
    First, we need to register our app with Google and acquire an API Key to uniquely
    identify our app; once we have a map up-and-running, we can locate our position
    using GPS and then zoom in to that, or any other, location. We begin with the
    first of these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring an API Key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is nothing to stop us getting on with this right away, although you will
    need to first check that, when we were installing all the components of the SDK
    way back in [Chapter 1](ch01.html "Chapter 1. Setting Up the Development Environment"),
    *Setting Up the Development Environment*, we included the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Acquiring an API Key](img/B04321_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The only other thing to note before we begin is that, if you intend to test
    this app using an emulator, then you will need to construct a new one, where the
    system image target is **Google APIs (Google Inc.)** – **google_apis [Google APIs]**,
    rather than **Android 5.x**. Third-party virtual devices may require their own
    configuration to run Play Services. With this done, we are more than ready to
    create our location-based app:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Google Maps Activity**, where previously we have selected **Blank Activity**,
    on the appropriate screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave everything else as suggested by the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The editor should open with the `google_maps_api.xml` file; if not, open it
    from the `res/values` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examine the code. Google will have provided a link beginning with `https://console.developers.google.com/flows/`
    and ending in your package name, for example `com.example.kyle.distancefinder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow this link and you will be taken to the Google Developers Console.![Acquiring
    an API Key](img/B04321_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up, if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to create a new project. Call this whatever you choose,
    as you will be able to use this again for other apps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project Dashboard** sidebar under **APIs & auth**, select **APIs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Google Maps Android API v2** API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, from the **Dashboard** under **APIs & auth**, select credentials and
    click on the **Create New Key** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the resultant screen, copy the API Key and paste it into the `google_maps_api.xml`
    file, where it says `YOUR KEY HERE`, making sure there are no extra spaces at
    either end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now test the app on a handset or Google APIs emulator. The result will resemble
    the following screenshot:![Acquiring an API Key](img/B04321_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incorporating a basic map into our app is pleasantly simple. However, by using
    the Maps Activity wizard, a lot of essential work has been done for us. And it
    is vital to understand that before being able to include maps anywhere in our
    app that we choose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the `build.gradle` file and note how the dependencies have been
    modified for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When including maps in other projects, we will always need the `gms:play-services`
    libraries built in here. The `support:appcompat` library may be less obvious.
    It is used to make apps backward-compatible. It is not strictly necessary here
    and we will return to it when we cover how to reach the maximum number of users
    in the final chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the project''s `Manifest` file. You will notice several differences
    from those of previous projects, the first being the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Anyone who has downloaded an Android app will be familiar with the way the user
    has to grant permissions to use various device functions, such as Internet access
    before installation. These tags, in the manifest, are how this is done, and you
    will need to apply them any time you include a feature that requires user permission.
    Thankfully, they all have very self-explanatory references and a full list can
    be found at [developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other elements in the manifest that will be needed in future projects are
    the two meta-data children of the application element shown below. The first automatically
    keeps our app running the latest version of play services and the second is where
    the API Key we acquired earlier is applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Overall, setting up API keys is very straightforward. We only need to register
    once and individual projects can be reused for apps requiring similar functions;
    speaking of functions, it is about time we added some functionality to our app.
    The most widely used, and arguably most useful Google Map APIs are the Location
    Services, which, among other things, allow the user to locate their device's geographical
    location using GPS, WiFi, and network signal strength.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the last known location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step in incorporating location-aware technology into our apps is to
    identify the user's last known location. This, like much location-based work,
    is done with the help of a GoogleApiClient, and an interface that is a main entry
    point for these services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before adding the Java code to do this, we will edit the layout itself, so
    that we can see what is going on. Follow the next few steps to acquire our device''s
    last known location:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Distance Finder** project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `activity_maps.xml` layout file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the content so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `MapsActivity.java` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Along with the `GoogleMap` that has been declared for us, include the following
    fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, change the class declaration itself, so that it implements the following
    interfaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate an error. Use the quick fix to implement the following methods:![Acquiring
    the last known location](img/B04321_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the `onConnected()` callback like so, to display our location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To report connection status to the LogCat, edit the other two new methods like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `onResume()` method like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new `onPause()` method and complete it like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, rewrite the `setUpMap()` like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project on a handset or AVD. Unless you are running the app on an emulator
    that you have just created, your location will appear in the text view with the
    following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Location[fused 51.507350,-0.127757 acc=4 et=+5m16s558ms alt=19.809023 vel=0.0].**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the beginning of this exercise, we changed the layout a little to include
    a `TextView`. However, we still set the fragment's class as a `SupportMapFragment`,
    and hopefully a little more clearly. The `SupportMapFragment` is the obvious choice
    for any map container we might want in an app. It's simple and handles most map
    processes almost automatically. With this container, almost everything else we
    need can be accomplished with a `GoogleApiClient`. As can be seen from the code,
    it allows us to put in place listeners and callbacks to manage the map and connectivity
    activity. Once the API client has connected us, finding our device's last known
    location requires nothing more than a call to the single function, `getLastLocation()`.
  prefs: []
  type: TYPE_NORMAL
- en: It is vitally important to ensure that we disconnect from any services we are
    using, whenever our user may no longer need them. Failure to do this results in
    apps that use up the device's power and data unnecessarily. By using the `onPause()`
    callback to disconnect the client whenever our Activity loses focus and then `onResume()`
    to re-connect it, we can ensure that our map stays connected when the Activity
    is visible and also that we won't be wasting our user's battery and data when
    it is not.
  prefs: []
  type: TYPE_NORMAL
- en: The `getLastLocation()` method is very useful; it doesn't require a network
    connection, or GPS, and it's instantly available. However, there are many situations
    where we need to update our app's location as the user moves around. This is done
    with `LocationListen3er` callbacks and the `LocationRequest` object, which is
    laid out in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting location updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `LocationRequest` object is highly configurable and allows us to control
    the frequency of requests and the accuracy of the information received. This means
    we can design apps that do not use more resources than required, while still allowing
    us highly accurate and frequent location data when the purpose of the app demands
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, we will implement a `LocationListener` to track our app''s
    location. We will also add one or two features to demonstrate some of the functions
    the maps APIs provide us with. There are only a few lines of code to this section,
    and here they are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include a `LocationListener` in our `FragmentActivity` class declaration, like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate an error. Use the quick fix to import the Google version
    of the `LocationListener`, like so:![Requesting location updates](img/B04321_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following class field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `onCreate()` method, create the following `LocationRequest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next complete the `onLocationChanged()` method like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now expand the `setUpMap()` method like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the project on your handset or emulator and either go for a short walk or
    set a mock-location using the Android Device Monitor:![Requesting location updates](img/B04321_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As with other aspects of coding for maps, the additions we made here are nicely
    straightforward. Although there is an Android version of the `LocationListener`,
    the Google one is easier to use, more powerful, and strongly recommended by Google
    themselves. We used the built-in icon here, but of course any image would have
    done. It is unlikely that we would use all the UI controls we set here and they
    are included more for demonstration purposes than practical use.
  prefs: []
  type: TYPE_NORMAL
- en: The way we set the intervals is of interest. The units are milliseconds and
    so here we have set the app to request a new location every 30 seconds. However,
    the use of `setFastestInterval()` allows us to take advantage of other apps that
    might be requesting a location and so we could have updates as frequently as 5
    seconds.
  prefs: []
  type: TYPE_NORMAL
- en: We set the accuracy to as high as possible, with the `PRIORITY_HIGH_ACCURACY`
    constant. This obviously can be a drain on the user's power. Many apps require
    location to just within a few hundred feet and in such cases, one would use `PRIORITY_BALANCED_POWER_ACCURACY`
    or, if city level is sufficient, there is `PRIORITY_LOW_POWER`. There is also
    `PRIORITY_NO_POWER`, which will attempt to produce the best possible accuracy
    with no additional power consumption.
  prefs: []
  type: TYPE_NORMAL
- en: We also set the map to satellite type. We could also have used others, such
    as `MAP_TYPE_TERRAIN`, `MAP_TYPE_HYBRID`, or `MAP_TYPE_NORMAL`, depending on the
    purpose of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Google provides a very simple way to zoom in on our location with the `MyLocationButton`.
    However, there may well be times when we want to zoom to another location, not
    zoom at all, or even zoom out. How simple this is to do is demonstrated in the
    next section, along with how to determine location from a click on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Moving around and animating a Google Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final section of this chapter requires very little in the way of coding.
    Google provides a specialized click listener for maps and a sort of callback method
    that we are very familiar with. Here, we will use this to zoom to any point on
    the map that is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MapsActivity` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the declaration, implement this interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next add the following line to the `setUpMap()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method called `onMapClick()` and complete it like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's all there is to it. You can now run the app, which will zoom in on any
    point that is clicked.![Moving around and animating a Google Map](img/B04321_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The use of the `GoogleMap.OnMapClickListener` is more or less self-explanatory
    and provides us with the location in the form of a `LatLng` object without us
    having to do any extra work. The zoom level is all that needs an explanation,
    which too is simple. There are 12 levels with 12 being street level and 1 showing
    the entire planet. Being able to obtain locations in this manner opens up the
    way to all number of useful and interesting functions we can include in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With mobile devices becoming ever more present, being able to include maps in
    our apps is essential. The Google Maps API makes this task remarkably simple and
    probably the only complicated part was obtaining the API Key and setting up the
    permissions in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Developing with maps is further simplified by being able to set mock locations
    for real and emulated devices and also including UI components that users of Android
    devices have become used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will delve into what is probably one of the most exciting
    aspects of Android 5: the ability to develop for wearables, TVs, and cars.'
  prefs: []
  type: TYPE_NORMAL
