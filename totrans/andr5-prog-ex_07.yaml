- en: Chapter 7. Maps, Locations, and Google Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。地图、位置和 Google 服务
- en: The Standard SDK APIs that we have used until now provide a powerful set of
    tools for developing all manner of apps. However, Google also provides a number
    of mobile services such as Gmail, Translate, and Maps. These, and a dozens of
    others, are available to us as developers, and Google provides APIs for us to
    interact with them and incorporate them into our own apps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至今使用的标准 SDK API 提供了一套强大的工具，用于开发各种应用程序。然而，Google 还提供了一系列移动服务，如 Gmail、翻译和地图。作为开发者，我们都可以使用这些服务，以及
    Google 提供的 API，以便与它们交互并将它们集成到我们的应用程序中。
- en: Tip
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A complete and up-to-date list of all Google Services APIs can be found at:
    [https://developers.google.com/apis-explorer/#p/](https://developers.google.com/apis-explorer/#p/).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Google 服务 API 的完整和最新列表可以在以下位置找到：[https://developers.google.com/apis-explorer/#p/](https://developers.google.com/apis-explorer/#p/)。
- en: Because apps connecting to Google Services use Google's data and servers, there
    is a simple authentication process required which is known as an API Key. In this
    chapter, we will see how to do this as we build a simple map-based app that displays
    a location of our choice. After this is done, we will use a `LocationListener`
    to track our app as the user moves around.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于连接到 Google 服务的应用程序使用 Google 的数据和服务器，因此需要一个简单的身份验证过程，这被称为 API 密钥。在本章中，我们将通过构建一个简单的基于地图的应用程序来展示如何进行此操作，该应用程序显示我们选择的位置。完成此操作后，我们将使用
    `LocationListener` 来跟踪用户移动时的应用程序。
- en: 'In this chapter, you will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将：
- en: Obtain an API Key to access Google Maps for Android
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 API 密钥以访问 Android 的 Google Maps
- en: Understand permissions and how to apply them
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解权限及其应用方法
- en: Access `LocationServices` with a `GoogleApiClient`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `GoogleApiClient` 访问 `LocationServices`
- en: Acquire a device's last known location
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取设备最后已知的位置
- en: Use a `LocationListener` to update the location
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `LocationListener` 更新位置
- en: Optimize location update intervals
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化位置更新间隔
- en: Add Google Maps UI features
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 Google Maps UI 功能
- en: Set mock locations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置模拟位置
- en: Acquire a location with a `MapClickListener`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `MapClickListener` 获取位置
- en: Building a location-aware app with Google Maps
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Maps 构建位置感知应用程序
- en: To get a very basic Google Map into one of our apps requires two distinct steps.
    First, we need to register our app with Google and acquire an API Key to uniquely
    identify our app; once we have a map up-and-running, we can locate our position
    using GPS and then zoom in to that, or any other, location. We begin with the
    first of these steps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中添加一个非常基本的 Google 地图，需要两个不同的步骤。首先，我们需要将我们的应用程序注册到 Google 并获取一个 API
    密钥以唯一标识我们的应用程序；一旦地图运行起来，我们可以使用 GPS 定位我们的位置，然后放大到该位置或任何其他位置。我们首先从这些步骤中的第一个开始。
- en: Acquiring an API Key
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 API 密钥
- en: 'There is nothing to stop us getting on with this right away, although you will
    need to first check that, when we were installing all the components of the SDK
    way back in [Chapter 1](ch01.html "Chapter 1. Setting Up the Development Environment"),
    *Setting Up the Development Environment*, we included the following packages:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何东西可以阻止我们立即开始，尽管您需要首先检查，当我们很久以前在 [第 1 章](ch01.html "第 1 章。设置开发环境") 中安装 SDK
    的所有组件时，*设置开发环境*，我们包括了以下包：
- en: '![Acquiring an API Key](img/B04321_07_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![获取 API 密钥](img/B04321_07_01.jpg)'
- en: 'The only other thing to note before we begin is that, if you intend to test
    this app using an emulator, then you will need to construct a new one, where the
    system image target is **Google APIs (Google Inc.)** – **google_apis [Google APIs]**,
    rather than **Android 5.x**. Third-party virtual devices may require their own
    configuration to run Play Services. With this done, we are more than ready to
    create our location-based app:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前需要注意的另一件事是，如果您打算使用模拟器测试此应用程序，那么您需要构建一个新的模拟器，其中系统镜像目标是 **Google APIs (Google
    Inc.)** – **google_apis [Google APIs]**，而不是 **Android 5.x**。第三方虚拟设备可能需要自己的配置才能运行
    Play Services。完成这些后，我们就准备好创建基于位置的应用程序了：
- en: Start a new Android Studio project.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个新的 Android Studio 项目。
- en: Select **Google Maps Activity**, where previously we have selected **Blank Activity**,
    on the appropriate screen.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在适当的屏幕上选择 **Google Maps Activity**，之前我们选择了 **Blank Activity**。
- en: Leave everything else as suggested by the wizard.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其他所有内容按照向导的建议进行设置。
- en: The editor should open with the `google_maps_api.xml` file; if not, open it
    from the `res/values` directory.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑器应打开 `google_maps_api.xml` 文件；如果没有，请从 `res/values` 目录中打开它。
- en: Examine the code. Google will have provided a link beginning with `https://console.developers.google.com/flows/`
    and ending in your package name, for example `com.example.kyle.distancefinder`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查代码。Google 将提供一个以 `https://console.developers.google.com/flows/` 开头并以您的包名结尾的链接，例如
    `com.example.kyle.distancefinder`。
- en: Follow this link and you will be taken to the Google Developers Console.![Acquiring
    an API Key](img/B04321_07_02.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此链接，您将被带到 Google 开发者控制台。[获取 API 密钥](img/B04321_07_02.jpg)
- en: Sign up, if needed.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有需要，请注册。
- en: You will be prompted to create a new project. Call this whatever you choose,
    as you will be able to use this again for other apps.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示创建一个新项目。您可以随意命名，因为您将能够再次使用它来创建其他应用。
- en: From the **Project Dashboard** sidebar under **APIs & auth**, select **APIs**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目仪表板** 下的 **APIs & auth** 侧边栏中，选择 **APIs**。
- en: Enable the **Google Maps Android API v2** API.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 **Google Maps Android API v2** API。
- en: Again, from the **Dashboard** under **APIs & auth**, select credentials and
    click on the **Create New Key** button.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，在 **仪表板** 下的 **APIs & auth** 中，选择凭证并点击 **创建新密钥** 按钮。
- en: On the resultant screen, copy the API Key and paste it into the `google_maps_api.xml`
    file, where it says `YOUR KEY HERE`, making sure there are no extra spaces at
    either end.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果屏幕上，复制 API 密钥并将其粘贴到 `google_maps_api.xml` 文件中，在 `YOUR KEY HERE` 处，确保两端没有多余的空格。
- en: Now test the app on a handset or Google APIs emulator. The result will resemble
    the following screenshot:![Acquiring an API Key](img/B04321_07_03.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在手机或 Google APIs 模拟器上测试应用。结果将类似于以下截图：[获取 API 密钥](img/B04321_07_03.jpg)
- en: Incorporating a basic map into our app is pleasantly simple. However, by using
    the Maps Activity wizard, a lot of essential work has been done for us. And it
    is vital to understand that before being able to include maps anywhere in our
    app that we choose.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中集成基本地图非常简单。然而，通过使用 Maps Activity 向导，我们已经为我们做了很多基本工作。而且，在能够在应用中选择的位置包含地图之前，理解这一点至关重要。
- en: 'Take a look at the `build.gradle` file and note how the dependencies have been
    modified for us:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查看一下 `build.gradle` 文件，注意依赖关系是如何为我们修改的：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When including maps in other projects, we will always need the `gms:play-services`
    libraries built in here. The `support:appcompat` library may be less obvious.
    It is used to make apps backward-compatible. It is not strictly necessary here
    and we will return to it when we cover how to reach the maximum number of users
    in the final chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当在其他项目中包含地图时，我们始终需要在此构建的 `gms:play-services` 库。`support:appcompat` 库可能不那么明显。它用于使应用向后兼容。在这里它不是必需的，我们将在最后一章介绍如何吸引最多用户时再回到它。
- en: 'Now open the project''s `Manifest` file. You will notice several differences
    from those of previous projects, the first being the following lines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开项目的 `Manifest` 文件。您会注意到与之前项目的一些不同，首先是以下几行：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Anyone who has downloaded an Android app will be familiar with the way the user
    has to grant permissions to use various device functions, such as Internet access
    before installation. These tags, in the manifest, are how this is done, and you
    will need to apply them any time you include a feature that requires user permission.
    Thankfully, they all have very self-explanatory references and a full list can
    be found at [developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何下载过 Android 应用的用户都会熟悉用户在安装前必须授予使用各种设备功能（如网络访问）权限的方式。这些标签在清单中就是这样实现的，每次您包含需要用户权限的功能时都需要应用它们。幸运的是，它们都有非常直观的参考，完整列表可以在
    [developer.android.com/reference/android/Manifest.permission.html](http://developer.android.com/reference/android/Manifest.permission.html)
    找到。
- en: 'The other elements in the manifest that will be needed in future projects are
    the two meta-data children of the application element shown below. The first automatically
    keeps our app running the latest version of play services and the second is where
    the API Key we acquired earlier is applied:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的项目中还需要在清单中包含的其他元素是以下应用程序元素的两个元数据子元素。第一个会自动使我们的应用运行最新的 play 服务版本，第二个是之前获取的
    API 密钥应用的地方：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Overall, setting up API keys is very straightforward. We only need to register
    once and individual projects can be reused for apps requiring similar functions;
    speaking of functions, it is about time we added some functionality to our app.
    The most widely used, and arguably most useful Google Map APIs are the Location
    Services, which, among other things, allow the user to locate their device's geographical
    location using GPS, WiFi, and network signal strength.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，设置API密钥非常简单。我们只需要注册一次，个人项目就可以为需要类似功能的app重复使用；说到功能，我们可能该给我们的app添加一些功能了。最广泛使用，并且可以说是最有用的Google
    Map API是位置服务，它允许用户使用GPS、WiFi和网络信号强度来定位他们的设备地理位置。
- en: Acquiring the last known location
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取最后已知位置
- en: The first step in incorporating location-aware technology into our apps is to
    identify the user's last known location. This, like much location-based work,
    is done with the help of a GoogleApiClient, and an interface that is a main entry
    point for these services.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将位置感知技术集成到我们的app中的第一步是确定用户的最后已知位置。这就像许多基于位置的工作一样，需要借助GoogleApiClient和一个作为这些服务主要入口点的接口来完成。
- en: 'Before adding the Java code to do this, we will edit the layout itself, so
    that we can see what is going on. Follow the next few steps to acquire our device''s
    last known location:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加Java代码之前，我们将编辑布局本身，这样我们就可以看到发生了什么。按照以下步骤获取我们设备的最后已知位置：
- en: Open the **Distance Finder** project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**距离查找器**项目。
- en: Open the `activity_maps.xml` layout file.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_maps.xml`布局文件。
- en: 'Edit the content so:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑内容如下：
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Open the `MapsActivity.java` file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MapsActivity.java`文件。
- en: 'Along with the `GoogleMap` that has been declared for us, include the following
    fields:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了为我们声明的`GoogleMap`之外，还包括以下字段：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`onCreate()`方法中：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, change the class declaration itself, so that it implements the following
    interfaces:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，更改类声明本身，使其实现以下接口：
- en: '[PRE6]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will generate an error. Use the quick fix to implement the following methods:![Acquiring
    the last known location](img/B04321_07_04.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个错误。使用快速修复来实现以下方法：![获取最后已知位置](img/B04321_07_04.jpg)
- en: 'Complete the `onConnected()` callback like so, to display our location:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式完成`onConnected()`回调，以显示我们的位置：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To report connection status to the LogCat, edit the other two new methods like
    this:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将连接状态报告给LogCat，编辑另外两个新方法如下：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Edit the `onResume()` method like this:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式编辑`onResume()`方法：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a new `onPause()` method and complete it like so:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`onPause()`方法并按照以下方式完成它：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, rewrite the `setUpMap()` like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式重写`setUpMap()`：
- en: '[PRE11]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the project on a handset or AVD. Unless you are running the app on an emulator
    that you have just created, your location will appear in the text view with the
    following format:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在手机或AVD上运行项目。除非你在你刚刚创建的模拟器上运行app，否则你的位置将以以下格式显示在文本视图中：
- en: '**Location[fused 51.507350,-0.127757 acc=4 et=+5m16s558ms alt=19.809023 vel=0.0].**'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**位置[fused 51.507350,-0.127757 acc=4 et=+5m16s558ms alt=19.809023 vel=0.0]。**'
- en: At the beginning of this exercise, we changed the layout a little to include
    a `TextView`. However, we still set the fragment's class as a `SupportMapFragment`,
    and hopefully a little more clearly. The `SupportMapFragment` is the obvious choice
    for any map container we might want in an app. It's simple and handles most map
    processes almost automatically. With this container, almost everything else we
    need can be accomplished with a `GoogleApiClient`. As can be seen from the code,
    it allows us to put in place listeners and callbacks to manage the map and connectivity
    activity. Once the API client has connected us, finding our device's last known
    location requires nothing more than a call to the single function, `getLastLocation()`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习的开始，我们稍微改变了布局以包括一个`TextView`。然而，我们仍然将片段的类设置为`SupportMapFragment`，并希望这能更加清晰。`SupportMapFragment`是我们可能在app中想要的所有地图容器的明显选择。它简单且几乎自动处理大多数地图过程。使用这个容器，我们几乎可以用`GoogleApiClient`完成所有其他需要的事情。从代码中可以看出，它允许我们设置监听器和回调来管理地图和连接活动。一旦API客户端连接了我们，找到我们设备的最后已知位置只需要调用单个函数`getLastLocation()`。
- en: It is vitally important to ensure that we disconnect from any services we are
    using, whenever our user may no longer need them. Failure to do this results in
    apps that use up the device's power and data unnecessarily. By using the `onPause()`
    callback to disconnect the client whenever our Activity loses focus and then `onResume()`
    to re-connect it, we can ensure that our map stays connected when the Activity
    is visible and also that we won't be wasting our user's battery and data when
    it is not.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在我们用户可能不再需要我们使用的服务时，我们断开与任何服务的连接至关重要。未能这样做会导致应用程序无谓地消耗设备的电力和数据。通过使用 `onPause()`
    回调在 Activity 失去焦点时断开客户端，然后使用 `onResume()` 重新连接，我们可以确保当 Activity 可见时我们的地图保持连接，同时当不可见时我们不会浪费用户的电池和数据。
- en: The `getLastLocation()` method is very useful; it doesn't require a network
    connection, or GPS, and it's instantly available. However, there are many situations
    where we need to update our app's location as the user moves around. This is done
    with `LocationListen3er` callbacks and the `LocationRequest` object, which is
    laid out in the following section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`getLastLocation()` 方法非常有用；它不需要网络连接或GPS，并且可以立即获取。然而，在许多情况下，我们需要在用户移动时更新我们应用程序的位置。这是通过
    `LocationListen3er` 回调和 `LocationRequest` 对象来完成的，这些内容将在下一节中展开。'
- en: Requesting location updates
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求位置更新
- en: The `LocationRequest` object is highly configurable and allows us to control
    the frequency of requests and the accuracy of the information received. This means
    we can design apps that do not use more resources than required, while still allowing
    us highly accurate and frequent location data when the purpose of the app demands
    it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`LocationRequest` 对象高度可配置，允许我们控制请求的频率和接收到的信息的准确性。这意味着我们可以设计出不需要更多资源的应用程序，同时当应用程序的目的需要时，仍然可以提供高度准确和频繁的位置数据。'
- en: 'In the next stage, we will implement a `LocationListener` to track our app''s
    location. We will also add one or two features to demonstrate some of the functions
    the maps APIs provide us with. There are only a few lines of code to this section,
    and here they are:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一阶段，我们将实现一个 `LocationListener` 来跟踪我们应用程序的位置。我们还将添加一个或两个功能来展示地图API为我们提供的某些功能。这一部分只有几行代码，如下所示：
- en: 'Include a `LocationListener` in our `FragmentActivity` class declaration, like
    so:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `FragmentActivity` 类声明中包含一个 `LocationListener`，如下所示：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will generate an error. Use the quick fix to import the Google version
    of the `LocationListener`, like so:![Requesting location updates](img/B04321_07_05.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将生成一个错误。使用快速修复导入 Google 版本的 `LocationListener`，如下所示：![请求位置更新](img/B04321_07_05.jpg)
- en: 'Create the following class field:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下类字段：
- en: '[PRE13]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the `onCreate()` method, create the following `LocationRequest`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `onCreate()` 方法中，创建以下 `LocationRequest`：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next complete the `onLocationChanged()` method like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来完成 `onLocationChanged()` 方法如下：
- en: '[PRE15]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now expand the `setUpMap()` method like so:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在扩展 `setUpMap()` 方法如下：
- en: '[PRE16]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run the project on your handset or emulator and either go for a short walk or
    set a mock-location using the Android Device Monitor:![Requesting location updates](img/B04321_07_06.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的手机或模拟器上运行项目，进行短距离散步或使用 Android 设备监控器设置模拟位置：![请求位置更新](img/B04321_07_06.jpg)
- en: As with other aspects of coding for maps, the additions we made here are nicely
    straightforward. Although there is an Android version of the `LocationListener`,
    the Google one is easier to use, more powerful, and strongly recommended by Google
    themselves. We used the built-in icon here, but of course any image would have
    done. It is unlikely that we would use all the UI controls we set here and they
    are included more for demonstration purposes than practical use.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他地图编码方面一样，我们在这里所做的添加非常直接。尽管有 Android 版本的 `LocationListener`，但 Google 的版本更容易使用，功能更强大，并且被
    Google 本身强烈推荐。我们在这里使用了内置图标，但当然任何图像都可以。我们不太可能使用我们在这里设置的所有的 UI 控件，它们更多地是为了演示目的而不是实际使用。
- en: The way we set the intervals is of interest. The units are milliseconds and
    so here we have set the app to request a new location every 30 seconds. However,
    the use of `setFastestInterval()` allows us to take advantage of other apps that
    might be requesting a location and so we could have updates as frequently as 5
    seconds.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置间隔的方式很有趣。单位是毫秒，因此我们已将应用程序设置为每30秒请求一次新的位置。然而，使用 `setFastestInterval()` 允许我们利用可能请求位置的其他应用程序，因此我们可以以每5秒的频率更新。
- en: We set the accuracy to as high as possible, with the `PRIORITY_HIGH_ACCURACY`
    constant. This obviously can be a drain on the user's power. Many apps require
    location to just within a few hundred feet and in such cases, one would use `PRIORITY_BALANCED_POWER_ACCURACY`
    or, if city level is sufficient, there is `PRIORITY_LOW_POWER`. There is also
    `PRIORITY_NO_POWER`, which will attempt to produce the best possible accuracy
    with no additional power consumption.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将精度设置为尽可能高，使用 `PRIORITY_HIGH_ACCURACY` 常量。这显然可能会消耗用户的电量。许多应用只需要精确到几百英尺，在这种情况下，人们会使用
    `PRIORITY_BALANCED_POWER_ACCURACY`，或者如果城市级别足够，可以使用 `PRIORITY_LOW_POWER`。还有 `PRIORITY_NO_POWER`，它将尝试在不消耗额外电量的情况下提供最佳精度。
- en: We also set the map to satellite type. We could also have used others, such
    as `MAP_TYPE_TERRAIN`, `MAP_TYPE_HYBRID`, or `MAP_TYPE_NORMAL`, depending on the
    purpose of our app.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将地图设置为卫星类型。我们也可以使用其他类型，例如 `MAP_TYPE_TERRAIN`、`MAP_TYPE_HYBRID` 或 `MAP_TYPE_NORMAL`，具体取决于我们应用的目的。
- en: Google provides a very simple way to zoom in on our location with the `MyLocationButton`.
    However, there may well be times when we want to zoom to another location, not
    zoom at all, or even zoom out. How simple this is to do is demonstrated in the
    next section, along with how to determine location from a click on the map.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了一种非常简单的方法，使用 `MyLocationButton` 来放大我们的位置。然而，可能会有时候我们想要放大到另一个位置，或者根本不放大，甚至缩小。接下来的部分将展示如何做到这一点，以及如何从地图上的点击确定位置。
- en: Moving around and animating a Google Map
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动和动画 Google 地图
- en: The final section of this chapter requires very little in the way of coding.
    Google provides a specialized click listener for maps and a sort of callback method
    that we are very familiar with. Here, we will use this to zoom to any point on
    the map that is clicked.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分在编码方面要求很少。Google 为地图提供了一个专门的点击监听器以及我们非常熟悉的回调方法。在这里，我们将使用它来放大到地图上点击的任何点。
- en: Open the `MapsActivity` file.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MapsActivity` 文件。
- en: 'In the declaration, implement this interface:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在声明中，实现此接口：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next add the following line to the `setUpMap()` method:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下行添加到 `setUpMap()` 方法中：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a method called `onMapClick()` and complete it like so:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `onMapClick()` 的方法，并按照以下方式完成：
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's all there is to it. You can now run the app, which will zoom in on any
    point that is clicked.![Moving around and animating a Google Map](img/B04321_07_07.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是全部内容。现在你可以运行应用了，它会在点击的任何点上放大。![移动和动画 Google 地图](img/B04321_07_07.jpg)
- en: The use of the `GoogleMap.OnMapClickListener` is more or less self-explanatory
    and provides us with the location in the form of a `LatLng` object without us
    having to do any extra work. The zoom level is all that needs an explanation,
    which too is simple. There are 12 levels with 12 being street level and 1 showing
    the entire planet. Being able to obtain locations in this manner opens up the
    way to all number of useful and interesting functions we can include in our apps.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `GoogleMap.OnMapClickListener` 大概是显而易见的，并且它以 `LatLng` 对象的形式提供位置，而无需我们做任何额外的工作。缩放级别是唯一需要解释的部分，这也非常简单。有
    12 个级别，其中 12 表示街道级别，1 显示整个地球。以这种方式获取位置的方式为我们打开了在应用中包含各种有用和有趣功能的大门。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With mobile devices becoming ever more present, being able to include maps in
    our apps is essential. The Google Maps API makes this task remarkably simple and
    probably the only complicated part was obtaining the API Key and setting up the
    permissions in the manifest file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 随着移动设备的日益普及，能够在我们的应用中包含地图变得至关重要。Google Maps API 使得这项任务变得非常简单，可能唯一复杂的部分就是获取 API
    密钥和在清单文件中设置权限。
- en: Developing with maps is further simplified by being able to set mock locations
    for real and emulated devices and also including UI components that users of Android
    devices have become used to.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过能够为真实和模拟设备设置模拟位置，以及包括用户已经习惯的 UI 组件，使用地图进行开发变得更加简单。
- en: 'In the next chapter, we will delve into what is probably one of the most exciting
    aspects of Android 5: the ability to develop for wearables, TVs, and cars.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 Android 5 中可能最令人兴奋的方面之一：为可穿戴设备、电视和汽车开发的能力。
