["```kt\nvar person=Person()\n```", "```kt\nval person=Person()\n```", "```kt\nclass Student{\n int roll_number;\n String name;\n Student(int roll_number,String name){\n     this.roll_number =roll_number;\n     this.name = name;\n }\n}\n```", "```kt\nclass Student(var roll_number:Int, var name:String)\n```", "```kt\nvar student_A=Student(1,\"Rashi Karanpuria\")\n```", "```kt\nprintln(\"Roll number: ${student_A.roll_number} Name: ${student_A.name}\")\n```", "```kt\n Roll number: 1 Name: Rashi Karanpuria\n```", "```kt\nclass Student constructor(var roll_number:Int, var name:String=\"Sheldon\")\n```", "```kt\nvar student_sheldon= Student(25)   // Object with name Sheldon and age 25\n\nvar student_amy=Student(25, \"Amy\")     // Object with name Amy and age 25\n```", "```kt\nclass Person(val name: String) {\n     constructor(name: String, lastName: String) : this(name) {\n         // Do something maybe\n     }\n }\n```", "```kt\nclass Student(var roll_number:Int,var name: String) {\n init {\n         logger.info(\"Student initialized\")\n     }\n }\n```", "```kt\nclass Student @Inject constructor(compositeDisposable: CompositeDisposable) { ... }\n```", "```kt\nclass Student constructor(var roll_number:Int, var name:String):Person(name)\n```", "```kt\nclass Student: Person {\n constructor(name: String) : super(name)\nconstructor(name: String, roll_number: Inte) :super(name)\n }\n```", "```kt\nString a = Integer.toString(10)\n```", "```kt\nfun main(args: Array<String>) {\n    var a = 1\n    var b: Float = a.toFloat()\n    var c = a.toLong()\n    println(\"$a is Int while $b is Float and $c is Long\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a = 1000000000000000000L\n    var b: Float = a.toFloat()\n    var c = a.toInt()\n    println(\"$a is Long while $b is Float and $c is Integer\")\n}\n```", "```kt\n1000000000000000000 is Long while 9.9999998E17 is Float and -1486618624 is Integer\n```", "```kt\nfun main(args: Array<String>) {\n    var a = 15623\n    var b: Byte = a.toByte()\n    var c = a.toString()\n    println(\"$a is Int while $b is Byte and $c is String\")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a : Any = 1\n    var b : Any = \"1\"\n    if (a is String) {\n        println(\"a = $a is String\")\n    }\n    else {\n        println(\"a = $a is not String\")\n    }\n    if (b is String) {\n        println(\"b = $b is String\")\n    }\n    else {\n        println(\"b = $b is not String\")\n    }\n}\n\n```", "```kt\nfun main(args: Array<String>) {\n    var b : Any = 1\n    if (b !is String) {\n        println(\"$b is not String\")\n    }\n    else {\n        println(\"$b is String\")\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n   var a : Any = 1\n   var b = a as String\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a : Any = \"1\"\n    var b = a as String\n    println(b.length)\n}\n```", "```kt\nabstract class Mammal {\n    abstract fun move(direction: String)\n}\n```", "```kt\nclass Dog : Mammal() {\n    override fun move(direction: String) {\n        println(direction)\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var x = Dog()\n    x.move(\"North\")\n    println(x.show(123))\n}\nclass Dog : Mammal() {\n    override fun move(direction: String) {\n        println(direction)\n    }\n}\nabstract class Mammal {\n    fun show(y: Int): String {\n        return y.toString()\n    }\n    abstract fun move(direction: String)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var x = Dog()\n    x.move(\"North\")\n    println(x.show(123))\n}\nclass Dog : Mammal() {\n    init {\n        println (\"Hey from Dog\")\n    }\n    override fun move(direction: String) {\n        println(direction)\n    }\n}\nabstract class Mammal {\n    init {\n        println (\"Hey from Mammal\")\n    }\n    fun show(y: Int): String {\n        return y.toString()\n    }\n    abstract fun move(direction: String)\n}\n```", "```kt\nHey from Mammal\nHey from Dog\nNorth\n123\n```", "```kt\nclass Student constructor(var roll_number:Int, var full_name:String)\n```", "```kt\nfun main(args: Array<String>) {\n    var student=Student(2013001,\"Aanand Shekhar Roy\")\n    for (property in Student::class.memberProperties) {\n        println(\"${property.name} = ${property.get(student)}\")\n    }\n}\n```", "```kt\nfull_name = Aanand Shekhar Roy\nroll_number = 2013001\n```", "```kt\nopen class Person{\n     val isHuman:Boolean=true\n}\n```", "```kt\nfull_name = Aanand Shekhar Roy\nroll_number = 2013001\nisHuman = true\n```", "```kt\nfor (property in Student::class.declaredMemberProperties) {\n    println(\"${property.name} = ${property.get(student)}\")\n}\n```", "```kt\nfull_name = Aanand Shekhar Roy\nroll_number = 2013001\n```", "```kt\nvar x.valueIsMaxedOut: Boolean\ninline get() = x.value == CONST_MAX\n```", "```kt\ninline var x.valueIsMaxedOut: Boolean\nget() = x.value == CONST_MAX\nset(value) {\n    // set field here\n    println(“Value set!”)\n}\n```", "```kt\nvar x.valueIsMaxedOut: Boolean = true\nget() = x.value == CONST_MAX\nset(value) {\n    // set field here\n    println(“Value set!”)\n}\n```", "```kt\nfun main(args: Array<String>) {\n    var a1 = outCl()\n    a1.printAB()\n    outCl.inCl().printB()\n}\nclass outCl {\nvar a = 6\n    fun printAB () {\n    var b_ = inCl().b\n    println (\"a = $a and b = $b_ from inside outCl\")\n}\n\nclass inCl {\n    var b = \"9\"\n        fun printB() {\n            println (\"b = $b from inside inCl\")\n        }\n    }\n}\n\n```", "```kt\na = 6 and b = 9 from inside outCl\nb = 9 from inside inCl\n```", "```kt\nfun main(args: Array<String>) {\n    var a = outCl()\n    a.printAB()\n    a.inCl().printAB()\n}\nclass outCl {\n    var a = 6\n    fun printAB () {\n        var b_ = inCl().b\n        println (\"a = $a and b = $b_ from inside outCl\")\n    }\n    inner class inCl {\n        var b = \"9\"\n        fun printAB() {\n            println (\"a = $a and b = $b from inside inCl\")\n        }\n    }\n}\n```", "```kt\na = 6 and b = 9 from inside outCl\na = 6 and b = 9 from inside inCl\n```", "```kt\nvar outerClassObject = outerClass()\nouterClassObject.innerClass().memberVar\n```", "```kt\nval customTextTemplateListener = object:ValueEventListener{\n    override fun onCancelled(p0: DatabaseError?) {\n    }\n    override fun onDataChange(dataSnapshot: DataSnapshot?) {\n    }\n}\n```", "```kt\nval somethingKClass: KClass<Something> = Something::class\nval a: Class<Something> = somethingKClass.java\nval b: Class<Something> = Something::class.java\n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n     val button by lazy { findViewById<Button>(R.id.submit_button) }                                              setContentView(R.layout.activity_main)\n     button.text=\"Submit\"\n}\n```", "```kt\nCaused by: java.lang.NullPointerException: Attempt to invoke virtual method 'void android.widget.Button.setText(java.lang.CharSequence)' on a null object reference\n```", "```kt\nfun main(args: Array<String>) {\n    val paris=Travel()\n     paris.placeName=\"Paris\"\n     paris.placeName=\"Italy\"\n}\nclass Travel {\n     var placeName:String by Delegates.observable(\"<>\"){\n         property, oldValue, newValue ->\n         println(\"oldValue = $oldValue, newValue = $newValue\")\n    }\n}\n```", "```kt\noldValue = <>, newValue = Paris\noldValue = Paris, newValue = Italy\n```", "```kt\nfun main(args: Array<String>) {\n    val paris=Travel()\n    paris.placeName=\"Paris\"\n    paris.placeName=\"Italy\"\n    println(paris.placeName)\n}\nclass Travel {\n    var placeName:String by Delegates.vetoable(\"<>\"){\n        property, oldValue, newValue ->\n            if(!newValue.equals(\"Paris\")){\n                return@vetoable false\n            }\n            true\n    }\n}\n```", "```kt\nParis\n```", "```kt\nfun main(args: Array<String>) {\n    val paris=Travel(mapOf(\n        \"placeName\" to \"Paris\"\n    ))\n    println(paris.placeName)\n}\nclass Travel(val map:Map<String,Any?>) {\n    val placeName: String by map\n}\n```", "```kt\nParis\n```", "```kt\nfun main(args: Array<String>) {\n    val paris=Travel(mutableMapOf(\n        \"placeName\" to \"Paris\"\n    ))\n    println(paris.placeName)\n}\nclass Travel(val map:MutableMap<String,Any?>) {\n    var placeName: String by map\n}\n```", "```kt\nenum class Direction {\n    NORTH,SOUTH,EAST,WEST\n}\nfun main(args: Array<String>) {\n    var north_direction=Direction.NORTH\n    if(north_direction==Direction.NORTH){\n        println(\"Going North\")\n    }else{\n        println(\"No idea where you're going!\")\n    }\n}\n```", "```kt\nenum class Direction(var value:Int) {\n    NORTH(1),SOUTH(2),EAST(3),WEST(4)\n}\nfun main(args: Array<String>) {\n    var north_direction=1\n    if(north_direction==Direction.NORTH.value){\n        println(\"Going North\")\n    }else{\n        println(\"No idea where you're going!\")\n    }\n}\n\n//Output: Going North\n```"]