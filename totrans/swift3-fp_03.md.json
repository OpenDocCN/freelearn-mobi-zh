["```swift\nstruct ourStruct {\n    var data: Int = 3\n}\n\nvar valueA = ourStruct()\nvar valueB = valueA // valueA is copied to valueB\nvalueA.data = 5 // Changes valueA, not valueB\nprint(\"\\(valueA.data), \\(valueB.data)\") // prints \"5, 3\"\n\n```", "```swift\nclass ourClass {\n    var data: Int = 3\n}\nvar referenceA = ourClass()\nvar referenceB = referenceA // referenceA is copied to referenceB\nreferenceA.data = 5 // changes the instance referred to by\n  referenceA and referenceB\nprint(\"\\(referenceA.data), \\(referenceB.data)\") // prints \"5, 5\"\n\n```", "```swift\nclass User {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n}\n\nlet julie = User(name: \"Julie\")\nlet steve = User(name: \"Steve\")\n\nstruct Student {\n    var user: User\n}\n\nlet student = Student(user: julie)\nstudent.user = steve // compiler error - cannot assign to\n  property: 'student' is a 'let' constant\n```", "```swift\nsteve.name = \"Steve Jr.\" \nsteve.name // prints \"Steve Jr.\" \n\n```", "```swift\nclass User {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n}\nlet julie = User(name: \"Julie\")\n\nstruct Student {\n    var user: User\n}\n\nlet student = Student(user:julie)\nstudent.user.name // prints \"Julie\"\nlet anotherStudent = student\njulie.name = \"Julie Jr.\"\nanotherStudent.user.name // prints \"Julie Jr.\"\n\n```", "```swift\nlet julie = User(name: \"Julie\")\nlet steve = User(name: \"Steve\")\nlet alain = User(name: \"Alain\")\nlet users = [alain, julie, steve]\n\n```", "```swift\nlet copyOfUsers = users\nusers[0].name = \"Jean-Marc\"\n\nprint(users[0].name) // prints \"Jean-Marc\"\nprint(copyOfUsers[0].name) // prints \"Jean-Marc\"\n\n```", "```swift\nclass Manager: NSObject, NSCopying {\n    var firstName: String\n    var lastName: String\n    var age: Int\n\n    init(firstName: String, lastName: String, age: Int) {\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age\n    }\n\n    func copy(with: NSZone? = nil) -> AnyObject {\n        let copy = Manager(firstName: firstName, lastName: lastName,\n          age: age)\n        return copy\n    }\n}\n\n```", "```swift\nlet john = Manager(firstName: \"John\", lastName: \"Doe\", age: 35)\nlet jane = john.copy() as! Manager\n\njane.firstName = \"Jane\"\njane.lastName = \"Doe\"\njane.age = 40\n\nprint(\"\\(john.firstName) \\(john.lastName) is \\(john.age)\")\nprint(\"\\(jane.firstName) \\(jane.lastName) is \\(jane.age)\")\n\n```", "```swift\n\"John Doe is 35\"\n\"Jane Doe is 40\"\n\n```", "```swift\nlet firstNumber = 1\nlet secondNumber = 1\n\nif firstNumber == secondNumber {\n    print(\"Two numbers are equal\") // prints \"Two numbers are equal\\n\"\n}\n\n```", "```swift\nlet julie = User(name: \"Julie\")\nlet steve = User(name: \"Steve\")\n\nif julie === steve {\n    print(\"Identical\")\n} else {\n    print(\"Not identical\")\n}\n\n```", "```swift\nstruct Point {\n    let x: Double\n    let y: Double\n}\n\nlet firstPoint = Point(x: 3.0, y: 5.5)\nlet secondPoint = Point(x: 7.0, y: 9.5)\n\nlet isEqual = (firstPoint == secondPoint)\n\n```", "```swift\nstruct Point: Equatable {\n    let x: Double\n    let y: Double\n}\n\nfunc ==(lhs: Point, rhs:Point) -> Bool {\n    return (lhs.x == rhs.x) && (lhs.y == lhs.y)\n}\n\nlet firstPoint = Point(x: 3.0, y: 5.5)\nlet secondPoint = Point(x: 7.0, y: 9.5)\n\nlet isEqual = (firstPoint == secondPoint)\n\n```", "```swift\nstruct Point: Equatable, Comparable {\n    let x: Double\n    let y: Double\n}\n\nfunc ==(lhs: Point, rhs:Point) -> Bool {\n    return (lhs.x == rhs.x) && (lhs.y == lhs.y)\n}\n\nfunc <(lhs: Point, rhs: Point) -> Bool {\n    return (lhs.x < rhs.x) && (lhs.y < rhs.y)\n}\n\nlet firstPoint = Point(x: 3.0, y: 5.5)\nlet secondPoint = Point(x: 7.0, y: 9.5)\n\nlet isEqual = (firstPoint == secondPoint)\nlet isLess = (firstPoint < secondPoint)\n\n```", "```swift\nlet aConstant = \"String\"\n\nif aConstant is String {\n    print(\"aConstant is a String\")\n} else {\n    print(\"aConstant is not a String\")\n}\n\n```", "```swift\nlet anyString: Any = \"string\"\n\nif anyString is String {\n    print(\"anyString is a String\")\n} else {\n    print(\"anyString is not a String\")\n}\n\n```"]