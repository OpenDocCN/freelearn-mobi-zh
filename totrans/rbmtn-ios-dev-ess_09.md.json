["```swift\n    motion create GameApp\n\n    ```", "```swift\n    $ sudo gem install cocoapods\n    $ pod setup\n    $ sudo gem install motion-cocoapods\n\n    ```", "```swift\n    $:.unshift(\"/Library/RubyMotion/lib\")\n    require 'motion/project'\n    require 'motion-cocoapods'\n\n    Motion::Project::App.setup do |app|\n      # Use 'rake config' to see complete project settings.\n      app.name = 'GameApp'\n      app.pods do\n        pod 'cocos2d'\n      end\n    end\n    ```", "```swift\n    class AppDelegate\n      def application(application, didFinishLaunchingWithOptions:launchOptions)\n\n        # Create a window to present our director\n        @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\n\n        # Create CCGLView view that will be used by the director to present the game scenes\n\n        game_view = CCGLView.viewWithFrame(@window.bounds, pixelFormat: KEAGLColorFormatRGBA8, depthFormat: 0, preserveBackbuffer: false, sharegroup: nil, multiSampling: false, numberOfSamples: 0)\n\n        # Create Director shared instance \n        @director = CCDirector.sharedDirector\n        @director.wantsFullScreenLayout = true\n        @director.animationInterval = 1.0/60\n\n        # Assign the view used for the director to present the game scenes\n        @director.view = game_view\n\n        # Create a navigation controller to store our game director and assign the navigation controller to the window\n        @navigation_controller = UINavigationController.alloc.initWithRootViewController(@director)\n        @navigation_controller.navigationBarHidden = true\n        @window.rootViewController = @navigation_controller\n        @window.makeKeyAndVisible\n\n        # Configuration for our game images, this is very helpful when you want to use compressed images or those with a different\n        # pixel format\n        CCTexture2D.defaultAlphaPixelFormat = KCCTexture2DPixelFormat_RGBA8888\n        CCTexture2D.PVRImagesHavePremultipliedAlpha(true)\n\n        # Configuration for the names of the images that will be used on the game\n        file_utils = CCFileUtils.sharedFileUtils\n        file_utils.enableFallbackSuffixes = false\n        true\n      end\n\n    end\n    ```", "```swift\n    @window = UIWindow.alloc.initWithFrame(UIScreen.mainScreen.bounds)\ngame_view = CCGLView.viewWithFrame(@window.bounds,\n                                 pixelFormat: KEAGLColorFormatRGBA8,\n                                 depthFormat: 0,\n                                 preserveBackbuffer: false,\n                                 sharegroup: nil,\n                                 multiSampling: false,\n                                 numberOfSamples: 0)\n```", "```swift\n@director = CCDirector.sharedDirector\n@director.wantsFullScreenLayout = true\n@director.animationInterval = 1.0/60\n@director.view = game_view\n```", "```swift\n    class GameScene < CCScene\n     def init\n       if super\n       end\n       self\n     end\n\n    end\n    ```", "```swift\n    @director.pushScene(GameScene.node)\n    ```", "```swift\n    class BackgroundLayer < CCLayer\n      def init\n        if super\n          label = CCLabelTTF.labelWithString('We are creating a game',\n                                             fontName:'Marker Felt',\n                                             fontSize:24)\n\n          window_size = CCDirector.sharedDirector.winSize\n          label.position = CGPointMake(window_size.width / 2, window_size.height / 2)\n          self.addChild(label)\n        end\n        self\n      end\n    end\n    ```", "```swift\n    CCDirector.sharedDirector.winSize\n\n    ```", "```swift\n    class GameScene < CCScene\n\n     def init\n       if super\n     background_layer = BackgroundLayer.node\n     # Add it to the scene\n     self.addChild(background_layer)\n       end\n       self\n     end\n\n    end\n    ```", "```swift\n    class BackgroundLayer < CCLayer\n\n      def init\n        if super\n\n     background_sprite = CCSprite.spriteWithFile('sky.png')\n     # We need to get the screen size for positioning the sprite\n     screen_size = CCDirector.sharedDirector.winSize\n\n     # We need to get the screen size for positioning the sprite\n     background_sprite.position = CGPointMake(screen_size.width / 2, screen_size.height / 2)\n\n     # Setting the position for image\n     self.addChild(background_sprite)\n        end\n\n        self\n      end\n\n    end\n    ```", "```swift\n    class GameLayer < CCLayer\n\n      def init\n\n        if super\n          # We need to get the screen size for positioning the sprite\n          screen_size = CCDirector.sharedDirector.winSize\n         @grass = CCSprite.spriteWithFile('Grass.png')\n        @grass.position = CGPointMake(screen_size.width / 2, screen_size.height / 12)\n\n          # Add the sprite to the Layer\n          self.addChild(@grass)     \n            end\n            self\n          end\n        end\n    ```", "```swift\n         game_layer = GameLayer.node\n          self.addChild(game_layer)\n    ```", "```swift\n    class GameLayer < CCLayer\n\n      def init\n        if super\n          # We need to get the screen size for positioning the sprite\n          screen_size = CCDirector.sharedDirector.winSize\n         @grass = CCSprite.spriteWithFile('Grass.png')\n\n        @grass.position = CGPointMake(screen_size.width / 2, screen_size.height / 12)\n          # Add the sprite to the Layer\n          self.addChild(@grass)  \n\n           @mole = []\n\n     # Create a new sprite instance for drawing our mole\n     @mole1 = CCSprite.spriteWithFile('mole.png')\n\n     @mole1.position = CGPointMake(screen_size.width / 2, 0)\n     # Add the sprite to the Layer\n     self.addChild(@mole1, z: 0)\n     # We need to get the screen size for positioning the sprite\n     screen_size = CCDirector.sharedDirector.winSize\n\n     @mole2 = CCSprite.spriteWithFile('mole.png')\n     @mole2.position = CGPointMake(screen_size.width / 4, 0)\n     self.addChild(@mole2)\n\n     @mole3= CCSprite.spriteWithFile('mole.png')\n     @mole3.position = CGPointMake(3* screen_size.width / 4, 0)\n     self.addChild(@mole3)\n\n     @moles = [@mole1, @mole2, @mole3]\n\n            end\n            self\n          end\n        end\n    ```", "```swift\n          def popMole(mole)\n            moveUp = CCMoveBy.actionWithDuration(0.2, position: CGPointMake(0, mole.contentSize.height));\n            easeMoveUp = CCEaseInOut.actionWithAction(moveUp, rate: 3.0); \n            easeMoveDown = easeMoveUp.reverse \n            delay = CCDelayTime.actionWithDuration(0.5) \n            mole.runAction(CCSequence.actionsWithArray([easeMoveUp, delay, easeMoveDown])); \n          end\n    ```", "```swift\n    def popAnyMole\n            random = Random.new\n            @moles.each do |mole|\n\n              if (random.rand(1..100) % 3 == 0)\n                if (@mole1.numberOfRunningActions == 0 and @mole2.numberOfRunningActions==0 and  @mole3.numberOfRunningActions==0 )\n                  popMole(mole)\n                end\n              end\n            end\n          end\n    ```", "```swift\n    schedule :popAnyMole\n    ```", "```swift\n    self.addChild(@grass, z:999)\n    ```", "```swift\n    self.isTouchEnabled = true\n    ```", "```swift\n         def ccTouchesBegan(touches, withEvent:event)\n            touch = touches.anyObject\n\n            touch_location = self.convertTouchToNodeSpace(touch)\n            @moles.each do |mole|\n              if CGRectContainsPoint(mole.boundingBox, touch_location) and !CGRectContainsPoint(@grass.boundingBox, touch_location) \n                puts \"You have clicked a mole\"\n              end\n            end\n          end\n    ```", "```swift\n       @score = 0\n        @score_label = CCLabelTTF.labelWithString(\"Score: 0\", fontName:\"Verdana\",fontSize: 14)\n        @score_label.position = CGPointMake( 9*screen_size.width / 10, 9*screen_size.height / 10)\n        self.addChild(@score_label, z:999)\n    ```", "```swift\n       def ccTouchesBegan(touches, withEvent:event)\n            touch = touches.anyObject\n\n            touch_location = self.convertTouchToNodeSpace(touch)\n            @moles.each do |mole|\n              if CGRectContainsPoint(mole.boundingBox, touch_location) and !CGRectContainsPoint(@grass.boundingBox, touch_location) \n     @score = @score + 10\n     @score_label.setString(\"Score:\"+ @score.to_s)\n         end\n            end\n          end\n    ```", "```swift\n      def ccTouchesBegan(touches, withEvent:event)\n        touch = touches.anyObject\n\n        touch_location = self.convertTouchToNodeSpace(touch)\n        @moles.each do |mole|\n          if CGRectContainsPoint(mole.boundingBox, touch_location) and !CGRectContainsPoint(@grass.boundingBox, touch_location) \n            @score = @score + 10\n             @score_label.setString(\"Score:\"+ @score.to_s)\n             SimpleAudioEngine.sharedEngine.playEffect \"noise.wav\"\n          end\n        end\n      end\n```"]