["```java\n//create the window\nvar win1 = Titanium.UI.createWindow({\ntitle:'Exercise Tracker',\nbackgroundColor: '#000'\n});\n//create our mapview\nvar mapview = Titanium.Map.createView({\ntop: 110,\nheight: 350,\nmapType: Titanium.Map.STANDARD_TYPE,\nregion: {latitude: 51.50015,\nlongitude:-0.12623,\nlatitudeDelta:0.5,\nlongitudeDelta:0.5},\nanimate: true,\nregionFit: true,\nuserLocation: true\n});\n//add the map to the window\nwin1.add(mapview);\n//finally, open the window\nwin1.open();\n\n```", "```java\n//set the distance filter\nTitanium.Geolocation.distanceFilter = 10;\n//apple now requires this parameter so it can inform the user //of why you are accessing their location data\nTi.Geolocation.purpose = \"To obtain user location for tracking distance travelled.\";\nTitanium.Geolocation.getCurrentPosition(function(e)\n{\nif (e.error)\n{\n//if mapping location doesn't work, show an alert\nalert('Sorry, but it seems geo location\nis not available on your device!');\nreturn;\n}\n//get the properties from Titanium.GeoLocation\nvar longitude = e.coords.longitude;\nvar latitude = e.coords.latitude;\nvar altitude = e.coords.altitude;\nvar heading = e.coords.heading;\nvar accuracy = e.coords.accuracy;\nvar speed = e.coords.speed;\nvar timestamp = e.coords.timestamp;\nvar altitudeAccuracy = e.coords.altitudeAccuracy;\n//apply the lat and lon properties to our mapview\nmapview.region = {latitude: latitude,\nlongitude: longitude,\nlatitudeDelta:0.5,\nlongitudeDelta:0.5\n};\n});\n\n```", "```java\n//create the search view\nvar searchview = Titanium.UI.createView({\ntop: 0,\nleft: 0,\nwidth: 320,\nheight: 110,\nbackgroundImage: 'images/gradient.png'\n});\n//style it up a bit\nvar bottomBorder = Titanium.UI.createView({\nheight: 1,\nwidth: 320,\nleft: 0,\nbottom: 0,\nbackgroundColor: '#000'\n});\nsearchview.add(bottomBorder);\n//add a search box for starting location\nvar txtStartLocation = Titanium.UI.createTextField({\nbackgroundColor: '#fff',\nleft: 10,\ntop: 20,\nwidth: 200,\nheight: 30,\nborderColor: '#000',\nborderRadius: 5,\nhintText: 'Current Location',\npaddingLeft: 10\n});\nsearchview.add(txtStartLocation);\n//add a search box for starting location\nvar txtEndLocation = Titanium.UI.createTextField({\nbackgroundColor: '#fff',\nleft: 10,\ntop: 60,\nwidth: 200,\nheight: 30,\nborderColor: '#000',\nborderRadius: 5,\nhintText: 'End Location',\npaddingLeft: 10\n});\nsearchview.add(txtEndLocation);\n//add the button with an empty click event, this will fire off\n//our forwardGeocoder\nvar btnSearch = Titanium.UI.createButton({\nwidth: 80,\nheight: 30,\ntop: 60,\nright: 10,\nbackgroundImage: 'images/search.png',\nborderRadius: 3\n});\n//btnsearch event listener fires on button tap\nbtnSearch.addEventListener('click',function(e){\n});\nsearchview.add(btnSearch);\n\n```", "```java\n//btnsearch event listener fires on button tap\nbtnSearch.addEventListener('click',function(e){\n//check for a start address\nif(txtStartLocation.value != '')\n{\n//works out the start co-ords\nTi.Geolocation.forwardGeocoder(txtStartLocation.value, function(e){\n//we'll set our map view to this initial region so it\n//appears on screen\nmapview.region = {latitude: e.latitude,\nlongitude: e.longitude,\nlatitudeDelta:0.5,\nlongitudeDelta:0.5\n};\nTi.API.info('Start location co-ordinates are: ' +\ne.latitude + ' lat, ' + e.longitude +\n'lon');\n});\n}\nelse\n{\nalert('You must provide a start address!');\n}\n//check for an end address\nif(txtEndLocation.value != '')\n{\n//do the same and work out the end co-ords\nTi.Geolocation.forwardGeocoder(txtEndLocation.value, function(e){\nTi.API.info('End location co-ordinates are: ' + e.latitude + ' lat, ' + e.longitude + ' lon');\n});\n}\nelse\n{\nalert('You must provide an end address!');\n}\n});\n\n```", "```java\n//works out the start co-ords\nTi.Geolocation.forwardGeocoder(txtStartLocation.value, function(e)\n{\n//we'll set our map view to this initial region so it appears\n//on screen\nmapview.region = {latitude: e.latitude,\nlongitude: e.longitude,\nlatitudeDelta: 0.5,\nlongitudeDelta: 0.5\n};\nTi.API.info('Start location co-ordinates are: ' +\ne.latitude + ' lat, ' + e.longitude + ' lon');\n//add an annotation to the mapview for the start location\nvar annotation = Titanium.Map.createAnnotation({\nlatitude: e.latitude,\nlongitude: e.longitude,\ntitle: 'Start location',\nsubtitle: txtStartLocation.value,\nanimate:true,\nid: 1,\npincolor: Titanium.Map.ANNOTATION_GREEN\n});\n//add the annotation pin to the mapview\nmapview.addAnnotation(annotation);\n});\n\n```", "```java\n//add an image to the left of the annotation\nvar leftImage = Titanium.UI.createImageView({\nimage: 'images/start.png',\nwidth: 25,\nheight: 25\n});\nannotation.leftView = leftImage;\n//add the start button\nvar startButton = 'images/startbutton.png';\nannotation.rightButton = startButton;\nmapview.addAnnotation(annotation);\n\n```", "```java\n//create the event listener for when annotations\n//are tapped on the map\nmapview.addEventListener('click', function(e){\nTi.API.info('Annotation id that was tapped: ' + e.source.id);\nTi.API.info('Annotation button source that was tapped: ' + e.clicksource);\n});\n\n```", "```java\n//create the event listener for when annotations\n//are tapped on the map\nmapview.addEventListener('click', function(e){\nTi.API.info('Annotation id that was tapped: ' + e.source.id);\nTi.API.info('Annotation button source that was tapped: ' + e.clicksource);\nTi.API.info('Annotation button title that was tapped: ' + e.title);\nif(timerStarted == false && (e.clicksource == 'rightButton' && e.title == 'Start location'))\n{\nTi.API.info('Timer will start...');\npoints = [];\n//set our first point\nTi.Geolocation.forwardGeocoder(txtStartLocation.value, function(e){\npoints.push({latitude: e.coords.latitude,\nlongitude: e.coords.longitude\n});\nroute.points = points;\n//add route to our mapview object\nmapview.addRoute(route);\ntimerStarted = true;\n//start our timer and refresh it every minute\n//1 minute = 60,000 milliseconds\nintTimer = setInterval(recordCurrentLocation,\n60000);\n});\n}\nelse\n{\n//stop any running timer\nif(timerStarted == true &&\n(e.clicksource == 'rightButton'\n&& e.title == 'End location'))\n{\nclearInterval(intTimer);\ntimerStarted = false;\nalert('You travelled ' + distanceTraveled\n+ ' meters!');\n}\n}\n});\n\n```", "```java\n//create the variables\nvar timerStarted = false;\nvar intTimer;\n//this array will hold all the latitude and\n//longitude points in our route\nvar points = [];\n//this will hold the distance traveled\nvar distanceTraveled = 0;\n//route object\nvar route = {\nname: 'Exercise Route',\ncolor: \"#00f\",\nwidth: 2\n};\n\n```", "```java\n//this function records the current location and\n//calculates distance between it and the last location,\n//adding that to our overall distance count\nfunction recordCurrentLocation()\n{\nTi.API.info('getting next position...');\npoints.push({latitude:-27.466175,\nlongitude:153.030426\n});\nroute.points = points;\n//get the current position\nTitanium.Geolocation.getCurrentPosition(function(e) {\nvar currLongitude = e.coords.longitude;\nvar currLatitude = e.coords.latitude;\npoints.push({latitude: e.currLatitude, longitude: e.currLongitude});\n//add new point to route\nroute.points = points;\n//remove the old route and add this new one\nmapview.removeRoute(route);\nmapview.addRoute(route);\n});\n//ask google for the distance between this point\n//and the previous point in the points[] array\nvar url = 'http://maps.googleapis.com/maps/api/directions/json?travelMode=Walking&origin=' + points[points.length-2].latitude + ',' + points[points.length-2].longitude + '&destination=' + points[points.length-1].latitude + ',' + points[points.length-1].longitude + '&sensor=false';\nvar req = Ti.Network.createHTTPClient();\nreq.open('GET', url);\nreq.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\nreq.onreadystate = function(){};\nreq.onload = function()\n{\n//record the distance values\nTi.API.info(req.responseText);\nvar data = JSON.parse(req.responseText);\nTi.API.info(\"distance.text \" + data.routes[0].legs[0].distance.text);\nTi.API.info(\"distance.value \" + data.routes[0].legs[0].distance.value);\ndistanceTraveled = distanceTraveled + data.routes[0].legs[0].distance.value;\n};\nreq.send();\n}\n\n```", "```java\n//this image will appear over the map and indicate our\n//current compass heading\nvar imageCompassArrow = Titanium.UI.createImageView({\nimage: 'images/arrow.gif',\nwidth: 50,\nheight: 50,\nright: 25,\ntop: 5\n});\nwin1.add(imageCompassArrow);\n//how to monitor your heading using the compass\nif(Titanium.Geolocation.hasCompass)\n{\n//this is the degree of angle change our heading\n//events don't fire unless this value changes\nTitanium.Geolocation.headingFilter = 90;\n//this event fires only once to get our intial\n//heading and to set our compass \"arrow\" on screen\nTi.Geolocation.getCurrentHeading(function(e) {\nif (e.error) {\nreturn;\n}\nvar x = e.heading.x;\nvar y = e.heading.y;\nvar z = e.heading.z;\nvar magneticHeading = e.heading.magneticHeading;\naccuracy = e.heading.accuracy;\nvar trueHeading = e.heading.trueHeading;\ntimestamp = e.heading.timestamp;\nvar rotateArrow = Titanium.UI.create2DMatrix();\nvar angle = 360 - magneticHeading;\nrotateArrow = rotateArrow.rotate(angle);\nimageCompassArrow.transform = rotateArrow;\n});\n//this event will fire repeatedly depending on the change\n//in angle of our heading filter\nTitanium.Geolocation.addEventListener('heading',function(e) {\nif (e.error) {\nreturn;\n}\nvar x = e.heading.x;\nvar y = e.heading.y;\nvar z = e.heading.z;\nvar magneticHeading = e.heading.magneticHeading;\naccuracy = e.heading.accuracy;\nvar trueHeading = e.heading.trueHeading;\ntimestamp = e.heading.timestamp;\nvar rotateArrow = Titanium.UI.create2DMatrix();\nvar angle = 360 - magneticHeading;\nrotateArrow = rotateArrow.rotate(angle);\nimageCompassArrow.transform = rotateArrow;\n});\n}\nelse\n{\n//log an error to the console if this device has no compass\n//older devices such as the iphone 3g don't have this\nTitanium.API.info(\"No Compass on device\");\n//you can uncomment this to test rotation when using the emulator\n//var rotateArrow = Titanium.UI.create2DMatrix();\n//var angle = 45;\n//rotateArrow = rotateArrow.rotate(angle);\n//imageCompassArrow.transform = rotateArrow;\n}\n\n```"]