- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Social Media into Our Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have all of the foundational things needed to get our game out into the
    world; it’s mechanically working and we’ve set up all of the monetization. Having
    all of the features that we have added to our project is great, but if no one
    is playing your game, there’s no reason to have them.
  prefs: []
  type: TYPE_NORMAL
- en: Word-of-mouth marketing is the most reliable way to get others to try your game.
    Providing people with opportunities to share the game helps others discover the
    project, and it’s something that we should really try to do because marketing
    and getting your game out there is one of the hardest things to do as an indie
    developer.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn some of the different ways to integrate social
    media into your projects. We will start off by adding something to share – a score.
    Afterward, we will see how we can share the score on Twitter. Then, we will see
    how we can connect our game to Facebook and use content from Facebook within our
    game itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into a number of topics. It will contain a simple
    step-by-step process from beginning to end. The following is the outline of our
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a scoring system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing high scores via Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing Facebook’s SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in to our game via Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a Facebook name and profile picture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the **Unity Editor system requirements** section. To deploy your project, you
    will need an Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike previous chapters, the use of the Facebook SDK requires both iOS and
    Android build support for your Unity version installed, so make sure that both
    are added before importing the package or you will have errors.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a scoring system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to provide an incentive for players to share our game with others,
    we need to provide a compelling reason to do so. Some people are very competitive
    and wish to be the best at playing a game, challenging others to do better than
    them. To help with that, we can allow our players to share a score value via social
    media. However, to do that, we’ll first need to have a scoring system. Thankfully,
    it’s not too difficult to do that, so let’s add that real quick using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start off by opening the `Gameplay.scene` file located in the `Assets/Scenes`
    folder of the project. To show our players what their score is, we’ll need to
    have some way to display it on the screen. In our case, the easiest way would
    be with a text object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the **Hierarchy** window, select the **On Screen Controls** object that
    is the child of the **Canvas** object. Afterward, right-click on the **On Screen
    Controls** object and select **UI** | **Text – Text Mesh Pro**, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1– Adding a text object to the screen](img/B18868_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1– Adding a text object to the screen
  prefs: []
  type: TYPE_NORMAL
- en: This will make the **Text** object a child of the **Panel** object, which in
    turn will automatically resize itself to fit within a notch if there is one in
    the devices.
  prefs: []
  type: TYPE_NORMAL
- en: Rename this object `Score Text` and use the **Anchors Preset** menu at the top,
    holding down *Shift + Alt* to set the pivot and position as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, let’s set the `60` to ensure that we have space to hold the score
    when we increase the size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, in `0` and set `45` so that it’s easy to see.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To improve its readability, change **Material Preset** to **LiberationSans SDF
    – Outline** and let’s change **Vertex Color** to black.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, scroll down to the text material section (`1`. Notice that it seems
    to fill both the inside and outside of the text. To fix this, in the `1`.
  prefs: []
  type: TYPE_NORMAL
- en: "![\uFEFFFigure 8.2: Adjusting the properties of the text outline](img/B18868_08_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Adjusting the properties of the text outline'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up the `PlayerBehaviour` script and add the following line at the
    top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following code inside the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We first have a reference to the `scoreText` object, which we will need to set
    in the `TextMeshProUGUI` class, which contains properties relating to the text
    displayed on the object.
  prefs: []
  type: TYPE_NORMAL
- en: This makes use of C#’s `get`/`set` functions, which are implicit getters and
    setters. Basically, any time we get or set the `Score` variable, we will execute
    whatever is located between `{}`. In our case, any time we set the `Score` variable,
    it will update our text for us.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more info on TextMeshPro, check out [https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@3.0/manual/index.html#support--api-documentation).
  prefs: []
  type: TYPE_NORMAL
- en: This has an advantage over what a number of my students do, which is to update
    the value of the text every frame, which doesn’t need to happen. We only need
    to update the text when the value changes, which makes it perfect for us to use
    in this situation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `get`/`set` accessors, check out [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-properties).
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, update the `PlayerBehaviour` class to have the following highlighted
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we are doing here is resetting our score whenever the player is created
    and increasing the value while the game isn’t paused.
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and dive back into Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Player** object and drag and drop our **Score Text** object into
    the **Score Text** variable on the **Player** **Behaviour** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3: Assigning the Score Text property](img/B18868_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Assigning the Score Text property'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the variable has been assigned, go ahead and play the game. The game’s
    interface is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4: The score added to the game](img/B18868_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: The score added to the game'
  prefs: []
  type: TYPE_NORMAL
- en: Now, as you can see, we have a score for our game, which updates as we play.
    This will allow players to easily know what their competency with the game is
    and give them some information that they can share with others. Now that we have
    a scoring system, let’s take a look at how we can share a high score using Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing high scores via Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twitter is an online news and social networking service where users post and
    interact with each other through messages that they call *tweets*, which are limited
    to 280 characters. Many indie game developers use Twitter as a way to attract
    others to play their games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Twitter is a great option to start off with because we can add it very easily
    to our project by simply opening a specific URL. Let’s look at the steps to do
    just that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `PauseScreenBehaviour` script. Once inside, we will add the following
    code inside the `PlayerScreenBehaviour` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First of all, we will use a number of new things. You’ll note that the preceding
    block of code starts and ends with `#region` and `#endregion`, respectively. What
    this does is allow us to expand and collapse this portion of code inside Visual
    Studio. When we introduce longer code files, it can be convenient to be able to
    collapse or hide certain parts of your script so that you can focus only on the
    part of the file you’re working on. Since this portion of code has nothing to
    do with the rest of the script, this is a good place for us to use it.
  prefs: []
  type: TYPE_NORMAL
- en: To open URLs inside Unity, we will need to make use of the `Application.OpenURL`
    function and the `UnityWebRequest` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Twitter’s Web Intents and the ways you can use them,
    check out [https://dev.twitter.com/web/intents](https://dev.twitter.com/web/intents).
  prefs: []
  type: TYPE_NORMAL
- en: The `UnityWebRequest` class is typically used to load content at runtime, but
    it also has the `EscapeURL` function, which will convert a string into a format
    that web browsers are comfortable with. For instance, the newline character will
    not be displayed by itself.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `EscapeURL` function, check out [https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html](https://docs.unity3d.com/ScriptReference/Networking.UnityWebRequest.EscapeURL.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the script and dive back into Unity. From the `Player` object by dragging
    and dropping the **Player** game object from the **Hierarchy** window onto the
    **Player** property in the **Inspector** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: Assigning the Player property](img/B18868_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Assigning the Player property'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to have a button for our **Game Over** screen to allow us to share
    our score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the **Canvas** object and toggle the **Game Over** object to **ON**
    by clicking on the checkmark beside its name in the **Inspector** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, expand the two `Tweet Score Button` and also update the text in
    the child object to display `Tweet Score` as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, select the **Tweet Score** button object and scroll down to the
    **Button** component. From there, change the function we are calling to the **PauseScreenBehaviour**
    | **TweetScore** function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6: Calling the TweetScore function](img/B18868_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: Calling the TweetScore function'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Game Over** object in the **Hierarchy** and disable it again. Next,
    save your scene and start the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now when we fail the game, we can click on the **Tweet Score** button and our
    browser will open on our PC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Fi\uFEFFgure 8.7: Result on PC](img/B18868_08_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: Result on PC'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, on our mobile devices, it will open up the Twitter app if it is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: Tweeting our score via the Twitter mobile app](img/B18868_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: Tweeting our score via the Twitter mobile app'
  prefs: []
  type: TYPE_NORMAL
- en: With that, you learned just how easy it is to share something using Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For those who are interested in doing more than this with Twitter, it does have
    its own API for Unity, which will allow you to let users log in to your game using
    Twitter if you’d like to do that instead of Facebook, which we will do later on.
    If you’re interested in looking into this, you can find more information at [https://dev.twitter.com/twitterkit/unity/overview](https://dev.twitter.com/twitterkit/unity/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, other social networks exist as well, some of which have their very
    own **software development kit** (**SDK**), which allows you to access the information
    that they have. In the next section, we will explore how to utilize this.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Facebook’s SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We couldn’t have a chapter on social networking without mentioning Facebook.
    Facebook has its own SDK that can be used with Unity. This can allow us to use
    the information that Facebook already has, including the user’s name and profile
    image, within our game experience. Let’s look at the steps to incorporate them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your web browser and visit [https://developers.facebook.com/docs/unity/](https://developers.facebook.com/docs/unity/):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9: Facebook SDK for Unity page](img/B18868_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: Facebook SDK for Unity page'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `facebook-unity-sdk-15.1.0` folder. Then, open up the `FacebookSDK`
    folder and you’ll see a single file, `facebook-unity-sdk-15.1.0.unitypackage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike previous chapters, the use of the Facebook SDK requires both iOS and
    Android build support for your Unity version installed, so make sure that both
    are added before importing the package or you will have errors. To do so, in Unity
    Hub, go to the **Installs** section and, from the gear icon, select **Add Modules**
    and add the relevant items that weren’t included before (if there are any).
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on the `unitypackage` file, and you should have a window pop up,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10: Unity package import dialog](img/B18868_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: Unity package import dialog'
  prefs: []
  type: TYPE_NORMAL
- en: If this does not work, you can also go to **Assets** | **Import Package** |
    **Custom Package** and then find the folder that you unzipped the file to and
    open it that way.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Import** button and wait for it to finish loading. From here,
    you’ll get a popup noting the project may contain obsolete APIs. Go ahead and
    click on the **I Made a Backup. Go Ahead!** button and wait for it to finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in order to use the Facebook API, we will first need to have a Facebook
    App ID, so let’s do that next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to your web browser and go to [https://developers.facebook.com/](https://developers.facebook.com/)
    and click on the **Log In** button in the top-right corner of the screen. Once
    you log in to your Facebook account, you should see something similar to the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11: Meta for Developers menu](img/B18868_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.11: Meta for Developers menu'
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding page, click on the **Get Started** button in the top-right
    corner of the screen. From there, you’ll be brought to a screen where you need
    to click **Next**, and then you’ll be asked your role. Click on **Developer**
    and, on the next screen, click on the **Create First** **App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, add a `Endless Roller`) and your **Contact E-mail**, and then select
    **Create** **App** **ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’re brought to your app’s page, click on the **Dashboard** option to
    the left of the default info for your game. Note the **App ID** and copy it by
    clicking on it or by highlighting it and then pressing *Ctrl +* *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you instead see a `Endless Roller`) and your contact e-mail, and then select
    **Create app**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12: Getting the App ID](img/B18868_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.12: Getting the App ID'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Unity, and you may be asked to share some info with Google. Answer
    as you wish. Then, you’ll have the option to enable Android auto-resolution. I
    set **Enable** and had to wait for it to resolve Android dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, you will note a new Facebook option in the top bar. Select it and
    then select **Edit Settings**. Once you’re there, click on **Inspector** if you
    need to and you’ll see several options. Set **Facebook App Id** to our created
    app’s ID and then set the name to our game’s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.13: Adding \uFEFFthe App Id to Facebook Settings](img/B18868_08_13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.13: Adding the App Id to Facebook Settings'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: There is a possibility that you may get an error the next time that you try
    to export your game to Android due to changing the SDK location. If this is the
    case, close your Unity project and then go to the project folder and delete the
    `Temp` folder. Upon restarting the project, the error should go away.
  prefs: []
  type: TYPE_NORMAL
- en: Return to the Facebook Settings menu by going to **Facebook** | **Edit Settings...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you’ll notice that under **Android Build Facebook Settings**, there is
    a new error stating that OpenSSL is not found.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this, we will first need to download OpenSSL by going to [http://slproweb.com/products/Win32OpenSSL.html](http://slproweb.com/products/Win32OpenSSL.html).
    From there, select the **EXE** link below the **Win64 OpenSSL v1.1.1u** option,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'For those on a Mac, you can follow the instructions given here in order to
    install OpenSSL and add it to your path: [https://developers.facebook.com/docs/facebook-login/android/advanced](https://developers.facebook.com/docs/facebook-login/android/advanced).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14: OpenSSL download link](img/B18868_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.14: OpenSSL download link'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s downloaded, install the program with the default options, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.15\uFEFF: Installing OpenSSL](img/B18868_08_15.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.15: Installing OpenSSL'
  prefs: []
  type: TYPE_NORMAL
- en: Once the installation is complete, you may uncheck the donation option and click
    on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then need to add the location of OpenSSL to the path. To do this, press the
    Windows key on your
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: keyboard and start typing in `env`, and then select the **Edit the system**
    **environment variables**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'option, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.16\uFEFF: Se\uFEFFlecting the \uFEFFEdit the system environment\
    \ variables option](img/B18868_08_16.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.16: Selecting the Edit the system environment variables option'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the window that pops up, click the `C:\Program Files\OpenSSL-Win64\bin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.17\uFEFF: Editing the environmental variable for the path](img/B18868_08_17.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.17: Editing the environmental variable for the path'
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on `C:\Program Files\Unity\Hub\Editor\2022.1.0b16\Editor\Data\PlaybackEngines\AndroidPlayer\OpenJDK\bin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button and then the **OK** button in the **Environmental**
    **Variables** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once both options have been added, close your Unity project and restart your
    computer. Once Unity reopens, you may have to wait for the **Resolving Android
    Dependencies** menu to complete, but once it finishes, you should be able to see
    the **Facebook Settings** (**Facebook | Edit Settings**) menu working correctly
    and giving us a value under **Debug Android Key** **Hash** **[?]**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.18\uFEFF: Debug Android Key Hash](img/B18868_08_18.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.18: Debug Android Key Hash'
  prefs: []
  type: TYPE_NORMAL
- en: It is also required for calls to certain APIs to utilize a client token, so
    we will also get one of them. To do so, go back to your project’s dashboard by
    going to **Facebook |** **Developers Page**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the dashboard has loaded, go to **Settings | Advanced | Security | Client
    Token**. Copy the **Client token** value and then go back to the Unity Editor
    and paste it back into **Facebook Settings** in **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This means that our setup of the Facebook SDK is complete!
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the platform you wish to deploy to, go to the following websites
    and complete the tasks listed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Android, check out [https://developers.facebook.com/docs/unity/getting-started/android](https://developers.facebook.com/docs/unity/getting-started/android)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For iOS, check out [https://developers.facebook.com/docs/unity/getting-started/ios](https://developers.facebook.com/docs/unity/getting-started/ios)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have set that up, we can start adding to it by first allowing our
    game to be logged in to using Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to our game via Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the things we can do when using the Facebook API is to allow our users
    to log in to the game using their Facebook account. Then, we can use their name
    and image automatically within our project. The following steps show us how to
    achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first open up our `Assets/Scenes` folder, and then double-clicking on
    the `MainMenu` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, let’s click on the **2D** button to go into 2D mode if you haven’t
    done so previously. What we will do is replace the original menu and instead have
    a button for players to log in via Facebook, or play as a guest when the game
    starts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `Menu Options`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, select the `Facebook Login` object. Select the **Menu Options** game
    object again and then disable it by going to the **Inspector** tab and clicking
    on the checkmark beside its name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19: Creating the Facebook Login menu](img/B18868_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.19: Creating the Facebook Login menu'
  prefs: []
  type: TYPE_NORMAL
- en: We will have the **Facebook Login** object turn the menu on when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open the `225`, then right-click on the **Button** component, and then
    select the **Reset** option to remove its original **On Click ()** functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Duplicate the `Facebook Login Button` and `Continue as Guest Button`. Also,
    change the `Facebook Login` and `Continue` `as Guest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.20: Facebook Login Button setup](img/B18868_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.20: Facebook Login Button setup'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the buttons working correctly, we need to write the script
    that will allow us to log in. Go to the `Scripts` folder and open our `MainMenuBehaviour`
    script. We will use the `List` class to hold the permissions we want in order
    to access Facebook and the content of the `FB` class in the Facebook SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, to do that, we’ll first add the following to the top of the `MainMenuBehaviour`
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following variables to the `MainMenuBehaviour` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following code within the `MainMenuBehaviour` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside this region, we are going to add several different methods, starting
    with some methods dealing with initializing the Facebook APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the `Awake` method calls the `FB.Init` function, which takes
    in two parameters, both of which are delegates, or functions to call whenever
    the initialization is complete and whenever the app is hidden or no longer the
    currently focused one. The definition of both those functions is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are going to print a message to the screen if we are logged
    in to Facebook and we will display the main menu. Likewise, if we ever lose focus
    of Unity, we are going to pause the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have some other final functions that we need to add for our final implementation,
    which we will add next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we are accessing the player’s public profile, which contains information
    such as their name and their profile picture.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For all of the properties that we can get access to, check out [https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile](https://developers.facebook.com/docs/facebook-login/permissions#reference-public_profile).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your script and go to the **Facebook Login** button and change the button’s
    **OnClick()** action to now call your function by clicking on the + button and
    then dragging and dropping the **Main Menu** object in and then selecting **Main
    Menu Behaviour** | **Facebook** **Login** instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21: Calling the FacebookLogin function](img/B18868_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.21: Calling the FacebookLogin function'
  prefs: []
  type: TYPE_NORMAL
- en: Then, on the `MainMenuBehaviour.ShowMainMenu` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.22: Setup for Continue \uFEFFas Guest Button](img/B18868_08_22.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.22: Setup for Continue as Guest Button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will need to set the variables we have created. Select the **Main
    Menu** object in the **Hierarchy** window and then set the **Main Menu** and **Facebook**
    **Login** properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.23: Settin\uFEFFg the Main Menu Behaviour properties](img/B18868_08_23.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.23: Setting the Main Menu Behaviour properties'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the **Facebook Login** is set to the **panel** object holding both
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your scene, start the game, and then click on the **Facebook** **Login**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.24: User Access Token Request Screen](img/B18868_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.24: User Access Token Request Screen'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To see everything properly within the editor, it’s a good idea to maximize the
    **Game** tab, which you can do by right-clicking on the **Game** tab and selecting
    **Maximize** or by checking the **Maximize On Play** option on the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you should see a menu asking for a user access token, a value that every
    profile has and we can associate it with. We’ll need to go to Facebook to get
    that, so that’s what we’ll do next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Find Access Token** page, and a web browser will open with a
    new page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25: Access Token Tool page](img/B18868_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.25: Access Token Tool page'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll then need to click on the **need to grant permissions** link and then,
    on **Generate Access Token**, click **Continue** and you’ll see a string of characters
    under **User Token**. Copy the string, paste it into the **User Access Token**
    property in Unity, and then click on the **Send** **Success** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you get an error when granting permissions stating **Future off- Facebook
    activity for this app is off**, that means that your Facebook settings do not
    allow your Facebook profile to be used outside of Facebook. In order to use Facebook
    to log in, your account must have Off-Facebook tracking enabled. To do so, you
    can go to [https://www.facebook.com/off_facebook_activity](https://www.facebook.com/off_facebook_activity)
    and ensure the **Future off- Facebook Activity** value is set to ON to be able
    to log in. We will be allowing users to log in as a guest if you’d prefer not
    to be tracked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you’ll note that the Console has printed that we’ve logged in to Facebook
    and that the menu closes when we’ve sent the key:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.26: Logged in\uFEFF to Faceb\uFEFFook](img/B18868_08_26.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.26: Logged in to Facebook'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on user access tokens, check out [https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens](https://developers.facebook.com/docs/facebook-login/access-tokens/#usertokens).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the ability to log in to Facebook, we can now use the information
    that we get from Facebook in order to customize our game, which is what we will
    do next.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a Facebook name and profile picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good thing to do is to personalize our game to fit our players. So, with
    that, once the player logs in, we will welcome them and display their image on
    the screen by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `MainMenuBehaviour` script once again. From there, we’ll need to
    add a new `using` statement to display an image and change the text we need in
    order to use Unity’s UI system and TextMeshPro:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will then need to add two new variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These variables will hold the information that we wish to display once we get
    it from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterward, we will update the `ShowMainMenu` function and add some new functions
    to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `FB.API` function makes a call to Facebook’s Graph API to get data or take
    an action on the user’s behalf and allows us to get the information that we have
    permission to as defined earlier. In our case, we are looking for the name and
    the profile picture of the user and calling the `SetName` and `SetProfilePic`
    functions, respectively, once we have obtained that data.
  prefs: []
  type: TYPE_NORMAL
- en: However, we currently do not have `SetName` and `SetProfilePic` functions, so
    we will go ahead and add them now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following additional code within the `Facebook` region of the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After getting the data, we will modify the image or string to display the new
    data that we retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `FB.API` function, check out [https://developers.facebook.com/docs/unity/reference/current/FB.API](https://developers.facebook.com/docs/unity/reference/current/FB.API).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will need to actually create the text and image we want to display.
    Open up the `Safe Area Holder`. Then, right-click on the `Welcome Profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 8.27: Creating \uFEFFWelcome Profile](img/B18868_08_27.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.27: Creating Welcome Profile'
  prefs: []
  type: TYPE_NORMAL
- en: This will act as a container for all of our information for the player.
  prefs: []
  type: TYPE_NORMAL
- en: With the `10`. From there, change **Child Alignment** to **Lower Center** and
    then check **Width** and **Height** under the **Control Child Size** property.
    Then, add a **Content Size Fitter** component and change the **Horizontal Fit**
    and **Vertical Fit** size to **Preferred Size**. Finally, in the **Anchor Presets**
    menu, hold down *Alt + Shift* and select **Bottom-center**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the **Welcome Profile** object in the **Hierarchy** tab, right-click
    on it, and select **UI** | **Text -** **TextMeshPro**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the next `Greeting`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, adjust `Welcome` and the size to something larger, such as `50`, change
    the **Vertex Color** to black, and then adjust **Alignment** to be centered vertically
    and horizontally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.28: Greeting Text setup](img/B18868_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.28: Greeting Text setup'
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, let’s next right-click on `256`. Afterward, check the `256` as well,
    because Facebook may give us images larger than this, and this will keep the images
    smaller. The **Layout Element (Script)** component is great for allowing you to
    override things that **LayoutGroups** will do by default and can be useful if
    you’re not getting exactly what you want from the default behavior.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the **Layout Element (Script)** compon[ent, ch](https://developers.facebook.com/docs/unity/)eck
    out [https://docs.unity3d.com/Manual/script-LayoutElement.html](https://docs.unity3d.com/Manual/script-LayoutElement.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, change the name of the `Profile Pic` and then reorder it so it is above
    the **Greeting** object in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.29: Profile Pic setup](img/B18868_08_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.29: Profile Pic setup'
  prefs: []
  type: TYPE_NORMAL
- en: Reordering objects with a **Horizontal Layout Group** modifies their placement
    order.
  prefs: []
  type: TYPE_NORMAL
- en: If you change the resolution to a much smaller size, the image is drawn on top
    of our menu. This is possible due to both canvases being told that they have the
    same priority in being drawn, similar to how Z-fighting works for 2D games. To
    fix potential problems in the future, we will instead put the scaling canvas as
    the background element.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will select `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, dive back into the **Main Menu** object and set the **Greeting** and **Profile
    Pic** properties in the **MainMenuBehaviour** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, since we don’t want them visible when the game starts, let’s turn off
    **Greeting** and our **Profile Pic** object as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save our game, and then start it up again by going through the appropriate
    login information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.30: Logged into Facebook](img/B18868_08_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.30: Logged into Facebook'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are logged in and you can see my name, but I have a profile
    pic that isn’t quite my actual profile pic. This is because it is using my gaming
    profile. If we want to use my actual Facebook profile pic, we have to add another
    permission to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: Back in Graph API Explorer, go back to the **Permissions** section and, under
    **Add a Permission**, click on the dropdown and select **gaming_user_picture**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.31: Adding the user picture option](img/B18868_08_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.31: Adding the user picture option'
  prefs: []
  type: TYPE_NORMAL
- en: From there, click on **Generate Access Token** again and get a new access token
    that share your actual profile information. Note that the user will have to choose
    to share this info with you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.32: Choose how you log in to Facebook](img/B18868_08_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.32: Choose how you log in to Facebook'
  prefs: []
  type: TYPE_NORMAL
- en: Now use your new access token and try to run the game.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.33: Logged in\uFEFF to actual Facebook account](img/B18868_08_33.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.33: Logged in to actual Facebook account'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, I retrieved my actual Facebook info
    once I logged in.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook is still an incredibly useful platform for game developers and can
    help personalize a user’s gameplay experience. This can be easily expanded to
    utilize several other pieces of data that Facebook has and share content with
    all of your user’s friends.
  prefs: []
  type: TYPE_NORMAL
- en: For those that are just looking for the ability to have the ability to sign
    in to your game to authenticate players for specific platforms, there are several
    other options available that you can use. For details on that, check out [https://docs.unity.com/authentication/SettingupExternalIdentityProviders.html](https://docs.unity.com/authentication/SettingupExternalIdentityProviders.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we were introduced to some of the potential ways that we can
    share our game with others, as well as personalizing our game experiences and
    utilizing the functionality that social media provides us with. We started off
    by adding a simple score system and then allowed users to share their scores via
    Twitter. We then set up the Facebook SDK, making it so that we can log in to it
    to play our game and retrieve information about our users, which we can use to
    customize their gameplay experience.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have people playing our game, we want them to keep coming back and
    playing over time. One of the easiest ways to do this is through the use of notifications,
    which we will look at in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Game Feel/Polish'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part of the book, we will focus on adding polish to your game to enhance
    the overall player experience. By the end of this part, you will have all the
    tools and knowledge necessary to take your game to the next level by polishing
    it and the player experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18868_09.xhtml#_idTextAnchor290), *Keeping Players Involved
    with Notifications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18868_10.xhtml#_idTextAnchor313), *Using Unity Analytics*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18868_11.xhtml#_idTextAnchor339), *Remote Config*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18868_12.xhtml#_idTextAnchor347), *Improving Game Feel*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18868_13.xhtml#_idTextAnchor369), *Building a Release Copy
    of Our Game*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B18868_14.xhtml#_idTextAnchor410), *Submitting Games to App
    Stores*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B18868_15.xhtml#_idTextAnchor453), *Augmented Reality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
