- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Watch Project – Fitness Companion Design
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观看项目 – 健身伴侣设计
- en: In the previous six chapters, we have created various applications for our Apple
    devices. These chapters taught us how to set up projects for the iPhone, iPad,
    and Mac. They also demonstrated the design differences between small and large
    displays. In this chapter, we will be designing a fitness companion application
    for the Apple Watch. Due to the small screen size of the watch, we will need to
    simplify the design. We will assess the requirements and discuss the design specifications
    before starting the coding process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前六章中，我们已经为我们的苹果设备创建了各种应用程序。这些章节教会了我们如何为iPhone、iPad和Mac设置项目。它们还展示了小屏幕和大屏幕之间的设计差异。在本章中，我们将为Apple
    Watch设计一个健身伴侣应用程序。由于手表屏幕尺寸较小，我们需要简化设计。在开始编码过程之前，我们将评估需求并讨论设计规范。
- en: 'Firstly, we will assess the requirements needed for designing a fitness companion
    application for the Apple Watch. We will then move on to discussing the design
    specifications, which will give us a better understanding of what is required
    and how it will all fit together. This will be followed by the coding process,
    where we will build the fitness app over the course of these two chapters. This
    project will cover the foundations of SwiftUI components. We will discuss all
    this in the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将评估为Apple Watch设计健身伴侣应用程序所需的需求。然后，我们将讨论设计规范，这将使我们更好地了解所需的内容以及如何将这些内容整合在一起。接下来将是编码过程，我们将在这两章中构建健身应用程序。本项目将涵盖SwiftUI组件的基础。我们将在以下章节中讨论所有这些内容：
- en: Understanding the design specifications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解设计规范
- en: Building the fitness app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建健身应用程序
- en: In this chapter, we will gain a better understanding of the requirements and
    design of our application. The foundations we have established over the previous
    chapters in SwiftUI components, design, and Xcode navigation will serve as a strong
    starting point for the next chapter. Stay tuned for more progress as we continue
    to build upon these foundations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更好地理解我们应用程序的需求和设计。在前几章中，我们在SwiftUI组件、设计和Xcode导航方面建立的基础将作为下一章的强大起点。请继续关注我们的进展，因为我们将继续在这些基础上构建。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您从苹果的App Store下载Xcode版本14或更高版本。
- en: To install it, just search for Xcode in the App Store, then select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，只需在App Store中搜索Xcode，然后选择并下载最新版本。打开Xcode并遵循任何额外的安装说明。一旦Xcode打开并启动，您就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 14版本具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含iOS 16、iPadOS 16、macOS 12.3、tvOS 16和watchOS 9的SDK。
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持iOS 11或更高版本、tvOS 11或更高版本和watchOS 4或更高版本在设备上的调试。
- en: Requires a Mac running macOS Monterey 12.5 or later.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 macOS Monterey 12.5 或更高版本的Mac。
- en: 'You can download the sample code from the following GitHub link: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下GitHub链接下载示例代码：[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将提供我们应用程序设计规范的明确说明，并查看应用程序的外观原型。
- en: Understanding the Design Specifications
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解设计规范
- en: This section outlines the design specifications for our fitness companion application.
    Our goal is to implement features that will enhance the user experience. To achieve
    this, we have put ourselves in the user’s shoes to determine how they will use
    the app. We have then broken down the process into individual steps to identify
    the necessary features. By doing this, we can ensure that our fitness app will
    be user-friendly and efficient.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本节概述了我们健身伴侣应用程序的设计规范。我们的目标是实现增强用户体验的功能。为了实现这一目标，我们站在用户的角度来确定他们将如何使用应用程序。然后我们将这个过程分解成单个步骤，以确定必要的功能。通过这样做，我们可以确保我们的健身应用程序将易于使用且高效。
- en: In this section, we will look at the design specifications of our fitness companion
    application and describe the features we are going to implement. The best method
    for figuring out the features required is to put yourself in the user’s shoes
    to determine how they will use the app and break it down into individual steps.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看我们健身伴侣应用程序的设计规范，并描述我们将要实现的功能。确定所需功能的最有效方法是站在用户的角度，确定他们将如何使用应用程序，并将其分解为单个步骤。
- en: Our fitness application has been designed with several features to assist users
    in achieving their fitness goals. We are confident that our app will provide users
    with a seamless and effective fitness experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的健身应用程序已经设计了几项功能，以帮助用户实现他们的健身目标。我们相信我们的应用程序将为用户提供无缝且有效的健身体验。
- en: 'The features we would like our app to have are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的应用程序拥有的功能如下：
- en: Current time
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前时间
- en: Active/workout time
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动/锻炼时间
- en: BPM (beats per minute)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每分钟心率（BPM）
- en: Total calories burned
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总消耗卡路里
- en: Activity
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动
- en: Views that can be swiped
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滑动视图
- en: Starting a new workout
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始新的锻炼
- en: Pausing a workout
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停锻炼
- en: Ending a workout
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束锻炼
- en: Locking a workout
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定锻炼
- en: Goals
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标
- en: Different exercises
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的锻炼
- en: 'After listing the ideal features, it is crucial to determine which ones are
    mandatory. Understanding the end use of our product is key. For me, the purpose
    of creating this fitness companion app is to provide a solid foundation for adding
    more advanced functionality later. We will not be implementing all the features
    in the preceding list, as it would be beneficial to try and implement them on
    your own as extra tasks to put the concepts you’ve learned into practice. Therefore,
    the following are the core features we will be implementing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在列出理想功能后，确定哪些是必需的至关重要。理解我们产品的最终用途是关键。对我来说，创建这个健身伴侣应用程序的目的是为了提供一个坚实的基础，以便以后添加更高级的功能。我们不会实现前面列表中的所有功能，因为这有利于尝试自己实现它们，作为将所学概念付诸实践的任务。因此，以下是我们将实现的核心功能：
- en: Current time
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前时间
- en: Active/workout time
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动/锻炼时间
- en: BPM (beats per minute)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每分钟心率（BPM）
- en: Total calories burned
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总消耗卡路里
- en: Activity
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动
- en: Views that can be swiped
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滑动视图
- en: Starting a new workout icon
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始新的锻炼图标
- en: Pausing a workout icon
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停锻炼图标
- en: Ending a workout icon
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束锻炼图标
- en: Locking a workout icon
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定锻炼图标
- en: Once you have finished reading this chapter and the following one, you will
    be ready to tackle the remaining features on your own. The next section will outline
    the acceptance criteria for our application, providing you with the necessary
    guidelines to ensure its success.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 读完本章和下一章后，你将准备好独立处理剩余的功能。下一节将概述我们应用程序的验收标准，为你提供确保其成功的必要指南。
- en: Acceptance criteria for our app
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应用程序的验收标准
- en: 'In this section, we will outline the mandatory requirements for our application.
    These requirements are crucial for the end product and must be measurable. We
    need to ensure that these requirements are met to deliver a successful application.
    Let’s get started:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将概述我们应用程序的强制性要求。这些要求对于最终产品至关重要，并且必须是可衡量的。我们需要确保满足这些要求，以交付一个成功的应用程序。让我们开始吧：
- en: Current time – this will show the actual time as per your time zone.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前时间 – 这将显示你的时区实际时间。
- en: Active/workout time – this will be a live timer that shows the current workout
    time.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动/锻炼时间 – 这将是一个实时计时器，显示当前的锻炼时间。
- en: BPM (beats per minute) – this label will be linked to a variable to show the
    user’s heartbeats per minute.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每分钟心率（BPM） – 这个标签将链接到一个变量，以显示用户每分钟的心跳次数。
- en: Total calories burned – this will display the calories burned and will be linked
    to the calories variable.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总消耗卡路里 – 这将显示消耗的卡路里，并将链接到卡路里变量。
- en: Activity – this will be used to display the current activity; for example, running,
    swimming, yoga, and so on.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动 – 这将用于显示当前活动；例如，跑步、游泳、瑜伽等。
- en: Views that can be swiped – this will allow us to have two separate screens on
    a single page and expand it as our needs increase.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滑动视图 – 这将允许我们在单页上有两个独立的屏幕，并根据我们的需求增加。
- en: Starting a new workout – a button composed of an image and text item will allow
    the user to start the workout.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始新的锻炼 – 一个由图像和文本项组成的按钮将允许用户开始锻炼。
- en: Pausing a workout icon – this button will also be composed of an image and text
    item that will be used to pause the workout.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停锻炼图标 – 这个按钮也将由图像和文本项组成，将用于暂停锻炼。
- en: Ending a workout icon – another button, similar to the previous two, will be
    used for ending the workout.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束锻炼图标 – 另一个按钮，与前面的两个类似，将用于结束锻炼。
- en: Locking a workout icon – finally, this button will be used for locking the workout.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定锻炼图标 – 最后，这个按钮将用于锁定锻炼。
- en: To ensure the success of the application, it is crucial to develop test cases
    that measure the acceptance criteria. These test cases should simulate real-life
    scenarios and conditions in which the end user will use the application. By doing
    so, we can accurately measure the performance level that needs to be obtained
    for the application to be considered successful. Therefore, creating detailed
    test cases or scenarios is necessary to ensure the application meets the expected
    standards.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保应用程序的成功，开发测试用例来衡量验收标准至关重要。这些测试用例应模拟最终用户使用应用程序的真实场景和条件。通过这样做，我们可以准确测量应用程序需要达到的性能水平，以便被认为是成功的。因此，创建详细的测试用例或场景是确保应用程序达到预期标准所必需的。
- en: Wireframe for our app
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们应用的线框
- en: 'Wireframing is an essential tool for designing layouts. It provides an overview
    of how the layout will look. The wireframe for the current activity in the fitness
    application is depicted in the following figure:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 线框是设计布局的一个基本工具。它提供了布局外观的概述。健身应用当前活动的线框如图所示：
- en: '![Figure 8.1 – Wireframe for our watch app](img/B18783_08_001.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 我们手表应用的线框](img/B18783_08_001.jpg)'
- en: Figure 8.1 – Wireframe for our watch app
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 我们手表应用的线框
- en: 'The following figure shows the wireframe for the view that allows you to start,
    stop, and pause activities:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了允许你开始、停止和暂停活动的视图线框：
- en: '![Figure 8.2 – Activity button wireframe](img/B18783_08_002.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 活动按钮线框](img/B18783_08_002.jpg)'
- en: Figure 8.2 – Activity button wireframe
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 活动按钮线框
- en: We have now seen the wireframes for our fitness application. These wireframes
    will serve as the initial foundation for building the UI of our application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了我们健身应用的线框。这些线框将作为构建我们应用程序 UI 的初始基础。
- en: In the next section, we will construct the interface for our application and
    verify that it matches the design we created in the wireframe. While we will follow
    the same process, there may be minor discrepancies. Our primary focus will be
    on the initial view in this chapter, with the second view being addressed in the
    subsequent chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建我们应用程序的界面，并验证它是否与我们在线框中创建的设计相匹配。虽然我们将遵循相同的过程，但可能会有细微的差异。我们本章的重点将是初始视图，第二个视图将在下一章中讨论。
- en: Building the Fitness App
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建健身应用
- en: 'We will now build the UI for the sidebar. First, let’s create our project.
    Follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将构建侧边栏的 UI。首先，让我们创建我们的项目。按照以下步骤操作：
- en: 'Open Xcode and select **Create a new** **Xcode Project**:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode 并选择**创建一个新的** **Xcode 项目**：
- en: '![Figure 8.3 – Create a new Xcode project](img/B18783_08_003.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 创建一个新的 Xcode 项目](img/B18783_08_003.jpg)'
- en: Figure 8.3 – Create a new Xcode project
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 创建一个新的 Xcode 项目
- en: 'Now we will choose the template for our application. As we are creating an
    Apple Watch application, we will select **WatchOS** from the top, then select
    **App**, and click **Next**:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将选择我们应用程序的模板。由于我们正在创建一个 Apple Watch 应用程序，我们将从顶部选择**WatchOS**，然后选择**应用**，并点击**下一步**：
- en: '![Figure 8.4 – Xcode project template selection](img/B18783_08_004.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – Xcode 项目模板选择](img/B18783_08_004.jpg)'
- en: Figure 8.4 – Xcode project template selection
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – Xcode 项目模板选择
- en: 'We will now choose the options for our project. Here, there is only one crucial
    thing to select/set. Make sure **Watch-only App** is selected:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将选择我们项目的选项。在这里，只有一个关键的选择/设置。确保**仅查看应用**被选中：
- en: '![Figure 8.5 – Xcode project options](img/B18783_08_005.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – Xcode 项目选项](img/B18783_08_005.jpg)'
- en: Figure 8.5 – Xcode project options
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – Xcode 项目选项
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following figure:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你按下**下一步**，你可以选择在哪里创建你的项目，如图所示：
- en: '![Figure 8.6 – Xcode project save directory](img/B18783_08_006.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – Xcode 项目保存目录](img/B18783_08_006.jpg)'
- en: Figure 8.6 – Xcode project save directory
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – Xcode 项目保存目录
- en: 'Once you have found the location where you would like to create it, click **Create**
    in the bottom right. Xcode shows your project in all its glory, as seen in the
    following figure:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你找到了你想要创建它的位置，点击右下角的**创建**。Xcode 以其全部荣耀显示了你的项目，如图所示：
- en: '![Figure 8.7 – New Xcode project overview](img/B18783_08_007.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 新 Xcode 项目概览](img/B18783_08_007.jpg)'
- en: Figure 8.7 – New Xcode project overview
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 新 Xcode 项目概览
- en: In this section, we set up our WatchOS project. Now that we are all set up,
    we will implement the interface for the first page of our fitness application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们设置了我们的 WatchOS 项目。现在我们已经设置好了，我们将实现健身应用第一页的界面。
- en: Activity Details
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动详情
- en: In this section, we will implement the first page of the fitness application,
    which will represent the current activity details. As a reminder, refer to *Figure
    8**.1* to see what it looks like.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现健身应用的第一个页面，它将代表当前活动的详细信息。作为提醒，请参考*图 8**.1* 来查看其外观。
- en: There are five main elements to the current activity screen. As a little task,
    see whether you can figure out what they are. Don’t worry if you don’t know the
    exact UI component names; we will look at these components in the following section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当前活动屏幕有五个主要元素。作为一个小任务，看看你是否能找出它们是什么。如果你不知道确切的 UI 组件名称，不要担心；我们将在下一节中查看这些组件。
- en: Text
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本
- en: 'A text component displays a string of characters, numerals, or even icons,
    all of which can be used in conjunction with each other. For us, it will be used
    to display all five components as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文本组件可以显示一串字符、数字，甚至图标，所有这些都可以相互结合使用。对我们来说，它将用于显示以下五个组件：
- en: 'Current time:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前时间：
- en: '![Figure 8.8 – Current time label](img/B18783_08_008.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 当前时间标签](img/B18783_08_008.jpg)'
- en: Figure 8.8 – Current time label
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 当前时间标签
- en: 'Activity running time:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动运行时间：
- en: '![Figure 8.9 – Activity time label](img/B18783_08_009.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 活动时间标签](img/B18783_08_009.jpg)'
- en: Figure 8.9 – Activity time label
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 活动时间标签
- en: 'Beats per minute (BPM):'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每分钟节拍（BPM）：
- en: '![Figure 8.10 – BPM label](img/B18783_08_010.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – BPM 标签](img/B18783_08_010.jpg)'
- en: Figure 8.10 – BPM label
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – BPM 标签
- en: 'Calories burned:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消耗卡路里：
- en: '![Figure 8.11 – Calories label](img/B18783_08_011.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 卡路里标签](img/B18783_08_011.jpg)'
- en: Figure 8.11 – Calories label
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 卡路里标签
- en: 'Current activity:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前活动：
- en: '![Figure 8.12 – Current activity label](img/B18783_08_012.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 当前活动标签](img/B18783_08_012.jpg)'
- en: Figure 8.12 – Current activity label
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 当前活动标签
- en: Important note
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To rename views, please refer to the *Renaming views* section in the previous
    chapter to revisit the concept.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名视图，请参考前一章中的*重命名视图*部分以回顾该概念。
- en: In this section, we analyzed the acceptance criteria along with the requirements
    of our fitness companion application. We also broke down the wireframes, enabling
    us to determine how the application works and is structured. We will utilize this
    knowledge going forward into the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们分析了验收标准以及我们的健身伴侣应用的要求。我们还分解了线框图，使我们能够确定应用程序的工作方式和结构。我们将利用这些知识在下一节中进行。
- en: Implementing the Current Activity UI
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现当前活动 UI
- en: In this section, we will use the newly set up project to start the coding of
    our fitness watch application. We will implement the current activity UI, which
    will display the information for the current activity.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用新设置的项目开始我们的健身手表应用的编码。我们将实现当前活动 UI，它将显示当前活动的信息。
- en: As we have created a fresh project, the coding standards aren’t in line with
    my personal preference. So, firstly, I will change the standards. Feel free to
    take a few moments to do the same.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们创建了一个全新的项目，编码标准并不符合我的个人偏好。因此，首先，我将更改标准。请随意花几分钟时间做同样的事情。
- en: 'If you run the newly created application as it is, you will notice that we
    already have the current time in the top right, as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接运行新创建的应用程序，你会注意到我们已经在右上角显示了当前时间，如下面的截图所示：
- en: '![Figure 8.13 – Default time](img/B18783_08_013.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 默认时间](img/B18783_08_013.jpg)'
- en: Figure 8.13 – Default time
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 默认时间
- en: 'It’s great for us, as the time is already in place by default. There may be
    scenarios where you want to remove the time, but as we do not, we can proceed.
    Now, we will move on to implementing the text items for the current activity.
    Implementing the remaining text items is actually very simple. Remove all the
    code within the VStack and add the following labels:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说是个好消息，因为时间已经默认设置好了。可能存在你想移除时间的情况，但既然我们不这么做，我们可以继续。现在，我们将继续实现当前活动的文本项。实现剩余的文本项实际上非常简单。从
    VStack 中移除所有代码，并添加以下标签：
- en: '[PRE0]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will result in the following layout:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下布局：
- en: '![Figure 8.14 – Text items added](img/B18783_08_014.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图8.14 – 添加的文本项](img/B18783_08_014.jpg)'
- en: Figure 8.14 – Text items added
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – 添加的文本项
- en: 'Firstly, we will set the alignment of the VStack to left-aligned, like so:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将设置VStack的对齐方式为左对齐，如下所示：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Though all the content is present, it’s not dynamic or styled. First, we will
    make it dynamic. To do so, create five variables to store the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有内容都存在，但它既不动态也不具有样式。首先，我们将使其变得动态。为此，创建五个变量来存储以下内容：
- en: Time counter – this will count up every second; it can be modified for more
    frequent counting.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间计数器 – 这将每秒增加一次；它可以修改为更频繁的计数。
- en: Timer string – this will use the time counter and convert it into 00:00:00 format.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计时字符串 – 这将使用时间计数器并将其转换为00:00:00格式。
- en: BPM – this will store the BPM number.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BPM – 这将存储BPM数值。
- en: Calories – this will store the number of calories burned during the workout
    session.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡路里 – 这将存储锻炼过程中消耗的卡路里数。
- en: Activity – this will inform the user which workout is active.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动 – 这将通知用户哪个锻炼是活跃的。
- en: 'The code for this is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的代码：
- en: '[PRE2]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will create a timer that runs every second:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个每秒运行一次的计时器：
- en: '[PRE3]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, it is time to link these variables and the timer to the appropriate components.
    Firstly, add an `onReceive` event to the timer text component, like so:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将这些变量和计时器链接到适当的组件了。首先，向计时器文本组件添加一个`onReceive`事件，如下所示：
- en: '[PRE4]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s take a look at what we just did. The `onReceive` event takes the timer
    as the parameter, which is used to observe how often the published events are
    triggered by the timer. In each pass, we increment the counter by one, so the
    counter is the number of seconds elapsed. Then, we create constants for hours,
    minutes, and seconds. We do some simple mathematical calculations to figure out
    how many hours, minutes, and seconds the timer has been running. Finally, we will
    format our `timerString` to show `hours:minutes:seconds`. Running the application
    will show the following result:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们刚才做了什么。`onReceive`事件将计时器作为参数，用于观察计时器触发的发布事件频率。在每次遍历中，我们将计数器增加一，因此计数器是已过去秒数的数量。然后，我们为小时、分钟和秒创建常量。我们进行一些简单的数学计算，以确定计时器已经运行了多少小时、分钟和秒。最后，我们将`timerString`格式化以显示`小时:分钟:秒`。运行应用程序将显示以下结果：
- en: '![Figure 8.15 – Dynamically linked variables](img/B18783_08_015.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图8.15 – 动态链接的变量](img/B18783_08_015.jpg)'
- en: Figure 8.15 – Dynamically linked variables
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – 动态链接的变量
- en: 'You may notice that the time is currently in the format of `0:0:0`, not `00:00:00`.
    Fixing this is super simple; we need to add a formatter onto each string to format
    it using two decimal places for the hours, minutes, and seconds. Update the `timerString`
    as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，时间目前是以`0:0:0`的格式显示，而不是`00:00:00`。修复这个问题非常简单；我们需要在每个字符串上添加一个格式化器，以便使用两位小数格式化小时、分钟和秒。更新`timerString`如下：
- en: '[PRE5]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, the application will appear as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序将显示如下：
- en: "![Figure 8.16 – Formatted time\uFEFFrString](img/B18783_08_016.jpg)"
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: "![图8.16 – 格式化的time\uFEFFrString](img/B18783_08_016.jpg)"
- en: Figure 8.16 – Formatted timerString
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 格式化的timerString
- en: 'It is looking better now. The BPM, calories, and current activity labels are
    all fine; we just need to modify the current activity time label. Three things
    need to be done: make it bigger, change the color to yellow, and add some padding
    below. Doing all of this is simple. Modify the current activity time text item,
    like so:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来更好了。BPM、卡路里和当前活动标签都很好；我们只需要修改当前活动时间标签。需要做三件事：将其放大，将颜色改为黄色，并在下方添加一些填充。完成所有这些都很简单。修改当前活动时间文本项，如下所示：
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once we run the application, we will see we have completed the code for this
    chapter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行应用程序，我们将看到我们已经完成了本章的代码。
- en: '![Figure 8.17 – Current activity time styled](img/B18783_08_017.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17 – 当前活动时间样式化](img/B18783_08_017.jpg)'
- en: Figure 8.17 – Current activity time styled
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 当前活动时间样式化
- en: In this section, we implemented the current activity screen for our fitness
    companion application. You learned that even though Apple WatchOS is the newest
    of the four SDKs and seems difficult, it is just the same and very simple to use.
    In the next chapter, we will implement a swipe view to add the activity button
    screen.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们为我们的健身伴侣应用程序实现了当前活动屏幕。你了解到，尽管Apple WatchOS是四个SDK中最新的，看起来有些困难，但实际上它和其它的一样简单易用。在下一章中，我们将实现一个滑动视图来添加活动按钮屏幕。
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the design of our fitness companion application.
    We looked at wireframes and broke each element down into SwiftUI components. We
    then implemented the SwiftUI components to match the design from the wireframes
    for the current activity screen. We also looked at the requirements and design
    specifications for building this application, then simplified it to the core features
    our app will provide.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了我们的健身伴侣应用程序的设计。我们研究了线框图，并将每个元素分解为 SwiftUI 组件。然后，我们将 SwiftUI 组件实现以匹配线框图中的设计，用于当前活动屏幕。我们还研究了构建此应用程序的需求和设计规范，然后将其简化为应用程序将提供的核心功能。
- en: Next, we designed our fitness companion app by creating wireframes and breaking
    down each element into SwiftUI components. We implemented these components to
    match the wireframe design for the current activity screen. We also reviewed the
    requirements and design specifications for building the app and simplified it
    to focus on the core features it will provide. There are always features that
    are nice to have but are inevitably cut from the first release, or what many call
    the **MVP** (**minimum viable product**). This is effectively what we did. It
    is crucial to curb the scope to prevent it from becoming too large and out of
    hand.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过创建线框图并将每个元素分解为 SwiftUI 组件来设计我们的健身伴侣应用程序。我们将这些组件实现以匹配当前活动屏幕的线框图设计。我们还审查了构建应用程序的需求和设计规范，并将其简化以专注于它将提供的核心功能。总有一些功能是很好但不可避免地要从首次发布中裁剪掉的，或者许多人称之为
    **MVP**（**最小可行产品**）。这正是我们所做的。限制范围以防止其变得过大且失控是至关重要的。
- en: In the next chapter, we’ll look at implementing the activity button screen for
    our fitness companion application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨实现健身伴侣应用程序的活动按钮屏幕。
