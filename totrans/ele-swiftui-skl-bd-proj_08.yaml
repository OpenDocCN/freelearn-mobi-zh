- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Watch Project – Fitness Companion Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous six chapters, we have created various applications for our Apple
    devices. These chapters taught us how to set up projects for the iPhone, iPad,
    and Mac. They also demonstrated the design differences between small and large
    displays. In this chapter, we will be designing a fitness companion application
    for the Apple Watch. Due to the small screen size of the watch, we will need to
    simplify the design. We will assess the requirements and discuss the design specifications
    before starting the coding process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will assess the requirements needed for designing a fitness companion
    application for the Apple Watch. We will then move on to discussing the design
    specifications, which will give us a better understanding of what is required
    and how it will all fit together. This will be followed by the coding process,
    where we will build the fitness app over the course of these two chapters. This
    project will cover the foundations of SwiftUI components. We will discuss all
    this in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the design specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the fitness app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will gain a better understanding of the requirements and
    design of our application. The foundations we have established over the previous
    chapters in SwiftUI components, design, and Xcode navigation will serve as a strong
    starting point for the next chapter. Stay tuned for more progress as we continue
    to build upon these foundations.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install it, just search for Xcode in the App Store, then select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can download the sample code from the following GitHub link: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section outlines the design specifications for our fitness companion application.
    Our goal is to implement features that will enhance the user experience. To achieve
    this, we have put ourselves in the user’s shoes to determine how they will use
    the app. We have then broken down the process into individual steps to identify
    the necessary features. By doing this, we can ensure that our fitness app will
    be user-friendly and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at the design specifications of our fitness companion
    application and describe the features we are going to implement. The best method
    for figuring out the features required is to put yourself in the user’s shoes
    to determine how they will use the app and break it down into individual steps.
  prefs: []
  type: TYPE_NORMAL
- en: Our fitness application has been designed with several features to assist users
    in achieving their fitness goals. We are confident that our app will provide users
    with a seamless and effective fitness experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The features we would like our app to have are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Current time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active/workout time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPM (beats per minute)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total calories burned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views that can be swiped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a new workout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pausing a workout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ending a workout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking a workout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different exercises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After listing the ideal features, it is crucial to determine which ones are
    mandatory. Understanding the end use of our product is key. For me, the purpose
    of creating this fitness companion app is to provide a solid foundation for adding
    more advanced functionality later. We will not be implementing all the features
    in the preceding list, as it would be beneficial to try and implement them on
    your own as extra tasks to put the concepts you’ve learned into practice. Therefore,
    the following are the core features we will be implementing:'
  prefs: []
  type: TYPE_NORMAL
- en: Current time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active/workout time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPM (beats per minute)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total calories burned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views that can be swiped
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a new workout icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pausing a workout icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ending a workout icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking a workout icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have finished reading this chapter and the following one, you will
    be ready to tackle the remaining features on your own. The next section will outline
    the acceptance criteria for our application, providing you with the necessary
    guidelines to ensure its success.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance criteria for our app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will outline the mandatory requirements for our application.
    These requirements are crucial for the end product and must be measurable. We
    need to ensure that these requirements are met to deliver a successful application.
    Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Current time – this will show the actual time as per your time zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active/workout time – this will be a live timer that shows the current workout
    time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPM (beats per minute) – this label will be linked to a variable to show the
    user’s heartbeats per minute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Total calories burned – this will display the calories burned and will be linked
    to the calories variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity – this will be used to display the current activity; for example, running,
    swimming, yoga, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views that can be swiped – this will allow us to have two separate screens on
    a single page and expand it as our needs increase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting a new workout – a button composed of an image and text item will allow
    the user to start the workout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pausing a workout icon – this button will also be composed of an image and text
    item that will be used to pause the workout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ending a workout icon – another button, similar to the previous two, will be
    used for ending the workout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locking a workout icon – finally, this button will be used for locking the workout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To ensure the success of the application, it is crucial to develop test cases
    that measure the acceptance criteria. These test cases should simulate real-life
    scenarios and conditions in which the end user will use the application. By doing
    so, we can accurately measure the performance level that needs to be obtained
    for the application to be considered successful. Therefore, creating detailed
    test cases or scenarios is necessary to ensure the application meets the expected
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe for our app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wireframing is an essential tool for designing layouts. It provides an overview
    of how the layout will look. The wireframe for the current activity in the fitness
    application is depicted in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Wireframe for our watch app](img/B18783_08_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Wireframe for our watch app
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the wireframe for the view that allows you to start,
    stop, and pause activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Activity button wireframe](img/B18783_08_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Activity button wireframe
  prefs: []
  type: TYPE_NORMAL
- en: We have now seen the wireframes for our fitness application. These wireframes
    will serve as the initial foundation for building the UI of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will construct the interface for our application and
    verify that it matches the design we created in the wireframe. While we will follow
    the same process, there may be minor discrepancies. Our primary focus will be
    on the initial view in this chapter, with the second view being addressed in the
    subsequent chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Fitness App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now build the UI for the sidebar. First, let’s create our project.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Xcode and select **Create a new** **Xcode Project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Create a new Xcode project](img/B18783_08_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Create a new Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will choose the template for our application. As we are creating an
    Apple Watch application, we will select **WatchOS** from the top, then select
    **App**, and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Xcode project template selection](img/B18783_08_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Xcode project template selection
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now choose the options for our project. Here, there is only one crucial
    thing to select/set. Make sure **Watch-only App** is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Xcode project options](img/B18783_08_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Xcode project options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Xcode project save directory](img/B18783_08_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Xcode project save directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have found the location where you would like to create it, click **Create**
    in the bottom right. Xcode shows your project in all its glory, as seen in the
    following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – New Xcode project overview](img/B18783_08_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – New Xcode project overview
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we set up our WatchOS project. Now that we are all set up,
    we will implement the interface for the first page of our fitness application.
  prefs: []
  type: TYPE_NORMAL
- en: Activity Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will implement the first page of the fitness application,
    which will represent the current activity details. As a reminder, refer to *Figure
    8**.1* to see what it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: There are five main elements to the current activity screen. As a little task,
    see whether you can figure out what they are. Don’t worry if you don’t know the
    exact UI component names; we will look at these components in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A text component displays a string of characters, numerals, or even icons,
    all of which can be used in conjunction with each other. For us, it will be used
    to display all five components as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Current time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Current time label](img/B18783_08_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Current time label
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity running time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Activity time label](img/B18783_08_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Activity time label
  prefs: []
  type: TYPE_NORMAL
- en: 'Beats per minute (BPM):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – BPM label](img/B18783_08_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – BPM label
  prefs: []
  type: TYPE_NORMAL
- en: 'Calories burned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Calories label](img/B18783_08_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Calories label
  prefs: []
  type: TYPE_NORMAL
- en: 'Current activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Current activity label](img/B18783_08_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Current activity label
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To rename views, please refer to the *Renaming views* section in the previous
    chapter to revisit the concept.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we analyzed the acceptance criteria along with the requirements
    of our fitness companion application. We also broke down the wireframes, enabling
    us to determine how the application works and is structured. We will utilize this
    knowledge going forward into the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Current Activity UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the newly set up project to start the coding of
    our fitness watch application. We will implement the current activity UI, which
    will display the information for the current activity.
  prefs: []
  type: TYPE_NORMAL
- en: As we have created a fresh project, the coding standards aren’t in line with
    my personal preference. So, firstly, I will change the standards. Feel free to
    take a few moments to do the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the newly created application as it is, you will notice that we
    already have the current time in the top right, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Default time](img/B18783_08_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Default time
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s great for us, as the time is already in place by default. There may be
    scenarios where you want to remove the time, but as we do not, we can proceed.
    Now, we will move on to implementing the text items for the current activity.
    Implementing the remaining text items is actually very simple. Remove all the
    code within the VStack and add the following labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Text items added](img/B18783_08_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Text items added
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will set the alignment of the VStack to left-aligned, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Though all the content is present, it’s not dynamic or styled. First, we will
    make it dynamic. To do so, create five variables to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Time counter – this will count up every second; it can be modified for more
    frequent counting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timer string – this will use the time counter and convert it into 00:00:00 format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BPM – this will store the BPM number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calories – this will store the number of calories burned during the workout
    session.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity – this will inform the user which workout is active.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a timer that runs every second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is time to link these variables and the timer to the appropriate components.
    Firstly, add an `onReceive` event to the timer text component, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at what we just did. The `onReceive` event takes the timer
    as the parameter, which is used to observe how often the published events are
    triggered by the timer. In each pass, we increment the counter by one, so the
    counter is the number of seconds elapsed. Then, we create constants for hours,
    minutes, and seconds. We do some simple mathematical calculations to figure out
    how many hours, minutes, and seconds the timer has been running. Finally, we will
    format our `timerString` to show `hours:minutes:seconds`. Running the application
    will show the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Dynamically linked variables](img/B18783_08_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Dynamically linked variables
  prefs: []
  type: TYPE_NORMAL
- en: 'You may notice that the time is currently in the format of `0:0:0`, not `00:00:00`.
    Fixing this is super simple; we need to add a formatter onto each string to format
    it using two decimal places for the hours, minutes, and seconds. Update the `timerString`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the application will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.16 – Formatted time\uFEFFrString](img/B18783_08_016.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Formatted timerString
  prefs: []
  type: TYPE_NORMAL
- en: 'It is looking better now. The BPM, calories, and current activity labels are
    all fine; we just need to modify the current activity time label. Three things
    need to be done: make it bigger, change the color to yellow, and add some padding
    below. Doing all of this is simple. Modify the current activity time text item,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once we run the application, we will see we have completed the code for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Current activity time styled](img/B18783_08_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Current activity time styled
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented the current activity screen for our fitness
    companion application. You learned that even though Apple WatchOS is the newest
    of the four SDKs and seems difficult, it is just the same and very simple to use.
    In the next chapter, we will implement a swipe view to add the activity button
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the design of our fitness companion application.
    We looked at wireframes and broke each element down into SwiftUI components. We
    then implemented the SwiftUI components to match the design from the wireframes
    for the current activity screen. We also looked at the requirements and design
    specifications for building this application, then simplified it to the core features
    our app will provide.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we designed our fitness companion app by creating wireframes and breaking
    down each element into SwiftUI components. We implemented these components to
    match the wireframe design for the current activity screen. We also reviewed the
    requirements and design specifications for building the app and simplified it
    to focus on the core features it will provide. There are always features that
    are nice to have but are inevitably cut from the first release, or what many call
    the **MVP** (**minimum viable product**). This is effectively what we did. It
    is crucial to curb the scope to prevent it from becoming too large and out of
    hand.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at implementing the activity button screen for
    our fitness companion application.
  prefs: []
  type: TYPE_NORMAL
