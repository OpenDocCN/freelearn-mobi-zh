- en: Chapter 6. Introduction to Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've successfully created the first part of the Event app, it is time
    to make it more functional. In this chapter, we will build onto our Event app
    by adding code that will enable guests to respond to the invitation by sending
    an RSVP (*répondez s'il vous plaît*—*please reply*, in French). The app will aggregate
    all the data and display a guest list so that both guests and party organizers
    can see who is attending.
  prefs: []
  type: TYPE_NORMAL
- en: In order for the app to collect all the RSVP data from individuals in a central
    repository, we will have to use an online database. App Inventor has built-in
    support for three online databases, TinyWebDB, and Google Fusion Tables (which
    we will use).
  prefs: []
  type: TYPE_NORMAL
- en: Both, TinyWebDB and Google Fusion Tables have their limitations in aggregating
    data. TinyWebDB, while easy to use, is not secure. This means that anyone has
    access to the database, could by mistake (or on purpose), delete or change the
    data that is collected. On the other hand, Google Fusion Tables is secure, but
    is more complicated to use. In order to integrate Fusion Tables into our app,
    while keeping the design of the app relatively simple, we had to make some tradeoffs.
    The learning objective is to introduce you to the process of building a database
    with a relatively simple app. But, as you will discover, the resulting app is
    challenging to disseminate to a broad public audience. At the time of publication
    for this book, another App Inventor database alternative, FirebaseDB was under
    development. We will offer updates about the adoption of FirebaseDB as it becomes
    available. You can check the supplementary materials on both the Packt Publishing
    and MIT App Inventor websites for new information about FirebaseDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a Google Fusion Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to establish Google API credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up an RSVP form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to push data from an App Inventor app into a Google Fusions Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to request and receive data from a Google Fusion Table into an App Inventor
    app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to display a guest list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this app, invitees will send an RSVP to let the party organizer (and other
    guests) know whether or not they can attend an event. So, naturally, we will have
    to include a mechanism to collate all of that distributed information into one
    central place. To achieve this, we will create an online database using a Google
    Fusion Table. In professional programming, this aspect is often referred to as
    creating the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Google Fusion Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Google Fusion Table, go to the [https://drive.google.com](https://drive.google.com)
    website on your computer and click on the big red button on the top-left side
    of the screen labeled **NEW**. Scroll down the list of options and select **More**
    and select **Google Fusion Tables**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have never used Google Fusion Tables before, chances are, when you click
    on **More**, you will not see the **Google Fusion Tables** option listed. If this
    is the case, select the last option with the plus sign, **Connect more apps**.
    A pop-up window will appear with a lot of apps that you can connect to your Google
    Drive. You should see a view similar to the following screenshot. At the top left
    of this pop-up window you will see a button that by default shows the word **All**.
    This button lets you filter the apps into various categories. Click on it and
    select the second option, **By Google**, from the drop-down menu, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you will see a list of all Google-created apps as shown on the right-hand
    side of the preceding screenshot. Find the Google Fusion Tables app in the list
    and click on it. After doing so, the next time you click the red **NEW** button
    in [https://drive.google.com](https://drive.google.com) and select **More**, Google
    **Fusion Tables** will appear as an option.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a new Fusion Table, you will be given the option to create an
    empty table (along with some other options). For our purpose, select **Create
    empty table**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will make the format of the table suitable for our app. First, rename
    the table to give it a meaningful name. Click on the current table name, which
    is **New Table**, in the top left corner. This will open a **Table information**
    window. Give your table a descriptive name such as `EventApp Table` and hit the
    **Save** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will need to make further modifications to the table before it is ready
    to be used as the backend of our Event app. By default, a blank row is inserted
    in Fusion Tables. We want our table to be completely empty. To clear out the table,
    select the **Edit** tab on the top left corner of the screen, below the table
    name. You will see a **Delete all rows** option; click on it and confirm that
    you want to delete all rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00168.jpeg)![Creating a Google Fusion
    Table](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a clean table, we need to decide what columns to use. For this
    Event app, we want to know who is coming (the name of the guest), how many people
    that person is bringing (the number of guests), and what items that guest is bringing
    to the party (potluck). This information is going to be used by the organizer
    to plan the party.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these three pieces of information will be saved in a column on the Fusion
    Table. Four columns are automatically included when a Fusion Table is created.
    Since we only need three columns, we are going to delete one of the four default
    columns and modify the other three.
  prefs: []
  type: TYPE_NORMAL
- en: The **Edit** tab that you clicked to delete all the rows and clean up the table
    also contains another option called **Change columns**. We will use that options
    several times now to make all the changes to the columns. The default column names
    are **Text**, **Number**, **Location**, and **Date**. We will change them to **Guest
    Names**, **NumGuests**, and **ItemsBringing**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the first column to **Guest Names**, click on the Edit tab and select
    the **Change columns** option and you will see the following screenshot. The first
    column is selected by default (the gray background on the left panel indicates
    it is active). Change the **Column name** to **Guest Names**. This column is already
    configured to save **Text** data (the **Type** option), hence we do not need to
    make any changes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have changed the first column, we will do the same to the second
    column. Select the second column (currently called **Number**). Once you click
    on it, the background will become gray. Now change the **Column name** to **NumGuests**.
    Since, this column is already configured to store numbers, we do not need to make
    any changes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to rename the third column (currently called **Location**). Just
    like the previous examples, select that column and change the name to **ItemsBringing**.
    By default this column is preconfigured to store **Location** data. We actually
    want to store **Text** data (items that guests will bring). So we need to change
    the datatype. When you click on **Location** (the **Type** option), a drop-down
    menu will appear as shown in the following screenshot. Select the **Text** option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, since we need only three columns, we will delete the fourth column
    by hovering over the fourth column to make it active (gray) and clicking on the
    **x** next to it (as shown in the following screenshot) and confirming the deletion
    in the pop-up box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00173.jpeg)![Creating a Google Fusion
    Table](img/00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the table is ready to be used, click on the **File** tab in the upper
    left corner and select **About this table** from the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another page will open with various details of the table. Note the information
    given in the very last piece of information, the **Id**, as shown in the following
    screenshot. Double-click on the alphanumeric string to highlight it, copy/paste
    it in another place on your computer, such as a Notepad file or an empty document.
    (You may have to use your browser''s copy/paste feature to do this, as keyboard
    shortcuts may not work. You can find copy/paste under the **Edit** menu heading
    at the top of your browser window.) You will use this **Id** in the App Inventor
    app to push/pull data to/from this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google Fusion Table](img/00176.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will make one small final change to the Fusion Table (to its **Sharing**
    settings) but, we are not ready to do that just yet. So keep the Fusion Table
    window open and start working with App Inventor in the separate browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the RSVP screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our app, we are asking the invited guests to provide their names, the total
    number of guests, and the food or drink to share at the potluck. Once a guest
    presses the **Send RSVP** button, something magical will happen. We will push
    all the data from the app to the Fusion Table that we created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the GUI in the designer window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 5](part0033_split_000.html#VF2I1-9c0b907946184095a315b26c8a9b12bc
    "Chapter 5. Building an Event App"), *Building an Event App* we created the `RSVP_Screen`
    and now we will build the GUI (Graphical User Interface) that the guests will
    use. Navigate to the RSVP screen in the **Designer** window. The screen is empty
    except for the background pool image and the navigation buttons that we added
    along the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you have already gained experience adding various components in the previous
    chapters, we are pretty confident about your abilities. Of course, we will help
    specify which components to use! The guest provides three pieces of data here:
    the name, the number of guests, and the item to bring. We will place all the components
    related to these three pieces of data within a VerticalArrangement for a streamlined
    look. Hence, the first component to add is: **VerticalArrangement**. Drag it to
    the **Viewer** and set its **Height** and **Width** properties to **Fill parent**.'
  prefs: []
  type: TYPE_NORMAL
- en: To collect the first piece of data, the name, add a **Label** and below that
    a **Textbox** by dragging them onto the Vertical Arrangement in the **Viewer**.
    Rename the **Label** to `NameLabel` and change the **BackgroundColor** property
    to **Dark Gray**. Check the **FontBold** property and change the **Text** property
    to **Name**.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, rename the **Textbox** to `NameTextBox`. Change the **Width** property
    to **Fill parent**. Type **Enter your first and last name** for the **Hint** property.
  prefs: []
  type: TYPE_NORMAL
- en: For the second piece of data, the number of guests, add a **Label** and another
    component called **ListPicker** (found just below the **Label** component in the
    **User Interface** palette). Drag the Components onto the VerticalArrangement
    underneath the Label and Textbox. Rename this Label to `GuestsLabel`. Change the
    **BackgroundColor** property to **Dark Gray**, check the **FontBold** property
    and change the **Text** property to **Number of guests (including you)**.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the ListPicker Component to track the number of people attending
    when a guest submits an RSVP. The ListPicker is a button that, when clicked, opens
    up a list of items from which a user can select. Rename the **ListPicker** to
    `NumGuestListPicker`. We will make just two changes to the **ListPicker** properties.
    Put `1,2,3,4,5,6,7` as the **ElementsFromString** property. These are the items
    what we want displayed when the user clicks the **NumGuestListPicker**. We are
    assuming the number of guests (including the person who is completing the RSVP)
    is in the range 1-7\. You can add more or fewer guest options as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Just remember that the comma-separated numbers that you specify are the options
    that the users will be able to select from. Finally, make the **Selection** property
    **1**. This means that, if the user does not choose a number from the **NumGuestListPicker**,
    the default value of 1 will be used to count the user who sent the RSVP.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the GUI in the designer window](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we will add a **Button** and rename it to `SendRSVPButton`. The user
    will click this button to send the RSVP after completing the form. Just as we
    did for the labels, make the **BackgroundColor** dark gray, and insert **Send
    RSVP** as the **Text** property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, drag the **FusiontablesControl** component from the **Storage Palette**
    drawer to the Viewer. (Notice how the **FusiontablesControl1** component drops
    down below the **Viewer**, because it is a non-visible component.) After you have
    added all the components, the `RSVP_Screen` will resemble the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the GUI in the designer window](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This completes the GUI for the `RSVP_Screen`. In professional programming lingo,
    this is also called creating the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Google Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fusion Tables is software that Google has designed. For various security- and
    privacy-related issues, Google only wants verified software to send/receive data
    to/from Fusion Tables. Hence, we need to establish our identity before our Event
    App can exchange data with Google Fusion Tables. In this section, we will describe
    how to create Google service-level authentication to establish this credential.
  prefs: []
  type: TYPE_NORMAL
- en: 'To establish the service-level authentication credentials, follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://console.developers.google.com/](https://console.developers.google.com/)
    and log in with your Google account if necessary. On the **Getting started** page,
    click on the **Use Google APIs** button as shown in the following screenshot:![Setting
    up Google Authentication](img/00179.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The acronym API stands for **Application Programming Interface**. To describe
    it in a very simple manner, an API defines a way for computers to interact with
    websites (essentially for software programs to interact). Developers at companies
    like Twitter, Facebook, and Google create protocols for their software to enable
    other programs to communicate with it. In this case App Inventor will be communicating
    with the Google Fusion Tables API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be prompted to create a new project that uses APIs. Name your project
    **Event App Project**. Make the selections shown in the following screenshot,
    and click on **Create**:![Setting up Google Authentication](img/00180.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side, you will see a tab named **Enabled APIs (7)**, as follows.
    Click on that tab:![Setting up Google Authentication](img/00181.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will show you a list of APIs that are enabled by default. Since we will
    not use these APIs, click on the **Disable** option next to each API and disable
    each one of them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00182.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'After you have disabled all APIs, your screen will look like the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00183.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Our next goal is to enable the one API that our app will use—the **Fusion Tables
    API**. To do so, look for the **Other popular APIs** column. You will find it
    to the bottom-right group of links (look for the blue hexagon icon), as shown
    in the screenshot that follows:![Setting up Google Authentication](img/00184.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Fusion Tables API** listed in this column. And then, in the next
    screen, click on the blue **Enable API** button shown in the following screenshot:![Setting
    up Google Authentication](img/00185.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have enabled the **Fusion Tables API**, it is time to create credentials
    (ways for software to verify the authenticity of other software). Click on the
    **Credentials** option on the left vertical pane, as shown in the following screenshot:![Setting
    up Google Authentication](img/00186.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will result in a pop-up window with the blue **Add credentials** button,
    as shown in the following screenshot. Click on that button and select the last
    option—**Service account**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00187.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In the next window, make the selections shown in the following screenshot and
    click on **Create**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00188.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'This will create the service account and download a special file onto your
    computer. This file has a `.p12` extension. Depending on your browser''s setting,
    you might see a window such as the following one. This window asks you where to
    save the file. Save the file somewhere on your hard drive and remember the location.
    We will upload this file in to App Inventor later on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00189.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you do not see the pop-up window like the one shown previously, in all likelihood
    your browser is set to download everything to the default `Downloads` folder.
    In that case, the `.p12` file will automatically be saved in that folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up Google Authentication](img/00190.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After this `.p12` file has been downloaded to to your computer, you will see
    a message resembling the one shown previously. Click the **Close** button to dismiss
    the message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have created the credentials we are going to use, Google will automatically
    generate an e-mail address that goes with this credential. This email address
    is something we will have to specify in App Inventor as well. As shown in the
    following screenshot, a long and complicated email address will be displayed under
    the **Service** accounts. Copy this email and paste it into the document that
    you used to store the ID of the Fusion Table that you created earlier. Just like
    the ID of the Fusion Table, you will need this email address later on:![Setting
    up Google Authentication](img/00191.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Fusion Tables API** is now enabled and the credentials are established.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sharing the Fusion Table with the service account email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you created the Fusion Table in a previous section, you used your own Google
    account to do so. So right now only you can access and change the Fusion Table.
    However, for this app to work, you need all your guests to have the ability to
    insert data into the Fusion Table and read from the Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: The service account email that you created in the previous step will come in
    handy to achieve just that. That email is associated with your app and not any
    individual. Hence, anyone else using the app should be able to access the Fusion
    Table as long as that email address has proper access to the Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: To enable the service level email access to the Fusion Table, go back to your
    Fusion Table (left open in the separate browser window/tab) and click on the blue
    **Share** button in the top-right corner. This will open the **Sharing settings**
    menu, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Copy and paste the service email address that you saved earlier into the **Invite
    people** box. Make sure the button next to the box says **Can edit**, and click
    on **Send**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing the Fusion Table with the service account email](img/00192.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This step ensures that any user of the app (not just you) is able to insert
    data into or receive data from the Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the app to the Google Fusion Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have created a Fusion Table and the GUI for the `RSVP_Screen`, and
    established our Google API credentials. Now it is time to create the code for
    `RSVP_Screen`.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the user clicks the **Send RSVP** button:'
  prefs: []
  type: TYPE_NORMAL
- en: The app takes the name from the **NameTextBox**, the selection from the **NumGuestListPicker**,
    and the contents of the **ItemsBringingTextBox** and inserts them as a single
    row in the appropriate column in the Fusion Table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then the app clears textboxes and reset the Listpicker selection to 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We created the service-level credentials (the `.p12` file and the service-level
    email address) so that our app is authorized to send or receive information from
    Google Fusion Tables. Next, we need to provide the **FusiontablesControl** component
    in our app with this information. We want to do this when a user opens the `RSVP_Screen`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, once in the **RSVP_Screen** in the Designer,
    select the **FusionTablesControl1** component under the **Components** column.
    This will display all the properties of **FusiontablesControl1**. Under the **KeyFile**
    property, click currently shows **None**. Then click on the **Upload File** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our goal](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open up another pop-up, which will let you select the file that you
    want to upload. The following screenshot shows the pop-up. Select the `.p12` file
    that you earlier downloaded to your computer and click on the **OK** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our goal](img/00194.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, copy the service-level email address that you have saved in a document
    and paste it into the **ServieAccountEmail** property.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, check the **UserServiceAuthentication** checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![Our goal](img/00195.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pushing data to the Fusion Table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using multiple screens, you want to keep your blocks organized according
    to screen in the Blocks editor. Since we are getting ready to program blocks for
    the RSVP_Screen, we need to make sure we are on the RSVP_Screen in the Blocks
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check this, look at the first of three buttons in the green menu bar next
    to the EventApp name. If you just finished working on the RSVP_Screen in the Designer
    and switched over to the Blocks editor, you will be on RSVP_Screen. But if not,
    you can easily navigate to RSVP_Screen by clicking the button that displays another
    screen name (Screen1 as shown in the following screenshot) and choosing RSVP_
    Screen from the drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing data to the Fusion Table](img/00196.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks the **Send RSVP** button, we want to insert all three
    pieces of data into the Fusion Table. The following screenshot shows the block
    to achieve just this. This might look intimidating, but is actually quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing data to the Fusion Table](img/00197.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since we want our app to react to the **Send RSVP** button click, we will of
    course need to get a **SendRSVPButton.Click** event. As you might have already
    guessed, you will find this event block in the Blocks Palette in the **SendRSVPButton**
    Blocks drawer.
  prefs: []
  type: TYPE_NORMAL
- en: The purple **call FusiontablesControl1.InsertRow** block enables an app to insert
    a row into a Fusion Table. In the **Fusiontables1** Blocks drawer, select and
    place the **FusiontablesControl1.InsertRow** block within the **SendRSVPButton.Click**
    event.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the **InsertRow** block has three empty sockets. The first socket
    is the **Id** of the table that you want to use. Recall that we found the **Id**
    of our table during the last step when creating the table. Copy and paste that
    **Id** here within an empty **Text** block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second socket of the **InsertRow** block, we will specify the column
    names. When inserting a row with multiple pieces (columns) of data into a Fusion
    Table, we need to specify which columns those pieces of data fit into. Recall
    that we named our columns **Guest Names**, **NumGuests**, and **ItemsBringing**.
    In a blank **Text** block, enter the column names within single-quotes, separated
    by commas, as shown in the following screenshot (note there are no spaces):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing data to the Fusion Table](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The third and final piece of information that the **InsertRow** block needs
    is the actual values to insert into the Fusion Table. Just like the column names,
    we will be entering multiple pieces of data into a single row in the Fusion Table.
    As with the columns, these three pieces of data must be entered within single
    quotes and separated by commas but we will insert them a little differently. To
    create one single-quoted, comma-separated text from three pieces of information
    that a guest will enters in the three separate fields in the **RSVP_Screen**,
    we will use a **join** block, From the built-in **Text** Block drawer, drag and
    connect the **join** block to the values socket of **InsertRow**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to join 11 things—three pieces of information, six single quotes
    (one before and one after each piece of information), and two commas to separate
    the three pieces of single-quoted information. By default, the **join** block
    joins two things. So we need to make room for nine more items. Click on the blue
    button on the top left corner of the **join** block, and drag the string block
    on the left of the pop-up into the join block on the right of the pop-up, shown
    as follows. This will create more sockets in the **join** block. Do this nine
    times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pushing data to the Fusion Table](img/00199.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first, third, fifth, seventh, ninth, and eleventh **join** sockets will
    contain a single quote, entered into a Text box. The fourth and eight sockets
    will contain a comma entered into a Text box. In the second socket, the app will
    get the first set of information that a user enters: their first and last name.
    So, we need a block that allows the user to enter a name. You will find it in
    the **NameTextBox** blocks. Select and connect the light green **NameTextBox.Text**
    block into the second join socket.'
  prefs: []
  type: TYPE_NORMAL
- en: The sixth socket will get the number of guests that the user selected from the
    list picker. In the **NumGuestListPicker** blocks, select and connect the light-green
    **NumGuestListPicker.Selection** block. And in the tenth socket, the app will
    get the information about which food/drink item the user inputted. In the **ItemsBringingTextBox**
    blocks, select and connect the light green **ItemsBringingTextBox.Text** block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, recall the first goal that we specified in this section: take the three
    pieces of information that a guest provides and insert them in the Fusion Table.
    The three pieces of data come from the **NameTextBox** text property, the **NumGuestListPicker**
    selection property, and the **ItemsBringingTextBox** text property. This step
    was a complicated one, but it is very important to get this set of blocks right
    because, if not, no data will be inserted into the Fusion Table.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are done with the **InsertRow** block, all that is left is to clear
    out the textboxes and revert the **ListPicker** selection to the default value
    of `1`. Since blocks are executed from top to bottom and we want to clear out
    the Textboxes and reset the ListPicker after the app sends the information to
    the Fusion Table, insert the next set of blocks after the InsertRow block. Find
    the **set NameTextBox.Text to**, **set ItemsBringingTextBox.Text to**, and **set
    NumGuestListPicker.Selection** blocks and insert them into the bottom of the **when
    SendRSVPButton.Click** block. The first two blocks—**set NameTextBox.Text to**
    and **set ItemsBringingTextBox.Text to**—get blank Text blocks. Setting the textboxes
    to empty strings will clear out the previous data. Since we want the **set NumGuestListPicker.Selection**
    to reset the default selection property of the **NumGuestListPicker** to `1`,
    attach a **Math 0** block and change the number to **1**. Lastly, we will call
    a procedure to make sure any keyboard that might have popped-up when the guest
    was typing in information gets hidden. Find the call **NameTextBox.HideKeyboard**
    block in the **NameTextBox** blocks. Connect it at the very bottom of the blocks.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring empty rows are not inserted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, the **InsertRow** does not have any way to tell if the data that
    it is inserting is valid or not. For example, the user might click on the **SendRSVPButton**
    by mistake and that will insert a blank row. We can fix this by checking to make
    sure that the guest has typed in at least the name before we insert anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we can place all the blocks that we created within an if /then
    statement. The condition that we will check for is whether the NameTextBox. Text
    is empty or not. If the NameTextBox.Text is not empty, then that means the guest
    must have typed something and we will allow the insertion to happen. "If the NameTextBox.Text
    is empty, then the if statement is not true, and the then set of blocks will not
    fire. As a result, nothing will happen. The following screenshot shows the blocks
    for the if statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ensuring empty rows are not inserted](img/00200.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find the lime-green (unequal) block in the **Build In Logic** Block
    drawer. The block will appear with an equals sign, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ensuring empty rows are not inserted](img/00201.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the arrow and select the unequal option from the drop down menu. In
    the first blank, insert the **NameTextBox.Text** block and, in the second blank,
    insert a blank **Text** block. Now our code indicates that, **if** the name field
    is not blank, **then** it should get the data and insert it into the Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the guest list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have implemented the **RSVP_Screen**, we have a way for guests to
    send RSVPs and aggregate all the RSVPs from different guests into the Fusion Table.
    In any event organization app, it is helpful for others to be able to see a list
    of guests who have already RSVP'ed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of the GuestList_Screen is just that—enabling all attendees (and
    the organizer) to see who else is coming to the event. To display information
    gathered in the Fusion Table, we will use a Label. In the Designer window, navigate
    to the **GuestList_Screen**. Just like in the RSVP_Screen, first drag a **VerticalArragment**
    to the top portion of the **GuestList_Screen**, above the **HorizontalArrangement**,
    which contains all the navigation buttons. Make the **BackgroundColor** property
    in **VerticalArrangement** to **None**. Also set both the **Height** and **Width**
    properties to **Fill parent**. Now drag a **Label** component into the **VerticalArrangement**.
    Rename the Label `GuestListLabel`. Change the **BackgroundColor** property of
    **GuestListLabel** to **None**. Change the **FontSize** property to **18** (you
    might have to try various values for this property depending on your device''s
    screen size and screen resolution). Finally, change the **TextColor** property
    to **White**. Then add a **FusiontablesControl** component just like you did in
    the **RSVP_Screen**. You can view the changes in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the guest list](img/00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just like in the **RSVP_Screen**. We will change the three properties of the
    **FusiontablesConrol1** component. Since you already know how to change the three
    **FusiontablesControl1** properties—**KeyFile**, **ServiceAccountEmail**, and
    **UseServiceAuthentication**—we will not go into the details here. Just follow
    the steps that we completed in the *Connecting the app to the Google Fusion Table*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas in the RSVP_Screen, the app sends information to the Fusion Table, in
    the GuestList_Screen, the app is requests information from the Fusion Table, receives
    it and then displays it. To program this, head to the **Blocks** editor.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the blocks – requesting data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first code that we need to program is to request data from the Fusion Table.
    Click on **GuestList_Screen** in the Blocks drawer and drag the **when GuestList_Screen.Initialize**
    event. This event is automatically triggered whenever a screen is launched. We
    want to request data from the Fusion Table when the **GuestList** screen is launched.
    Thus, we will add to this event is the **call FusiontablesControl1.GetRows** block.
    This block will let us request data from the Fusion Table. You can find this block
    in the **FusiontablesControl1** blocks drawer. The **GetRows** block needs two
    pieces of information to fetch rows from Fusion Tables: the ID of the table and
    name of the column. We identified the table ID when we were creating the Fusion
    Table. Paste that ID into the **tableId** socket of the **GetRows** block using
    a **Text** block. Use another **Text** block to specify the column name, **''Guest
    Names''**. Note the single quotes; just like in the **InsertRows** block, the
    column names have to be single-quoted here as well. The following screenshot shows
    the completed set of blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the blocks – requesting data](img/00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the blocks – receiving data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous blocks request in data from the Fusion Table, now we need to code
    receiving the information from the Fusion Table. The **when FusiontablesControl1.GotResult**
    block does this. You will find it in the **FusiontablesControl1** blocks. As we
    mentioned before, when data from Fusion Tables is received, this event gets triggered.
    The data is placed in the **result** variable of this event.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the data we receive from the Fusion Table is a block of text with
    each row placed on its own line. This data also includes the column header. So,
    let's say the Guest Names column of our Fusion Table has three rows with the names
    Olivienne, Dash, and Eva. Then the data that is placed in the result variable
    has four lines—Guest Names, Olivienne, Dash, and Eva (the column header followed
    by the three names).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we want the **when FusiontablesControl1.GotResult** event to automatically
    display the guest names (and the header), select and connect the **set GuestListLabel.Text
    to** block. What do we want it to display? The **result** variable. Hover your
    cursor over the light orange **result** variable embedded in the gold event block.
    A pop-up with two orange blocks will appear, as shown in the following screenshot.
    Select the **get result** block and attach it to the open socket in the **GuestListLabel.Text**
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the blocks – receiving data](img/00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it! Now your **GuestList_Screen** will display all the guests who have
    RSVP''ed. The following screenshot shows the completed sets of blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the blocks – receiving data](img/00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is time to try your app! Fill out the RSVP form to see if it populates into
    your Fusion Table. Does the app then clear the RSVP screen fields and display
    the names in the **Guest List** screen?
  prefs: []
  type: TYPE_NORMAL
- en: If you recall, we set up our app to gather other data from the RSVP besides
    the list of guest names. We created fields so guests could input the number of
    people they are bringing and the food/drink item to share. You could also display
    this information for other guests to see, but really that data is for the host,
    who can easily view it along with the names in the Fusion Table columns we created.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing the Event App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Event App, we wanted to introduce you to the process of collecting
    and retrieving data. Now that you are approaching apps from more of a developer’s
    perspective, you will probably be aware that every time you enter your email address
    or other information into an app, that data is getting stored into a database.
    But, as we mentioned at the beginning of this chapter, Fusion Tables as a database
    has its limitations. If you were to share the Event App as it is with multiple
    event organizers, who start using it on different devices, there will be a problem
    because the app uses a single Fusion Table as the back end. If many people use
    the app for their different events, all of the data from all the different devices
    will be aggregated in to one single Fusion Table. Of course this will create mass
    confusion for the event organizers (and guests) as all of the data for different
    parties will be all mixed up!
  prefs: []
  type: TYPE_NORMAL
- en: Before we outline a possible fix to this problem, lets discuss what we did in
    this app. Since our app accesses and modifies the Fusion Table, we had to create
    Google service level authentication. This step ensures that our app is authorized
    by Google to access Fusion Tables. Then, we inserted the Fusion Table Id into
    our app to let the app know which Fusion Table to access. Additionally, we created
    a service email address for our app and shared the Fusion Table with this service
    email address. These steps ensure that the Fusion Table allows our app to read/write
    data. So we basically had three different entities interacting with each other
    - Google service level authentication, our app, and the Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: One way to address the problem of the single Fusion Table associated with the
    Event App is for the developer to create different copies of the app that uses
    different copies of a Fusion Table. This means that each copy of the app will
    have to be updated with the Id of the new copy of the Fusion Table. Additionally,
    this also means the Fusion Table will have to be re-shared with the app's service
    level email (using the original service email address).
  prefs: []
  type: TYPE_NORMAL
- en: It is easier than it sounds. First, open the Fusion Table that you used previously,
    go to the File menu and select, Make a copy. This will create a new copy of the
    original Fusion Table with all of the changes we made to the columns and settings.
    If your previous Fusion Table had any data in it, you will need to clear the data.
    Next, repeat the Fusion Table Id identification step outlined in the last few
    paragraphs of Creating a Google Fusion Table section. (Since you are creating
    a new Fusion Table, you will have to use the Id of this new table.) You will also
    have to repeat the Sharing the Fusion Table with the service account email section
    for this new Fusion Table (using the original service email address).
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, in Blocks editor, paste the new Fusion Table Id into the Text box (attached
    to the TableID slot of the call FusiontablesControl1.InsertRow block) to ensure
    that the app uses the new Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to share your Event App with 7 people, you will need to repeat these
    steps 7 times, so that each person has a unique version of the app with a unique
    Fusion Table.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we explored a lot of App Inventor advanced features, namely
    a database. Google Fusion Tables makes it possible for us to store data in the
    backend. We learned how to create a new Fusion Table and how to establish Google
    API credentials so that our app is authorized to access Google Fusion Tables.
    Finally we learned how to insert, retrieve, and display data from the Fusion Tables.
  prefs: []
  type: TYPE_NORMAL
- en: You are amassing quite a programming toolkit! And in the next chapter, you will
    learn yet another tool to help expand your coding skills. A loop is a structure
    or sequence of instructions that enables you to iterate or repeat steps until
    certain conditions are met. This is handy because, instead of copying and pasting
    blocks to perform the same function for each item in a long list, we can program
    one set of blocks to execute repeatedly.
  prefs: []
  type: TYPE_NORMAL
