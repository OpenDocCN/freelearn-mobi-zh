- en: Graphics and Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形和动画
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩小大型图像以避免内存不足异常
- en: 'A transition animation: Defining scenes and applying a transition'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡动画：定义场景和应用过渡
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用传感器数据和 RotateAnimation 创建指南针
- en: Creating a slideshow with ViewPager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ViewPager 创建幻灯片
- en: Creating a Card Flip Animation with Fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用片段创建卡片翻转动画
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义过渡创建缩放动画
- en: Displaying an animated image (GIF/WebP) with the new ImageDecoder library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的 ImageDecoder 库显示动画图像（GIF/WebP）
- en: Creating a circle image with the new ImageDecoder
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的 ImageDecoder 创建圆形图像
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Animations can be both visually appealing and functional, as demonstrated with
    the simple button press. The graphical representation of the button press brings
    the app alive, plus it provides a functional value by giving the user a visual
    response to the event.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 动画可以既吸引视觉，又具有功能性，如简单的按钮按下所示。按钮按下的图形表示使应用程序生动起来，同时它通过向用户提供对事件的视觉响应来提供功能性价值。
- en: 'The Android Framework provides several animation systems to make it easier
    to include animations in your own application. They include the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Android 框架提供了几个动画系统，以简化在您的应用程序中包含动画的过程。它们包括以下内容：
- en: '**View Animation **(the original animation system): It usually requires less
    code but has limited animation options'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图动画（原始动画系统）**：它通常需要更少的代码，但动画选项有限'
- en: '**Property Animation**: It''s a more flexible system, allowing the animation
    of any property of any object'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性动画**：这是一个更灵活的系统，允许对任何对象的任何属性进行动画处理'
- en: '**Drawable Animation**: It uses drawable resources to create frame-by-frame
    animations (like a movie)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Drawable 动画**：它使用可绘制资源创建逐帧动画（如电影）'
- en: 'The Property Animation system was introduced in Android 3.0, and it is usually
    preferred over the View Animation because of the flexibility. The main drawbacks
    to the View Animation include the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 属性动画系统是在 Android 3.0 中引入的，通常比视图动画更受欢迎，因为其灵活性。视图动画的主要缺点包括以下内容：
- en: Limited aspects of what can be animated, such as scale and rotation
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以动画化的方面有限，例如缩放和旋转
- en: Can only animate the contents of the view; it cannot change where on the screen
    the view is drawn (so it cannot animate moving a ball across the screen)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能对视图的内容进行动画处理；它不能改变视图在屏幕上的绘制位置（因此不能对在屏幕上移动的球进行动画处理）
- en: Can only animate View objects
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只能对视图对象进行动画处理
- en: 'Here is a simple example demonstrating a View Animation to "blink" a view (a
    simple simulation of a button press):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的示例，演示了如何使用视图动画来“闪烁”视图（按钮按下的简单模拟）：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are the contents for the `blink.xml` resource file, located in the `res/anim`
    folder:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是位于 `res/anim` 文件夹中的 `blink.xml` 资源文件的目录内容：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it's very simple to create this animation, so if the View Animation
    accomplishes your goal, use it. When it doesn't meet your needs, turn to the Property
    Animation system. We'll demonstrate Property Animation using the new `objectAnimator`
    in the *Creating a Card Flip Animation with Fragments* and *Creating a Zoom Animation
    with a Custom Transition* recipes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，创建此动画非常简单，因此如果视图动画实现了您的目标，请使用它。当它不符合您的需求时，转向属性动画系统。我们将通过在 *使用片段创建卡片翻转动画*
    和 *使用自定义过渡创建缩放动画* 菜谱中使用新的 `objectAnimator` 来演示属性动画。
- en: The *A transition animation – defining scenes and applying a transition* recipe
    will provide additional information on the Android Transition Framework, which
    we will use in many of the recipes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*动画过渡动画 - 定义场景和应用过渡* 菜单将提供有关 Android 过渡框架的额外信息，我们将在许多菜谱中使用该框架。'
- en: The Interpolator is a function that defines the rate of change for an animation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 插值器是一个定义动画变化速率的函数。
- en: '`Interpolators` will be mentioned in several recipes in this chapter, as well
    as in the previous blink example. The Interpolator defines how the transition
    is calculated. A Linear Interpolator will calculate the change evenly over a set
    duration, whereas an `AccelerateInterpolator` function would create faster movement
    for the duration. Here is the full list of `Interpolators` available, along with
    the XML identifier:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`Interpolators` 将在本章的几个菜谱中以及在前面的闪烁示例中提到。插值器定义了过渡的计算方式。线性插值器将在设定的时间内均匀地计算变化，而
    `AccelerateInterpolator` 函数将创建在持续时间内的更快移动。以下是可用的完整 `Interpolators` 列表，以及相应的 XML
    标识符：'
- en: AccelerateDecelerateInterpolator (`@android:`anim`/accelerate_decelerate_interpolator`)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AccelerateDecelerateInterpolator (`@android:anim/accelerate_decelerate_interpolator`)
- en: AccelerateInterpolator (`@android:anim/accelerate_interpolator`)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AccelerateInterpolator (`@android:anim/accelerate_interpolator`)
- en: AnticipateInterpolator (`@android:anim/anticipate_interpolator`)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AnticipateInterpolator (`@android:anim/anticipate_interpolator`)
- en: AnticipateOvershootInterpolator (`@android:anim/anticipate_overshoot_interpolator`)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AnticipateOvershootInterpolator (`@android:anim/anticipate_overshoot_interpolator`)
- en: BounceInterpolator (`@android:anim/bounce_interpolator`)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BounceInterpolator (`@android:anim/bounce_interpolator`)
- en: CycleInterpolator (`@android:anim/cycle_interpolator`)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CycleInterpolator (`@android:anim/cycle_interpolator`)
- en: DecelerateInterpolator (`@android:anim/decelerate_interpolator`)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DecelerateInterpolator (`@android:anim/decelerate_interpolator`)
- en: LinearInterpolator (`@android:anim/linear_interpolator`)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LinearInterpolator (`@android:anim/linear_interpolator`)
- en: OvershootInterpolator (`@android:anim/overshoot_interpolator`)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OvershootInterpolator (`@android:anim/overshoot_interpolator`)
- en: Although animations don't generally require much memory, the graphic resources
    often do. Many of the images you may want to work with often exceed the available
    device memory. In the first recipe of this chapter, *Scaling down large images
    to avoid Out of Memory exceptions*, we'll discuss how to subsample (or scale down)
    images.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然动画通常不需要太多内存，但图形资源通常需要。你可能想要处理的许多图像往往超过了可用设备内存。在本章的第一个菜谱中，*将大图像缩小以避免内存不足异常*，我们将讨论如何子采样（或缩小）图像。
- en: Scaling down large images to avoid Out of Memory exceptions
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩小大图像以避免内存不足异常
- en: Working with images can be very memory intensive, often resulting in your application
    crashing with an *Out of Memory* exception. This is especially true with pictures
    taken with the device camera, as they often have a much higher resolution than
    the device itself.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 处理图像可能会非常消耗内存，通常会导致你的应用程序因 *内存不足* 异常而崩溃。这尤其适用于用设备相机拍摄的图片，因为它们的分辨率通常比设备本身要高得多。
- en: Loading a higher resolution image than the UI supports doesn't provide any visual
    benefit to the user. In this example, we'll demonstrate how to take smaller samples
    of the image for display. We'll use `BitmapFactory` to first check the image size,
    then load a scaled-down image.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 加载比 UI 支持的分辨率更高的图像不会为用户提供任何视觉上的好处。在这个例子中，我们将演示如何取图像的小样本进行显示。我们将使用 `BitmapFactory`
    首先检查图像大小，然后加载一个缩小后的图像。
- en: 'Here''s a screenshot from this recipe showing a thumbnail of a very large image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这个菜谱的截图，显示了非常大的图片的缩略图：
- en: '![](img/b2913624-48e4-4b0d-ab2c-50d09ed1a42e.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2913624-48e4-4b0d-ab2c-50d09ed1a42e.png)'
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `LoadLargeImage`. Use the
    default Phone & Tablet options and select Empty Activity when prompted for the
    Activity Type.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `LoadLargeImage`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: We'll need a large image for this recipe. We turned to Unsplash.com to download
    a free image, ([https://unsplash.com](https://unsplash.com)), although any large
    (multi-megabyte) image will do.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要一张大图。我们转向 Unsplash.com 下载了一张免费图片，([https://unsplash.com](https://unsplash.com))，尽管任何大（多兆字节）的图片都适用。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As mentioned in *Getting ready*, we need a large image to demonstrate the scaling.
    Once you have the image, follow these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在 *准备工作* 中提到的，我们需要一张大图来演示缩放。一旦你有了这张图，请按照以下步骤操作：
- en: Copy the image to your `res/drawable` folder.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片复制到你的 `res/drawable` 文件夹。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `TextView` 替换为以下 `ImageView`：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, open `MainActivity.java` and add this method, which we''ll explain shortly:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MainActivity.java` 并添加这个方法，我们稍后会解释：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的 `onCreate()` 方法中：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the application on a device or emulator.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The purpose of the `loadSampledResource()` method is to load a smaller image,
    to reduce the memory consumption of the image. If we attempted to load the original
    full-size image (see the previous *Getting ready* section), the app would require
    over 3 MB of RAM to load. That's more memory than most devices can handle (at
    the moment anyway), and even if it could be loaded completely, it would provide
    no visual benefit to our thumbnail view.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`loadSampledResource()` 方法的目的是加载一个较小的图像，以减少图像的内存消耗。如果我们尝试加载原始的全尺寸图像（参见之前的 *准备工作*
    部分），应用程序将需要超过 3 MB 的 RAM 来加载。这比大多数设备能处理的内存要多（至少目前是这样），即使它能完全加载，也不会为我们的缩略图视图提供任何视觉上的好处。'
- en: To avoid an `Out of Memory` situation, we use the `inSampleSize` property of `BitmapFactory.Options`
    to reduce, or subsample, the image. (If we set the `inSampleSize=2`, it will reduce
    the image by half. If we use `inSampleSize=4`, it will
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免`Out of Memory`情况，我们使用`BitmapFactory.Options`的`inSampleSize`属性来减小或子采样图像。（如果我们设置`inSampleSize=2`，它将图像减半。如果我们使用`inSampleSize=4`，它将
- en: 'reduce the image by one quarter) To calculate `inSampleSize`, first, we need
    to know the image size. We can use the `inJustDecodeBounds` property as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像缩小四分之一）要计算`inSampleSize`，首先，我们需要知道图像的大小。我们可以使用`inJustDecodeBounds`属性如下：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This tells `BitmapFactory` to get the image dimensions without actually storing
    the image contents. Once we have the image size, we calculate the sample using
    this code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉`BitmapFactory`获取图像尺寸而不实际存储图像内容。一旦我们有了图像大小，我们使用以下代码计算样本：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The purpose of this code is to determine the largest sample size that does not
    reduce the image below the target dimensions. To do that, we double the sample
    size and check whether the size exceeds the target size dimensions. If it doesn't,
    we save the doubled sample size and repeat. Once the reduced size falls below
    the target dimensions, we use the last saved `inSampleSize`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的目的是确定最大的样本大小，不会将图像缩小到目标尺寸以下。要做到这一点，我们将样本大小加倍并检查是否超过目标尺寸。如果没有，我们保存加倍后的样本大小并重复。一旦减小后的尺寸低于目标尺寸，我们使用最后保存的`inSampleSize`。
- en: From the `inSampleSize` documentation (link in the following *See also* section),
    note that the decoder uses a final value based on powers of 2, so any other value
    will be rounded down to the nearest power of 2.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从`inSampleSize`文档（以下*参考以下内容*部分中的链接）中注意，解码器使用基于2的幂的最终值，因此任何其他值都将四舍五入到最接近的2的幂。
- en: 'Once we have the sample size, we set the `inSampleSize` property and set `inJustDecodeBounds`
    to `false`, to load normally. Here is the code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了样本大小，我们设置`inSampleSize`属性并将`inJustDecodeBounds`设置为`false`，以正常加载。以下是代码：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It's important to note that this recipe illustrates the concept of applying
    the task to your own application. Loading and processing images can be a long
    operation, which can cause your application to stop responding. This is not a
    good thing and could cause Android to show the **Application Not Responding**
    (**ANR**) dialog. It is recommended to perform long tasks on a background thread
    to keep your UI thread responsive. The `AsyncTask` class is available for doing
    background network processing, but there are many other libraries available as
    well (links at the end of the recipe).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这个食谱说明了将任务应用到您自己的应用程序中的概念。加载和处理图像可能是一个耗时的操作，这可能导致您的应用程序停止响应。这不是一个好现象，可能会导致Android显示**应用程序无响应**（**ANR**）对话框。建议在后台线程上执行长时间任务以保持UI线程的响应。`AsyncTask`类可用于执行后台网络处理，但还有许多其他库可用（食谱末尾的链接）。
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: It's important to note that the `targetHeight` and `targetWidth` parameters
    we pass to the `loadSampledResource()` method do not actually set the image size.
    If you run the application using the same size image we used (4,000 x 6,000),
    the sample size will be 32, resulting in a loaded image size of 187 x 125.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，我们传递给`loadSampledResource()`方法的`targetHeight`和`targetWidth`参数实际上并没有设置图像大小。如果您使用与我们相同的图像大小（4,000
    x 6,000）运行应用程序，样本大小将为32，导致加载的图像大小为187 x 125。
- en: If your layout needs a specific size of image, either set the size in the layout
    file, or you can modify the image size directly using the Bitmap class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的布局需要特定大小的图像，您可以在布局文件中设置大小，或者您可以直接使用Bitmap类修改图像大小。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'Developer Docs: BitmapFactory.inSampleSize() at [https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者文档：BitmapFactory.inSampleSize() 在 [https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize](https://developer.android.com/reference/android/graphics/BitmapFactory.Options.html#inSampleSize)
- en: Refer to Glide at [https://github.com/bumptech/glide](https://github.com/bumptech/glide)
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Glide在[https://github.com/bumptech/glide](https://github.com/bumptech/glide)
- en: Refer to Picasso from Square at [https://square.github.io/picasso/](https://square.github.io/picasso/)
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Square的Picasso[https://square.github.io/picasso/](https://square.github.io/picasso/)
- en: Refer to Fresco from Facebook at [https://github.com/facebook/fresco](https://github.com/facebook/fresco)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考Facebook的Fresco[https://github.com/facebook/fresco](https://github.com/facebook/fresco)
- en: Check the *AsyncTask* task in [Chapter 15](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml),
    *Getting Your App Ready for the Play Store*, for processing long-running operations
    on a background thread.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查[第15章](98c7bc7b-43e2-43de-aed4-fe2fb6dc72f3.xhtml)中的*AsyncTask*任务，*为应用商店准备您的应用*，以在后台线程上处理长时间运行的操作。
- en: A transition animation – defining scenes and applying a transition
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡动画 – 定义场景并应用过渡
- en: 'The Android Transition Framework offers the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Android过渡框架提供了以下功能：
- en: '**Group-level animations**: Animation applies to all views in a hierarchy'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组级动画**：动画应用于层次结构中的所有视图'
- en: '**Transition-based animation**: Animation based on starting and ending property
    change'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于过渡的动画**：基于起始和结束属性变化的动画'
- en: '**Built-in animations**: Some common transition effects, such as fade-in/out'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置动画**：一些常见的过渡效果，如淡入/淡出'
- en: and movement
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以及移动
- en: '**Resource file support**: Save animation values to a resource (XML) file to
    load'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源文件支持**：将动画值保存到资源（XML）文件中以便加载'
- en: during runtime
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行时
- en: '**Lifecycle callbacks**: Receive callback notifications during the animation'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期回调**：在动画期间接收回调通知'
- en: 'A transition animation consists of the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡动画由以下组成：
- en: '**Starting Scene**: The view (or `ViewGroup`) at the start of the animation'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始场景**：动画开始时的视图（或`ViewGroup`）'
- en: '**Transition**: The change type (see later on)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Transition**：更改类型（见后文）'
- en: '**Ending Scene**: The ending view (or `ViewGroup`)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结束场景**：结束视图（或`ViewGroup`）'
- en: '**Transitions**: Android provides built-in support for the following three
    transitions:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Transitions**：Android为以下三种过渡提供了内置支持：'
- en: '**AutoTransition (default transition)**: Fade out, move, resize, then fade
    in (in that order)'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动过渡（默认过渡）**：淡出，移动，调整大小，然后淡入（按此顺序）'
- en: '**Fade**: Fade in, fade out (default), or both (specify order)'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**淡入**：淡入，淡出（默认），或两者（指定顺序）'
- en: '**ChangeBounds**: Move and resize'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ChangeBounds**：移动和调整大小'
- en: The Transition Framework will automatically create the frames needed to animate
    from the start to end scenes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡框架将自动创建从起始场景到结束场景所需的帧以进行动画。
- en: 'The following are some known limitations of the Transition Framework when working
    with the following classes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在使用以下类时，过渡框架的一些已知限制：
- en: '**SurfaceView**: Animations may not appear correct since the `SurfaceView`
    animations are performed on a non-UI thread, so they may be out of sync with the
    application'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SurfaceView**：由于`SurfaceView`动画是在非UI线程上执行的，因此动画可能不正确，可能与应用程序不同步'
- en: '**TextView**: Animating text-size changes may not work correctly resulting
    in the text jumping to the final state'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TextView**：动画文本大小更改可能不会正确工作，导致文本跳转到最终状态'
- en: '**AdapterView**: Classes that extend `AdapterView`, such as `ListView` and
    `GridView`, may hang'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AdapterView**：扩展`AdapterView`的类，如`ListView`和`GridView`，可能会挂起'
- en: '**TextureView**: Some transitions may not work'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TextureView**：某些过渡可能无法工作'
- en: This recipe provides a quick tutorial on using the transition animation system.
    We'll start by defining the scenes and transition resources, then applying the
    transition, which creates the animation. The following steps will walk you through
    creating the resources in XML, as they are generally recommended. Resources can
    also be created through code, which we'll
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程提供了一个关于使用过渡动画系统的快速教程。我们将从定义场景和过渡资源开始，然后应用过渡，从而创建动画。以下步骤将指导您在XML中创建资源，因为它们通常是推荐的。资源也可以通过代码创建，我们将在
- en: discuss in the *There's more* section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在*更多内容*部分讨论。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `TransitionAnimation`. In
    the Target Android Devices dialog, select the Phone & Tablet option and choose
    API 19 (or above) for the Minimum SDK. Select Empty Activity when prompted for
    the Activity Type.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`TransitionAnimation`。在目标Android设备对话框中，选择手机和平板选项，并将最小SDK选择为API
    19（或更高）。当被提示选择活动类型时，选择空活动。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the steps to create the resource files and apply the transition animation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建资源文件并应用过渡动画的步骤：
- en: 'Replace the existing `activity.main.xml` layout with the following XML:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的`activity.main.xml`布局替换为以下XML：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a new layout file called `activity_main_end.xml` using the following
    XML:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下XML创建一个名为`activity_main_end.xml`的新布局文件：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Make a new transition resource directory (File | New | Android resource directory
    and choose Transition as the Resource type).
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的过渡资源目录（文件 | 新建 | Android资源目录，并将过渡作为资源类型选择）。
- en: 'Create a new file in the `res/transition` folder called `transition_move.xml`
    using the following XML:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/transition`文件夹中创建一个名为`transition_move.xml`的新文件，使用以下XML：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `goAnimate()` method using the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码添加`goAnimate()`方法：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You probably find the code itself rather simple. As outlined in the recipe
    introduction, we just need to create the starting and ending scenes and set the
    transition type. Here''s a detailed breakdown of the code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能觉得代码本身相当简单。正如在菜谱介绍中概述的，我们只需要创建起始场景和结束场景，并设置过渡类型。以下是代码的详细分解：
- en: 'Creating the start Scene: The following line of code will load the Start Scene:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建起始场景：以下代码行将加载起始场景：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Creating the transition: The following line of code will create the transition:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建过渡效果：以下代码行将创建过渡效果：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Defining the ending scene: The following line of code will define the ending
    scene:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义结束场景：以下代码行将定义结束场景：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Starting the transition: The following line of code will start the transition:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始过渡：以下代码行将开始过渡：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Although simple, most of the work for this recipe was in creating the necessary
    resource files.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然简单，但这个菜谱的大部分工作都在创建必要的资源文件。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Now, we''ll take a look at creating this same transition animation with a code-only
    solution (although we''ll still use the initial `activity_main.xml` layout file):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看如何仅使用代码创建相同的过渡动画（尽管我们仍然会使用初始的`activity_main.xml`布局文件）：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We still need the starting and ending scene along with the transition; the only
    difference is how we create the resources. In the previous code, we created the
    Start Scene using the current layout.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要起始场景和结束场景以及过渡效果；唯一的区别在于我们如何创建资源。在之前的代码中，我们使用当前布局创建了起始场景。
- en: Before we start modifying the layout through code, we call the `beginDelayedTransition()`
    method of `TransitionManager` with the transition type. `TransitionManager` will
    track the changes for the ending scene. When we call the `go()` method, `TransitionManager`
    automatically animates the change.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们通过代码修改布局之前，我们调用`TransitionManager`的`beginDelayedTransition()`方法并指定过渡类型。`TransitionManager`将跟踪结束场景的变化。当我们调用`go()`方法时，`TransitionManager`会自动动画化变化。
- en: See also
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the Animation resources web page at [https://developer.android.com/guide/topics/resources/animation-resource.html](https://developer.android.com/guide/topics/resources/animation-resource.html)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[https://developer.android.com/guide/topics/resources/animation-resource.html](https://developer.android.com/guide/topics/resources/animation-resource.html)上的动画资源网页
- en: Creating a Compass using sensor data and RotateAnimation
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用传感器数据和RotateAnimation创建指南针
- en: In the previous chapter, we demonstrated reading sensor data from the physical
    device sensors. In that recipe, we used the Light Sensor since the data from Environment
    Sensors generally doesn't require any extra processing. Although it's easy to
    get the magnetic field strength data, the numbers themselves don't have much meaning
    and certainly don't
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们演示了从物理设备传感器读取传感器数据。在那个菜谱中，我们使用了光传感器，因为环境传感器的数据通常不需要任何额外的处理。虽然获取磁场强度数据很容易，但这些数字本身并没有太多意义，当然也不
- en: create an appealing display.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个吸引人的显示效果。
- en: 'In this recipe, we''ll demonstrate getting the magnetic field data along with
    the accelerometer data to calculate magnetic north. We''ll use `SensorManager.getRotationMatrix`
    to animate the compass while responding to the device movement. Here''s a screenshot
    of our compass application on a physical device:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将演示获取磁场数据以及加速度计数据来计算磁北。我们将使用`SensorManager.getRotationMatrix`来在响应设备移动时动画化指南针。以下是我们在物理设备上的指南针应用程序的截图：
- en: '![](img/d8692248-5175-434a-a9b9-aefb66083553.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8692248-5175-434a-a9b9-aefb66083553.png)'
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `Compass`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for the Activity
    Type.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，命名为`Compass`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: 'We will need an image for the compass indicator. There''s an image on www.Pixabay.Com
    that will work for us at this link:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个用于指南针指示器的图像。在www.Pixabay.Com上有一个图像，可以通过此链接为我们工作：
- en: '[https://pixabay.com/en/geography-map-compass-rose-plot-42608/](https://pixabay.com/en/geography-map-compass-rose-plot-42608/).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pixabay.com/en/geography-map-compass-rose-plot-42608/](https://pixabay.com/en/geography-map-compass-rose-plot-42608/)。'
- en: Although not required, this image has a transparent background, which looks
    better when rotating the image.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但此图像具有透明背景，在旋转图像时看起来更好。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As mentioned in the previous *Getting ready* section, we''ll need an image
    for the compass. You can download the one previously linked, or use any image
    you prefer, then follow these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文*准备就绪*部分所述，我们需要一个指南针的图像。您可以下载之前链接的图像，或者使用您喜欢的任何图像，然后按照以下步骤操作：
- en: Copy your image to the `res/drawable` folder and name it `compass.png`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像复制到`res/drawable`文件夹，并将其命名为`compass.png`。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，将现有的`TextView`替换为以下`ImageView`：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, open `MainActivity.java` and add the following global variable declarations:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity.java`，添加以下全局变量声明：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add the following `SensorEventListener` class to the `MainActivity` class:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`SensorEventListener`类添加到`MainActivity`类中：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Override `onResume()` and `onPause()` as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写`onResume()`和`onPause()`方法：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The final code does the actual calculations and animation:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终代码执行实际的计算和动画：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You're ready to run the application. Although you can run this application on an
    emulator, without an accelerometer and magnetometer, you won't see the compass
    move.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已准备好运行应用程序。虽然您可以在模拟器上运行此应用程序，但没有加速度计和磁力计，您将看不到指南针移动。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Since we've already covered reading sensor data in the *Reading sensor data –
    using the Android Sensor Framework* section (in the previous chapter), we won't
    repeat explaining the sensor framework, and, instead, jump right to the `calculateCompassDirection()`
    method.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在*读取传感器数据 - 使用Android传感器框架*部分（在前一章）中介绍了读取传感器数据，因此我们不会重复解释传感器框架，而是直接跳到`calculateCompassDirection()`方法。
- en: 'We call this method directly from the `onSensorChanged()` callback. Since we
    used the same class to handle the sensor callbacks for both the Magnetometer and
    Accelerometer, we first check which sensor is being reported in `SensorEvent`.
    Then, we call `SensorManager.getRotationMatrix()`, passing in the last sensor
    data. If the calculation is successful, it returns `RotationMatrix`, which we
    use to call the `SensorManager.getOrientation()` method. Note that `getOrientation()`
    will return the following data in the `orientationValues` array:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们直接从`onSensorChanged()`回调中调用此方法。由于我们使用同一个类来处理磁力计和加速度计的传感器回调，我们首先检查在`SensorEvent`中报告的是哪个传感器。然后，我们调用`SensorManager.getRotationMatrix()`，传入最后一批传感器数据。如果计算成功，它将返回`RotationMatrix`，我们使用它来调用`SensorManager.getOrientation()`方法。请注意，`getOrientation()`将在`orientationValues`数组中返回以下数据：
- en: '**Azimuth**: `value [0]`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方位角**：`value [0]`'
- en: '**Pitch**: `value [1]`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**俯仰**：`value [1]`'
- en: '**Roll**: `value [2]`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**倾斜**：`value [2]`'
- en: The azimuth is reported in radians, in the opposite direction, so we reverse
    the sign and convert it to degrees using `Math.toDegrees()`. The azimuth represents
    the direction of North, so we use it in our `RotateAnimation`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 方位角以弧度为单位报告，方向相反，因此我们反转符号并使用`Math.toDegrees()`将其转换为度数。方位角表示北方的方向，因此我们在`RotateAnimation`中使用它。
- en: With the math already done by `SensorManager`, the actual compass animation
    is very simple. We create `RotateAnimation` using the previous direction and the
    new direction. We use the `Animation.RELATIVE_TO_SELF` flag and 0.5f (or 50%)
    to set the center of the image as the rotation point. Before calling `startAnimation()`
    to update the compass, we set the animation duration using `setDuration()` and
    `setFillAfter(true)`. (Using `true` indicates we want the image to be left "as
    is" after the animation completes; otherwise, the image would reset back to the
    original image.) Finally, we save the azimuth for the next sensor update.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`SensorManager`已经完成的数学计算，实际的指南针动画非常简单。我们使用前一个方向和新的方向创建`RotateAnimation`。我们使用`Animation.RELATIVE_TO_SELF`标志和0.5f（或50%）将图像的中心设置为旋转点。在调用`startAnimation()`更新指南针之前，我们使用`setDuration()`和`setFillAfter(true)`设置动画持续时间。（使用`true`表示我们希望在动画完成后将图像保留“原样”；否则，图像将重置回原始图像。）最后，我们保存下一次传感器更新时的方位角。
- en: There's more...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It's worth taking some time to experiment with the `RotationAnimation` settings
    and the sensor update timing. In our call to register the sensor listener, we
    use `SensorManager.SENSOR_DELAY_FASTEST` along with 50 milliseconds for `setDuration()`
    to create a fast animation. You could also try using a slower sensor update and
    a slower animation, and compare the results.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 值得花些时间来实验 `RotationAnimation` 设置和传感器更新时间。在我们的注册传感器监听器调用中，我们使用 `SensorManager.SENSOR_DELAY_FASTEST`
    以及 50 毫秒的 `setDuration()` 来创建快速动画。你也可以尝试使用较慢的传感器更新和较慢的动画，并比较结果。
- en: See also
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: '*Reading sensor data - using the Android Sensor Framework* in the previous
    chapter for details on reading sensor data'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在上一章中阅读传感器数据 - 使用 Android 传感器框架* 了解读取传感器数据的详细信息'
- en: Refer to the getRotationMatrix() Developer Document at [http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],
    float[], float[], float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float%5B%5D,%20float%5B%5D,%20float%5B%5D,%20float%5B%5D))
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 [http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],
    float[], float[], float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float%5B%5D,%20float%5B%5D,%20float%5B%5D,%20float%5B%5D))
    的 getRotationMatrix() 开发者文档。
- en: Refer to the getOrientation() Developer Document at [http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],
    float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float%5B%5D,%20float%5B%5D))
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 [http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],
    float[])](http://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float%5B%5D,%20float%5B%5D))
    的 getOrientation() 开发者文档。
- en: Refer to the RotateAnimation Developer Document at [http://developer.android.com/reference/android/view/animation/RotateAnimation.html](http://developer.android.com/reference/android/view/animation/RotateAnimation.html)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 [http://developer.android.com/reference/android/view/animation/RotateAnimation.html](http://developer.android.com/reference/android/view/animation/RotateAnimation.html)
    的 RotateAnimation 开发者文档。
- en: Creating a slideshow with ViewPager
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ViewPager 创建幻灯片放映
- en: 'This recipe will show you how to create a slideshow using the `ViewPager` class.
    Here is a screenshot showing a transition from one picture to another:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将向您展示如何使用 `ViewPager` 类创建幻灯片放映。以下是显示从一张图片切换到另一张图片的截图：
- en: '![](img/a2476c32-99a9-4b69-a8cd-a8e9705f7bca.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2476c32-99a9-4b69-a8cd-a8e9705f7bca.png)'
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `SlideShow`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for the Activity
    Type.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `SlideShow`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: We need four images for the slideshow.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要四个图像用于幻灯片放映。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We''ll create a Fragment to display each image for our slideshow, then set
    up `ViewPager` in the Main Activity. Here are the steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为幻灯片放映创建一个显示每张图像的片段，然后在主活动中设置 `ViewPager`。以下是步骤：
- en: Copy four images to the `/res/drawable` folder and name them `slide_0` through
    `slide_3`, keeping the original file extensions.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将四个图像复制到 `/res/drawable` 文件夹，并命名为 `slide_0` 至 `slide_3`，保持原始文件扩展名。
- en: 'Create a new layout file called `fragment_slide.xml` using the following XML:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 XML 创建一个新的布局文件 `fragment_slide.xml`：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, create a new Java class called `SlideFragment.java`. It will extend `Fragment` as
    follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个新的名为 `SlideFragment.java` 的 Java 类。它将扩展 `Fragment` 如下：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Import from the support library, resulting in the following import:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从支持库导入，结果如下导入：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following global declaration:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下全局声明：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the following empty, default fragment constructor:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下空的默认片段构造函数：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following method to save the image resource ID:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以保存图像资源 ID：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Override `on``CreateView()` as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下重写 `onCreateView()`：
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Our main activity will display just a `ViewPager`. Open `activity_main.xml`
    and replace the file contents with the following:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的主要活动将只显示一个 `ViewPager`。打开 `activity_main.xml` 并将文件内容替换为以下内容：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, open `MainActivity.java` and add the following global declarations:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 `MainActivity.java` 并添加以下全局声明：
- en: '[PRE31]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Use the following imports:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE32]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the following subclass within the `MainActivity` class:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 类中创建以下子类：
- en: '[PRE33]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Use the following imports:'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下导入：
- en: '[PRE34]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '11\. Override `onBackPressed()` in the `MainActivity` class as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 11. 在 `MainActivity` 类中重写 `onBackPressed()` 如下：
- en: '[PRE35]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '12\. Add the following code to the `onCreate()` method:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 12. 将以下代码添加到 `onCreate()` 方法中：
- en: '[PRE36]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 13\. Run the application on a device or emulator.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 13. 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first step is to create a fragment. Since we're doing a slideshow, all we
    need is `ImageViewer`. We also change `MainActivity` to extend `FragmentActivity`
    to load the fragments into `ViewPager`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个片段。由于我们正在进行幻灯片放映，我们只需要 `ImageViewer`。我们还把 `MainActivity` 改为扩展 `FragmentActivity`，以便将片段加载到
    `ViewPager` 中。
- en: '`ViewPager` uses `FragmentStatePagerAdapter` as the source for the fragments
    to transition. We create `SlideAdapter` to handle the two callbacks from the `FragmentStatePagerAdapter`
    class:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewPager` 使用 `FragmentStatePagerAdapter` 作为片段过渡的来源。我们创建 `SlideAdapter` 来处理
    `FragmentStatePagerAdapter` 类的两个回调：'
- en: '`getCount()`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCount()`'
- en: '`getItem()`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getItem()`'
- en: Furthermore, `getCount()` simply returns the number of pages we have in our
    slideshow, and `getItem()` returns the actual fragment to display. This is where
    we specify the image we want to display. As you can see, it would be very easy
    to add to or change the slideshow.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`getCount()` 简单地返回我们幻灯片中页面的数量，而 `getItem()` 返回要显示的实际片段。这是我们指定要显示的图片的地方。如您所见，很容易添加或更改幻灯片。
- en: Handling the *Backspace* key isn't a requirement for `ViewPager`, but it does
    provide a better user experience. However, `onBackPressed()` decrements the current
    page until it reaches the first page, then it sends the *Back* key to the superclass,
    which exits the application.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 *退格* 键不是 `ViewPager` 的要求，但它确实提供了更好的用户体验。然而，`onBackPressed()` 会递减当前页面，直到它达到第一页，然后它将
    *退* 键发送到超类，从而退出应用程序。
- en: There's more...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As you can see from the example, `ViewPager` takes care of most of the work,
    including handling the transition animations. We can customize the transition
    if we want, by implementing the `transformPage()` callback on the `ViewPager.PageTransformer`
    interface. (See the next recipe for a custom animation.)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，`ViewPager` 负责大部分工作，包括处理过渡动画。如果我们想自定义过渡动画，可以通过在 `ViewPager.PageTransformer`
    接口上实现 `transformPage()` 回调来实现。（有关自定义动画的示例，请参阅下一道菜谱。）
- en: Creating a Setup Wizard
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建设置向导
- en: The `ViewPager` can also be used to create a Setup Wizard. Instead of creating
    a single fragment to display an image, create a fragment for each step of your
    wizard and return the appropriate fragment in the `getItem()` callback.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewPager` 也可以用来创建设置向导。不是创建一个用于显示图片的单个片段，而是为向导的每个步骤创建一个片段，并在 `getItem()` 回调中返回适当的片段。'
- en: See also
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to the Android ViewPager Documentation at [http://developer.android.com/reference/android/support/v4/view/ViewPager.html](http://developer.android.com/reference/android/support/v4/view/ViewPager.html)
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 Android ViewPager 文档，[http://developer.android.com/reference/android/support/v4/view/ViewPager.html](http://developer.android.com/reference/android/support/v4/view/ViewPager.html)
- en: Refer to the *Creating a custom Zoom Animation* recipe for an example of creating
    a custom animation
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅 *创建自定义缩放动画* 菜谱以获取创建自定义动画的示例
- en: Creating a Card Flip Animation with Fragments
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用片段创建卡片翻转动画
- en: The card flip is a common animation that we will demonstrate using fragment
    transitions. We'll use two different images, one for the front and one for the
    back, to create the card flip effect. We'll need four animation resources, two
    for the front and two for the back transitions, which we will define in XML using
    `objectAnimator`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 卡片翻转是一种常见的动画，我们将通过使用片段转换来演示。我们将使用两张不同的图片，一张用于正面，一张用于背面，以创建卡片翻转效果。我们需要四个动画资源，两个用于正面过渡，两个用于背面过渡，我们将使用
    `objectAnimator` 在 XML 中定义这些资源。
- en: 'Here''s a screenshot of the application we''ll build showing the Card Flip
    Animation in action:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将构建的应用程序的截图，展示了卡片翻转动画的实际效果：
- en: '![](img/9a28221e-b11b-4186-8222-d44b06b23bd4.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a28221e-b11b-4186-8222-d44b06b23bd4.png)'
- en: Getting ready
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `CardFlip`. Use the default
    Phone & Tablet options and select Empty Activity when prompted for the Activity
    Type.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，并将其命名为 `CardFlip`。使用默认的 Phone & Tablet 选项，并在提示活动类型时选择
    Empty Activity。
- en: 'For the front and back images of the playing card, we found the following images
    on [www.pixabay.com](http://www.pixabay.com):'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于玩牌的前后图像，我们在 [www.pixabay.com](http://www.pixabay.com) 找到了以下图像：
- en: '[https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/](https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/](https://pixabay.com/en/ace-hearts-playing-cards-poker-28357/)'
- en: '[https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/](https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/](https://pixabay.com/en/card-game-deck-of-cards-card-game-48978/)'
- en: How to do it...
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''ll need two fragments: one for the front of the card and the other for
    the back. Each fragment will define the image for the card. Then, we''ll need
    four animation files for the full card flip effect. Here are the steps to set
    up the project structure correctly and to create the resources needed:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个片段：一个用于卡片的前面，另一个用于背面。每个片段将定义卡片的图像。然后，我们需要四个动画文件来实现完整的卡片翻页效果。以下是正确设置项目结构和创建所需资源的步骤：
- en: Once you have front and back images for the cards, copy them to the `res/drawable`
    folder as `card_front.jpg` and `card_back.jpg` (keep the original file extension
    of your images if different).
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你有了卡片的正反两面图像，将它们复制到`res/drawable`文件夹中，分别命名为`card_front.jpg`和`card_back.jpg`（如果图像的原始文件扩展名不同，请保持原始文件扩展名）。
- en: 'Create an animator resource directory: `res/animator`. (In Android Studio,
    go to File | New | Android resource directory. When the New Android Resource dialog
    displays, choose `animator` in the Resource Type drop-down list.)'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个动画资源目录：`res/animator`。（在Android Studio中，转到文件 | 新建 | Android资源目录。当新建Android资源对话框显示时，在资源类型下拉列表中选择`animator`。）
- en: 'Create `card_flip_left_enter.xml` in `res/animator` using the following XML:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中使用以下XML创建`card_flip_left_enter.xml`：
- en: '[PRE37]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create `card_flip_left_exit.xml` in `res/animator` using the following XML:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中使用以下XML创建`card_flip_left_exit.xml`：
- en: '[PRE38]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create `card_flip_right_enter.xml` in `res/animator` using the following XML:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中使用以下XML创建`card_flip_right_enter.xml`：
- en: '[PRE39]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create `card_flip_right_exit.xml `in `res/animator` using the following XML:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/animator`中使用以下XML创建`card_flip_right_exit.xml`：
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create a new resource file in `res/values` called `timing.xml` using the following
    XML:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/values`中创建一个新的资源文件，命名为`timing.xml`，使用以下XML：
- en: '[PRE41]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a new file in `res/layout` called `fragment_card_front.xml` using the
    following XML:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout`中使用以下XML创建一个新的文件，命名为`fragment_card_front.xml`：
- en: '[PRE42]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create a new file in `res/layout` called `fragment_card_back.xml` using the
    following XML:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`res/layout`中使用以下XML创建一个新的文件，命名为`fragment_card_back.xml`：
- en: '[PRE43]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a new Java class called `CardFrontFragment` using the following code:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个新的Java类`CardFrontFragment`：
- en: '[PRE44]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a new Java class called `CardBackFragment` using the following code:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建一个新的Java类`CardBackFragment`：
- en: '[PRE45]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Replace the existing `activity_main.xml` file with the following XML:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的`activity_main.xml`文件替换为以下XML：
- en: '[PRE46]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open `MainActivity.java` and add the following global declaration:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`并添加以下全局声明：
- en: '[PRE47]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following code to the existing `onCreate()` method:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到现有的`onCreate()`方法中：
- en: '[PRE48]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add the following method, which handles the actual fragment transition:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，它处理实际的片段转换：
- en: '[PRE49]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: You're ready to run the application on a device or emulator.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经准备好在设备或模拟器上运行应用程序了。
- en: How it works...
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most of the effort to create the card flip is in setting up the resources. Since
    we want a front and back view of the card, we create two fragments with the appropriate
    images. We call the `flipCard()` method when the card is pressed. The actual animation
    is handled by `setCustomAnimations()`. This is where we pass in the four animation
    resources we defined in the XML. As you can see, Android makes it very easy.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 创建卡片翻页的大部分工作在于设置资源。由于我们想要卡片的正反两面视图，我们创建了两个包含适当图像的片段。当卡片被按下时，我们调用`flipCard()`方法。实际的动画由`setCustomAnimations()`处理。这就是我们传入在XML中定义的四个动画资源的地方。正如你所见，Android使这变得非常简单。
- en: It's important to note that we did not use the Support Library Fragment Manager,
    as the support library does not support `objectAnimator`. If you want support
    pre-Android 3.0, you'll need to include the old anim resources and check the OS
    version at runtime, or create the animation resources in code. (See the next recipe.)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们没有使用Support Library Fragment Manager，因为支持库不支持`objectAnimator`。如果你想支持Android
    3.0之前的版本，你需要包含旧的动画资源，并在运行时检查操作系统版本，或者直接在代码中创建动画资源。（见下一道菜谱。）
- en: See also
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: See the next recipe, *Creating a Zoom Animation with a Custom Transition*, for
    an example of animation resources created in code
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅下一道菜谱，*使用自定义过渡创建缩放动画*，以查看在代码中创建的动画资源示例。
- en: Refer to the Integer Resource Type web page at [https://developer.android.com/guide/topics/resources/more-resources.html#Integer](https://developer.android.com/guide/topics/resources/more-resources.html#Integer)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[整数资源类型网页](https://developer.android.com/guide/topics/resources/more-resources.html#Integer)。
- en: Creating a Zoom Animation with a Custom Transition
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义过渡创建缩放动画
- en: The previous recipe, *Creating a Card Flip Animation with Fragments*, demonstrated
    a transition animation using animation resource files. In this recipe, we will
    create a zoom effect using animation resources created in code. The application
    shows a thumbnail image, then expands to an enlarged image when pressed.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的菜谱，“使用片段创建卡片翻转动画”演示了使用动画资源文件实现的过渡动画。在本菜谱中，我们将使用代码中创建的动画资源创建缩放效果。应用程序显示缩略图图像，然后按下时扩展到放大图像。
- en: 'The following image contains three screenshots showing the zoom animation in
    action:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像包含三个截图，展示了缩放动画的实际效果：
- en: '![](img/9eb564f2-bccd-4f96-bd93-23ba94c62e87.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9eb564f2-bccd-4f96-bd93-23ba94c62e87.png)'
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `ZoomAnimation`. Use the
    default Phone & Tablet options and select Empty Activity when prompted for the
    Activity Type.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，并将其命名为`ZoomAnimation`。使用默认的Phone & Tablet选项，并在提示活动类型时选择Empty
    Activity。
- en: For the image needed for this recipe, we downloaded a picture from [www.pixabay.com](http://www.pixabay.com)
    to include in the project source files, but you can use any image.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本菜谱所需的图像，我们从[www.pixabay.com](http://www.pixabay.com)下载了一张图片并将其包含在项目源文件中，但你可以使用任何图像。
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Once you have your image ready, follow these steps:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的图像准备就绪，请按照以下步骤操作：
- en: Copy your image to the `res/drawable` folder and name it `image.jpg` (if not
    a JPEG image, keep the original file extension).
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像复制到`res/drawable`文件夹，并命名为`image.jpg`（如果不是JPEG图像，则保留原始文件扩展名）。
- en: 'Now, open `activity_main.xml` and replace the existing XML with the following:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`activity_main.xml`并用以下内容替换现有的XML：
- en: '[PRE50]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, open `MainActivity.java` and declare the following global variables:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`MainActivity.java`并声明以下全局变量：
- en: '[PRE51]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Add the `loadSampledResource()` method we created in the *Scaling down large
    images to avoid Out of Memory exceptions* recipe to scale the image:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们在“缩小大图像以避免内存不足异常”菜谱中创建的`loadSampledResource()`方法添加到缩放图像中：
- en: '[PRE52]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the following code to the `onCreate()` method:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`onCreate()`方法中：
- en: '[PRE53]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the following `zoomFromThumbnail()` method, which handles the actual animation
    and is explained later:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`zoomFromThumbnail()`方法，它处理实际的动画，稍后解释：
- en: '[PRE54]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Run the application on a device or emulator.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, take a look at the layout file we used. There are two parts: the `LinearLayout`
    with the `ImageView` thumbnail, and the expanded `ImageView`. We control the visibility
    of both views as the images are clicked. We set the starting thumbnail image using
    the same `loadSampledResource()` as discussed in the *Scaling down large images
    to avoid Out of Memory exceptions* recipe.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看看我们使用的布局文件。有两个部分：包含`ImageView`缩略图的`LinearLayout`和扩展的`ImageView`。我们控制这两个视图的可见性，当图像被点击时。我们使用与“缩小大图像以避免内存不足异常”菜谱中讨论的相同的`loadSampledResource()`设置起始缩略图图像。
- en: However, `zoomFromThumbnail()` is where the real work is being done for this
    demonstration. There's a lot of code, which breaks down as follows.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`zoomFromThumbnail()`是本演示中真正工作的地方。有很多代码，分解如下。
- en: First, we store the current animation in `mCurrentAnimator`, so we can cancel
    if the animation is currently running.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将当前动画存储在`mCurrentAnimator`中，这样我们可以在动画正在运行时取消它。
- en: Next, we get the starting position of the image using the `getGlobalVisibleRect()`
    method. This returns the screen position of the view. When we get the visible
    bounds of expanded `ImageView`, we also get `GlobalOffset` of the view to offset
    the coordinates from app coordinates to screen coordinates.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`getGlobalVisibleRect()`方法获取图像的起始位置。此方法返回视图的屏幕位置。当我们获取扩展`ImageView`的可见边界时，我们也会获取视图的`GlobalOffset`，以便将坐标从应用坐标转换为屏幕坐标。
- en: With the starting bounds set, the next step is to calculate the ending bounds.
    We want to keep the same aspect ratio for the final image to prevent it from being
    skewed. We need to calculate how the bounds need to be adjusted to keep the aspect
    ratio within the expanded `ImageView`. The screenshot shown in the introduction
    shows how this image was sized, but this will vary by image and device.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 设置起始边界后，下一步是计算结束边界。我们希望保持最终图像的相同宽高比，以防止其变形。我们需要计算边界需要如何调整，以保持宽高比在扩展的`ImageView`内。介绍中显示的截图显示了如何调整此图像的大小，但这一点会因图像和设备而异。
- en: 'With the starting and ending bounds calculated, we can now create the animation.
    Actually, four animations, in this case, one animation for each point of the rectangle,
    as shown in this code:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算了起始和结束边界之后，我们现在可以创建动画。实际上，在这种情况下有四个动画，每个矩形的一个点对应一个动画，如以下代码所示：
- en: '[PRE55]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'These two lines of code control the animation timing:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这两行代码控制动画时间：
- en: '[PRE56]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The `setDuration()` method tells the animator object how long it should take
    to animate the translations set previously. However, `setInterpolator()` governs
    how the translation is made. (The Interpolator was mentioned in the *Introduction*,
    and a link is provided in the *See also* section of this recipe.) After starting
    the animation with the `start()` method, we save the current animation to the
    `mCurrentAnimator` variable, so the animation can be canceled, if needed. We create
    an `AnimatorListenerAdapter` to respond to the animation events and clear the
    `mCurrentAnimator` variable upon completion.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDuration()`方法告诉动画对象之前设置的平移动画需要多长时间。然而，`setInterpolator()`控制平移的方式。（在*简介*中提到了Interpolator，并在本食谱的*另请参阅*部分提供了链接。）在用`start()`方法开始动画后，我们将当前动画保存到`mCurrentAnimator`变量中，以便在需要时取消动画。我们创建一个`AnimatorListenerAdapter`来响应动画事件，并在动画完成后清除`mCurrentAnimator`变量。'
- en: There's more...
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When the user presses the expanded image, the application just hides the expanded
    `ImageView` and sets the thumbnail as `visible`. We could create a reverse zoom
    animation in the `mImageViewExpanded` click event using the expanded bounds as
    the starting point, then returning to the thumbnail bounds. (It would probably
    be easier to create the `mImageViewExpanded` event in `zoomFromThumbnail()` to
    avoid having to duplicate calculating the start and stop bounds again.)
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下展开的图像时，应用程序只是隐藏展开的`ImageView`并将缩略图设置为`可见`。我们可以在`mImageViewExpanded`点击事件中使用展开的边界作为起点创建反向缩放动画，然后返回到缩略图边界。（在`zoomFromThumbnail()`中创建`mImageViewExpanded`事件可能更容易，这样可以避免再次计算起始和结束边界。）
- en: Getting the default animation duration
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取默认动画持续时间。
- en: 'Our code used 1,000 milliseconds when setting the duration with `setDuration()`.
    We purposely used a long duration to make it easier to view the animation. We
    can get the default Android animation duration using the following code:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在设置持续时间时使用了1,000毫秒。我们故意使用较长的持续时间以便更容易查看动画。我们可以使用以下代码获取默认的Android动画持续时间：
- en: '[PRE57]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See the first recipe, *Scaling down large images to avoid Out of Memory exceptions*,
    for a detailed explanation of the `loadSampledResource()` method
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅第一篇食谱，*将大图像缩小以避免内存不足异常*，以详细了解`loadSampledResource()`方法。
- en: Refer to the Interpolator Developer Document at [http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考[http://developer.android.com/reference/android/view/animation/Interpolator.html](http://developer.android.com/reference/android/view/animation/Interpolator.html)上的Interpolator开发者文档。
- en: Displaying animated image (GIF/WebP) with the new ImageDecoder library
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用新的ImageDecoder库显示动画图像（GIF/WebP）。
- en: Android P (API 28) introduces a new library called ImageDecoder, which will
    be deprecating the BitmapFactory class. This new image library promises to make
    it easier to work with not just bitmaps, but several other file formats not supported
    in the old BitmapFactory class, such as GIF and WebP animated images.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Android P（API 28）引入了一个名为ImageDecoder的新库，它将弃用BitmapFactory类。这个新的图像库承诺将使处理位图更容易，同时还能处理旧BitmapFactory类不支持的其他文件格式，例如GIF和WebP动画图像。
- en: At the time of writing, it is only available on devices running Android P (or
    later) and is not available in the support library, but according to this issue
    on the Google issue tracker, there are plans to add ImageDecoder to the support
    library: [https://issuetracker.google.com/issues/78041382](https://issuetracker.google.com/issues/78041382).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，它仅适用于运行Android P（或更高版本）的设备，且不支持在支持库中，但根据谷歌问题跟踪器上的此问题，有计划将ImageDecoder添加到支持库中：[https://issuetracker.google.com/issues/78041382](https://issuetracker.google.com/issues/78041382)。
- en: When, or if, that happens, the previous examples will be updated to use this
    new library instead. For now, we'll take a look at new functionality, and that
    is native support for displaying GIF images.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，或如果发生这种情况，之前的示例将更新为使用这个新库。现在，我们将查看新功能，那就是对显示GIF图像的原生支持。
- en: Getting ready
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Create a new project in Android Studio and call it `AnimatedImage`. In the
    Target Android Devices dialog, make sure to select API 28 (or greater) for the Phone
    & Tablet option. Select Empty Activity when prompted for the Activity Type. In
    the Configure Activity dialog (shown next), deselect the Backwards Compatibility
    option since this feature is not yet available in the support library:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android Studio中创建一个新的项目，命名为`AnimatedImage`。在“目标Android设备”对话框中，确保为“手机和平板”选项选择API
    28（或更高版本）。当被提示选择“活动类型”时，选择“空活动”。在“配置活动”对话框（如图所示）中，取消选择“向后兼容性”选项，因为此功能在支持库中尚不可用：
- en: '![](img/44fe8b12-8dcf-46ab-9b06-ee8525066084.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44fe8b12-8dcf-46ab-9b06-ee8525066084.png)'
- en: We'll also need a GIF image. We turned to Giphy.com for a royalty-free image,
    which you can see in the downloadable project files.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个GIF图像。我们转向Giphy.com寻找免费版权的图像，您可以在可下载的项目文件中看到。
- en: How to do it...
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have your GIF image, follow these steps:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了GIF图像，请按照以下步骤操作：
- en: Copy your image to the `res/drawable` folder. Our file is named `giphy.gif`
    but you can use your own filename instead.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像复制到`res/drawable`文件夹。我们的文件名为`giphy.gif`，但您可以使用自己的文件名。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`activity_main.xml`，将现有的`TextView`替换为以下`ImageView`：
- en: '[PRE58]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Open `MainActivity.java` and add the following line of code to the existing
    `onCreate()` method:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.java`，并将以下代码行添加到现有的`onCreate()`方法中：
- en: '[PRE59]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, add the loadGif method as follows:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，按照以下方式添加loadGif方法：
- en: '[PRE60]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Run your app on a device or emulator running at least Android P.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在至少运行Android P的设备或模拟器上运行您的应用程序。
- en: 'If you do not see the animated image when running this code, try disabling
    hardware acceleration in the Android Manifest. Add the following to either the `<application>` node
    or the  `<activity>` node:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行此代码时看不到动画图像，请尝试在AndroidManifest中禁用硬件加速。将以下内容添加到`<application>`节点或`<activity>`节点中：
- en: '`android:hardwareAccelerated="false"`.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`android:hardwareAccelerated="false"`。'
- en: How it works...
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see in the preceding code, the `ImageDecoder` library has made it
    very simple to display a GIF. First, you have to define your source image. Currently,
    the `createSource()` method can read an image from the following sources:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码所示，`ImageDecoder`库使得显示GIF变得非常简单。首先，您必须定义您的源图像。目前，`createSource()`方法可以从以下来源读取图像：
- en: Resources (drawable) folder
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源（drawable）文件夹
- en: Assets folder
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产文件夹
- en: ContentResolver (URI)
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ContentResolver (URI)
- en: Byte buffer
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字节缓冲区
- en: File
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件
- en: (This could change in the final Android P release.)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: （这可能在最终的Android P版本中有所改变。）
- en: 'In our code, we copied the image to the drawable folder. If we had copied it
    to the assets folder instead, the code would have been as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们将图片复制到了drawable文件夹。如果我们将其复制到assets文件夹，代码将如下所示：
- en: '[PRE61]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: With the image source defined, we just have to call `decodeDrawable()` to decode
    the image and set the drawable for the ImageView. Once the drawable is set, the
    final key to the animated image is to call the `start()` method. If the decoded
    image is of type `AnimatedDrawable` (which it will be if we loaded a valid GIF),
    we then call the start method to activate the animation.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了图像源之后，我们只需调用`decodeDrawable()`来解码图像并设置ImageView的drawable。一旦设置了drawable，动画图像的最后一个关键步骤是调用`start()`方法。如果解码的图像是`AnimatedDrawable`类型（如果我们加载了一个有效的GIF，它将是这种类型），我们就调用start方法来激活动画。
- en: See also
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The `ImageDecoder` documentation: [https://developer.android.com/reference/android/graphics/ImageDecoder](https://developer.android.com/reference/android/graphics/ImageDecoder)
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ImageDecoder`文档：[https://developer.android.com/reference/android/graphics/ImageDecoder](https://developer.android.com/reference/android/graphics/ImageDecoder)'
- en: See the next recipe for more examples of using the ImageDecoder library
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见下一道菜谱，了解更多使用ImageDecoder库的示例
- en: Creating a circle image with the new ImageDecoder
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用新的ImageDecoder创建圆形图像
- en: As mentioned in the previous recipe, the ImageDecoder library is a new library
    introduced in Android P and promises many new and exciting features not available
    before with the BitmapFactory class. One of those features is the ability to apply
    effects to the image with a post processor. A post processor is a new helper class
    allowing you to add custom processing (or manipulation) to an image after it is
    loaded. Custom processing might include adding a tint to the image, drawing (such
    as stamps) on top of the image, adding a frame, or in our example making the image
    round.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ImageDecoder 库是 Android P 中引入的新库，它承诺了许多之前使用 BitmapFactory 类不可用的新功能和令人兴奋的功能。其中之一是使用后处理器应用图像效果的能力。后处理器是一个新的辅助类，允许您在图像加载后添加自定义处理（或操作）。自定义处理可能包括向图像添加色调、在图像上绘制（如邮票）、添加边框，或者在我们的例子中使图像圆形。
- en: 'In our example, we start with a rectangle image (downloaded from Pixabay.com,
    which you can see here: [https://pixabay.com/en/wallpaper-background-eclipse-1492818/](https://pixabay.com/en/wallpaper-background-eclipse-1492818/).)
    We then apply a post processor to create a rounded image, as you can see in this
    screenshot:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们从矩形图像（从 Pixabay.com 下载，您可以在以下链接中看到：[https://pixabay.com/en/wallpaper-background-eclipse-1492818/](https://pixabay.com/en/wallpaper-background-eclipse-1492818/)）开始。然后我们应用后处理器来创建圆形图像，正如您可以在下面的屏幕截图中所见：
- en: '![](img/5757b552-0f27-42bc-97a3-f0980a77b43f.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5757b552-0f27-42bc-97a3-f0980a77b43f.png)'
- en: This is another exciting new feature available in the ImageDecoder library because
    until now, developers usually turned to third-party libraries. Although many of
    these libraries are still going to be very useful, especially for handling image
    loading in lists; for something as simple as creating a rounded image, say, for
    a profile picture, there is now an easy native solution.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 ImageDecoder 库中可用的另一个令人兴奋的新功能，因为到目前为止，开发者通常转向第三方库。尽管这些库中的许多仍然非常有用，尤其是在处理列表中的图像加载时；对于像创建圆形图像这样简单的事情，比如头像，现在有一个简单的本地解决方案。
- en: Getting ready
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a new project in Android Studio and call it `CircleImage`. In the Target
    Android Devices dialog, make sure to select API 28 (or greater) for the Phone
    & Tablet option.  Select Empty Activity when prompted for the Activity Type. In
    the Configure Activity dialog (shown next), deselect the Backwards Compatibility option
    since this feature is not yet available in the support library.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android Studio 中创建一个新的项目，命名为 `CircleImage`。在“目标 Android 设备”对话框中，确保为“手机和平板”选项选择
    API 28（或更高版本）。当提示选择“活动类型”时，选择“空活动”。在“配置活动”对话框（如下所示）中，取消选择“向后兼容”选项，因为此功能尚不支持在支持库中。
- en: How to do it...
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have your GIF image, follow these steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了 GIF 图像，请按照以下步骤操作：
- en: Copy an image to the `res/drawable` folder. (This example uses an image named
    stars.jpg. Use your image name instead.) If it's smaller than the size of our
    circle created here, you'll need to use a smaller radius.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片复制到 `res/drawable` 文件夹中。（本例使用名为 stars.jpg 的图片。请使用您的图片名称。）如果它比我们在这里创建的圆的大小小，您需要使用更小的半径。
- en: 'Open `activity_main.xml` and replace the existing `TextView` with the following
    `ImageView`:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `activity_main.xml` 并将现有的 `TextView` 替换为以下 `ImageView`：
- en: '[PRE62]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '3\. Open `MainActivity.java` and add the following code to the class declaration:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 打开 `MainActivity.java` 并将以下代码添加到类声明中：
- en: '[PRE63]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '4\. Add the following line of code to the existing `onCreate()` method:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 将以下代码行添加到现有的 `onCreate()` 方法中：
- en: '[PRE64]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '5\. The last code to add is the following `loadImage()` method:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 需要添加的最后一段代码是以下 `loadImage()` 方法：
- en: '[PRE65]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 6\. Run the app on a device or emulator running at least Android P.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 在至少运行 Android P 的设备或模拟器上运行应用程序。
- en: How it works...
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We start off with the same XML layout as the previous recipe. And if we omitted
    adding the post processor, we''d get a standard rectangle image. To see for yourself,
    comment the following line of code in `OnHeaderDecodedListener`:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从与之前食谱相同的 XML 布局开始。如果我们省略了添加后处理器的步骤，我们会得到一个标准的矩形图像。为了自己看看，请在 `OnHeaderDecodedListener`
    中注释掉以下行代码：
- en: '[PRE66]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The core of the work being done here is in `PostProcessor` created in step 3\.
    Although there are a several lines of code, what's being done is pretty simple.
    It just creates a circle (using the dimensions we specified) and clears everything
    out (by setting the color to `TRANSPARENT`) not in our circle.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这里正在进行的这项工作的核心是在第 3 步中创建的 `PostProcessor`。尽管有几行代码，但所做的工作非常简单。它只是创建一个圆（使用我们指定的尺寸）并清除（通过将颜色设置为
    `TRANSPARENT`）不在我们圆内的所有内容。
- en: The key is setting the post processor, which can only be done in the `onHeaderDecoded()`
    callback. This is why we first create the `OnHeaderDecodedListener` so we can
    get a reference to the decoder.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是设置后处理器，这只能在`onHeaderDecoded()`回调中完成。这就是我们首先创建`OnHeaderDecodedListener`的原因，这样我们就可以获取解码器的引用。
- en: There's more...
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'What if you wanted rounded corners instead of a circle image? With one simple
    change in the `Path` created for the post processor, you could have that effect
    instead. Instead of the `addCircle()` call when creating the `Path`, use this
    line of code instead:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用圆角而不是圆形图像呢？通过在后处理器的`Path`创建中进行一个简单的更改，你就可以实现这种效果。在创建`Path`时，不要使用`addCircle()`调用，而是使用以下代码行代替：
- en: '[PRE67]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The value of 250 used creates a very rounded corner, so experiment to get the
    amount of rounding desired. Take a look at the reference links in *See also* for
    more information on the post processor and `Path`.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 使用250的值创建一个非常圆滑的角落，因此请进行实验以获得所需的圆滑程度。查看“也见”部分中的参考链接以获取有关后处理器和`Path`的更多信息。
- en: See also
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 也见
- en: The `PostProcessor` reference documentation: [https://developer.android.com/reference/android/graphics/PostProcessor](https://developer.android.com/reference/android/graphics/PostProcessor)
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PostProcessor`参考文档：[https://developer.android.com/reference/android/graphics/PostProcessor](https://developer.android.com/reference/android/graphics/PostProcessor)'
- en: The `Path` reference documentation: [https://developer.android.com/reference/android/graphics/Path](https://developer.android.com/reference/android/graphics/Path)
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Path`参考文档：[https://developer.android.com/reference/android/graphics/Path](https://developer.android.com/reference/android/graphics/Path)'
