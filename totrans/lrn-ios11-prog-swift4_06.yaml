- en: Starting the UI Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have learned Swift, which will help you to understand a lot of
    the boilerplate code you will see later, it is time to start building our *Let's
    Eat* app. Let's begin by getting an overview of what we are going to build. We
    will review the finished product and then get into how to build this app. Before
    we start, there will be a lot of new terms and things with which you may or may
    not be familiar. Learn as much as you can and do not let the finer details stop
    you from progressing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Useful terms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App tour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storyboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom title view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful terms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we dig in and start getting our UI set up, we need to take a few minutes
    to introduce (or re-introduce) you to some terms that you should understand while
    we build our app:'
  prefs: []
  type: TYPE_NORMAL
- en: View Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table View Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection View Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tab Bar Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Segue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model View Controller** (**MVC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: View Controllers (`UIViewControllers`) are blank scenes that you can use to
    hold other UI elements. They give you the ability to create a custom interface.
  prefs: []
  type: TYPE_NORMAL
- en: Table View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Table View Controller (`UITableViewController`), which inherits from `UIViewController`,
    is one of the most common UI elements and is used to display a list of items.
    For example, Apple''s Settings screen uses Table View Controller to display the
    list of settings a user can access and change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d92ee719-2ca9-474e-abcd-761cf51dd743.png)'
  prefs: []
  type: TYPE_IMG
- en: Collection View Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collection View Controllers (`UICollectionViewControllers`) are typically used
    when you want to display elements within a grid. They are highly customizable
    and, because of that, are becoming more popular in non-grid based layouts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The App Store, for example, currently uses `UICollectionViewControllers` for
    both its featured page and its app detail page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fa40334-bf16-4d37-9fef-95b47ab213fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigation Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Navigation Controller (`UINavigationController`) is a UI element that allows
    you to build a drill-down interface for hierarchical content. When you embed a
    Navigation Controller into a View Controller, Table View Controller, or Collection
    View Controller, it manages navigation from one controller to another controller.
  prefs: []
  type: TYPE_NORMAL
- en: Tab Bar Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Tab Bar Controller (`UITabBarController`) manages an array of View Controllers.
    Our *Let's Eat* app will use a Tab Bar Controller. This controller will give us
    the ability to have navigation for our app with minimal setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple has a few apps with which you might be familiar that use the Tab Bar
    Controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b72c010-5b0d-49c4-a097-255768dedfa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A `UITabBarController` can only have five tabs on the iPhone. If your `UITabBarController`
    has more than five tabs on the iPhone, the fifth tab and any after that move underneath
    a More button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebe8ec69-5f83-4b6a-9e94-31e7da643644.png)'
  prefs: []
  type: TYPE_IMG
- en: Storyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A storyboard is a file displays a visual representation of your app''s UI.
    This is what a storyboard looks like for an app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/942545eb-e4d0-4da6-8708-7b0f950eeed4.png)'
  prefs: []
  type: TYPE_IMG
- en: Storyboards let you create your entire app visually using View Controllers,
    Table View Controllers, and Collection View Controllers as scenes. Along with
    creating your app visually, you can connect scenes and set up transitions between
    scenes using segues.
  prefs: []
  type: TYPE_NORMAL
- en: Segue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Segues are used to connect one controller to another controller. In the storyboard,
    segues are represented by an arrow with an icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84f31c11-669a-4401-a06a-3bd6eb69b9dc.png)'
  prefs: []
  type: TYPE_IMG
- en: Segues also give you the ability to specify a transition from one scene to another,
    with very little to no programming.
  prefs: []
  type: TYPE_NORMAL
- en: Auto Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auto layout is an excellent tool that allows you to support different screen
    sizes and device rotation. With auto layout, you can set different constraints
    on UI elements for it to adjust to changes in size and rotation. Using auto layout
    in your app allows you to use one storyboard for all devices.
  prefs: []
  type: TYPE_NORMAL
- en: Model View Controller (MVC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MVC is a standard software design pattern, which is a solution for commonly
    occurring problems within software design. Apple has built iOS apps on the MVC
    design pattern. This pattern divides our app into three camps known as the Model,
    View, and Controller. We will cover this in detail later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: App tour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *Let''s Eat* app that we are building is a restaurant reservation app that
    allows users to find restaurants in a specific area and create reservations from
    within the app (although our app does not book those reservations). I chose a
    restaurant reservation app for the purposes of the lessons in this book, because
    most of the new iOS 11 features work well together in such an app. The app covers
    a lot of different aspects from maps to iMessage extensions. Let''s take a look
    at the overall flow of the app, so that, as we build, you have a good idea of
    the direction we are heading in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90d949a5-fcf4-49d6-a7e5-396c4cd39442.png)'
  prefs: []
  type: TYPE_IMG
- en: Explore tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the app launches, you will see the Explore tab. This tab will allow users
    to pick a particular cuisine that they would like and to select a specific predefined
    location. Let''s break down each component in this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4302ebdf-4492-457f-b833-ff5ce32f17a9.png)'
  prefs: []
  type: TYPE_IMG
- en: For this screen, we will work with an empty View Controller, which is where
    all of our UI components live. As you can see, this view in our app is designed
    to be a grid, so we will be using a Collection View Controller. We will be setting
    up this Collection View Controller ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: When I build apps, I typically start with a blank Collection View or Table View,
    because it gives more flexibility in my code as well as with my user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Locations view is a list of cities that is accessed from the Explore tab.
    We load this list of cities from a local file-and, if the user selects a city,
    the app loads all of the restaurants from that area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2024a8f-2f2d-4ad7-9fd5-a6ef26ef3af9.png)'
  prefs: []
  type: TYPE_IMG
- en: For this Locations view, we will be working with a View Controller that uses
    a Table View.
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Restaurant listings, we see restaurants in the area by the selected cuisine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59a3d98a-9cc0-4d03-b93c-23451bc533a6.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be covering both `UICollectionViews` and `UITableViews` in this book,
    but, as an introduction, you should know that `UICollectionViews` are very powerful.
    The reason they are powerful is that you can customize them to look how you want.
    For example, the App Store detail is a custom `UICollectionView`.
  prefs: []
  type: TYPE_NORMAL
- en: One great feature when using `UICollectionView` is that, when you are building
    a universal app like this one, you can make your view look like a list for the
    iPhone, but appear as a grid on the iPad with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our Restaurant detail has more information about the restaurant. This view
    is built using a `UITableView` that uses static cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30bb8760-d108-4d22-81c5-f3ff8ae2019e.png)'
  prefs: []
  type: TYPE_IMG
- en: Map tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our Map tab is a View Controller with a map that has pins dropped on it from
    a specific location, denoting all of the restaurants in the area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d95be17b-4ff8-460e-b065-5c537eee28e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Project setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have gotten a tour of the app, we are going to build the *Let's
    Eat* app. First, we need to create the app, then work on the UI and lastly, design
    our app in a storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: For the initial setup of the app, we will look at some basics of iOS, starting
    with creating a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode, and the Xcode welcome screen will appear. Click on Create a new
    Xcode project in the left panel of the welcome screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Single View App and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d048f571-bd5e-4da7-8f53-483070594cf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the options screen that will appear, there will be a number of items to
    complete or choose. Add the following into that options screen and then hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Product Name**: LetsEat'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team**: Your account or leave blank'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization Name**: Your name/company name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization Identifier**: Your domain name in reverse order'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: Swift'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Devices**: Universal'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Core Data**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include Unit Tests**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include UI Tests**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c3e312bc-c973-4f1d-b16b-267692f4e042.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose your desktop or a folder in which to save your project and then hit
    Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3243976-fb89-462e-8fc1-46d9560f59b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you save, you will be presented with the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/afc5b249-cc43-41c7-af4f-f6bef5780c14.png)'
  prefs: []
  type: TYPE_IMG
- en: Your project is now created and we can start working on creating our first iOS
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered useful terms that we will use throughout the book.
    We also looked at what we are going to build throughout the app and now we have
    a good idea of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's dig in and start working inside of storyboard and getting the UI
    of the application set up. In the next few chapters, we will work strictly in
    the storyboard to get our app set up. Once we have everything set up, we will
    focus on code throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
