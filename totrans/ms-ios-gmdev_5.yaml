- en: Chapter 5. Bug Squashing – Testing and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m still trying to catch my breath from the last chapter! Boy, did we ever
    do a lot of work! Now it''s time to slow it down a little bit. After all that
    coding, we are going to discuss testing and debugging. Debugging is a critical
    step in the entire development process, as the appearance of bugs can ruin the
    experience of your app. You spend countless hours on it, and, if there are bugs,
    people will think it''s unprofessional. That''s certainly not ideal. Let''s see
    what we will discuss in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing our code on the simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing our project on various devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up TestFlight for beta testers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squishing those bugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will slow things down for this chapter and will resume the coding soon! So,
    let's sit back and treat this chapter as a breather. But don't think it will be
    a cake walk! No no! While this isn't exactly as action-packed as our last chapter,
    as I mentioned, this topic is super-critical in all projects, so it's super-important
    we pay attention to it.
  prefs: []
  type: TYPE_NORMAL
- en: Boom!
  prefs: []
  type: TYPE_NORMAL
- en: On to it!
  prefs: []
  type: TYPE_NORMAL
- en: Testing our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No doubt you've been messing around with the iOS simulator (a feature that,
    to be honest, is very helpful, and that I found easier to access than the Android
    SDK emulator), which is awesome, but there is actually quite a lot that you can
    do with it without having to actually install anything on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Let's open up our device simulator. To do this, inside Xcode, click on **Xcode**
    on the bar at the top, then click on **Open Developer Tool**, and finally click
    on **iOS Simulator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now be greeted with a pixel-for-pixel simulation of any iOS device
    of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our project](img/B03553_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As I mentioned earlier, I like to use the iPhone 4S simulator because it's small
    enough to fit on my screen, but you do have your pick of the litter. Is your simulator
    set to a device that you don't want? Want to change it to something else such
    as the glittery iPhone 6+? No problem!
  prefs: []
  type: TYPE_NORMAL
- en: Simply click on **Hardware** on the top bar. Then, under **Device**, you can
    select any awesome Apple mobile device you like! When you select a new device,
    you will need to allow some time for the new device to boot.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore!
  prefs: []
  type: TYPE_NORMAL
- en: If you click on **File**, you can snap a screenshot or at least see what key
    combination you can press to create a screenshot of the device screen (this is
    great for uploading to Facebook or iTunes).
  prefs: []
  type: TYPE_NORMAL
- en: When you click on **Edit**, you can copy the text, copy the screen, paste, start
    dictation, and see the emojis.
  prefs: []
  type: TYPE_NORMAL
- en: Back to **Hardware**, again you can select your device, you can rotate the device
    left or right, trigger a shake device gesture, trigger the home and lock buttons,
    or force a reboot.
  prefs: []
  type: TYPE_NORMAL
- en: You can also simulate a memory warning, trigger an in-call status bar, and select
    your keyboard settings as well as an external device.
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Debug** setting, you can choose to slow down animations, such as
    UI animations for opening and closing and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can also do some funky color stuff with the screen!
  prefs: []
  type: TYPE_NORMAL
- en: What?
  prefs: []
  type: TYPE_NORMAL
- en: Yes! You can color blended layers, copied images, misaligned images, and offscreen
    rendered items. In other words, you can highlight them to make them look as seen
    in the following screenshot. Kinda funky, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, why would one use this feature? Simple; sometimes sprites can get lost
    when debugging and you would like to keep track of them. Using this feature, you
    can easily track their movement. If you have a lot of sprites flying around your
    screen, this is a great feature to utilize. As seen in the following image, all
    images and sprites are tracked and clearly outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our project](img/B03553_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moving on, you can also open the system log, which is fantastic for debugging.
    You can also trigger an iCloud sync, and set the device mock location.
  prefs: []
  type: TYPE_NORMAL
- en: You can explore the device a little, but you will notice some settings and apps
    are missing. For example, you won't be able to select a background for the device,
    make calls, or send messages. You have a phone for that kind of stuff!
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, we will build and run our project (again, by clicking on the **Play**
    button in **Xcode**). We should still have the SpriteKit frame rate label, but
    that's not exactly as in-depth as we would like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get some more technical statistics, click on back to go to **Xcode** and
    then on **Debug** on the bar at the top. Hover over **Attach to Process** to find
    the name of the project that we are working on. It will show up under **Likely
    Targets**. When you click on your project, Xcode will display some technical information,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our project](img/B03553_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Among other details, Xcode will tell you what the **Process Identifier** (**PID**)
    of our app is as well as the **CPU**, **Memory**, **Disk**, and **Network** usage,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our project](img/B03553_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Yes, that stuff is pretty great, but again, still not quite as in-depth as a
    developer would like to see. Want to get some really cool in-depth instrumentation?
  prefs: []
  type: TYPE_NORMAL
- en: Back in Xcode, on the bar at the top click on **Xcode**, scroll down to **Open
    Developer Tool**, and select **Instruments**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now this is where we can get crazy and do some awesome in-depth testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our project](img/B03553_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just look at all those awesome choices! Let''s go through all the options you
    have here to help you debug:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Activity Monitor**: Similar to the performance figures we have seen before,
    we do have more insight into what''s going on within out app, as well as being
    able to record what''s going on, and go back through our log to see at what points
    our performance drops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allocations**: This section tracks the app''s virtual memory and breaks it
    down into class names as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: This executes a simple script that will simulate interaction
    with the user interface and, of course, record it all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cocoa Layout**: This section monitors the `NSLayoutConstraints` that is created
    when laying out your UI via the Storyboard editor in Xcode to see where things
    get out of place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core Animation**: This measures the app''s graphical performance and CPU
    usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core Data**: This measures the Core Data system activity. In other words,
    the disk or memory usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Moving past on to some more important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Energy Diagnostics**: This is an excellent tool to monitor battery usage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaks**: This measures memory usage and checks for any leaking memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenGL ES Analysis**: This measures and analyzes the rendering of our project
    and detects **OGLES** (as I like to call it) correctness as well as performance
    issues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pretty cool, eh? In the next chapter, we will explore more of this when we discuss
    making our game more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the simulator all figured out and we've looked at some of
    the awesome tools that Apple provides, let's move on to installing our app onto
    an actual device, which is actually incredibly easy.
  prefs: []
  type: TYPE_NORMAL
- en: All you have to do is connect your device to your development computer using
    the lightning cable or the 30-pin connector (if you have an older device) via
    USB.
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, in the same place where you would select the iOS simulator that you
    want to use, click on the Scheme toolbar, and select your device from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode will automatically register the device for you to use as a development
    device. As opposed to how things used to be when you would have to manually add
    the device's UUID number via [developer.apple.com](http://developer.apple.com),
    Apple has really streamlined this process.
  prefs: []
  type: TYPE_NORMAL
- en: Your device could possibly be disabled in the scheme editor, which would mean
    it isn't an eligible device. For example, say you have the beta version of iOS
    9 that was just released at the time of writing this book. If you had that installed,
    then an older version of Xcode installed, your device would not be eligible. You
    would have to install the latest version of Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Now, simply clicking on the **Run** button will let Xcode install your app on
    the device. It's that simple!
  prefs: []
  type: TYPE_NORMAL
- en: You may have Xcode asking whether or not you want to allow codesign in the key
    in your keychain. Click on **always allow**. You don't want that to pop up every
    time you click on the **Run** button. By clicking on **always allow**, Xcode will
    have the permission to automatically run the project on your device without having
    to ask.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way that we connected the debuggers and logs to our iOS simulator,
    you can link them to the project running on your device.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you may very well get different read-outs due to the fact that you
    are running on a simulator. The device could potentially run it much better or
    worse depending on the device and the number of flappy clones you have installed,
    the number of messages you have stored, the amount of storage you have remaining,
    and so on. It's usually a good idea (if possible) to have a device dedicated to
    development with nothing but your projects installed on it. That way, you know
    your app will perform 100% each time.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have things figured out on how to link debugging to our project
    and we know how to install our apps on our device, it's time to talk about getting
    beta testers to help you out.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up TestFlight users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should I set up TestFlight users, you ask? Simply put, you can test your
    code for hours on end, and still not be able to find certain bugs. Trust me, I've
    done it before, only to find out after thousands of people have installed the
    app that there is a game destroying bug that could have been found if I let someone
    else play the game in a back-busting style.
  prefs: []
  type: TYPE_NORMAL
- en: Beta testers, or TestFlight users can be your friends who want to help you test
    your game, or even people in a focus group who will test your game and give you
    honest feedback. Let's discuss how to set up Test Flight users.
  prefs: []
  type: TYPE_NORMAL
- en: What's a TestFlight user?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can define a TestFlight user as a beta tester. When you are ready for users
    to begin testing, you can set up TestFlight users that will receive a notification
    on their device when you have pushed a new version to test. From there, they can
    log any issues they see, so you will know if anything needs fixing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start off by logging in to [itunesconnect.apple.com](http://itunesconnect.apple.com)
    with your developer Apple ID, and then you will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s a TestFlight user?](img/B03553_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the main screen, simply click on the **Users and Rolls** button. You will
    see a **TestFlight Beta Testers** button on the top bar on the next page. Click
    on it to begin adding testers!
  prefs: []
  type: TYPE_NORMAL
- en: You will now be at the TestFlight Beta tester page. From here, you can see your
    internal testers (which will include you, as well as anyone else in your team)
    as well as your external testers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add people to test for you, click on the **External** button. On the next
    page, you will see the text, **External Tester**, next to which there should be
    a blue plus button, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s a TestFlight user?](img/B03553_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Internal testers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get feedback quickly by sharing your beta builds with up to 25 members of your
    team who have been assigned the Technical or Admin role in iTunes Connect. Each
    member can test on up to 10 devices.
  prefs: []
  type: TYPE_NORMAL
- en: External testers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you're ready, you can invite up to 1,000 users who are not part of your
    development organization to beta-test an app that you intend for public release
    on the App Store. Apps made available to external testers require a **Beta App
    Review** and must comply with the full **App Store Review Guidelines** before
    testing can begin. A review is required for new versions of your app that contain
    significant changes. Up to 10 apps can be tested at a time, internally or externally.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be able to add as many beta testers as required. Besides entering
    their e-mail address, and optionally their first and last name, you can add these
    people to a group, which can help keep multiple testers organized, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External testers](img/B03553_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The user will then get an e-mail requesting them to set up an account. From
    there, they can set up TestFlight on their device. We are now going to discuss
    how a TestFlight user can get started testing your awesome creation.
  prefs: []
  type: TYPE_NORMAL
- en: Using TestFlight as a beta tester
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use TestFlight on up to 10 devices and test multiple apps for multiple
    developers; there is no limit to the number of apps that you can test.
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight (as seen by the following icon image), can only be used to test iOS
    apps on iPhone, iPad, and iPod touch running iOS 8 or later—not Mac apps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installation](img/B03553_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once a tester accepts the invitation, they will be able to download a test version
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: If they already have the live app installed on their device, the beta version
    of the app will replace the live version.
  prefs: []
  type: TYPE_NORMAL
- en: When they've downloaded the beta app, they will see an orange dot next to its
    name that identifies it as a beta.
  prefs: []
  type: TYPE_NORMAL
- en: The TestFlight app will notify the tester each time a new build is available
    and provide instructions on what parts of the app they should keep an eye on.
  prefs: []
  type: TYPE_NORMAL
- en: Testers can easily offer feedback by tapping the **Provide Feedback** button
    in the **App Details** view in TestFlight. An e-mail automatically opens with
    app and device details, to which the tester can add additional details and screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Apps in beta do expire. The beta period lasts for 30 days, starting from the
    day it's released to testers. In TestFlight, the number of days remaining appears
    under the **Open** button for each app.
  prefs: []
  type: TYPE_NORMAL
- en: If a beta app has **In-App Purchases**, you do not have to purchase them, as
    In-App Purchases made with beta builds are free.
  prefs: []
  type: TYPE_NORMAL
- en: Opting out of testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the tester doesn't accept your e-mail invitation, the beta app will not be
    installed and they will not be listed as a tester.
  prefs: []
  type: TYPE_NORMAL
- en: Also, a tester can unsubscribe from testing by using the link at the bottom
    of the invitation e-mail to notify you (the developer) that they would like to
    be removed from TestFlight.
  prefs: []
  type: TYPE_NORMAL
- en: If a tester accepts the invitation but they don't want to test the app, they
    can delete themselves as a tester in the **App Details** page in TestFlight. Because,
    you know, people are selfish.
  prefs: []
  type: TYPE_NORMAL
- en: So really, Apple has created an awesome system to allow easy, quick testing
    of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that, each time you want to test a new version of your app, you
    need to upload the new version as well as submit the new version for review (as
    weird as that is, I know). It does seem redundant, but hey, it's Apple, and they
    know what they're doing.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about crushing bugs!
  prefs: []
  type: TYPE_NORMAL
- en: Squashing those bugs!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a tedious thing to do. To be honest, debugging will take you many hours
    of figuring things out, especially when you're just starting out and don't know
    the code all that well. Trust me, it will take some time, but don't worry; it's
    worth the effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the app we''ve created, I sent it to a friend to test, and here
    is a snippet of the device log he lovingly sent to me:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: He noted no issues when testing. All he noticed was the device (an iPhone 5S)
    seemed to slow down when he first started the game, and his phone showed the rain
    and the flames all at once. This is something we will consider in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some other things to remember when debugging. As we discussed earlier,
    after you click on the **Run** button in the workspace toolbar and your app builds
    successfully, Xcode runs your app and starts a debugging session. You can debug
    your app directly within the source editor with graphical tools, such as data
    tips and Quick Look, for the value of variables.
  prefs: []
  type: TYPE_NORMAL
- en: The debug area and the debug navigator let you inspect the current state of
    your running application and control its execution.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a quality app (like, come on, you already have and will create many
    more awesome quality apps... but moving on...) requires that you minimize the
    app's impact on the user's device. Use the debug gauges (that we talked about
    earlier) in the debug navigator to gain insight into your app's resource consumption,
    and when you spot a problem, use instruments to measure and analyze your app's
    performance. Again, we are going to discuss this a little further in the next
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing an iOS app, use iOS Simulator to find major problems during
    design and early testing.
  prefs: []
  type: TYPE_NORMAL
- en: You can configure Xcode to help you focus on debugging tasks. For example, when
    your code hits a breakpoint, you can make Xcode automatically play an alert sound
    and create a window tab named **Debug**, where Xcode displays the debug area,
    the debug navigator, and your code at the breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode lets you step through your code line by line to view your program's state
    at a particular stage of execution, which is a fantastically awesome feature that
    can really help you pick out problem code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the debug area to control the execution of your code, view
    program variables and registers, view its console output, and interact with the
    debugger. In addition to this, you can also use the debug area to navigate to
    the OpenGL calls that render a frame and to view the rendering-state information
    at a particular call. The following image breaks down the user interface, and
    what everything does. Don''t worry, I''ll explain everything following the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Squashing those bugs!](img/B03553_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can suspend the execution of your app by clicking on the pause button (which
    toggles between "to pause" and "to continue") in the debug area toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: To set a breakpoint, open a source code file and click on the **gutter** next
    to the line where you want the execution to pause. A blue arrow in the **gutter**
    (again) indicates the breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: When your app is paused, the line of code that is currently being executed will
    be highlighted in green.
  prefs: []
  type: TYPE_NORMAL
- en: You can step through the execution of your code using the **Step Over**, **Step
    Into**, and **Step Out** buttons located in the bar at the top of the **Debug**
    area. Clicking on **Step Over** will execute the current line of code, including
    any methods.
  prefs: []
  type: TYPE_NORMAL
- en: If the current line of code calls a method, step into starts execution at the
    current line, and then stops when it reaches the first line of the called method.
    The **Step Out** button executes the rest of the current method or function.
  prefs: []
  type: TYPE_NORMAL
- en: When the execution pauses, the debug navigator opens to display a stack trace
    (a report of the active stack frames at a certain point in time during the app's
    execution). Select an item in the debug navigator to view information about the
    item in the editor area and the debug area. As you continue to debug, expand or
    collapse threads to show or hide stack frames.
  prefs: []
  type: TYPE_NORMAL
- en: Hover over any variable in the source code editor to see a data tip displaying
    the value for the variable. Click on the inspector icon next to the variable to
    print the Objective-C description of the object to the debug area console and
    to display that description in an additional popup.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Quick Look** icon to see a graphical display of the variable's
    contents. You can implement a custom Quick Look display for your own objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you build and run an OpenGL ES application on a connected device, the
    debug area toolbar includes a **Frame Capture** button. Click on this button to
    capture a frame. You can use OpenGL ES frame capture to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the OpenGL ES state information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introspect OpenGL ES objects such as view textures and shaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step through the state calls (current debug state information) that precede
    each draw call and watch the changes with each call
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step through draw calls (current state of rendering of the app) to see exactly
    how the image is constructed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See which objects are used by each draw call by checking in the assistant editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit shaders (how an image is rendered, such as color information, bloom, lens
    flares, and the like of special effects) to see the effect upon your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The debug navigator on the left shows parts of the rendering tree, and the main
    debug view shows the color and depth sources for the rendered frame as well as
    other image sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Debug View Hierarchy** button in the bar at the top of the debug
    area to inspect a 3D rendering of the view hierarchy of your paused app. You can
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Rotate the rendering by clicking and dragging in the canvas. What's the canvas?
    That is where you see the app rendered in Xcode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase or decrease the spacing between the view layers using the slider on
    the lower left.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the range of visible views using the double ended slider on the lower
    right. Move the left handle to change the bottom-most visible view. Move the right
    handle to change the top-most visible view to get the desired view. After all,
    there's a lot more going on in the scene that certain views won't show!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reveal any clipped content of the selected view by clicking on the **Show clipped
    content** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also reveal any clipped content of the selected view by clicking on
    the **Show Clipped Content** button. You can do this if your view is clipped due
    to smaller screen sizes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase and decrease the magnification using the **Zoom In (+)** and **Zoom
    Out (-)** buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iOS Simulator helps you find major problems in your app during design and
    early testing as we've discussed throughout this book, as it is exactly that,
    a simulator. Not everyone can afford every new Apple device!
  prefs: []
  type: TYPE_NORMAL
- en: As I sit in front of my 27" iMac, 13" MacBook Pro, texting from my 5S, charging
    my iPad, currently thinking about buying the Apple watch and wearing my Apple
    Store shirt.... hmm... it's no wonder I have no money.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on!
  prefs: []
  type: TYPE_NORMAL
- en: In every simulated environment in the iOS Simulator, the home screen provides
    access to apps—such as Safari, Contacts, Maps, and Passbook—that are included
    with iOS on the device.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform an initial testing of your app's interaction with these apps
    in iOS Simulator. For example, just like we did, if you are testing a game, use
    iOS Simulator to test that the game uses Game Center correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The **Accessibility Inspector** in iOS Simulator helps you test the usability
    of your app regardless of a person's limitations or disabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The Accessibility Inspector displays information about each accessible element
    in your app and enables you to simulate VoiceOver interaction with those elements.
    To start the Accessibility Inspector, click on the **Home** button on iOS Simulator.
    Click on **Settings** and go to **General** | **Accessibility**. Slide the **AccessibilityInspector**
    switch to **On**.
  prefs: []
  type: TYPE_NORMAL
- en: You can test your app's localizations in iOS Simulator by changing the language.
    In **Settings**, navigate to **General** | **International** | **Language**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, these are obviously some pretty over-and-beyond steps you can take. I don't
    think every game will need accessibility (or that every developer will include
    it in their app), but these are good things to keep in mind if you are developing
    an app that will be seen worldwide and you want everyone to be able to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you can test your app''s basic behavior in iOS Simulator, the simulator
    is limited as a test platform for multiple reasons. Why''s this? Take the following
    into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: The iOS Simulator is an app running on a Mac and it has access to the computer's
    memory, which is much greater than the memory found on a device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The iOS Simulator runs on the Mac CPU rather than the processor of an iOS device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS Simulator doesn't run all threads that run on devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS Simulator can't simulate hardware features, such as the accelerometer, gyroscope,
    camera, or proximity sensor. *So don't throw your computer to simulate accelerometer
    controls!* Please don't... don't ask... I promise I didn't do that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While developing your app, ensure that you run and test it on all of the iOS
    devices and iOS versions that you intend to support. It's only common sense to
    do so, as you can adjust performance for each device.
  prefs: []
  type: TYPE_NORMAL
- en: I know it's a lot to keep in mind and probably a lot you won't consider every
    time you are testing your app or even building a new app. It is good information
    to keep in the back of your mind in case something ever comes up in your own development.
  prefs: []
  type: TYPE_NORMAL
- en: We did discuss some performance issues, such as the fact that rendering a lot
    of particles on an iPhone 4S cripples the performance and almost causes the device
    to completely crash out. That's what we will discuss in the next chapter—how to
    manage performance and keep battery drainage to a minimum!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see what we talked about in this chapter. Well, what didn't we talk about?!
    We discussed all things debugging. We started off talking about installing and
    testing our app on the iOS simulator. Being as limited as it is, we then moved
    on to testing on a physical device because hey, it's pretty tough to click on
    two areas at once as you are trying to test a platformer like the one we've created.
  prefs: []
  type: TYPE_NORMAL
- en: We then discussed setting up TestFlight so that we can get beta testers to help
    us out in finding some ravenous bugs hidden deep within the confides of our code.
    Again, a seven-year-old child bashing the screen is bound to find a bug a helluva
    lot quicker than a 20+ device-respecting developer.
  prefs: []
  type: TYPE_NORMAL
- en: We then discussed the fun of debugging and all the great tips and tricks for
    debugging. We also covered some things to keep in mind and various ways to test
    our code line by line as well as slowing animations down so we can see things
    as they happen.
  prefs: []
  type: TYPE_NORMAL
- en: It's been a lot of reading for this chapter, and we will get further into it
    in the next one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t worry; we''re only two chapters away from the best part: Monetization.
    Also, we are going to return to creating the game. I didn''t forget that!'
  prefs: []
  type: TYPE_NORMAL
- en: I'll see you in the next chapter!
  prefs: []
  type: TYPE_NORMAL
