- en: Chapter 5. Bug Squashing – Testing and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：虫子消除——测试和调试
- en: 'I''m still trying to catch my breath from the last chapter! Boy, did we ever
    do a lot of work! Now it''s time to slow it down a little bit. After all that
    coding, we are going to discuss testing and debugging. Debugging is a critical
    step in the entire development process, as the appearance of bugs can ruin the
    experience of your app. You spend countless hours on it, and, if there are bugs,
    people will think it''s unprofessional. That''s certainly not ideal. Let''s see
    what we will discuss in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我还在努力从上一章中恢复过来！哎呀，我们做了多少工作！现在是我们稍微放慢一点节奏的时候了。毕竟，编码之后，我们将讨论测试和调试。调试是整个开发过程中的关键步骤，因为虫子的出现可能会破坏你的应用体验。你花费了无数小时在上面，如果有虫子，人们会认为这是不专业的。这当然不是理想的。让我们看看本章我们将讨论什么：
- en: Testing our code on the simulator
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模拟器上测试我们的代码
- en: Testing our project on various devices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各种设备上测试我们的项目
- en: Setting up TestFlight for beta testers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为测试人员设置TestFlight
- en: Squishing those bugs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除那些虫子
- en: We will slow things down for this chapter and will resume the coding soon! So,
    let's sit back and treat this chapter as a breather. But don't think it will be
    a cake walk! No no! While this isn't exactly as action-packed as our last chapter,
    as I mentioned, this topic is super-critical in all projects, so it's super-important
    we pay attention to it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个章节中放慢节奏，很快就会继续编码！所以，让我们放松一下，把这个章节当作一个休息。但别以为这会轻松过关！不，不！虽然这并不像我们上一章那样充满动作，正如我提到的，这个主题在所有项目中都非常关键，所以我们非常重视这一点。
- en: Boom!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 嘣！
- en: On to it!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来！
- en: Testing our project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的项目
- en: No doubt you've been messing around with the iOS simulator (a feature that,
    to be honest, is very helpful, and that I found easier to access than the Android
    SDK emulator), which is awesome, but there is actually quite a lot that you can
    do with it without having to actually install anything on a physical device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，你已经对iOS模拟器（一个实际上非常有用，而且我发现比Android SDK模拟器更容易访问的功能）进行了操作，这很棒，但实际上你可以用它做很多事情，而无需在物理设备上安装任何东西。
- en: Let's open up our device simulator. To do this, inside Xcode, click on **Xcode**
    on the bar at the top, then click on **Open Developer Tool**, and finally click
    on **iOS Simulator**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开我们的设备模拟器。为此，在Xcode中，点击顶部栏上的**Xcode**，然后点击**打开开发者工具**，最后点击**iOS模拟器**。
- en: 'You will now be greeted with a pixel-for-pixel simulation of any iOS device
    of your choice:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将看到一个像素级的任何你选择的iOS设备的模拟：
- en: '![Testing our project](img/B03553_05_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的项目](img/B03553_05_01.jpg)'
- en: As I mentioned earlier, I like to use the iPhone 4S simulator because it's small
    enough to fit on my screen, but you do have your pick of the litter. Is your simulator
    set to a device that you don't want? Want to change it to something else such
    as the glittery iPhone 6+? No problem!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，我喜欢使用iPhone 4S模拟器，因为它足够小，可以适合我的屏幕，但你完全可以选择你喜欢的设备。你的模拟器设置的是你不想用的设备吗？想换成其他设备，比如闪亮的iPhone
    6+？没问题！
- en: Simply click on **Hardware** on the top bar. Then, under **Device**, you can
    select any awesome Apple mobile device you like! When you select a new device,
    you will need to allow some time for the new device to boot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地点击顶部栏上的**硬件**。然后，在**设备**下，你可以选择任何你喜欢的酷炫苹果移动设备！当你选择一个新设备时，你需要给新设备一些时间来启动。
- en: Let's explore!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索！
- en: If you click on **File**, you can snap a screenshot or at least see what key
    combination you can press to create a screenshot of the device screen (this is
    great for uploading to Facebook or iTunes).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击**文件**，你可以截图或至少看到你可以按什么键组合来创建设备屏幕的截图（这对于上传到Facebook或iTunes来说很棒）。
- en: When you click on **Edit**, you can copy the text, copy the screen, paste, start
    dictation, and see the emojis.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**编辑**时，你可以复制文本，复制屏幕，粘贴，开始录音，并查看表情符号。
- en: Back to **Hardware**, again you can select your device, you can rotate the device
    left or right, trigger a shake device gesture, trigger the home and lock buttons,
    or force a reboot.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 回到**硬件**，再次你可以选择你的设备，你可以旋转设备向左或向右，触发设备摇晃手势，触发主页和锁定按钮，或者强制重启。
- en: You can also simulate a memory warning, trigger an in-call status bar, and select
    your keyboard settings as well as an external device.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以模拟内存警告，触发通话状态栏，以及选择你的键盘设置以及外部设备。
- en: Under the **Debug** setting, you can choose to slow down animations, such as
    UI animations for opening and closing and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在**调试**设置下，你可以选择减慢动画，例如打开和关闭等UI动画。
- en: You can also do some funky color stuff with the screen!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在屏幕上做一些有趣的彩色处理！
- en: What?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？
- en: Yes! You can color blended layers, copied images, misaligned images, and offscreen
    rendered items. In other words, you can highlight them to make them look as seen
    in the following screenshot. Kinda funky, right?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！您可以着色混合层、复制的图像、错位的图像和离屏渲染的项目。换句话说，您可以突出显示它们，使它们看起来如图所示。有点酷，对吧？
- en: 'Now, why would one use this feature? Simple; sometimes sprites can get lost
    when debugging and you would like to keep track of them. Using this feature, you
    can easily track their movement. If you have a lot of sprites flying around your
    screen, this is a great feature to utilize. As seen in the following image, all
    images and sprites are tracked and clearly outlined:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么有人会使用这个功能呢？简单来说；有时候在调试时精灵可能会丢失，而你又想跟踪它们。使用这个功能，你可以轻松跟踪它们的移动。如果你屏幕上有许多精灵在飞舞，这是一个很棒的功能可以利用。如图所示，所有图像和精灵都被跟踪，并且清晰地标出：
- en: '![Testing our project](img/B03553_05_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的项目](img/B03553_05_02.jpg)'
- en: Moving on, you can also open the system log, which is fantastic for debugging.
    You can also trigger an iCloud sync, and set the device mock location.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您还可以打开系统日志，这对于调试来说非常棒。您还可以触发iCloud同步，并设置设备模拟位置。
- en: You can explore the device a little, but you will notice some settings and apps
    are missing. For example, you won't be able to select a background for the device,
    make calls, or send messages. You have a phone for that kind of stuff!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以稍微探索一下设备，但您会注意到一些设置和应用程序缺失。例如，您无法为设备选择背景、打电话或发送消息。您有手机来处理这类事情！
- en: Moving on, we will build and run our project (again, by clicking on the **Play**
    button in **Xcode**). We should still have the SpriteKit frame rate label, but
    that's not exactly as in-depth as we would like.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将构建并运行我们的项目（再次，通过点击**Xcode**中的**播放**按钮）。我们仍然应该有SpriteKit帧率标签，但这并不像我们希望的那样深入。
- en: 'To get some more technical statistics, click on back to go to **Xcode** and
    then on **Debug** on the bar at the top. Hover over **Attach to Process** to find
    the name of the project that we are working on. It will show up under **Likely
    Targets**. When you click on your project, Xcode will display some technical information,
    as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多技术统计信息，点击返回到**Xcode**，然后在顶部的栏上点击**调试**。将鼠标悬停在**附加到进程**上，以找到我们正在工作的项目名称。它将显示在**可能的目标**下。当您点击您的项目时，Xcode将显示一些技术信息，如图所示：
- en: '![Testing our project](img/B03553_05_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的项目](img/B03553_05_03.jpg)'
- en: 'Among other details, Xcode will tell you what the **Process Identifier** (**PID**)
    of our app is as well as the **CPU**, **Memory**, **Disk**, and **Network** usage,
    as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他细节中，Xcode会告诉我们应用程序的**进程标识符**（**PID**）、**CPU**、**内存**、**磁盘**和**网络**的使用情况，如图所示：
- en: '![Testing our project](img/B03553_05_04.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的项目](img/B03553_05_04.jpg)'
- en: Yes, that stuff is pretty great, but again, still not quite as in-depth as a
    developer would like to see. Want to get some really cool in-depth instrumentation?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这些功能相当不错，但再次强调，仍然没有达到开发者希望看到的那么深入。想要获得一些真正酷的深入监控吗？
- en: Back in Xcode, on the bar at the top click on **Xcode**, scroll down to **Open
    Developer Tool**, and select **Instruments**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 回到**Xcode**，在顶部的栏上点击**Xcode**，向下滚动到**打开开发者工具**，并选择**Instruments**。
- en: 'Now this is where we can get crazy and do some awesome in-depth testing:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候疯狂一下，做一些深入测试了：
- en: '![Testing our project](img/B03553_05_05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![测试我们的项目](img/B03553_05_05.jpg)'
- en: 'Just look at all those awesome choices! Let''s go through all the options you
    have here to help you debug:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 看看所有这些令人惊叹的选择！让我们逐一了解这里所有的选项，以帮助您进行调试：
- en: '**Activity Monitor**: Similar to the performance figures we have seen before,
    we do have more insight into what''s going on within out app, as well as being
    able to record what''s going on, and go back through our log to see at what points
    our performance drops.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动监视器**：类似于我们之前看到的性能数据，我们对应用程序内部发生的事情有更多的了解，同时能够记录发生的事情，并回溯我们的日志以查看性能下降的点。'
- en: '**Allocations**: This section tracks the app''s virtual memory and breaks it
    down into class names as well.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分配**：这一部分跟踪应用程序的虚拟内存，并将其分解为类名。'
- en: '**Automation**: This executes a simple script that will simulate interaction
    with the user interface and, of course, record it all.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：这个功能执行一个简单的脚本，将模拟与用户界面的交互，当然，所有操作都会被记录。'
- en: '**Cocoa Layout**: This section monitors the `NSLayoutConstraints` that is created
    when laying out your UI via the Storyboard editor in Xcode to see where things
    get out of place.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cocoa 布局**: 这一节监控在 Xcode 的 Storyboard 编辑器中通过布局 UI 创建的 `NSLayoutConstraints`，以查看哪些东西位置不正确。'
- en: '**Core Animation**: This measures the app''s graphical performance and CPU
    usage.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心动画**: 这项指标衡量的是应用图形性能和 CPU 使用情况。'
- en: '**Core Data**: This measures the Core Data system activity. In other words,
    the disk or memory usage.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心数据**: 这项指标衡量的是核心数据系统的活动。换句话说，就是磁盘或内存的使用情况。'
- en: 'Moving past on to some more important ones:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看一些更重要的事项：
- en: '**Energy Diagnostics**: This is an excellent tool to monitor battery usage'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**能量诊断**: 这是一个优秀的工具，用于监控电池使用情况'
- en: '**Leaks**: This measures memory usage and checks for any leaking memory'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存泄漏**: 这项指标衡量内存使用情况，并检查是否有内存泄漏'
- en: '**OpenGL ES Analysis**: This measures and analyzes the rendering of our project
    and detects **OGLES** (as I like to call it) correctness as well as performance
    issues'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenGL ES 分析**: 这项指标和分析我们的项目渲染，并检测**OGLES**（我喜欢这样称呼它）的正确性以及性能问题'
- en: Pretty cool, eh? In the next chapter, we will explore more of this when we discuss
    making our game more efficient.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很酷，不是吗？在下一章中，当我们讨论如何使我们的游戏更高效时，我们将更深入地探讨这一点。
- en: Now that you have the simulator all figured out and we've looked at some of
    the awesome tools that Apple provides, let's move on to installing our app onto
    an actual device, which is actually incredibly easy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了模拟器，并且查看了一些苹果提供的出色工具，让我们继续安装我们的应用到实际设备上，这实际上非常简单。
- en: All you have to do is connect your device to your development computer using
    the lightning cable or the 30-pin connector (if you have an older device) via
    USB.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需使用闪电线缆或 30 针连接器（如果您有较旧的设备）通过 USB 将您的设备连接到您的开发计算机。
- en: In Xcode, in the same place where you would select the iOS simulator that you
    want to use, click on the Scheme toolbar, and select your device from the menu.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中，在您选择要使用的 iOS 模拟器的地方，点击方案工具栏，然后从菜单中选择您的设备。
- en: Xcode will automatically register the device for you to use as a development
    device. As opposed to how things used to be when you would have to manually add
    the device's UUID number via [developer.apple.com](http://developer.apple.com),
    Apple has really streamlined this process.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 将自动为您注册设备，以便用作开发设备。与过去您必须手动通过 [developer.apple.com](http://developer.apple.com)
    添加设备的 UUID 号码的方式相比，苹果已经真正简化了这一过程。
- en: Your device could possibly be disabled in the scheme editor, which would mean
    it isn't an eligible device. For example, say you have the beta version of iOS
    9 that was just released at the time of writing this book. If you had that installed,
    then an older version of Xcode installed, your device would not be eligible. You
    would have to install the latest version of Xcode.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您的设备可能在方案编辑器中被禁用，这意味着它不是一个合格的设备。例如，假设您在撰写这本书的时候安装了刚刚发布的 iOS 9 测试版。如果您安装了它，并且安装了较旧的
    Xcode 版本，那么您的设备将不符合条件。您将不得不安装 Xcode 的最新版本。
- en: Now, simply clicking on the **Run** button will let Xcode install your app on
    the device. It's that simple!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需简单地点击**运行**按钮，Xcode 就会将您的应用安装到设备上。就这么简单！
- en: You may have Xcode asking whether or not you want to allow codesign in the key
    in your keychain. Click on **always allow**. You don't want that to pop up every
    time you click on the **Run** button. By clicking on **always allow**, Xcode will
    have the permission to automatically run the project on your device without having
    to ask.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到 Xcode 询问是否允许在您的密钥链中执行 codesign。点击**始终允许**。您不希望每次点击**运行**按钮时都弹出这个提示。通过点击**始终允许**，Xcode
    将获得在您的设备上自动运行项目的权限，而无需询问。
- en: In the same way that we connected the debuggers and logs to our iOS simulator,
    you can link them to the project running on your device.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们将调试器和日志连接到我们的 iOS 模拟器一样，您可以将它们链接到运行在您的设备上的项目。
- en: In fact, you may very well get different read-outs due to the fact that you
    are running on a simulator. The device could potentially run it much better or
    worse depending on the device and the number of flappy clones you have installed,
    the number of messages you have stored, the amount of storage you have remaining,
    and so on. It's usually a good idea (if possible) to have a device dedicated to
    development with nothing but your projects installed on it. That way, you know
    your app will perform 100% each time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于你在模拟器上运行，你可能会得到不同的结果。设备可能会根据设备类型以及你安装的 flappy 克隆数量、存储的消息数量、剩余的存储空间等因素，运行得更好或更差。通常情况下（如果可能的话），最好有一个只安装了你的项目的开发专用设备。这样，你就知道你的应用程序每次都会以
    100% 的性能运行。
- en: Now that we have things figured out on how to link debugging to our project
    and we know how to install our apps on our device, it's time to talk about getting
    beta testers to help you out.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何将调试与我们的项目链接起来，并且我们知道如何在设备上安装我们的应用程序，是时候讨论如何获取测试人员来帮助你了。
- en: Setting up TestFlight users
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 TestFlight 用户
- en: Why should I set up TestFlight users, you ask? Simply put, you can test your
    code for hours on end, and still not be able to find certain bugs. Trust me, I've
    done it before, only to find out after thousands of people have installed the
    app that there is a game destroying bug that could have been found if I let someone
    else play the game in a back-busting style.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我要设置 TestFlight 用户？简单来说，你可能可以连续测试你的代码数小时，却仍然找不到某些错误。相信我，我以前就做过，结果在数千人安装了应用程序之后，才发现有一个可能通过让其他人以破坏性的方式玩游戏就能发现的破坏游戏错误的bug。
- en: Beta testers, or TestFlight users can be your friends who want to help you test
    your game, or even people in a focus group who will test your game and give you
    honest feedback. Let's discuss how to set up Test Flight users.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员，或 TestFlight 用户可以是想要帮助你测试你的游戏的你的朋友，甚至是将测试你的游戏并提供真实反馈的焦点小组中的成员。让我们讨论如何设置
    TestFlight 用户。
- en: What's a TestFlight user?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 TestFlight 用户？
- en: You can define a TestFlight user as a beta tester. When you are ready for users
    to begin testing, you can set up TestFlight users that will receive a notification
    on their device when you have pushed a new version to test. From there, they can
    log any issues they see, so you will know if anything needs fixing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 TestFlight 用户定义为测试人员。当你准备好让用户开始测试时，你可以设置 TestFlight 用户，当您推送新版本进行测试时，他们将在设备上收到通知。从那里，他们可以记录他们看到的任何问题，这样你就会知道是否需要修复。
- en: 'We will start off by logging in to [itunesconnect.apple.com](http://itunesconnect.apple.com)
    with your developer Apple ID, and then you will see the following page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用您的开发者 Apple ID 登录到 [itunesconnect.apple.com](http://itunesconnect.apple.com)，然后你会看到以下页面：
- en: '![What''s a TestFlight user?](img/B03553_05_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 TestFlight 用户？](img/B03553_05_06.jpg)'
- en: From the main screen, simply click on the **Users and Rolls** button. You will
    see a **TestFlight Beta Testers** button on the top bar on the next page. Click
    on it to begin adding testers!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从主屏幕，只需点击**用户和角色**按钮。在下一页的顶部栏上，你会看到一个**TestFlight 测试人员**按钮。点击它开始添加测试人员！
- en: You will now be at the TestFlight Beta tester page. From here, you can see your
    internal testers (which will include you, as well as anyone else in your team)
    as well as your external testers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将处于 TestFlight 测试人员页面。从这里，你可以看到您的内部测试人员（包括你以及你的团队中的其他人）以及您的外部测试人员。
- en: 'To add people to test for you, click on the **External** button. On the next
    page, you will see the text, **External Tester**, next to which there should be
    a blue plus button, as you can see in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加人员来为你进行测试，点击**外部**按钮。在下一页，你将看到旁边有一个蓝色加号按钮的文本**外部测试者**，正如你在以下截图中所见：
- en: '![What''s a TestFlight user?](img/B03553_05_07.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![什么是 TestFlight 用户？](img/B03553_05_07.jpg)'
- en: Internal testers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部测试者
- en: Get feedback quickly by sharing your beta builds with up to 25 members of your
    team who have been assigned the Technical or Admin role in iTunes Connect. Each
    member can test on up to 10 devices.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与您在 iTunes Connect 中分配了技术或管理员角色的最多 25 名团队成员共享您的测试版构建，快速获取反馈。每位成员最多可以在 10 台设备上进行测试。
- en: External testers
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部测试者
- en: Once you're ready, you can invite up to 1,000 users who are not part of your
    development organization to beta-test an app that you intend for public release
    on the App Store. Apps made available to external testers require a **Beta App
    Review** and must comply with the full **App Store Review Guidelines** before
    testing can begin. A review is required for new versions of your app that contain
    significant changes. Up to 10 apps can be tested at a time, internally or externally.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您准备好，您可以邀请最多1,000名不属于您开发组织的用户测试您打算在App Store上公开发布的应用。提供给外部测试人员的应用需要**Beta
    App Review**，并且在测试开始之前必须遵守完整的**App Store审查指南**。对于包含重大更改的新版本的应用，需要进行审查。一次可以测试最多10个应用，无论是内部还是外部。
- en: 'You will then be able to add as many beta testers as required. Besides entering
    their e-mail address, and optionally their first and last name, you can add these
    people to a group, which can help keep multiple testers organized, as shown in
    the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将能够添加所需数量的测试人员。除了输入他们的电子邮件地址，以及可选的他们的名字和姓氏，您还可以将这些人员添加到组中，这有助于保持多个测试人员的组织，如下面的截图所示：
- en: '![External testers](img/B03553_05_08.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![外部测试人员](img/B03553_05_08.jpg)'
- en: The user will then get an e-mail requesting them to set up an account. From
    there, they can set up TestFlight on their device. We are now going to discuss
    how a TestFlight user can get started testing your awesome creation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用户将收到一封电子邮件，要求他们设置账户。从那里，他们可以在他们的设备上设置TestFlight。我们现在将讨论TestFlight用户如何开始测试您的杰作。
- en: Using TestFlight as a beta tester
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用TestFlight作为测试人员
- en: Installation
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: You can use TestFlight on up to 10 devices and test multiple apps for multiple
    developers; there is no limit to the number of apps that you can test.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在最多10台设备上使用TestFlight测试多个开发者的多个应用；您可以测试的应用数量没有限制。
- en: TestFlight (as seen by the following icon image), can only be used to test iOS
    apps on iPhone, iPad, and iPod touch running iOS 8 or later—not Mac apps.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TestFlight（如以下图标所示），只能用于在运行iOS 8或更高版本的iPhone、iPad和iPod touch上测试iOS应用，而不是Mac应用。
- en: '![Installation](img/B03553_05_09.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![安装](img/B03553_05_09.jpg)'
- en: Testing
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: Once a tester accepts the invitation, they will be able to download a test version
    of the app.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试人员接受了邀请，他们就能下载应用的测试版本。
- en: If they already have the live app installed on their device, the beta version
    of the app will replace the live version.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们已经在设备上安装了实时应用，则测试版应用将替换实时版本。
- en: When they've downloaded the beta app, they will see an orange dot next to its
    name that identifies it as a beta.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们下载了测试版应用后，他们将在其名称旁边看到一个橙色圆点，以标识其为测试版。
- en: The TestFlight app will notify the tester each time a new build is available
    and provide instructions on what parts of the app they should keep an eye on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: TestFlight应用将在每次有新版本可用时通知测试人员，并提供关于他们应该关注应用哪些部分的说明。
- en: Testers can easily offer feedback by tapping the **Provide Feedback** button
    in the **App Details** view in TestFlight. An e-mail automatically opens with
    app and device details, to which the tester can add additional details and screenshots.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员可以通过在TestFlight的**应用详情**视图中的**提供反馈**按钮轻松提供反馈。将自动打开一封带有应用和设备详情的电子邮件，测试人员可以在其中添加更多详细信息并附上截图。
- en: Apps in beta do expire. The beta period lasts for 30 days, starting from the
    day it's released to testers. In TestFlight, the number of days remaining appears
    under the **Open** button for each app.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 测试版应用是有有效期的。测试期从发布给测试人员的当天开始，为期30天。在TestFlight中，每个应用的剩余天数显示在**打开**按钮下方。
- en: If a beta app has **In-App Purchases**, you do not have to purchase them, as
    In-App Purchases made with beta builds are free.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试版应用有**内购项目**，您不需要购买它们，因为使用测试构建进行的内购是免费的。
- en: Opting out of testing
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拒绝测试
- en: If the tester doesn't accept your e-mail invitation, the beta app will not be
    installed and they will not be listed as a tester.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试人员不接受您的电子邮件邀请，则测试版应用将不会被安装，他们也不会被列为测试人员。
- en: Also, a tester can unsubscribe from testing by using the link at the bottom
    of the invitation e-mail to notify you (the developer) that they would like to
    be removed from TestFlight.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，测试人员可以通过邀请电子邮件底部的链接取消测试，通知您（开发者）他们希望从TestFlight中移除。
- en: If a tester accepts the invitation but they don't want to test the app, they
    can delete themselves as a tester in the **App Details** page in TestFlight. Because,
    you know, people are selfish.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试人员接受了邀请但他们不想测试应用，他们可以在TestFlight的**应用详情**页面中删除自己作为测试人员。因为，你知道，人们都是自私的。
- en: So really, Apple has created an awesome system to allow easy, quick testing
    of your app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以实际上，苹果已经创建了一个很棒的系统，允许你轻松快速地测试你的应用。
- en: Keep in mind that, each time you want to test a new version of your app, you
    need to upload the new version as well as submit the new version for review (as
    weird as that is, I know). It does seem redundant, but hey, it's Apple, and they
    know what they're doing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，每次你想测试你应用的最新版本时，你都需要上传新版本，并将新版本提交进行审核（虽然这听起来有些奇怪，我知道）。这确实看起来有些重复，但嘿，这是苹果，他们知道自己在做什么。
- en: Now, let's talk about crushing bugs!
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来谈谈如何消灭虫子！
- en: Squashing those bugs!
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消灭那些虫子！
- en: This is a tedious thing to do. To be honest, debugging will take you many hours
    of figuring things out, especially when you're just starting out and don't know
    the code all that well. Trust me, it will take some time, but don't worry; it's
    worth the effort.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件很繁琐的事情。说实话，调试会花费你很多小时来解决问题，尤其是当你刚开始并且对代码不是很熟悉的时候。相信我，这需要一些时间，但不用担心；这是值得的。
- en: 'Let''s take the app we''ve created, I sent it to a friend to test, and here
    is a snippet of the device log he lovingly sent to me:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拿我们创建的应用来说，我把它发送给一个朋友去测试，以下是他在测试后发送给我的设备日志片段：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: He noted no issues when testing. All he noticed was the device (an iPhone 5S)
    seemed to slow down when he first started the game, and his phone showed the rain
    and the flames all at once. This is something we will consider in the next chapter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 他在测试时没有发现任何问题。他注意到的只是当游戏刚开始时，设备（iPhone 5S）似乎变慢了，而且他的手机同时显示了雨和火焰。这是我们将在下一章考虑的事情。
- en: Here are some other things to remember when debugging. As we discussed earlier,
    after you click on the **Run** button in the workspace toolbar and your app builds
    successfully, Xcode runs your app and starts a debugging session. You can debug
    your app directly within the source editor with graphical tools, such as data
    tips and Quick Look, for the value of variables.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试时，还有一些其他的事情需要记住。正如我们之前讨论的，当你点击工作区工具栏中的**运行**按钮并且你的应用成功构建后，Xcode会运行你的应用并开始一个调试会话。你可以使用图形工具，如数据提示和快速查看，直接在源编辑器中调试你的应用，以查看变量的值。
- en: The debug area and the debug navigator let you inspect the current state of
    your running application and control its execution.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 调试区域和调试导航器让你可以检查运行中的应用的当前状态并控制其执行。
- en: Creating a quality app (like, come on, you already have and will create many
    more awesome quality apps... but moving on...) requires that you minimize the
    app's impact on the user's device. Use the debug gauges (that we talked about
    earlier) in the debug navigator to gain insight into your app's resource consumption,
    and when you spot a problem, use instruments to measure and analyze your app's
    performance. Again, we are going to discuss this a little further in the next
    chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个高质量的应用（比如，拜托，你已经创建并将会创建更多优秀质量的应用……但让我们继续……）需要你尽量减少应用对用户设备的冲击。使用我们在之前讨论过的调试仪表，在调试导航器中获取你对应用资源消耗的洞察，当你发现问题时，使用工具来测量和分析你应用的性能。我们将在下一章中进一步讨论这一点。
- en: If you are developing an iOS app, use iOS Simulator to find major problems during
    design and early testing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在开发iOS应用，请在设计和早期测试阶段使用iOS模拟器来查找主要问题。
- en: You can configure Xcode to help you focus on debugging tasks. For example, when
    your code hits a breakpoint, you can make Xcode automatically play an alert sound
    and create a window tab named **Debug**, where Xcode displays the debug area,
    the debug navigator, and your code at the breakpoint.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以配置Xcode以帮助你专注于调试任务。例如，当你的代码遇到断点时，你可以让Xcode自动播放一个警报声音，并创建一个名为**调试**的窗口标签，Xcode在这里显示调试区域、调试导航器和你的断点处的代码。
- en: Xcode lets you step through your code line by line to view your program's state
    at a particular stage of execution, which is a fantastically awesome feature that
    can really help you pick out problem code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode允许你逐行执行你的代码，以查看程序在执行特定阶段的程序状态，这是一个真正棒的功能，可以帮助你找出问题代码。
- en: 'You can also use the debug area to control the execution of your code, view
    program variables and registers, view its console output, and interact with the
    debugger. In addition to this, you can also use the debug area to navigate to
    the OpenGL calls that render a frame and to view the rendering-state information
    at a particular call. The following image breaks down the user interface, and
    what everything does. Don''t worry, I''ll explain everything following the image:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用调试区域来控制代码的执行，查看程序变量和寄存器，查看其控制台输出，并与调试器交互。此外，您还可以使用调试区域导航到渲染帧的OpenGL调用，并查看特定调用处的渲染状态信息。以下图像分解了用户界面以及每一项的功能。别担心，我会在图像之后解释一切：
- en: '![Squashing those bugs!](img/B03553_05_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![挤压那些虫子！](img/B03553_05_10.jpg)'
- en: You can suspend the execution of your app by clicking on the pause button (which
    toggles between "to pause" and "to continue") in the debug area toolbar.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击调试区域工具栏中的暂停按钮（在“暂停”和“继续”之间切换）来挂起应用的执行。
- en: To set a breakpoint, open a source code file and click on the **gutter** next
    to the line where you want the execution to pause. A blue arrow in the **gutter**
    (again) indicates the breakpoint.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置断点，打开源代码文件，并点击您希望执行暂停的行旁边的**空白处**。**空白处**中的蓝色箭头（再次）表示断点。
- en: When your app is paused, the line of code that is currently being executed will
    be highlighted in green.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用暂停时，当前正在执行的代码行将以绿色突出显示。
- en: You can step through the execution of your code using the **Step Over**, **Step
    Into**, and **Step Out** buttons located in the bar at the top of the **Debug**
    area. Clicking on **Step Over** will execute the current line of code, including
    any methods.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用位于**调试**区域顶部的栏中的**Step Over**、**Step Into**和**Step Out**按钮来逐步执行您的代码。点击**Step
    Over**将执行当前代码行，包括任何方法。
- en: If the current line of code calls a method, step into starts execution at the
    current line, and then stops when it reaches the first line of the called method.
    The **Step Out** button executes the rest of the current method or function.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前代码行调用一个方法，**Step Into**将从当前行开始执行，并在达到被调用方法的第1行时停止。**Step Out**按钮将执行当前方法或函数的其余部分。
- en: When the execution pauses, the debug navigator opens to display a stack trace
    (a report of the active stack frames at a certain point in time during the app's
    execution). Select an item in the debug navigator to view information about the
    item in the editor area and the debug area. As you continue to debug, expand or
    collapse threads to show or hide stack frames.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行暂停时，调试导航器打开以显示堆栈跟踪（报告应用执行过程中某一时间点的活动堆栈帧）。在调试导航器中选择一个项目，以在编辑区域和调试区域查看有关该项目的信息。在继续调试时，展开或折叠线程以显示或隐藏堆栈帧。
- en: Hover over any variable in the source code editor to see a data tip displaying
    the value for the variable. Click on the inspector icon next to the variable to
    print the Objective-C description of the object to the debug area console and
    to display that description in an additional popup.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码编辑器中的任何变量上悬停，以查看显示变量值的提示信息。点击变量旁边的检查器图标，将打印对象的Objective-C描述到调试区域控制台，并在额外的弹出窗口中显示该描述。
- en: Click on the **Quick Look** icon to see a graphical display of the variable's
    contents. You can implement a custom Quick Look display for your own objects.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**快速查看**图标以查看变量的图形显示。您可以为您的对象实现自定义的快速查看显示。
- en: 'When you build and run an OpenGL ES application on a connected device, the
    debug area toolbar includes a **Frame Capture** button. Click on this button to
    capture a frame. You can use OpenGL ES frame capture to do the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在连接的设备上构建和运行OpenGL ES应用时，调试区域工具栏包括一个**帧捕获**按钮。点击此按钮以捕获一个帧。您可以使用OpenGL ES帧捕获执行以下操作：
- en: Inspect the OpenGL ES state information
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查OpenGL ES状态信息
- en: Introspect OpenGL ES objects such as view textures and shaders
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射OpenGL ES对象，如视图纹理和着色器
- en: Step through the state calls (current debug state information) that precede
    each draw call and watch the changes with each call
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤遍历每个绘制调用之前的调用状态（当前调试状态信息），并观察每次调用时的变化
- en: Step through draw calls (current state of rendering of the app) to see exactly
    how the image is constructed
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤遍历绘制调用（应用当前渲染状态）以查看图像是如何构建的
- en: See which objects are used by each draw call by checking in the assistant editor
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查辅助编辑器查看每个绘制调用使用的对象
- en: Edit shaders (how an image is rendered, such as color information, bloom, lens
    flares, and the like of special effects) to see the effect upon your application
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑着色器（如图像的渲染方式，例如颜色信息、光晕、镜头光晕等特殊效果），以查看对应用程序的影响。
- en: The debug navigator on the left shows parts of the rendering tree, and the main
    debug view shows the color and depth sources for the rendered frame as well as
    other image sources.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的调试导航器显示了渲染树的部分，而主调试视图显示了渲染帧的颜色和深度来源，以及其他图像来源。
- en: 'Click on the **Debug View Hierarchy** button in the bar at the top of the debug
    area to inspect a 3D rendering of the view hierarchy of your paused app. You can
    do the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击调试区域顶部的工具栏中的**调试视图层次结构**按钮，以检查暂停应用的视图层次结构的 3D 渲染。您可以执行以下操作：
- en: Rotate the rendering by clicking and dragging in the canvas. What's the canvas?
    That is where you see the app rendered in Xcode.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在画布上点击和拖动来旋转渲染。什么是画布？那是在 Xcode 中看到应用渲染的地方。
- en: Increase or decrease the spacing between the view layers using the slider on
    the lower left.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用左下角的滑块来增加或减少视图层之间的间距。
- en: Change the range of visible views using the double ended slider on the lower
    right. Move the left handle to change the bottom-most visible view. Move the right
    handle to change the top-most visible view to get the desired view. After all,
    there's a lot more going on in the scene that certain views won't show!
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用右下角的滑块来更改可见视图的范围。将左侧的手柄移动到最底部的可见视图。将右侧的手柄移动到最顶部的可见视图，以获得所需的视图。毕竟，场景中还有更多的事情在进行，某些视图不会显示出来！
- en: Reveal any clipped content of the selected view by clicking on the **Show clipped
    content** button.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过点击**显示剪裁内容**按钮来揭示所选视图的任何剪裁内容。
- en: You can also reveal any clipped content of the selected view by clicking on
    the **Show Clipped Content** button. You can do this if your view is clipped due
    to smaller screen sizes.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以通过点击**显示剪裁内容**按钮来揭示所选视图的任何剪裁内容。如果您的视图由于屏幕尺寸较小而被剪裁，您可以这样做。
- en: Increase and decrease the magnification using the **Zoom In (+)** and **Zoom
    Out (-)** buttons.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**放大 (+)**和**缩小 (-)**按钮来增加和减少放大倍数。
- en: The iOS Simulator helps you find major problems in your app during design and
    early testing as we've discussed throughout this book, as it is exactly that,
    a simulator. Not everyone can afford every new Apple device!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如本书中所述，iOS 模拟器可以帮助你在设计和早期测试阶段发现应用中的主要问题，因为它正是这样一个模拟器。并不是每个人都能负担得起每一款新的苹果设备！
- en: As I sit in front of my 27" iMac, 13" MacBook Pro, texting from my 5S, charging
    my iPad, currently thinking about buying the Apple watch and wearing my Apple
    Store shirt.... hmm... it's no wonder I have no money.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我坐在我的 27 英寸 iMac、13 英寸 MacBook Pro 前面，用我的 5S 发短信，给我的 iPad 充电，目前正在考虑购买苹果手表并穿着我的苹果商店衬衫时……嗯……难怪我没有钱。
- en: Moving on!
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来！
- en: In every simulated environment in the iOS Simulator, the home screen provides
    access to apps—such as Safari, Contacts, Maps, and Passbook—that are included
    with iOS on the device.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 模拟器的每个模拟环境中，主屏幕提供了访问包含在 iOS 设备上的应用（如 Safari、联系人、地图和 Passbook）的途径。
- en: You can perform an initial testing of your app's interaction with these apps
    in iOS Simulator. For example, just like we did, if you are testing a game, use
    iOS Simulator to test that the game uses Game Center correctly.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 iOS 模拟器中通过这些应用对您应用的交互进行初步测试。例如，就像我们做的那样，如果您正在测试一个游戏，请使用 iOS 模拟器来测试该游戏是否正确使用
    Game Center。
- en: The **Accessibility Inspector** in iOS Simulator helps you test the usability
    of your app regardless of a person's limitations or disabilities.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 模拟器中的**无障碍检查器**可以帮助您测试您应用的可用性，无论个人的限制或残疾如何。
- en: The Accessibility Inspector displays information about each accessible element
    in your app and enables you to simulate VoiceOver interaction with those elements.
    To start the Accessibility Inspector, click on the **Home** button on iOS Simulator.
    Click on **Settings** and go to **General** | **Accessibility**. Slide the **AccessibilityInspector**
    switch to **On**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 无障碍检查器显示您应用中每个可访问元素的信息，并允许您模拟与这些元素的 VoiceOver 交互。要启动无障碍检查器，请点击 iOS 模拟器上的**主**按钮。点击**设置**，然后转到**通用**
    | **辅助功能**。将**无障碍检查器**开关设置为**开启**。
- en: You can test your app's localizations in iOS Simulator by changing the language.
    In **Settings**, navigate to **General** | **International** | **Language**.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过更改语言在 iOS 模拟器中测试您应用的本地化。在**设置**中，导航到**通用** | **国际** | **语言**。
- en: Now, these are obviously some pretty over-and-beyond steps you can take. I don't
    think every game will need accessibility (or that every developer will include
    it in their app), but these are good things to keep in mind if you are developing
    an app that will be seen worldwide and you want everyone to be able to use it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些显然是一些相当超前的步骤，你可以采取。我认为并不是每个游戏都需要无障碍功能（或者每个开发者都会将其包含在他们的应用中），但如果你的应用将在全球范围内被看到，并且你希望每个人都能使用它，那么这些都是需要记住的好事情。
- en: 'Although you can test your app''s basic behavior in iOS Simulator, the simulator
    is limited as a test platform for multiple reasons. Why''s this? Take the following
    into consideration:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以在 iOS 模拟器中测试你应用的基本行为，但模拟器作为一个测试平台在多个方面都是有限的。为什么是这样？考虑以下因素：
- en: The iOS Simulator is an app running on a Mac and it has access to the computer's
    memory, which is much greater than the memory found on a device.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器是一个在 Mac 上运行的应用，它可以访问计算机的内存，这比设备上的内存大得多。
- en: The iOS Simulator runs on the Mac CPU rather than the processor of an iOS device.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器在 Mac CPU 上运行，而不是在 iOS 设备的处理器上。
- en: iOS Simulator doesn't run all threads that run on devices.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器不会运行设备上运行的所有线程。
- en: iOS Simulator can't simulate hardware features, such as the accelerometer, gyroscope,
    camera, or proximity sensor. *So don't throw your computer to simulate accelerometer
    controls!* Please don't... don't ask... I promise I didn't do that.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 模拟器无法模拟硬件功能，例如加速度计、陀螺仪、摄像头或接近传感器。*所以不要把你的电脑扔来模拟加速度计控制！*请不要……请不要问……我保证我没有这么做。
- en: While developing your app, ensure that you run and test it on all of the iOS
    devices and iOS versions that you intend to support. It's only common sense to
    do so, as you can adjust performance for each device.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发你的应用时，确保你在你打算支持的所有的 iOS 设备和 iOS 版本上运行和测试它。这样做是常识，因为你可以为每个设备调整性能。
- en: I know it's a lot to keep in mind and probably a lot you won't consider every
    time you are testing your app or even building a new app. It is good information
    to keep in the back of your mind in case something ever comes up in your own development.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这需要记住很多东西，而且你可能每次测试应用或构建新应用时都不会考虑这些。如果在你自己的开发中遇到问题，这些信息是很好的背景知识。
- en: We did discuss some performance issues, such as the fact that rendering a lot
    of particles on an iPhone 4S cripples the performance and almost causes the device
    to completely crash out. That's what we will discuss in the next chapter—how to
    manage performance and keep battery drainage to a minimum!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实讨论了一些性能问题，比如在 iPhone 4S 上渲染大量粒子会降低性能，几乎会导致设备完全崩溃。这就是我们将在下一章讨论的内容——如何管理性能并尽量减少电池消耗！
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Let's see what we talked about in this chapter. Well, what didn't we talk about?!
    We discussed all things debugging. We started off talking about installing and
    testing our app on the iOS simulator. Being as limited as it is, we then moved
    on to testing on a physical device because hey, it's pretty tough to click on
    two areas at once as you are trying to test a platformer like the one we've created.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看本章我们讨论了什么。嗯，我们没讨论什么？！我们讨论了所有关于调试的事情。我们一开始就谈到了在 iOS 模拟器上安装和测试我们的应用。鉴于它的局限性，我们接着在物理设备上进行测试，因为嘿，当你试图测试一个像我们创建的平台游戏时，同时点击两个区域是非常困难的。
- en: We then discussed setting up TestFlight so that we can get beta testers to help
    us out in finding some ravenous bugs hidden deep within the confides of our code.
    Again, a seven-year-old child bashing the screen is bound to find a bug a helluva
    lot quicker than a 20+ device-respecting developer.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着讨论了设置 TestFlight，以便我们可以让测试者帮助我们找到隐藏在我们代码深处的贪婪的虫子。再次强调，一个七岁的孩子猛击屏幕肯定比一个20岁以上的尊重设备的开发者更快地找到虫子。
- en: We then discussed the fun of debugging and all the great tips and tricks for
    debugging. We also covered some things to keep in mind and various ways to test
    our code line by line as well as slowing animations down so we can see things
    as they happen.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着讨论了调试的乐趣以及调试的所有优秀技巧和窍门。我们还涵盖了需要注意的事项，以及各种方式来逐行测试我们的代码，以及减慢动画速度，以便我们可以看到事情发生的过程。
- en: It's been a lot of reading for this chapter, and we will get further into it
    in the next one.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这章的内容需要阅读很多，我们将在下一章中进一步探讨。
- en: 'Don''t worry; we''re only two chapters away from the best part: Monetization.
    Also, we are going to return to creating the game. I didn''t forget that!'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心；我们离最好的部分只有两章的距离：盈利。此外，我们还将回到创建游戏。我没有忘记这一点！
- en: I'll see you in the next chapter!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一章见到你！
