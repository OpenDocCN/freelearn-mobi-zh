- en: Chapter 4. Adding a List View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we finally get to what many of you have been waiting for,
    developing the user interface. We will walk you through the activities related
    to creating and populating a `ListView`, which includes the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the POIApp activity layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom list row item layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ListView` and `ListAdapter` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending `BaseAdapter` to provide data to the `ListView` widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with web services in Xamarin.Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the `ActionBar` menu options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling list item click events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling the network state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the POI ListView layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is technically possible to create and attach the user interface elements
    to your activity using C# code. However, it is a bit of a mess. We will go with
    the most common approach by declaring the XML-based layout. Keeping this in mind,
    let's begin this chapter by creating a layout to display the POI list items.
  prefs: []
  type: TYPE_NORMAL
- en: When we created the new `POIApp` solution in the previous chapter (Chapter 3,
    *Creating the Points Of Interest App*), a default layout and activity was created
    as part of the Xamarin Studio project template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than deleting these files, let''s give them more appropriate names and
    remove unnecessary content as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Main.axml` file in **Resources** | **Layout** and rename it to `POIList.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `POIList.axml` file to open it in a layout designer window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Currently, the `POIList.axml` file contains the layout that was created as part
    of the default Xamarin Studio template. As per our requirement, we need to add
    a `ListView` widget that takes the complete screen width and a `ProgressBar` in
    the middle of the screen. The indeterminate progress bar will be displayed to
    the user while the data is being downloaded from the server. Once the download
    is complete and the data is ready, the indeterminate progress bar will be hidden
    before the POI data is rendered on the list view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, open the **Document Outline** tab in the designer window and delete both
    the button and `LinearLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the designer **Toolbox**, search for `RelativeLayout` and drag it onto
    the designer layout preview window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `ListView` in the **Toolbox** search field and drag it over the layout
    designer preview window. Alternatively, you can drag and drop it over `RelativeLayout`
    in the **Document Outline** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have just added a `ListView` widget to `POIList.axml`. Let''s now open the
    **Properties** pad view in the designer window and edit some of its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/mxWb8kcH.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we may recall from Chapter 3, *Creating the Points of Interest App*, the
    **Properties** pad allows you to modify the properties of a selected widget. There
    are five buttons at the top of the pad that switch the set of properties being
    edited. The **@+id** notation notifies the compiler that a new resource ID needs
    to be created to identify the widget in API calls, and `listView1` identifies
    the name of the constant. Now, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the ID name to `poiListView` and save the changes. Switch back to the
    **Document Outline** pad and notice that the `ListView` ID is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, switch back to the **Properties** pad and click on the **Layout** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **View Group** section of the layout properties, set both the **Width**
    and **Height** properties to `match_parent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `match_parent` value for the `Height` and `Width` properties tells us that
    the `ListView` can use the entire content area provided by the parent, excluding
    any margins specified. In our case, the parent would be the top-level `RelativeLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to API level 8, `fill_parent` was used instead of `match_parent` to accomplish
    the same effect. In API level 8, `fill_parent` was deprecated and replaced with
    `match_parent` for clarity. Currently, both the constants are defined as the same
    value, so they have exactly the same effect. However, `fill_ parent` may be removed
    from the future releases of the API; so, going forward, `match_parent` should
    be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we have added a `ListView` to `RelativeLayout`, let's now add a **Progress
    Bar** to the center of the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Search for **Progress Bar** in the **Toolbox** search field. You will notice
    that several types of progress bars will be listed, including horizontal, large,
    normal, and small. Drag the normal progress bar onto `RelativeLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the **Progress Bar**widget is aligned to the top left of its parent
    layout. To align it to the center of the screen, select the progress bar in the
    **Document Outline** tab, switch to the **Properties** view, and click on the
    **Layout** tab. Now select the **Center In Parent** checkbox, and you will notice
    that the progress bar is aligned to the center of the screen and will appear at
    the top of the list view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Currently, the progress bar is visible in the center of the screen. By default,
    this could be hidden in the layout and will be made visible only while the data
    is being downloaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Progress Bar** ID to `progressBar` and save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To hide the **Progress Bar** from the layout, click on the **Behavior** tab
    in the **Properties** view. From **Visibility**, select **Box**, and then select
    **gone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This behavior can also be controlled by calling `setVisibility()` on any view
    by passing any of the following behaviors. Later in this chapter, we will see
    how to hide the view programmatically using the activity code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `View.Visibility` property allows you to control whether a view is visible
    or not. It is based on the `ViewStates` enum, which defines the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Value
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: '`Gone`'
  prefs: []
  type: TYPE_NORMAL
- en: This value tells the parent `ViewGroup` to treat the View as though it does
    not exist, so no space will be allocated in the layout
  prefs: []
  type: TYPE_NORMAL
- en: '`Invisible`'
  prefs: []
  type: TYPE_NORMAL
- en: This value tells the parent `ViewGroup` to hide the content for the View; however,
    it occupies the layout space
  prefs: []
  type: TYPE_NORMAL
- en: '`Visible`'
  prefs: []
  type: TYPE_NORMAL
- en: This value tells the parent `ViewGroup` to display the content of the View
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Source** tab to switch the IDE context from visual designer
    to code, and see what we have built so far. Notice that the following code is
    generated for the `POIList.axml` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating POIListActivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we created the `POIApp` solution, along with the default layout, a default
    activity (`MainActivity.cs`) was created. Let''s rename the `MainActivity.cs`
    file to `POIListActivity.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `MainActivity.cs` file from Solution Explorer and rename to `POIListActivity.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `POIListActivity.cs` file in the code editor and rename the class to
    `POIListActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `POIListActivity` class currently contains the code that was created automatically
    while creating the solution using Xamarin Studio. We will write our own activity
    code, so let's remove all the code from the `POIListActivity` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override the `OnCreate()` activity life cycle callback method. This method
    will be used to attach the activity layout, instantiate the views, and write other
    activity initialization logic. Add the following code blocks to the `POIListActivity`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's set the activity content layout by calling the `SetContentView(layoutId)`
    method. This method places the layout content directly into the activity's view
    hierarchy. Let's provide the reference to the `POIList` layout created in previous
    steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, the `POIListActivity` class looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that in the preceding code snippet, the `POIListActivity` class uses
    some of the `[Activity]` attributes such as `Label`, `MainLauncher`, and `Icon`.
    During the build process, Xamarin.Android uses these attributes to create an entry
    in the `AndroidManifest.xml` file. As we have already learnt form Chapter 1, *The
    Anatomy of an Android App*, the `AndroidManifest.xml` file is one of the simple
    application configuration files that describes the functionality and requirements
    of your Android application. Xamarin makes it easier by allowing all of the Manifest
    properties to set using attributes so that you never have to modify them manually
    in `AndroidManifest.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have declared an activity and attached the layout to it. At this
    point, if you run the app on your Android device or emulator, you will notice
    that a blank screen will be displayed. The following sections in this chapter
    will walk you through the magic of making the `POIListActivity` activity fully
    functional.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the POI list row layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now turn our attention to the layout for each row in the `ListView` widget.
    The Android platform provides a number of default layouts out of the box that
    can be used with a `ListView` widget:'
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: '`SimpleListItem1`'
  prefs: []
  type: TYPE_NORMAL
- en: A single line with a single caption field
  prefs: []
  type: TYPE_NORMAL
- en: '`SimpleListItem2`'
  prefs: []
  type: TYPE_NORMAL
- en: A two-line layout with a larger font and a brighter text color for the first
    field
  prefs: []
  type: TYPE_NORMAL
- en: '`TwoLineListItem`'
  prefs: []
  type: TYPE_NORMAL
- en: A two-line layout with an equal sized font for both lines and a brighter text
    color for the first line
  prefs: []
  type: TYPE_NORMAL
- en: '`ActivityListItem`'
  prefs: []
  type: TYPE_NORMAL
- en: A single line of text with an image view
  prefs: []
  type: TYPE_NORMAL
- en: All of the preceding three layouts provide a pretty standard design, but for
    more control over content layout, a custom layout can also be created, which is
    what is needed for `poiListView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new layout, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Solution** pad, navigate to **Resources** | **Layout**, right-click
    on it, and navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Android** from the list on the left-hand side, **Android Layout** from
    the template list, enter `POIListItem` in the name column, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we proceed to lay out the design for each of the row items in the list,
    we must draw on a piece of paper and analyze how the UI will look like. In our
    example, the POI data will be organized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/NIUBUsJX.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a number of ways to achieve this layout, but we will use `RelativeLayout`
    to achieve the same result. There is a lot going on in this diagram. Let''s break
    it down as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A `RelativeLayout` view group is used as the top-level container; it provides
    a number of flexible options for positioning relative content, its edges, or other
    content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `ImageView` widget is used to display a photo of the POI, and it is anchored
    to the left-hand side of the `RelativeLayout` utility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `TextView` widgets are used to display the POI name and address information.
    They need to be anchored to the right-hand side of the `ImageView` widget and
    centered within the parent `RelativeLayout` utility. The easiest way to accomplish
    this is to place both the `TextView` classes inside another layout; in this case,
    a `LinearLayout` widget with the orientation set to vertical.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An additional `TextView` widget is used to display the distance, and it is anchored
    on the right-hand side of the `RelativeLayout` view group and centered vertically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, our task is to get this definition into `POIListItem.axml`. The next few
    sections describe how to accomplish this using the `Content` view of the designer
    when feasible and the `Source` view when required.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a RelativeLayout view group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `RelativeLayout` layout manager allows its child views to be positioned
    relative to each other or relative to the container or another container. In our
    case, for building the row layout, as shown in the preceding diagram, we can use
    `RelativeLayout` as a top-level view group. When the `POIListItem.axml` layout
    file was created, by default a top-level `LinearLayout` was added. First, we need
    to change the top-level `ViewGroup` to `RelativeLayout`. The following section
    will take you through the steps to complete the layout design for the POI list
    row:'
  prefs: []
  type: TYPE_NORMAL
- en: With `POIListItem.axml` opened in the content mode, select the entire layout
    by clicking on the content area. You should see a blue outline going around the
    edge. Press *Delete*. The `LinearLayout` view group will be deleted, and you will
    see a message indicating that the layout is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can also select the `LinearLayout` view group from the **Document
    Outline** tab and press *Delete*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `RelativeLayout` view group in the toolbox and drag it onto the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `RelativeLayout` view group from **Document Outline**. Open the
    **Properties** pad and change the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Padding** option to `5dp`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Layout Height** option to `wrap_content`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Layout Width** option to `match_parent`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The padding property controls how much space will be placed around each item
    as a margin, and the height determines the height of each list row. Setting the
    **Layout Width** option to `match_ parent` will cause the `POIListItem` content
    to consume the entire width of the screen, while setting the **Layout Height**
    option to `wrap_content` will cause each row to be equal to the longest control.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Switch to the **Code** view to see what has been added to the layout. Notice
    that the following lines of code have been added to `RelativeLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Android runs on a variety of devices that offer different screen sizes and densities.
    When specifying dimensions, you can use a number of different units, including
    pixels (px), inches (in), and density-independent pixels (dp). Density-independent
    pixels are abstract units based on 1 dp being 1 pixel on a 160 dpi screen. At
    runtime, Android will scale the actual size up or down based on the actual screen
    density. It is a best practice to specify dimensions using density-independent
    pixels.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding an ImageView widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ImageView` widget in Android is used to display the arbitrary image for
    different sources. In our case, we will download the images from the server and
    display them in the list. Let''s add an `ImageView` widget to the left-hand side
    of the layout and set the following configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `ImageView` widget in the toolbox and drag it onto `RelativeLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `ImageView` widget selected, use the **Properties** pad to set the
    ID to `poiImageView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Layout** tab in the **Properties** pad and set the **Height**
    and **Width** values to `65 dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the property grouping named `RelativeLayout`, set **Center Vertical** to
    **true**. Simply clicking on the checkbox does not seem to work, but you can click
    on the small icon that looks like an edit box, which is to the right-hand side,
    and just enter `true`. If everything else fails, just switch to the **Source**
    view and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the property grouping named `ViewGroup`, set the **Margin Right** to `5dp`.
    This brings some space between the POI image and the POI name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the **Code** view to see what has been added to the layout. Notice
    the following lines of code added to `ImageView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding a LinearLayout widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`LinearLayout` is one of the most basic layout managers that organizes its
    child views either horizontally or vertically based on the value of its `orientation`
    property. Let''s add a `LinearLayout` view group that will be used to lay out
    the POI name and address data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `LinearLayout` (vertical) view group in the toolbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding this widget is a little trickier because we want it anchored to the right-hand
    side of the `ImageView` widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `LinearLayout` view group to the right-hand side of the `ImageView`
    widget until the edge turns to a blue dashed line, and then drop the `LinearLayout`
    view group. It will be aligned with the right-hand side of the `ImageView` widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the property grouping named `RelativeLayout` of the **Layout** section, set
    **Center Vertical** to `true`. As before, you will need to enter `true` in the
    edit box or manually add it to the **Source** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the **Code** view to see what has been added to the layout. Notice
    the following lines of code added to `LinearLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding the name and address TextView classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the `TextView` classes to display the POI name and address:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate `TextView` in the **Toolbox** and add a `TextView` class to the layout.
    This `TextView` needs to be added within the `LinearLayout` view group we just
    added, so drag `TextView` over the `LinearLayout` view group until it turns blue
    and then drop it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the `TextView` ID as `nameTextView` and set the `text size` to `20sp`.
    The text size can be set in the **Style** section of the **Properties** pad; you
    will need to expand the **Text Appearance** group by clicking on the ellipsis
    (**...**) button on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Scale-independent pixels** (**sp**) are like dp units, but they are also
    scaled by the user''s font size preference. Android allows users to select a font
    size in the Accessibility section of Settings. When font sizes are specified using
    sp, Android will not only take into account the screen density when scaling text,
    but will also consider the user''s accessibility settings. It is recommended that
    you specify font sizes using sp.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add another `TextView` to the `LinearLayout` view group using the same technique
    except dragging the new widget to the bottom edge of the `nameTextView` until
    it changes to a blue dashed line and then drop it. This will cause the second
    `TextView` to be added below `nameTextView`. Set the font size to `14sp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the ID of the newly added `TextView` to `addrTextView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now change the sample text for both `nameTextView` and `addrTextView` to **POI
    Name** and **City**, **State**, **Postal Code**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To edit the text shown in `TextView`, just double tap the widget on the content
    panel. This enables a small editor that allows you to enter the text directly.
    Alternately, you can change the text by entering a value for the **Text** property
    in the **Widget** section of the **Properties** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is a design practice to declare all your static strings in the `Resources/values/string.xml`
    file. By declaring the strings in the `strings.xml` file, you can easily translate
    your whole app to support other languages. Let''s add the following strings to
    `string.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now change the **Text** property of both `nameTextView` and `addrTextView`
    by selecting the ellipsis (**…**) button, which is next to the **Text** property
    in the **Widget** section of the **Properties** pad. Notice that this will open
    a dialog window that lists all the strings declared in the `string.xml` file.
    Select the appropriate strings for both `TextView` objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s switch to the **Code** view to see what has been added to the layout.
    Notice the following lines of code added inside `LinearLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding the distance TextView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add a `TextView` to show the distance from POI:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `TextView` in the toolbox and add a `TextView` to the layout. This
    `TextView` needs to be anchored to the right-hand side of the `RelativeLayout`
    view group, but there is no way to visually accomplish this; so, we will use a
    multistep process. Initially, align the `TextView` with the right-hand edge of
    the `LinearLayout` view group by dragging it to the left-hand side until the edge
    changes to a dashed blue line and drop it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Widget** section of the **Properties** pad, name the widget as `distanceTextView`
    and set the font size to `14sp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Layout** section of the **Properties** pad, set **Align Parent Right**
    to **true**, **Center Vertical** to **true**, and clear out the `linearLayout1`
    view group name in the **To Right Of** layout property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the sample text to **204 miles**. To do this, let's add a new string
    entry to `string.xml` and set the **Text** property from the **Properties** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot depicts what should be seen from the Content view
    at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/OejOO7zu.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Switch back to the **Source** tab in the layout designer, and notice the following
    code generated for the `POIListItem.axml` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Creating the PointOfInterest apps entity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first class that is needed is the one that represents the primary focus
    of the application, a `PointofInterest` class. `POIApp` will allow the following
    attributes to be captured for the Point Of Interest app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Description`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Address`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Latitude`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Longitude`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Image`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The POI entity class can be nothing more than a simple .NET class, which houses
    these attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a POI entity class, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `POIApp` project from the Solution Explorer in Xamarin Studio. Select
    the `POIApp` project and not the solution, which is the top-level node in the
    **Solution** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on it and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side of the **New File** dialog box, select **General**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the template list, in the middle of the dialog box, select **Empty
    Class (C#)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `PointOfInterest` and click on **OK**. The class will be created
    in the `POIApp` project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the visibility of the class to public and fill in the attributes based
    on the list previously identified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code snippet is from `\POIApp\POIApp\PointOfInterest.cs` from
    the code bundle available for this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that the **Latitude** and **Longitude** attributes are all marked as nullable.
    In the case of latitude and longitude, (0, 0) is actually a valid location so
    a null value indicates that the attributes have never been set.
  prefs: []
  type: TYPE_NORMAL
- en: Populating the ListView item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the adapter views such as `ListView` and `GridView` use an `Adapter` that
    acts as a bridge between the data and views. The `Adapter` iterates through the
    content and generates Views for each data item in the list.
  prefs: []
  type: TYPE_NORMAL
- en: The Android SDK provides three different adapter implementations such as `ArrayAdapter`,
    `CursorAdapter`, and `SimpleAdapter`. An `ArrayAdapter` expects an array or a
    list as input, while `CursorAdapter` accepts the instance of the `Cursor`, and
    `SimpleAdapter` maps the static data defined in the resources. The type of adapter
    that suits your app need is purely based on the input data type.
  prefs: []
  type: TYPE_NORMAL
- en: The `BaseAdapter` is the generic implementation for all of the three adapter
    types, and it implements the `IListAdapter`, `ISpinnerAdapter`, and `IDisposable`
    interfaces. This means that the `BaseAdapter` can be used for `ListView`, `GridView`,
    or `Spinners`.
  prefs: []
  type: TYPE_NORMAL
- en: For `POIApp`, we will create a subtype of `BaseAdapter&lt;T&gt;` as it meets
    our specific needs, works well in many scenarios, and allows the use of our custom
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Creating POIListViewAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create POIListViewAdapter, we will start by creating a custom adapter
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class named `POIListViewAdapter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `POIListViewAdapter` class file, make the class a public class, and
    specify that it inherits from `BaseAdapter&lt;PointOfInterest&gt;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the adapter class has been created, we need to provide a constructor
    and implement four abstract methods.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's implement a constructor that accepts all the information we will need
    to work with to populate the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you need to pass at least two parameters: an instance of an activity
    because we need the activity context while accessing the standard common resources
    and an input data list that can be enumerated to populate the `ListView`. The
    following code shows the constructor from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Implementing Count { get }
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BaseAdapter&lt;T&gt;` class provides an abstract definition for a read-only
    `Count` property. In our case, we simply need to provide the count of POIs as
    provided in `poiListData`. The following code example demonstrates the implementation
    from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Implementing GetItemId()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BaseAdapter&lt;T&gt;` class provides an abstract definition for a method
    that returns a long ID for a row in the data source. We can use the `position`
    parameter to access a POI object in the list and return the corresponding ID.
    The following code example demonstrates the implementation from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the index getter method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BaseAdapter&lt;T&gt;` class provides an abstract definition for an index
    getter method that returns a typed object based on a position parameter passed
    in as an index. We can use the position parameter to access the POI object from
    `poiListData` and return an instance. The following code example demonstrates
    the implementation from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Implementing GetView()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BaseAdapter&lt;T&gt;` class provides an abstract definition for `GetView()`,
    which returns a view instance that represents a single row in the `ListView` item.
    As in other scenarios, you can choose to construct the view entirely in code or
    to inflate it from a layout file. We will use the layout file we previously created.
    The following code example demonstrates inflating a view from a layout file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter of `Inflate` is a resource ID and the second is a root `ViewGroup`,
    which in this case can be left `null` since the view will be added to the `ListView`
    item when it is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing row Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `GetView()` method is called for each row in the source dataset. For datasets
    with large numbers of rows, hundreds, or even thousands, it would require a great
    deal of resources to create a separate view for each row, and it would seem wasteful
    since only a few rows are visible at any given time. The `AdapterView` architecture
    addresses this need by placing row Views into a queue that can be reused as they
    scroll out of view of the user. The `GetView()` method accepts a parameter named
    `convertView`, which is of type `view`. When a view is available for reuse, `convertView`
    will contain a reference to the view; otherwise, it will be `null` and a new view
    should be created. The following code example depicts the use of `convertView`
    to facilitate the reuse of row Views:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Populating row Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an instance of the view, we need to populate the fields. The
    `View` class defines a named `FindViewById&lt;T&gt;` method, which returns a typed
    instance of a widget contained in the view. You pass in the resource ID defined
    in the layout file to specify the control you wish to access.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code returns access to `nameTextView` and sets the **Text** property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Populating `addrTextView` is slightly more complicated because we only want
    to use the portions of the address we have, and we want to hide the `TextView`
    if none of the address components are present.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `View.Visibility` property allows you to control the visibility property
    of a view. In our case, we want to use the `ViewState.Gone` value if none of the
    components of the address are present. The following code shows the logic in `GetView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Populating the value for the distance text view requires an understanding of
    the location services. We need to do some calculation, by considering the user's
    current location with the POI latitude and longitude. This part will be covered
    in Chapter 9, *Making POIApp Location Aware*.
  prefs: []
  type: TYPE_NORMAL
- en: Populating the list thumbnail image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image downloading and processing is a complex task. You need to consider the
    various aspects, such as network logic, to download images from the server, caching
    downloaded images for performance, and image resizing for avoiding the memory
    out conditions. Instead of writing our own logic for doing all the earlier mentioned
    tasks, we can use `UrlImageViewHelper`, which is a free component available in
    the Xamarin Component Store.
  prefs: []
  type: TYPE_NORMAL
- en: The Xamarin Component Store provides a set of reusable components, including
    both free and premium components, that can be easily plugged into any Xamarin-based
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Using UrlImageViewHelper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following steps will walk you through the process of adding a component
    from the Xamarin Component Store:'
  prefs: []
  type: TYPE_NORMAL
- en: To include the `UrlImageViewHelper` component in `POIApp`, you can either double-click
    on the `Components` folder in the **Solution** pad, or right-click and select
    **Edit Components**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the component manager will be loaded with the already downloaded
    components and a **Get More Components** button that allows you to open the **Components**
    store from the window. Note that to access the component manager, you need to
    log in to your Xamarin account:![](img/SwDRCFYC.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `UrlImageViewHelper` in the components search box available in the
    left-hand side pane. Now click on the download button to add your Xamarin Studio
    solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have added the `UrlImageViewHelper` component, let''s go back to
    the `GetView()` method in the `POIListViewAdapter` class. Let''s take a look at
    the following section of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let us examine how the preceding code snippet works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `SetUrlDrawable()` method defined in the `UrlImageViewHelper` component
    provides a logic to download an image using a single line of code. It accepts
    three parameters: an instance of `imageView`, where the image is to be displayed
    after the download, the image source URL, and the placeholder image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new image `ic_placeholder.png` to the `drawable Resources` directory.
    While the image is being downloaded, the placeholder image will be displayed on
    `imageView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading the image over the network requires Internet permissions. The following
    section will walk you through the steps involved in defining permissions in your
    `AndroidManifest.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Internet permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android apps must be granted permissions while accessing certain features, such
    as downloading data from the Internet, saving an image in storage, and so on.
    You must specify the permissions that an app requires in the `AndroidManifest.xml`
    file. This allows the installer to show potential users the set of permissions
    an app requires at the time of installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the appropriate permissions, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on `AndroidManifest.xml` in the **Properties** directory in the
    **Solution** pad. The file will open in the manifest editor. There are two tabs:
    **Application** and **Source**, at the bottom of the screen, that can be used
    to toggle between viewing a form for editing the file and the raw XML, as shown
    in the following screenshot:![](img/WwoNP5Zc.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Required permissions** list, check **Internet** and navigate to **File**
    | **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **Source** view to view the XML as follows:![](img/TcyeJQCV.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hooking up POIListViewAdapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have the list layout and adapter ready; let''s now proceed to hook up the
    data in `poiListView`. We need to switch back to the `POIListActivity` class and
    add the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declare the following variables inside the `POIListActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `OnCreate` method, instantiate the `ListView` and `ProgressBar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For now, we will create an `Async` method that is responsible for downloading
    the data from the server and displaying it in `POIListActivity`. Add the following
    method to the `POIListActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `DownloadPoisListAsync()` method from the `OnCreate()` activity life
    cycle callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that this chapter uses the Android device networking capabilities for downloading
    the data form a REST web service. The following sections in this chapter will
    cover how to make a network request fetch data from the server in detail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now for testing purposes, let''s add the following method that provides a dummy
    POI list object. Later in this chapter, we will remove this method while we integrate
    with a REST web service:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add the following logic to the `downloadPoisAsync()` method to make
    our `POIApp` fully functional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice the following in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The progress bar is shown to the user when the download starts. When the download
    is complete, the `progressBar` is hidden.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, the `GetPoiListTestData()` method simulates the network request and
    provides the list of POI objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the data download is complete, the `POIListViewAdapter` class is instantiated
    by passing the downloaded POI list result and then it is set to list view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have done a great deal of work so far! Let''s just build and run the app
    on the Android emulator or device. You will see the output, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/vtcV96G4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `ListView` works great with the test data. Now it is the time to worry about
    consuming the real POI data from the REST web service. The following section will
    guide you through establishing an HTTP network request form the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have created the layout for the list view and list adapter; now
    it is the time to worry about how to consume the web service to download the data
    and to hook it up to the screen. The following section will walk you through the
    steps on how to download data asynchronously from the web service.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to web services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web services are one of the integral parts of the **World Wide Web** (**WWW**)
    infrastructure. It allows the server application to share the data or logic with
    connected clients via web protocols such as REST and SOAP using data formats,
    such as XML and JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Web services expose a set of **Application Programming Interfaces** (**APIs**)
    that provides a uniform data access mechanism for client applications. It doesn't
    matter which programming language the web service is written in; the client applications
    with different operating systems or different programming languages can access
    the services seamlessly, as long as they adhere to the web service API specification.
    For example, a web service that is written in Java and hosted on Apache Tomcat
    can be used by a .NET web form, iOS, or an Android application.
  prefs: []
  type: TYPE_NORMAL
- en: SOAP and REST are the two standard web service architectures used vastly in
    the industry by larger players. Microsoft developed SOAP and REST was developed
    by W3C Technical Architecture Group. While SOAP brings its own protocol with additional
    security layers, the REST implementation is considerably easier. Companies such
    as Google and Microsoft are migrating most of their existing services to REST.
    Which web service architecture is better is an endless debate worth Googling;
    however, choosing the one that works for you is purely an architectural decision
    based on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The `POIApp` example code provided in this book will consume the web service
    developed in Java (JAX-RS) using the REST architecture. The following section
    will walk you through the steps on how to deploy and set up on your system for
    testing `POIApp`.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the POI web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code bundle provided in this book includes the POI web service project code,
    which will be used for completing the remaining chapters in this book. The code
    bundle includes a *readme* file describing the steps required for deploying the
    POI Web service. The following section will walk you through the steps provided
    in the readme file and deploy the web service before you proceed with this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The POI web service sample application provides two APIs: one to fetch the
    list of POIs available on the server and the other to create a new POI record
    in the server database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the following API specification for getting
    the list of POIs from the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request method**: `GET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource URI**: `/com.packet.poiapp/api/poi/pois`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content-type**: `application/json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accept-type**: `application/json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Body**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Consuming REST web services asynchronously
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consuming REST web services in the Xamarin Android application is relatively
    easier than it looks. There are various framework classes, such as `WebClient`,
    `WebRequest`, `HttpWebRequest`, `HttpClient`, and other third-party libraries,
    such as `RestSharp` and `Service Stack`, that are available for Xamarin to consume
    REST web services.
  prefs: []
  type: TYPE_NORMAL
- en: For developing `POIApp`, we will taper our discussion to `HttpClient`. The `HttpClient`
    is newly introduced in .NET 4.5 and provides some of the advanced features, such
    as a strong type header, shared cache, cache control, and so on. The following
    section will walk you through the steps on how to use `HttpClient` to make an
    asynchronous web service request from the Xamarin Android application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the POIService class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will create a standard C# class that abstracts all the logic to consume
    REST web services and will make our activity look much tidier. To create the new
    `POIService` class, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `POIApp` project in the **Solution** pad in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on it and select **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side of the **New File** dialog box, select **General**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the template list, in the middle of the dialog box, select **Empty
    Class(C#)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name `POIService` and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a string constant that represents the resource''s URI endpoint to access
    the POI web service for fetching the list of POIs available in the server. At
    this stage, I assume that the web service code is hosted on the local computer
    with port 8080\. In real time, your application will use the domain where the
    endpoint is hosted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For any technical reasons/limitations you couldn''t complete the web service
    installation, you can still continue to test your application with Apiary mock
    feeds. For testing with mock feeds, you can use the following feed URL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Asynchronous programming with async and await
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Downloading data from the server is a long-running blocking operation, and it
    is recommended for mobile apps to perform all such long-running tasks off the
    main thread. For making a responsive and smooth user experience, mobile applications
    need to create a new thread for any long-running operations. Since the release
    of **.NET 4.5**, the `async` and `await` keywords are used to implement multi-threading
    easily, without getting your hands dirty in threads. The methods defined by the
    `async` and `await` keywords are often called the `async` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the key things you must know before implementing
    the `async` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `async` keyword is used to notify the .NET language **Common Language Runtime**
    (**CLR**) to create a new thread of execution and execute tasks asynchronously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `await` keyword automatically pauses the caller thread and executes the
    tasks on a new thread; once the task is finished, the control is returned. A single
    `async` method can have one or more `await` keywords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `async` method always returns `Task&lt;T&gt;`, where **T** represents the
    data type of the result expected after the execution. A void return type can be
    used when no result is expected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a convention, Microsoft recommends the name of the `async` methods to suffix
    with async. However, this is not mandatory, but it helps to remind the caller
    to use the `await` keyword.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we understand the basics to create the async method, let''s define
    a method in the `POIService` class and name it `GetPOIListAsync`. The `GetPOIListAsync`
    method will be used to consume the REST web service asynchronously, deserialize
    the response in the POI list collection, and return the result back to the activity
    for displaying results in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the return type of the `GetPOIListAsync` method is `Task&lt;List&lt;PointOfInterest&gt;&gt;`,
    and the `List&lt;PointOfInterest&gt;` is the result expected on `POIListActivity`
    for rendering the data on the list view.
  prefs: []
  type: TYPE_NORMAL
- en: The `GetPOIListAsync` method now creates an instance of `HttpClient`, sets the
    HTTP header accept type as `application/json`, and calls the `GetAsync()` method
    by passing the web service URL. The accept type header metadata tells the server
    about the response the media format client expects. The `GetAsync()` method initiates
    a GET request to the specified endpoint and returns the `HttpResponseMessage`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the response status code is returned as a success **(** `200OK` **)**, we
    are good to proceed to fetch the contents. As we know from the web service specification,
    the response is a structured JSON string; we can retrieve the values by calling
    the `GetStringAsync` method. For the status code other than success, we can place
    the logic to handle the error case. In order to simplify this example, we will
    just print the error log on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note that the preceding `GetPOIListAsync` method used for consuming the REST
    web service requires the Internet permission. As we have already added the Internet
    permission, while downloading the image using the `UrlImageViewHelper` Xamarin
    component, we don't need to add the permission again.
  prefs: []
  type: TYPE_NORMAL
- en: The `await` keyword expects the download results to proceed further and hence,
    it waits for the ongoing download task to complete. Once the download task is
    completed, the POI web service response JSON string is assigned to a content variable.
    At this point, the string result has to be deserialized to the .NET object and
    the result has to be returned back to `POIListActivity`. The following section
    will guide you with the steps to deserialize the content string into a JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: 'While HttpClient in combination with `async` and `await` keyword provides a
    native API support for dealing with asynchronous network request, you can also
    take advantages of the powerful and yet popular framework such as Service Stack
    or Rest Sharp. Here are a few links that you can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://msdn.microsoft.com/en-us/library/hh191443.aspx](https://msdn.microsoft.com/en-us/library/hh191443.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/restsharp/RestSharp](https://github.com/restsharp/RestSharp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://servicestack.net/](https://servicestack.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serializing and deserializing using Json.NET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another important decision that we need to make while serializing and deserializing
    the JSON data is how we will get the response string converted to a .NET object
    and vice versa. There are a number of options available, including `DataContractJsonSerailzier`
    from .NET. Json.NET is an open source component library created by James Newton-King,
    and this is definitely worth considering because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It's small, fast, and reliable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's available as a free component in the Xamarin Component Store and via NuGet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes simple tasks extremely simple to accomplish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these characteristics in mind, we will proceed by adding the Json.NET component
    to `POIApp` from the Xamarin Component Store. To add the Json.NET component, follow
    the same steps that we performed while adding the `UrlImageViewHelper` component.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Json.NET component is added to the solution, the next step is to convert
    the response string and to make a list of `PointOfInterest` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the following namespace directives in the `POIListActivity.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a list collection in the `GetPOIListAsync()` method to hold the POI''s
    list response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the `poiListData` list collection. Place the following code snippet
    in the `downloadPoisAsync()` method after the `Console.Out.WriteLine` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, it is time to deserialize the JSON string to the .NET object. Notice that
    the response JSON string is an object with a key `pois` representing the array
    of the `PointOfInterest` objects. Add the following code snippet to the `GetPOIListAsync()`
    method to deserialize the string to the .NET object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line of code will convert the complete JSON response string to
    `JObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now fetch the values for the `pois` key and iterate through it to convert to
    the .NET list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `JToken` is a generic representation of the JSON value of any kind. It could
    be a string, object, array, property, and so on. The `ToList()` method returns
    the collections of the `JToken` objects. The `token.ToObject` method converts
    each of the poiJSON tokens to the `PointOfInterest` object type and adds it to
    the `poiListData` collection. Finally, we return the list result back to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: Updating POIListActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have downloaded the data, and we are ready to use the data in `POIListActivity`.
    Let''s do the following changes in `POIListActivity`:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `GetPoiListTestData()` method from the `POIListActivity` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an instance of `POIService` in the `DownloadPoisListAsync` method and
    call the `GetPOIListAsync` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have done a great deal of work so far; now it's time to compile and run the
    app. Compile and run the application using the Android emulator based on the procedure
    we used in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bingo! You will notice that the app will download the data from the POI web
    service and display the list of POIs on the scrollable list view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/SlfgXL9q.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding actions to ActionBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Android 3.0 (Honeycomb, API level 11), Android introduced a uniform title,
    such as a widget that docks to the top of the screen, called **ActionBar**. It
    allows apps to add activity-specific actions to the top of the device screen,
    just below the status bar. We will define two actions for the `POIListActivity`
    class: `New`, to create a new POI, and `Refresh`, to refresh the cache of POIs
    from the device''s local storage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class provides the following virtual methods that can be overridden
    to add actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Method
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: '`OnCreateOptionsMenu`'
  prefs: []
  type: TYPE_NORMAL
- en: It allows the creation of the actions either through API calls or through inflating
    an XML definition
  prefs: []
  type: TYPE_NORMAL
- en: '`OnOptionsItemSelected`'
  prefs: []
  type: TYPE_NORMAL
- en: It is called when an action in `ActionBar` is clicked
  prefs: []
  type: TYPE_NORMAL
- en: Defining the menu XML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actions can be defined in a menu XML file that resides in the `Resources/menu`
    folder, or it can be created programmatically using API calls. We will define
    the **New** and **Refresh** actions in an XML file named `POIListViewMenu.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create `POIListViewMenu.xml`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Resources` folder in `POIApp`, right-click on it, and navigate to
    **Add** | **New Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the folder menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the menu folder, right-click on it, and navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **XML** | **Empty XML** file, enter `POIListViewMenu.xml` for the
    name, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You now need to fill in the definitions for the two actions we identified.
    Unfortunately, Xamarin Studio does not contain a template for menu XML files,
    so you have to hunt the format down from the Android documentation or online examples.
    The following code contains definitions for `actionNew` and `actionRefresh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that from the menu definition, we have referenced two new drawables: `ic_new`
    and `ic_refresh`. We need to add these images to the project in the same way that
    we did for the `ic_app` icon in Chapter 3, *Creating the Points of Interest App*.
    The images can be found in the `drawable` folder present in the `assets` location.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting menus in OnCreateOptionsMenu()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `OnCreateOptionsMenu()` method is called to give an opportunity to the
    `Activity` parameter to define actions for the `ActionBar`. The `Activity` class
    provides a `MenuInflater` method, which reads the XML definition file and places
    the action defined on the ActionBar. The following code shows the implementation
    from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Handling selection in OnOptionsItemSelected()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `OnOptionsItemSelected()` method is called whenever an action in the ActionBar
    is clicked and an instance of `IMenuItem` is passed in. The `IMenuItem ItemId`
    instance corresponds to the ID specified in the item definition and can be used
    to determine which action was clicked on. The following code shows the implementation
    of `OnOptionsItemSelected()` from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that we have simply created a placeholder for `actionNew` and placed two
    method calls for `actionRefresh`.
  prefs: []
  type: TYPE_NORMAL
- en: The `DownloadPoisListAsync()` method is called to download and refresh the data
    on the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now run the `POIApp` and notice the two buttons, **Add** and **Refresh**,
    on the POI list activity title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/IMUA78SR.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Handling the ListView click event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user clicks on a row, the POI app will navigate to a detailed view in
    order to allow you to view and update the complete set of information. We will
    build the detailed view in the next chapter but will go ahead and discuss handling
    clicks now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicks can be handled using a traditional event handler. The `ListView` item
    provides an `ItemClick` event handler, which accepts a `ListView.ItemClickEventArgs`
    parameter. The `ListView.ItemClickEventArgs` parameter provides the following
    information that can be used for processing the event:'
  prefs: []
  type: TYPE_NORMAL
- en: Property
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs: []
  type: TYPE_NORMAL
- en: '`ID`'
  prefs: []
  type: TYPE_NORMAL
- en: It is the ID for the data associated with the row that was clicked. This would
    be the value returned from `GetItemId()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Position`'
  prefs: []
  type: TYPE_NORMAL
- en: It is the position in the `ListView` item of the row that was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '`View`'
  prefs: []
  type: TYPE_NORMAL
- en: It is the view associated with the row that was clicked. This would be the view
    returned from `GetView()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Parent`'
  prefs: []
  type: TYPE_NORMAL
- en: It is the `AdapterView` architecture that contains the row that was clicked.
    In our case, it is `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an event handler in `POIListActivity` to process click events on the
    `ListView` item. We are not ready to add the navigation, as we have not yet created
    our detailed view, so we will just show you a `Toast` message. The following code
    is from the code bundle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to hook up the event handler. Add the following line of code to
    the end of the `OnCreate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Run the `POIApp` project and click on a **POI**; notice that the POI name of
    the corresponding row is printed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: Handling no network condition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The network conditions in mobile devices are uncertain. Sometimes, a user manually
    disables the network connections or they are unavailable due to various external
    reasons. For applications that use network data, you must handle different network
    states. Applications should react gracefully by showing an appropriate message
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: In `POIApp`, before starting the download, we must confirm the availability
    of the network data connections. If the network is unavailable, we should notify
    the user with an appropriate message otherwise continue with the download request.
  prefs: []
  type: TYPE_NORMAL
- en: The `ConnectivityManager` class present in the `System.Net` package can be used
    to query the state of device network connectivity. This class can also be used
    to monitor the network connection and notify when there is a change in the network
    state. In our case, we will just query the network information just to know that
    the network is available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accessing the network state using the `ConnectivityManager` class requires
    `ACCESS_NETWORK_STATE` user permission in the `AndroidManifest.xml` file. Follow
    the same steps as we did earlier while adding the Internet permission, or alternatively,
    you can directly add the following code to the `AndroidManifest.xml` source editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following utility method to the `POIService` class that reads the
    network information and returns `true` if the device is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now do the following changes to the `DownloadPoisListAsync` method in the `POIService`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You must be surprised about the `Toast`. Well, we will learn about it in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Toast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Toast` is a noninteractive, auto disposable view used to display a short
    message for a specified period of time and disposes itself. Android recommends
    that you use `Toast` only to notify the user, where the user's attention is not
    mandate. For any such notification that requires the user's attention or interaction,
    consider using dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a `Toast` is simple, all you have to do is to call the `MakeText()`
    static method by passing three parameters: the application context, message to
    be shown, and the time duration for the `Toast` to be shown. The time duration
    is a non-negative integer value in milliseconds, but it is recommended that you
    use the standard `Long` and `Short` constants defined in the `ToastLength` enum.
    The `MakeText()` method initializes the Toast with the given properties and returns
    a `Toast` instance on which we can call the `Show()` method to display `Toast`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code snippet, we are displaying the `Toast` message when the
    device is offline. The following code depicts calls to the `MakeText()` and `Show()`
    methods to display `Toast` on the `Delete` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot about how to create user interface elements
    using different layout managers and widgets such as `TextView`, `ImageView`, `ProgressBar`,
    and `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered how to consume REST web services using the Xamarin.Android `HttpClient`
    class, deserialize the JSON response using the Json.NET component, and populate
    the data on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce you to some more view groups and build more
    complex UIs. We will continue with `POIApp` by adding a detailed view and allow
    the user the option to create or delete a Point Of Interest.
  prefs: []
  type: TYPE_NORMAL
