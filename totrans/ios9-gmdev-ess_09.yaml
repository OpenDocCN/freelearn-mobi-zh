- en: Chapter 8. The Future of iOS Game Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章 iOS 游戏开发的未来
- en: For the entirety of this book we have gone over the features from iOS 8 and
    the recent announcements of iOS 9\. So, what of the future of iOS game development?
    Obviously, nobody can tell what the future will bring, but we can guess a few
    possibilities based on the recent evolution of the iOS/Xcode platform, programming,
    and how game development as a whole will change.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的整个内容中，我们已经介绍了 iOS 8 的功能和最近关于 iOS 9 的公告。那么，iOS 游戏开发的未来会怎样呢？显然，没有人能预测未来会带来什么，但我们可以根据
    iOS/Xcode 平台、编程以及整体游戏开发如何变化等方面的近期发展，猜测一些可能性。
- en: A greater focus on functional programming
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更大的关注点在于函数式编程
- en: As of this publication, the Swift programming language is only a year old but
    it represents a recent paradigm shift in much of programming. Object-oriented
    programming and design still holds true, but a shift to functional programming
    is where languages such as Scala and Swift place their focus. Functional programming,
    in summary, is a focus on functions being pure mathematical calculations of objects
    with an avoidance of the state changes and mutable data that we've seen with past
    languages, such as C++/Java and even Apple's own Objective-C. Instead of dealing
    with subroutines, a function only works on the parameters it's given. Swift does
    this well with its closures, which we've seen a few times in this book, and are
    often used to compact much of the logic in game programming for iOS.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本书出版时，Swift 编程语言只有一年历史，但它代表了编程领域最近的一次范式转变。面向对象编程和设计仍然适用，但转向函数式编程是像 Scala 和
    Swift 这样的语言所关注的焦点。简而言之，函数式编程关注的是函数作为对象的纯数学计算，避免了我们过去在 C++/Java 以及苹果自己的 Objective-C
    中所看到的州变化和可变数据。与处理子例程不同，一个函数只对其给定的参数进行操作。Swift 通过其闭包做得很好，我们在本书中已经看到几次，并且经常用于压缩
    iOS 游戏编程中的大量逻辑。
- en: Since *WWDC14*, Apple has told developers that Swift is the successor to both
    C and Objective-C. It's a completely rebuilt language from the ground up with
    speed and efficiency as its focus, something game developers must always take
    advantage of and why Swift is now the language of choice going forward for iOS
    game development. Objective-C is not going away, and Swift still has some growing
    up to do before it can even take over all of what Objective-C can do for iOS development.
    Swift's 2.0 update from iOS 9 added more for error catching and debugging with
    keywords, such as throw, catch, and guard. Thankfully, we don't have to abandon
    any past Objective-C projects since the ability to use both Swift and Objective-C
    in the same project is very simple through the use of an Objective-C/Swift Bridging
    file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 *WWDC14* 以来，苹果公司已经告诉开发者，Swift 是 C 和 Objective-C 的继任者。这是一个从头开始完全重建的语言，其重点是速度和效率，这是游戏开发者必须始终利用的，也是为什么
    Swift 现在成为 iOS 游戏开发前进方向上的首选语言。Objective-C 并不会消失，Swift 在能够完全接管 Objective-C 为 iOS
    开发所做的一切之前，还需要一些成长。Swift 2.0 的更新从 iOS 9 开始，增加了更多的错误捕获和调试功能，例如 throw、catch 和 guard
    关键字。幸运的是，我们不必放弃任何过去的 Objective-C 项目，因为通过使用 Objective-C/Swift 桥接文件，在同一个项目中使用 Swift
    和 Objective-C 非常简单。
- en: As we move on to future versions of iOS, expect more debugging controls and
    improvements to Swift's ability to compact detailed logic into a few lines. Some
    data sorting functionalities of Swift are faster than Objective-C, and in the
    world of game development, any gains in frame rate is always a good thing. Despite
    the advances in CPU/GPU power and the ever-growing ease of game development frameworks,
    such as SpriteKit and SceneKit, the design aspect of game design can be a double-edged
    sword if we forget the engineering aspect of this craft. Some of the tools given
    to us in the recent game development scene can make almost anybody a game developer.
    This is a good thing. We want people from all walks of life to be game developers,
    but we must not let some of the recent and future tools that allow games on iOS
    or other platforms making us lazy and forget that there is and always will be
    a programming/engineering side to this industry. The frameworks and visual tools
    of iOS and other game engines should always be treated as tools and never as a
    crutch. The best games of the past, present, and in the future will be games that
    tap into every aspect of game development, particularly, the hardest aspects of
    game development, such as the graphics pipeline. That's why Apple tapped into
    the details of the GPU with the Metal API.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们转向iOS的未来版本，期待更多的调试控制和Swift将详细逻辑压缩成几行的能力得到改进。Swift的一些数据排序功能比Objective-C快，在游戏开发的世界里，任何帧率的提升都是好事。尽管CPU/GPU性能的进步和游戏开发框架（如SpriteKit和SceneKit）的日益便捷，但如果忘记了游戏设计的工程方面，设计方面可能会成为一把双刃剑。最近游戏开发场景中提供的某些工具可以让几乎任何人成为游戏开发者。这是好事。我们希望各行各业的人都能成为游戏开发者，但我们不能让一些最近和未来的工具，使得iOS或其他平台上的游戏制作变得懒惰，并忘记这个行业中始终存在并始终存在的编程/工程方面。iOS和其他游戏引擎的框架和可视化工具应该始终被视为工具，而不是拐杖。过去、现在和未来的最佳游戏将是那些充分利用游戏开发各个方面，尤其是游戏开发中最困难方面的游戏，比如图形管线。这就是为什么苹果通过Metal
    API深入GPU细节的原因。
- en: The Apple Watch
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apple Watch
- en: As of iOS 9, the Apple Watch's platform already got an upgrade with watchOS
    2\. The Apple Watch is generally, at the moment, not a video game platform. Without
    taking the small screen size into play, apps made for the Apple Watch don't have
    much in the way of making game-like graphics updates. In the future, this might
    change. At the moment, apps made in watchOS are like child apps of main iOS apps.
    Eventually, we can make watchOS apps separately without having them attached to
    a parent iOS project. However, some developers have made simple text-based games
    for the Apple watch. It's possible that in the future, we could make more action-oriented
    games for the Apple Watch.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 自从iOS 9开始，Apple Watch的平台已经通过watchOS 2进行了升级。目前，Apple Watch通常不是一个游戏平台。不考虑小屏幕尺寸，为Apple
    Watch制作的app在制作类似游戏的图形更新方面并没有太多优势。在未来，这种情况可能会改变。目前，在watchOS中制作的app就像是主iOS app的子app。最终，我们可以独立制作watchOS
    app，而无需将其附加到父iOS项目中。然而，一些开发者已经为Apple Watch制作了简单的基于文本的游戏。未来，我们可能会为Apple Watch制作更多以动作为导向的游戏。
- en: Currently, it's very much possible to make a game that uses the watch for accessories
    data, such as inventory, maps, and more with a little bit of ingenuity. One feature
    of the Apple Watch that we could design games or game controls with is **Force
    Touch**. Force Touch senses how firm the press gesture is. This isn't something
    new to game design as a whole but new to iOS with the next line of iPhones and
    iPads most likely having this feature as well. Getting the strength of a player's
    touch and taps could allow some intuitive gameplay mechanics for the next line
    of mobile games.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，通过一点创意，完全有可能制作一个使用手表作为配件数据（如库存、地图等）的游戏。我们可以用**Force Touch**来设计游戏或游戏控制，这是Apple
    Watch的一个特性。Force Touch可以感知按下手势的力度。这并不是游戏设计整体上的新事物，但在iOS上，随着下一代的iPhone和iPad很可能也具备这一功能，这还是第一次。获取玩家的触摸和点击的力度可以允许一些直观的游戏玩法机制，适用于下一代的移动游戏。
- en: For more on the watchOS to possibly inspire some game development ideas for
    the device, check out the watchOS 2 preview page at [https://www.apple.com/watchos-2-preview/](https://www.apple.com/watchos-2-preview/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关于watchOS可能激发的一些针对该设备的游戏开发想法，请查看[https://www.apple.com/watchos-2-preview/](https://www.apple.com/watchos-2-preview/)的watchOS
    2预览页面。
- en: Component-based structuring
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于组件的结构
- en: We saw in the previous chapters that iOS has imparted much of the component-based
    structuring paradigm to tackle the unique software/programming requirements that
    come from game development. Instead of building a tall parent-child structure
    that we see from an object-oriented design, it builds a structure that does best
    by growing it's structure in width. Classes, such as `GKEntity`, `GKComponent`,
    and other aspects of `GameplayKit`, are what let us take advantage of these features.
    This type of structuring isn't all too new in game development. Component-based
    structuring has been used by multiplatform game engines, such as Unity and Unreal
    Engine, and continues to be the way game developers like us make and reuse parts
    of our games. Expect the future updates to Xcode and iOS to utilize these features
    even more. In the near future, we will probably see Xcode look and act even more
    like these game engines but with the benefit of being specifically made for the
    iOS devices, allowing even deeper, custom integration. Doing all of this directly
    in Xcode and with iOS frameworks allows instant access to Apple features without
    the use of paid asset tools or waiting for plugin updates. Developers for the
    next generation of iOS games will be able to take AI actions, character abilities,
    HUD animations, and other features made in one game and reuse them almost instantly
    for a completely different game. Component-based structuring makes it where the
    developer can build a library of reusable features by placing the design of our
    games ahead of typical development hurdles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看到了iOS已经传授了大量的基于组件的架构范式，以应对来自游戏开发独特的软件/编程需求。它不是构建一个从面向对象设计看到的庞大父子结构，而是构建一个通过宽度增长其结构的结构。例如，`GKEntity`、`GKComponent`和`GameplayKit`的其他方面等类，使我们能够利用这些功能。这种结构在游戏开发中并不算特别新颖。基于组件的架构已经被多平台游戏引擎，如Unity和Unreal
    Engine所使用，并且继续是我们这样的游戏开发者制作和重用游戏部分的方式。预计Xcode和iOS的未来更新将更多地利用这些功能。在不久的将来，我们可能会看到Xcode的外观和功能甚至更像这些游戏引擎，但具有专门为iOS设备制作的好处，允许更深入、更定制的集成。在Xcode和iOS框架中直接完成所有这些操作，允许即时访问Apple的功能，而无需使用付费资产工具或等待插件更新。下一代iOS游戏开发者将能够使用在一种游戏中制作的AI动作、角色能力、HUD动画和其他功能，几乎可以立即为完全不同的游戏重用。基于组件的架构使得开发者能够通过将游戏设计置于典型开发障碍之前，构建一个可重用功能的库。
- en: The rise of VR
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟现实（VR）的兴起
- en: This has been a topic that Apple has been rather quiet about where other platforms
    have been rather vocal. Even the manufacturers of Apple's A7/A8 chips, Samsung,
    have joined the VR development environment with their GearVR device and their
    partnership with Oculus on the project. Google has created the simple Cardboard
    setup, akin to the GearVR, which simply lets the user place their smartphone into
    the device or box to experience VR experiences and games. Most famously, there
    is the Oculus Rift, which will have its consumer model available in the first
    quarter of 2016, and will likely be the front runner in this newer game environment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一直是苹果相对沉默的话题，而其他平台则相对活跃。即使是苹果A7/A8芯片的制造商三星，也通过其GearVR设备和与Oculus在项目上的合作加入了VR开发环境。谷歌创建了简单的Cardboard设置，类似于GearVR，它只是让用户将智能手机放入设备或盒子中，以体验VR体验和游戏。最著名的是Oculus
    Rift，它将在2016年第一季度推出消费版，并可能成为这个新游戏环境中的领跑者。
- en: Virtual reality is a topic that has come up a number of times in the past few
    decades. It has come and gone, but for the time being, it seems to be getting
    its overdue foothold in technology. The Unity game engine, for example, just recently
    allowed for native support of VR. The thought process in making these games is
    a bit different and has yet to be fully fleshed out. It is possible that soon
    Apple will throw their hat into this arena. If you haven't already, learning how
    to make fun games in the VR space might be a worthy act of foresight.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟现实是一个在过去几十年中多次出现的话题。它来过又去，但到目前为止，它似乎正在获得其在技术领域应得的立足点。例如，Unity游戏引擎最近才允许原生支持VR。制作这些游戏的思维过程略有不同，并且尚未完全明确。可能很快苹果会加入这个领域。如果你还没有这样做，学习如何在VR空间中制作有趣的游戏可能是一种有远见的行动。
- en: Summary
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We hope that the discussions and tutorials seen throughout this book helped
    you either learn the platform for the first time or enriched what you might have
    already known about iOS. We hope that you take this knowledge and make some amazing
    games for the iOS family of devices and continue to learn more about the platform
    and game development as a whole.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这本书中看到的讨论和教程能帮助你第一次学习平台，或者丰富你对iOS可能已经了解的知识。我们希望你能利用这些知识为iOS设备系列制作一些令人惊叹的游戏，并继续深入了解平台和整体游戏开发。
- en: In the end, always remember that game design and programming is a combination
    of computer science, engineering, art, and lots of hard work. It's a complex creative
    field that is a combination of every other creative profession from music to movie
    making, to 2D animation, 3D sculpting, and more. As the case with other creative
    fields, developers should never feel *done* and always be humble in what they
    know and acknowledge that there's always more to learn in this ever-growing field.
    Like a videogame, be up for the challenge. Realize when you look back that you
    essentially leveled up from what you used to know and there are always more abilities
    to gain.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，始终记住，游戏设计和编程是计算机科学、工程、艺术和大量辛勤工作的结合。这是一个复杂的创意领域，它结合了从音乐制作到电影制作、2D动画、3D雕塑等其他所有创意职业。与其他创意领域一样，开发者永远不应该感到“完成”，并且应该谦逊地对待自己所知，并承认在这个不断发展的领域中总有更多东西要学习。就像电子游戏一样，接受挑战。当你回顾过去时，意识到你实际上已经从你所知的内容中提升了等级，并且总有更多的能力可以获取。
