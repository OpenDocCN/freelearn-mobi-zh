["```java\nprivate void showOnThisDay(OnThisDay onThisDay) \n{\n  final Resources res = getResources();\n  final GridViewPager pager = (GridViewPager) findViewById(R.id.pager); \n  pager.setOnApplyWindowInsetsListener(new   View.OnApplyWindowInsetsListener()  \n  {\n    @Override\n    public WindowInsets onApplyWindowInsets(View v, WindowInsets insets) \n    {\n      // Adjust page margins: \n      // A little extra horizontal spacing between pages looks a bit \n      // less crowded on a round display.\n\n      final boolean round = insets.isRound();\n      int rowMargin = res.getDimensionPixelOffset(R.dimen.page_row_margin);\n      int colMargin = res.getDimensionPixelOffset(round ? R.dimen.page_column_margin_round : R.dimen.page_column_margin);\n      pager.setPageMargins(rowMargin, colMargin);\n\n      // GridViewPager relies on insets to properly handle \n      // layout for round displays. They must be explicitly \n      // applied since this listener has taken them over.\n\n      pager.onApplyWindowInsets(insets);\n      return insets; \n    } \n  }); \n  pager.setAdapter(new OnThisDayGridPagerAdapter(this,   getFragmentManager(), onThisDay)); \n  DotsPageIndicator dotsPageIndicator = (DotsPageIndicator) findViewById(R.id.page_indicator); \n  DotsPageIndicator.setPager(pager);\n}\n```", "```java\n<android.support.wearable.view.BoxInsetLayout\n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\"\n  android:background=\"@color/yellow_orange\">\n\n  <FrameLayout \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <android.support.wearable.view.GridViewPager\n      android:id=\"@+id/pager\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"match_parent\"\n      android:keepScreenOn=\"true\" />\n\n    <android.support.wearable.view.DotsPageIndicator\n      android:id=\"@+id/page_indicator\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_gravity=\"center_horizontal|bottom\"> \n    </android.support.wearable.view.DotsPageIndicator>\n  </FrameLayout>\n</android.support.wearable.view.BoxInsetLayout>\n```", "```java\npublic class OnThisDayGridPagerAdapter extends FragmentGridPagerAdapter \n{\n  private final Context mContext;\n  private OnThisDay onThisDay;\n  private List<Row> mRows;\n  private ColorDrawable mDefaultBg;\n  private ColorDrawable mClearBg;\n  public OnThisDayGridPagerAdapter(Context ctx, FragmentManager fm, OnThisDay onThisDay) \n  {\n    super(fm);\n    mContext = ctx;\n    this.onThisDay = onThisDay;\n    mRows = new ArrayList<OnThisDayGridPagerAdapter.Row>();\n    ArrayList<String> listItems = onThisDay.getListItems();\n    for (String listItem: listItems) \n    {\n      mRows.add(new Row(cardFragment(\"On This Day - \" + (listItems.indexOf(listItem) + 1), listItem))); \n    } \n  }\n  private Fragment cardFragment(String title, String content) \n  { \n    Resources res = mContext.getResources(); \n    CardFragment fragment = CardFragment.create(title, content);\n    // Add some extra bottom margin to leave room for the page indicator\n    fragment.setCardMarginBottom( res.getDimensionPixelSize(R.dimen.card_margin_bottom));\n    return fragment; \n  }\n  /** A convenient container for a row of fragments. */\n  private class Row \n  {\n    final List<Fragment> columns = new ArrayList<Fragment>();\n    public Row(Fragment... fragments) \n    {\n      for (Fragment f : fragments) \n      { \n        add(f); \n      } \n    }\n    public void add(Fragment f) \n    {\n      columns.add(f); \n    }\n    Fragment getColumn(int i) \n    {\n      return columns.get(i); \n    }\n    public int getColumnCount() \n    {\n      return columns.size(); \n    } \n  }\n\n  @Override\n  public Fragment getFragment(int row, int col) \n  { \n    Row adapterRow = mRows.get(row);\n    return adapterRow.getColumn(col); \n  }\n\n  @Override\n  public Drawable getBackgroundForRow(final int row) \n  {\n    return mContext.getResources().getDrawable(R.drawable.page_background); \n  }\n\n  @Override\n  public int getRowCount() \n  {\n    return mRows.size(); \n  }\n\n  @Override\n  public int getColumnCount(int rowNum) \n  {\n    return mRows.get(rowNum).getColumnCount(); \n  }\n}\n```"]