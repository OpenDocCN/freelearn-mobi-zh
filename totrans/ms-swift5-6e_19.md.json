["```swift\n//Preferred Method\nvar name = \"Jon\" \nprint(name)\n//Non-preferred Method\nvar name = \"Jon\";\nprint(name); \n```", "```swift\n//Preferred Method\nif speed == 300_000_000 { \n    print(\"Speed of light\")\n}\n//Non-Preferred Method\nif (speed == 300_000_000) { \n    print(\"Speed of light\")\n} \n```", "```swift\n//Proper Naming Convention\nBaseballTeam\nLaptopComputer\n//Non-Proper Naming Convention \nbaseballTeam  //Starts with a lowercase letter \nLaptop_Computer  //Uses an underscore \n```", "```swift\n//Proper Naming Convention\ngetCityName\nplaySound\n//Non-Proper Naming Convention\nget_city_name  //All lowercase and has an underscore\nPlaySound  //Begins with an uppercase letter \n```", "```swift\n//Proper Names\nplayerName\ndriveSize\n//Non-Proper Names\nPlayerName  //Starts with uppercase letter\ndrive_size  //Has underscore in name \n```", "```swift\n/**\nThis is a block comment that should be used to explain a class or function\n**/\npublic class EmployeeClass {\n    // This is an inline comment with double slashes\n    var firstName = \"\"\n    var lastName = \"\"\n/**\n    Use Block comments for functions\n        parameter paramName: use this tag for parameters\n        returns: explain what is returned\n        throws: Error thrown\n**/\n    func getFullName() -> String { \n        return firstName + \" \" + lastName\n    }\n} \n```", "```swift\npublic class EmployeeClass { \n    var firstName = \"\"\n    var lastName = \"\"\n    func setName(firstName: String, lastName: String) { \n       self.firstName = firstName\n       self.lastName = lastName\n    }\n} \n```", "```swift\npublic class EmployeeClass { \n    var firstName = \"\"\n    var lastName = \"\"\n    func getFullName() -> String {\n       return self.firstName + \" \" + self.lastName\n    }\n} \n```", "```swift\n//Preferred Method Optional Binding\nif let value = myOptional {\n    // code if myOptional is not nil\n} else {\n    // code if myOptional is nil\n}\n//Non-Preferred Method\nif myOptional != nil {\n    // code if myOptional is not nil\n} else {\n    // code if myOptional is nil\n} \n```", "```swift\n//Preferred Method Optional Binding\nif let value1 = myOptional1, let value2 = myOptional2 {\n// code if myOptional1 and myOptional2 is not nil\n} else {\n// code if myOptional1 and myOptional2 is nil\n}\n//Non-Preferred Method Optional Binding\nif let value1 = myOptional1 {\n    if let value2 = myOptional2 {\n        // code if myOptional is not nil\n    } else {\n        // code if myOptional2 is nil\n    } else {\n    // code if myOptional1 is nil\n} \n```", "```swift\n//Preferred Method\nif let color = jon.pet?.collar?.color { \n    print(\"The color of the collar is \\(color)\")\n} else {\n    print(\"Cannot retrieve color\")\n}\n//Non-Preferred Method\nif let tmpPet = jon.pet, let tmpCollar = tmpPet.collar{ \n    print(\"The color of the collar is \\(tmpCollar.color)\")\n} else {\n    print(\"Cannot retrieve color\")\n} \n```", "```swift\n//Preferred method\nvar myVar = \"String Type\" //Infers a String type\nvar myNum = 2.25 //Infers a Double type\n//Non-Preferred method\nvar myVar: String = \"String Type\"\nvar myNum: Double = 2.25 \n```", "```swift\n//Preferred Method\nvar myDictionary: [String: String] = [:]\nvar strArray: [String] = []\nvar strOptional: String?\n//Non-Preferred Method\nvar myDictionary: Dictionary<String,String>\nvar strArray: Array<String>\nvar strOptional: Optional<String> \n```", "```swift\n//Preferred Method\nlet speed = 300_000_000\nswitch speed {\n   case 300_000_000: \n       print(\"Speed of light\") \n   case 340:\n       print(\"Speed of sound\")\n   default:\n       print(\"Unknown speed\")\n}\n//Non-preferred Method\nlet speed = 300_000_000 if speed == 300_000_000 {\n       print(\"Speed of light\")\n} else if speed == 340 { \n       print(\"Speed of sound\")\n} else {\n       print(\"Unknown speed\")\n} \n```"]