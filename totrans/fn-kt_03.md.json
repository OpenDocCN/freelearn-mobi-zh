["```kt\nclass MutableObject { \n    var mutableProperty:Int = 1 \n} \n```", "```kt\nfun main(args: Array<String>) { \n    var x:String = \"abc\" \n    var y = x.capitalize() \n    println(\"x = $x, y = $y\") \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val x:String = \"Kotlin\" \n    x+=\"Immutable\"//(1) \n} \n```", "```kt\nobject MutableVal { \n    var count = 0 \n    val myString:String = \"Mutable\" \n        get() {//(1) \n            return \"$field ${++count}\"//(2) \n        } \n} \n\nfun main(args: Array<String>) { \n    println(\"Calling 1st time ${MutableVal.myString}\") \n    println(\"Calling 2nd time ${MutableVal.myString}\") \n    println(\"Calling 3rd time ${MutableVal.myString}\")//(3) \n} \n```", "```kt\nclass MutableObj { \n    var value = \"\" \n\n    override fun toString(): String { \n        return \"MutableObj(value='$value')\" \n    } \n} \n\nfun main(args: Array<String>) { \n    val mutableObj:MutableObj = MutableObj()//(1) \n    println(\"MutableObj $mutableObj\") \n    mutableObj.value = \"Changed\"//(2) \n    println(\"MutableObj $mutableObj\") \n\n    val list = mutableListOf(\"a\",\"b\",\"c\",\"d\",\"e\")//(3) \n    println(list) \n    list.add(\"f\")//(4) \n    println(list) \n} \n```", "```kt\nfun main(args: Array<String>) { \n    val immutableList = listOf(1,2,3,4,5,6,7)//(1) \n    println(\"Immutable List $immutableList\") \n    val mutableList:MutableList<Int> = immutableList.toMutableList()//(2) \n    println(\"Mutable List $mutableList\") \n    mutableList.add(8)//(3) \n    println(\"Mutable List after add $mutableList\") \n    println(\"Mutable List after add $immutableList\") \n} \n```", "```kt\nclass MyData { \n    var someData:Int = 0 \n} \n\nfun main(args: Array<String>) { \n    val myData:MyData = MyData() \n\n    async(CommonPool) { \n        for(i in 11..20) { \n            myData.someData+=i \n            println(\"someData from 1st async ${myData.someData}\") \n            delay(500) \n        } \n    } \n\n    async(CommonPool) { \n        for(i in 1..10) { \n            myData.someData++ \n            println(\"someData from 2nd async ${myData.someData}\") \n            delay(300) \n        } \n    } \n\n    runBlocking { delay(10000) } \n} \n```", "```kt\nclass MyDataImmutable { \n    val someData:Int = 0 \n} \n\nfun main(args: Array<String>) { \n    val myData: MyDataImmutable = MyDataImmutable() \n\n    async(CommonPool) { \n        var someDataCopy = myData.someData \n        for (i in 11..20) { \n            someDataCopy += i \n            println(\"someData from 1st async $someDataCopy\") \n            delay(500) \n        } \n    } \n\n    async(CommonPool) { \n        var someDataCopy = myData.someData \n        for (i in 1..10) { \n            someDataCopy++ \n            println(\"someData from 2nd async $someDataCopy\") \n            delay(300) \n        } \n    } \n\n    runBlocking { delay(10000) } \n} \n```", "```kt\nasync(CommonPool) { \n        for(i in 11..20) { \n            myData.someData+=i \n            println(\"someData from 1st async ${myData.someData}\") \n            delay(500) \n        } \n    } \n\n    async(CommonPool) { \n        for(i in 1..10) { \n            myData.someData++ \n            println(\"someData from 2nd async ${myData.someData}\") \n            delay(300) \n        } \n    } \n```"]