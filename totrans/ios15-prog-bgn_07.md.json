["```swift\nfunc functionName(parameter1: ParameterType, ...) -> ReturnType {\n   code\n}\n```", "```swift\nfunctionName(parameter1: argument1, …)\n```", "```swift\nfunc serviceCharge() {\n   let mealCost = 50\n   let serviceCharge = mealCost / 10\n   print(\"Service charge is \\(serviceCharge)\")\n}\nserviceCharge()\n```", "```swift\nfunc serviceCharge(mealCost: Int) -> Int {\n   return mealCost / 10\n}\nlet serviceChargeAmount = serviceCharge(mealCost: 50)\nprint(serviceChargeAmount)\n```", "```swift\nfunc serviceCharge(forMealPrice mealCost: Int) -> Int {\n   return mealCost / 10\n}\nlet serviceChargeAmount = serviceCharge(forMealPrice: 50)\nprint(serviceChargeAmount)\n```", "```swift\nfunc calculateMonthlyPayments(carPrice: Double, downPayment: Double, interestRate: Double, paymentTerm: Double) -> Double {\n   func loanAmount() -> Double {\n      return carPrice - downPayment\n   }\n   func totalInterest() -> Double {\n      return interestRate * paymentTerm\n   }\n   func numberOfMonths() -> Double {\n      return paymentTerm * 12\n   }\n   return ((loanAmount() + ( loanAmount() * \n   totalInterest() / 100 )) / numberOfMonths())\n}\ncalculateMonthlyPayments(carPrice: 50000, downPayment: 5000, interestRate: 3.5, paymentTerm: 7.0)\n```", "```swift\nfunc makePi() -> (() -> Double) {\n   func generatePi() -> Double {\n      return 22.0 / 7.0\n   }\n   return generatePi\n}\nlet pi = makePi()\nprint(pi())\n```", "```swift\nfunc isThereAMatch(listOfNumbers: [Int], condition: (Int) -> Bool) -> Bool {\n   for item in listOfNumbers {\n      if condition(item) {\n         return true\n      }\n   }\n   return false\n}\nfunc oddNumber(number: Int) -> Bool {\n   return (number % 2) > 0\n}\nvar numbersList = [2, 4, 6, 7]\nisThereAMatch(listOfNumbers: numbersList, condition: oddNumber)\n```", "```swift\nfunc buySomething(itemValueEntered itemValueField: String, cardBalance: Int) -> Int {\n   guard let itemValue = Int(itemValueField) else {\n      print(\"error in item value\")\n      return cardBalance\n   }\n   let remainingBalance = cardBalance - itemValue \n   return remainingBalance\n}\nprint(buySomething(itemValueEntered: \"10\", cardBalance: 50))\nprint(buySomething(itemValueEntered: \"blue\", cardBalance: 50))\n```", "```swift\n40\nerror in item value\n50\n```", "```swift\nvar numbersArray = [2, 4, 6, 7]\nlet myClosure = { (number: Int) -> Int in \n   let result = number * number\n   return result\n}\nlet mappedNumbers = numbersArray.map(myClosure)\n```", "```swift\nvar testNumbers = [2, 4, 6, 7]\nlet mappedTestNumbers = testNumbers.map({ (number: Int) \n   -> Int in \n   let result = number * number\n   return result\n})\nprint(mappedTestNumbers)\n```", "```swift\nlet mappedTestNumbers = testNumbers.map({ number in \n  number * number \n})\n```", "```swift\nlet mappedTestNumbers = testNumbers.map { number in \n  number * number \n}\n```", "```swift\nlet mappedTestNumbers = testNumbers.map { $0 * $0 }\n```"]