["```swift\nvar value1 = \"Hello\"\nvar value2 = value1\nvalue1 += \" World!\"\nprint(value1) // \"Hello World!\"\nprint(value2) // \"Hello\"\n```", "```swift\nclass Person {\n    var name: String\n\n    init(name: String) {\n        self.name = name\n    }\n}\nvar reference1 = Person(name: \"Kai\")\nvar reference2 = reference1\nreference1.name = \"Naya\"\nprint(reference1.name) // \"Naya\"\nprint(reference2.name) // \"Naya\"\n```", "```swift\nreference2 = Person(name: \"Kai\")\nprint(reference1.name) // \"Naya\"\nprint(reference2.name) // \"Kai\"\n```", "```swift\nfunc setNameOfPerson(person: Person, var to name: String) {\n    person.name = name\n    name = \"Other Name\"\n}\n```", "```swift\nvar person = Person(name: \"Sarah\")\nvar newName = \"Jamison\"\nsetNameOfPerson(person, to: newName)\n\nprint(person.name) // \"Jamison\"\nprint(newName) // \"Jamison\"\n```", "```swift\nfunc updateString(inout string: String) {\n    string = \"Other String\"\n}\n\nvar someString = \"Some String\"\nupdateString(&someString)\nprint(someString) // \"Other String\"\n```", "```swift\nfunc updatePerson(inout insidePerson: Person) {\n    insidePerson.name = \"New Name\"\n    insidePerson = Person(name: \"New Person\")\n}\n\nvar person2 = person\nupdatePerson(&person)\nprint(person.name) // \"New Person\"\nprint(person2.name) // \"New Name\"\n```", "```swift\nvar nameToPrint = \"Kai\"\nvar printName = {\n    print(nameToPrint)\n}\nprintName() // \"Kai\"\n```", "```swift\nvar outsideName = \"Kai\"\nvar setName = {\n    outsideName = \"New Name\"\n}\nprint(outsideName) // \"Kai\"\nsetName()\nprint(outsideName) // \"New Name\"\n```", "```swift\nvar outsidePerson = Person(name: \"Kai\")\nvar setPersonName = {\n    outsidePerson.name = \"New Name\"\n}\nprint(outsidePerson.name) // \"Kai\"\nsetPersonName()\nprint(outsidePerson.name) // \"New Name\"\n```", "```swift\nnameToPrint = \"Kai\"\nprintName() // Kai\nnameToPrint = \"New Name\"\nprintName() // \"New Name\"\n```", "```swift\nnameToPrint = \"Original Name\"\nvar printNameWithCapture = { [nameToPrint] in\n    print(nameToPrint)\n}\nprintNameWithCapture() // \"Original Name\"\nnameToPrint = \"New Name\"\nprintNameWithCapture() // \"Original Name\"\n```", "```swift\nfunc printSomething() {\n    let something = \"Hello World!\"\n    print(something)\n}\n```", "```swift\nclass SteeringWheel {}\n\nclass Car {\n    var steeringWheel: SteeringWheel\n\n    init(steeringWheel: SteeringWheel) {\n        self.steeringWheel = steeringWheel\n    }\n}\n```", "```swift\nlet wheel = SteeringWheel()\nlet car = Car(steeringWheel: wheel)\n```", "```swift\nclass SteeringWheel {\n    weak var car: Car?\n}\n```", "```swift\nclass Car {\n    var steeringWheel: SteeringWheel\n\n    init(steeringWheel: SteeringWheel) {\n        self.steeringWheel = steeringWheel\n        self.steeringWheel.car = self\n    }\n}\n```", "```swift\nclass SteeringWheel {\n    var car: Car?\n}\n\nclass Car {\n    var steeringWheel: SteeringWheel\n\n    init(steeringWheel: SteeringWheel) {\n        self.steeringWheel = steeringWheel\n        self.steeringWheel.car = self\n    }\n}\n```", "```swift\nclass Manufacturer {\n    var cars: [Car] = []\n}\n\nclass SteeringWheel {\n    var manufacturer: Manufacturer?\n}\n\nclass Car {\n    var steeringWheel: SteeringWheel?\n}\n```", "```swift\nclass SteeringWheel {\n    weak var car: Car?\n}\n\nclass Car {\n    var steeringWheel: SteeringWheel\n\n    init(steeringWheel: SteeringWheel) {\n        self.steeringWheel = steeringWheel\n        self.steeringWheel.car = self\n    }\n}\n```", "```swift\nclass SteeringWheel2 {\n    unowned var car: Car\n\n    init(car: Car) {\n        self.car = car\n    }\n}\n\nclass Car {\n    var steeringWheel: SteeringWheel2!\n\n    init() {\n        self.steeringWheel = SteeringWheel2(car: self)\n    }\n}\n```", "```swift\nclass Ball {\n    var location: (x: Double, y: Double) = (0,0)\n\n    var onBounce: (() -> ())?\n}\n```", "```swift\nlet ball = Ball()\nball.onBounce = {\n    print(\"\\(ball.location.x), \\(ball.location.y)\")\n}\n```", "```swift\nball.onBounce = { [weak ball] in\n    print(\"\\(ball?.location.x), \\(ball?.location.y)\")\n}\n```", "```swift\nball.onBounce = { [unowned ball] in\n    print(\"\\(ball.location.x), \\(ball.location.y)\")\n}\n```", "```swift\nclass SteeringWheel {\n    weak var car: Car?\n}\nclass Car {\n    weak var steeringWheel: SteeringWheel!\n\n    init(steeringWheel: SteeringWheel) {\n        self.steeringWheel = steeringWheel\n        steeringWheel.car = self\n    }\n}\n\nlet wheel = SteeringWheel()\nlet car = Car(steeringWheel: wheel)\n```", "```swift\nclass Ball2 {\n    weak var onBounce: (() -> ())? // Error: 'weak' cannot be\n    // applied to non-class type '() -> ()'\n}\n```"]