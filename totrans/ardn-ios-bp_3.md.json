["```swift\ntypedef struct  {\n  char                name[21];\n  unsigned long       startTime;      // seconds since midnight 1/1/1970\n  uint16_t       length;         // minutes\n  uint16_t       period;         // minutes\n} activation;\n```", "```swift\nvoid loop() {\n\n  WiFiClient client;\n\n  client = server.available();\n\n  if (client) {\n    Serial.println(F(\"iOS Device connected\"));\n\n    // Waits for client disconnection\n    while (client.connected()) {\n\n      // Waits for data and process them\n\n      while (client.available()) {\n\n      }\n\n    }\n\n    Serial.println(F(\"iOS Device disconnected\"));\n  }\n\n  //Serial.println(millis() / 1000 - lastActivation);\n  if (millis() / 1000 - lastActivation >= ACTIVATION_CHECK_INTERVAL && !manualMode) {\n\n    lastActivation = millis() / 1000;\n    checkActivations();\n  }\n\n  delay(50);\n}\n```", "```swift\nif (millis() / 1000 - lastActivation >= ACTIVATION_CHECK_INTERVAL && !manualMode) {\n\n    lastActivation = millis() / 1000;\n    checkActivations();\n  }\n```", "```swift\nactivations[i].startTime += 60 * activations[i].period;\n```", "```swift\n  // Time synchronization\n  if (millis() / 1000 > TIME_SYNC_INTERVAL && !updatingTime) {\n\n    updatingTime = true;\n    askTime();\n  }\n```", "```swift\n    @interface Activation : NSObject\n\n    @property (nonatomic,strong) NSString   *name;\n    @property (nonatomic,strong) NSDate     *start;\n    @property                    NSInteger  length;   // minutes\n    @property                    NSInteger  period;   // minutes\n\n    @end\n    ```", "```swift\n@interface WiFiConnectionViewController ()\n\n@property (strong, nonatomic) IBOutlet UITextField *ipField;\n@property (strong, nonatomic) IBOutlet UITextField *portField;\n\n@end\n\nand:\n\n- (IBAction)updateConnectionInformation:(UIButton *)sender {\n\n}\n```", "```swift\n@interface PowerPlugViewController ()\n\n@property (strong, nonatomic) IBOutlet UIImageView  *applianceStatus;\n@property (strong, nonatomic) IBOutlet UIView       *connectionStatus;\n@property (strong, nonatomic) IBOutlet UISwitch     *manualOperationButton;\n\n@end\n```", "```swift\n@interface ActivationTableViewCell : UITableViewCell\n\n@property (strong, nonatomic) IBOutlet UILabel *name;\n@property (strong, nonatomic) IBOutlet UILabel *start;\n@property (strong, nonatomic) IBOutlet UILabel *end;\n@property (strong, nonatomic) IBOutlet UILabel *period;\n\n@end\n```", "```swift\n@property (nonatomic,weak) Activation *activation;\n\n@property (strong, nonatomic) IBOutlet UITextField          *nameField;\n@property (strong, nonatomic) IBOutlet UIDatePicker         *date;\n@property (strong, nonatomic) IBOutlet UITextField          *length;\n@property (strong, nonatomic) IBOutlet UISegmentedControl   *lengthScale;\n@property (strong, nonatomic) IBOutlet UITextField          *period;\n@property (strong, nonatomic) IBOutlet UISegmentedControl   *periodScale;\n\n@end\n```", "```swift\n- (IBAction)updateConnectionInformation:(UIButton *)sender {\n\n    if (![self validateIpAddress:_ipField.text]) {\n\n        …\n\n        return;\n    }\n\n    if ([_portField.text integerValue]<0 || [_portField.text integerValue]>65535) {\n\n        …\n\n        return;\n    }\n\n    NSMutableDictionary *connectionInformation = [[NSMutableDictionary alloc] init];\n\n    [connectionInformation setValue:_ipField.text forKey:@\"IP\"];\n    [connectionInformation setValue:_portField.text forKey:@\"PORT\"];\n\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *path = [documentsDirectory stringByAppendingPathComponent:@\"connection.plist\"];\n\n    [connectionInformation writeToFile:path atomically:YES];\n}\n```", "```swift\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n\n    [textField resignFirstResponder];\n}\n\n- (BOOL)textFieldShouldReturn:(UITextField *)textField {\n\n    [textField resignFirstResponder];\n\n    return YES;\n}\n```", "```swift\nself.view.transform = CGAffineTransformMakeTranslation(0, -100);\n```", "```swift\n- (void)textFieldDidBeginEditing:(UITextField *)textField {\n\n    if ([textField isEqual:_period]) {\n\n        self.view.transform = CGAffineTransformMakeTranslation(0, -100);\n    }\n\n}\n\n- (void)textFieldDidEndEditing:(UITextField *)textField {\n\n    if ([textField isEqual:_period]) {\n\n        self.view.transform = CGAffineTransformMakeTranslation(0, 0);\n    }\n}\n```", "```swift\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *path = [documentsDirectory stringByAppendingPathComponent:@\"connection.plist\"];\n\n    NSDictionary *connectionInformation = [NSDictionary dictionaryWithContentsOfFile:path];\n\n    if (connectionInformation != nil) {\n        _ipField.text = [connectionInformation objectForKey:@\"IP\"];\n        _portField.text = [connectionInformation objectForKey:@\"PORT\"];\n    }\n\n}\n```", "```swift\n@interface AppDelegate ()\n\n@property (strong, nonatomic) GCDAsyncSocket                    *socket;\n@property (strong, nonatomic) NSMutableArray                    *activations;\n\n@property (strong, nonatomic) PowerPlugViewController           *powerPlugViewController;\n@property (strong, nonatomic) ActivationsTableViewController    *activationsViewController;\n\n@end\n```", "```swift\n-(void)connect {\n\n    NSError *err = nil;\n\n    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    NSString *documentsDirectory = [paths objectAtIndex:0];\n    NSString *path = [documentsDirectory stringByAppendingPathComponent:@\"connection.plist\"];\n\n    NSDictionary *connectionInformation = [NSDictionary dictionaryWithContentsOfFile:path];\n\n    if (![_socket connectToHost:[connectionInformation objectForKey:@\"IP\"]\n                         onPort:[[connectionInformation objectForKey:@\"PORT\"] integerValue]\n                          error:&err]) {\n        NSLog(@\"Connection Failed %@\", [err localizedDescription]);\n\n        return;\n    }\n\n    [_socket readDataWithTimeout:5 tag:0];\n}\n```", "```swift\n- (void)socket:(GCDAsyncSocket *)sender didConnectToHost:(NSString *)host port:(UInt16)port {\n\n    [_powerPlugViewController arduinoConnected];\n}\n```", "```swift\n- (void)socketDidDisconnect:(GCDAsyncSocket *)sock withError:(NSError *)error {\n\n    [_powerPlugViewController arduinoDisconnected];\n    _activations = nil;\n}\n```", "```swift\n- (void)socket:(GCDAsyncSocket *)sender didReadData:(NSData *)data withTag:(long)tag {\n\n    NSLog(@\"Bytes received %lu\",(unsigned long)[data length]);\n\n    if ([data length]<3) {\n        return;\n    }\n\n    NSString* answerType = [[NSString alloc] initWithData:[data subdataWithRange:NSMakeRange(0, 1)]\n                                             encoding:NSASCIIStringEncoding];\n\n    // S<manual><appliance status>\n    // A<activations>\n\n    if ([answerType isEqualToString:@\"S\"]) {\n\n        BOOL manual;\n        BOOL status;\n\n        [[data subdataWithRange:NSMakeRange(1, 1)] getBytes: &manual length: 1];\n        [[data subdataWithRange:NSMakeRange(2, 1)] getBytes: &status length: 1];\n\n        [_powerPlugViewController updateStatus:manual applianceStatus:status];\n    }\n\n    if ([answerType isEqualToString:@\"A\"]) {\n\n        if (data.length < (ACTIVATION_SIZE_ON_ARDUINO * NUMBER_OF_ACTIVATIONS + 1)) {\n\n            NSLog(@\"Error reading data\");\n\n            return;\n        }\n\n        for (int i=0; i<NUMBER_OF_ACTIVATIONS; i++) {\n\n            NSData *nameData = [data subdataWithRange:NSMakeRange(1+ACTIVATION_SIZE_ON_ARDUINO*i, 21)];\n            NSString *name = [NSString stringWithCString:nameData.bytes encoding:NSASCIIStringEncoding];\n\n            if (name.length>0) {\n\n                NSData *startData = [data subdataWithRange:NSMakeRange(1+ACTIVATION_SIZE_ON_ARDUINO*i+21, 4)];\n\n                NSInteger start=0;\n                [startData getBytes: &start length: 4];\n\n                NSData *lengthData = [data subdataWithRange:NSMakeRange(1+ACTIVATION_SIZE_ON_ARDUINO*i+21+4, 2)];\n\n                NSInteger length=0;\n                [lengthData getBytes: &length length: 2];\n\n                NSData *periodData = [data subdataWithRange:NSMakeRange(1+ACTIVATION_SIZE_ON_ARDUINO*i+21+4+2, 2)];\n\n                NSInteger period=0;\n                [periodData getBytes: &period length: 2];\n\n                Activation *activation = [[Activation alloc] init];\n                activation.name = name;\n                activation.start = [NSDate dateWithTimeIntervalSince1970:start];\n                activation.length = length;\n                activation.period = period;\n\n                [_activations addObject:activation];\n            }\n        }\n\n        [_activationsViewController dataReceived];\n    }\n\n    [sender readDataWithTimeout:5 tag:0];\n}\n```", "```swift\n [_powerPlugViewController updateStatus:manual applianceStatus:status];\n```", "```swift\n[_activations addObject:activation];\n```", "```swift\n[_activationsViewController dataReceived];\n```", "```swift\n-(NSMutableArray *)getActivations {\n\n    if (_activations == nil) {\n\n        _activations = [[NSMutableArray alloc] init];\n\n        NSString *message = @\"A\";\n        [_socket writeData:[message dataUsingEncoding:NSASCIIStringEncoding] withTimeout:-1 tag:0];\n\n        [_activationsViewController dataRequested];\n\n        return _activations;\n    }\n\n    return _activations;\n}\n```", "```swift\n[_socket writeData:[message dataUsingEncoding:NSASCIIStringEncoding] withTimeout:-1 tag:0];\n```", "```swift\n@protocol PowerPlugViewControllerDelegate <NSObject>\n\n-(void)sendSwitchCommand:(BOOL)on;\n-(void)reconnect;\n\n@end\n\n@interface PowerPlugViewController : UIViewController \n\n-(void)arduinoConnected;\n-(void)arduinoDisconnected;\n-(void)updateStatus:(BOOL)manual applianceStatus:(BOOL)applianceStatus;\n\n@property (strong, nonatomic) id<PowerPlugViewControllerDelegate> delegate;\n\n@end\n```", "```swift\n-(void)updateStatus:(BOOL)manual applianceStatus:(BOOL)applianceStatus {\n\n    _manualOperationButton.on = manual;\n\n    if (applianceStatus)\n        _applianceStatus.image = [UIImage imageNamed:@\"LEDon.png\"];\n    else\n        _applianceStatus.image = [UIImage imageNamed:@\"LEDoff.png\"];\n}\n```", "```swift\n@protocol ActivationsTableViewControllerDelegate <NSObject>\n\n-(NSMutableArray *)getActivations;\n-(void)updateActivationOfIndex:(uint8_t)index;\n-(void)deleteActivationOfIndex:(uint8_t)index;\n\n@end\n\n@interface ActivationsTableViewController : UITableViewController <ActivationViewControllerDelegate>\n\n@property (strong, nonatomic) id<ActivationsTableViewControllerDelegate> delegate;\n\n-(void)dataRequested;\n-(void)dataReceived;\n\n@end\n```", "```swift\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n\n    return [_delegate getActivations].count;\n}\n```", "```swift\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\n\n    ActivationTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"activationCell\"];\n    if (cell == nil) {\n        cell = [[ActivationTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"activationCell\"];\n    }\n\n    Activation *activation = [_delegate getActivations][indexPath.row];\n\n    cell.name.text = activation.name;\n\n    NSDateFormatter *dateFormatter =  [[NSDateFormatter alloc] init];\n    [dateFormatter setDateStyle:NSDateFormatterShortStyle];\n    [dateFormatter setTimeStyle:NSDateFormatterMediumStyle];\n\n    NSDate *endDate = [activation.start dateByAddingTimeInterval:60*activation.length];\n    cell.start.text = [dateFormatter stringFromDate:activation.start];\n    cell.end.text = [dateFormatter stringFromDate:endDate];\n\n    ….\n\n    return cell;\n}\n```", "```swift\ncell = [[ActivationTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@\"activationCell\"];\n```", "```swift\n- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {\n\n    if (editingStyle == UITableViewCellEditingStyleDelete) {\n\n        [[_delegate getActivations] removeObjectAtIndex:indexPath.row];\n\n        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];\n\n        [_delegate deleteActivationOfIndex:indexPath.row];\n    }\n}\n```", "```swift\n- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {\n\n    ActivationViewController *activationViewController = (ActivationViewController *)[segue destinationViewController];\n    activationViewController.delegate = self;\n\n    NSIndexPath *p = [self.tableView indexPathForSelectedRow];\n\n    NSMutableArray *activations = [_delegate getActivations];\n    if (activations==nil)\n        return;\n\n    _selectedActivationIndex = p.row;\n\n    [self.tableView deselectRowAtIndexPath:p animated:NO];\n}\n```", "```swift\nif ([segue.identifier isEqualToString:\"<identifier>\"]) {\n….\n}\n```", "```swift\n-(Activation *)getActivation {\n\n    return [_delegate getActivations][_selectedActivationIndex];\n}\n```", "```swift\n-(void)update {\n\n    [self.delegate updateActivationOfIndex:_selectedActivationIndex];\n    [self.tableView reloadData];\n}\n```"]