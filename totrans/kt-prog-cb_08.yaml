- en: Anko Commons and Extension Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Anko with Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Android framework using extension function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using extensions as properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using intents with Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a call intent using Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending a text intent using Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsing the web browser using Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing some text using intents in Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an email using Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Android dialogs with Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing an alert dialog with a list of text items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Anko in Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging using Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dimensions with Anko
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version checking in Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Anko** is a Kotlin library that was developed to make the Android development
    experience better. Kotlin itself makes Android development easier, and Anko is
    a cherry on top of it. With helpers for almost all common Android functionalities,
    Anko drastically reduces the amount of code you write and makes Android development
    fun.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko consists of several parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Anko Commons**: It consists of helper methods for intents, dialogs, logging,
    and so on, which reduces the amount of code significantly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anko Layouts**: With this library, you don''t have to stick to conventional
    XML to create visual interfaces. Anko layout is a fast and type-safe way to write
    dynamic Android layouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anko SQLite**: This is a query DSL and parser collection for Android SQLite,
    which makes working with underlying SQLite database substantially easy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anko Coroutines**: Coroutines are a great way to do asynchronous programming.
    Anko coroutines provide utilities based on the `kotlinx.coroutines` ( [https://github.com/Kotlin/kotlinx.coroutines](https://github.com/Kotlin/kotlinx.coroutines)) library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use Anko for Android development. So let's
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Anko with Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin by setting up the Anko library in our project. We will be using
    Gradle to handle the dependencies of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio to write code. You can also find the source code
    in the 1-setting-up-anko-with-gradle branch of repository at [https://gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to add Anko to your project using the Gradle build system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to set up Anko with Gradle is do it by adding the following
    lines in your `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can replace `$anko_version` with the latest version of Anko, which is 0.10.1
    when this book was written.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding compile statement will add all available features (including
    Commons, Layouts, SQLite) into your project at once. If you don''t want that,
    and would prefer adding them separately as needed, here are the compile statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`anko-commons`: This library contains a lot of helpers for Android SDK for
    Intents, Dialogs and Toasts, Logging, and Resource and Dimension:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Anko Layouts**:Anko Layouts is a DSL for writing dynamic Android layouts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`anko-sqlite`: This provides helpers for working with SQLite database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`anko-coroutines`: This library makes it easier to work with Kotlin coroutines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Extending Android framework using extension function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The heading of this recipe might seem very confusing to you as you might be
    thinking "How can I extend the super complex Android framework? And moreover,
    why should I?" We will be dealing with all the "what, why, and hows" of extension
    functions in this recipe. Extension functions are one of the greatest features
    of Kotlin. So let's dive into it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio for coding. We will be creating extension functions
    for Android SDK classes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin with, let''s see a very simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a very simple class `Student`, and we will create an extension
    function for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, we would want to create an `isAgeGreaterThan20` function, which will return
    `true` if the age is greater than 20, or else, will return `false`. Now suppose
    there's a restriction that we can't touch the Student class, what will you do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In those scenarios, extension functions come in handy when you want to extend
    the functionality of a class. If you try to call the method, you will be shown
    an error, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2ec5eac-255f-455e-9895-c1f060e66664.png)'
  prefs: []
  type: TYPE_IMG
- en: You then need to select the `Create extension function ....` option to create
    an extension function for it. When you select that option, you'll again be given
    two options, asking which object you want to create the extension function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ae7f8e6-9f9c-44ff-b110-5084ebe6e17a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we want to create the function for the `Student` class, we will select
    the Student option from the dropdown. On selecting that, the IDE will autogenerate
    the method body. I''ve modified the return type to return a boolean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can do the operation inside the method block. Here''s how our method
    looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that since we are calling the method on a student object, we can access
    it using the `this` keyword, though you can skip the `this` keyword in this case,
    as we aren't dealing with other objects of the same type in this method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can call it just like you would call a normal method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see an example related to Android. If you''ve used any third-party
    library like `Picasso` or `Glide`, you might remember setting images in `ImageView`
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create an extension function for `ImageView` named `loadImage` and
    then call that function in your application. Of course, `loadImage` is not a function
    provided by the `ImageView` class, so you need to create an extension function
    for this purpose. We will call the method on the `imageView` object and pass a `url`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the `loadImage` function, we are referring `this` to the `ImageView`
    object on which the function was called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Extension functions** are resolved statically, which means they are normal
    static methods and have no connection to the class they are extending (that''s
    why we are able to extend classes to which we don''t have access to modify), other
    than taking an instance of this class as a parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you decompile the Kotlin bytecode, you will see the code converted to Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is just a static method and takes the class as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since extension functions come in handy, you might be tempted to use them a
    lot. However, with great power comes great responsibility. Since they are resolved
    statically, you shouldn't be using them everywhere, because static functions are
    difficult to test. Using it irresponsibly means your code will be less testable
    and hence less maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Using extensions as properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we learned about extension functions. In this recipe, we
    will learn about extension properties. If you feel the need for one or more properties
    from the class, you can add them using the extension properties. In this recipe,
    we will learn how to use extension properties.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'll be using Android Studio for coding purposes. Ensure that you have the latest
    version of Android Studio with Kotlin configured.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see an example of an extension property now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using the example of shared preferences. You might be used to doing
    something like this to get hold of shared preferences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create an extension property on the `Context` class with name preferences
    and access it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The extension functions didn't modify the class, and the same goes with extension
    properties; they don't add properties to the class itself and hence we don't have
    any backing field in their case. Also, since we don't have any backing field,
    we can't initialize it. The only way too deal with them is using custom getter
    and setter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to extension properties, we can have companion object extensions, which
    means we can add methods to the companion object of a class that helps us access
    it in a static way. Let''s look at an example. Suppose we have a `Student` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now add an extension method to the companion object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can access it on the class without creating an instance of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using intents with Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Intents** are one of the most common components used in Android apps. They
    can be thought of as a messenger used to transfer messages between different Android
    components. For example, you send an intent when you need to start an activity,
    you send an intent when you need to start a service. To launch an activity in
    Android, you are first needed to create an intent and then pass it to the `startActivity`
    method. In the following example, we will try to launch an activity with some
    data and flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Also, you can assume an extra line for all data that you pass with the intent.
  prefs: []
  type: TYPE_NORMAL
- en: Anko has a better way to achieve similar results. In this recipe, we will learn
    how to achieve this (launching intents) using Anko library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purpose. You need to include Anko
    library in your `build.gradle` file at app level. Just add these lines and you
    are good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating an intent in Anko is very simple. Let''s check the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The functionality for which we wrote the preceding code can be achieved in
    just a few lines with Anko:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t want to add the flag, it is much simpler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding extra data doesn''t require extra lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see the implementation of the preceding methods in the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `intentFor` method takes `vararg` as a parameter, hence we are able to
    supply multiple data to it. This method calls `createIntent`, which actually creates
    an intent with supplied data, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, internally it creates the intent in the old fashion and calls
    `fillIntentArguments`, which fills the intent with the data.
  prefs: []
  type: TYPE_NORMAL
- en: Making a call intent using Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we learned how to create an intent using Anko library. In
    subsequent recipes, we will see how to do common things like sending messages,
    calls, mails, and so on using intents in Anko.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purposes. You need to include Anko
    library in your `build.gradle` file. Just add the following lines to your `build.gradle`
    file and you are good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can also clone the [gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples)
    repository and switch to the 3-intent-actions branch to get the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow the given steps to make a call using intents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko provides wrappers around the most common actions that can be done using
    intents; one of them is making calls. For this purpose, Anko provides the `makeCall`
    function, which takes in the phone number you want to call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `makeCall` function returns true if the action was successful, or returns
    false if it wasn''t. One thing to note is that you need to add the `CALL_PHONE`
    permission in your manifest file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see the source code of `makeCall function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Beneath the wrapper, it's doing the same old way Android SDK used to do, that
    is, using an implicit intent of action `Intent.ACTION_CALL`.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a text intent using Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anko provides a wrapper around the intent actions, which makes calling actions
    super easy. One of those actions is sending an SMS. In this recipe, we will see
    how to launch an intent that sends messages to a telephone number.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purposes. You need to include Anko
    library in your `build.gradle` file. Just add the given lines and you are good
    to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can also clone the [gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples)
    repository and switch to the 3-intent-actions branch to get the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to send an SMS using intents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko provides the `sendSMS` method, which takes in two parameters—one of them
    is the phone number, and the other is the message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method will launch the messaging app, or will ask you which messaging
    app to launch if you have more than one type of that app and will prefill the
    message body. Calling this function requires you to add the following permission,
    without which it will throw a Security Exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand how its working, let''s dive into its implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it uses an implicit intent to launch the messaging app on your
    device. Since this function requires a context, if you are calling it from a fragment,
    you need to call it as `activity.sendSMS(..)`.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the web browser using Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will talk about the Anko wrapper that will help us browse
    the website using a web browser. So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purpose. You need to include Anko
    library in your `build.gradle` file. Just add this line of code and you are good
    to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can also clone the [gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples)
    repository and switch to the `3-intent-actions` branch to get the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's see how to launch a browser using an intent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko provides a `browse` function, which takes in the web address and launches
    the browser on your device. If you have multiple browsers, it will show you some
    options to select it. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The web address you put in the parameter needs to have `http://` or `https://`
    as the prefix, otherwise it will throw an `ActivityNotFound` exception.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `browse` function provided by Anko is just a syntactic sugar, beneath which
    we have the same old code that we used previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Calling this method returns true or false, based on whether the action was successful
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing some text using intents in Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to share text using Anko wrapper. Sharing
    text is a very common thing and Anko provides a wrapper for this action that is
    very easy to use. So let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purposes. You need to include Anko
    library in your `build.gradle` file. Just add the given lines and you are good
    to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You can also clone the repository at [gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples)
    and switch to the `3-intent-actions` branch to get the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following steps, we will see how to share text using an intent:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko provides a `share` method, which takes in a string parameter, that is,
    the text to share and an optional parameter subject. The subject parameter can
    be particularly useful to share text via an email app. After all, who sends a
    subject for a whatsapp message, right? Let''s see its implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Without the subject—this won''t fill in the subject line in the mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: It's that simple!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you look at the implementation, you will find that Anko has provided just
    a syntactic sugar that greatly reduces your lines of code to achieve a similar
    thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the library has taken care of all the issues that might crop
    up and just provided a helper function to make things faster and more fun.
  prefs: []
  type: TYPE_NORMAL
- en: Sending an email using Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to send an email using Anko's wrapper. Sending
    an email is very useful as almost all apps provide a method of contact. So let's
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio for coding purposes. You need to include Anko
    library in your `build.gradle` file. Just add these lines and you are good to
    go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can also clone the repository at [gitlab.com/aanandshekharroy/Anko-examples](https://gitlab.com/aanandshekharroy/Anko-examples)
    and switch to the `3-intent-actions` branch to get the source code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the `email` function provided by Anko library that takes three
    parameters, out of which only one is mandatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can remove the subject and text if you don't want prefilled text in the
    email.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at its implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it checks for the extra data, such as the subject and message
    body, and then launches the email application. The email function provided by
    Anko is just a convenient method that reduces your line of code and makes your
    code look good.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Android dialogs with Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the really great features of Anko library is that it can help you create
    alert dialog quite easily and with much less code.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to create alert dialogs in Anko.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio to write code. You also need to include the Anko
    library by adding the following lines to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You can find the source code in the 2-creating-dialogs-using-anko branch of
    the [https://gitlab.com/aanandshekharroy/Anko-examples/](https://gitlab.com/aanandshekharroy/Anko-examples/) repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s follow the mentioned steps to create a dialog in Kotlin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first example, we will try to create a simple alert box. To create it,
    you just need to follow this syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to run it, you will see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/566c798e-ee90-4723-888b-5b0d941edf00.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are certain situations where you want the user to perform some actions,
    and so Anko provides you the methods for it. Check out the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This inflates the alert dialog, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54361399-b69a-4644-badb-2045d793508a.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also customize the text of `yesButton` and `noButton` by replacing
    them with `positiveButton` and `negativeButton`. Here''s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the preceding code, you will see a dialog appearing on your device,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3464484-7132-4981-913e-81b073cbd23c.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another common type of dialog used in Android development is a progress dialog.
    You can use Anko to create a progress dialog like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/480762d5-81a6-4cb1-bd6e-66db83fd8304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This kind of progress dialogs is good for showing the user how much progress
    is made. It also provides functions such as `incrementProgressBy`, by which you
    can increase the progress bar. To create such a progress dialog, you need to use
    it like this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Perhaps you would like to have an indefinite progress bar, which looks like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea0ce6a8-8a54-4079-9223-361c32a6a2f1.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create an indeterminate progress dialog as in the preceding screenshot,
    simply add the following lines to your previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Showing an alert dialog with a list of text items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe, we saw how to create different types of dialogs. In
    this recipe, we will see how to create an alert dialog with a list of text items,
    which looks as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/390e623f-5f95-421b-9087-e9ba66b8efc1.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio to write code. You also need to include the Anko
    library by adding these lines to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through the given steps to create an alert dialog with a list of items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anko provides selectors for creating a dialog with a list of items. Selectors
    are very easy to use. You just need to provide the title of alert dialog, the
    list, and the lambda that will be executed when an option is selected. Here''s
    an implementation of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: That's all folks! It's really simple and concise. So, in the preceding example,
    if you click on the list item, you will see a toast with a message that says "So
    you work at Google, right?"
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Anko hides all the complexity and gives you an easy-to-use function to achieve
    complex things. Let''s check out the implementation of the selector function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, beneath the surface, it's just like the old way, but Anko provides
    syntactic sugar, which helps us achieve the same thing with less code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Anko in Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anko makes handling views and creating layouts extremely fast and easy. Using
    Anko, we can write clean code that is easy to read and write. In this recipe,
    we will learn how Anko can be used when dealing with views in Android.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+ as we won''t
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko dependencies to your project
    by adding the following lines to your app level `build.gradle` file and syncing
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, `$anko_version` is the latest version of Anko out there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Anko makes some common Android development stuff extremely easy, such as toasts,
    snackbars, and dialogs. Usually, showing these views takes a lot of code. Let''s
    see how it is just a matter of a few lines of easy code with Anko:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert dialog**: A popup that appears on top of your view, commonly used for
    alerts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show an alert, we use the following syntax (DSL syntax):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider that we use a dialog from the `Appcompat` dialog factory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also show progress dialogs and indeterminate progress dialogs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '**Toasts**: They can be used to display information for a short period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show a toast, we can make use of one of the following syntaxes based on
    the need of the situation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '**Snackbar**: Snackbars are just like Toast messages, except that they provide
    action to interact with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different ways to show snackbars, based on whether you use string
    or string resource and what is the duration of timeout of the snackbar and whether
    you need an action button or not. For showing snackbars, you need a reference
    to the parent view in which you wish to show a snackbar. In the case of XML, you
    can find a method by Anko to get the view from its ID or in the case of DSL, you
    can directly use the variable in which you have stored the parent view. Here are
    some syntaxes that we can use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Anko makes it easier to define layouts and handle already created layouts (in
    XML).
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a layout in DSL**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a layout in DSL is very simple, and we can put it directly in the `onCreate()`
    method of activity, as in the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can put it in an external class that implements the `AnkoComponent`
    interface:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, this is how our layout looks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0787be2d-8bd0-4073-9d6a-eaa3aceb09ea.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Handling views of an already existing XML layout**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have the following XML layout from one of our old projects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use Anko to access the views from this XML layout and also get/set properties
    of these views. Check out this code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our layout looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e61718f6-10e1-46df-8c7a-0a85481acb8a.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Logging using Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is a great way to debug your application. You might have used `android.util.Log`,
    which wasn’t a very convenient way to log messages as it required you to provide
    the `Log` tag with every message and also required you to define the tag, which
    was usually the class name every time. Anko provides the anko-logger, which comes
    with anko-commons. It is a very convenient way of logging messages as it doesn’t
    require you to necessarily override the log tag. In this recipe, we will learn
    how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio to write the code. You need to add `anko-commons`
    to your `build.gradle` file. Anko logger comes within the `anko-commons` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the given steps to learn how to use logging with the help of Anko library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Logging in to Anko is very simple. You just need to implement `AnkoLogger`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can log messages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the various levels of logging and their comparison with `android.Log.util`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **android.util.Log** | **AnkoLogger** |'
  prefs: []
  type: TYPE_TB
- en: '| `v()` | `verbose()` |'
  prefs: []
  type: TYPE_TB
- en: '| `d()` | `debug()` |'
  prefs: []
  type: TYPE_TB
- en: '| `i()` | `info()` |'
  prefs: []
  type: TYPE_TB
- en: '| `w()` | `warn()` |'
  prefs: []
  type: TYPE_TB
- en: '| `e()` | `error()` |'
  prefs: []
  type: TYPE_TB
- en: '| `wtf()` | `wtf()` |'
  prefs: []
  type: TYPE_TB
- en: 'The default tag name is a class name. If you want to override the `log` tag,
    you need to override the `loggertag` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use logger as a plain object. The following is an example from
    the documentation that uses logger as a plain object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Each method has two versions: plain and lazy (inlined):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: The lazy version is executed if `Log.isLoggable(tag, Log.INFO)` is true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handling dimensions with Anko
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In XML, we use `dp` or `dip` as **density independent pixels** for layouts and
    views and `sp` as scale independent pixels for text. `dp` is a virtual pixel used
    to define layout sizes in a density-independent way; `sp` is like `dp`, but it's
    also scaled according to the user's font preference. In this recipe, we will understand
    how we can define dimensions of views and text in `dp` and `sp` in DSL layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio 3 to write code. You can get started by creating
    a new project in Kotlin with a blank activity in Android Studio 3+ as we won''t
    be using any code from other recipes. You also need an intermediate understanding
    of Android development. Ensure that you have added Anko dependencies to your project
    by adding the following lines to your app-level `build.gradle` file and syncing
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Here, `$anko_version` is the latest version of Anko out there.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the given steps, we will learn how to work with dimensions using Anko library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a layout with a button of 120 `dip` width and `wrapContent` height
    and a text view with 24 `sp` text size. I suggest you to do this on your own,
    using this syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is one way you can create the layout using the `dip()` and `sp()`
    methods. `sp` is usually used for text, but to demonstrate, I have used it for
    a view height in the next example. Anko takes the value of the `textSize` property
    in `sp` by default, while you have to provide float:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how our layout looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12671ffd-fe19-4557-8d32-97d95cc2bcf6.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Anko also provides additional methods for our convenience, which are `px2dip(pixels)`
    and `px2sp(pixels)`, to convert pixels to `dip` and `sp` respectively. I remember
    coding them by hand before Anko existed, so they are handy a lot of times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Version checking on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android versions are shipped out very frequently. With every latest version
    of Android, you get new features and new improvements. Though Google tries very
    hard to provide backward compatibility, they aren''t able to do so always. For
    example, there is no backward compatibility for Material design components; you
    need to be targeting API levels greater than 21 in order to use them. This requires
    the developer to check beforehand whether the component is supported on that API
    level or not to ensure that your app runs smoothly on all levels. We usually do
    that as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Anko provides helper functions that help us achieve similar things but with
    easier syntax. In this recipe, we will see how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll be using Android Studio to write code. You also need to include the Anko
    library by adding these lines to your `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s very easy to add version checks in Anko, and Anko provides two main functions
    for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`doIfSdk `: This takes in the version code as a parameter, and also a function.
    If the API level of device is equal to the version code supplied, the function
    is executed. Here''s an example of this function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '`doFromSdk `: This also takes in the version code as a parameter, along with
    the function, and executes that function if the device SDK level is greater than
    or equal to the supplied version code. The following is an example of the same:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see the implementation of the preceding two helper methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `doIfSdk`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'For `doFromSdk`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it's just old Android SDK code behind the hood. The `doFromSdk`
    and `doIfSdk` are just the syntactic sugars on top of it.
  prefs: []
  type: TYPE_NORMAL
