["```swift\n    //  ViewController.h\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    #import  <UIKit/UIKit.h>\n    #import <MapKit/MapKit.h>\n\n    ```", "```swift\n//  ViewController.h\n//  CoreLocation\n//  Created by Steven F Daniel on 23/10/12.\n//  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n#import <UIKit/UIKit.h>\n#import <MapKit/MapKit.h>\n\n@interface ViewController : UIViewController \n{\n  IBOutlet UIBarButtonItem *changeMap;\n}\n\n@property (strong, nonatomic) IBOutlet MKMapView *mapView;\n\n// Declare our class instance methods\n-(IBAction)changeMapType:(id)sender;\n\n@end\n```", "```swift\n    //  ViewController.h\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import <UIKit/UIKit.h>\n    #import <MapKit/MapKit.h>\n    #import <CoreLocation/CoreLocation.h>\n\n    @interface ViewController : UIViewController < MKMapViewDelegate, CLLocationManagerDelegate>\n    {\n     CLLocationManager     *locationManager;\n      IBOutlet UIBarButtonItem *changeMap;\n     BOOL                  foundLocation;\n\n       // Obtain the user's current Longitude/Latitude\n     float                 curLat;\n     float                 curLong;\n    }\n\n    @property (strong, nonatomic) IBOutlet MKMapView *mapView;\n    @property float curLat;\n    @property float curLong;\n    // Declare our class instance methods\n    -(IBAction)changeMapType:(id)sender;\n\n    @end\n    ```", "```swift\n    //\n    //  ViewController.m\n    //  CoreLocation\n    //\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n    //\n\n    #import \"ViewController.h\"\n\n    @implementation ViewController\n\n    @synthesize mapView, curLat, curLong;\n\n    ```", "```swift\n    - (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n    // Do any additional setup after loading the view, \n     // typically from a nib.\n    foundLocation= NO;\n\n    // Make this controller the delegate for the map view.\n    self.mapView.delegate = self;\n\n    // Instantiate a new location object.\n    locationManager = [[CLLocationManager alloc] init];\n\n    // Make this controller the delegate for the location\n    // manager.\n    [locationManager setDelegate:self];\n    // Set some parameters for the location object.\n    [locationManager setDistanceFilter:kCLDistanceFilterNone];\n    [locationManager setDesiredAccuracy:kCLLocationAccuracyBest];\n\n    // Determine the current geographic location coordinates\n     // of the user on the map\n    [locationManager startUpdatingLocation];\n    }\n    ```", "```swift\n    #pragma mark Work out the current user location on the map \n    - (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation\n    {\n    // If this is the first launch of the app, then set the \n      // center point of the map to the user's location.\n    if (!foundLocation) {\n    // Determine the current geographic location coordinates\n    self.curLat  = mapView.userLocation.coordinate.latitude;\n    self.curLong = mapView.userLocation.coordinate.longitude;\n\n    // Show the current user location within an Alert dialog\n      UIAlertView *alert = [[UIAlertView alloc] \n                 initWithTitle:@\"You are located at\"\n                 message:[NSString stringWithFormat:@\"Latitude: %f \n                 and Longitude: %f\", self.curLat, self.curLong]\n                 delegate:nil\n                 cancelButtonTitle:@\"OK\"\n                 otherButtonTitles:nil];\n\n        // Display the alert view dialog \n        [alert show];\n\n        // Reset so that this does not get called again.\n        foundLocation = YES;\n      }\n    }  \n\n    #pragma mark If an error occurred, we need to tell our location Manager to stop updating location\n    - (void)locationManager:(CLLocationManager *)manager \n       didFailWithError:(NSError *)error {\n      [locationManager stopUpdatingLocation];\n    }\n    ```", "```swift\n    - (void)viewDidLoad {\n\n       [super viewDidLoad];\n\n      // Do any additional setup after loading the view, \n      // typically from a nib.\n      foundLocation = NO;\n\n      // Ensure that you can view your own location \n      // in the map view.\n     [self.mapView setShowsUserLocation:YES];\n\n      // Instantiate a location object.\n     locationManager = [[CLLocationManager alloc] init];\n     // Make this controller the delegate for \n     // the location manager.\n     [locationManager setDelegate:self];\n\n     // Set some parameters for the location object.\n     [locationManager setDistanceFilter:kCLDistanceFilterNone];\n      [locationManager \n      setDesiredAccuracy:kCLLocationAccuracyBest];\n\n      // Determine the current geographic location \n      // coordinates of the user on the map\n      [locationManager startUpdatingLocation];\n    }\n    ```", "```swift\n    #pragma mark draws an overlay showing the current user's location\n    -(void)createOverlayArea\n    {\n      // Show the current user location with 100km radius\n      MKCircle *circle = [MKCircle \n       circleWithCenterCoordinate:mapView.userLocation.coordinate \n       radius:100];\n      circle.title = @\"Current Location\";\n      [self.mapView addOverlay:circle];\n\n      // Zoom into the current user's location using a 2 km span\n      MKCoordinateRegion mapRegion;\n       mapRegion.center = mapView.userLocation.coordinate;\n      mapRegion.span = MKCoordinateSpanMake(0.2, 0.2);\n\n       [mapView setRegion:mapRegion animated: YES];\n    }\n    ```", "```swift\n    -(MKOverlayView *)mapView:(MKMapView *)mapView viewForOverlay:(id)overlay\n    {\n        MKCircleView* circleView = [[MKCircleView alloc] \n        initWithOverlay:overlay];\n        circleView.strokeColor = [UIColor redColor];\n        circleView.lineWidth = 1.0;\n        circleView.fillColor = [UIColor colorWithRed:0.0 \n        green:255.0 blue:0.0 alpha:0.1];\n\n        return circleView;\n    }\n    ```", "```swift\n    #pragma mark Work out the current user location on the map \n    - (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation\n    {\n       // If this is the first launch of the app, then set the \n       // center point of the map to the user's location.\n       if (!foundLocation)\n       {\n          // Determine the current geographic location coordinates\n         self.curLat  = mapView.userLocation.coordinate.latitude;\n         self.curLong = mapView.userLocation.coordinate.longitude;\n\n        // Show the current user location within an Alert dialog\n       UIAlertView *alert = [[UIAlertView alloc] \n             initWithTitle:@\"You are located at\"\n             message:[NSString stringWithFormat:@\"Latitude: %f and \n             Longitude: %f\", self.curLat, self.curLong]\n             delegate:nil\n             cancelButtonTitle:@\"OK\"\n             otherButtonTitles:nil];\n\n         // Display the alert view dialog\n         [alert show];\n\n        // Display our overlaid area on the map\n     [self createOverlayArea];\n         // Reset so that this does not get called again.\n          foundLocation = YES;\n      }\n    }\n    ```", "```swift\n    //  MapViewAnnotation.h\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import <Foundation/Foundation.h>\n    #import <MapKit/MapKit.h>\n\n    @interface MapViewAnnotation : NSObject <MKAnnotation> {\n      NSString *title;\n       NSString *subtitle;\n      CLLocationCoordinate2D coordinate;  \n    }\n\n    @property (nonatomic, copy) NSString *title;\n    @property (nonatomic, copy) NSString *subtitle;\n    @property (nonatomic, readonly) CLLocationCoordinate2D coordinate;\n\n    - (id)initWithTitle:(NSString *)header subtitle:(NSString *)subtitle andCoordinate:(CLLocationCoordinate2D)coord2D;\n\n    @end\n    ```", "```swift\n    //  MapViewAnnotation.m\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import \"MapViewAnnotation.h\"\n\n    @implementation MapViewAnnotation\n\n    @synthesize title, subtitle, coordinate;\n\n    - (id)initWithTitle:(NSString *)header subtitle:(NSString *)subtitles andCoordinate:(CLLocationCoordinate2D)coord2D {\n\n      title = header;\n       subtitle = subtitles;\n      coordinate = coord2D;\n      return self;\n    }\n\n    @end\n    ```", "```swift\n    //  ViewController.m\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  \"ViewController.h\"\n    #import \"MapViewAnnotation.h\"\n\n    @interface ViewController ()\n    @end\n\n    @implementation ViewController\n\n    @synthesize mapView, curLat, curLong;\n\n    ```", "```swift\n    #pragma mark Plots the geographic locations onto the Map\n    -(void)plotGeographicalData\n    {\n      // Remove any existing custom annotations but not the user \n      // location blue dot.\n      for (id <MKAnnotation> annotation in mapView.annotations) {\n       if ([annotation isKindOfClass:[MapViewAnnotation class]]) {\n           [mapView removeAnnotation:annotation];\n       }\n      }\n      // Add the annotation to our map view\n      NSString          *pinName;\n      MapViewAnnotation *newAnnotation;\n\n      pinName = @\"Kuala Lumpur\";\n      newAnnotation = [[MapViewAnnotation alloc] \n      initWithTitle:pinName\n            subtitle:@\"Malaysia\"\n      andCoordinate:\n      CLLocationCoordinate2DMake(3.13900,101.68685)];\n\n      [self.mapView addAnnotation:newAnnotation];\n\n      // Add the annotation to our map view\n      pinName = @\"Western Australia\";\n      newAnnotation = [[MapViewAnnotation alloc] \n      initWithTitle:pinName\n            subtitle:@\"Perth, WA\"\n                andCoordinate:\n                CLLocationCoordinate2DMake(-31.93285, 115.86194)];\n      [self.mapView addAnnotation:newAnnotation];\n\n      // Zoom in so that all pins fit within the map region\n      [self zoomToFitMapAnnotations];\n    }\n    ```", "```swift\n    #pragma mark sets up the properties for each of the annotations on the map\n    -(MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation {\n\n    // Define the identifier for the MapViewAnnotation Class.\n    static NSString *identifier = @\"MapViewAnnotation\";\n\n    // Place the current user location onto the Map at the \n    // location determined using the MKUserLocation class.\n    if ([annotation isKindOfClass:[MKUserLocation class]]) {\n         MKPinAnnotationView *annotationView = \n        (MKPinAnnotationView *) [self.mapView \n        dequeueReusableAnnotationViewWithIdentifier:identifier];\n        if (annotationView == nil) {\n          annotationView = [[MKPinAnnotationView alloc] \n          initWithAnnotation:annotation \n          reuseIdentifier:identifier];\n    } \n    else {\n       annotationView.annotation = annotation;\n    }\n    annotationView.enabled = YES;\n    annotationView.canShowCallout = YES;\n    annotationView.animatesDrop = NO;\n    annotationView.pinColor = MKPinAnnotationColorGreen;\n    return annotationView;\n    }\n\n    return nil;\n    }\n    ```", "```swift\n    #pragma mark Work out the current user location on the map \n    - (void)locationManager:(CLLocationManager *)manager didUpdateToLocation:(CLLocation *)newLocation fromLocation:(CLLocation *)oldLocation\n    {\n       // If this is the first launch of the app, then set the \n       // center point of the map to the user's location.\n    if (!foundLocation)\n    {\n    // Determine the current geographic location coordinates\n    self.curLat  = mapView.userLocation.coordinate.latitude;\n    self.curLong = mapView.userLocation.coordinate.longitude;\n\n    // Show the current user location within an Alert dialog\n      UIAlertView *alert = [[UIAlertView alloc] \n       initWithTitle:@\"You are located at\"\n       message:[NSString stringWithFormat:@\"Latitude: %f and \n       Longitude: %f\", self.curLat, self.curLong]\n       delegate:nil\n       cancelButtonTitle:@\"OK\"\n       otherButtonTitles:nil];\n\n       // Display the alert view dialog\n       [alert show];\n\n      // Display our overlaid area on the map\n     [self createOverlayArea];\n\n      // Plot the geographic positions on the map\n     [self plotGeographicalData];\n\n      // Reset so that this does not get called again.\n       foundLocation = YES;\n      }\n    }\n    ```", "```swift\n    #pragma mark Zooms in to the map so that all visible annotations are displayed\n    - (void)zoomToFitMapAnnotations \n    {\n    if ([self.mapView.annotations count] == 0) return;\n\n    int i = 0;\n    MKMapPoint points[[self.mapView.annotations count]];\n\n      // Cycle through all annotations on the map and \n      // build array of annotation points\n      for (id<MKAnnotation> annotation in [self.mapView \n           annotations]) {\n           points[i++] = \n           MKMapPointForCoordinate(annotation.coordinate);\n      }  \n      // Create a rectangle view around the visible region \n      // that the user can move around in.\n      MKPolygon *pv= [MKPolygon polygonWithPoints:points count:i];\n      [self.mapView setRegion:MKCoordinateRegionForMapRect([pv\n      boundingMapRect]) animated:YES];\n    }\n    ```", "```swift\n    - (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n    // Do any additional setup after loading the view, \n     // typically from a nib.\n    foundLocation= NO;\n\n    // Make this controller the delegate for the map view.\n    self.mapView.delegate = self;\n\n    // Ensure that you can view your own location \n     // in the map view.\n    [self.mapView setShowsUserLocation:YES];\n\n    // Instantiate a new location object.\n    locationManager = [[CLLocationManager alloc] init];\n\n    // Make this controller the delegate for the location\n     // manager.\n    [locationManager setDelegate:self];\n\n    // Set some parameters for the location object.\n    [locationManager setDistanceFilter:kCLDistanceFilterNone];\n    [locationManager setDesiredAccuracy:kCLLocationAccuracyBest];\n\n    // Determine the current geographic location coordinates\n     // of the user on the map\n    [locationManager startUpdatingLocation];\n    [self getGeocodingInformation];\n    }\n    ```", "```swift\n    #pragma mark Reverse Geocoding location details\n    -(void)getGeocodingInformation\n    {\n    // Declare the coordinates to reverse geocode\n      CLGeocoder *geoCoder = [[CLGeocoder alloc] init];\n      CLLocationCoordinate2D placeCoord =  \n    CLLocationCoordinate2DMake(3.13900, 101.68685);\n\n      CLLocation *location = [[CLLocation alloc] \n    initWithLatitude:placeCoord.latitude \n    longitude:placeCoord.longitude];\n\n    [geoCoder reverseGeocodeLocation:location \n    completionHandler: ^(NSArray *placemarks, NSError *error) \n    {\n        // Get nearby address and print it out to the Console\n        CLPlacemark *placemark = [placemarks objectAtIndex:0];\n\n        // Show the placemark information within an Alert dialog\n        UIAlertView *alert = [[UIAlertView alloc] \n    initWithTitle:@\"Placemark Information\"\n    message:[placemark.addressDictionary description]\n    delegate:nil\n    cancelButtonTitle:@\"OK\"\n    otherButtonTitles:nil];\n\n    // Display the alert view dialog\n    [alert show];\n      }];\n\n      return;\n    }\n    ```", "```swift\nNSLog(@\"Location: %@\",[[placemark.addressDictionary valueForKey:@\"FormattedAddressLines\"] componentsJoinedByString:@\", \"]);\n```", "```swift\n    //  ViewController.h\n    //  CoreLocation\n    //  Created by Steven F Daniel on 23/10/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import <UIKit/UIKit.h>\n    #import <MapKit/MapKit.h>\n    #import <CoreLocation/CoreLocation.h>\n    @interface ViewController : UIViewController <UIActionSheetDelegate, MKMapViewDelegate, CLLocationManagerDelegate>\n    {\n    CLLocationManager        *locationManager;\n      IBOutlet UIBarButtonItem *changeMap;\n    BOOL                   foundLocation;\n\n        // Obtain the user's current Longitude/Latitude\n        float                  curlatitude;\n        float                  curlongitude;\n    }\n\n    @property (strong, nonatomic) IBOutlet MKMapView *mapView;\n\n    @property float curlatitude;\n    @property float curlongitude;\n\n    // Declare our class instance methods\n    -(IBAction)changeMapType:(id)sender;\n\n    @end\n    ```", "```swift\n    // Called when the user presses the Map Type button\n    - (IBAction)changeMapType:(id)sender{\n\n    // Define an instance of our action sheet\n    UIActionSheet *actionSheet;\n\n    // Initialize our action sheet with the \n     // differen't mapping types\n    actionSheet = [[UIActionSheet alloc]\n    initWithTitle:@\"Select a Map Type from the list below\"\n    delegate:self\n    cancelButtonTitle:@\"Cancel\"\n    destructiveButtonTitle:@\"Close\"\n    otherButtonTitles:@\"Map View\",@\"Satellite View\",\n    @\"Hybrid View\", nil];\n    // Set our ActionSheet style and display it to the user\n        actionSheet.actionSheetStyle =  \n    UIBarStyleBlackTranslucent;\n        [actionSheet showInView:self.view];\n    }\n    ```", "```swift\n    // Delegate that handles the chosen action sheet options\n    -(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex\n    {\n        // Determine the chosen item\n        switch (buttonIndex) {\n            case 1:  mapView.mapType = MKMapTypeStandard;  break;\n            case 2:  mapView.mapType = MKMapTypeSatellite; break;\n            case 3:  mapView.mapType = MKMapTypeHybrid;    break;\n            default: break;  // Catch the Close button and exit.\n        }\n    }\n    ```"]