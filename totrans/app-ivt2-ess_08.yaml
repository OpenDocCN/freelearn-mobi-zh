- en: Chapter 8. Expanding Your Mobile App Development Skills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the tutorials in this book you have been increasing your app development
    skills. No doubt you are eager to build on this knowledge to embark on creating
    apps from scratch. Thus, we wanted to offer you a variety of tips for expanding
    your skill set. In this chapter you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Research app markets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App Inventor extras
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing your apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to learning to code with blocks, there are many things to keep in
    mind when developing mobile apps. One important aspect is design. What do we mean
    by design? The word design seems to imply look and feel, but it also includes
    function. An app that is designed well is not only visually appealing, it is also
    easy to navigate and intuitive. When first building mobile apps, the tendency
    is to want your app to do it all and have lots of bells and whistles. But really,
    you want your app to be clear and straightforward in its function and purpose.
    Let's say you're building a book review app that shows user inputted reviews of
    books. You will not want it to also include music reviews. Just because your app
    is set up to easily add more categories doesn't mean you should add more content
    or features. When starting out, it is better to have a clear, precise purpose
    and scope for your app. And, because of the relatively small real estate of the
    mobile device screen, it is vitally important to have a clean, simple, and easy-to-navigate
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: User-centered design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think about the times you yourself have used a mobile app. Are you spending
    hours on just one app? Not likely. Most people use apps intermittently with a
    lot of interruptions. Rumor has it that people use mobile apps when they are busy,
    lost, or bored. The first two of these include the need for quick information,
    but the third does not necessarily imply extended usage. Someone bored could easily
    just need a quick fix to distract or entertain himself or herself for a few minutes.
    The best way to learn about design principles is to view Android apps through
    a developer's lens. Study how, when, and for how long people use mobile apps.
    Monitor your own app's behavior and ask others when they most often use apps.
    Is it when you're waiting in line? While traveling via public transport? Going
    to meet someone? How much time do you spend on one app before you move on to something
    else? Next, look analytically at apps—the ones you regularly use along with new
    ones. Examine everything—the fonts, the colors, and the placement of buttons or
    the navigation tools to see how they function and are displayed. Keep notes to
    track your discoveries, jotting down elements you expect to see and those that
    you find unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that mobile phone users will be navigating your app with their
    thumbs, so it is essential to make buttons big enough for easy navigation. If
    you make interactive elements too small and difficult to trigger, users could
    get frustrated and avoid using your app. Bottom navigation bars also make it easy
    for thumbs to control an app, which is why you will find this standard on many
    apps. Also, keep in mind that not all users have perfect vision. Create apps with
    high contrast colors and text that is easily viewed by people of all ages. It's
    a great idea to get a wide variety of people to view your app to give you feedback
    on things, such as colors, contrast, readability, and navigation ease.
  prefs: []
  type: TYPE_NORMAL
- en: Visual hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The way you display elements in terms of weight or importance is called **visual
    hierarchy**. You can create visual importance through the use of font size, colors,
    position, contrast, shape, or consistency. There are some Android elements that
    are familiar to users, such as an action bar that houses buttons to easily move
    about the app. Users will expect to find consistency on each screen along with
    ease in navigation. For example, it should be simple to stop, play, or quit at
    any point during a game app. In the Event App, we showed one way to make it apparent
    for the user to know which screen he or she is on by changing the text color of
    a button. You can also use other visual cues, such as highlighting a particular
    navigation button or creating a contrasting background color. Some of these recommendations
    may seem obvious, but you will be surprised to see how many people forget the
    obvious once they start creating apps from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Responsive design can refer to many things. Is your app responsive to users?
    Does it do what users think it will do? Does the app respond to user interaction
    as intended? Note that responsiveness and speed are not the same thing. It''s
    OK if your app takes time to load something as long as the app is responding to
    user input and the user is aware that the app is responding. Responsive design
    also means that an app adjusts to a user''s screen size. When creating apps, you
    don''t know whether a user will have a mobile phone or tablet. What looks good
    on one screen size won''t necessarily display properly on another, unless you
    ensure that it does. Responsive designing is creating layout and content for optimal
    viewing on any screen size. App Inventor makes it easy to do this. In the Properties
    panel of **Screen1**, there is a property called **Sizing**, as shown in the following
    screenshot. The default option is **Fixed**; but if you click on the word, a second
    option will be displayed: **Responsive**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive design](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon choosing **Responsive**, a previously grayed out option in the **Viewer**
    will become visible. Immediately, above the **Viewer** window, you will now be
    able to click on the checkbox next to **Check to see Preview on Tablet size**.
    Once you do, the text will change to "un-check" and the Viewer will display a
    tablet preview of your app, as shown in the following screenshot with **EventApp**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive design](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is particularly helpful to view if you don't have a tablet and want to
    test how your app will look on one.
  prefs: []
  type: TYPE_NORMAL
- en: Research app markets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have the desire to make mobile apps from your own ideas, it is vital
    to understand the app market. How do you do this? You can do so by conducting
    research on mobile apps. Start looking at Google Play or other Android app markets
    and see what apps are new and popular. And most importantly, use those apps, jot
    down your reactions, what you liked and didn't like, and read reviews. Discover
    why certain apps in a category are more popular than others, what app features
    appeal to you, and also which types of apps are trending. Studying apps from the
    perspective of a developer will help you see themes in content, design, and user
    experience. Read descriptions of the apps to see how, for example, one chess game
    summary brands itself differently than other chess games. As we have recommended
    throughout this book, record your observations, reactions, and top picks, because
    like with any market, changes occur over time. It will be helpful for you to read
    what you noticed in the market 6 months ago and compare it to what your research
    revealed last week.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have a budget to buy apps, don't worry; you can still do valuable
    research on free apps or the ones that lead to in-app purchases. Notice what features
    are free and which ones are considered more valuable that they require a fee.
    When you get to the point of an in-app purchase, do you want to make one? Why
    or why not? Do the free apps have advertisements? If so, which apps? Which ads?
    If you do upgrade an app, what are the differences between the *freemium* and
    the paid versions of the same app?
  prefs: []
  type: TYPE_NORMAL
- en: This type of research will prove valuable when you complete this book and need
    help deciding what type of app to create on your own. The easiest way to find
    success creating apps is by giving users what they want. You can discover what
    users want by studying what apps are selling and popular. Many budding app developers
    fail to research app markets and instead just concentrate on coming up with an
    idea that they like and turning that concept into a prototype, hoping people will
    find the app, download it, use it, and like it. By paying attention to what users
    are already downloading and what they are willing to pay for, you can create an
    app with an understanding of what already appeals to users. Then, you can decide
    whether to follow this trend or disrupt it. Research can help ensure that your
    app is more successful once you upload it into app marketplaces. And the more
    people that use your apps, the more valuable feedback you will get. Ratings and
    comments can serve to help you improve subsequent versions or guide you in future
    app development.
  prefs: []
  type: TYPE_NORMAL
- en: Design tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can sketch out your app screens on index cards, notebook paper, poster size
    paper, or a whiteboard, or you can use some digital tools. There are a lot of
    free resources available to help you create paper or digital prototypes. Do a
    Google search for *paper prototyping for mobile apps*, or if you prefer the digital
    route, search for *wire framing for mobile apps* (note that we add the words *mobile
    apps* to our search because there are also a lot of resources for designing web
    pages). We even found a hybrid option ([https://popapp.in/](https://popapp.in/))
    that enables you to take pictures of your hand-drawn sketches and incorporate
    them into the app.
  prefs: []
  type: TYPE_NORMAL
- en: App Inventor extras
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'd like to introduce you to some App Inventor features that you may not know
    about.
  prefs: []
  type: TYPE_NORMAL
- en: Shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we showed you how to find and select blocks in the **Blocks**
    Editor. But, if you already know the block you want, there is a quick way to get
    it. All you have to do is click anywhere on the white space of the **Viewer**
    window and start typing. For example, if you want the **When GuestsButton.Click**
    event block, begin typing the word `when` and a drop-down list will appear, allowing
    you to choose the block you want among other blocks beginning with `wh`. Once
    you select the block, it will appear in the **Viewer**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shortcuts](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We didn't give you this shortcut initially because we wanted you to become familiar
    with where blocks were housed and how they were grouped (not because we wanted
    to make you work harder).
  prefs: []
  type: TYPE_NORMAL
- en: Help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a variety of ways to get help while you are using App Inventor. In
    the Designer, you may or may not have noticed little questions marks on the right-hand
    side of the Components Palette, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Help](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on a question mark launches a popup with information about a Component,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Help](img/00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the bottom of the window, you will see a **More information** link that will
    further direct you to documentation about that Component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Blocks** editor, you can easily find information about the blocks
    by hovering your cursor over a block. As shown in the following screenshots, hovering
    over different blocks launches a message revealing the block''s purpose or type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Help](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another way to get help with App Inventor is to click on **Guide** in the top
    menu bar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Help](img/00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The **Guide** button will direct you to the App Inventor library of documentation.
    You can also access this website through [http://appinventor.mit.edu/explore/library](http://appinventor.mit.edu/explore/library).
  prefs: []
  type: TYPE_NORMAL
- en: If you can't find an answer to a question or feel stuck, the **App Inventor
    Forum** is a way to interact with other users who have a wealth of experience
    with the platform. The link to the forum is found in the **Guide** documentation
    under **Support and Troubleshooting**.
  prefs: []
  type: TYPE_NORMAL
- en: Titles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While you can't change the name of **Screen1**, you can change the title of
    **Screen1** (or any screen for that matter) so that a different name will appear
    to the user. By default, **Title** is the name of **Screen1** (or if you are on
    a different screen, it will populate the screen name that you chose when creating
    the screen). Make sure you are on **Screen1** (if you have multiple screens) and
    select **Screen1** from the Components panel so that it is highlighted. Then,
    scroll to the very bottom of the Properties panel, as shown in the following screenshot.
    You will see the option of **Title**. Click on "Screen1" in the text box below;
    it will highlight the name and allow you to rename it. You will see the changes
    reflected at the top of the **Viewer** and also when you view the app on your
    device. You can retitle any screen with this method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Titles](img/00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, App Inventor has a 5 MB limit for the size of apps. This will not
    affect many of you at this point; but as you move farther along in your app development
    and create more complex apps, you may push up against this size limit. One thing
    that can help is reducing the size of any images. Be mindful to not use high-resolution
    images when creating your apps, as they take up a lot of space.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual screens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 5](part0033_split_000.html#VF2I1-9c0b907946184095a315b26c8a9b12bc
    "Chapter 5. Building an Event App"), *Building an Event App*, and [Chapter 6](part0041_split_000.html#173722-9c0b907946184095a315b26c8a9b12bc
    "Chapter 6. Introduction to Databases"), *Introduction to Databases*, we created
    the Event App that used four different screens. While being able to organize all
    your components in different screens is great for creating the visual hierarchy
    that any well-built app has, increasing the number of screens will ultimately
    increase the app's memory footprint, thereby reducing the performance. A small
    number (five or six) screens in an app is just fine. But as you keep on increasing
    the number of screens, you will get to a point where the app will start running
    a bit slow.
  prefs: []
  type: TYPE_NORMAL
- en: There is a workaround to have just one screen, but still have the visual hierarchy
    and the separation of components that you get by using multiple screens. The trick
    is to show or hide different components at different times to give the app user
    an illusion of multiple screens.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we are designing a simple form in our app. This form has two screens.
    In the first screen, the user types his/her name in a textbox and presses a button
    so that the name gets added to some sort of data storage (list, TinyDB, Fusion
    Table, and so on). When the user presses the button, the second screen opens up
    and shows a confirmation message. The second screen also has a button to go back
    to the first screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of creating two separate screens, we can create this behavior using
    a virtual single screen. The following screenshot shows all the components and
    how they are placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual screens](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The interesting thing that you might notice is that we have placed all the components
    within two different vertical arrangements. We have placed all the components
    that we want on **Screen1** in **VerticalArrangement1** and all the components
    that we want on **Screen2** in **VerticalArrangement2**. When the app starts,
    we will keep **VerticalArragnement1** visible and hide **VerticalArrangement2**
    (hiding, or making it invisible, automatically makes all the components inside
    a vertical arrangement invisible too). Then, whenever the user presses the button
    to enter a name, we will hide **VerticalArrangement1** and show **VerticalArrangement2**.
    Subsequently, when the user presses the button to go back, we will show **VerticalArrangement1**
    and hide **VerticalArrangement2**.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, we will toggle between showing one of the vertical arrangements
    and hiding the other. This will give the user an illusion of multiple screens
    even though the app has a single screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore all the details of this. Here are the steps that you need to
    implement in the Designer:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Properties** panel of **Screen1**, and change the **Title** property
    from **Screen1** to something else. As shown in the following screenshot, we have
    changed it to **Virtual screen demo**:![Virtual screens](img/00253.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add two vertical arrangements. Make the **Height** and the **Width** properties
    of both the vertical arrangements **Fill parent**. This will make both of them
    span the entire width of **Screen1** and make each one's height half of **Screen1**,
    as shown in the following screenshot:![Virtual screens](img/00254.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in **VerticalArrangement 1**, add a Label, a Textbox, and a Button. Change
    the **Text** property of **Label1** to **Enter your name:**. Delete the **Hint**
    property of **TextBox1**. Finally, change the **Text** property of **Button1**
    to **Enter**. The following screenshot shows the result of completing this step:![Virtual
    screens](img/00255.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **VerticalArrangement 2**, add a label and a button. App Inventor will automatically
    name them **Label2** and **Button2**. Delete the **Text** property of **Label2**
    and keep it empty. Change the **Text** property of **Button2** to **Go Back**.
    Your **Viewer** will look as follows:![Virtual screens](img/00256.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, uncheck the **Visible** property of **VerticalArrangement2**. This
    will hide **VerticalArrangement2** and all the components in it. When you do this,
    your designer will look as follows:![Virtual screens](img/00257.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the **Blocks** Editor to create the behavior—toggling between showing
    and hiding the two vertical arrangements to create the illusion of multiple screens.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on **Button1** (the button that says **Enter**), you will
    need to perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide VerticalArrangement1 by setting the **VerticalArrangement1.Visible** property
    to **false**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Show VerticalArrangement2 by setting the **VerticalArrangement2.Visible** property
    to **true**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the text from **TextBox1** by using the **TextBox1.Text** getter block,
    join this text with a blank Text block filled with **"You Entered: "**. Set **Label2**
    by setting **Label2.Text to** the result of the **join** block.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear TextBox1 by setting the **TextBox1.Text** property to an empty string.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the blocks that achieve steps *a* to *d*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Virtual screens](img/00258.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When a user clicks on **Button2** (the button that says **Go Back**), you will
    do the reverse of steps 1*a* and 1*b*, that is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show VerticalArrangement1 by setting the **VerticalArrangement1.Visible** property
    to **true**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide VerticalArrangement2 by setting the **VerticalArrangement2.Visible** property
    to **false**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the blocks that achieve steps 2*a* and 2*b*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Virtual screens](img/00259.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When you test this app or when the app first launches, you will see **VerticalArrangement1**
    and all its components, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual screens](img/00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you enter a name in **TextBox1** and click on the button that says **Enter**,
    you will see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual screens](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, when you click on the button that says **Go Back**, you will see what
    you saw first when the app launched. This is how you create an illusion of multiple
    screens while actually only having a single screen, thereby reducing the memory
    requirements of the app and making the app more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: App Inventor automatically saves your app as you are creating it. Even though
    you will see a **Save project** option under the Projects menu, rest assured that
    your app is regularly saved by the platform. However, as you build apps, saving
    a copy of your progress is extremely important in case you want to revert to an
    earlier version or, for example, you wish to examine your code before you encounter
    a bug to determine what went wrong. One option in the drop-down list under the
    **Projects** menu is **Save project as…** (as shown in the following screenshot
    on the left-hand side). This option lets you create a second copy of your project
    with a new name. Then, the new copy will become your current working project.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, using the **Checkpoint** option regularly throughout development
    provides a way to create backups in a systematic manner while continuing to work
    on the same version of the app. When you choose **Checkpoint** (as shown in the
    following screenshot on the right-hand side) under the **Projects** menu, App
    Inventor will seamlessly create backups behind the scenes. For instance, our Event
    App versions would be saved as **EventApp_Checkpoint1**, **EventApp_Checkpoint2**,
    and so on. This way, you can open any version of the Event App at varying stages
    throughout development. Once you finish your app and create your final version,
    you can delete the **Checkpoint** versions, as you will no longer need them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Backups](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Distributing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are sure you've noticed, either in an app store or on your device, that all
    the apps have icons. This small image enables users to easily recognize one app
    from another. Before sharing your app, you will want to upload an icon. This could
    be some artwork that you used in your app or a logo if you have created one. You
    can easily upload this image in the **Properties** panel for **Screen1** under
    the option **Icon**. You will find it midway down the panel of options.
  prefs: []
  type: TYPE_NORMAL
- en: The App Inventor Gallery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you've made an app with the help of a tutorial or from scratch, you
    have the privilege of sharing your app with others. There are many ways to do
    this. The easiest way is from within App Inventor itself with the **Gallery**.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the Gallery apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may have noticed a menu item called **Gallery**, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the Gallery apps](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you click on the Gallery button, you can peruse many remarkable apps that
    other people have shared. Not only can you view apps to get inspiration, but you
    can use the Gallery as a learning tool because you can view the source codes of
    any of the apps in it. Click on an app icon that looks interesting or the one
    that you would like to learn how to build and it will launch a window with a button
    **OPEN THE APP**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the button and a pop-up box will appear to save the app or rename
    it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the Gallery apps](img/00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This method saves the app to your Projects list, and you can open the file and
    examine the UI in the Designer and the code in the **Blocks** Editor to see how
    the app was made. You can remix the app by adding or changing blocks to create
    your own version of the app, or you can copy some of the existing blocks into
    the **Backpack** and load them into another project that you are working on (Blocks
    saved in the Backpack can be accessed by any of your projects and remain there
    until you quit App Inventor). This is a great way to learn new code, discover
    ways that other people built apps and learn the art of remixing projects.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your app in the Gallery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since the Gallery is an open resource tool for learning and collaborating,
    keep in mind you have to be okay with the practice of sharing your own code with
    others. To share your app with others in the **Gallery**, click on the **My Projects**
    button in the top menu bar and select the app you would like to share by clicking
    on the checkbox next to the app name. When you do this, two buttons that were
    once grayed out become active (the **Delete Project** button and the **Publish
    to Gallery** button), as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sharing your app in the Gallery](img/00265.jpeg)![Sharing your app in the
    Gallery](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you publish to the **Gallery**, you can opt to receive e-mails that notify
    you when your app has been downloaded and liked. You can also obtain a link to
    share, which will direct others to your app. Getting feedback on your app before
    publishing it on the Google Play Store is a great way to test the market.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AIA file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An `.aia` file is the file type you will need to create when sharing an app
    in the Gallery or with someone else. This file type allows you to load an app
    into your project's list and examine the UI and source code. It is also useful
    when you are collaborating on a project with someone else or if you want a specific
    person to take a look at your code. Within App Inventor, it is easy to make an
    `.aia` file to share with someone else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Projects** button in the menu bar and select the eighth option
    from the drop-down menu, **Export selected project (.aia) to my computer**, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an AIA file](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This action will place the file in your `Downloads` folder (or in another location
    that you designate). You can send the `.aia` file to a collaborator by attaching
    the file in an e-mail. The recipient will first download the file to his or her
    computer (into the `Downloads` folder) and then easily upload the file to his
    or her App Inventor project list by selecting the third option in the previous
    image, **Import project (.aia) from my computer**.
  prefs: []
  type: TYPE_NORMAL
- en: When publishing an app to the Google Play Store, it is highly recommended that
    you save an extra copy of your own source code and store it in a safe place. You
    will most likely create new versions and updates of your app, so it is recommended
    to keep copies of your app files in the unlikely event that anything were to happen
    to the copy on App Inventor. Follow the previous steps to **Export selected project
    (.aia) to my computer** and then copy the `.aia` file to a flash drive or hard
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far with our app development, we have been working inside of App Inventor—both
    when building and live testing our app and now while sharing it in the Gallery.
    But, when you create your own app from scratch, it makes sense to download your
    app and test it on as many devices as possible before you widely distribute it.
    To download your app to your device or to make it available for others to download,
    you have a few options.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which option you decide to use, to ensure that your device allows
    file downloads other than those from the Google Play Store, you may have to adjust
    your mobile device settings. You may recall that we explained the step of side-loading
    in [Chapter 2](part0017_split_000.html#G6PI2-9c0b907946184095a315b26c8a9b12bc
    "Chapter 2. Setting Up MIT App Inventor 2"), *Setting Up MIT App Inventor 2*,
    when we provided instructions for directly downloading the AI2 Companion App.
    We suggest that you follow these steps to ensure that your device can install
    apps from **unknown sources**. For devices with Honeycomb or earlier, go to **Settings**
    | **Applications** and enable **Unknown Sources** by checking the box. For Ice
    Cream Sandwich and later versions, go to **Settings** | **Security** or **Settings**
    | **Security & Screen Lock** to check the box for **Unknown Sources**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an APK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When distributing your app in an app market like the Google Play Store, you
    will not be sharing your source code, so you need a file type other than an `.aia`
    file. In this case, you will build out your app into an `.apk` file. This is easily
    done in App Inventor.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options for creating an `.apk` file: using a QR code or side-loading.'
  prefs: []
  type: TYPE_NORMAL
- en: QR code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on the **Build** button in the top menu bar and choose the first option
    from the drop-down menu: **App (provide QR code for .apk)**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![QR code](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will launch the build process, and after a few moments, a QR code will
    appear on your computer screen. *Do not scan this with the AI2 Companion app,
    as it will not work*. You will need to scan the code with a QR code reader on
    your mobile device. Many free QR code reader apps are available on the Google
    Play Store; you can find one by doing a search. The QR code is only available
    for a certain time period, so be mindful of the time limit noted, as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![QR code](img/00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have scanned the QR code with your mobile device, click on **Open**
    to begin the download process. You will next see an installation screen asking
    **Do you want to install this application? If so, it will get access to:**. And
    you will see a list of items on the device that the app needs to access. This
    list is determined by the components in the app. Since you created this app, you
    can easily agree to the permissions. Click on **Install**. Once the installation
    is complete, your app will be stored on your device; you can locate it in the
    same location as the other apps on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Direct download (or side-loading)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To download an `.apk` file directly to your computer, click on the **Build**
    menu option and choose the second option, **App (save .apk to my computer)**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The file will take a moment to build and will either save to your `Downloads`
    folder or to a location that you designate. You can easily locate your file in
    a search because the name will end with the extension `.apk`. To get your app
    to your mobile device, you have a few options. You can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your Android mobile device to your computer via USB and drag the file
    to the phone or tablet icon to copy it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send the file to yourself by attaching it to an e-mail and then opening the
    e-mail on your mobile device and downloading the file to your device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upload the file to a shared web storage location, such as Google Drive, (since
    it is connected to your Google account) and then access the file through your
    device. To do this, you would need to either have the Google Drive app on your
    device or sign into your account on your phone by using the web address: [http://drive.google.com](http://drive.google.com).
    Once you open Google Drive on your device, locate your .apk file and open it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regardless of which method you use, once you click on the file to open it, you
    will be shown the (aforementioned) installation screen asking **Do you want to
    install this application? If so, it will get access to:**. Click on **Install**.
    Once the installation is complete, your app will be stored on your device; you
    can locate it in the same location as the other apps on your device.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Play Store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few things in App Inventor that you may have not noticed previously
    that you need to be mindful of at the stage when you are considering publishing
    to the Google Play Store. Apps published in Google Play need both **VersionCode**
    and **VersionName**. Both of these can be found in the Designer window of App
    Inventor at the bottom of the **Properties** panel for **Screen1**, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Google Play Store](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These properties are needed by both Google Play and Android to keep track of
    updates to ensure that the user has the most recent version of an app. Every time
    you submit a new version of an app, **VersionCode** must be a greater whole number
    than the previous version. **VersionName** does not have to be numerical, but
    it should be consistent among versions because the user will see this information.
    To begin the Google Play Store publishing process, go into your App Inventor projects,
    select the app you would like to distribute on Google Play, build the `.apk` file,
    and download it to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Next, make sure you're logged into your Google account and visit [http://play.google.com/apps/publish](http://play.google.com/apps/publish).
    This link will take you to the Google Play Developer Console, and the first thing
    you will need to do is sign up for a Developer Account, which costs a fee. Since
    Google makes changes to the process occasionally, we are going to recommend that
    you visit the App Inventor website documentation [http://appinventor.mit.edu/explore/ai2/google-play.html](http://appinventor.mit.edu/explore/ai2/google-play.html)
    to get the most up-to-date steps on how to publish to Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to note, Google Play gives you three options for publishing: Alpha
    or Beta testing or Production. Once you have a finished app, we are certain you
    will be anxious to share your app with the world; but even if you have done a
    fair share of testing on your own, we recommend taking yet another opportunity
    to continue testing. **Alpha** testing is a small group that you can designate,
    **Beta** testing is testing with a bigger but limited audience, and of course,
    **Production** shares the app with the public. Each time you make a new version,
    we recommend testing it out on your Alpha and Beta testers before you send it
    out to production.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book has provided you with ideas, tools, tutorials, and guidance to become
    a mobile app developer with MIT App Inventor. You''ve learned how to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform a technical setup for App Inventor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brainstorm app ideas using the Design Thinking process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct app research during both the idea generating stage and in the prototype
    phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate the App Inventor platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a user interface keeping design principles in mind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a user-touch game, an event app, and a raffle app, and expand upon them
    with more complex features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code blocks using sequences, if/then statements, multiple screens, virtual screens,
    images, databases, and loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Research the app marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share your apps with others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you have experienced, a lot of time, effort, iteration, dedication, and creativity
    goes into making mobile applications. We are certain that the content shared in
    this book has sparked more than just a casual interest in mobile app development.
    You have learned skills in coding and design, both of which will help you embark
    on your new role as an app developer. No doubt you are hooked on making apps and
    intend to expand your skills even further. The possibilities for creating social
    impactful apps are indeed endless and we hope that the coding, design, research,
    and entrepreneurial skills you learned in this book launch you into becoming a
    lifelong technology creator!
  prefs: []
  type: TYPE_NORMAL
