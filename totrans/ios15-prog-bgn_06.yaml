- en: '*Chapter 5*: Collection Types'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：集合类型'
- en: You've learned quite a lot at this point! You can now create a program that
    stores data in constants or variables and performs operations on them, and you
    can control the flow using conditionals and loops. But so far, you've mostly been
    storing single values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学到了很多！你现在可以创建一个程序，将数据存储在常量或变量中，并对它们进行操作，并且你可以使用条件语句和循环来控制流程。但到目前为止，你主要存储的是单个值。
- en: 'In this chapter, you will learn ways to store collections of values. Swift
    has three collection types: **arrays**, which store an ordered list of values;
    **dictionaries**, which store an unordered list of key-value pairs; and **sets**,
    which store an unordered list of values.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习存储值集合的方法。Swift有三种集合类型：**数组**，它存储一个有序的值列表；**字典**，它存储一个无序的键值对列表；以及**集合**，它存储一个无序的值列表。
- en: By the end of this chapter, you'll have learned how to create arrays, dictionaries,
    and sets, and how to perform operations on them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何创建数组、字典和集合，以及如何对它们进行操作。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Understanding arrays
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解数组
- en: Understanding dictionaries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解字典
- en: Understanding sets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解集合
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter05` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的Xcode游乐场位于本书代码包的`Chapter05`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3H5blc2](https://bit.ly/3H5blc2)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3H5blc2](https://bit.ly/3H5blc2)'
- en: If you wish to start from scratch, create a new playground and name it `CollectionTypes`.
    You can type in and run all of the code in this chapter as you go along.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望从头开始，创建一个新的游乐场，并将其命名为`CollectionTypes`。你可以一边阅读一边输入并运行本章中的所有代码。
- en: Important Information
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: To find out more about arrays, dictionaries, and sets, visit [https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于数组、字典和集合的信息，请访问[https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html)。
- en: The first collection type you will learn about are arrays, which lets you store
    information in an ordered list.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要学习的第一种集合类型是数组，它允许你按顺序列表存储信息。
- en: Understanding arrays
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数组
- en: 'Let''s say you want to store the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要存储以下内容：
- en: List of items to buy at a convenience store
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 便利店购物清单
- en: Chores that you have to do every month
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每月必须做的家务
- en: 'Arrays would be suitable for this. An array stores values in an ordered list.
    Here''s what it looks like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数组非常适合这个。数组按顺序列表存储值。它看起来是这样的：
- en: '![Figure 5.1: Array'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1：数组'
- en: '](img/Figure_5.01_B17469.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.01_B17469.jpg)'
- en: 'Figure 5.1: Array'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：数组
- en: Values must be of the same type. You can access any value in an array by using
    the array index, which starts with `0`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 值必须是同一类型。你可以通过使用数组索引来访问数组中的任何值，索引从`0`开始。
- en: If you create an array using the `let` keyword, its contents can't be changed
    after it has been created. If you want to change an array's contents after creation,
    use the `var` keyword.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`let`关键字创建一个数组，那么一旦创建，其内容就不能更改。如果你想创建后更改数组的内容，请使用`var`关键字。
- en: Let's see how to work with arrays. You'll create an array by assigning a value
    to it in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用数组。你将在下一节中通过给它赋值来创建一个数组。
- en: Creating an array
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个数组
- en: In previous chapters, you created a constant or variable by declaring it and
    assigning an initial value to it. You can create an array the same way.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你通过声明并给它赋一个初始值来创建了一个常量或变量。你可以用同样的方式创建一个数组。
- en: 'Imagine that your spouse has asked you to get some items from a convenience
    store. Let''s implement a shopping list using an array. Add the following code
    to your playground and click the **Play/Stop** button to run it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你的配偶让你去便利店买一些东西。让我们使用数组来实现一个购物清单。将以下代码添加到你的游乐场中，然后点击**播放/停止**按钮来运行它：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This instruction creates an array variable named `shoppingList`. The assigned
    value, `["Eggs", "Milk"]`, is an array `String`, with `"Eggs"` at index `0`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令创建了一个名为`shoppingList`的数组变量。分配的值`["Eggs", "Milk"]`是一个包含`"Eggs"`在索引`0`处的`String`数组。
- en: Using the `var` keyword here means that the array's contents can be modified.
    As Swift uses type inference, this array's elements will be of type `String`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用`var`关键字意味着可以修改数组的元素。由于Swift使用类型推断，这个数组的元素类型将是`String`。
- en: Imagine that you need to check how many items you need to get at the store.
    In the next section, you'll learn how to determine the number of elements in an
    array.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你需要检查在商店需要购买多少项商品。在下一节中，你将学习如何确定数组中的元素数量。
- en: Checking the number of elements in an array
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查数组中的元素数量
- en: 'To find out how many elements there are in an array, use `count`. Type in and
    run the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出数组中有多少个元素，请使用`count`。输入并运行以下代码：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As the `shoppingList` array contains two elements, `2` is displayed in the Results
    area.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`shoppingList`数组包含两个元素，结果显示区域显示`2`。
- en: 'You can check to see if an array is empty by using `isEmpty`. Type in and run
    the following code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`isEmpty`来检查数组是否为空。输入并运行以下代码：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As the `shoppingList` array contains two elements, `false` is displayed in the
    Results area.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`shoppingList`数组包含两个元素，结果显示区域显示`false`。
- en: Tip
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is also possible to see if an array is empty by using `shoppingList.count
    == 0`, but using `shoppingList.isEmpty` offers better performance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过使用`shoppingList.count == 0`来检查数组是否为空，但使用`shoppingList.isEmpty`提供更好的性能。
- en: Imagine that your spouse called, and asked you if you can get chicken and cooking
    oil while you're at the store. In the next section, you'll see how to add elements
    to the end of an array, and at a specified array index.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你的配偶给你打电话，问你能否在商店时买鸡肉和食用油。在下一节中，你将看到如何向数组的末尾添加元素，以及在指定的数组索引处添加元素。
- en: Adding a new element to an array
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数组添加新元素
- en: 'You can add a new element to the end of an array by using `append(_:)`. Type
    in and run the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`append(_:)`向数组的末尾添加新元素。输入并运行以下代码：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`"Cooking Oil"` has been added to the end of the `shoppingList` array, which
    now contains three elements – "`Eggs"`, `"Milk"`, and `"Cooking Oil"`. This can
    be seen in the Results area.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`"Cooking Oil"`已被添加到`shoppingList`数组的末尾，现在该数组包含三个元素——`"Eggs"`、`"Milk"`和`"Cooking
    Oil"`。这可以在结果显示区域看到。'
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can also add a new element to an array with the `+` operator, using the
    following code: `shoppingList = shoppingList + ["Cooking Oil"]`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`+`运算符向数组添加新元素，以下代码：`shoppingList = shoppingList + ["Cooking Oil"]`。
- en: 'You can add a new item at a specified index using `insert(_:at:)`. Type and
    run the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`insert(_:at:)`在指定索引处添加新项目。输入并运行以下代码：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This inserts `"Chicken"` at index `1`, so now the `shoppingList` array contains
    `"Eggs"`, `"Chicken"`, `"Milk"`, and `"Cooking Oil"`. Note that `"Chicken"` is
    the second element in the array as the first element is at index `0`. This can
    be seen in the Results area.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在索引`1`处插入`"Chicken"`，因此现在`shoppingList`数组包含`"Eggs"`、`"Chicken"`、`"Milk"`和`"Cooking
    Oil"`。注意，`"Chicken"`是数组的第二个元素，因为第一个元素在索引`0`。这可以在结果显示区域看到。
- en: Imagine that you've got the first item on your shopping list, and now you need
    to know what's the next item in the list. In the next section, you'll see how
    to access a specific array element using the array index.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你已经买到了购物清单上的第一项，现在你需要知道列表中的下一项是什么。在下一节中，你将看到如何使用数组索引访问特定数组元素。
- en: Accessing an array element
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数组元素
- en: 'You can specify an array index to access a particular element. Type in and
    run the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定数组索引来访问特定元素。输入并运行以下代码：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This returns the array element stored at index `2`, and `"Milk"` is displayed
    in the Results area.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这返回存储在索引`2`处的数组元素，结果显示区域显示`"Milk"`。
- en: Imagine that your spouse called and asked you to get soy milk instead of milk.
    As this array was declared using the `var` keyword, you can modify the values
    stored in it. You'll learn how in the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你的配偶打电话让你买豆浆而不是牛奶。由于这个数组是使用`var`关键字声明的，你可以修改其中存储的值。你将在下一节中学习如何做到这一点。
- en: Assigning a new value to a particular index
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配新值给特定索引
- en: 'You can replace an existing array element by specifying the index and assigning
    a new value to it. Type in and run the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定索引并分配新值来替换现有的数组元素。输入并运行以下代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This replaces the value stored at index `2`, `"Milk"`, with `"Soy Milk"`. The
    `shoppingList` array now contains `"Eggs"`, `"Chicken"`, `"Soy Milk"`, and `"Cooking
    Oil"`, as shown in the Results area.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将替换存储在索引`2`的`"Milk"`处的值，用`"Soy Milk"`替换。现在`shoppingList`数组包含`"Eggs"`、`"Chicken"`、`"Soy
    Milk"`和`"Cooking Oil"`，如结果区域所示。
- en: Note that the index used must be valid. For instance, you can't use index `4`
    as the only valid indexes here are `0`, `1`, `2`, and `3`. Doing so would cause
    the program to crash.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用的索引必须是有效的。例如，你不能使用索引`4`，因为这里唯一的有效索引是`0`、`1`、`2`和`3`。这样做会导致程序崩溃。
- en: Imagine that your spouse called, and told you that there was chicken in the
    fridge, so you no longer have to get it. In the next section, you'll see two ways
    to remove elements from an array.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的配偶给你打电话，告诉你冰箱里有鸡肉，所以你不再需要购买它。在下一节中，你将看到两种从数组中移除元素的方法。
- en: Removing an element from an array
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数组中移除元素
- en: 'You can remove an element from an array by using `remove(at:)`. Type in and
    run the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`remove(at:)`从数组中移除一个元素。输入并运行以下代码：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This removes the item at index `1`, `"Chicken"`, from the `shoppingList` array,
    so now it contains `"Eggs"`, `"Soy Milk"`, and `"Cooking Oil"`. You can see this
    in the Results area.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从`shoppingList`数组中移除索引为`1`的元素`"Chicken"`，因此现在它包含`"Eggs"`、`"Soy Milk"`和`"Cooking
    Oil"`。你可以在结果区域中看到这一点。
- en: If you're removing the last item from the array, you can use `removeLast()`
    instead.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要从数组中移除最后一个元素，可以使用`removeLast()`。
- en: Imagine that you've gotten every item in the list, and you would like to go
    through your list again to make sure. You'll need to access every array element
    in turn and perform operations on each element. You'll see how to do this in the
    next section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经获取了列表中的每一项，并且你想再次遍历列表以确保无误。你需要依次访问数组中的每个元素并对每个元素执行操作。你将在下一节中看到如何做到这一点。
- en: Iterating over an array
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历数组
- en: 'Remember the `for-in` loop you studied in the previous chapter? You can use
    it to iterate over every element in an array. Type in and run the following code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 记得你在上一章中学到的`for-in`循环吗？你可以使用它来遍历数组中的每个元素。输入并运行以下代码：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This prints out every element in the array to the Debug area.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在调试区域中打印出数组中的每个元素。
- en: 'You can also use `1...`. Type in and run the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`1...`。输入并运行以下代码：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This prints out the elements of the array starting from the element at index
    `1` to the Debug area.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在调试区域中打印出从索引`1`开始的数组元素。
- en: You now know how to use an array to create an ordered list, such as a shopping
    list, and how to perform array operations. In the next section, let's look at
    how to store an unordered list of key-value pairs using a dictionary.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经知道如何使用数组创建一个有序列表，例如购物清单，以及如何执行数组操作。在下一节中，我们将探讨如何使用字典存储无序列表中的键值对。
- en: Understanding dictionaries
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解字典
- en: Let's say you're writing an *Address Book* app. You would need to store a list
    of names and their corresponding contact numbers. A dictionary would be perfect
    for this.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在编写一个*地址簿*应用。你需要存储一个包含姓名及其对应联系号码的列表。字典对于这个用途再合适不过了。
- en: 'A dictionary stores **key-value pairs** in an unordered list. Here''s what
    it looks like:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在无序列表中存储**键值对**。它看起来是这样的：
- en: '![Figure 5.2: Dictionary'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2：字典'
- en: '](img/Figure_5.02_B17469.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.02_B17469.jpg)'
- en: 'Figure 5.2: Dictionary'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：字典
- en: All keys must be of the same type and must be unique. All values must be of
    the same type, but are not necessarily unique. Keys and values don't have to be
    of the same type as each other. You use the key to get the corresponding value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所有键必须是同一类型，并且必须是唯一的。所有值也必须是同一类型，但不一定是唯一的。键和值不必是同一类型的。你使用键来获取相应的值。
- en: If you create a dictionary using the `let` keyword, its contents can't be changed
    after it has been created. If you want to change the contents after creation,
    use the `var` keyword.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`let`关键字创建字典，其内容在创建后不能更改。如果你想创建后更改内容，请使用`var`关键字。
- en: Let's look at how to work with dictionaries. You'll create a dictionary by assigning
    a value to it in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何处理字典。你将在下一节中通过给它赋值来创建一个字典。
- en: Creating a dictionary
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建字典
- en: 'Imagine that you''re creating an *Address Book* app. For this app, you''ll
    use a dictionary to store your contacts. Just like an array, you can create a
    new dictionary by declaring it and assigning an initial value to it. Add the following
    code to your playground and click the **Play/Stop** button to run it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在创建一个 *地址簿* 应用。对于这个应用，你将使用字典来存储你的联系人。就像数组一样，你可以通过声明并给它赋一个初始值来创建一个新的字典。将以下代码添加到你的沙盒中，然后点击
    **播放/停止** 按钮来运行它：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This instruction creates a dictionary variable named `contactList`. The assigned
    value, `["Shah": "+60123456789", "Aamir": "+0223456789" ]`, is a dictionary literal.
    It represents a dictionary with two elements. Each element is a key-value pair,
    with the contact name as the key and the contact number as the value. Note that
    since the contact name is the key field, it should be unique.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '这条指令创建了一个名为 `contactList` 的字典变量。分配的值，`["Shah": "+60123456789", "Aamir": "+0223456789"
    ]`，是一个字典字面量。它代表一个包含两个元素的字典。每个元素都是一个键值对，联系人姓名作为键，联系人电话号码作为值。请注意，由于联系人姓名是键字段，它应该是唯一的。'
- en: Since the `contactList` dictionary is a variable, you can change the contents
    of the dictionary after it has been created. Both key and value are of type `String`
    due to type inference.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `contactList` 字典是一个变量，你可以在创建后更改字典的内容。由于类型推断，键和值都是 `String` 类型。
- en: Imagine that your app has to display the total number of contacts. In the next
    section, you'll learn how to determine the number of elements in a dictionary.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的应用需要显示联系人的总数。在下一节中，你将学习如何确定字典中的元素数量。
- en: Checking the number of elements in a dictionary
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查字典中的元素数量
- en: 'To find out how many elements there are in a dictionary, use `count`. Type
    in and run the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出字典中有多少个元素，请使用 `count`。输入并运行以下代码：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As there are two elements in the `contactList` dictionary, `2` is displayed
    in the Results area.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `contactList` 字典中有两个元素，结果区域将显示 `2`。
- en: 'You can check whether a dictionary is empty by using `isEmpty`. Type in and
    run the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `isEmpty` 来检查字典是否为空。输入并运行以下代码：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Since the `contactList` dictionary has two elements, `false` is displayed in
    the Results area.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `contactList` 字典有两个元素，结果区域将显示 `false`。
- en: Tip
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is also possible to see if a dictionary is empty by using `contactlist.count
    == 0`, but using `contactList.isEmpty` offers better performance.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过使用 `contactlist.count == 0` 来检查字典是否为空，但使用 `contactList.isEmpty` 提供了更好的性能。
- en: Imagine that you just finished a meeting, and want to add a new contact to your
    app. As this dictionary was declared using the `var` keyword, you can add key-value
    pairs to it. You'll learn how in the next section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你刚刚结束了一个会议，并想在你的应用中添加一个新的联系人。由于这个字典是使用 `var` 关键字声明的，你可以向其中添加键值对。你将在下一节中学习如何操作。
- en: Adding a new element to a dictionary
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向字典中添加新元素
- en: 'To add a new element to a dictionary, provide a key and assign a value to it.
    Type in and run the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要向字典中添加新元素，提供一个键并为它分配一个值。输入并运行以下代码：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This adds a new key-value pair with the key `"Jane"` and the value `"+0229876543"`
    to the `contactList` dictionary. It now consists of `"Shah": "+60126789345"`,
    `"Aamir": "+0223456789"`, and `"Jane": "+0229876543"`. You can see this in the
    Results area.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '这将在 `contactList` 字典中添加一个新的键值对，键为 `"Jane"`，值为 `"+0229876543"`。现在它包括 `"Shah":
    "+60126789345"`，`"Aamir": "+0223456789"` 和 `"Jane": "+0229876543"`。你可以在结果区域看到这一点。'
- en: Imagine that you want to call one of your contacts, and you want the phone number
    for that contact. In the next section, you'll see how to access dictionary elements
    by specifying the key for the desired value.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想拨打其中一个联系人的电话，并需要该联系人的电话号码。在下一节中，你将看到如何通过指定键来访问所需值的字典元素。
- en: Accessing a dictionary element
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问字典元素
- en: 'You can specify a dictionary key to access its corresponding value. Type in
    and run the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以指定一个字典键来访问其对应值。输入并运行以下代码：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This returns the value for the key `"Shah"`, and `+60123456789` is displayed
    in the Results area.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回键 `"Shah"` 的值，并且 `+60123456789` 将在结果区域显示。
- en: Imagine that one of your contacts has a new phone, so you have to update the
    phone number for that contact. You can modify the key-value pairs stored in a
    dictionary. You'll learn how in the next section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的某个联系人换了一个新电话，因此你需要更新该联系人的电话号码。你可以修改存储在字典中的键值对。你将在下一节中学习如何操作。
- en: Assigning a new value to an existing key
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为现有键分配新值
- en: 'You can assign a new value to an existing key. Type and run the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以给现有的键分配一个新的值。输入并运行以下代码：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This assigns a new value to the key `"Shah"`. The `contactList` dictionary
    now contains `"Shah": "+60126789345"`, `"Aamir": "+0223456789"`, and `"Jane":
    "+0229876543"`. You can see this in the Results area.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '这将为键`"Shah"`分配一个新的值。现在`contactList`字典包含`"Shah": "+60126789345"`，`"Aamir": "+0223456789"`和`"Jane":
    "+0229876543"`。你可以在结果区域中看到这一点。'
- en: Imagine that you have to remove a contact from your app. Let's see how you can
    remove elements from a dictionary in the next section.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要在你的应用中删除一个联系人。让我们在下一节中看看如何从字典中删除元素。
- en: Removing an element from a dictionary
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从字典中删除元素
- en: 'To remove an element from a dictionary, assign `nil` to an existing key. Type
    in and run the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要从字典中删除一个元素，将`nil`赋给现有的键。输入并运行以下代码：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This removes the element with the key `"Jane"` from the `contactList` dictionary,
    and it now contains `"Shah": "+60126789345"` and `"Aamir": "+0223456789"`. You
    can see this in the Results area.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '这将从`contactList`字典中删除键为`"Jane"`的元素，现在它包含`"Shah": "+60126789345"`和`"Aamir":
    "+0223456789"`。你可以在结果区域中看到这一点。'
- en: 'If you want to retain the value you are removing, use `removeValue(for:Key)`
    instead. Type in and run the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要保留你正在删除的值，请使用`removeValue(for:Key)`代替。输入并运行以下代码：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This removes the element with the key `"Aamir"` from the `contactList` dictionary
    and assigns its value to `oldDictValue`. Now `oldDictValue` now contains `"+0223456789"`
    and the `contactList` dictionary contains `"Shah": "+60126789345"`. You can see
    this in the Results area.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '这将从`contactList`字典中删除键为`"Aamir"`的元素，并将它的值赋给`oldDictValue`。现在`oldDictValue`包含`"+0223456789"`，而`contactList`字典包含`"Shah":
    "+60126789345"`。你可以在结果区域中看到这一点。'
- en: Imagine that you would like to call each contact to wish them a happy new year.
    You'll have to access every dictionary element in turn and perform operations
    on each element. You'll see how to do this in the next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想要给每个联系人打电话，祝他们新年快乐。你必须依次访问字典中的每个元素并对每个元素执行操作。你将在下一节中看到如何做到这一点。
- en: Iterating over a dictionary
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历字典
- en: 'Just like arrays, you can use a `for-in` loop to iterate over every element
    in a dictionary. Type in and run the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 就像数组一样，你可以使用`for-in`循环来遍历字典中的每个元素。输入并运行以下代码：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This prints every element in the dictionary to the Debug area. Since dictionaries
    are unordered, you may get the results in a different order when you run this
    code again.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将字典中的每个元素打印到调试区域。由于字典是无序的，当你再次运行此代码时，你可能会得到不同的结果顺序。
- en: You know now how to use a dictionary to create an unordered list of key-value
    pairs, such as a contact list, and how to perform dictionary operations. In the
    next section, let's see how to store an unordered list of values in a set.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何使用字典来创建一个无序的键值对列表，例如联系人列表，以及如何执行字典操作。在下一节中，我们将看看如何在一个集合中存储无序的值列表。
- en: Understanding sets
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解集合
- en: Let's say you're writing a *Movies* app and you want to store a list of movie
    genres. You could do this with a set.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在编写一个*电影*应用，并且想要存储电影类型列表。你可以使用集合来实现这一点。
- en: 'A set stores values in an unordered list. Here''s what it looks like:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合以无序列表的形式存储值。这里是其外观：
- en: '![Figure 5.3: Set'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.3: Set]'
- en: '](img/Figure_5.03_B17469.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.03_B17469.jpg]'
- en: 'Figure 5.3: Set'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 5.3: Set]'
- en: All values are of the same type.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 所有值都是同一类型。
- en: If you create a set using the `let` keyword, its contents can't be changed after
    it has been created. If you want to change the contents after creation, use the
    `var` keyword.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`let`关键字创建一个集合，那么一旦创建，其内容就不能更改。如果你想创建后更改内容，请使用`var`关键字。
- en: Let's look at how to work with sets. You'll create a set by assigning a value
    to it in the next section.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何与集合一起工作。你将在下一节中通过给它赋值来创建一个集合。
- en: Creating a set
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个集合
- en: 'Imagine that you are creating a *Movies* app and you would like to store movie
    genres in your app. As you have seen for arrays and dictionaries, you can create
    a set by declaring it and assigning a new value to it. Add the following code
    to your playground and click the **Play/Stop** button to run it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在创建一个*电影*应用，并且想要在你的应用中存储电影类型。正如你所看到的，对于数组和字典，你可以通过声明并给它赋新值来创建一个集合。将以下代码添加到你的游乐场中，并点击**播放/停止**按钮来运行它：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This instruction creates a set variable named `movieGenres`. Note that the set
    literal assigned to it, `["Horror", "Action", "Romantic Comedy"]` has the same
    format as an array literal, so you use type annotation to set the type of `movieGenres`
    to `Set`. Otherwise, Swift's type inference will create an array variable and
    not a set variable.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此指令创建了一个名为 `movieGenres` 的集合变量。请注意，分配给它的集合字面量 `["Horror", "Action", "Romantic
    Comedy"]` 与数组字面量的格式相同，因此你使用类型注解将 `movieGenres` 的类型设置为 `Set`。否则，Swift 的类型推断将创建一个数组变量而不是集合变量。
- en: Using the `var` keyword here means that the set's contents can be modified.
    This set's elements will be of type `String` due to type inference.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `var` 关键字意味着集合的内容可以被修改。由于类型推断，此集合的元素类型将为 `String`。
- en: Imagine that you need to show the total number of genres in your app. Let's
    see how to find the number of elements there are in a set in the next section.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你需要显示你应用中的总类别数。让我们在下一节看看如何找到集合中元素的数量。
- en: Checking the number of elements in a set
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查集合中的元素数量
- en: 'To find out how many elements there are in a set, use `count`. Type in and
    run the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出集合中有多少元素，请使用 `count`。输入并运行以下代码：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since the `movieGenres` set contains three elements, `3` is displayed in the
    Results area.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `movieGenres` 集合包含三个元素，结果区域中显示 `3`。
- en: 'You can check whether a set is empty by using `isEmpty`. Type in and run the
    following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `isEmpty` 来检查一个集合是否为空。输入并运行以下代码：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As `movieGenres` contains three elements, `false` is displayed in the Results
    area.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `movieGenres` 包含三个元素，结果区域中显示 `false`。
- en: Tip
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is also possible to see if a set is empty by using `movieGenres.count ==
    0`, but using `movieGenres.isEmpty` offers better performance.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过使用 `movieGenres.count == 0` 来检查一个集合是否为空，但使用 `movieGenres.isEmpty` 提供更好的性能。
- en: Imagine that users of your app can add more genres to it. As this set was declared
    using the `var` keyword, you can add elements to it. You'll learn how in the next
    section.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你应用的用户可以添加更多类别。由于这个集合是使用 `var` 关键字声明的，你可以向其中添加元素。你将在下一节中学习如何做到这一点。
- en: Adding a new element to a set
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向集合中添加一个新元素
- en: 'You can add a new element to a set by using `insert(_:)`. Type in and run the
    following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `insert(_:)` 来向集合中添加一个新元素。输入并运行以下代码：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This adds a new item, `"War"`, to the `movieGenres` set, which now contains
    `"Horror"`, `"Romantic Comedy"`, `"War"`, and `"Action"`. This is displayed in
    the Results area.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将一个新的项目 `"War"` 添加到 `movieGenres` 集合中，现在它包含 `"Horror"`、`"Romantic Comedy"`、`"War"`
    和 `"Action"`。这在结果区域中显示。
- en: Imagine that a user would like to know if a certain genre is available in your
    app. In the next section, you'll learn how to check if an element is in a set.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一个用户想知道某个类别是否在你的应用中可用。在下一节中，你将学习如何检查一个元素是否在集合中。
- en: Checking whether a set contains an element
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查集合是否包含一个元素
- en: 'To check whether a set contains an element, use `contains(_:)`. Type in and
    run the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个集合是否包含一个元素，请使用 `contains(_:)`。输入并运行以下代码：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As `"War"` is one of the elements inside the `movieGenres` set, `true` is displayed
    in the Results area.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `"War"` 是 `movieGenres` 集合中的一个元素，结果区域中显示 `true`。
- en: Imagine that a user wants to remove a genre from his list of genres. Let's see
    how to remove items from a set that are no longer needed in the next section.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，一个用户想要从他的类别列表中移除一个类别。让我们在下一节看看如何从集合中移除不再需要的项目。
- en: Removing an item from a set
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从集合中移除一个项目
- en: 'To remove an item from a set, use `remove(_:)`. The value you are removing
    can be assigned to a variable or a constant. If the value doesn''t exist in the
    set, `nil` will be returned. Type in and run the following code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要从集合中移除一个项目，请使用 `remove(_:)`。你正在移除的值可以分配给一个变量或一个常量。如果该值不在集合中，将返回 `nil`。输入并运行以下代码：
- en: '[PRE24]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`"Action"` is removed from the `movieGenres` set and assigned to `oldSetValue`,
    and the `movieGenres` set now contains `"Horror"`, `"Romantic Comedy"`, and `"War"`.
    You''ll see this displayed in the Results area.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`"Action"` 从 `movieGenres` 集合中移除并分配给 `oldSetValue`，`movieGenres` 集合现在包含 `"Horror"`、`"Romantic
    Comedy"` 和 `"War"`。你将在结果区域中看到这一点。'
- en: To remove all of the elements from a set, use `removeAll()`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要从集合中移除所有元素，请使用 `removeAll()`。
- en: Imagine that you would like to display all the genres your app has as recommendations
    for your app's users. You can iterate over and perform operations on each set
    element. Let's see how to do so in the next section.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你想要显示你应用中所有的类别作为你应用用户的推荐。你可以遍历并执行每个集合元素的运算。让我们在下一节看看如何做到这一点。
- en: Iterating over a set
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历集合
- en: 'As with arrays and dictionaries, you can use a `for-in` loop to iterate over
    every element in a set. Type in and run the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与数组和大纲类似，您可以使用`for-in`循环遍历集合中的每个元素。输入并运行以下代码：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You should see each set element in the Debug area. Since sets are unsorted,
    you may get the results in a different order when you run this code again.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在调试区域看到每个集合元素。由于集合是无序的，您在再次运行此代码时可能会得到不同的结果顺序。
- en: Imagine that you want your app to perform operations on the genres you like
    with the genres that another person likes. In the next section, you will learn
    about the various operations that you can do with sets in Swift.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望您的应用程序对您喜欢的类型与另一个人喜欢的类型进行操作。在下一节中，您将了解在Swift中使用集合可以执行的各种操作。
- en: Exploring Set operations
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索集合运算
- en: 'It''s easy to perform set operations such as **union**, **intersection**, **subtracting**,
    and **symmetric difference**. Type in and run the following code:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 执行集合运算，如**并集**、**交集**、**减集**和**对称差集**非常简单。输入并运行以下代码：
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here, you are performing set operations on two sets, `movieGenres` and `movieGenres2`.
    Let''s see the results of each set operation:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您正在对两个集合`movieGenres`和`movieGenres2`执行集合运算。让我们看看每个集合运算的结果：
- en: '`union(_:)` returns a new set containing all of the values in both sets, so
    `{"Horror", "Romantic Comedy", "War", "Science Fiction", "Fantasy"}` will be displayed
    in the Results area.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`union(_:)` 返回一个新集合，包含两个集合中的所有值，因此`{"Horror", "Romantic Comedy", "War", "Science
    Fiction", "Fantasy"}`将在结果区域显示。'
- en: '`intersection(_:)` returns a new set containing only the values common to both
    sets, so `{"War"}` will be displayed in the Results area.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intersection(_:)` 返回一个新集合，仅包含两个集合共有的值，因此`{"War"}`将在结果区域显示。'
- en: '`subtracting(_:)` returns a new set without the values in the specified set,
    so `{"Horror", "Romantic Comedy"}` will be displayed in the Results area.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subtracting(_:)` 返回一个新集合，其中不包含指定集合中的值，因此`{"Horror", "Romantic Comedy"}`将在结果区域显示。'
- en: '`symmetricDifference(_:)` returns a new set without the values common to both
    sets, so `{"Horror", "Romantic Comedy", "Science Fiction", "Fantasy"}` will be
    displayed in the Results area.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symmetricDifference(_:)` 返回一个新集合，其中不包含两个集合共有的值，因此`{"Horror", "Romantic Comedy",
    "Science Fiction", "Fantasy"}`将在结果区域显示。'
- en: Imagine that you want your app to compare the genres you like with the genres
    that another person likes. In the next section, you'll learn how to check if a
    set is equal to another set, is part of another set, or has nothing in common
    with another set.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您希望您的应用程序比较您喜欢的类型与另一个人喜欢的类型。在下一节中，您将了解如何检查一个集合是否等于另一个集合，是否是另一个集合的一部分，或者与另一个集合没有任何共同点。
- en: Exploring set membership and equality
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索集合成员和相等性
- en: 'It''s easy to check if a set is equal to, a **subset**, a **superset**, or
    a **disjoint** of another set. Type in and run the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一个集合是否等于、是另一个集合的**子集**、**超集**或**不相交**的另一个集合非常简单。输入并运行以下代码：
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s see how this code works:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这段代码是如何工作的：
- en: The `isEqual` operator (`==`) checks whether all the members of one set are
    the same as those of another set. Since not all the members of the `movieGenres`
    set are the same as those in the `movieGenres2` set, `false` will be displayed
    in the Results area.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isEqual`运算符（`==`）检查一个集合的所有成员是否与另一个集合的成员相同。由于`movieGenres`集合的并非所有成员都与`movieGenres2`集合中的成员相同，结果区域将显示`false`。'
- en: '`isSubset(of:)` checks whether a set is a subset of another set. Since all
    the members of the `movieGenresSubset` set is in the `movieGenres` set, `true`
    will be displayed in the Results area.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSubset(of:)` 检查一个集合是否是另一个集合的子集。由于`movieGenresSubset`集合的所有成员都在`movieGenres`集合中，结果区域将显示`true`。'
- en: '`isSuperset(of:)` checks whether a set is a superset of another set. Since
    all the members of the `movieGenres` set are in the `movieGenresSuperset` set,
    `true` will be displayed in the Results area.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isSuperset(of:)` 检查一个集合是否是另一个集合的超集。由于`movieGenres`集合的所有成员都在`movieGenresSuperset`集合中，结果区域将显示`true`。'
- en: '`isDisjoint(with:)` checks whether a set has no values in common with another
    set. Since the `movieGenresDisjoint` set has no members in common with the `movieGenres`
    set, `true` will be displayed in the Results area.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isDisjoint(with:)` 检查一个集合是否与另一个集合没有共同值。由于`movieGenresDisjoint`集合与`movieGenres`集合没有共同成员，结果区域将显示`true`。'
- en: You know now how to use a set to create an unordered list of values, such as
    a list of movie genres, and how to perform set operations. This concludes the
    chapter on collection types. Well done!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道了如何使用集合来创建一个无序列表，例如电影类型列表，以及如何执行集合操作。这标志着集合类型章节的结束。做得好！
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you looked at collection types in Swift. First you learned
    about arrays. This allows you to use an ordered list of values to represent an
    item like a shopping list, and perform operations on it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Swift 中的集合类型。首先，你了解了数组。这让你可以使用有序列表来表示像购物清单这样的项目，并对它进行操作。
- en: Next, you learned about dictionaries. This allows you to use an unordered list
    of key-value pairs to represent an item like a contact list, and perform operations
    on it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你学习了字典。这让你可以使用无序列表来表示像联系人列表这样的项目，并对它进行操作。
- en: Finally, you learned about sets. This allows you to use an unordered list of
    values to represent an item like a movie genre list, and perform operations on
    it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了集合。这让你可以使用无序列表来表示像电影类型列表这样的项目，并对它进行操作。
- en: In the next chapter, you will study how to group a set of instructions together
    using functions. This is handy when you want to execute a set of instructions
    multiple times in your program.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用函数将一组指令组合在一起。当你想在程序中多次执行一组指令时，这非常有用。
