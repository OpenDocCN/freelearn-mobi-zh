- en: '*Chapter 5*: Collection Types'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've learned quite a lot at this point! You can now create a program that
    stores data in constants or variables and performs operations on them, and you
    can control the flow using conditionals and loops. But so far, you've mostly been
    storing single values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn ways to store collections of values. Swift
    has three collection types: **arrays**, which store an ordered list of values;
    **dictionaries**, which store an unordered list of key-value pairs; and **sets**,
    which store an unordered list of values.'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned how to create arrays, dictionaries,
    and sets, and how to perform operations on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding dictionaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Xcode playground for this chapter is in the `Chapter05` folder of the code
    bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3H5blc2](https://bit.ly/3H5blc2)'
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to start from scratch, create a new playground and name it `CollectionTypes`.
    You can type in and run all of the code in this chapter as you go along.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: To find out more about arrays, dictionaries, and sets, visit [https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html](https://docs.swift.org/swift-book/LanguageGuide/CollectionTypes.html).
  prefs: []
  type: TYPE_NORMAL
- en: The first collection type you will learn about are arrays, which lets you store
    information in an ordered list.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say you want to store the following:'
  prefs: []
  type: TYPE_NORMAL
- en: List of items to buy at a convenience store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chores that you have to do every month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arrays would be suitable for this. An array stores values in an ordered list.
    Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: Array'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.1: Array'
  prefs: []
  type: TYPE_NORMAL
- en: Values must be of the same type. You can access any value in an array by using
    the array index, which starts with `0`.
  prefs: []
  type: TYPE_NORMAL
- en: If you create an array using the `let` keyword, its contents can't be changed
    after it has been created. If you want to change an array's contents after creation,
    use the `var` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to work with arrays. You'll create an array by assigning a value
    to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In previous chapters, you created a constant or variable by declaring it and
    assigning an initial value to it. You can create an array the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine that your spouse has asked you to get some items from a convenience
    store. Let''s implement a shopping list using an array. Add the following code
    to your playground and click the **Play/Stop** button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This instruction creates an array variable named `shoppingList`. The assigned
    value, `["Eggs", "Milk"]`, is an array `String`, with `"Eggs"` at index `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `var` keyword here means that the array's contents can be modified.
    As Swift uses type inference, this array's elements will be of type `String`.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you need to check how many items you need to get at the store.
    In the next section, you'll learn how to determine the number of elements in an
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the number of elements in an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find out how many elements there are in an array, use `count`. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As the `shoppingList` array contains two elements, `2` is displayed in the Results
    area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check to see if an array is empty by using `isEmpty`. Type in and run
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As the `shoppingList` array contains two elements, `false` is displayed in the
    Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to see if an array is empty by using `shoppingList.count
    == 0`, but using `shoppingList.isEmpty` offers better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that your spouse called, and asked you if you can get chicken and cooking
    oil while you're at the store. In the next section, you'll see how to add elements
    to the end of an array, and at a specified array index.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new element to an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add a new element to the end of an array by using `append(_:)`. Type
    in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`"Cooking Oil"` has been added to the end of the `shoppingList` array, which
    now contains three elements â€“ "`Eggs"`, `"Milk"`, and `"Cooking Oil"`. This can
    be seen in the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also add a new element to an array with the `+` operator, using the
    following code: `shoppingList = shoppingList + ["Cooking Oil"]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a new item at a specified index using `insert(_:at:)`. Type and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This inserts `"Chicken"` at index `1`, so now the `shoppingList` array contains
    `"Eggs"`, `"Chicken"`, `"Milk"`, and `"Cooking Oil"`. Note that `"Chicken"` is
    the second element in the array as the first element is at index `0`. This can
    be seen in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you've got the first item on your shopping list, and now you need
    to know what's the next item in the list. In the next section, you'll see how
    to access a specific array element using the array index.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing an array element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can specify an array index to access a particular element. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This returns the array element stored at index `2`, and `"Milk"` is displayed
    in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that your spouse called and asked you to get soy milk instead of milk.
    As this array was declared using the `var` keyword, you can modify the values
    stored in it. You'll learn how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a new value to a particular index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can replace an existing array element by specifying the index and assigning
    a new value to it. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This replaces the value stored at index `2`, `"Milk"`, with `"Soy Milk"`. The
    `shoppingList` array now contains `"Eggs"`, `"Chicken"`, `"Soy Milk"`, and `"Cooking
    Oil"`, as shown in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the index used must be valid. For instance, you can't use index `4`
    as the only valid indexes here are `0`, `1`, `2`, and `3`. Doing so would cause
    the program to crash.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that your spouse called, and told you that there was chicken in the
    fridge, so you no longer have to get it. In the next section, you'll see two ways
    to remove elements from an array.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an element from an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can remove an element from an array by using `remove(at:)`. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This removes the item at index `1`, `"Chicken"`, from the `shoppingList` array,
    so now it contains `"Eggs"`, `"Soy Milk"`, and `"Cooking Oil"`. You can see this
    in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: If you're removing the last item from the array, you can use `removeLast()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you've gotten every item in the list, and you would like to go
    through your list again to make sure. You'll need to access every array element
    in turn and perform operations on each element. You'll see how to do this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over an array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the `for-in` loop you studied in the previous chapter? You can use
    it to iterate over every element in an array. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This prints out every element in the array to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `1...`. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This prints out the elements of the array starting from the element at index
    `1` to the Debug area.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use an array to create an ordered list, such as a shopping
    list, and how to perform array operations. In the next section, let's look at
    how to store an unordered list of key-value pairs using a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding dictionaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say you're writing an *Address Book* app. You would need to store a list
    of names and their corresponding contact numbers. A dictionary would be perfect
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dictionary stores **key-value pairs** in an unordered list. Here''s what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2: Dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.2: Dictionary'
  prefs: []
  type: TYPE_NORMAL
- en: All keys must be of the same type and must be unique. All values must be of
    the same type, but are not necessarily unique. Keys and values don't have to be
    of the same type as each other. You use the key to get the corresponding value.
  prefs: []
  type: TYPE_NORMAL
- en: If you create a dictionary using the `let` keyword, its contents can't be changed
    after it has been created. If you want to change the contents after creation,
    use the `var` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to work with dictionaries. You'll create a dictionary by assigning
    a value to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine that you''re creating an *Address Book* app. For this app, you''ll
    use a dictionary to store your contacts. Just like an array, you can create a
    new dictionary by declaring it and assigning an initial value to it. Add the following
    code to your playground and click the **Play/Stop** button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This instruction creates a dictionary variable named `contactList`. The assigned
    value, `["Shah": "+60123456789", "Aamir": "+0223456789" ]`, is a dictionary literal.
    It represents a dictionary with two elements. Each element is a key-value pair,
    with the contact name as the key and the contact number as the value. Note that
    since the contact name is the key field, it should be unique.'
  prefs: []
  type: TYPE_NORMAL
- en: Since the `contactList` dictionary is a variable, you can change the contents
    of the dictionary after it has been created. Both key and value are of type `String`
    due to type inference.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that your app has to display the total number of contacts. In the next
    section, you'll learn how to determine the number of elements in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the number of elements in a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find out how many elements there are in a dictionary, use `count`. Type
    in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As there are two elements in the `contactList` dictionary, `2` is displayed
    in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether a dictionary is empty by using `isEmpty`. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Since the `contactList` dictionary has two elements, `false` is displayed in
    the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to see if a dictionary is empty by using `contactlist.count
    == 0`, but using `contactList.isEmpty` offers better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you just finished a meeting, and want to add a new contact to your
    app. As this dictionary was declared using the `var` keyword, you can add key-value
    pairs to it. You'll learn how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new element to a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a new element to a dictionary, provide a key and assign a value to it.
    Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a new key-value pair with the key `"Jane"` and the value `"+0229876543"`
    to the `contactList` dictionary. It now consists of `"Shah": "+60126789345"`,
    `"Aamir": "+0223456789"`, and `"Jane": "+0229876543"`. You can see this in the
    Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you want to call one of your contacts, and you want the phone number
    for that contact. In the next section, you'll see how to access dictionary elements
    by specifying the key for the desired value.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a dictionary element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can specify a dictionary key to access its corresponding value. Type in
    and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This returns the value for the key `"Shah"`, and `+60123456789` is displayed
    in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that one of your contacts has a new phone, so you have to update the
    phone number for that contact. You can modify the key-value pairs stored in a
    dictionary. You'll learn how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a new value to an existing key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can assign a new value to an existing key. Type and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This assigns a new value to the key `"Shah"`. The `contactList` dictionary
    now contains `"Shah": "+60126789345"`, `"Aamir": "+0223456789"`, and `"Jane":
    "+0229876543"`. You can see this in the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you have to remove a contact from your app. Let's see how you can
    remove elements from a dictionary in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an element from a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove an element from a dictionary, assign `nil` to an existing key. Type
    in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This removes the element with the key `"Jane"` from the `contactList` dictionary,
    and it now contains `"Shah": "+60126789345"` and `"Aamir": "+0223456789"`. You
    can see this in the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to retain the value you are removing, use `removeValue(for:Key)`
    instead. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This removes the element with the key `"Aamir"` from the `contactList` dictionary
    and assigns its value to `oldDictValue`. Now `oldDictValue` now contains `"+0223456789"`
    and the `contactList` dictionary contains `"Shah": "+60126789345"`. You can see
    this in the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you would like to call each contact to wish them a happy new year.
    You'll have to access every dictionary element in turn and perform operations
    on each element. You'll see how to do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over a dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like arrays, you can use a `for-in` loop to iterate over every element
    in a dictionary. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This prints every element in the dictionary to the Debug area. Since dictionaries
    are unordered, you may get the results in a different order when you run this
    code again.
  prefs: []
  type: TYPE_NORMAL
- en: You know now how to use a dictionary to create an unordered list of key-value
    pairs, such as a contact list, and how to perform dictionary operations. In the
    next section, let's see how to store an unordered list of values in a set.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say you're writing a *Movies* app and you want to store a list of movie
    genres. You could do this with a set.
  prefs: []
  type: TYPE_NORMAL
- en: 'A set stores values in an unordered list. Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: Set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.3: Set'
  prefs: []
  type: TYPE_NORMAL
- en: All values are of the same type.
  prefs: []
  type: TYPE_NORMAL
- en: If you create a set using the `let` keyword, its contents can't be changed after
    it has been created. If you want to change the contents after creation, use the
    `var` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at how to work with sets. You'll create a set by assigning a value
    to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine that you are creating a *Movies* app and you would like to store movie
    genres in your app. As you have seen for arrays and dictionaries, you can create
    a set by declaring it and assigning a new value to it. Add the following code
    to your playground and click the **Play/Stop** button to run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This instruction creates a set variable named `movieGenres`. Note that the set
    literal assigned to it, `["Horror", "Action", "Romantic Comedy"]` has the same
    format as an array literal, so you use type annotation to set the type of `movieGenres`
    to `Set`. Otherwise, Swift's type inference will create an array variable and
    not a set variable.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `var` keyword here means that the set's contents can be modified.
    This set's elements will be of type `String` due to type inference.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you need to show the total number of genres in your app. Let's
    see how to find the number of elements there are in a set in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the number of elements in a set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find out how many elements there are in a set, use `count`. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since the `movieGenres` set contains three elements, `3` is displayed in the
    Results area.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether a set is empty by using `isEmpty`. Type in and run the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As `movieGenres` contains three elements, `false` is displayed in the Results
    area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to see if a set is empty by using `movieGenres.count ==
    0`, but using `movieGenres.isEmpty` offers better performance.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that users of your app can add more genres to it. As this set was declared
    using the `var` keyword, you can add elements to it. You'll learn how in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new element to a set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add a new element to a set by using `insert(_:)`. Type in and run the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This adds a new item, `"War"`, to the `movieGenres` set, which now contains
    `"Horror"`, `"Romantic Comedy"`, `"War"`, and `"Action"`. This is displayed in
    the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a user would like to know if a certain genre is available in your
    app. In the next section, you'll learn how to check if an element is in a set.
  prefs: []
  type: TYPE_NORMAL
- en: Checking whether a set contains an element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check whether a set contains an element, use `contains(_:)`. Type in and
    run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As `"War"` is one of the elements inside the `movieGenres` set, `true` is displayed
    in the Results area.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a user wants to remove a genre from his list of genres. Let's see
    how to remove items from a set that are no longer needed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an item from a set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To remove an item from a set, use `remove(_:)`. The value you are removing
    can be assigned to a variable or a constant. If the value doesn''t exist in the
    set, `nil` will be returned. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`"Action"` is removed from the `movieGenres` set and assigned to `oldSetValue`,
    and the `movieGenres` set now contains `"Horror"`, `"Romantic Comedy"`, and `"War"`.
    You''ll see this displayed in the Results area.'
  prefs: []
  type: TYPE_NORMAL
- en: To remove all of the elements from a set, use `removeAll()`.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you would like to display all the genres your app has as recommendations
    for your app's users. You can iterate over and perform operations on each set
    element. Let's see how to do so in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over a set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with arrays and dictionaries, you can use a `for-in` loop to iterate over
    every element in a set. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You should see each set element in the Debug area. Since sets are unsorted,
    you may get the results in a different order when you run this code again.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you want your app to perform operations on the genres you like
    with the genres that another person likes. In the next section, you will learn
    about the various operations that you can do with sets in Swift.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Set operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s easy to perform set operations such as **union**, **intersection**, **subtracting**,
    and **symmetric difference**. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you are performing set operations on two sets, `movieGenres` and `movieGenres2`.
    Let''s see the results of each set operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`union(_:)` returns a new set containing all of the values in both sets, so
    `{"Horror", "Romantic Comedy", "War", "Science Fiction", "Fantasy"}` will be displayed
    in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intersection(_:)` returns a new set containing only the values common to both
    sets, so `{"War"}` will be displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subtracting(_:)` returns a new set without the values in the specified set,
    so `{"Horror", "Romantic Comedy"}` will be displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symmetricDifference(_:)` returns a new set without the values common to both
    sets, so `{"Horror", "Romantic Comedy", "Science Fiction", "Fantasy"}` will be
    displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine that you want your app to compare the genres you like with the genres
    that another person likes. In the next section, you'll learn how to check if a
    set is equal to another set, is part of another set, or has nothing in common
    with another set.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring set membership and equality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s easy to check if a set is equal to, a **subset**, a **superset**, or
    a **disjoint** of another set. Type in and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how this code works:'
  prefs: []
  type: TYPE_NORMAL
- en: The `isEqual` operator (`==`) checks whether all the members of one set are
    the same as those of another set. Since not all the members of the `movieGenres`
    set are the same as those in the `movieGenres2` set, `false` will be displayed
    in the Results area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isSubset(of:)` checks whether a set is a subset of another set. Since all
    the members of the `movieGenresSubset` set is in the `movieGenres` set, `true`
    will be displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isSuperset(of:)` checks whether a set is a superset of another set. Since
    all the members of the `movieGenres` set are in the `movieGenresSuperset` set,
    `true` will be displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isDisjoint(with:)` checks whether a set has no values in common with another
    set. Since the `movieGenresDisjoint` set has no members in common with the `movieGenres`
    set, `true` will be displayed in the Results area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You know now how to use a set to create an unordered list of values, such as
    a list of movie genres, and how to perform set operations. This concludes the
    chapter on collection types. Well done!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you looked at collection types in Swift. First you learned
    about arrays. This allows you to use an ordered list of values to represent an
    item like a shopping list, and perform operations on it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned about dictionaries. This allows you to use an unordered list
    of key-value pairs to represent an item like a contact list, and perform operations
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned about sets. This allows you to use an unordered list of
    values to represent an item like a movie genre list, and perform operations on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will study how to group a set of instructions together
    using functions. This is handy when you want to execute a set of instructions
    multiple times in your program.
  prefs: []
  type: TYPE_NORMAL
