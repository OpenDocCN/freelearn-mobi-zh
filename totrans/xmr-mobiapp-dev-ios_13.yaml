- en: Chapter 13. User Preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From time to time, it is useful for a user to be able to store preferences (such
    as ringtones for a contact). Thankfully, iOS provides a built-in preference system.
    This is fine if you only ever wish to write an app for iOS, but if the intention
    is to have an app that can be built for any platform that can use .NET, then a
    different approach is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter will be:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the built-in preference system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling your own preference system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The built-in system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start with, a special folder has to be added to your application called `Settings.bundle`
    that contains a file called `Root.plist`.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a normal file and the `.plist` file needs **Build Action** to be
    set as **Content**.
  prefs: []
  type: TYPE_NORMAL
- en: '![The built-in system](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `.plist` file is an XML file with entries stored in a regular dictionary
    objecting the `<key><type>` form, where type can be anything (such as `string`,
    `int`, and `double`).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, for creating a preference displayed as a `UISlider` class it would
    be stored as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is simple to understand, but the file can grow quickly, depending on how
    much information is being stored.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing to the .plist file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thankfully, it is simple to read from the `.plist` file. All that is required
    is the key to identify the value and the knowledge of the value type to properly
    call the related method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing to the file can be performed in two ways. The simplest is to just write
    to the file, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The other way is to call the `NSNotificationCenter` class, which broadcasts
    notifications to the application. The `NSUserDefaults` class uses this system
    to emit the `NSUserDefaultsDidChangeNotifcation` notification when the `Settings`
    values change. The good part here is that any `NSObject` class can be set to act
    as an observer for the notification. The observer provides a call back method
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Rolling your own settings system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While using the built-in settings system may seem useful, the point of using
    the Xamarin range of products is to be able to use a large amount of the same
    code on any platform that now supports `.NET`. While, at the time of writing,
    Windows Mobile is languishing at around three percent of the market share of all
    smart phones, Microsoft is unlikely to allow this to continue and will push their
    massive reserves into getting people to adopt their smart phones. If you want
    the pure mathematics, 97 percent of all smart phones can be coded using the .NET
    platform. (Blackberry has a port of mono for it, but it is not well supported
    and so can be discounted.)
  prefs: []
  type: TYPE_NORMAL
- en: This, therefore, requires a different strategy for storing user settings. We
    could use an SQLite database to store the details, but, as has been pointed out,
    each access to the sub system will cause a performance hit.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way is to create a `settings` class and **serialize** or **deserialize**
    the values as and when required. It is an extremely flexible approach and works
    wonderfully.
  prefs: []
  type: TYPE_NORMAL
- en: Serializing and deserializing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code is a very simple serializer and deserializer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will serialize and deserialize any object type that is put
    through it. This includes generic types such as `List<>` and `Dictionary<,>` objects.
    Do not pass in interface members or circular references (like an object that refers
    to an object that refers to the original object)—this will cause the serializer
    to crash.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Settings file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike using the `NSUserDefaults.plist` file, the settings file used here is
    still an XML file, but it doesn't need to be set as any particular type. As it
    is also a simple XML file, it can be copied and transferred to the same application
    on a different platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![Note](img/00001.gif)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So say you're configuring a file for the app on the iPhone and you want to run
    it on your Android phone as well. You will copy the `Settings` file and run the
    app on the Android phone and you instantly have the settings you had on the iPhone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Note](img/00001.gif)'
  prefs: []
  type: TYPE_IMG
- en: The `Settings` file consists of two classes—the `handler` class and the `data`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The handler class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The handler class handles setting up the `Settings` file as well as the accessors
    for the data class. I''ve reproduced the important parts in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adding an accessor
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following code is used for any type of object being passed into the configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding simple accessor can be cut and pasted as many times as required.
    The best thing is that the `List<>` object can be of any type—you can even have
    an entire list of classes in there!
  prefs: []
  type: TYPE_NORMAL
- en: The data class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The data class contains nothing except a list of accessors that marry up to
    the ones in the data handler class, and its also contains a default constructor
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, you have possibly the most flexible configuration and
    settings system available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'User settings are important—who in their right mind wants to have to set up
    everything time and again, or worse, for every update of the application? When
    updating an application, a file within the application folder will be kept and
    will always be available (except if the app is uninstalled). Stored user settings
    are not always guaranteed to persist between versions. We have seen in this chapter
    two completely different methods of storing configuration settings: the one supplied
    and the one created. There are other ways to do the same as I have demonstrated
    in this chapter.'
  prefs: []
  type: TYPE_NORMAL
