["```kt\n    compile \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\n    compile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\ncompile \"org.jetbrains.anko:anko-sdk25:$anko_version\" // sdk15,19,21,23 are also available\ncompile \"org.jetbrains.anko:anko-appcompat-v7:$anko_version\"\n```", "```kt\ncompile \"org.jetbrains.anko:anko-sqlite:$anko_version\"\n\n```", "```kt\ncompile \"org.jetbrains.anko:anko-coroutines:$anko_version\"\n\n```", "```kt\nclass Student(val age:Int)\n```", "```kt\nprivate fun Student.isAgeGreaterThan20(): Boolean {\n\n}\n```", "```kt\nprivate fun Student.isAgeGreaterThan20(): Boolean {\n    return this.age>20\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val studentA=Student(25)\n    println(studentA.isAgeGreaterThan20())\n}\n>\n//Output: true\n```", "```kt\nPicasso.with(context).from(url).into(imageView);\n```", "```kt\nimageView.loadImage(url)\nprivate fun ImageView.loadImage(url: String) {\n    Picasso.with(this.context).load(url).into(this)\n}\n```", "```kt\nprivate static final boolean isAgeGreaterThan20(@NotNull Student $receiver) {\n   return $receiver.getAge() > 20;\n}\n```", "```kt\nPreferenceManager.getDefaultSharedPreferences(this)\n```", "```kt\nval Context.preferences: SharedPreferences\n       get() = PreferenceManager\n       .getDefaultSharedPreferences(this)\ncontext.preferences.getInt(\"...\")\n```", "```kt\nclass Student(val age:Int){\n    companion object{\n\n    }\n}\n```", "```kt\nfun Student.Companion.sayHi(){\n    println(\"Hi\")\n}\n```", "```kt\nStudent.sayHi()\n```", "```kt\nval intent = Intent(this, SomeActivity::class.java)\nintent.putExtra(\"data\", 5)\nintent.setFlag(Intent.FLAG_ACTIVITY_SINGLE_TOP)\nstartActivity(intent)\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nstartActivity(intentFor<SomeActivity>(\"data\" to 5).singleTop())\n```", "```kt\nstartActivity<SomeActivity>(\"data\" to 5)\n```", "```kt\nstartActivity<SomeActivity>(\"data\" to 5, \"another_data\" to 10)\n```", "```kt\ninline fun <reified T: Any> Context.intentFor(vararg params: Pair<String, Any?>)\n```", "```kt\nfun <T> createIntent(ctx: Context, clazz: Class<out T>, params: Array<out Pair<String, Any?>>): Intent {\n    val intent = Intent(ctx, clazz)\n    if (params.isNotEmpty()) fillIntentArguments(intent, params)\n    return intent\n}\nprivate fun fillIntentArguments(intent: Intent, params: Array<out Pair<String, Any?>>) {\n    params.forEach {\n        val value = it.second\n        when (value) {\n            null -> intent.putExtra(it.first, null as Serializable?)\n            is Int -> intent.putExtra(it.first, value)\n            is Long -> intent.putExtra(it.first, value)\n            is CharSequence -> intent.putExtra(it.first, value)\n            is String -> intent.putExtra(it.first, value)\n            is Float -> intent.putExtra(it.first, value)\n            is Double -> intent.putExtra(it.first, value)\n            is Char -> intent.putExtra(it.first, value)\n            is Short -> intent.putExtra(it.first, value)\n            is Boolean -> intent.putExtra(it.first, value)\n            is Serializable -> intent.putExtra(it.first, value)\n            is Bundle -> intent.putExtra(it.first, value)\n            is Parcelable -> intent.putExtra(it.first, value)\n            is Array<*> -> when {\n                value.isArrayOf<CharSequence>() -> intent.putExtra(it.first, value)\n                value.isArrayOf<String>() -> intent.putExtra(it.first, value)\n                value.isArrayOf<Parcelable>() -> intent.putExtra(it.first, value)\n                else -> throw AnkoException(\"Intent extra ${it.first} has wrong type ${value.javaClass.name}\")\n            }\n            is IntArray -> intent.putExtra(it.first, value)\n            is LongArray -> intent.putExtra(it.first, value)\n            is FloatArray -> intent.putExtra(it.first, value)\n            is DoubleArray -> intent.putExtra(it.first, value)\n            is CharArray -> intent.putExtra(it.first, value)\n            is ShortArray -> intent.putExtra(it.first, value)\n            is BooleanArray -> intent.putExtra(it.first, value)\n            else -> throw AnkoException(\"Intent extra ${it.first} has wrong type ${value.javaClass.name}\")\n        }\n        return@forEach\n    }\n}\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nmakeCall(\"+9195XXXXXXXX\")\n```", "```kt\n<uses-permission android:name=\"android.permission.CALL_PHONE\"/>\n```", "```kt\nfun Context.makeCall(number: String): Boolean {\n    try {\n        val intent = Intent(Intent.ACTION_CALL, Uri.parse(\"tel:$number\"))\n        startActivity(intent)\n        return true\n    } catch (e: Exception) {\n        e.printStackTrace()\n        return false\n    }\n}\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nsendSMS(\"+9195XXXXXX\",\"Hi\")\n```", "```kt\n<uses-permission android:name=\"android.permission.SEND_SMS\"/>\n```", "```kt\nfun Context.sendSMS(number: String, text: String = \"\"): Boolean {\n    try {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"sms:$number\"))\n        intent.putExtra(\"sms_body\", text)\n        startActivity(intent)\n        return true\n    } catch (e: Exception) {\n        e.printStackTrace()\n        return false\n    }\n}\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nbrowse(\"http://www.google.com\")\n```", "```kt\nfun Context.browse(url: String, newTask: Boolean = false): Boolean {\n    try {\n        val intent = Intent(Intent.ACTION_VIEW)\n        intent.data = Uri.parse(url)\n        if (newTask) {\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        }\n        startActivity(intent)\n        return true\n    } catch (e: ActivityNotFoundException) {\n        e.printStackTrace()\n        return false\n    }\n}\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nshare(\"Hey\",\"Some subject\")\n```", "```kt\nshare(\"Hey\")\n```", "```kt\nfun Context.share(text: String, subject: String = \"\"): Boolean {\n    try {\n        val intent = Intent(android.content.Intent.ACTION_SEND)\n        intent.type = \"text/plain\"\n        intent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject)\n        intent.putExtra(android.content.Intent.EXTRA_TEXT, text)\n        startActivity(Intent.createChooser(intent, null))\n        return true\n    } catch (e: ActivityNotFoundException) {\n        e.printStackTrace()\n        return false\n    }\n}\n```", "```kt\ncompile \"org.jetbrains.anko:anko-commons:$anko_version\"\n```", "```kt\nemail(\"support@XXXXXX.com\",\"Subject\",\"Text\")\n```", "```kt\nfun Context.email(email: String, subject: String = \"\", text: String = \"\"): Boolean {\n    val intent = Intent(Intent.ACTION_SENDTO)\n    intent.data = Uri.parse(\"mailto:\")\n    intent.putExtra(Intent.EXTRA_EMAIL, arrayOf(email))\n    if (subject.isNotEmpty())\n        intent.putExtra(Intent.EXTRA_SUBJECT, subject)\n    if (text.isNotEmpty())\n        intent.putExtra(Intent.EXTRA_TEXT, text)\n    if (intent.resolveActivity(packageManager) != null) {\n        startActivity(intent)\n        return true\n    }\n    return false\n\n}\n```", "```kt\n compile \"org.jetbrains.anko:anko:$anko_version\"\n\n```", "```kt\nalert(\"A simple alert\",\"Alert\") {\n\n        }.show()\n```", "```kt\nalert(\"Would you like some action?\",\"Alert\") {\n    yesButton {\n         toast(\"Clicked on Yes\")\n    }\n    noButton {\n         toast(\"Clicked on No\")\n    }\n    neutralPressed(\"Meh\"){\n         toast(\"Not interest\")\n    }\n}.show()\n```", "```kt\nalert(\"Would you like some action?\",\"Alert\") {\n    positiveButton(\"Hell Yeah!\") {\n        toast(\"Clicked on Yes\")\n    }\n    negativeButton(\"No way!\") {\n        toast(\"Clicked on No\")\n    }\n    neutralPressed(\"Meh?\"){\n        toast(\"Not interest\")\n    }\n}.show()\n```", "```kt\nval dialog = progressDialog(message = \"Please wait a bit…\", title = \"Fetching data\")\ndialog.show()\n```", "```kt\nindeterminateProgressDialog(\"This is an indeterminate progress dialog\").show()\n```", "```kt\n compile \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\nval companies = listOf(\"Google\", \"Microsoft\", \"HP\", \"Apple\")\nselector(\"Where do you work?\", companies, { dialogInterface, i ->\n    toast(\"So you work at ${companies[i]}, right?\")\n})\n```", "```kt\nfun Context.selector(\n        title: CharSequence? = null,\n        items: List<CharSequence>,\n        onClick: (DialogInterface, Int) -> Unit\n) {\n    with(AndroidAlertBuilder(this)) {\n        if (title != null) {\n            this.title = title\n        }\n        items(items, onClick)\n        show()\n    }\n}\n```", "```kt\n compile \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\nalert(\"Hi, I'm Moss\", \"This, Jen, is the internet\") {\n    yesButton { toast(\"Oh…\") }\n    noButton {toast(\"Well...\") }\n}.show()\n```", "```kt\nalert(Appcompat, \"Hello, Jen.\").show()\n```", "```kt\nval dialog = progressDialog(message = \"Please stand by\", title = \"Fetching data\")\n\nindeterminateProgressDialog(\"You just have to wait indefinitely Jen.\").show()\n```", "```kt\ntoast(\"Hi! I'm Roy\")\ntoast(R.string.meet_roy)\nlongToast(\"We have been together for a long time.\")\n```", "```kt\nsnackbar(rootView, \"Hi! I'm Jen\")\nsnackbar(rootView, R.string.go_away_jen)\nlongSnackbar(rootView, \"I'm going to be here for a long time\")\nsnackbar(rootView, \"What do you want?\", \"Click me\") { doSomething() }\n```", "```kt\nlateinit var rootView: View\nlateinit var btn: Button\nlateinit var editText1: EditText\nlateinit var editText2: EditText\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    rootView = verticalLayout {\n        padding = dip(20)\n\n        editText1 = editText { \n            hint = \"What's your name?\"\n        }\n\n        editText2 = editText {\n            hint = \"What's your message?\"\n        }\n\n        btn = button(\"Click me\") {\n            onClick {\n                toast( \"Hey! Here is a toast for you.\")\n            }\n        }\n\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        MainActivityUI().setContentView(this)\n    }\n\n    class MainActivityUI : AnkoComponent<MainActivity> {\n        override fun createView(ui: AnkoContext<MainActivity>) = with(ui) {\n            verticalLayout {\n                padding = dip(20)\n\n                editText {\n                    hint = \"What's your name?\"\n                }\n\n                editText {\n                    hint = \"What's your message?\"\n                }\n\n                button(\"Click me\") {\n                    onClick {\n                        toast( \"Hey! Here is a toast for you.\")\n                    }\n                }\n\n            }\n        }\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"android.my_company.com.helloworldapp.HelloWorldActivity\">\n\n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:theme=\"@style/AppTheme.AppBarOverlay\">\n\n        <android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"?attr/actionBarSize\"\n            android:background=\"?attr/colorPrimary\"\n            app:popupTheme=\"@style/AppTheme.PopupOverlay\" />\n\n    </android.support.design.widget.AppBarLayout>\n\n    <LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:background=\"@color/white\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\">\n\n        <EditText\n            android:id=\"@+id/name\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"What is your name?\"/>\n\n        <EditText\n            android:id=\"@+id/message\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:hint=\"Your message\"/>\n\n        <Button\n            android:id=\"@+id/btn_send\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Send\"/>\n\n    </LinearLayout>\n\n</android.support.design.widget.CoordinatorLayout>\n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_hello_world)\n\n    var toolbar = find<Toolbar>(R.id.toolbar)\n    setSupportActionBar(toolbar)\n\n    var name = find<EditText>(R.id.name)\n    var msg = find<EditText>(R.id.message)\n    var buttonSend = find<Button>(R.id.btn_send)\n\n    buttonSend.onClick {\n        toast(\"Hello, ${name.text} we have recorded your message!\")\n    }\n}\n```", "```kt\ndependencies {\n    compile \"org.jetbrains.anko:anko-commons:$anko_version\"\n}\n```", "```kt\nclass MainActivity : AppCompatActivity(),AnkoLogger {\n```", "```kt\ninfo(“info message”)\n```", "```kt\nclass MainActivity : AppCompatActivity(),AnkoLogger {\n  override val loggerTag=\"CustomTag\"\n```", "```kt\nclass SomeActivity : Activity() {\n   private val log = AnkoLogger<SomeActivity>(this)\n   private val logWithASpecificTag = AnkoLogger(\"my_tag\")\n\n   private fun someMethod() {\n       log.warning(\"Big brother is watching you!\")\n   }\n}\n```", "```kt\ninfo(“info message”)\ninfo{“info message”}\n```", "```kt\n compile \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\ndip(dipValue)\nsp(spValue)\n```", "```kt\nverticalLayout {\n    padding = dip(20)\n\n    textView {\n        text = \"A big text view\"\n        textSize = 24f\n    }\n\n    button(\"Click me\") {\n        onClick {\n            toast( \"Hey! Here is a toast for you.\")\n        }\n    }.lparams(dip(280), sp(80))\n\n}\n```", "```kt\nif(Build.VERSION.SDK_INT>Build.VERSION_CODES.JELLY_BEAN){\n\n}\n```", "```kt\n compile \"org.jetbrains.anko:anko:$anko_version\"\n```", "```kt\ndoIfSdk(Build.VERSION_CODES.LOLLIPOP){\n    // Do something specific to version 21\n}\n```", "```kt\ndoFromSdk(Build.VERSION_CODES.LOLLIPOP){\n    // Execute this method on API >=21\n}\n```", "```kt\ninline fun doIfSdk(version: Int, f: () -> Unit) {\n    if (Build.VERSION.SDK_INT == version) f()\n}\n```", "```kt\ninline fun doFromSdk(version: Int, f: () -> Unit) {\n    if (Build.VERSION.SDK_INT >= version) f()\n}\n```"]