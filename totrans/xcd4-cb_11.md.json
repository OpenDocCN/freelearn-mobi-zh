["```swift\n    - (void)viewDidLoad{\n      [super viewDidLoad];\n\n      [[UIDevice\n      currentDevice]\n      beginGeneratingDeviceOrientationNotifications];\n\n      [[NSNotificationCenter defaultCenter]addObserver:self\n      selector:@selector(hasOrientationChanged:) \n      name:@\"UIDeviceOrientationDidChangeNotification\" \n      object:nil];\n    }\n    ```", "```swift\n    -(void)hasOrientationChanged:(NSNotification *)notification {\n      UIDeviceOrientationcurrentOrientation;\n      currentOrientation = [[UIDevice currentDevice]\n      orientation];\n\n      switch (currentOrientation) {\n        case UIDeviceOrientationFaceUp:\n          self.view.backgroundColor = [UIColor brownColor];\n          break;\n        case UIDeviceOrientationFaceDown:\n          self.view.backgroundColor = [UIColor magentaColor];\n          break;\n        case UIDeviceOrientationPortrait:\n          self.view.backgroundColor = [UIColor blueColor];\n          break;\n        case UIDeviceOrientationPortraitUpsideDown:\n          self.view.backgroundColor = [UIColor blueColor];\n          break;\n        case UIDeviceOrientationLandscapeLeft:\n          self.view.backgroundColor = [UIColor greenColor];\n          break;\n        case UIDeviceOrientationLandscapeRight:\n          self.view.backgroundColor = [UIColor redColor];\n          break;\n        default:\n          self.view.backgroundColor = [UIColor blackColor];\n          break;\n      }\n    }\n    ```", "```swift\n    - (void)viewDidLoad{\n      [super viewDidLoad];\n      [self becomeFirstResponder];\n      self.view.backgroundColor =[UIColor greenColor];\n    }\n    ```", "```swift\n    - (void)motionBegan:(UIEventSubtype)motion\n    withEvent:(UIEvent *)event {\n      if (event.type == UIEventTypeMotion && event.subtype == UIEventSubtypeMotionShake) {\n        self.view.backgroundColor =[UIColor yellowColor];\n        NSLog(@\"Device has been shaken\");\n      }\n    }\n    - (void)motionEnded:(UIEventSubtype)motion\n    withEvent:(UIEvent *)event {\n      if (event.type == UIEventTypeMotion && event.subtype == UIEventSubtypeMotionShake) {\n        // Declare an instance of our Alert View dialog\n        UIAlertView *dialog;\n\n        // Initialize our Alert View Window with options\n        dialog =[[UIAlertView alloc] \n        initWithTitle:@\"Device has been shaken\"\n        message:@\"I'm all shook up\" delegate:self\n        cancelButtonTitle:nil\n        otherButtonTitles:@\"OK\",nil];\n        // display our alert dialog\n        [dialog show];\n      }\n    }\n    - (void)motionCancelled:(UIEventSubtype)motion\n      withEvent:(UIEvent *)event {\n      self.view.backgroundColor = [UIColor blackColor];\n      NSLog(@\"Device shake has been cancelled\");\n    }\n    - (BOOL)canBecomeFirstResponder {\n      return YES;\n    }\n\n    // Responds to the options within our Alert View Dialog\n    -(void)alertView:(UIAlertView *)alertView\n    clickedButtonAtIndex:(NSInteger)buttonIndex {\n\n      NSString *buttonTitle =[alertView\n      buttonTitleAtIndex:buttonIndex];\n\n      if ([buttonTitle isEqualToString:@\"OK\"]) {\n        self.view.backgroundColor =[UIColor greenColor];\n        NSLog(@\"Device has stopped shaking\");\n        }\n    }\n    ```", "```swift\n    - (void) touchesBegan:(NSSet *)touches withEvent:(UIEvent*)event {\n      UITouch *touch = [[event allTouches] anyObject];\n      switch ([touch tapCount]){\n        case 1:\n          self.view.backgroundColor =[UIColor redColor];break;\n        case 2:\n          self.view.backgroundColor =[UIColorgreenColor];break;\n        case 3:\n          self.view.backgroundColor =[UIColor blueColor];break;\n        case 4:\n          self.view.backgroundColor =[UIColoryellowColor];break;\n        case 5:\n          self.view.backgroundColor =[UIColororangeColor];break;\n        default:\n          self.view.backgroundColor =[UIColor redColor];break;\n      }\n    }\n    ```", "```swift\n    //  ViewController.h\n    //  AccelGyroExample\n    //  Created by Steven F Daniel on 19/09/12.\n    //  Copyright (c) 2012 GenieSoft Studios. All rights reserved.\n\n    #import  <UIKit/UIKit.h>\n    #import <CoreMotion/CoreMotion.h>\n\n    @interface ViewController :  UIViewController  <UIAccelerometerDelegate> {\n     CMMotionManager *motionManager;\n    }\n\n    @property (nonatomic, retain) CMMotionManager *motionManager;\n\n    @end\n    ```", "```swift\n    #import \"ViewController.h\"\n\n    @interface ViewController ()\n    @end\n\n    @implementation ViewController\n\n    @synthesize motionManager;\n\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n\n     // Set up the accelerometer\n     UIAccelerometer *accelerometer = [UIAccelerometer\n     sharedAccelerometer];\n     accelerometer.updateInterval = 0.5;\n     accelerometer.delegate = self;\n    }\n    ```", "```swift\n    // Handle processing of the Accelerometer\n    -(void)accelerometer:(UIAccelerometer *)accelerometer didAccelerate:(UIAcceleration *)acceleration\n    {\n      UIAccelerationValue xAxes;\n      UIAccelerationValue yAxes;\n      UIAccelerationValue zAxes;\n\n      xAxes = acceleration.x;\n      yAxes = acceleration.y;\n      zAxes = acceleration.z;\n\n      if (xAxes > 0.5) {         // Moving Right\n        self.view.backgroundColor = [UIColor purpleColor];\n      } else if (xAxes < -0.5) { // Moving Left\n        self.view.backgroundColor = [UIColor redColor];\n      } else if (yAxes > 0.5) {  // Moving Upside Down\n        self.view.backgroundColor = [UIColor yellowColor];\n      } else if (yAxes < -0.5) { // Standing Up\n        self.view.backgroundColor = [UIColor blueColor];\n      } else if (zAxes > 0.5) {  // Facing Up\n        self.view.backgroundColor = [UIColor magentaColor];\n      } else if (zAxes < -0.5) { // Facing Down\n        self.view.backgroundColor = [UIColor greenColor];\n      }\n\n      double value = fabs(xAxes);\n      if (value > 1.0) { value = 1.0;}\n      self.view.alpha = value;\n    }\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n      // Set up the accelerometer\n      UIAccelerometer *accelerometer = [UIAccelerometer\n      sharedAccelerometer];\n      accelerometer.updateInterval = 0.5;\n      accelerometer.delegate = self;\n     // Perform a check to see if the device \n     // supports the Gyroscope feature\n     if ([self isGyroscopeAvailable] == YES) {\n     motionManager = [[CMMotionManager alloc] init];\n     [motionManager\n     startGyroUpdatesToQueue:[NSOperationQueue\n     currentQueue]\n     withHandler:^(CMGyroData *gyroData, NSError *error)\n     {\n     [self doGyroRotation:gyroData.rotationRate];\n     }];\n     }\n     else {\n     // Device does not support the gyroscope feature\n     NSLog(@\"No Gyroscope detected.\");\n     }\n    }\n    ```", "```swift\n    // Handles rotation of the Gyroscope\n    - (void)doGyroRotation:(CMRotationRate)rotation {\n      double value = \n      (fabs(rotation.x)+fabs(rotation.y) + fabs(rotation.z)) / 8.0;\n      if (value > 1.0) { value = 1.0;}\n      self.view.alpha = value;\n    }\n    // Checks to see if Gyroscope is available on the device\n    - (BOOL) isGyroscopeAvailable\n    {\n      #ifdef __IPHONE_4_0\n      CMMotionManager *gyroManager = \n      [[CMMotionManager alloc] init];\n      gyroManager.gyroUpdateInterval = 1.0 / 60.0;\n      BOOL gyroAvailable = gyroManager.gyroAvailable;\n      return gyroAvailable;\n      #else\n      return NO;\n      #endif\n    }\n    ```"]