["```java\nUSER     PID   PPID  VSIZE  RSS  PC  NAME\nroot            319   1     1537236 31324 S zygote\n….\nu0_a221   5993  319   1731636 41504 S com.whatsapp\nu0_a96    3018  319   1640252 29540 S com.dropbox.android\nu0_a255   4892  319   1583828 34552 S com.accuweather.android…\n```", "```java\npublic class MyThread extends Thread {\n    public void run() {\n        Log.d(\"Generic\", \"My Android Thread is running ...\");\n    }\n}\n```", "```java\nMyThread myThread = new MyThread();\nmyTread.start();\n```", "```java\npackage java.lang;\n\npublic interface Runnable {   \n    public abstract void run();\n}\n```", "```java\npublic class MyRunnable implements Runnable {\n\n    public void run(){\n        Log.d(\"Generic\",\"Running in the Thread \" +\n                        Thread.currentThread().getId());\n\t// Do your work here\n\t...\n    }\n}\n```", "```java\nThread thread = new Thread(new MyRunnable());\nthread.start();\n```", "```java\nint myInt = 2;\n...\npublic class MyThread extends Thread {\n\n    public void run() {\n         super.run();\n         myInt++;\n   }\n}\n...\nThread t1 = new MyThread();\nThread t2 = new MyThread();\nt1.start();\nt2.start();\n```", "```java\nObject lock = new Object();\npublic class MyThread extends Thread {\n    public void run() {\n        super.run();\n        synchronized(lock) {\n            myInt++;\n        }\n    }\n}\n```", "```java\nint myInt = 2;\nsynchronized void increment(){\n    myInt++;\n}\n...\npublic class IncrementThread extends Thread {\n    public void run() {\n        super.run();\n        increment();\n    }\n}\n```", "```java\nwhile(!readyToProcess) {\n  // do nothing .. busy waiting wastes processor time.\n}\n```", "```java\npublic class Logger {\n    LinkedList<String> queue = new LinkedList<String>();\n    private final int MAX_QUEUE_SIZE = 20;\n    private final int MAX_THREAD_COUNT = 10;\n```", "```java\npublic void start() {\n    // Creates the Loop as a Runnable\n    Runnable task = new Runnable() {\n        @Override\n        public void run() {\n            while(true) {\n                String message = pullMessage();\n                Log.d(Thread.currentThread().\n                         getName(),message);\n\t\t     // Do another processing\n             }\n         }\n     };\n    // Create a Group of Threads for processing\n    for(int i=0; i< MAX_THREAD_COUNT; i++){\n         new Thread(task).start();\n    }\n }\n```", "```java\n// Pulls a message from the queue\n// Only returns when a new message is retrieves\n// from the queue.\nprivate synchronized String pullMessage(){\n    while (queue.isEmpty()) {\n        try {\n            wait();\n        } catch (InterruptedException e) { ... }\n    }\n    return queue.pop();\n}\n// Push a new message to the tail of the queue if\n// the queue has available positions\npublic synchronized void pushMessage(String logMsg) {\n    if ( queue.size()< MAX_QUEUE_SIZE ) {\n        queue.push(logMsg);      \n        notifyAll();\n    }\n}\n```", "```java\nLogger logger =new Logger();\nlogger.start();\nfor ( int i=0; i< 10 ; i++) {\n    ...\n    logger.pushMessage(date+\" : \"+\"Log Message #\"+i);\n}\n```", "```java\nD/Thread-108(23915): <Date>: Log Message #0\nD/Thread-109(23915): ...: Log Message #1\nD/Thread-110(23915): ...: Log Message #2\nD/Thread-111(23915): ...: Log Message #3\n\n```", "```java\npublic interface Executor {\n  void execute(Runnable command);\n}\n```", "```java\npublic class MyRunnable implements Runnable {\n    public void run() {\n        Log.d(\"Generic\", \"Running From Thread \" +\n              Thread.currentThread().getId());   \n\t // Your Long Running Computation Task\n    }\n}\npublic void startWorking(){\n    Executor executor = Executors.newFixedThreadPool(5);\n    for ( int i=0; i < 20; i++ ) {\n        executor.execute(new MyRunnable());\n    }\n}\n```", "```java\npublic final void runOnUiThread (Runnable)\n```", "```java\n// Get the Views references\nButton search = (Button) findViewById(R.id.searchBut);\nfinal EditText word = (EditText) findViewById(R.id.wordEt);\n\n// When the User clicks on the search button \n// it searches for a synonym\nsearch.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // Runnable that Searchs for the synonym and\n        // and updates the UI.\n        Runnable searchTask = new Runnable() {\n            @Override\n            public void run() {\n                // Retrieves the synonym for the word\n                String result = searchSynomim(\n                   word.getText().toString());\n                // Runs the Runnable SetSynonymResult\n                // to publish the result on the UI Thread\n                runOnUiThread(new SetSynonymResult(result));\n            }\n        };\n        // Executes the search synonym an independent thread\n        Thread thread = new Thread(searchTask);\n        Thread.start();\n    }\n});\n```", "```java\nclass SetSynonymResult implements Runnable {\n    final String synonym;\n\n    SetSynonymResult(String synonym){\n      this.synonym = synonym;\n    }\n    public void run() {\n      TextView tv = (TextView)findViewById(R.id.synonymTv);\n      tv.setText(this.synonym);\n    }\n};\n```", "```java\n// Called every time a component starts the Service\n// The service arguments are passed over the intent\nint onStartCommand(Intent intent, int flags, int startId)\n\n// Used to initialize your Service resources\nvoid onCreate()\n\n// Used to release your Service resources\nvoid onDestroy()\n```", "```java\nint onStartCommand (Intent intent, int flags, int startId){\n    // Hand over the request processing to your\n    // background tasks\n...\n}\n```", "```java\n    public class MyService extends Service {\n\n        // Binder given to clients\n        private final IBinder mBinder = new MyBinder();\n\n         public class MyBinder extends Binder {\n             MyService getService() {\n                 // Return this instance of MyService\n                 // so clients can call public methods\n                 return MyService.this;\n            }\n        }\n        @Override\n\n        public IBinder onBind(Intent intent) {\n            return mBinder;\n        }\n\n         /** Method for clients */\n        public int myPublicMethod() {\n          //\n        }\n    ...\n    ```", "```java\n<service\n  android:name=\"SynonymService\"\n  android:process=\":my_synonnym_search_proc\"\n  android:icon=\"@drawable/icon\"\n  android:label=\"@string/service_name\"\n  >\n</service>\n```"]