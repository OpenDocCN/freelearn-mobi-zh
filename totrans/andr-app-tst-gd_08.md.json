["```java\n$ cd <path/to>/TemperatureConverter\n$ android update project --path $PWD --name TemperatureConverter\n\n```", "```java\n$ ant -Dadb.device.arg='-s emulator-5554' install\n\n```", "```java\n$ adb -s emulator-5554 shell am start -a android.intent.action.MAIN -n com.example.aatg.tc/.TemperatureConverterActivity\n\n```", "```java\n$ cd </path/to>/TemperatureConverterTest\n$ android update test-project --path $PWD --main <path/to>/TemperatureConverter\n\n```", "```java\n$ ant -Dadb.device.arg='-s emulator-5554' install\n\n```", "```java\n$ adb -e shell am instrument -w com.example.aatg.tc.test/android.test.InstrumentationTestRunner\n\n```", "```java\n$ cd <path/to>/git-repos\n$ mkdir TemperatureConverter\n$ cd TemperatureConverter\n$ git init\n$ cp -a <path/to>/TemperatureConverter/. .\n$ ant clean\n$ rm local.properties\n$ git add .\n$ git commit -m \"Initial commit\"\n\n```", "```java\n$ cd <path/to>/git-repos\n$ mkdir TemperatureConverterTest\n$ cd TemperatureConverterTest\n$ git init\n$ cp -a <path/to>/TemperatureConverterTest/. .\n$ ant clean\n$ rm local.properties\n$ git add .\n$ git commit -m \"Initial commit\"\n\n```", "```java\n$ java -jar hudson-2.0.0.war\n\n```", "```java\npackage com.neenbedankt.android.test;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport org.xmlpull.v1.XmlPullParserFactory;\nimport org.xmlpull.v1.XmlSerializer;\nimport android.os.Bundle;\nimport android.util.Log;\n/*\n* Copyright (C) 2010 Diego Torres Milano\n*\n* Base on previous work by\n* Copyright (C) 2007 Hugo Visser\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n* either express or implied.\n* See the License for the specific language governing permissions\n* and limitations under the License.\n*/\n/**\n* This test runner creates an xml in the files directory of\n* the application under test. The output is compatible with\n* that of the junitreport ant task, the format that is\n* understood by Hudson. Currently this implementation does not\n* implement the all aspects of the junitreport format, but\n* enough for Hudson to parse the test results.\n*/\npublic class XMLInstrumentationTestRunner extends android.test.InstrumentationTestRunner {\nprivate Writer mWriter;\nprivate XmlSerializer mTestSuiteSerializer;\nprivate long mTestStarted;\n\n```", "```java\n/**\n* Output file name.\n*/\nprivate String mOutFileName;\n/**\n* Outfile argument name.\n* This argument can be passed to the instrumentation using <code>-e</code>.\n*/\nprivate static final String OUT_FILE_ARG = \"outfile\";\n/**\n* Default output file name.\n*/\nprivate static final String OUT_FILE_DEFAULT = \"test-results.xml\";\n\n```", "```java\n@Override\npublic void onCreate(Bundle arguments) {\nif ( arguments != null ) {\nmOutFileName = arguments.getString(OUT_FILE_ARG);\n}\nif ( mOutFileName == null ) {\nmOutFileName = OUT_FILE_DEFAULT;\n}\nsuper.onCreate(arguments);\n}\n\n```", "```java\n@Override\npublic void onStart() {\ntry {\nFile dir = getTargetContext().getExternalFilesDir(null);\nif ( dir == null ) {\ndir = getTargetContext().getFilesDir();\n}\nfinal File outFile = new File(dir, mOutFileName);\nstartJUnitOutput(new FileWriter(outFile));\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\nsuper.onStart();\n}\n\n```", "```java\nvoid startJUnitOutput(Writer writer) {\ntry {\nmWriter = writer;\nmTestSuiteSerializer = newSerializer(mWriter);\nmTestSuiteSerializer.startDocument(null, null);\nmTestSuiteSerializer.startTag(null, \"testsuites\");\nmTestSuiteSerializer.startTag(null, \"testsuite\");\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\nprivate XmlSerializer newSerializer(Writer writer) {\ntry {\nXmlPullParserFactory pf = XmlPullParserFactory.newInstance();\nXmlSerializer serializer = pf.newSerializer();\nserializer.setOutput(writer);\nreturn serializer;\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\n}\n@Override\npublic void sendStatus(int resultCode, Bundle results) {\nsuper.sendStatus(resultCode, results);\nswitch (resultCode) {\ncase REPORT_VALUE_RESULT_ERROR:\ncase REPORT_VALUE_RESULT_FAILURE:\ncase REPORT_VALUE_RESULT_OK:\ntry {\nrecordTestResult(resultCode, results);\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\nbreak;\ncase REPORT_VALUE_RESULT_START:\nrecordTestStart(results);\ndefault:\nbreak;\n}\n}\nvoid recordTestStart(Bundle results) {\nmTestStarted = System.currentTimeMillis();\n}\nvoid recordTestResult(int resultCode, Bundle results) throws IOException {\nfloat time = (System.currentTimeMillis() - mTestStarted) / 1000.0f;\nString className = results.getString(REPORT_KEY_NAME_CLASS);\nString testMethod = results.getString(REPORT_KEY_NAME_TEST);\nString stack = results.getString(REPORT_KEY_STACK);\nint current = results.getInt(REPORT_KEY_NUM_CURRENT);\nint total = results.getInt(REPORT_KEY_NUM_TOTAL);\nmTestSuiteSerializer.startTag(null, \"testcase\");\nmTestSuiteSerializer.attribute(null, \"classname\", className);\nmTestSuiteSerializer.attribute(null, \"name\", testMethod);\nif (resultCode != REPORT_VALUE_RESULT_OK) {\nmTestSuiteSerializer.startTag(null, \"failure\");\nif (stack != null) {\nString reason = stack.substring(0, stack.indexOf('\\n'));\nString message = \"\";\nint index = reason.indexOf(':');\nif (index > -1) {\nmessage = reason.substring(index+1);\nreason = reason.substring(0, index);\n}\nmTestSuiteSerializer.attribute(null, \"message\", message);\nmTestSuiteSerializer.attribute(null, \"type\", reason);\nmTestSuiteSerializer.text(stack);\n}\nmTestSuiteSerializer.endTag(null, \"failure\");\n} else {\nmTestSuiteSerializer.attribute(null, \"time\", String.format(\"%.3f\", time));\n}\nmTestSuiteSerializer.endTag(null, \"testcase\");\nif (current == total) {\nmTestSuiteSerializer.startTag(null, \"system-out\");\nmTestSuiteSerializer.endTag(null, \"system-out\");\nmTestSuiteSerializer.startTag(null, \"system-err\");\nmTestSuiteSerializer.endTag(null, \"system-err\");\nmTestSuiteSerializer.endTag(null, \"testsuite\");\nmTestSuiteSerializer.flush();\n}\n}\n@Override\npublic void finish(int resultCode, Bundle results) {\nendTestSuites();\nsuper.finish(resultCode, results);\n}\nvoid endTestSuites() {\ntry {\nif ( mTestSuiteSerializer != null ) {\nmTestSuiteSerializer.endTag(null, \"testsuites\");\nmTestSuiteSerializer.endDocument();\nmTestSuiteSerializer.flush();\n}\nif ( mWriter != null) {\nmWriter.flush();\nmWriter.close();\n}\n} catch (IOException e) {\nthrow new RuntimeException(e);\n}\n}\n}\n\n```", "```java\n$ git add src/com/neenbedankt/\n$ git commit -a -m \"Added XMLInstrumentationTestRunner\"\n\n```", "```java\n<instrumentation\nandroid:targetPackage=\"com.example.aatg.tc\"\nandroid:label=\"TemperatureConverter tests\" android:name=\"com.neenbedankt.android.test. XMLInstrumentationTestRunner\"\n/>\n\n```", "```java\nPKG=com.example.aatg.tc\nOUTDIR=/data/data/${PKG}/files/\nOUTFILE=test-results.xml\nADB=/opt/android-sdk/platform-tools/adb\n$ADB -s $ANDROID_AVD_DEVICE install -r \"$WORKSPACE/../../ TemperatureConverter/lastSuccessful/ archive/bin/TemperatureConverter-debug.apk\"\n$ADB -s $ANDROID_AVD_DEVICE shell am instrument -w -e outfile \"$OUTFILE\" $PKG.test/com.neenbedankt.android.test.XMLInstrumentationTestRunner\n$ADB -s $ANDROID_AVD_DEVICE pull \"$OUTDIR/$OUTFILE\" \"$WORKSPACE/$OUTFILE\"\n\n```", "```java\npublic final void testForceFailure1() {\nfail(\"Forced fail\");\n}\n\n```"]