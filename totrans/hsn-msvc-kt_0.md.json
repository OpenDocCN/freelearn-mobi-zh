["```kt\nfun lower(name : String) : String {\n  val lower : String = name.toLowerCase()\n  return \"$name in lower case is: $lower\"\n}\n```", "```kt\nfun lower(name : String): String {\n  val lower = name.toLowerCase()\n  return \"$name in lower case is: $lower\"\n}\n```", "```kt\nfun lower(name : String) = \"$name in lower case is: ${name.toLowerCase()}\"\n```", "```kt\nfun foo() : String {\n  return \"14\"\n}\n\nfun bar() : String {\n  val value : String = foo()\n  return value\n}\n```", "```kt\nfun foo() : Int {\n  return 14\n}\n```", "```kt\nfun bar() : Int {\n  val value : Int = foo()\n  return value\n}\n```", "```kt\nfun foo() = \"14\"\n\nfun bar() = foo()\n```", "```kt\nfun foo() = 14\n\nfun bar() = foo()\n```", "```kt\nfun oddOrEven(number: Int): String {\n  if(number % 2 == 0)\n    return \"odd\"\n  else\n    return \"even\"\n}\n```", "```kt\nfun oddOrEven(number: Int): String {\n  return if(number % 2 == 0)\n    \"odd\"\n  else\n    \"even\"\n}\n```", "```kt\nfun oddOrEven(number: Int) =\n    if (number % 2 == 0)\n      \"odd\"\n    else\n      \"even\"\n```", "```kt\nfun fizzBuzz(number: Int): String {\n  if (number % 15 == 0) {\n    return \"FizzBuzz\"\n  } else if (number % 3 == 0) {\n    return \"Fizz\"\n  } else if (number % 5 == 0) {\n    return \"Buzz\"\n  } else {\n    return number.toString()\n  }\n}\n```", "```kt\nfun fizzBuzz(number: Int) =\n    if (number % 15 == 0) {\n      \"FizzBuzz\"\n    } else if (number % 3 == 0) {\n      \"Fizz\"\n    } else if (number % 5 == 0) {\n      \"Buzz\"\n    } else {\n      number.toString()\n    }\n```", "```kt\nfun fizzBuzz(number: Int) =\n    when {\n      number % 15 == 0 -> \"FizzBuzz\"\n      number % 3 == 0 -> \"Fizz\"\n      number % 5 == 0 -> \"Buzz\"\n      else -> number.toString()\n    }\n```", "```kt\nfun calculate(number1: Int, number2: Int) =\n    try {\n      number1 / number2\n    } catch (ex: Exception) {\n      0\n    }\n```", "```kt\nfun compute(number1: Int, number2: Int = 2, number3: Int = 5) = number1 * number2 * number3\n```", "```kt\nprintln(compute(7))\nprintln(compute(7, 2))\nprintln(compute(7, 2, 8))\nprintln(compute(number1 = 8, number3 = 4))\n```", "```kt\nfun printNumbers(){\n  val range = 1..10\n  for(i in range){\n    println(i)\n  }\n}\n```", "```kt\nfun printNumbers(){\n  val range = 1..10\n  range.forEach { i -> println(i) }\n}\n```", "```kt\nfun printNumbers(){\n  val range = 1..10\n  range.forEach { println(it) }\n}\n```", "```kt\nfun printNumbers() {\n  (1..10).forEach { println(it) }\n}\n```", "```kt\nfun printNumbers() {\n  (1..10).forEach(::println)\n}\n```", "```kt\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.stereotype.Service\nimport org.springframework.web.bind.annotation.*\n\n@Service\nclass AccountService {\n  fun getAccountsByCustomer(customerId: Int): List<Account>\n      = listOf(Account(1, 125F), Account(2, 500F))\n}\n\n@Service\nclass CustomerService {\n  @Autowired\n  private lateinit var accountService: AccountService\n\n  fun getCustomer(id: Int): Customer {\n    val accounts = accountService.getAccountsByCustomer(id)\n    return Customer(id, \"customer$id\", accounts)\n  }\n}\n\n@RestController\nclass CustomerController {\n  @Autowired\n  private lateinit var customerService: CustomerService\n\n  @GetMapping(\"/customer/{id}\")\n  fun getCustomer(@PathVariable id: Int) = customerService.getCustomer(1)\n}\n```", "```kt\ndata class Account(val id : Int, val balance : Float)\ndata class Customer(val id : Int, val name : String, val accounts: List<Account>)\n```", "```kt\nimport org.springframework.stereotype.Service\nimport org.springframework.web.bind.annotation.*\n\n@Service\nclass AccountService {\n  fun getAccountsByCustomer(customerId: Int): List<Account>\n      = listOf(Account(1, 125F), Account(2, 500F))\n}\n\n@Service\nclass CustomerService(val accountService: AccountService) {\n  fun getCustomer(id: Int): Customer {\n    val accounts = accountService.getAccountsByCustomer(id)\n    return Customer(id, \"customer$id\", accounts)\n  }\n}\n\n@RestController\nclass CustomerController(val customerService: CustomerService) {\n  @GetMapping(\"/customer/{id}\")\n  fun getCustomer(@PathVariable id: Int) = customerService.getCustomer(1)\n}\n```", "```kt\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nclass ContextConfiguration {\n  @Bean\n  fun accountService() = AccountService()\n\n  @Bean\n  fun customerService(accountService: AccountService) = CustomerService(accountService)\n\n  @Bean\n  fun customerController(customerService: CustomerService) = CustomerController(customerService)\n}\n```", "```kt\nclass AccountService {\n  fun getAccountsByCustomer(customerId: Int): List<Account>\n      = listOf(Account(1, 125F), Account(2, 500F))\n}\n\nclass CustomerService(val accountService: AccountService) {\n  fun getCustomer(id: Int): Customer {\n    val accounts = accountService.getAccountsByCustomer(id)\n    return Customer(id, \"customer$id\", accounts)\n  }\n}\n```", "```kt\ninterface AccountService {\n  fun getAccountsByCustomer(customerId: Int): List<Account>\n}\n\nclass AccountServiceImpl : AccountService {\n  override fun getAccountsByCustomer(customerId: Int): List<Account>\n      = listOf(Account(1, 125F), Account(2, 500F))\n}\n\ninterface CustomerService {\n  fun getCustomer(id: Int): Customer\n}\n\nclass CustomerServiceImpl(val accountService: AccountService) : CustomerService {\n  override fun getCustomer(id: Int): Customer {\n    val accounts = accountService.getAccountsByCustomer(id)\n    return Customer(id, \"customer$id\", accounts)\n  }\n}\n```", "```kt\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.bind.annotation.*\n\n@RestController\nclass CustomerController(val customerService: CustomerService) {\n  @GetMapping(\"/customer/{id}\")\n  fun getCustomer(@PathVariable id: Int) = customerService.getCustomer(1)\n}\n\n@Configuration\nclass ContextConfiguration {\n  @Bean\n  fun accountService() : AccountService = AccountServiceImpl()\n\n  @Bean\n  fun customerService(accountService: AccountService) : CustomerService =\n    CustomerServiceImpl(accountService)\n\n  @Bean\n  fun customerController(customerService: CustomerService) = CustomerController(customerService)\n}\n```", "```kt\nStory: Get a customer from the API\n\nAs a user of the API\nIn order to been able to get customers\nI want to query them\n\nScenario 1: Get a customer that does exist\nGiven that I've the id from a customer\nand the customer exists\nWhen I query the customers API\nand I use the customer id\nThen I should get the customer details.\n\nScenario 2: Get a customer that does not exist\nGiven that I've the id from a customer\nand the customer doest not exists\nWhen I query the customers API\nand I use the customer id\nThen I should get a not found response\n```"]