["```java\nSystem.out.println(\"Hello, world!\");\n```", "```java\nprintln 'Hello, world!'\n```", "```java\ndef name = 'Andy'\ndef greeting = \"Hello, $name!\"\ndef name_size \"Your name is ${name.size()} characters long.\"\n```", "```java\ndef method = 'toString'\nnew Date().\"$method\"()\n```", "```java\nclass MyGroovyClass {\n    String greeting\n\n    String getGreeting() {\n        return 'Hello!'\n    }\n}\n```", "```java\ndef instance = new MyGroovyClass()\ninstance.setGreeting 'Hello, Groovy!'\ninstance.getGreeting()\n```", "```java\nprintln instance.getGreeting()\nprintln instance.greeting\n```", "```java\npublic int square(int num) {\n    return num * num;\n}\nsquare(2);\n```", "```java\ndef square(def num) {\n    num * num\n}\nsquare 4\n```", "```java\ndef square = { num ->\n    num * num\n}\nsquare 8\n```", "```java\nClosure square = {\n    it * it\n}\nsquare 16\n```", "```java\nList list = [1, 2, 3, 4, 5]\n```", "```java\nlist.each() { element ->\n    println element\n}\n```", "```java\nlist.each() {\n    println it\n}\n```", "```java\nMap pizzaPrices = [margherita:10, pepperoni:12]\n```", "```java\npizzaPrices.get('pepperoni')\npizzaPrices['pepperoni']\n```", "```java\npizzaPrices.pepperoni\n```", "```java\napply plugin: 'com.android.application'\n```", "```java\nproject.apply([plugin: 'com.android.application'])\n```", "```java\ndependencies {\n    compile 'com.google.code.gson:gson:2.3'\n}\n```", "```java\nproject.dependencies({\n    add('compile', 'com.google.code.gson:gson:2.3', {\n        // Configuration statements\n    })\n})\n```", "```java\ntask hello\n```", "```java\ntask hello {\n  println 'Hello, world!'\n}\n```", "```java\n$ gradlew hello\nHello, world!\n:hello\n\n```", "```java\ntask hello << {\n  println 'Hello, world!'\n}\n```", "```java\ntask hello << {\n  println 'Execution'\n}\n\nhello {\n  println 'Configuration'\n}\n```", "```java\n$ gradlew hello\nConfiguration\n:hello\nExecution\n\n```", "```java\ntask(hello) << {\n  println 'Hello, world!'\n}\n\ntask('hello') << {\n  println 'Hello, world!'\n}\n\ntasks.create(name: 'hello') << {\n  println 'Hello, world!'\n}\n```", "```java\ntask hello {\n  println 'Configuration'\n\n  doLast {\n    println 'Goodbye'\n  }\n\n  doFirst {\n    println 'Hello'\n  }\n}\n```", "```java\n$ gradlew hello\nConfiguration\n:hello\nHello\nGoodbye\n\n```", "```java\ntask mindTheOrder {\n  doFirst {\n    println 'Not really first.'\n  }\n\n  doFirst {\n    println 'First!'\n  }\n\n  doLast {\n    println 'Not really last.'\n  }\n\n  doLast {\n    println 'Last!'\n  }\n}\n```", "```java\n$ gradlew mindTheOrder\n:mindTheOrder\nFirst!\nNot really first.\nNot really last.\nLast!\n\n```", "```java\ntask task1 << {\n    println 'task1'\n}\ntask task2 << {\n    println 'task2'\n}\ntask2.mustRunAfter task1\n```", "```java\n$ gradlew task2 task1\n:task1\ntask1\n:task2\ntask2\n\n```", "```java\ntask task1 << {\n    println 'task1'\n}\ntask task2 << {\n    println 'task2'\n}\ntask2.dependsOn task1\n```", "```java\n$ gradlew task2\n:task1\ntask1\n:task2\ntask2\n\n```", "```java\nandroid {\n    signingConfigs {\n        release {\n            storeFile file(\"release.keystore\")\n            storePassword \"password\"\n            keyAlias \"ReleaseKey\"\n            keyPassword \"password\"\n        }\n    }\n\n    buildTypes {\n        release {\n            signingConfig signingConfigs.release\n        }\n    }\n}\n```", "```java\nrelease.password = thepassword\n```", "```java\ntask getReleasePassword << {\n    def password = ''\n\n    if (rootProject.file('private.properties').exists()) {\n        Properties properties = new Properties();\n        properties.load( rootProject.file('private.properties').newDataInputStream())\n        password = properties.getProperty('release.password')\n    }\n}\n```", "```java\n    if (!password?.trim()) {\n        password = new String(System.console().readPassword(\"\\nWhat's the secret password? \"))\n    }\n```", "```java\nandroid.signingConfigs.release.storePassword = password\nandroid.signingConfigs.release.keyPassword = password\n```", "```java\ntasks.whenTaskAdded { theTask ->\n    if (theTask.name.equals(\"packageRelease\")) {\n        theTask.dependsOn \"getReleasePassword\"\n    }\n}\n```", "```java\nandroid.applicationVariants.all { variant ->\n  // Do something\n}\n```", "```java\nandroid.applicationVariants.all { variant ->\n  variant.outputs.each { output ->\n    def file = output.outputFile\n    output.outputFile = new File(file.parent, file.name.replace(\".apk\", \"-${variant.versionName}.apk\"))\n  }\n}\n```", "```java\nandroid.applicationVariants.all { variant ->\n  if (variant.install) {\n    tasks.create(name: \"run${variant.name.capitalize()}\", dependsOn: variant.install) {\n        description \"Installs the ${variant.description} and runs the main launcher activity.\"\n      }\n  }\n}\n```", "```java\n$ adb shell am start -n com.package.name/com.package.name.Activity\n\n```", "```java\ndoFirst {\n    exec {\n        executable = 'adb'\n        args = ['shell', 'am', 'start', '-n', \"${variant.applicationId}/.MainActivity\"]\n    }\n}\n```", "```java\nandroid {\n    defaultConfig {\n        applicationId 'com.gradleforandroid'\n    }\n\n    buildTypes {\n        debug {\n            applicationIdSuffix '.debug'\n        }\n   }\n```", "```java\ndoFirst {\n    def classpath = variant.applicationId\n    if(variant.buildType.applicationIdSuffix) {\n        classpath -= \"${variant.buildType.applicationIdSuffix}\"\n}\n    def launchClass = \"${variant.applicationId}/${classpath}.MainActivity\"\n    exec {\n        executable = 'adb'\n        args = ['shell', 'am', 'start', '-n', launchClass]\n    }\n}\n```", "```java\nclass RunPlugin implements Plugin<Project> {\n  void apply(Project project) {\n    project.android.applicationVariants.all { variant ->\n      if (variant.install) {\n        project.tasks.create(name: \"run${variant.name.capitalize()}\", dependsOn: variant.install) {\n            // Task definition\n        }\n      }\n    }\n  }\n}\n```", "```java\napply plugin: RunPlugin\n```", "```java\napply plugin: 'groovy'\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n}\n```", "```java\ngroup = 'com.gradleforandroid'\nversion = '1.0'\n```", "```java\nplugin\n└── src\n    └── main\n        ├── groovy\n        │   └── com\n        │       └── package\n        │           └── name\n        └── resources\n            └── META-INF\n                └── gradle-plugins\n```", "```java\npackage com.gradleforandroid\n\nimport org.gradle.api.Project\nimport org.gradle.api.Plugin\n\nclass RunPlugin implements Plugin<Project> {\n    void apply(Project project) {\n        project.android.applicationVariants.all { variant ->\n            // Task code\n        }\n    }\n}\n```", "```java\nimplementation-class=com.gradleforandroid.RunPlugin\n```", "```java\napply plugin: 'maven'\n```", "```java\nuploadArchives {\n    repositories {\n        mavenDeployer {\n          repository(url: uri('repository_url'))\n}\n    }\n}\n```", "```java\nbuildscript {\n    repositories {\n        flatDir { dirs 'build_libs' }\n    }\n    dependencies {\n        classpath 'com.gradleforandroid:plugin'\n    }\n}\n```", "```java\napply plugin: com.gradleforandroid.RunPlugin\n```"]