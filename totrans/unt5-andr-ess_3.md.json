["```java\n// The first line of our shader code specifies the name of the\n// shader in order to further select it from a list of all \n// shaders.\nShader \"PacktPub/SimpleDiffuseLighting\"\n{\n  // Next is the properties block of parameters of the shader \n  // known as Properties, which is followed by a block of the \n  // shader code known as SubShader.\n        Properties\n        {\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\" = \"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf Lambert\n\n                sampler2D _MainTex;\n                struct Input\n                {\n                        float2 uv_MainTex;\n                };\n\n                void surf (Input IN, inout SurfaceOutput o)\n                {\n                        half4 c = tex2D (_MainTex, IN.uv_MainTex);\n                        o.Albedo = c.rgb;\n                        o.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n    // The shader specified as FallBack will be executed \n    // instead of our shader.\n        FallBack \"Diffuse\"\n}\n```", "```java\nProperties\n{\n        _YourVariableName (\"Inspector GUI Name\", Color) = (1,1,1,1)\n}\n//      Variable Name   Inspector GUI Name     Type  Default Value\n```", "```java\nProperties\n{\n        _FirstColor (\"First Color\", Color) = (1,1,1,1)\n        _SecondColor (\"Second Color\", Color) = (0,0,0,0)\n        _PowValue (\"Pow Value\", Range(0,10)) = 5.5\n}\n```", "```java\nfloat4 _FirstColor;\nfloat4 _SecondColor;\nfloat  _PowValue;\n```", "```java\nvoid surf (Input IN, inout SurfaceOutput surface)\n{\n        float4 c = pow(_FirstColor + _SecondColor, _PowValue);\n        surface.Albedo = c.rgb;\n        surface.Alpha = c.a;\n}\n```", "```java\nShader \"PacktPub/YourDiffuseLighting\"\n{\n        Properties\n        {\n                _FirstColor (\"First Color\", Color) = (1,1,1,1)\n                _SecondColor (\"Second Color\", Color) = (0,0,0,0)\n                _PowValue (\"Pow Value\", Range(0,10)) = 3.5\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\" = \"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf Lambert\n\n                float4 _FirstColor;\n                float4 _SecondColor;\n                float  _PowValue;\n                float4 c;\n                struct Input\n                {\n                        float2 uv_MainTex;\n                };\n\n                void surf (Input IN, inout SurfaceOutput surface)\n                {\n                        c = pow(_FirstColor + _SecondColor, _PowValue);\n                        surface.Albedo = c.rgb;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\n#pragma surface surf YourName\n```", "```java\ninline float4 LightingYourName \n(SurfaceOutput surface, float3 lightDirection, float attenuation)\n{\n        float delta = max(0, dot(surface.Normal, lightDirection));\n        c.rgb = (surface.Albedo * _LightColor0.rgb) * \n                                                (delta * attenuation * 2);\n        c.a = surface.Alpha;\n        return c;\n}\n```", "```java\nShader \"PacktPub/YourLightingModel\"\n{\n        Properties\n        {\n                _FirstColor (\"First Color\", Color) = (1,1,1,1)\n                _SecondColor (\"Second Color\", Color) = (0,0,0,0)\n                _PowValue (\"Pow Value\", Range(0,10)) = 3.5\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\" = \"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf YourName\n\n                float4 _FirstColor;\n                float4 _SecondColor;\n                float  _PowValue;\n                float4 c;\n\n                struct Input\n                {\n                        float2 uv_MainTex;\n                };\n\n                inline float4 LightingYourName (\n                        SurfaceOutput surface, \n                        float3 lightDirection, \n                        float attenuation\n                ){\n                        float delta = max(0, dot(surface.Normal, lightDirection));\n                        c.rgb = (surface.Albedo * _LightColor0.rgb) *\n                                                (delta * attenuation * 2);\n                        c.a = surface.Alpha;\n                        return c;\n                }\n\n                void surf (Input IN, inout SurfaceOutput surface)\n                {\n                        c = pow(_FirstColor + _SecondColor, _PowValue);\n                        surface.Albedo = c.rgb;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\nShader \"PacktPub/BasicReflectionEnvironment\"\n{\n        Properties \n        {\n                _DiffuseTint (\"Diffuse Tint\", Color) = (1,1,1,1)\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _CubeMapTexture (\"Cube Map Texture\", CUBE) = \"\"{}\n                _ReflectionCount (\"Reflection Count\", Range(0.01, 1)) = 0.17\n        }\n\n        SubShader \n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf Lambert\n\n                sampler2D _MainTex;\n                samplerCUBE _CubeMapTexture;\n\n                float4 _DiffuseTint;\n                float _ReflectionCount;\n\n                float4 c;\n\n                struct Input \n                {\n                        float2 uv_MainTex;\n                        float3 worldRefl;\n                };\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        c = tex2D (_MainTex, IN.uv_MainTex) * _DiffuseTint;\n                        surface.Emission = texCUBE(_CubeMapTexture, IN.worldRefl).rgb * _ReflectionCount;\n                        surface.Albedo = c.rgb;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\nShader \"PacktPub/MaskedTextureReflection\"\n{\n        Properties \n        {\n                _DiffuseTint (\"Diffuse Tint\", Color) = (1,1,1,1)\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _ReflectionCount (\"Reflection Count\", Range(0, 1)) = 1\n                _CubeMapTexture (\"Cube Map Texture\", CUBE) = \"\"{}\n                _MaskedTextureReflection (\"Masked Texture Reflection\", 2D) = \"\"{}\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf Lambert\n\n                sampler2D _MainTex;\n                sampler2D _MaskedTextureReflection;\n\n                samplerCUBE _CubeMapTexture;\n\n                float4 _DiffuseTint;\n                float _ReflectionCount;\n\n                float4 c;\n\n                struct Input \n                {\n                        float2 uv_MainTex;\n                        float3 worldRefl;\n                };\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        c = tex2D (_MainTex, IN.uv_MainTex);\n                        float3 reflectionTexCube = texCUBE(_CubeMapTexture, IN.worldRefl).rgb;\n                        float4 reflectionMaskTexel = tex2D(_MaskedTextureReflection, IN.uv_MainTex);\n\n                        surface.Albedo = c.rgb * _DiffuseTint;\n                        surface.Emission = (reflectionTexCube * reflectionMaskTexel.r) * _ReflectionCount;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\nShader \"PacktPub/LitSphere\" \n{\n        Properties \n        {\n                _DiffuseTint (\"Diffuse Tint\", Color) = (1,1,1,1)\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _NormalMapTexture (\"Normal Map Texture\", 2D) = \"bump\" {}\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf YourUnlit vertex:vert\n\n                sampler2D _MainTex;\n                sampler2D _NormalMapTexture;\n                float4 _DiffuseTint;\n\n                float4 c;\n                float2 uv;\n\n                inline float4 LightingYourUnlit (SurfaceOutput surface, float3 lightDirection, float attenuation)\n                {\n                        c.rgb = float4(1,1,1,1) * surface.Albedo;\n                        c.a = surface.Alpha;\n\n                        return c;\n                }\n\n                struct Input \n                {\n                        float2 uv_MainTex;\n                        float2 uv_NormalMapTexture;\n\n                        float3 tangentOne;\n                        float3 tangentTwo;\n                };\n\nvoid vert (inout appdata_full v, out Input inputData) \n{\n        UNITY_INITIALIZE_OUTPUT(Input, inputData);\n\n        TANGENT_SPACE_ROTATION;\n\n        inputData.tangentOne = mul(rotation, UNITY_MATRIX_IT_MV[0].xyz);\n        inputData.tangentTwo = mul(rotation, UNITY_MATRIX_IT_MV[1].xyz);          \n}\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        surface.Normal = UnpackNormal(tex2D(_NormalMapTexture, IN.uv_NormalMapTexture)).rgb;\n\n                        uv.x = dot(IN.tangentOne, surface.Normal);\n                        uv.y = dot(IN.tangentTwo, surface.Normal);\n\n                        c = tex2D (_MainTex, uv * 0.5 + 0.5);\n                        surface.Albedo = c.rgb * _DiffuseTint;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        } \n\n        FallBack \"Diffuse\"\n}\n```", "```java\ninline half4 LightingCarVehicle (SurfaceOutput surface, half3 lightDirection, half3 viewDirection, half attenuation)\n```", "```java\ninline float4 LightingCarVehicle (SurfaceOutput surface, float3 lightDirection, float3 viewDirection, float attenuation)\n```", "```java\nShader \"PacktPub/OptimizedCarVehicle\"\n{\n        Properties \n        {\n                _DiffuseTint (\"Diffuse Tint\", Color) = (1,1,1,1)\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _DiffuseIntensity (\"Diffuse Intensity\", Range(0.01, 17)) = 7.7\n                _SpecularColor (\"Specular Color\", Color) = (1,1,1,1)\n                _SpecularIntensity (\"Specular Intensity\", Range(0.01, 50)) = 17\n                _ReflectionCubeMap (\"Reflection Cube Map\", CUBE) = \"\" {}\n                _BRDFTexture (\"BRDF Texture\", 2D) = \"white\" {}\n                _ReflectionIntensity (\"Reflection Intensity\", Range(0.01, 11.0)) = 5.0\n                _ReflectionCount (\"Reflection Count\", Range(0.01, 1.0)) = 0.17\n                _FalloffSpread (\"Falloff Spread\", Range(0.01, 17)) = 5.3\n        }\n\n        SubShader \n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf CarVehicle\n\n                samplerCUBE _ReflectionCubeMap;\n\n                sampler2D _MainTex;\n                sampler2D _BRDFTexture;\n\n                fixed _SpecularIntensity;\n                fixed _DiffuseIntensity;\n                fixed _FalloffSpread;\n                fixed _ReflectionCount;\n                fixed _ReflectionIntensity;\n\n                fixed4 _DiffuseTint;\n                fixed4 _SpecularColor;\n\n                fixed4 c;\n                fixed3 halfVec;\n                fixed falloff;\n                fixed delta;\n                fixed halfVecDotSurfaceNormal;\n                fixed s;\n\n                inline fixed4 LightingCarVehicle (SurfaceOutput surface, fixed3 lightDirection, fixed3 viewDirection, fixed attenuation)\n                {\n                        halfVec = normalize (lightDirection + viewDirection);\n                        delta = max (0, dot (surface.Normal, lightDirection));\n\n                        halfVecDotSurfaceNormal = 1 - dot(halfVec, normalize(surface.Normal));\n                        halfVecDotSurfaceNormal = pow(clamp(halfVecDotSurfaceNormal, 0.0, 1.0), _DiffuseIntensity);\n                        c = tex2D(_BRDFTexture, fixed2(delta, 1 - halfVecDotSurfaceNormal));\n\n                        s = pow (max (0, dot (surface.Normal, halfVec)), surface.Specular * _SpecularIntensity) * surface.Gloss;\n\n                        c.rgb = (surface.Albedo * _LightColor0.rgb * c.rgb + _LightColor0.rgb * _SpecularColor.rgb * s)* (attenuation * 2);\n                        c.a = surface.Alpha + _LightColor0.a * _SpecularColor.a * s * attenuation;\n\n                        return c;\n                }\n\n                struct Input \n                {\n                        fixed2 uv_MainTex;\n\n                        fixed3 worldRefl;\n\n                        fixed3 viewDir;\n                };\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        c = tex2D (_MainTex, IN.uv_MainTex);\n\n                        falloff = pow(saturate(1 - dot(normalize(IN.viewDir), surface.Normal)), _FalloffSpread);\n\n                        surface.Albedo = c.rgb * _DiffuseTint;\n                        surface.Emission = pow((texCUBE(_ReflectionCubeMap, IN.worldRefl).rgb * falloff), _ReflectionIntensity) * _ReflectionCount;\n                        surface.Specular = c.r;\n                        surface.Gloss = 1.0;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\nShader \"PacktPub/OptimizedShaderExample\"\n{\n        Properties \n        {\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _SpecularWidth (\"Specular Width\", Range(0.01, 1)) = 0.5\n                _NormalMapTexture (\"Normal Map Texture\", 2D) = \"bump\"{}\n        }\n\n        SubShader \n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #pragma surface surf OptimizedBlinnPhong exclude_path:prepass nolightmap noforwardadd halfasview\n\n                sampler2D _MainTex;\n                sampler2D _NormalMapTexture;\n                half _SpecularWidth;\n\n                half4 c;\n                half d;\n                half s;\n\n                struct Input \n                {\n                        half2 uv_MainTex;\n                };\n\n                inline half4 LightingOptimizedBlinnPhong (SurfaceOutput surface, half3 lightDir, half3 halfDir, half atten)\n                {\n                        d = max(0, dot(surface.Normal, lightDir));\n                        s = pow(max(0, dot(surface.Normal, halfDir)), surface.Specular * 128) * surface.Gloss;\n\n                        c.rgb = (surface.Albedo * _LightColor0.rgb * d + _LightColor0.rgb * s) * (atten * 2);\n                        c.a = 0.0;\n\n                        return c;\n                }\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        c = tex2D(_MainTex, IN.uv_MainTex);\n\n                        surface.Albedo = c.rgb;\n                        surface.Gloss = c.a;\n                        surface.Alpha = 0.0;\n                        surface.Specular = _SpecularWidth;\n                        surface.Normal = UnpackNormal(tex2D(_NormalMapTexture, IN.uv_MainTex)).rgb;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```", "```java\n#ifndef YOUR_NAME_INCLUDE\n#define YOUR_NAME_INCLUDE\n\nhalf4 _YourColorVariable;\n\ninline half4 LightingOptimizedLambert (SurfaceOutput surface, half3 lightDirection, half attenuation)\n{\n        half diffuseValue = max(0, dot(surface.Normal, lightDirection));\n        diffuseValue = (diffuseValue + 0.5) * 0.5;\n\n        half4 tmpColor;\n        tmpColor.rgb = surface.Albedo * _LightColor0.rgb * ((diffuseValue * _YourColorVariable.rgb) * attenuation * 2);\n        tmpColor.a = surface.Alpha;\n\n        return tmpColor;\n}\n\n#endif\n```", "```java\nShader \"PacktPub/UsingCgIncludeOptimzedLambert\"\n{\n        Properties \n        {\n                _YourColorVariable (\"Your Color Variable\", Color) = (1,1,1,1)\n\n                _DiffuseTint (\"Diffuse Tint\", Color) = (1,1,1,1)\n                _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n                _NormalMapTexture (\"Normal Map Texture\", 2D) = \"bump\" {}\n                _CubeMapTexture (\"Cube Map Texture\", CUBE) = \"\"{}\n                _ReflectionCount (\"Reflection Count\", Range(0,1)) = 0.17\n        }\n\n        SubShader\n        {\n                Tags {\"RenderType\"=\"Opaque\"}\n                LOD 200\n\n                CGPROGRAM\n                #include \"YourCgIncludeOptimizedLambert.cginc\"\n                #pragma surface surf OptimizedLambert\n\n                samplerCUBE _CubeMapTexture;\n\n                sampler2D _MainTex;\n                sampler2D _NormalMapTexture;\n\n                float4 _DiffuseTint;\n                float _ReflectionCount;\n\n                float4 c;\n\n                struct Input \n                {\n                        float2 uv_MainTex;\n\n                        float2 uv_NormalMapTexture;\n\n                        float3 worldRefl;\n\n                        INTERNAL_DATA\n                };\n\n                void surf (Input IN, inout SurfaceOutput surface) \n                {\n                        c = tex2D (_MainTex, IN.uv_MainTex);\n\n                        surface.Normal = UnpackNormal(tex2D(_NormalMapTexture, IN.uv_NormalMapTexture)).rgb;\n                        surface.Emission = texCUBE (_CubeMapTexture, WorldReflectionVector(IN, surface.Normal)).rgb * _ReflectionCount;\n                        surface.Albedo = c.rgb * _DiffuseTint;\n                        surface.Alpha = c.a;\n                }\n                ENDCG\n        }\n\n        FallBack \"Diffuse\"\n}\n```"]