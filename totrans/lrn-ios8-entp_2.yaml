- en: Chapter 2. Exploring More UI Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**UI Elements** is the visual part that we can see in our applications. These
    elements respond to user interactions such as buttons, text fields, and other
    labels. Some UI elements are used to make our graphical application; examples
    include images, pickers, Map kit, and many more. **Xcode** helps you to build
    many interfaces using an interface builder. The `UIKit` framework provides the
    classes needed to construct and manage an application''s components or user interface.
    The `UIKit` framework is responsible for handling `UIComponents`, managing views
    and windows, and creating connections between components and code. UI elements
    can be used in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: By dragging-and-dropping them from the interface builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By programmatically adding the components to the view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding UI components programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some featured UI components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the anatomy of Table view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll view and its usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding UI components programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the introduction, we can add the components through coding.
    Let's begin with some simple examples.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Xcode, on the left-hand panel, you can find the `AppDelegate.m` file as
    shown in point **1** of the following screenshot. Navigate to the file. There
    is a lot of code, but we will focus on only one function, `application:didFinishLaunchingWithOptions`,
    as shown in point **2** of the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a view](img/1829OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just add the following code in the function (`didFinishLaunching`) to make
    it look similar to following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the program; if you see the blue screen on the simulator, it means
    we have completed it. In the same way, we can code for all the UI components.
    You can find some more examples in this chapter to learn faster.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a label
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a subview, you have to code in the `AppDelegate.m` class, as done in
    the previous case. Here is the code that should be added to the same function
    after the line `[self.window addSubview: view];`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In previous code, we created one object of the `UILabel` class. Allocate memory
    and initialize the object. Then, we can set the text and text color by using the
    inbuilt methods. Finally, add the label on the view. The following screenshot
    displays the label named **HELLO** on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a label](img/1829OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a new button, write the following code after the line `[view addSubview:label]`,
    and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will create a button and the `buttonAction` method will be called
    on clicking the button. Here, the object of the `UIButton` class is `button`.
    Set the target of `button` to `self`; `@selector` calls our `buttonAction` method
    and sets our event to `TouchUpInside`. The `buttonAction` function should look
    something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the code, you will see the button just below the label. You can
    change the position by changing the coordination from the code. Now, you can try
    for each component one by one. The file should look like this after appending
    all of the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Some featured UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several new components in iOS and some changes in the existing components.
    Let's discuss these components in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The map view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The map view is a very good method for working with locations and maps. It
    is available in the component list. We can directly drag-and-drop the map view
    in our storyboard (as shown in the following screenshot) or we can create it by
    coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The map view](img/1829OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to use map view, you need to add the `MapKit` framework to your project.
    You can add the framework by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the project name in the left-hand panel and you can see the screen
    as shown in the following screenshot:![The map view](img/1829OT_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see the **Linked Frameworks and Libraries**
    option. The frameworks are included in our project by default. If you want to
    add a new framework, then click on the **+** (plus) sign, find the `MapKit` framework,
    and click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you want to show the user's location, go to the inspector toolbar in
    the right-hand panel and select the fourth tab, which is the **Attributes** inspector.
    Click on the **Shows User Location** checkbox, as shown in the following screenshot:![The
    map view](img/1829OT_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UIPickerView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`UIPickerView` is a UI element that can be used to make a selection from multiple
    choices (similar to what dropdown does for a web page). We can find the `UIPickerView`
    element in the component panel and use it simply by dragging-and-dropping it,
    as shown in the following screenshot. There is no need to add a framework for
    `UIPickerView`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![UIPickerView](img/1829OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag-and-drop **Picker** view to the storyboard and run the program. You can
    see the Picker view on the simulator. However, to make better use of the Picker
    view, or to insert our data in Picker view, we need to code it in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, connect the `UIPickerVIew` element to the `.h` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While connecting, give a name to the Picker view (for example: `Picker`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After connection, one property is made in the `.h` file like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Picker` is the name that we gave to the Picker view. We set the property as
    follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`weak`: This automatically releases the object after use.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nonatomic`: This is thread-safe. Only one thread at a time can use the object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to use the Picker view, we need to add two protocols in the `.h` file;
    they are `UIPickerViewDataSource` and `UIPickerViewDelegate` inclined within `<>`,
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, go to the `.m` file. There is a function named `viewDidLoad`. Add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to use `UIPickerView` in a proper way, we need to add Picker view
    methods in the `.m` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, compile and run the code. Our simulator will look as shown in the following
    screenshot:![UIPickerView](img/1829OT_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need web view to interact with web content. Web view displays the websites
    on our devices. Safari and Chrome are examples of web view, but it contains many
    UI elements such as labels, Refresh buttons, Next buttons, and Back buttons. However,
    we will not go that much deeper. To begin with, we will just display the website
    on our device. Along with all the components, web view is also available in the
    left-hand component panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag-and-drop web view to the storyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the web view to the `.h` file and give a name to web view (for example,
    `viewSite`). After connection, one property is automatically created, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `.m` file, go to the `viewDidLoad` function and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Simply compile and run the code. You will see the Facebook login page on the
    simulator, as shown in the following screenshot:![The web view](img/1829OT_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image view is used to display an image on the screen. In order to use the image
    view, there is a component available in the interface builder named `UIImageView`.
    We can create many animations using the image view, and we can use more than one
    image view at a time as needed. There is no need to add any framework for the
    image view. Image view accepts images in many formats such as PNG, JPEG, BMP,
    and so on. We can add images in both ways, programmatically and by dragging-and-dropping.
  prefs: []
  type: TYPE_NORMAL
- en: Using the image view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following steps to understand how to use the image
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the image view in the interface builder and drag and drop it to the storyboard.
    After inserting the image view, our view looks like this:![Using the image view](img/1829OT_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the image in the program by simply dragging-and-dropping from another file
    to Xcode in the right-hand panel below all the classes. A pop-up will appear where
    you need to tick the **Destination** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to the Attribute inspector in the inspector toolbar, which is available
    in the left-hand panel of Xcode. Give a name to the image that is the same as
    the image name we are using (for example, `image.png`), as shown in the following
    screenshot:![Using the image view](img/1829OT_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile and run the program. Your image will appear on the simulator, as follows:![Using
    the image view](img/1829OT_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding the anatomy of the table view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Table view is a common UI element in iOS. It is used to display a list of data
    in tabular form. We use it every day in many forms such as a playlist for songs,
    contacts in the phone, and so on. It is used to display a vertically scrollable
    view that consists of a number of cells. It has special features such as headers,
    footers, rows, and sections. There is also a feature for reusing the cell. Thus,
    we can make unlimited cells as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'An empty table view will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the anatomy of the table view](img/1829OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Important methods for the table view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are various methods available that we can perform on table view. They
    are as described in the code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Working with the table view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Table view is a common element that is available in interface builder. The
    following steps will help us to understand how to use the table view:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the table view component from the interface builder, drag-and-drop it
    upon our view, and adjust the table view on the view controller properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After inserting the table view, our storyboard looks like the following screenshot:![Working
    with the table view](img/1829OT_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to use table view, we need to add two protocols, `UITableViewDelegate`
    and `UITableViewDataSource,` in our `.h` file (our interface file):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the `.m` file, we need to declare an array. Here, an array is used
    to store data cell by cell. After declaring an array, insert data into the array
    that is defined in the `viewDidLoad` method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we have to add two table view methods, `numberOfRowsInSection` and `cellForRowAtIndexPath`,
    to our code in the `.m` file. The first method is used to inform the table view
    about the number of rows present in the section. The second method simply returns
    the number of items in the `tableData` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the code as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, go to the storyboard. We need to establish the connection between the data
    sources and the delegates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the table view from our view. Right-click on it and connect to the yellow
    button, shown below, that is our table view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select both data sources and delegate them one by one, as shown in following
    screenshot:![Working with the table view](img/1829OT_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we can compile and run the program. Our simulator looks like this:![Working
    with the table view](img/1829OT_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll view and its usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scroll view is used to display content more than the size of the screen. It
    can contain all of the other UI elements such as image views, labels, text views,
    and even another scroll view also. `UIScrollView` is one of the most useful controls
    in iOS. It is a great way to represent data that is larger than the screen; the
    data can be an image, list, forum, and so on. The scroll view element is present
    in interface builder and we can directly use it by dragging it to the storyboard.
    Let''s do this simple activity to understand the scroll view:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a single view application and select the storyboard from the left-hand
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to the storyboard and select view from the view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to the Inspector toolbar and then to the **View** coordinates; change
    the height of the view to **1,000**, as shown in the following screenshot. So,
    your view will go longer than the screen.![Scroll view and its usage](img/1829OT_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the scroll view in the interface builder from the right-hand panel
    and drag it to the view, as shown in the following screenshot. Don't forget to
    adjust the scroll view on top of the view properly:![Scroll view and its usage](img/1829OT_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to add some element to check whether scroll view is working or not.
    So, add two labels, one to the top of the view and the other to the bottom of
    the view, and name them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile and run the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see only one top label; now, scroll down and see the bottom label.
    So, through the scroll view, we can scroll to any elements such as images, tables,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigation controller is another UI element you commonly find in iOS apps. Many
    applications such as photo apps, YouTube, and contacts are made from a navigation
    controller. The navigation controller manages several subviews including a navigation
    bar at the top and back buttons. We can show or hide the navigation bar as per
    our application requirement. It is used when we want to use more than one view
    on a single application. Through navigation controller, we can move from one view
    to another view. Navigation controller is also a type of element and is available
    in the interface builder. Navigation controller provides the back button facility
    through which we can go to the previous view. We can add more than one view to
    the storyboard and can connect them together by using segue. **Segue** is a special
    feature provided by the navigation controller that pushes the navigation controller
    to the next view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a simple app through which we can understand navigation controller
    easily:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a single view application and move to the storyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the existing view from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for navigation controller in the interface builder and drag it to the
    storyboard. Now, your screen looks like this:![Navigation controller](img/1829OT_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The linkage sign between the views is the segue sign. Select a button from the
    interface builder and drag it to the root view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find a view from the components. Drag it near the root view controller and insert
    an image view to the newly inserted view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy any image from your directory to Xcode below all the classes in the left-hand
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Inspector toolbar and give the image the same name as the image we
    have chosen.![Navigation controller](img/1829OT_02_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, connect the button to the new view. Right-click on the button and drag
    the blue line to the new view to choose **Push** from the pop-up window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's time to compile and run the program. When you see the simulator, there
    will be a button and navigation bar at the top of the screen. When you click on
    the button, a new screen will appear with your image and there is also a back
    button available to get the previous view. The following screenshot shows the
    first view:![Navigation controller](img/1829OT_02_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here is the second view:![Navigation controller](img/1829OT_02_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about components and how to create them programmatically.
    We mastered the concept of table views and how to use them. Also, we made a simple
    application using navigation controller. Now, we will discuss the framework in
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
