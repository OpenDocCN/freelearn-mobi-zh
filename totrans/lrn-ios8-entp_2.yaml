- en: Chapter 2. Exploring More UI Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章. 探索更多 UI 组件
- en: '**UI Elements** is the visual part that we can see in our applications. These
    elements respond to user interactions such as buttons, text fields, and other
    labels. Some UI elements are used to make our graphical application; examples
    include images, pickers, Map kit, and many more. **Xcode** helps you to build
    many interfaces using an interface builder. The `UIKit` framework provides the
    classes needed to construct and manage an application''s components or user interface.
    The `UIKit` framework is responsible for handling `UIComponents`, managing views
    and windows, and creating connections between components and code. UI elements
    can be used in two ways:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**UI 元素**是我们可以在应用程序中看到的视觉部分。这些元素响应用户交互，如按钮、文本字段和其他标签。一些 UI 元素用于构建我们的图形应用程序；例如，图像、选择器、地图工具包等。**Xcode**
    帮助你使用界面构建器构建许多界面。`UIKit` 框架提供了构建和管理应用程序组件或用户界面所需的类。`UIKit` 框架负责处理 `UIComponents`，管理视图和窗口，以及创建组件和代码之间的连接。UI
    元素可以使用两种方式使用：'
- en: By dragging-and-dropping them from the interface builder
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从界面构建器拖放它们
- en: By programmatically adding the components to the view
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编程将组件添加到视图中
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding UI components programmatically
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编程添加 UI 组件
- en: Some featured UI components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些特色 UI 组件
- en: Understanding the anatomy of Table view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解表格视图的解剖结构
- en: Scroll view and its usage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动视图及其用法
- en: Navigation controller
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航控制器
- en: Adding UI components programmatically
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过编程添加 UI 组件
- en: As mentioned in the introduction, we can add the components through coding.
    Let's begin with some simple examples.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如介绍中所述，我们可以通过编码添加组件。让我们从一些简单的例子开始。
- en: Adding a view
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加视图
- en: 'In Xcode, on the left-hand panel, you can find the `AppDelegate.m` file as
    shown in point **1** of the following screenshot. Navigate to the file. There
    is a lot of code, but we will focus on only one function, `application:didFinishLaunchingWithOptions`,
    as shown in point **2** of the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 中，在左侧面板中，你可以找到如以下截图中的**1**点所示的 `AppDelegate.m` 文件。导航到该文件。文件中有很多代码，但我们将只关注一个函数，即以下截图中的**2**点所示的
    `application:didFinishLaunchingWithOptions`：
- en: '![Adding a view](img/1829OT_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![添加视图](img/1829OT_02_01.jpg)'
- en: 'Just add the following code in the function (`didFinishLaunching`) to make
    it look similar to following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在函数（`didFinishLaunching`）中添加以下代码，使其看起来类似于以下内容：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Build and run the program; if you see the blue screen on the simulator, it means
    we have completed it. In the same way, we can code for all the UI components.
    You can find some more examples in this chapter to learn faster.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行程序；如果在模拟器上看到蓝色屏幕，这意味着我们已经完成了。以同样的方式，我们可以为所有 UI 组件编写代码。你可以在本章中找到更多示例，以更快地学习。
- en: Adding a label
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个标签
- en: 'To add a subview, you have to code in the `AppDelegate.m` class, as done in
    the previous case. Here is the code that should be added to the same function
    after the line `[self.window addSubview: view];`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '要添加子视图，你必须在 `AppDelegate.m` 类中编写代码，就像上一个例子中做的那样。以下是应在 `[self.window addSubview:
    view];` 行之后添加到同一函数中的代码：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In previous code, we created one object of the `UILabel` class. Allocate memory
    and initialize the object. Then, we can set the text and text color by using the
    inbuilt methods. Finally, add the label on the view. The following screenshot
    displays the label named **HELLO** on the screen:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们创建了一个 `UILabel` 类的对象。分配内存并初始化对象。然后，我们可以使用内置方法设置文本和文本颜色。最后，将标签添加到视图中。以下截图显示了屏幕上的标签名为
    **HELLO**：
- en: '![Adding a label](img/1829OT_02_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![添加标签](img/1829OT_02_02.jpg)'
- en: Creating a new button
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的按钮
- en: 'To add a new button, write the following code after the line `[view addSubview:label]`,
    and run it:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个新按钮，在 `[view addSubview:label]` 行之后编写以下代码，并运行它：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code will create a button and the `buttonAction` method will be called
    on clicking the button. Here, the object of the `UIButton` class is `button`.
    Set the target of `button` to `self`; `@selector` calls our `buttonAction` method
    and sets our event to `TouchUpInside`. The `buttonAction` function should look
    something similar to the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将创建一个按钮，点击按钮时将调用 `buttonAction` 方法。在这里，`UIButton` 类的对象是 `button`。将 `button`
    的目标设置为 `self`；`@selector` 调用我们的 `buttonAction` 方法并将事件设置为 `TouchUpInside`。`buttonAction`
    函数应类似于以下内容：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When you run the code, you will see the button just below the label. You can
    change the position by changing the coordination from the code. Now, you can try
    for each component one by one. The file should look like this after appending
    all of the previous code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行代码时，您将在标签下方看到按钮。您可以通过更改代码中的坐标来更改位置。现在，您可以逐个尝试每个组件。在附加所有之前的代码后，文件应该看起来像这样：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Some featured UI components
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些特色 UI 组件
- en: There are several new components in iOS and some changes in the existing components.
    Let's discuss these components in this section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: iOS 中有一些新组件，以及一些现有组件的变化。让我们在本节中讨论这些组件。
- en: The map view
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地图视图
- en: 'The map view is a very good method for working with locations and maps. It
    is available in the component list. We can directly drag-and-drop the map view
    in our storyboard (as shown in the following screenshot) or we can create it by
    coding:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 地图视图是处理位置和地图的一个非常好的方法。它在组件列表中可用。我们可以在我们的故事板中直接拖放地图视图（如下面的截图所示），或者我们可以通过编码来创建它：
- en: '![The map view](img/1829OT_02_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![地图视图](img/1829OT_02_03.jpg)'
- en: 'In order to use map view, you need to add the `MapKit` framework to your project.
    You can add the framework by using the following steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用地图视图，您需要将 `MapKit` 框架添加到您的项目中。您可以通过以下步骤添加框架：
- en: Click on the project name in the left-hand panel and you can see the screen
    as shown in the following screenshot:![The map view](img/1829OT_02_04.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板中的项目名称，您可以看到如下所示的屏幕截图：![地图视图](img/1829OT_02_04.jpg)
- en: In the preceding screenshot, you can see the **Linked Frameworks and Libraries**
    option. The frameworks are included in our project by default. If you want to
    add a new framework, then click on the **+** (plus) sign, find the `MapKit` framework,
    and click on **Add**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，您可以看到 **Linked Frameworks and Libraries** 选项。框架默认包含在我们的项目中。如果您想添加一个新的框架，请点击
    **+**（加号）符号，找到 `MapKit` 框架，然后点击 **Add**。
- en: Now, if you want to show the user's location, go to the inspector toolbar in
    the right-hand panel and select the fourth tab, which is the **Attributes** inspector.
    Click on the **Shows User Location** checkbox, as shown in the following screenshot:![The
    map view](img/1829OT_02_05.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您想显示用户的位置，请转到右侧面板中的检查器工具栏并选择第四个选项卡，即 **Attributes** 检查器。点击 **Shows User
    Location** 复选框，如下面的截图所示：![地图视图](img/1829OT_02_05.jpg)
- en: UIPickerView
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UIPickerView
- en: '`UIPickerView` is a UI element that can be used to make a selection from multiple
    choices (similar to what dropdown does for a web page). We can find the `UIPickerView`
    element in the component panel and use it simply by dragging-and-dropping it,
    as shown in the following screenshot. There is no need to add a framework for
    `UIPickerView`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIPickerView` 是一个 UI 元素，可以用来从多个选项中进行选择（类似于下拉菜单在网页上所做的工作）。我们可以在组件面板中找到 `UIPickerView`
    元素，并通过拖放的方式简单地使用它，如下面的截图所示。不需要为 `UIPickerView` 添加框架。'
- en: '![UIPickerView](img/1829OT_02_06.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![UIPickerView](img/1829OT_02_06.jpg)'
- en: 'Drag-and-drop **Picker** view to the storyboard and run the program. You can
    see the Picker view on the simulator. However, to make better use of the Picker
    view, or to insert our data in Picker view, we need to code it in the following
    manner:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将 **Picker** 视图拖放到故事板中并运行程序。您可以在模拟器中看到 Picker 视图。但是，为了更好地使用 Picker 视图，或者在我们的
    Picker 视图中插入数据，我们需要以下方式编码：
- en: First of all, connect the `UIPickerVIew` element to the `.h` file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将 `UIPickerVIew` 元素连接到 `.h` 文件。
- en: 'While connecting, give a name to the Picker view (for example: `Picker`).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在连接时，给 Picker 视图起一个名字（例如：`Picker`）。
- en: 'After connection, one property is made in the `.h` file like this:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，在 `.h` 文件中创建一个属性，如下所示：
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Picker` is the name that we gave to the Picker view. We set the property as
    follows:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Picker` 是我们给 Picker 视图起的名字。我们设置属性如下：'
- en: '`weak`: This automatically releases the object after use.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`weak`：这会在使用后自动释放对象。'
- en: '`nonatomic`: This is thread-safe. Only one thread at a time can use the object.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nonatomic`：这是线程安全的。一次只有一个线程可以使用该对象。'
- en: 'In order to use the Picker view, we need to add two protocols in the `.h` file;
    they are `UIPickerViewDataSource` and `UIPickerViewDelegate` inclined within `<>`,
    as shown in the following code snippet:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用 Picker 视图，我们需要在 `.h` 文件中添加两个协议；它们是 `UIPickerViewDataSource` 和 `UIPickerViewDelegate`，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, go to the `.m` file. There is a function named `viewDidLoad`. Add the
    following code to it:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 `.m` 文件。有一个名为 `viewDidLoad` 的函数。向其中添加以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to use `UIPickerView` in a proper way, we need to add Picker view
    methods in the `.m` file, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确使用`UIPickerView`，我们需要在`.m`文件中添加Picker视图方法，如下所示：
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, compile and run the code. Our simulator will look as shown in the following
    screenshot:![UIPickerView](img/1829OT_02_07.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编译并运行代码。我们的模拟器将如下截图所示：![UIPickerView](img/1829OT_02_07.jpg)
- en: The web view
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网页视图
- en: We need web view to interact with web content. Web view displays the websites
    on our devices. Safari and Chrome are examples of web view, but it contains many
    UI elements such as labels, Refresh buttons, Next buttons, and Back buttons. However,
    we will not go that much deeper. To begin with, we will just display the website
    on our device. Along with all the components, web view is also available in the
    left-hand component panel.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要网页视图来与网页内容交互。网页视图在我们的设备上显示网站。Safari和Chrome是网页视图的例子，但它包含许多UI元素，如标签、刷新按钮、下一页按钮和后退按钮。然而，我们不会深入探讨。首先，我们将只在我们的设备上显示网站。与所有组件一样，网页视图也在左侧组件面板中可用。
- en: 'Let''s begin with the following steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下步骤开始：
- en: Drag-and-drop web view to the storyboard.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将网页视图拖放到故事板中。
- en: 'Connect the web view to the `.h` file and give a name to web view (for example,
    `viewSite`). After connection, one property is automatically created, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将网页视图连接到`.h`文件，并为网页视图命名（例如，`viewSite`）。连接后，会自动创建一个属性，如下所示：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, in the `.m` file, go to the `viewDidLoad` function and add the following
    code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`.m`文件中，转到`viewDidLoad`函数并添加以下代码：
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Simply compile and run the code. You will see the Facebook login page on the
    simulator, as shown in the following screenshot:![The web view](img/1829OT_02_08.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单地编译并运行代码。你将在模拟器上看到Facebook登录页面，如下截图所示：![网页视图](img/1829OT_02_08.jpg)
- en: The image view
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像视图
- en: Image view is used to display an image on the screen. In order to use the image
    view, there is a component available in the interface builder named `UIImageView`.
    We can create many animations using the image view, and we can use more than one
    image view at a time as needed. There is no need to add any framework for the
    image view. Image view accepts images in many formats such as PNG, JPEG, BMP,
    and so on. We can add images in both ways, programmatically and by dragging-and-dropping.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图像视图用于在屏幕上显示图像。为了使用图像视图，在界面构建器中有一个名为`UIImageView`的组件可用。我们可以使用图像视图创建许多动画，并且根据需要可以同时使用多个图像视图。不需要为图像视图添加任何框架。图像视图接受多种格式的图像，如PNG、JPEG、BMP等。我们可以以编程方式或通过拖放两种方式添加图像。
- en: Using the image view
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用图像视图
- en: 'Let''s have a look at the following steps to understand how to use the image
    view:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤，了解如何使用图像视图：
- en: Find the image view in the interface builder and drag and drop it to the storyboard.
    After inserting the image view, our view looks like this:![Using the image view](img/1829OT_02_09.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中找到图像视图，并将其拖放到故事板中。在插入图像视图后，我们的视图看起来如下：![使用图像视图](img/1829OT_02_09.jpg)
- en: Add the image in the program by simply dragging-and-dropping from another file
    to Xcode in the right-hand panel below all the classes. A pop-up will appear where
    you need to tick the **Destination** checkbox.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过简单地从另一个文件拖放到Xcode右侧面板下所有类下面的模拟器中，将图像添加到程序中。会出现一个弹出窗口，你需要勾选**目标**复选框。
- en: Now, go to the Attribute inspector in the inspector toolbar, which is available
    in the left-hand panel of Xcode. Give a name to the image that is the same as
    the image name we are using (for example, `image.png`), as shown in the following
    screenshot:![Using the image view](img/1829OT_02_10.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到检查器工具栏中的属性检查器，它在Xcode的左侧面板中可用。给图像命名，使其与我们使用的图像名称相同（例如，`image.png`），如下截图所示：![使用图像视图](img/1829OT_02_10.jpg)
- en: Compile and run the program. Your image will appear on the simulator, as follows:![Using
    the image view](img/1829OT_02_11.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行程序。你的图像将在模拟器上显示，如下截图所示：![使用图像视图](img/1829OT_02_11.jpg)
- en: Understanding the anatomy of the table view
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解表格视图的结构
- en: Table view is a common UI element in iOS. It is used to display a list of data
    in tabular form. We use it every day in many forms such as a playlist for songs,
    contacts in the phone, and so on. It is used to display a vertically scrollable
    view that consists of a number of cells. It has special features such as headers,
    footers, rows, and sections. There is also a feature for reusing the cell. Thus,
    we can make unlimited cells as needed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图是iOS中的一个常见UI元素。它用于以表格形式显示数据列表。我们每天都在许多形式中使用它，如歌曲播放列表、电话中的联系人等。它用于显示一个垂直可滚动的视图，该视图由多个单元格组成。它具有特殊功能，如标题、页脚、行和部分。还有一个用于重用单元格的功能。因此，我们可以根据需要创建无限数量的单元格。
- en: 'An empty table view will look like the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个空的表格视图看起来如下截图所示：
- en: '![Understanding the anatomy of the table view](img/1829OT_02_12.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![理解表格视图的结构](img/1829OT_02_12.jpg)'
- en: Important methods for the table view
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表格视图的重要方法
- en: 'There are various methods available that we can perform on table view. They
    are as described in the code snippet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可用于表格视图的方法。它们在代码片段中描述如下：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Working with the table view
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与表格视图一起工作
- en: 'Table view is a common element that is available in interface builder. The
    following steps will help us to understand how to use the table view:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图是一个在界面构建器中可用的常见元素。以下步骤将帮助我们了解如何使用表格视图：
- en: Select the table view component from the interface builder, drag-and-drop it
    upon our view, and adjust the table view on the view controller properly.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从界面构建器中选择表格视图组件，将其拖放到我们的视图中，并在视图控制器中正确调整表格视图。
- en: After inserting the table view, our storyboard looks like the following screenshot:![Working
    with the table view](img/1829OT_02_13.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入表格视图后，我们的故事板看起来如下截图所示：![与表格视图一起工作](img/1829OT_02_13.jpg)
- en: 'In order to use table view, we need to add two protocols, `UITableViewDelegate`
    and `UITableViewDataSource,` in our `.h` file (our interface file):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用表格视图，我们需要在我们的`.h`文件（我们的接口文件）中添加两个协议，`UITableViewDelegate`和`UITableViewDataSource`：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, in the `.m` file, we need to declare an array. Here, an array is used
    to store data cell by cell. After declaring an array, insert data into the array
    that is defined in the `viewDidLoad` method, as shown in the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`.m`文件中，我们需要声明一个数组。在这里，数组用于按单元格存储数据。在声明数组后，将数据插入到在`viewDidLoad`方法中定义的数组中，如下所示：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we have to add two table view methods, `numberOfRowsInSection` and `cellForRowAtIndexPath`,
    to our code in the `.m` file. The first method is used to inform the table view
    about the number of rows present in the section. The second method simply returns
    the number of items in the `tableData` array.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须在我们的`.m`文件中的代码中添加两个表格视图方法，`numberOfRowsInSection`和`cellForRowAtIndexPath`。第一个方法用于通知表格视图该部分中存在的行数。第二个方法简单地返回`tableData`数组中的项目数。
- en: 'Add the code as shown here:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码，如以下所示：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, go to the storyboard. We need to establish the connection between the data
    sources and the delegates.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到故事板。我们需要建立数据源和代理之间的连接。
- en: Select the table view from our view. Right-click on it and connect to the yellow
    button, shown below, that is our table view controller.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的视图中选择表格视图。右键单击它，连接到下面的黄色按钮，这是我们表格视图控制器。
- en: Select both data sources and delegate them one by one, as shown in following
    screenshot:![Working with the table view](img/1829OT_02_14.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两个数据源，并按以下截图所示逐个委托它们：![与表格视图一起工作](img/1829OT_02_14.jpg)
- en: Finally, we can compile and run the program. Our simulator looks like this:![Working
    with the table view](img/1829OT_02_15.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以编译并运行程序。我们的模拟器看起来如下：![与表格视图一起工作](img/1829OT_02_15.jpg)
- en: Scroll view and its usage
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动视图及其用法
- en: 'Scroll view is used to display content more than the size of the screen. It
    can contain all of the other UI elements such as image views, labels, text views,
    and even another scroll view also. `UIScrollView` is one of the most useful controls
    in iOS. It is a great way to represent data that is larger than the screen; the
    data can be an image, list, forum, and so on. The scroll view element is present
    in interface builder and we can directly use it by dragging it to the storyboard.
    Let''s do this simple activity to understand the scroll view:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动视图用于显示比屏幕尺寸更大的内容。它可以包含所有其他UI元素，如图像视图、标签、文本视图，甚至另一个滚动视图。`UIScrollView`是iOS中最有用的控件之一。它是一种表示比屏幕更大的数据的好方法；数据可以是图像、列表、论坛等。滚动视图元素存在于界面构建器中，我们可以通过将其拖动到故事板中来直接使用它。让我们通过以下简单活动来了解滚动视图：
- en: Make a single view application and select the storyboard from the left-hand
    panel.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单视图应用程序，并从左侧面板选择故事板。
- en: Move to the storyboard and select view from the view controller.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到故事板，并从视图控制器中选择视图。
- en: Now, go to the Inspector toolbar and then to the **View** coordinates; change
    the height of the view to **1,000**, as shown in the following screenshot. So,
    your view will go longer than the screen.![Scroll view and its usage](img/1829OT_02_16.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往检查器工具栏，然后转到**视图**坐标；将视图的高度更改为**1,000**，如图所示。因此，您的视图将超过屏幕。![滚动视图及其用法](img/1829OT_02_16.jpg)
- en: Search for the scroll view in the interface builder from the right-hand panel
    and drag it to the view, as shown in the following screenshot. Don't forget to
    adjust the scroll view on top of the view properly:![Scroll view and its usage](img/1829OT_02_17.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中从右侧面板搜索滚动视图，并将其拖动到视图中，如图所示。不要忘记正确调整视图上的滚动视图：![滚动视图及其用法](img/1829OT_02_17.jpg)
- en: We need to add some element to check whether scroll view is working or not.
    So, add two labels, one to the top of the view and the other to the bottom of
    the view, and name them.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加一些元素来检查滚动视图是否工作。因此，添加两个标签，一个位于视图顶部，另一个位于视图底部，并给它们命名。
- en: Compile and run the program.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行程序。
- en: You will see only one top label; now, scroll down and see the bottom label.
    So, through the scroll view, we can scroll to any elements such as images, tables,
    and so on.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您将只看到一个顶部标签；现在，向下滚动并查看底部标签。因此，通过滚动视图，我们可以滚动到任何元素，如图像、表格等。
- en: Navigation controller
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航控制器
- en: Navigation controller is another UI element you commonly find in iOS apps. Many
    applications such as photo apps, YouTube, and contacts are made from a navigation
    controller. The navigation controller manages several subviews including a navigation
    bar at the top and back buttons. We can show or hide the navigation bar as per
    our application requirement. It is used when we want to use more than one view
    on a single application. Through navigation controller, we can move from one view
    to another view. Navigation controller is also a type of element and is available
    in the interface builder. Navigation controller provides the back button facility
    through which we can go to the previous view. We can add more than one view to
    the storyboard and can connect them together by using segue. **Segue** is a special
    feature provided by the navigation controller that pushes the navigation controller
    to the next view.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 导航控制器是iOS应用程序中常见的另一个UI元素。许多应用程序，如照片应用、YouTube和联系人，都是由导航控制器构建的。导航控制器管理多个子视图，包括顶部的导航栏和返回按钮。我们可以根据应用程序需求显示或隐藏导航栏。当我们在单个应用程序中使用多个视图时，会使用它。通过导航控制器，我们可以从一个视图移动到另一个视图。导航控制器也是一种元素，并在界面构建器中可用。导航控制器通过提供返回按钮来提供返回前一个视图的功能。我们可以在故事板中添加多个视图，并通过使用切换将它们连接起来。**切换**是导航控制器提供的一种特殊功能，它将导航控制器推送到下一个视图。
- en: 'Let''s make a simple app through which we can understand navigation controller
    easily:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个简单的应用程序来创建它，这样我们可以轻松地理解导航控制器：
- en: Make a single view application and move to the storyboard.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单视图应用程序，并移动到故事板。
- en: Delete the existing view from the left-hand panel.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板删除现有的视图。
- en: Search for navigation controller in the interface builder and drag it to the
    storyboard. Now, your screen looks like this:![Navigation controller](img/1829OT_02_18.jpg)
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在界面构建器中搜索导航控制器，并将其拖动到故事板。现在，您的屏幕看起来像这样：![导航控制器](img/1829OT_02_18.jpg)
- en: The linkage sign between the views is the segue sign. Select a button from the
    interface builder and drag it to the root view controller.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图之间的链接符号是切换符号。从界面构建器中选择一个按钮，并将其拖动到根视图控制器。
- en: Find a view from the components. Drag it near the root view controller and insert
    an image view to the newly inserted view.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从组件中找到一个视图。将其拖动到根视图控制器附近，并将图像视图插入到新插入的视图中。
- en: Copy any image from your directory to Xcode below all the classes in the left-hand
    panel.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的目录中复制任何图像到Xcode左侧面板的所有类下面。
- en: Go to the Inspector toolbar and give the image the same name as the image we
    have chosen.![Navigation controller](img/1829OT_02_19.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往检查器工具栏，并将图像命名为与我们选择的图像相同的名称。![导航控制器](img/1829OT_02_19.jpg)
- en: Finally, connect the button to the new view. Right-click on the button and drag
    the blue line to the new view to choose **Push** from the pop-up window.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将按钮连接到新视图。右键单击按钮，将蓝色线条拖动到新视图，并在弹出窗口中选择**Push**。
- en: It's time to compile and run the program. When you see the simulator, there
    will be a button and navigation bar at the top of the screen. When you click on
    the button, a new screen will appear with your image and there is also a back
    button available to get the previous view. The following screenshot shows the
    first view:![Navigation controller](img/1829OT_02_20.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候编译并运行程序了。当你看到模拟器时，屏幕顶部将有一个按钮和导航栏。当你点击按钮时，将出现一个新屏幕，显示你的图片，并且还有一个返回按钮可供使用，以获取前一个视图。以下截图显示了第一种视图：![导航控制器](img/1829OT_02_20.jpg)
- en: Here is the second view:![Navigation controller](img/1829OT_02_21.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是第二种视图：![导航控制器](img/1829OT_02_21.jpg)
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about components and how to create them programmatically.
    We mastered the concept of table views and how to use them. Also, we made a simple
    application using navigation controller. Now, we will discuss the framework in
    the next chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了组件及其如何通过编程创建。我们掌握了表格视图的概念及其使用方法。此外，我们还使用导航控制器制作了一个简单的应用程序。现在，我们将讨论下一章中的框架。
