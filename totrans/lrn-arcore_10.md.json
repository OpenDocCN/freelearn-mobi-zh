["```kt\nmkdir ARCore\ncd ARCore\n```", "```kt\ngit clone -b android https://github.com/holokit/holokitsdk.git\n```", "```kt\nusing System;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing Wrld;\nusing Wrld.Space;\nnamespace Packt.HoloCore\n{\n  public class SceneController : Singleton<SceneController>\n  { \n    protected SceneController() { }\n  }\n}\n```", "```kt\npublic LatLongAltitude position;\n```", "```kt\npublic void LoadScene(string scene, Camera mapCamera)\n{\n   if (Api.Instance.CameraApi.HasControlledCamera)\n   {\n     mapCamera = Api.Instance.CameraApi.GetControlledCamera(); \n   }\n   if(mapCamera == null) throw new ArgumentNullException(\"Camera\", \"Camera must be set, if map is not controlled.\");\n\n  position = Api.Instance.CameraApi.ScreenToGeographicPoint(new Vector3(mapCamera.pixelHeight/2, mapCamera.pixelWidth/2, mapCamera.nearClipPlane), mapCamera);\n\n  SceneManager.LoadScene(scene, LoadSceneMode.Single);\n}\n```", "```kt\nusing UnityEngine;\nnamespace Packt.HoloCore\n{\n  public class SceneSwitcher : MonoBehaviour {\n\n  }\n}\n```", "```kt\npublic Camera mapCamera;\n```", "```kt\npublic void SwitchScenes(string sceneName)\n{\n   SceneController.Instance.LoadScene(sceneName, mapCamera);\n}\n```", "```kt\nusing Wrld.Scripts.Utilities; //after me\nusing Packt.HoloCore;\n#if UNITY_EDITOR //before me\n```", "```kt\nconfig.Collisions.BuildingCollision = m_buildingCollisions; //after meconfig.DistanceToInterest = SceneController.Instance.position.GetAltitude();\nconfig.LatitudeDegrees = SceneController.Instance.position.GetLatitude();\nconfig.LongitudeDegrees = SceneController.Instance.position.GetLongitude();\nTransform rootTransform = null; //before me\n```", "```kt\npublic bool isLoaded;\npublic string status;\n```", "```kt\nvoid Awake()\n{\n  StartCoroutine(GetLocationPoint());\n}\n```", "```kt\nIEnumerator GetLocationPoint()\n{\n}\n```", "```kt\nAndroidPermissionsManager.RequestPermission(new string[] { \"android.permission.ACCESS_FINE_LOCATION\" });\n```", "```kt\nif (Input.location.isEnabledByUser == false)\n{\n  isLoaded = true;\n  yield return SetStatus(\"Location not authorized, starting at 0,0\", 1.0f);\n  yield break;\n}\n```", "```kt\npublic YieldInstruction SetStatus(string status, float time)\n{\n  this.status = status;\n  return new WaitForSeconds(time);\n}\n```", "```kt\nyield return SetStatus(\"-----STARTING LOCATION SERVICE-----\", 1);\nInput.location.Start();\n\n// Wait until service initializes\nint maxWait = 30;\nwhile (Input.location.status == LocationServiceStatus.Initializing && maxWait > 0)\n{\n  yield return new WaitForSeconds(1);\n  maxWait--;\n}\n```", "```kt\n// Service didn't initialize in 20 seconds\n if (maxWait < 1)\n {\n   yield return SetStatus(\"ERROR - Location service timed out, setting to 0,0,0\", 10.0f);\n   isLoaded = true;\n   yield break;\n }\n```", "```kt\nif (Input.location.status == LocationServiceStatus.Failed)\n{\n  yield return SetStatus(\"ERROR - Unable to determine device location.\", 10.0f);\n  isLoaded = true;\n  yield break;\n}\nelse\n{\n  //set the position\n  yield return SetStatus(\"-----SETTING LOCATION----\", 10.0f);\n  position = new LatLongAltitude(Input.location.lastData.latitude, Input.location.lastData.longitude, Input.location.lastData.altitude);\n  isLoaded = true; \n}\n```", "```kt\n Input.location.Stop();\n```", "```kt\npublic void LoadScene(string scene)\n{\n  SceneManager.LoadScene(scene, LoadSceneMode.Single);\n}\n\npublic void LoadScene(string scene, Camera mapCamera)\n{ \n  if (Api.Instance.CameraApi.HasControlledCamera)\n  {\n    mapCamera = Api.Instance.CameraApi.GetControlledCamera();\n  }\n  else if (mapCamera == null) throw new ArgumentNullException(\"Camera\", \"Camera must be set, if map is not controlled.\");\n  position = Api.Instance.CameraApi.ScreenToGeographicPoint(new Vector3(mapCamera.pixelHeight / 2, mapCamera.pixelWidth / 2, mapCamera.nearClipPlane), mapCamera);\n\n  Debug.LogFormat(\"cam position set {0}:{1}:{2}\", position.GetLatitude(), position.GetLongitude(), position.GetAltitude());\n  SceneManager.LoadScene(scene, LoadSceneMode.Single);\n}\n```", "```kt\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Packt.HoloCore\n{\n  public class SceneLoader : MonoBehaviour\n  {\n    public string sceneName;\n    public Text statusText;\n\n    void Update()\n    {\n      if (SceneController.Instance.isLoaded)\n      {\n        SceneController.Instance.LoadScene(sceneName);\n      }\n      else\n      {\n        statusText.text = SceneController.Instance.status;\n      }\n    }\n  }\n}\n```", "```kt\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Packt.HoloCore\n{\n  public class SceneCameraMover : MonoBehaviour\n  {\n    void Awake()\n    {\n      var altitude = SceneController.Instance.position.GetAltitude();\n      transform.position = new Vector3(0f, (float)altitude, 0f);\n    }\n  }\n}\n```"]