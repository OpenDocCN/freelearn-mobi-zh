["```swift\nstruct Person {\n  let name: String\n  let age: Int\n}\n\nfunc analyze(people: [Person]) {\n  let names = people.map { $0.name }\n  let last = names.maxElement()\n\n  let alphabetOrder = names.sort { $0 > $1 }\n  let lengthOrder = names.sort { $0.characters.count < $1.characters.count }\n  let longestName = lengthOrder.last\n\n  print(last, alphabetOrder, lengthOrder, longestName)\n\n  let age = people.map { $0.age }\n  let youngest = age.minElement()\n  let oldest = age.maxElement()\n  let average = age.reduce(0, combine: +) / age.count\n\n  print(youngest, oldest, average)\n}\n\nlet people = [Person(name: \"Sam\", age: 3),\n  Person(name: \"Lisa\", age: 68),\n  Person(name: \"Jesse\", age: 35)\n]\n\npeople + EnglandPopulation()\nanalyze(people)\n```", "```swift\nfunc analyze(people: [Person]) {\n\n  let names = people.map { $0.name }\n  analyzeNames(names)\n\n  let age = people.map { $0.age }\n  analyzeAge(age)\n}\n\nfunc analyzeNames(names: [String]) {\n  ...\n}\n\nfunc analyzeAge(age: [Int]) {\n  ...\n}\n```", "```swift\nstruct Person {\n  let name: String\n  let age: Int\n\n  init(name: String, age: Int) {\n    self.name = name\n    self.age = age\n    print(\"\\(name) Created\")\n  }\n}\n\nlet Jon = Person(name: \"Jon\", age: 20)\nlet Sam = Person(name: \"Sam\", age: 28)\n```", "```swift\nprint(\"Start!\")\nprint(\"Age: \\(Jon.age)\")\n//print(\"Age: \\(Sam.age)\")\n\nConsole Output:\n\nStart!\nJon Created\nAge: 20\n```", "```swift\nstruct Person {\n  let name: String\n  let age: Int\n\n  static let Jon = Person(name: \"Jon\", age: 20)\n  static let Sam = Person(name: \"Sam\", age: 25)\n\n  ...\n}\n```", "```swift\nprint(\"Age: \\(Person.Jon.age)\")\nprint(\"Age: \\(Person.Sam.age)\")\n```", "```swift\nstruct HealthData {\n  init() {\n    print(\"HealthData Created\") \n  }\n}\n\nstruct Person {\n  let name: String\n  let age: Int\n\n  var healthData = HealthData()\n}\n```", "```swift\n  lazy var healthData = HealthData()\n```", "```swift\nlet ola = Person(name: \"Ola\", age: 27)\nlet health = ola.healthData // Error! It's mutating a value\n\nvar bobby = Person(name: \"Bobby \", age: 5)\nlet bobbyHealth = bobby.healthData // Works fine\n\nlet someClass = SomeClass()\nsomeClass.healthData // Works fine because class is a reference type\n```", "```swift\nstruct Person {\n  ...\n  lazy var healthData: HealthData? = HealthData()\n\n  mutating func clearHealthData() {\n    healthData = nil\n  }\n}\n\nvar ola = Person(name: \"Ola\", age: 27)\nvar health = ola.healthData //Get lazy loaded here\nola.clearHealthData() \nhealth = ola.healthData // nil, nothing happens here.\n```", "```swift\nstruct Person {\n  ...\n  private var _healthData: HealthData?\n\n  mutating func clearHealthData() {\n    _healthData = nil\n  }\n\n  var healthData: HealthData {\n    mutating get {\n      _healthData = _healthData ?? HealthData()\n      return _healthData!\n    }\n  }\n}\n```", "```swift\nvar ola = Person(name: \"Ola\", age: 27)\nvar health = ola.healthData //Get lazy loaded here\nola.clearHealthData() \nhealth = ola.healthData // HealthData created again\n```", "```swift\nstruct Person {\n  let name: String\n  let lastName: String\n  let age: Int\n\n  var fullName: String {\n    print(\"calculating fullName\")\n    return \"\\(name) \\(lastName)\"\n  }\n}\n\nvar jack = Person(name: \"Jack\", lastName: \"Samuel\", age: 21)\nprint(jack.fullName)\nprint(jack.fullName)\n```", "```swift\nlet numbers = Array(1...1_000_000) \nlet doubledNumbers = numbers.map { $0 * 2 }\ndoubledNumbers.last\n```", "```swift\nlet numbers = Array(1...1_000_000) \nlet lazyNumbers = numbers.lazy\nlet doubledNumbers = lazyNumbers.map { $0 * 2 }\ndoubledNumbers.last\n```", "```swift\npublic var lazy: LazyCollection<Self> { get }\n```", "```swift\nmutating func next() -> Self.Element?\n```", "```swift\nprotocol SequenceType {\n  func generate() -> Self.Generator\n}\nprotocol GeneratorType {\n  mutating func next() -> Self.Element?\n}\n```", "```swift\nlet seq = AnySequence(1...10)\nfor i in seq {\n  i\n}\n```", "```swift\nlet gen = seq.generate()\nwhile let num = gen.next() {\n  num\n}\n```", "```swift\nsubscript (position: Self.Index) -> Self._Element { get }\nvar startIndex: Self.Index { get }\nvar endIndex: Self.Index { get }\n```", "```swift\nstruct InfiniteNums: SequenceType {\n\n  func generate() -> AnyGenerator<Int> {\n    var num = 0\n\n    return anyGenerator {\n      print(\"gen \\(num)\")\n      return num++\n    }\n  }\n}\n```", "```swift\nstruct Collection10: CollectionType {\n  let data = Array(1...10)\n\n  var startIndex: Int {\n    return data.startIndex\n  }\n\n  var endIndex: Int {\n    return data.endIndex\n  }\n\n  subscript (position: Int) -> Int {\n    print(\"Pos \\(position)\")\n    return data[position]\n  }\n\n  func generate() -> AnyGenerator<Int> {\n    var index = 0\n\n    return anyGenerator {\n      print(\"Col index: \\(index)\")\n      let next: Int? = index < self.endIndex ? self.data[index++] : nil\n      return next\n    }\n  }\n}\n```", "```swift\npublic var lazy: LazyCollection<Self> { get }\npublic var lazy: LazySequence<Self> { get }\n[1, 2, 3].lazy\nAnySequence(1...10).lazy\n```", "```swift\nlet infNums = InfiniteNums()\nlet lazyNumbers = infNums.lazy\n\nlet oddNumbers = lazyNumbers.filter { $0 % 2 != 0 }\nlet doubled = lazyNumbers.map { $0 * 2 }\nlet mixed = lazyNumbers.filter { $0 % 4 != 0 }.map { $0  * 2 }\n\nvar gen = oddNumbers.generate()\nvar gen2 =  mixed.generate()\n\nfor _ in 0...10 {\n  gen.next()\n  gen2.next()\n}\n```", "```swift\nlazyNumbers.contains(3) // returns true, stops when found\n// lazyNumbers.minElement() // Infinite loop\n```", "```swift\nlet isOdd = { $0 % 2 != 0 }\nlet doubleElements = { $0 * 2 }\n\nlet col = Collection10()\nlet lazyCol = col.lazy\n```", "```swift\nlazyCol.map(doubleElements) //LazyMapCollection<Self.Elements, U>\nlazyCol.reverse() //LazyCollection<ReverseRandomAccessCollection<Self.Elements>>\nlazyCol.filter(isOdd)  //LazyFilterCollection<Self.Elements>\n```", "```swift\nlet lazyMap = lazyCol.map(doubleElements)\nlet count = lazyMap.count\n\nlazyMap.isEmpty\nlazyMap.reverse().isEmpty\n```", "```swift\nlazyCol.filter(isOdd).isEmpty\nlazyCol.filter(isOdd).count\n```", "```swift\n//Query elements\nlazyCol.map(doubleElements)[3]\n\nlet revCol = lazyCol.reverse()\nlet ind = revCol.startIndex.advancedBy(2)\nrevCol[ind]\n\nlet revMapCol = lazyCol.reverse().map(doubleElements)\nlet index = revMapCol.startIndex.advancedBy(2)\nrevMapCol[index]\n```", "```swift\nlet col = Array(0...10)\nlet lazyCol = col.lazy\n\nvar x = 10\nlet mapped = lazyCol.map { $0 + x++ }\n\nfor i in mapped {\n  print(\" \\(i)\", terminator:\"\") //10 12 14 16 18 20 22 24 26 28 30\n}\n\nprint(\"\")\nfor i in mapped {\n  print(\" \\(i)\", terminator:\"\") //21 23 25 27 29 31 33 35 37 39 41\n}\n```", "```swift\n// No state\nlet mapped = lazyCol.map { $0 + $0 + 10 }\n```"]