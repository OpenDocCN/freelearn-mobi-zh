["```swift\n    #import <UIKit/UIKit.h>\n    @interface AddNoteViewController : UITableViewController\n    - (IBAction)cancel:(id)sender;\n    - (IBAction)save:(id)sender;\n    @property (weak, nonatomic) IBOutlet UITextField *noteTextField;\n    ```", "```swift\n    @property (strong, nonatomic) NSMutableArray *notes;\n    ```", "```swift\n    - (NSArray *)notes\n    {\n      if(!_notes){\n        _notes = [NSMutableArray array];\n        _notes = [[[NSUbiquitousKeyValueStore defaultStore] arrayForKey:@\"AVAILABLE_NOTES\"] mutableCopy];\n      }\n      return _notes;\n    }\n    ```", "```swift\n    - (void)viewDidLoad\n    {\n      [super viewDidLoad];\n      self.navigationItem.leftBarButtonItem = self.editButtonItem;\n      //  Observer to catch changes from iCloud\n      NSUbiquitousKeyValueStore *store = [NSUbiquitousKeyValueStore defaultStore];\n      [[NSNotificationCenter defaultCenter] addObserver:selfselector:@selector(storeDidChange:)name: NSUbiquitousKeyValueStoreDidChangeExternallyNotificationobject:store]; [[NSUbiquitousKeyValueStore defaultStore] synchronize]; // Observer to catch the local changes \n      [[NSNotificationCenter defaultCenter] addObserver:selfselector:@selector(didAddNewNote:)name:@\"New Note\"object:nil]; }\n    ```", "```swift\n    #pragma mark - Observer New Note\n    - (void)didAddNewNote:(NSNotification *)notification{\n        NSDictionary *userInfo = [notification userInfo];\n        NSString *noteStr = [userInfo valueForKey:@\"Note\"];\n        [self.notes addObject:noteStr];\n        // Update data on the iCloud\n        [[NSUbiquitousKeyValueStore defaultStore] setArray:self.notes forKey:@\"AVAILABLE_NOTES\"];\n        // Reload the table view to show changes\n        [self.tableView reloadData];\n    }\n\n    #pragma mark - Observer\n\n    - (void)storeDidChange:(NSNotification *)notification{\n        // Retrieve the changes from iCloud\n        _notes = [[[NSUbiquitousKeyValueStore defaultStore] arrayForKey:@\"AVAILABLE_NOTES\"] mutableCopy];\n        // Reload the table view to show changes\n        [self.tableView reloadData];\n    }\n    ```", "```swift\n    - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView\n      {\n        return 1;\n      }\n    - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n    {\n      return [self.notes count];\n    }\n\n    - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n    {\n      static NSString *CellIdentifier = @\"Cell\";\n      UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier forIndexPath:indexPath];\n      NSString *note = [self.notes objectAtIndex:indexPath.row];\n      [cell.textLabel setText:note];\n      return cell;\n    }\n    ```", "```swift\n    - (IBAction)cancel:(id)sender {\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }\n    - (IBAction)save:(id)sender {\n        // Notify the previous view to save the changes locally\n        [[NSNotificationCenter defaultCenter] postNotificationName:@\"New Note\" object:selfuserInfo:[NSDictionary dictionaryWithObject:self.noteTextField.text forKey:@\"Note\"]];\n        [self dismissViewControllerAnimated:YES completion:nil];\n    }\n    ```", "```swift\n    #import <security.h>\n    @interface KeyChain : NSObject\n    {\n      NSString * service;\n      NSString * group;\n    }\n    -(id) initWithService:(NSString *) service_ withGroup:(NSString*)group_;\n\n    -(BOOL) insert:(NSString *)key : (NSData *)data;\n    -(NSData*) find:(NSString*)key;\n    ```", "```swift\n    @implementation KeyChain\n    -(id) initWithService:(NSString *) service_ withGroup:(NSString*)group_\n    {   self =[super init];\n        if(self)\n        {\n          service = [NSString stringWithString:service_];\n          if(group_)\n            group = [NSString stringWithString:group_];\n        }\n        return  self;\n    }\n    -(NSMutableDictionary*) prepareDict:(NSString *) key\n    {\n        NSMutableDictionary *dict = [[NSMutableDictionary alloc] init];\n        [dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)kSecClass];\n        NSData *encodedKey = [key dataUsingEncoding:NSUTF8StringEncoding];\n        [dict setObject:encodedKey forKey:(__bridge id)kSecAttrGeneric];\n        [dict setObject:encodedKey forKey:(__bridge id)kSecAttrAccount];\n        [dict setObject:service forKey:(__bridge id)kSecAttrService];\n        [dict setObject:(__bridge id)kSecAttrAccessibleAlwaysThisDeviceOnly forKey:(__bridge id)kSecAttrAccessible];\n        if(group != nil)\n          [dict setObject:group forKey:(__bridge id)kSecAttrAccessGroup];\n        return  dict;\n\n    }\n    -(BOOL) insert:(NSString *)key : (NSData *)data\n    {\n        NSMutableDictionary * dict =[self prepareDict:key];\n        [dict setObject:data forKey:(__bridge id)kSecValueData];\n        OSStatus status = SecItemAdd((__bridge CFDictionaryRef)dict, NULL);\n        if(errSecSuccess != status) {\n          NSLog(@\"Unable add item with key =%@ error:%ld\",key,status);\n        }\n        return (errSecSuccess == status);\n    }\n    -(NSData*) find:(NSString*)key\n    {\n        NSMutableDictionary *dict = [self prepareDict:key];\n        [dict setObject:(__bridge id)kSecMatchLimitOne forKey:(__bridge id)kSecMatchLimit];\n        [dict setObject:(id)kCFBooleanTrue forKey:(__bridge id)kSecReturnData];\n        CFTypeRef result = NULL;\n        OSStatus status = SecItemCopyMatching((__bridge CFDictionaryRef)dict,&result);\n\n        if( status != errSecSuccess) {\n          NSLog(@\"Unable to fetch item for key %@ with error:%ld\",key,status);\n        return nil;\n        }\n        return (__bridge NSData *)result;\n    }\n    ```", "```swift\n    #define SERVICE_NAME @\"ANY_NAME_FOR_YOU\"\n    #define GROUP_NAME @\"iOS\"\n    @interface ViewController ()\n    @end\n    @implementation ViewController\n    - (void)viewDidLoad\n    {\n        [super viewDidLoad];\n        keychain = [[KeyChain alloc]initWithService:SERVICE_NAME withGroup:nil];\n    }\n\n    -(void) showMessage:(NSString*)text\n    {\n      UIAlertView * alert =[[UIAlertView alloc ] initWithTitle:@\"Info\"message:text delegate:nil cancelButtonTitle:@\"Cancel\" otherButtonTitles: nil];\n      [alert show];\n    }\n    - (IBAction)save:(id)sender {\n        NSString *keyString =self.keyTextField.text;\n        NSData *data = [self.dataTextField.text dataUsingEncoding:NSUTF8StringEncoding];\n        if([keychain insert:keyString :data])\n        {\n          [self showMessage:@\"Successfully added data\"];\n        }\n        else\n          [self showMessage:@\"Failed to  add data\"];\n        self.dataTextField.text =@\"\";\n        self.keyTextField.text =@\"\";\n    }\n    - (IBAction)find:(id)sender {\n        NSString *keyString =self.keyTextField.text;\n        NSData * data =[keychain find:keyString];\n        if(data)\n        {\n          [self showMessage:[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]];\n        }\n        else\n        {\n            [self showMessage:@\"Failed to get Data\"];\n        }\n    }\n\n    - (BOOL)textFieldShouldReturn:(UITextField *)textField\n    {\n        [textField resignFirstResponder];\n        return YES;\n    }\n    ```", "```swift\n    #import<localAuthentication/localAuthentication.h>\n    ```", "```swift\n    LAContext *passcode = [[LAContext alloc] init];\n    ```", "```swift\n    - (BOOL)canEvaluatePolicy:(LAPolicy)policy error:(NSError * __autoreleasing *)error;\n    ```", "```swift\n    - (void)evaluatePolicy:(LAPolicy)policy localizedReason:(NSString *)localizedReason \n        reply:(void(^)(BOOL success, NSError *error))reply;\n    ```", "```swift\n    LAContext *passcode = [[LAContext alloc] init];\n    NSError *error = nil;\n    NSString *Reason = <#String explaining why our app needs authentication#>;\n    if ([passcode canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&error])\n    {\n      [passcode evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n        localizedReason:Reason reply:^(BOOL success, NSError *error) {\n            if (success) \n            {\n              // User authenticated successfully\n            } else \n            {\n              // User did not authenticate successfully,go through the error\n            }\n        }];\n    }\n    else\n    {\n        // could not go through policy look at error and show an appropriate message to user\n    }\n    ```"]