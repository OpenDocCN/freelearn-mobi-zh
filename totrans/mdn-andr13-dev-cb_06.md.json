["```kt\n    dependencies {\n    ```", "```kt\n    implementation \"androidx.Room:Room-runtime:2.x.x\"\n    ```", "```kt\n    kapt \"androidx.Room:Room-compiler:2.x.x\"\n    ```", "```kt\n    }\n    ```", "```kt\n    //include kapt on your plugins\n    ```", "```kt\n    plugins {\n    ```", "```kt\n        id 'kotlin-kapt'\n    ```", "```kt\n    }\n    ```", "```kt\n    @Entity(tableName = \"user_information\")\n    ```", "```kt\n    data class UserInformationModel(\n    ```", "```kt\n        val id: Int = 0,\n    ```", "```kt\n        val firstName: String,\n    ```", "```kt\n        val lastName: String,\n    ```", "```kt\n        val dateOfBirth: Int,\n    ```", "```kt\n        val gender: String,\n    ```", "```kt\n        val city: String,\n    ```", "```kt\n        val profession: String\n    ```", "```kt\n    )\n    ```", "```kt\n    @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n    import androidx.Room.Entity\n    ```", "```kt\n    import androidx.Room.PrimaryKey\n    ```", "```kt\n    @Entity(tableName = \"user_information\")\n    ```", "```kt\n    data class UserInformationModel(\n    ```", "```kt\n        @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n        val id: Int = 0,\n    ```", "```kt\n        ...\n    ```", "```kt\n    )\n    ```", "```kt\nprivate const val DEFAULT_USER_ID = 0\n@Dao\ninterface UserInformationDao {\n    @Query(\"SELECT * FROM user_information\")\n    fun getUsersInformation():\n        Flow<List<UserInformationModel>>\n    @Query(\"SELECT * FROM user_information WHERE id =\n        :userId\")\n    fun loadAllUserInformation(userId: Int =\n        DEFAULT_USER_ID): Flow<UserInformationModel>\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertUserInformation(userInformation:\n        UserInformationModel)\n    @Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateUserInformation(userInformation:\n        UserInformationModel)\n    @Delete\n    suspend fun deleteUserInformation(userInformation:\n        UserInformationModel)\n}\n```", "```kt\n    @Database(entities = [UserInformation::class], version = 1, exportSchema = false)\n    ```", "```kt\n    abstract class UserInformationDatabase : RoomDatabase() {\n    ```", "```kt\n        abstract fun userInformationDao():\n    ```", "```kt\n            UserInformationDao\n    ```", "```kt\n    }\n    ```", "```kt\n    @HiltAndroidApp\n    ```", "```kt\n    class UserInformation : Application()\n    ```", "```kt\n    <application\n    ```", "```kt\n        android:allowBackup=\"true\"\n    ```", "```kt\n        android:name=\".UserInformation\"\n    ```", "```kt\n        tools:targetApi=\"33\">\n    ```", "```kt\n    ...\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    class DataBaseModule {\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Provides\n    ```", "```kt\n        fun provideDatabase(@ApplicationContext context:\n    ```", "```kt\n        Context): UserInformationDatabase {\n    ```", "```kt\n            return Room.databaseBuilder(\n    ```", "```kt\n                context,\n    ```", "```kt\n                UserInformationDatabase::class.java,\n    ```", "```kt\n                \"user_information.db\"\n    ```", "```kt\n            ).build()\n    ```", "```kt\n        }\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Provides\n    ```", "```kt\n        fun provideUserInformationDao(\n    ```", "```kt\n        userInformationDatabase: UserInformationDatabase):\n    ```", "```kt\n        UserInformationDao {\n    ```", "```kt\n            return\n    ```", "```kt\n              userInformationDatabase.userInformationDao()\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    interface UserInfoService {\n    ```", "```kt\n        fun getUserInformationFromDB():\n    ```", "```kt\n            Flow<UserInformation>\n    ```", "```kt\n        suspend fun addUserInformationInDB(\n    ```", "```kt\n            userInformation: UserInformation)\n    ```", "```kt\n    }\n    ```", "```kt\n    @Singleton\n    ```", "```kt\n    class UserInfoServiceImpl() : UserInfoService {\n    ```", "```kt\n        override fun getUserInformationFromDB():\n    ```", "```kt\n            Flow<UserInformation> {\n    ```", "```kt\n                TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n        override suspend fun addUserInformationInDB(\n    ```", "```kt\n            userInformation: UserInformation) {\n    ```", "```kt\n                TODO(\"Not yet implemented\")\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\n    class UserInfoServiceImpl @Inject constructor(\n    ```", "```kt\n    private val userInformationDao: UserInformationDao\n    ```", "```kt\n    ): UserInfoService\n    ```", "```kt\n    override suspend fun addUserInformationInDB(\n    ```", "```kt\n    userInformation: UserInformation) {\n    ```", "```kt\n        userInformationDao.insertUserInformation(\n    ```", "```kt\n            UserInformation(\n    ```", "```kt\n                firstName = userInformation.firstName,\n    ```", "```kt\n                lastName = userInformation.lastName,\n    ```", "```kt\n                dateOfBirth = userInformation.dateOfBirth,\n    ```", "```kt\n                gender = userInformation.gender,\n    ```", "```kt\n                city = userInformation.city,\n    ```", "```kt\n                profession = userInformation.profession\n    ```", "```kt\n            )\n    ```", "```kt\n        )\n    ```", "```kt\n    }\n    ```", "```kt\n    override fun getUserInformationFromDB() =\n    ```", "```kt\n        userInformationDao.getUsersInformation().filter {\n    ```", "```kt\n            information -> information.isNotEmpty()\n    ```", "```kt\n        }.flatMapConcat {\n    ```", "```kt\n            userInformationDao.loadAllUserInformation()\n    ```", "```kt\n                .map { userInfo ->\n    ```", "```kt\n                    UserInfo(\n    ```", "```kt\n                        id = userInfo.id,\n    ```", "```kt\n                        firstName = userInfo.firstName,\n    ```", "```kt\n                        lastName = userInfo.lastName,\n    ```", "```kt\n                        dateOfBirth =\n    ```", "```kt\n                            userInfo.dateOfBirth,\n    ```", "```kt\n                        gender = userInfo.gender,\n    ```", "```kt\n                        city = userInfo.city,\n    ```", "```kt\n                        profession = userInfo.profession\n    ```", "```kt\n                    )\n    ```", "```kt\n                }\n    ```", "```kt\n        }\n    ```", "```kt\n    @Module\n    ```", "```kt\n    @InstallIn(SingletonComponent::class)\n    ```", "```kt\n    abstract class UserInfoServiceModule {\n    ```", "```kt\n        @Singleton\n    ```", "```kt\n        @Binds\n    ```", "```kt\n        abstract fun bindUserService(\n    ```", "```kt\n            userInfoServiceImpl: UserInfoServiceImpl):\n    ```", "```kt\n                UserInfoService\n    ```", "```kt\n    }\n    ```", "```kt\n    @HiltViewModel\n    ```", "```kt\n    class UserInfoViewModel @Inject constructor(\n    ```", "```kt\n        private val userInfoService: UserInfoService\n    ```", "```kt\n    ) : ViewModel() {\n    ```", "```kt\n        fun saveUserInformationData(userInfo: UserInfo) {\n    ```", "```kt\n            viewModelScope.launch {\n    ```", "```kt\n                userInfoService.addUserInformationInDB(\n    ```", "```kt\n                    userInfo)\n    ```", "```kt\n            }\n    ```", "```kt\n        }\n    ```", "```kt\n    }\n    ```", "```kt\nfun provideDatabase(@ApplicationContext context: Context): UserInformationDatabase {\n    return Room\n        .databaseBuilder(context,\n            UserInformationDatabase::class.java,\n            \"user_information.db\")\n        .build()\n}\n```", "```kt\nfun provideUserInformationDao(userInformationDatabase: UserInformationDatabase): UserInformationDao {\n    return userInformationDatabase.userInformationDao()\n}\n```", "```kt\n    @Entity(tableName = \"budgets\")\n    ```", "```kt\n    data class BudgetData(\n    ```", "```kt\n        @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n        var id: Int = 0,\n    ```", "```kt\n        var budgetName: String = \"\",\n    ```", "```kt\n        var budgetAmount: Double = 0.0,\n    ```", "```kt\n        var expenses: String = \"\",\n    ```", "```kt\n        var startDate: String = \"\",\n    ```", "```kt\n        var endDate: String = \"\",\n    ```", "```kt\n        var notify: Int = 0,\n    ```", "```kt\n        var currency: String = \"\",\n    ```", "```kt\n        var totalExpenses: Double\n    ```", "```kt\n    )\n    ```", "```kt\n    @Entity(tableName = \"expenses\")\n    ```", "```kt\n    data class ExpenseData(\n    ```", "```kt\n        @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n        var id: Int = 0,\n    ```", "```kt\n        var expenseName: String = \"\",\n    ```", "```kt\n        var expenseType: String = \"\",\n    ```", "```kt\n        var expenseAmount: Double = 0.0,\n    ```", "```kt\n        @ColumnInfo(name = \"updated_at\")\n    ```", "```kt\n        var expenseDate: String = \"\",\n    ```", "```kt\n        var note: String = \"\",\n    ```", "```kt\n        var currency: String = \"\"\n    ```", "```kt\n    )\n    ```", "```kt\n    @Entity(tableName = \"items\")\n    ```", "```kt\n    Data class ExpenseItem(\n    ```", "```kt\n        @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n        private var _id: Int\n    ```", "```kt\n        val name: String\n    ```", "```kt\n        var type: String?\n    ```", "```kt\n        val imageContentId: Int\n    ```", "```kt\n        val colorContentId: Int)\n    ```", "```kt\n    abstract class AppDatabase : RoomDatabase() {\n    ```", "```kt\n        abstract fun budgetDao(): BudgetDao\n    ```", "```kt\n        abstract fun itemDao(): ItemDao\n    ```", "```kt\n        abstract fun expenseDao(): ExpenseDao\n    ```", "```kt\n    }\n    ```", "```kt\n    @Database(\n    ```", "```kt\n        entities = [ExpenseItem::class, BudgetData::class,\n    ```", "```kt\n            ExpenseData::class],\n    ```", "```kt\n        version = 1\n    ```", "```kt\n    )\n    ```", "```kt\n    @TypeConverters(DateConverter::class)\n    ```", "```kt\n    abstract class AppDatabase : RoomDatabase() {\n    ```", "```kt\n        abstract fun budgetDao(): BudgetDao\n    ```", "```kt\n        abstract fun itemDao(): ItemDao\n    ```", "```kt\n        abstract fun expenseDao(): ExpenseDao\n    ```", "```kt\n    }\n    ```", "```kt\n    data class ExpenseItem(\n    ```", "```kt\n    ...\n    ```", "```kt\n        @Embedded val tasks: Tasks\n    ```", "```kt\n      )\n    ```", "```kt\n    data class Tasks(...)\n    ```", "```kt\n    data class Tasks (\n    ```", "```kt\n        @PrimaryKey(autoGenerate = true)\n    ```", "```kt\n        var id = 0\n    ```", "```kt\n        var description: String\n    ```", "```kt\n        var priority: Int\n    ```", "```kt\n        @ColumnInfo(name = \"updated_at\")\n    ```", "```kt\n        var updatedAt: Date)\n    ```", "```kt\n    fun onCreate(db: SQLiteDatabase) {\n    ```", "```kt\n        // Create a String that contains the SQL statement\n    ```", "```kt\n           to create the items table\n    ```", "```kt\n        val SQL_CREATE_ITEMS_TABLE =(\n    ```", "```kt\n                \"CREATE TABLE \" + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .TABLE_NAME.toString() + \" (\"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry.\n    ```", "```kt\n                         _Id.toString()\n    ```", "```kt\n                         + \" INTEGER PRIMARY KEY\n    ```", "```kt\n                         AUTOINCREMENT, \"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .COLUMN_ITEM_NAME.toString()\n    ```", "```kt\n                         + \" TEXT NOT NULL, \"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .COLUMN_ITEM_TYPE.toString()\n    ```", "```kt\n                         + \" TEXT NOT NULL, \"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .COLUMN_ITEM_LOGO.toString()\n    ```", "```kt\n                         + \" INTEGER NOT NULL DEFAULT 0, \"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .COLUMN_ITEM_COLOR.toString()\n    ```", "```kt\n                         + \" INTEGER NOT NULL DEFAULT 0, \"\n    ```", "```kt\n                         + ItemsContract.ItemsEntry\n    ```", "```kt\n                         .COLUMN_ITEM_CREATED_DATE\n    ```", "```kt\n                         .toString() + \" DATE NOT NULL\n    ```", "```kt\n                         DEFAULT CURRENT_TIMESTAMP);\")\n    ```", "```kt\n        // Execute the SQL statement\n    ```", "```kt\n        db.execSQL(SQL_CREATE_ITEMS_TABLE)\n    ```", "```kt\n    }\n    ```", "```kt\n    val MIGRATION_1_2 = object : Migration(1, 2) {\n    ```", "```kt\n        override fun migrate(database:\n    ```", "```kt\n        SupportSQLiteDatabase) {\n    ```", "```kt\n            //alter items table\n    ```", "```kt\n            database.execSQL(\"CREATE TABLE new_items (_id\n    ```", "```kt\n                INTEGER PRIMARY KEY AUTOINCREMENT NOT\n    ```", "```kt\n                NULL, name TEXT NOT NULL, type TEXT,\n    ```", "```kt\n                imageContentId INTEGER NOT NULL,\n    ```", "```kt\n                colorContentId INTEGER NOT NULL)\")\n    ```", "```kt\n            database.execSQL(\"INSERT INTO new_items\n    ```", "```kt\n                (_id,name,type,imageContentId,\n    ```", "```kt\n                colorContentId)Select_id,name,type,\n    ```", "```kt\n                imageContentId, colorContentId FROM\n    ```", "```kt\n                items\")\n    ```", "```kt\n            database.execSQL(\"DROP TABLE items\")\n    ```", "```kt\n            database.execSQL(\"ALTER TABLE new_items RENAME\n    ```", "```kt\n                TO items\")\n    ```", "```kt\n        }\n    ```", "```kt\n    Room.databaseBuilder(\n    ```", "```kt\n        androidContext(),\n    ```", "```kt\n        AppDatabase::class.java, \"budget.db\"\n    ```", "```kt\n    )\n    ```", "```kt\n        .addCallback(object : RoomDatabase.Callback() {\n    ```", "```kt\n            override fun\n    ```", "```kt\n            onCreate(db:SupportSQLiteDatabase){\n    ```", "```kt\n                super.onCreate(db)\n    ```", "```kt\n            }\n    ```", "```kt\n        })\n    ```", "```kt\n        .addMigrations(MIGRATION_1_2)\n    ```", "```kt\n        .build()\n    ```", "```kt\n    @Database(\n    ```", "```kt\n        entities = [<List of entities>],\n    ```", "```kt\n        version = 2\n    ```", "```kt\n    )\n    ```", "```kt\n    abstract class AppDatabase : RoomDatabase() {\n    ```", "```kt\n        abstract fun itemDao(): ItemDao\n    ```", "```kt\n    }\n    ```", "```kt\n    androidTestImplementation \"com.google.truth:truth:1.1.3\"\n    ```", "```kt\n    androidTestImplementation \"android.arch.core:core-testing:1.1.1\"\n    ```", "```kt\n    class UserInformationDBTest {...}\n    ```", "```kt\n    private lateinit var database: UserInformationDatabase\n    ```", "```kt\n    private lateinit var userInformationDao: UserInformationDao\n    ```", "```kt\n    @Before\n    ```", "```kt\n    fun databaseCreated() {\n    ```", "```kt\n        database = Room.inMemoryDatabaseBuilder(\n    ```", "```kt\n            ApplicationProvider.getApplicationContext(),\n    ```", "```kt\n                UserInformationDatabase::class.java\n    ```", "```kt\n        )\n    ```", "```kt\n            .allowMainThreadQueries()\n    ```", "```kt\n            .build()\n    ```", "```kt\n        userInformationDao = database.userInformationDao()\n    ```", "```kt\n    }\n    ```", "```kt\n    @After\n    ```", "```kt\n    fun closeDatabase() {\n    ```", "```kt\n        database.close()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun insertUserInformationReturnsTrue() = runBlocking {\n    ```", "```kt\n        val userOne = UserInformationModel(\n    ```", "```kt\n            id = 1,\n    ```", "```kt\n            firstName = \"Michelle\",\n    ```", "```kt\n            lastName = \"Smith\",\n    ```", "```kt\n            dateOfBirth = 9121990,\n    ```", "```kt\n            gender = \"Male\",\n    ```", "```kt\n            city = \"New york\",\n    ```", "```kt\n            profession = \"Software Engineer\"\n    ```", "```kt\n        )\n    ```", "```kt\n        userInformationDao.insertUserInformation(userOne)\n    ```", "```kt\n        val latch = CountDownLatch(1)\n    ```", "```kt\n        val job = async(Dispatchers.IO) {\n    ```", "```kt\n            userInformationDao.getUsersInformation()\n    ```", "```kt\n                .collect {\n    ```", "```kt\n                    assertThat(it).contains(userOne)\n    ```", "```kt\n                    latch.countDown()\n    ```", "```kt\n                }\n    ```", "```kt\n        }\n    ```", "```kt\n        latch.await()\n    ```", "```kt\n        job.cancelAndJoin()\n    ```", "```kt\n    }\n    ```", "```kt\n    @Test\n    ```", "```kt\n    fun deleteUserInformation() = runBlocking {\n    ```", "```kt\n        val userOne = UserInformationModel(\n    ```", "```kt\n            id = 1,\n    ```", "```kt\n            firstName = \"Michelle\",\n    ```", "```kt\n            lastName = \"Smith\",\n    ```", "```kt\n            dateOfBirth = 9121990,\n    ```", "```kt\n            gender = \"Male\",\n    ```", "```kt\n            city = \"New york\",\n    ```", "```kt\n            profession = \"Software Engineer\"\n    ```", "```kt\n        )\n    ```", "```kt\n        val userTwo = UserInformationModel(\n    ```", "```kt\n            id = 2,\n    ```", "```kt\n            firstName = \"Mary\",\n    ```", "```kt\n            lastName = \"Simba\",\n    ```", "```kt\n            dateOfBirth = 9121989,\n    ```", "```kt\n            gender = \"Female\",\n    ```", "```kt\n            city = \"New york\",\n    ```", "```kt\n            profession = \"Senior Android Engineer\"\n    ```", "```kt\n        )\n    ```", "```kt\n        userInformationDao.insertUserInformation(userOne)\n    ```", "```kt\n        userInformationDao.insertUserInformation(userTwo)\n    ```", "```kt\n        userInformationDao.deleteUserInformation(userTwo)\n    ```", "```kt\n        val latch = CountDownLatch(1)\n    ```", "```kt\n        val job = async(Dispatchers.IO) {\n    ```", "```kt\n            userInformationDao.loadAllUserInformation()\n    ```", "```kt\n                .collect {\n    ```", "```kt\n                    assertThat(it).doesNotContain(userTwo)\n    ```", "```kt\n                    latch.countDown()\n    ```", "```kt\n                }\n    ```", "```kt\n        }\n    ```", "```kt\n        latch.await()\n    ```", "```kt\n        job.cancelAndJoin()\n    ```", "```kt\n    }\n    ```", "```kt\n@After\nfun closeDatabase() {\n    database.close()\n}\n```"]