["```kt\ndependencies:\n  flutter:\n    sdk: flutter\n\n  cloud_firestore: ^0.9.5+2  //Add this line\n```", "```kt\nflutter packages get\n```", "```kt\nbuildscript { \ndependencies \n{ \n// Add this line \nclasspath 'com.google.gms:google-services:4.2.0' \n} \n}\n```", "```kt\ndependencies {\n  // Add this line\n  *implementation 'com.google.firebase:firebase-core:16.0.1'* }\n...\n// Add to the bottom of the file\napply plugin: 'com.google.gms.google-services'\n```", "```kt\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\n// Creating Object to temporary make the list items. We will replace it when we connect it to Firestore\n\nfinal party = [\n {\"partyname\": \"BJP\", \"rating\": 1},\n {\"partyname\": \"Congress\", \"rating\": 3},\n {\"partyname\": \"AAP\", \"rating\": 5},\n {\"partyname\": \"Janata Dal Party\", \"rating\": 9},\n {\"partyname\": \"NOTA\", \"rating\": 11},\n];\n\nclass MyApp extends StatelessWidget {\n @override\n Widget build(BuildContext context) {\n   return MaterialApp(\n     title: 'State Party Elections - Worker Profile',\n     home: MyHomePage(),\n   );\n }\n}\n\nclass MyHomePage extends StatefulWidget {\n @override\n _MyHomePageState createState() {\n   return _MyHomePageState();\n }\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n @override\n Widget build(BuildContext context) {\n   return Scaffold(\n     appBar: AppBar(title: Text('Party Votes')),\n     body: _buildBody(context),\n   );\n }\n\n Widget _buildBody(BuildContext context) {\n   // We will add the code here in the next section\n   return _buildList(context, party);\n }\n\n Widget _buildList(BuildContext context, List<Map> snapshot) {\n   return ListView(\n     padding: const EdgeInsets.only(top: 22.0),\n     children: snapshot.map((data) => _buildListItem(context, data)).toList(),\n   );\n }\n\n Widget _buildListItem(BuildContext context, Map data) {\n   final result = Record.fromMap(data);\n\n// Adding the padding to ensure enough space is given\n   return Padding(\n     key: ValueKey(result.name),\n     padding: const EdgeInsets.symmetric(horizontal: 15.0, vertical: 7.0),\n     child: Container(\n       decoration: BoxDecoration(\n         border: Border.all(color: Colors.red),\n         borderRadius: BorderRadius.circular(6.0),\n       ),\n// Showing the list item, with name towards the left and the votes to the right\n\n       child: ListTile(\n         title: Text(record.partyname),\n         trailing: Text(record.partyvotes.toString()),\n         onTap: () => print(record),\n       ),\n     ),\n   );\n }\n}\n\nclass Record {\n final String partyname;\n final int partyvotes;\n final DocumentReference reference;\n\n Record.fromMap(Map<String, dynamic> map, {this.reference})\n     : assert(map['partyname'] != null),\n       assert(map['partyvotes'] != null),\n       name = map['partyname'],\n       votes = map['partyvotes'];\n\n Record.fromSnapshot(DocumentSnapshot snapshot)\n     : this.fromMap(snapshot.data, reference: snapshot.reference);\n\n @override\n String toString() => \"Record<$partyname:$partyvotes>\";\n}\n```", "```kt\nFirestore.instance.collection('collection_name').snapshots()\n```", "```kt\nWidget _buildBody(BuildContext context) {\n return StreamBuilder<QuerySnapshot>(\n   stream: Firestore.instance.collection('party').snapshots(),\n   builder: (context, snapshot) {\n     if (!snapshot.hasData) return LinearProgressIndicator();\n     return _buildList(context, snapshot.data.documents);\n   },\n );\n}\n```", "```kt\nWidget _buildList(BuildContext context, List<DocumentSnapshot> snapshot)\n{ .... \n}\n```", "```kt\nWidget _buildListItem(BuildContext context, DocumentSnapshot data) {\n final result = Record.fromSnapshot(data);\n```", "```kt\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n @override\n Widget build(BuildContext context) {\n   return MaterialApp(\n     title: 'State Party Elections - Worker Profile',\n     home: MyHomePage(),\n   );\n }\n}\n\nclass MyHomePage extends StatefulWidget {\n @override\n _MyHomePageState createState() {\n   return _MyHomePageState();\n }\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n @override\n Widget build(BuildContext context) {\n   return Scaffold(\n     appBar: AppBar(title: Text('Party Votes')),\n     body: _buildBody(context),\n   );\n }\n\n Widget _buildBody(BuildContext context) {\n   return StreamBuilder<QuerySnapshot>(\n     stream: Firestore.instance.collection('party').snapshots(),\n     builder: (context, snapshot) {\n       if (!snapshot.hasData) return LinearProgressIndicator();\n\n       return _buildList(context, snapshot.data.documents);\n     },\n   );\n }\n\n Widget _buildList(BuildContext context, List<DocumentSnapshot> snapshot) {\n   return ListView(\n     padding: const EdgeInsets.only(top: 22.0),\n     children: snapshot.map((data) => _buildListItem(context, data)).toList(),\n   );\n }\n\n Widget _buildListItem(BuildContext context, DocumentSnapshot data) {\n   final result = Record.fromSnapshot(data);\n\n   return Padding(\n     key: ValueKey(result.name),\n     padding: const EdgeInsets.symmetric(horizontal: 15.0, vertical: \n     7.0),\n     child: Container(\n       decoration: BoxDecoration(\n         border: Border.all(color: Colors.red),\n         borderRadius: BorderRadius.circular(6.0),\n       ),\n       child: ListTile(\n         title: Text(record.name),\n         trailing: Text(record.votes.toString()),\n         onTap: () => Firestore.instance.runTransaction((transaction) \n         async {\n           final freshFBsnapshot = await \n             transaction.get(record.reference);\n            final updated = Record.fromSnapshot(freshFBsnapshot);\n\n               await transaction\n                   .update(record.reference, {'partyvotes': \n            updated.votes + 1});\n             }),\n       ),\n     ),\n   );\n }\n}\n\nclass Record {\n final String partyname;\n final int partyvotes;\n final DocumentReference reference;\n\n Record.fromMap(Map<String, dynamic> map, {this.reference})\n     : assert(map['partyname'] != null),\n       assert(map['partyvotes'] != null),\n       name = map['partyname'],\n       votes = map['partyvotes'];\n\n Record.fromSnapshot(DocumentSnapshot snapshot)\n     : this.fromMap(snapshot.data, reference: snapshot.reference);\n\n @override\n String toString() => \"Record<$partyname:$partyvotes>\";\n}\n```", "```kt\nFirebaseInstanceId.getInstance().getInstanceId()\n        .addOnCompleteListener(new OnCompleteListener<InstanceIdResult>\n         () {\n            @Override\n            public void onComplete(@NonNull Task<InstanceIdResult> \n            actionable) {\n                if (!actionable.isSuccessful()) {\n                    Log.w(TAG, \"getInstanceId failed\", \n                    actionable.getException());\n                    return;\n                }\n\n                // Get new Instance ID token\n                String tokenID = actionable.getResult().getToken();\n\n                // Log and toast\n                String message = getString(R.string.msg_token_fmt, \n                tokenID);\n                Log.d(TAG, message);\n                Toast.makeText(MainActivity.this, message, \n               Toast.LENGTH_SHORT).show();\n            }\n        });\n```"]