["```java\n    #include <aREST.h>\n    ```", "```java\n    int speed_motor1 = 6;  \n    int speed_motor2 = 5;\n    int direction_motor1 = 7;\n    int direction_motor2 = 4;\n    ```", "```java\n    int distance_sensor = A3;\n    ```", "```java\n    aREST rest = aREST();\n    ```", "```java\n    int distance;\n    ```", "```java\n    Serial.begin(115200);\n    ```", "```java\n    rest.variable(\"distance\",&distance);\n    ```", "```java\n    rest.function(\"forward\",forward);\n    rest.function(\"backward\",backward);\n    rest.function(\"left\",left);\n    rest.function(\"right\",right);\n    rest.function(\"stop\",stop);\n    ```", "```java\n    rest.set_id(\"001\");\n    rest.set_name(\"mobile_robot\");\n    ```", "```java\n    distance = measure_distance(distance_sensor);\n    ```", "```java\n    rest.handle(Serial);  \n    ```", "```java\n    void send_motor_command(int speed_pin, int direction_pin, int pwm, boolean dir)\n    {\n      analogWrite(speed_pin, pwm); // Set PWM control, 0 for stop, and 255 for maximum speed\n      digitalWrite(direction_pin, dir); // Dir set the rotation direction of the motor (true or false means forward or reverse)\n    }\n    ```", "```java\n    int forward(String command) {\n\n      send_motor_command(speed_motor1,direction_motor1,100,1);\n      send_motor_command(speed_motor2,direction_motor2,100,1);\n      return 1;\n    }\n    ```", "```java\n    int backward(String command) {\n      send_motor_command(speed_motor1,direction_motor1,100,0);\n      send_motor_command(speed_motor2,direction_motor2,100,0);\n      return 1;\n    }\n    ```", "```java\n    int left(String command) {\n      send_motor_command(speed_motor1,direction_motor1,75,0);\n      send_motor_command(speed_motor2,direction_motor2,75,1);\n      return 1;\n    }\n    ```", "```java\n    int stop(String command) {\n      send_motor_command(speed_motor1,direction_motor1,0,1);\n      send_motor_command(speed_motor2,direction_motor2,0,1);\n      return 1;\n    }\n    ```", "```java\n/forward\n\n```", "```java\n/distance\n\n```", "```java\n{\"distance\": 24, \"id\": \"001\", \"name\": \"mobile_robot\", \"connected\": true}\n\n```", "```java\n#include <SPI.h>\n#include \"Adafruit_BLE_UART.h\"\n#include <aREST.h>\n```", "```java\n#define ADAFRUITBLE_REQ 10\n#define ADAFRUITBLE_RDY 2     // This should be an interrupt pin, on Uno thats #2 or #3\n#define ADAFRUITBLE_RST 9\n```", "```java\nAdafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);\n```", "```java\nBTLEserial.begin();\n```", "```java\nBTLEserial.pollACI();\naci_evt_opcode_t status = BTLEserial.getState();\n```", "```java\nif (status == ACI_EVT_CONNECTED) {\n  rest.handle(BTLEserial);\n}\n```", "```java\n<uses-permission android:name=\"android.permission.BLUETOOTH\"/>\n<uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\n```", "```java\n<LinearLayout\n    android:orientation=\"vertical\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\"\n    >\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Connect\"\n        android:id=\"@+id/connectBtn\"\n        android:layout_gravity=\"center_horizontal\"\n        />\n\n    <Button\n        style=\"?android:attr/buttonStyleSmall\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Forward\"\n        android:id=\"@+id/fwdBtn\"\n        android:layout_gravity=\"center_horizontal\"\n        />\n\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"57dp\">\n\n        <Button\n            style=\"?android:attr/buttonStyleSmall\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Left\"\n            android:id=\"@+id/leftBtn\"\n            android:layout_weight=\"1\"\n            />\n\n        <Button\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Stop\"\n            android:id=\"@+id/stopBtn\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_weight=\"1\"\n            />\n\n        <Button\n            style=\"?android:attr/buttonStyleSmall\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Right\"\n            android:id=\"@+id/rightBtn\"\n            android:layout_weight=\"1\"\n            />\n\n    </LinearLayout>\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Backward\"\n        android:id=\"@+id/backwardBtn\"â€©        \n\t\tandroid:layout_gravity=\"center_horizontal\"\n        />\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Connection Status View\"\n        android:id=\"@+id/connectionStsView\"\n        android:layout_gravity=\"center_horizontal\"\n        />\n\n</LinearLayout>\n```", "```java\n//User Interface Elements\n    Button fwdBtn;\n    Button leftBtn;\n    Button rightBtn;\n    Button backBtn;\n    Button stopBtn;\n    Button connectBtn;\n    TextView connectionSts;\n\n    //Logging Variables\n    private final String LOG_TAG = RobotControlActivity.class.getSimpleName();\n```", "```java\n    // UUIDs for UAT service and associated characteristics.\n    public static UUID UART_UUID = UUID.fromString(\"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\");\n    public static UUID TX_UUID = UUID.fromString(\"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\");\n    public static UUID RX_UUID = UUID.fromString(\"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\");\n\n    // UUID for the BTLE client characteristic which is necessary for notifications.\n    public static UUID CLIENT_UUID = UUID.fromString(\"00002902-0000-1000-8000-00805f9b34fb\");\n\n    // BTLE states\n    private BluetoothAdapter adapter;\n    private BluetoothGatt gatt;\n    private BluetoothGattCharacteristic tx;\n    private BluetoothGattCharacteristic rx;\n```", "```java\n        fwdBtn = (Button) findViewById(R.id.fwdBtn);\n        leftBtn = (Button) findViewById(R.id.leftBtn);\n        rightBtn = (Button) findViewById(R.id.rightBtn);\n        backBtn = (Button) findViewById(R.id.backwardBtn);\n        stopBtn = (Button) findViewById(R.id.stopBtn);\n        connectBtn = (Button) findViewById(R.id.connectBtn);\n\n        connectionSts = (TextView)findViewById(R.id.connectionStsView);\n```", "```java\nfwdBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String setOutputMessage = \"/forward /\";\n                tx.setValue(setOutputMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeConnectionData(\"Sent: \" + setOutputMessage);\n                } else {\n                    writeConnectionData(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n\n        leftBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String setOutputMessage = \"/left /\";\n                tx.setValue(setOutputMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeConnectionData(\"Sent: \" + setOutputMessage);\n                } else {\n                    writeConnectionData(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n\n        rightBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String setOutputMessage = \"/right /\";\n                tx.setValue(setOutputMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeConnectionData(\"Sent: \" + setOutputMessage);\n                } else {\n                    writeConnectionData(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n        backBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String setOutputMessage = \"/backward /\";\n                tx.setValue(setOutputMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeConnectionData(\"Sent: \" + setOutputMessage);\n                } else {\n                    writeConnectionData(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n        stopBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                String setOutputMessage = \"/stop /\";\n                tx.setValue(setOutputMessage.getBytes(Charset.forName(\"UTF-8\")));\n                if (gatt.writeCharacteristic(tx)) {\n                    writeConnectionData(\"Sent: \" + setOutputMessage);\n                } else {\n                    writeConnectionData(\"Couldn't write TX characteristic!\");\n                }\n            }\n        });\n\n        connectBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n\n                restartScan();\n            }\n        });\n```", "```java\nprivate void writeConnectionData(final CharSequence text) {\n        Log.e(LOG_TAG, text.toString());\n        connectionSts.setText(text.toString());\n    }\n```", "```java\nprivate BluetoothGattCallback bluetoothGattCallback = new BluetoothGattCallback() {\n        // Called whenever the device connection state changes, i.e. from disconnected to connected.\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n            super.onConnectionStateChange(gatt, status, newState);\n            if (newState == BluetoothGatt.STATE_CONNECTED) {\n                writeConnectionData(\"Connected!\");\n                // Discover services.\n                if (!gatt.discoverServices()) {\n                    writeConnectionData(\"Failed to start discovering services!\");\n                }\n            } else if (newState == BluetoothGatt.STATE_DISCONNECTED) {\n                writeConnectionData(\"Disconnected!\");\n            } else {\n                writeConnectionData(\"Connection state changed.  New state: \" + newState);\n            }\n        }\n\n        // Called when services have been discovered on the remote device.\n        // It seems to be necessary to wait for this discovery to occur before\n        // manipulating any services or characteristics.\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            super.onServicesDiscovered(gatt, status);\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                writeConnectionData(\"Service discovery completed!\");\n            } else {\n                writeConnectionData(\"Service discovery failed with status: \" + status);\n            }\n            // Save reference to each characteristic.\n            tx = gatt.getService(UART_UUID).getCharacteristic(TX_UUID);\n            rx = gatt.getService(UART_UUID).getCharacteristic(RX_UUID);\n\n            // Setup notifications on RX characteristic changes (i.e. data received).\n            // First call setCharacteristicNotification to enable notification.\n            if (!gatt.setCharacteristicNotification(rx, true)) {\n                writeConnectionData(\"Couldn't set notifications for RX characteristic!\");\n            }\n\n            // Next update the RX characteristic's client descriptor to enable notifications.\n            if (rx.getDescriptor(CLIENT_UUID) != null) {\n                BluetoothGattDescriptor desc = rx.getDescriptor(CLIENT_UUID);\n                desc.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);\n                if (!gatt.writeDescriptor(desc)) {\n                    writeConnectionData(\"Couldn't write RX client descriptor value!\");\n                }\n            } else {\n                writeConnectionData(\"Couldn't get RX client descriptor!\");\n            }\n            areServicesAccessible = true;\n        }\n    };\n```", "```java\nprotected void onStart() {\n        Log.d(LOG_TAG,\"onStart has been called\");\n        super.onStart();\n        // / Scan for all BTLE devices.\n        // The first one with the UART service will be chosen--see the code in the scanCallback.\n        adapter = BluetoothAdapter.getDefaultAdapter();\n        startScan();\n    }\n\n    //When this Activity isn't visible anymore\n    protected void onStop() {\n        Log.d(LOG_TAG,\"onStop has been called\");\n        //disconnect and close Bluetooth Connection for better reliability\n        if (gatt != null) {\n            gatt.disconnect();\n            gatt.close();\n            gatt = null;\n            tx = null;\n            rx = null;\n        }\n        super.onStop();\n    }\n```", "```java\nprivate void startScan() {\n        if (!adapter.isEnabled()) {\n            adapter.enable();\n        }\n        if (!adapter.isDiscovering()) {\n            adapter.startDiscovery();\n        }\n        writeConnectionData(\"Scanning for devices...\");\n        adapter.startLeScan(scanCallback);\n    }\n\n    private void stopScan() {\n        if (adapter.isDiscovering()) {\n            adapter.cancelDiscovery();\n        }\n        writeConnectionData(\"Stopping scan\");\n        adapter.stopLeScan(scanCallback);\n    }\n\n    private void restartScan() {\n        stopScan();\n        startScan();\n    }\n```", "```java\nprivate BluetoothAdapter.LeScanCallback scanCallback = new BluetoothAdapter.LeScanCallback() {\n        // Called when a device is found.\n        @Override\n        public void onLeScan(BluetoothDevice bluetoothDevice, int i, byte[] bytes) {\n            Log.d(LOG_TAG, bluetoothDevice.getAddress());\n\n            writeConnectionData(\"Found device: \" + bluetoothDevice.getAddress());\n\n            // Check if the device has the UART service.\n            if (BluetoothUtils.parseUUIDs(bytes).contains(UART_UUID)) {\n                // Found a device, stop the scan.\n                adapter.stopLeScan(scanCallback);\n                writeConnectionData(\"Found UART service!\");\n                // Connect to the device.\n                // Control flow will now go to the bluetoothGattCallback functions when BTLE events occur.\n                gatt = bluetoothDevice.connectGatt(getApplicationContext(), false, bluetoothGattCallback);\n            }\n        }\n    };\n```", "```java\npublic class BluetoothUtils {\n\n    // Filtering by custom UUID is broken in Android 4.3 and 4.4, see:\n    //   http://stackoverflow.com/questions/18019161/startlescan-with-128-bit-uuids-doesnt-work-on-native-android-ble-implementation?noredirect=1#comment27879874_18019161\n    // This is a workaround function from the SO thread to manually parse advertisement data.\n    public static List<UUID> parseUUIDs(final byte[] advertisedData) {\n        List<UUID> uuids = new ArrayList<UUID>();\n\n        int offset = 0;\n        while (offset < (advertisedData.length - 2)) {\n            int len = advertisedData[offset++];\n            if (len == 0)\n                break;\n\n            int type = advertisedData[offset++];\n            switch (type) {\n                case 0x02: // Partial list of 16-bit UUIDs\n                case 0x03: // Complete list of 16-bit UUIDs\n                    while (len > 1) {\n                        int uuid16 = advertisedData[offset++];\n                        uuid16 += (advertisedData[offset++] << 8);\n                        len -= 2;\n                        uuids.add(UUID.fromString(String.format(\"%08x-0000-1000-8000-00805f9b34fb\", uuid16)));\n                    }\n                    break;\n                case 0x06:// Partial list of 128-bit UUIDs\n                case 0x07:// Complete list of 128-bit UUIDs\n                    // Loop through the advertised 128-bit UUID's.\n                    while (len >= 16) {\n                        try {\n                            // Wrap the advertised bits and order them.\n                            ByteBuffer buffer = ByteBuffer.wrap(advertisedData, offset++, 16).order(ByteOrder.LITTLE_ENDIAN);\n                            long mostSignificantBit = buffer.getLong();\n                            long leastSignificantBit = buffer.getLong();\n                            uuids.add(new UUID(leastSignificantBit,\n                                    mostSignificantBit));\n                        } catch (IndexOutOfBoundsException e) {\n                            // Defensive programming.\n                            //Log.e(LOG_TAG, e.toString());\n                            continue;\n                        } finally {\n                            // Move the offset to read the next uuid.\n                            offset += 15;\n                            len -= 16;\n                        }\n                    }\n                    break;\n                default:\n                    offset += (len - 1);\n                    break;\n            }\n        }\n        return uuids;\n    }\n}\n```", "```java\n<shape >\n    <corners\n        android:radius=\"30dp\"/>\n    <solid\n        android:color=\"#FFFFFF\"/>\n    <padding\n        android:left=\"10dp\"\n        android:top=\"10dp\"\n        android:right=\"10dp\"\n        android:bottom=\"10dp\"/>\n    <stroke\n        android:width=\"2dp\"\n        android:color=\"#4A90E2\"/>\n</shape>\n```", "```java\nandroid:background=\"@drawable/buttonshape\"\n```", "```java\nandroid:layout_margin=\"10dp\"\n```", "```java\nandroid:layout_marginLeft=\"10dp\"\nandroid:layout_marginRight=\"10dp\"\n```"]