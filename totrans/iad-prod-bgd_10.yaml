- en: Chapter 10. Adding iAds into Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen how awesome iAds can be for your brand, we'll take a look
    at adding them into your existing application to add an additional revenue stream.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up an empty placeholder iPhone application, in case you don't currently
    have an app and its source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the iAd banner view to an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the banner to handle device rotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide the banner when no adverts are available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you haven't created an iPhone application before or don't have experience
    with iOS development, don't worry; we'll give you the full code required to add
    this into an app. In fact, you're able to add the basic iAd banner into an app
    without any programming experience at all. With that said, the less adventurous
    may prefer to pass this information onto their app development team.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the base project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've not already got an application but would still like to try adding
    iAd into an app, we can make a quick single-screen placeholder iPhone project
    that'll be ready to have a banner added to it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll be using Xcode; we installed this in [Chapter 4](ch04.html "Chapter 4. Making
    Sure It Works"), *Making Sure it Works*, when we set up the iOS Simulator, so
    you should have it available (if not, then jump back and set it up now).
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to set up the demo app, you can find the completed placeholder
    project with the book assets in the `iAd Demo App` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — a placeholder app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Xcode and its inbuilt interface builder and the drag-and-drop UI designer,
    we''ll make a single screen iPhone application with some mock components to simulate
    an app:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode. If you haven't used it before, you can find it in the `Applications`
    folder, which is in the `Developer` folder on the root directory of your Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This differs from the `Applications` folder that iAd Producer is in. If you
    can't find Xcode, then use the search function in finder to locate it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Xcode will open the **Welcome to Xcode** window. From here, select **Create
    a New Xcode Project**. When asked to choose a project type, click on **View Based
    Application** | **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to enter a **Product Name** (this is what you want to call your
    application) and a **Company Identifier** (this is usually your website URL reversed).
    For example, use `Demo iAd App` as the name and `com.examplecompany` as the identifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Device Family** is **iPhone** and deselect **Include Unit
    Tests**. When your Xcode window looks similar to the following screenshot, click
    on the **Next** button:![Time for action — a placeholder app](img/1321_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a location to save your project and the associated files and then click
    on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait while Xcode sets up your project. It will create several files and folders
    within the directory you chose to save the project. Once the Xcode window has
    loaded, locate the file `iAd_Demo_AppViewController.xib` from the Xcode project
    navigator. The project navigator is a pane located to the left of Xcode. If you
    can't see it, select **View** | **Navigation** | **Show Project Navigator** in
    the Xcode menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This opens the XIB file—think of this file as a page in your iAd. It'll open
    in the Xcode interface builder. The interface builder is like the canvas in iAd
    Producer; you're able to drop objects from a library to build up your page. To
    add an object to our canvas, known as a view, open the object library by selecting
    **View** | **Activities** | **Object Library**. A pane will expand on the right
    of Xcode and you'll find the object library located at the bottom of it:![Time
    for action — a placeholder app](img/1321_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can see a list of available user interface components, which we can
    add to our view. Find a label and drag it onto the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll notice that many of these controls are just like iAd Producer. That's
    because Apple has tried to keep parity between many of the objects on iOS to reduce
    the barrier of entry and the learning curve.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click on the label to edit its text. Change the text to something like
    `Apps With iAd Rock!` and then click outside the label to exit the editing mode.
    If you want to change the style of your label, you can use the attributes inspector,
    which behaves similarly to the properties and styles in iAd Producer. You can
    find the attribute inspector above the object library. Add a few more objects,
    such as a button, a switch, a slider, and a text field. Position these on the
    view, but leave space near the bottom. This is where our banner will appear later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your view could look something like this:![Time for action — a placeholder app](img/1321_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Really, it doesn't matter how you make this page look; it's just so we have
    some context when we add our banner in the next exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we can run our app in the simulator. Select the **Run** button (with
    a play icon) from the top left of Xcode and the simulator should open. You should
    be able to toggle the switch and move the sliders around. Whenever you run a project,
    Xcode builds the app and automatically saves all the files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a view-based application from the Xcode templates that gives us a
    single view app with a blank view to which we're able to add objects. We added
    some objects to the view so we have some content available when we run the app.
    With our view layout complete in the interface builder of Xcode, we simulated
    the app to see how it behaved.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the iAd on the device requires you to register it with Apple to provision
    and enable it for development. This requires an active paid developer membership,
    which we signed up to in [Chapter 1](ch01.html "Chapter 1. Getting Started with
    iAd"), *Getting Started with iAd*, to gain access to iAd Producer.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — running on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you haven''t configured your device for development, we can use Xcode''s
    organizer tool to log in to the Apple provisioning portal and set up the required
    certificates and register your device:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode, if it isn't already. Select **Window** | **Organizer** from the
    menu bar. This will open the organizer that allows us to manage our iOS devices,
    their provisioning, and app submissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now plug an iOS device in, such as an iPhone or iPad. If it's syncing with iTunes,
    wait for it to finish. Make sure that the **device** tab of the organizer is selected
    and find your device in the list to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the device and click on the **Use for Development** button to allow it
    to be set up for development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the device has been configured locally, select the **+ Add to Portal**
    button to contact the Apple developer portal that will set up your device. Enter
    the **Username** and **Password** for your Apple ID/developer account:![Time for
    action — running on the device](img/1321_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The organizer will now talk to Apple and enable Xcode on your device to interact.
    Once this has completed, your Mac will be able to send builds to the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the organizer window and change the device **Scheme** to `Your Device
    Name` from the drop-down selector next to the **Run** and **Stop** buttons. Xcode
    will build your app and you should see it running on your device shortly after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode automatically added your device to the provisioning portal, which you
    can view and manage at [http://developer.apple.com](http://developer.apple.com).
    When adding a device to the portal, Xcode carries out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Submits the **Unique Device Identifier (UDID)** to the Apple provisioning portal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the device to your registered devices list, which is linked to your developer
    account. Each account can add up to 100 devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates and installs certificates on your behalf, which are used to secure the
    builds so only you can make them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generates and sets up a development **provisioning profile**—this tells the
    device if it's allowed to run an app or not. A provisioning profile contains a
    list of UDIDs for each device, which is entitled to run the associated app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You'll need to repeat this process for each device that you want to test on
    and it's specific to the Mac user account. If you switch machines, you'll need
    to reconfigure Xcode and follow these steps again.
  prefs: []
  type: TYPE_NORMAL
- en: With our demo app in place and running on the simulator and device, we can add
    our first iAd banner to it!
  prefs: []
  type: TYPE_NORMAL
- en: Adding the banner to your view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're able to add the iAd banner to a view of your app using the interface builder.
    It's a simple drag-and-drop to get the basic banner functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding the banner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll add an iAd banner into the placeholder app that we built in the last
    exercise. If you want to use your own app make sure you''re familiar with the
    interface builder in Xcode. Follow these steps in order to add the banner:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your project, or our demo project in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the file list, open the file `iAd_Demo_AppViewController.xib`, if it isn't
    already. This will launch the interface builder. From the object library, drag
    the **Ad BannerView** object to the main view. The object library contains a large
    amount of items that can make it hard to navigate. You can use the search text
    area underneath it to filter results. Searching for a banner reveals any banner-related
    objects. In the following screenshot, you can see a search for **banner:**![Time
    for action — adding the banner](img/1321_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reposition your banner view so it snaps into place at the bottom center of the
    screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apple recommends putting your banner at the top or bottom of your app and making
    sure it is static; putting it in scrollable views or lists limits the on-screen
    time of the banner, which will severely impact the revenue generated by your campaign.
    Try to run your app using the **Run** button or the keyboard shortcut *cmd* +
    *r*. You'll find that the app crashes before it's able to start up. This is due
    to there being a dependency of the banner view that we'll need to include. An
    iAd banner requires the iAd framework to be included with our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add the iAd framework, click on the name of your project in the project navigator
    pane on the left of Xcode. If you're using the demo project, this will be `iAd
    Demo Project` and can be found at the very top of the project navigator. This
    will open the info of your project in the main Xcode window. Select your project
    name under **TARGETS** and change the tab to **Build Phases**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link Binaries With Libraries** section and click on the **+** button
    at the bottom of the section to open the library/framework picker. Search for
    `iAd` and select **iAd.framework**. Then click on **add**.![Time for action —
    adding the banner](img/1321_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the project navigator file list, drag the **iAd.framework** file to the
    `Frameworks` folder. You don't have to do this step, but it helps keep your project
    tidy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your app. You should see the test banner appear after a few seconds. Try
    tapping it to open the demo advertisement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great work! Your project now successfully has an iAd in it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just added the Ad BannerView object to our app's view and positioned it at
    the bottom center of the screen. Using the build phases, a list of steps called
    when building and running the app, we added the iAd framework to be sure it's
    available in our app. We had to add the `iAd.framework` to our app's project or
    else the banner view wouldn't be able to access the correct components and cause
    the app to crash.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an app is in debug or development mode, the iAd Network automatically
    serves a test advertisement. This is to prevent **click fraud**, where artificial
    clicks (or taps) are generated to cheat the system and falsely increase revenue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1321_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before you submit your application to the App Store, we need to enable our ads
    for production. We'll do this in the next chapter, but first let's look at improving
    our banner experience within the app.
  prefs: []
  type: TYPE_NORMAL
- en: Handling orientation changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may remember that when we built banners in iAd Producer, we checked whether
    they worked in both portrait and landscape; however, currently, our demo app only
    works in portrait. Making sure your app displays banners in any orientation will
    ensure that you get maximum exposure and revenue from the iAd Network.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — you spin me right round
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using the demo app, then let''s enable all the possible orientations.
    Make sure our banner adjusts itself accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the demo app in Xcode. If you're using your own app that already supports
    multiple orientations, skip ahead to step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To enable our app to know it should spin the view when the device is rotated,
    we need to modify a simple bit of Objective C. Open the file `iAd_Demo_AppViewController.m`
    from the project navigator; you''ll see the code appear on screen. Find the method
    `(BOOL)shouldAutorotateToInterfaceOrientation`, which should be near the end of
    the function. This is called by the device when it''s rotated and we''re able
    to tell it when it should and shouldn''t update the view. Find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the moment, it checks if the rotation orientation is portrait, and returns
    `YES` if it is and `NO` if it isn''t. We''re able to override this check and always
    say `YES`; change the line to read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mean the app will allow the view to rotate to any possible orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app and try rotating it; you'll see that the view rotates but it gets
    cropped in landscape and the banner view isn't visible. For now, we'll ignore
    the rest of the cropped content but adjust our banner to be in view regardless.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your view's XIB file in the interface builder. If you're continuing with
    the demo app, it'll be `iAd_Demo_AppViewController.xib`. Click on the ad banner
    view at the bottom of the view to select it. From the menu bar, select **View**
    | **Utilities** | **Show Size Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This opens the size inspector that lets us modify the layout information of
    the banner view. The size inspector is a pane on the right of Xcode, above the
    object library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Autosizing** box and click on the top red double-t beam shape to
    disable it. Then enable the bottom one with a click. Your auto-sizing settings
    should look like the following screenshot:![Time for action — you spin me right
    round](img/1321_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This means the banner's position will be set from the bottom of the screen instead
    of the top, so it'll always be attached to the bottom of the view no matter the
    height.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the ad again. The banner now sits at the bottom of the screen no matter
    what the orientation, but it's not dynamically updating to fill the screen correctly.
    We need to make the banner view accessible to our code so we can inform it when
    a rotation occurs. This works similarly to the outlets in iAd Producer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the file `iAd_Demo_AppViewController.h` from the project navigator. This
    will open the code editor in Xcode. After `#import <UIKit/UIKit.h>`, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This tells the file that we''ll be using the iAd framework so it should import
    it. Now in-between `@interface iAd_Demo_AppViewController : UIViewController`
    and `@end`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a variable called `bannerView`, which will be accessible from our
    code. The `IBOutlet` tells the interface builder that the `bannerView` is available
    as an outlet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the code editor to the file `iAd_Demo_AppViewController.m` and after
    `@implementation iAd_Demo_AppViewController`, add the following code on a new
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow us to access the `bannerView's` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You might find that Xcode tries to help you write the code with auto completion
    and suggestions. In order to confirm that you want it to use a suggestion, press
    the *tab* key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our outlet in place, we can connect to it in the interface builder. Open
    `iAd_Demo_AppViewController.xib` and right-click on the **File's Owner** icon—a
    wireframe cube found to the left of the interface builder. Click-and-drag the
    circle, after the **bannerView** outlet in the overlaid list, and drag to the
    **AdBannerView** on the main view, as shown in the following screenshot:![Time
    for action — you spin me right round](img/1321_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This links the outlet we made in our code with the banner on the interface
    builder view. Now we can access our banner in the code and can inform the banner
    when a rotation occurs. Before the `@end` line near the bottom of the file, add
    the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may find auto complete useful when adding this code. We're taking the `willRotateToInterfaceOrientation`
    method that is called by the device just before the rotation occurs. We then check
    the orientation it's going to rotate to and update the `contentSizeIdentifier`
    property of our banner to that new orientation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app and test by rotating the device; the banner will now update to fill
    the screen and display a landscape ad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We improved the experience and potential revenue of our app by tweaking the
    banner view to work. Your banner should dynamically update the banner creative,
    no matter what orientation the device is in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/1321_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By making the banner view accessible from the code, we're now able to add several
    more enhancements to our app, such as hiding the view when no ads are available
    or providing fallback content.
  prefs: []
  type: TYPE_NORMAL
- en: Pop Quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode and Objective C can be a little overwhelming at first, but once you grasp
    the basics, you''ll notice the similarities it has with iAd Producer. See what
    you''ve learnt by trying these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: To make an object in the interface builder accessible from the code, would you?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Declare an IBOutlet in your code and then connect the outlet in the interface
    builder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. Rename the item in the interface builder and then use that in the code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. Just write the code and the interface builder will add the item
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. Access the views items as `[UIView objectAtIndex:0]`, depending on their
    location on the page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If an iAd banner is crashing our app, what is the most common cause?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. No adverts are available
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: b. The ad downloaded is too large for the OS to cope
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: c. There's no Internet connection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: d. The project is missing the iAd framework
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling no available ads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your app will encounter scenarios where the iAd Network is unable to serve an
    ad. This could be due to poor network coverage or iAd not yet being available
    in the country of a user. We should gracefully handle this by making sure that
    we don't display an empty banner and bringing the banner back into view if one
    becomes available.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — ban the banner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a few small tweaks to our view and code, we can animate our banner on
    and off the screen, depending on the availability of ads:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the demo project, or your own project containing an Ad Banner View, in
    Xcode. Open the main controller file for your view, for example, `iAd_Demo_AppViewController.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lets'' assume that an ad is always going to fail and move the banner out of
    view as soon as the app comes into view. We''ll then wait for the successful message
    from the iAd Network and bring it into view. Add this following code around line
    30:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This takes the frame of the banner and sets the `y` value to be the height of
    the current view, which repositions it off screen. Try running your app; you'll
    see that the banner never appears, even though it's likely the one loaded, because
    the banner never gets back in place when an ad loads successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll now use the `delegate` methods of the iAd banner to handle the success
    and failure responses of the ad. A delegate is a way of interacting and receiving
    events or messages from an object; in our case, we can implement the banner''s
    delegate in our code so it notifies us of changes. Let''s update the code, so
    the banner knows what it should use for its delegate. In the `viewWillAppear`
    method we modified a few steps back, add the following to the end of the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After adding this, you should see a yellow warning icon appear next to the line
    number. Click on this to reveal the warning:![Time for action — ban the banner](img/1321_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This warning tells us that although we''ve set the delegate of the banner view
    to be the current file (by saying `self)`, it currently wouldn''t be able to handle
    its role. Switch files to `iAd_Demo_AppViewController.h`, which is known as the
    header file, and find `UIViewController`. Update it to say the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This tells our view controller class that it can respond to requests from an
    Ad Banner View''s delegate. With our delegate in place and our view controller
    able to respond to it, we can now add the successful and failure methods that
    will handle the ad. Before the `@end` of your `iAd_Demo_AppViewController.m` file,
    add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This isn't required, but it helps separate the sections of our code and highlights
    where the `delegate` methods start from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After our `pragma mark` line, we can add the delegate methods. Starting with
    the code to bring the banner back into view once an ad has successfully loaded.
    Add this method immediately after your `pragma mark` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we've added the method `bannerViewDidLoadAd`, which is a delegate method
    of the banner. When the iAd Network successfully delivers an ad, it calls this
    code. We then take the banner's frame and adjust it to bring it back into view,
    with the added tweak of animating the change so that the banner will move in from
    the bottom of the view. Run the ad and you'll see the banner appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes the iAd Network doesn't deliver an advert to simulate a failure. If
    you find a banner hasn't appeared, try closing and re-opening your app to trigger
    another ad.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our banner animating in, let''s make sure it can also animate out if there''s
    a problem downloading an ad. Once the banner is visible, it''ll circulate between
    various creatives, so we shouldn''t just assume once we have one ad that we''ll
    continue to receive a stream of them. Similar to the `bannerViewDidLoadAd` delegate
    method, we can use the `didFailToReceiveAdWithError` method when we''re unable
    to get an ad. Use this method with the following code, placing it beneath the
    code we added in the last step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You may notice that this code is almost identical to when we receive an ad;
    except, now we're not subtracting the height of the banner from the frame, so
    it is offscreen. In the next exercise, we'll look at optimizing our code by not
    duplicating it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you patiently watch your app, it'll eventually fail to download a banner
    and you should see the current banner slide out of view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added some code to the `viewWillAppear` method, which is called whenever
    the view is about to become visible. This code hides the empty banner off screen
    to make more space available for additional components. Using delegates, we set
    up the view to respond to messages from the iAd Network and animate the banner
    on and off the screen, depending on the availability of ads.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our app is looking great with our banner appearing in our app and correctly
    resizing on rotation, and displaying or hiding itself when ads become available.
    If you''re finding these steps simple, then try these more advanced tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the **Autosizing** properties of the items in the placeholder app, so
    they don't get cropped in landscape.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're comfortable with iPhone development, consider grouping all of your
    content into a view separate from the banner. This can then be a sibling of the
    banner view and it's layout can be resized, dependent on a banner's availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have your own app, try sharing one banner object between all the pages
    in your app for efficiency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an iPad project and add a full screen banner into it. For reference,
    use:[http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iAd_Guide/Full-ScreenAdvertisements/Full-ScreenAdvertisements.html](http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iAd_Guide/Full-ScreenAdvertisements/Full-ScreenAdvertisements.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try the next *Time for action* section, where, for the more adventurous, we'll
    tidy up the code!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about the fundamentals of Objective C at[http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CommunicatingWithObjects/CommunicateWithObjects.html](http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CommunicatingWithObjects/CommunicateWithObjects.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action — clean the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you begin to duplicate code, you''re increasing the efforts required to
    maintain your app, because you have to go through every instance and change it.
    In our last exercise, we have three similar blocks of code that we can combine
    into one method that intelligently handles the situations. This function will
    handle the hiding and displaying of our ad, depending on the banner''s availability.
    Continuing with our demo app, complete the following steps to clean up the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the delegate methods of the banner, and before the `pragma mark`, create
    an empty method by adding this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll need to add the following to the header file, `iAd_Demo_AppViewController.h`,
    before the `@end` statement in the file add to tell the project that this new
    method is available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will suppress any warnings from Xcode about unknown methods. Now return
    back to the main file—`iAd_Demo_AppViewController.m.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now build the function of this method up. It''s going to replace and
    manage the showing and hiding of the banner. Add the following content inside
    the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This works the same the previous banner code, but in the one method. The `bannerView.bannerLoaded`
    checks if we have a banner loaded and then adjusts the offset accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, we''re adjusting the banner in the `viewWillAppear, didFailToReceiveAdWithError`,
    and `bannerViewDidLoadAd` methods. Go through each of these methods, and replace
    the banner frame code with our new method. You can call our method by using the
    following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you don't remove the `banner.delegate = self`; from the `viewWillAppear`
    method. This will stop your banner from ever appearing!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For example your `bannerViewDidLoad` method should now look like the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As with any change, test your app and make sure the new code works as expected!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By combining several methods into one method, we reduce the risk for failure
    in our code due to a mistake, and can update our code in one central place without
    having to duplicate any changes. The app is now much tidier. Deleting code is
    really satisfying because it means less work in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we used iAd to provide a simple, well recognized, and immersive
    banner and ad experience to your app users. To make the banners work elegantly
    in our app and to maximize revenue opportunities we:'
  prefs: []
  type: TYPE_NORMAL
- en: Created a placeholder app to test the iAd functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placed our banner in a static location, using the interface builder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handled displaying the banner only when it had content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimized our code to increase its maintainability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With great visibility of our ads and handling the occasions where no ads are
    available, we should be able to generate a healthy best-possible revenue stream
    from our app. Before we can start cashing the checks, we need to activate our
    application for live ads and look at how we can track the revenue; all coming
    up in the final chapter!
  prefs: []
  type: TYPE_NORMAL
