- en: ARCore on Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next platform we will set up is Unity. Unity is a leading cross-platform
    game engine that is exceptionally easy to use for building game and graphic applications
    quickly. As such, it will be the platform we use when we build our final application
    in [Chapter 10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml), *Mixing in Mixed
    Reality*.
  prefs: []
  type: TYPE_NORMAL
- en: Unity has developed something of a bad reputation in recent years due to its
    overuse in poor-quality games. It isn't because Unity can't produce high-quality
    games, it most certainly can. However, the ability to create games quickly often
    gets abused by developers seeking to release cheap games for profit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to install, build, and deploy Unity ARCore
    apps for Android. Then, we will set up for remote debugging and, finally, we will
    explore making some changes to the sample app. The following is a summary of the
    topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unity and ARCore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying to Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already covered setting up the Android tools in [Chapter 2](c5c4b444-3342-457a-b756-266772b70d06.xhtml),
    *ARCore on Android*. If you omitted that chapter, you will need to go back and
    do the exercises in the first few sections before continuing. If you are an experienced
    Unity developer with an Android environment set up, you should still review this
    chapter as it may have some useful tips or settings.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unity and ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing the Unity editor is relatively straightforward. However, the version
    of Unity we will be using may still be in beta. Therefore, it is important that
    you pay special attention to the following instructions when installing Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate a web browser to [https://unity3d.com/unity/beta](https://unity3d.com/unity/beta).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the time of writing, we will use the most recent beta version of Unity since
    ARCore is also still in beta preview. Be sure to note the version you are downloading
    and installing. This will help in the event you have issues working with ARCore.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Download installer button. This will download `UnityDownloadAssistant`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch `UnityDownloadAssistant`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Next and then agree to the Terms of Service. Click on **Next** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the components, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c872cf8-3dee-465f-8f9e-33f4e081d75f.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the components to install
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Unity in a folder that identifies the version, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a7e0c49-98b4-420e-9270-03e966f2465a.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the Unity installation path
  prefs: []
  type: TYPE_NORMAL
- en: Click on Next to download and install Unity. This can take a while, so get up,
    move around, and grab a beverage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Finish button and ensure that Unity is set to launch automatically.
    Let Unity launch and leave the window open. We will get back to it shortly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once Unity is installed, we want to download the ARCore SDK for Unity. This
    will be easy now that we have Git installed. Follow the given instructions to
    install the SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a shell or Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to your `Android` folder. On Windows, use this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Type and execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After the `git` command completes, you will see a new folder called `arcore-unity-sdk`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is your first time using Unity, you will need to go online to [https://unity3d.com/](https://unity3d.com/)
    and create a Unity user account. The Unity editor will require that you log in
    on first use and from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have Unity and ARCore installed, it''s time to open the sample
    project by implementing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you closed the Unity window, launch the Unity editor. The path on Windows
    will be `C:\Unity 2017.3.0b8\Editor\Unity.exe`. Feel free to create a shortcut
    with the version number in order to make it easier to launch the specific Unity
    version later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the Unity project window and click on the Open button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Android/arcore-unity-sdk` folder. This is the folder we used the `git` command
    to install the SDK to earlier, as shown in the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73ee0401-034c-4218-8640-9184520dbbe3.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening the sample ARCore Unity project
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Select Folder button. This will launch the editor and load the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Assets/GoogleARCore/HelloARExample/Scenes` folder in the Project
    window, as shown in the following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13f763bf-8f5e-4384-a1ef-85ee250b95b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening the scenes folder
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the HelloAR scene, as shown in the Project window and in the
    preceding screenshot. This will load our AR scene into Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At any point, if you see red console or error messages in the bottom status
    bar, this likely means you have a version conflict. You will likely need to install
    a different version of Unity. Consult [Chapter 11](e7c0bdd1-e380-4498-af5a-fe9e627eb6cb.xhtml),* Performance
    Tips and Troubleshooting* for more help.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have Unity and ARCore installed, we will build the project and deploy
    the app to an Android device in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying to Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With most Unity development, we could just run our scene in the editor for
    testing. Unfortunately, when developing ARCore applications, we need to deploy
    the app to a device for testing. Fortunately, the project we are opening should
    already be configured for the most part. So, let''s get started by following the
    steps in the next exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the Unity editor to the sample ARCore project and open the HelloAR scene.
    If you left Unity open from the last exercise, just ignore this step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your device via USB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the menu, select File | Build Settings. Confirm that the settings match
    the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aac2543a-3ea2-4f06-a6f0-ecdcc85f437e.png)'
  prefs: []
  type: TYPE_IMG
- en: Build settings dialog
  prefs: []
  type: TYPE_NORMAL
- en: Confirm that the HelloAR scene is added to the build. If the scene is missing,
    click on the Add Open Scenes button to add it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build and Run. Be patient, first-time builds can take a while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the app gets pushed to the device, feel free to test it, as you did with
    the Android version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! Now we have a Unity version of the sample ARCore project running. In
    the next section, we will look at remotely debugging our app.
  prefs: []
  type: TYPE_NORMAL
- en: Remote debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having to connect a USB all the time to push an app is inconvenient. Not to
    mention that, if we wanted to do any debugging, we would need to maintain a physical
    USB connection to our development machine at all times. Fortunately, there is
    a way to connect our Android device via Wi-Fi to our development machine. Use
    the following steps to establish a Wi-Fi connection:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that a device is connected via USB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Command Prompt or shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows, we will add `C:\Android\sdk\platform-tools` to the path just for
    the prompt we are working on. It is recommended that you add this path to your
    environment variables. Google it if you are unsure of what this means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If it worked, you will see `restarting in TCP mode port: 5555`. If you encounter
    an error, disconnect and reconnect the device.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disconnect your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Locate the IP address of your device by doing as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your phone and go to Settings and then About phone.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap on Status**. **Note down the IP address.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to your shell or Command Prompt and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you use the IP Address you wrote down from your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see `connected to [IP Address]:5555`. If you encounter a problem,
    just run through the steps again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a remote connection to our device, we should test it to ensure
    that it works. Let''s test our connection by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Unity to the sample AR project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the Canvas object in the Hierarchy window until you see the SearchingText
    object and select it, just as shown in the following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d741b850-b1e4-48ae-a454-683a3e60f474.png)'
  prefs: []
  type: TYPE_IMG
- en: Hierarchy window showing the selected SearchingText object
  prefs: []
  type: TYPE_NORMAL
- en: Direct your attention to the Inspector window, on the right-hand side by default.
    Scroll down in the window until you see the text `"Searching for surfaces…"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the text to read `"Searching for ARCore surfaces…"`, just as we did in
    the last chapter for Android.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select File | Build and Run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your device and test your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remotely debugging a running app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, building and pushing an app to your device this way will take longer,
    but it is far more convenient. Next, let''s look at how we can debug a running
    app remotely by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to your shell or Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will see a stream of logs covering the screen, which is not something very
    useful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter *Ctrl* + *C* (*command* + *C* on Mac) to kill the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open Android Device Monitor. You should see your device on the list
    to the left. Ensure that you select it. You will see the log output start streaming
    in the **LogCat** window. Drag the LogCat window so that it is a tab in the main
    window, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35d81f86-82a5-4b7f-aa78-f4fe1aa967bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Android Device Monitor showing the LogCat window
  prefs: []
  type: TYPE_NORMAL
- en: Leave the Android Device Monitor window open and running. We will come back
    to it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can build, deploy, and debug remotely. This will give us plenty of flexibility
    later when we want to become more mobile. Of course, the remote connection we
    put in place with `adb` will also work with Android Studio. Yet, we still are
    not actually tracking any log output. We will output some log messages in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike Android, we were able to easily modify our Unity app right in the editor
    without writing code. In fact, given the right Unity extensions, you can make
    a working game in Unity without any code. However, for us, we want to get into
    the nitty-gritty details of ARCore, and that will require writing some code. Jump
    back to the Unity editor, and let''s look at how we can modify some code by implementing
    the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Hierarchy window, select the ExampleController object. This will pull
    up the object in the Inspector window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Gear icon beside Hello AR Controller (Script) and from the context
    menu, select Edit Script, as in the following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9df4631-92ce-4a17-8b8d-e6457f9c3885.png)'
  prefs: []
  type: TYPE_IMG
- en: Editing a script in Unity
  prefs: []
  type: TYPE_NORMAL
- en: This will open your script editor and load the script, by default, `MonoDevelop`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity supports a number of **Integrated Development Environments** (**IDE**s)
    for writing C# scripts. Some popular options are Visual Studio 2015-2017 (Windows),
    VS Code (All), JetBrains Rider (Mac), and even Notepad++(All). Do yourself a favor
    and try one of the options listed for your OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down in the script until you see the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `_QuitOnConnectionErrors();` line of code, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and then go back to Unity. Unity will automatically recompile
    the file. If you made any errors, you will see red error messages in the status
    bar or console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select File | Build and Run. As long as your device is still
    connected via TCP/IP, this will work. If your connection broke, just go back to
    the previous section and reset it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Direct your attention to Android Device Monitor and see whether you can spot
    those log messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity Update method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unity `Update` method is a special method that runs before/during a frame
    update or render. For your typical game running at 60 frames per second, this
    means that the `Update` method will be called 60 times per second as well, so
    you should be seeing lots of messages tagged as Unity. You can filter these messages
    by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Jump to the Android Device Monitor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the green plus button in the Saved Filters panel, as shown in the
    following excerpt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bff2dc8d-253a-4451-bdb3-b5d399d409bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new tag filter
  prefs: []
  type: TYPE_NORMAL
- en: Create a new filter by entering a Filter Name (use `Unity`) and by Log Tag (use
    `Unity`), as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on OK to add the filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new `Unity` filter. You will now see a list of filtered messages
    specific to Unity platform when the app is running on the device. If you are not
    seeing any messages, check your connection and try to rebuild. Ensure that you
    saved your edited code file in `MonoDevelop` as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good job. We now have a working Unity set up with remote build and debug support,
    which will certainly make our job easier going forward. Now that you have everything
    set up, go back to Unity platform and get more familiar with the interface. Try
    not to change any settings as we will use the sample project as our base in later
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up a new platform for our ARCore development, called
    Unity. Unity, as we learned, is a leading, powerful, flexible, and simple game/graphic
    engine we will use extensively in later chapters. For now though, we installed
    Unity and the ARCore SDK for Unity. We then took a slight diversion by setting
    up a remote build and debug connection to our device using TCP/IP over Wi-Fi.
    Next, we tested out our ability to modify the C# script in Unity by adding some
    debug log output. Finally, we tested our code changes using the Android Device
    Monitor tool to filter and track log messages from the Unity app deployed to the
    device.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to grind away in the next chapter and set up our environment
    for web ARCore development. Web ARCore development is substantially different
    from Android and Unity. However, we will still cover some essential setup for
    components we will use in [Chapter 10](6a8f64fb-080f-47a2-9565-4099269831b1.xhtml),
    *Mixing in Mixed Reality*, so don't feel you can bypass the next chapter, even
    if you are not doing web development.
  prefs: []
  type: TYPE_NORMAL
