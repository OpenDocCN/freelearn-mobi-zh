["```kt\n[versions]\nagp = \"8.1.0-beta01\"\norg-jetbrains-kotlin-android = \"1.8.10\"\ncore-ktx = \"1.9.0\"\n...\n[libraries]\ncore-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"core-ktx\" }\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\n...\n[plugins]\ncom-android-application = { id = \"com.android.application\", version.ref = \"agp\" }\norg-jetbrains-kotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"org-jetbrains-kotlin-android\" }\n[bundles]\n```", "```kt\nplugins {\n    alias(libs.plugins.com.android.application)\n    alias(libs.plugins.org.jetbrains.kotlin.android)\n}\n```", "```kt\ndependencies {\n    implementation(libs.core.ktx)\n    implementation(libs.lifecycle.runtime.ktx)\n    implementation(libs.activity.compose)\n    implementation(platform(libs.compose.bom))\n    implementation(libs.ui)\n    implementation(libs.ui.graphics)\n    implementation(libs.ui.tooling.preview)\n    implementation(libs.material3)\n    ...\n}\n```", "```kt\n[versions]\n...\nkoin = \"latest-version\"\n[libraries]\n...\nkoin-core = { group = \"io.insert-koin\", name = \"koin-core\", version.ref = \"koin\" }\nkoin-android = { group = \"io.insert-koin\", name = \"koin-android\", version.ref = \"koin\" }\nkoin-androidx-navigation = { group = \"io.insert-koin\", name = \"koin-androidx-navigation\", version.ref = \"koin\" }\nkoin-androidx-compose = { group = \"io.insert-koin\", name = \"koin-androidx-compose\", version.ref = \"koin\" }\nkoin-test = { group = \"io.insert-koin\", name = \"koin-test\", version.ref = \"koin\" }\nkoin-test-junit4 = { group = \"io.insert-koin\", name = \"koin-test-junit4\", version.ref = \"koin\" }\n```", "```kt\ndependencies {\n   …\n    implementation(libs.koin.core)\n    implementation(libs.koin.android)\n    implementation(libs.koin.androidx.compose)\n    implementation(libs.koin.androidx.navigation)\n    ...\n}\n```", "```kt\nclass PacktagramApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n            androidLogger()\n            androidContext(this@PacktagramApplication)\n            modules(appModule)\n        }\n    }\n}\n```", "```kt\nimport org.koin.dsl.module\nval appModule = module {\n...\n}\n```", "```kt\nval exampleModule = module {\n    single { MyDataSource(get()) }\n    single { MyRepository(get()) }\n    factory { MyUseCase(get()) }\n    viewModel { MyViewModel(get()) }\n}\n```", "```kt\n    single { MyImplementation() } bind MyInterface::class\n    ```", "```kt\nclass StoryEditorViewModel: ViewModel() {\n    private val _isEditing = MutableStateFlow(true)\n    val isEditing: StateFlow<Boolean> = _isEditing\n}\n```", "```kt\nval storyModule = module {\n    viewModel<StoryEditorViewModel>()\n}\n```", "```kt\nclass PacktagramApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n            androidLogger()\n            androidContext(this@PacktagramApplication)\n            modules(appModule, storyModule)\n        }\n    }\n}\n```", "```kt\n@Preview\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun StoryEditorScreen(\n    viewModel: StoryEditorViewModel = koinViewModel()\n) {\n    val isEditing = viewModel.isEditing.collectAsState()\n    Column(modifier = Modifier.fillMaxSize()) {\n        if (isEditing.value) {\n            TopAppBar(title = { Text(text = \"Create Story\") })\n        }\n        StoryContent(isEditing.value)\n    }\n}\n```", "```kt\n@Composable\nfun StoryContent(\n    isEditing: Boolean = false,\n    modifier: Modifier = Modifier\n) {\n    Box(modifier = Modifier.fillMaxSize().padding(20.dp)) {\n        Box(\n            modifier = Modifier\n                .fillMaxWidth()\n                .wrapContentHeight()\n        ) {\n            Button(\n                onClick = { /*Handle back*/},\n                modifier =\n                    Modifier.align(Alignment.TopStart)\n            ) {\n                Image(\n                    painter = painterResource(id =\n                        R.drawable.ic_arrow_back),\n                    contentDescription = \"Back button\")\n            }\n            if (isEditing) {\n                Button(\n                    onClick =\n                        { /* Handle create caption */ },\n                    modifier =\n                        Modifier.align(Alignment.TopEnd)\n                ) {\n                    Image(\n                        painter = painterResource(id =\n                            R.drawable.ic_caption),\n                        contentDescription = \"Create label\"\n                    )\n                }\n            }\n    }\n        Image(\n            painter = painterResource(id =\n                R.drawable.ic_default_image),\n            modifier = Modifier.fillMaxSize(),\n            contentDescription = \"Default image\"\n        )\n        Row(\n            modifier = Modifier\n                .wrapContentHeight()\n                .align(Alignment.BottomCenter)\n        ) {\n            if (isEditing) {\n                Button(\n                    onClick =\n                        { /* Handle create caption */ }\n                ) {\n                    Text(stringResource(id =\n                        R.string.share_story))\n                }\n            } else {\n                OutlinedButton(\n                    onClick =\n                        { /* Handle take a photo */ },\n                    modifier= Modifier.size(50.dp),\n                    shape = CircleShape,\n                    border= BorderStroke(4.dp,\n                        MaterialTheme.colorScheme.primary),\n                    contentPadding = PaddingValues(0.dp),\n                    colors =\n                       ButtonDefaults.outlinedButtonColors(\n                       contentColor =\n                       MaterialTheme.colorScheme.primary)\n                ) {\n                }\n            }\n        }\n    }\n}\n```", "```kt\n@Composable\nfun MainScreen(\n    modifier: Modifier = Modifier,\n){\n    val tabs = generateTabs()\n    val selectedIndex = remember { mutableStateOf(0) }\n    val pagerState = rememberPagerState(initialPage = 0)\n```", "```kt\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = {\n                    Text(stringResource(R.string.app_name))\n                },\n                actions = {\n                    IconButton(onClick =\n                    { /* Menu action */ }) {\n                        Icon(Icons.Rounded.Send,\n                        contentDescription = \"Messages\")\n                    }\n                }\n            )\n        },\n```", "```kt\n        bottomBar = {\n            TabRow(selectedTabIndex = selectedIndex.value)\n            {\n                tabs.forEachIndexed { index, _ ->\n                    Tab(\n                        icon = { Icon(tabs[index].icon,\n                            contentDescription = null) },\n                        selected = index ==\n                            selectedIndex.value,\n                        onClick = {\n                            selectedIndex.value = index\n                        }\n                    )\n                }\n            }\n        },\n```", "```kt\n        content = { innerPadding ->\n            HorizontalPager(\n                modifier = Modifier.padding(innerPadding),\n                pageCount = tabs.size,\n                state = pagerState\n            ) { index ->\n                when (index) {\n                    0 -> {\n                        NewsFeed()\n                    }\n                    1 -> {\n                        //Search\n                    }\n                    2-> {\n                        // New publication\n                    }\n                    3-> {\n                        // Reels\n                    }\n                    4-> {\n                        // Profile\n                    }\n                }\n            }\n            LaunchedEffect(selectedIndex.value) {\n                pagerState.animateScrollToPage(\n                selectedIndex.value)\n            }\n        },\n    )\n}\n```", "```kt\nclass NewsFeedViewModel : ViewModel() {\n    private val _posts =\n        MutableStateFlow<List<Post>>(emptyList())\n    val posts: StateFlow<List<Post>> get() = _posts\n}\n```", "```kt\nval newsFeedModule = module {\n    viewModel<NewsFeedViewModel>()\n}\n```", "```kt\nclass PacktagramApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n...\n            modules(\n                appModule,\n                storyModule,\n                newsFeedModule\n            )\n        }\n    }\n}\n```", "```kt\n@Composable\nfun NewsFeed(\n    modifier: Modifier = Modifier,\n    viewModel: NewsFeedViewModel = koinViewModel()\n) {\n    LazyColumn{\n        itemsIndexed(viewModel.posts){ _, post ->\n            PostItem(post = post)\n        }\n    }\n}\n```", "```kt\n@Composable\nfun PostItem(\n    post: Post\n){\n    Column{\n        Spacer(modifier = Modifier.height(2.dp))\n        TitleBar(post = post)\n        MediaContent(post = post)\n        ActionsBar()\n        LikesCount(post = post)\n        Caption(post = post)\n        Spacer(modifier = Modifier.height(2.dp))\n        CommentsCount(post = post)\n        Spacer(modifier = Modifier.height(4.dp))\n        TimeStamp(post = post)\n        Spacer(modifier = Modifier.height(10.dp))\n    }\n}\n```", "```kt\n@Composable\nfun TitleBar(\n    modifier: Modifier = Modifier,\n    post: Post\n){\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(56.dp)\n        ,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Spacer(modifier = modifier.width(5.dp))\n        Image(\n            modifier = modifier\n                .size(40.dp)\n                .weight(1f),\n            painter = painterResource(id =\n                post.user.image),\n            contentDescription =\n                \"User ${post.user.name} avatar\"\n        )\n        Text(\n            text = post.user.name,\n            modifier = modifier\n                .weight(8f)\n                .padding(start = 10.dp),\n            fontWeight = FontWeight.Bold\n        )\n        IconButton(onClick = { /* Menu options */}) {\n            Icon(\n                Icons.Outlined.MoreVert,\n                \"More options\"\n            )\n        }\n    }\n}\n```", "```kt\n@Composable\nfun MediaContent (\n    modifier: Modifier = Modifier,\n    post: Post\n){\n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(300.dp),\n        contentAlignment = Alignment.Center,\n        ) {\n        Image(\n            modifier = Modifier\n                .fillMaxSize(),\n            painter = rememberImagePainter(post.image),\n            contentDescription = null\n        )\n    }\n}\n```", "```kt\n@Composable\nfun ActionsBar(\n    modifier: Modifier = Modifier,\n){\n    Column(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(40.dp),\n        horizontalAlignment = Alignment.CenterHorizontally,\n    ) {\n        Row(\n            modifier = modifier\n                .fillMaxSize()\n        ) {\n            Row(\n                modifier = modifier\n                    .fillMaxHeight()\n                    .weight(1f)\n                ,\n                verticalAlignment =\n                    Alignment.CenterVertically,\n            ) {\n                IconButton(onClick = { }) {\n                    Icon(\n                        imageVector =\n                            Icons.Outlined.Favorite,\n                        contentDescription = \"like\",\n                        modifier = modifier\n                    )\n                }\n                IconButton(onClick = { }) {\n                    Icon(\n                        imageVector = Icons.Outlined.Edit,\n                        contentDescription = \"comment\",\n                        modifier = modifier\n                    )\n                }\n                IconButton(onClick = { }) {\n                    Icon(\n                        imageVector = Icons.Outlined.Share,\n                        contentDescription = \"share\",\n                        modifier = modifier\n                    )\n                }\n                Row(\n                    modifier = modifier\n                        .fillMaxHeight()\n                        .weight(1f)\n                ) {\n                }\n                Row(\n                    modifier = modifier\n                        .fillMaxHeight()\n                        .weight(1f),\n                    verticalAlignment =\n                        Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.End\n                ) {\n                    IconButton(onClick = { }) {\n                        Icon(\n                            imageVector =\n                                Icons.Outlined.Star,\n                            contentDescription =\n                                \"bookmark\",\n                            )\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```kt\n@Composable\nfun LikesCount(\n    modifier: Modifier = Modifier,\n    post: Post\n){\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(30.dp)\n            .padding(horizontal = 10.dp)\n        ,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Text(\n            text = post.likesCount.toString().plus(\n                «likes\"),\n            fontWeight = FontWeight.Bold,\n            fontSize = 16.sp\n        )\n    }\n}\n```", "```kt\n@Composable\nfun Caption(\n    modifier: Modifier = Modifier,\n    post: Post\n){\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .wrapContentHeight()\n            .padding(horizontal = 10.dp)\n        ,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Text(\n            text = buildAnnotatedString {\n                val boldStyle = SpanStyle(\n                    fontWeight = Bold,\n                    fontSize = 14.sp\n                )\n                val normalStyle = SpanStyle(\n                    fontWeight = FontWeight.Normal,\n                    fontSize = 14.sp\n                )\n                pushStyle(boldStyle)\n                append(post.user.name)\n                append(\" \")\n                if (post.caption.isNotEmpty()){\n                    pushStyle(normalStyle)\n                    append(post.caption)\n                }\n            }\n        )\n    }\n}\n```", "```kt\n@Composable\nfun CommentsCount(\n    modifier: Modifier = Modifier,\n    post: Post\n) {\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .wrapContentHeight()\n            .padding(horizontal = 10.dp),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Text(\n            text = stringResource(R.string.comment_count,\n                post.commentsCount),\n            fontWeight = FontWeight.Normal,\n            fontSize = 14.sp\n        )\n    }\n}\n```", "```kt\nfun TimeStamp(\n    modifier: Modifier = Modifier,\n    post: Post\n) {\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .wrapContentHeight()\n            .padding(horizontal = 10.dp),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Text(\n            text = \"${post.timeStamp} hours ago \",\n            fontSize = 10.sp,\n            fontWeight = FontWeight.Light\n        )\n    }\n}\n```", "```kt\n[versions]\n...\nretrofit = \"2.9.0\"\nmoshi = \"1.12.0\"\ncoroutines = \"1.5.1\"\nmoshi-converter = \"0.8.0\"\n...\n[libraries]\n...\nretrofit = { group = \"com.squareup.retrofit2\", name = \"retrofit\", version.ref=\"retrofit\"}\nretrofitMoshiConverter = { group = \"com.squareup.retrofit2\", name = \"converter-moshi\", version.ref=\"retrofit\"}\nmoshi = { group = \"com.squareup.moshi\", name = \"moshi\", version.ref = \"moshi\" }\nmoshiKotlin = { group = \"com.squareup.moshi\", name = \"moshi-kotlin\", version.ref = \"moshi\" }\nmoshiKotlinCodegen = { group = \"com.squareup.moshi\", name = \"moshi-kotlin-codegen\", version.ref = \"moshi\" }\nmoshiKotlinCodegen = { group = \"com.squareup.retrofit2\", name = \"retrofit-kotlinx-serialization-converter\", version.ref = \"moshi-converter\" }\ncoroutinesCore = {  group = \"org.jetbrains.kotlinx\", name = \"kotlinx-coroutines-core\", version.ref = \"coroutines\" }\ncoroutinesAndroid = {  group = \"org.jetbrains.kotlinx\", name = \"kotlinx-coroutines-android\", version.ref = \"coroutines\" }\n[plugins]\n...\nkotlin-kapt = { id = \"org.jetbrains.kotlin.kapt\", version.ref = \"org-jetbrains-kotlin-android\" }\n```", "```kt\ndependencies {\n    implementation(libs.retrofit)\n    implementation(libs.retrofitMoshiConverter)\n    implementation(libs.moshiConverter)\n    implementation(libs.moshi)\n    implementation(libs.moshiKotlin)\n    kapt(libs.moshiKotlinCodegen)\n    implementation(libs.coroutinesCore)\n    implementation(libs.coroutinesAndroid)\n...\n}\n```", "```kt\ninterface NewsFeedService {\n    @GET(\"feed\")\n    suspend fun getNewsFeed(): List<PostApiData>\n}\n```", "```kt\nobject RetrofitInstance {\n    private const val BASE_URL = \"https://packtagram.com/\"\n    fun getNewsFeedApi(): NewsFeedService = run {\n        Retrofit.Builder()\n            .baseUrl(BASE_URL)\n            .addConverterFactory(\n                MoshiConverterFactory.create())\n            .build()\n            .create(NewsFeedService::class.java)\n    }\n}\n```", "```kt\nclass NewsFeedRemoteDataSource(private val api:\nNewsFeedService) {\n    suspend fun getNewsFeed(): List<PostApiData> {\n        return api.getNewsFeed()\n    }\n}\n```", "```kt\ninterface NewsFeedRepository {\n    suspend fun getNewsFeed():List<Post>\n}\n```", "```kt\nclass NewsFeedRepositoryImpl(\n    private val remoteDataSource: NewsFeedRemoteDataSource\n): NewsFeedRepository {\n    override suspend fun getNewsFeed(): List<Post> {\n        return remoteDataSource\n            .getNewsFeed()\n            .map { it.toDomain() }\n    }\n}\n```", "```kt\nclass GetTheNewsFeedUseCase(\n    private val repository: NewsFeedRepository\n) {\n    suspend operator fun invoke(): List<Post> {\n        return repository.getNewsFeed()\n    }\n}\n```", "```kt\ndata class Post(\n    val id: String,\n    val user: UserData,\n    val imageUrl: String,\n    val caption: String,\n    val likesCount: Int,\n    val commentsCount: Int,\n    val timeStamp: Long\n) {\n    data class UserData(\n        val id: String,\n        val name: String,\n        val imageUrl: String\n    )\n}\n```", "```kt\ndata class PostApiData(\n    @Json(name = \"id\")\n    val id: String,\n    @Json(name = \"author\")\n    val user: UserApiData,\n    @Json(name = \"image_url\")\n    val imageUrl: String,\n    @Json(name = \"caption\")\n    val caption: String,\n    @Json(name = \"likes_count\")\n    val likesCount: Int,\n    @Json(name = \"comments_count\")\n    val commentsCount: Int,\n    @Json(name = \"timestamp\")\n    val timeStamp: Long\n) {\n    data class UserApiData(\n        @Json(name = \"id\")\n        val id: String,\n        @Json(name = \"name\")\n        val name: String,\n        @Json(name = \"image_url\")\n        val imageUrl: String\n    ) {\n        fun toDomain(): Post.UserData {\n            return Post.UserData(\n                id = id,\n                name = name,\n                imageUrl = imageUrl\n            )\n        }\n    }\n    fun toDomain(): Post {\n        return Post(\n            id = id,\n            user = user.toDomain(),\n            imageUrl = imageUrl,\n            caption = caption,\n            likesCount = likesCount,\n            commentsCount = commentsCount,\n            timeStamp = timeStamp\n        )\n    }\n}\n```", "```kt\nval newsFeedModule = module {\n    single { RetrofitInstance.getNewsFeedApi() }\n    single { NewsFeedRemoteDataSource(get()) }\n    single<NewsFeedRepository> {\n        NewsFeedRepositoryImpl(get()) }\n    factory { GetTheNewsFeedUseCase(get()) }\n    viewModel<NewsFeedViewModel>()\n}\n```", "```kt\n    init {\n        loadPosts()\n    }\n    private fun loadPosts() {\n        viewModelScope.launch {\n            val newPosts = getTheNewsFeedUseCase()\n            _posts.value = newPosts\n        }\n    }\n```", "```kt\ninterface NewsFeedService {\n    @GET(\"/feed\")\n    suspend fun getNewsFeed(\n        @Query(\"pageNumber\") pageNumber: Int,\n        @Query(\"pageSize\") pageSize: Int\n    ): List<PostApiData>\n}\n```", "```kt\n    suspend fun getNewsFeed(pageNumber: Int, pageSize:\n    Int): List<PostApiData> {\n        return api.getNewsFeed(pageNumber, pageSize)\n    }\n```", "```kt\nclass NewsFeedRepositoryImpl(\n    private val remoteDataSource:\n    NewsFeedRemoteDataSource): NewsFeedRepository\n{\n    private var currentPage = 0\n    private val pageSize = 20 // Or whatever page size we\n                                 prefer\n    override suspend fun getNewsFeed(): List<Post> {\n        return remoteDataSource\n            .getNewsFeed(currentPage, pageSize)\n            .map { it.toDomain() }\n            .also { currentPage++ }\n    }\n    fun resetPagination() {\n        currentPage = 0\n    }\n}\n```", "```kt\n    suspend operator fun invoke(fromTheBeginning: Boolean):\n    List<Post> {\n        if (fromTheBeginning) {\n            repository.resetPagination()\n        }\n        return repository.getNewsFeed()\n    }\n```", "```kt\ninit {\n        loadInitialPosts()\n    }\n    private fun loadInitialPosts() {\n        viewModelScope.launch {\n            val newPosts = withContext(dispatcher) {\n                getTheNewsFeedUseCase(fromTheBeginning =\n                    true)\n            }\n            _posts.value = newPosts\n        }\n    }\n    fun loadMorePosts() {\n        viewModelScope.launch {\n            val newPosts = withContext(dispatcher) {\n                getTheNewsFeedUseCase(fromTheBeginning =\n                    false)\n            }\n            val updatedPosts = (_posts.value +\n                newPosts).takeLast(60)\n            _posts.value = updatedPosts\n        }\n    }\n```", "```kt\nfun LazyListState.OnBottomReached(\n    loadMore : () -> Unit\n){\n    val shouldLoadMore = remember {\n        derivedStateOf {\n            val lastItemInView =\n                layoutInfo.visibleItemsInfo.lastOrNull()\n                    ?: return@derivedStateOf true\n            lastItemInView.index ==\n                layoutInfo.totalItemsCount - 1\n        }\n    }\n    LaunchedEffect(shouldLoadMore){\n        snapshotFlow { shouldLoadMore.value }\n            .collect {\n                if (it) loadMore()\n            }\n    }\n}\n```", "```kt\n@Composable\nfun NewsFeed(\n    modifier: Modifier = Modifier,\n    viewModel: NewsFeedViewModel = koinViewModel()\n) {\n    val posts = viewModel.posts.collectAsState()\n    val listState = rememberLazyListState()\n    LazyColumn{\n        itemsIndexed(posts){ _, post ->\n            PostItem(post = post)\n        }\n    }\n    listState.OnBottomReached {\n        viewModel.loadMorePosts()\n    }\n}\n```"]