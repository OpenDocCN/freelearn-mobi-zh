["```kt\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n```", "```kt\nimplementation 'com.google.android.gms:play-services:12.0.1'\n```", "```kt\n<TextView\n    android:id=\"@+id/textView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\nif (ActivityCompat.checkSelfPermission(this, ACCESS_COARSE_LOCATION)\n        == PackageManager.PERMISSION_GRANTED) {\n    getLocation();\n} else {\n    ActivityCompat.requestPermissions(this, new String[] {ACCESS_COARSE_LOCATION},1);\n}\n```", "```kt\nprivate void getLocation() throws SecurityException {\n    LocationServices.getFusedLocationProviderClient(this).getLastLocation()\n            .addOnSuccessListener(this, new OnSuccessListener<Location>() {\n                @Override\n                public void onSuccess(Location location) {\n                    final TextView textView = findViewById(R.id.textView);\n                    if (location != null) {\n                        textView.setText(DateFormat.getTimeInstance()\n                                .format(location.getTime()) + \"\\n\"\n                                + \"Latitude=\" + location.getLatitude() + \"\\n\"\n                                + \"Longitude=\" + location.getLongitude());\n                    } else {\n                        Toast.makeText(MainActivity.this, \"Location null\", Toast.LENGTH_LONG)\n                                .show();\n                    }\n                }\n            });\n}\n```", "```kt\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```", "```kt\nimplementation 'com.google.android.gms:play-services:12.0.1'\n```", "```kt\nprivate final int REQUEST_RESOLVE_GOOGLE_CLIENT_ERROR=1;\nboolean mResolvingError;\nGoogleApiClient mGoogleApiClient;\n```", "```kt\nGoogleApiClient.ConnectionCallbacks mConnectionCallbacks =\n        new GoogleApiClient.ConnectionCallbacks() {\n    @Override\n    public void onConnected(Bundle bundle) {\n        Toast.makeText(MainActivity.this, \"onConnected()\", Toast.LENGTH_LONG).show();\n    }\n    @Override\n    public void onConnectionSuspended(int i) {}\n};\n\nGoogleApiClient.OnConnectionFailedListener mOnConnectionFailedListener = \n        new GoogleApiClient.OnConnectionFailedListener() {\n    @Override\n    public void onConnectionFailed(ConnectionResult connectionResult) {\n        Toast.makeText(MainActivity.this, connectionResult.toString(), Toast.LENGTH_LONG).show();\n        if (mResolvingError) {\n            return;\n        } else if (connectionResult.hasResolution()) {\n            mResolvingError = true;\n            try {\n                connectionResult.startResolutionForResult(MainActivity.this, \n                        REQUEST_RESOLVE_GOOGLE_CLIENT_ERROR);\n            } catch (IntentSender.SendIntentException e) {\n                mGoogleApiClient.connect();\n            }\n        } else {\n            showGoogleAPIErrorDialog(connectionResult.getErrorCode());\n        }\n    }\n};\n```", "```kt\nprivate void showGoogleAPIErrorDialog(int errorCode) {\n    GoogleApiAvailability googleApiAvailability = GoogleApiAvailability.getInstance();\n    Dialog errorDialog = googleApiAvailability.getErrorDialog(\n            this, errorCode, REQUEST_RESOLVE_GOOGLE_CLIENT_ERROR);\n    errorDialog.show();\n}\n```", "```kt\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (requestCode == REQUEST_RESOLVE_GOOGLE_CLIENT_ERROR) {\n        mResolvingError = false;\n        if (resultCode == RESULT_OK\n                && !mGoogleApiClient.isConnecting()\n                && !mGoogleApiClient.isConnected()) {\n            mGoogleApiClient.connect();\n        }\n    }\n}\n```", "```kt\nprotected void setupGoogleApiClient() {\n    mGoogleApiClient = new GoogleApiClient.Builder(this)\n            .addConnectionCallbacks(mConnectionCallbacks)\n            .addOnConnectionFailedListener(mOnConnectionFailedListener)\n            .addApi(LocationServices.API)\n            .build();\n    mGoogleApiClient.connect();\n}\n```", "```kt\nsetupGoogleApiClient();\n```", "```kt\nconnectionResult.hasResolution() \n```", "```kt\nErrorDialogFragment errorFragment = new ErrorDialogFragment(); \nBundle args = new Bundle(); \nargs.putInt(\"dialog_error\", errorCode); \nerrorFragment.setArguments(args); \nerrorFragment.show(getSupportFragmentManager(), \"errordialog\"); \n```", "```kt\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```", "```kt\nimplementation 'com.google.android.gms:play-services:12.0.1'\n```", "```kt\npublic class GeofenceIntentService extends IntentService { \n```", "```kt\npublic GeofenceIntentService() { \n    super(\"GeofenceIntentService\"); \n} \n```", "```kt\n@Override\nprotected void onHandleIntent(Intent intent) {\n    GeofencingEvent geofencingEvent = GeofencingEvent.fromIntent(intent);\n    if (geofencingEvent.hasError()) {\n        Toast.makeText(getApplicationContext(), \"Geofence error code= \"\n                        + geofencingEvent.getErrorCode(), Toast.LENGTH_SHORT).show();\n        return;\n    }\n    int geofenceTransition = geofencingEvent.getGeofenceTransition();\n    if (geofenceTransition == Geofence.GEOFENCE_TRANSITION_DWELL) {\n        Toast.makeText(getApplicationContext(), \"GEOFENCE_TRANSITION_DWELL\",\n                Toast.LENGTH_SHORT).show();\n    }\n}\n```", "```kt\n<service android:name=\".GeofenceIntentService\"/> \n```", "```kt\nprivate final int MINIMUM_RECOMENDED_RADIUS=100;\n```", "```kt\nprivate PendingIntent createGeofencePendingIntent() {\n    Intent intent = new Intent(this, GeofenceIntentService.class);\n    return PendingIntent.getService(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n}\n```", "```kt\nprivate List createGeofenceList() {\n    List<Geofence> geofenceList = new ArrayList<>();\n    geofenceList.add(new Geofence.Builder()\n            .setRequestId(\"GeofenceLocation\")\n            .setCircularRegion(\n                    47.6062,  //Latitude\n                    122.3321, //Longitude\n                    MINIMUM_RECOMENDED_RADIUS)\n            .setLoiteringDelay(30000)\n            .setExpirationDuration(Geofence.NEVER_EXPIRE)\n            .setTransitionTypes(Geofence.GEOFENCE_TRANSITION_DWELL)\n            .build());\n    return geofenceList;\n}\n```", "```kt\nprivate GeofencingRequest createGeofencingRequest() {\n    GeofencingRequest.Builder builder = new GeofencingRequest.Builder();\n    builder.setInitialTrigger(GeofencingRequest.INITIAL_TRIGGER_DWELL);\n    builder.addGeofences(createGeofenceList());\n    return builder.build();\n}\n```", "```kt\nif (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    GeofencingClient geofencingClient = LocationServices.getGeofencingClient(this);\n    geofencingClient.addGeofences(createGeofencingRequest(), createGeofencePendingIntent())\n            .addOnSuccessListener(this, new OnSuccessListener<Void>() {\n                @Override\n                public void onSuccess(Void aVoid) {\n                    Toast.makeText(MainActivity.this, \"onSuccess()\", Toast.LENGTH_SHORT).show();\n                }\n            })\n            .addOnFailureListener(this, new OnFailureListener() {\n                @Override\n                public void onFailure(@NonNull Exception e) {\n                    Toast.makeText(MainActivity.this,\n                            \"onFailure(): \" + e.getMessage(), Toast.LENGTH_SHORT).show();\n                }\n            });\n} else {\n    ActivityCompat.requestPermissions(this, \n            new String[] {android.Manifest.permission.ACCESS_FINE_LOCATION},1);\n}\n```", "```kt\n.setRequestId(\"GeofenceLocation\")\n.setCircularRegion(\n        47.6062,  //Latitude\n        122.3321, //Longitude\n        MINIMUM_RECOMENDED_RADIUS)\n.setLoiteringDelay(30000)\n.setExpirationDuration(Geofence.NEVER_EXPIRE)\n.setTransitionTypes(Geofence.GEOFENCE_TRANSITION_DWELL)\n```", "```kt\n.setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER | Geofence.GEOFENCE_TRANSITION_EXIT)\n```", "```kt\ngeofencingClient.removeGeofences(createGeofencePendingIntent())\n        .addOnSuccessListener(this, new OnSuccessListener<Void>() {\n            @Override\n            public void onSuccess(Void aVoid) {\n                //Success\n            }\n        })\n        .addOnFailureListener(this, new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception e) {\n                //Failuare\n            }\n        });\n```"]