["```swift\nfunc gettingSwiftyUsingPeopleNamed(names: [String],  \n                                   descriptionNames: [String],    \n                                   shouldCapitalize: Bool){ \n    // our function only has local names so those are the ones used \n} \n\ngettingSwiftyUsingPeopleNamed([\"Joe\", \"Mark\", \"Roy\", \"Jessica\"], \n           descriptionNames: [\"Awesome\", \"Silly\", \"Tall\", \"Short\"], \n           shouldCapitalize: true) \n\n```", "```swift\nfunc gettingSwiftyUsing(names: [String],  \n                         descriptions:[String],  \n                         shouldCapitalize: Bool){ \n    // our function only has local names so those are the ones used \n} \n\ngettingSwiftyUsing(names: [\"Joe\", \"Mark\", \"Roy\", \"Jessica\"],  \ndescriptions: [\"Awesome\", \"Silly\", \"Tall\", \"Short\"],  \nshouldCapitalize: true) \n\n```", "```swift\nfunc boxit(_ width: Double, _ height: Double){ \n    // argument label will be omitted in function call \n} \n\nboxit(23, 14)\n```", "```swift\nfunc curried(cosx: Int)(siny: Int) -> Float { \n    return (Float(cosx) * Float(siny)) / Float(cosx) \n} \n\nlet result = curried(2)(siny:3) \n\n```", "```swift\nfunc curriedV2(cosx: Int)->(Int)->Float{ \n    return { siny in \n        (Float(cosx) * Float(siny)) / Float(cosx) \n    } \n} \n\nlet intermediateFunctionReturn = curriedV2(2) \nlet result2 = intermediateFunctionReturn(3) \n\n```", "```swift\n@<attribute name> \n@<attribute name>(attribute arguments) \n\n```", "```swift\n@warn_unused_result(mutable_variant=\"sortInPlace\") \n    public func sort() -> [Self.Generator.Element] \n\n```", "```swift\n@discardableResult \nfunc complexFunctionNonEssentialResult()->Int{ \n    // do complex logic \n    // return trivial status code \n    return 123 \n} \n\n```", "```swift\nfunc booyah(howHigh: Int){ \n    howHigh += 100 // -> illegal assignment \n} \n\nfunc booyahTake2(var yaFeelMe: Int){ \n    yaFeelMe += 100   // -> legal but doesn't write back to caller \n} \n\n```", "```swift\nfunc booyahTake3(yaFeelMe: Int){ \n    var yaFeelMe = yaFeelMe \n    yaFeelMe += 100 \n} \n\n```", "```swift\nfunc trifecta(inout howManyTimes: Int){ \n    howManyTimes += 2000  // updates the actual passed in variable \n} \n\n```", "```swift\nvar row = 0 \nlet currentRow = ++row   // pre - adds 1 to row than assigns new value \nlet nextRow = row++       // post - assigns than adds 1 from row  \nlet previousRow = --row  // pre - minus 1 from row than assigns to value \nlet backOneRow = row--   // post - assigns than subtracts 1 from row \n\n```", "```swift\nfunc fooTastic(members: [String], instruments:[String]){ \n    // fantastic work happening here... \n} \n\nlet foo = ([\"Jackson\", \"Carey\", \"Wonderland\"], instruments:[\"drums\", \"bass\", \"keyboard\"]) \nfooTastic(foo) \n\n```", "```swift\nfunc trifecta(inout howManyTimes: Int){ \n    howManyTimes += 2000 \n} \n\n```", "```swift\nfunc trifecta(howManyTimes: inout Int){ \n    howManyTimes += 2000 \n} \n\n```", "```swift\n@<attribute name> \n@<attribute name>(attribute arguments) \n\n```", "```swift\n@warn_unused_result(mutable_variant=\"sortInPlace\") \n    public func sort() -> [Self.Generator.Element] \n\n```", "```swift\n@available(*, deprecated, renamed: \"NSUnderlyingErrorKey\") \n    public static let underlyingErrorKey: ErrorUserInfoKey \n\n```", "```swift\nlet a: (Int) -> Int \nlet b: (Int) -> (Int)-> Int \n\n```", "```swift\nlet a1: Int -> Int \nvar b1: Int -> Int -> Int \n\n```", "```swift\nfunc shifty(arg1: String = \"\", arg2: String = \"\", arg3: Int = 1){} \n\n```", "```swift\nshifty() \n\n```", "```swift\nshifty(arg2: \"\") \nshifty(arg3: 3) \n\n```", "```swift\nshifty(arg2: \"\", arg3: 3) \n\nshifty(\"\", arg3: 3) \n\nshifty(arg2: \"\", arg3: 4) \n\n```", "```swift\nfunc shifty(arg1: String = \"arg1\", arg2: String = \"arg2\", arg3: Int = 0){} \n\n```", "```swift\nshifty() \n\n```", "```swift\nshifty(arg1: \"\") // valid \nshifty(arg2: \"\") // valid \n   shifty(arg3: 3)   //valid \n   shifty(arg3: 3, arg1: \"test\")   //invalid! \n\n```", "```swift\n@protocol UICollectionViewDataSource <NSObject> \n@required \n\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section; \n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath; \n\n@optional \n\n- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView; \n\n- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath; \n\n- (BOOL)collectionView:(UICollectionView *)collectionView canMoveItemAtIndexPath:(NSIndexPath *)indexPath; \n\n- (void)collectionView:(UICollectionView *)collectionView moveItemAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath*)destinationIndexPath; \n\n@end \n\nSwift \npublic protocol UICollectionViewDataSource : NSObjectProtocol { \n\npublic func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int \n\npublic func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell \n\noptional public func numberOfSections(in collectionView: UICollectionView) -> Int \n\noptional public func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView \n\noptional public func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool \n\noptional public func collectionView(_ collectionView: UICollectionView, moveItemAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath) \n}\n```"]