["```swift\n// Web service JavaScript\nvar Product_schema= new Schema({\n   name:             String,\n   description:      String,\n   image_uri:        String,\n   quantity_on_hand: Number,\n   price:            String\n});\n\n// Product.h\n@interface Product : NSObject\n@property NSString*  name;\n@property NSString*  description;\n@property NSString*  image_uri;\n@property NSUInteger quantity_on_hand;\n@property NSString*  price;\n@end\n\n// ProductList.m\n@interface ProductList ()\n@property (nonatomic) NSArray* products;          // array of Product*\n@end\n@implementation ProductList\n- (void) viewDidLoad \n{\n   [super viewDidLoad];\n   self.title= @\"Products\";\n\n   RestIO* rest_io= [RestIO sharedRestIO];\n   [rest_io getResourceAtURI:@\"http://red:12345/inventory\"\n                  completion:^(NSURLResponse* response, NSData* data) {\n      if ([response.MIMEType isEqualToString:@\"application/json\"])\n      {\n         NSError* error;\n         NSDictionary* json_data= [NSJSONSerialization JSONObjectWithData:data\n                                                                  options:0\n                                                                    error:&error];\n         NSMutableArray* products= [NSMutableArray new];\n         for (NSDictionary* json_product in json_data)\n         {            \n            Product* product=    [Product new];\n            product.name=        json_product[@\"name\"];\n            product.description= json_product[@\"description\"];\n            product.image_uri=   json_product[@\"image_uri\"];\n            product.price=       json_product[@\"price\"];\n            {\n               NSInteger quantity= [(NSString*)json_product[@\"quantity_on_hand\"]\n                                            integerValue];\n               product.quantity_on_hand= quantity > 0? quantity : 0;\n            }\n            [products addObject:(NSString*)product];\n         }\n         _products= products.copy;\n         dispatch_async(dispatch_get_main_queue(), ^{\n            [(UITableView*)self.view reloadData];\n         });\n      }\n   }];\n}\n...\n@end\n```", "```swift\n// Web service JavaScript\nvar ShippingService_schema= new Schema({\n   name:         String,\n   description:  String,\n   transit_days: Number,\n   price:        String\n});\n\n// ShippingMethod.h\n@interface ShippingService : NSObject\n@property NSString*  name;\n@property NSString*  detail;\n@property NSNumber*  transit_days;\n@property NSString*  price;\n@end\n\n// AppDelegate.m\n#import \"AppDelegate.h\"\n#import \"Stripe.h\"\n#import \"RestIO.h\"\n#import \"ShippingMethod.h\"\n\n@interface AppDelegate ()\n@property (readwrite) NSArray<ShippingMethod*>* shipping_methods;\n@end\n\n@implementation AppDelegate\n- (BOOL)           application:(UIApplication*) app\n didFinishLaunchingWithOptions:(NSDictionary*)  options\n{\n   _ApplePay_merchant_identifier= ApplePay_merchant_identifier;\n   _ApplePay_supported_networks=  @[PKPaymentNetworkVisa, PKPaymentNetworkAmex, PKPaymentNetworkDiscover, PKPaymentNetworkPrivateLabel];\n\n   [Stripe setDefaultPublishableKey:StripePublishableKey];\n\n   _rest_io_host= @\"http://red:12345\";\n\n   // get shipping methods from server\n   {\n      NSString* shipping_methods_uri= [NSString stringWithFormat:@\"%@%@\",_rest_io_host, @\"/shipping_methods\"];\n\n      RestIO* rest_io= [RestIO sharedRestIO];\n      [rest_io getResourceAtURI:shipping_methods_uri completion:^(NSURLResponse* response, NSData* data) {\n         if ([response.MIMEType isEqualToString:@\"application/json\"])\n         {\n            NSError* error;\n            NSDictionary*   json_data=        [NSJSONSerialization JSONObjectWithData:data options:0 error:&error];\n            NSMutableArray* shipping_methods= [NSMutableArray array];\n            for (NSDictionary* json_shipping_method in json_data)\n            {\n               ShippingMethod* shipping_method=    [ShippingMethod new];\n               {\n                  shipping_method.name=         json_shipping_method[@\"name\"];\n                  shipping_method.detail=       json_shipping_method[@\"description\"];\n                  shipping_method.transit_days= [NSNumber numberWithShort:[(NSString*)json_shipping_method[@\"transit_days\"]\n                                                                           integerValue]];\n                  shipping_method.price=        json_shipping_method[@\"price\"];\n               }\n\n               [shipping_methods addObject:(NSString*)shipping_method];\n            }\n            _shipping_methods= shipping_methods.copy;\n         }\n      }];\n   }\n   return YES;\n}\n...\n@end\n```", "```swift\n// ProductCard.m\n- (void) viewDidLoad \n{\n   [super viewDidLoad];\n\n   _currency_formatter=             [NSNumberFormatter new];\n   _currency_formatter.numberStyle= NSNumberFormatterCurrencyStyle;\n\n   // get last-used shipping method\n   _shipping_method_name= [[NSUserDefaults standardUserDefaults] objectForKey:Default_shipping_method_name];\n\n   // define table sections\n   {\n      short   i= 0;\n      sections[  i].cell_row_height=   44; sections[i].cell_type= ProductDescription;\n      sections[++i].cell_row_height=  400; sections[i].cell_type= ProductImage;\n      sections[++i].cell_row_height=   44; sections[i].cell_type= ProductBuy;\n      _section_count= ++i;\n   }\n\n   // download product image\n   RestIO* rest_io= [RestIO sharedRestIO];\n   [rest_io downloadResourceWithURI: _product.image_uri \n                         completion: ^\n       (NSURL* destination_url)\n       {\n          dispatch_async(dispatch_get_main_queue(), ^\n             {\n                UIImage *image= [UIImage imageWithContentsOfFile:[destination_url path]];\n                [((ProductCard_TableView*)self.view) setProductImage:image];\n             }\n          );\n       }\n    ];\n\n   // get shipping methods\n   {\n      AppDelegate*    app_delegate=     [UIApplication sharedApplication].delegate;\n      NSMutableArray<PKShippingMethod*>* pk_shipping_methods= [NSMutableArray new];\n      for (ShippingMethod* shipping_method in app_delegate.shipping_methods)\n      {\n         PKShippingMethod* pk_shipping_method=\n         [PKShippingMethod \n          summaryItemWithLabel:[@\"Shipping \" stringByAppendingString:shipping_method.name]\n          amount:[NSDecimalNumber decimalNumberWithString:shipping_method.price]];\n         pk_shipping_method.identifier= shipping_method.name;\n         pk_shipping_method.detail=     shipping_method.detail;\n         [pk_shipping_methods addObject:pk_shipping_method];\n      }\n      _pk_shipping_methods= pk_shipping_methods.copy;\n   }\n}\n```", "```swift\n// ProductCard.m\n(ProductCard_BuyCell*) buy_cell\n{\n   ProductCard_BuyCell* cell= \n      (ProductCard_BuyCell*)[(ProductCard_TableView*)self.view dequeueReusableCellWithIdentifier:@\"buy\"];\n\n   NSNumber* price_number= [NSNumber numberWithDouble:[_product.price doubleValue]];      \n   cell.price_label.text=  [_currency_formatter stringFromNumber:price_number];\n\n   // determine whether ApplePay is available on this device and is configured with the accepted payment networks\n   BOOL can_use_ApplePay;\n   {\n      AppDelegate* app_delegate= [UIApplication sharedApplication].delegate;\n      if ((can_use_ApplePay= [PKPaymentAuthorizationViewController canMakePayments]))\n         can_use_ApplePay= [PKPaymentAuthorizationViewController\n                               canMakePaymentsUsingNetworks:app_delegate.ApplePay_supported_networks];\n   }\n\n   // instantiate the purchase button\n   UIButton* purchase_button;\n   if (can_use_ApplePay)\n   // configure a PKPaymentButton (Apple Pay button)\n   {\n      // create payment button\n      purchase_button= [PKPaymentButton buttonWithType:PKPaymentButtonTypePlain \n                                                 style:PKPaymentButtonStyleWhiteOutline];\n      purchase_button.tag= ApplePay_button_tag;\n   }\n   else\n   // configure a UIButton\n   {\n      purchase_button= [UIButton buttonWithType:UIButtonTypeSystem];\n      [purchase_button setTitle:@\"Buy\" forState:UIControlStateNormal];\n      purchase_button.tag= Buy_button_tag;\n   }\n\n   // define the layout of the purchase button\n   ...\n\n   return cell;\n}\n```", "```swift\n// create payment request\nPKPaymentRequest *request= [Stripe paymentRequestWithMerchantIdentifier:ApplePay_merchant_identifier];\nrequest.merchantIdentifier=            ApplePay_merchant_identifier;\nrequest.countryCode=                   @\"US\";\nrequest.currencyCode=                  @\"USD\";\nrequest.supportedNetworks=             ApplePay_supported_networks;\nrequest.merchantCapabilities=          PKMerchantCapability3DS;\n```", "```swift\n// client_app/merchantapp/ProductCard.m\n@interface ProductCard()\n@property PKPaymentRequest* payment_request;\n...\n@end\n\n- (void) process_ApplePay_payment_request\n{\n   // create payment request\n   _payment_request=\n      [Stripe paymentRequestWithMerchantIdentifier:...];\n   {            \n      // require shipping address and email, and billing email\n      _payment_request.requiredShippingAddressFields=\n         PKAddressFieldPostalAddress | PKAddressFieldEmail;\n      _payment_request.requiredBillingAddressFields=\n         PKAddressFieldEmail;\n   }\n   ...\n}\n```", "```swift\nclient_app/merchantapp/ProductCard.m\n@interface ProductCard()\n@property PKPaymentRequest* payment_request;\n...\n@end\n\n- (void) process_ApplePay_payment_request\n{\n   ...\n   // specify a particular shipping address\n   PKContact*              contact= [PKContact new];\n   CNMutablePostalAddress* address= [CNMutablePostalAddress new];\n   address.street=          @\"123 Fern Road\";\n   address.city=            @\"San Jose\";\n   address.postalCode=      @\"95123\";\n   address.country=         @\"USA\";\n   address.ISOCountryCode=  @\"US\";\n   contact.postalAddress=   [address copy];\n\n   _payment_request.shippingContact= contact;\n   ...\n}\n```", "```swift\n// client_app/merchantapp/ProductCard.m\n#import \"ShippingMethod.h\"\n...\n@property PKPaymentRequest* payment_request;\n...\n- (void) viewDidLoad \n{\n   ...\n   // get the ShippingMethod objects in the app delegate,\n   // and convert them to PKShippingMethod objects\n   AppDelegate* app_delegate=\n      [UIApplication sharedApplication].delegate;\n   NSMutableArray<PKShippingMethod*>* pk_shipping_methods=\n      [NSMutableArray new];\n   for (ShippingMethod* shipping_method in\n      app_delegate.shipping_methods)\n   {\n      PKShippingMethod* pk_shipping_method=\n         [PKShippingMethod \n             summaryItemWithLabel:\n                [@\"Shipping \" stringByAppendingString:\n                   shipping_method.name]\n             amount:\n                [NSDecimalNumber\n                   decimalNumberWithString:\n                      shipping_method.price]];\n      pk_shipping_method.identifier= shipping_method.name;\n      pk_shipping_method.detail=     shipping_method.detail;\n\n      [pk_shipping_methods addObject: pk_shipping_method];\n   }\n   _pk_shipping_methods= pk_shipping_methods.copy;\n}\n\n- (void) process_ApplePay_payment_request\n{\n   // create payment request\n   AppDelegate* app_delegate=\n      [UIApplication sharedApplication].delegate;\n   _payment_request=\n      [Stripe paymentRequestWithMerchantIdentifier:\n         app_delegate.ApplePay_merchant_identifier];\n  ...      \n   // set the shipping methods\n   _payment_request.shippingMethods= _pk_shipping_methods;\n  ...   \n}\n```", "```swift\n// client_app/merchantapp/ProductCard.m\n@property Product*           product;\n@property PKPaymentRequest*  payment_request;\n@property PKShippingMethod*  selected_shipping_method;\n...\n// tally the summary items' cost and the grand total\n- (NSArray<PKPaymentSummaryItem*>*) computeSummaryItems\n{\n   NSDecimalNumber* product_price=\n      [NSDecimalNumber decimalNumberWithString:_product.price];\n\n   NSDecimalNumber* shipping=\n      _selected_shipping_method?\n         _selected_shipping_method.amount :\n         [NSDecimalNumber zero];\n\n   NSDecimalNumber* tax=\n      [product_price decimalNumberByMultiplyingBy:\n         [NSDecimalNumber decimalNumberWithString:@\"0.08\"]];\n\n   NSDecimalNumber* total=\n      decimal_number_sum(@[product_price, shipping, tax]);\n\n   // specify summary items\n   NSMutableArray<PKPaymentSummaryItem*>* summary_items=\n   [NSMutableArray arrayWithArray: \n    @[\n      [PKPaymentSummaryItem\n         summaryItemWithLabel:_product.name amount:product_price],\n      [PKPaymentSummaryItem\n         summaryItemWithLabel:@\"Shipping\"   amount:shipping],\n      [PKPaymentSummaryItem\n         summaryItemWithLabel:@\"Tax\"        amount:tax],\n      [PKPaymentSummaryItem\n         summaryItemWithLabel:@\"Acme\"       amount:total]\n      ]];\n\n   return summary_items.copy;\n}\n\n- (void) process_ApplePay_payment_request\n{\n   // create payment request\n   _payment_request=\n      [Stripe paymentRequestWithMerchantIdentifier:...];\n\n   // compute summary items and assign them to the payment request\n   _payment_request.paymentSummaryItems= [self computeSummaryItems];\n   ...\n}\n```"]