- en: Chapter 5. UI Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To paraphrase Edmund Blackadder: "A UI without a control is like a pencil without
    a nib—pointless."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The range of controls, while not that large, is very flexible in what you can
    do with them. All controls can be created within Xcode or dynamically within the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Controls and widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control customization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control reference (Android and iOS cross reference)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls and widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we refer to a widget, I use it interchangeably with a UI Control. In old
    terms, a widget stands for a **WI**n**D**ow gad**GET**. The screen on an iOS device
    is classed as a window, so it's fair enough to call anything on screen a widget.
  prefs: []
  type: TYPE_NORMAL
- en: UI Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI Controls are directly available from Xcode. For creating within code,
    the control name is preceded with UI and all/any spaces removed (except **Round
    Rect Button** which is just `UIButton`). The **Fixed Space Bar Button Item** and
    **Flexible Space Bar Button Item** are accessed from `UIBarButtonItem`.
  prefs: []
  type: TYPE_NORMAL
- en: '![UI Controls](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Control selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the controls shown in the previous screenshot are obvious for what they
    do, and are easy enough to just add and connect to the UI. However, there are
    some controls that need to be considered differently from the others, most notably
    `UIButton` and `UIStepper`. The `UIButton` class is very flexible in what it can
    do, while `UIStepper` really needs to be used as an **action** rather than an
    **outlet**. This means they have to be handled in a different way.
  prefs: []
  type: TYPE_NORMAL
- en: UIButton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `UIImageView` has no events attached to it. So, if you need an image that
    can be clicked on, they can be planted onto a `UIButton` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is completely possible to add text as well as an image to the button by
    adding a `UILabel` to the button, but it is a two step process. The important
    thing to remember is that, when placing anything on another view, the size of
    the parent has to be taken into consideration, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add as many images and labels to a button. The button can also have
    a background image added to it, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, the background can have a gradient fill added, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Say, the `UILabel` class we added before was too small for the text coming in
    (it's no longer `Hello world`, but `I love drinking hot coffee`), the font size
    within the label will need to be changed. The resizing is performed by creating
    a bounding box (`textSize`), and fitting the text inside of it by setting the
    font size so that the text fits the height—not the width — of the bounding box.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The button doesn''t have to have a rounded shape—a custom shape can be also
    applied. Let''s look at the following code for a circular button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For this to work, the `Monotouch.CoreGraphics` namespace has to be included.
  prefs: []
  type: TYPE_NORMAL
- en: There are other types of buttons also available (`ContactAdd`, `Custom`, `DetailDisclosure`,
    `InfoDark`, `InfoLight`, `RoundedRect`, and `System`). While `RoundedRect` is
    the most common form used, the others can be created either in Xcode or as code
    in your app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceeding code creates a button of type `Custom`. The other types of buttons
    look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UIButton](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From left to right (System, Custom, DetailDisclosure, InfoLight, InfoDark, ContactAdd)
  prefs: []
  type: TYPE_NORMAL
- en: UIStepper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UISteppers` class needs to be defined in the connector as both an outlet
    and action (with the **Event** selected to be **Value Changed**). A typical action
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![UIStepper](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the Stepper control is clicked on, the `partial void` method is called,
    which updates the counter as shown in the preceding code. If you just have one
    without the other, the app will die when it comes to a View Controller with a
    `UIStepper` class on.
  prefs: []
  type: TYPE_NORMAL
- en: The other controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table will give you an indicative list of what each control does,
    and any caveats for the use of the control:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Control | Used for | Caveats |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Label` | Simple labels | Does not respond to touch events |'
  prefs: []
  type: TYPE_TB
- en: '| `SegmentedControl` | A multiple button on a single view. Frequently used
    on `MapViews` for the different types of map available |   |'
  prefs: []
  type: TYPE_TB
- en: '| `TextField` | Text entry | Set `SecureTextEntry = true` for passwords |'
  prefs: []
  type: TYPE_TB
- en: '| `Slider` | Selecting a volume or color | Uses float values |'
  prefs: []
  type: TYPE_TB
- en: '| `PageControl` | A simple method of showing how many **pages** are on a `scrollview`
    area |   |'
  prefs: []
  type: TYPE_TB
- en: '| `DatePicker` | A date picker | Can also be used for Time as well |'
  prefs: []
  type: TYPE_TB
- en: '| `NavigationBar` | A navigation bar for the top of the screen | Requires a
    navigation item |'
  prefs: []
  type: TYPE_TB
- en: '| `NavigationItem` | A navigation item for the navigation bar | Needs a Navigation
    Controller to be added for the item type to be defined within Xcode |'
  prefs: []
  type: TYPE_TB
- en: '| `SearchBar` | A search bar | Needs both an action and outlet defined |'
  prefs: []
  type: TYPE_TB
- en: '| `ToolBar` | A bar used for adding buttons to, as tools | Use this for the
    event and in the handler use `Item` for the `BarButtonItem`. |'
  prefs: []
  type: TYPE_TB
- en: '| `BarButtonItem` | A button for use on a toolbar. Comes with an image and
    label already on the button | Don''t catch the event from this; use the toolbar
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Fixed`/`FlexibleBarButtonItem` | Provides space between buttons on the toolbar
    |   |'
  prefs: []
  type: TYPE_TB
- en: '| `TabBar` | Used for tabviews | Use a `Toolbar` controller to define which
    nib file, pressing a tab, will call |'
  prefs: []
  type: TYPE_TB
- en: '| `TabBarItem` | A button for use on a `TabBar`, similar to a `BarButtonIt`
    `em` |   |'
  prefs: []
  type: TYPE_TB
- en: Comparing Android to iOS UI controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table is a comparison list and is intended for those wishing
    to port to or from Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Android | iOS | Android responds to events | iOS responds to events |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Button` | `UIButton` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `Text` | `UILabel` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `ListView` | `TableView` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '|   | `TableViewCell` |   | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `CheckBox` | `Switch` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `CheckedTextView` | `Switch` with `UILabel` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `ProgressBar` | `ActivityIndicatorView` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `RadioButton` | `MTD.RadioElement` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `RadioGroup` | `MTD.RadioGroup` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `SeekBar` | `Slider` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `TextView` (multiple types) | `TextField` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `FrameLayout`, `LinearLayout`, `RelativeLayout`, `TableLayout` |   | Yes
    |   |'
  prefs: []
  type: TYPE_TB
- en: '| `GridView` | `ComponentView` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `ScrollView` | `Scrollview` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `SlidingDrawer` | `ActionBar` | Yes |   |'
  prefs: []
  type: TYPE_TB
- en: '| `TabHost` | `TabBar` | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `TabWidget` | `TabBarItem` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `WebView` | `Webview` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `Gallery` | `ImageGallery` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageButton` | `Button` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageView` | `ImageView` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `MediaController` | `AudioViewController` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `VideoView` | `VideoViewController` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `DatePicker` | `DatePicker` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `TimePicker` | `DatePicker` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `DialerFilter` | `UIKeyboard` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `GestureOverlayView` | `Gestures` (approx) | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `SurfaceView` | `View` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `TwoLineListItem` | `MTD`.`MultipleLineElement` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `View` | `View` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `Zoom` Button | `Stepper` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `Zoom` Controls | `SegmentedControl` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: Although there are other views/controls on Android that are not on iOS and vice
    versa, these are the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the wealth of UI Controls to play around with and the degree of customization
    that can be achieved on just about everything, it is little wonder that people
    enjoy using their iOS devices; they can be made to look good!
  prefs: []
  type: TYPE_NORMAL
