- en: Chapter 6\. "Cooking" Your First ROM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. “制作”你的第一个ROM
- en: In Chapter 5, *Customizing Kernel and Boot Sequence*, we took an amazing journey
    into the Linux kernel—now you know how to obtain the right version for your device
    and how to build it. We got great satisfaction customizing and building your own
    kernel version, specific for your device—we added new drivers for your hardware
    and removed those that were unnecessary. You finally learned about the boot sequence.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第五章“定制内核和引导序列”中，我们进行了一次令人惊叹的Linux内核之旅——现在你知道了如何为你的设备获取正确的版本以及如何构建它。我们定制和构建你自己的内核版本，针对你的设备——我们添加了新的硬件驱动程序，并移除了那些不必要的。你最终了解了引导序列。
- en: In this chapter, we will enter the *modding* world and we will move forward
    with your first customized ROM. You will learn how to set up the system and how
    to create a custom ROM. We will see an overview of the most popular ROMs, and
    all the tools you need and how to use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进入*修改*的世界，并将继续前进，制作你的第一个定制ROM。你将学习如何设置系统和如何创建一个定制ROM。我们将概述最受欢迎的ROM，以及你需要用到的所有工具以及如何使用它们。
- en: 'The following topics will be covered in the chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: History of Android modding (Cyanogenmod)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android修改的历史（Cyanogenmod）
- en: Custom recovery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制恢复
- en: Root access
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根权限
- en: Kitchen and other tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 厨房和其他工具
- en: History of custom ROMs
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制ROM的历史
- en: First things first—What does "Custom ROM" mean?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要明确——什么是“定制ROM”？
- en: Most Android devices come with so-called *NAND memories*. A NAND memory is a
    particular type of flash memory. A flash memory is based on transistors, instead
    of rotating disks, like in old hard drives. This type of memory is completely
    electrically managed—it can be written and erased and can store data indefinitely
    (not volatile). Knowing this, we may think that everything is writable on Android.
    Well, not exactly!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Android设备都配备了所谓的*NAND存储器*。NAND存储器是一种特殊的闪存。闪存基于晶体管，而不是像旧硬盘那样的旋转磁盘。这种类型的内存完全由电管理——它可以写入、擦除，并且可以无限期地存储数据（非易失性）。了解这一点后，我们可能会认为在Android上可以写入任何东西。好吧，并不完全是这样！
- en: The acronym ROM stands for Read-Only Memory. This type of memory is often used
    in embedded systems to safely store all those files that are part of the core
    system. In an effort to guarantee the highest system integrity possible, developers
    must be sure that the core system stays intact over device reboots and possible
    failures. That's why the core system is stored in a type of memory that can only
    be written once—Read-Only Memory, to be precise. With time, the Android hacking
    community took the acronym and transformed it. Nowadays, in saying Custom ROM,
    you are simply saying "My own custom Android system for this specific device,"
    and this is the meaning we will use in the following pages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 缩写ROM代表只读存储器。这种类型的内存常用于嵌入式系统，用于安全地存储所有属于核心系统的文件。为了确保尽可能高的系统完整性，开发者必须确保核心系统在设备重启和可能的故障中保持完整。这就是为什么核心系统存储在只能写入一次的内存中——确切地说，就是只读存储器。随着时间的推移，Android黑客社区采用了这个缩写并进行了转变。如今，当我们说定制ROM时，我们只是在说“这是我针对这个特定设备的自定义Android系统”，这就是我们在以下页面中将使用的含义。
- en: As for the Linux kernel, Android is one of the most popular open source projects
    currently developed. Free to use and customizable, used by millions of people,
    Android is the base element for hundreds of customized operating systems—most
    of them were experiments, some were custom versions fixing particular bugs for
    specific scenarios, and others were optimized versions of the original system.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux内核来说，Android是目前开发中最为流行的开源项目之一。免费使用且可定制，被数百万用户使用，Android是数百个定制操作系统的基本元素——其中大多数是实验性的，一些是为特定场景修复特定错误的定制版本，还有一些是原始系统的优化版本。
- en: In the beginning, the modding community was very scattered—lots of lone wolves,
    hacking in their dark rooms. Over time, most of them converged into more social
    environments, combining their efforts in forums and communities, creating modding
    teams to provide users with better and more reliable ROMs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初，修改社区非常分散——许多孤独的狼，在他们的黑暗房间里进行黑客攻击。随着时间的推移，他们中的大多数人都汇聚到了更社交的环境中，在论坛和社区中结合他们的努力，组建了修改团队，为用户提供更好、更可靠的ROM。
- en: In Chapter 5, *Customizing Kernel and Boot Sequence*, we saw how to create a
    custom version of Android working with the source code. We were able to radically
    alter the original system to create our version, perfectly fitting our needs,
    so what's all this hype about modding? Why couldn't we just grab the source code
    and customize our system? The truth is that, unfortunately, Google is a needle
    in a haystack. Most of the other manufacturers play the whole open source game
    a bit differently and it is not always possible to rebuild a system from scratch,
    due to the lack of provided source code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 5 章“自定义内核和引导序列”中，我们看到了如何使用源代码创建一个自定义版本的 Android。我们能够彻底改变原始系统以创建我们的版本，完美地满足我们的需求，那么关于修改的所有这些炒作是什么？为什么我们不能直接获取源代码并自定义我们的系统？事实是，不幸的是，谷歌就像大海捞针。大多数其他制造商在开源游戏中玩得略有不同，由于缺乏提供的源代码，因此不可能从头开始重建系统。
- en: Luckily for us, Android customization can be achieved by following a *different
    path*—going straight to the system memory partition, decompiling the components,
    and making customizations, or so-called **surface modifications**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以通过遵循*不同的路径*来实现 Android 定制——直接进入系统内存分区，反编译组件，并进行定制，或者所谓的**表面修改**。
- en: A totally different game is played in the Linux kernel field. As you can remember,
    Android and the Linux kernel have different licenses—Android is distributed under
    the Apache License v2, while the Linux kernel is distributed under the GPL license.
    The GPL license is stricter about modification and redistribution and the manufacturers
    have a hard time keeping the kernel *secret*. That's why the Linux kernel is always
    available and modders can add, remove, and improve whatever aspect they want—new
    drivers, improved power management, improved CPU management, and so on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 内核领域，游戏规则完全不同。正如你可能记得的，Android 和 Linux 内核有不同的许可证——Android 在 Apache 许可证
    v2 下分发，而 Linux 内核在 GPL 许可证下分发。GPL 许可证对修改和再分发的限制更严格，制造商很难保持内核的*机密性*。这就是为什么 Linux
    内核总是可用，修改者可以添加、删除和改进他们想要的任何方面——新的驱动程序、改进的电源管理、改进的 CPU 管理，等等。
- en: When you look at the whole custom ROM idea, you end up thinking that you see
    custom ROMs everywhere and every day—manufacturer's ROM. If we think that the
    *really pure* Android system is the one shipped with Nexus devices, we realize
    that manufacturers are the *first modders*, turning the original system into something
    often completely different. Just think about Samsung or HTC custom UI. Those are
    huge modifications to the UI. Think about those devices that have an AM/FM radio—again,
    serious customization. Some manufacturers have gone so far with customizations
    over the years that they eventually made their device incompatible even with Google
    Play Store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你审视整个自定义 ROM 概念时，你会发现你似乎每天都在看到自定义 ROM——制造商的 ROM。如果我们认为*真正纯净*的 Android 系统是 Nexus
    设备上搭载的系统，我们就会意识到制造商是*第一个修改者*，将原始系统变成了经常完全不同的东西。想想三星或 HTC 的定制 UI。这些都是对 UI 的巨大修改。想想那些带有
    AM/FM 收音机的设备——再次，严重的定制。一些制造商在过去的几年中进行了如此多的定制，以至于他们的设备最终甚至与 Google Play 商店不兼容。
- en: In the following pages, we will see an overview of the most popular custom ROMs
    to try to understand why they are so loved by advanced users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将概述最受欢迎的自定义 ROM，以了解为什么它们如此受到高级用户的喜爱。
- en: Cyanogenmod
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cyanogenmod
- en: 'One of the undisputedly most popular Android custom ROMs is Cyanogenmod. It''s
    one of the oldest ones and it brings features and performance that cannot be found
    in the official Android system:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Cyanogenmod 是最受欢迎的 Android 定制 ROM 之一。它是其中最古老的之一，它带来了在官方 Android 系统中找不到的功能和性能：
- en: '![](img/epub_36702041_89.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_89.jpeg)'
- en: Since the beginning, just after the first public releases of Android open source
    code, the Cyanogen team started back-porting the latest Android version to old
    devices. They basically overcame manufacturers' *business decisions* to leave
    old devices with old Android versions and made an effort to give new glory to
    so-called *legacy devices*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，就在 Android 开源代码的第一个公开发布之后，Cyanogen 团队就开始将最新的 Android 版本回溯到旧设备上。他们基本上克服了制造商的*商业决策*，即让旧设备保留旧的
    Android 版本，并努力让所谓的*旧设备*重获新生。
- en: During the years, the Cyanogenmod team added and tuned tons of features, and
    this approach attracted thousands of users. The improvements have been so good
    that often the official Google Android team merged them into the official Android
    source base, in the real open source community spirit.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些年中，Cyanogenmod团队添加和调整了大量的功能，这种方法吸引了成千上万的用户。这些改进如此之好，以至于官方的Google Android团队经常将它们合并到官方的Android源代码库中，体现了真正的开源精神。
- en: As said earlier, the Cyanogenmod team didn't start the project from scratch.
    They used the Android Open Source Project and enhanced it. Using a different approach
    to lots of other customizers, they decided that the whole project had to be available
    as open source code, allowing everybody to enjoy all the features, learn from
    the source code, and contribute to the project itself. Over the years, the community
    has grown significantly, and lots and lots of blog posts, tutorials, and practical
    guides have invaded the web-sphere, making Cyanogenmod one of the most popular
    custom ROMs currently available.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Cyanogenmod团队并非从零开始这个项目。他们使用了Android开源项目并对其进行了增强。与其他许多定制者采用不同的方法，他们决定整个项目必须以开源代码的形式提供，让每个人都能享受所有功能，从源代码中学习，并为项目本身做出贡献。多年来，社区显著增长，大量的博客文章、教程和实用指南涌入网络空间，使Cyanogenmod成为目前最受欢迎的自定义ROM之一。
- en: 'This is a list of the most-loved features that Cyanogenmod currently provides:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Cyanogenmod目前提供的最受欢迎的功能列表：
- en: '**Theming support**: The whole system UI can be customized with user-made themes
    that can be applied to the system at runtime'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题支持**：整个系统UI可以使用用户创建的主题进行自定义，这些主题可以在系统运行时应用'
- en: '**FLAC support**: Free Lossless Audio Codec is one of the many audio codecs
    available on the system'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FLAC支持**：无损音频编解码器（Free Lossless Audio Codec）是系统上可用的许多音频编解码器之一'
- en: '**Bigger APN (Access Point Network) list**: Lots of different APNs have been
    added over time, making it easy to quickly set up an Internet connection on a
    multitude of devices'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更大的APN（接入点网络）列表**：随着时间的推移，添加了大量的不同APN，使得在众多设备上快速设置互联网连接变得容易'
- en: '**OpenVPN client**: The popular VPN software is available and ready to be used'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenVPN客户端**：流行的VPN软件可用并准备好使用'
- en: '**Enriched Power Off menu**: The Power Off menu contains new actions such as
    Reboot, Recovery Mode Reboot, and so on'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的关机菜单**：关机菜单包含新的操作，如重启、恢复模式重启等'
- en: 'Some other features include:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些功能包括：
- en: Support for Wi-Fi, Bluetooth, and USB tethering
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Wi-Fi、蓝牙和USB共享网络连接
- en: CPU Overclock management and system-wide performance enhancements
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU超频管理和系统级性能增强
- en: Advanced management of Soft Buttons
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软按钮的高级管理
- en: New Toggle Buttons in the system notification menu such as GPS, Bluetooth, and
    Wi-Fi
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统通知菜单中的新切换按钮，如GPS、蓝牙和Wi-Fi
- en: Advanced Application permissions management, for a meticulously secured system
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级应用程序权限管理，为系统提供细致的安全保障
- en: System-wide graphics enhancements
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统级图形增强
- en: Increased performance and reliability, as stated by the team, compared to any
    other Android system derived from the official Google vanilla one
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与任何其他从官方Google纯Android系统派生的Android系统相比，团队表示性能和可靠性有所提高
- en: In April 2013, Cyanogenmod went from community project to an actual company.
    Despite this, the open source nature is still one of the main core values of the
    company. So far, it counts 17 employees working full-time on the project. In the
    last three years, they received a few donations from third-party partners, such
    as Benchmark Capital and Redpoint Ventures, pushing the development of an easier
    Cyanogenmod installation process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年4月，Cyanogenmod从社区项目转变为一家真正的公司。尽管如此，开源的本质仍然是公司的主要核心价值观之一。到目前为止，它有17名全职员工在项目上工作。在过去三年中，他们从第三方合作伙伴那里收到了一些捐赠，如Benchmark
    Capital和Redpoint Ventures，推动了更简单的Cyanogenmod安装过程的开发。
- en: In 2014, Cyanogenmod announced a partnership with OnePlus, a smartphone manufacturer,
    to distribute their devices with a pre-installed Cyanogenmod. According to their
    analytics, Cyanogenmod is currently used by 50 million devices.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，Cyanogenmod宣布与智能手机制造商OnePlus建立合作伙伴关系，将预装Cyanogenmod的设备进行分发。根据他们的分析，Cyanogenmod目前被5000万台设备使用。
- en: Building Cyanogenmod
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建Cyanogenmod
- en: 'Inspired by Google AOSP, Cyanogenmod provides an official website where you
    can download the project source code and access the support forum: [www.cyanogenmod.org](http://www.cyanogenmod.org).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 受Google AOSP的启发，Cyanogenmod提供了一个官方网站，您可以从该网站下载项目源代码并访问支持论坛：[www.cyanogenmod.org](http://www.cyanogenmod.org)。
- en: The website also provides a complete list of every supported device. Unlike
    Google AOSP, which formally supports only Nexus devices, Cyanogenmod is available
    for dozens of different devices.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 网站还提供了一个支持的所有设备的完整列表。与仅正式支持Nexus设备的Google AOSP不同，Cyanogenmod适用于数十种不同的设备。
- en: The Cyanogenmod build system is the exact same one you already mastered in the
    previous chapters. Knowing that, we leave it as an exercise to download and build
    your own Cyanogenmod version to fully understand how far Android AOSP can be customized
    and improved.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Cyanogenmod构建系统与你在前几章中已经掌握的完全相同。了解这一点后，我们将它留作练习，下载并构建你自己的Cyanogenmod版本，以完全理解Android
    AOSP可以定制和改进到何种程度。
- en: Installing a pre-build version
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装预构建版本
- en: Being an open source project, you could build Cyanogen from source. If you want
    a quicker solution, Cyanogenmod provides pre-built installable versions of the
    system for a plethora of devices. Just check the website and look for one of your
    devices—chances are that it's on the list of supported devices.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开源项目，你可以从源代码构建Cyanogen。如果你想找到一个更快的解决方案，Cyanogenmod为众多设备提供了预构建的系统安装版本。只需检查网站，寻找你的设备——很可能它就在支持设备列表中。
- en: Once you find that your device is supported, you can pick one of the many versions
    available. The release cycle is very different from Google's. One of the most
    *adventurous* features of the whole Cyanogenmod world is the **nightly build**—every
    night, an automatic system starts a new build with the latest contribution to
    the source code repository. These are tricky versions, which must be considered
    unstable, but will contain all the new things that the development team adds to
    the system daily—*only for the brave!*
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你发现你的设备受到支持，你可以选择许多版本中的一个。发布周期与Google的非常不同。整个Cyanogenmod世界中最*冒险*的特性之一是**夜间构建**——每晚，一个自动系统都会使用源代码仓库的最新贡献启动一个新的构建。这些版本很复杂，必须被视为不稳定，但将包含开发团队每天添加到系统中的所有新功能——*仅限勇敢者！*
- en: 'In addition to the different release cycle, Cyanogenmod also uses a different
    version naming convention. The team uses tags to specify the different versions
    of the ROM:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不同的发布周期外，Cyanogenmod还使用不同的版本命名约定。团队使用标签来指定ROM的不同版本：
- en: '**Nightly**: As Already explained.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**夜间版**：如前所述。'
- en: '**Experimental**: This is the version currently under testing.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实验版**：这是目前正在测试的版本。'
- en: '**M Snapshot, or Milestone Snapshot**: This is more stable than a nightly,
    but still to be considered unstable.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**M快照，或里程碑快照**：这比夜间版更稳定，但仍被视为不稳定。'
- en: '**Release Candidate**: This is the final step before reaching the *stable*
    state. This is the first release that it would be *wise* to use on a daily basis
    on your device.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布候选版**：这是达到*稳定*状态前的最后一步。这是第一个建议在日常设备上使用的版本。'
- en: '**Stable**: This is the final state, targeting all users.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**稳定版**：这是最终状态，面向所有用户。'
- en: The Android Open Kang Project
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android Open Kang Project
- en: 'Android Open Kang Project, also known as AOKP, is an open source project born
    in 2011 with the goal of providing an alternative to official Google Android for
    smartphones and tablets:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Android Open Kang Project，简称AOKP，是一个于2011年诞生的开源项目，旨在为智能手机和平板电脑提供官方Google Android的替代品：
- en: '![](img/epub_36702041_90.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_90.jpeg)'
- en: As you can imagine, the Kang team didn't create the system from scratch. They
    used the Android Open Source Project by Google as a starting point, as Cyanogenmod
    did. This particular Android version targets high-end smartphones and tablets
    and improves a few aspects to make the system more efficient and customizable.
    These are some of its main pros, which are the reason why more and more users
    decide to switch to AOKP.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，Kang团队并没有从头开始创建系统。他们像Cyanogenmod一样，以Google的Android开源项目作为起点。这个特定的Android版本针对高端智能手机和平板电脑，并改进了一些方面，使系统更高效和可定制。以下是它的主要优点，这也是越来越多的用户决定切换到AOKP的原因。
- en: One of the aspects that users love is that the AOKP team focused on making the
    system as light as possible. They stripped away every unnecessary app and basically
    left just the official Google apps, to create the smallest possible system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 用户喜爱的一个方面是AOKP团队专注于使系统尽可能轻量。他们移除了所有不必要的应用，基本上只留下了官方的Google应用，以创建尽可能小的系统。
- en: Most of the smartphones and tablets nowadays contain lots and lots of *esthetical*
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，大多数智能手机和平板电脑都包含大量的*美学*
- en: features that could slow down the system and are heavy on the eye. These types
    of apps are called **bloatware** and are usually pre-installed system apps that
    are impossible to remove from the system. AOKP made getting rid of these useless
    apps one of its main goals.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能可能会减慢系统速度，并且对视觉影响较大。这类应用程序被称为**冗余软件**，通常是预装的系统应用程序，无法从系统中移除。AOKP将消除这些无用应用程序作为其主要目标之一。
- en: The Kang team works very hard to guarantee the maximum level of customization
    for the user's system. AOKP provides a **ROM Control** menu to customize lots
    of aspects of the system, from UI customization to behavior customizations. A
    large amount of energy has been spent in the gesture management domain, and one
    of the coolest features is the possibility to launch any desired app with a finger
    gesture instead of tapping on an icon.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Kang团队非常努力地工作，以确保用户系统的最大定制化水平。AOKP提供了一个**ROM控制**菜单来定制系统的许多方面，从UI定制到行为定制。在手势管理领域投入了大量精力，其中最酷的功能之一是可以通过手势启动任何所需的程序，而不是点击图标。
- en: As with Cyanogenmod, AOKP also provides plenty of documentation and downloads
    on their website at [http://aokp.co](http://aokp.co). Again, you can check out
    the source code and build it yourself, or try out an already built version.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 与Cyanogenmod一样，AOKP也在他们的网站上提供了大量的文档和下载，网址为[http://aokp.co](http://aokp.co)。同样，你可以查看源代码自行编译，或者尝试已经编译好的版本。
- en: 'Here is a quick list of the goodies you can find in AOKP:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速列表，列出了你可以在AOKP中找到的亮点：
- en: '**Vibration Pattern**: Every contact can be associated to a particular vibration
    pattern'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**振动模式**：每个联系人都可以关联到特定的振动模式。'
- en: '**Navigation Ring**: The Android lock screen can be customized with user-chosen
    apps to quickly access them even with a locked device'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航环**：Android锁屏可以通过用户选择的程序进行定制，以便在设备锁定的情况下快速访问。'
- en: '**LED Control**: The system LED behavior can be customized in terms of color,
    blinking, and duration to create custom notifications for your custom scenarios'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LED控制**：可以根据颜色、闪烁和持续时间来定制系统LED的行为，以创建适用于自定义场景的通知。'
- en: '**Custom Toggles**: The notification area can be customized with different
    toggle buttons to create the perfect setup that fits your needs'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义开关**：通知区域可以通过不同的切换按钮进行定制，以创建适合你需求的完美设置。'
- en: 'The following image shows two screenshots from the actual system:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图片显示了实际系统中的两个截图：
- en: The first one shows how to customize the **Navigation Ring**
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分展示了如何自定义**导航环**
- en: The second one shows how to customize the **Vibration** pattern![](img/epub_36702041_91.jpeg)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分展示了如何自定义**振动**模式![img/epub_36702041_91.jpeg](img/epub_36702041_91.jpeg)
- en: Installing AOKP
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装AOKP
- en: 'AOKP versioning is different from Google''s and Cyanogenmod''s. AOKP provides
    only too versions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AOKP的版本与Google和Cyanogenmod不同。AOKP只提供两个版本：
- en: Nightlies
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 夜间版本
- en: Milestones
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里程碑
- en: Nightlies are the equivalent of Cyanogenmod's nightly build. Indeed, this is
    just a build automatically generated every night by the AOKP build system. This
    is to be considered highly unstable and only to be installed for testing purposes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 夜间版本相当于Cyanogenmod的夜间构建。实际上，这只是AOKP构建系统每天自动生成的一个构建。这应该被视为高度不稳定，仅用于测试目的。
- en: By contrast, Milestones are stable builds, meant to be installed for stable
    daily usage.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，里程碑是稳定的构建版本，旨在用于稳定的日常使用。
- en: To keep the community engaged, the Kang team created **AOKP PUSH**, an app that
    keeps the phone updated with new builds and also includes the ability to install
    a system update, when available. As a final note, like Cyanogenmod, AOKP is completely
    free and open to your contributions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持社区的参与度，Kang团队创建了**AOKP PUSH**应用程序，该应用程序可以保持手机更新到新构建，并且还包括安装系统更新的功能。最后值得一提的是，与Cyanogenmod一样，AOKP是完全免费且开放接受贡献的。
- en: Minor ROMs
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小型ROM
- en: In the previous sections, we saw an overview of the two most popular custom
    ROMs available nowadays for Android smartphones and tablets. As you can imagine,
    this is just the tip of the iceberg—over the years, dozens of different custom
    ROMs have been developed and released. Lots of them target specific scenarios
    to solve specific issues or satisfy specific needs of their users, improving the
    Android system in their own way. Most of them are not built from scratch, but
    are based on already available systems that have been customized and redistributed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了目前市场上最流行的两种定制ROM的概述，这些ROM适用于Android智能手机和平板电脑。正如你可以想象的那样，这仅仅是冰山一角——多年来，已经开发并发布了数十种不同的定制ROM。其中许多针对特定场景，以解决特定问题或满足用户的具体需求，以他们自己的方式改进Android系统。大多数不是从头开始构建的，而是基于已经可用的系统，这些系统经过定制和重新分发。
- en: Most of the available custom ROMs target a specific device, to solve device-specific
    issues and improve usability and performance. **DroniX** (project created by the
    authors of this very book, targeted a specific device, the Huawei Ideos U8150,
    a low-end device that became very popular at the time. The development team focused
    on performance and squeezed every available Megahertz from the Ideos CPU. With
    the Kernel source code available, we were able to improve CPU frequencies and
    governors. Better power management meant better battery management, with better
    performance and increased battery life.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数可用的定制ROM针对特定设备，以解决特定设备的问题并提高可用性和性能。**DroniX**（由本书作者创建的项目，针对特定设备，华为Ideos U8150，当时一款非常流行的低端设备。开发团队专注于性能，从Ideos
    CPU中榨取了每一个可用的兆赫兹。由于有内核源代码可用，我们能够提高CPU频率和控制器。更好的电源管理意味着更好的电池管理，性能提升并增加了电池寿命。
- en: As always, be careful when you try out custom ROMs. Some of them could be very
    *extreme* and could be dangerous for your devices. This is unfortunate, but it's
    a real scenario. There is no magic for *cooking* a custom ROM, and there are a
    lot of things that can go wrong. Things like extreme overclocking, for instance,
    are dangerous, and a wise user should distrust ROMs that try to sell these kinds
    of features. Experimenting with Android can be fun, satisfying, and challenging,
    but it must be done with knowledge and wisdom.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 总是小心尝试定制ROM。其中一些可能非常**极端**，可能对您的设备造成危险。这是不幸的，但这是一个真实的情况。没有魔法可以**烹饪**定制ROM，而且有很多事情可能会出错。例如，极端超频是危险的，明智的用户应该不相信试图销售这些功能的ROM。在Android上进行实验可能很有趣、令人满意和具有挑战性，但必须具备知识和智慧。
- en: 'We can''t list here every custom ROM available in the wild. What we can do
    is to point you in the right direction: [http://www.xda-developers.com/](http://www.xda-developers.com/).
    This is probably the most famous forum to get the latest news and the latest crazy
    things.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法列出野外所有可用的定制ROM。我们能做的是指明正确的方向：[http://www.xda-developers.com/](http://www.xda-developers.com/)。这可能是获取最新消息和最新疯狂事物的最著名论坛。
- en: Overview of OEM customizations
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OEM定制概述
- en: Even if they are not commonly considered custom ROMs, all the Android variants
    distributed by manufacturers can be considered to have heavy customizations. We
    witness these every day—every time you look at a Samsung device, you know that
    it's not pure Android.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 即使它们通常不被认为是定制ROM，制造商分发的所有Android变体都可以被认为是进行了大量定制。我们每天都在见证这些——每次你看到三星设备时，你就知道它不是纯Android。
- en: From the system launcher to the Settings menu, every single component of these
    systems is heavily customized by the OEM and very far from the official Google
    version. In some cases, the system is so different that the average user doesn't
    know that he is using the same Android 5 system, for instance.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统启动器到设置菜单，这些系统的每一个组件都被OEM大量定制，与官方谷歌版本相去甚远。在某些情况下，系统差异如此之大，以至于普通用户甚至不知道他正在使用相同的Android
    5系统，例如。
- en: This is a list of the most popular OEM customizations to demonstrate how a system
    can be modified and how different the same Android version can look on devices
    by different manufactures.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最受欢迎的OEM定制列表，以展示系统如何被修改，以及不同的制造商如何使相同的Android版本在设备上看起来如此不同。
- en: Samsung – TouchWiz
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 三星 – TouchWiz
- en: TouchWiz is a graphical interface, optimized for touch interfaces. It has been
    developed by Samsung and its technical partners. Often, it's incorrectly defined
    as a "custom operating system", but technically speaking, it's just a heavy customization
    of the Android UI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: TouchWiz 是一个针对触摸界面的图形界面，由三星及其技术合作伙伴开发。通常，它被错误地定义为“定制操作系统”，但从技术角度来说，它只是对 Android
    UI 的重度定制。
- en: 'The first version of TouchWiz was released in 2010, for Android 2.1 and BADA,
    an operating system created by Samsung for its smartphones and tablets. The current
    version is TouchWiz 5 and we can find lots of improvements, added over the years.
    In the beginning, TouchWiz was just a *different UI*. Today, it''s a collection
    of custom system applications, customized UI widgets, and lots of new settings
    and features, such as sound profiles, power management, toggles, and so on. The
    following screenshot shows the home screen and the applications drawer:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: TouchWiz 的第一个版本于2010年发布，针对 Android 2.1 和三星为其智能手机和平板电脑创建的操作系统 BADA。当前版本是 TouchWiz
    5，我们可以在多年中找到许多改进。最初，TouchWiz 只是一个**不同的 UI**。今天，它是一系列定制系统应用、自定义 UI 小部件以及许多新的设置和功能，如声音配置文件、电源管理、开关等。以下截图展示了主屏幕和应用程序抽屉：
- en: '![](img/epub_36702041_92.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_92.jpeg)'
- en: Huawei EMUI
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 华为 EMUI
- en: Under the influence of Samsung's work, Huawei also provides its own version
    of Android UI for its devices. As with Samsung, they started with a customized
    UI and added lots of features, such as theme customization—icons, colors, fonts,
    and lock screen. The notification area has been customized and improved, too.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在三星工作的启发下，华为也为其设备提供了自己的 Android UI 版本。与三星一样，他们从定制 UI 开始，并添加了许多功能，如主题定制——图标、颜色、字体和锁屏。通知区域也进行了定制和改进。
- en: 'One of the most useful new features is definitely the advanced power management.
    It provides three possible setups: Ultra, Smart, and Normal. Ultra is the *extreme*
    setup—one click, and you can turn off every sensor but the bare minimum ones,
    aiming to achieve the longest possible battery life. Smart tries to automatically
    manage the power usage as much as possible. Normal is all about performance—the
    battery won''t last long, but the device will work at full speed.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的新功能之一无疑是高级电源管理。它提供了三种可能的设置：超长续航、智能和普通。超长续航是**极端**的设置——一键操作，你可以关闭除了最基本的传感器之外的所有传感器，旨在实现尽可能长的电池寿命。智能尝试尽可能自动管理电力使用。普通模式则专注于性能——电池寿命不会很长，但设备将以全速运行。
- en: 'The following image shows the Hawei EMUI home screen:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了华为 EMUI 的主屏幕：
- en: '![](img/epub_36702041_93.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_93.jpeg)'
- en: HTC Sense
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: HTC Sense
- en: In 2009, HTC release the first version of its customized UI for smartphones.
    It targeted Android and Windows Mobile with a shared graphical user experience
    to not confuse users.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，HTC 发布了其智能手机定制的第一个 UI 版本。它针对 Android 和 Windows Mobile，提供共享的图形用户界面，以避免用户混淆。
- en: The most popular feature in HTC is the big collection of home widgets, but there
    are other features that are just as interesting, such as a tracking system for
    use if the device is stolen. This system allows the user to make remote operations
    on the device to locate it or wipe the memory, or simply lock it. It's even possible
    to show a custom message on the lock screen, with an address or a reward to reobtain
    the device.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTC 中最受欢迎的功能是一大堆主屏幕小部件，但还有其他同样有趣的功能，例如用于设备被盗时使用的追踪系统。该系统允许用户远程操作设备以定位它或擦除内存，或者简单地锁定它。甚至可以在锁屏上显示自定义消息，包括地址或奖励以重新获得设备。
- en: 'The following screenshot shows the home screen of HTC Sense 7:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 HTC Sense 7 的主屏幕：
- en: '![](img/epub_36702041_94.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_94.jpeg)'
- en: LG Optimus UI
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LG Optimus UI
- en: LG, like others, provides a customized UI—user-picked images for the system
    icons, colors, and a few custom settings. An interesting feature is the **vocal
    command** to take a picture and the ability to pick the best picture from a burst
    of photo photos.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: LG，和其他厂商一样，提供定制的用户界面——用户可以选择系统图标、颜色和一些自定义设置。一个有趣的功能是**语音命令**拍照以及从连拍中选择最佳照片的能力。
- en: 'The following image shows the home screen and the customized notification area:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了主屏幕和自定义通知区域：
- en: '![](img/epub_36702041_95.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_95.jpeg)'
- en: Xiaomi MIUI
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 小米 MIUI
- en: This is definitely the heaviest customized system and it has one specific feature
    that none of the previous ones have—it's open source! Xiaomi began to work on
    MIUI with Android 2.3.7 and Cyanogenmod 7—those two were the core of the system.
    Over the years, they created a custom ROM that is way more than just a customized
    UI, adding more and more features.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是最重量级的定制系统，它有一个之前版本所没有的特定功能——它是开源的！小米从 Android 2.3.7 和 Cyanogenmod 7 开始着手开发
    MIUI——这两个是系统的核心。多年来，他们创建了一个定制的 ROM，它不仅仅是一个定制的用户界面，还添加了越来越多的功能。
- en: In 2011, Xiaomi jumped into the market, switching from system customizer to
    device manufacturer, with high-end, low-cost devices, equipped with its MIUI system.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 2011 年，小米进入市场，从系统定制者转变为设备制造商，推出了高端、低成本的设备，并配备了其 MIUI 系统。
- en: 'The following image shows the MIUI home screen and app store:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 MIUI 主屏幕和应用程序商店：
- en: '![](img/epub_36702041_94.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_94.jpeg)'
- en: Unfortunately, this is a popular trend—an easy method for branding and to assure
    customer loyalty, but it's not always the recommended way to go.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 很不幸，这已经成为一种流行趋势——一种简单的方法用于品牌建设和确保客户忠诚度，但这并不总是推荐的做法。
- en: There are other manufacturers that prefer to ship their devices with a vanilla
    Android—Motorola, for instance. Motorola's branding approach is to add just a
    couple of *by Motorola* apps. These are usually utility apps, aiming to enrich
    the user experience while keeping the system clean.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有些制造商更喜欢在设备上预装纯净的 Android 系统——例如摩托罗拉。摩托罗拉的品牌策略是仅添加几款 *由摩托罗拉提供* 的应用程序。这些通常是实用程序应用程序，旨在丰富用户体验同时保持系统简洁。
- en: Motorola's strategy also has one big pro—a system very close to Google's original
    one means faster updates. Every time Google releases a new Android version, Motorola
    devices receive system updates as well in a few days. This is very unusual for
    most of the other manufacturers, somehow doomed to stay on old Android versions
    due to the huge amount of work necessary to update such a heavily customized system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 摩托罗拉的策略还有一个很大的优点——与谷歌原始系统非常接近的系统意味着更新更快。每次谷歌发布一个新的 Android 版本，摩托罗拉设备在几天内也会收到系统更新。这对大多数其他制造商来说非常不寻常，某种程度上注定要停留在旧的
    Android 版本上，因为更新这样一个高度定制的系统需要大量的工作。
- en: An overview of Android recovery
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 恢复的概述
- en: One of the most important parts of the whole Android architecture is the `Recovery`
    partition. A recovery partition is very common in embedded systems, and we saw
    an overview of it in previous chapters. As we know, the so-called `Recovery` is
    a minimal runtime system, completely decoupled from the main Android system and
    totally self-sufficient. Its main goal is to guarantee system integrity and provide
    the necessary tools to fix common minor issues and restore a properly working
    system.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 Android 架构中最重要的部分之一是 `Recovery` 分区。在嵌入式系统中，`Recovery` 分区非常常见，我们已经在之前的章节中对其进行了概述。正如我们所知，所谓的
    `Recovery` 是一个最小运行时系统，完全与主 Android 系统解耦，并且完全自给自足。其主要目标是保证系统完整性，并提供必要的工具来解决常见的轻微问题，并恢复一个正常工作的系统。
- en: 'With an Android vanilla `Recovery`, we can:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Android 纯净 `Recovery`，我们可以：
- en: Update the Android system
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 Android 系统
- en: Wipe the data partition and the cache partition
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 擦除数据分区和缓存分区
- en: Wiping the data and cache partition is a common practice if we want to restore
    our device to the factory defaults, for instance, in order to have a clean system
    to start experimenting on something specific, or if we just want to sell it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将设备恢复到出厂默认设置，例如为了拥有一个干净的系统来开始实验特定的事情，或者如果我们只是想出售它，擦除数据和缓存分区是一种常见的做法。
- en: Diving into Android recovery
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 深入 Android 恢复
- en: The Android `Recovery` system is completely standalone. This means that whatever
    might happen to the main Android system, `recovery` will be always able to restore
    a working system.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Android `Recovery` 系统是完全独立的。这意味着无论主 Android 系统发生什么，`recovery` 总是能够恢复一个正常工作的系统。
- en: 'To achieve this level of resilience, `recovery` contains its own Linux kernel
    and its own `rootfs`. The following screenshot shows how `recovery` actually lives
    near the Android system, but is completely separate:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到这种级别的弹性，`recovery` 包含了自己的 Linux 内核和自己的 `rootfs`。以下截图显示了 `recovery` 实际上位于
    Android 系统附近，但完全独立：
- en: '![](img/epub_36702041_97.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_97.jpeg)'
- en: The previous screenshot shows how access to the `recovery` is bound to the `BootLoader`.
    The `BootLoader` is unable to decide if the current boot sequence is going to
    end with a running `recovery` or a running Android system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的截图显示了如何通过`BootLoader`访问`recovery`。`BootLoader`无法决定当前的引导序列将以运行`recovery`还是运行Android系统结束。
- en: 'Recovery mode can be accessed with a button combination when the device is
    turned off. For our reference device, Google Nexus 6, you can take the following
    steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭设备时，可以通过按键组合进入恢复模式。以我们的参考设备Google Nexus 6为例，您可以采取以下步骤：
- en: Press and hold *Volume Down*, *Volume Up* and *Power buttons* simultaneously.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时按下*音量下*、*音量上*和*电源按钮*。
- en: Release all buttons when the `Fastboot Mode` menu appears.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`Fastboot Mode`菜单出现时，释放所有按钮。
- en: Use the *Volume* buttons until the upper part of the screen displays the `Recovery
    Mode` text.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*音量*按钮，直到屏幕上方的部分显示`Recovery Mode`文本。
- en: Press *Power* to select `Recovery Mode`—after that you will see an Android icon
    laid on its back.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*电源*键选择`Recovery Mode`——之后您将看到一个倒置的Android图标。
- en: Press and hold the *Power* button, then press the *Volume Up* button once.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*电源按钮*，然后按一次*音量上*按钮。
- en: Once you have landed on the recovery main screen, you can navigate using the
    *Volume* buttons and confirm your choice using the *Power* button.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入恢复主屏幕，您可以使用*音量*按钮进行导航，并使用*电源*按钮确认您的选择。
- en: 'The options you will find in the recovery menu could vary, but an Android vanilla
    `recovery` will definitely provide these options:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您在恢复菜单中找到的选项可能会有所不同，但Android原生的`recovery`肯定会提供以下选项：
- en: '**Reboot system now**: This option will restart the system.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**立即重启系统**：此选项将重启系统。'
- en: '**Apply update from ADB**: Android Debug Bridge can be used from a host computer
    to upload an official Google system update. Only certified updates can be uploaded
    and applied this way due to security measures enforced by the recovery to guarantee
    system integrity.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从ADB应用更新**：Android调试桥接可以从主机计算机上传官方Google系统更新。由于恢复中实施的安全措施以保证系统完整性，只能上传和通过这种方式应用经过认证的更新。'
- en: '**Wipe cache partition**: This option will erase the *cache* partition. This
    partition usually contains the system''s temporary data and app cache data. Deleting
    this file will free quite an amount of disk space, without losing user data or
    apps.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**擦除缓存分区**：此选项将擦除*缓存*分区。此分区通常包含系统的临时数据和应用程序缓存数据。删除此文件将释放相当多的磁盘空间，而不会丢失用户数据或应用。'
- en: '**Wipe data/factory reset**: This option will erase the volatile memory and
    restore the original factory system. Everything that is not strictly system-related
    will be deleted: videos, music, documents, user apps, and so on. The cache partition
    will be erased as well.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**擦除数据/恢复出厂设置**：此选项将擦除易失性内存并恢复原始出厂系统。所有严格与系统无关的内容都将被删除：视频、音乐、文档、用户应用等。缓存分区也将被清除。'
- en: 'The following screenshot show a stock Android `recovery`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了原装Android `recovery`：
- en: '![](img/epub_36702041_98.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_98.jpeg)'
- en: Installing an alternative recovery
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装替代恢复
- en: As with the whole Android system, even the `recovery` source code is available
    for study and modifications and, over the years, the Android community has developed
    alternatives that can be used in place of the Android stock `recovery`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 就像整个Android系统一样，`recovery`源代码也是可供研究和修改的，而且多年来，Android社区已经开发了可以替代Android原装`recovery`的替代方案。
- en: 'All these alternatives aim to improve and add more features to the stock recovery.
    The most common features are:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些替代方案旨在改进和添加更多功能到原装恢复。最常见的特点是：
- en: '**Ability to save and restore system backups**: NANDroid is extremely useful
    for experimenting with custom systems and adventurous configurations'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存和恢复系统备份的能力**：NANDroid对于实验自定义系统和冒险配置极为有用'
- en: '**Ability to install custom ROMs**: Probably the most important among the added
    features, from a custom ROM developer''s point of view'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装自定义ROM的能力**：从自定义ROM开发者的角度来看，这可能是添加功能中最重要的一个'
- en: '**Enhanced UI and UXD**: Some of these custom recoveries provide support for
    the touchscreen, instead of the default *Volume*/*Power* button navigation'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的UI和UXD**：这些自定义恢复中的一些提供了对触摸屏的支持，而不是默认的*音量*/*电源*按钮导航'
- en: 'The most popular `recovery` alternatives are:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的`恢复`替代方案有：
- en: Clockworkmod
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clockworkmod
- en: 4EXT
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4EXT
- en: Amon Ra Recovery
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amon Ra Recovery
- en: Team Win Recovery Project (TWRP)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Team Win Recovery Project (TWRP)
- en: Every one of them is different in some way—look and feel, advanced features,
    and so on, but all of them provide a clear way to allow the advanced user to install
    custom ROMs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 它们中的每一个在某种程度上都是不同的——外观、高级功能等，但它们都为高级用户提供了安装定制ROM的明确方式。
- en: Clockworkmod
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Clockworkmod
- en: This is definitely one of the most popular custom recoveries in the game. It's
    often called `CWM`, and has been developed by Koushik *"Koush"* Dutta. He started
    with the ancient Android 2.1 recovery source code and, since then, he has kept
    on adding features.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这无疑是游戏中最受欢迎的定制恢复之一。它通常被称为`CWM`，由Koushik *"Koush"* Dutta开发。他从古老的Android 2.1恢复源代码开始，从那时起，他一直在不断添加功能。
- en: One of the main features is the NANDroid backup, which allows the user to safely
    save and restore the whole system structure. Another interesting feature is the
    ability to connect to the recovery shell from a computer, via ADB. A critically
    important feature is the ability to update the system using unofficial update
    packages. Unlike the stock recovery, Clockworkmod ignores all signature certificates,
    knowing that only an advanced user would try to flash a custom-made update package.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个主要功能是NANDroid备份，它允许用户安全地保存和恢复整个系统结构。另一个有趣的功能是能够通过ADB从计算机连接到恢复shell。一个至关重要的功能是使用非官方更新包更新系统的能力。与原装恢复不同，Clockworkmod忽略了所有签名证书，因为它知道只有高级用户才会尝试刷写定制的更新包。
- en: Clockworkmod recovery can be easily installed using the specific app distributed
    via Google Play Store, or manually, as we will see.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过Google Play Store分发的特定应用轻松安装Clockworkmod恢复，或者像我们将要看到的那样手动安装。
- en: 'To install it manually on your trusted Nexus device, you can use `fastboot`.
    Follow these steps to install Clockworkmod recovery:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您信任的Nexus设备上手动安装它，您可以使用`fastboot`。按照以下步骤安装Clockworkmod恢复：
- en: 'First thing to do—download it. The Clockworkmod website has a complete list
    of supported devices and specific download files: [https://www.clockworkmod.com/rommanager](https://www.clockworkmod.com/rommanager).'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先要做的事情是下载它。Clockworkmod网站列出了所有支持的设备和特定的下载文件：[https://www.clockworkmod.com/rommanager](https://www.clockworkmod.com/rommanager)。
- en: Once you have the file, decompress it and you will have a `.img` file.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您有了文件，解压它，您将得到一个`.img`文件。
- en: 'Now, put your device in `fastboot` mode, as we saw in previous chapters, fire
    up a terminal, and use the following command to flash the `.img` file to the recovery
    partition:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将您的设备置于`fastboot`模式，正如我们在前面的章节中看到的，打开一个终端，并使用以下命令将`.img`文件刷入恢复分区：
- en: '[PRE0]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the brand new recovery has been installed, you can reboot the device straight
    to recovery mode with the following command:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了全新的恢复，您可以使用以下命令直接重启设备到恢复模式：
- en: '[PRE1]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From this moment on, we can install custom ROMs or perform a total system backup.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，我们可以安装定制ROM或执行完整系统备份。
- en: 'It''s also possible to recompile the Clockworkmod source code from scratch,
    since the project is open source. You can also find a custom recovery source code
    in the custom Cyanogenmod ROM that we have discussed in previous paragraphs. Building
    Cyanogenmod from the source code follows the same steps you already followed to
    build official Android: the build system and the build setup are the same. Applying
    the same know-how as for vanilla Android, you can easily create a Cyanogenmod
    system image and a Clockworkmod custom recovery.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该项目是开源的，您也可以从头开始重新编译Clockworkmod源代码。您还可以在之前段落中讨论过的定制Cyanogenmod ROM中找到自定义恢复源代码。从源代码构建Cyanogenmod遵循您已经遵循的构建官方Android的相同步骤：构建系统和构建设置是相同的。应用与纯Android相同的知识，您可以轻松创建Cyanogenmod系统镜像和Clockworkmod定制恢复。
- en: 'Here''s a screenshot of the Clockworkmod UI:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Clockworkmod用户界面的截图：
- en: '![](img/epub_36702041_99.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/epub_36702041_99.jpeg)'
- en: TWRP – Team Win Recovery Project
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: TWRP – Team Win Recovery Project
- en: One alternative to the famous Clockworkmod recovery is TWRP, which stands for
    Team Win Recovery Project. One of the most important features of this recovery
    mod is support for touchscreens.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Clockworkmod恢复的一个替代方案是TWRP，代表Team Win Recovery Project。这个恢复模式最重要的功能之一是支持触摸屏。
- en: In this way, you can interact with the recovery mod directly using the screen,
    like you normally do using Android, which is very convenient, especially if we
    compare it to the volume keys used in all the other recovery mods. The graphical
    interface is pretty usable, with big buttons that show all the various options
    (they are very similar to the ones in the Clockwork mod). Using TWRP, you can
    install unofficial ROMs and also perform a complete system backup.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，您可以直接通过屏幕与恢复模式进行交互，就像您通常使用Android一样，这非常方便，尤其是如果我们将其与其他所有恢复模式中使用的音量键进行比较。图形界面相当可用，有大按钮显示所有各种选项（它们与Clockwork模式中的按钮非常相似）。使用TWRP，您可以安装非官方的ROM，也可以执行完整的系统备份。
- en: The project was born on 30th July 2011 and is an open source project— also,
    here you can either download a binary for your device or recompile from source
    code.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目始于2011年7月30日，是一个开源项目——在这里，您可以为您的设备下载二进制文件，或者从源代码重新编译。
- en: You can find more information on the official website at [http://teamw.in/](http://teamw.in/).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站上找到更多信息：[http://teamw.in/](http://teamw.in/)。
- en: 'Here are some screenshots of TWRP:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是TWRP的一些截图：
- en: '![](img/epub_36702041_100.jpeg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_100.jpeg)'
- en: Connecting to the recovery shell using ADB
  id: totrans-172
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用ADB连接到恢复shell
- en: Custom recovery can be operated using their standard UI, as we saw, and using
    an ADB connection. This feature is not available in the stock recovery and will
    be very useful during our experiments.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义恢复可以使用它们的标准UI操作，就像我们看到的，以及使用ADB连接。这个功能在标准恢复模式中不可用，在我们的实验中将会非常有用。
- en: 'Once the custom recovery is installed, fire up a terminal and run the following
    command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了自定义恢复模式，启动终端并运行以下命令：
- en: '[PRE2]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'ADB will list all the available devices, as shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ADB将列出所有可用的设备，如下面的截图所示：
- en: '![](img/epub_36702041_101.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_101.jpeg)'
- en: 'Knowing that there is just a single device, we can simply use the following
    command to connect to the recovery shell:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 知道只有一个设备，我们可以简单地使用以下命令来连接到恢复shell：
- en: '[PRE3]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will be prompted with a `#` symbol, which lets you know that you have administrator
    powers as a *root* user. Being a *root* user gives you the opportunity to do advanced
    tasks, such as mount the `system/` in *read/write mode* and add or remove any
    file you want, without starting the whole Android system.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个`#`符号，这表明您作为*root*用户拥有管理员权限。作为*root*用户，您有机会执行高级任务，例如以*读/写模式*挂载`system/`目录，并添加或删除任何您想要的文件，而无需启动整个Android系统。
- en: Device permissions
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设备权限
- en: As we have seen in previous chapters, Android is based on Linux, so it also
    inherits the part that concerns user permissions. As with a standard Linux system,
    Android also manages everything through groups and users. In the default configuration,
    it's not possible to obtain administrator (root) access, in order to prevent tampering
    with the system. Also, with access to the whole operating system, it's easy to
    corrupt the system itself, accidentally or deliberately (for example, to steal
    user data using a virus).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中看到的，Android基于Linux，因此它也继承了与用户权限相关的部分。与标准的Linux系统一样，Android也通过组和用户来管理一切。在默认配置中，无法获得管理员（root）访问权限，以防止对系统进行篡改。此外，拥有对整个操作系统的访问权限，很容易意外或故意地损坏系统本身（例如，使用病毒窃取用户数据）。
- en: Every Android app, when installed on the system, generates a new user and group,
    and inter-app communications are performed according to Android SDK constraints
    and protocols. Sometimes, though, it's useful to have complete control over the
    device, like, for example, when installing apps that manage CPU frequency and
    the CPU governor.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Android应用在系统上安装时，都会生成一个新的用户和组，并且应用间的通信根据Android SDK的约束和协议进行。然而，有时拥有对设备的完全控制权是有用的，例如，当安装管理CPU频率和CPU管理器的应用时。
- en: Now let's see how to obtain root access and what the implications of rooting
    the device are.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何获得root访问权限以及root设备的影响。
- en: Root access
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Root访问
- en: Root access enables the users of smartphones, tablets, and other devices with
    Android OS installed to obtain privileged access, also called root access, to
    the whole Android operating system. As we have already mentioned, Android uses
    a Linux kernel, so obtaining root access is very similar to obtaining administrator
    (superuser) access to a regular Linux or Unix-like OS, such as FreeBSD or Mac
    OS X.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Root访问权限允许安装了Android OS的智能手机、平板电脑和其他设备的用户获得对整个Android操作系统的特权访问，也称为root访问权限。正如我们之前提到的，Android使用Linux内核，因此获得root访问权限与获得常规Linux或类Unix操作系统（如FreeBSD或Mac
    OS X）的管理员（超级用户）访问非常相似。
- en: Often, the reason for obtaining root access is to overcome the limits imposed
    on the device by the hardware producers. As a root user, you have the ability
    to modify or replace system apps and change the settings. Also, you can use the
    apps that require root permissions themselves, enabling you to execute operations
    that would otherwise be inaccessible to normal Android users. Rooting the device,
    that is, obtaining root access, can also help if you want to totally remove the
    device OS and replace it with another, maybe more recent, one.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，获得root访问权限的原因是为了克服硬件制造商对设备施加的限制。作为root用户，你有能力修改或替换系统应用并更改设置。此外，你可以使用需要root权限的应用程序，这使你能够执行普通Android用户无法访问的操作。对设备进行root操作，即获得root访问权限，如果你想要完全删除设备操作系统并替换为另一个，可能更近期的版本，这也有帮助。
- en: In the following paragraphs, we will see how to obtain root access, which is
    the key precondition for installing the custom ROM.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将看到如何获得root访问权限，这是安装自定义ROM的关键前提条件。
- en: SuperSu
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: SuperSu
- en: 'To use root permissions in Android apps, an independent developer known as
    Chainfir Jorrit Jongma has developed a library that enables you to use them from
    your app and therefore execute root-level operations. Everything is open source
    and you can explore the documentation regarding the API at the official website
    of the developer: [https://su.chainfire.eu](https://su.chainfire.eu).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Android应用程序中使用root权限，一位名叫Chainfir Jorrit Jongma的独立开发者开发了一个库，它允许你在应用程序中使用这些权限，因此可以执行root级别的操作。所有这些都是开源的，你可以在开发者的官方网站上探索有关API的文档：[https://su.chainfire.eu](https://su.chainfire.eu)。
- en: 'If you would like to check out the library source code, you can find it (and
    contribute) here: [https://github.com/Chainfire/libsuperuser](https://github.com/Chainfire/libsuperuser).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看库源代码，你可以在以下位置找到它（并贡献）：[https://github.com/Chainfire/libsuperuser](https://github.com/Chainfire/libsuperuser)。
- en: Obtaining root access
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获得root访问权限
- en: Now it's time to see how to obtain root permissions on our device in practice.
    Unfortunately, it's not that simple, and there are various ways to obtain root
    permissions on a device. Every device has its quirks, and hence a different procedure
    to execute in order to obtain root permissions. Generally, we can say that if
    there's a possibility of installing a recovery mod, then there's also a possibility
    of installing everything necessary to become root. We just need to copy the right
    files to the system partition that is mounted as read-only by default, so we can
    access it either by making an ad hoc system partition using the source files,
    or—in cases when we don't have the Android source code—by mounting the partition
    in read/write mode through one of the custom recovery mods we described previously.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看看如何在我们的设备上实际获得root权限了。不幸的是，这并不简单，获得设备root权限的方法有很多种。每种设备都有其独特之处，因此需要执行不同的步骤来获得root权限。一般来说，我们可以这样说，如果有可能安装恢复模式，那么也有可能安装成为root所需的所有必要软件。我们只需要将正确的文件复制到默认情况下以只读方式挂载的系统分区，这样我们就可以通过创建一个临时的系统分区使用源文件来访问它，或者——在我们没有Android源代码的情况下——通过使用我们之前描述的某个自定义恢复模式将分区挂载为读写模式。
- en: Up till now, we haven't talked about the legal issues regarding modifying the
    software present on the device. In general, it is not illegal to install custom
    ROMs onto our devices, except that there's the possibility of invalidating the
    device warranty. As far as the Nexus devices are concerned, there's no problem
    whatsoever; they are being sold for the purposes of software development, so the
    product warranty isn't tied to the software but to the hardware instead.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有讨论过修改设备上现有软件的法律问题。一般来说，将自定义ROM安装到我们的设备上并不违法，但可能会使设备保修失效。至于Nexus设备，没有任何问题；它们是为了软件开发目的而销售的，因此产品保修不是与软件相关，而是与硬件相关。
- en: Chef toolkit
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chef工具包
- en: One of the main goals of this book is to help you realize your own version of
    a ROM customization. In the dictionary of modders, the act of modifying a version
    of Android in order to produce one's own ROM customization is often referred to
    with the verb *to cook* and the word *kitchen*.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的主要目标之一是帮助您实现自己版本的ROM定制。在修改者的词典中，为了制作自己的ROM定制而修改Android版本的行为通常用动词“*to cook*”和名词“*kitchen*”来描述。
- en: '"Cooking one''s own ROM" means to modify the stock version of Android installed
    on one''s device, with the aim of creating a new one.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: “制作自己的ROM”意味着修改设备上安装的原始Android版本，目的是创建一个新的版本。
- en: For this reason, all the tools that might help to make the development of a
    ROM customization easier are called **Chef toolkit**.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有可能帮助简化ROM定制开发的工具都被称为“**Chef toolkit**”。
- en: As discussed in the previous chapters, it is indeed possible to create one's
    own ROM version starting from the source code, but this is not always possible,
    as some device manufacturers do not release their source code. In all those cases,
    we need to act on the system partitions, often directly on the binaries that build
    the internal core, both on the application framework and on the filesystem utilities.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，从源代码创建自己的ROM版本确实是可能的，但并非总是如此，因为一些设备制造商没有发布他们的源代码。在所有这些情况下，我们需要在系统分区上操作，通常直接在构建内部核心的二进制文件上操作，包括应用程序框架和文件系统实用工具。
- en: In the next paragraphs, we will learn how to cook a ROM starting from binary
    images, beginning from the environment and analyzing the development tools that
    will help us carry out our first ROM customization.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将学习如何从二进制镜像开始制作ROM，从环境分析开始，了解将帮助我们完成第一个ROM定制的开发工具。
- en: Preparing the environment
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 准备环境
- en: Before we can start developing the ROM, we most certainly need to prepare an
    adequate environment on our computer. Android can be used with basically all the
    most recent operating systems, from Windows, to Linux, to OS X.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发ROM之前，我们肯定需要在电脑上准备一个合适的环境。Android基本上可以与所有最新的操作系统一起使用，从Windows到Linux，再到OS
    X。
- en: We always refer to Ubuntu, as we did in the previous chapters when we dealt
    with compiling Android from the source code. Therefore, all you need to start
    is a computer with a recent version of Ubuntu installed on it. Besides that, we
    suggest to also install a good text editor for developers—it could either be VIM
    from the command line, or graphic editors such as ATOM, SublimeText, and so on.
    We will mostly work from the console, using different scripts and tools in order
    to finalize our first custom ROM.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们总是提到Ubuntu，就像我们在前几章中处理从源代码编译Android时做的那样。因此，您只需要一台装有最新版Ubuntu的电脑即可开始。除此之外，我们还建议安装一个好的开发者文本编辑器——它可以是命令行的VIM，或者图形编辑器，如ATOM、SublimeText等。我们将主要在控制台工作，使用不同的脚本和工具来完成我们的第一个定制ROM。
- en: Android kitchen
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Android kitchen
- en: One of the *chef's* most important tools is undoubtedly the `Kitchen`. Although
    we are stealing our analogies from the world of cooking, we are actually focusing
    on the preparation of our first Android customization—the first step is obtaining
    the system binary images.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 烹饪大师最重要的工具无疑是“`Kitchen`”。虽然我们借鉴了烹饪世界的类比，但实际上我们关注的是我们第一个Android定制的准备工作——第一步是获取系统二进制镜像。
- en: We refer to as the `Android Kitchen` the set of tools that are usually used,
    such as the scripts to be used in a shell, and which help the developer perform
    automated tasks, such as decompressing and editing the system images that build
    a ROM, decompiling APK packets, sometimes adding the root privileges to the ROM,
    and so on.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通常使用的工具集称为“`Android Kitchen`”，例如在shell中使用的脚本，这些工具帮助开发者执行自动化任务，如解压缩和编辑构建ROM的系统镜像，反编译APK包，有时向ROM添加root权限等。
- en: Of course, many different kitchens exist online, each one with its own peculiarities.
    We will study some of them and we will try to perform simple actions in order
    to get our first custom ROM ready to be flashed onto our device.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，网上存在许多不同的厨房，每个都有其独特的特点。我们将研究其中的一些，并尝试执行简单的操作，以便将我们的第一个定制ROM准备好，以便将其刷入我们的设备。
- en: One of the most popular `Android Kitchens` is **dsixda**. The project is formally
    "retired," but it has been forked by lots of users and the development is still
    ongoing. It's open source and you can download it or fork it and contribute to
    the project starting from [https://github.com/dsixda/Android-Kitchen](https://github.com/dsixda/Android-Kitchen).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的`Android厨房`之一是**dsixda**。该项目正式“退役”，但它已被许多用户分叉，并且开发仍在继续。它是开源的，你可以从[https://github.com/dsixda/Android-Kitchen](https://github.com/dsixda/Android-Kitchen)下载它或分叉它并为项目做出贡献。
- en: 'The dsixda `kitchen` is based on a suite of `Bash` scripts and tools to provide
    an easy method to perform the most common *cooking* operations:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: dsixda的`厨房`基于一系列`Bash`脚本和工具，提供了一种简单的方法来执行最常见的*烹饪*操作：
- en: Add Busybox
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Busybox
- en: Add root permissions
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加root权限
- en: Customize the boot screen
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义启动屏幕
- en: 'These are just few of the possible operations available in its console menu.
    This kitchen is compatible with Windows, Linux, and OS X. We are going to use
    it with our trusted Ubuntu. Once you have downloaded the kitchen ([https://github.com/dsixda/Android-Kitchen/archive/0.224.zip](https://github.com/dsixda/Android-Kitchen/archive/0.224.zip)),
    uncompress it into a folder, enter the folder, and run the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是其控制台菜单中可用的可能操作中的一些。这个厨房与Windows、Linux和OS X兼容。我们将使用我们信任的Ubuntu。一旦你下载了厨房([https://github.com/dsixda/Android-Kitchen/archive/0.224.zip](https://github.com/dsixda/Android-Kitchen/archive/0.224.zip))，将其解压缩到一个文件夹中，进入该文件夹，并运行以下命令：
- en: '[PRE4]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will fire up the main menu, as shown in the following screenshot:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将启动主菜单，如下面的截图所示：
- en: '![](img/epub_36702041_102.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_102.jpeg)'
- en: The dsixda kitchen manipulates two specific partitions—system and boot-respectively
    compressed in `system.img` and `boot.img` files. In the following sections, we
    will dig into extracting these partitions and customizing them.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: dsixda厨房操作两个特定的分区——系统和boot，分别压缩在`system.img`和`boot.img`文件中。在以下章节中，我们将深入了解提取这些分区并对其进行自定义。
- en: Other developers' tools
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他开发者的工具
- en: Many other different tools could come in handy for the developer, of course
    strictly depending on one's specific needs. A **hexadecimal editor** would certainly
    be very useful for the analysis of binary images, while simple graphics editing
    software would help when it comes to modifying icons or other graphical aspects
    of the ROM, as well as for preparing the whole environment for compiling the Linux
    kernel, and possibly Android applications to add to the ROM.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于开发者来说，许多其他不同的工具可能会很有用，这完全取决于个人的具体需求。一个**十六进制编辑器**对于二进制图像的分析肯定非常有用，而简单的图形编辑软件在修改图标或其他图形方面以及为编译Linux内核和可能添加到ROM的Android应用程序准备整个环境时也会有所帮助。
- en: We usually prepare the environment as if we had to compile Android from the
    source together with the Linux kernel, so that we definitely have all the necessary
    tools to build our custom ROM.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常准备环境，就像我们需要从源代码编译Android和Linux内核一样，这样我们肯定有所有必要的工具来构建我们的自定义ROM。
- en: Manipulating DEX files with APKTool
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用APKTool操作DEX文件
- en: Working with an Android system, it's quite common to need to manipulate DEX
    files. DEX stands for **Dalvik Executable** and these files are used by Android
    Virtual Machine. To easily manipulate these files, you can use APKTool by Ryszard
    Wiśniewski and Connor Tumbleson. The tools are open source and you can download
    them at [http://ibotpeaches.github.io/Apktool/](http://ibotpeaches.github.io/Apktool/).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在与Android系统一起工作时，需要操作DEX文件是很常见的。DEX代表**Dalvik可执行文件**，这些文件由Android虚拟机使用。为了轻松操作这些文件，你可以使用Ryszard
    Wiśniewski和Connor Tumbleson的APKTool。这些工具是开源的，你可以在[http://ibotpeaches.github.io/Apktool/](http://ibotpeaches.github.io/Apktool/)下载它们。
- en: 'APKTool is written in Java, so you need a JVM to use it. Once you have the
    APKTool `jar` file in place, fire up a terminal and run the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: APKTool是用Java编写的，因此你需要一个JVM来使用它。一旦你有了APKTool的`jar`文件，打开一个终端并运行以下命令：
- en: '[PRE5]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Replace the version with yours, if necessary. The following screenshot shows
    the initial help menu of the tool:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，将版本替换为你的版本。以下截图显示了工具的初始帮助菜单：
- en: '![](img/epub_36702041_103.jpeg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_103.jpeg)'
- en: 'APKTool is based on two other tools—`smali` and `baksmali`, to assemble and
    disassemble the files. It requires an initial setup to work properly: `framework-res.apk`
    position. You must specify where APKTool must look to obtain this file. `framework-res.apk`
    is part of the Android system and can be extracted from a running Android device,
    using our trusted ADB:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: APKTool基于另外两个工具——`smali`和`baksmali`，用于文件的汇编和反汇编。它需要一个初始设置来正常工作：`framework-res.apk`位置。你必须指定APKTool必须查找以获取此文件的位置。`framework-res.apk`是Android系统的一部分，可以从正在运行的Android设备中提取，使用我们信任的ADB：
- en: '[PRE6]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous command will copy the APK from the Android device into the current
    folder. Once we have the file in place, we can tell APKTool where to find it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将APK从Android设备复制到当前文件夹。一旦我们有了文件，我们就可以告诉APKTool在哪里找到它：
- en: '[PRE7]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now that everything is configured, we can try to decompile and customize an
    APK, using the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切配置就绪，我们可以尝试使用以下命令反编译和定制一个APK：
- en: '[PRE8]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The APK content will be placed in the destination folder we specified and we
    can edit any file we want. After all our modifications, we can *recompress* the
    folder into an APK file with the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: APK内容将被放置在我们指定的目标文件夹中，我们可以编辑我们想要的任何文件。在我们所有的修改完成后，我们可以使用以下命令将文件夹*重新压缩*成一个APK文件：
- en: '[PRE9]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the new APK is ready, we can copy it to the device with a file transfer
    app or using `ADB push`, as we saw in the previous chapters.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新的APK准备好，我们可以使用文件传输应用或使用我们在前几章中看到的`ADB push`将其复制到设备上。
- en: Cooking our first ROM
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 烹饪我们的第一个ROM
- en: So far, we have seen an overview of the suite of tools we need to create a custom
    ROM from a binary system image. The most important of all is the `kitchen`, and
    it needs `system.img` and `boot.img` partition files to properly do its job.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了从二进制系统镜像创建自定义ROM所需工具套件的概述。其中最重要的是“厨房”，它需要`system.img`和`boot.img`分区文件来正确地完成其工作。
- en: If you are targeting Google devices, this is an easy game. Google provides system
    source code for its devices, so we can always build our `.img` files from the
    source, as we learned in previous chapters. We can also grab the `.img` files
    from the official system installation packages that Google also provides for its
    devices at every new release of the Android system.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你针对的是谷歌设备，这是一个简单的游戏。谷歌为其设备提供系统源代码，因此我们可以始终从源代码构建`.img`文件，就像我们在前几章中学到的那样。我们还可以从谷歌为Android系统每个新版本提供的官方系统安装包中获取`.img`文件。
- en: If you are targeting a device that's not a Nexus, things become more adventurous.
    Most of the time you don't have the system source code; often you don't even have
    the downloadable system images. As you will see in the next sections, there is
    always a way to obtain every last piece of the puzzle to create our custom ROM.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你针对的不是Nexus设备，事情就会变得更加冒险。大多数情况下，你不会有系统源代码；通常甚至没有可下载的系统镜像。正如你将在下一节中看到的那样，总有办法获取拼图中最后一块，以创建我们的自定义ROM。
- en: Gathering the ingredients
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 收集原料
- en: 'The list is quite short. All you need is:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 列表相当简短。你所需要的只是：
- en: Kernel source code, if you want to customize the system at core level
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核源代码，如果你想在核心级别定制系统
- en: '`system.img`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system.img`'
- en: '`boot.img`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boot.img`'
- en: The two `.img` files may be provided by the manufacturer, like Google does,
    or can be manually dumped from a running device system memory. The first scenario
    is the *lucky* one; the second one is more advanced and requires a bit of creativity.
    This is the scenario we are going to explore in greater depth, because, if you
    are lucky enough to have the manufactured system restore file, you simply need
    to decompress it into a folder and you will get the `.img` files you are looking
    for.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个`.img`文件可能由制造商提供，就像谷歌那样，或者可以从运行中的设备系统内存中手动转储。第一种情况是*幸运的*；第二种情况更高级，需要一点创造力。这是我们将要深入探讨的情况，因为，如果你足够幸运，有制造商的系统恢复文件，你只需要将其解压缩到一个文件夹中，你就可以得到你想要的`.img`文件。
- en: Dumping system partitions
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 转储系统分区
- en: To create a dump of the system memory, you will need to access the system with
    root privileges. As we already know, there are a few ways to gain root privileges—device-specific
    rooting, installing a custom recovery, and so on. Pick the technique you prefer.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建系统内存的转储，你需要以root权限访问系统。正如我们已经知道的，有几种方法可以获得root权限——设备特定的rooting、安装自定义恢复等。选择你喜欢的技术。
- en: 'Once you have root privileges, fire up a terminal and connect to your device
    shell with the following command:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了root权限，打开一个终端，使用以下命令连接到你的设备shell：
- en: '[PRE10]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The system will welcome us with a `#` symbol. We can now proceed with dumping
    the partitions. To get an overview of the partitions structure, you can use the
    following command:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将以 `#` 符号欢迎我们。我们现在可以继续分区转储。要获取分区结构的概览，你可以使用以下命令：
- en: '[PRE11]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output for a standard Google Nexus 6 device:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了标准Google Nexus 6设备的输出：
- en: '![](img/epub_36702041_104.jpeg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_104.jpeg)'
- en: The number of partitions is almost overwhelming, but we need to focus just on
    the system partition and the boot partition. We know that the partitions we are
    interested in are there, among all those listed partitions. Now, we have to figure
    out which of those partitions is actually `system/` and which is `boot/`.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 分区的数量几乎令人难以置信，但我们只需要关注系统分区和引导分区。我们知道我们感兴趣的分区就在所有列出的分区中。现在，我们必须找出这些分区中哪个实际上是
    `system/`，哪个是 `boot/`。
- en: 'The relationship between a physical partition and its role in the Android architecture
    is shown with the following command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令显示物理分区与其在Android架构中角色的关系：
- en: '[PRE12]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The previous command will show something like this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令将显示类似以下内容：
- en: '[PRE13]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, it shows every relevant partition and its role. We can easily
    figure out that the physical `mccblk0p41` will become our `system.img` and `mmcblk0p37`
    will become our `boot.img` file.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它显示了每个相关的分区及其角色。我们可以很容易地确定物理 `mccblk0p41` 将成为我们的 `system.img`，而 `mmcblk0p37`
    将成为我们的 `boot.img` 文件。
- en: 'We will take advantage of the `/sdcard` partition to store the dumps, and we
    will create the dumps using the utility `dd`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用 `/sdcard` 分区来存储转储，并使用 `dd` 工具创建转储：
- en: '[PRE14]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With the previous command, you are copying the whole system partition into
    a single file on the SD card. This process can take a while—be patient. Once you
    have the `system.img` file, you can move on to creating the `boot.img` file, with
    the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前的命令，你正在将整个系统分区复制到SD卡上的一个单独的文件中。这个过程可能需要一些时间——请耐心等待。一旦你有了 `system.img` 文件，你就可以继续创建
    `boot.img` 文件，使用以下命令：
- en: '[PRE15]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You now have the two most important files to create a custom ROM. Let's start
    customizing them.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有了创建自定义ROM的两个最重要的文件。让我们开始定制它们。
- en: Modifying an Android system binary image
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改Android系统二进制镜像
- en: 'Follow these steps to modify an Android system binary image:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤修改Android系统二进制镜像：
- en: 'Let''s start with `system.img`. First of all, you need to bring it on to your
    host computer:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从 `system.img` 开始。首先，你需要将它复制到你的主机计算机上：
- en: '[PRE16]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, you need to create a mount point to mount the image into it:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要创建一个挂载点来挂载镜像到其中：
- en: '[PRE17]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now you can mount it as a common image file:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以将其挂载为一个常见的镜像文件：
- en: '[PRE18]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-273
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: On old devices, the filesystem used for `system.img` was `yaffs`. Over the years,
    the Android system migrated to an `ext4` filesystem, also very common on lots
    of Linux systems. Chances are that you are working with an `ext4` filesystem right
    now.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧设备上，`system.img` 使用的文件系统是 `yaffs`。多年来，Android系统迁移到了 `ext4` 文件系统，这在许多Linux系统中也非常常见。你很可能会现在使用
    `ext4` 文件系统。
- en: 'Entering the mount point with `cd` and listing the files with `ls`, you will
    see a folder structure similar to the one in the next image:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `cd` 进入挂载点，并用 `ls` 列出文件，你将看到一个类似于下一张图片中的文件夹结构：
- en: '![](img/epub_36702041_105.jpeg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/epub_36702041_105.jpeg)'
- en: You can now navigate the folders tree and study the structure, removing or adding
    the file you want. One interesting file to study is `build.prop`. This file contains
    juicy information about the system and its configuration. It's a very hardware-specific
    file, due to the infinite possibilities for customizing an Android system, but
    most of the variants share common details, such as memory heap size, display density,
    device code name, manufacturer name, Android framework SDK version, Android system
    version, and so on. There is even information about the system build time and
    the default ringtone for notifications and calls. There are plenty of little customizations
    with which you can play and experiment. For heavier modifications, keep reading
    and get ready for what's coming in the next chapter.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以导航文件夹树并研究结构，移除或添加你想要的文件。一个值得研究的有意思的文件是 `build.prop`。这个文件包含有关系统和其配置的详细信息。它是一个非常硬件特定的文件，由于定制Android系统的无限可能性，但大多数变体都共享一些共同细节，例如内存堆大小、显示密度、设备代码名称、制造商名称、Android框架SDK版本、Android系统版本等等。甚至还有关于系统构建时间和通知及电话的默认铃声的信息。有许多小定制可以让你玩耍和实验。对于更重的修改，请继续阅读并准备好下一章即将到来的内容。
- en: Modifying an Android binary boot image
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改Android二进制引导镜像
- en: 'As you already learned from the previous chapters, the boot image is a bit
    different from a system image. First of all, it doesn''t contain a filesystem
    we can mount on our host system: the boot image has to be *decompressed*.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的章节中学到的，引导镜像与系统镜像略有不同。首先，它不包含我们可以在主机系统上挂载的文件系统：引导镜像必须被*解压缩*。
- en: 'To decompress the boot image, you are going to use the specific menu item in
    the `Android Kitchen` from the previous pages. The boot image is a key component
    of a custom ROM: that''s where the kernel is and where the `init` scripts are.
    It''s the perfect spot to place a system customization that must be applied before
    the Android system starts, such as the CPU governor setup.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要解压缩引导镜像，您将使用上一页中`Android Kitchen`的特定菜单项。引导镜像是自定义ROM的关键组件：那里是内核所在，也是`init`脚本所在。这是放置必须在Android系统启动前应用的系统定制化的完美位置，例如CPU管理器的设置。
- en: 'To start working with the boot image, just copy the file into the `Kitchen`
    folder, fire up the menu, and start picking the options you want from the menu:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始与引导镜像工作，只需将文件复制到`Kitchen`文件夹中，打开菜单，并从菜单中选择您想要的选项：
- en: Changing the ROM name can be the perfect first step
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改ROM名称可以是完美的第一步
- en: Add root permissions
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加root权限
- en: '`zipalign` the APK files for faster reading and loading'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对APK文件进行`zipalign`以加快读取和加载速度
- en: '`deodexk` the APK file for easy file manipulation, paying the price of slower
    loading'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`deodexk`对APK文件进行解密，以便于文件操作，但代价是加载速度较慢
- en: Once you are satisfied with the modifications, use the `kitchen` to generate
    an update file. This is a `.zip` file that can be flashed to the device using
    the custom recovery and represents your first custom ROM—congratulations!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对修改满意，使用`kitchen`生成更新文件。这是一个`.zip`文件，可以通过自定义恢复刷写到设备上，代表您的第一个自定义ROM——恭喜！
- en: Flashing our custom ROM
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刷写我们的自定义ROM
- en: You have your `.zip` file and your customized system partition, and you are
    thrilled to have flashed them to your device.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经有了`.zip`文件和您定制的系统分区，并且您非常兴奋地将它们刷写到您的设备上。
- en: 'To flash the system partition, we can use `fastboot`. First, you must unmount
    the partition itself using the following command:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要刷写系统分区，我们可以使用`fastboot`。首先，您必须使用以下命令卸载分区本身：
- en: '[PRE19]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Before we start experimenting with the system partition, it''s always wise
    to do a system backup:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对系统分区进行实验之前，总是明智的做法是进行系统备份：
- en: '*"Be prepared. You never know."*'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '*"做好准备。你永远不知道。"*'
- en: 'Now, you can put the device in Fastboot mode, according to the specific sequence
    of your device. For our reference device, Google Nexus 6, the sequence is:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将设备置于Fastboot模式，根据您设备的特定序列。以我们的参考设备Google Nexus 6为例，序列如下：
- en: Power off
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关机
- en: Press *Volume Up*, *Volume Down*, and *Power* at the same time
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时按下*音量增加*、*音量减少*和*电源*按钮
- en: Release when the `Fastboot` menu appears
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现`Fastboot`菜单时释放
- en: 'The device is now ready to receive the new system partition. Flash it with
    the following command:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 设备现在已准备好接收新的系统分区。使用以下命令进行刷写：
- en: '[PRE20]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Your brand new system partition is in place! If your modifications were very
    extreme and adventurous, you could end up in a *bootloop*—the system keeps on
    rebooting and never ends the boot sequence. Stock system images distributed by
    manufacturers, or your own backups, come in very handy in this unfortunate scenario.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 您全新的系统分区已就位！如果您的修改非常极端且具有冒险性，您可能会遇到*引导循环*——系统持续重启且永远不会结束引导序列。制造商分发的库存系统镜像或您自己的备份在这种情况下非常有用。
- en: Note
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you are working with a Samsung device and you have a Windows system, you
    can check out `Samsung Odin`, a GUI tool to flash your ROMs and root your devices.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用三星设备并且您拥有Windows系统，您可以查看`Samsung Odin`，这是一个用于刷写ROM和获取设备root权限的图形界面工具。
- en: The final step is to flash the `.zip` file you generated with the `kitchen`.
    The file is generated according to a specific file structure and it's ready to
    be passed to your custom `recovery`. The `recovery` will treat it as a "system
    update" even if it's a completely brand new, customized system.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是刷写您使用`kitchen`生成的`.zip`文件。该文件根据特定的文件结构生成，并准备好传递到您的自定义`recovery`。`recovery`将其视为“系统更新”，即使它是一个全新的、定制的系统。
- en: 'First of all, reboot your system in recovery mode. You can do it with a button
    sequence or using ADB, with the following command:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，以恢复模式重启您的系统。您可以通过按键序列或使用ADB，使用以下命令来完成：
- en: '[PRE21]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the device is in recovery mode, navigate with the volume buttons and select
    **Apply update from ADB**. This will put the device in waiting mode. Go back to
    your terminal and navigate to the `.zip` file generated with the `kitchen`. Finally,
    load the file to the device:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设备进入恢复模式，使用音量按钮进行导航，并选择**从ADB应用更新**。这将使设备进入等待模式。返回您的终端，并导航到使用`kitchen`生成的`.zip`文件。最后，将文件加载到设备上：
- en: '[PRE22]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Congratulations! Your first custom ROM is *live* on your device. Now, go back
    to customize it even more!
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您的第一个定制ROM已经在您的设备上*激活*了。现在，返回去进一步定制它吧！
- en: Summary
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter taught us what a custom ROM is. We started from a description of
    the currently existing, most relevant projects, and we have proceeded deep into
    the details. We have also had a look at some very important components, such as
    *Android Recovery*, both the stock ones and those that have been modified. Finally,
    as we did in the previous chapters, we have adopted a practical approach, learning
    how to prepare a suitable environment for Android customization. We have also
    studied the different tools that are generally used to perform this task, and,
    in the end, we have applied the concepts we just learned through a simple example
    of creating a custom ROM. In the next chapter, we will be diving deeper into every
    single aspect of a ROM, using practical examples to show how to customize and
    increase the performance of your ROM.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们介绍了什么是定制ROM。我们从对目前存在的、最相关的项目的描述开始，并深入探讨了细节。我们还审视了一些非常重要的组件，例如*Android Recovery*，包括原生的和经过修改的。最后，就像我们在前面的章节中所做的那样，我们采取了一种实用方法，学习如何为Android定制准备合适的环境。我们还研究了通常用于执行此任务的不同工具，最后，我们通过创建一个定制ROM的简单示例来应用我们刚刚学到的概念。在下一章中，我们将更深入地探讨ROM的每一个方面，使用实际示例来展示如何定制和提升ROM的性能。
