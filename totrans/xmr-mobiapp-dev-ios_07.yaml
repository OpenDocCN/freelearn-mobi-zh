- en: Chapter 7. Gestures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are ongoing arguments in the courts of America at the time of writing
    over who invented the likes of dragging images, it is without a doubt that a key
    feature of iOS is the ability to use **gestures**. To put it simply, when you
    tap the screen to start an app or select a part of an image to enlarge it or anything
    like that, you are using gestures.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a gesture?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding gestures to the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling gestures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling drag-and-drop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gestures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A gesture (in terms of iOS) is any touch interaction between the UI and the
    device. With iOS 6, there are six gestures the user has the ability to use. These
    gestures, along with brief explanations, have been listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Name and type | Gesture |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `UIPanGestureRecognizer` | `PanGesture`;Continuous type | Pan images or over-sized
    views by dragging across the screen |'
  prefs: []
  type: TYPE_TB
- en: '| `UISwipeGestureRecognizer` | `SwipeGesture`;Continuous type | Similar to
    panning, except it is a swipe |'
  prefs: []
  type: TYPE_TB
- en: '| `UITapGestureRecognizer` | `TapGesture`;Discrete type | Tap the screen a
    number of times (configurable) |'
  prefs: []
  type: TYPE_TB
- en: '| `UILongPressGestureRecognizer` | `LongPressGesture`;Discrete type | Hold
    the finger down on the screen |'
  prefs: []
  type: TYPE_TB
- en: '| `UIPinchGestureRecognizer` | `PinchGesture`;Continuous type | Zoom by pinching
    an area and moving your fingers in or out |'
  prefs: []
  type: TYPE_TB
- en: '| `UIRotationGestureRecognizer` | `RotationGesture`;Continuous type | Rotate
    by moving your fingers in opposite directions |'
  prefs: []
  type: TYPE_TB
- en: 'Gestures can be added by programming or via Xcode. The available gestures are
    listed in the following screenshot with the rest of the widgets on the right-hand
    side of the designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gestures](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a gesture, drag the gesture you want to use under the view on the View
    bar (shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gestures](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Design the UI as you want and while pressing the *Ctrl* key, drag the gesture
    to what you want to recognize using the gesture. In my example, the object you
    want to recognize is anywhere on the screen. Once you have connected the gesture
    to what you want to recognize, you will see the configurable options of the gesture.
  prefs: []
  type: TYPE_NORMAL
- en: The **Taps** field is the number of taps required before the Recognizer is triggered,
    and the **Touches** field is the number of points onscreen required to be touched
    for the Recognizer to be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: When you come to connect up the UI, the gesture must also be added.
  prefs: []
  type: TYPE_NORMAL
- en: Gesture code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using Xcode, it is simple to code gestures. The class defined in the Xcode
    design for the tapping gesture is called `tapGesture` and is used in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is nothing really amazing to the code; it just displays how many times
    the screen has been tapped.
  prefs: []
  type: TYPE_NORMAL
- en: The `Selector` method is called by the code when the tap has been seen. The
    method name doesn't make any difference as long as the `Selector` and `Export`
    names are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the gesture types were originally described, they were given a type. The
    type reflects the number of messages sent to the `Selector` method. A discrete
    one generates a single message. A continuous one generates multiple messages,
    which requires the `Selector` method to be more complex. The complexity is added
    by the `Selector` method having to check the **State** of the gesture to decide
    on what to do with what message and whether it has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a gesture in code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is not a requirement that Xcode be used to add a gesture. To perform the
    same task in the following code as my preceding code did in Xcode is easy. The
    code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the code from `AddTarget` can then be used.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code, a Pinch Recognizer, shows a simple rescaling. There are
    a couple of other states that I'll explain after the code. The only difference
    in the designer code is that I have `UIImageView` instead of a label and a `UIPinchGestureRecognizer`
    class instead of a `UITapGestureRecognizer` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Other UIGestureRecognizerState values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following table gives a list of other Recognizer states:'
  prefs: []
  type: TYPE_NORMAL
- en: '| State | Description | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Possible | Default state; gesture hasn''t been recognized | Used by all gestures
    |'
  prefs: []
  type: TYPE_TB
- en: '| Failed | Gesture failed | No messages sent for this state |'
  prefs: []
  type: TYPE_TB
- en: '| Translation | Direction of pan | Used in the pan gesture |'
  prefs: []
  type: TYPE_TB
- en: '| Velocity | Speed of pan | Used in the pan gesture |'
  prefs: []
  type: TYPE_TB
- en: In addition to these, it should be noted that discrete types only use Possible
    and Recognized states.
  prefs: []
  type: TYPE_NORMAL
- en: Handling drag-and-drop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Drag-and-drop can be handled using a gesture or by using the `TouchesBegan`,
    `TouchesMoved`, and `TouchesEnded` handlers. Essentially, a custom `UIImageView`
    class can be used, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is used as a simple way to handle drag-and-drop. For a gesture, a Continuous
    type should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gestures certainly can add a lot to your apps. They can enable the user to speed
    around an image, move about a map, enlarge and reduce, as well as select areas
    of anything on a view. Their flexibility underpins why iOS is recognized as being
    an extremely versatile device for users to manipulate images, video, and anything
    else on-screen.
  prefs: []
  type: TYPE_NORMAL
