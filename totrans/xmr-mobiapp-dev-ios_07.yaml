- en: Chapter 7. Gestures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are ongoing arguments in the courts of America at the time of writing
    over who invented the likes of dragging images, it is without a doubt that a key
    feature of iOS is the ability to use **gestures**. To put it simply, when you
    tap the screen to start an app or select a part of an image to enlarge it or anything
    like that, you are using gestures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: What is a gesture?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding gestures to the UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling gestures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling drag-and-drop
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gestures
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A gesture (in terms of iOS) is any touch interaction between the UI and the
    device. With iOS 6, there are six gestures the user has the ability to use. These
    gestures, along with brief explanations, have been listed in the following table:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '| Class | Name and type | Gesture |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
- en: '| `UIPanGestureRecognizer` | `PanGesture`;Continuous type | Pan images or over-sized
    views by dragging across the screen |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| `UISwipeGestureRecognizer` | `SwipeGesture`;Continuous type | Similar to
    panning, except it is a swipe |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| `UITapGestureRecognizer` | `TapGesture`;Discrete type | Tap the screen a
    number of times (configurable) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| `UILongPressGestureRecognizer` | `LongPressGesture`;Discrete type | Hold
    the finger down on the screen |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| `UIPinchGestureRecognizer` | `PinchGesture`;Continuous type | Zoom by pinching
    an area and moving your fingers in or out |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| `UIRotationGestureRecognizer` | `RotationGesture`;Continuous type | Rotate
    by moving your fingers in opposite directions |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: 'Gestures can be added by programming or via Xcode. The available gestures are
    listed in the following screenshot with the rest of the widgets on the right-hand
    side of the designer:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Gestures](img/00036.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'To add a gesture, drag the gesture you want to use under the view on the View
    bar (shown in the following screenshot):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![Gestures](img/00037.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Design the UI as you want and while pressing the *Ctrl* key, drag the gesture
    to what you want to recognize using the gesture. In my example, the object you
    want to recognize is anywhere on the screen. Once you have connected the gesture
    to what you want to recognize, you will see the configurable options of the gesture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The **Taps** field is the number of taps required before the Recognizer is triggered,
    and the **Touches** field is the number of points onscreen required to be touched
    for the Recognizer to be triggered.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: When you come to connect up the UI, the gesture must also be added.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Gesture code
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using Xcode, it is simple to code gestures. The class defined in the Xcode
    design for the tapping gesture is called `tapGesture` and is used in the following
    code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is nothing really amazing to the code; it just displays how many times
    the screen has been tapped.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The `Selector` method is called by the code when the tap has been seen. The
    method name doesn't make any difference as long as the `Selector` and `Export`
    names are the same.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Types
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the gesture types were originally described, they were given a type. The
    type reflects the number of messages sent to the `Selector` method. A discrete
    one generates a single message. A continuous one generates multiple messages,
    which requires the `Selector` method to be more complex. The complexity is added
    by the `Selector` method having to check the **State** of the gesture to decide
    on what to do with what message and whether it has been completed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当最初描述手势类型时，它们被赋予了一个类型。这个类型反映了发送到`Selector`方法的消息数量。离散类型生成单个消息。连续类型生成多个消息，这要求`Selector`方法更加复杂。复杂性是通过`Selector`方法必须检查手势的**状态**来决定如何处理消息以及是否已完成而增加的。
- en: Adding a gesture in code
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在代码中添加手势
- en: 'It is not a requirement that Xcode be used to add a gesture. To perform the
    same task in the following code as my preceding code did in Xcode is easy. The
    code will be as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xcode添加手势不是必需的。要在以下代码中执行与我在Xcode中先前代码相同的任务非常简单。代码将如下所示：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The rest of the code from `AddTarget` can then be used.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用`AddTarget`中的其余代码。
- en: Continuous types
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连续类型
- en: The following code, a Pinch Recognizer, shows a simple rescaling. There are
    a couple of other states that I'll explain after the code. The only difference
    in the designer code is that I have `UIImageView` instead of a label and a `UIPinchGestureRecognizer`
    class instead of a `UITapGestureRecognizer` class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码，一个捏合识别器，展示了简单的缩放。代码之后，我将解释几个其他状态。设计师代码中唯一的区别是，我使用了`UIImageView`而不是标签，以及`UIPinchGestureRecognizer`类而不是`UITapGestureRecognizer`类。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Other UIGestureRecognizerState values
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他UIGestureRecognizerState值
- en: 'The following table gives a list of other Recognizer states:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了其他识别器状态：
- en: '| State | Description | Notes |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 状态 | 描述 | 备注 |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Possible | Default state; gesture hasn''t been recognized | Used by all gestures
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 可能 | 默认状态；手势尚未被识别 | 所有手势都使用 |'
- en: '| Failed | Gesture failed | No messages sent for this state |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 失败 | 手势失败 | 此状态未发送任何消息 |'
- en: '| Translation | Direction of pan | Used in the pan gesture |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 平移 | 滚动方向 | 用于滚动手势 |'
- en: '| Velocity | Speed of pan | Used in the pan gesture |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 速度 | 滚动速度 | 用于滚动手势 |'
- en: In addition to these, it should be noted that discrete types only use Possible
    and Recognized states.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，还应注意的是，离散类型仅使用可能和已识别状态。
- en: Handling drag-and-drop
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理拖放
- en: 'Drag-and-drop can be handled using a gesture or by using the `TouchesBegan`,
    `TouchesMoved`, and `TouchesEnded` handlers. Essentially, a custom `UIImageView`
    class can be used, as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用手势或使用`TouchesBegan`、`TouchesMoved`和`TouchesEnded`处理程序来处理拖放。本质上，可以使用如以下代码所示的定制`UIImageView`类：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is used as a simple way to handle drag-and-drop. For a gesture, a Continuous
    type should be used.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单的处理拖放的方式。对于手势，应使用连续类型。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Gestures certainly can add a lot to your apps. They can enable the user to speed
    around an image, move about a map, enlarge and reduce, as well as select areas
    of anything on a view. Their flexibility underpins why iOS is recognized as being
    an extremely versatile device for users to manipulate images, video, and anything
    else on-screen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 手势无疑可以为您的应用增添很多功能。它们可以让用户快速浏览图片，在地图上移动，放大和缩小，以及选择视图上任何内容的区域。它们的灵活性是iOS被公认为用户操作屏幕上图像、视频和其他内容的极其灵活设备的根本原因。
