- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swift Formatting and Style Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout my development experience, every time I learned a new programming
    language, there was usually some mention of how the code for that language should
    be written and formatted. Early in my development career (which was a long time
    ago), these recommendations were very basic formatting recommendations, being
    about things such as how to indent your code, or having one statement per line.
    It really wasn't until the last 10-12 years that I started to see complex and
    detailed formatting and style guides for different programming languages. Today,
    you would be hard-pressed to find a development shop with more than two or three
    developers that does not have a style/formatting guide for each language that
    they use. Even companies that do not create their own style guides generally refer
    back to some standard guide published by other companies, such as Google, Oracle,
    or Microsoft. These style guides help teams to write consistent and easy-to-maintain
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What a style guide is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What makes a good style guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why it is important to use a style guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a sample style guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a programming style guide?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coding styles are very personal, and every developer has their own preferred
    style. These styles can vary from language to language, from person to person,
    and over time. The personal nature of coding styles can make it difficult to have
    a consistent and readable code base when numerous individuals are contributing
    to the code.
  prefs: []
  type: TYPE_NORMAL
- en: While most developers might have their own preferred styles, the recommended
    or preferred style between languages can vary. As an example, in C#, when we name
    a method or function, it is preferred that we use Pascal case, which is similar
    to camel case except the first letter is capitalized. In most other languages,
    such as C, Objective-C, and Java, it is also recommended that we use camel case,
    where the first letter is lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: The best applications are coded so they are easy to maintain and the code is
    easy to read. It is hard for large projects and companies with many developers
    to have code that is easy to maintain and read if every developer uses their own
    coding style. This is why companies and projects with multiple developers usually
    adopt programming style guidelines for each language that they use.
  prefs: []
  type: TYPE_NORMAL
- en: A programming style guide defines a set of rules and guidelines that a developer
    should follow while writing applications with a specific language within a project
    or company. These style guides can differ greatly between companies or projects
    and reflect how a company or project expects code to be written. These guides
    can also change over time. It is important to follow these style guides to maintain
    a consistent code base.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of developers do not like the idea of being told how they should write
    code, and claim that as long as their code functions correctly, it shouldn't matter
    how they format it. This type of philosophy doesn't work in a coding team for
    the same reason it doesn't work in a sports team. What do you think would happen
    if all the players on a basketball team believed that they could all play the
    way they wanted to play and the team was better when they did their own thing?
    That team would probably lose a lot of games. It is impossible for a basketball
    team (or any sports team, for that matter) to win consistently unless all team
    members are working together. It is up to the coach to make sure that everyone
    is working together and executing the same game plan, just as it is up to the
    team leader of a development project to make sure all the developers are writing
    code according to the adopted style guide.
  prefs: []
  type: TYPE_NORMAL
- en: API Design Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple has released API Design Guidelines for Swift. This defines how APIs should
    be designed and is different from a language style guide. A language style guide
    defines how code should be written for a particular language; an API design guide
    defines how APIs should be designed. If you are creating an API that will be used
    by other Swift developers, you should become familiar with Apple''s API Design
    Guidelines, which can be found here: [https://swift.org/documentation/api-design-guidelines/](https://swift.org/documentation/api-design-guidelines/).'
  prefs: []
  type: TYPE_NORMAL
- en: Your style guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The style guide that we define in this book is just a guide. It reflects the
    author's opinion on how Swift code should be written and is meant to be a good
    starting point for creating your own style guide. If you really like this guide
    and adopt it as it is, great. If there are parts that you do not agree with and
    you change them within your guide, that is great as well.
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate style for you and your team is the one that you and your team
    feel comfortable with, and it may or may not be different from the guide in this
    book. Don't be afraid to adjust your style guide as needed. One thing that is
    noticeable in the style guide within this chapter, and most good style guides,
    is that there is very little explanation about why each item is preferred or not
    preferred. Style guides should give enough details so that the reader understands
    the preferred and non-preferred methods for each item but should also be small
    and compact to make them easy and quick to read. If a developer has questions
    about why a particular method is preferred, they should bring that concern up
    with the development group. With that in mind, let's get started with the guide.
  prefs: []
  type: TYPE_NORMAL
- en: Do not use semicolons at the end of statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike a lot of languages, Swift does not require semicolons at the end of
    statements. Therefore, we should not use them. Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Do not use parentheses for conditional statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike a lot of languages, parentheses are not required around conditional
    statements; therefore, we should avoid using them unless they are needed for clarification.
    Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Naming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We should always use descriptive names with camel case for custom types, methods,
    variables, constants, and so on. Let's look at some general naming rules.
  prefs: []
  type: TYPE_NORMAL
- en: Custom types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Custom types should have a descriptive name that describes what the type is
    for. The name should be in Pascal case. Here are examples of proper names and
    non-proper names based on our style guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Functions and methods
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Function names should be descriptive, describing the function or method. They
    should be in camel case. Here are some examples of proper and non-proper names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Constants and variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Constants and variables should have a descriptive name. They should begin with
    a lowercase letter and be in camel case. The only exception is when the constant
    is global; in that case, the name of the constant should contain all uppercase
    characters with the words separated by underscores. I have seen numerous guides
    that frown upon having all-uppercase names, but I personally like them for constants
    in the global scope, because it stands out that they are globally, not locally,
    scoped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of proper and non-proper names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Indenting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Indenting width in Xcode, by default, is defined as four spaces, and tab width
    is also defined as four spaces. We should leave this as the default. The following
    screenshot shows the indentation setting in Xcode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a cell phone screen with text  Description automatically
    generated](img/B16683_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Indentations'
  prefs: []
  type: TYPE_NORMAL
- en: We should add an extra blank line between functions/methods. We should also
    use a blank line to separate functionality within a function or method. That being
    said, using many blank lines within a function or method might indicate that we
    should break the function into multiple functions.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We should use comments as needed to explain how and why our code is written.
    We should use block comments before custom types and functions. We should use
    double slashes to comment our code in one line. Here is an example of how comments
    should be written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When we are commenting methods, we should also use documentation tags, which
    will generate documentation in Xcode, as shown in the preceding example. At a
    minimum, we should use the following tags if they apply to our method:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameter**: This is used for parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Returns**: This is used for what is returned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throws**: This is used to document errors that may be thrown'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the self keyword
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since Swift does not require us to use the `self` keyword when accessing properties
    or invoking methods of an object, we should avoid using it unless we need to distinguish
    between an instance property and local variables. Here is an example of when you
    should use the `self` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of when not to use the `self` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Constants and variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The difference between constants and variables is that the value of a constant
    never changes, whereas the value of a variable may change. Wherever possible,
    we should define constants rather than variables.
  prefs: []
  type: TYPE_NORMAL
- en: One of the easiest ways of doing this is by defining everything as a constant
    by default, and then changing the definition to a variable only after you reach
    a point in your code that requires you to change it. In Swift, you will get a
    warning if you define a variable and then never change the value within your code.
  prefs: []
  type: TYPE_NORMAL
- en: Optional types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only use optional types when absolutely necessary. If there is no absolute need
    for a nil value to be assigned to a variable, we should not define it as an optional.
  prefs: []
  type: TYPE_NORMAL
- en: Using optional binding
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We should avoid forced unwrapping of optionals, as there is rarely any need
    to do this. We should preferably use optional binding or optional chaining rather
    than forced unwrapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following examples show the preferred and non-preferred methods where the
    `myOptional` variable is defined as an optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are several optionals that we need to unwrap, we should include them
    in the same `if-let` or `guard` statement, rather than unwrapping them on separate
    lines. There are times, however, when our business logic may require us to handle
    nil values differently, and this may require us to unwrap the optionals on separate
    lines. The following examples show the preferred and non-preferred methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using optional chaining
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When we need to unwrap multiple layers, we should use optional chaining over
    multiple optional binding statements. The following example shows the preferred
    and non-preferred methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using type inference
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Rather than defining variable types, we should let Swift infer the type. The
    only time we should define the variable or constant type is when we are not giving
    it a value while defining it. Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using shorthand declarations for collections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When declaring native Swift collection types, we should use the shorthand syntax,
    and, unless absolutely necessary, we should initialize the collection. The following
    example shows the preferred and non-preferred methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using switch rather than multiple if statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Wherever possible, we should prefer to use a single `switch` statement over
    multiple `if` statements. The following example shows the preferred and non-preferred
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Don't leave commented-out code in your application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we comment out a block of code while we attempt to replace it, once we are
    comfortable with the changes we should remove the code that we commented out.
    Having large blocks of code commented out can make the code base look messy and
    make it harder to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are developing an application in a team environment, it is important
    to have a well-defined coding style that is adhered to by everyone on the team.
    This allows us to have a code base that is easy to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: If a style guide remains static for too long, it means that it is probably not
    keeping up with the latest changes within the language. What is considered "too
    long" is different for each language. For example, with the C language, too long
    will be defined in years, since the language is very stable; however, with Swift,
    the language is relatively new, and changes come pretty often, so "too long" can
    probably be defined as a couple of months.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that we keep our style guides in a version control system
    so that we can refer to older versions if need be. This allows us to pull older
    versions of the style guide and refer back to them when we are looking at older
    code.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended, not only with Swift but other languages as well, that you
    use a lint tool to check and enforce good coding practices. For Swift, there is
    a great tool called SwiftLint ([https://github.com/realm/SwiftLint](https://github.com/realm/SwiftLint)),
    which has a command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: As you work on a style guide for your organization, you may want to keep an
    eye on Swift Evolution Proposal SE-0250 ([https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md](https://github.com/apple/swift-evolution/blob/master/proposals/0250-swift-style-guide-and-formatter.md)).
    This proposal is to create an official Swift style guide and formatter. If this
    proposal is accepted and an official style guide is released, then you should
    adopt those guidelines.
  prefs: []
  type: TYPE_NORMAL
