- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">What’s New in iOS 18</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="22">Apple introduced iOS 18 in WWDC 2024 as part of its annual developer’s
    conference, alongside macOS, tvOS, iPadOS, watchOS,</st> <st c="146">and visionOS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="159">Utilizing our app’s latest features and capabilities in each major
    OS release gives us a competitive advantage.</st> <st c="272">Here are the reasons
    why Apple chose to improve particular domains in the SDK – market research or
    technology trends are good enough reasons to adopt</st> <st c="422">new technologies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="439">However, to understand iOS 18 improvements, we first must understand
    the background for this version – that’s one of this</st> <st c="562">chapter’s
    goals.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="578">In this chapter, we will cover the</st> <st c="614">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="631">Understanding iOS</st> <st c="650">18 background</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="663">Exploring</st> <st c="674">Swift Testing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="687">Learning about the new Swift</st> <st c="717">Data improvements</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="734">Trying the new</st> <st c="750">zoom transition</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="765">Adding a floating tab bar to our</st> <st c="799">iPad apps</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="808">Having more control over scroll views</st> <st c="847">in SwiftUI</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="857">Changing the text</st> <st c="876">rendering behavior</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="894">Positioning sub-views from</st> <st c="922">another view</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="934">Entering the</st> <st c="948">AI revolution</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="961">If that sounds like an exciting chapter, you are not wrong.</st>
    <st c="1022">Let’s start by understanding the background of</st> <st c="1069">iOS
    18.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1076">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1099">For this chapter, it’s essential to download Xcode version 16.0
    or higher from the</st> <st c="1183">App Store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1193">Ensure that you’re operating on the most recent version of macOS
    (Ventura or newer).</st> <st c="1279">Just search for Xcode in the App Store,
    choose the latest version, and proceed with the download.</st> <st c="1377">Open
    Xcode and complete any further setup instructions that appear.</st> <st c="1445">After
    Xcode is completely up and running, you</st> <st c="1491">can begin.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1501">This chapter includes many code examples, and can be found in the
    following</st> <st c="1578">GitHub repository:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[<st c="1596">https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%201</st>](https://github.com/PacktPublishing/Mastering-iOS-18-Development/tree/main/Chapter%201)'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1682">Understanding iOS 18 background</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1714">Releasing a major iOS version is always a big deal, even if it’s
    the 18</st><st c="1786">th</st> <st c="1789">already.</st> <st c="1799">Let’s
    try to analyze the iOS SDK before</st> <st c="1839">iOS 18:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1846">SwiftUI</st>** <st c="1854">is becoming more mature</st> <st
    c="1878">and capable.</st> <st c="1892">However, some features, such as complex
    animations or transitions, gesture handling, navigation, and drawing, remain challenging
    to implement</st> <st c="2034">using SwiftUI.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2048">Core Data</st>** <st c="2058">is the go-to framework for most
    iOS developers</st> <st c="2105">as a solution for storing</st> <st c="2132">data
    persistently.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2150">While</st> **<st c="2157">XCTest</st>** <st c="2163">is considered
    a robust</st> <st c="2186">and convenient testing framework, it lacks features
    that are commonly available on other platforms, such as parameterized testing
    and better</st> <st c="2328">testing organization.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2349">WidgetKit</st>**<st c="2359">’s popularity proves that the ability</st>
    <st c="2397">to show information at a glance is crucial in</st> <st c="2444">today’s
    world.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2458">No one can argue that this list is important.</st> <st c="2505">However,
    one critical topic that Apple didn’t focus on until WWDC 2024 is</st> <st c="2579">artificial
    intelligence.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2603">The rise of OpenAI’s ChatGPT, followed by thousands of machine
    learning and AI tools, put Apple in a weird situation.</st> <st c="2722">This
    is not the first time Apple has left behind some temporary trend, but this time
    it was different.</st> <st c="2825">AI’s potential influence on humanity indicates
    that this is not a regular trend or technology evolution; it is practically a
    revolution that will change</st> <st c="2978">the world.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2988">The question is, where is Apple with its set of platforms and technologies?</st>
    <st c="3065">Does it have an answer to the</st> <st c="3095">AI revolution?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3109">Before diving into that question, let’s first review the new features
    and frameworks introduced in iOS 18 and explore how the latest version tackles
    some of the key challenges we face in iOS development.</st> <st c="3314">Don’t
    worry, though – we’ll cover the AI revolution in the final section and throughout
    the book.</st> <st c="3412">Now, let’s discuss a new framework –</st> <st c="3449">Swift
    Testing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3463">Introducing Swift Testing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3489">Swift Testing is a new framework</st> <st c="3522">with a new and
    refreshing approach to testing.</st> <st c="3570">Swift Testing contains modern
    features such as macros, which work with structs instead of classes and can tag
    tests and</st> <st c="3690">test suites.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3702">Swift Testing is supposed to replace XCTest, which was introduced
    in 2013 as part of Xcode 5\.</st> <st c="3797">XCTest belongs to older times when
    Objective-C was the dominant language.</st> <st c="3871">However, Swift took over,
    and Apple understood that iOS developers needed a modern</st> <st c="3954">testing
    framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3972">Here’s a simple</st> <st c="3989">test function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4309">We can see how simple it is to write a test function in Swift Testing.</st>
    <st c="4381">Notice the preceding Swift macro, which configures and tags the function
    as critical in addition to providing the</st> <st c="4495">test description.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4512">If your app doesn’t have a test function, Swift Testing</st> <st
    c="4568">is a great way to start (to read more about Swift Testing, go to</st>
    [*<st c="4634">Chapter 14</st>*](B21795_14.xhtml#_idTextAnchor430)<st c="4644">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4647">Now, let’s discuss another new framework that handles our</st>
    <st c="4706">persistent store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4723">Introducing Swift Data Improvements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="4759">Swift Data was introduced</st> <st c="4785">in WWDC 2023 as part
    of iOS 17, and its goal was to replace the old but popular Core</st> <st c="4871">Data
    framework.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4886">Swift Data provides a modern API based on Swift, which can help
    reduce friction when working with persistent stores.</st> <st c="5004">One of
    the trends we see in Apple development tools is moving away from GUI to code-based
    tools.</st> <st c="5101">A good example is SwiftUI – even though it is possible
    to drag and drop components to build a user interface, the primary way to do this
    is in code.</st> <st c="5250">The same goes for App Intents and Swift Package
    Managers.</st> <st c="5308">The data layer goes through the same concept – in
    Swift Data, we don’t have any data model editor, so we build our data model using</st>
    <st c="5440">only code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5450">For example, here’s how to create a data model for a</st> `<st
    c="5504">Book</st>` <st c="5508">entity:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5599">At first glance, it seems like a regular</st> `<st c="5641">Book</st>`
    <st c="5645">class – and it is!</st> <st c="5665">This time, we added the</st>
    `<st c="5689">@Model</st>` <st c="5695">macro, which does all</st> <st c="5718">that
    magic.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5729">When Swift Data was introduced, it already had many features, such
    as relationships and deletion rules.</st> <st c="5834">Despite that, many developers
    felt that the framework wasn’t mature enough to replace</st> <st c="5920">Core
    Data.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5930">In iOS 18, Apple added</st> <st c="5953">some features to Swift
    Data that, if it is not already there, will bring it closer to where it</st> <st
    c="6049">should be.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6059">Unique value</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6072">The first and maybe most important</st> <st c="6107">new feature</st>
    <st c="6119">in iOS 18 is the ability to construct a</st> **<st c="6160">unique
    value</st>** <st c="6172">for the model based on</st> <st c="6196">its attributes:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'final class CSVStoreConfiguration: DataStoreConfiguration {'
  prefs: []
  type: TYPE_NORMAL
- en: typealias Store = CSVDataStore
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var name: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var schema: Schema? var fileURL: URL'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'init(name: String, schema: Schema? = nil, fileURL: URL)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: self.name = name
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.schema = schema
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.fileURL = fileURL
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'static func == (lhs: CSVStoreConfiguration, rhs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CSVStoreConfiguration) -> Bool {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return lhs.name == rhs.name
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func hash(into hasher: inout Hasher) {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: hasher.combine(name)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'final class <st c="8350">CSVDataStore</st>: DataStore {'
  prefs: []
  type: TYPE_NORMAL
- en: typealias Configuration = <st c="8403">CSVStoreConfiguration</st> typealias
    Snapshot = DefaultSnapshot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var configuration: <st c="8481">CSVStoreConfiguration</st> var name: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var schema: Schema'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var identifier: String'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'required init(_ configuration: CSVStoreConfiguration,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'migrationPlan: (any SchemaMigrationPlan.Type)?)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throws {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.configuration = configuration
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.name = configuration.name
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.schema = configuration.schema! self.identifier =
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: configuration.fileURL.lastPathComponent
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'func fetch<T>(_ request: DataStoreFetchRequest<T>)'
  prefs: []
  type: TYPE_NORMAL
- en: throws -> DataStoreFetchResult<T, DefaultSnapshot>
  prefs: []
  type: TYPE_NORMAL
- en: 'where T : PersistentModel {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: let predicate = request.descriptor.predicate
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'return DataStoreFetchResult(descriptor:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'request.descriptor, fetchedSnapshots: [],'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'relatedSnapshots: [:])'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: . // perform fetch operations
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'func save(_ request:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: DataStoreSaveChangesRequest<DefaultSnapshot>)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: throws -> DataStoreSaveChangesResult<DefaultSnapshot>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'var remappedIdentifiers = [PersistentIdentifier:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: PersistentIdentifier]()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: for snapshot in request.inserted {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: // insert new items
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: for snapshot in request.updated {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: // update existing items
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: for snapshot in request.deleted {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: // delete items
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'DataStoreSaveChangesResult<DefaultSnapshot>(for:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.identifier,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'remappedIdentifiers: remappedIdentifiers)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="11285">@Namespace() var namespace</st> var body: some View {'
  prefs: []
  type: TYPE_NORMAL
- en: NavigationStack {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ScrollView {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'LazyVGrid(columns: ['
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'GridItem(.adaptive(minimum: 150)) ]) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ForEach(Album.albums) { album in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: NavigationLink {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Image(album.imageName)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.resizable() <st c="11512">.navigationTransition(.zoom(sourceID: album.id,
    in:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="11563">namespace))</st> } label: {'
  prefs: []
  type: TYPE_NORMAL
- en: Image(album.imageName)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .resizable()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .scaledToFit()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.frame(minWidth: 0,'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'maxWidth: .infinity)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.frame(height: 150)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .cornerRadius(8.0)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="11720">.matchedTransitionSource(id:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="11748">album.id, in: namespace)</st> }'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .padding()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'struct ContentView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TabView {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tab("Home", systemImage: "house.fill") {  }'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tab("Profile", systemImage:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"person.crop.circle") { }'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tab("Settings", systemImage: "gear") { }'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .tint(.red) <st c="14402">.tabViewStyle(.sidebarAdaptable)</st> }
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ScrollViewReader { proxy in
  prefs: []
  type: TYPE_NORMAL
- en: ScrollView {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'VStack(alignment: .leading, spacing: 16) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ForEach(albums) { album in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ExtractedView(album: album)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .id(album.id)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.overlay(alignment: .bottom) {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if showScrollToTop {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Button("Scroll to top") {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy.scrollTo(albums[0].id,
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'anchor: .top)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .buttonStyle(.borderedProminent)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="17458">.onScrollGeometryChange(for: Bool.self) {</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="17499">geometry in</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17511">geometry.contentOffset.y <</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17538">geometry.contentInsets.bottom + 300</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="17574">} action: { oldValue, newValue in</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17608">withAnimation {</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17624">showScrollToTop = !newValue</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17652">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17654">}</st> }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: ForEach(albums) { album in
  prefs: []
  type: TYPE_NORMAL
- en: 'ExtractedView(album: album)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .id(album.id)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.<st c="19395">onScrollVisibilityChange(threshold: 0.9) {</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19438">visible in</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19449">if visible {</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19462">print("\(album.title) appears")</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19494">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19496">}</st> }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="21400">struct CustomTextRenderer: TextRenderer {</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="21442">func draw(layout: Text.Layout, in ctx: inout</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21487">GraphicsContext) {</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21506">for (index, line) in layout.enumerated() {</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21549">ctx.opacity = Double(index + 1) * 0.1</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="21587">ctx.rotate(by: Angle(degrees: Double(index) *</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21633">1))</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21637">ctx.draw(line)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21652">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21654">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="21656">}</st> struct ContentView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Text("Great new features come to texts in SwiftUI")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '.font(.system(size: 60)) <st c="21784">.textRenderer(CustomTextRenderer())</st>
    }'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'struct NewsView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Text("Major Breakthrough in Renewable Energy: New Solar Panel Technology Promises
    30% Efficiency Increase")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Text("lobal Markets React to Sudden Interest Rate Hike: Stocks Tumble Across
    the Board")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Text("Historic Peace Agreement Reached: Leaders Sign Pact to End Decades-Long
    Conflict")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Text("Innovative AI Tool Revolutionizes Healthcare: Doctors Embrace Machine
    Learning for Diagnosis")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Text("Natural Disaster Strikes: Massive Earthquake Hits Coastal City, Rescue
    Efforts Underway")'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'struct ContentView: View {'
  prefs: []
  type: TYPE_NORMAL
- en: 'var body: some View {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ScrollView {
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: VStack {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Text("Latest headlines")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .font(.title)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="24170">Group(subviews: NewsView()) { collection in</st> if let firstHeadline
    = collection.first'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: firstHeadline
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .font(.title2)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Spacer()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ForEach(collection.dropFirst()) {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: newsItem in
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: newsItem
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .font(.headline)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Spacer()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .padding()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Group(subviews: NewsView()) { collection in'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
