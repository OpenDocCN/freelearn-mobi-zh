["```kt\nHost -- localhost // our hosting URL\nPort -- 3306 // our hosting port\nUsername -- root // username of the MySQL\nPassword -- 12345678 // password of the MySQL\n```", "```kt\n@SpringBootApplication\n@EnableJpaAuditing class SocialNetworkApplication\n\nfun main(args: Array<String>) {\n   runApplication<SocialNetworkApplication>(*args)\n}\n```", "```kt\n@Entity\nclass Profile : Serializable {\n\n    constructor(id: Long) {\n        this.id = id\n    }\n\n    constructor(name: String) {\n        this.username = name\n    }\n    -----\n    -----\n @JsonProperty(\"contactNumber\")\n var contactNumber: String? = null\n\n @JsonProperty(\"dob\")\n var dOB: Date? = null\n\n @JsonProperty(\"city\")\n var city: String? = null\n\n @JsonProperty(\"country\")\n var country: String? = null\n}\n```", "```kt\nconstructor(id: Long) {\n  ----\n  ----\n}\n\nconstructor(name: String) {\n  ----\n  ----\n}\n\nconstructor(id: Long, name: String, password: String) {\n  ----\n  ----\n}\n\nconstructor(username: String, password: String, email: String, accCreatedTime: Instant,\n firstName: String?, lastName: String?, contactNumber: String?, dOB: Date?,\n city: String?, country: String?) {\n  ----\n  ----\n}\n```", "```kt\n@Id\n@GeneratedValue\nvar id: Long? = 0\n```", "```kt\n@JsonIgnore\n@JsonProperty(\"password\")\nvar password: String = \"\"\n```", "```kt\n@Entity\nclass Post(text: String, postedBy: Profile) : Serializable {\n\n    @Id\n    @GeneratedValue\n    var id: Long? = 0\n\n    var text: String? = text\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"profile_id\")\n    @JsonIgnoreProperties(\"username\",\"password\", \"email\",\"accCreatedTime\",\"firstName\",\"lastName\",\n            \"contactNumber\",\"dob\",\"city\",\"country\")\n    var postedBy: Profile? = postedBy\n\n    @JsonIgnore\n    @JsonProperty(\"postCreatedTime\")\n    var postCreatedTime: Instant? = Instant.now()\n\n    @OneToMany(cascade = [CascadeType.ALL], fetch = FetchType.LAZY, orphanRemoval=true)\n    val comments = mutableListOf<Comment>()\n\n    @OneToMany(cascade = [CascadeType.ALL], orphanRemoval = true)\n    var likes: List<LikeObj>? = mutableListOf<Comment>()\n}\n```", "```kt\n@Entity\nclass Post(text: String, postedBy: Profile) : Serializable {\n   -----\n   -----\n}\n```", "```kt\n@ManyToOne(fetch = FetchType.LAZY)\n@JoinColumn(name = \"profile_id\")\n@JsonIgnoreProperties(\"username\",\"password\", \"email\",\"accCreatedTime\",\"firstName\",\"lastName\",\n            \"contactNumber\",\"dob\",\"city\",\"country\")\n    var postedBy: Profile? = postedBy\n```", "```kt\n @OneToMany(cascade = [CascadeType.ALL], fetch = FetchType.LAZY, orphanRemoval=true)\n    val comments = mutableListOf<Comment>()\n```", "```kt\n@Entity\nclass Comment(text: String, postedBy: Profile) : Serializable {\n\n    @Id\n    @GeneratedValue\n    var id: Long? = 0\n\n    var text: String? = text\n\n    @JsonIgnore\n    @JsonProperty(\"accCreatedTime\")\n    var accCreatedTime: Instant? = Instant.now()\n\n    @ManyToOne\n    @JoinColumn(name = \"profile_id\")\n        @JsonIgnoreProperties(\"username\",\"password\",\"email\",\"accCreatedTime\",\"firstName\",\"lastName\"       , \"contactNumber\",\"dob\",\"city\",\"country\")\n    var postedBy: Profile? = postedBy\n}\n```", "```kt\n@Entity\nclass Comment(text: String, postedBy: Profile) : Serializable {\n   -----\n   -----\n}\n```", "```kt\n@Entity\nclass LikeObj(mProfile: Profile) : Serializable {\n\n    @Id\n    @GeneratedValue\n    var id: Long? = 0\n\n    @ManyToOne\n    @JoinColumn(name = \"profile_id\")\n    @JsonIgnoreProperties(\"username\",\"password\",\"email\",\"accCreatedTime\",\"firstName\",\"lastName\",\n            \"contactNumber\",\"dob\",\"city\",\"country\")\n    var profile: Profile? = mProfile\n}\n```", "```kt\n@Entity\nclass LikeObj(profile: Profile) : Serializable {\n   -----\n   -----\n}\n```", "```kt\n@Repository\ninterface ProfileRepository : JpaRepository<Profile, Long>\n```", "```kt\n@Repository\ninterface PostRepository : JpaRepository<Post, Long>\n```", "```kt\n@Repository\ninterface CommentRepository : JpaRepository<Comment, Long>\n```", "```kt\n@Repository\ninterface LikeRepository : JpaRepository<LikeObj, Long>\n```", "```kt\ninterface DeletePCLByIDInterface {\n    fun deleteAllUsersInfoByUserID(userID: Long): Any\n}\n```", "```kt\n@Repository\nclass DeletePCLRepository : DeletePCLByIDInterface {\n\n    @Autowired\n    private lateinit var jdbcTemplate: JdbcTemplate\n\n    override fun deleteAllUsersInfoByUserID(userID: Long): Any {\n\n        val deletePosts = \"DELETE FROM post, comment WHERE profile_id = ?;\"\n        val deleteComments = \"DELETE FROM comment WHERE profile_id = ?\"\n        val deleteLikes = \"DELETE FROM like_obj WHERE profile_id = ?\"\n\n        jdbcTemplate.update(deletePosts, userID)\n        jdbcTemplate.update(deleteComments, userID)\n        jdbcTemplate.update(deleteLikes, userID)\n\n        return \"DONE\"\n    }\n}\n```", "```kt\ninterface UserExistInterface{\n    fun isUserExist(name: String): Boolean\n}\n```", "```kt\n@Repository\nclass UserExistRepository: UserExistInterface {\n    @Autowired\n    private lateinit var jdbcTemplate: JdbcTemplate\n\n    override fun isUserExist(name: String): Boolean {\n        val sql = \"SELECT count(*) FROM PROFILE WHERE username = ?\"\n        val count = jdbcTemplate.queryForObject(sql, Int::class.java, name)\n        return count != 0\n    }\n}\n```", "```kt\n@RestController class AppController {\n    -----\n    -----\n}\n```", "```kt\n@Autowired\nprivate lateinit var profileRepository: ProfileRepository\n\n@Autowired\nprivate lateinit var userExist: UserExistRepository\n\n@Autowired\nprivate lateinit var postRepository: PostRepository\n\n@Autowired\nprivate lateinit var commentRepository: CommentRepository\n\n@Autowired\nprivate lateinit var likeRepository: LikeRepository\n\n@Autowired\nprivate lateinit var deletePCLRepository : DeletePCLRepository\n```", "```kt\n// New Profile registration\n@PostMapping(\"/profile/new\")\nfun registerUser(@RequestBody profile: Profile): Any {\n    if (!userExist.isUserExist(profile.username)) {\n        profile.password = passwordEncoder.encode(profile.password)\n        profileRepository.save(profile)\n        return profile\n    }\n    return \"{\\\"duplicate\\\": \\\"${profile.username} is taken. Try another\\\"}\"\n}\n```", "```kt\n// Get Profile by ID\n@GetMapping(\"/profile/{id}\")\nfun getUserById(@PathVariable(\"id\") id: Long): Any {\n    return profileRepository.findById(id)\n}\n```", "```kt\n//     Update Profile by ID\n@PutMapping(\"/profile/{id}\")\nfun updateUserById(@PathVariable(\"id\") id: Long, @RequestBody mUser: Profile): Any {\n    val profile = profileRepository.getOne(id)\n    if (mUser.firstName != null) profile.firstName = mUser.firstName\n    if (mUser.lastName != null) profile.lastName = mUser.lastName\n    if (mUser.contactNumber != null) profile.contactNumber = mUser.contactNumber\n    if (mUser.city != null) profile.city = mUser.city\n    if (mUser.country != null) profile.country = mUser.country\n    return profileRepository.save(profile)\n}\n```", "```kt\n// Delete Profile by ID\n@DeleteMapping(\"/profile/{userId}\")\nfun deleteUserById(@PathVariable(\"userId\") userId: Long): Any {\n    deletePCLRepository.deleteAllUsersInfoByUserID(userId)\n    return profileRepository.deleteById(userId)\n}\n```", "```kt\n// Post status by Profile ID\n@PostMapping(\"/post/{profile_id}/new\")\nfun submitPost(@PathVariable(\"profile_id\") profile_id: Long, @RequestParam text: String): Any {\n        val mPost = Post(text, Profile(profile_id))\n        postRepository.save(mPost)\n\n        return mPost\n    }\n```", "```kt\n// Get all posted status\n@GetMapping(\"/posts\")\nfun getPostList(): Any {\n    return postRepository.findAll()\n}\n```", "```kt\n// Get all posted status by Profile ID\n@GetMapping(\"/post/{id}\")\nfun getPostById(@PathVariable(\"id\") id: Long): Any {\n    return postRepository.findById(id)\n}\n```", "```kt\n// Update all posted status by Profile ID\n @PutMapping(\"/post/{profile_id}\")\n    fun updatePostById(@PathVariable(\"profile_id\") id: Long, @RequestParam text: String): Any {\n        val modifiedPost = postRepository.getOne(id)\n        modifiedPost.text = text\n        return postRepository.save(modifiedPost)\n    }\n```", "```kt\n// Delete a posted status by Profile ID\n@DeleteMapping(\"/post/{id}\")\nfun deletePostByUserId(@PathVariable(\"id\") id: Long): Any {\n    return postRepository.deleteById(id)\n}\n```", "```kt\n// Post comment in a post by Profile ID and Post ID\n    @PostMapping(\"/comment/{post_id}\")\n    fun postCommentByPostId(@PathVariable(\"post_id\") postId: Long, @RequestParam id: Long, @RequestParam commentText: String): Any {\n        val optionalPost: Optional<Post> = postRepository.findById(postId)\n        return if (optionalPost.isPresent) {\n            val myComment = Comment(commentText, Profile(id))\n            val post = optionalPost.get()\n            post.comments.add(myComment)\n            postRepository.save(post)\n            return post\n        } else {\n            \"There is no post..\"\n        }\n    }\n```", "```kt\n// get comment List of a post\n@GetMapping(\"/comment/{id}\")\nfun getCommentListByPostId(@PathVariable(\"id\") id: Long): Any {\n    return commentRepository.findById(id)\n}\n```", "```kt\n// get comment List of a post\n@GetMapping(\"/comment/{id}\")\nfun getCommentListByPostId(@PathVariable(\"id\") id: Long, @RequestParam text: String): Any {\n    val modifiedComment = commentRepository.getOne(id)\n    modifiedComment.text = text\n    return commentRepository.save(modifiedComment)\n}\n```", "```kt\n// delete comment List of a status\n@DeleteMapping(\"/comment/{id}\")\nfun deleteCommentByPostId(@PathVariable(\"id\") id: Long): Any {\n    return commentRepository.findById(id)\n}\n```", "```kt\n@Service\nclass CustomUserDetailsService: UserDetailsService {\n\n @Autowired\n private lateinit var userByNameRepository: UserByNameRepository\n\n @Throws(UsernameNotFoundException::class)\n override fun loadUserByUsername(username: String): User {\n val profile = userByNameRepository.getUserByName(username)\n\n return org.springframework.security.core.userdetails.User(username, profile.password,\n AuthorityUtils.createAuthorityList(\"USER\"))\n }\n}\n```", "```kt\n@Repository\nclass UserByNameRepository: UserByNameInterface {\n @Autowired\n private lateinit var jdbcTemplate: JdbcTemplate\n\n override fun getUserByName(username: String): Profile {\n val sql = \"SELECT * FROM PROFILE WHERE username = ?\"\n val profile = jdbcTemplate.queryForObject(sql, UserRowMapper(), username)\n\n return profile!!\n }\n\n override fun getUserByNamePassword(username: String, password: String): Boolean {\n val sql = \"SELECT * FROM PROFILE WHERE username = ?, password = ?\"\n val profile = jdbcTemplate.queryForObject(sql, UserRowMapper(), username, password)\n return profile != null\n }\n}\n\ninterface UserByNameInterface {\n fun getUserByName(username: String): Profile\n fun getUserByNamePassword(username: String, password: String): Boolean\n}\n```", "```kt\nclass UserRowMapper : RowMapper<Profile> {\n\n    @Throws(SQLException::class)\n    override fun mapRow(row: ResultSet, rowNumber: Int): Profile? {\n        val profile = Profile(row.getLong(\"id\"),\n                row.getString(\"username\"),\n                row.getString(\"password\"))\n        return profile\n    }\n}\n```", "```kt\n@Configuration\n@EnableWebSecurity\nclass SecurityConfigurer : WebSecurityConfigurerAdapter() {\n\n @Autowired\n private lateinit var authEntryPoint: AuthenticationEntryPoint\n\n @Autowired\n private lateinit var customUserDetailsService: CustomUserDetailsService\n\n @Throws(Exception::class)\n override fun configure(http: HttpSecurity) {\n http.csrf().disable().authorizeRequests()\n .antMatchers(\"/profile/new\").permitAll()\n .anyRequest()\n .authenticated()\n .and()\n .formLogin()\n .and()\n .httpBasic()\n .authenticationEntryPoint(authEntryPoint)\n }\n\n @Autowired\n @Throws(Exception::class)\n fun configureGlobal(auth: AuthenticationManagerBuilder) {\n auth\n .userDetailsService(customUserDetailsService)\n .passwordEncoder(getPasswordEncoder())\n }\n\n @Bean\n fun getPasswordEncoder(): PasswordEncoder {\n return object : PasswordEncoder {\n override fun encode(charSequence: CharSequence): String {\n return charSequence.toString()\n }\n\n override fun matches(charSequence: CharSequence, s: String): Boolean {\n return true\n }\n }\n }\n}\n```", "```kt\n# ===============================\n# DATABASE\n# ===============================\n\nspring.datasource.url=jdbc:mysql://localhost:3306/my_app_schema?useSSL=false&allowPublicKeyRetrieval=true\nspring.datasource.username=root\nspring.datasource.password=12345678\n\n# ===============================\n# JPA / HIBERNATE\n# ===============================\nspring.jpa.show-sql=true\n\n# Hibernate ddl auto (create, create-drop, validate, update)\nspring.jpa.hibernate.ddl-auto = update\n\n## Hibernate Properties\n# The SQL dialect makes Hibernate generate better SQL for the chosen database\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect\n```", "```kt\n// Design\nimplementation 'com.android.support:design:28.0.0'\nimplementation 'com.android.support:recyclerview-v7:28.0.0'\nimplementation 'com.android.support:cardview-v7:28.0.0'\n\n// Retrofit\nimplementation \"com.squareup.retrofit2:retrofit:$retrofit_version\"\nimplementation \"com.squareup.retrofit2:converter-gson:$retrofit_version\"\nimplementation \"com.squareup.retrofit2:adapter-rxjava2:$retrofit_version\"\nimplementation \"com.squareup.retrofit2:retrofit-converters:$retrofit_version\"\nimplementation \"com.squareup.retrofit2:retrofit-adapters:$retrofit_version\"\nimplementation \"com.squareup.okhttp3:logging-interceptor:$okhttp3_version\"\nimplementation \"com.google.code.gson:gson:$gson_version\"\n\n// Rx\nimplementation 'io.reactivex.rxjava2:rxandroid:2.0.2'\nimplementation 'io.reactivex.rxjava2:rxjava:2.2.0'\n```", "```kt\nclass HomeActivity : AppCompatActivity() {\n\n override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main2)\n        setSupportActionBar(toolbar)\n\n        fab.setOnClickListener { view ->\n            Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\n                .setAction(\"Action\", null).show()\n        }\n    }\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".ui.MainActivity\">\n    <android.support.constraint.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                                                 xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n                                                 xmlns:tools=\"http://schemas.android.com/tools\"\n                                                 android:layout_width=\"match_parent\"\n                                                 android:layout_height=\"match_parent\"\n                                                 tools:context=\".ui.MainActivity\">\n\n      ----\n----\n\n        <android.support.v7.widget.RecyclerView\n                android:id=\"@+id/displayList\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"0dp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                tools:listitem=\"@layout/post_item\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintHorizontal_bias=\"0.0\" android:layout_marginTop=\"8dp\"\n                app:layout_constraintTop_toBottomOf=\"@+id/appBarLayout\"/>\n\n    </android.support.constraint.ConstraintLayout>\n\n    <android.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fabMain\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"bottom|end\"\n            android:layout_margin=\"@dimen/fab_margin\"\n            app:srcCompat=\"@android:drawable/ic_dialog_email\"/>\n</android.support.design.widget.CoordinatorLayout>\n```", "```kt\ndata class Profile(\n    @SerializedName(\"id\") var userID: String,\n    @SerializedName(\"username\") var username: String,\n    @SerializedName(\"password\") var password: String,\n    @SerializedName(\"email\") var email: String,\n    @SerializedName(\"accCreatedTime\") var accCreatedTime: String,\n    @SerializedName(\"firstName\") var firstName: String,\n    @SerializedName(\"lastName\") var lastName: String,\n    @SerializedName(\"contactNumber\") var contactNumber: String,\n    @SerializedName(\"country\") var country: String\n    )\n```", "```kt\ndata class Post(\n    @SerializedName(\"id\") var postId: Long?,\n    @SerializedName(\"text\") var text: String?,\n    @SerializedName(\"postedBy\") var profile: Profile?,\n    @SerializedName(\"accCreatedTime\") var accCreatedTime: String?,\n    @SerializedName(\"comments\") var comment: ArrayList<Comment>?,\n    @SerializedName(\"likes\") var likes: ArrayList<Like>?\n)\n```", "```kt\ndata class Comment (\n    @SerializedName(\"id\") var comment: Long?,\n    @SerializedName(\"text\") var text: String?,\n    @SerializedName(\"postedBy\") var profile: Profile?,\n    @SerializedName(\"accCreatedTime\") var accCreatedTime: String?\n    )\n```", "```kt\ninterface ProfileService {\n\n    // New Profile registration\n    @Headers(\"Content-Type: application/json\")\n    @POST(\"/profile/new\")\n    fun registerProfile(@Body profile: Profile): Observable<Profile>\n\n    @Headers(\"Content-Type: application/json\")\n    @GET(\"/profile/login\")\n    fun loginProfile(@Query(\"username\") username: String, @Query(\"password\") password: String): Observable<Profile>\n\n    // Get All Profiles\n    @Headers(\"Content-Type: application/json\")\n    @GET(\"/profiles\")\n    fun getUserList(): Observable<List<Profile>>\n\n   // Get Profile by ID\n    @GET(\"/profile/{userId}\")\n    fun getUserById(@Path(\"userId\") userId: Long): Observable<Profile>\n}\n```", "```kt\ninterface PostService {\n    @Headers(\"Content-Type: application/json\")\n    @POST(\"/post/{profile_id}/new\")\n    fun submitNewPost(@Path(\"profile_id\") id: Long, @Query(\"text\") text: String): Observable<List<Post>>\n\n    // Get all posted status\n    @Headers(\"Content-Type: application/json\")\n    @GET(\"/posts\")\n    fun getPostList(): Single<List<Post>>\n\n    // Get all posted status by Profile ID\n    @Headers(\"Content-Type: application/json\")\n    @GET(\"/post/{id}\")\n    fun getPostById(@Path(\"id\") id: Long): Observable<Post>\n\n}\n```", "```kt\ninterface CommentService {\n    // Post comment in a post by Profile ID and Post ID\n    @POST(\"/comment/{user_id}/{post_id}\")\n    fun postCommentByPostId(@Path(\"post_id\") postId: Long, @Path(\"user_id\") userId: Long,\n                            @Query(\"commentText\") commentText: String): Observable<Post>\n\n    // Delete comment in a post by Profile ID and Post ID\n    @DELETE(\"/comment/{user_id}/{post_id}\")\n    fun deleteCommentByPostId(@Path(\"post_id\") postId: Long, @Path(\"user_id\") userId: Long,\n                              @Query(\"commentText\") commentText: String): Observable<Post>\n}\n\n```", "```kt\nobject APIService{\n   fun getRetrofitBuilder(username:String, password:String): Retrofit {\n       return Retrofit.Builder()\n           .client(getOkhttpClient(username, password))\n           .baseUrl(Constants.API_BASE_PATH)\n           .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n           .addConverterFactory(gsonConverter())\n           .build()\n    }\n\n    fun gsonConverter(): GsonConverterFactory {\n        return GsonConverterFactory\n            .create(\n                GsonBuilder()\n                    .setLenient()\n                    .disableHtmlEscaping()\n                    .create()\n            )\n    }\n\n    fun getOkhttpClient(profileName: String, password: String): OkHttpClient {\n        return OkHttpClient.Builder()\n            .addInterceptor(BasicAuthInterceptor(profileName, password))\n            .connectTimeout(30, TimeUnit.SECONDS)\n            .readTimeout(60, TimeUnit.SECONDS)\n            .build()\n    }\n}\n```", "```kt\n// get profile request builder\nfun profileAPICall(username:String, password:String) = getRetrofitBuilder(username, password)\n    .create(ProfileService::class.java)\n\n// get post request builder\nfun postAPICall(username:String, password:String) = getRetrofitBuilder(username, password)\n    .create(PostService::class.java)\n\n// get comment request builder\nfun commentAPICall(username:String, password:String) = getRetrofitBuilder(username, password)\n    .create(CommentService::class.java)\n```", "```kt\n------\n------\n<android.support.v7.widget.CardView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentEnd=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:background=\"@color/reg_body\"\n        app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\"\n        android:layout_marginBottom=\"64dp\" app:layout_constraintBottom_toBottomOf=\"parent\"\n        android:layout_marginStart=\"32dp\" app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginEnd=\"32dp\"\n        android:id=\"@+id/cardView\">\n\n    <android.support.constraint.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:layout_constraintHorizontal_bias=\"0.0\"\n            app:layout_constraintVertical_bias=\"1.0\" android:layout_marginEnd=\"24dp\"\n            android:layout_marginTop=\"32dp\"\n            android:layout_marginStart=\"24dp\" android:layout_marginBottom=\"32dp\">\n        <TextView\n                android:id=\"@+id/LogIn\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentTop=\"true\"\n                android:layout_centerHorizontal=\"true\"\n                android:text=\"@string/title_login\"\n                android:textSize=\"30sp\"\n                android:textStyle=\"bold\"\n                android:typeface=\"monospace\" app:layout_constraintEnd_toEndOf=\"parent\"\n                android:layout_marginEnd=\"8dp\" app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" android:layout_marginStart=\"8dp\"\n                android:layout_marginTop=\"8dp\"/>\n------\n------\n <Button android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"\n                    android:text=\"@string/title_login\"\n                    android:id=\"@+id/reg_submit\"\n\n                    app:layout_constraintTop_toBottomOf=\"@+id/password_title_reg\"\n                    app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\"\n                    android:layout_marginEnd=\"32dp\" android:layout_marginStart=\"32dp\"\n                    android:layout_marginTop=\"64dp\"/>\n------\n------ \n```", "```kt\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_login)\n\n   setUsernamePassword()\n }\n\nprivate fun setUsernamePassword() {\n if (PrefUtils.getUsername(this) != null\n || PrefUtils.getPassword(this) != null) {\n username_input_login.setText(PrefUtils.getUsername(this))\n password_input_login.setText(PrefUtils.getPassword(this))\n }\n}\n```", "```kt\nneed_reg.setOnClickListener {\n    val intent = Intent(this, RegistrationActivity::class.java)\n    startActivity(intent)\n}\n```", "```kt\nprivate fun logInUser(){\n\n    APIClient.profileAPICall(username_input_login.text.toString(), password_input_login.text.toString())\n        .loginProfile(username_input_login.text.toString(),password_input_login.text.toString() )\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n                newUser ->\n            if(newUser.error != null){\n                Toast.makeText(applicationContext,newUser.error!!, Toast.LENGTH_SHORT).show()\n            }else {\n                PrefUtils.storeUsernameID(this, newUser.userID!!)\n                PrefUtils.storeUsername(this, newUser.username!!)\n                PrefUtils.storePassword(this, newUser.password!!)\n                username_input_login.setText(PrefUtils.getUsername(this))\n                password_input_login.setText(PrefUtils.getPassword(this))\n                val intent = Intent(this, MainActivity::class.java)\n                startActivity(intent)\n            }\n        },{\n                error ->\n            Toast.makeText(applicationContext,R.string.err_login_msg, Toast.LENGTH_SHORT).show()\n            Log.wtf(\"******\", error.message.toString())\n        })\n}\n```", "```kt\n <Button android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"\n                        android:text=\"@string/title_reg\"\n                        android:id=\"@+id/reg_submit\" android:layout_marginTop=\"32dp\"\n                        app:layout_constraintTop_toBottomOf=\"@+id/country_title_reg\"\n                        app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginStart=\"32dp\"\n                        app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginEnd=\"32dp\"/>\n\n          -----\n          -----\n\n            </android.support.constraint.ConstraintLayout>\n        </ScrollView>\n    </android.support.v7.widget.CardView>\n\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nclass RegistrationActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_registration)\n\n    }\n}\n```", "```kt\n\nprivate fun validateName(): Boolean {\n    if (username_input_reg.text.toString().trim().isEmpty()) {\n        username_title_reg.error = getString(R.string.err_msg_name)\n        requestFocus(username_input_reg)\n        return false\n    } else {\n        username_title_reg.isErrorEnabled = false\n    }\n\n    return true\n}\n\nprivate fun validateEmail(): Boolean {\n    if (email_input_reg.text.toString().trim().isEmpty() || !isValidEmail(email_input_reg.text.toString().trim())) {\n        email_title_reg.error = getString(R.string.err_msg_email)\n        requestFocus(email_input_reg)\n        return false\n    } else {\n        email_title_reg.isErrorEnabled = false\n    }\n\n    return true\n}\n\nprivate fun validatePassword(): Boolean {\n    if (password_input_reg.text.toString().trim().isEmpty()\n    || con_password_input_reg.text.toString().trim().isEmpty()) {\n\n        if (password_input_reg.text.toString().trim()\n            == con_password_input_reg.text.toString().trim()){\n            password_title_reg.error = getString(R.string.err_match_password)\n            requestFocus(password_title_reg)\n        }\n\n        password_title_reg.error = getString(R.string.err_msg_password)\n        requestFocus(password_title_reg)\n        return false\n    } else {\n        password_title_reg.isErrorEnabled = false\n    }\n\n    return true\n}\n```", "```kt\nprivate inner class MyTextWatcher (private val view: View) : TextWatcher {\n\n    override fun beforeTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {}\n\n    override fun onTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {}\n\n    override fun afterTextChanged(editable: Editable) {\n        when (view.id) {\n            R.id.username_input_reg -> validateName()\n            R.id.email_input_reg -> validateEmail()\n            R.id.input_password -> validatePassword()\n        }\n    }\n}\n```", "```kt\nprivate fun registerUser(){\n    val newProfile = Profile(null,\n        username_input_reg.text.toString(),\n        password_input_reg.text.toString(),\n        email_input_reg.text.toString(),\n        null,\n        first_name_input_reg.text.toString(),\n        last_name_input_reg.text.toString(),\n        contact_input_reg.text.toString(),\n        country_input_reg.text.toString())\n\n        APIClient.profileAPICall(\"\",\"\")\n        .registerProfile(newProfile)\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n                newUser ->\n           if(newUser.duplicate != null){\n                    Toast.makeText(applicationContext,newUser.duplicate!!, Toast.LENGTH_SHORT).show()\n                }else {\n                    PrefUtils.storeUsernameID(this, 1)\n                    PrefUtils.storeUsername(this, username)\n                    PrefUtils.storePassword(this, password)\n                    val intent = Intent(this, LoginActivity::class.java)\n                    startActivity(intent)\n                }\n\n        },{\n                error ->\n                            Toast.makeText(applicationContext,error.message.toString(), Toast.LENGTH_SHORT).show()\n\n        })\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".ui.MainActivity\">\n-----\n-----\n\n<android.support.v7.widget.RecyclerView\n android:id=\"@+id/displayList\"\n android:layout_width=\"0dp\"\n android:layout_height=\"0dp\"\n app:layout_constraintEnd_toEndOf=\"parent\"\n app:layout_constraintStart_toStartOf=\"parent\"\n tools:listitem=\"@layout/post_item\"\n app:layout_constraintBottom_toBottomOf=\"parent\"\n app:layout_constraintHorizontal_bias=\"0.0\" android:layout_marginTop=\"8dp\"\n app:layout_constraintTop_toBottomOf=\"@+id/appBarLayout\"/>\n </android.support.constraint.ConstraintLayout>\n     <android.support.design.widget.FloatingActionButton\n     android:id=\"@+id/fabMain\"\n     android:layout_width=\"wrap_content\"\n     android:layout_height=\"wrap_content\"\n     android:layout_gravity=\"bottom|end\"\n     android:layout_margin=\"@dimen/fab_margin\"\n     app:srcCompat=\"@android:drawable/ic_dialog_email\"/>\n</android.support.design.widget.CoordinatorLayout>\n```", "```kt\nprivate var postList: List<Post> = listOf()\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n        displayList.layoutManager = LinearLayoutManager(this)\n        displayList.setHasFixedSize(true)\n        postRecycleViewAdapter = PostRecycleViewAdapter(this, postList)\n        displayList.adapter = postRecycleViewAdapter\n}\n```", "```kt\nprivate fun getAllPosts() {\n        APIClient.postAPICall(PrefUtils.getUsername(this)!!, PrefUtils.getPassword(this)!!)\n        .getPostList()\n            .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n            newPostList ->\n            postRecycleViewAdapter.setItems(newPostList)\n postRecycleViewAdapter.notifyDataSetChanged()\n        },{\n                error ->\n       Toast.makeText(applicationContext, error.message.toString(), Toast.LENGTH_SHORT).show()\n        })\n}\n```", "```kt\nprivate fun submitPost(id: Long, text: String){\n    APIClient.postAPICall(PrefUtils.getUsername(this)!!, PrefUtils.getPassword(this)!!)\n        .submitNewPost(id, text)\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n                newPostList ->\n            postRecycleViewAdapter.setItems(newPostList)\n            postRecycleViewAdapter.notifyDataSetChanged()\n        },{\n                error ->\n      Toast.makeText(applicationContext, error.message.toString(), Toast.LENGTH_SHORT).show()\n        })\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <item\n            android:id=\"@+id/profileMenu\"\n            android:icon=\"@drawable/ic_face_white_24dp\"\n app:showAsAction=\"always\"            android:title=\"@string/title_profile\">\n    </item>\n    <item\n            android:id=\"@+id/postUpdate\"\n            android:icon=\"@drawable/ic_autorenew_white_24dp\"\n app:showAsAction=\"always\"            android:title=\"@string/title_update\">\n    </item>\n</menu>\n```", "```kt\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.menu_main, menu)\n        return true\n    }\n\n    override fun onOptionsItemSelected(item: MenuItem?): Boolean {\n        when (item!!.itemId) {\n            R.id.profileMenu -> {\n                val intent = Intent(this, ProfileActivity::class.java)\n                startActivity(intent)\n            }\n            R.id.postUpdate -> {\n                getAllPosts()\n            }\n        }\n        return true\n    }\n```", "```kt\n----\n----\n        <TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\n                  tools:text=\"@tools:sample/date/ddmmyy\"\n                  android:id=\"@+id/postedDate\"\n                  android:textAppearance=\"?android:textAppearanceSmall\"\n                  app:layout_constraintTop_toBottomOf=\"@+id/profileName\"\n                  app:layout_constraintStart_toStartOf=\"@+id/profileName\"\n                  android:layout_marginTop=\"4dp\"\n                  app:layout_constraintBottom_toBottomOf=\"parent\" android:layout_marginBottom=\"4dp\"/>\n    </android.support.constraint.ConstraintLayout>\n\n    <TextView android:layout_width=\"0dp\" android:layout_height=\"wrap_content\"\n              tools:text=\"@tools:sample/lorem\"\n              android:id=\"@+id/postText\"\n              android:padding=\"4dp\"\n              android:textAppearance=\"?android:textAppearanceSmall\"\n              app:layout_constraintStart_toStartOf=\"parent\"\n              app:layout_constraintEnd_toEndOf=\"parent\" android:layout_marginTop=\"4dp\"\n              app:layout_constraintTop_toBottomOf=\"@+id/constraintLayout\"/>\n----\n----\n```", "```kt\nclass PostRecycleViewAdapter(private var context: Context,\n                       private val postList: List<Post>):\nRecyclerView.Adapter<PostRecycleViewAdapter.ViewHolder>() {\n-----\n-----\n}\n```", "```kt\nclass ViewHolder(view: View): RecyclerView.ViewHolder(view){\n    val postRoot = view.findViewById(R.id.postRoot) as ConstraintLayout\n\n    val profileFullName = view.findViewById(R.id.profileFullNamePost) as TextView\n    val username = view.findViewById(R.id.usernamePost) as TextView\n    val postedDate = view.findViewById(R.id.postedDate) as TextView\n    val postText = view.findViewById(R.id.postText) as TextView\n}\n```", "```kt\noverride fun onCreateViewHolder(viewGroup: ViewGroup, p1: Int): ViewHolder {\n    val layoutInflater = LayoutInflater.from(context).inflate(R.layout.post_item, viewGroup, false)\n    return ViewHolder(layoutInflater)\n}\n```", "```kt\noverride fun onBindViewHolder(viewHolder: ViewHolder, position: Int) {\n\n    val userDetails = postList[position]\n\n    viewHolder.profileFullName.text = \"${userDetails.profile!!.firstName} ${userDetails.profile!!.lastName} \"\n    viewHolder.username.text = userDetails.profile!!.username\n    viewHolder.postedDate.text = userDetails.postCreatedTime\n    viewHolder.postText.text = userDetails.text\n\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n    <!--full name-->\n\n    <TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\n              android:id=\"@+id/profileFullNameTitlePro\"\n              android:textStyle=\"bold\"\n              android:text=\"@string/title_full_names\"\n              android:textAppearance=\"?android:textAppearanceSmall\"\n              android:layout_marginStart=\"8dp\"\n              app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginTop=\"32dp\"\n              app:layout_constraintTop_toBottomOf=\"@+id/usernamePro\" android:layout_marginEnd=\"8dp\"\n              app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintHorizontal_bias=\"0.0\"/>\n\n    <TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\"\n              tools:text=\"@tools:sample/full_names\"\n              android:id=\"@+id/profileFullNamePro\"\n              android:textAppearance=\"?android:textAppearanceSmall\"\n              app:layout_constraintTop_toTopOf=\"@+id/profileFullNameTitlePro\"\n              app:layout_constraintBottom_toBottomOf=\"@+id/profileFullNameTitlePro\"\n              app:layout_constraintEnd_toEndOf=\"parent\"\n              android:layout_marginEnd=\"160dp\"\n              app:layout_constraintVertical_bias=\"1.0\"/>\n\n------\n------\n</android.support.constraint.ConstraintLayout>\n```", "```kt\nclass ProfileActivity : AppCompatActivity() {\n\n        private var username: String = \"\"\n    private var password: String = \"\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_profile)\n        setTitleName() \n\n        username = PrefUtils.getUsername(this)!!\n        password = PrefUtils.getPassword(this)!!\n    }\n}\n```", "```kt\nprivate fun getUser(){\n        APIClient.profileAPICall(username,password)\n            .getUserById(PrefUtils.getUsernameID(this)!!)\n            .subscribeOn(Schedulers.io())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe({\n                    myUser ->\n\n                usernamePro.text = myUser.username\n                profileFullNamePro.text = \"${myUser.firstName} ${myUser.lastName}\"\n                emailPro.text = myUser.email\n                contactNumberPro.text = myUser.contactNumber\n                countryPro.text = myUser.country\n            },{\n                    error ->\n                UtilMethods.hideLoading()\n                Log.wtf(\"******\", error.message.toString())\n            })\n    }\n```", "```kt\n-----\n----\n<android.support.v7.widget.RecyclerView\n        android:id=\"@+id/displayList_com\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        tools:listitem=\"@layout/post_item\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@+id/postRoot_pd\"\n        android:layout_marginBottom=\"8dp\" app:layout_constraintBottom_toBottomOf=\"parent\"\n        android:layout_marginStart=\"16dp\" android:layout_marginEnd=\"16dp\" android:layout_marginTop=\"8dp\"/>\n\n<android.support.constraint.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/postRoot_pd\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintTop_toBottomOf=\"@+id/appBarLayout_pd\" app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\" android:layout_marginEnd=\"8dp\"\n        android:layout_marginStart=\"8dp\">\n-----\n----\n```", "```kt\nprivate var postId:Long = -1\n\nif(intent.extras!=null){\n    postId = intent.extras.getLong(\"postId\")\n}\n```", "```kt\n@SuppressLint(\"CheckResult\")\nprivate fun getPostById(id: Long){\n    UtilMethods.showLoading(this)\n    APIClient.postAPICall(PrefUtils.getUsername(this)!!, PrefUtils.getPassword(this)!!)\n        .getPostById(id)\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n                post ->\n            postText_pd.text = post.text\n            profileFullNamePost_pd.text = \"${post.profile!!.firstName} ${post.profile!!.lastName}\"\n            usernamePost_pd.text = post.profile!!.username\n            postedDate_pd.text = SimpleDateFormat(Constants.TIME_FORMAT).format(post.postCreatedTime!!)\n\n            commentList = post.comment!!\n\n            Log.wtf(\"******\", commentList.toString())\n            commentRecycleViewAdapter.setItems(commentList)\n            commentRecycleViewAdapter.notifyDataSetChanged()\n\n            UtilMethods.hideLoading()\n        },{\n                error ->\n            UtilMethods.hideLoading()\n            Log.wtf(\"******\", error.message.toString())\n            Toast.makeText(applicationContext, error.message.toString(), Toast.LENGTH_SHORT).show()\n        })\n}\n```", "```kt\n@SuppressLint(\"CheckResult\")\nprivate fun submitComment(id: Long, text: String){\n    UtilMethods.showLoading(this)\n    APIClient.commentAPICall(PrefUtils.getUsername(this)!!, PrefUtils.getPassword(this)!!)\n        .postCommentByPostId(id, PrefUtils.getUsernameID(this)!!,text)\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe({\n                newPostList ->\n            commentList = newPostList.comment!!\n\n            Log.wtf(\"******\", commentList.toString())\n            commentRecycleViewAdapter.setItems(commentList)\n            commentRecycleViewAdapter.notifyDataSetChanged()\n            UtilMethods.hideLoading()\n        },{\n                error ->\n            UtilMethods.hideLoading()\n            Log.wtf(\"******\", error.message.toString())\n            Toast.makeText(applicationContext, error.message.toString(), Toast.LENGTH_SHORT).show()\n        })\n}\n```"]