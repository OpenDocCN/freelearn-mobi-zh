["```swift\n    this.imagePicker = new UIImagePickerController();\n    this.imagePicker.FinishedPickingMedia += this.ImagePicker_FinishedPickingMedia;\n    this.imagePicker.Canceled += this.ImagePicker_Cancelled;\n    this.imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;\n    this.btnSelect.TouchUpInside += async (s, e) => {\n      await this.PresentViewControllerAsync(this.imagePicker, true);\n    };\n    ```", "```swift\n    private async void ImagePicker_FinishedPickingMedia (object sender, UIImagePickerMediaPickedEventArgs e)\n    {\n      UIImage pickedImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;\n      this.imageView.Image = pickedImage;\n      await this.imagePicker.DismissViewControllerAsync(true);\n    }\n    private async void ImagePicker_Cancelled (object sender, EventArgs e)\n    {\n      await this.imagePicker.DismissViewControllerAsync(true);\n    }\n    ```", "```swift\nUIImage pickedImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;\n```", "```swift\nawait this.imagePicker.DismissViewControllerAsync(true);\n```", "```swift\nthis.imagePicker.MediaTypes = new string[] { \"public.image\", \"public.movie\" };\n```", "```swift\nif (e.Info[UIImagePickerController.MediaType].ToString() == \"public.movie\")\n{\n  NSUrl mediaUrl = e.Info[UIImagePickerController.MediaURL] as NSUrl;\n  // Do something useful with the media url.\n}\n```", "```swift\n    if (UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))\n    {\n      this.imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;\n    }  else\n    {\n      this.imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;\n    }\n    ```", "```swift\n    pickedImage.SaveToPhotosAlbum((s, error) => {\n      if (null != error)\n      {\n        Console.WriteLine(\"Image not saved! Message: {0}\", error.LocalizedDescription);\n      }\n    } );\n    ```", "```swift\nif (UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))\n```", "```swift\nthis.imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;\n```", "```swift\nif (null != error)\n{\n  Console.WriteLine(\"Image not saved! Message: {0}\", error.LocalizedDescription);\n}\n```", "```swift\n    this.moviePlayer = new MPMoviePlayerController(NSUrl.FromFilename(\"video.mov\"));\n    this.moviePlayer.View.Frame = new RectangleF(0f, 20f, this.View.Frame.Width, 320f);\n    this.View.AddSubview(this.moviePlayer.View);\n    this.playbackStateChanged = MPMoviePlaybackController.Notifications.ObservePlaybackStateDidChange(this.MoviePlayer_PlaybackStateChanged);\n    this.finishedPlaying = MPMoviePlaybackController.Notifications.ObservePlaybackDidFinish(this.MoviePlayer_FinishedPlayback);\n    this.btnPlayVideo.TouchUpInside += delegate {\n      this.moviePlayer.Play();\n    } ;\n    ```", "```swift\n    private void MoviePlayer_PlaybackStateChanged(object sender, NSNotificationEventArgs e)\n    {\n      Console.WriteLine(\"Movie player load state changed: {0}\", this.moviePlayer.PlaybackState);\n    }\n    private void MoviePlayer_FinishedPlayback(object sender, \n      NSNotificationEventArgs e)\n    {\n      Console.WriteLine(\"Movie player finished playing.\");\n    }\n    ```", "```swift\nthis.moviePlayer = new MPMoviePlayerController(NSUrl.FromFilename(\"video.mov\"));\n```", "```swift\nthis.moviePlayer.View.Frame = new RectangleF(0f, 20f, this.View.Frame.Width, 320f);\nthis.View.AddSubview(this.moviePlayer.View);\n```", "```swift\nConsole.WriteLine(\"Movie player load state changed: {0}\", this.moviePlayer.PlaybackState);\n```", "```swift\n    using MonoTouch.MediaPlayer;\n    ```", "```swift\n    private MPMusicPlayerController musicPlayer;\n    private MPMediaPickerController mediaPicker;\n    ```", "```swift\n    this.mediaPicker = new MPMediaPickerController(MPMediaType.Music);\n    this.mediaPicker.ItemsPicked += MediaPicker_ItemsPicked;\n    this.mediaPicker.DidCancel += MediaPicker_DidCancel;\n    this.musicPlayer = \n     MPMusicPlayerController.ApplicationMusicPlayer;\n    this.btnSelect.TouchUpInside += async (s, e) => {\n      await this.PresentViewControllerAsync(this.mediaPicker, true);\n    } ;\n    this.btnPlay.TouchUpInside += (s, e) => {\n      this.musicPlayer.Play();\n    } ;\n    this.btnStop.TouchUpInside += (s, e) => {\n      this.musicPlayer.Stop();\n    } ;\n    ```", "```swift\n    private async void MediaPicker_ItemsPicked (object sender, ItemsPickedEventArgs e)\n    {\n      this.musicPlayer.SetQueue(e.MediaItemCollection);\n      await this.DismissViewControllerAsync(true);\n    }\n    private async void MediaPicker_DidCancel (object sender, EventArgs e)\n    {\n      await this.mediaPicker.DismissViewControllerAsync(true);\n    }\n    ```", "```swift\nthis.mediaPicker = new MPMediaPickerController(MPMediaType.Music);\n```", "```swift\nthis.mediaPicker.ItemsPicked += MediaPicker_ItemsPicked;\nthis.mediaPicker.DidCancel += MediaPicker_DidCancel;\n```", "```swift\nthis.musicPlayer.SetQueue(e.MediaItemCollection);\n```", "```swift\nConsole.WriteLine(this.musicPlayerController.NowPlayingItem.ValueForProperty(MPMediaItem.TitleProperty));\n```", "```swift\nusing MonoTouch.AVFoundation;\n//...\nAVAudioPlayer audioPlayer = AVAudioPlayer.FromUrl(new NSUrl(\"path/to/sound file\"));\naudioPlayer.Play();\n```", "```swift\n    using System.IO;\n    using MonoTouch.AVFoundation;\n    using MonoTouch.AudioToolbox;\n    ```", "```swift\n    NSUrl soundFileUrl = null;\n    NSError error = null;\n    AVAudioSession session = AVAudioSession.SharedInstance();\n    session.SetCategory(AVAudioSession.CategoryPlayAndRecord, out error);\n    session.SetActive(true, out error);\n    bool grantedPermission = false;\n    session.RequestRecordPermission((granted) => {\n      if (granted) {\n        grantedPermission = true;\n        string soundFile = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"sound.wav\");\n        soundFileUrl = new NSUrl(soundFile);\n        NSDictionary recordingSettings = NSDictionary.FromObjectAndKey(AVAudioSettings.AVFormatIDKey, NSNumber.FromInt32((int)AudioFileType.Wave));\n        this.audioRecorder = AVAudioRecorder.ToUrl(soundFileUrl, recordingSettings, out error);\n      } else {\n        this.lblStatus.Text = \"Permission to microphone refused\";\n      }\n    });\n\n    this.btnStart.TouchUpInside += (s, e) => {\n      if (grantedPermission) {\n        this.audioRecorder.Record();\n        this.lblStatus.Text = \"Recordingâ€¦\";\n      }\n    };\n    this.btnStop.TouchUpInside += (s, e) => {\n      if (grantedPermission) {\n        this.audioRecorder.Stop();\n       this.lblStatus.Text = \"Idle\";\n        AVAudioPlayer player = AVAudioPlayer.FromUrl(soundFileUrl);\n        player.Play();\n      }\n    };\n    ```", "```swift\nNSError error = null;\nAVAudioSession session = AVAudioSession.SharedInstance();\nsession.SetCategory(AVAudioSession.CategoryPlayAndRecord, out error);\nsession.SetActive(true, out error);\n```", "```swift\nsession.RequestRecordPermission((granted) => {\n  if (granted) {\n    grantedPermission = true;\n    //..\n```", "```swift\nthis.audioRecorder = AVAudioRecorder.ToUrl(soundFileUrl, recordingSettings, out error);\n```", "```swift\nNSDictionary recordingSettings = NSDictionary.FromObjectAndKey(AVAudioSettings.AVFormatIDKey, NSNumber.FromInt32((int)AudioFileType.WAVE));\n```", "```swift\nthis.audioRecorder.Record();\n```", "```swift\nthis.audioRecorder.Stop();\nAVAudioPlayer player = AVAudioPlayer.FromUrl(soundFileUrl);\nplayer.Play();\n```", "```swift\nThreadPool.QueueUserWorkItem(delegate {\n  while (this.audioRecorder.Recording)\n  {\n    this.audioRecorder.UpdateMeters();\n    Console.WriteLine(this.audioRecorder.PeakPower(0));\n  }\n} );\n```", "```swift\n    using MonoTouch.AssetsLibrary;\n    ```", "```swift\n    this.btnEnumerate.TouchUpInside += (s, e) => {\n      if (ALAssetsLibrary.AuthorizationStatus == ALAuthorizationStatus.Authorized ||\n        ALAssetsLibrary.AuthorizationStatus == ALAuthorizationStatus.NotDetermined) {\n        this.assetsLibrary = new ALAssetsLibrary();\n        this.assetsLibrary.Enumerate(ALAssetsGroupType.All, this.GroupsEnumeration, this.GroupsEnumerationFailure);\n      }\n    } ;\n    ```", "```swift\n    private void GroupsEnumeration(ALAssetsGroup assetGroup, ref bool stop)\n    {\n      if (null != assetGroup)\n      {\n        stop = false;\n        assetGroup.SetAssetsFilter(ALAssetsFilter.AllPhotos);\n        assetGroup.Enumerate(this.AssetEnumeration);\n      }\n    }\n    private void AssetEnumeration(ALAsset asset, int index, ref bool stop)\n    {\n      if (null != asset)\n      {\n        stop = false;\n        Console.WriteLine(\"Asset url: {0}\", asset.DefaultRepresentation.Url.AbsoluteString);\n      }\n    }\n    private void GroupsEnumerationFailure(NSError error)\n    {\n      if (null != error)\n      {\n        Console.WriteLine(\"Error enumerating asset groups! Message: {0}\", error.LocalizedDescription);\n      }\n    }\n    ```", "```swift\nthis.assetsLibrary.Enumerate(ALAssetsGroupType.All, this.GroupsEnumeration, this.GroupsEnumerationFailure);\n```", "```swift\nprivate void GroupsEnumeration(ALAssetsGroup assetGroup, ref bool stop)\n```", "```swift\nif (null != assetGroup)\n{\n  // Continue enumerating\n  stop = false;\n  // Determine what assets to enumerate\n  assetGroup.SetAssetsFilter(ALAssetsFilter.AllPhotos);\n  // Enumerate assets\n  assetGroup.Enumerate(this.AssetEnumeration);\n}\n```", "```swift\nif (null != asset)\n{\n  // Continue enumerating assets\n  stop = false;\n  // Output the asset url\n  Console.WriteLine(\"Asset url: {0}\", asset.DefaultRepresentation.Url.AbsoluteString);\n}\n```", "```swift\nCGImage image = asset.DefaultRepresentation.GetImage();\n```", "```swift\nNSDictionary metaData = asset.DefaultRepresentation.Metadata;\nif (null != metaData)\n{\n  NSDictionary exifData = (NSDictionary)metaData[new NSString(\"{Exif}\")];\n}\n```"]