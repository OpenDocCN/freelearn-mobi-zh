["```kt\n    plugins {\n        id 'com.android.library'\n        id 'kotlin-android'\n    }\n    ```", "```kt\n    dependencies {\n        implementation coroutines.coroutinesAndroid\n        testImplementation test.junit\n        testImplementation test.coroutines\n        testImplementation test.mockito\n    }\n    ```", "```kt\n    class GetPostsWithUsersWithInteractionUseCase(\n        configuration: Configuration,\n        private val postRepository: PostRepository,\n        private val userRepository: UserRepository,\n        private val interactionRepository: \n            InteractionRepository\n    ) : UseCase<GetPostsWithUsersWithInteractionUseCase.\n        Request,\n            GetPostsWithUsersWithInteractionUseCase.\n                Response>(configuration) {\n        …\n    }\n    ```", "```kt\n    class GetPostUseCase(\n        configuration: Configuration,\n        private val postRepository: PostRepository\n    ) : UseCase<GetPostUseCase.Request, GetPostUseCase.\n        Response>(configuration) {\n        …\n    }\n    ```", "```kt\n    class GetUserUseCase(\n        configuration: Configuration,\n        private val userRepository: UserRepository\n    ) : UseCase<GetUserUseCase.Request, GetUserUseCase.\n        Response>(configuration) {\n        …\n    }\n    ```", "```kt\n    class UpdateInteractionUseCase(\n        configuration: Configuration,\n        private val interactionRepository: \n            InteractionRepository\n    ) : UseCase<UpdateInteractionUseCase.Request, \n       UpdateInteractionUseCase.Response>(configuration) {\n        …\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class UseCaseModule {\n        …\n        @Provides\n        fun   \n        provideGetPostsWithUsersWithInteractionUseCase(\n            configuration: UseCase.Configuration,\n            postRepository: PostRepository,\n            userRepository: UserRepository,\n            interactionRepository: InteractionRepository\n        ): GetPostsWithUsersWithInteractionUseCase = \n           GetPostsWithUsersWithInteractionUseCase(\n            configuration,\n            postRepository,\n            userRepository,\n            interactionRepository\n        ) \n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class UseCaseModule {\n        …\n        @Provides\n        fun provideGetPostUseCase(\n            configuration: UseCase.Configuration,\n            postRepository: PostRepository\n        ): GetPostUseCase = GetPostUseCase(\n            configuration,\n            postRepository\n        )\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class UseCaseModule {\n        …\n        @Provides\n        fun provideGetUserUseCase(\n            configuration: UseCase.Configuration,\n            userRepository: UserRepository\n        ): GetUserUseCase = GetUserUseCase(\n            configuration,\n            userRepository\n        )\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class UseCaseModule {\n        …\n        @Provides\n        fun provideUpdateInteractionUseCase(\n            configuration: UseCase.Configuration,\n            interactionRepository: InteractionRepository\n        ): UpdateInteractionUseCase = \n           UpdateInteractionUseCase(\n            configuration,\n            interactionRepository\n        )\n    }\n    ```", "```kt\n    plugins {\n        id 'com.android.library'\n        id 'kotlin-android'\n    }\n    ```", "```kt\n    dependencies {\n        implementation(project(path: \":domain\"))\n        implementation coroutines.coroutinesAndroid\n        testImplementation test.junit\n        testImplementation test.coroutines\n        testImplementation test.mockito\n    }\n    ```", "```kt\n    class InteractionRepositoryImpl(\n        private val interactionDataSource: LocalInteractionDataSource\n    ) : InteractionRepository {\n        …\n    }\n    ```", "```kt\n    class PostRepositoryImpl(\n        private val remotePostDataSource: \n            RemotePostDataSource,\n        private val localPostDataSource: \n            LocalPostDataSource\n    ) : PostRepository {\n        …\n    }\n    ```", "```kt\n    class UserRepositoryImpl(\n        private val remoteUserDataSource: \n            RemoteUserDataSource,\n        private val localUserDataSource: \n            LocalUserDataSource\n    ) : UserRepository {\n        …\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    abstract class RepositoryModule {\n        @Provides\n        fun providePostRepository(\n            remotePostDataSource: RemotePostDataSource,\n            localPostDataSource: LocalPostDataSource\n        ): PostRepository = PostRepositoryImpl(\n            remotePostDataSource,\n            localPostDataSource\n        )\n        …\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    abstract class RepositoryModule {\n        …\n        @Provides\n        fun provideUserRepository(\n            remoteUserDataSource: RemoteUserDataSource,\n            localUserDataSource: LocalUserDataSource\n        ): UserRepository = UserRepositoryImpl(\n            remoteUserDataSource,\n            localUserDataSource\n        )\n        …\n    }\n    ```", "```kt\n    @Module\n    @InstallIn(SingletonComponent::class)\n    abstract class RepositoryModule {\n        …\n        @Provides\n        fun provideInteractionRepository(\n            interactionDataSource: \n                LocalInteractionDataSource\n        ): InteractionRepository = \n           InteractionRepositoryImpl(\n            interactionDataSource\n        )\n        …\n    }\n    ```", "```kt\ndependencies {\n    …\n    androidTestImplementation \"androidx.test:core:1.4.0\"\n    androidTestImplementation \"androidx.test:runner:1.4.0 \"\n    androidTestImplementation \"androidx.test:rules:1.4.0 \"\n    androidTestImplementation \n        \"androidx.test.ext:junit:1.1.3 \"\n    androidTestImplementation \n        \"androidx.test.espresso:espresso-core:3.4.0 \"\n    androidTestImplementation \"androidx.test.espresso.\n        idling:idling-concurrent:3.4.0 \"\n}\n```", "```kt\n    @Test\n    fun myTest(){\n        ActivityScenario.launch(MainActivity::class.java).\n            moveToState(Lifecycle.State.RESUMED)\n        onView(withId(R.id.my_id))\n            .perform(click())\n            .check(isDisplayed())\n    }\n```", "```kt\nandroid {\n    …\n    defaultConfig {\n        …\n        testInstrumentationRunnerArguments \n            clearPackageData: 'true'\n        testOptions {\n            execution 'ANDROIDX_TEST_ORCHESTRATOR'\n        }\n        …\n    }\n}\n```", "```kt\ndependencies {\n    …\n    androidTestUtil \"androidx.test:orchestrator: 1.4.1\"\n}\n```", "```kt\nclass MyClass(private val countingIdlingResource: \n    CountingIdlingResource) {\n    fun doOperation() {\n        countingIdlingResource.increment()\n        // Perform long running operation\n        countingIdlingResource.decrement()\n    }\n}\n```", "```kt\n    lateinit var countingIdlingResource : CountingIdlingResource\n    @Before\n    fun setUp(){\n        IdlingRegistry.getInstance().register\n            (countingIdlingResource)\n    }\n    @After\n    fun tearDown(){\n        IdlingRegistry.getInstance().\n            unregister(countingIdlingResource)\n    }\n```", "```kt\ninterface MyInterface {\n    fun doOperation()\n}\nclass MyClass : MyInterface {\n    override fun doOperation() {\n        // Implement long running operation\n    }\n}\n```", "```kt\nclass MyDecoratedClass(\n    private val myInterface: MyInterface,\n    private val countingIdlingResource: \n        CountingIdlingResource\n) : MyInterface {\n    override fun doOperation() {\n        countingIdlingResource.increment()\n        myInterface.doOperation()\n        countingIdlingResource.decrement()\n    }\n}\n```", "```kt\ndependencies {\n    androidTestImplementation \"com.google.dagger:hilt-\n        android-testing:2.40.5\"\n    kaptAndroidTest \"com.google.dagger:hilt-android-\n        compiler: 2.40.5\"\n}\n```", "```kt\nclass MyTestRunner : AndroidJUnitRunner() {\n    override fun newApplication(cl: ClassLoader?, name: \n        String?, context: Context?): Application {\n        return super.newApplication(cl, \n            HiltTestApplication::class.java.name, context)\n    }\n}\n```", "```kt\nandroid {\n    …\n    defaultConfig {\n        …\n        testInstrumentationRunner \"com.test.MyTestRunner\"\n        …\n        }\n    }\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nabstract class MyModule {\n    @Binds\n    abstract fun bindMyClass(myClass: MyClass): MyInterface\n}\n```", "```kt\n@Module\n@TestInstallIn(\n    components = [SingletonComponent::class],\n    replaces = [MyModule::class]\n)\nclass MyDecoratedModule {\n    @Provides\n    fun provideIdlingResource() = \n        CountingIdlingResource(\"my-idling-resource\")\n    @Provides\n    fun provideMyDecoratedClass(countingIdlingResource:  \n        CountingIdlingResource) =\n        MyDecoratedClass(MyClass(), countingIdlingResource)\n}\n```", "```kt\n@HiltAndroidTest\nclass MyActivityTest {\n    @get:Rule(order = 0)\n    var hiltAndroidRule = HiltAndroidRule(this)\n    @Inject\n    lateinit var idlingResource: CountingIdlingResources\n    @Before\n    fun setUp(){\n        hiltAndroidRule.inject()\n        IdlingRegistry.getInstance().register\n            (idlingResource)\n    }\n    @After\n    fun tearDown(){\n       IdlingRegistry.getInstance().unregister\n           (idlingResource)\n    }\n}\n```", "```kt\ndependencies {\n    androidTestImplementation \"androidx.compose.ui:ui-test-\n        junit4:1.0.5\"\n    debugImplementation \"androidx.compose.ui:ui-test-\n        manifest:1.0.5\"\n}\n```", "```kt\nclass MyTest {\n    @get:Rule\n    var composeTestRule = createAndroidComposeRule\n        (MyActivity::class.java)\n}\n```", "```kt\n    @Test\n    fun testDisplayList() {\n        composeTestRule.onNode()\n            .assertIsDisplayed()\n            .performClick()\n    }\n```", "```kt\n    lateinit var idlingResource: IdlingResource\n    @Before\n    fun setUp() {\n        composeTestRule.registerIdlingResource\n            (idlingResource)\n    }\n    @After\n    fun tearDown() {\n        composeTestRule.unregisterIdlingResource\n            (idlingResource)\n    }\n```", "```kt\n    buildscript {\n        ext {\n            …\n            versions = [\n                    …\n                    androidTestCore      : \"1.4.0\",\n                    androidTestJunit     : \"1.1.3\",\n                    orchestrator         : \"1.4.1\"\n            ]\n            …\n    }\n    ```", "```kt\n    buildscript {\n        ext {\n           …\n            androidTest = [\n                    junit             : \"androidx.test.ext\n                        :junit:${versions.espressoJunit}\",\n                    espressoCore      : \"androidx.test.\n                        espresso:espresso-core:${versions.\n                            espressoCore}\",\n                    idlingResource    : \"androidx.test.\n                        espresso:espresso-idling-resource\n                            :${versions.espressoCore}\",\n                    composeUiTestJunit: \"androidx.compose.\n                        ui:ui-test-junit4:$\n                            {versions.compose}\",\n                    composeManifest   : \"androidx.compose\n                        .ui:ui-test-manifest:$\n                            {versions.compose}\",\n                    hilt              : \"com.google.\n                        dagger:hilt-android-testing:$\n                            {versions.hilt}\",\n                    hiltCompiler      : \"com.google.\n                         dagger:hilt-android-compiler:$\n                            {versions.hilt}\",\n                    core              : \"androidx.test:\n                        core:${versions.androidTestCore}\",\n                    runner            : \"androidx.test:\n                        runner:$\n                            {versions.androidTestCore}\",\n                    rules             : \"androidx.test:\n                       rules:${versions.androidTestCore}\",\n                    orchestrator      : \"androidx.test:\n                        orchestrator:$\n                            {versions.orchestrator}\"\n            ]\n        }\n        …\n    }\n    ```", "```kt\n    dependencies{\n        …\n        androidTestImplementation androidTest.junit\n        androidTestImplementation androidTest.espressoCore\n        androidTestImplementation \n            androidTest.idlingResource\n        androidTestImplementation androidTest.core\n        androidTestImplementation androidTest.rules\n        androidTestImplementation androidTest.runner\n        androidTestImplementation androidTest.hilt\n        kaptAndroidTest androidTest.hiltCompiler\n        androidTestImplementation \n            androidTest.composeUiTestJunit\n        debugImplementation androidTest.composeManifest\n        androidTestUtil androidTest.orchestrator\n    }\n    ```", "```kt\n    class PostAppTestRunner : AndroidJUnitRunner() {\n        override fun newApplication(cl: ClassLoader?, \n            name: String?, context: Context?): Application {\n            return super.newApplication(cl, \n                HiltTestApplication::class.java.name, \n                    context)\n        }\n    }\n    ```", "```kt\n    android {\n        …\n        defaultConfig {\n            …\n            testInstrumentationRunner \"{package-name}.\n                PostAppTestRunner\"\n            testInstrumentationRunnerArguments \n                clearPackageData: 'true'\n            testOptions {\n                execution 'ANDROIDX_TEST_ORCHESTRATOR'\n            }\n        }\n    }\n    ```", "```kt\n    class ComposeCountingIdlingResource(name: String) : \n        IdlingResource {\n        private val countingIdlingResource = \n            CountingIdlingResource(name)\n        override val isIdleNow: Boolean\n            get() = countingIdlingResource.isIdleNow\n        fun increment() = countingIdlingResource.\n            increment()\n        fun decrement() = countingIdlingResource.\n            decrement()\n    }\n    ```", "```kt\n    fun <T> Flow<T>.attachIdling(\n        countingIdlingResource:  \n            ComposeCountingIdlingResource\n    ): Flow<T> {\n        return onStart {\n            countingIdlingResource.increment()\n        }.onEach {\n            countingIdlingResource.decrement()\n        }\n    }\n    ```", "```kt\n    class IdlingInteractionRepository(\n        private val interactionRepository: InteractionRepository,\n        private val countingIdlingResource: ComposeCountingIdlingResource\n    ) : InteractionRepository {\n        override fun getInteraction(): Flow<Interaction> {\n            return interactionRepository.getInteraction()\n                .attachIdling(countingIdlingResource)\n        }\n        override fun saveInteraction(interaction: \n            Interaction): Flow<Interaction> {\n            return interactionRepository.\n                saveInteraction(interaction)\n                .attachIdling(countingIdlingResource)\n        }\n    }\n    ```", "```kt\n    class IdlingPostRepository(\n        private val postRepository: PostRepository,\n        private val countingIdlingResource: \n            ComposeCountingIdlingResource\n    ) : PostRepository {\n        override fun getPosts(): Flow<List<Post>> =\n            postRepository.getPosts().attachIdling\n                (countingIdlingResource)\n        override fun getPost(id: Long): Flow<Post> =\n            postRepository.getPost(id).\n                attachIdling(countingIdlingResource)\n    }\n    ```", "```kt\n    class IdlingUserRepository(\n        private val userRepository: UserRepository,\n        private val countingIdlingResource: \n            ComposeCountingIdlingResource\n    ) : UserRepository {\n        override fun getUsers(): Flow<List<User>> =\n            userRepository.getUsers()\n                .attachIdling(countingIdlingResource)\n        override fun getUser(id: Long): Flow<User> =\n            userRepository.getUser(id)\n                .attachIdling(countingIdlingResource)\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RepositoryModule::class]\n    )\n    class IdlingRepositoryModule {\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RepositoryModule::class]\n    )\n    class IdlingRepositoryModule {\n        @Singleton\n        @Provides\n        fun provideIdlingResource(): \n            ComposeCountingIdlingResource =\n            ComposeCountingIdlingResource\n                (\"repository-idling\")\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RepositoryModule::class]\n    )\n    class IdlingRepositoryModule {\n        …\n        @Provides\n        fun providePostRepository(\n            remotePostDataSource: RemotePostDataSource,\n            localPostDataSource: LocalPostDataSource,\n            countingIdlingResource: \n                ComposeCountingIdlingResource\n        ): PostRepository = IdlingPostRepository(\n            PostRepositoryImpl(\n                remotePostDataSource,\n                localPostDataSource\n            ),\n            countingIdlingResource\n        )\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RepositoryModule::class]\n    )\n    class IdlingRepositoryModule {\n        …\n        @Provides\n        fun provideUserRepository(\n            remoteUserDataSource: RemoteUserDataSource,\n            localUserDataSource: LocalUserDataSource,\n            countingIdlingResource: \n                ComposeCountingIdlingResource\n        ): UserRepository = IdlingUserRepository(\n            UserRepositoryImpl(\n                remoteUserDataSource,\n                localUserDataSource\n            ),\n            countingIdlingResource\n        )\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RepositoryModule::class]\n    )\n    class IdlingRepositoryModule {\n        …\n        @Provides\n        fun provideInteractionRepository(\n            interactionDataSource: \n                LocalInteractionDataSource,\n            countingIdlingResource: \n                ComposeCountingIdlingResource\n        ): InteractionRepository = \n           IdlingInteractionRepository(\n            InteractionRepositoryImpl(\n                interactionDataSource\n            ),\n            countingIdlingResource\n        )\n    }\n    ```", "```kt\n    class MockRemoteUserDataSource @Inject constructor() : \n        RemoteUserDataSource {\n        private val users = listOf(\n            User(\n                id = 1L,\n                name = \"name1\",\n                username = \"username1\",\n                email = \"email1\"\n            ),\n            User(\n                id = 2L,\n                name = \"name2\",\n                username = \"username2\",\n                email = \"email2\"\n            )\n        )\n        override fun getUsers(): Flow<List<User>> = flowOf\n            (users)\n        override fun getUser(id: Long): Flow<User> = \n            flowOf(users[0])\n    }\n    ```", "```kt\n    class MockRemotePostDataSource @Inject constructor() : \n        RemotePostDataSource {\n        private val posts = listOf(\n            Post(\n                id = 1L,\n                userId = 1L,\n                title = \"title1\",\n                body = \"body1\"\n            ),\n            Post(\n                id = 2L,\n                userId = 1L,\n                title = \"title2\",\n                body = \"body2\"\n            ),\n            Post(\n                id = 3L,\n                userId = 2L,\n                title = \"title3\",\n                body = \"body3\"\n            ),\n            Post(\n                id = 4L,\n                userId = 2L,\n                title = \"title4\",\n                body = \"body4\"\n            )\n        )\n        override fun getPosts(): Flow<List<Post>> = \n            flowOf(posts)\n        override fun getPost(id: Long): Flow<Post> = \n            flowOf(posts[0])\n    }\n    ```", "```kt\n    @Module\n    @TestInstallIn(\n        components = [SingletonComponent::class],\n        replaces = [RemoteDataSourceModule::class]\n    )\n    abstract class MockRemoteDataSourceModule {\n        @Binds\n        abstract fun bindPostDataSource(\n            postDataSourceImpl: MockRemotePostDataSource): \n                RemotePostDataSource\n        @Binds\n        abstract fun bindUserDataSource(userDataSourceImpl\n              : MockRemoteUserDataSource): \n                  RemoteUserDataSource\n    }\n    ```", "```kt\n    @HiltAndroidTest\n    class MainActivityTest {\n        @get:Rule(order = 0)\n        var hiltAndroidRule = HiltAndroidRule(this)\n        @get:Rule(order = 1)\n        var composeTestRule = createAndroidComposeRule\n            (MainActivity::class.java)\n        @Inject\n        lateinit var idlingResource: \n            ComposeCountingIdlingResource\n        @Before\n        fun setUp() {\n            hiltAndroidRule.inject()\n            composeTestRule.\n                registerIdlingResource(idlingResource)\n        }\n        @After\n        fun tearDown() {\n            composeTestRule.unregisterIdlingResource\n                (idlingResource)\n        }\n    }\n    ```", "```kt\n    @HiltAndroidTest\n    class MainActivityTest {\n        …\n        @Test\n        fun testDisplayList() {\n            composeTestRule.onNodeWithText(\"Total click \n                count: 0\")\n                .assertIsDisplayed()\n            composeTestRule.onAllNodesWithText(\"Author: \n                name1\")\n                .assertCountEquals(2)\n            composeTestRule.onAllNodesWithText(\"Author: \n                name2\")\n                .assertCountEquals(2)\n            composeTestRule.onNodeWithText(\"Title: \n                title1\")\n                .assertIsDisplayed()\n            composeTestRule.onNodeWithText(\"Title: \n                title2\")\n                .assertIsDisplayed()\n            composeTestRule.onNodeWithText(\"Title: \n                title3\")\n                .assertIsDisplayed()\n            composeTestRule.onNodeWithText(\"Title: \n                title4\")\n                .assertIsDisplayed()\n        }\n    }\n    ```"]