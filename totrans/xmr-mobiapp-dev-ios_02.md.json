["```swift\nvar window = new UIWindow(UIScreen.MainScreen.Bounds);\nfloat ScreenX = window.Screen.CurrentMode.Size.Width;\nfloat ScreenY = window.Screen.CurrentMode.Size.Height;\n```", "```swift\npublic partial class Login : DialogViewController{\n  public Login() : base (UITableViewStyle.Grouped, null){\n    Root = new RootElement(“Login”){\n      new Section (“First Section”){\n        new StringElement (“Hello”, () => {\n          new UIAlertView (“Hola”, “Thanks for tapping!”, null,“Continue”).Show();\n        }),\n        new EntryElement(“Name”, “Enter your name”, string.Empty)\n      },\n      new Section (“Second Section”){\n      },\n    };\n  }\n}\n```", "```swift\nvar entryExample = new EntryElement(“Caption”,“Type a number here”, string.Empty);\n```", "```swift\nentryElement.KeyboardType = UIKeyboardType.DecimalPad\nentryElement.KeyboardType = UIKeyboardType.NumberPad\n```", "```swift\nentryElement.ReturnKeyType = UIReturnKeyType.Done\n```", "```swift\nentryElement.ShouldReturn += delegate {\n  adminPhone.ResignFirstResponder(true); // animated\n};\n```", "```swift\npublic class ToolbarKeyboardEntryElement : EntryElement{\n  private UITextField textField;\n  public ToolbarKeyboardEntryElement(string caption, \n    string placeholder, string value) : \n    base(caption, placeholder, value) {\n    }\n\n  protected override UITextField CreateTextField(System.Drawing.RectangleF frame) {\n      textField = base.CreateTextField(frame);\n      UIToolbar toolHigh = new UIToolbar() {\n        BarStyle = UIBarStyle.Black, Translucent = true\n      };\n      toolHigh.SizeToFit();\n      UIBarButtonItem doneHigh = new UIBarButtonItem(“Done”,UIBarButtonItemStyle.Done, (ss, ea) => {\n          textField.ResignFirstResponder();\n        }\n      );\n      toolHigh.SetItems(new UIBarButtonItem[] { doneHigh }, true);\n      textField.InputAccessoryView = toolHigh;\n      return textField;\n    }\n    private NSString key = new NSString(“CustomEntryElement”);\n    protected override NSString CellKey {\n      get {\n        return key;\n      }\n    }\n  }\n}\n```", "```swift\nvar entry = new ToolbarKeyboardEntryElement(“Caption”,“Enter a number”, string.Empty);\n```", "```swift\nvar txtField = new UITextField();\ntxtField.InputAccessoryView = toolBar;\n```", "```swift\n    public class PickerChangedEventArgs : EventArgs {\n      public string SelectedValue { get; set; }\n    }\n    ```", "```swift\n    public class PickerModel : UIPickerViewModel {\n      private Ilist<string> myValues;\n      public event EventHandler<PickerChangedEventArgs>PickerChanged;\n      public PickerModel(IList<string> values)\n        {\n          myValues = values;}\n      public override int GetComponentCount(UIPickerView picker) {\n        return 1;\n      }\n\n      public override int GetRowsInComponent(UIPickerView picker, int component) {\n        return myValues.Count;\n      }\n\n      public override string GetTitle(UIPickerView picker,int row, int component) {\n        return myValues[row];\n      }\n\n      public override float GetRowHeight(UIPickerView picker, int component) {\n        return 40f;\n      }\n\n      public override void Selected(UIPickerView picker,int row, int component) {\n        if (PickerChanged != null) {\n          PickerChanged(this, new PickerChangedEventArgs {SelectedValue = myValues[row] });\n        }\n      }\n    }\n    ```", "```swift\n    EntryElement myElement = null;\n    ```", "```swift\n    UIActionSheet action = new UIActionSheet();\n    ```", "```swift\n    List<string> data = new List<string>() {“Hello”,“This is a”, “test”};\n    Ilist<string> iData = data;\n    var myPickerViewModel = new PickerModel(iData);\n    var MyPickerView = new UIPickerView() {\n      Model = myPickerViewModel,\n      ShowSelectionIndicator = true,\n      Hidden = false,\n      AutosizeSubviews = true,\n    };\n    myPickerView.Frame = new RectangleF(0, 100, 320, 162);\n    // 320 = screen x size for an iPhone 4\n    ```", "```swift\n    var toolBar = new UIToolbar() {\n      BarStyle = UIBarStyle.Black,\n      Translucent = true,\n    };\n    toolBar.SizeToFit();\n    var doneButton = new UIBarButtonItem(“Done”,UIBarButtonItemStyle.Done, (s, e) => {\n          action.DismissWithClickedButtonIndex(0, true);myElement.ResignFirstResponder(true);\n    });\n    toolBar.SetItems(new UIBarButtonItem[] { doneButton },true);\n\n    myPickerViewModel.PickerChanged += (object sender,PickerChangedEventArgs e) => {\n      myElement.Value = e.SelectedValue;\n    };\n    ```", "```swift\n    myElement = new EntryElement(“Hello”, string.Empty,string.Empty);\n    ```", "```swift\n    myElement.EntryStarted += (object ss, EventArgs ee) => {\n      action.Style = UIActionSheetStyle.BlackTranslucent;\n      action.ShowInView(View);\n      action.AddSubview(toolBar);\n      action.AddSubview(myPickerView);\n      action.Frame = new RectangleF(0, 100, 320, 500);\n      myPickerView.Frame = new RectangleF(action.Frame.X,action.Frame.Y – 25, action.Frame.Width, 216);\n    };\n    ```", "```swift\n    public class MaxNumberEntryElement : EntryElement {\n      private UITextField textField;\n      public int MaxLength { get; set; }\n\n      public MaxNumberEntryElement(string caption,string placeholder, string value, int maxLength) :base(caption, placeholder, value) {\n          MaxLength = maxLength;\n        }\n\n        protected override UITextField CreateTextField(System.Drawing.RectangleF frame) {\n            textField = base.CreateTextField(frame);\n            textField.ShouldChangeCharacters = (UITextField t,NSRange range, string replacementText) => {\n                int newLength = t.Text.Length + replacementText.Length- range.Length;\n              return (newLength <= MaxLength);\n            };\n          return textField;\n        }\n\n        private NSString key = new NSString(“CustomEntryElement”);\n\n        protected override NSString CellKey {\n          get { return key; }\n        }\n    }\n    ```", "```swift\nlabel.Text = “text”; // sets the text label to be “text”\nlabel.TextColor = UIColor.Blue; // sets the text color to be blue\nlabel.BackgroundColor = UIColor.FromRGB(255,255,200);\n// sets the background to be yellow\n\nlabel.TextAlignment = UITextAlignment.Center; // centres the text in the label\n```", "```swift\n    UILabel(new RectangleF(x_pos, y_pos, width, height))\n    ```", "```swift\n    lbl.Frame = new RectangleF(x_pos, y_pos, width, height);\n    ```", "```swift\nstring test2 = “More text to fit and boy, does it fit!”;\nlblTestLabel.AdjustsFontSizeToFitWidth = true;\nlblTestLabel.Text = test2;\n```", "```swift\nvar gradient = new CAGradientLayer();\ngradient.Colors = new MonoTouch.CoreGraphics.CGColor[] {\n  UIColor.FromRGB(115, 181, 216).CGColor,\n  UIColor.FromRGB(35, 101, 136).CGColor\n};\ngradient.Locations = new NSNumber[] { .5f, 1f };\ngradient.Frame = btn.Layer.Bounds;\nbtn.Layer.AddSublayer(gradient);\nbtn.Layer.MasksToBounds = true;\n```", "```swift\nbtn.SetBackgroundImage(UIImage.FromFile(“Path/ToImage.png”),UIControlState.Normal);\n```", "```swift\nUIImageView btnImage = new UIImageView (new RectangleF(new PointF(4, 4), new SizeF(84, 84)));\nbtnImage.Image = UIImage.FromFile (“Path/ToImage.png”).Scale (new SizeF(84, 84));\nbtn.SetImage(btnImage.Image, UIControlState.Normal);\n```", "```swift\nbtn.AddSubview(btnImage);\n```", "```swift\nbtn.BackgroundColor = UIColor.Gray;\n```", "```swift\nbtn.SetTitle(“Some text”, UIControlState.Normal);\n```", "```swift\n    // step 1\n    if (!string.IsNullOrEmpty(btn.CurrentTitle))\n      btnTitle.SetTitle(string.Empty, UIControlState.Normal);\n\n    // step 3\n    UILabel myLabel = new UILabel(new RectangleF(4, 78),new SizeF(84,10));\n    myLabel.Text = “some text”;\n    btn.AddSubview(myLabel);\n    ```", "```swift\nbtn.ButtonType = UIButtonType.Custom;\nbtn.SetBackgroundImage(UIImage.FromFile(“octagon.png”,UIControlState.Normal));\nbtn.SetBackgroundImage(UIImage.FromFile(“octagon-selected.png”,UIControlState.Highlighted));\n```"]