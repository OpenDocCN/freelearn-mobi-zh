["```swift\n// Constant\nlet pi = 3.14\n\n// Variable\nvar name = \"Sarah\"\n```", "```swift\nvar card = (color: \"Red\", suit: \"Hearts\", value: 7)\n```", "```swift\ncard.color // \"Red\"\ncard.suit // \"Hearts\"\ncard.value // 7\n```", "```swift\nvar diceRoll = (4, 6)\ndiceRoll.0 // 4\ndiceRoll.1 // 6\n```", "```swift\nlet (first, second) = diceRoll\nfirst // 4\nsecond // 6\n```", "```swift\ndiceRoll = (4, 5)\ndiceRoll.0 = 2\n```", "```swift\nvar invitees = [\"Sarah\", \"Jamison\", \"Marcos\", \"Roana\"]\n```", "```swift\ninvitees += [\"Kai\", \"Naya\"]\n```", "```swift\ninvitees = invitees + [\"Kai\", \"Naya\"]\n```", "```swift\ninvitees[2] // Marcos\n```", "```swift\nvar showsByGenre = [\n   \"Comedy\": \"Modern Family\",\n   \"Drama\": \"Breaking Bad\",\n]\n```", "```swift\nshowsByGenre[\"Comedy\"] // Modern Family\n```", "```swift\nshowsByGenre[\"Variety\"] = \"The Colbert Report\"\n```", "```swift\nvar name: String = \"Sarah\"\n```", "```swift\nlet pi: Double = 3.14\n\nvar invitees: [String] = [\"Sarah\", \"Jamison\", \"Roana\"]\n\nlet showsByGenre: [String:String] = [\n    \"Comedy\": \"Modern Family\",\n    \"Drama\": \"Breaking Bad\",\n]\n```", "```swift\nprint(\"Hello World!\")\n```", "```swift\nprint(name)\n```", "```swift\nprint(\"Hello \\(name)!\")\n```", "```swift\nif invitees.count > 20 {\n   print(\"Too many people invited\")\n}\n```", "```swift\nif invitees.count > 20 {\n    print(\"Too many people invited\")\n}\nelse if invitees.count <= 3 {\n    print(\"Not really a party\")\n}\nelse {\n    print(\"Just right\")\n}\n```", "```swift\nswitch invitees.count {\n    case let x where x > 20:\n        print(\"Too many people invited\")\n    case let x where x <= 3:\n        print(\"Not really a party\")\n    default:\n        print(\"Just right\")\n}\n```", "```swift\nswitch invitees.count {\n    case let x where x > 20:\n        print(\"Too many people invited\")\n    case let x where x <= 3:\n        print(\"Not really a party\")\n    default:\n        break\n}\n```", "```swift\nswitch invitees.count {\n    case 0...3:\n        print(\"Not really a party\")\n    case 4...20:\n        print(\"Just right\")\n    default:\n        print(\"Too many people invited\")\n}\n```", "```swift\nswitch name {\n    case \"Marcos\", \"Amy\":\n       print(\"\\(name) is an honored guest\")\n    case let x where x.hasPrefix(\"A\"):\n        print(\"\\(name) will be invited first\")\n        fallthrough\n    default:\n        print(\"\\(name) is someone else\")\n}\n```", "```swift\nlet testName = \"Andrew\"\nswitch testName {\n    case \"Marcos\", \"Amy\":\n        print(\"\\(testName) is an honored guest\")\n    case let x where x.hasPrefix(\"A\"):\n        print(\"\\(testName) will be invited first\")\n        fallthrough\n    case \"Jamison\":\n        print(\"\\(testName) will help arrange food\")\n    default:\n        print(\"\\(testName) is someone else\")\n}\n```", "```swift\nvar index = 0\nwhile index < invitees.count {\n    print(\"\\(invitees[index]) is invited\")\n\n    index+=1\n}\n```", "```swift\nfor invitee in invitees {\n    print(\"\\(invitee) is invited\")\n}\n```", "```swift\nfor (genre, show) in showsByGenre {\n    print(\"\\(show) is a great \\(genre) series\")\n}\n```", "```swift\nfor invitee in invitees where invitee.hasPrefix(\"A\") {\n    print(\"\\(invitee) is invited\")\n}\n```", "```swift\nfor index in 0 ..< invitees.count {\n    print(\"\\(index): \\(invitees[index])\")\n}\n```", "```swift\nprint(\"Counting to 10:\")\nfor number in 1 ... 10 {\n    print(number)\n}\n```", "```swift\nfor invitee in invitees {\n    if invitee.hasPrefix(\"A\") {\n        continue\n    }\n    print(\"\\(invitee) is invited\")\n}\n```", "```swift\nfor invitee in invitees {\n   print(\"\\(invitee) is invited\")\n\n   if invitee == \"Tim\" {\n       print(\"Oh wait, Tim can't come\")\n       break\n   }\n}\nprint(\"Jumps here\")\n```", "```swift\nfunc sayHello() {\n    print(\"Hello World!\")\n}\n```", "```swift\nsayHello() // Prints \"Hello World!\"\n```", "```swift\nfunc sayHelloToName(name: String) {\n    print(\"Hello \\(name)!\")\n}\n```", "```swift\nsayHelloToName(\"World\") // Prints \"Hello World!\"\n```", "```swift\nfunc addInviteeToListIfSpotAvailable\n    (\n    invitees: [String],\n    newInvitee: String\n    )\n    -> [String]\n{\n    if invitees.count >= 20 {\n        return invitees\n    }\n    return invitees + [newInvitee]\n}\n```", "```swift\nvar list = [\"Sarah\", \"Jamison\", \"Marcos\"]\nvar newInvite = \"Roana\"\nlist = addInviteeToListIfSpotAvailable(list, newInvite: newInvitee)\n```", "```swift\nfunc addInvitee\n    (\n    invitee: String,\n    ifPossibleToList invitees: [String]\n    )\n    -> [String]\n{\n    if invitees.count >= 20 {\n        return invitees\n    }\n    return invitees + [invitee]\n}\nlist = addInvitee(newInvite, ifPossibleToList: list)\n```", "```swift\nfunc sayHelloToName(name: String = \"World\") {\n    print(\"Hello \\(name)!\")\n}\n```", "```swift\nsayHelloToName(\"World\") // Prints \"Hello World!\"\nsayHelloToName() // Also Print \"Hello World!\"\n```", "```swift\nfunc addInvitee\n    (\n    invitee: String = \"Default Invitee\",\n    ifPossibleToList invitees: [String] = []\n    )\n    -> [String]\n{\n    // ...\n}\nlist = addInvitee(ifPossibleToList: list, newInvite)\nlist = addInvitee(newInvite, ifPossibleToList: list)\nlist = addInvitee(ifPossibleToList: list)\nlist = addInvitee(newInvite)\nlist = addInvitee()\n```", "```swift\nfunc addInvitee\n    (\n    invitee: String,\n    ifPossibleToList invitees: [String]\n    )\n    -> [String]\n{\n    guard invitees.count < 20 else {\n        return invitees\n    }\n    return invitees + [newInvitee]\n}\n```", "```swift\n// Import Foundation so that \"rand\" can be used\nimport Foundation\n\n// Seed the random number generator\nsrand(UInt32(clock()))\n\n// Random number between 0 and 9\nvar randomNumber = Int(rand()) % 10\n```", "```swift\nvar someBool = false\nif someBool {\n    print(\"Do This\")\n}\n```", "```swift\nvar inviteeIndex: Int\nrepeat {\n    inviteeIndex = Int(rand()) % 5\n} while inviteeIndex != 3\n```", "```swift\n// Import Foundation so that \"rand\" can be used\nimport Foundation\n\n// Seed the random number generator\nsrand(UInt32(clock()))\n\n// -----------------------------\n// Input Data\n// -----------------------------\n\n// invitees\n//\n// Each element is a tuple which contains a name\n// that is a String and a Bool for if they have been\n// invited yet. It is a variable because we will be\n// tracking if each invitee has been invited yet. \nvar invitees = [\n    (name: \"Sarah\", alreadyInvited: false),\n    (name: \"Jamison\", alreadyInvited: false),\n    (name: \"Marcos\", alreadyInvited: false),\n    (name: \"Roana\", alreadyInvited: false),\n    (name: \"Neena\", alreadyInvited: false),\n]\n\n// showsByGenre\n//\n// Constant because we will not need to modify\n// the show list at all\nlet showsByGenre = [\n    \"Comedy\": \"Modern Family\",\n    \"Drama\": \"Breaking Bad\",\n    \"Variety\": \"The Colbert Report\",\n]\n```", "```swift\n// -----------------------------\n// Helper functions\n// -----------------------------\n\n// inviteAtIndex:toBringShow:\n//\n// Another function to help make future code\n// more comprehensible and maintainable\nfunc inviteAtIndex\n    (\n    index: Int,\n    toBringShow show: (genre: String, name: String)\n    )\n{\n    let name = invitees[index].name\n    print(\"\\(name), bring a \\(show.genre) show\")\n    print(\"\\(show.name) is a great \\(show.genre)\")\n\n    invitees[index].alreadyInvited = true\n }\n\n// inviteToBringThemselvesAtIndex:\n//\n// Similar to the previous function but this time for\n// the remaining invitees\nfunc inviteToBringThemselvesAtIndex(index: Int) {\n    let invitee = invitees[index]\n    print(\"\\(invitee.name), just bring yourself\")\n\n    invitees[index].alreadyInvited = true\n }\n```", "```swift\n// -----------------------------\n// Now the core logic\n// -----------------------------\n\n// First, we want to make sure each genre is assigned\n// to an invitee\nfor show in showsByGenre {\n    // We need to pick a random invitee that has not\n    // already been invited. With the following loop\n    // we will continue to pick an invitee until we\n    // find one that has not already been invited\n    var inviteeIndex: Int\n    repeat {\n        inviteeIndex = Int(rand()) % invitees.count\n    } while invitees[inviteeIndex].alreadyInvited\n\n    // Now that we have found an invitee that has not\n    // been invited, we will invite them\n    inviteAtIndex(inviteeIndex, toBringShow: (show))\n}\n\n// Now that we have assigned each genre, we\n// will ask the remaining people to just bring\n// themselves\nfor index in 0 ..< invitees.count {\n    let invitee = invitees[index]\n    if !invitee.alreadyInvited {\n        inviteToBringThemselvesAtIndex(index)\n    }\n}\n```"]