["```kt\nArrays.asList(\"a\", \"b\", \"c\") // Initialize list\n    .stream() // Convert to stream\n    .map(...) // Do something functional here   \n    .toList() // Convert back to list\n```", "```kt\nlistOf(\"a\", \"b\", \"c\").stream().map{...}.toList()\n```", "```kt\nlistOf(\"a\", \"b\", \"c\").map(...) \n```", "```kt\nval noParameters = { 1 } // () -> Int implicitly\n```", "```kt\nfun oneParameter(block: (Int)->Long){ }\n```", "```kt\nval oneParameterVeryVeryExplicit = oneParameter( {x: Int -> x.toLong() })\n```", "```kt\nval oneParameterVeryExplicit = oneParameter {x: Int -> x.toLong() }\n```", "```kt\nval oneParameterExplicit = oneParameter {x -> x.toLong() }\n```", "```kt\nval oneParameterImplicit = oneParameter { it.toLong() }\n```", "```kt\nval letters = listOf(\"a\", \"b\", \"c\", \"d\")\n\nprintln(repeatAll(letters)) // [aa, bb, cc, dd]\n```", "```kt\nfun repeatAll(letters: List<String>): MutableList<String> {\n    val repeatedLetters = mutableListOf<String>()\n\n    for (l in letters) {\n        repeatedLetters.add(l + l)\n    }\n    return repeatedLetters\n}\n```", "```kt\nrepeatedLetters.add(l + l) ----> repeatedLetters.add(l.toUpperCase())\n```", "```kt\nfun <T> repeatSomething(input: List<T>, action: (T) -> T): MutableList<T> {\n    val result = mutableListOf<T>()\n\n    for (i in input) {\n        result.add(action(i))\n    }\n    return result\n}\n```", "```kt\nprintln(repeatSomething(letters) {\n    it.toUpperCase()\n})\n```", "```kt\nprintln(letters.map {\n    it.toUpperCase()\n})\n```", "```kt\nval letters = listOf(\"a\", \"B\", \"c\", \"D\")\nval results = mutableListOf<String>()\n\nresults.addAll(letters.map {\n    it.toUpperCase()\n})\n\nresults.addAll(letters.map {\n    it.toLowerCase()\n})\n\nprintln(results)\n```", "```kt\nval letters = listOf(\"a\", \"B\", \"c\", \"D\")\nval results = mutableListOf<String>()\n\nletters.mapTo(results) {\n    it.toUpperCase()\n}\n\nletters.mapTo(results) {\n    it.toLowerCase()\n}\n\nprintln(results)\n```", "```kt\nfun filter(numbers: List<Int>, check: (Int)->Boolean): MutableList<Int> {\n    val result = mutableListOf<Int>()\n\n    for (n in numbers) {\n        if (check(n)) {\n            result.add(n)\n        }\n    }\n\n    return result\n}\n```", "```kt\nprintln(filter((1..10).toList()) {\n    it % 2 != 0\n}) // [1, 3, 5, 7, 9]\n```", "```kt\nprintln((1..10).toList().filter {\n    it % 2 != 0\n})\n```", "```kt\ndata class Person(val firstName: String, \n                  val lastName: String,\n                  val age: Int)\nval people = listOf(Person(\"Jane\", \"Doe\", 19),\n            Person(\"John\", \"Doe\", 24),\n            Person(\"John\", \"Smith\", 23))\n```", "```kt\nfun <T> List<T>.find(check: (T) -> Boolean): T? {\n    for (p in this) {\n        if (check(p)) {\n            return p\n        }\n    }\n    return null\n}\n```", "```kt\nprintln(people.find {\n    it.firstName == \"John\"\n}) // Person(firstName=John, lastName=Doe)\n```", "```kt\nprintln(people.findLast {\n    it.firstName == \"John\"\n}) // Person(firstName=John, lastName=Smith)\n```", "```kt\n// Skips first two elements\nfor (int i = 2; i < list.size(); i++) {\n   // Do something here\n}\n```", "```kt\nval numbers = (1..5).toList()\nprintln(numbers.drop(2)) // [3, 4, 5]\n```", "```kt\nprintln(numbers) // [1, 2, 3, 4, 5]\n```", "```kt\nprintln(numbers.dropLast(2)) // [1, 2, 3]\n```", "```kt\nval readings = listOf(-7, -2, -1, -1, 0, 1, 3, 4)\n\nprintln(readings.dropWhile {\n    it <= 0\n}) // [1, 3, 4]\n```", "```kt\nval people = listOf(Person(\"Jane\", \"Doe\", 19),\n        Person(\"John\", \"Doe\", 24),\n        Person(\"John\", \"Smith\", 23))\n```", "```kt\nprintln(people.sortedBy { it.age })\n```", "```kt\n[Person(firstName=Jane, lastName=Doe, age=19), Person(firstName=John, lastName=Smith, age=23), Person(firstName=John, lastName=Doe, age=24)]\n```", "```kt\nprintln(people.sortedByDescending { it.lastName })\n```", "```kt\n[Person(firstName=John, lastName=Smith, age=23), Person(firstName=John, lastName=Doe, age=24), Person(firstName=Jane, lastName=Doe, age=19)]\n```", "```kt\nprintln(people.sortedWith(compareBy({it.lastName}, {it.age})))\n```", "```kt\nval numbers = (0..5)\n\nnumbers.map { it * it}          // Can continue\n       .filter { it < 20 }      // Can continue\n       .sortedDescending()      // Still can\n       .forEach { println(it) } // Cannot continue\n```", "```kt\nnumbers.map { it * it }\n        .forEachIndexed { index, value ->\n    print(\"$index:$value, \")\n}\n\n```", "```kt\n0:1, 1:4, 2:9, 3:16, 4:25, \n```", "```kt\nnumbers.map { it * it}         \n       .filter { it < 20 }     \n       .sortedDescending()     \n       .onEach { println(it) } // Can continue now\n       .filter { it > 5 }\n```", "```kt\n0:1, 1:4, 2:9, 3:16, 4:25,\n```", "```kt\n    val numbers = (1..5)\n\n    println(numbers.joinToString { \"$it\"})\n```", "```kt\n1, 2, 3, 4, 5\n```", "```kt\nprintln(numbers.joinToString(separator = \"#\") { \"$it\"})\n```", "```kt\n1#2#3#4#5\n```", "```kt\nprintln(people.reduce {p1, p2 ->\n        Person(\"Combined\", \"Age\", p1.age + p2.age)\n    })\n```", "```kt\nPerson(firstName=Combined, lastName=Age, age=64)\n```", "```kt\nprintln(people.reduce {p1, p2 ->\n    if (p1.age > p2.age) { p1 } else { p2 }\n})\n```", "```kt\nprintln(people.drop(1) // Skipping first one\n       .fold(people.first()) // Using first one as initial value\n             {p1, p2 ->\n    Person(\"Combined\", \"Age\", p1.age + p2.age)\n})\n```", "```kt\nval listOfLists = listOf(listOf(1, 2),\n        listOf(3, 4, 5), listOf(6, 7, 8))\n\n// [[1, 2], [3, 4, 5], [6, 7, 8]]\n```", "```kt\n[1, 2, 3, 4, 5, 6, 7, 8]\n```", "```kt\nval results = mutableListOf<Int>()\n\nfor (l in listOfLists) {\n    results.addAll(l)\n}\n```", "```kt\nlistOfLists.flatten()\n```", "```kt\nprintln(listOfLists.flatMap {\n    it.asReversed()\n})\n```", "```kt\nprintln(listOfLists.flatMap {\n    it.map { it.toDouble() }\n//  ^        ^\n// (1)      (2)\n})\n```", "```kt\n[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]\n```", "```kt\nval setOfListsOfSets = setOf(\n//                     ^\n//                    (1)\n        listOf(setOf(1, 2), setOf(3, 4, 5), setOf(6, 7, 8)), \n//      ^      ^\n//     (2)    (3)\n        listOf(setOf(9, 10), setOf(11, 12))\n//      ^      ^\n//     (2)    (3)\n)\n// Prints [[[1, 2], [3, 4, 5], [6, 7, 8]], [[9, 10], [11, 12]]]\n```", "```kt\nprintln(setOfListsOfSets.flatten())\n```", "```kt\n[[1, 2], [3, 4, 5], [6, 7, 8], [9, 10], [11, 12]]\n```", "```kt\nprintln(setOfListsOfSets.flatten().flatten())\n```", "```kt\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```", "```kt\n//Won't compile\nprintln(setOfListsOfSets.flatten().flatten().flatten())\n```", "```kt\nval numbers = (1..10).toList()\n// Prints [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```kt\nprintln(numbers.slice((0..3)))\n// Prints [1, 2, 3, 4], last index is included\n```", "```kt\nprintln(numbers.subList(0, 3))\n// Prints [1, 2, 3], last index is excluded\n```", "```kt\nfun dbCall(ids: List<Int>) {\n    if (ids.size > 1000) {\n        throw RuntimeException(\"Can't process more than 1000 ids\")\n    }\n```", "```kt\n    // Does something here\n}\n```", "```kt\n// That will fail at runtime\ndbCall(hugeList)\n\n```", "```kt\nval pageSize = 1000\nval pages = hugeList.size / pageSize\n\nfor (i in 0..pages) {\n    val from = i * pageSize\n    val p = (i+1) * pageSize\n    val to = minOf(p, hugeList.size)\n    dbCall(hugeList.slice(from until to))\n}\n```", "```kt\nhugeList.chunked(pageSize) {\n    dbCall(it)\n}\n```", "```kt\nval employeeIds = listOf(5, 8, 13, 21, 34, 55, 89)\nval daysInCompany = listOf(176, 145, 117, 92, 70, 51, 35, 22, 12, 5)\n```", "```kt\nprintln(employeeIds.zip(daysInCompany))\n```", "```kt\n[(5, 176), (8, 145), (13, 117), (21, 92), (34, 70), (55, 51), (89, 35)]\n```", "```kt\nprintln(daysInCompany.zip(employeeIds))\n```", "```kt\n[(176, 5), (145, 8), (117, 13), (92, 21), (70, 34), (51, 55), (35, 89)]\n```", "```kt\nval employeesToDays = employeeIds.zip(daysInCompany)\n\nval (employees, days) = employeesToDays.unzip()\nprintln(employees)\nprintln(days)\n```", "```kt\n[5, 8, 13, 21, 34, 55, 89]\n[176, 145, 117, 92, 70, 51, 35]\n```", "```kt\n// Returns a view, no copy here\n(1..10).toList().asReversed()\n\n// Same here\n(1..10).toList().asSequence()\n```", "```kt\nval numbers = (1..1_000_000).toList()\nprintln(measureTimeMillis {\n    numbers.stream().map {\n        it * it\n    }\n}) // ~2ms\n\nprintln(measureTimeMillis {\n    numbers.map {\n        it * it\n    }\n}) // ~19ms\n```", "```kt\nprintln(measureTimeMillis {\n    numbers.stream().map {\n        it * it\n    }.toList()\n}) // ~70ms\n```", "```kt\nval seq = generateSequence(1) { it + 1 }\n```", "```kt\n    seq.take(100).forEach {\n        println(it)\n    }\n```", "```kt\nval finiteSequence = generateSequence(1) {\n    if (it < 1000) it + 1 else null\n}\n\nfiniteSequence.forEach {\n        println(it)\n} // Prints numbers up to 1000\n```", "```kt\n(1..1000).asSequence()\n```"]