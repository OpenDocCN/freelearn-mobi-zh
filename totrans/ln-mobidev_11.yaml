- en: Onboarding and Registration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the onboarding and registration part of your
    app. It starts with the people that have downloaded the app from the Play Store
    or App Store. That is an important conversion already. Now they need to be converted
    into regular users of the app. That is not as easy as it sounds. Studies show
    that on average 20% of apps are used only once. There are many competing apps
    in Google Play Store or the App Store. A perfect onboarding strategy for your
    app is therefore a must have and it could heavily contribute to a good conversion.
    The first impression your users get of your app should be a good one. To make
    the conversion as smooth as possible, it is important to show what is in it for
    them. You should ask yourself why they should have to continue to use the app.
    From the very start, you have to help them to understand the added value of your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons why we want a user to sign-up. One of them is that a
    known user is more valuable than an anonymous one, but registration may be a barrier.
    This is the case, in particular, when users need to sign-up right away on one
    of the first screens of the app they see. Since they have no clue yet what the
    app is all about, you could already lose a part of your audience there. The more
    you ask, the more difficult the process will be. This is something you can avoid
    by using various techniques. In this chapter, we will see how to lower the barrier
    for the onboarding process and how a social sign-in process can contribute to
    it. Another thing we will look at is sign-up and verification through SMS.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this and other functionalities, we will create an app that uses
    the SDKs of Fabric and Firebase. We also will learn what we could do to improve
    app awareness and how a continuous onboarding flow could help you to get the best
    of both worlds. Such a flow will lower the barrier and it also will result in
    a rich user profile, as we will see later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: See what user onboarding is all about and how we can improve conversions by
    lowering the barrier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about social sign-in using Facebook or Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See what the alternatives are, such as phone number sign-up, similar to what
    WhatsApp is doing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find out how we can get the best of both worlds (a low barrier and rich data)
    using continuous onboarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigate an app that demonstrates onboarding, including late onboarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how sharing and friend finding can help to improve app awareness and help
    in the onboarding process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is user onboarding all about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Onboarding begins where a potential user, who has just downloaded your app,
    starts your app for the first time. You will have to convince that user and make
    sure that he instantly will notice the app's benefits. You want to convert your
    potential user into an engaged and active user, and this process starts with the
    first view that your app displays. To accomplish this, the first impression of
    your app should be interesting from a visual perspective and it should explain
    why the user should use this app. One of the ways of doing this is to create an
    introduction view with one or multiple slides. Remember that on a mobile device
    there is limited space, so you need to keep it short and simple. It should clearly
    explain the why and the what of the app. How things exactly work is something
    for later.
  prefs: []
  type: TYPE_NORMAL
- en: Show your users the benefits (the why) of your app before talking about its
    features (the what).
  prefs: []
  type: TYPE_NORMAL
- en: Show a maximum of three or four benefits. For example, they could explain how
    the user can integrate the app into his life and what values are provided by the
    app. Present one benefit at a time using a page slider or other technique. Be
    clear in your communication and try not to confuse the user. Use a consistent
    style, vocabulary, and approach to explain concepts. At a first view, the onboarding
    flow may look pretty obvious, but it apparently is not. Many apps, even the well-known
    ones, require you to sign-up on the first page with little to no explanation what
    the app is about. That may work well for the Facebook app with which almost everybody
    is familiar. It probably is not going to work for your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical flow goes like this: After the user has downloaded an app, he sees
    what it is about in a short introduction and then he is required to sign-up. At
    that time, it is often not clear why one should enter his username, type in a
    password, confirm it, and enter a couple of required fields. In this phase, a
    number of potential users will be lost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61897122-b1d9-4fe2-9739-cce9b440edfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Why does it matter?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great introduction story should point out what the core values of your app
    are and what is in it for the user. Onboarding matters because it has everything
    to do with successful conversion. With every step you will lose customers, which
    is something that cannot completely be avoided, but the number of losses can be
    limited if you have a great onboarding flow for your app. As an example, let's
    consider a scenario in which each day a 100 users download your app, of which
    60 sign-up and the other 40 decide to do this later or maybe never. Of these 60
    users, only 30 are still using the app the next month. Of these 30 users, only
    15 invite a friend, share the content of the app, or make an in-app purchase.
    That is still a very optimistic story.
  prefs: []
  type: TYPE_NORMAL
- en: At this last point, we could consider to see the user as a customer, as he brings
    us revenue in some way (money or awareness). However, in the conversion from potential
    user to customer, we have lost 85 people. There must be some way to increase the
    conversion. To do so, we have to make some smart moves and we need to gather feedback
    on the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Onboarding is about the conversion, which is summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From someone that becomes aware of the app in the App Store or Google Play Store
    to a potential user by downloading the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a potential user that has downloaded the app to an actual user by signing
    up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a user that has signed up to a user that is regularly using the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a regular user to an ambassador that is promoting the app by sharing it
    or by inviting a friend to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pirate metrics (AARRR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can make improvements only if we have insight into the optimization process.
    If we want to learn from the process, we need to measure it. The conversion is
    something that we are going to measure in another chapter. There we will take
    a closer look at actionable metrics that we can apply to mobile app development.
  prefs: []
  type: TYPE_NORMAL
- en: 'These so-called pirate metrics (AARRR, apparently that is what pirates say)
    perfectly describe why the onboarding flow is so important and what each phase
    represents in the conversion funnel. In short it goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: A for **Acquisition** or **Awareness****,** so they find your app in the store
    and download it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A for **Activation**, when users sign-up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R for **Retention**, meaning that a user is using the app on a regular basis.
    How many of the users that have downloaded the app are still doing so 1 week,
    1 month, or 1 year later?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R for **Revenue**, as people make in-app purchases or other ways of monetization
    that we will review in another chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R for **Referral**, where users inform other users about your app by sharing
    content or by inviting friends. Can your app go viral via word of mouth or sharing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1c07d6b7-f9d4-4dc7-959e-0bc73c6a67a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Actionable metrics could help you to identify the friction points in the onboarding
    process. You will read more about this in [Chapter 13](a62b3753-12c5-4170-808a-e0e1446e6b97.xhtml),
    *Play Store and App Store Hacks* (Split testing) and [Chapter 15](d9145149-0f4e-47b6-bc9d-ff46e5e63304.xhtml),
    *Growing Traction and Improving Retention*.
  prefs: []
  type: TYPE_NORMAL
- en: Higher conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general mobile apps do not focus very much on the onboarding flow. At least,
    that is the impression you could get if you review many of the apps in the App
    Store. You can make a difference for your app. If your onboarding story is more
    appealing and if the barrier for signing up is lower, your conversion from acquisition
    to activation will be better. If, in addition, you show your user how the app
    works and he becomes confident in the way things work, then you will increase
    your users retention rate. He will keep using your app on a frequent basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a head start, we need to think of a way to lower the barrier for the
    user. There are multiple known onboarding patterns that you can choose from and
    there is no reason why you cannot combine them. Some of these patterns are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorial (or tour)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joy ride
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social sign-up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous onboarding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **introduction** approach shows a couple of slides and often requires the
    user to sign-up, but some apps choose to show the content of the app right away.
    A tutorial or tour shows the real app, pointing out some example cases.
  prefs: []
  type: TYPE_NORMAL
- en: A **joy ride** approach is a little bit different as it lets the user use the
    app right away and highlights features, from time to time, that are new to the
    user. It is a great way of showing what the app is all about. But be careful.
    If your app is complex, this option may prove to be a little bit overwhelming
    for the user.
  prefs: []
  type: TYPE_NORMAL
- en: A **social sign-up** allows the user to perform a quick sign-up using his Twitter
    or Facebook account, for example. This may be required in order for the user to
    be able to continue using the app, but it will lower the barrier if you first
    show what the app is about and only ask to sign-up when needed to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally there is a **continuous onboarding** concept, which can be very powerful
    because it comes with benefits such as lowering the barrier and obtaining rich
    user profiles, by encouraging the user at a later stage to complete his profile.
  prefs: []
  type: TYPE_NORMAL
- en: How to lower the barrier?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Probably the best onboarding flow does not require a sign-up or login at all.
    Is it really needed to do so before your app can be used? On the other hand, it
    is also true that a known user is more valuable than an anonymous one. Known users
    can be converted into customers, which will result in a profitable app. An unknown
    user is nothing but a visitor. We have not much data available about such visitor
    and conversion probably will be tough:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a128af4b-3889-4f53-bebb-6f309352ac32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To lower the barrier, you better make the sign-up process as smooth as possible.
    I have seen apps that require the user to fill in multiple fields on multiple
    pages at the registration process. That is not a fun thing to do on a mobile device
    and we can be sure the conversion loss will be huge. A typical old school onboarding
    and registration flow goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d59714af-1085-4804-b030-c242299a0850.png)'
  prefs: []
  type: TYPE_IMG
- en: We can do better than that. So create a great and exciting introduction story
    and make sure the user can immediately see the app core values. A very clear call
    to action (think of a highlighted button with an explanation text) and a simplified
    sign-up form can help you with this. Describe the benefits that the user will
    have once signed up, or use gamification elements such as digital incentives to
    persuade the user.
  prefs: []
  type: TYPE_NORMAL
- en: A social sign-in option is a great solution to increase conversion and still
    get to know the user. It requires fewer steps, so the user is more likely to sign-up
    if the only thing he needs to do is to click on a Twitter or Facebook sign-up
    button.
  prefs: []
  type: TYPE_NORMAL
- en: To see some onboarding case studies, you should check [http://www.useronboard.com](http://www.useronboard.com).
    It has many onboarding flows of various well-known apps, including comments and
    suggestions for improvement. You can find onboarding flows for WhatsApp, Yo, Twitter,
    Foursquare, Snapchat, and many other apps here.
  prefs: []
  type: TYPE_NORMAL
- en: You probably also want to visit [http://uxarchive.com](http://uxarchive.com)
    to see more examples.
  prefs: []
  type: TYPE_NORMAL
- en: Single sign on using a social network like Twitter or Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A social sign-up has multiple benefits, not just for the user but also for developers.
    Avoid a lengthy registration process with many fields. The likeliness that the
    user will sign-up increases and, with the appropriate permissions, you instantly
    access a range of information on that user, for example, an avatar and a name
    of the user, which is great for personalization options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Offering a social login could be responsible for 50% more sign-ups compared
    to a form-based sign-up. Other information could be available as well, such as
    a contact list that you can use to invite friends to the app later. Depending
    on the nature of your app, you can allow your user to sign in with Twitter, Facebook,
    Pinterest, LinkedIn, or any other trusted social network. It may also depend on
    the nature of your user if your app is offering access to a platform (multi-sided
    market). For example, for an e-learning solution, there is a LinkedIn sign-up
    feature for teachers and professionals, but a Facebook sign-up flow for students:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/547b72fc-a70e-47fd-82c2-abc73e263c5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The benefits of using a social login are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Faster registration, thus higher conversion rates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantly validated email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased chances that the obtained data is real
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Personalization, resulting in more loyal followers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High engagement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less support (such as a reset password service) needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased number of repeated users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased chance for referrals because of invites and sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no one solution that fits all. You need to decide which social networks
    you will support, and perhaps you choose to support multiple ones. This is of
    particular interest if you have international ambitions for your app. Facebook
    or LinkedIn sign-up features make perfect sense in the US and in large parts of
    Europe, but in other parts of the world (China or Russia for example) these networks
    may be less popular (or not accessible at all) and you may want to offer an alternative
    onboarding option for these particular regions. This could be another social network
    or you can provide a fall-back mechanism. You can still offer an onboarding flow
    in your app, based on forms. You can use that for the cases in which the user
    cannot or does not want to use a social sign-up. It is up to you if you decide
    to support it. You gain a little extra audience with it, but at a cost (development
    and conversion). For this reason, there are apps that choose only to support one
    or multiple social sign-up options.
  prefs: []
  type: TYPE_NORMAL
- en: Show us what you have got
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An alternative approach is instantly showing the content of the app (if the
    nature of the app allows you to do so) and only asking for a social sign-up when
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way no or little introduction is needed. Just as is the case with many
    e-commerce solutions (think of web shops), signing up is requested only when it
    matters. In the case of a web shop, this is required for check out. For a mobile
    app, it may be applicable, for example, when the user no longer just consumes
    but also wants to contribute to a stream. You can think of a news app that allows
    users to comment about the messages that appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/994dd144-3b58-4cd3-b811-3c59db03b870.png)'
  prefs: []
  type: TYPE_IMG
- en: This lowers the barrier even more; however, the downside can be that a large
    number of users will never sign-up and for that reason will be less valuable to
    you. For example, anonymous users are not likely to share a lot on social media
    from your app and inviting their friends is impossible since we do not know who
    they are.
  prefs: []
  type: TYPE_NORMAL
- en: Phone number sign-up - a great alternative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WhatsApp and a couple of other apps are using the phone number of the device
    to identify a user for the registration. This is done through an SMS verification
    code. The user enters his phone number and receives an SMS with a verification
    code, which he needs to type into the app. This will ensure that the phone number
    is correct. There are even some implementations that intercept the receiving of
    the SMS verification code and then fill in the code automatically. This will take
    away another step from the onboarding flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d22748b-72ad-42ae-9988-e82245c6e67a.png)'
  prefs: []
  type: TYPE_IMG
- en: You have to make it clear to the user that his phone number is used for verification
    purposes only and that it will not be publicly available in the app. Using a phone
    number will also lead to more valuable contributions of the user. The reason for
    this is simple. He is aware that his phone number is attached to all the actions
    he performs in the app. There are services that will take away most of the hassle
    that comes with the implementation. In our sample app, which we will discuss later
    in this chapter, Fabric and Firebase will be used because it is the easiest solution
    to implement and because it is free to use.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous onboarding - complete the user profile later
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obtaining the most minimal information from your user to get him on board is
    a smart way to keep the barrier low. Later you can encourage your user to add
    more details to his profile or by the user make particular choices from which
    your app can learn. The concept of continuous onboarding is exactly about that.
    The profile of the user will be enriched by the actions that the user will take.
    This will allow the app to offer a better and customized app experience that will
    become more dedicated over time.
  prefs: []
  type: TYPE_NORMAL
- en: LinkedIn is the perfect example, as everybody will recognize the reminders that
    LinkedIn displays. It asks you to complete your profile, to endorse connections
    (enriching the profiles of others), or to connect to people. You will often be
    reminded about that but it never will be mandatory to do these things.
  prefs: []
  type: TYPE_NORMAL
- en: 'The incentive here is not even that strong, but it works well. Who does not
    want have an All-Star profile? You can use this idea for your mobile app, as we
    will soon see in the sample app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3634f81e-2710-427a-b6fa-cae171a05d70.png)'
  prefs: []
  type: TYPE_IMG
- en: Tell a story - an example onboarding app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate the various ideas related to onboarding, we will create an Android
    app that is using Fabric for Twitter authentication and Firebase SDK for phone
    authentication. You can use Firebase as well for Twitter authentication, but the
    one that Fabric is offering is more convenient to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will name this app, Tell a Story. Using this app, users can write a story
    together. Anyone can read the stories that people create, but, if the user wants
    to contribute to the story, he needs to sign-up using Twitter or his phone number.
    Let''s start simple with a couple of wire frames that will explain the exact flow
    of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcc665ae-1604-4913-9215-a0a62ffb771d.png)'
  prefs: []
  type: TYPE_IMG
- en: The user lands on the introduction view when he opens the app for the first
    time. This view contains a clear explanation of why he should want to use the
    app and what it is about. There are two very clear call to actions shown. One
    of them is the Sign up with phone number button, the other one is the Sign up
    with Twitter button.
  prefs: []
  type: TYPE_NORMAL
- en: After the sign-up, a list of existing team stories is shown. The user can browse
    through the list, and, if he clicks on any of the stories, the full story will
    be revealed in a detailed view. The user can also decide to start a story by himself.
    Here is another clear call to action, visualized as the Start a story button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The detail view shows all lines for the story, including the names of the authors.
    The user can now read the full story or he can contribute to it by clicking on
    the Contribute to story button. Doing so will lead him to the Contribute to...
    view, where he can enter a new line of code. If the user chooses to start a new
    story by clicking on the Start a story button he will see the same view. In this
    case, the user will also be asked for a story title. Clicking on the Add new line
    to story button will add the new line to the story or will create a new story:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94525d8b-eb39-44a6-bdc1-b769b241881c.png)'
  prefs: []
  type: TYPE_IMG
- en: Onboarding sign-up when needed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will also need to add a late onboarding option to the app. For this purpose,
    we will add a Skip for now button to the Introduction view. In [Chapter 13](a62b3753-12c5-4170-808a-e0e1446e6b97.xhtml),
    *Play Store and App Store Hacks*, about split testing, we will see how we can
    learn what approach will work best. We need to know which implementation will
    lead to the highest conversion. Based on this feedback, we can remove the Skip
    for now button, the sign-up buttons on the introduction view, or make the decision
    to keep all the three options in the introduction view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that, although this button is highlighted next to demonstrate the late
    onboarding flow, this button should not be the primary call to action and therefore
    should not be marked as such. We want to lower the barrier, but we still want
    to encourage the user to sign-up early:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20765388-0169-4dd3-a74f-e84fc0ffbde3.png)'
  prefs: []
  type: TYPE_IMG
- en: If the user chooses to click on the Skip for now button as he apparently is
    not quite convinced about the benefits of the app yet, he will see the story list
    right away. Only if he wants to start a new story, or if he wants to contribute
    to an existing one, he will be asked to sign-up via either Twitter or phone/SMS.
    For our app, we want to support both types of flow. Let's start with the implementation
    of what we just saw.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the sample project for this chapter here: [https://github.com/mikerworks/packt-lean-onboarding](https://github.com/mikerworks/packt-lean-onboarding).'
  prefs: []
  type: TYPE_NORMAL
- en: The code sample has been updated, so it will use the latest and greatest (at
    the time of writing). Digits, the Fabric phone authentication service, has been
    replaced by the Firebase phone authentication service. The code sample is now
    using this service and, while I was busy anyway, I have converted the Android
    Java example to Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: You can have a look at the app first, or if you want to configure it for your
    own use you need to configure Fabric and Firebase first.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://fabric.io](https://fabric.io) and create an account. Once you
    have done that and have confirmed it, you can proceed. Enter a team name (for
    example `packt-demo`) and choose a platform (Android). After that, a new page
    in the wizard will show a number of options. Pick the Twitter option first. The
    first piece of information tells you how to configure your Android project. Use
    the wizard (or do it manually) to create the first app in the Fabric environment
    and name it `onboarding`. You need to do this to obtain keys and IDs that allow
    you to use the Fabric SDK in your own app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to do a few things for the phone number authentication. The Digit
    service of the Fabric is doing exactly that but it has been replaced by FireBase
    phone authentication. So you need to set up a few things at Firebase as well.
    Go to [https://console.firebase.google.com](https://console.firebase.google.com)
    and create a new project, or if you have not signed up for Firebase yet, you need
    to do so first.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the setup instructions at Firebase. In the authentication section, you
    can select which sign-up methods you wish to use for your application. If you
    click on the phone sign-up option and enable it, you can continue with the sample
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a walk through the app. On the fly, you can modify the API key and
    the secret to match your own setup. Once opened in Android Studio, you should
    expand the app folder. Locate the build.gradle file in this folder and open it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that the file contains a couple of dependencies on Fabric and
    Firebase. We will use that later so we can login with Twitter or Firebase phone
    authentication. In addition, we can share stories on Twitter using the `TweetComposer`
    class. Note that you may need to update the version numbers to the latest versions.
    They appear as suffixes of the definitions of the various package names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `AndroidManifest.xml` file in the `app/src/main/` folder. The
    metadata section contains the value for `ApiKey`. Modify it so it will have the
    value that corresponds with your own configuration at `Fabric.io`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The layout associated with the onboarding activity displays a short introduction
    that explains to the user why they should want to use the app and how easy it
    is to get started. Both the phone number and the Twitter sign up button are clear
    calls to actions here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db4e1ca4-6ab0-48b0-9bf2-0d49e7ccc18c.png)'
  prefs: []
  type: TYPE_IMG
- en: There is one additional button, which has been intentionally made smaller and
    less colorful. It is here to allow the user to skip the sign-up process for the
    time being, in case he wants to only see what the app is about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `strings.xml` value and update `twitter_key` and `twitter_secret`.
    Replace them with your own values. You will find them on the Fabric website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `OnboardingActivity` class. In the `onCreate` method, the `initFabric`
    method is called. This is where Fabric is initialized for Twitter authentication
    and sharing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The click listener for the Skip button makes the app jump to the list immediately.
    If clicked on, the Twitter login button will display a Twitter dialog asking for
    permission. If this permission is given, the success method of the callback will
    be triggered. We will then store the `TwitterSession` object and show the list
    of stories to the user by calling the `onShowList` method:'
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, `AuthenticationHelper` is not persisting the sessions
    other than during the lifetime of the application. In a production app, it would
    be more convenient to persist them as long as they are valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the implementation of what we just saw in the `setupTwitterLoginButton`
    and the `signinWithTwitterAuthCredential` methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `signInWithPhoneAuthCredential` method registers the user with his Twitter
    name as a Firebase user. We will use this phone number later to identify the contributions
    of the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To sign-up with a phone number, we need to tell Firebase to send a code by
    SMS to the user. We will do that in the `sendPhone` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback implemention is in the `getCallback` method. The `onCodeSent`
    is the most interesting event. If the code has been sent, we will store the returned
    verification ID. We will need it later to authenticate the user with the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After sending the code to the user, he has to enter the code to ensure the
    provided phone number is indeed his phone number. This is done in the `sendCode`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `signInWithPhoneAuthCredential` method registers the user with his phone
    number as a Firebase user. We will use this phone number later to identify the
    contributions of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of both the users. The first one is registered using Twitter,
    while the other one has used his phone number to sign-up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76bc825c-bef7-4da8-9a58-66173d448f66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open MainActivity. In the `onCreate` method, you will see that one of
    the first things that we do is call the `onList` method. The `onList` method creates
    a new `StoriesFragment`, and by calling the `showFragment` method a list of stories
    will be shown by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The MainActivity is also responsible for showing other fragments, such as the
    `StoryDetailFragment`, which shows you the full story and the `StoryContributeFragment`.
    It also contains a call to the `OnboardingActivity` for late onboarding purposes.
    This will allow the user to sign-up if they have skipped the onboarding previously,
    but want to contribute to the app later. By adding content to a story or by creating
    a new story, they will be asked to sign-up once again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `getRepository` method just returns a new instance of the `Repository` class
    that we are going to investigate next.
  prefs: []
  type: TYPE_NORMAL
- en: You will find the `Repository` class with the data package. As you can see,
    the `getDummyContent` method creates a list of dummy stories.
  prefs: []
  type: TYPE_NORMAL
- en: The `repository` class has already been prepared to be used with Firebase, but,
    since we do want to demonstrate the onboarding concept, the data is only persisting
    during the lifetime of the app. If you have read [Chapter 9](c61bb6d7-f392-40e8-8330-7cc2f681b0e6.xhtml),
    *Native, Hybrid, or Cross Platform*, it will be pretty easy to set up Firebase
    and modify this class in order to be able to store stories in the cloud as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `getStories` method returns all stories and the data asynchronously. The
    `updateContributions` method adds a new contribution to an existing story, or
    creates a new story with a first contribution if the story does not yet exist
    by calling the `addStory` method. The `addStory` method eventually creates a unique
    ID for the story and adds the story to the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `models` package, you will find the `Story` and `Contribution` class.
    A `Story` has a title and multiple contributions, and each contribution has an
    author and some content. The `Parcelable` implementation makes it more convenient
    to pass data from one fragment (or activity) to another, as we will see later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `getSummary` and the `getFullStory` methods make a `Story` object just a
    little bit smarter and it returns the last three lines or the full story, as text,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The `Contribution` class implements the `Parcelable` interface as well for the
    same reasons as for the `Story` class. Each `Contribution` instance has an author
    and a paragraph member.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing a user will see, right after the onboarding view on see what
    the app is all about. For a more complex app it could be helpful to highlight
    specific features the first time the app is used. By showing them during the onboarding
    flow we can encourage the user to sign up for the app. For this app, things are
    pretty obvious:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8c304b9-8a0d-4a5c-94df-286490307261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Everybody likes stories, so the first action probably will be that the user
    clicks on a story of which the summary looks appealing. (Again this is a hypothesis
    that needs to be proven.) If the user clicks on the floating action button (the
    one with the plus sign on it), he will create a new story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you take a look inside `StoriesFragment`, you will see that a `RecyclerView`
    widget and a `StoryAdapter` will be used to display the data shown here. In the
    `onCreateView` method, the `loadData` method will be called, which in turn calls
    the `getStories` method of the `Repository` class, passing the fragment itself
    as the handler of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When the results come in, an instance of the `StoryAdapter` class will be created
    and attached to the `RecyclerView` instance. The `StoryAdapter` binds the data
    for each story to a row in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If the user clicks on any of the rows the `OnCardViewClick` event will be triggered,
    which will call the `onReadStory` method from `MainActivity`, passing the selected
    story as the parameter. This will bring us to the `StoryDetailFragment` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This fragment displays the full story to the user, including the name of the
    contributors. Here, the user can contribute to the story by clicking on the CONTRIBUTE
    (as shown in the example image):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onCreate` method, the selected story will receive through the bundle.
    It is here where the `Parcelable` implementation comes in handy. In the `onCreateView`
    method, the content of the story will be set as text for `textView` using the
    `getFullStory` method of the `story` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fa3c4ae-5dbb-4eba-a760-55ef9ba94a46.png)'
  prefs: []
  type: TYPE_IMG
- en: In the `onClick` method, you will find the handling for the various button clicks,
    such as the CONTRIBUTE button. This will call the `onContribute` method, which
    in turn calls the `onContribute` method of the MainActivity, including the currently
    selected story. It will result in displaying the layout associated with the `StoryContributeFragment`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `onShare` method of the `StoryDetailFragment`, you will find the lines
    that are needed to compose and share a tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `StoryContributeFragment` allows the users to contribute to a story or to
    start a new story. At that moment, the user changes from a passive to an active
    user. Also, the user will be converted to a known user as he is required to sign-up,
    which he may not have done yet. The fragment obtains the selected story as a bundle
    parameter. It may be an empty one, in case the user hit the plus button, as he
    wants to create a new story. If it is an existing story, a summary of the story
    (the last three contributions) will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user clicks on the Contribute button, the `onContribute` method will
    be called. Here a new `Contribution` object will be made and, optionally, a new
    story object will be made. The contribution will be added to the story and we
    will ask the `AuthenticationHelper` class whether the current user is already
    authenticated or not. If the user is authenticated, either by a Twitter sign-up
    or by a Firebase phone sign-up, we can proceed by filling in the contributor''s
    name (Twitter name or phone number). Also, we call the `updateContributions` method
    of the `Repository` class, which will take care of storing stories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd0746c7-a767-487a-adaa-0d6d5674e2f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user is not yet authenticated, we will call the `onLateOnboarding` method
    of the MainActivity instead. Here we will also pass the story (and with that the
    contributions) as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `OnboardingActivity` will also handle the onboarding on the fly. Better
    late than never is the idea here. If you want to contribute to a story, or want
    to create a story yourself, you have to sign-up first. Now, the activity will
    display a message that indicates this, and again it gives the user the choice
    to sign-up using his Twitter account or using his phone number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If the late onboarding succeeds, the result will be returned to MainActivity,
    which will take care of adding the contribution to the story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After that the list of stories is shown again by calling the `onList` method
    of the `MainActivity` class. This time the list will include the contribution,
    or the story of the user that is no longer an unknown one. Signed up at last!
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, for the app, we have seen some cool implementations for signing up
    and late onboarding. If you like the concept, then feel free to do some further
    experimentation with the app. Think, for example, of two other great features
    for the app that we could add: An invite a friend option (to write the story with
    you) and a share option (to share the cool story on Twitter or another social
    media network). This will increase the awareness of your app. That will help you
    to grow the user base of your app. We will see more about this in [Chapter 14](2ee66b42-cffe-42de-bbce-4fa54fa7fb61.xhtml),
    *A/B Testing Your App*, which is about traction and retention:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88b799c6-7332-4e4a-ae0e-d3b5ee4abb06.png)'
  prefs: []
  type: TYPE_IMG
- en: Growth hacking is, among other things, a continuous process that results in
    existing users inviting friends to join them and use the app as well. The reason
    that people start downloading your app is because they have become aware of it.
    You will see higher conversion numbers when implementing a friend referral flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Growth hacking:'
  prefs: []
  type: TYPE_NORMAL
- en: Growth hacking (basically a modern word for marketing) is a topic that deserves
    some books on its own. You should consider building a growth engine before starting
    to build your app. Build an audience for the problem that you are going to solve
    with your app. It is a great way to test your app idea and to create awareness.
    The simplest way to do so is to create a regular blog about the topic.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/995d89fa-0980-434c-9936-6c07a3dd44d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The perfect conversion goes like this: Once the user has signed up and started
    a story or contributed to one (activation), and then decides to continue doing
    so (retention), he will become an ambassador of your app and he will start sharing
    stories or he will invite friends so they can write stories together (referrals).'
  prefs: []
  type: TYPE_NORMAL
- en: Referrals are important, as word of mouth is one of the most effective types
    of marketing. More than 70% of potential app users download apps based on recommendations
    of friends, colleagues, or family. With that in mind, the goal should be to enable
    the app users to drive more awareness, which is exactly what the Team Stories
    app tries to do. Referrals are often the only way to promote an app. This is because
    of the fact that the cost of user acquisition (advertisements) for most mobile
    apps otherwise would be higher than the revenues.
  prefs: []
  type: TYPE_NORMAL
- en: Due to their nature, particular apps, such as social, or messaging ones, and
    of course game apps as well, are very suitable for inviting friends. Often they
    would not make much sense if collaboration in some way would not be possible.
    For a lot of other apps the reason for sharing or inviting might be less obvious.
    However, if you provide incentives, as, for example, Dropbox is doing by providing
    additional space for each new reference, you can still benefit from referrals.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen that there are various ways for onboarding a user
    and to encourage a user to sign-up. We have seen that is important to keep the
    barrier as low as possible, and that you need to make it very clear from the beginning
    what the benefits of your app are and why the user wants to use it. Alternatively,
    just to quote Simon Sinek, "Start with why".
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that the implementation for social sign-up using the Firebase or
    the Fabric SDK is fairly easy to implement and we have learned how we can offer
    multiple options to our users, including the option to initially skip registration.
    Although it lowers the barrier, the latter is not necessarily a good thing. An
    anonymous user has less value than a known one. Also, a known user is easier to
    convert into a paying one (customer). You need to find out what works best for
    your app. Maybe you just want to grow a large user base to begin with. In the
    next chapter, we will see how important it is to have a scalable solution.
  prefs: []
  type: TYPE_NORMAL
