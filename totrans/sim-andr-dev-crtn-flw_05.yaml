- en: '*Chapter 4*: Testing Kotlin Coroutines'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*: 测试 Kotlin 协程'
- en: In the previous chapter, you learned about coroutine cancelations and how you
    can make your coroutines cancelable. You then learned about coroutine timeouts
    in milliseconds or `try-catch` and `CoroutineExceptionHandler`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了关于协程取消和如何使你的协程可取消的内容。然后，你学习了关于以毫秒或 `try-catch` 和 `CoroutineExceptionHandler`
    形式的协程超时。
- en: Creating tests is an important part of app development. The more code you write,
    the higher the chance that there will be bugs and errors. With tests, you can
    ensure your application works as you have programmed it. You can quickly discover
    issues and fix them immediately. Tests can make development easier, saving you
    time and resources. They can also help you refactor and maintain your code with
    confidence.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试是应用程序开发的重要部分。你编写的代码越多，出现错误和缺陷的可能性就越高。有了测试，你可以确保你的应用程序按你编程的方式工作。你可以快速发现问题并立即修复它们。测试可以使开发更容易，节省时间和资源。它们还可以帮助你自信地重构和维护代码。
- en: In this chapter, you will learn how to test Kotlin coroutines in Android. First,
    we will update the Android project for testing. We will then proceed with learning
    the steps to create tests for Kotlin coroutines.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在 Android 中测试 Kotlin 协程。首先，我们将更新 Android 项目以进行测试。然后，我们将继续学习创建 Kotlin
    协程测试的步骤。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up an Android project for testing coroutines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为测试协程设置 Android 项目
- en: Unit testing suspending functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试挂起函数
- en: Testing coroutines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试协程
- en: By the end of this chapter, you will understand coroutine testing. You will
    be able to write and run unit and integration tests for the coroutines in your
    Android applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解协程测试。你将能够为你的 Android 应用中的协程编写和运行单元测试和集成测试。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要下载并安装 Android Studio 的最新版本。你可以在 [https://developer.android.com/studio](https://developer.android.com/studio)
    找到最新版本。为了获得最佳学习体验，建议使用以下规格的计算机：
- en: Intel Core i5 or equivalent or higher
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英特尔酷睿 i5 或更高版本
- en: 4 GB RAM minimum
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小 4 GB RAM
- en: 4 GB available space
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用空间 4 GB
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例可以在 GitHub 上找到，链接为 [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04)。
- en: Setting up an Android project for testing coroutines
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试协程设置 Android 项目
- en: In this section, we will start by looking at how you can update your Android
    app to make it ready for adding and running tests. Once your project is properly
    set up, it will be easy to add unit and integration tests for your coroutines.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先探讨如何更新你的 Android 应用以使其准备好添加和运行测试。一旦你的项目设置得当，添加单元和集成测试将变得容易。
- en: When creating unit tests on Android, you must have the `app/build.gradle` dependencies
    when creating a new Android project in Android Studio.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上创建单元测试时，你必须有 `app/build.gradle` 依赖项，当你在 Android Studio 中创建新的 Android
    项目时。
- en: 'If your Android project does not have JUnit 4 yet, you can add it by including
    the following to your `app/build.gradle` dependencies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Android 项目还没有 JUnit 4，你可以通过在 `app/build.gradle` 依赖中包含以下内容来添加它：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allows you to use the JUnit 4 framework for your unit tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你使用 JUnit 4 框架进行单元测试。
- en: 'To create mock objects for your tests, you can also use mocking libraries.
    Mockito is the most popular Java mocking library, and you can use it on Android.
    To add Mockito to your tests, add the following to the dependencies in your `app/build.gradle`
    file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建测试的模拟对象，你也可以使用模拟库。Mockito 是最受欢迎的 Java 模拟库，你可以在 Android 上使用它。要将 Mockito 添加到你的测试中，请将以下内容添加到
    `app/build.gradle` 文件中的依赖项：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding this dependency allows you to use Mockito to create mock objects for
    your unit tests in your project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此依赖项允许你在项目中使用 Mockito 创建用于单元测试的模拟对象。
- en: If you prefer to use Mockito with idiomatic Kotlin code, you can use Mockito-Kotlin.
    Mockito-Kotlin is a Mockito library that contains helper functions to make your
    code more Kotlin-like.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢使用 Mockito 与惯用的 Kotlin 代码，您可以使用 Mockito-Kotlin。Mockito-Kotlin 是一个包含辅助函数的
    Mockito 库，可以使您的代码更接近 Kotlin。
- en: 'To use Mockito-Kotlin in your Android unit tests, you can add the following
    dependency to your `app/build.gradle` file dependencies:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的 Android 单元测试中使用 Mockito-Kotlin，您可以在您的 `app/build.gradle` 文件依赖项中添加以下依赖项：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will enable you to use Mockito to create mock objects for your tests, using
    idiomatic Kotlin code.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使您能够使用 Mockito 使用惯用的 Kotlin 代码创建测试的模拟对象。
- en: If you are using both Mockito (`mockito-core`) and Mockito-Kotlin in your project,
    you can just add the dependency for Mockito-Kotlin. It already has a dependency
    to `mockito-core`, which it will automatically import.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在项目中同时使用 Mockito (`mockito-core`) 和 Mockito-Kotlin，您只需添加 Mockito-Kotlin 的依赖项。它已经包含了
    `mockito-core` 的依赖项，它将自动导入。
- en: 'To test Jetpack components such as `LiveData`, add the `androidx.arch.core:core-testing`
    dependency:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 `LiveData` 等Jetpack组件，请添加 `androidx.arch.core:core-testing` 依赖项：
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This dependency contains support for testing Jetpack architecture components.
    It includes JUnit rules such as `InstantTaskExecutorRule` that you can use to
    test the `LiveData` objects in your code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此依赖项包含对测试 Jetpack 架构组件的支持。它包括 `InstantTaskExecutorRule` 等JUnit规则，您可以使用这些规则来测试您的代码中的
    `LiveData` 对象。
- en: Testing coroutines is a bit more complicated than the usual testing. This is
    because coroutines are asynchronous, tasks can run in parallel, and tasks can
    take a while before finishing. Your tests must be fast and consistent.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 测试协程比常规测试要复杂一些。这是因为协程是异步的，任务可以并行运行，并且任务可能需要一段时间才能完成。您的测试必须快速且一致。
- en: 'To help you with testing coroutines, you can use the coroutine testing library
    from the `kotlinx-coroutines-test` package. It contains utility classes to make
    testing coroutines easier and more efficient. To use it in your Android project,
    you must add the following to the dependencies in your `app/build.gradle` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您测试协程，您可以使用来自 `kotlinx-coroutines-test` 包的协程测试库。它包含一些实用类，使测试协程更容易、更高效。要在您的
    Android 项目中使用它，您必须在您的 `app/build.gradle` 文件依赖项中添加以下内容：
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will import the `kotlinx-coroutines-test` dependency into your Android
    project. You will then be able to use the utility classes from the Kotlin coroutine
    testing library to create unit tests for your coroutines.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导入 `kotlinx-coroutines-test` 依赖项到您的 Android 项目中。然后您将能够使用 Kotlin 协程测试库中的实用类为您的协程创建单元测试。
- en: 'If you want to use `kotlinx-coroutines-test` in your Android instrumented tests
    that will run on an emulator or physical device, you should add the following
    to your `app/build.gradle` file dependencies:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在将在模拟器或物理设备上运行的Android仪器测试中使用 `kotlinx-coroutines-test`，您应该在您的 `app/build.gradle`
    文件中添加以下依赖项：
- en: '[PRE23]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Adding this to your dependencies will allow you to use `kotlinx-coroutines-test`
    in your instrumented tests.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将此添加到您的依赖项中，将允许您在您的仪器测试中使用 `kotlinx-coroutines-test`。
- en: 'As of version 1.6.0, the coroutine testing library is still labeled as experimental.
    You may have to annotate the test classes with the `@ExperimentalCoroutinesApi`
    annotation, as shown in the following example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 1.6.0 版本，协程测试库仍然被标记为实验性。您可能需要使用 `@ExperimentalCoroutinesApi` 注解来注释测试类，如下面的示例所示：
- en: '[PRE28]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this section, you learned how to set up your Android project to add tests.
    You will learn how to create unit tests for suspending functions in the next section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何设置您的 Android 项目以添加测试。您将在下一节中学习如何为挂起函数创建单元测试。
- en: Unit testing suspending functions
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试挂起函数
- en: In this section, we will focus on how you can unit test your suspending functions.
    You can create unit tests for classes such as `ViewModel` that launch a coroutine
    or have suspending functions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点介绍您如何对挂起函数进行单元测试。您可以创建对 `ViewModel` 等类进行单元测试，这些类启动协程或具有挂起函数。
- en: 'Creating a unit test for a suspending function is more difficult to write as
    a suspending function can only be called from a coroutine or another coroutine.
    What you can do is use the `runBlocking` coroutine builder and call the suspending
    function from there. For example, say you have a `MovieRepository` class like
    the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为挂起函数创建单元测试比编写挂起函数本身更困难，因为挂起函数只能从协程或另一个协程中调用。您可以做的事情是使用 `runBlocking` 协程构建器，并从那里调用挂起函数。例如，假设您有一个类似于以下
    `MovieRepository` 类：
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This `MovieRepository` has a suspending function called `fetchMovies`. This
    function gets the list of movies by calling the `getMovies` suspending function
    from `movieService`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`MovieRepository`有一个名为`fetchMovies`的挂起函数。这个函数通过调用`movieService`中的`getMovies`挂起函数来获取电影列表。
- en: 'To create a test for the `fetchMovies` function, you can use `runBlocking`
    to call the suspending function, like the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要为`fetchMovies`函数创建测试，你可以使用`runBlocking`来调用挂起函数，如下所示：
- en: '[PRE43]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Using the `runBlocking` coroutine builder allows you to call suspending functions
    and do the assertion checks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`runBlocking`协程构建器允许你调用挂起函数并进行断言检查。
- en: The `runBlocking` coroutine builder is useful for testing. However, there are
    times when it can be slow because of delays in the code. Your unit tests must
    ideally be able to run as fast as possible. The coroutine testing library can
    help you with its `runTest` coroutine builder. It is the same as the `runBlocking`
    coroutine builder except it runs the suspending function immediately and without
    delays.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`runBlocking`协程构建器对于测试很有用。然而，有时它可能会因为代码中的延迟而变慢。你的单元测试理想上应该尽可能快地运行。协程测试库可以通过其`runTest`协程构建器帮助你。它与`runBlocking`协程构建器相同，只是它立即且无延迟地运行挂起函数。'
- en: 'Replacing `runBlocking` with `runTest` in the previous example would make your
    test look like the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中将`runBlocking`替换为`runTest`会使你的测试看起来像以下这样：
- en: '[PRE56]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The `runTest` function allows you to call the `movieRepository.fetchMovies()`
    suspending function and then check the result of the operation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`runTest`函数允许你调用`movieRepository.fetchMovies()`挂起函数，然后检查操作的结果。'
- en: In this section, you learned about writing unit tests for suspending functions
    in your Android project. In the next section, you will learn about testing coroutines.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何在Android项目中编写挂起函数的单元测试。在下一节中，你将学习如何测试协程。
- en: Testing coroutines
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试协程
- en: In this section, we will focus on how you can test your coroutines. You can
    create tests for classes such as `ViewModel` that launch a coroutine.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将关注如何测试你的协程。你可以为启动协程的类，如`ViewModel`，编写测试。
- en: 'For coroutines launched using `Dispatchers.Main`, your unit tests will fail
    with the following error message:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用`Dispatchers.Main`启动的协程，你的单元测试将失败，并显示以下错误消息：
- en: '[PRE70]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'This exception happens because `Dispatchers.Main` uses `Looper.getMainLooper()`,
    the application’s main thread. This main looper is not available in Android for
    local unit tests. To make your tests work, you must use the `Dispatchers.setMain`
    extension function to change the `Main` dispatcher. For example, you can create
    a function in your test class that will run before your tests:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个异常发生是因为`Dispatchers.Main`使用`Looper.getMainLooper()`，这是应用程序的主线程。在Android中，对于本地单元测试，这个主循环器是不可用的。为了使你的测试工作，你必须使用`Dispatchers.setMain`扩展函数来更改`Main`分发器。例如，你可以在你的测试类中创建一个在测试之前运行的函数：
- en: '[PRE71]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `setUp` function will run before the tests. It will change the main dispatcher
    to another dispatcher for your test.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`setUp`函数将在测试之前运行。它将主分发器更改为另一个分发器以供你的测试使用。'
- en: '`Dispatchers.setMain` will change all subsequent uses of `Dispatchers.Main`.
    After the test, you must change the `Main` dispatcher back with a call to `Dispatchers.resetMain()`.
    You can do something like the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dispatchers.setMain`将更改所有后续的`Dispatchers.Main`使用。在测试之后，你必须通过调用`Dispatchers.resetMain()`来将`Main`分发器改回。你可以做如下操作：'
- en: '[PRE75]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: After the tests have run, the `tearDown` function will be called, which will
    reset the `Main` dispatcher.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行后，将调用`tearDown`函数，该函数将重置`Main`分发器。
- en: 'If you have many coroutines to test, copying and pasting this boilerplate code
    in each test class is not ideal. You can make a custom JUnit rule instead that
    you can reuse in your test classes. This JUnit rule must be in the root folder
    of your test source set, as shown in *Figure 4.01*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有很多协程要测试，在每个测试类中复制和粘贴这个样板代码并不是一个好的选择。你可以创建一个自定义JUnit规则，这样你就可以在测试类中重复使用它。这个JUnit规则必须位于你的测试源集的根文件夹中，如图*图4.01*所示：
- en: '![Figure 4.1 – Custom TestCoroutineRule in the root test folder'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 根测试文件夹中的自定义TestCoroutineRule]'
- en: '](img/Figure_4.1_B17773.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 根测试文件夹中的自定义TestCoroutineRule]'
- en: Figure 4.1 – Custom TestCoroutineRule in the root test folder
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 根测试文件夹中的自定义TestCoroutineRule
- en: 'An example of a custom JUnit rule that you can write to reuse for automatically
    setting `Dispatchers.setMain` and `Dispatchers.resetMain` is this `TestCoroutineRule`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以编写的自定义JUnit规则示例，用于自动设置`Dispatchers.setMain`和`Dispatchers.resetMain`，是这个`TestCoroutineRule`：
- en: '[PRE79]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: This custom JUnit rule will allow your test to automatically call `Dispatchers.setMain`
    before the tests and `Dispatchers.resetMain` after the tests.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自定义JUnit规则将允许你的测试在测试之前自动调用`Dispatchers.setMain`，并在测试之后调用`Dispatchers.resetMain`。
- en: 'You can then use this `TestCoroutineRule` in your test classes by adding the
    `@get:Rule` annotation:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加`@get:Rule`注解在你的测试类中使用这个`TestCoroutineRule`：
- en: '[PRE92]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: With this code, you will not need to add the `Dispatchers.setMain` and `Dispatchers.resetMain`
    function calls every time in your test classes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这段代码，你不需要在测试类中每次都添加`Dispatchers.setMain`和`Dispatchers.resetMain`函数调用。
- en: 'When testing your coroutines, you must replace your coroutine dispatchers with
    a `TestDispatcher` for testing. To be able to replace your dispatchers, your code
    should have a way to change the dispatcher that will be used for the coroutines.
    For example, this `MovieViewModel` class has a property for setting the dispatcher:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试你的协程时，你必须用`TestDispatcher`替换你的协程调度器。为了能够替换调度器，你的代码应该有一种方法来更改将用于协程的调度器。例如，这个`MovieViewModel`类有一个用于设置调度器的属性：
- en: '[PRE98]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '`MovieViewModel` uses the dispatcher specified in its constructor or the default
    value (`Dispatchers.IO`) for launching the coroutine.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`MovieViewModel`使用其构造函数中指定的调度器或默认值（`Dispatchers.IO`）来启动协程。'
- en: 'In your test, you can then set a different `Dispatcher` for testing purposes.
    For the preceding `ViewModel`, your test could initialize `ViewModel` with a different
    dispatcher, as shown in the following example:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的测试中，你可以为测试目的设置不同的`Dispatcher`。对于前面的`ViewModel`，你的测试可以像以下示例那样使用不同的调度器初始化`ViewModel`：
- en: '[PRE107]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: The `viewModel` in `MovieViewModelTest`’s `fetchMovies` test was initialized
    with `UnconfinedTestDispatcher` as the coroutine dispatcher for testing purposes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MovieViewModelTest`的`fetchMovies`测试中，`viewModel`使用`UnconfinedTestDispatcher`作为协程调度器以进行测试初始化。
- en: 'In the previous examples, you used `UnconfinedTestDispatcher` as the `TestDispatcher`
    for the test. There are two available implementations of `TestDispatcher` in the
    `kotlinx-coroutines-test` library:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你使用了`UnconfinedTestDispatcher`作为测试的`TestDispatcher`。在`kotlinx-coroutines-test`库中，有两个`TestDispatcher`的实现可用：
- en: '`StandardTestDispatcher`: Does not run coroutines automatically, giving you
    full control over execution order'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StandardTestDispatcher`: 不自动运行协程，让你完全控制执行顺序'
- en: '`UnconfinedTestDispatcher`: Runs coroutines automatically; offers no control
    over the order in which the coroutines will be launched'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UnconfinedTestDispatcher`: 自动运行协程；不提供控制协程启动顺序的能力'
- en: 'Both `StandardTestDispatcher` and `UnconfinedTestDispatcher` have constructor
    properties: `scheduler` for `TestCoroutineScheduler` and `name` for identifying
    the dispatcher. If you do not specify the scheduler, `TestDispatcher` will create
    a `TestCoroutineScheduler` by default.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardTestDispatcher`和`UnconfinedTestDispatcher`都有构造函数属性：`scheduler`用于`TestCoroutineScheduler`，`name`用于识别调度器。如果你没有指定调度器，`TestDispatcher`将默认创建一个`TestCoroutineScheduler`。'
- en: 'The `TestCoroutineScheduler` of the `StandardTestDispatcher` controls the execution
    of the coroutine. `TestCoroutineScheduler` has three functions you can call to
    control the execution of the tasks:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`StandardTestDispatcher`的`TestCoroutineScheduler`控制协程的执行。`TestCoroutineScheduler`有三个你可以调用的函数来控制任务的执行：'
- en: '`runCurrent()`: Runs the tasks that are scheduled until the current virtual
    time'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runCurrent()`: 运行直到当前虚拟时间已安排的任务'
- en: '`advanceUntilIdle()`: Runs all pending tasks'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`advanceUntilIdle()`: 运行所有挂起的任务'
- en: '`advanceTimeBy(milliseconds)`: Runs pending tasks until current virtual advances
    by the specified milliseconds'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`advanceTimeBy(milliseconds)`: 运行挂起的任务，直到当前虚拟时间增加指定的毫秒数'
- en: '`TestCoroutineScheduler` also has a `currentTime` property that specifies the
    current virtual time in milliseconds. When you call functions such as `advanceTimeBy`,
    it will update the `currentTime` property of the scheduler.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestCoroutineScheduler`还有一个`currentTime`属性，它指定了当前虚拟时间（以毫秒为单位）。当你调用如`advanceTimeBy`这样的函数时，它将更新调度器的`currentTime`属性。'
- en: The `runTest` coroutine builder creates a coroutine with a coroutine scope of
    `TestScope`. This `TestScope` has a `TestCoroutineScheduler` (`testScheduler`)
    that you can use to control the execution of tasks.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`runTest`协程构建器创建一个具有`TestScope`协程范围的协程。这个`TestScope`包含一个`TestCoroutineScheduler`（`testScheduler`），你可以使用它来控制任务的执行。'
- en: This `testScheduler` also has extension property called `currentTime` and the
    `runCurrent`, `advanceUntilIdle`, and `advanceTimeBy` extension functions, which
    simplifies calling these functions from the `testScheduler` of the `TestScope`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `testScheduler` 还有一个名为 `currentTime` 的扩展属性和 `runCurrent`、`advanceUntilIdle`
    以及 `advanceTimeBy` 的扩展函数，这简化了从 `TestScope` 的 `testScheduler` 调用这些函数。
- en: 'Using `runTest` with a `TestDispatcher` allows you to test cases when there
    are time delays in the coroutine and you want to test a line of code before moving
    on to the next ones. For example, if your `ViewModel` has a `loading` Boolean
    variable that is set to `true` before a network operation and then is reset to
    `false` afterward, your test for the `loading` variable could look like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `runTest` 和 `TestDispatcher` 可以测试协程中存在时间延迟的情况，您想在执行下一行代码之前测试一行代码。例如，如果您的
    `ViewModel` 有一个在网络操作之前设置为 `true` 的 `loading` 布尔变量，然后操作完成后重置为 `false`，您的 `loading`
    变量的测试可能看起来像这样：
- en: '[PRE122]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: This test uses `StandardTestDispatcher` so you can control the execution of
    the tasks. After calling `fetchMovies`, you call `advanceUntilIdle` on the dispatcher’s
    `scheduler` to run the task, which will set the `loading` value to `false` after
    completion.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试使用 `StandardTestDispatcher`，这样您就可以控制任务的执行。在调用 `fetchMovies` 后，您在调度器的 `scheduler`
    上调用 `advanceUntilIdle` 来运行任务，任务完成后将 `loading` 值设置为 `false`。
- en: In this section, you learned about adding tests for your coroutines. Let's test
    what we have learned so far by adding some tests to existing coroutines in an
    Android project.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何为您的协程添加测试。让我们通过向 Android 项目中现有的协程添加一些测试来测试我们到目前为止所学的内容。
- en: Exercise 4.01 – adding tests to coroutines in an Android app
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习 4.01 – 在 Android 应用中添加协程测试
- en: 'For this exercise, you will be continuing the movie app that you worked on
    in *Exercise 2.01*, *Using coroutines in an Android app*. This application displays
    the movies that are currently playing in cinemas. You will be adding unit tests
    for the coroutines in the project by following these steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，您将继续在 *练习 2.01*，*在 Android 应用中使用协程* 中工作的电影应用。您将通过以下步骤为项目中的协程添加单元测试：
- en: Open the movie app you worked on in *Exercise 2.01*, *Using coroutines in an
    Android app*, in Android Studio.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您在 *练习 2.01*，*在 Android 应用中使用协程* 中工作的电影应用，在 Android Studio 中。
- en: 'Go to the `app/build.gradle` file and add the following dependencies, which
    will be used for the unit test:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `app/build.gradle` 文件，添加以下依赖项，这些依赖项将用于单元测试：
- en: '[PRE132]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The first line will add Mockito-Core and Mockito-Kotlin, the second line will
    add the architecture testing library, and the last line will add the Kotlin coroutine
    testing library. You will be using these for the unit tests you will add to the
    Android project.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行将添加 Mockito-Core 和 Mockito-Kotlin，第二行将添加架构测试库，最后一行将添加 Kotlin 协程测试库。您将使用这些库来为
    Android 项目添加的单元测试。
- en: 'In `app/src/test/resources`, create a `mockito-extensions` directory. In that
    directory, create a new file named `org.mockito.plugins.MockMaker`, as shown in
    *Figure 4.2*:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/src/test/resources` 中创建一个 `mockito-extensions` 目录。在该目录中，创建一个名为 `org.mockito.plugins.MockMaker`
    的新文件，如图 4.2 所示：
- en: '![Figure 4.2 – The file you need to add to the app/src/test/mockito-extensions
    directory'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – 需要添加到 app/src/test/mockito-extensions 目录的文件]'
- en: '](img/Figure_4.2_B17773.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_4.2_B17773.jpg]'
- en: Figure 4.2 – The file you need to add to the app/src/test/mockito-extensions
    directory
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 需要添加到 app/src/test/mockito-extensions 目录的文件
- en: 'In the `app/src/test/mockito-extensions/org.mockito.plugins.MockMaker` file,
    add the following content:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `app/src/test/mockito-extensions/org.mockito.plugins.MockMaker` 文件中，添加以下内容：
- en: '[PRE133]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'This will allow you to create mocks using Mockito for final classes in your
    code. Without this, your test will fail with the following error message:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您使用 Mockito 为代码中的最终类创建模拟对象。如果没有这个，您的测试将失败，并显示以下错误消息：
- en: '[PRE134]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'You will first add a unit test for the `MovieRepository` class. In `app/src/test`,
    create a test class called `MovieRepositoryTest` and add the `@OptIn(ExperimentalCoroutinesApi::class)`
    annotation to this class:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先将为 `MovieRepository` 类添加一个单元测试。在 `app/src/test` 中创建一个名为 `MovieRepositoryTest`
    的测试类，并为此类添加 `@OptIn(ExperimentalCoroutinesApi::class)` 注解：
- en: '[PRE135]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: This will be the test class for `MovieRepository`. The `ExperimentalCoroutinesApi`
    `OptIn` annotation was added as some of the classes in the `kotlinx-coroutines-test`
    library are still marked as experimental.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是 `MovieRepository` 的测试类。添加了 `ExperimentalCoroutinesApi` 的 `OptIn` 注解，因为 `kotlinx-coroutines-test`
    库中的一些类仍然标记为实验性。
- en: 'Inside the `MovieRepositoryTest` class, add a JUnit test rule for `InstantTaskExecutorRule`:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`类内部，添加一个`InstantTaskExecutorRule`的JUnit测试规则：
- en: '[PRE136]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '`InstantTaskExecutorRule` allows the test to execute the tasks synchronously.
    This is needed for the `LiveData` objects in `MovieRepository`.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`InstantTaskExecutorRule`允许测试同步执行任务。这对于`MovieRepository`中的`LiveData`对象是必需的。'
- en: 'Create a test function called `fetchMovies` to test the `fetchMovies` suspending
    function from `MovieRepository`, successfully retrieving a list of movies:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fetchMovies`的测试函数，以测试`MovieRepository`中的`fetchMovies`挂起函数成功检索电影列表：
- en: '[PRE137]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'This will be the first test for `MovieRepository.fetchMovies`: a success scenario
    that displays a list of movies.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是`MovieRepository.fetchMovies`的第一个测试：一个显示电影列表的成功场景。
- en: 'In the `MovieRepositoryTest` class'' `fetchMovies` function, add the following
    code to mock `MovieRepository` and `MovieService`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`类的`fetchMovies`函数中，添加以下代码以模拟`MovieRepository`和`MovieService`：
- en: '[PRE138]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: This will mock `MovieService` so that when its `getMovies` function is called,
    it will always return the `movies` list we provided.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这将模拟`MovieService`，使其在调用其`getMovies`函数时始终返回我们提供的`movies`列表。
- en: 'At the end of the `fetchMovies` function of `MovieRepositoryTest`, add the
    following to test that calling `fetchMovies` from the `MovieRepository` class
    returns the list of movies we expect it to return:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`的`fetchMovies`函数末尾添加以下代码，以测试从`MovieRepository`类调用`fetchMovies`返回我们期望返回的电影列表：
- en: '[PRE139]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: This will call the `fetchMovies` function from the `MovieRepository` class,
    which will call `getMovies` from `MovieService`. We are checking whether it indeed
    returns the list of movies that we set in the mocked `MovieService` earlier.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`MovieRepository`类中的`fetchMovies`函数，该函数将调用`MovieService`中的`getMovies`函数。我们正在检查它是否确实返回了我们之前在模拟的`MovieService`中设置的影片列表。
- en: Run the `MovieRepositoryTest` class. `MovieRepositoryTest` should pass and there
    should be no errors.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`MovieRepositoryTest`类。`MovieRepositoryTest`应该通过，并且不应该有错误。
- en: 'Create another test function called `fetchMoviesWithError` in the `MovieRepositoryTest`
    class to test the `fetchMovies` suspending function from the `MovieRepository`
    failing to retrieve a list of movies:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`类中创建另一个名为`fetchMoviesWithError`的测试函数，以测试`MovieRepository`中的`fetchMovies`挂起函数在检索电影列表时失败：
- en: '[PRE140]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: This will test the case when `MovieRepository` fails while retrieving the list
    of movies.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这将测试`MovieRepository`在检索电影列表时失败的情况。
- en: 'In the `MovieRepositoryTest` class'' `fetchMoviesWithError` function, add the
    following:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`类的`fetchMoviesWithError`函数中，添加以下代码：
- en: '[PRE141]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: This will mock `MovieService` so that when its `getMovies` function is called,
    it will always throw an exception with the message `Test Exception`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这将模拟`MovieService`，使其在调用其`getMovies`函数时始终抛出一个包含消息`Test Exception`的异常。
- en: 'At the end of the `fetchMoviesWithError` function of `MovieRepositoryTest`,
    add the following to test that calling `fetchMovies` from the `MovieRepository`
    class returns the list of movies we expect it to return:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieRepositoryTest`的`fetchMoviesWithError`函数末尾添加以下代码，以测试从`MovieRepository`类调用`fetchMovies`返回我们期望返回的电影列表：
- en: '[PRE142]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: This will call the `fetchMovies` function from the `MovieRepository` class,
    which will call the `getMovies` from the `MovieService` that will always throw
    an exception when called.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`MovieRepository`类中的`fetchMovies`函数，该函数将调用始终在调用时抛出异常的`MovieService`中的`getMovies`函数。
- en: In the first assertion, we are checking that `movieLiveData` is null as there
    were no movies fetched. The second assertion checks that `errorLiveData` is not
    null as there was an exception. The last assertion checks that `errorLiveData`
    contains the `Test Exception` message we set in the previous step.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个断言中，我们检查`movieLiveData`是否为null，因为没有检索到电影。第二个断言检查`errorLiveData`是否不为null，因为有异常。最后一个断言检查`errorLiveData`是否包含我们在上一步设置的`Test
    Exception`消息。
- en: Run the `MovieRepositoryTest` test. Both the `fetchMovies` and `fetchMoviesWithError`
    tests should have no errors and both should pass.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`MovieRepositoryTest`测试。`fetchMovies`和`fetchMoviesWithError`测试都应该没有错误，并且都应该通过。
- en: 'We will then create a test for `MovieViewModel`. First, we would need to update
    `MovieViewModel` so that we can change the dispatcher that the coroutine runs
    on. Open the `MovieViewModel` class and update its constructor by adding a dispatcher
    property to set the coroutine dispatcher:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将为`MovieViewModel`创建一个测试。首先，我们需要更新`MovieViewModel`，以便我们可以更改协程运行的调度器。打开`MovieViewModel`类，并通过添加一个用于设置协程调度器的`dispatcher`属性来更新其构造函数：
- en: '[PRE143]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: This will allow you to change the dispatcher of `MovieViewModel` with another
    dispatcher, which you will be doing in the tests.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许您使用另一个`dispatcher`更改`MovieViewModel`的`dispatcher`，您将在测试中这样做。
- en: 'In the `fetchMovies` function, change the `launch` coroutine builder to use
    the `dispatcher` from the constructor instead of the hardcoded dispatcher:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`fetchMovies`函数中，将`launch`协程构建器更改为使用构造函数中的`dispatcher`而不是硬编码的`dispatcher`：
- en: '[PRE144]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: This updates the code to use the `dispatcher` set from the constructor or the
    default dispatcher (`Dispatchers.IO`). You can now create a unit test for the
    `MovieViewModel` class.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此更新将代码修改为使用从构造函数设置的`dispatcher`或默认的`Dispatchers.IO`。现在您可以创建一个针对`MovieViewModel`类的单元测试。
- en: 'In the `app/src/test` directory, create a test class named `MovieViewModelTest`
    for `MovieViewModel` and add the `@OptIn(ExperimentalCoroutinesApi::class)` annotation
    to the class:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/src/test`目录中，为`MovieViewModel`创建一个名为`MovieViewModelTest`的测试类，并将`@OptIn(ExperimentalCoroutinesApi::class)`注解添加到类中：
- en: '[PRE145]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: This will be the test class for `MovieViewModel`. The `ExperimentalCoroutinesApi`
    annotation was added as some of the classes in the `kotlinx-coroutines-test` library
    are still experimental.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是`MovieViewModel`的测试类。添加了`ExperimentalCoroutinesApi`注解，因为`kotlinx-coroutines-test`库中的一些类仍然是实验性的。
- en: 'Inside the `MovieViewModelTest` class, add a JUnit test rule for `InstantTaskExecutorRule`:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieViewModelTest`类内部，添加一个针对`InstantTaskExecutorRule`的JUnit测试规则：
- en: '[PRE146]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: The `InstantTaskExecutorRule` in the unit test executes the tasks synchronously.
    This is for the `LiveData` objects in `MovieViewModel`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试中的`InstantTaskExecutorRule`会同步执行任务。这是为了`MovieViewModel`中的`LiveData`对象。
- en: 'Create a test function called `fetchMovies` to test the `fetchMovies` suspending
    function from `MovieViewModel`:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`fetchMovies`的测试函数，以测试`MovieViewModel`中的`fetchMovies`挂起函数：
- en: '[PRE147]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: This will mock `MovieRepository` so that its `movies` property will always return
    the `expectedMovies` as its value.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这将模拟`MovieRepository`，使其`movies`属性始终返回`expectedMovies`作为其值。
- en: 'At the end of the `fetchMovies` test of `MovieViewModelTest`, add the following
    to test that `MovieViewModel`’s movies will be equal to `expectedMovies`:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieViewModelTest`的`fetchMovies`测试结束时，添加以下内容以测试`MovieViewModel`的`movies`将等于`expectedMovies`：
- en: '[PRE148]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: This creates a `MovieViewModel` using the mocked `MovieRepository`. We are checking
    that the value of `MovieViewModel`’s `movies` is equal to the `expectedMovies`
    value we set to the mocked `MovieRepository`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用模拟的`MovieRepository`创建一个`MovieViewModel`。我们正在检查`MovieViewModel`的`movies`值是否等于我们设置到模拟的`MovieRepository`中的`expectedMovies`值。
- en: Run `MovieViewModelTest` or all the tests (`MovieRepositoryTest` and `MovieViewModelTest`).
    All tests should pass.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`MovieViewModelTest`或所有测试（`MovieRepositoryTest`和`MovieViewModelTest`）。所有测试都应该通过。
- en: 'Create another test function called `loading` in `MovieViewModelTest` to test
    the `loading` `LiveData` in `MovieViewModel`:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MovieViewModelTest`中创建另一个名为`loading`的测试函数，以测试`MovieViewModel`中的`loading` `LiveData`：
- en: '[PRE149]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: This will test the `loading` `LiveData` property of `MovieViewModel`. The loading
    property is `true` while fetching the movies and displays the `ProgressBar`. It
    becomes `false` and hides the `ProgressBar` after successfully fetching the movies
    or when an error is encountered.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这将测试`MovieViewModel`的`loading` `LiveData`属性。在获取电影时，加载属性为`true`并显示`ProgressBar`。在成功获取电影或遇到错误后，它变为`false`并隐藏`ProgressBar`。
- en: 'In the `loading` test function, add the following to mock `MovieRepository`
    and initialize a dispatcher that will be used for `MovieViewModel`:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`loading`测试函数中，添加以下内容以模拟`MovieRepository`并初始化一个将用于`MovieViewModel`的`dispatcher`：
- en: '[PRE150]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: This will mock `MovieRepository` and create a dispatcher of the `StandardTestDispatcher`
    type that will be used for the `MovieViewModel` test. This will allow you to control
    the execution of the task, which will be used later to check the value of `MovieViewModel`’s
    `loading` property.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这将模拟`MovieRepository`并创建一个用于`MovieViewModel`测试的`StandardTestDispatcher`类型的`dispatcher`。这将允许您控制任务的执行，稍后用于检查`MovieViewModel`的`loading`属性值。
- en: 'At the end of the `loading` test function, add the following to test the loading
    `MovieViewModel`’s `loading` property:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`loading`测试函数的末尾，添加以下内容以测试加载`MovieViewModel`的`loading`属性：
- en: '[PRE151]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: This will create a `MovieViewModel` with the mock `MovieRepository` and `dispatcher`
    you created in the previous step. Then, `fetchMovies` will be called from `MovieViewModel`
    to fetch the list of movies.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个带有模拟的`MovieRepository`和`dispatcher`的`MovieViewModel`。然后，从`MovieViewModel`调用`fetchMovies`以获取电影列表。
- en: The first assertion checks whether the `loading` value is `true`. We then used
    `advanceUntilIdle` from the dispatcher’s `scheduler` to execute all the tasks.
    This should change the `loading` value to `false`. The last line checks this indeed
    happens.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个断言检查 `loading` 值是否为 `true`。然后我们使用调度器的 `scheduler` 中的 `advanceUntilIdle` 来执行所有任务。这应该将
    `loading` 值更改为 `false`。最后一行检查这确实发生了。
- en: Run both `MovieRepositoryTest` and `MovieViewModelTest`. All the tests should
    pass.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `MovieRepositoryTest` 和 `MovieViewModelTest`。所有测试都应该通过。
- en: In this exercise, you worked on an Android project that uses coroutines and
    you have added unit tests for these coroutines.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你在一个使用协程的 Android 项目上工作，并为这些协程添加了单元测试。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on testing coroutines in your Android app. You started
    with learning how to set up your Android project in preparation for adding tests
    for your coroutines. The coroutines testing library (`kotlinx-coroutines-test`)
    helps you to create tests for your coroutines.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了在 Android 应用程序中测试协程。你从学习如何设置 Android 项目以准备添加协程测试开始。协程测试库（`kotlinx-coroutines-test`）帮助你为协程创建测试。
- en: You learned how to add unit tests for your suspending functions. You can use
    `runBlocking` and `runTest` to test code that calls suspending functions. `runTest`
    runs the code immediately, without delays.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了如何为你的挂起函数添加单元测试。你可以使用 `runBlocking` 和 `runTest` 来测试调用挂起函数的代码。`runTest` 立即运行代码，没有延迟。
- en: Then, you learned how to test coroutines. You can change the dispatcher in your
    test with a `TestDispatcher` (`StandardTestDispatcher` or `UnconfinedTestDispatcher`).
    `TestCoroutineScheduler` allows you to control the execution of the coroutine
    task.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你学习了如何测试协程。你可以通过 `TestDispatcher`（`StandardTestDispatcher` 或 `UnconfinedTestDispatcher`）更改测试中的调度器。`TestCoroutineScheduler`
    允许你控制协程任务的执行。
- en: Finally, you worked on an exercise where you added unit tests for coroutines
    in an existing Android project.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你完成了一个练习，在该练习中，你为现有的 Android 项目中的协程添加了单元测试。
- en: In the next chapter, you will explore Kotlin Flows and learn how you can use
    them for asynchronous programming in Android.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将探索 Kotlin 流（Kotlin Flows）并学习如何使用它们在 Android 中进行异步编程。
- en: Further reading
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: This book assumes that you already have knowledge of testing Android applications.
    If you would like to learn more about Android testing, you can read *Chapter 9*,
    *Unit Tests and Integration Tests with JUnit, Mockito, and Espresso*, from the
    book *How to Build Android Apps with Kotlin (Packt Publishing, 2021, ISBN 9781838984113)*.
    You can also check the Android testing documentation at [https://developer.android.com/training/testing](https://developer.android.com/training/testing).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设你已经具备测试 Android 应用程序的知识。如果你想了解更多关于 Android 测试的内容，你可以阅读《如何用 Kotlin 构建 Android
    应用程序》（Packt Publishing，2021，ISBN 9781838984113）一书中第 9 章，“使用 JUnit、Mockito 和 Espresso
    进行单元测试和集成测试”。你还可以查看 Android 测试文档，网址为 [https://developer.android.com/training/testing](https://developer.android.com/training/testing)。
- en: As of the time of writing, the coroutine testing library is still marked as
    experimental. Before the library becomes stable later, there might be some code-breaking
    changes to the classes. You can check the latest version of the library on GitHub
    at [https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test](https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test)
    to find the latest information about the coroutine testing library.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，协程测试库仍然被标记为实验性。在库变得稳定之前，类中可能会有一些破坏代码的更改。你可以在 GitHub 上查看库的最新版本，网址为 [https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test](https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test)，以获取关于协程测试库的最新信息。
