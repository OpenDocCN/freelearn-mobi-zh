- en: '*Chapter 4*: Testing Kotlin Coroutines'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about coroutine cancelations and how you
    can make your coroutines cancelable. You then learned about coroutine timeouts
    in milliseconds or `try-catch` and `CoroutineExceptionHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tests is an important part of app development. The more code you write,
    the higher the chance that there will be bugs and errors. With tests, you can
    ensure your application works as you have programmed it. You can quickly discover
    issues and fix them immediately. Tests can make development easier, saving you
    time and resources. They can also help you refactor and maintain your code with
    confidence.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to test Kotlin coroutines in Android. First,
    we will update the Android project for testing. We will then proceed with learning
    the steps to create tests for Kotlin coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android project for testing coroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing suspending functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing coroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand coroutine testing. You will
    be able to write and run unit and integration tests for the coroutines in your
    Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need to download and install the latest version of Android Studio.
    You can find the latest version at [https://developer.android.com/studio](https://developer.android.com/studio).
    For an optimal learning experience, a computer with the following specifications
    is recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: Intel Core i5 or equivalent or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB RAM minimum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB available space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04](https://github.com/PacktPublishing/Simplifying-Android-Development-with-Coroutines-and-Flows/tree/main/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android project for testing coroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start by looking at how you can update your Android
    app to make it ready for adding and running tests. Once your project is properly
    set up, it will be easy to add unit and integration tests for your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: When creating unit tests on Android, you must have the `app/build.gradle` dependencies
    when creating a new Android project in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your Android project does not have JUnit 4 yet, you can add it by including
    the following to your `app/build.gradle` dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This allows you to use the JUnit 4 framework for your unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create mock objects for your tests, you can also use mocking libraries.
    Mockito is the most popular Java mocking library, and you can use it on Android.
    To add Mockito to your tests, add the following to the dependencies in your `app/build.gradle`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding this dependency allows you to use Mockito to create mock objects for
    your unit tests in your project.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to use Mockito with idiomatic Kotlin code, you can use Mockito-Kotlin.
    Mockito-Kotlin is a Mockito library that contains helper functions to make your
    code more Kotlin-like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Mockito-Kotlin in your Android unit tests, you can add the following
    dependency to your `app/build.gradle` file dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will enable you to use Mockito to create mock objects for your tests, using
    idiomatic Kotlin code.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using both Mockito (`mockito-core`) and Mockito-Kotlin in your project,
    you can just add the dependency for Mockito-Kotlin. It already has a dependency
    to `mockito-core`, which it will automatically import.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test Jetpack components such as `LiveData`, add the `androidx.arch.core:core-testing`
    dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This dependency contains support for testing Jetpack architecture components.
    It includes JUnit rules such as `InstantTaskExecutorRule` that you can use to
    test the `LiveData` objects in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Testing coroutines is a bit more complicated than the usual testing. This is
    because coroutines are asynchronous, tasks can run in parallel, and tasks can
    take a while before finishing. Your tests must be fast and consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you with testing coroutines, you can use the coroutine testing library
    from the `kotlinx-coroutines-test` package. It contains utility classes to make
    testing coroutines easier and more efficient. To use it in your Android project,
    you must add the following to the dependencies in your `app/build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This will import the `kotlinx-coroutines-test` dependency into your Android
    project. You will then be able to use the utility classes from the Kotlin coroutine
    testing library to create unit tests for your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use `kotlinx-coroutines-test` in your Android instrumented tests
    that will run on an emulator or physical device, you should add the following
    to your `app/build.gradle` file dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Adding this to your dependencies will allow you to use `kotlinx-coroutines-test`
    in your instrumented tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of version 1.6.0, the coroutine testing library is still labeled as experimental.
    You may have to annotate the test classes with the `@ExperimentalCoroutinesApi`
    annotation, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this section, you learned how to set up your Android project to add tests.
    You will learn how to create unit tests for suspending functions in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing suspending functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on how you can unit test your suspending functions.
    You can create unit tests for classes such as `ViewModel` that launch a coroutine
    or have suspending functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a unit test for a suspending function is more difficult to write as
    a suspending function can only be called from a coroutine or another coroutine.
    What you can do is use the `runBlocking` coroutine builder and call the suspending
    function from there. For example, say you have a `MovieRepository` class like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This `MovieRepository` has a suspending function called `fetchMovies`. This
    function gets the list of movies by calling the `getMovies` suspending function
    from `movieService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a test for the `fetchMovies` function, you can use `runBlocking`
    to call the suspending function, like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Using the `runBlocking` coroutine builder allows you to call suspending functions
    and do the assertion checks.
  prefs: []
  type: TYPE_NORMAL
- en: The `runBlocking` coroutine builder is useful for testing. However, there are
    times when it can be slow because of delays in the code. Your unit tests must
    ideally be able to run as fast as possible. The coroutine testing library can
    help you with its `runTest` coroutine builder. It is the same as the `runBlocking`
    coroutine builder except it runs the suspending function immediately and without
    delays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replacing `runBlocking` with `runTest` in the previous example would make your
    test look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The `runTest` function allows you to call the `movieRepository.fetchMovies()`
    suspending function and then check the result of the operation.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about writing unit tests for suspending functions
    in your Android project. In the next section, you will learn about testing coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: Testing coroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on how you can test your coroutines. You can
    create tests for classes such as `ViewModel` that launch a coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: 'For coroutines launched using `Dispatchers.Main`, your unit tests will fail
    with the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'This exception happens because `Dispatchers.Main` uses `Looper.getMainLooper()`,
    the application’s main thread. This main looper is not available in Android for
    local unit tests. To make your tests work, you must use the `Dispatchers.setMain`
    extension function to change the `Main` dispatcher. For example, you can create
    a function in your test class that will run before your tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `setUp` function will run before the tests. It will change the main dispatcher
    to another dispatcher for your test.
  prefs: []
  type: TYPE_NORMAL
- en: '`Dispatchers.setMain` will change all subsequent uses of `Dispatchers.Main`.
    After the test, you must change the `Main` dispatcher back with a call to `Dispatchers.resetMain()`.
    You can do something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: After the tests have run, the `tearDown` function will be called, which will
    reset the `Main` dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have many coroutines to test, copying and pasting this boilerplate code
    in each test class is not ideal. You can make a custom JUnit rule instead that
    you can reuse in your test classes. This JUnit rule must be in the root folder
    of your test source set, as shown in *Figure 4.01*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Custom TestCoroutineRule in the root test folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.1_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Custom TestCoroutineRule in the root test folder
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a custom JUnit rule that you can write to reuse for automatically
    setting `Dispatchers.setMain` and `Dispatchers.resetMain` is this `TestCoroutineRule`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: This custom JUnit rule will allow your test to automatically call `Dispatchers.setMain`
    before the tests and `Dispatchers.resetMain` after the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then use this `TestCoroutineRule` in your test classes by adding the
    `@get:Rule` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: With this code, you will not need to add the `Dispatchers.setMain` and `Dispatchers.resetMain`
    function calls every time in your test classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When testing your coroutines, you must replace your coroutine dispatchers with
    a `TestDispatcher` for testing. To be able to replace your dispatchers, your code
    should have a way to change the dispatcher that will be used for the coroutines.
    For example, this `MovieViewModel` class has a property for setting the dispatcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '`MovieViewModel` uses the dispatcher specified in its constructor or the default
    value (`Dispatchers.IO`) for launching the coroutine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your test, you can then set a different `Dispatcher` for testing purposes.
    For the preceding `ViewModel`, your test could initialize `ViewModel` with a different
    dispatcher, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: The `viewModel` in `MovieViewModelTest`’s `fetchMovies` test was initialized
    with `UnconfinedTestDispatcher` as the coroutine dispatcher for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous examples, you used `UnconfinedTestDispatcher` as the `TestDispatcher`
    for the test. There are two available implementations of `TestDispatcher` in the
    `kotlinx-coroutines-test` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StandardTestDispatcher`: Does not run coroutines automatically, giving you
    full control over execution order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnconfinedTestDispatcher`: Runs coroutines automatically; offers no control
    over the order in which the coroutines will be launched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both `StandardTestDispatcher` and `UnconfinedTestDispatcher` have constructor
    properties: `scheduler` for `TestCoroutineScheduler` and `name` for identifying
    the dispatcher. If you do not specify the scheduler, `TestDispatcher` will create
    a `TestCoroutineScheduler` by default.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TestCoroutineScheduler` of the `StandardTestDispatcher` controls the execution
    of the coroutine. `TestCoroutineScheduler` has three functions you can call to
    control the execution of the tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`runCurrent()`: Runs the tasks that are scheduled until the current virtual
    time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`advanceUntilIdle()`: Runs all pending tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`advanceTimeBy(milliseconds)`: Runs pending tasks until current virtual advances
    by the specified milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TestCoroutineScheduler` also has a `currentTime` property that specifies the
    current virtual time in milliseconds. When you call functions such as `advanceTimeBy`,
    it will update the `currentTime` property of the scheduler.'
  prefs: []
  type: TYPE_NORMAL
- en: The `runTest` coroutine builder creates a coroutine with a coroutine scope of
    `TestScope`. This `TestScope` has a `TestCoroutineScheduler` (`testScheduler`)
    that you can use to control the execution of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This `testScheduler` also has extension property called `currentTime` and the
    `runCurrent`, `advanceUntilIdle`, and `advanceTimeBy` extension functions, which
    simplifies calling these functions from the `testScheduler` of the `TestScope`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `runTest` with a `TestDispatcher` allows you to test cases when there
    are time delays in the coroutine and you want to test a line of code before moving
    on to the next ones. For example, if your `ViewModel` has a `loading` Boolean
    variable that is set to `true` before a network operation and then is reset to
    `false` afterward, your test for the `loading` variable could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: This test uses `StandardTestDispatcher` so you can control the execution of
    the tasks. After calling `fetchMovies`, you call `advanceUntilIdle` on the dispatcher’s
    `scheduler` to run the task, which will set the `loading` value to `false` after
    completion.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about adding tests for your coroutines. Let's test
    what we have learned so far by adding some tests to existing coroutines in an
    Android project.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.01 – adding tests to coroutines in an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this exercise, you will be continuing the movie app that you worked on
    in *Exercise 2.01*, *Using coroutines in an Android app*. This application displays
    the movies that are currently playing in cinemas. You will be adding unit tests
    for the coroutines in the project by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the movie app you worked on in *Exercise 2.01*, *Using coroutines in an
    Android app*, in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `app/build.gradle` file and add the following dependencies, which
    will be used for the unit test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line will add Mockito-Core and Mockito-Kotlin, the second line will
    add the architecture testing library, and the last line will add the Kotlin coroutine
    testing library. You will be using these for the unit tests you will add to the
    Android project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/src/test/resources`, create a `mockito-extensions` directory. In that
    directory, create a new file named `org.mockito.plugins.MockMaker`, as shown in
    *Figure 4.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The file you need to add to the app/src/test/mockito-extensions
    directory'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.2_B17773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – The file you need to add to the app/src/test/mockito-extensions
    directory
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/src/test/mockito-extensions/org.mockito.plugins.MockMaker` file,
    add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will allow you to create mocks using Mockito for final classes in your
    code. Without this, your test will fail with the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'You will first add a unit test for the `MovieRepository` class. In `app/src/test`,
    create a test class called `MovieRepositoryTest` and add the `@OptIn(ExperimentalCoroutinesApi::class)`
    annotation to this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be the test class for `MovieRepository`. The `ExperimentalCoroutinesApi`
    `OptIn` annotation was added as some of the classes in the `kotlinx-coroutines-test`
    library are still marked as experimental.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `MovieRepositoryTest` class, add a JUnit test rule for `InstantTaskExecutorRule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`InstantTaskExecutorRule` allows the test to execute the tasks synchronously.
    This is needed for the `LiveData` objects in `MovieRepository`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a test function called `fetchMovies` to test the `fetchMovies` suspending
    function from `MovieRepository`, successfully retrieving a list of movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will be the first test for `MovieRepository.fetchMovies`: a success scenario
    that displays a list of movies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MovieRepositoryTest` class'' `fetchMovies` function, add the following
    code to mock `MovieRepository` and `MovieService`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mock `MovieService` so that when its `getMovies` function is called,
    it will always return the `movies` list we provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `fetchMovies` function of `MovieRepositoryTest`, add the
    following to test that calling `fetchMovies` from the `MovieRepository` class
    returns the list of movies we expect it to return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will call the `fetchMovies` function from the `MovieRepository` class,
    which will call `getMovies` from `MovieService`. We are checking whether it indeed
    returns the list of movies that we set in the mocked `MovieService` earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `MovieRepositoryTest` class. `MovieRepositoryTest` should pass and there
    should be no errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another test function called `fetchMoviesWithError` in the `MovieRepositoryTest`
    class to test the `fetchMovies` suspending function from the `MovieRepository`
    failing to retrieve a list of movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will test the case when `MovieRepository` fails while retrieving the list
    of movies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MovieRepositoryTest` class'' `fetchMoviesWithError` function, add the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mock `MovieService` so that when its `getMovies` function is called,
    it will always throw an exception with the message `Test Exception`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `fetchMoviesWithError` function of `MovieRepositoryTest`,
    add the following to test that calling `fetchMovies` from the `MovieRepository`
    class returns the list of movies we expect it to return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will call the `fetchMovies` function from the `MovieRepository` class,
    which will call the `getMovies` from the `MovieService` that will always throw
    an exception when called.
  prefs: []
  type: TYPE_NORMAL
- en: In the first assertion, we are checking that `movieLiveData` is null as there
    were no movies fetched. The second assertion checks that `errorLiveData` is not
    null as there was an exception. The last assertion checks that `errorLiveData`
    contains the `Test Exception` message we set in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `MovieRepositoryTest` test. Both the `fetchMovies` and `fetchMoviesWithError`
    tests should have no errors and both should pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will then create a test for `MovieViewModel`. First, we would need to update
    `MovieViewModel` so that we can change the dispatcher that the coroutine runs
    on. Open the `MovieViewModel` class and update its constructor by adding a dispatcher
    property to set the coroutine dispatcher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow you to change the dispatcher of `MovieViewModel` with another
    dispatcher, which you will be doing in the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `fetchMovies` function, change the `launch` coroutine builder to use
    the `dispatcher` from the constructor instead of the hardcoded dispatcher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This updates the code to use the `dispatcher` set from the constructor or the
    default dispatcher (`Dispatchers.IO`). You can now create a unit test for the
    `MovieViewModel` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/src/test` directory, create a test class named `MovieViewModelTest`
    for `MovieViewModel` and add the `@OptIn(ExperimentalCoroutinesApi::class)` annotation
    to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be the test class for `MovieViewModel`. The `ExperimentalCoroutinesApi`
    annotation was added as some of the classes in the `kotlinx-coroutines-test` library
    are still experimental.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `MovieViewModelTest` class, add a JUnit test rule for `InstantTaskExecutorRule`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `InstantTaskExecutorRule` in the unit test executes the tasks synchronously.
    This is for the `LiveData` objects in `MovieViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a test function called `fetchMovies` to test the `fetchMovies` suspending
    function from `MovieViewModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mock `MovieRepository` so that its `movies` property will always return
    the `expectedMovies` as its value.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `fetchMovies` test of `MovieViewModelTest`, add the following
    to test that `MovieViewModel`’s movies will be equal to `expectedMovies`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a `MovieViewModel` using the mocked `MovieRepository`. We are checking
    that the value of `MovieViewModel`’s `movies` is equal to the `expectedMovies`
    value we set to the mocked `MovieRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: Run `MovieViewModelTest` or all the tests (`MovieRepositoryTest` and `MovieViewModelTest`).
    All tests should pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create another test function called `loading` in `MovieViewModelTest` to test
    the `loading` `LiveData` in `MovieViewModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will test the `loading` `LiveData` property of `MovieViewModel`. The loading
    property is `true` while fetching the movies and displays the `ProgressBar`. It
    becomes `false` and hides the `ProgressBar` after successfully fetching the movies
    or when an error is encountered.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `loading` test function, add the following to mock `MovieRepository`
    and initialize a dispatcher that will be used for `MovieViewModel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will mock `MovieRepository` and create a dispatcher of the `StandardTestDispatcher`
    type that will be used for the `MovieViewModel` test. This will allow you to control
    the execution of the task, which will be used later to check the value of `MovieViewModel`’s
    `loading` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `loading` test function, add the following to test the loading
    `MovieViewModel`’s `loading` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a `MovieViewModel` with the mock `MovieRepository` and `dispatcher`
    you created in the previous step. Then, `fetchMovies` will be called from `MovieViewModel`
    to fetch the list of movies.
  prefs: []
  type: TYPE_NORMAL
- en: The first assertion checks whether the `loading` value is `true`. We then used
    `advanceUntilIdle` from the dispatcher’s `scheduler` to execute all the tasks.
    This should change the `loading` value to `false`. The last line checks this indeed
    happens.
  prefs: []
  type: TYPE_NORMAL
- en: Run both `MovieRepositoryTest` and `MovieViewModelTest`. All the tests should
    pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, you worked on an Android project that uses coroutines and
    you have added unit tests for these coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on testing coroutines in your Android app. You started
    with learning how to set up your Android project in preparation for adding tests
    for your coroutines. The coroutines testing library (`kotlinx-coroutines-test`)
    helps you to create tests for your coroutines.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to add unit tests for your suspending functions. You can use
    `runBlocking` and `runTest` to test code that calls suspending functions. `runTest`
    runs the code immediately, without delays.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned how to test coroutines. You can change the dispatcher in your
    test with a `TestDispatcher` (`StandardTestDispatcher` or `UnconfinedTestDispatcher`).
    `TestCoroutineScheduler` allows you to control the execution of the coroutine
    task.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you worked on an exercise where you added unit tests for coroutines
    in an existing Android project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will explore Kotlin Flows and learn how you can use
    them for asynchronous programming in Android.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes that you already have knowledge of testing Android applications.
    If you would like to learn more about Android testing, you can read *Chapter 9*,
    *Unit Tests and Integration Tests with JUnit, Mockito, and Espresso*, from the
    book *How to Build Android Apps with Kotlin (Packt Publishing, 2021, ISBN 9781838984113)*.
    You can also check the Android testing documentation at [https://developer.android.com/training/testing](https://developer.android.com/training/testing).
  prefs: []
  type: TYPE_NORMAL
- en: As of the time of writing, the coroutine testing library is still marked as
    experimental. Before the library becomes stable later, there might be some code-breaking
    changes to the classes. You can check the latest version of the library on GitHub
    at [https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test](https://github.com/Kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-test)
    to find the latest information about the coroutine testing library.
  prefs: []
  type: TYPE_NORMAL
