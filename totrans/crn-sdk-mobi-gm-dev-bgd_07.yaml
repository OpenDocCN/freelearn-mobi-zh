- en: 'Chapter 7. Physics: Falling Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。物理：下落物体
- en: There are many variations on how to incorporate the physics engine using display
    objects. So far we have worked with removing objects with collisions, moving objects
    through the stage area, and launching objects by applying force against gravity,
    just to name a few. Now we're going to explore another mechanism that allows gravity
    to control the environment. The next game we'll be creating deals with falling
    physical objects.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有许多方法可以将物理引擎与显示对象结合使用。到目前为止，我们已经处理了移除具有碰撞的对象、通过舞台区域移动对象以及通过施加对抗重力的力来发射对象，仅举几个例子。现在我们将探索另一种机制，允许重力控制环境。我们将要创建的下一个游戏将涉及下落的物理物体。
- en: 'Points that will be discussed in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的要点是：
- en: Working with more physics bodies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与更多物理体一起工作
- en: Customizing the body construction
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制身体构造
- en: Tracking the objects caught
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪捕获的物体
- en: Working with post-collisions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与后碰撞一起工作
- en: Creating falling objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建下落物体
- en: Here's to creating another fun simple game in this segment. Let's get cracking!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分，让我们再创建一个有趣简单的游戏。让我们开始吧！
- en: 'Creating our new game: Egg Drop'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的新游戏：鸡蛋掉落
- en: Every step taken so far has taught us more about game development on the iOS/Android
    devices. In this new segment, our game will include sound effects, which will
    enhance the sensory experience in our games.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止的每一步都让我们对iOS/Android设备上的游戏开发有了更多的了解。在这个新的部分中，我们的游戏将包括音效，这将增强我们游戏中的感官体验。
- en: Tip
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure that you are using the latest stable build of Corona SDK Version 2011.704.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您使用的是Corona SDK版本2011.704的最新稳定版本。
- en: The new game we will be creating is called **Egg Drop.** The player controls
    the main character, which is a lumberjack with a frying pan. During gameplay,
    eggs start falling from the sky and it is the lumberjack's job to catch the eggs
    in his frying pan and not let them hit the ground. Every egg caught earns 500
    points. The player starts with 3 lives. When an egg fails to hit the frying pan
    and hits the ground, a life is lost. When all 3 lives are gone, the game is over.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的新游戏被称为**鸡蛋掉落**。玩家控制主要角色，即一个拿着平底锅的伐木工。在游戏过程中，鸡蛋从天空中掉落，伐木工的任务是用手中的平底锅接住鸡蛋，不让它们掉到地上。每个接住的鸡蛋获得500分。玩家开始时有3条生命。当一个鸡蛋未能击中平底锅而击中地面时，就会失去一条生命。当所有3条生命都用完时，游戏结束。
- en: When starting the new game project, be sure to grab the `Egg Drop` file from
    the `Chapter 7` folder. You can download the project files accompanying this book
    from the Packt website [www.packt.com](http://www.packt.com). It contains all
    the necessary files that are built-out for you, such as the `build.settings, config.lua,
    ui.lua`, audio files, and art assets needed for the game. You'll then have to
    create a brand new `main.lua` file in the project folder before you start coding.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始新的游戏项目时，请确保从“第7章”文件夹中获取“鸡蛋掉落”文件。您可以从Packt网站 [www.packt.com](http://www.packt.com)
    下载本书附带的项目文件。它包含所有为您构建的必要文件，例如 `build.settings, config.lua, ui.lua`，音频文件和游戏所需的美术资源。在开始编码之前，您必须在项目文件夹中创建一个新的
    `main.lua` 文件。
- en: '![Creating our new game: Egg Drop](img/1888_07_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的新游戏：鸡蛋掉落](img/1888_07_01.jpg)'
- en: Starting variables
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始变量
- en: This will be our first full game setup filled with notable Corona SDK features.
    We'll be combining our base knowledge of what we learned so far with variables,
    display objects, the physics engine, touch/accelerometer events, and audio. Many
    of Corona's APIs are easy to use and understand. This shows the fast learning
    curve with Corona just by having basic to no knowledge of programming.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们的第一个完整游戏设置，其中包含许多Corona SDK的特点。我们将结合到目前为止所学的基础知识，包括变量、显示对象、物理引擎、触摸/加速度计事件和音频。Corona的许多API都易于使用和理解。这显示了使用Corona进行快速学习曲线，即使基本没有编程知识。
- en: Time for action—setting up the variables
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置变量
- en: Let's get started with introducing the variables we'll be using to create our
    game. There will be a combination of display objects, integers to keep count,
    and pre-loading the main sound effects during gameplay.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始介绍我们将使用来创建游戏的变量。这将包括显示对象、用于计数的整数以及在游戏过程中预加载的主要音效。
- en: Hide the status bar and add in `display.newGroup()` called `gameGroup`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏状态栏并添加名为 `gameGroup` 的 `display.newGroup()`。
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Include the external modules in the game.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏中包含外部模块。
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add in the display objects.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加显示对象。
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Add in the variables.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加变量。
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the egg boundaries and density.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建鸡蛋边界和密度。
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Set up the accelerometer and audio.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置加速度计和音频。
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What just happened?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have continued creating a similar setup of our variables like in the Panda
    Star Catcher game. It's more efficient to organize them by separating groups,
    display objects, audio, and so on.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续创建与Panda Star Catcher游戏类似的变量设置。通过将它们分组、显示对象、音频等来组织它们更有效率。
- en: Many of the variables displayed have designated integers that fulfill the goals
    of gameplay. This includes values such as `gameLives = 3` and `eggCount = 0`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的许多变量都有指定的整数，以满足游戏目标。这包括`gameLives = 3`和`eggCount = 0`等值。
- en: Controlling the main character
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制主角
- en: Accelerometer events work best with the main scope of the game. It enables you
    to view the full real estate of the game environment without having to interact
    with touches on the screen. Necessary touch events would make sense for user interface
    buttons such as pause, menu, play, and so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计事件与游戏的主范围配合得最好。它使你能够在不触摸屏幕的情况下查看游戏环境的全部区域。必要的触摸事件对于用户界面按钮，如暂停、菜单、播放等是有意义的。
- en: Time for action—moving the character
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——移动角色
- en: Eggs will be falling in all different areas of the screen from the sky. Let's
    prepare our main character to move through all potential areas on the screen.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 鸡蛋将从屏幕的各个不同区域从天空落下。让我们为主角准备移动通过屏幕上所有潜在区域的能力。
- en: Set up a new local function called `moveChar()` with an `event` parameter.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个新的局部函数`moveChar()`，带有`event`参数。
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add in the accelerometer movement for the character.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为角色添加加速度计移动。
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create character boundaries where they moves on the screen. This enables the
    character to stay within the game screen and not go past the offscreen boundaries.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上角色移动的地方创建角色边界。这使得角色可以保持在游戏屏幕内，不会越过屏幕外的边界。
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What just happened?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: To make the accelerometer movement work with a device, we have to use `yGravity`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使加速度计移动与设备一起工作，我们必须使用`yGravity`。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Accelerometer events are based on portrait scale when `xGravity` and `yGravity`
    are used accordingly. When display objects are designated for landscape mode,
    `xGravity` and `yGravity` values are switched to compensate for the events to
    work properly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`xGravity`和`yGravity`时，加速度计事件基于纵向比例。当指定显示对象为横向模式时，`xGravity`和`yGravity`的值会切换以补偿事件以正确工作。
- en: You will notice that the code in step 3 keeps the `charObject` from going past
    any wall border boundaries.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到第3步中的代码阻止了`charObject`越过任何墙壁边界。
- en: Have a go hero—adding touch events
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧，英雄——添加触摸事件
- en: The character is currently controlled by the accelerometer. Another option to
    control the character is through a touch event. Try replacing the event listener
    with`"touch"` and using event parameters so the touch event works properly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目前角色由加速度计控制。另一种控制角色的方法是触摸事件。尝试用`"touch"`替换事件监听器并使用事件参数，以便触摸事件正常工作。
- en: 'If you remember how we incorporated the paddle movement with Breakout in [Chapter
    3](ch03.html "Chapter 3. Building our First Game: Breakout"), *Building our First
    Game: Breakout* and [Chapter 4](ch04.html "Chapter 4. Game Controls"), *Game Controls*
    for the simulator, it should be very similar.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你记得我们如何在第3章中结合Breakout的挡板移动，*Building our First Game: Breakout* 和第4章的*Game
    Controls*，*Game Controls* 对于模拟器，应该非常相似。'
- en: Updating the score
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新分数
- en: When the score is updated, it refers to our text display objects and translates
    the value from the number into a string.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当分数更新时，它指的是我们的文本显示对象，并将数值转换为字符串。
- en: 'For example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the previous example, you will notice that we have set a values of `100`
    to `gameScore`. In the following lines for `scoreText`, the `gameScore` is used
    to concatenate the string,`"Score: "` and the value of `gameScore`. Doing so displays
    the value of `gameScore` in a string format by `scoreText`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '在前面的例子中，你会注意到我们将`gameScore`的值设置为`100`。在下面的`scoreText`行中，使用`gameScore`来连接字符串`"Score:
    "`和`gameScore`的值。这样做通过`scoreText`以字符串格式显示`gameScore`的值。'
- en: Time for action—setting the score
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设置分数
- en: Who doesn't like some friendly competition? We're familiar with scoreboards
    from the games we've made in the previous chapters. So we are no strangers on
    how to track the score.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 谁不喜欢一些友好的竞争呢？我们对之前章节中制作的游戏的计分板很熟悉。因此，我们并不陌生于如何跟踪分数。
- en: Create a local function called `setScore()` with a parameter called `scoreNum`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`setScore()`的局部函数，带有名为`scoreNum`的参数。
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Set variables to count the score.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置变量来计算分数。
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Have the score updated when points are earned in gameplay and close the function.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在游戏过程中获得分数时更新分数，并关闭函数。
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What just happened?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: When `setScore(scoreNum)` is called within any function, it will refer to all
    methods using the variable `gameScore`. Assuming that the `gameScore = 0` at the
    start of the application, the value increments to what the `gameScore` is set
    to.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当在任意函数中调用 `setScore(scoreNum)` 时，它将引用所有使用变量 `gameScore` 的方法。假设在应用程序开始时 `gameScore
    = 0`，其值增加到 `gameScore` 设置的值。
- en: 'In `scoreText.text = "Score: " .. gameScore, "Score: "` is the string that
    displays on the device during gameplay. `gameScore` takes the current value given
    to the variable and displays it as a string.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `scoreText.text = "Score: " .. gameScore, "Score: "` 中，`"Score: "` 是在游戏过程中显示在设备上的字符串。`gameScore`
    获取变量当前赋予的值并将其显示为字符串。'
- en: Displaying the environment
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示环境
- en: A logical setting for your display objects helps the player envision the relationship
    between the main character and the environment. Since our main character is a
    lumberjack, it would make sense to have him set in a forest or an area focused
    entirely on nature.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 合理设置显示对象有助于玩家想象主要角色与环境之间的关系。由于我们的主要角色是伐木工，所以他置身于森林或专注于自然的区域中是有意义的。
- en: Time for action—drawing the background
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——绘制背景
- en: In this section, we'll be filling the screen with our environment display objects.
    This includes our background and ground objects respectively and adding physical
    elements to our ground so that we can designate collision events for it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将填充屏幕上的环境显示对象。这包括我们的背景和地面对象，并添加物理元素到我们的地面，以便我们可以为它指定碰撞事件。
- en: Create a local function called `drawBackground()`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `drawBackground()` 的局部函数。
- en: '[PRE13]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Add in the background image.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加背景图像。
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Add in the ground elements and create the ground physical boundary. Close the
    function.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加地面元素并创建地面物理边界。关闭函数。
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The `background` and `ground` display objects are placed in the function called
    `drawBackground()`. The function `display.newImageRect()` is used since we are
    incorporating **Dynamic Scaling** on some of our images. The `ground` display
    object has a customized physical shape that is not of the same size as the original
    display object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`background` 和 `ground` 显示对象放置在名为 `drawBackground()` 的函数中。由于我们的一些图像正在采用**动态缩放**，因此使用了
    `display.newImageRect()` 函数。`ground` 显示对象有一个定制的物理形状，其大小与原始显示对象不同。'
- en: Our `background` object is centered to the dimensions of the device screen area
    and inserted into `gameGroup`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `background` 对象被放置在设备屏幕区域的中心，并插入到 `gameGroup` 中。
- en: The `ground` display object is placed near the bottom of the display area. It
    is assigned a name through `ground.myName = "ground"`. We'll be using the name`"ground"`
    later on for determining collision events. A customized physical boundary is made
    for ground through `groundShape`. This allows the body of the ground to affect
    the assigned dimensions of the display object. When `physics.addBody()` is initialized,
    we use `groundShape` as the shape parameter. Next, `ground` is set to `gameGroup`
    as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`ground` 显示对象放置在显示区域的底部附近。它通过 `ground.myName = "ground"` 被赋予一个名称。我们稍后会使用 `"ground"`
    名称来确定碰撞事件。通过 `groundShape` 为地面创建了一个定制的物理形状，这允许地面的身体影响分配给显示对象的尺寸。当 `physics.addBody()`
    被初始化时，我们使用 `groundShape` 作为形状参数。接下来，将 `ground` 设置为 `gameGroup`。'
- en: Displaying the heads-up display
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示抬头显示
- en: In gaming, the **heads-up display (HUD)** is the method used to relay information
    visually to the player. In many games, the common features displayed are health/lives,
    time, weapons, menus, maps, and so on. This keeps your player on alert to what
    is currently happening during gameplay. When it comes to tracking your lives,
    you want to be informed how many are left before your character runs out of chances
    to continue playing and the game ends.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，**抬头显示（HUD）** 是用来向玩家视觉传达信息的方法。在许多游戏中，常见的显示功能包括健康/生命值、时间、武器、菜单、地图等。这使玩家能够保持警觉，了解游戏过程中正在发生的事情。当涉及到跟踪生命值时，你希望了解在角色耗尽继续游戏的机会之前还剩下多少。
- en: Time for action—designing the HUD
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——设计HUD
- en: While trying to make the player's gaming experience an enjoyable one, it's important
    that the information displayed is relevant to the game and placed strategically
    so it doesn't interfere with the main gaming area.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试让玩家的游戏体验变得愉快的同时，显示的信息与游戏相关并且放置得战略性地，这样就不会干扰主要游戏区域。
- en: Create a new local function called `hud()`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`hud()`的新局部函数。
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Display the text for the eggs that are caught during gameplay.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示在游戏过程中捕获的鸡蛋的文本。
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add in the text to track the lives.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加跟踪生命值的文本。
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add in text for the score and close the function.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加分数文本并关闭函数。
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Time for action—designing the HUD](img/1888_07_02.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——设计HUD](img/1888_07_02.jpg)'
- en: What just happened?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: 'The `eggText` display object will be found near the bottom-right corner of
    the screen. It''s still in view to the user while in gameplay and stays out of
    the main focus point at the same time. Notice that `eggText = display.newText(
    "Caught: " .. eggCount, 0, 0, "Arial", 45 )` will refer to `eggCount` when the
    value is updated.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`eggText`显示对象将在屏幕的右下角找到。在游戏过程中，它仍然对用户可见，同时又不干扰主要焦点。注意`eggText = display.newText(
    "Caught: " .. eggCount, 0, 0, "Arial", 45 )`将在值更新时引用`eggCount`。'
- en: The `livesText` display object setup is similar to `eggText`. It is placed in
    the top right-hand corner of the screen. The placement for this object is rather
    prominent because of its importance in the game. It's in an area that is noticeable
    from the background and allows the player to refer to during the game. `livesText`
    decrements the number when `gameLives` is updated.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`livesText`显示对象的设置与`eggText`类似。它位于屏幕的右上角。由于其在游戏中的重要性，这个对象的放置相当突出。它位于一个从背景中容易注意到的地方，允许玩家在游戏中参考。当`gameLives`更新时，`livesText`会减少数字。'
- en: The initial setup for `scoreText` starts in the `hud()` function. It is placed
    on the top left-hand corner of the screen, opposite from `livesText`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`scoreText`的初始设置从`hud()`函数开始。它位于屏幕的左上角，与`livesText`相对。'
- en: Creating the game lives
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建游戏生命值
- en: If there are no consequences in a game, then there is no sense of urgency to
    complete the main objectives. To keep a player engaged during gameplay, introducing
    elements that add some challenging aspects will keep the competitiveness and excitement
    going. Adding consequences in a game creates tension for the player and gives
    them more motivation to stay alive.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果游戏中没有后果，那么就没有紧迫感去完成主要目标。为了在游戏过程中保持玩家的参与度，引入一些具有挑战性的元素将保持竞争性和兴奋感。在游戏中添加后果会给玩家带来紧张感，并给予他们更多生存下去的动力。
- en: Time for action—counting the lives
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——计算生命值
- en: Tracking the lives left in the game keeps the player updated on how much sooner
    it will be until the game is over.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪剩余生命值使玩家了解游戏何时结束。
- en: Set up the function called `livesCount()`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置名为`livesCount()`的函数。
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Display the text for lives every time the number is decremented.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次数字减少时显示生命值的文本。
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: '`livesCount()` is a separate function that updates `gameLives`. It makes sure
    that you''re aware that `gameLives = gameLives -1`. This decreases the set value
    instantiated at the beginning of the code. When `gameLives` changes values, it
    displays the update through `livesText`. The `print` statement is used towards
    the end of the function to track the count in the terminal window.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`livesCount()`是一个单独的函数，用于更新`gameLives`。它确保你知道`gameLives = gameLives -1`。这减少了代码开始时实例化的设置值。当`gameLives`的值发生变化时，它会通过`livesText`显示更新。函数末尾的`print`语句用于在终端窗口中跟踪计数。'
- en: When `gameLives < 1`, the `callGameOver()` function will be called, which will
    show the game over elements of the game.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当`gameLives < 1`时，将调用`callGameOver()`函数，该函数将显示游戏的结束元素。
- en: Have a go hero—adding images for the game lives
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄尝试——为游戏生命值添加图像
- en: Currently, the game uses display text on screen to show the count of how many
    lives are left during gameplay. A way to make the HUD display more appealing is
    by creating/adding small icons that correlate with the game such as eggs or a
    frying pan.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，游戏使用屏幕上的显示文本来显示游戏过程中剩余生命值的数量。为了使HUD显示更具吸引力，可以通过创建/添加与游戏相关的小图标，如鸡蛋或煎锅。
- en: Three separate display objects need to be created and placed in an orderly fashion
    so that when a life is taken away, the alpha of the object is reduced to `0.5`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 需要创建并有序放置三个单独的显示对象，以便当生命被夺走时，对象的透明度减少到`0.5`。
- en: A method needs to be created so that all the three display objects are affected
    when the game lives are reduced to `0.`
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 需要创建一个方法，以便当游戏生命值减少到`0`时，所有三个显示对象都会受到影响。
- en: Introducing the main character
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍主要角色
- en: Our main character will be animated for every action applied during gameplay.
    We will also create a **complex body construction** since the focus on its collision
    points will be towards the object he is holding and not his entire body.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要角色将在游戏过程中应用每个动作时进行动画。我们还将创建一个**复杂身体构造**，因为对其碰撞点的关注将指向他持有的对象，而不是他的整个身体。
- en: Complex body construction
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复杂身体构造
- en: It is also possible to construct a body from multiple elements. Each body element
    is specified as a separate polygon shape with its own physical properties.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 也可能从多个元素中构建一个身体。每个身体元素都指定为一个具有自己物理属性的独立多边形形状。
- en: Since collision polygons in **Box2D** must be convex, any game object with a
    concave shape must be constructed by appending multiple body elements.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**Box2D**中的碰撞多边形必须是凸形的，任何具有凹形形状的游戏对象都必须通过附加多个身体元素来构建。
- en: 'The constructor for a complex body is the same as the simple polygon body constructor,
    except with more than one body element listed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂身体构造的构造函数与简单多边形身体构造函数相同，只是列出了多个身体元素：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Each body element may have its own physical properties, along with a shape
    definition for its collision boundaries. For example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 每个身体元素可能有自己的物理属性，以及为其碰撞边界定义的形状。例如：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As in simpler cases, the `bodyType` attribute is optional and will default to`"dynamic"`
    if not specified.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与简单情况一样，`bodyType`属性是可选的，如果未指定，则默认为`"dynamic"`。
- en: Time for action—creating the character
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建角色
- en: The main character was created with a sprite sheet and needs to be set up to
    view the animation it provides. Other display images that will make an appearance
    include a cracked egg when a collision to a physical object has been made.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 主要角色是通过精灵表创建的，需要设置以查看它提供的动画。其他将出现的显示图像包括碰撞物理对象时的裂缝鸡蛋。
- en: Create a new local function called `createChar()`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`createChar()`的新局部函数。
- en: '[PRE24]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create the sprite sheet for the main character.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建主要角色的精灵表。
- en: '[PRE25]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Set the starting position and physical properties for the main character.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主要角色的起始位置和物理属性。
- en: '[PRE26]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Add in the transition image after the egg has made a collision.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在鸡蛋发生碰撞后添加过渡图像。
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Time for action—creating the character](img/1888_07_03.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——创建角色](img/1888_07_03.jpg)'
- en: What just happened?
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The sprite sheet being referred to is called `spriteSet` and takes the first
    `4` frames of animation from`"charSprite.png"`. We created an animation set through
    `sprite.add( spriteSet, "move", 1, 4, 400, 0 )`. Every time`"move"` is called,
    it starts the animation from frame `1` and plays `4` frames from the start at
    `400` milliseconds.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所指的精灵表称为`spriteSet`，并从`"charSprite.png"`中获取动画的前`4`帧。我们通过`sprite.add( spriteSet,
    "move", 1, 4, 400, 0 )`创建了一个动画集。每次调用`"move"`时，它都会从帧`1`开始动画，并在`400`毫秒内播放`4`帧。
- en: The main display object is called `charObject` that takes on the characteristics
    of `spriteSet`. When it calls `prepare("move")`, that animation sequence plays
    when the `play()` command is executed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 主要显示对象称为`charObject`，它具有`spriteSet`的特性。当它调用`prepare("move")`时，在执行`play()`命令时，该动画序列会播放。
- en: An important change to the physical body of the character is that its main collision
    point will be directed towards the frying pan used in the animation. Any collision
    detection on the character's body will not be read. The `charObject` is given
    a name called`"character"`, which will be used to detect the collision even with
    the falling egg.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对角色物理身体的一个重要更改是，其主要碰撞点将指向动画中使用的煎锅。对角色身体的任何碰撞检测都不会被读取。`charObject`被赋予一个名为`"character"`的名称，这将用于检测包括掉落的鸡蛋在内的碰撞。
- en: We have also placed the fried egg in this function for preparation on the collision.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在这个函数中放置了煎蛋，以准备碰撞。
- en: Adding post-collisions
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加后碰撞
- en: We want to make sure that an event type occurs right after an object has interacted
    with another object. At the instance of a post-collision, we can confirm the collision
    force between two objects. This helps us determine that the object that is destroyed
    was completed with a set amount of force.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想确保在对象与另一个对象交互后立即发生事件类型。在后碰撞的瞬间，我们可以确认两个物体之间的碰撞力。这有助于我们确定被摧毁的物体是以一定的力量完成的。
- en: Collision handling
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 碰撞处理
- en: Be careful on how you handle the Box2D physics engine. It will crash during
    a collision if Corona code attempts to modify objects still involved in the collision,
    since Box2D is still working out iterated mathematics on them.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Box2D 物理引擎时要小心。如果 Corona 代码尝试修改仍在碰撞中的对象，Box2D 仍然在它们上执行迭代数学运算，这会导致崩溃。
- en: For crash-proof collision detection, do not have collisions occur immediately.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现防崩溃的碰撞检测，不要立即发生碰撞。
- en: Do not modify/create/destroy physics objects during a collision in order to
    prevent crashing.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止崩溃，不要在碰撞期间修改/创建/销毁物理对象。
- en: If you need to modify/create/destroy an object as a result of a collision, your
    collision handler should set a flag or add a time delay so the change can occur
    later with `timer.performWithDelay()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要根据碰撞修改/创建/销毁一个对象，你的碰撞处理器应该设置一个标志或添加一个时间延迟，以便稍后通过 `timer.performWithDelay()`
    来执行更改。
- en: Body properties
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物体属性
- en: Many of the native Box2D methods have been made into simpler dot properties
    for display objects. The following examples show that a body, `newBody`, has been
    created using one of the constructor methods.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 许多原生的 Box2D 方法已经被转换为简单的点属性以供显示对象使用。以下示例显示了一个使用构造方法之一创建的物体 `newBody`。
- en: body.isAwake
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isAwake
- en: This is a Boolean for the current awake state. By default, all bodies automatically
    *go to sleep* when there is no interaction with them for a couple of seconds.
    Bodies stop simulating until some kind of collision or other interaction wakes
    them up.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔值，表示当前物体的清醒状态。默认情况下，所有物体在没有交互的情况下几秒钟后会自动 *进入休眠*。物体停止模拟，直到发生某种碰撞或其他交互将其唤醒。
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: body.isBodyActive
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isBodyActive
- en: This is a Boolean for the active state of a body. Inactive bodies are not destroyed,
    but they are removed from the simulation and cease to interact with other bodies.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔值，表示物体的活动状态。非活动物体不会被销毁，但它们会被从模拟中移除，并停止与其他物体交互。
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: body.isBullet
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isBullet
- en: This is a Boolean for a body that is treated like a *bullet*. Bullets are subject
    to continuous collision detection. The default is `false.`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔值，表示一个被当作 *子弹* 处理的物体。子弹受到连续碰撞检测的影响。默认值为 `false.`
- en: '[PRE30]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: body.isSensor
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isSensor
- en: This is a Boolean property that sets the `isSensor` property across all elements
    in the body. A sensor passes through other objects instead of bouncing off them,
    but detects some collision. This property acts across all body elements and will
    override any `isSensor` settings on the elements themselves.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔属性，用于设置物体中所有元素的 `isSensor` 属性。传感器会穿过其他物体而不是反弹，但会检测到一些碰撞。此属性作用于所有身体元素，并将覆盖元素本身的任何
    `isSensor` 设置。
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: body.isSleepingAllowed
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isSleepingAllowed
- en: This is a Boolean for a body that is allowed to go to sleep. A body that is
    awake is useful in cases such as tilt-gravity since sleeping bodies do not respond
    to changes in global gravity. The default is `true.`
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔值，表示一个允许进入休眠状态的物体。处于清醒状态的物体在倾斜重力等情况下很有用，因为休眠的物体不会对全局重力的变化做出反应。默认值为 `true.`
- en: '[PRE32]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: body.isFixedRotation
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.isFixedRotation
- en: This is a Boolean for a body whose rotation should be locked, even if the body
    is about to load or subjected to off-center forces. The default is `false.`
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个布尔值，表示即使物体即将加载或受到非中心力，其旋转也应该被锁定。默认值为 `false.`
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: body.angularVelocity
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.angularVelocity
- en: This is the value of the current rotational velocity in degrees per second.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当前角速度的值，单位为每秒度数。
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: body.linearDamping
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.linearDamping
- en: This is the value for how much the linear motion of a body is damped. This is
    the rate of decrease of angular velocity over time. The default is `0`
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制物体线性运动阻尼的值。这是角速度随时间减少的速率。默认值为 `0`
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: body.angularDamping
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.angularDamping
- en: The value for how much the rotation of a body should be damped. The default
    is `0.`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制物体旋转阻尼的值。默认值为 `0.`
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: body.bodyType
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: body.bodyType
- en: This is a string value for the type of physical body being simulated. The available
    values are`"static", "dynamic"`, and`"kinematic":`
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个表示正在模拟的物理身体类型的字符串值。可用的值有 `"static"`、`"dynamic"` 和 `"kinematic"`：
- en: '`static` bodies don''t move or interact with each other. Examples of static
    objects would include the ground or the walls of a maze.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static` 物体不会移动或相互交互。静态物体的例子包括地面或迷宫的墙壁。'
- en: '`dynamic` bodies are affected by gravity and collisions with other body types.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dynamic` 物体受到重力和其他物体类型碰撞的影响。'
- en: '`kinematic` objects are affected by forces but not by gravity. Bodies that
    are draggable objects should be set to`"kinematic"` for the duration of the drag
    event.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kinematic`对象受到力的作用，但不受重力的影响。对于可拖动的对象，应在拖动事件期间将其设置为`"kinematic"`。'
- en: The default body type is`"dynamic"`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 默认身体类型是`"dynamic"`。
- en: '[PRE37]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Time for action—creating the egg collision
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建鸡蛋碰撞
- en: We have handled collisions in the previous sample games we created. Handling
    post-collisions requires the introduction of force to execute the completion of
    a post-collision event.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前创建的示例游戏中处理了碰撞。处理碰撞后需要引入力来执行碰撞后事件的完成。
- en: Create a new local function called `onEggCollision()` with two parameters called
    `self` and `event`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`onEggCollision()`的新局部函数，带有两个参数`self`和`event`。
- en: '[PRE38]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Create an `if` statement when force is greater than `1` and `not self.isHit`.
    Add in the `eggCaughtSound` sound effect.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当力大于`1`且`not self.isHit`时创建一个`if`语句。添加`eggCaughtSound`声音效果。
- en: '[PRE39]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Make `self` invisible and inactive and replace it with the `friedEgg` display
    object.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使`self`不可见并停用，并用`friedEgg`显示对象替换它。
- en: '[PRE40]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create a function that transitions the `friedEgg` display object and makes it
    fade on the stage using the `onComplete` command.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，使用`onComplete`命令将`friedEgg`显示对象过渡到舞台并使其淡出。
- en: '[PRE41]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Using `if event.other.myName == "character"`, update the `eggCount` when the
    main character catches the eggs. Also update the `gameScore` by `500` points for
    every collision. If the egg hits the ground, use `elseif event.other.myName ==
    "ground"` and decrement the lives using `livesCount()`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`if event.other.myName == "character"`，当主要角色抓住鸡蛋时更新`eggCount`。对于每次碰撞，通过`500`分更新`gameScore`。如果鸡蛋碰到地面，使用`elseif
    event.other.myName == "ground"`并使用`livesCount()`减少生命值。
- en: '[PRE42]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![Time for action—creating the egg collision](img/1888_07_04.jpg)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——创建鸡蛋碰撞](img/1888_07_04.jpg)'
- en: What just happened?
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Using `onEggCollision( self, event )`, we set up the function with the `if`
    statement for `event.force > 1 and not self.isHit`. When both statements return
    `true`, the sound effect for the egg plays. The initial egg falling from the sky
    is removed from the scene upon collision and replaced by the `friedEgg` display
    object in the same location using `friedEgg.x = self.x; friedEgg.y = self.y`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`onEggCollision( self, event )`，我们通过`if`语句设置函数，对于`event.force > 1 and not
    self.isHit`。当两个语句都返回`true`时，播放鸡蛋的声音效果。初始从天空落下的鸡蛋在碰撞时从场景中移除，并使用`friedEgg`显示对象在相同位置替换，通过`friedEgg.x
    = self.x; friedEgg.y = self.y`。
- en: The function `fadeEgg()` makes the newly replaced egg object appear in `50`
    milliseconds by `transition.to( eggCrack, { time=50, alpha=1.0, onComplete=fadeCrack
    } )` and then with the `onComplete` command, returns the object to an invisible
    state with `transition.to( eggCrack, { time=500, alpha=0 } )`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`fadeEgg()`通过`transition.to( eggCrack, { time=50, alpha=1.0, onComplete=fadeCrack
    } )`在`50`毫秒内使新替换的鸡蛋对象出现在舞台上，然后使用`onComplete`命令，通过`transition.to( eggCrack, { time=500,
    alpha=0 } )`将对象返回到不可见状态。
- en: When the name`"character"` is called from `event.other.myName`, every collision
    is assigned to that name increments `eggCount + 1`. Therefore, the `eggText` is
    updated with `eggCount` value. `setScore( newScore )` increments the score by
    `500` with every collision made to`"character"`. When a collision is made to`"ground"`,
    the `livesCount()` function is called, which subtracts a life by `1`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当从`event.other.myName`调用名称`"character"`时，每个碰撞都会分配给该名称，`eggCount + 1`。因此，`eggText`会更新为`eggCount`值。`setScore(
    newScore )`每次碰撞到`"character"`时都会增加`500`分。当碰撞到`"ground"`时，调用`livesCount()`函数，该函数通过`1`减去生命值。
- en: Making the display objects fall
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使显示对象下落
- en: We're going to apply the main asset by learning how to add physical objects
    to the scene and have them fall in random areas in the game. The physics engine
    will take into account a dynamic physics body that we will create for the egg
    display object.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过学习如何将物理对象添加到场景中，并让它们在游戏中的随机区域落下，来应用主要资产。物理引擎将考虑我们为鸡蛋显示对象创建的动态物理体。
- en: Time for action—adding the egg object
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——添加鸡蛋对象
- en: Imagine a world full of falling eggs. It's not entirely too realistic, but in
    this game, we're creating this element. At least we'll be making sure that the
    gravity and real-world physics will be applied.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个充满下落鸡蛋的世界。这并不完全真实，但在这个游戏中，我们正在创建这个元素。至少我们将确保应用重力和现实世界的物理。
- en: Create a new local function called `eggDrop()`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`eggDrop()`的新局部函数。
- en: '[PRE43]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Add in the `egg` display object properties.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`egg`显示对象属性。
- en: '[PRE44]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Add in the `postCollision` event for the `egg` display object.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`egg`显示对象添加`postCollision`事件。
- en: '[PRE45]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Time for action—adding the egg object](img/1888_07_05.jpg)'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![行动时间——添加鸡蛋对象](img/1888_07_05.jpg)'
- en: What just happened?
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We have set the `egg` value for `x` to `240 + mRand( 120 )`. The `mRand` function
    equals to `math.random` , which will allow the `egg` to appear in randomized places
    in an area of `120` pixels starting at 50 in the x-direction.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置`egg`的`x`值为`240 + mRand( 120 )`。`mRand`函数等于`math.random`，这将允许`egg`在以50为x方向的`120`像素区域内随机出现。
- en: It is vital to make sure `egg.isHit = false` for the collision event to apply
    correctly. The physics body is set to`"dynamic"` so it reacts to gravity and makes
    the object fall. There is a customized density and shape made for the `egg` that
    we created, which is already made at the beginning of the code.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将`egg.isHit = false`设置为对碰撞事件正确应用至关重要。物理体被设置为`"dynamic"`，因此它会响应重力并使物体下落。我们为创建的`egg`定制了密度和形状，这已经在代码的开始部分完成。
- en: The last important detail for the collision to work is adding `egg` to the `onEggCollision()`
    function with `egg.postCollision = onEggCollision` and then making the event listener
    use the`"postCollision"` event with `egg:addEventListener( "postCollision", egg
    )`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞要正常工作，最后一个重要细节是将`egg`添加到`onEggCollision()`函数中，使用`egg.postCollision = onEggCollision`，然后使事件监听器使用`"postCollision"`事件，通过`egg:addEventListener(
    "postCollision", egg )`。
- en: Time for action—making the egg drop
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——制作鸡蛋下落
- en: We're going to execute the timer for the egg so they can start dropping them
    on the screen.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行鸡蛋的计时器，这样他们就可以开始在屏幕上放下鸡蛋。
- en: Create a local function called `eggTimer()` and use `timer.performWithDelay`
    to drop an egg every 1 second (1000 milliseconds) repeatedly. Use `eggDrop()`
    to activate the drop.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`eggTimer()`的本地函数，并使用`timer.performWithDelay`每秒（1000毫秒）重复地放下一个鸡蛋。使用`eggDrop()`来激活下落。
- en: '[PRE46]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Within the first `if` statement in the `onEggCollision()` function, cancel the
    timer using the `timerID, startDrop`. Add the statement `if gameLives < 1` to
    stop the eggs from falling.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onEggCollision()`函数的第一个`if`语句中，使用`timerID, startDrop`取消计时器。添加语句`if gameLives
    < 1`以停止鸡蛋的下落。
- en: '[PRE47]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: What just happened?
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: In order for the eggs to start dropping from the sky, we created a function
    called `eggTimer()`. It activates the `eggDrop()` function by letting an egg drop
    after `1000` milliseconds (1 second) every time infinitely using `startDrop =
    timer.performWithDelay( 1000, eggDrop, 0 )`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让鸡蛋从天空开始下落，我们创建了一个名为`eggTimer()`的函数。它通过每次`1000`毫秒（1秒）后无限期地让鸡蛋下落来激活`eggDrop()`函数，使用`startDrop
    = timer.performWithDelay( 1000, eggDrop, 0 )`。
- en: Backtracking to `onEggCollision()`, we want to check that `gameLives` has reached
    less than `1`. When this statement is true, the eggs will stop dropping. This
    is done by `timer.cancel( startDrop ). startDrop` is the `timerID` we set in `eggTimer()`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`onEggCollision()`，我们希望检查`gameLives`是否小于`1`。当这个语句为真时，鸡蛋将停止下落。这是通过`timer.cancel(
    startDrop ). startDrop`完成的，`startDrop`是我们在`eggTimer()`中设置的`timerID`。
- en: Ending the gameplay
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束游戏玩法
- en: Every start of a game always has an ending. Whether it is a simple *You Win*
    or *You lose* or just a *Game Over* it gives closure for the player. It's important
    to notify a player of such events so that they can reflect on the achievements
    earned.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 每一场游戏的开始总会有一个结束。无论是简单的*你赢了*、*你输了*，还是仅仅的*游戏结束*，它都为玩家提供了一个结局。通知玩家这些事件是很重要的，这样他们可以反思所获得的成就。
- en: Time for action—calling game over
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——调用游戏结束
- en: We are going to make sure that when a **Game Over** display screen pops up,
    any of our display objects currently in motion stop moving and the event listeners
    are deactivated. Aside from the visual display of our **Game Over** screen, we'll
    be adding a sound notification that will also help to trigger the event.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确保当**游戏结束**显示屏幕弹出时，我们当前正在运动的任何显示对象都会停止移动，事件监听器也会被禁用。除了我们**游戏结束**屏幕的视觉显示外，我们还将添加一个声音通知，这也有助于触发事件。
- en: Create a new local function called `callGameOver()` and place it after the `setScore()`
    function and before the `drawBackground()` function.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的本地函数`callGameOver()`，并将其放置在`setScore()`函数之后和`drawBackground()`函数之前。
- en: '[PRE48]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Introduce the sound effects when the **Game Over** display pops up. Have `gameIsActive`
    set to `false` and pause the physics in the game.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当**游戏结束**显示弹出时，引入声音效果。将`gameIsActive`设置为`false`并暂停游戏中的物理。
- en: '[PRE49]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Create a shade that overlays over the current background.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个覆盖当前背景的阴影。
- en: '[PRE50]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Display the **Game Over** window and reiterate the final score.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**游戏结束**窗口并重复最终得分。
- en: '[PRE51]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Have the **Score** displayed on the **Game Over** screen.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **游戏结束** 屏幕上显示 **得分**。
- en: '[PRE52]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![Time for action—calling game over](img/1888_07_06.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![到时候——调用游戏结束](img/1888_07_06.jpg)'
- en: What just happened?
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Our `gameOver()` function triggers our `gameOverSound` sound effect that we
    pre-loaded at the beginning of our code. We made sure no events such as the motion
    from the accelerometer are disabled through `gameIsActive = false`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `gameOver()` 函数触发了我们在代码开始时预加载的 `gameOverSound` 声音效果。我们确保通过 `gameIsActive
    = false` 没有禁用任何事件，例如加速度计的运动。
- en: The elements of our display objects appear at this point in time with `shade,
    gameOverScreen`, and `scoreText`.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显示对象的元素在此时以 `shade`, `gameOverScreen`, 和 `scoreText` 的形式出现。
- en: If you notice, `scoreText` disappears when gameplay has ended by `scoreText.isVisible
    = false` and then reappears in a different area of the screen using `timer.performWithDelay(
    0, function() scoreText.isVisible = true; end, 1 )`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到了，当游戏通过 `scoreText.isVisible = false` 结束时，`scoreText` 会消失，然后使用 `timer.performWithDelay(
    0, function() scoreText.isVisible = true; end, 1 )` 在屏幕的不同区域重新出现。
- en: Starting the game
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始游戏
- en: We're going to activate all the remaining functions and have them run accordingly.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将激活所有剩余的函数，并让它们相应地运行。
- en: Time for action—activating the game
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 到时候——激活游戏
- en: With all the gameplay elements set in place, it is time to get the application
    started.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有游戏元素设置到位后，现在是时候启动应用程序了。
- en: Create a new local function called `gameActivate()` and insert `gameIsActive
    = true`. Place the function above the `moveChar()` function.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `gameActivate()` 的新局部函数，并插入 `gameIsActive = true`。将函数放在 `moveChar()`
    函数之上。
- en: '[PRE53]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Initialize all the game actions by making a new function called `gameStart()`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个名为 `gameStart()` 的新函数来初始化所有游戏动作。
- en: '[PRE54]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Start the physics property and set the gravity for the falling object.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动物理属性并设置下落物体的重力。
- en: '[PRE55]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Activate all the functions instantiated. Add an event listener for the `charObject`
    using the`"touch"` for the `moveChar()` function.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活所有实例化的函数。为 `charObject` 使用 `"touch"` 添加事件监听器给 `moveChar()` 函数。
- en: '[PRE56]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Instantiate the `gameStart()` function and return the group `gameGroup`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化 `gameStart()` 函数并返回 `gameGroup` 组。
- en: '[PRE57]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: What just happened?
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: If you remember, in the beginning of our code, we set `gameIsActive = false`.
    We then changed that status through the `gameActivate()` function and made `gameIsActive
    = true`. We made the `gameStart()` function apply all the initial gameplay elements.
    This included the start of the physics engine and gravity. At the same time, we
    took the remainder of all the functions and initialize them.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得，在代码的开始部分，我们设置了 `gameIsActive = false`。然后我们通过 `gameActivate()` 函数更改了状态，使
    `gameIsActive = true`。我们使 `gameStart()` 函数应用所有初始游戏元素。这包括物理引擎和重力的开始。同时，我们初始化了所有剩余的函数。
- en: Once all the functions are activated, `gameGroup` needs to be returned so that
    all the display objects appear during the gameplay.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有函数都被激活，`gameGroup` 需要被返回，这样所有显示对象在游戏过程中都会出现。
- en: To make sure that your physical object boundaries for your display objects are
    in the right place, use `physics.setDrawMode( "hybrid" )` in the `gameStart()`
    function.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你的显示对象的物理对象边界在正确的位置，请在 `gameStart()` 函数中使用 `physics.setDrawMode( "hybrid"
    )`。
- en: Pop quiz—animating the graphics
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速问答——图形动画
- en: What retrieves or sets the text string of a text object?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是用来检索或设置文本对象的文本字符串的吗？
- en: a. `object.text`
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `object.text`
- en: b. `object.size`
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `object.size`
- en: c. `object:setTextColor()`
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `object:setTextColor()`
- en: d. None of the above
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: What function converts any argument into a string?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个函数可以将任何参数转换为字符串？
- en: a. `tonumber()`
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. `tonumber()`
- en: b. `print()`
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. `print()`
- en: c. `tostring()`
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. `tostring()`
- en: d. `nil`
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. `nil`
- en: What body type is affected by gravity and collisions with other body types?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种类型的物体受到重力和其他物体类型碰撞的影响？
- en: a. Dynamic
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: a. 动态
- en: b. Kinematic
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: b. 运动学
- en: c. Static
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: c. 静态
- en: d. None of the above
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: d. 以上都不是
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The gameplay construction of our application is now completed. Now that we're
    familiar with a variety of ways to use the physics engine, it goes to show the
    ease of using Box2D and designing other games that involve physics bodies.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的游戏构建现在完成了。既然我们已经熟悉了使用物理引擎的各种方法，这也显示了使用 Box2D 和设计涉及物理体的其他游戏的简便性。
- en: 'We have a better idea of:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对以下内容有了更清晰的认识：
- en: Applying the uses of dynamic and static physics bodies
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用动态和静态物理体的用法
- en: Constructing a customized shape for the physical properties of our display objects
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们显示对象的物理属性构造一个定制的形状
- en: Tracking the number of objects caught using values from variables that are given
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过变量给出的值跟踪捕获到的对象数量
- en: Using post-collisions to switch out images
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用后碰撞来切换图像
- en: In the next chapter, we will complete the gaming experience by creating versatile
    menu screens using **Storyboard API**. We will also learn how to add the pause
    action, save high scores, and understand more about data saving and unloading
    files.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使用**Storyboard API**创建多功能菜单屏幕来完善游戏体验。我们还将学习如何添加暂停动作、保存高分，以及了解更多关于数据保存和卸载文件的知识。
- en: Using Corona SDK has helped us design and develop games in a minimal amount
    of time. Let us continue adding the final touches to our game!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Corona SDK帮助我们以最短的时间设计和开发游戏。让我们继续为我们的游戏添加最后的修饰吧！
