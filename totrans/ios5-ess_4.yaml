- en: Chapter 4. Using Storyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with the release of Xcode 4.2, developers and designers now have the
    ability to layout the workflow of their applications, using the new **Storyboards**
    feature that has been incorporated as part of Interface Builder. Storyboards can
    be used to build an in-game menu system for moving between different screens,
    or they can be used to build business applications that use the navigation and
    tab bars controls to transition between each of the different views, as they manage
    the view controllers created by the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, instead of creating numerous interface files, you can now start
    dragging and editing all your views in one place, with the ability to specify
    transitions between screens and the associated actions that trigger them. Storyboards
    also include a design pattern that can be implemented to send and receive data
    between controllers. In the previous instances, you would have had to implement
    protocols, delegates, notifications, or some other custom way to maintain state
    between screens.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be gaining an understanding into what Storyboards actually
    are, as well as familiarizing ourselves with the new workflow that has been implemented
    within Interface Builder. We will look at the steps involved to create storyboards
    and how to apply different transition techniques between each view, to create
    a Twitter application to post messages and photos.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Gain an understanding into what Storyboards are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use Storyboards to create and configure transitions to scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a simple storyboard application with Twitter integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the process involved to create storyboard files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post a tweet message and add a photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programmatically transition to a new storyboard view-controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have some fantastic stuff to cover in this chapter, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Storyboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past, when you needed to create a new view for your application, you
    would have had to create a new xib file for each of the views. This became very
    cumbersome when dealing with complex applications, as they contained a number
    of different views and became hard transitioning from one view controller to the
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Apple decided to improve this in a big way, by substantially making improvements
    in this area regarding the user interface design process, by introducing a technique
    called **Storyboarding**.
  prefs: []
  type: TYPE_NORMAL
- en: Storyboarding is a feature that is built into Xcode 4.2, and later that allows
    both the various screens that comprise an iOS application and the navigation path
    through those screens to be visually assembled. When you use Storyboards, they
    enable you to design the application workflow of your screens, similarly to the
    way a movie director prepares storyboard sketches for every scene of a shoot.
  prefs: []
  type: TYPE_NORMAL
- en: You can then use Interface Builder to layout the parts for each of the screens
    graphically, as well as the transitions between them, and the controls used to
    trigger the transitions.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows a simple storyboard application containing two
    view controllers with linkage between them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Storyboards](img/2267EXP_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode provides the option to change the visual appearance of the transition
    that takes place from one scene to another within a storyboard, referred to as
    a **segue**. Using transitions enables you to apply a variety of different styles
    to each of your view controllers that are to be rendered and displayed to the
    view, and are represented by arrows between each of the view controllers. By default,
    a **Cover Vertical** transition is performed whereby the new scene slides vertically
    upwards from the bottom of the view to cover the currently displayed scene.
  prefs: []
  type: TYPE_NORMAL
- en: You may have seen such transitions in applications, such as the Photos app that
    comes part of the iPhone and iPad, where you can apply a transition and start
    a slideshow.
  prefs: []
  type: TYPE_NORMAL
- en: You also have the ability to define custom transitions that enable you to provide
    a custom segue class method to handle the transition. This can be achieved by
    selecting **Custom** for the style of the segue, and fill in the name of the custom
    segue class to use. To use any of the standard segue classes, these are located
    within the `UIKit` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information relating to the standard segue classes, refer to the `UIKit`
    framework reference, located at the Apple developer connection website, using
    the following link: [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIKit_Framework/_index.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to configure a segue to specify a kind of transition to use between
    the different scenes, click on the segue and open the **Attributes** inspector,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transitions](img/2267EXP_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You have the ability to choose from the various transition types that are only
    applicable to the **Modal** style; these are explained within the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Transition name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Default** | When this transition is selected, it uses the **Cover Vertical**
    transition style. |'
  prefs: []
  type: TYPE_TB
- en: '| **Cover Vertical** | When the view controller is presented, its view slides
    up from the bottom of the screen. When the view is dismissed, it slides back down.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Flip Horizontal** | When the view controller is presented, the current
    view initiates a horizontal 3D flip from right-to-left, resulting in the revealing
    of the new view as if it were on the back of the previous view. When this view
    is dismissed, the flip occurs from left-to-right, returning to the original view.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Cross Dissolve** | When the view controller is presented, the current view
    fades-out while the new view fades-in at the same time. When the view is dismissed,
    a similar type of cross-fade is used to return to the original view. |'
  prefs: []
  type: TYPE_TB
- en: '| **Partial Curl** | When the view controller is presented, one corner of the
    current view curls up to reveal the modal view underneath. When the view is dismissed,
    the curled up page uncurls itself back on top of the modal view. A modal view
    presented using this transition is itself prevented from presenting any additional
    modal views.This transition style is supported only if the parent view controller
    is presenting a full-screen view and you use the `UIModalPresentationFullScreen`
    modal presentation style. Attempting to use a different form factor for the parent
    view or a different presentation style triggers an exception. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the above transition types, refer to the `UIViewController`
    framework reference located on the Apple developer website, using the following
    link: [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html](http://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of how to go about creating transitions for
    a view, our next step is to take a look at how we can create storyboards and how
    to configure scenes for our storyboard application.
  prefs: []
  type: TYPE_NORMAL
- en: How to go about creating Storyboard files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next section, we will take a look at how to go about creating a storyboard
    application. When you create a new storyboard file, this will give you a view
    controller object that represents your scene, which is the initial view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Each view controller represents the contents of a single screen. When creating
    applications for the iPad, a screen can be composed of the contents of more than
    one scene and you link each object that is contained within a view controller,
    to another view controller that implements another scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to go about creating Storyboard files](img/2267EXP_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from this screenshot, the initial view controller contains a
    green outline. You link the various view controllers using Interface Builder by
    *Control* + dragging between controls and view controllers. You have the ability
    to add controls and views to each view controller's view, just as you would add
    objects to a window or a view in an XIB file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple Storyboard (Twitter) application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can proceed, we first need to create our `TwitterExample` project.
    To refresh your memory, you can refer to the section that we covered in [Chapter
    2](ch02.html "Chapter 2. Using iCloud and the Storage APIs"),
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create a new Xcode project**, or **File | New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** template from the **Project template**
    dialog box.![Creating a simple Storyboard (Twitter) application](img/2267EXP_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Next** button to proceed to the next step in the Wizard.
    This will allow you to enter in the **Product Name** and your **Company Identifier**.![Creating
    a simple Storyboard (Twitter) application](img/2267EXP_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `TwitterExample` for the **Product Name**, and ensure that you have
    selected **iPhone** from the **Device Family** drop-down box, and that you have
    checked the **Use Storyboard** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Next** button to proceed to the final step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the folder location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to save your project at the location specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your project has been created, you will be presented with the Xcode development
    interface, along with the project files that the template created for you within
    the **Project Navigator** window. Our next step is to start building the user
    interface for our Twitter application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process of creating scenes involves adding a new view controller to the
    storyboard, which is referred to as a **scene**. Each view controller is responsible
    for managing a single scene. A better way to describe scenes would be to think
    of the collection of scenes as a movie, where each frame that is being displayed
    is the actual scene that connects onto the next part.
  prefs: []
  type: TYPE_NORMAL
- en: When adding scenes to your storyboard file, you can add controls and views to
    the view controller's view, just as you would do for an XIB file, and have the
    ability to configure outlets and actions between your view controllers and its
    views.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new scene into your storyboard file, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project Navigator**, select the file named `MainStoryboard.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object** library, select and drag a new view-controller on to the
    storyboard canvas. This is shown in the following screenshot:![Creating scenes](img/2267EXP_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag a `UIButton` control on to the view that we will use in a later section
    to call the calling view. In the button's attributes, change the text to read
    `Go Back`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, on the first view controller, drag a `UIButton` control on to the view,
    just above the **Tweet Message** button. In the button's attributes, change the
    text to read `About App`. This will be used to call the new view that we added
    in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have added the controls to each of the views, your final interface
    should look something like what is shown in the following screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating scenes](img/2267EXP_04_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, create the action event for the **About App** button; hold down the control
    key on your keyboard and drag the mouse from the **About App** button to the `ViewController.h`
    interface file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Action** from the **Connection** type drop-down, then enter in `showAbout`
    for the name of the `IBAction` method to create, and then click on the **Connect**
    button to accept the changes, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating scenes](img/2267EXP_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have created our scene, buttons, and actions, our next step is to
    configure the scene, which is shown in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you want to transition from one view controller to another, you can hold
    down the *Control* key and click a button, table view cell, or any other object
    from one view controller, and then drag it to the new view controller for a different
    scene. This technique of dragging between view controllers creates what is known
    as a **Segue**.
  prefs: []
  type: TYPE_NORMAL
- en: A segue is a configurable object that supports all of the same types of transitions
    made available to you within the `UIKit` class reference, such as modal transitions
    and navigation transitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have the ability to define custom transitions that replace one view
    controller with another. To create a segue and configure a scene, follow these
    simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **About App** button with your mouse, and hold down the *Control*
    key while dragging it to the view controller for the scene that you would like
    to load when the button is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release the mouse button, and then choose the **Modal** option from the pop-up
    menu selection.![Configuring scenes](img/2267EXP_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that a gray arrow connects both of your view controllers. When
    the **About App** button is pressed, it will display the page containing the **Go
    Back** button.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we need to do the same for our second view, so that when the **Go Back**
    button is pressed, it will return back to our first view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1* to *2*, but substitute the **Go Back** button for the **About
    App** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Explanations of the Storyboard Segues that come part of Xcode 4 are included
    in the following table:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Segue name** | **Description** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Modal** | A modal view controller is not a specific subclass of the `UIViewController`
    class, as any type of view controller can be presented modally by your application.
    However, like the tab bar and navigation view controllers, you can present your
    view controllers modally when you want to convey a specific meaning about the
    relationship between the previous view hierarchy and the newly presented view
    hierarchy. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Push** | **Push** segues allow you to push a new view controller onto the
    navigation stack, just as if you were stacking plates. The view at the top of
    the stack being the one that gets rendered. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Custom** | These allow you to customize and call a view controller from
    code using the `prepareForSegue` method, and are what you use to present the content
    of your application.The job of the view controller is to manage the presentation
    of some content and coordinate the update and the synchronization of that content
    with the application''s underlying data objects.In the case of a custom view controller,
    this involves creating a view to present the content and implementing the infrastructure
    needed to synchronize the contents of that view with your application''s data
    structures. |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Once you have done this, your view controllers should look like something shown
    in the next screenshot. You can apply a number of transitions to each of your
    view controllers, so that they can perform animation when they get displayed to
    the view.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring scenes](img/2267EXP_04_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To learn how to apply transitions to your view controller, please refer to the
    section on *Transitions* in this chapter.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have applied each of the segues to both view controller, our final
    step is to compile, build, and run our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Product** menu, select **Run**. Alternatively, press the **Command
    | R** keys to compile, build, and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows our application running within the iOS simulator,
    with each of their associated screens displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Configuring scenes](img/2267EXP_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So there you have it. In this section, we have learned how to create and add
    new scenes into our main storyboard, as well as the process on how we are able
    to link-up and configure each scene when a button has been pressed.
  prefs: []
  type: TYPE_NORMAL
- en: There is also another way in which we can transition to scenes within our storyboard
    through a programmatic approach. We will be taking a closer look into this, when
    we embark on the section *Presenting storyboard view-controllers programmatically*,
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Twitter application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Twitter has provided us with some very simple API's to follow, making it a snap
    to interact with them. In this section, we will look at how we can use these to
    post a tweet message and add an image.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MainStoryboard.storyboard` file that is located inside the `TwitterExample`
    folder from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag a `UITextView` onto your view, and resize it to accommodate a reasonable
    amount of text to be entered, and make sure to delete the default text that is
    displayed within this control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we need to drag a `UIButton` on to the view to handle the posting of
    the message. In the button's attributes, change the text to read `Tweet Message`.
    Your final interface should look like this:![Building a Twitter application](img/2267EXP_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, open the `ViewController.h` interface file, and create the following
    highlighted entries as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to connect up our **Tweet Message** button control, and create
    the `IBAction` event that will be used to post our tweet message. We will need
    to ensure that the type of event to use is the `TouchUpInside` method of the `UIButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To create an action event, hold down the *Control* key on your keyboard, and
    drag the mouse to the `ViewController.h` interface file, as shown in the following
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `postTweet` for the name of the `IBAction` method to create, and then
    click on the `Connect` button to accept the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Building a Twitter application](img/2267EXP_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have connected up our `IBAction` event to our method call that will
    be used to post the tweet, our next step is to add the Twitter framework to our
    project before we can take a look at how to implement the code to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the Twitter framework to your project, select the **Project Navigator
    Group**, and then follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select your project from within the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select your project target from under the **TARGETS** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Build Phases** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Link binary with Libraries** disclosure triangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, use the **+** to add the library that you want. You can also search
    if you can't find the Twitter framework within the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are still confused as to how to go about adding the frameworks, follow
    this screenshot, which highlights the areas that you need to select:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Twitter application](img/2267EXP_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have added our `Twitter.framework` into our project, we can take
    a look at how to implement the code to post a tweet message using this framework.
  prefs: []
  type: TYPE_NORMAL
- en: Composing a Tweet message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you want to compose a Twitter message for submission, you will need
    to use the `TWTweetComposeViewController` class instance. This class handles everything
    required, and presents us with a tweet composition sheet, so that we can begin
    to type in our tweet message. This class also enables you to set the initial twitter
    text information to use, as well as how to go about adding images and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the `TWTweetComposeViewController` class, you can refer
    to the Twitter framework reference documentation located at the following location:
    `http://developer.apple.com/library/ios/#documentation/Twitter/Reference/TWTweetSheetViewControllerClassRef/Reference/Reference.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following code snippet, we look at how we can compose a Twitter message
    using the `TWTweetComposeViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can use the features of Twitter in our application, we need to include
    the Twitter framework header files.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Project Navigator**, open the `ViewController.m` implementation
    file, and enter in the following `import` statements as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to implement the code to display the Twitter tweet sheet to which
    we can compose, and then post our message. Open the `ViewController.m` implementation
    file, and enter in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code snippet, we declared a variable `myTwitter` to be an instance of
    our `TWTweetComposeViewController` class. We then assigned some text to appear
    on our composition sheet, by setting the `setInitialText` method, and then displaying
    this to the view. We then set up a handler, using the `completionHandler` method,
    to notify us when the user has done composing the tweet, and we displayed the
    relevant alert based on the outcome that is returned by the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optionally, you can use the `canSendTweet` class method to check if Twitter
    has been set up and is reachable, before presenting the view to the user. This
    is shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we have accomplished in this above code snippet is using the `canSendTweet`
    class method of the `TWTweetComposeViewController` class. This method then checks
    to see if the user has correctly installed and set up Twitter properly. If this
    has not been done, this statement will fail, and a value of `NO` (or `FALSE)`
    will be returned to the `isSuccess` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Adding photos to a Tweet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you want to add images to a twitter message for submission, you will
    need to use the `TWTweetComposeViewController` class instance. This class handles
    everything required, and presents us with a tweet composition sheet, so that we
    can add images and URLs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next code snippet, we look at how simple it is to add images to an existing
    Twitter message using the `TWTweetComposeViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ViewController.m` implementation file located within the `TwitterExample`
    folder within the **Project Navigator**, locate the `postTweet` method, and enter
    in the following piece of highlighted code, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this code snippet, we declare a variable `myTwitter` to an instance of our
    `TWTweetComposeViewController` class. We then use the `addImageinstance` method
    to add an image to the tweet message, and then present the view along with the
    image to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added in the final piece of code to our `TwitterExample` application,
    we need to first configure our Twitter account information prior to building and
    running the application. Follow these steps to set up and configure Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Settings** application from the iOS home screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Twitter** option from the **Settings** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in your **User Name** and **Password** credential information, and click
    on the **Sign In** button. If you do not have a Twitter account, you can create
    one from this screen by selecting the **Create New Account** option.![Adding photos
    to a Tweet](img/2267EXP_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our final step is to compile, build, and run our `TwitterExample` application,
    by either clicking on the **Play** button within the Xcode IDE or *Command* +
    *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows our TwitterExample application when it is run
    on the iOS simulator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding photos to a Tweet](img/2267EXP_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you start composing your tweet message, you can choose to have your current
    geographical location added to your message. This feature basically uses the Google
    Maps API to map the tweets and gives Twitter users the option of tweeting their
    location on [http://twitter.com/](http://twitter.com/), and then allowing others
    to view the precise location on Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Attachments can also be added to the composed message, and this can be any valid
    image (PNG, JPG, and so on). Clicking on the **Send** button will submit the message
    to your Twitter account, and you will receive a message stating that the Tweet
    has been successfully posted.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot displays the posted Twitter entry that was submitted
    by the previous screenshot, as it would look like when displayed on [http://twitter.com/:](http://twitter.com/)
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding photos to a Tweet](img/2267EXP_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we looked at how we can integrate Twitter-like functionality
    into our applications. There are many ways in which applications can be more social,
    by including Twitter. For example, you could make the application auto-tweet,
    when you unlock a special item within your game, or when you finish the game,
    or just want to upload your high-score achievements.
  prefs: []
  type: TYPE_NORMAL
- en: This lets all of their friends know they are playing your game, which in turn,
    gets you more exposure. Another example could be a business application, which
    could allow the user to tweet the number of successful projects that they have
    completed. With Twitter getting so much attention lately, you would be crazy to
    not include some sort of Twitter integration into your own iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to transition to a new view-controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever a user triggers a segue in the current scene, the storyboard runtime
    calls the `prepareForSegue:sender:` method for the current view controller. This
    method gives the current view controller an opportunity to pass any needed data
    to the view controller that is about to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to programmatically perform a segue, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have drawn a segue between two the `UIViewControllers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the segue and fill in the identifier field by using a unique
    name, as shown in the following screenshot:![Preparing to transition to a new
    view-controller](img/2267EXP_04_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the `prepareForSegue:segue:sender:` method call from the `IBActionlevel`
    of the `UIButton`, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code snippet, we perform a segue call associated with a control using
    its identifier. We first check to ensure that we are processing the correct segue,
    before displaying an alert when the view is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Handling it this way allows us to customize segues, and applies any transition
    to the scene that is located within your storyboard as long as the identifier
    is unique.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information on how to implement the methods of the `UIViewController` class,
    you can refer to the `UIViewController` class reference at the following location:
    `http://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/cl/UIViewController`.'
  prefs: []
  type: TYPE_NORMAL
- en: Presenting storyboard view-controllers programmatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the storyboard runtime usually handles transitions between view controllers,
    you can also trigger segues programmatically, directly from within your code.
    You may choose to do this when setting up the segue from within Interface Builder,
    or you may want to use the accelerometer events to trigger a transition and display
    a graphic animation.
  prefs: []
  type: TYPE_NORMAL
- en: If you take a look at the following example code snippet, you will be able to
    see that we first load the view controller programmatically using the `instantiateViewControllerWithIdentifier`
    method of the `UIStoryboard`. Finally, we then present the view controller by
    pushing it onto the navigation stack.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we will look at how we can add an additional view controller
    subclass to our storyboard, and programmatically determine what view we are in
    by using the `performSegueWithIdentifier` method call. So, lets get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a new `UIViewController` subclass file that will be used
    for our second view controller. To create a `UIViewController` subclass file,
    follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Xcode IDE** menu, select **File | New | New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the **UIViewController subclass** template to use from the list
    of available templates, as shown in the following screenshot.![Presenting storyboard
    view-controllers programmatically](img/2267EXP_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `secondViewController` as the name of the class to create, as shown
    in the following screenshot:![Presenting storyboard view-controllers programmatically](img/2267EXP_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you choose `UIViewController` as the name of the subclass to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you have unchecked both the **Targeted for iPad** and **With XIB
    for user interface** checkboxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the location to save the class file, and then click on the **Create**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have done that, you will be returned back to the Xcode IDE. Both of
    your interface and implementation files for the `secondViewController` will appear
    within the **Project Navigator** window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the **ViewController.h** interface file, located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file and include the highlighted code sections, as specified in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code snippet, we are setting up our delegate objects in order to pass
    information to and from the view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file, and include the highlighted code sections, as specified in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we are doing in this code snippet, is determining the current view of our
    view controller and ensuring that we are in our `firstViewController`. We do this
    by checking the `segue` property, and obtaining the identifier value that we declared
    previously. If we are in the correct view, a pop-up alert is then displayed to
    the current view.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `secondViewController.h` interface file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file and include the highlighted code sections as specified in the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What we are doing in this code snippet, is setting up our delegate objects in
    order to pass information to and from the view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `secondViewController.m` implementation file located under the `TwitterExample`
    folder, from within the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the file, and include the highlighted code sections as specified in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we are determining the current view of our view controller, and ensuring
    that we are in our `secondViewController`. We do this by checking the segue property
    and obtain the identifier value that we declared previously. If we are in the
    correct view, a pop-up alert is then displayed to the current view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the second view controller we just created, then under the identity inspector
    section, click on the **Custom Class** title bar, and change the **Class** to
    read `secondViewController` as shown in the following screenshot:![Presenting
    storyboard view-controllers programmatically](img/2267EXP_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the attributes **Inspector** section, under the **Storyboard Segue** section,
    enter in `secondViewController` as the identifier to use when moving between views,
    as shown in the following screenshot:![Presenting storyboard view-controllers
    programmatically](img/2267EXP_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to apply the same Storyboard Segues for our first view controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the attributes **Inspector** section, and then under the **Storyboard
    Segue** section, enter in `firstViewController` as the unique identifier to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the same steps as we did for the `secondViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our final step is to compile, build, and run our `TwitterExample` application,
    by either clicking on the **Play** button within the Xcode IDE or *Command* +
    *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows our `TwitterExample` application running within
    the iOS simulator, showing the programmatic transitions between each of the view
    controllers that are defined within our storyboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Presenting storyboard view-controllers programmatically](img/2267EXP_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you click on the **About App** button, it transitions over to the second
    view controller and then displays the message based on the `prepareForSegue:(UIStoryboardSegue*)segue`
    method call, determining the identifier of the current view controller that is
    being displayed within the view.
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the **Go Back** button, this will transfer control over to
    the first view controller, a call is made to the `prepareForSegue` method, to
    determine the current identifier of the current view.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the fundamentals of what storyboards actually are,
    how they work, how to go about adding scenes and configure these within the storyboard,
    and how to apply the different types of transition methods available.
  prefs: []
  type: TYPE_NORMAL
- en: We learnt about the Twitter framework and how we can use the collection of Twitter
    APIs available to successfully post a message and image to a twitter account.
    To end the chapter, we looked at how we can use the various methods to transition
    between each view controller within the main storyboard, programmatically, and
    using the storyboard transitions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the **AirPlay** and **Core Image**
    frameworks, and look at how we use and implement these into our applications.
    We will learn about the different image filter effects and how to present these
    within our application to output this to an external device, such as Apple TV.
  prefs: []
  type: TYPE_NORMAL
