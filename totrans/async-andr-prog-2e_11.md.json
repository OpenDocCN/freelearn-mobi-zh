["```java\n    class OtherEvent extends MyEvent\n    ```", "```java\n    EventBus.getDefault().post(new MyEvent());\n    ```", "```java\ndependencies {\n   compile 'org.greenrobot:eventbus:3.0.0'\n}\n```", "```java\npublic class MobileNetConnectedEvent{\n  public final String detailedState;\n  public MobileAvailableEvent(String detailedState) {\n    this.detailedState = detailedState;\n  }\n}\npublic class MobileNetDisconnectedEvent {}\n```", "```java\npublic class MobileNetworkListener extends BroadcastReceiver {\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n\t // Retrieve the NetworkInfo from the received Intent\n    NetworkInfo info =(NetworkInfo)intent.\n      getExtras().get(ConnectivityManager.EXTRA_NETWORK_INFO);\n    if ( isMobileNetwork(context, info) && !info.isConnected()) {\n\t   // Publish an mobile network disconnected Event\n      EventBus.getDefault().post(\n        new MobileNetDisconnectedEvent());\n    } else if ( isMobileNetwork(context, info) && \n                info.isConnected()) {\n      // Publish an mobile network connected Event\n      EventBus.getDefault().post(\n        new MobileNetConnectedEvent(info.getState().toString()));\n    }\n  }\n  public boolean isMobileNetwork(Context context, \n                             NetworkInfo info) {\n    return info != null && \n           (info.getType() == ConnectivityManager.TYPE_MOBILE);\n  }\n}\n```", "```java\n@Subscribe\nvoid on<EventClassname>(EventClassname event) {\n ...\n}\n```", "```java\n@Subscribe\npublic void \nonMobileNetDisconnectedEvent(MobileNetDisconnectedEvent event){\n\n  String message = String.format(\n    \"Mobile connection is not available \\n\");\n  appendToConsole(message);\n}\n\n@Subscribe\npublic void \nonMobileNetConnectedEvent(MobileNetConnectedEvent event){\n\n  String message = String.format(\n    \"Mobile connection is available State - %s\\n\",\n    event.getDetailedState());\n  appendToConsole(message);\n}\n```", "```java\n    @Override\n    public void onStart() {\n        super.onStart();\n        EventBus.getDefault().register(this);\n    }\n\n    @Override\n    protected void onStop() {\n        EventBus.getDefault().unregister(this);\n        super.onStop();\n    }\n```", "```java\n// Execute the callback on a  Background Thread \n// managed by EventBus\n@Subscribe(threadMode = ThreadMode.BACKGROUND )\npublic void onMyEvent(MyEvent event) {...}\n```", "```java\npublic class RetrieveProductEvent {\n\n    // Product Identifier\n    final long identifier;\n    ...\n}\n\npublic class ProductDetailEvent {\n\n    final long identifier;\n    final String brand;\n    final String name;\n    final float price;\n\n    ...\n}\n```", "```java\npublic static class DetailFragment extends Fragment {\n\n  @Override\n  public void onResume() {\n    EventBus.getDefault().register(this);\n    super.onResume();\n  }\n\n  @Override\n  public void onPause() {\n    EventBus.getDefault().unregister(this);\n    super.onPause();\n  } \n  ...\n}\n```", "```java\npublic static class DetailFragment extends Fragment {\n  ...\n  @Subscribe(threadMode = ThreadMode.MAIN)\n  public void onProductDetailEvent(ProductDetailEvent event) {\n    Log.i(TAG,\"Product details received for identifier\"\n               +event.identifier+\" on\" +   \n               Thread.currentThread().getName());       \n    // Update the Product Details on the UI\n    brandTv.setText(event.brand);\n    nameTv.setText(event.name);\n    priceTv.setText(Float.toString(event.price));\n  }\n\n  @Override\n  public View onCreateView(LayoutInflater inflater,\n                           ViewGroup container,\n                           Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    return inflater.inflate(R.layout.detail_fragment, \n                            container, false);\n  }\n\n  @Override\n  public void onViewCreated(View view, \n    Bundle savedInstanceState) {\n    // Initialize the UI widgets\n    ...\n   }\n}\n```", "```java\npublic class PaginatedActivity extends FragmentActivity {\n\n  int productId = 0;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.paginated_layout);\n\n    // Loads the Details Fragment\n    FragmentManager fragmentManager = getSupportFragmentManager();\n    FragmentTransaction fragmentTransaction = fragmentManager.\n                                              beginTransaction();\n    DetailFragment fragment = new DetailFragment();\n    fragmentTransaction.add(R.id.detail_fragment, fragment);\n    fragmentTransaction.commit();\n\n    // Request to load the first product\n    EventBus.getDefault().post(\n       new RetrieveProductEvent(productId));\n    ...\n  }\n  @Override\n  public void onStart() {\n    super.onStart();\n    EventBus.getDefault().register(this);\n  }\n  @Override\n  protected void onStop() {\n    EventBus.getDefault().unregister(this);\n    super.onStop();\n  }\n}\n```", "```java\n@Subscribe(threadMode = ThreadMode.ASYNC)\npublic void onRetrieveProductEvent(RetrieveProductEvent event) {\n  Log.i(TAG, \"Retrieving the product \" + event.identifier \n              + \" on \" + Thread.currentThread().getName());\n\n  // Retrieve on background the product details \n  // for the product with the event.identifier id\n  ProductDetailEvent pde = ...;\n\n  // Post an EventDetailsEvent on the Bus to \n  // publish the event details for the product requested\n  EventBus.getDefault().post(pde);\n}\n```", "```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n  setContentView(R.layout.paginated_layout);\n  ...\n  // Submit an event to load the next Product\n  Button next = (Button)findViewById(R.id.next);\n  next.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n      EventBus.getDefault().post(\n        new RetrieveProductEvent(++productId));\n    }\n  });  \n  // Submit an event to load the previous Product\n  Button prev = (Button)findViewById(R.id.previous);\n  prev.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n      if ( productId > 0 ) {\n        EventBus.getDefault().post(\n       new RetrieveProductEvent( --productId ));\n      }\n    }\n  });\n}\n```", "```java\nvoid postSticky(new MyEvent())\n```", "```java\n  @Subscribe(sticky = true)\n  public void onMyEvent(MyEvent event)\n```", "```java\nLocationManager.\nrequestLocationUpdates(String provider,  // GPS or NETWORK\n                       long minTime, float minDistance, \n                       LocationListener listener)\n```", "```java\npublic class LocationEvent {\n\n    final double latitude; // location latitude in degrees.\n    final double longitude; // location longitude in degrees.\n\n    LocationEvent(double latitude, double longitude) {\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n}\n```", "```java\npublic class LocationActivity extends Activity {\n\n  @Override\n  public void onResume() {\n    super.onResume();\n\n    LocationManager manager = (LocationManager)\n      getSystemService(Context.LOCATION_SERVICE);\n\tLocation location = manager.getLastKnownLocation(\n     LocationManager.GPS_PROVIDER);\n\n   // Post the latest known position if available \n   if ( location != null ){\n    EventBus.getDefault().postSticky(\n            new LocationEvent(location.getLatitude(),\n                              location.getLongitude()));\n    }\n    // Request a location update only if device location changed\n    // Minimum time between updates: 5000ms \n    // Minimum distance between location updates: 100 meters\n    manager.requestLocationUpdates(\nLocationManager.GPS_PROVIDER, 5000, 100, listener);\n  }\n\n  @Override\n  public void onPause() {\n    super.onPause();\n    LocationManager manager= (LocationManager)\n      getSystemService(Context.LOCATION_SERVICE);\n    manager.removeUpdates(listener);\n  }\n\n  //Handle location callback events\n  private LocationListener listener = new LocationListener() {\n    @Override\n    public void onLocationChanged(Location location) {\n      EventBus.getDefault().postSticky(\n        new LocationEvent(location.getLatitude(),\n                          location.getLongitude()));\n    }\n    @Override\n    public void onProviderDisabled(String provider) { }\n    @Override\n    public void onProviderEnabled(String provider) { }\n    @Override\n    public void onStatusChanged(String provider, \n                                int status, Bundle extras) {}\n  };\n}\n```", "```java\nButton newSubs = (Button)findViewById(R.id.launch);\nnewSubs.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {\n\n    new Runnable() {\n      @Subscribe(sticky = true)\n      public void onLocationEvent(LocationEvent event) {\n        String locTxt = String.format(\n             \"Lat[%f] Long[%f]\", event.latitude, event.longitude);\n        Log.i(TAG, \"Last known Location is \"+ locTxt);\n        // Update the UI with the last position  \n        // retrieved from the new Subscriber\n        TextView locationTv = (TextView) \n                              findViewById(R.id.location);\n        locationTv.setText(locTxt);\n   }\n      @Override\n      public void run() {\n        EventBus.getDefault().register(this);\n        //...\n        EventBus.getDefault().unregister(this);\n      }\n    }.run();\n  }\n});\n```", "```java\n// Check if the sticky event exist on the Bus  \nLocationEvent evt = EventBus.getDefault().\n                        getStickyEvent(LocationEvent.class);\n// Check if the event is null\nif ( evt != null) {\n  EventBus.getDefault().removeStickyEvent(stickyEvent);\n}\n```"]