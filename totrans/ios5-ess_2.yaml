- en: Chapter 2. Using iCloud and the Storage APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be introducing the features of iCloud and their storage
    APIs. These allow you to develop your application to write and store user documents
    in a common and central location, with the ability to access those items from
    all of your computers and iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Making a user's document available using iCloud, means that a user can view
    or edit those documents directly from any device, without the need of having to
    sync or transfer those files. Storing documents in a user's iCloud account provides
    an added layer of security for that user. Even if the user loses their device,
    the documents can easily be retrieved from the device, provided that they are
    contained within iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: Through the use of the iCloud storage APIs, you can make your applications capable
    enough to store user documents and key-value data, allowing this information,
    and any changes to it, to be pushed to all of your iOS devices all at the same
    time. By using iCloud, you can create some excellent applications, by adding some
    great compelling functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Take advantage of iCloud storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back up our data using iCloud backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store documents within iCloud storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for documents within the Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle file-version conflicts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move and store documents to iCloud storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure and set up provisioning profiles ready for iCloud storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Apple iCloud and Google Docs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Apple announced their new cloud-based file management system called iCloud,
    it allowed you to backup your files to the Cloud, and synchronize your data between
    multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Devices, such as the iPad and iPhone, can automatically backup files, such as
    photos, music, and documents to iCloud, and have these synchronize with your other
    Apple devices.
  prefs: []
  type: TYPE_NORMAL
- en: One of the significant differences you will notice between iCloud and Google
    Docs, is that, iCloud is meant only for Apple devices, such as the iPhone, iPod
    Touch and iPad.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud works by storing all of your music, photos, documents, books, and so
    on, and automatically pushing them out to all of your other devices, wirelessly.
  prefs: []
  type: TYPE_NORMAL
- en: Any documents that are stored within iCloud can be accessed and viewed from
    any device that is connected to the Internet. At this stage, iCloud does not offer
    a way to share the documents with other users.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Google Docs is a free document management service from Google
    that allows you to create, edit, and manage various types of documents in the
    Cloud. This is all handled within an easy-to-use interface to manage your documents,
    each organized under labels that are equivalent to folders. Unlike iCloud, you
    are able to access these documents within the Cloud from any computer, tablet,
    or even using your iPhone and iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Google Docs currently supports and stores the following file types within the
    Cloud. These can be later accessed from anywhere on the web.
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spreadsheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presentations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawings:** This is a new addition to the Google Docs family.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud and Google Docs both offer free storage, but come with some limitations.
    iCloud comes with a total limit of 5GB per account; additional space can be purchased
    should you require it.
  prefs: []
  type: TYPE_NORMAL
- en: Google Docs is also free, but comes with restrictions and limitations, based
    on the total number of documents that you can store and the length/content of
    each document.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike iCloud, Google Docs provides you with a way of sharing your documents
    with other users.
  prefs: []
  type: TYPE_NORMAL
- en: You have the flexibility of sharing and setting user rights to your documents.
    You have the ability to make a document publicly available on the Internet with
    view only access, or allow selected people to edit.
  prefs: []
  type: TYPE_NORMAL
- en: Storing and using documents in iCloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Storing documents within the Cloud provides you with a common central location
    for easy access to those documents. Any updates that are made to the document
    can then be delivered to every iOS device or computer, as long as they are using
    the same Apple ID used to upload those documents.
  prefs: []
  type: TYPE_NORMAL
- en: When a document is uploaded to iCloud, it is not moved there immediately. The
    document must first be moved out of the application sandbox into a local system-managed
    directory, where it can be monitored by the iCloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Once this process has completed, the file is transferred to iCloud and then
    distributed out to the user's other iOS devices as soon as possible. While the
    files are stored within iCloud storage, any changes that are made on one device
    are initially stored locally and then immediately pushed out to iCloud, using
    a local daemon service.
  prefs: []
  type: TYPE_NORMAL
- en: This is to prevent file conflicts from happening at the same time; this is handled
    by the **File** coordinator, which mediates changes made between the application
    and the local daemon service that is responsible for facilitating the transfer
    of the document to-and-from the iCloud service.
  prefs: []
  type: TYPE_NORMAL
- en: The file coordinator acts much like a locking mechanism for the document, thus
    preventing your application and the daemon service from applying modifications
    to the document simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever your application stores documents to iCloud, it must specify one or
    more containers in which those documents, contents will be stored, by including
    the key value entry `com.apple.developer.ubiquity-container-identifiers` within
    your applications, entitlements file. This is covered in the section *Requesting
    entitlements for iCloud storage*.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the process when changes are made on one device,
    and having those changes stored locally before being pushed back out to the iCloud
    service using a local daemon process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Storing and using documents in iCloud](img/2267EXP_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From an implementation perspective, the easiest way to provide your applications
    with the ability to manage documents stored within iCloud, would be to use the
    `UIDocument` class. This class handles everything that is required to read and
    write files that are stored within iCloud. It can:'
  prefs: []
  type: TYPE_NORMAL
- en: Handle the creation and use of the file coordinators to modify the document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seamlessly detect changes that are received from other devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle any potential conflicts that arise when two devices manage to update
    the same file in conflicting ways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent large number of conflicting changes from occurring at the same time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will take a look at storing documents within iCloud, when we start to create
    our example application in our section on *Creating an iCloudExample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Storing key-value data in iCloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Storing data within iCloud provides you with a means of making your applications
    share data between other copies of the same data running on other computers and
    other iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: The class that allows you to do this is called the `NSUbiquitousKeyValueStore`.
    This class provides you with the ability to share small amounts of data between
    your devices.
  prefs: []
  type: TYPE_NORMAL
- en: The `NSUserDefaults` class, provides you with a programmatic interface for interacting
    with the system defaults that allows an application to customize its behavior
    to match a user's preferences. For example, you can set up your application to
    specify how often documents are automatically saved. This class allows you to
    save your details to a variety of data types, that is, numbers, strings, dates,
    arrays and so on, before retrieving the data for use at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between the `NSUserDefaults` and the `NSUbiquitousKeyValueStore`,
    is that the `NSUserDefaults` class writes the data to the user's iCloud storage,
    so that it can be retrieved by the application running on a different iOS device
    or computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how to set up the cloud, so that you are able
    to write the data to the user''s iCloud storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the `NSUbiquitousKeyValueStore` class, you must ensure that an entry
    to the `com.apple.developer.ubiquity-kvstore-identifier` entitlement is added
    to your project entitlements file. This is covered in the section *Requesting
    entitlements for iCloud storage*.
  prefs: []
  type: TYPE_NORMAL
- en: The amount of space available for a single key-value store is limited to 64KB;
    any data that is written to a single key-value within your container must not
    exceed 4KB in size. This is so that you can store small amounts of data about
    your application, but it is not advisable to use it to store user documents or
    large amounts of data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may have an application that might store the current version
    number, and the name of the screen or document that the user was viewing. That
    way, if the user opens the application on another device, the version of your
    application on that device can open the same screen or document as the previous
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting entitlements for iCloud storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to protect the data your application creates, a number of specific
    entitlements need to be created at build-time in order to use iCloud storage.
    You will need to ensure that you have selected the option to enable iCloud for
    your application's App ID.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to either create a new App ID from within the iOS provisioning
    portal located at [https://developer.apple.com/devcenter/ios/index.action#](http://https://developer.apple.com/devcenter/ios/index.action#).
    Or, if you are using an existing ID, this must not be a wildcard one, that is,
    `com.yourcompany.*`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable iCloud services for your App ID, follow these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, set up your provisioning profile for use with iCloud, by simply checking
    the **Enable for iCloud** checkbox from the **Configure App ID** screen.![Requesting
    entitlements for iCloud storage](img/2267EXP_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be presented with a pop-up dialog box, explaining that any new
    provisioning profiles that you create using the chosen App ID will be enabled
    for iCloud services.![Requesting entitlements for iCloud storage](img/2267EXP_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have clicked on the **OK** button, the pop-up dialog box will disappear,
    and you will be returned back to the **Configure App ID** screen, and the **Enable
    for iCloud Enabled** button will be set to green, as shown in the following screenshot:![Requesting
    entitlements for iCloud storage](img/2267EXP_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Done** button to close this screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Provisioning** tab, download your **Development and Distribution
    Provisioning Profiles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **ProjectNavigator** window, click on your project, then click
    on the **Targets** section, and then on the **Summary** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down till you get to the **Entitlements** section, and check the **Enable
    Entitlements** checkbox. This will add a file called **iCloudExample.entitlements**
    to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Requesting entitlements for iCloud storage](img/2267EXP_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you add entitlements to your project, they are bound directly to your applications
    provisioning profile that are used to separate your application's documents and
    data repositories from that of other applications that you create. There are two
    entitlements that an application can request, depending on which iCloud features
    it is required to use. These are explained in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Entitlement** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `com.apple.developer.ubiquity-container-identifiers` | Use this to request
    the iCloud document storage entitlement.The value of this key is an array of container-identifier
    strings (the first string in the array must not contain any wildcard characters).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `com.apple.developer.ubiquity-kvstore-identifier` | Use this to request the
    iCloud key-value data store entitlement. The value of this key is a single container
    identifier string. |'
  prefs: []
  type: TYPE_TB
- en: When you specify the container identifier string, this must be in the form`<TEAMID>.<CUSTOM_STRING>`,
    where`<TEAMID>` is the unique ten-character identifier associated with your development
    team. The`<CUSTOM_STRING>` identifier is a reverse-DNS string that identifies
    the container for storing your application's documents.
  prefs: []
  type: TYPE_NORMAL
- en: This string does not necessarily need to be your application's bundle identifier,
    but can be anything that makes sense to you, or your development team.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To locate your unique identifier associated with your development team, log
    in to the Apple developer connection website, and then go to the **Member Center**
    page ([http://developer.apple.com/membercenter](http://developer.apple.com/membercenter)).
    From the **Member Center** home page, select the **Your Account** tab, and then
    select **Organization Profile** from the column on the left of that tab. Your
    team's identifier is in the **Company/Organization ID** field.
  prefs: []
  type: TYPE_NORMAL
- en: Applications using iCloud document storage can specify multiple containers for
    storing documents and data. The value of the `com.apple.developer.ubiquity-container-identifiers`
    key is an array of strings. The first string in this array must be the main container
    identifier to associate with your application.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet shows the XML from the `iCloudExample` entitlements
    file that requests the keys for an iPhone application. It can read and write its
    own documents, which are stored in the container directory, identified as shown
    in the highlighted code sections.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot displays the property list view within the project
    navigator of the `iCloudExample.Entitlements` entitlements file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Requesting entitlements for iCloud storage](img/2267EXP_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **TEAMID** value (as shown in the previous screenshot), can be obtained
    from the **Account Summary** page of your **Developer Account** and using the
    **Individual ID**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Requesting entitlements for iCloud storage](img/2267EXP_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The strings you specify in your entitlements property-list file are also the
    strings you pass to the `URLForUbiquityContainerIdentifier:` method, when requesting
    the location of a directory in the user's iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud backup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using backups with iCloud, users have the ability to choose to have their
    applications and data backed up directly to their iCloud account. This makes it
    easier to restore applications to their most recent state at a later time. Choosing
    to have data backed up to iCloud, will make it easier for a user to reinstall
    their data to any new or existing iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud determines what files get backed up, and is based on the location where
    these files are kept, normally within the applications, home directory. Other
    areas that are backed up would be everything contained within the user's documents
    directory, as well as the contents of your applications library. When developing
    iCloud applications, and minimizing the amount of data stored in the user's iCloud
    account, you are encouraged to put more files in the `Library/Caches` directory,
    especially if those files can be easily re-created or obtained in another way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to have your data backed-up to iCloud, you will need to activate this
    on all of your iOS devices. This can be achieved by following these simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Settings** pane within your device, select **iCloud**. This is shown
    in the following screenshot:![iCloud backup](img/2267EXP_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, sign-in with your **AppleID** and **Password**, and then click on the
    **Sign In** button as shown in this screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to agree to the iCloud terms and conditions, and then click on
    the **Agree** button to close the pop up dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next screenshot, you have the option to decide which items you would
    like to backup to iCloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Storage & Backup** option to proceed to the next screen:![iCloud
    backup](img/2267EXP_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, set the **Back Up to iCloud** option to **ON**, from under the **Backup**
    sections pane. This will automatically backup all of your camera photos, documents,
    and settings to iCloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting this option to **ON** will prevent iTunes from backing up your details,
    as your iOS device will handle this.
  prefs: []
  type: TYPE_NORMAL
- en: '![iCloud backup](img/2267EXP_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When using the iCloud storage APIs from within your applications, any documents
    that your application stores explicitly in iCloud are not backed up with your
    application; this is because these will already be stored within your iCloud account,
    and therefore do not need to be backed up separately.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For information on how to store documents within iCloud, refer to the section
    *Storing and using documents in iCloud*. To determine which directories are backed
    up, check out the **iOS Application Programming Guide** at: [http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html](http://developer.apple.com/library/ios/#documentation/iphone/conceptual/iphoneosprogrammingguide/Introduction/Introduction.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the iCloudExample application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can proceed to create our `iCloudExample` application, we must first
    launch the Xcode development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** template to use from the **Project**
    template dialog box.![Creating the iCloudExample application](img/2267EXP_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Next** button to proceed to the next step in the Wizard.
    This will allow you to enter in the **Product Name** and your **Company Identifier**.![Creating
    the iCloudExample application](img/2267EXP_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `iCloudExample` for the **Product Name**, and ensure that you have
    selected **iPhone** from the **Device Family** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the final step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the folder location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button to save your project at the location specified
    in *step 6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your project has been created, you will be presented with the Xcode development
    interface, along with the project files that the template created for you, within
    the **Project Navigator** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to start building our user interface to obtain the Cloud URL,
    store keys, and documents within the Cloud, and look how to retrieve information
    from the Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `iCloudExampleViewController.xib` file from within theiCloudExample
    folder within the **Project Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select-and-drag a (`UIButton`) button control,
    onto the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the **Object Attributes** of the button control, and set the title to
    read **Geti Cloud URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select-and-drag a (`UILabel`) label control, onto the view, and place it directly
    under the **Get iCloud URL** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the **Object Attributes** of the label control, and set the **Text**
    property to read **iCloud URL:**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the previous steps to add the buttons and labels for the **Store to iCloud,
    DocPath, Read from iCloud**, and **Item Value**.
  prefs: []
  type: TYPE_NORMAL
- en: If you have followed everything correctly, your view should look like the next
    screenshot. Feel free to adjust yours accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the iCloudExample application](img/2267EXP_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have created a user interface, you will need to bind up the controls
    to create the necessary events, and then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `iCloudExampleViewController.h` interface file, located within the
    `iCloudExample` folder of your project, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open our `iCloudExampleViewController.m` implementation file, located within
    the `iCloudExample` folder of your project, and add the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If we don't declare these, we will receive compiler-warning messages, which
    can result in unexpected results occurring in your application, or even make your
    application terminate unexpectedly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we need to declare the method that will connect to the iCloud service,
    using our `TEAMID` and the bundle identifier, and retrieve the iCloud URL. Enter
    in the following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When this button is executed, it will display the URL from your iCloud service,
    based on your TEAMID and bundle identifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`file://localhost/private/var/mobile/Library/Mobile%20Documents/TEAMID~com~yourcompany~iCloudExample/`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to implement our method that will be used to store a document
    into our iCloud sandbox. Enter in the following code snippet :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When this button is executed, this will display the path to the documents folder,
    located within the iCloud application sandbox:`/var/mobile/Applications/6BF2CE1F-C184-43FA-8D00-E4D476F8A538/Documents/iCloudExample.doc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, if you open the **Organizer** window, by selecting **Window|Organizer**,
    you will notice that our `iCloudExample.doc` has been added to our application
    sandbox.![Creating the iCloudExample application](img/2267EXP_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to implement our method that will be used to add and retrieve
    key-value with our iCloud repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When this button is executed, this will display the key entry value for our
    **Favorite Author** key-value data, located within the iCloud application sandbox:
    **Favorite Author = John Grisham**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are now ready to build and compile our `iCloudExample` application. The
    following screenshot shows the output when each of the buttons is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating the iCloudExample application](img/2267EXP_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So there you have it, we have successfully created a simple, yet powerful application
    that can communicate with iCloud to store documents and key-value data, and retrieve
    the data from the Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Moving a document to iCloud storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When moving documents to iCloud, you have the ability to create additional subdirectories
    from within the container directory to manage your files.
  prefs: []
  type: TYPE_NORMAL
- en: From a development point of view, it is recommended that when adding your documents
    to iCloud, you should create a `Documents` subdirectory and use that directory
    for storing user documents. Within iCloud, the contents of the `Documents` directory
    are made visible to the user so that individual documents can be deleted, whereas,
    everything outside of the `Documents` directory is grouped together, and treated
    as a single entity that a user can keep or delete.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet creates and saves the file locally within your application
    sandbox first, before moving the file to the specified destination within iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this code snippet, we create an `NSURL` object that specifies the destination
    of the file within the user's iCloud storage. We then make a call to the `URLForUbiquityContainerIdentifier:`
    method of the `NSFileManager` classto get the root URL for the directory, and
    then append any additional directory and filenames to that URL. Finally, we call
    the `setUbiquitous:itemAtURL:destinationURL:error:` method of `NSFileManager`,
    to move the file to the specified destination in iCloud.
  prefs: []
  type: TYPE_NORMAL
- en: iCloud storage APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The iCloud storage APIs let your application write user documents and data to
    a central location, and access those items from all of a user's computers and
    iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Making a user's documents ubiquitous using iCloud, means that a user can view
    or edit those documents from any device without having to sync or transfer files
    explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Storing documents in a user''s iCloud account provides a layer of security
    for that user. If the user happens to lose their device, any documents that were
    saved on it can easily be recovered if they are contained within iCloud storage.
    There are two ways to utilize iCloud storage, each with its own significant purpose.
    These are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Storage type** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iCloud document storage | Use this feature to store user documents and data
    in the user''s iCloud account. Refer to the section *Storing and using documents
    in iCloud*, located within this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| iCloud key-value data storage | Use this feature to share small amounts of
    data among instances of your application. Refer to the section *Storing Key-Value
    data in iCloud*, located within this chapter. |'
  prefs: []
  type: TYPE_TB
- en: Most applications that you create will use the iCloud document storage to share
    documents from a user's iCloud account. This will provide the ability to share
    documents across multiple devices, and manage documents from a given device.
  prefs: []
  type: TYPE_NORMAL
- en: When using the iCloud key-value data store, this is not something that a user
    will see, as this is handled your application and shares only small amounts of
    information; this information is used only by the application. An example of this
    would be that you can store the time the user logged in to your application, or
    what screen they are currently viewing.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the process involved when creating information
    within local iCloud storage, within your application's sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![iCloud storage APIs](img/2267EXP_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how to go about storing and using documents within iCloud,
    refer to the section *Storing and using documents in iCloud*, located within this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for documents in iCloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There may be times when you need to check to see if a document exists at a location
    within the Cloud, prior to modifying the document. An example would be, say you
    wanted to check if a document existed prior to opening it within your application.
    If you don't perform a check and try to open this, you will receive an error.
  prefs: []
  type: TYPE_NORMAL
- en: Another case could be that you need to remove a file from your iCloud repository;
    you would still need to perform a check to ensure that the document indeed exists
    prior to attempting to remove this file, otherwise you will receive an improperly
    handled error, resulting in your application crashing.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve any of these case scenarios, you will need to search the iCloud repository
    using the `NSMetadataQuery` object. Searching through the iCloud repository is
    a guaranteed way to locate documents, both in a user's iCloud storage and from
    within your application sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: You should always use query objects instead of saving URLs persistently, because
    the user can delete files from iCloud storage when your application is not running.
    Using a query to search is the only way to ensure an accurate list of documents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The following code snippet displays the associated `processQuery` method of
    the `NSNotification` class, and shows how we can perform and handle comparisons
    for each of the various `NSMetadataQuery` notification methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In iOS 5.0, the `NSMetadataQuery` class supports several search scopes for your
    documents. This is shown in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **NSMetadataQueryclass methods** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `NSMetadataQueryUbiquitousDocumentsScope` | Use this feature to search for
    documents in iCloud that reside inside a documents directory (for any given container
    directory, put documents that the user is allowed to access inside a documents
    subdirectory). |'
  prefs: []
  type: TYPE_TB
- en: '| `NSMetadataQueryUbiquitousDataScope` | Use this feature to search for documents
    in iCloud that reside anywhere other than in a documents directory (for any given
    container directory, use this scope to store user-related data files that your
    application needs to share, but are not files you want the user to manipulate
    directly). |'
  prefs: []
  type: TYPE_TB
- en: Working with documents in iCloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your application needs to read or write a document in iCloud, it must do
    so in a coordinated manner. Your application might not be the only application
    trying to manipulate the local file at any given moment. The daemon that transfers
    the document to and from iCloud also needs to monitor the file periodically. To
    prevent your application from interfering with the daemon (and vice versa), iOS
    provides a coordinated locking mechanism that works with the files and directories
    you target for iCloud storage.
  prefs: []
  type: TYPE_NORMAL
- en: At the heart of the iCloud locking mechanism are file coordinators and file
    presenters.
  prefs: []
  type: TYPE_NORMAL
- en: The file coordinator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever you need to read and write a file, you do so using a file coordinator,
    which is an instance of the `NSFileCoordinator` class. The job of a file coordinator
    is to coordinate the reads and writes performed by your application and the sync
    daemon on the same document. For example, your application and the daemon may
    both read the document at the same time, but only one may write to the file at
    any single time.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if one process is reading the document, the other process is prevented
    from writing to the document, until the earlier process is finished reading the
    document.
  prefs: []
  type: TYPE_NORMAL
- en: The file presenter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to coordinating operations, file coordinators also work with file
    presenters to notify applications when changes are about to occur. A file presenter
    is any object that conforms to the `NSFilePresenter` protocol, and takes responsibility
    for managing a specific file (or directory of files) in an application.
  prefs: []
  type: TYPE_NORMAL
- en: The job of a file presenter is to protect the integrity of its own data structures.
    It does this by listening for messages from other file coordinators and using
    those messages to update its internal data structures. In most cases, a file presenter
    may not have to do anything. However, if a file coordinator declares that it is
    about to move a file to a new URL, the file presenter would need to replace its
    old URL with the new one provided to it by the file coordinator.
  prefs: []
  type: TYPE_NORMAL
- en: Handling file-version conflicts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling version conflicts of files is a common issue in software development.
    With iCloud, we need to be able to handle this when multiple instances of your
    application are running on multiple devices, and both try to modify the same document.
    This will result in a conflict when both devices try to upload the changes made
    to the file at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, iCloud will end up with two different versions of the same file,
    and has to decide what to do with them. Its solution is to make the most recently
    modified file the current file, and to mark any other versions of the file as
    conflict versions.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid loss of changes made to those documents, your application will need
    to prompt the user to choose the appropriate course of action to take. For example,
    you might let the user choose which version of the file to keep, or you might
    offer to save the older version under a new name.
  prefs: []
  type: TYPE_NORMAL
- en: You would need to determine the current files, version, using the `currentVersionOfItemAtURL:`
    class method, and then obtain an array of the conflicted versions, by using the
    class method call to `unresolvedConflictVersionsOfItemAtURL:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each conflicted file version, you will need to perform the appropriate
    cause of action to resolve the conflict, by using any of these actions, listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Merge the conflicted versions with the current file automatically, if this is
    practical to do so.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose to ignore the conflicted versions, which will result in data being lost
    in those files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prompt the user to select the appropriate course of action, and decide which
    of the versions that they should indeed keep. This should always be your last
    course of action.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using iCloud storage responsibly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Applications that take advantage of iCloud storage features should act responsibly
    when storing data. The space available in each user''s account is limited and
    is shared by all applications. In addition, users can see how much space is consumed
    by a given application, and choose to delete documents and data associated with
    that particular application. For these reasons, it is in your application''s interest
    to be responsible about what files you store. Here are some tips to help you manage
    documents appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: Rather than storing all documents, let a user choose which documents to store
    in an iCloud account. If a user creates a large number of documents, storing all
    of those documents in iCloud could overwhelm that user's available space. Providing
    a way for a user to designate which documents to store in iCloud, gives that user
    more flexibility in deciding how best to use the available space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that deleting a document removes it from a user's iCloud account and
    from all of that user's computers and devices. Make sure that users are aware
    of this fact and confirm any delete operations. For your application to remove
    the local copy of a document, and then download a fresh copy from iCloud, use
    the `evictUbiquitousItemAtURL:error:` method of `NSFileManager`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When storing documents in iCloud, place them in a documents directory whenever
    possible. Documents inside a documents directory can be deleted individually by
    the user to free up space. However, everything outside that directory is treated
    as data, and must be deleted all at once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Never store caches or other files that are private to your application in a
    user's iCloud storage. A user's iCloud account should only be used for storing
    user data and content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat files in iCloud the same way you treat all other files in your application
    sandbox. The time at which to save a file should be driven by the need of your
    application, and the need to preserve the user's data. You should not change your
    application to save files more or less frequently for iCloud. iCloud automatically
    optimizes its transfers to the server to ensure the best possible performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iCloud secures your content by encrypting it using SSL, when it is being sent
    over the internet. This results in your content being stored in encrypted format,
    and uses secure tokens for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on how to go about storing and using documents within iCloud,
    refer to the section *Storing and using documents in iCloud*, located within this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the benefits of using iCloud, and how to access
    them through their storage APIs. We looked at how we can incorporate iCloud features
    within our code, how to store and retrieve key-value data, and how to store documents
    within a folder inside our application sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about the process involved in how to search and locate a document
    within an iCloud repository, as well as learned to handle and avoid file-version
    conflicts when multiple copies of the same file are being updated on more than
    one device, and then being submitted to the iCloud repository.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the new debugging features of OpenGL
    ES, and how this new debugger in Xcode allows you to track-down issues specific
    to OpenGL ES directly within your code, right from within the IDE.
  prefs: []
  type: TYPE_NORMAL
