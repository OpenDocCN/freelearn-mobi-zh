["```kt\nval vm = ViewModelProvider(this)[MyViewModel::class.java]\n```", "```kt\n    import androidx.lifecycle.ViewModel\n    class RestaurantsViewModel(): ViewModel() {\n       fun getRestaurants() = dummyRestaurants\n    }\n    ```", "```kt\n    dependencies {\n          […]\n        debugImplementation \"androidx.compose.ui:ui-\n            tooling:$compose_version\"\n        implementation \"androidx.lifecycle:lifecycle-\n            viewmodel-compose:2.4.1\"\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n       val viewModel: RestaurantsViewModel = viewModel()\n       LazyColumn( … ) {\n           items(viewModel.getRestaurants()) { restaurant->\n                 RestaurantItem(restaurant)\n           }\n       }\n    }\n    ```", "```kt\n@Composable\nfun NameInput() {\n   val textState: MutableState<String> =\n       remember { mutableStateOf(\"\") }\n   TextField(…) \n}\n```", "```kt\n@Composable\nfun NameInput() {\n   val textState = remember { mutableStateOf(\"\")}\n   TextField(\n            value = textState.value,\n            onValueChange = { newValue ->\n                textState.value = newValue\n            },\n            label = { Text(\"Your name\") })\n}\n```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant) {\n       Card(...) {\n           Row(...) {\n               RestaurantIcon(..., Modifier.weight(0.15f))\n               RestaurantDetails(..., Modifier.weight(0.7f))\n               FavoriteIcon(Modifier.weight(0.15f))\n           }\n       }\n    }\n    ```", "```kt\n    @Composable\n    private fun FavoriteIcon(modifier: Modifier) {\n       Image(\n           imageVector = Icons.Filled.FavoriteBorder,\n           contentDescription = \"Favorite restaurant icon\",\n           modifier = modifier.padding(8.dp))\n    }\n    ```", "```kt\n    @Composable\n    private fun FavoriteIcon(modifier: Modifier) {\n       val favoriteState = remember { \n           mutableStateOf(false) }\n       val icon = if (favoriteState.value)\n           Icons.Filled.Favorite\n       else\n           Icons.Filled.FavoriteBorder\n        Image(\n            imageVector = icon,\n            contentDescription = \"Favorite restaurant icon\",\n            modifier = modifier\n                .padding(8.dp)\n                .clickable { favoriteState.value =\n                        !favoriteState.value\n                }\n        )\n    }\n    ```", "```kt\n    @Composable\n    private fun FavoriteIcon(icon: ImageVector, \n                             modifier: Modifier,\n                             onClick: () -> Unit) {\n       Image(\n           imageVector = icon,\n           contentDescription = \"Favorite restaurant icon\",\n           modifier = [...]\n               .clickable { onClick() })\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant) {\n       val favoriteState = remember { \n           mutableStateOf(false) }\n       val icon = if (favoriteState.value)\n           Icons.Filled.Favorite\n       else\n           Icons.Filled.FavoriteBorder\n       Card(...) {\n           Row(...) {\n              [...]\n              FavoriteIcon(icon, Modifier.weight(0.15f)) {\n                   favoriteState.value = \n                       !favoriteState.value\n              }\n           }\n       }\n    }\n    ```", "```kt\n    @Composable\n    private fun RestaurantIcon(icon: ImageVector, modifier: Modifier, onClick: () -> Unit = { }) {\n       Image([...],\n           modifier = modifier\n               .padding(8.dp)\n               .clickable { onClick() }\n       )\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant) {\n       val favoriteState = ...\n       Card(...) {\n           Row(...) {\n              RestaurantIcon(…)\n              RestaurantDetails(...)\n              RestaurantIcon(icon, Modifier.weight(0.15f)) {\n                   favoriteState.value = !favoriteState.value\n               }\n           }\n       }\n    }\n    ```", "```kt\n    data class Restaurant(val id: Int,\n                          val title: String,\n                          val description: String,\n                          var isFavorite: Boolean = false)\n    val dummyRestaurants = listOf(…)\n    ```", "```kt\n    @Composable\n    fun RestaurantItem(item: Restaurant, \n                       onClick: (id: Int) -> Unit) {\n       val icon = if (item.isFavorite)\n           Icons.Filled.Favorite\n       else\n           Icons.Filled.FavoriteBorder\n       Card(...) {\n           Row(...) {\n               ...\n              RestaurantIcon(…)\n              RestaurantDetails(…)\n              RestaurantIcon(…) {\n                  onClick(item.id)\n              }\n           }\n       }\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n      val viewModel: RestaurantsViewModel = viewModel()\n      val state: MutableState<List<Restaurant>> =\n        remember {\n          mutableStateOf(viewModel.getRestaurants())\n        }\n      LazyColumn(...) {\n       items(state.value) { restaurant ->\n         RestaurantItem(restaurant) { id ->\n           val restaurants = state.value.toMutableList()\n           val itemIndex =\n             restaurants.indexOfFirst { it.id == id }\n           val item = restaurants[itemIndex]\n           restaurants[itemIndex] =\n             item.copy(isFavorite = !item.isFavorite)\n           state.value = restaurants\n          }\n        }\n      }\n    }\n    ```", "```kt\n    class RestaurantsViewModel() : ViewModel() {\n       val state = mutableStateOf(dummyRestaurants)\n        fun toggleFavorite(id: Int) {\n            val restaurants = state.value.toMutableList()\n            val itemIndex =\n                restaurants.indexOfFirst { it.id == id }\n            val item = restaurants[itemIndex]\n            restaurants[itemIndex] =\n                item.copy(isFavorite = !item.isFavorite)\n            state.value = restaurants\n        } \n    }\n    ```", "```kt\n    fun RestaurantsScreen() {\n       val viewModel: RestaurantsViewModel = viewModel()\n       LazyColumn(...) {\n           items(viewModel.state.value) { restaurant ->\n               RestaurantItem(restaurant) { id ->\n                   viewModel.toggleFavorite(id)\n               }\n           }\n       }\n    }\n    ```", "```kt\n    class RestaurantsViewModel(\n        private val stateHandle: SavedStateHandle) : \n    ViewModel() {\n       …\n    }\n    ```", "```kt\n    class RestaurantsViewModel(…) {\n       fun toggleFavorite(id: Int) {\n           …\n           restaurants[itemIndex] = item.copy(isFavorite = \n               !item.isFavorite)\n           storeSelection(restaurants[itemIndex])\n           state.value = restaurants\n       }\n     ...\n    }\n    ```", "```kt\n    private fun storeSelection(item: Restaurant) {\n       val savedToggled = stateHandle\n         .get<List<Int>?>(FAVORITES)\n         .orEmpty().toMutableList()\n       if (item.isFavorite) savedToggled.add(item.id)\n       else savedToggled.remove(item.id)\n       stateHandle[FAVORITES] = savedToggled\n    }\n    companion object {\n      const val FAVORITES = \"favorites\"\n    }\n    ```", "```kt\n    class RestaurantsViewModel(\n       private val stateHandle: SavedStateHandle):\n          ViewModel() {\n       val state = mutableStateOf(\n         dummyRestaurants.restoreSelections()\n       )\n        ...\n    }\n    ```", "```kt\n    private fun List<Restaurant>.restoreSelections():\n            List<Restaurant> {\n        stateHandle.get<List<Int>?>(FAVORITES)?.let {\n                selectedIds ->\n            val restaurantsMap = this.associateBy { it.id }\n            selectedIds.forEach { id ->\n                restaurantsMap[id]?.isFavorite = true\n            }\n            return restaurantsMap.values.toList()\n        }\n        return this\n    }\n    ```"]