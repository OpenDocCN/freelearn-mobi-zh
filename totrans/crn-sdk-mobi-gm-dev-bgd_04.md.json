["```java\n    physics.addBody(object, [bodyType,] {density=d, friction=f, bounce=b [,radius=r]})\n\n    ```", "```java\n    physics.addBody(object, [bodyType,] {density=d, friction=f, bounce=b [,shape=s]})\n\n    ```", "```java\nlocal ball = display.newImage(\"ball.png\")\nphysics.addBody( ball, \"dynamic\" { density = 1.0, friction = 0.3, bounce = 0.2, radius = 25 } )\n\n```", "```java\nlocal rectangle = display.newImage(\"rectangle.png\")\nrectangleShape = { -6,-48, 6,-48, 6,48, -6,48 }\nphysics.addBody( rectangle, { density=2.0, friction=0.5, bounce=0.2,\nshape=rectangleShape } )\n\n```", "```java\n    function startGame()\n\n    ```", "```java\n    physics.addBody(paddle, \"static\", {density = 1, friction = 0, bounce = 0})\n    physics.addBody(ball, \"dynamic\", {density = 1, friction = 0, bounce = 0})\n\n    ```", "```java\n    background:removeEventListener(\"tap\", startGame)\n    end\n\n    ```", "```java\n    background:addEventListener(\"tap\", startGame)\n\n    ```", "```java\n    function dragPaddle(event)\n\n    ```", "```java\n    if isSimulator then\n    if event.phase == \"began\" then\n    moveX = event.x - paddle.x\n    elseif event.phase == \"moved\" then\n    paddle.x = event.x - moveX\n    end\n    if((paddle.x - paddle.width * 0.5) < 0) then\n    paddle.x = paddle.width * 0.5\n    elseif((paddle.x + paddle.width * 0.5) > display.contentWidth) then\n    paddle.x = display.contentWidth - paddle.width * 0.5\n    end\n    end\n    end\n\n    ```", "```java\n    function movePaddle(event)\n\n    ```", "```java\n    paddle.x = display.contentCenterX - (display.contentCenterX * (event.yGravity*3))\n\n    ```", "```java\n    if((paddle.x - paddle.width * 0.5) < 0) then\n    paddle.x = paddle.width * 0.5\n    elseif((paddle.x + paddle.width * 0.5) > display.contentWidth) then\n    paddle.x = display.contentWidth - paddle.width * 0.5\n    end\n    end\n\n    ```", "```java\nif((paddle.x - paddle.width * 0.5) < 0) then\npaddle.x = paddle.width * 0.5\nelseif((paddle.x + paddle.width * 0.5) > display.contentWidth) then\npaddle.x = display.contentWidth - paddle.width * 0.5\nend\n\n```", "```java\n    function bounce()\n\n    ```", "```java\n    vy = -3\n\n    ```", "```java\n    if((ball.x + ball.width * 0.5) < paddle.x) then\n    vx = -vx\n    elseif((ball.x + ball.width * 0.5) >= paddle.x) then\n    vx = vx\n    end\n    end\n\n    ```", "```java\nlocal ball = display.newImage(\"ball.png\")\nlocal myTimer = 3\nfunction time()\nmyTimer = myTimer - 1\nprint(myTimer)\nif myTimer == 0 then\nball:removeSelf()\nball = nil\nend\nend\ntimer.performWithDelay( 1000, time, myTimer )\n\n```", "```java\n    function removeBrick(event)\n\n    ```", "```java\n    if event.other.name == \"brick\" and ball.x + ball.width * 0.5 < event.other.x + event.other.width * 0.5 then\n    vx = -vx\n    elseif event.other.name == \"brick\" and ball.x + ball.width * 0.5 >= event.other.x + event.other.width * 0.5 then\n    vx = vx\n    end\n\n    ```", "```java\n    if event.other.name == \"brick\" then\n    vy = vy * -1\n    event.other:removeSelf()\n    event.other = nil\n    bricks.numChildren = bricks.numChildren - 1\n    score = score + 1\n    scoreNum.text = score * scoreIncrease\n    scoreNum:setReferencePoint(display.CenterLeftReferencePoint)\n    scoreNum.x = 54\n    end\n\n    ```", "```java\n    if bricks.numChildren < 0 then\n    alertScreen(\"YOU WIN!\", \"Continue\")\n    gameEvent = \"win\"\n    end\n\n    ```", "```java\n    end\n\n    ```", "```java\n    function updateBall()\n\n    ```", "```java\n    ball.x = ball.x + vx\n    ball.y = ball.y + vy\n\n    ```", "```java\n    if ball.x < 0 or ball.x + ball.width > display.contentWidth then\n    vx = -vx\n    end\n\n    ```", "```java\n    if ball.y < 0 then\n    vy = -vy\n    end\n\n    ```", "```java\n    if ball.y + ball.height > paddle.y + paddle.height then\n    alertScreen(\"YOU LOSE!\", \"Play Again\") gameEvent = \"lose\"\n    end\n    end\n\n    ```", "```java\n    function changeLevel1()\n\n    ```", "```java\n    bricks:removeSelf()\n    bricks.numChildren = 0\n    bricks = display.newGroup()\n\n    ```", "```java\n    alertBox:removeEventListener(\"tap\", restart)\n    alertDisplayGroup:removeSelf()\n    alertDisplayGroup = nil\n\n    ```", "```java\n    ball.x = (display.contentWidth * 0.5) - (ball.width * 0.5)\n    ball.y = (paddle.y - paddle.height) - (ball.height * 0.5) -2\n    paddle.x = display.contentWidth * 0.5\n\n    ```", "```java\n    gameLevel1()\n\n    ```", "```java\n    background:addEventListener(\"tap\", startGame)\n    end\n\n    ```", "```java\n    function changeLevel2()\n    bricks:removeSelf()\n    bricks.numChildren = 0\n    bricks = display.newGroup()\n    alertBox:removeEventListener(\"tap\", restart)\n    alertDisplayGroup:removeSelf()\n    alertDisplayGroup = nil\n    ball.x = (display.contentWidth * 0.5) - (ball.width * 0.5)\n    ball.y = (paddle.y - paddle.height) - (ball.height * 0.5) -2\n    paddle.x = display.contentWidth * 0.5\n    gameLevel2() -- Redraw bricks for level 2\n    background:addEventListener(\"tap\", startGame)\n    end\n\n    ```", "```java\n    function restart()\n\n    ```", "```java\n    if gameEvent == \"win\" and currentLevel == 1 then\n    currentLevel = currentLevel + 1\n    changeLevel2()\n    levelNum.text = tostring(currentLevel)\n\n    ```", "```java\n    elseif gameEvent == \"win\" and currentLevel == 2 then\n    alertScreen(\" Game Over\", \" Congratulations!\")\n    gameEvent = \"completed\"\n\n    ```", "```java\n    elseif gameEvent == \"lose\" and currentLevel == 1 then\n    score = 0\n    scoreNum.text = \"0\"\n    changeLevel1()\n\n    ```", "```java\n    elseif gameEvent == \"lose\" and currentLevel == 2 then\n    score = 0\n    scoreNum.text = \"0\"\n    changeLevel2()\n\n    ```", "```java\n    elseif gameEvent == \"completed\" then\n    alertBox:removeEventListener(\"tap\", restart)\n    end\n    end\n\n    ```", "```java\n    alertBox:addEventListener(\"tap\", restart)\n\n    ```", "```java\nlocal physics = require \"physics\"\nphysics.start()\nlocal box1 = display.newImage( \"box.png\" )\nphysics.addBody( box1, \"dynamic\", { density = 1.0, friction = 0.3, bounce = 0.2 } )\nbox1.myName = \"Box 1\"\nlocal box2 = display.newImage( \"box.png\", 0, 350)\nphysics.addBody( box2, \"static\", { density = 1.0, friction = 0.3, bounce = 0.2 } )\nbox2.myName = \"Box 2\"\nlocal function onCollision( event )\nif event.phase == \"began\" and event.object1.myName == \"Box 1\" then\nprint( \"Collision made.\" )\nend\nend\nRuntime:addEventListener( \"collision\", onCollision )\n\n```", "```java\nlocal physics = require \"physics\"\nphysics.start()\nlocal box1 = display.newImage( \"box.png\" )\nphysics.addBody( box1, \"dynamic\", { density = 1.0, friction = 0.3, bounce = 0.2 } )\nbox1.myName = \"Box 1\"\nlocal box2 = display.newImage( \"box.png\", 0, 350)\nphysics.addBody( box2, \"static\", { density = 1.0, friction = 0.3, bounce = 0.2 } )\nbox2.myName = \"Box 2\"\nlocal function onCollision( self, event )\nif event.phase == \"began\" and self.myName == \"Box 1\" then\nprint( \"Collision made.\" )\nend\nend\nbox1.collision = onCollision\nbox1:addEventListener( \"collision\", box1 )\nbox2.collision = onCollision\nbox2:addEventListener( \"collision\", box2 )\n\n```", "```java\n    function gameListeners(event)\n\n    ```", "```java\n    if event == \"add\" then\n    Runtime:addEventListener(\"accelerometer\", movePaddle)\n    Runtime:addEventListener(\"enterFrame\", updateBall)\n    paddle:addEventListener(\"collision\", bounce)\n    ball:addEventListener(\"collision\", removeBrick)\n    paddle:addEventListener(\"touch\", dragPaddle)\n\n    ```", "```java\n    elseif event == \"remove\" then\n    Runtime:removeEventListener(\"accelerometer\", movePaddle)\n    Runtime:removeEventListener(\"enterFrame\", updateBall)\n    paddle:removeEventListener(\"collision\", bounce)\n    ball:removeEventListener(\"collision\", removeBrick)\n    paddle:removeEventListener(\"touch\", dragPaddle)\n    end\n    end\n\n    ```", "```java\n    gameListeners(\"add\")\n\n    ```", "```java\n    gameListeners(\"remove\")\n\n    ```", "```java\n-- Hide Status Bar\ndisplay.setStatusBar(display.HiddenStatusBar)\n-- Physics Engine\nlocal physics = require \"physics\"\nphysics.start()\nphysics.setGravity(0, 0)\n-- Accelerometer\nsystem.setAccelerometerInterval( 100 )\n-- Menu Screen\nlocal menuScreenGroup -- display.newGroup()\nlocal mmScreen\nlocal playBtn\n-- Game Screen\nlocal background\nlocal paddle\nlocal brick\nlocal ball\n-- Score/Level Text\nlocal scoreText\nlocal scoreNum\nlocal levelText\nlocal levelNum\n-- alertDisplayGroup\nlocal alertDisplayGroup -- display.newGroup()\nlocal alertBox\nlocal conditionDisplay\nlocal messageText\n-- Variables\nlocal _W = display.contentWidth / 2\nlocal _H = display.contentHeight / 2\nlocal bricks = display.newGroup()\nlocal brickWidth = 35\nlocal brickHeight = 15\nlocal row\nlocal column\nlocal score = 0\nlocal scoreIncrease = 100\nlocal currentLevel\nlocal vx = 3\nlocal vy = -3\nlocal gameEvent = \"\"\nlocal isSimulator = \"simulator\" == system.getInfo(\"environment\")\n-- Main Function\nfunction main()\nmainMenu()\nend\nfunction mainMenu()\nmenuScreenGroup = display.newGroup()\nmmScreen = display.newImage(\"mmScreen.png\", 0, 0, true)\nmmScreen.x = _W\nmmScreen.y = _H\nplayBtn = display.newImage(\"playbtn.png\")\nplayBtn:setReferencePoint(display.CenterReferencePoint)\nplayBtn.x = _W; playBtn.y = _H + 50\nplayBtn.name = \"playbutton\"\nmenuScreenGroup:insert(mmScreen)\nmenuScreenGroup:insert(playBtn)\n-- Button Listeners\nplayBtn:addEventListener(\"tap\", loadGame)\nend\n\n```", "```java\nfunction loadGame(event)\nif event.target.name == \"playbutton\" then\n-- Start Game\ntransition.to(menuScreenGroup,{time = 0, alpha=0, onComplete = addGameScreen})\nplayBtn:removeEventListener(\"tap\", loadGame)\nend\nend\nfunction addGameScreen()\nbackground = display.newImage(\"bg.png\", 0, 0, true )\nbackground.x = _W\nbackground.y = _H\npaddle = display.newImage(\"paddle.png\")\npaddle.x = 240; paddle.y = 300\npaddle.name = \"paddle\"\nball = display.newImage(\"ball.png\")\nball.x = 240; ball.y = 290\nball.name = \"ball\"\n-- Text\nscoreText = display.newText(\"Score:\", 5, 2, \"Arial\", 14)\nscoreText:setTextColor(255, 255, 255, 255)\nscoreNum = display.newText(\"0\", 54, 2, \"Arial\", 14)\nscoreNum:setTextColor(255, 255, 255, 255)\nlevelText = display.newText(\"Level:\", 420, 2, \"Arial\", 14)\nlevelText:setTextColor(255, 255, 255, 255)\nlevelNum = display.newText(\"1\", 460, 2, \"Arial\", 14)\nlevelNum:setTextColor(255, 255, 255, 255)\n-- Build Level Bricks\ngameLevel1()\n-- Start Listener\nbackground:addEventListener(\"tap\", startGame)\nend\n-- Used to drag the paddle on the simulator\nfunction dragPaddle(event)\nif isSimulator then\nif event.phase == \"began\" then\nmoveX = event.x - paddle.x\nelseif event.phase == \"moved\" then\npaddle.x = event.x - moveX\nend\nif((paddle.x - paddle.width * 0.5) < 0) then\npaddle.x = paddle.width * 0.5\nelseif((paddle.x + paddle.width * 0.5) > display.contentWidth) then\npaddle.x = display.contentWidth - paddle.width * 0.5\nend\nend\nend\nfunction movePaddle(event)\n-- Accelerometer Movement\n--must be yGravity since it's landscape\npaddle.x = display.contentCenterX - (display.contentCenterX * (event.yGravity*3))\n-- Wall Borders\nif((paddle.x - paddle.width * 0.5) < 0) then\npaddle.x = paddle.width * 0.5\nelseif((paddle.x + paddle.width * 0.5) > display.contentWidth) then\npaddle.x = display.contentWidth - paddle.width * 0.5\nend\nend\nfunction bounce()\nvy = -3\n-- Paddle Collision, check the which side of the paddle the ball hits, left, right\nif((ball.x + ball.width * 0.5) < paddle.x) then\nvx = -vx\nelseif((ball.x + ball.width * 0.5) >= paddle.x) then\nvx = vx\nend\nend\n\n```", "```java\nfunction startGame()\n-- Physics\nphysics.addBody(paddle, \"static\", {density = 1, friction = 0, bounce = 0})\nphysics.addBody(ball, \"dynamic\", {density = 1, friction = 0, bounce = 0})\nbackground:removeEventListener(\"tap\", startGame)\ngameListeners(\"add\")\nend\n-- HOW TO BUILD BLOCKS\nfunction gameLevel1()\ncurrentLevel = 1\nbricks:toFront()\nlocal numOfRows = 4\nlocal numOfColumns = 4\nlocal brickPlacement = {x = (_W) - (brickWidth * numOfColumns ) / 2 + 20, y = 50}\nfor row = 0, numOfRows - 1 do\nfor column = 0, numOfColumns - 1 do\n-- Create a brick\nlocal brick = display.newImage(\"brick.png\")\nbrick.name = \"brick\"\nbrick.x = brickPlacement.x + (column * brickWidth)\nbrick.y = brickPlacement.y + (row * brickHeight)\nphysics.addBody(brick, \"static\", {density = 1, friction = 0, bounce = 0})\nbricks.insert(bricks, brick)\nend\nend\nend\nfunction gameLevel2()\ncurrentLevel = 2\nbricks:toFront()\nlocal numOfRows = 5\nlocal numOfColumns = 8\nlocal brickPlacement = {x = (_W) - (brickWidth * numOfColumns ) / 2 + 20, y = 50}\nfor row = 0, numOfRows - 1 do\nfor column = 0, numOfColumns - 1 do\n-- Create a brick\nlocal brick = display.newImage(\"brick.png\")\nbrick.name = \"brick\"\nbrick.x = brickPlacement.x + (column * brickWidth)\nbrick.y = brickPlacement.y + (row * brickHeight)\nphysics.addBody(brick, \"static\", {density = 1, friction = 0, bounce = 0})\nbricks.insert(bricks, brick)\nend\nend\nend\nfunction gameListeners(event)\nif event == \"add\" then\nRuntime:addEventListener(\"accelerometer\", movePaddle)\nRuntime:addEventListener(\"enterFrame\", updateBall)\npaddle:addEventListener(\"collision\", bounce)\nball:addEventListener(\"collision\", removeBrick)\n-- Used to drag the paddle on the simulator\npaddle:addEventListener(\"touch\", dragPaddle)\nelseif event == \"remove\" then\nRuntime:removeEventListener(\"accelerometer\", movePaddle)\nRuntime:removeEventListener(\"enterFrame\", updateBall)\npaddle:removeEventListener(\"collision\", bounce)\nball:removeEventListener(\"collision\", removeBrick)\n-- Used to drag the paddle on the simulator\npaddle:removeEventListener(\"touch\", dragPaddle)\nend\nend\n\n```", "```java\n--BRICK REMOVAL\nfunction removeBrick(event)\n-- Check the which side of the brick the ball hits, left, right\nif event.other.name == \"brick\" and ball.x + ball.width * 0.5 < event.other.x + event.other.width * 0.5 then\nvx = -vx\nelseif event.other.name == \"brick\" and ball.x + ball.width * 0.5 >= event.other.x + event.other.width * 0.5 then\nvx = vx\nend\n-- Bounce, Remove\nif event.other.name == \"brick\" then\nvy = vy * -1\nevent.other:removeSelf()\nevent.other = nil\nbricks.numChildren = bricks.numChildren - 1\n-- Score\nscore = score + 1\nscoreNum.text = score * scoreIncrease\nscoreNum:setReferencePoint(display.CenterLeftReferencePoint)\nscoreNum.x = 54\nend\n-- Check if all bricks are destroyed\nif bricks.numChildren < 0 then\nalertScreen(\"YOU WIN!\", \"Continue\")\ngameEvent = \"win\"\nend\nend\n-- BALL FUNCTION\nfunction updateBall()\n-- Ball Movement\nball.x = ball.x + vx\nball.y = ball.y + vy\n-- Wall Collision\nif ball.x < 0 or ball.x + ball.width > display.contentWidth then\nvx = -vx\nend--Left\nif ball.y < 0 then\nvy = -vy\nend--Up\nif ball.y + ball.height > paddle.y + paddle.height then\nalertScreen(\"YOU LOSE!\", \"Play Again\") gameEvent = \"lose\"\nend--down/lose\nend\n-- RESET LEVEL\nfunction changeLevel1()\n-- Clear Level Bricks\nbricks:removeSelf()\nbricks.numChildren = 0\nbricks = display.newGroup()\n-- Remove Alert\nalertBox:removeEventListener(\"tap\", restart)\nalertDisplayGroup:removeSelf()\nalertDisplayGroup = nil\n-- Reset Ball and Paddle position\nball.x = (display.contentWidth * 0.5) - (ball.width * 0.5)\nball.y = (paddle.y - paddle.height) - (ball.height * 0.5) -2\npaddle.x = display.contentWidth * 0.5\n-- Redraw Bricks\ngameLevel1()\n-- Start\nbackground:addEventListener(\"tap\", startGame)\nend\nfunction changeLevel2()\n-- Clear Level Bricks\nbricks:removeSelf()\nbricks.numChildren = 0\nbricks = display.newGroup()\n-- Remove Alert\nalertBox:removeEventListener(\"tap\", restart)\nalertDisplayGroup:removeSelf()\nalertDisplayGroup = nil\n-- Reset Ball and Paddle position\nball.x = (display.contentWidth * 0.5) - (ball.width * 0.5)\nball.y = (paddle.y - paddle.height) - (ball.height * 0.5) -2\npaddle.x = display.contentWidth * 0.5\n-- Redraw Bricks\ngameLevel2()\n-- Start\nbackground:addEventListener(\"tap\", startGame)\nend\n\n```", "```java\nfunction alertScreen(title, message)\ngameListeners(\"remove\")\nalertBox = display.newImage(\"alertBox.png\")\nalertBox.x = 240; alertBox.y = 160\ntransition.from(alertBox, {time = 300, xScale = 0.5, yScale = 0.5, transition = easing.outExpo})\nconditionDisplay = display.newText(title, 0, 0, \"Arial\", 38)\nconditionDisplay:setTextColor(255,255,255,255)\nconditionDisplay.xScale = 0.5\nconditionDisplay.yScale = 0.5\nconditionDisplay:setReferencePoint(display.CenterReferencePoint)\nconditionDisplay.x = display.contentCenterX\nconditionDisplay.y = display.contentCenterY - 15\nmessageText = display.newText(message, 0, 0, \"Arial\", 24)\nmessageText:setTextColor(255,255,255,255)\nmessageText.xScale = 0.5\nmessageText.yScale = 0.5\nmessageText:setReferencePoint(display.CenterReferencePoint)\nmessageText.x = display.contentCenterX\nmessageText.y = display.contentCenterY + 15\nalertDisplayGroup = display.newGroup()\nalertDisplayGroup:insert(alertBox)\nalertDisplayGroup:insert(conditionDisplay)\nalertDisplayGroup:insert(messageText)\nalertBox:addEventListener(\"tap\", restart)\nend\n-- WIN/LOSE ARGUMENT\nfunction restart()\nif gameEvent == \"win\" and currentLevel == 1 then\ncurrentLevel = currentLevel + 1\nchangeLevel2()--next level\nlevelNum.text = tostring(currentLevel)\nelseif gameEvent == \"win\" and currentLevel == 2 then\nalertScreen(\" Game Over\", \" Congratulations!\")\ngameEvent = \"completed\"\nelseif gameEvent == \"lose\" and currentLevel == 1 then\nscore = 0\nscoreNum.text = \"0\"\nchangeLevel1()--same level\nelseif gameEvent == \"lose\" and currentLevel == 2 then\nscore = 0\nscoreNum.text = \"0\"\nchangeLevel2()--same level\nelseif gameEvent == \"completed\" then\nalertBox:removeEventListener(\"tap\", restart)\nend\nend\nmain()\n\n```", "```java\n    local ball = display.newImage(\"ball.png\")\n\n    ```", "```java\n    local function onCollision( event )\n    if event.phase == \"began\" and event.object1.myName == \"Box 1\" then\n    print( \"Collision made.\" )\n    end\n    end\n\n    ```"]