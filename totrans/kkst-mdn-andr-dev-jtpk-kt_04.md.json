["```kt\n    implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n    ```", "```kt\n    import retrofit2.Call\n    import retrofit2.http.GET\n    interface RestaurantsApiService {\n        @GET(\"restaurants.json\")\n        fun getRestaurants(): Call<Any>\n    }\n    ```", "```kt\ndata class Restaurant(val id: Int,\n                      val title: String,\n                      val description: String,\n                      var isFavorite: Boolean = false)\n```", "```kt\n    implementation \"com.google.code.gson:gson:2.8.6\"\n    ```", "```kt\n    import com.google.gson.annotations.SerializedName\n    data class Restaurant(\n        @SerializedName(\"r_id\")\n        val id: Int,\n        @SerializedName(\"r_title\")\n        val title: String,\n        @SerializedName(\"r_description\")\n        val description: String,\n        var isFavorite: Boolean = false)\n    ```", "```kt\n    interface RestaurantsApiService {\n        @GET(\"restaurants.json\")\n        fun getRestaurants(): Call<List<Restaurant>>\n    }\n    ```", "```kt\n    implementation \"com.squareup.retrofit2:converter-\n        gson:2.9.0\"\n    ```", "```kt\n    class RestaurantsViewModel(…) : ViewModel() {\n        private var restInterface: RestaurantsApiService\n        val state = mutableStateOf(\n            dummyRestaurants.restoreSelections()\n        )\n        init {\n            val retrofit: Retrofit = Retrofit.Builder()\n                .addConverterFactory(\n                    GsonConverterFactory.create()\n                )\n                .baseUrl(\n                    \"https://restaurants-db-default\n                            -rtdb.firebaseio.com/\"\n                )\n                .build()\n            restInterface = retrofit.create(\n                RestaurantsApiService::class.java\n            )\n        }\n        […]\n    }\n    ```", "```kt\n    fun getRestaurants() {\n        restInterface.getRestaurants().execute().body()\n            ?.let { restaurants ->\n                state.value = restaurants.restoreSelections()\n            }\n    }\n    ```", "```kt\nval state = mutableStateOf(emptyList<Restaurant>())\n```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n        val viewModel: RestaurantsViewModel = viewModel()\n        viewModel.getRestaurants()\n        LazyColumn( … ) { … }\n    }\n    ```", "```kt\n    <manifest xmlns:android=\"…\"\n        package=\"com.codingtroops.restaurantsapp\">\n        <uses-permission                                   android:name=\"android.permission.INTERNET\" />\n          <application> … </application>\n    </manifest>\n    ```", "```kt\n    fun getRestaurants() {\n       restInterface.getRestaurants().enqueue(\n        object : Callback<List<Restaurant>> {\n            override fun onResponse(\n                call: Call<List<Restaurant>>,\n                response: Response<List<Restaurant>>\n            ) {\n                response.body()?.let { restaurants ->\n    state.value = \n                        restaurants.restoreSelections()\n                }\n            }\n            override fun onFailure(\n                call: Call<List<Restaurant>>, t: Throwable\n            ) {\n                t.printStackTrace()\n            }\n        })\n    }\n    ```", "```kt\n    class RestaurantsViewModel(…): ViewModel() {\n        private var restInterface: RestaurantsApiService\n        val state = […]\n        private lateinit var restaurantsCall: \n            Call<List<Restaurant>>\n        init {…}\n       […]\n    }\n    ```", "```kt\n    fun getRestaurants() {\n        restaurantsCall = restInterface.getRestaurants()\n        restaurantsCall.enqueue(object : \n     Callback<List<Restaurant>> {…})\n    }\n    ```", "```kt\n    override fun onCleared() {\n        super.onCleared()\n        restaurantsCall.cancel()\n    }\n    ```", "```kt\n    @Composable\n    fun RestaurantsScreen() {\n        val viewModel: RestaurantsViewModel = viewModel()\n        LaunchedEffect(key1 = \"request_restaurants\") {\n            viewModel.getRestaurants()\n        }\n        LazyColumn(…) { … }\n    }\n    ```", "```kt\n    init {\n        val retrofit: Retrofit = Retrofit.Builder().[…].build()\n        restInterface = retrofit.create(\n            RestaurantsApiService::class.java\n        )\n        getRestaurants()\n    }\n    ```", "```kt\n    private fun getRestaurants() {\n        …\n    }\n    ```", "```kt\ninterface RestaurantsApiService {\n    @GET(\"restaurants.json\")\n    fun getRestaurants(): Call<List<Restaurant>>\n}\n```", "```kt\n@POST(\"user/edit\")\nfun updateUser(@Field(\"first_name\") firstName: String): \n    Call<User>\n```"]