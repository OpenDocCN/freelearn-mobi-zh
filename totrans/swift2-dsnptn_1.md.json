["```swift\nimport UIKit\n\nclass AbstractCard {\n  var name: String?\n  var mana: Int?\n  var attack: Int?\n  var defense: Int?\n\n  init(name:String?, mana:Int?, attack:Int?, defense:Int?) {\n    self.name = name\n    self.attack = attack\n    self.defense = defense\n    self.mana = mana\n  }\n\n  func clone() -> AbstractCard {\n    return AbstractCard(name: self.name, mana: self.mana, attack: self.attack, defense: self.defense)\n  }\n}\n\nclass Card: AbstractCard {\n\n  override init(name:String?, mana:Int?, attack:Int?, defense:Int? ) {\n    super.init(name: name,mana: mana,attack: attack,defense: defense)\n\n  }\n}\n```", "```swift\n// Simulate our client\n\n// This is the card that we will copy\nlet raidLeader = Card(name: \"Raid Leader\", mana: 3, attack: 2, defense: 2)\n\n// Now we use our faceless Manipulator card to clone the raidleader\nlet facelessManipulator = raidLeader.clone()\n\nprint(\"\\(facelessManipulator.name, facelessManipulator.mana, facelessManipulator.attack, facelessManipulator.defense)\")\n```", "```swift\nlet raidLeader = Card(name: \"Raid Leader\", mana: 3, attack: 2, defense: 2)\n```", "```swift\nimport UIKit\nimport Foundation\n\n//Define what a card is\nprotocol Card {\n  var name: String? {get set}\n  var attack: Int? {get set}\n  var defense: Int? {get set}\n  var mana: Int? {get set}\n  func clone() -> Card\n  func toString() -> String\n}\n\n// AbstractCard\n// implements the signature and some properties\nclass AbstractCard: NSObject, Card {\n  private var _name: String?\n  private var _mana: Int?\n  private var _attack: Int?\n  private var _defense: Int?\n\n  init(name: String?, mana: Int?, attack: Int?, defense: Int?) {\n    self._name = name\n    self._attack = attack\n    self._defense = defense\n    self._mana = mana\n    super.init()\n  }\n\n  override init(){\n    super.init()\n  }\n\n  //property name\n  var name: String?{\n    get{ return _name }\n    set{ _name = newValue }\n  }\n\n  //property mana\n  var mana: Int? {\n    get{ return _mana }\n    set{ _mana = newValue }\n  }\n\n  //property attack\n  var attack: Int? {\n    get{ return _attack }\n    set{ _attack = newValue }\n  }\n\n  //property attack\n  var defense: Int? {\n    get{ return _defense }\n    set{ _defense = newValue }\n  }\n\n  func clone() -> Card {\n    return AbstractCard(name: self.name, mana: self.mana, attack: self.attack, defense: self.defense)\n  }\n\n  func toString() -> String{\n    return (\"\\(self.name, self.mana, self.attack,self.defense)\")\n  }\n}\n\nenum CardType {\n  case FacelessManipulator, RaidLeader\n}\n\n// our Factory Class\n// Depending what we need, this class return an instance of the \n// appropriate object.\nclass CardFactory{\n  class func createCard(cardtype: CardType) -> Card?{\n\n    switch cardtype {\n    case .FacelessManipulator:\n      return FacelessManipulatorCard()\n    case .RaidLeader:\n      return RaidLeaderCard()\n    default:\n      return nil\n    }\n  }\n}\n\n//Concrete Card \"Raid Leader\"\n//This is the full definition of the Raid Leader Card\nclass RaidLeaderCard: AbstractCard {\n  override init()\n  {\n    super.init()\n    self._mana = 3\n    self._attack = 2\n    self._defense = 2\n    self._name = \"Raid Leader\"\n  }\n}\n\n//Concrete Card \"Faceless Manipulator\"\n//this is the full definition of the FacelessManipulator Card.\nclass FacelessManipulatorCard: AbstractCard {\n  override init()\n  {\n    super.init()\n    self._mana = 5\n    self._attack = 3\n    self._defense = 3\n    self._name = \"Faceless Manipulator\"\n\n  }\n}\n```", "```swift\n//simulate our client\n\nvar c = CardFactory.createCard(.FacelessManipulator)\nc?.toString()\n```", "```swift\nstatic let myVariable = myObject()\n```", "```swift\nimport UIKit\n\nclass BoardGameManager {\n\n  static let sharedInstance = BoardGameManager()\n  init() {\n    println(\"Singleton initialized\");\n  }\n\n}\n```", "```swift\nlet boardManager = BoardGameManager.sharedInstance\n```", "```swift\nimport UIKit\n\n//Our interfaces\nprotocol IWatchBand {\n  var color: UIColor{get set}\n  var size: BandSize{get set}\n  var type: BandType{get set}\n  init(size: BandSize)\n}\n\nprotocol IWatchDial {\n  var material: MaterialType{get set}\n  var size: WatchSize{get set}\n  init(size: WatchSize)\n}\n\n//Enums\nenum MaterialType: String {\n  case Aluminium = \"Aluminium\",\n  StainlessSteel = \"Stainless Steel\",\n  Gold = \"Gold\"\n}\n\nenum BandType: String {\n  case Milanese = \"Milanese\",\n  Classic = \"Classic\",\n  Leather = \"Leather\",\n  Modern = \"Modern\",\n  LinkBracelet = \"LinkBracelet\",\n  SportBand = \"SportBand\"\n}\n\nenum WatchSize: String {\n  case _38mm = \"38mm\", _42mm = \"42mm\"\n}\n\nenum BandSize: String {\n  case SM = \"SM\", ML = \"ML\"\n}\n\n//prepare our Bands components\nclass MilaneseBand: IWatchBand {\n  var color = UIColor.yellowColor()\n  var size: BandSize\n  var type = BandType.Milanese\n  required init(size _size: BandSize) {\n    size = _size\n  }\n }\n\nclass Classic: IWatchBand {\n  var color = UIColor.yellowColor()\n  var size: BandSize\n  var type = BandType.Classic\n  required init(size _size: BandSize) {\n    size = _size\n  }\n}\nclass Leather:IWatchBand{\n  var color = UIColor.yellowColor()\n  var size:BandSize\n  var type = BandType.Leather\n  required init(size _size: BandSize) {\n    size = _size\n  }\n}\nclass Modern: IWatchBand {\n  var color = UIColor.yellowColor()\n  var size: BandSize\n  var type = BandType.Modern\n  required init(size _size: BandSize) {\n    size = _size\n  }\n}\n\nclass LinkBracelet: IWatchBand {\n  var color = UIColor.yellowColor()\n  var size: BandSize\n  var type = BandType.LinkBracelet\n  required init(size _size: BandSize) {\n    size = _size\n  }\n}\nclass SportBand: IWatchBand {\n  var color = UIColor.yellowColor()\n  var size: BandSize\n  var type = BandType.SportBand\n  required init(size _size: BandSize) {\n    size = _size\n  }\n}\n\n//Dials\nclass AluminiumDial: IWatchDial {\n  var material: MaterialType = MaterialType.Aluminium\n  var size: WatchSize\n  required init(size _size:WatchSize){\n    size = _size\n  }\n}\n\nclass StainlessSteelDial: IWatchDial {\n  var material: MaterialType = MaterialType.StainlessSteel\n  var size: WatchSize\n  required init(size _size:WatchSize){\n    size = _size\n  }\n}\n\nclass GoldDial: IWatchDial {\n  var material: MaterialType = MaterialType.Gold\n  var size: WatchSize\n  required init(size _size:WatchSize){\n    size = _size\n  }\n}\n\n//Our AbstractFactory\nclass WatchFactory {\n\n  func createBand(bandType: BandType) -> IWatchBand {\n    fatalError(\"not implemented\")\n  }\n  func createDial(materialtype: MaterialType) -> IWatchDial{\n    fatalError(\"not implemented\")\n  }\n\n  //our static method that return the appropriated factory.\n  final class func getFactory(size: WatchSize) -> WatchFactory{\n    var factory: WatchFactory?\n    switch(size){\n    case ._38mm:\n      factory = Watch38mmFactory()\n    case ._42mm:\n      factory = Watch42mmFactory()\n    }\n    return factory!\n  }\n\n}\n\n// Concrete Factory 1 for 42 mm\nclass Watch42mmFactory: WatchFactory {\n  override func createBand(bandType: BandType) -> IWatchBand {\n    switch bandType {\n    case .Milanese:\n      return MilaneseBand(size: .ML)\n    case .Classic:\n      return Classic(size: .ML)\n    case .Leather:\n      return Leather(size: .ML)\n    case .LinkBracelet:\n      return LinkBracelet(size: .ML)\n    case .Modern:\n      return Modern(size: .ML)\n    case .SportBand:\n      return SportBand(size: .ML)\n    default:\n      return SportBand(size: .ML)\n    }\n  }\n\n  override func createDial(materialtype: MaterialType) -> IWatchDial {\n    switch materialtype{\n    case MaterialType.Gold:\n      return GoldDial(size: ._42mm)\n    case MaterialType.StainlessSteel:\n      return StainlessSteelDial(size: ._42mm)\n    case MaterialType.Aluminium:\n      return AluminiumDial(size: ._42mm)\n    }\n  }\n}\n\n//Concrete Factory 2 for 38mm\nclass Watch38mmFactory: WatchFactory{\n  override func createBand(bandType:BandType) -> IWatchBand {\n    switch bandType {\n    case .Milanese:\n      return MilaneseBand(size: .SM)\n    case .Classic:\n      return Classic(size: .SM)\n    case .Leather:\n      return Leather(size: .SM)\n    case .LinkBracelet:\n      return LinkBracelet(size: .SM)\n    case .Modern:\n      return Modern(size: .SM)\n    case .SportBand:\n      return SportBand(size: .SM)\n    default:\n      return SportBand(size: .SM)\n    }\n  }\n\n  override func createDial(materialtype: MaterialType) -> IWatchDial {\n    switch materialtype{\n    case MaterialType.Gold:\n      return GoldDial(size: ._38mm)\n    case MaterialType.Gold:\n      return StainlessSteelDial(size: ._38mm)\n    case MaterialType.Gold:\n      return AluminiumDial(size: ._38mm)\n    default:\n      return AluminiumDial(size: ._38mm)\n\n    }\n  }\n}\n```", "```swift\n//Here we deliver products from the Manufacture 1 specialized in\n//products for the 38 mm Watch\nlet manufacture1 = WatchFactory.getFactory(WatchSize._38mm)\nlet productA = manufacture1.createBand(BandType.Milanese)\nproductA.color\nproductA.size.rawValue\nproductA.type.rawValue\n\nlet productB = manufacture1.createDial(MaterialType.Gold)\nproductB.material.rawValue\nproductB.size.rawValue\n\n//Here we delivers products from the Manufacture 2 specialized in\n//products for the 42 mm Watch\nlet manufacture2 = WatchFactory.getFactory(WatchSize._42mm)\nlet productC = manufacture2.createBand(BandType.LinkBracelet)\nproductC.color\nproductC.size.rawValue\nproductC.type.rawValue\n\nlet productD = manufacture2.createDial(MaterialType.Gold)\nproductD.material.rawValue\nproductD.size.rawValue\n```", "```swift\n//Our builder1\nclass BuilderGoldMilanese38mmWatch: AbstractWatchBuilder {\n  override func buildDial() {\n    watch.band = MilaneseBand(size: BandSize.SM)\n  }\n  override func buildBand() {\n    watch.dial = GoldDial(size: WatchSize._38mm)\n  }\n}\n\n//Our builder2\nclass BuilderAluminiumSportand42mmWatch:AbstractWatchBuilder {\n  override func buildDial() {\n    watch.band = SportBand(size: BandSize.ML)\n  }\n  override func buildBand() {\n    watch.dial = AluminiumDial(size: WatchSize._42mm)\n  }\n}\n\n//our Director class\nclass Director {\n  var builder: AbstractWatchBuilder?\n  init(){\n\n  }\n\n  func buildWatch(builder: AbstractWatchBuilder){\n    builder.buildBand()\n    builder.buildDial()\n  }\n}\n```", "```swift\n//We will build 2 Watches :\n//First is the Aluminium Dial of 42mm with Sport Band\nlet director = Director()\nvar b1 = BuilderAluminiumSportand42mmWatch()\ndirector.buildWatch(b1)\n\n// our watch 1\nvar w1 = b1.getResult()\nw1.band?.color\nw1.band?.type.rawValue\nw1.band?.size.rawValue\nw1.dial?.size.rawValue\nw1.dial?.material.rawValue\n\n//Our 2nd watch is a Gold 38mm Dial with Milanese Band\nvar b2 = BuilderGoldMilanese38mmWatch ()\ndirector.buildWatch(b2)\n\n// Our watch 1\nvar w2 = b2.getResult()\nw2.band?.color\nw2.band?.type.rawValue\nw2.band?.size.rawValue\nw2.dial?.size.rawValue\nw2.dial?.material.rawValue\n```", "```swift\n//our Product Class : a Watch\n//The builder will be in the closure\nclass Watch{\n  var dial:IWatchDial?\n  var band:IWatchBand?\n  typealias buildWatchClosure = (Watch) -> Void\n\n  init(build:buildWatchClosure){\n    build(self)\n  }\n}\n```", "```swift\n//Simulate our clients\n\nlet Gold42mmMilaneseWatch = Watch(build: {\n  $0.band = MilaneseBand(size: BandSize.ML)\n  $0.dial = GoldDial(size: WatchSize._42mm)\n})\n```"]