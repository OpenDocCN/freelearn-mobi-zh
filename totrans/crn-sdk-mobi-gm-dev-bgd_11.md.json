["```java\nstore = require(\"store\")\n\n```", "```java\nstore.init( listener )\n\n```", "```java\nfunction transactionCallback( event )\nlocal transaction = event.transaction\nif transaction.state == \"purchased\" then \nprint(\"Transaction successful!\")\nprint(\"productIdentifier\", transaction.productIdentifier)\nprint(\"receipt\", transaction.receipt)\nprint(\"transactionIdentifier\", transaction.identifier)\nprint(\"date\", transaction.date)\nelseif transaction.state == \"restored\" then\nprint(\"Transaction restored (from previous session)\")\nprint(\"productIdentifier\", transaction.productIdentifier)\nprint(\"receipt\", transaction.receipt)\nprint(\"transactionIdentifier\", transaction.identifier)\nprint(\"date\", transaction.date)\nprint(\"originalReceipt\", transaction.originalReceipt)\nprint(\"originalTransactionIdentifier\", transaction.originalIdentifier)\nprint(\"originalDate\", transaction.originalDate)\nelseif transaction.state == \"cancelled\" then\nprint(\"User cancelled transaction\")\nelseif transaction.state == \"failed\" then\nprint(\"Transaction failed, type:\", transaction.errorType, transaction.errorString)\nelse\nstore module, Corona APIstore module, Corona APIstore.init()print(\"unknown event\")\nend\n-- Once we are done with a transaction, call this to tell the store\n-- we are done with the transaction.\n-- If you are providing downloadable content, wait to call this until\n-- after the download completes.\nstore.finishTransaction( transaction )\nend\nstore.init( transactionCallback )\n\n```", "```java\nstore.loadProducts( arrayOfProductIdentifiers, listener )\n\n```", "```java\n-- Contains your Product ID's set in iTunes Connect\nlocal listOfProducts =\n{\n\"com.mycompany.InAppPurchaseExample.Consumable\",\n\"com.mycompany.InAppPurchaseExample.NonConsumable\",\n\"com.mycompany.InAppPurchaseExample.Subscription\",\n}\nfunction loadProductsCallback ( event )\nprint(\"showing valid products\", #event.products)\nfor i=1, #event.products do\nprint(event.products[i].title)\nprint(event.products[i].description)\nprint(event.products[i].price)\nprint(event.products[i].productIdentifier)\nend\nprint(\"showing invalidProducts\", #event.invalidProducts)\nfor i=1, #event.invalidProducts do\nprint(event.invalidProducts[i])\nend\nend\nstore.loadProducts( listOfProducts, loadProductsCallback )\n\n```", "```java\nevent.products\n\n```", "```java\nevent.invalidProducts\n\n```", "```java\nif store.canMakePurchases then\nstore.purchase( listOfProducts )\nelse\nprint(\"Store purchases are not available\")\nend\n\n```", "```java\nstore.purchase( arrayOfProducts )\n\n```", "```java\nstore.purchase{ \"com.mycompany.InAppPurchaseExample.Consumable\"\n}\n\n```", "```java\nstore.finishTransaction( transaction )\n\n```", "```java\nstore.finishTransaction( transaction )\n\n```", "```java\nstore.restore()\n\n```", "```java\nfunction transactionCallback( event )\nlocal transaction = event.transaction\nif transaction.state == \"purchased\" then\nprint(\"Transaction successful!\")\nprint(\"productIdentifier\", transaction.productIdentifier)\nprint(\"receipt\", transaction.receipt)\nprint(\"transactionIdentifier\", transaction.identifier)\nprint(\"date\", transaction.date)\nelseif transaction.state == \"restored\" then\nprint(\"Transaction restored (from previous session)\")\nprint(\"productIdentifier\", transaction.productIdentifier)\nprint(\"receipt\", transaction.receipt)\nprint(\"transactionIdentifier\", transaction.identifier)\nstore.restore()store.restore()exampleprint(\"date\", transaction.date)\nprint(\"originalReceipt\", transaction.originalReceipt)\nprint(\"originalTransactionIdentifier\", transaction.originalIdentifier)\nprint(\"originalDate\", transaction.originalDate)\nelseif transaction.state == \"cancelled\" then\nprint(\"User cancelled transaction\")\nelseif transaction.state == \"failed\" then\nprint(\"Transaction failed, type:\", transaction.errorType, transaction.errorString)\nelse\nprint(\"unknown event\")\nend\n-- Once we are done with a transaction, call this to tell the store\n-- we are done with the transaction.\n-- If you are providing downloadable content, wait to call this until\n-- after the download completes.\nstore.finishTransaction( transaction )\nend\nstore.init( transactionCallback )\nstore.restore()\n\n```", "```java\n    local storyboard = require( \"storyboard\" )\n    local scene = storyboard.newScene()\n    local ui = require(\"ui\")\n    local movieclip = require( \"movieclip\" )\n    local store = require(\"store\")\n    ---------------------------------------------------------------------------------\n    -- BEGINNING OF YOUR IMPLEMENTATION\n    ---------------------------------------------------------------------------------\n    local menuTimer\n    -- AUDIO\n    local tapSound = audio.loadSound( \"tapsound.wav\" )\n    --***************************************************\n    -- saveValue() --> used for saving high score, etc.\n    --***************************************************\n    local saveValue = function( strFilename, strValue )\n    -- will save specified value to specified file\n    local theFile = strFilename\n    local theValue = strValue\n    local path = system.pathForFile( theFile, system.DocumentsDirectory )\n    -- io.open opens a file at path. returns nil if no file found\n    local file = io.open( path, \"w+\" )\n    if file then\n    -- write game score to the text file\n    file:write( theValue )\n    io.close( file )\n    end\n    end\n    --***************************************************\n    -- loadValue() --> load saved value from file (returns loaded value as string)\n    --***************************************************\n    local loadValue = function( strFilename )\n    -- will load specified file, or create new file if it doesn't exist\n    local theFile = strFilename\n    local path = system.pathForFile( theFile, system.DocumentsDirectory )\n    -- io.open opens a file at path. returns nil if no file found\n    local file = io.open( path, \"r\" )\n    if file then\n    -- read all contents of file into a string\n    local contents = file:read( \"*a\" )\n    io.close( file )\n    return contents\n    else\n    -- create file b/c it doesn't exist yet\n    file = io.open( path, \"w\" )\n    file:write( \"0\" )\n    io.close( file )\n    return \"0\"\n    end\n    end\n    -- DATA SAVING\n    local level2Unlocked = 1\n    local level2Filename = \"level2.data\"\n    local loadedLevel2Unlocked = loadValue( level2Filename )\n\n    ```", "```java\n    -- Called when the scene's view does not exist:\n    function scene:createScene( event )\n    local screenGroup = self.view\n    -- completely remove maingame and options\n    storyboard.removeScene( \"mainmenu\" )\n    storyboard.removeScene( \"level1\" )\n    storyboard.removeScene( \"level2\" )\n    print( \"\\nlevelselect: createScene event\" )\n    end\n\n    ```", "```java\n    function scene:enterScene( event )\n    local screenGroup = self.view\n    print( \"levelselect: enterScene event\" )\n    local listOfProducts =\n    {\n    -- These Product IDs must already be set up in your store\n    -- Replace Product ID with a valid one from iTunes Connect\n    \"com.companyname.appname.NonConsumable\", -- Non Consumable In-App Purchase\n    }\n\n    ```", "```java\n    local validProducts = {}\n    local invalidProducts = {}\n    local unpackValidProducts = function()\n    print (\"Loading product list\")\n    if not validProducts then\n    native.showAlert( \"In-App features not available\", \"initStore() failed\", { \"OK\" } )\n    else\n    print( \"Found \" .. #validProducts .. \" valid items \")\n    for i=1, #invalidProducts do\n    -- Debug: display the product info\n    native.showAlert( \"Item \" .. invalidProducts[i] .. \" is invalid.\",{ \"OK\" } )\n    print(\"Item \" .. invalidProducts[i] .. \" is invalid.\")\n    end\n    end\n    end\n\n    ```", "```java\n    local loadProductsCallback = function( event )\n    -- Debug info for testing\n    print(\"loadProductsCallback()\")\n    print(\"event, event.name\", event, event.name)\n    print(event.products)\n    print(\"#event.products\", #event.products)\n    validProducts = event.products\n    invalidProducts = event.invalidProducts\n    unpackValidProducts ()\n    end\n\n    ```", "```java\n    local transactionCallback = function( event )\n    if event.transaction.state == \"purchased\" then\n    print(\"Transaction successful!\")\n    saveValue( level2Filename, tostring(level2Unlocked) )\n    elseif event.transcation.state == \"restored\" then\n    print(\"productIdentifier\", event.transaction.productIdentifier)\n    print(\"receipt\", event.transaction.receipt)\n    print(\"transactionIdentifier\", event.transaction.transactionIdentifier)\n    print(\"date\", event.transaction.date)\n    print(\"originalReceipt\", event.transaction.originalReceipt)\n    elseif event.transaction.state == \"cancelled\" then\n    print(\"Transaction cancelled by user.\")\n    elseif event.transaction.state == \"failed\" then\n    print(\"Transaction failed, type: \", event.transaction.errorType, event.transaction.errorString)\n    local alert = native.showAlert(\"Failed \", infoString,{ \"OK\" })\n    else\n    print(\"Unknown event\")\n    local alert = native.showAlert(\"Unknown \", infoString,{ \"OK\" })\n    end\n    -- Tell the store we are done with the transaction.\n    store.finishTransaction( event.transaction )\n    end\n    local setupMyStore = function(event)\n    store.loadProducts( listOfProducts, loadProductsCallback )\n    print (\"After store.loadProducts(), waiting for callback\")\n    end\n\n    ```", "```java\n    local backgroundImage = display.newImageRect( \"levelSelectScreen.png\", 480, 320 )\n    backgroundImage.x = 240; backgroundImage.y = 160\n    screenGroup:insert( backgroundImage )\n    local level1Btn = movieclip.newAnim({\"level1btn.png\"}, 200, 60)\n    level1Btn.x = 240; level1Btn.y = 100\n    screenGroup:insert( level1Btn )\n    local function level1touch( event )\n    if event.phase == \"ended\" then\n    audio.play( tapSound )\n    storyboard.gotoScene( \"loadlevel1\", \"fade\", 300 )\n    end\n    end\n    level1Btn:addEventListener( \"touch\", level1touch )\n    level1Btn:stopAtFrame(1)\n\n    ```", "```java\n    -- LEVEL 2\n    local level2Btn = movieclip.newAnim({\"levelLocked.png\",\"level2btn.png\"}, 200, 60)\n    level2Btn.x = 240; level2Btn.y = 180\n    screenGroup:insert( level2Btn )\n\n    ```", "```java\n    local onBuyLevel2Touch = function( event )\n    if event.phase == \"ended\" and level2Unlocked ~= tonumber(loadedLevel2Unlocked) then\n    audio.play( tapSound )\n    storyboard.gotoScene( \"mainmenu\", \"fade\", 300 )\n\n    ```", "```java\n    local buyLevel2 = function ( product )\n    print (\"Congrats! Purchasing \" ..product)\n    -- Purchase the item\n    if store.canMakePurchases then\n    store.purchase( {validProducts[1]} )\n    else\n    native.showAlert(\"Store purchases are not available, please try again later\", { \"OK\" } ) Will occur only due to phone setting/account restrictions\n    end\n    end\n    -- Enter your product ID here\n    -- Replace Product ID with a valid one from iTunes Connect\n    buyLevel2(\"com.companyname.appname.NonConsumable\")\n\n    ```", "```java\n    elseif event.phase == \"ended\" and level2Unlocked == tonumber(loadedLevel2Unlocked) then\n    audio.play( tapSound )\n    storyboard.gotoScene( \"loadlevel2\", \"fade\", 300 )\n    end\n    end\n    level2Btn:addEventListener( \"touch\", onBuyLevel2Touch )\n    if level2Unlocked == tonumber(loadedLevel2Unlocked) then\n    level2Btn:stopAtFrame(2)\n    end\n\n    ```", "```java\n    store.init(transactionCallback)\n    timer.performWithDelay (500, setupMyStore)\n\n    ```", "```java\n    local closeBtn\n    local onCloseTouch = function( event )\n    if event.phase == \"release\" then\n    audio.play( tapSound )\n    storyboard.gotoScene( \"loadmainmenu\", \"fade\", 300 )\n    end\n    end\n    closeBtn = ui.newButton{\n    defaultSrc = \"closebtn.png\",\n    defaultX = 100,\n    defaultY = 30,\n    overSrc = \"closebtn.png\",\n    overX = 105,\n    overY = 35,\n    onEvent = onCloseTouch,\n    id = \"CloseButton\",\n    text = \"\",\n    font = \"Helvetica\",\n    textColor = { 255, 255, 255, 255 },\n    size = 16,\n    emboss = false\n    }\n    closeBtn.x = 80; closeBtn.y = 280\n    closeBtn.isVisible = false\n    screenGroup:insert( closeBtn )\n    menuTimer = timer.performWithDelay( 200, function() closeBtn.isVisible = true; end, 1 )\n    end\n\n    ```", "```java\n    -- Called when scene is about to move offscreen:\n    function scene:exitScene()\n    if menuTimer then timer.cancel( menuTimer ); end\n    print( \"levelselect: exitScene event\" )\n    end\n    -- Called prior to the removal of scene's \"view\" (display group)\n    function scene:destroyScene( event )\n    print( \"((destroying levelselect's view))\" )\n    end\n    -- \"createScene\" event is dispatched if scene's view does not exist\n    scene:addEventListener( \"createScene\", scene )\n    -- \"enterScene\" event is dispatched whenever scene transition has finished\n    scene:addEventListener( \"enterScene\", scene )\n    -- \"exitScene\" event is dispatched before next scene's transition begins\n    scene:addEventListener( \"exitScene\", scene )\n    -- \"destroyScene\" event is dispatched before view is unloaded, which can be\n    scene:addEventListener( \"destroyScene\", scene )\n    return scene\n\n    ```"]