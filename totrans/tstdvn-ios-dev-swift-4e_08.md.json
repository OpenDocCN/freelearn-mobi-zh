["```swift\n    // ToDoItemStoreTests.swift\n    func test_add_shouldPublishChange() {\n      let sut = ToDoItemStore()\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    class ToDoItemStore {\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_add_shouldPublishChange() {\n      let sut = ToDoItemStore()\n      let publisherExpectation = expectation(\n        description: \"Wait for publisher in \\(#file)\"\n      )\n      var receivedItems: [ToDoItem] = []\n      let token = sut.itemPublisher\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    import Foundation\n    import Combine\n\n    class ToDoItemStore {\n      var itemPublisher =\n        CurrentValueSubject<[ToDoItem], Never>([])\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    import Combine\n    // ...\n    func test_add_shouldPublishChange() {\n      let sut = ToDoItemStore()\n      let publisherExpectation = expectation(\n        description: \"Wait for publisher in \\(#file)\"\n      )\n      var receivedItems: [ToDoItem] = []\n      let token = sut.itemPublisher\n        .dropFirst()\n        .sink { items in\n          receivedItems = items\n          publisherExpectation.fulfill()\n        }\n      let toDoItem = ToDoItem(title: \"Dummy\")\n      sut.add(toDoItem)\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    func add(_ item: ToDoItem) {\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_add_shouldPublishChange() {\n      // ... arrange ...\n      let toDoItem = ToDoItem(title: \"Dummy\")\n      sut.add(toDoItem)\n      wait(for: [publisherExpectation], timeout: 1)\n      token.cancel()\n      XCTAssertEqual(receivedItems.first?.title,\n        toDoItem.title)\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    class ToDoItemStore {\n      var itemPublisher =\n        CurrentValueSubject<[ToDoItem], Never>([])\n      private var items: [ToDoItem] = [] {\n        didSet {\n          itemPublisher.send(items)\n        }\n      }\n\n      func add(_ item: ToDoItem) {\n        items.append(item)\n      }\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem: Equatable {\n      // ...\n    }\n    ```", "```swift\n    // Location.swift\n    struct Location: Equatable {\n      // …\n    }\n    ```", "```swift\n    // Location.swift\n    static func == (lhs: Location, rhs: Location) -> Bool {\n      if lhs.name != rhs.name {\n        return false\n      }\n      if lhs.coordinate == nil, rhs.coordinate != nil {\n        return false\n      }\n      if lhs.coordinate != nil, rhs.coordinate == nil {\n        return false\n      }\n      if let lhsCoordinate = lhs.coordinate,\n          let rhsCoordinate = rhs.coordinate {\n        if abs(lhsCoordinate.longitude -\n          rhsCoordinate.longitude) > 0.000_000_1 {\n          return false\n        }\n        if abs(lhsCoordinate.latitude -\n          rhsCoordinate.latitude) > 0.000_000_1 {\n          return false\n        }\n      }\n      return true\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    XCTAssertEqual(receivedItems, [toDoItem])\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    extension XCTestCase {\n      func wait<T: Publisher>(\n        for publisher: T,\n        afterChange change: () -> Void) throws\n      -> T.Output where T.Failure == Never { \n        let publisherExpectation = expectation(\n          description: \"Wait for publisher in \\(#file)\"\n        )\n        var result: T.Output?\n        let token = publisher\n          .dropFirst()\n          .sink { value in\n            result = value\n            publisherExpectation.fulfill()\n          }\n\n        change()\n        wait(for: [publisherExpectation], timeout: 1)\n        token.cancel() \n        let unwrappedResult = try XCTUnwrap(\n          result,\n          \"Publisher did not publish any value\"\n        ) \n        return unwrappedResult\n      }\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_add_shouldPublishChange() throws {\n      let sut = ToDoItemStore()\n      let toDoItem = ToDoItem(title: \"Dummy\")\n      let receivedItems = try wait(for: sut.itemPublisher)\n     {\n        sut.add(toDoItem)\n      }\n      XCTAssertEqual(receivedItems, [toDoItem])\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    extension XCTestCase {\n      func wait<T: Publisher>(\n        for publisher: T,\n        afterChange change: () -> Void,\n        file: StaticString = #file,\n        line: Uint = #line) throws\n      -> T.Output where T.Failure == Never {\n\n        // …\n        let unwrappedResult = try XCTUnwrap(\n          result,\n          \"Publisher did not publish any value\",\n          file: file,\n          line: line\n        ) \n        return unwrappedResult\n      }\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_check_shouldPublishChangeInDoneItems()\n     throws {\n      let sut = ToDoItemStore()\n      let toDoItem = ToDoItem(title: \"Dummy\")\n      sut.add(toDoItem)\n      sut.add(ToDoItem(title: \"Dummy 2\"))\n      let receivedItems = try wait(for: sut.itemPublisher) {\n        sut.check(toDoItem)\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    func check(_ item: ToDoItem) {  \n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    func check(_ item: ToDoItem) {\n      items.append(ToDoItem(title: \"\"))\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_check_shouldPublishChangeInDoneItems()\n     throws {\n      let sut = ToDoItemStore()\n      let toDoItem = ToDoItem(title: \"Dummy\")\n      sut.add(toDoItem)\n      sut.add(ToDoItem(title: \"Dummy 2\"))\n      let receivedItems = try wait(for: sut.itemPublisher)\n     {\n        sut.check(toDoItem)\n     }\n      let doneItems = receivedItems.filter({ $0.done })\n      XCTAssertEqual(doneItems, [toDoItem])\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem: Equatable {\n      let title: String\n      let itemDescription: String?\n      let timestamp: TimeInterval?\n      let location: Location?\n      var done = false\n\n      init(title: String,\n           itemDescription: String? = nil,\n           timestamp: TimeInterval? = nil,\n           location: Location? = nil) {\n\n        self.title = title\n        self.itemDescription = itemDescription\n        self.timestamp = timestamp\n        self.location = location\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    func check(_ item: ToDoItem) {\n      var mutableItem = item\n      mutableItem.done = true\n      if let index = items.firstIndex(of: item) {\n        items[index] = mutableItem\n      }\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem: Equatable {\n      let id: UUID\n      let title: String\n      let itemDescription: String?\n      let timestamp: TimeInterval?\n      let location: Location?\n      var done = false\n      init(title: String,\n           itemDescription: String? = nil,\n           timestamp: TimeInterval? = nil,\n           location: Location? = nil) {\n        self.id = UUID()\n        self.title = title\n        self.itemDescription = itemDescription\n        self.timestamp = timestamp\n        self.location = location\n      }\n      static func == (lhs: ToDoItem, rhs: ToDoItem) ->\n     Bool {\n        return lhs.id == rhs.id\n      }\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    var sut: ToDoItemStore!\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    override func setUpWithError() throws {\n      sut = ToDoItemStore()\n    }\n    override func tearDownWithError() throws {\n      sut = nil\n    }\n    ```", "```swift\n    let sut = ToDoItemStore()\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_init_shouldLoadPreviousToDoItems() {\n      var sut1: ToDoItemStore? = \n        ToDoItemStore(fileName: \"dummy_store\")\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    init(fileName: String = \"todoitems\") {\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_init_shouldLoadPreviousToDoItems() {\n      var sut1: ToDoItemStore? =\n        ToDoItemStore(fileName: \"dummy_store\")\n      let publisherExpectation = expectation(\n        description: \"Wait for publisher in \\(#file)\"\n      )\n\n      let toDoItem = ToDoItem(title: \"Dummy Title\")\n      sut1?.add(toDoItem)\n      sut1 = nil\n      let sut2 = ToDoItemStore(fileName: \"dummy_store\")\n      var result: [ToDoItem]?\n      let token = sut2.itemPublisher\n        .sink { value in\n          result = value\n          publisherExpectation.fulfill()\n        }\n\n      wait(for: [publisherExpectation], timeout: 1)\n      token.cancel()\n      XCTAssertEqual(result, [toDoItem])\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    private let fileName: String\n    init(fileName: String = \"todoitems\") {\n      self.fileName = fileName\n    }\n    ```", "```swift\n    // ToDoItem.swift\n    struct ToDoItem: Equatable, Codable {\n    ```", "```swift\n    // Location.swift\n    struct Location: Equatable, Codable {\n    ```", "```swift\n    // Coordinate.swift\n    struct Coordinate: Codable {\n      let latitude: Double\n      let longitude: Double\n    }\n    ```", "```swift\n    // Location.swift\n    struct Location: Equatable, Codable {\n      let name: String\n      let coordinate: Coordinate?\n\n      init(name: String,\n           coordinate: Coordinate? = nil) {\n\n        self.name = name\n        self.coordinate = coordinate\n      }\n      // …\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    func test_init_shouldLoadPreviousToDoItems() throws {\n        try XCTSkipIf(true, \"Just test Coordinate change\")\n        // …\n    }\n    ```", "```swift\n    // LocationTests.swift\n    func test_init_setsCoordinate() throws {\n      let coordinate = Coordinate(latitude: 1,\n        longitude: 2)\n      let location = Location(name: \"\",\n        coordinate: coordinate)\n      let resultCoordinate = try\n     XCTUnwrap(location.coordinate)\n      XCTAssertEqual(resultCoordinate.latitude, 1,\n        accuracy: 0.000_001)\n      XCTAssertEqual(resultCoordinate.longitude, 2,\n        accuracy: 0.000_001)\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    private func saveItems() {\n      if let url = FileManager.default\n          .urls(for: .documentDirectory,\n                   in: .userDomainMask)\n          .first?\n          .appendingPathComponent(fileName) {\n        do {\n          let data = try JSONEncoder().encode(items)\n          try data.write(to: url)\n        } catch {\n          print(\"error: \\(error)\")\n        }\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    func add(_ item: ToDoItem) {\n      items.append(item)\n      saveItems()\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    private func loadItems() {\n      if let url = FileManager.default\n          .urls(for: .documentDirectory,\n                   in: .userDomainMask)\n          .first?\n          .appendingPathComponent(fileName) {\n        do {\n          let data = try Data(contentsOf: url)\n          items = try JSONDecoder()\n            .decode([ToDoItem].self, from: data)\n        } catch {\n          print(\"error: \\(error)\")\n        }\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    init(fileName: String = \"todoitems\") {\n      self.fileName = fileName\n      loadItems()\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    override func setUpWithError() throws {\n      sut = ToDoItemStore(fileName: \"dummy_store\")\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    override func tearDownWithError() throws {\n      sut = nil\n      if let url = FileManager.default\n          .urls(for: .documentDirectory,\n                   in: .userDomainMask)\n          .first?\n          .appendingPathComponent(\"dummy_store\") {\n        try? FileManager.default.removeItem(at: url)\n      }\n    }\n    ```", "```swift\n    // FileManagerExtension.swift\n    extension FileManager {\n      func documentsURL(name: String) -> URL {\n        guard let documentsURL = urls(for:\n          .documentDirectory,\n        in: .userDomainMask).first else {\n          fatalError()\n        }\n        return documentsURL.appendingPathComponent(name)\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    private func saveItems() {\n      let url = FileManager.default\n        .documentsURL(name: fileName)\n      do {\n        let data = try JSONEncoder().encode(items)\n        try data.write(to: url)\n      } catch {\n        print(\"error: \\(error)\")\n      }\n    }\n    ```", "```swift\n    // ToDoItemStore.swift\n    private func loadItems() {\n      let url = FileManager.default\n        .documentsURL(name: fileName)\n      do {\n        let data = try Data(contentsOf: url)\n        items = try JSONDecoder()\n          .decode([ToDoItem].self, from: data)\n      } catch {\n        print(\"error: \\(error)\")\n      }\n    }\n    ```", "```swift\n    // ToDoItemStoreTests.swift\n    override func tearDownWithError() throws {\n      sut = nil  \n      let url = FileManager.default\n        .documentsURL(name: \"dummy_store\")\n      try? FileManager.default.removeItem(at: url)\n    }\n    ```", "```swift\n    func test_init_whenItemIsChecked_\n     shouldLoadPreviousToDoItems() throws {\n      var sut1: ToDoItemStore? =\n      ToDoItemStore(fileName: \"dummy_store\")\n      let publisherExpectation = expectation(\n        description: \"Wait for publisher in \\(#file)\"\n      )\n\n      let toDoItem = ToDoItem(title: \"Dummy Title\")\n      sut1?.add(toDoItem)\n      sut1?.check(toDoItem)\n      sut1 = nil\n      let sut2 = ToDoItemStore(fileName: \"dummy_store\")\n      var result: [ToDoItem]?\n      let token = sut2.itemPublisher\n        .sink { value in\n          result = value\n          publisherExpectation.fulfill()\n        }\n\n      wait(for: [publisherExpectation], timeout: 1)\n      token.cancel()\n      XCTAssertEqual(result?.first?.done, true)\n    }\n    ```", "```swift\n    func check(_ item: ToDoItem) {\n      var mutableItem = item\n      mutableItem.done = true\n      if let index = items.firstIndex(of: item) {\n        items[index] = mutableItem\n        saveItems()\n      }\n    }\n    ```"]