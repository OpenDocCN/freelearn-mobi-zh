- en: Chapter 1. Designing Games with Swift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：使用Swift设计游戏
- en: Apple's new language has arrived at the perfect time for game developers. **Swift**
    has the unique chance to be something special; a revolutionary tool for app creators.
    Swift is the gateway for developers to create the next big game on the Apple ecosystem.
    We have only started to explore the wonderful potential of mobile gaming and Swift
    is the modernization we need for our toolset. Swift is fast, safe, current, and
    attractive to developers coming from other languages. Whether you are new to the
    Apple world, or a seasoned veteran of **Objective-C**, I think you will enjoy
    making games with Swift.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果的新语言对于游戏开发者来说来得正是时候。**Swift**有独特的机遇成为特别的东西；一个革命性的工具，用于应用开发者。Swift是开发者进入苹果生态系统中创建下一个大型游戏的门户。我们刚刚开始探索移动游戏的奇妙潜力，Swift是我们工具集现代化的需要。Swift快速、安全、现代，对来自其他语言的开发者有吸引力。无论您是苹果世界的初学者，还是**Objective-C**的老手，我相信您会喜欢用Swift制作游戏。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apple's website states, "Swift is a successor to the C and Objective-C languages."
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果的网站表示：“Swift是C和Objective-C语言的继承者。”
- en: My goal in this book is to guide you step-by-step through the creation of a
    2D game for iPhones and iPads. We will start with installing the necessary software,
    work through each layer of game development, and ultimately publish our new game
    to the App Store.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这本书中的目标是逐步引导您创建iPhone和iPad的2D游戏。我们将从安装必要的软件开始，逐步完成游戏开发的每一层，最终将我们的新游戏发布到App
    Store。
- en: We will also have some fun along the way! We aim to create an endless flyer
    game featuring a magnificent flying penguin named **Pierre**. What is an endless
    flyer? Picture hit games like iCopter, Flappy Bird, Whale Trail, Jetpack Joyride,
    and many more – the list is quite long.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在旅途中也会有一些乐趣！我们的目标是创建一款以一只壮丽的飞企鹅**皮埃尔**为主角的无限飞行游戏。什么是无限飞行游戏？想象一下像iCopter、Flappy
    Bird、鲸鱼之旅、喷射背包冒险等游戏——这个列表相当长。
- en: Endless flyer games are popular on the App Store and the genre necessitates
    that we cover many reusable components of 2D game design; I will show you how
    to modify our mechanics to create many different game styles. My hope is that
    our demo project will serve as a template for your own creative works. Before
    you know it, you will be publishing your own game ideas using the techniques we
    explore together.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 无限飞行游戏在App Store上很受欢迎，这个类型需要我们涵盖2D游戏设计的许多可重用组件；我将向您展示如何修改我们的机制以创建多种不同的游戏风格。我的希望是，我们的演示项目将成为您自己创意作品的模板。不久，您将能够使用我们共同探索的技术发布您自己的游戏想法。
- en: 'The topics in this chapter include:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含以下主题：
- en: Why you will love Swift
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你会喜欢Swift
- en: What you will learn in this book
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将在本书中学到什么
- en: Setting up your development environment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Creating your first Swift game
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个Swift游戏
- en: Why you will love Swift
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你会喜欢Swift
- en: Swift, as a modern programming language, benefits from the collective experience
    of the programming community; it combines the best parts of other languages and
    avoids poor design decisions. Here are a few of my favorite Swift features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种现代编程语言，Swift受益于编程社区的集体经验；它结合了其他语言的最佳部分，避免了不良的设计决策。以下是我最喜欢的几个Swift特性。
- en: Beautiful syntax
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 美观的语法
- en: Swift's syntax is modern and approachable, regardless of your existing programming
    experience. Apple balanced syntax with structure to make Swift concise and readable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Swift的语法现代且易于接近，无论您现有的编程经验如何。苹果在语法和结构之间取得了平衡，使Swift简洁易读。
- en: Interoperability
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互操作性
- en: Swift can plug directly into your existing projects and run side-by-side with
    your Objective-C code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Swift可以直接集成到您现有的项目中，并与您的Objective-C代码并行运行。
- en: Strong typing
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强类型
- en: Swift is a strongly typed language. This means the compiler will catch more
    bugs at compile time – instead of when your users are playing your game! The compiler
    will expect your variables to be of a certain type (`int`, `string`, and so on)
    and will throw a compile-time error if you try to assign a value of a different
    type. While this may seem rigid if you are coming from a weakly typed language,
    the added structure results in safer, more reliable code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Swift是一种强类型语言。这意味着编译器将在编译时捕获更多错误——而不是当您的用户在玩游戏时！编译器会期望您的变量属于某种类型（`int`、`string`等），如果您尝试分配不同类型的值，则会抛出编译时错误。虽然如果您来自弱类型语言，这可能看起来很严格，但增加的结构会导致更安全、更可靠的代码。
- en: Smart type inference
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 智能类型推断
- en: To make things easier, **type inference** will automatically detect the types
    of your variables and constants based upon their initial value. You do not need
    to explicitly declare a type for your variables. Swift is smart enough to infer
    variable types in most expressions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更简单，**类型推断**将自动检测变量和常量的类型，基于它们的初始值。您不需要显式声明变量的类型。Swift足够智能，可以在大多数表达式中推断变量类型。
- en: Automatic memory management
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动内存管理
- en: As the Apple Swift developer guide states, "memory management just works in
    Swift." Swift uses a method called **Automatic Reference Counting** (you will
    see it referred to as **ARC**) to manage your game's memory usage. Besides a few
    edge cases, you can rely on Swift to safely clean up and turn off the lights.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如苹果Swift开发者指南所述，“在Swift中，内存管理就是如此简单。”Swift使用一种称为**自动引用计数**（您将看到它被称为**ARC**）的方法来管理游戏内存的使用。除了少数边缘情况外，您可以依赖Swift安全地清理并关闭灯光。
- en: An even playing field
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个公平的竞争环境
- en: One of my favorite things about Swift is how quickly the language is gaining
    mainstream adoption. We are all learning and growing together and there is a tremendous
    opportunity to break new ground.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的Swift特性之一是它如何迅速地被主流接受。我们都在共同学习和成长，有巨大的机会开辟新的领域。
- en: Are there any downsides to Swift?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift有什么缺点吗？
- en: Swift is a very enjoyable language, but we should consider these two issues
    when starting a new project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Swift是一种非常有趣的语言，但在开始新项目时，我们应该考虑这两个问题。
- en: Less resources
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源较少
- en: Given Swift's age, it is certainly more difficult to find answers to common
    questions through Internet searches. Objective-C has many years' worth of discussion
    and answers on helpful forums like Stack Overflow. This issue improves every day
    as the Swift community continues to develop.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Swift的历史较短，通过互联网搜索找到常见问题的答案确实更加困难。Objective-C在Stack Overflow等有用的论坛上有多年讨论和答案。随着Swift社区的持续发展，这个问题每天都在改善。
- en: Operating system compatibility
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统兼容性
- en: Swift projects will run on iOS7 and higher, and OSX 10.9 and higher. Swift is
    the wrong choice if, in a rare case, you need to target a device running an older
    operating system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Swift项目将在iOS7及以上版本和OSX 10.9及以上版本上运行。如果罕见地需要针对运行较旧操作系统的设备，Swift不是正确的选择。
- en: Prerequisites
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前置条件
- en: 'I will strive to make this text easy to comprehend for all skill levels:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我将努力使这篇文本对所有技能水平的人都容易理解：
- en: I will assume you are brand new to Swift as a language
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我假设您作为语言对Swift是全新的
- en: This book requires no prior game development experience, though it will help
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书不需要先前的游戏开发经验，尽管它会有所帮助
- en: I will assume you have a fundamental understanding of common programming concepts
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我假设您对常见的编程概念有基本的理解
- en: What you will learn in this book
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您将在本书中学到什么
- en: By the end of this book, you will be capable of creating and publishing your
    own iOS games. You will know how to combine the techniques we learn to create
    your own style of game and you will be well prepared to dive into more advanced
    topics with a solid foundation in 2D game design.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的结尾，您将能够创建和发布自己的iOS游戏。您将知道如何结合我们学到的技术来创建自己的游戏风格，并且您将准备好在2D游戏设计的基础上深入更高级的主题。
- en: Embracing SpriteKit
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱SpriteKit
- en: '**SpriteKit** is Apple''s 2D game development framework and your main tool
    for iOS game design. SpriteKit will handle the mechanics of our graphics rendering,
    physics, and sound playback. As far as game development frameworks go, SpriteKit
    is a terrific choice. It is built and supported by Apple and thus integrates perfectly
    with Xcode and iOS. You will learn to be highly proficient with SpriteKit – we
    will use it exclusively in our demo game.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**SpriteKit**是Apple的2D游戏开发框架，也是iOS游戏设计的主要工具。SpriteKit将处理我们的图形渲染、物理和声音播放的机制。就游戏开发框架而言，SpriteKit是一个极好的选择。它是Apple构建和支持的，因此与Xcode和iOS完美集成。您将学会熟练使用SpriteKit——在我们的演示游戏中，我们将独家使用它。'
- en: 'We will learn to use SpriteKit to power the mechanics of our game:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用SpriteKit来驱动我们游戏的核心机制：
- en: Animate our player, enemies, and power-ups
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的玩家、敌人和道具添加动画
- en: Paint and move side scrolling environments
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制并移动侧边滚动环境
- en: Play sounds and music
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放声音和音乐
- en: Apply physics-like gravity and impulses for movement
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用类似物理的重力和冲量进行移动
- en: Handle collisions between game objects
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理游戏对象之间的碰撞
- en: Reacting to player input
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对玩家输入做出反应
- en: The control schemes in mobile games must be inventive. Mobile hardware forces
    us to simulate traditional controller inputs, such as directional pads and multiple
    buttons on the screen. This takes up valuable visible area and provides less precision
    and feedback than with physical devices. Many games operate with only a single
    input method; a single tap anywhere on the screen. We will learn how to make the
    best of mobile input and explore new forms of control by sensing device motion
    and tilt.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 移动游戏中的控制方案必须富有创意。移动硬件迫使我们模拟传统的控制器输入，例如方向垫和屏幕上的多个按钮。这占用了宝贵的可见区域，并且与物理设备相比，提供的精度和反馈更少。许多游戏只使用单一输入方式；在屏幕上的任何地方轻触一次。我们将学习如何充分利用移动输入，并通过感应设备运动和倾斜来探索新的控制形式。
- en: Structuring your game code
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化你的游戏代码
- en: It is important to write well-structured code that is easy to re-use and modify
    as your game design inevitably changes. You will often find mechanical improvements
    as you develop and test your games and you will thank yourself for a clean working
    environment. Though there are many ways to approach this topic, we will explore
    some best practices to build an organized system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 编写易于重用和修改的代码，以便随着你的游戏设计不可避免地变化，这是非常重要的。你将在开发和测试你的游戏时经常发现机械改进，并且你会感谢自己有一个干净的工作环境。尽管有许多方法可以接近这个主题，但我们将探索一些最佳实践来构建一个有组织的系统。
- en: Building UI/menus/levels
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建UI/菜单/关卡
- en: We will learn to switch between scenes in our game with a menu screen. We will
    cover the basics of user experience design and menu layout as we build our demo
    game.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何在我们的游戏中通过菜单屏幕切换场景。在我们构建演示游戏的过程中，我们将涵盖用户体验设计和菜单布局的基础知识。
- en: Integrating with Game Center
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Game Center集成
- en: '**Game Center** is Apple''s built in social gaming network. Your game can tie
    into Game Center to store and share high scores and achievements. We will learn
    how to register for Game Center, tie it into our code, and create a fun achievement
    system.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Game Center**是苹果内置的社交游戏网络。你的游戏可以与Game Center集成，以存储和分享高分和成就。我们将学习如何注册Game
    Center，将其集成到我们的代码中，并创建一个有趣的成就系统。'
- en: Maximizing fun
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大化乐趣
- en: If you are like me, you will have dozens of ideas for games floating around
    your head. Ideas come easily but designing fun gameplay is difficult! It is common
    to find your ideas need gameplay enhancements once you see your design in action.
    We will look at how to avoid dead-ends and see your project through to the finish
    line. Plus, I will share my tips and tricks to ensure your game will bring joy
    to your players.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，你脑海中会有数十个游戏想法。想法来得容易，但设计有趣的游戏玩法却很难！在你看到你的设计付诸实践后，发现你的想法需要游戏玩法增强是很常见的。我们将探讨如何避免死胡同，并确保你的项目能够顺利到达终点线。此外，我将分享我的技巧和窍门，以确保你的游戏能给你的玩家带来快乐。
- en: Crossing the finish line
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冲刺终点线
- en: Creating a game is a memory you will treasure. Sharing your hard work will only
    sweeten the satisfaction. Once our game is polished and ready for public consumption,
    we will navigate the App Store submission process together. You will finish feeling
    confident in your ability to create games with Swift and bring them to market
    in the App Store.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创作一款游戏是你将珍藏的记忆。分享你的辛勤工作只会让满足感更甜。一旦我们的游戏经过打磨并准备好公开消费，我们将一起导航App Store提交流程。你将结束游戏，对自己使用Swift创建游戏并将其带到App
    Store的能力充满信心。
- en: Further research
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步研究
- en: I will focus on the mechanics and programming involved in great game design
    for iOS. A few secondary topics are outside the scope of this book.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我将专注于iOS优秀游戏设计中的机制和编程。一些次要主题超出了本书的范围。
- en: Marketing and monetizing your game
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏营销和盈利
- en: Successfully promoting and marketing your game is an important job, but this
    text focuses on game development mechanics and Swift code. If you are interested
    in making money from your games, I strongly advise you to research the best ways
    to promote yourself within the indie gaming community and to start marketing your
    game well before launch.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 成功推广和营销你的游戏是一项重要的工作，但本文重点在于游戏开发机制和Swift代码。如果你对从你的游戏中赚钱感兴趣，我强烈建议你研究在独立游戏社区中推广自己的最佳方式，并在游戏发布前就开始营销你的游戏。
- en: Making games specifically for the desktop on OSX
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为OSX桌面制作游戏
- en: We are going to concentrate on iOS. You can use the techniques in this book
    for game development on OSX too, but you may need to research publishing and environmental
    differences.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于iOS。你也可以使用这本书中的技术来在OSX上进行游戏开发，但你可能需要研究发布和环境差异。
- en: Setting up your development environment
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: Learning a new development environment can be a roadblock. Luckily, Apple provides
    some excellent tools for iOS developers. We will start our journey by installing
    Xcode.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 学习新的开发环境可能会成为障碍。幸运的是，苹果为 iOS 开发者提供了一些出色的工具。我们将从安装 Xcode 开始我们的旅程。
- en: Introducing Xcode
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Xcode
- en: '**Xcode** is Apple''s **Integrated Development Environment** (**IDE**). You
    will need Xcode to create your game projects, write and debug your code, and build
    your project for the App Store. Xcode also comes bundled with an iOS simulator
    to test your game on virtualized iPhones and iPads on your computer.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Xcode** 是苹果公司的 **集成开发环境**（**IDE**）。您需要 Xcode 来创建您的游戏项目、编写和调试您的代码，以及为 App
    Store 构建您的项目。Xcode 还附带了一个 iOS 模拟器，可以在您的计算机上虚拟化 iPhone 和 iPad 来测试您的游戏。'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apple praises Xcode as "an incredibly productive environment for building amazing
    apps for Mac, iPhone, and iPad."
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司将 Xcode 赞誉为“一个构建 Mac、iPhone 和 iPad 上令人惊叹应用的极具生产力的环境。”
- en: To install Xcode, search for `xcode` in the App Store or visit [http://developer.apple.com](http://developer.apple.com)
    and click on the **Xcode** icon. Please note the version of Xcode you are installing.
    At the time of writing, the current version of Xcode is 6.3.2\. Swift is continually
    evolving and each new Xcode release brings syntax changes to Swift. For the best
    experience with the code in this book, use Xcode 6.3.x (with Swift version 1.2).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xcode，请在 App Store 中搜索 `xcode` 或访问 [http://developer.apple.com](http://developer.apple.com)
    并点击 **Xcode** 图标。请注意您正在安装的 Xcode 版本。在撰写本文时，Xcode 的当前版本是 6.3.2。Swift 正在不断发展，每个新的
    Xcode 版本都会为 Swift 带来语法变化。为了获得本书中代码的最佳体验，请使用 Xcode 6.3.x（Swift 版本 1.2）。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Apple announced Xcode 7 and Swift 2 at WWDC 2015, but it is still in Beta at
    the time of writing. It looks like there will be some minor syntax changes. The
    knowledge and techniques in this book will still apply.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司在 2015 年的 WWDC 上宣布了 Xcode 7 和 Swift 2，但在撰写本文时它仍然处于测试版。看起来会有一些小的语法变化。本书中的知识和技巧仍然适用。
- en: Xcode performs common IDE features to help you write better, faster code. If
    you have used IDEs in the past, then you are probably familiar with auto-completion,
    live error highlighting, running and debugging a project, and using a project
    manager pane to create and organize your files. However, any new program can seem
    overwhelming at first. We will walk through some common interface functions over
    the next few pages. I have also found tutorial videos on YouTube to be particularly
    helpful if you are stuck.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 执行常见的 IDE 功能，以帮助您编写更好、更快的代码。如果您以前使用过 IDE，那么您可能熟悉自动完成、实时错误突出显示、运行和调试项目，以及使用项目管理面板创建和组织您的文件。然而，任何新的程序在开始时都可能显得令人不知所措。在接下来的几页中，我们将介绍一些常见的界面功能。我还发现
    YouTube 上的教程视频特别有帮助，如果您遇到困难的话。
- en: Creating our first Swift game
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Swift 游戏
- en: Do you have Xcode installed? Let's cut to the chase and see some game code in
    action in the simulator!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经安装了 Xcode 吗？让我们直奔主题，看看模拟器中的一些游戏代码的实际效果！
- en: We will need to create a new project. Launch Xcode and navigate to **File**
    | **New** | **Project**. You will see a screen asking you to select a template
    for your new project. Select **iOS** | **Application** in the left pane, and **Game**
    in the right pane. It should look like this:![Creating our first Swift game](img/Image_B04532_01_01.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的项目。启动 Xcode 并导航到 **文件** | **新建** | **项目**。您将看到一个屏幕，要求您选择您新项目的模板。在左侧面板中选择
    **iOS** | **应用程序**，在右侧面板中选择 **游戏**。它应该看起来像这样：![创建我们的第一个 Swift 游戏](img/Image_B04532_01_01.jpg)
- en: Once you select **Game**, click **Next**. The following screen asks us to enter
    some basic information about our project. Do not worry; we are almost at the fun
    bit. For our demo game, we will create a side-scrolling endless flyer featuring
    an astonishing flying penguin named Pierre. I am going to name this game `Pierre
    Penguin Escapes the Antarctic`, but feel free to name your project whatever you
    like. For now, the names are not important. You will want to pick a meaningful
    **Product Name** and **Organization Identifier** when you create your own game
    for publication. By convention, your **Organization Identifier** should follow
    a reverse domain name style. I will use `com.ThinkingSwiftly`, as shown in the
    following screenshot.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你选择了**游戏**，点击**下一步**。接下来的屏幕会要求我们输入一些关于我们项目的基本信息。不要担心；我们很快就会进入有趣的部分。对于我们的演示游戏，我们将创建一个侧滚无限飞行的游戏，特色是一只惊人的飞企鹅，名叫皮埃尔。我打算把这个游戏命名为`皮埃尔企鹅逃离南极洲`，但你可以自由地给你的项目起任何名字。现在，名字并不重要。当你创建自己的游戏并发布时，你将想要选择一个有意义的**产品名称**和**组织标识符**。按照惯例，你的**组织标识符**应该遵循反向域名风格。我将使用`com.ThinkingSwiftly`，如下面的截图所示。
- en: After you fill out the name fields, make sure to select **Swift** for the **Language**,
    **SpriteKit** for **Game Technology**, and **Universal** for **Devices**. Here
    are my settings:![Creating our first Swift game](img/Image_B04532_01_02.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在填写完名称字段后，请确保选择**Swift**作为**语言**，**SpriteKit**作为**游戏技术**，以及**通用**作为**设备**。以下是我的设置：![创建我们的第一个Swift游戏](img/Image_B04532_01_02.jpg)
- en: Click **Next** and you will see the final dialog box. Save your new project.
    Pick a location on your computer and click **Next**. And we are in! Xcode has
    prepopulated our project with a basic SpriteKit template.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，你将看到最后的对话框。保存你的新项目。在电脑上选择一个位置并点击**下一步**。我们进来了！Xcode已经用基本的SpriteKit模板预先填充了我们的项目。
- en: Navigating our project
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航我们的项目
- en: 'Now that we have created our project, you will see the project navigator on
    the left-hand side of Xcode. You will use the project navigator to add, remove,
    and rename files and generally organize your project. You might notice that Xcode
    has created quite a few files in our new project. We will take it slow; do not
    feel pressure to know what each file does yet, but feel free to explore them if
    you are curious:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了项目，你会在Xcode的左侧看到项目导航器。你将使用项目导航器来添加、删除、重命名文件，以及通常组织你的项目。你可能注意到Xcode在我们的新项目中创建了很多文件。我们会慢慢来；不要因为还不知道每个文件的作用而感到压力，但如果你好奇，可以自由地探索它们：
- en: '![Navigating our project](img/Image_B04532_01_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![导航我们的项目](img/Image_B04532_01_03.jpg)'
- en: Exploring the SpriteKit Demo
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索SpriteKit演示
- en: Use the project navigator to open up the file named `GameScene.swift`. Xcode
    created `GameScene.swift` to store the default scene of our new game.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用项目导航器打开名为`GameScene.swift`的文件。Xcode创建了`GameScene.swift`来存储我们新游戏的基本场景。
- en: What is a scene? SpriteKit uses the concept of scenes to encapsulate each unique
    area of a game. Think of the scenes in a movie; we will create a scene for the
    main menu, a scene for the game over screen, a scene for each level in our game,
    and so on. If you are on the main menu of a game and you tap "play", you move
    from the menu scene to the level 1 scene.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是场景？SpriteKit使用场景的概念来封装游戏中的每个独特区域。想象一下电影中的场景；我们将为主菜单创建一个场景，为游戏结束屏幕创建一个场景，为我们的游戏中的每个关卡创建一个场景，等等。如果你在游戏的主菜单上点击“播放”，你会从菜单场景移动到1级场景。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: SpriteKit prepends its class names with the letters "SK"; consequently, the
    scene class is **SKScene**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit在其类名前缀字母“SK”；因此，场景类是**SKScene**。
- en: You will see there is already some code in this scene. The SpriteKit project
    template comes with a very small demo. Let's take a quick look at this demo code
    and use it to test the iOS simulator.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到在这个场景中已经有一些代码了。SpriteKit项目模板自带一个非常小的演示。让我们快速看一下这个演示代码，并使用它来测试iOS模拟器。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please do not be concerned with understanding the demo code at this point. Your
    focus should be on learning the development environment.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请在此阶段不要担心理解演示代码。你的重点应该是学习开发环境。
- en: 'Look for the run toolbar at the top of the Xcode window. It should look something
    like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode窗口的顶部寻找运行工具栏。它看起来可能像这样：
- en: '![Exploring the SpriteKit Demo](img/Image_B04532_01_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![探索SpriteKit演示](img/Image_B04532_01_04.jpg)'
- en: Select the iOS device of your preference to simulate using the dropdown on the
    far right. Which iOS device should you simulate? You are free to use the device
    of your choice. I will be using an iPhone 6 for the screenshots in this book,
    so choose **iPhone 6** if you want your results to match my images perfectly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你偏好的iOS设备进行模拟，使用最右侧的下拉菜单。你应该模拟哪个iOS设备？你可以自由选择你喜欢的设备。在这本书的截图里，我会使用iPhone 6，所以如果你想你的结果与我的图片完全匹配，请选择**iPhone
    6**。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unfortunately, expect your game to play poorly in the simulator. SpriteKit suffers
    poor FPS in the iOS simulator. Once our game becomes relatively complex, we will
    see our FPS drop, even on high-end computers. The simulator will get you through,
    but it is best if you can plug in a physical device to test.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，你可能会在模拟器中看到你的游戏表现不佳。SpriteKit在iOS模拟器中表现出的FPS很低。一旦我们的游戏变得相对复杂，我们甚至在高性能的电脑上也会看到我们的FPS下降。模拟器会帮你度过难关，但如果你能插入一个物理设备进行测试，那就更好了。
- en: 'It is time for our first glimpse of SpriteKit in action! Press the gray play
    arrow (handy run keyboard shortcut: *command* + *r*). Xcode will build the project
    and launch the simulator. The simulator starts in a new window, so make sure you
    bring it to the front. You should see a gray background with chalky white text:
    **Hello, World**. Click around on the gray background.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候看看SpriteKit的实际效果了！按下灰色播放箭头（方便的运行键盘快捷键：*command* + *r*）。Xcode将构建项目并启动模拟器。模拟器在一个新窗口中启动，所以请确保将其带到前台。你应该看到一个灰色背景和粉笔白色的文本：**Hello,
    World**。在灰色背景上点击。
- en: 'You will see spinning fighter jets spawning wherever you click:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在你点击的任何地方看到旋转的战斗机生成：
- en: '![Exploring the SpriteKit Demo](img/Image_B04532_01_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![探索SpriteKit演示](img/Image_B04532_01_05.jpg)'
- en: I may have gone slightly overboard with the jets . . .
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能对战斗机有点过度了……
- en: If you have made it this far, congratulations! You have successfully installed
    and configured everything you need to make your first Swift game.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经走到这一步，恭喜你！你已经成功安装并配置了你制作第一个Swift游戏所需的一切。
- en: 'Once you have spawned a sufficient number of jets, you can close the simulator
    down and return to Xcode. Note: you can use the keyboard command *command* + *q*
    to exit the simulator or press the stop button inside Xcode. If you use the stop
    button, the simulator will remain open and launch your next build faster.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你生成了足够的战斗机，你可以关闭模拟器并返回Xcode。注意：你可以使用键盘命令*command* + *q*退出模拟器，或者在Xcode中按停止按钮。如果你使用停止按钮，模拟器将保持打开状态，并更快地启动你的下一个构建。
- en: Examining the demo code
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查演示代码
- en: Let's quickly explore the demo code. Do not worry about understanding everything
    just yet; we will cover each element in depth later. At this point, I am hoping
    you will acclimatize to the development environment and pick up a few things along
    the way. If you are stuck, keep going! Things will actually get simpler in the
    next chapter, after we clear away the SpriteKit demo and start on our own game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速探索一下演示代码。现在不必担心理解一切；我们将在稍后深入探讨每个元素。目前，我希望你能够适应开发环境，并在过程中学到一些东西。如果你遇到了困难，继续前进！实际上，在清除SpriteKit演示并开始我们自己的游戏后，下一章的内容将会变得简单。
- en: Make sure you have `GameScene.swift` open in Xcode.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在Xcode中打开了`GameScene.swift`文件。
- en: The `GameScene` class implements three functions. Let's examine these functions.
    Feel free to read the code inside each function, but I do not expect you to understand
    the specific code just yet.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameScene`类实现了三个函数。让我们来检查这些函数。你可以随意阅读每个函数内部的代码，但我并不期望你立刻就能理解具体的代码。'
- en: The game invokes the `didMoveToView` function whenever it switches to the `GameScene`.
    You can think of it a bit like an initialize, or main, function for the scene.
    The SpriteKit demo uses it to draw the **Hello World** text to the screen.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏在切换到`GameScene`时，会调用`didMoveToView`函数。你可以把它想象成场景的初始化或主函数。SpriteKit演示使用它来在屏幕上绘制**Hello
    World**文本。
- en: The `touchesBegan` function handles the user's touch input to the iOS device
    screen. The SpriteKit demo uses this function to spawn the fighter jet graphic
    and set it spinning wherever we touch the screen.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`touchesBegan`函数处理iOS设备屏幕上的用户触摸输入。SpriteKit演示使用这个函数来生成战斗机图形，并将其设置在我们触摸屏幕的任何地方旋转。'
- en: The `update` function runs once for every frame drawn to the screen. The SpriteKit
    demo does not use this function, but we may have reason to implement it later.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`update`函数会在屏幕上绘制每一帧时运行一次。SpriteKit演示没有使用这个函数，但我们可能以后会有理由实现它。'
- en: Cleaning up
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理
- en: 'I hope that you have absorbed some Swift syntax and gained an overview of Swift
    and SpriteKit. It is time to make room for our own game; let us clear all of that
    demo code out! We want to keep a little bit of the boilerplate, but we can delete
    most of what is inside the functions. To be clear, I do not expect you to understand
    this code yet. This is simply a necessary step towards the start of our journey!
    Please remove lines from your `GameScene.swift` file until it looks like the following
    code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你已经吸收了一些 Swift 语法，并对 Swift 和 SpriteKit 有了一个大致的了解。现在是时候为我们的游戏腾出空间了；让我们把所有的示例代码都清理掉！我们想要保留一点模板代码，但我们可以删除函数内部的大部分内容。为了清楚起见，我不期望你现在就能理解这段代码。这只是一个开始我们旅程的必要步骤！请从你的
    `GameScene.swift` 文件中删除行，直到它看起来像以下代码：
- en: '[PRE0]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once your `GameScene.swift` looks like the preceding code, you are ready to
    move on to [Chapter 2](ch02.html "Chapter 2. Sprites, Camera, Actions!"), *Sprites,
    Camera, Actions!* Now the real fun begins!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 `GameScene.swift` 看起来像前面的代码，你就可以继续前进到[第 2 章](ch02.html "第 2 章。精灵、相机、动作！")，*精灵、相机、动作!*了。现在真正的乐趣开始了！
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You have already accomplished a lot. You gained your first experience with Swift,
    installed and configured your development environment, launched code successfully
    into the iOS simulator, and prepared your project for the first steps towards
    your own game. Great work!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经取得了很大的进步。你获得了 Swift 的第一次实践经验，安装并配置了你的开发环境，成功地将代码启动到 iOS 模拟器中，并为你的游戏项目做好了第一步准备。做得好！
- en: We have seen enough of the "Hello World" demo – are you ready to draw your own
    graphics to the game screen? We will make use of sprites, textures, colors, and
    animation in [Chapter 2](ch02.html "Chapter 2. Sprites, Camera, Actions!"), *Sprites,
    Camera, Actions!*
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了足够的“Hello World”演示——你准备好在自己的游戏屏幕上绘制自己的图形了吗？在[第 2 章](ch02.html "第 2 章。精灵、相机、动作！")，*精灵、相机、动作!*中，我们将使用精灵、纹理、颜色和动画。
