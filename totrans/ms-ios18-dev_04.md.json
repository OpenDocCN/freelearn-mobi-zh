["```swift\n struct ContentView: View {\n    var body: some View { <st c=\"3436\">NavigationStack {</st> NavigationLink(\"Tap here to go to the next\n            screen\") {\n                Text(\"Next Screen!\")\n            }\n        }\n    }\n}\n```", "```swift\n struct ContentView: View {\n    @State var isNextScreenDisplayed: Bool = false\n    var body: some View {\n        NavigationStack {\n            Button(\"Go to next screen\") {\n                isNextScreenDisplayed = true\n            }\n            .<st c=\"5799\">navigationDestination(isPresented:</st>\n <st c=\"5834\">$isNextScreenDisplayed) {</st>\n <st c=\"5860\">Text(\"Next Screen!\")</st> }\n        }\n    }\n}\n```", "```swift\n struct ContentView: View { <st c=\"8603\">private let countries = [\"England\", \"France\", \"Spain\",</st>\n <st c=\"8657\">\"Italy\"]</st> var body: some View {\n        NavigationStack {\n            List(countries, id: \\.self) { country in <st c=\"8748\">NavigationLink(country, value: country)</st> } <st c=\"8790\">.navigationDestination(for: String.self)</st> { item\n                in\n                Text(item)\n            }\n        }\n    }\n}\n```", "```swift\n struct Profile<st c=\"10109\">: Hashable</st> {\n    let firstName: String\n    let lastName: String\n    let email: String\n}\nstruct ContentView: View {\n    let profile = Profile(firstName: \"Avi\", lastName:\n    \"Tsadok\", email: \"myemail@domain.com\")\n    let countries = [\"England\", \"France\", \"Spain\", \"Italy\"]\n    var body: some View {\n        NavigationStack {\n            List(countries, id: \\.self) { country in <st c=\"10439\">NavigationLink(country, value: country)</st> }.toolbar(content: { <st c=\"10500\">NavigationLink(\"Go to profile\", value:</st>\n <st c=\"10538\">profile)</st> }) <st c=\"10551\">.navigationDestination(for: String.self)</st> { item\n                in\n                Text(item)\n            } <st c=\"10615\">.navigationDestination(for: Profile.self)</st> {\n              profile in\n                VStack {\n                    Text(profile.firstName)\n                    Text(profile.lastName)\n                    Text(profile.email)\n                }\n            }\n        }\n    }\n}\n```", "```swift\n struct ContentView: View {\n    let list: LinkedList<Int> = {\n        let list = LinkedList<Int>()\n        list.head = ListNode(1)\n        list.head?.next = ListNode(2)\n        list.head?.next?.next = ListNode(3)\n        return list\n    }() <st c=\"11786\">@State var path: [ListNode<Int>]</st> = []\n    var body: some View { <st c=\"11846\">NavigationStack(path: $path)</st> {\n            VStack {\n                NavigationLink(\"Start\", value: list.head)\n            }\n            .navigationDestination(for: ListNode<Int>.self)\n              { node in\n                NavigationLink(\"\\(node.value)\", value:\n                node.next)\n              }\n        }\n    }\n}\n```", "```swift\n path.append(ListNode(4))\n```", "```swift\n path = [ListNode(1), ListNode(2)]\n```", "```swift\n enum Screen: Hashable {\n    case signin\n    case onboarding\n    case mainScreen\n    case settings\n}\n@State var path: [Screen] = []\n```", "```swift\n path  = [.mainScreen, .settings]\n```", "```swift\n struct ContentView: View { <st c=\"14785\">@State private var navigationPath = NavigationPath()</st> @State private var albums: [Album] = [Album(title:\n      \"Album 1\"), Album(title: \"Album 2\")]\n    @State private var songs: [Song] = [Song(title: \"Song\n      1\"), Song(title: \"Song 2\")]\n    var body: some View { <st c=\"15030\">NavigationStack(path: $navigationPath) {</st> VStack {\n                List {\n                    Section(header: Text(\"Songs\")) {\n                        ForEach(songs) { song in\n                            Button(action: { <st c=\"15162\">navigationPath.append(song)</st> }) {\n                                Text(song.title)\n                            }\n                        }\n                    }\n                    Section(header: Text(\"Albums\")) {\n                        ForEach(albums) { album in\n                            Button(action: { <st c=\"15296\">navigationPath.append(album)</st> }) {\n                                Text(album.title)\n                            }\n                        }\n                    }\n                } <st c=\"15356\">.navigationDestination(for: Song.self) {</st>\n <st c=\"15396\">song in</st>\n <st c=\"15404\">SongDetailView(song: song,</st>\n <st c=\"15431\">navigationPath: $navigationPath)</st>\n <st c=\"15464\">}</st>\n <st c=\"15466\">.navigationDestination(for: Album.self) {</st>\n <st c=\"15507\">album in</st>\n <st c=\"15516\">AlbumDetailView(album: album)</st>\n <st c=\"15546\">}</st> }\n```", "```swift\n @State private var navigationPath = NavigationPath()\n```", "```swift\n NavigationStack(path: $navigationPath) {\n```", "```swift\n navigationPath.append(song)\n```", "```swift\n navigationPath.append(album)\n```", "```swift\n .navigationDestination(for: Song.self) { song in\n    SongDetailView(song: song, navigationPath:\n      $navigationPath)\n}\n.navigationDestination(for: Album.self) { album in\n    AlbumDetailView(album: album)\n}\n```", "```swift\n Button(\"Back\") {\n     navigationPath.removeLast()\n}\n```", "```swift\n class Coordinator: ObservableObject {\n    @Published var path = NavigationPath()\n}\n```", "```swift\n enum PageAction: Hashable {\n    case gotoAlbumView(album: Album)\n    case gotoSettingsView\n}\nenum UserAction {\n    case albumTappedInAlbumsList(album: Album)\n    case settingButtonTapped\n}\n```", "```swift\n func performedAction(action: UserAction) {\n        switch action {\n        case .albumTappedInAlbumsList(let album):\n            path.append(PageAction.gotoAlbumView(album:\n            album))\n        case .settingButtonTapped:\n            path.append(PageAction.gotoSettingsView)\n        }\n    }\n    @ViewBuilder\n    func buildView(forPageAction pageAction: PageAction) ->\n      some View {\n        switch pageAction {\n        case .gotoAlbumView(let album):\n            AlbumDetailView(album: album)\n        case .gotoSettingsView:\n            SettingsView()\n        }\n    }\n```", "```swift\n struct CoordinatorView: View {\n    @ObservedObject private var coordinator = Coordinator()\n    var body: some View { <st c=\"23549\">NavigationStack</st>(path: $coordinator.path) {\n        AlbumListView()\n          .navigationDestination(for:\n            PageAction.self, destination: { pageAction in\n                coordinator.buildView(forPageAction:\n                  pageAction)\n                })\n        }\n        .environmentObject(coordinator)\n    }\n}\n```", "```swift\n struct AlbumListView: View { <st c=\"25139\">@EnvironmentObject private var coordinator: Coordinator</st> var body: some View {\n        List(albums) { album in\n            VStack(alignment: .leading) {\n                Text(album.title)\n                    .font(.headline)\n                Text(album.artist)\n                    .font(.subheadline)\n            }\n            .onTapGesture { <st c=\"25363\">coordinator.performedAction(action:</st>\n <st c=\"25398\">.albumTappedInAlbumsList(album: album))</st> }\n        }\n        .navigationTitle(\"Albums\")\n        .toolbar {\n            ToolbarItem(placement: .navigationBarTrailing)\n            {\n                Button(action: { <st c=\"25546\">coordinator.performedAction(action:</st>\n <st c=\"25581\">.settingButtonTapped)</st> }) {\n                    Image(systemName: \"gear\")\n                }\n            }\n        }\n    }\n}\n```", "```swift\n var body: some View { <st c=\"28229\">NavigationSplitView</st> {\n            List(albums, selection: $selectedAlbum) { album\n              in\n                NavigationLink(album.title, value: album)\n            }\n        } <st c=\"28348\">detail: {</st> if let selectedAlbum = selectedAlbum {\n                List(selectedAlbum.songs, selection:\n                  $selectedSong) { song in\n                    Text(song.title)\n                }\n                .navigationTitle(selectedAlbum.title)\n            } else {\n                Text(\"Select an album\")\n            }\n        }\n    }\n```", "```swift\n var body: some View { <st c=\"30922\">NavigationSplitView {</st> List(albums, selection: $selectedAlbum) { album\n              in\n                NavigationLink(album.title, value: album)\n            } <st c=\"31039\">} content: {</st> if let selectedAlbum = selectedAlbum {\n                List(selectedAlbum.songs, selection:\n                  $selectedSong) { song in\n                    NavigationLink(song.title, value: song)\n                }\n                .navigationTitle(selectedAlbum.title)\n            } else {\n                Text(\"Select an album\")\n            } <st c=\"31268\">} detail: {</st> if let selectedSong = selectedSong {\n                VStack {\n                    Text(\"Song Title:\n                      \\(selectedSong.title)\")\n                    Text(\"Artist: \\(selectedSong.artist)\")\n                }\n                .padding()\n                .navigationTitle(selectedSong.title)\n            } else {\n                Text(\"Select a song\")\n            }\n        }\n    }\n```"]