["```kt\npublic class BaseRequest<O> {\n    private final JsonMapper<O> mapper;\n    protected BaseRequest(JsonMapper<O> mapper) {\n        this.mapper = mapper;\n    }\n    public O execute() {\n        try {\n            URL url = new URL(\"schema://host.com/path\");\n            HttpURLConnection urlConnection = \n                (HttpURLConnection) url.openConnection();\n            int code = urlConnection.getResponseCode();\n            StringBuilder sb = new StringBuilder();\n            BufferedReader rd = new BufferedReader(new \n            InputStreamReader(urlConnection.\n                getInputStream()));\n            String line;\n            while ((line = rd.readLine()) != null) {\n               sb.append(line);\n            }\n            return mapper.convert(new JSONObject\n                (sb.toString()));\n        } catch (Exception e) {\n            …\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n        return null;\n    }\n}\n```", "```kt\ninterface JsonMapper<T> {\n    T convert(JSONObject jsonObject) throws JSONException;\n}\n```", "```kt\npublic class ConcreteData {\n    private final String field1;\n    private final String field2;\n    public ConcreteData(String field1, String field2) {\n        this.field1 = field1;\n        this.field2 = field2;\n    }\n    public String getField1() {\n        return field1;\n    }\n    public String getField2() {\n        return field2;\n    }\n}\n```", "```kt\npublic class ConcreteMapper implements JsonMapper<ConcreteData> {\n    @Override\n    public ConcreteData convert(JSONObject jsonObject) {\n        return new ConcreteData(jsonObject.optString\n            (\"field1\"), jsonObject.optString(\"field2\"));\n    }\n} \n```", "```kt\npublic class ConcreteRequest extends BaseRequest<ConcreteData> {\n    public ConcreteRequest() {\n        super(new ConcreteMapper());\n    }\n}\n```", "```kt\npublic class MainActivity extends Activity {\n    private TextView textView;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        this.textView = findViewById(R.id.text_view);\n        new LoadConcreteDataTask(this).execute();\n    }\n    private void update(ConcreteData concreteData) {\n        textView.setText(concreteData.getField1());\n    }    \n}\n```", "```kt\npublic class MainActivity extends Activity {\n    …\n    private static class LoadConcreteDataTask extends \n        AsyncTask<Void, Void, ConcreteData> {\n        private final WeakReference<MainActivity> \n            mainActivityWeakReference;\n        private LoadConcreteDataTask(MainActivity \n           mainActivity) {\n            this.mainActivityWeakReference = new \n                WeakReference<>(mainActivity);\n        }\n        @Override\n        protected ConcreteData doInBackground(Void... \n            voids) {\n            return new ConcreteRequest().execute();\n        }\n        @Override\n        protected void onPostExecute(ConcreteData \n            concreteData) {\n            super.onPostExecute(concreteData);\n            MainActivity mainActivity = \n                mainActivityWeakReference.get();\n            if (mainActivity != null) {\n                mainActivity.update(concreteData);\n            }\n        }\n    }\n}\n```", "```kt\nplugins {\n    id 'com.android.application'\n}\nandroid {\n    compileSdk 31\n    defaultConfig {\n        minSdk 21\n        targetSdk 31\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n        }\n    }\n    compileOptions {\n    }\n}\ndependencies {\n    implementation \"\"\n}\n```", "```kt\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            ExampleTheme {\n                Surface {\n                    ExampleScreen()\n                }\n            }\n        }\n    }\n}\n@Composable\nfun ExampleScreen() {\n    Column(modifier = Modifier.padding(16.dp)) {\n        TextField(\n            value = \"\",\n            onValueChange = {\n                // Handle text change\n            },\n            label = { Text(\"Input\") }\n        )\n        Text(text = \"Example text\")\n        Button(onClick = {\n            // Handle button click\n        }) {\n            Text(text = \"Button\")\n        }\n    }\n}\n```", "```kt\n@JsonClass(generateAdapter = true)\ndata class ConcreteData(\n    @Json(name = \"field1\") val field1: String,\n    @Json(name = \"field1\") val field2: String\n)\n```", "```kt\ninterface ConcreteDataService {\n\n    @GET(\"/path\")\n    suspend fun getConcreteData(): ConcreteData\n}\n```", "```kt\nclass ConcreteDataRepository @Inject constructor(private val concreteDataService: ConcreteDataService) {\n\n    fun getConcreteData(): Flow<ConcreteData> {\n        return flow {\n            val fooList = concreteDataService.\n                getConcreteData()\n            emit(fooList)\n        }.flowOn(Dispatchers.IO)\n    }\n}\n```", "```kt\n@HiltViewModel\nclass MainViewModel @Inject constructor(private val concreteDataRepository: ConcreteDataRepository) :\n    ViewModel() {\n\n    private val _concreteData = MutableLiveData\n        <ConcreteData>()\n    val concreteData: LiveData<ConcreteData> get() = \n        _concreteData\n\n    fun loadConcreteData() {\n        viewModelScope.launch {\n            concreteDataRepository.getConcreteData()\n                .collect { data ->\n                    _concreteData.postValue(data)\n                }\n        }\n    }\n}\n```", "```kt\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Screen()\n        }\n    }\n}\n\n@Composable\nfun Screen(mainViewModel: MainViewModel = viewModel()){\n    mainViewModel.loadConcreteData()\n    UpdateText()\n}\n\n@Composable\nfun UpdateText(mainViewModel: MainViewModel = viewModel()) {\n    val concreteData by mainViewModel.concreteData.\n        observeAsState(ConcreteData(\"test\", \"test\"))\n    MessageView(text = concreteData.field1)\n\n}\n\n@Composable\nfun MessageView(text: String) {\n    Text(text = text)\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n\n    @Singleton\n    @Provides\n    fun provideHttpClient(): OkHttpClient {\n        return OkHttpClient\n            .Builder()\n            .readTimeout(15, TimeUnit.SECONDS)\n            .connectTimeout(15, TimeUnit.SECONDS)\n            .build()\n    }\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n    … \n    @Singleton\n    @Provides\n    fun provideConverterFactory(): MoshiConverterFactory = MoshiConverterFactory.create()\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n    …\n    @Singleton\n    @Provides\n    fun provideRetrofit(\n        okHttpClient: OkHttpClient,\n        gsonConverterFactory: MoshiConverterFactory\n    ): Retrofit {\n        return Retrofit.Builder()\n            .baseUrl(\"schema://host.com\")\n            .client(okHttpClient)\n            .addConverterFactory(gsonConverterFactory)\n            .build()\n    }\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n\n    @Singleton\n    @Provides\n    fun provideConcreteDataService(retrofit: Retrofit): \n        ConcreteDataService =\n           retrofit.create(ConcreteDataService::class.java)\n}\n```", "```kt\n@HiltAndroidApp\nclass MyApplication : Application()\n```", "```kt\n@JsonClass(generateAdapter = true)\ndata class ConcreteData(\n    @Json(name = \"field1\") val field1: String,\n    @Json(name = \"field1\") val field2: String\n)\ninterface ConcreteDataService {\n\n    @GET(\"/path\")\n    suspend fun getConcreteData(): ConcreteData\n}\n```", "```kt\ndata class ConcreteEntity(\n    val field1: String,\n    val field2: String\n)\n```", "```kt\ninterface ConcreteDataSource {\n\n    suspend fun getConcreteEntity(): ConcreteEntity\n}\n```", "```kt\nclass ConcreteDataSourceImpl(private val concreteDataService: ConcreteDataService) :\n    ConcreteDataSource {\n\n    override suspend fun getConcreteEntity(): \n        ConcreteEntity {\n        val concreteData = concreteDataService.\n            getConcreteData()\n        return ConcreteEntity(concreteData.field1, \n            concreteData.field2)\n    }\n}\n```", "```kt\nclass ConcreteDataRepository @Inject constructor(private val concreteDataSource: ConcreteDataSource) {\n\n    suspend fun getConcreteEntity(): ConcreteEntity {\n        return concreteDataSource.getConcreteEntity()\n    }\n```", "```kt\nclass ConcreteDataUseCase @Inject constructor(private val concreteDataRepository: ConcreteDataRepository) {\n\n    fun getConcreteEntity(): Flow<ConcreteEntity> {\n        return flow {\n            val fooList = concreteDataRepository.\n                getConcreteEntity()\n            emit(fooList)\n        }.flowOn(Dispatchers.IO)\n    }\n}\n```", "```kt\n@HiltViewModel\nclass MainViewModel @Inject constructor(private val concreteDataUseCase: ConcreteDataUseCase) :\n    ViewModel() {\n\n    private val _textData = MutableLiveData<String>()\n    val textData: LiveData<String> get() = _textData\n\n    fun loadConcreteData() {\n        viewModelScope.launch {\n            concreteDataUseCase.getConcreteEntity()\n                .collect { data ->\n                    _textData.postValue(data.field1)\n                }\n        }\n    }\n}\n```", "```kt\n@AndroidEntryPoint\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            Screen()\n        }\n    }\n}\n\n@Composable\nfun Screen(mainViewModel: MainViewModel = viewModel()){\n    mainViewModel.loadConcreteData()\n    UpdateText()\n}\n\n@Composable\nfun UpdateText(mainViewModel: MainViewModel = viewModel()) {\n    val text by mainViewModel.textData.\n        observeAsState(\"test\")\n    MessageView(text = text)\n\n}\n\n@Composable\nfun MessageView(text: String) {\n    Text(text = text)\n}\n```", "```kt\n@Module\n@InstallIn(SingletonComponent::class)\nclass ApplicationModule {\n    … \n    @Singleton\n    @Provides\n    fun provideHttpClient(): OkHttpClient {\n        return OkHttpClient\n            .Builder()\n            .readTimeout(15, TimeUnit.SECONDS)\n            .connectTimeout(15, TimeUnit.SECONDS)\n            .build()\n    }\n\n    @Singleton\n    @Provides\n    fun provideConverterFactory(): MoshiConverterFactory = \n        MoshiConverterFactory.create()\n\n    @Singleton\n    @Provides\n    fun provideRetrofit(\n        okHttpClient: OkHttpClient,\n        gsonConverterFactory: MoshiConverterFactory\n    ): Retrofit {\n        return Retrofit.Builder()\n            .baseUrl(\"schema://host.com\")\n            .client(okHttpClient)\n            .addConverterFactory(gsonConverterFactory)\n            .build()\n    }\n\n    @Singleton\n    @Provides\n    fun provideCurrencyService(retrofit: Retrofit): \n        ConcreteDataService =\n        retrofit.create(ConcreteDataService::class.java)\n    @Singleton\n    @Provides\n    fun provideConcreteDataSource(concreteDataService: \n        ConcreteDataService): ConcreteDataSource =\n        ConcreteDataSourceImpl(concreteDataService)\n}\n```"]