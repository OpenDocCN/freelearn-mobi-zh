["```swift\n      SKTexture* coinInitialTexture = [SKTexture textureWithImageNamed:@\"Coin1.png\"];\n      SKSpriteNode* coinSprite = [SKSpriteNode spriteNodeWithTexture:coinInitialTexture];\n    ```", "```swift\n    coinSprite.position = CGPointMake(self.frame.size.width/2,self.frame.size.height/2);\n    [self addChild:coinSprite];\n    ```", "```swift\n    SKTexture* coin2Texture = [SKTexture textureWithImageNamed:@\"Coin2.png\"];\n    SKTexture* coin3Texture = [SKTexture textureWithImageNamed:@\"Coin3.png\"];\n    SKTexture* coin4Texture = [SKTexture textureWithImageNamed:@\"Coin4.png\"];\n    SKTexture* coin5Texture = [SKTexture textureWithImageNamed:@\"Coin5.png\"];\n    SKTexture* coin6Texture = [SKTexture textureWithImageNamed:@\"Coin6.png\"];\n    ```", "```swift\n    NSArray *coinAnimationTextures = @[coinInitialTexture,coin2Texture,coin3Texture,coin4Texture,coin5Texture,coin6Texture];\n    ```", "```swift\n    SKAction *coinAnimation = [SKAction animateWithTextures:coinAnimationTexturestimePerFrame:0.2];\n    [coinSprite runAction:coinAnimation];\n    ```", "```swift\nSKTexture* spaceShipTexture = [SKTexture textureWithImageNamed:@\"Spaceship.png\"];\n\nself.spaceShipSprite = [SKSpriteNode spriteNodeWithTexture:spaceShipTexture];\n```", "```swift\nNSArray *coinAnimationTextures = @[coinInitialTexture,coin2Texture,coin3Texture,coin4Texture,coin5Texture,coin6Texture];\n```", "```swift\n  SKAction *coinAnimation = [SKAction animateWithTextures:coinAnimationTexturestimePerFrame:0.2];\n\n  [coinSprite runAction:coinAnimation];\n```", "```swift\n      SKTextureAtlas *textureAtlas = [SKTextureAtlas atlasNamed:@\"FSGame\"];\n    ```", "```swift\n      SKTexture* spaceShipTexture = [SKTexture textureWithImageNamed:@\"Spaceship.png\"];\n    ```", "```swift\n      SKTexture* spaceShipTexture = [textureAtlas textureNamed:@\"Spaceship.png\"];\n    ```", "```swift\n      SKTextureAtlas *textureAtlas = [SKTextureAtlas atlasNamed:@\"FSGame\"];\n\n      SKTexture* coinInitialTexture = [textureAtlas textureNamed:@\"Coin1.png\"];\n\n      SKTexture* coin2Texture = [textureAtlas textureNamed:@\"Coin2.png\"];\n      SKTexture* coin3Texture = [textureAtlas textureNamed:@\"Coin3.png\"];\n      SKTexture* coin4Texture = [textureAtlas textureNamed:@\"Coin4.png\"];\n      SKTexture* coin5Texture = [textureAtlas textureNamed:@\"Coin5.png\"];\n      SKTexture* coin6Texture = [textureAtlas textureNamed:@\"Coin6.png\"];\n    ```", "```swift\n      SKAction *rotateAction = [SKAction animateWithTextures:coinAnimationTextures timePerFrame:0.2];\n\n      SKAction *coinRepeatForeverAnimation = [SKAction repeatActionForever:rotateAction];\n\n      [coinSprite runAction:coinRepeatForeverAnimation];\n    ```", "```swift\n      NSArray *coinAnimationTextures = @[coinInitialTexture,coin2Texture,coin3Texture,coin4Texture,coin5Texture,coin6Texture];\n    ```", "```swift\n      CGFloat coinInitialPositionX = self.frame.size.width + coinSprite.size.width/2;\n      CGFloat coinInitialPositionY = arc4random() % 320;\n      CGPoint coinInitialPosition = CGPointMake(coinInitialPositionX, oinInitialPositionY);\n\n      CGFloat coinFinalPositionX = -coinSprite.size.width/2;\n      CGFloat coinFinalPositionY = coinInitialPositionY;\n      CGPoint coinFinalPosition = CGPointMake(coinFinalPositionX, coinFinalPositionY);\n    ```", "```swift\n     coinSprite.position = coinInitialPosition;\n    ```", "```swift\n      SKAction *coinMoveAnimation = [SKAction moveTo:coinFinalPosition duration:5.0];\n\n      [coinSprite runAction:coinMoveAnimation];\n    ```", "```swift\n       if (self.lastUpdatedTime)\n        {\n            self.diffTime = currentTime - self.lastUpdatedTime;\n        }\n        else\n        {\n            self.diffTime = 0;\n        }\n\n        self.lastUpdatedTime = currentTime;\n    ```", "```swift\n    @property (nonatomic, assign) NSTimeInterval lastCoinAdded;\n    ```", "```swift\n        if( currentTime - self.lastCoinAdded > 1)\n        {\n            self.lastCoinAdded = currentTime + 1;\n\n            [self addCoin];\n        }\n    ```", "```swift\n      SKTextureAtlas *textureAtlas = [SKTextureAtlas atlasNamed:@\"FSGame\"];\n    ```", "```swift\n      SKTexture* spaceShipTexture = [textureAtlas textureNamed:@\"Spaceship.png\"];\n    ```", "```swift\n    CGFloat coinInitialPositionX = self.frame.size.width + coinSprite.size.width/2;\n      CGFloat coinInitialPositionY = arc4random() % 320;\n      CGPoint coinInitialPosition = CGPointMake(coinInitialPositionX, coinInitialPositionY);\n    ```", "```swift\n      CGFloat coinFinalPositionX = -coinSprite.size.width/2;\n      CGFloat coinFinalPositionY = coinInitialPositionY;\n      CGPoint coinFinalPosition = CGPointMake(coinFinalPositionX, coinFinalPositionY);\n    ```", "```swift\n        if( currentTime - self.lastCoinAdded > 1)\n        {\n            self.lastCoinAdded = currentTime + 1;\n\n            [self addCoin];\n        }\n    ```", "```swift\n    - (void)detectSpaceShipCollisionWithCoins\n    {\n        [self enumerateChildNodesWithName:@\"Coin\"\n                               usingBlock: ^(SKNode *node, BOOL *stop)\n         {\n         }];\n    }\n    ```", "```swift\n        [self enumerateChildNodesWithName:@\"Coin\"\n          usingBlock: ^(SKNode *node, \n            BOOL *stop)\n         {\n             if (CGRectIntersectsRect(self.spaceShipSprite.frame, node.frame))\n             {\n\n             }\n         }];\n    ```", "```swift\n        [self spaceShipCollidedWithCoin:node];\n    ```", "```swift\n    - (void)spaceShipCollidedWithCoin:(SKNode*)coinNode\n    {\n        [self runSpaceshipCollectingAnimation];\n\n        [self runCollectedAnimationForCoin:coinNode];\n    }\n    ```", "```swift\n    - (void)runSpaceshipCollectingAnimation\n    {\n      SKAction* scaleUp = [SKAction scaleTo:1.4 duration:0.2];\n\n      SKAction* scaleDown = [SKAction scaleTo:1.0 duration:0.2];\n    }\n    ```", "```swift\n    NSArray* scaleSequenceAnimations =\n      [NSArray arrayWithObjects:scaleUp, scaleDown, nil];\n\n      SKAction* spaceShipCollectingAnimation = [SKAction sequence:scaleSequenceAnimations];\n    ```", "```swift\n      [self.spaceShipSprite runAction:spaceShipCollectingAnimation];\n    ```", "```swift\n    - (void)runCollectedAnimationForCoin:(SKNode*)coinNode\n    {\n        SKAction* coinFadeOutAnimation = [SKAction fadeOutWithDuration:0.4];\n\n        SKAction* scaleDownAnimation = [SKAction scaleTo:0.2 duration:0.4];\n\n        NSArray* coinAnimations = [NSArray arrayWithObjects:coinFadeOutAnimation, scaleDownAnimation, nil]; \n    }\n    ```", "```swift\n      SKAction* coinGroupAnimation = [SKAction group:coinAnimations];\n    ```", "```swift\n      SKAction* coinAnimationFinishedCallBack = [SKAction customActionWithDuration:0.0 actionBlock:^(SKNode *node,CGFloat elapsedTime)\n      {\n        [node removeFromParent];\n      }];\n    ```", "```swift\n    removeFromParent function, which is similar to removeFromSuperview in UIKit.\n    ```", "```swift\n        NSArray* coinAnimationsSequence =\n        [NSArray arrayWithObjects:coinGroupAnimation, coinAnimationFinishedCallBack, nil];\n\n        SKAction* coinSequenceAnimation =\n        [SKAction sequence:coinAnimationsSequence];\n    ```", "```swift\n        [coinNode runAction:coinSequenceAnimation];\n    ```", "```swift\n        [self detectSpaceShipCollisionWithCoins];\n    ```", "```swift\n    [self enumerateChildNodesWithName:@\"Coin\"usingBlock: ^(SKNode *node, BOOL *stop)\n     {\n         if (CGRectIntersectsRect(self.spaceShipSprite.frame, node.frame))\n         {\n\n         }\n     }];\n```", "```swift\nSKAction* scaleUp = [SKAction scaleTo:1.4 duration:0.2];\n\n    SKAction* scaleDown = [SKAction scaleTo:1.0 duration:0.2];\n\nNSArray* scaleSequenceAnimations = [NSArray arrayWithObjects:scaleUp, scaleDown, nil];\n\n  SKAction* spaceShipCollectingAnimation = [SKAction sequence:scaleSequenceAnimations];\n```", "```swift\n      SKAction* coinFadeOutAnimation = [SKAction fadeOutWithDuration:0.4];\n    ```", "```swift\n      SKAction* scaleDownAnimation = [SKAction scaleTo:0.2 duration:0.4];\n    ```", "```swift\n     SKAction* coinAnimationFinishedCallBack = [SKAction customActionWithDuration:0.0 actionBlock:^(SKNode *node,CGFloat elapsedTime)\n         {\n             [node removeFromParent];\n         }];\n    ```", "```swift\n    - (id)initWithBackgrounds:(NSArray *)imageFiles\n               size:(CGSize)size\n               speed:(CGFloat)velocity;\n    ```", "```swift\n    - (void)updateForDeltaTime:(NSTimeInterval)diffTime;\n    ```", "```swift\n    @property (nonatomic, strong)  NSMutableArray*  backgrounds;\n    @property (nonatomic, assign)  NSInteger        noOfBackgrounds;\n    @property (nonatomic, assign) CGFloat           velocity;\n    ```", "```swift\n    - (id)initWithBackgrounds:(NSArray *)imageFiles\n                   size:(CGSize)size\n                   speed:(CGFloat)velocity\n    {\n        if (self = [super init])\n        {\n            self.velocity = velocity;\n            self.noOfBackgrounds = [imageFiles count];\n            self.backgrounds =\n            [NSMutableArray arrayWithCapacity:self.noOfBackgrounds];\n\n            }];\n        }\n        return self;\n    }\n    ```", "```swift\n            [imageFiles enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)\n            {\n                SKSpriteNode *backgroundNode =\n                [SKSpriteNode spriteNodeWithImageNamed:obj];\n\n                [self.backgrounds addObject:backgroundNode];\n                [self addChild:backgroundNode];\n            }];\n    ```", "```swift\n            backgroundNode.size = size;\n            backgroundNode.anchorPoint = CGPointZero;\n            backgroundNode.position = CGPointMake(size.width * idx, 0.0);\n            backgroundNode.name = @\"background\";\n    ```", "```swift\n    - (void)updateForDeltaTime:(NSTimeInterval)diffTime\n    {\n        CGPoint bgVelocity = CGPointMake(self.velocity, 0.0);\n        CGPoint amtToMove = CGPointMultiplyScalar(bgVelocity,diffTime);\n        self.position = CGPointAdd(self.position, amtToMove);    \n    }\n    ```", "```swift\n        SKNode *backgroundScreen = self.parent;\n\n        [self.backgrounds enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop)\n        {\n            SKSpriteNode *bg = (SKSpriteNode *)obj;\n\n            CGPoint bgScreenPos = [self convertPoint:bg.position\n                                              toNode:backgroundScreen];\n\n            if (bgScreenPos.x <= -bg.size.width)\n            {\n                bg.position =\n                CGPointMake(bg.position.x + (bg.size.width * self.noOfBackgrounds),\n                            bg.position.y);\n            }\n        }];\n    ```", "```swift\n    @property (nonatomic, strong) FSParallaxNode*spaceBlueSkyParallaxNode;\n    @property (nonatomic, strong) FSParallaxNode*spaceWhiteMistParallaxNode;\n    ```", "```swift\n            [self addParallaxNodes];\n    ```", "```swift\n    static const float SPACE_BLUE_SKY_BG_VELOCITY = 20.0;\n    static const float SPACE_WHITE_MIST_BG_VELOCITY = 100.0;\n    ```", "```swift\n    - (void)addParallaxNodes\n    {\n        NSArray *blueSkyParallaxBackgroundNames = @[@\"SpaceBackground.png\", @\"SpaceBackground.png\",];\n\n        self.spaceBlueSkyParallaxNode = [[FSParallaxNode alloc] initWithBackgrounds:blueSkyParallaxBackgroundNames\n                                               size:self.frame.size\n              speed:-SPACE_BLUE_SKY_BG_VELOCITY];\n        self.spaceBlueSkyParallaxNode.position =\n        CGPointMake(0, 0);\n\n        [self addChild:self.spaceBlueSkyParallaxNode];\n    }\n    ```", "```swift\n        NSArray *mistParallaxBackgroundNames = @[@\"SpaceWhiteMist.png\", @\"SpaceWhiteMist.png\",];\n\n        self.spaceWhiteMistParallaxNode = [[FSParallaxNode alloc] initWithBackgrounds:mistParallaxBackgroundNamessize:self.frame.size\n        speed:-SPACE_WHITE_MIST_BG_VELOCITY];\n        self.spaceWhiteMistParallaxNode.position = CGPointMake(0, 0);\n\n        [self addChild:self.spaceWhiteMistParallaxNode];\n    ```", "```swift\n      if (self.spaceBlueSkyParallaxNode)\n      {\n        [self.spaceBlueSkyParallaxNode updateForDeltaTime:self.diffTime];\n      }\n\n      if (self.spaceWhiteMistParallaxNode)\n      {\n        [self.spaceWhiteMistParallaxNode updateForDeltaTime:self.diffTime];\n      }\n    ```"]