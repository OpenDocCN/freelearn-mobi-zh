["```kt\nclass Utility {\n  companion object {\n      fun addTwoNumbers(a:Int, b:Int):Int=a+b\n  }\n}\n```", "```kt\nclass UtilityTest {\n  @Test\n  fun addTwoNumbers() {\n      assertEquals(5,Utility.addTwoNumbers(2,3))\n      assertEquals(5,Utility.addTwoNumbers(4,1))\n      assertNotEquals(5,Utility.addTwoNumbers(2,5))\n  }\n}\n```", "```kt\ntestImplementation 'org.mockito:mockito-core:2.8.47'\n\n```", "```kt\n@Test\nfun test_functionUnderTest(){\n    val classUnderTest= mock(Utility::class.java)\n    classUnderTest.functionUnderTest()\n    verify(classUnderTest).functionUnderTest()\n}\n```", "```kt\norg.mockito.exceptions.base.MockitoException: \nCannot mock/spy class com.ankoexamples.app.Utility\nMockito cannot mock/spy because :\n - final class\n```", "```kt\nmock-maker-inline\n```", "```kt\n@Test\nfun testSharedPreference(){\n    val sharedPreferences=mock(SharedPreferences::class.java)\n    `when`(sharedPreferences.getInt(\"random_int\",-1)).thenReturn(1)\n    assertEquals(sharedPreferences.getInt(\"random_int\",-1),1)\n}\n```", "```kt `` ```", "```kt\n@Test\nfun testSharedPreference(){\n    val sharedPreferences=mock(SharedPreferences::class.java)\n    `when`(sharedPreferences.getInt(\"random_int\",-1)).thenReturn(1).thenReturn(2)\n    assertEquals(sharedPreferences.getInt(\"random_int\",-1),1)\n    assertEquals(sharedPreferences.getInt(\"random_int\",-1),2)\n}\n```", "```kt\n@Test\nfun testSpyObject(){\n    val list = List(2,init = {-1})\n    val spy= spy(list)\n    assertEquals(spy.get(0),-1)\n    verify(spy).get(0)\n}\n```", "```kt\nclass MainActivityTest {\n    @Rule\n    @JvmField var activityRule: ActivityTestRule<MainActivity> = ActivityTestRule(MainActivity::class.java)\n\n    @Test\n    fun testButtonBehaviour() {\n        onView(withText(\"Hello World!\"))\n                .check(matches(isDisplayed()))\n        onView(withId(button)).perform(click())\n        onView(withText(\"Goodbye World!\"))\n                .check(matches(isDisplayed()))\n\n    }\n\n}\n```", "```kt\nfun methodThrowsException() {\n    throw IllegalArgumentException(\"Age must be integer\")\n}\n```", "```kt\n@Rule\nvar thrown = ExpectedException.none()\n\n@Test\nfun testExceptionFlow() {\n    thrown.expect(IllegalArgumentException::class.java)\n    thrown.expectMessage(\"Age must be integer\")\n    Utility.methodThrowsException()\n}\n```", "```kt\norg.junit.internal.runners.rules.ValidationError: The @Rule 'thrown' must be public.\n```", "```kt\n@Rule @JvmField\nvar thrown = ExpectedException.none()\n```", "```kt\nonView(withId(R.id.textView)).check(matches(withText(not(containsString(\"Hello\")))));\n```", "```kt\nclass MainActivityTest {\n    @Rule\n    @JvmField var activityRule: ActivityTestRule<MainActivity> = ActivityTestRule(MainActivity::class.java)\n\n    @Test\n    fun testButtonBehaviour() {\n        // Testing if the text is initially Hello World!        \n        onView(withText(\"Hello World!\"))\n                .check(matches(isDisplayed()))\n        onView(withId(button)).perform(click())\n        // Testing if the text is initially Goodbye World!\n        onView(withText(\"Goodbye World!\"))\n                .check(matches(isDisplayed()))\n\n    }\n\n}\n```", "```kt\nvar targetContext:Context = InstrumentationRegistry.getTargetContext()\n```", "```kt\n@Rule\n@JvmField var intentActivityRule: ActivityTestRule<MainActivity> = ActivityTestRule(MainActivity::class.java,true,false)\n\n@Test\nfun testIntentLaunch(){\n    val intent = Intent()\n    intentActivityRule.launchActivity(intent)\n    onView(withText(\"Hello World!\"))\n            .check(matches(isDisplayed()))\n}\n```", "```kt\nassertEquals(MyObj(\"abc\"),MyObj(\"abc\"))\n```", "```kt\nassertEquals(MyObj(\"abc\"),MyObj(\"abc\"))\n```", "```kt\noverride fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other?.javaClass != javaClass) return false\n    other as MyObj\n\n    if (name != other.name) return false\n\n    return true\n}\n```"]