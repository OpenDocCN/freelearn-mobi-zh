["```\nimport UIKit\nstruct ReviewItem {\n   var rating:Float?\n   var name:String?\n   var customerReview:String?\n   var date:NSDate?\n   var restaurantID:Int?\n   var uuid = UUID().uuidString\n   var displayDate:String {\n          let formatter = DateFormatter()\n          formatter.dateFormat = \"MMMM dd, yyyy\"\n          return formatter.string(from: self.date as! Date)\n   }\n}\n\nextension ReviewItem {\n   init(data:Review) {\n         self.date = data.date\n         self.customerReview = data.customerReview\n         self.name = data.name\n         self.restaurantID = Int(data.restaurantID)\n         self.rating = data.rating\n         if let uuid = data.uuid { self.uuid = uuid }\n   }\n}\n```", "```\nstruct RestaurantPhotoItem {\n   var photo:UIImage?\n   var date:NSDate?\n   var restaurantID:Int?\n   var uuid = UUID().uuidString\n   var photoData:NSData {\n         guard let image = photo else {\n               return NSData()\n         }\n         return NSData(data: UIImagePNGRepresentation(image)!)\n   }\n}\nextension RestaurantPhotoItem {\n   init(data:RestaurantPhoto) {\n         self.date = data.date\n         self.restaurantID = Int(data.restaurantID)\n         self.photo = UIImage(data:photo as Data, scale:1.0)\n         if let uuid = data.uuid { self.uuid = uuid }\n   }\n}\n```", "```\nimport CoreData\n```", "```\nlet container:NSPersistentContainer\n```", "```\noverride init() {\n   container = NSPersistentContainer(name: \"LetsEatModel\")\n   container.loadPersistentStores { (storeDesc, error) in\n         guard error == nil else {\n               print(error?.localizedDescription as Any)\n               return\n         }\n   }\n   super.init()\n}\n```", "```\nfunc fetchReviews(by identifier:Int) -> [ReviewItem] {\n    let moc = container.viewContext\n    let request:NSFetchRequest<Review> = Review.fetchRequest()\n    let predicate = NSPredicate(format: \"restaurantID = %i\", Int32(identifier))\n    var items:[ReviewItem] = []\n    request.sortDescriptors = [\n      NSSortDescriptor(key: \"date\", ascending: false)]\n    request.predicate = predicate\n    do {\n        for data in try moc.fetch(request) {\n            items.append(ReviewItem(data: data))\n        }\n        return items\n    } catch {\n        fatalError(\"Failed to fetch reviews: \\(error)\")\n    }\n}\n```", "```\nlet moc = container.viewContext\nlet request:NSFetchRequest<Review> = Review.fetchRequest()\nlet predicate = NSPredicate(format: \"restaurantID = %i\", Int32(identifier))\n```", "```\nrequest.sortDescriptors = [NSSortDescriptor(key: \"date\", ascending: false)]\nrequest.predicate = predicate\n```", "```\ndo {\n   for data in try moc.fetch(request) {\n         items.append(ReviewItem(data: data))\n   }\n   return items\n} catch {\n   fatalError(\"Failed to fetch reviews: \\(error)\")\n}\n```", "```\nfunc fetchPhotos(by identifier:Int) -> [RestaurantPhotoItem] {\n    let moc = container.viewContext\n    let request:NSFetchRequest<Review> = RestaurantPhoto.fetchRequest()\n    let predicate = NSPredicate(format: \"restaurantID = %i\", Int32(identifier))\n    var items:[RestaurantPhotoItem] = []\n    request.sortDescriptors = [NSSortDescriptor(key: \"date\", ascending: false)]\n    request.predicate = predicate\n    do {\n        for data in try moc.fetch(request) {\n            items.append(ReviewItem(data: data))\n        }\n        return items\n    } catch {\n       fatalError(\"Failed to fetch photos: \\(error)\")\n    }\n}\n```", "```\nfunc addReview(_ item:ReviewItem) {\n   let review = Review(context: container.viewContext)\n   review.name = item.name\n   review.date = NSDate()\n   if let rating = item.rating { review.rating = rating }\n   review.customerReview = item.customerReview\n   review.uuid = item.uuid\n\n   if let id = item.restaurantID {\n         review.restaurantID = Int32(id)\n         print(\"restaurant id \\(id)\")\n           save()\n   }\n}\n\nfunc addPhoto(_ item:RestarauntPhotoItem) {\n   let photo = RestarauntPhoto(context: container.viewContext)\n   photo.date = NSDate()\n   photo.photo = item.photoData\n   photo.uuid = item.uuid\n\n   if let id = item.restaurantID {\n         photo.restaurantID = Int32(id)\n         print(\"restaurant id \\(id)\")\n           save()\n   }\n}\n```", "```\nfileprivate func save() {\n   do {\n         if container.viewContext.hasChanges {\n               try container.viewContext.save()\n         }\n   }\n   catch let error {\n         print(error.localizedDescription)\n   }\n}\n```", "```\nimport Foundation\nclass ReviewDataManager: NSObject {\n    private var reviewItems:[ReviewItem] = []\n    private var photoItems:[RestaurantPhotoItem] = []\n    let manager = CoreDataManager()\n    func fetchReview(by restaurantID:Int) {\n       if reviewItems.count > 0 { reviewItems.removeAll() }\n       for data in manager.fetchReviews(by: restaurantID) {\n            reviewItems.append(data)\n       }\n    }\n\n    func fetchPhoto(by restaurantID:Int) {\n        if photoItems.count > 0 { photoItems.removeAll() }\n        for data in manager.fetchPhotos(by: restaurantID) {\n            photoItems.append(data)\n        }\n    }\n\n    func numberOfReviewItems() -> Int {\n        return reviewItems.count\n    }\n\n    func numberOfPhotoItems() -> Int {\n        return photoItems.count\n    }\n\n    func reviewItem(at index:IndexPath) -> ReviewItem {\n        return reviewItems[index.item]\n    }\n\n```", "```\n    func photoItem(at index:IndexPath) -> RestaurantPhotoItem {\n        return photoItems[index.item]\n    }\n}\n```"]