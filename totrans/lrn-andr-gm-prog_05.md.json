["```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\n\npublic class BackgroundImage {\n\n    private int xc, yc, dxc;\n    private Bitmap backgroundImage;\n\n    public BackgroundImage(Bitmap res){\n        backgroundImage = res;\n dxc = GameView.MOVINGSPEED;\n    }\n\n    public void update(){\n        xc += dxc;\n        if(xc < -GameView.WIDTH){\n            xc=0;\n        }\n    }\n\n    public void draw(Canvas canvas){\n        canvas.drawBitmap(backgroundImage, xc, yc,null);\n        if(xc < 0){\n            canvas.drawBitmap(backgroundImage, xc + GameView.WIDTH, yc, null);\n        }\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.content.Context;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback {\n    public static final int WIDTH = 1920;\n    public static final int HEIGHT = 1080;\n public static final int MOVINGSPEED = -5;    private MainGameThread mainThread;\n    private BackgroundImage bgImg;\n\n    public GameView(Context context){\n    super(context);\n\n        //set callback to the surfaceholder to track events\n        getHolder().addCallback(this);\n\n        mainThread = new MainGameThread(getHolder(), this);\n\n        //make gamePanel focusable so it can handle events\n        setFocusable(true);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format,\n    int width, int height){}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder){\n        boolean retry = true;\n        while(retry){\n            try{\n                mainThread.setRunning(false);\n                mainThread.join();\n            }catch(InterruptedException e){e.printStackTrace();\n            }\n            retry = false;\n        }\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n        bgImg = new BackgroundImage(BitmapFactory.decodeResource\n        (getResources(), R.drawable.background_image));\n\n        //we can safely start the game loop\n        mainThread.setRunning(true);\n        mainThread.start();\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event){\n        return super.onTouchEvent(event);\n    }\n\n    public void update(){\n        bgImg.update();\n    }\n\n    @Override\n    public void draw(Canvas canvas){\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas != null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n            canvas.restoreToCount(savedState);\n        }\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Rect;\n\n/**\n * Created by Nikhil on 13-01-2017.\n */\n\npublic abstract class GameObj {\n    protected int xc, yc, dxc, dyc; \n    //Our x and y coordinates along with their displacement variables\n    protected int width, height;\n    //width and height of our objects\n\n    public int getXC() {\n        return xc;\n    }\n\n    public int getYC() {\n        return yc;\n    }\n\n    public void setXC(int xc) {\n        this.xc = xc;\n    }\n\n    public void setYC(int yc) {\n        this.yc = yc;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n    public Rect getRectangle() {\n        return new Rect(xc, yc, xc + width, yc + height);\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\n\n/**\n * Created by Nikhil on 13-01-2017.\n */\n\npublic class PlayerCharacter extends GameObj{\nprivate Bitmap spriteSheet;\nprivate int score;\nprivate double dya;\nprivate boolean up, playing;\nprivate AnimationClass ac = new AnimationClass();\nprivate long startTime;\n\n    public PlayerCharacter(Bitmap res, int w, int h, int noOfFrames) {\n        xc = 100;\n        yc = GameView.HEIGHT/2;\n        dyc = 0;\n        score = 0;\n        height = h;\n        width = w;\n\n        Bitmap[] img = new Bitmap[noOfFrames];\n        spriteSheet = res;\n\n        for(int i=0; i < img.length;i++){\n                img[i] = Bitmap.createBitmap(spriteSheet, i*width, 0, width, height);\n        }\n        ac.setFrames(img);\n        ac.setDelay(10);\n        startTime = System.nanoTime();\n    }\n\n    public void setUp(boolean b){\n        up = b;\n    }\n\n    public void update() {\n        long elapsed = (System.nanoTime()-startTime)/1000000;\n        if(elapsed > 100) {\n            score++;\n            startTime = System.nanoTime();\n        }\n        ac.update();\n    }\n\n    public void draw(Canvas canvas) {\n        canvas.drawBitmap(ac.getImage(), xc, yc, null);\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public boolean getPlaying(){\n        return playing;\n    }\n\n    public void setPlaying(boolean b) {\n        playing = b;\n    }\n\n    public void resetDYA() {\n         dya = 0;\n    }\n\n    public void resetScore () {\n        score = 0;\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.graphics.Bitmap;\n\n/**\n * Created by Nikhil on 13-01-2017.\n */\n\npublic class AnimationClass {\n    private Bitmap[] frames;\n    private int currentFrame;\n    private long startTime, delay;\n    private boolean playedOnce;\n\n    public void setFrames(Bitmap[] frames){\n        this.frames = frames;\n        currentFrame = 0;\n        startTime = System.nanoTime();\n    }\n\n    public void setDelay(long d){\n        delay = d;\n    }\n\n    public void setFrame(int i) {\n        currentFrame = i;\n    }\n\n    public void update() {\n        long elapsed = (System.nanoTime()-startTime)/1000000;\n\n        if(elapsed > delay) {\n            currentFrame++;\n            startTime = System.nanoTime();\n        }\n\n        if(currentFrame == frames.length) {\n            currentFrame = 0;\n            playedOnce = true;\n        }\n    }\n\n    public Bitmap getImage(){\n        return frames[currentFrame];\n    }\n\n    public int getFrame(){\n        return currentFrame;\n    }\n\n    public boolean playedOnce() {\n        return playedOnce;\n    }\n}\n\n```", "```kt\npackage nikhil.nikmlnkr.game;\n\nimport android.content.Context;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.view.MotionEvent;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback {\n    public static final int WIDTH = 1920;\n    public static final int HEIGHT = 1080;\n    public static final int MOVINGSPEED = -5;\n    private MainGameThread mainThread;\n    private BackgroundImage bgImg;\n private PlayerCharacter playerCharacter;\n\n    public GameView(Context context) {\n        super(context);\n\n        //set callback to the surfaceholder to track events\n        getHolder().addCallback(this);\n\n        mainThread = new MainGameThread(getHolder(), this);\n\n        //make gamePanel focusable so it can handle events\n        setFocusable(true);\n    }\n\n    @Override\n    public void surfaceChanged\n    (SurfaceHolder holder, int format, int width, int height){}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder){\n    boolean retry = true;\n    while(retry)\n        {\n            try{mainThread.setRunning(false);\n                mainThread.join();\n\n        }catch(InterruptedException e){e.printStackTrace();}\n            retry = false;\n        }\n\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n\n    bgImg = new\nBackgroundImage(BitmapFactory.decodeResource\n        (getResources(), \n        R.drawable.background_image));\n Drawable d = getResources().getDrawable\n        (R.drawable.player_run);\n int w = d.getIntrinsicWidth();\n int h = d.getIntrinsicHeight();\n playerCharacter = new PlayerCharacter\n        (BitmapFactory.decodeResource\n        (getResources(),R.drawable.player_run),w/3,h,3);\n        //we can safely start the game loop\n        mainThread.setRunning(true);\n        mainThread.start();\n\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event){\n        return super.onTouchEvent(event);\n    }\n\n    public void update(){\n        bgImg.update();\n playerCharacter.update();\n    }\n    @Override\n    public void draw(Canvas canvas){\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas!=null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n playerCharacter.draw(canvas);\n            canvas.restoreToCount(savedState);\n        }\n    }\n\n}\n\n```"]