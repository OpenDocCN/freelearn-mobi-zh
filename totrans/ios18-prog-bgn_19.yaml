- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passing Data between View Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you configured the `JournalListViewController` class,
    the view controller for the Journal List screen, to display journal entries from
    a structure containing sample data in a table view.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll learn how to pass data from one view controller to another.
    You’ll start by implementing a view controller for the Add New Journal Entry screen,
    then add code to pass data from the Add New Journal Entry screen to the Journal
    List screen. Next, you’ll learn how to remove journal entries while you’re on
    the Journal List screen. After that, you’ll learn about **text field** and **text
    view delegate** methods, and finally, you’ll pass data from the Journal List screen
    to the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to pass data between view
    controllers and how to use text field and text view delegate methods. This will
    enable you to easily pass data between view controllers in your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing data from the Add New Journal Entry screen to the Journal List screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing rows from a table view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring text field and text view delegate methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data from the Journal List screen to the Journal Entry Detail screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The playground and completed Xcode project for this chapter are in the `Chapter16`
    folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/92O7NgVoT2Q](https://youtu.be/92O7NgVoT2Q%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin by learning how data is passed between the Add New Journal Entry
    screen and the Journal List screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data from the Add New Journal Entry screen to the Journal List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the app tour in *Chapter 10*, *Setting Up the User Interface*, the
    Add New Journal Entry screen allows the user to enter data to create a new journal
    entry. To do so, the user will click the **+** button in the top-right corner
    of the Journal List screen to display the Add New Journal Entry screen. The user
    will then enter the details for the new journal entry. Clicking the **Save** button
    will dismiss the Add New Journal Entry screen and a new row containing a table
    view cell is added to the table view on the Journal List screen. The table view
    cell will display the photo, date, and title of the newly added journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: For this to work, you’ll implement the `prepare(for:sender:)` method for the
    view controller managing the Add New Journal Entry screen. This method is triggered
    when you go from one view controller to another. With this method, you’ll create
    a new journal entry using the information the user entered and assign it to a
    variable. You’ll implement an unwind method in the `JournalListViewController`
    class so you will be able to access this variable when you’re on the Journal List
    screen. Then, you will add the new journal entry obtained from this variable to
    the `journalEntries` array and then redraw the table view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the `prepare(for:sender:)` method, see: [https://developer.apple.com/documentation/uikit/uiviewcontroller/1621490-prepare](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621490-prepare).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll create a new view controller instance to manage
    the Add New Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the AddJournalEntryViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the Add New Journal Entry screen does not have a view controller.
    You’ll add a new file to your project and implement the `AddJournalEntryViewController`
    class, assign it to the **New Entry Scene**, and connect the outlets. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your `JRNL` project from the previous chapter. In the Project navigator,
    create a new group by right-clicking the **JRNL** group and choosing **New Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this group `Add New Journal Entry Screen` and move it so it is below the
    **Journal List Screen** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Add New Journal Entry Screen** group and select **New File
    from Template...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the class with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Class**: `AddJournalEntryViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subclass of**: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Also create XIB**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: **Swift**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Next** when you’re done.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** and the `AddJournalEntryViewController` file will appear in
    the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `AddJournalEntryViewController` file has now been created, with the `AddJournalEntryViewController`
    class declaration inside it. You’ll set this class as the custom class of the
    view controller scene that’s presented when you tap the **+** button in the Journal
    List screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Main** storyboard file in the Project navigator and click **New
    Entry Scene** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.1: Editor area showing New Entry Scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button and, under **Custom Class**, set **Class**
    to `AddJournalEntryViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: Identity inspector settings for New Entry Scene'
  prefs: []
  type: TYPE_NORMAL
- en: Great! In the next section, let’s connect the user interface elements in the
    **New Entry** **Scene** to outlets in the `AddJournalEntryViewController` class.
    By doing this, the `AddJournalEntryViewController` instance will be able to access
    the data the user enters on the Add New Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the UI elements to the AddJournalEntryViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the `AddJournalEntryViewController` instance for the Add New Journal
    Entry screen has no way of communicating with the UI elements in it. You’ll add
    outlets in the `AddJournalEntryViewController` class and assign the corresponding
    UI elements in the **New Entry** **Scene** to each outlet. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file
    and add the following properties to the `AddJournalEntryViewController` class
    after the opening curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Main** storyboard file and click **New Entry Scene** in the document
    outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Connections inspector to display all the outlets for **New Entry
    Scene**. Drag from the **titleTextField** outlet to the text field in **New Entry
    Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: Connections inspector showing the titleTextField outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **bodyTextView** outlet to the text view in **New Entry Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.4: Connections inspector showing the bodyTextView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **photoImageView** outlet to the image view in **New Entry Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Connections inspector showing the photoImageView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you’ve connected the UI elements in the **New Entry** **Scene** to
    the outlets in the `AddJournalEntryViewController` class. In the next section,
    you’ll implement the code to create a `JournalEntry` instance when the user clicks
    the **Save** button.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a JournalEntry instance from user input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have implemented the `AddJournalEntryViewController` class and connected
    the outlets in this class to the text field, text view, and image view in the
    **New Entry** **Scene**. When the user enters data into the text field and text
    view, you can use this information to create a new journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a view controller is about to transition to another view controller, the
    view controller’s `prepare(for:sender:)` method is called. You’ll implement this
    method to create a new `JournalEntry` instance, which can then be passed to the
    view controller for the Journal List screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file
    and add a `newJournalEntry` property to the `AddJournalEntryViewController` class
    after the outlet declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `JournalEntry` instance created using the data entered by the user will
    be assigned to this property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uncomment the `prepare(for:sender:)` method in this class. It should look like
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: Editor area showing the prepare(for:sender:) method'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code between the curly braces of this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will assign the strings from the text field and text view and the image
    from the image view to `title`, `body`, and `photo`, respectively. Since the custom
    rating control shown in the app tour has not been implemented yet, a placeholder
    value is assigned to `rating`. A new `JournalEntry` instance is then created using
    these constants and assigned to the `newJournalEntry` property.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now added code that will create a `JournalEntry` instance before the
    Add New Journal Entry screen transitions to the Journal List screen. In the next
    section, you’ll modify the `JournalListViewController` class to get the new `JournalEntry`
    instance and add it to the `journalEntries` array.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the table view with a new journal entry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the Journal List screen, journal entries are displayed in a table view.
    The table view gets its data from the `journalEntries` array contained in the
    `sampleJournalEntryData` structure. You will add code to the `JournalListViewController`
    class to get the `JournalEntry` instance assigned to the `newJournalEntry` property.
    After that, you will insert this instance to the `journalEntries` array. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file and
    add the following code before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method checks to see if the source view controller is an instance of the
    `AddJournalEntryViewController` class, and if it is, gets the `JournalEntry` instance
    from the `newJournalEntry` property. This instance is then inserted as the first
    item in the `journalEntries` array. After that, the `tableView.reloadData()` statement
    will redraw the table view.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Main** storyboard file and expand the **New Entry Scene** in the
    document outline. *Ctrl* + *Drag* from the **Save** button in the document outline
    to the scene exit and choose **unwindNewEntrySaveWithSegue:** from the pop-up
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.7: Pop-up menu showing unwindNewEntrySaveWithSegue: selected'
  prefs: []
  type: TYPE_NORMAL
- en: When you run your project, tapping the **Save** button will transition from
    the Add New Entry screen to the Journal List screen, and execute the `unwindNewEntrySave(segue:)`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your project and click the **+** button. Enter some sample text
    in the text field and text view. Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.8: Simulator with the Save button highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: The new journal entry will appear in the table view when the Journal List screen
    reappears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.9: Simulator with new table view cell highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: Excellent! You have successfully implemented a view controller for the Add New
    Journal Entry screen and can now add new journal entries, which will appear on
    the Journal List screen. In the next section, you’ll implement the code that will
    let you remove journal entries from the table view on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Removing rows from a table view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have learned in *Chapter 14*, *Getting Started with MVC and Table Views*,
    table view row deletion is handled by the `tableView(_:commit:forRowAt:)` method,
    which is one of the methods declared in the `UITableViewDataSource` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll implement this method in the `JournalListViewController` class. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalListViewController** file and
    add the following code to the `JournalListViewController` class after the existing
    table view data source methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow you to swipe left to display a **Delete** button, and when you
    tap the **Delete** button, the corresponding `JournalEntry` instance will be removed
    from the `journalEntries` array, and the table view will be redrawn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project. Swipe left on any row to reveal a **Delete** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.10: Simulator showing the Delete button on the Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap the **Delete** button and the row will be removed from the table view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.11: Simulator showing the redrawn table view'
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have successfully implemented a way to remove rows from a table
    view! Awesome! In the next section, you’ll learn more about text field and text
    view delegate methods, which will be useful when you’re entering data in the Add
    New Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring text field and text view delegate methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, there are a couple of issues with the Add New Journal Entry screen.
    The first issue is that it’s not possible to dismiss the software keyboard once
    it has appeared on the screen. The second issue is that you can click the **Save**
    button even when the text field and text view are empty.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier to work with text fields, Apple has implemented `UITextFieldDelegate`,
    a protocol declaring a set of optional methods to manage the editing and validation
    of text in a text field object. Apple has also implemented `UITextViewDelegate`,
    a protocol declaring methods for receiving editing-related messages for text view
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `UITextFieldDelegate` protocol at this link: [https://developer.apple.com/documentation/uikit/uitextfielddelegate](https://developer.apple.com/documentation/uikit/uitextfielddelegate).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the `UITextViewDelegate` protocol at this link: [https://developer.apple.com/documentation/uikit/uitextviewdelegate](https://developer.apple.com/documentation/uikit/uitextviewdelegate).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll implement methods from the `UITextFieldDelegate` and `UITextViewDelegate`
    protocols to the `AddJournalEntryViewController` class so that the user can dismiss
    the software keyboard once data entry is complete. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file.
    Add an extension after the closing curly brace of the `AddJournalEntryViewController`
    class declaration to make it conform to the `UITextFieldDelegate` and `UITextViewDelegate`
    protocols:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `viewDidLoad()` method as follows to set the `AddJournalEntryViewController`
    instance as the delegate for the text field and text view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means that the implementation of the text field and text view delegate
    methods are in the `AddJournalEntryViewController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code after the opening curly brace of the extension to dismiss
    the software keyboard when the *return* key is tapped after you have finished
    entering text in the text field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after the `textFieldShouldReturn(_:)` method to dismiss
    the software keyboard when the *return* key is tapped after you have finished
    entering text in the text view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you tap a text field or text view on the screen, it gains first responder
    status, and a software keyboard pops up from the bottom of the screen. Anything
    you type on the keyboard will go to whichever object has first responder status.
    After implementing the preceding methods, tapping *return* on the software keyboard
    while in a text field or text view will tell it to resign the first responder
    status, which will automatically make the keyboard disappear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app and tap the text field. If the software keyboard does
    not appear, choose **Keyboard** | **Toggle Software Keyboard** from Simulator’s
    **I/O** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.12: Simulator I/O menu with Keyboard | Toggle Software Keyboard selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the software keyboard to type some text into the text field or text view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.13: Simulator showing the software keyboard'
  prefs: []
  type: TYPE_NORMAL
- en: After typing some text in either the text field or the text view, tap *return*
    on the software keyboard, and it should automatically disappear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first issue has been resolved, and the user is now able to dismiss the
    software keyboard. Great! Now you will modify your app so that the user can only
    tap **Save** if there is text in the text field and text view. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable or disable the **Save** button, you will need to be able to set its
    state. Type in the following after the outlet declarations to create an outlet
    for the **Save** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Project navigator, click the **Main** storyboard file and click **New
    Entry Scene** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button and drag from the **saveButton** outlet
    to the **Save** button in the **New Entry** scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.14: Connections inspector showing the saveButton outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file.
    Add the `UITextFieldDelegate` method shown after the `textFieldShouldReturn(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method disables the **Save** button when the user starts editing text in
    the text field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UITextViewDelegate` method shown after the `textView(_:shouldChangeTextIn
    range:replacementText:)` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method disables the **Save** button when the user starts editing text in
    the text view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a method to enable the **Save** button if there is text in the text field
    or text view before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `private` keyword means that this method is only accessible within this
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UITextFieldDelegate` method shown after the `textFieldDidBeginEditing(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method calls `updateSaveButtonState()` after the text field resigns the
    first responder status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UITextViewDelegate` methods shown after the `textViewDidBeginEditing(_:)`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These methods call `updateSaveButtonState()` after the text view resigns the
    first responder status and when the contents of the text view change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `viewDidLoad()` method, call `updateSaveButtonState()` to disable the
    **Save** button when the Add New Journal Entry screen first appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build and run your project and tap the **+** button to go to the Add Entry
    screen. The **Save** button will be disabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.15: Simulator showing the Save button disabled'
  prefs: []
  type: TYPE_NORMAL
- en: Enter some text in the text field and press the *return* key. As there is already
    placeholder text in the text view, the **Save** button will be enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both issues with the Add New Journal Entry screen have been resolved. Fantastic!
    In the next section, you’ll learn how to pass data from the Journal List screen
    to the Journal Entry Detail screen when you tap a table view row.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data from the Journal List screen to the Journal Entry Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As shown in the app tour in *Chapter 10*, *Setting Up the User Interface*, the
    Journal Entry Detail screen allows the user to view the details of a journal entry
    when a table view cell on the Journal List screen is tapped. For this to work,
    you’ll create a view controller subclass to manage the Journal Entry Detail screen.
    Next, you’ll implement the `prepare(for:sender:)` method for the `JournalListViewController`
    class to get the `JournalEntry` instance corresponding to the row that was tapped.
    You will then pass this instance to the view controller instance managing the
    Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start by creating a new view controller instance to manage the Journal
    Entry Detail screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the JournalEntryDetailViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At present, the Journal Entry Detail screen does not have a view controller.
    You’ll add a new file to your project and implement the `JournalEntryDetailViewController`
    class, assign it as the identity for the **Entry Detail** **Scene**, and connect
    the outlets. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project navigator, create a new group by right-clicking the **JRNL**
    group and choosing **New Group**. Name this group **Journal Entry Detail Screen**
    and move it below the **Add New Journal Entry Screen** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Journal Entry Detail Screen** group and select **New File
    from Template...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the class with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Class**: `JournalEntryDetailViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subclass**: `UITableViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Also create XIB**: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** and the`JournalEntryDetailViewController` file will appear
    in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With that, the `JournalEntryDetailViewController` file has been created, with
    the `JournalEntryDetailViewController` class declaration inside it. Now you’ll
    set the identity of the view controller scene that’s presented when you tap a
    table view cell on the Journal List screen. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Main** storyboard file in the Project navigator and choose **Entry
    Detail Scene** in the document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button and, under **Custom Class**, set **Class**
    to `JournalEntryDetailViewController`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.16: Identity inspector settings for Entry Detail Scene'
  prefs: []
  type: TYPE_NORMAL
- en: Cool! In the next section, you’ll connect the user interface elements in the
    **Entry Detail Scene** to outlets in the `JournalEntryDetailViewController` class.
    By doing this, the `JournalEntryDetailViewController` instance will be able to
    display the details for the journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting the UI elements to the JournalEntryDetailViewController class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the `JournalEntryDetailViewController` instance for the Journal
    Entry Detail screen has no way of communicating with the UI elements in it. You’ll
    create outlets in the `JournalEntryDetailViewController` class and assign the
    corresponding UI elements in the **Entry Detail Scene** to each outlet. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project navigator, click the **JournalEntryDetailViewController** file
    and remove all the code between the curly braces except for the `viewDidLoad()`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following properties to the `JournalEntryDetailViewController` class
    after the opening curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Main** storyboard file and select **Entry Detail Scene** in the
    document outline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Connections inspector button and drag from the **dateLabel** outlet
    to the first label in **Entry Detail Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.17: Connections inspector showing the dateLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **titleLabel** outlet to the second label in **Entry Detail Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.18: Connections inspector showing the titleLabel outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **bodyTextView** outlet to the text view in **Entry Detail Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.19: Connections inspector showing the bodyTextView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag from the **photoImageView** outlet to the image view in **Entry Detail
    Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.20: Connections inspector showing the photoImageView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you make a mistake, you can click the **x** to break the connection
    and drag from the outlet to the UI element once more.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now successfully connected the UI elements in the **Entry Detail** **Scene**
    to the outlets in the `JournalEntryDetailViewController` class. In the next section,
    you will implement the code to display the details of a `JournalEntry` instance
    when the user taps a table view cell on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the details of a journal entry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Until this point, you have implemented the `JournalEntryDetailViewController`
    class and connected the outlets in this class to the labels, text view, and image
    view in the **Entry Detail** **Scene**. When the user taps a table view cell on
    the Journal List screen, you’ll get the corresponding `JournalEntry` instance
    from the data source and pass it to the `JournalEntryDetailViewController` instance
    to display on the Journal Entry Detail screen. To do this, you will implement
    the `prepare(for:sender:)` method in the `JournalListViewController` class. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **Main** storyboard file and click the
    segue connecting **Journal Scene** and **Entry Detail Scene**. Click the Attributes
    inspector button and, under **Storyboard Segue**, set **Identifier** to `entryDetail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.21: Attributes inspector showing Identifier set to entryDetail'
  prefs: []
  type: TYPE_NORMAL
- en: You will use this identifier later to identify the segue used to go from the
    **Journal** **Scene** to the **Entry Detail** **Scene**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **JournalEntryDetailViewController** file in the Project navigator
    and add the following property to the `JournalEntryDetailViewController` class
    after the outlet declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `JournalEntry` instance that you pass to the `JournalEntryDetailViewController`
    instance will be assigned to the `selectedJournalEntry` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **JournalListViewController** file in the Project navigator and implement
    the `prepare(for:sender:)` method in the `JournalListViewController` class after
    the table view delegate methods, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code checks to see if the correct segue is being used, if not, the method
    exits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This code checks that the destination view controller is an instance of `JournalEntryDetailViewController`,
    gets the table view cell the user tapped, and gets the index path of that cell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This statement gets the corresponding `JournalEntry` instance from the `journalEntries`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This statement assigns the `JournalEntry` instance to the destination view controller’s
    `selectedJournalEntry` property.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now added code that will pass the journal entry corresponding to the
    table view cell tapped by the user to the `JournalEntryDetailViewController` instance
    when transitioning from the Journal List screen to the Journal Entry Detail screen.
    In the next section, you’ll modify the `JournalEntryDetailViewController` class
    to display the details of a journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the details of a selected journal entry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When transitioning to the Journal Entry Detail screen, the `JournalEntry` instance
    corresponding to the table view cell that the user tapped will be assigned to
    the `JournalEntryDetailViewController` instance’s `selectedJournalEntry` property.
    You will add code to the `JournalEntryDetailViewController` class to access this
    property and display the details for a journal entry. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntryDetailViewController** file
    and modify the `JournalEntryDetailViewController` class’s `viewDidLoad()` method
    as shown to display the details of the journal entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the properties of the `JournalEntry` instance that was passed
    to this view controller earlier are used to populate the user interface elements.
    Note that the `date` property needs to be formatted into a string before it can
    be assigned to the `dateLabel text` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your project and tap a table view cell. The details of the journal
    entry corresponding to that table view cell will be displayed on the Journal Entry
    Detail screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_16_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.22: Simulator displaying the Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully implemented a view controller for the
    Journal Entry Detail screen. You will now be able to display journal entry details
    in it when the user taps a table view cell on the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to pass data from one view controller to another.
    You implemented a view controller for the Add New Journal Entry screen, then you
    added code to pass data from the Add New Journal Entry screen to the Journal List
    screen. Next, you learned how to remove journal entries while you’re on the Journal
    List screen. After that, you learned about text field and text view delegate methods,
    and finally, you learned how to pass data from the Journal List screen to the
    Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to pass data between view controllers and how to use text field
    and text view delegate methods. This will enable you to easily pass data between
    view controllers in your own apps. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will add a view controller to the Map screen and configure
    it to display journal entry locations using map annotations. You’ll also configure
    the map annotations to display the Journal Entry Detail screen when a button in
    the annotation callout is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
