- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animations and Transitions with CoordinatorLayout and MotionLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to animations and how to handle changing between
    layouts. It offers a description of moving objects using `MotionLayout` and the
    Motion Editor in Android, along with a detailed explanation of constraint sets.
    The chapter also covers modifying paths and adding keyframes to a frame’s motion.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create animations using `CoordinatorLayout`
    and `MotionLayout` and use the Motion Editor in Android Studio to create `MotionLayout`
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about architecture patterns such as MVVM.
    You now know how to improve the architecture of an app. Next, we will learn how
    to use animations to enhance our app’s look and feel and make it different and
    better than other apps.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the apps we develop can look a little plain, so we can include some
    moving parts and delightful animations in our apps to make them livelier and the
    UI and user experience better. For example, we can add visual cues so that a user
    will not be confused about what to do next and can be guided through what steps
    they can take.
  prefs: []
  type: TYPE_NORMAL
- en: Animations while loading can entertain a user while content is being fetched
    or processed. Pretty animations when the app encounters an error can help prevent
    users from getting angry about what has happened and can inform them of what options
    they have.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll start by looking at some of the traditional ways of doing
    animations with Android. We’ll end the chapter by looking at the newer `MotionLayout`
    option. Let’s get started with activity transitions, which are one of the easiest
    and most used animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Activity transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations with `CoordinatorLayout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations with `MotionLayout`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete code for all the exercises and the activity in this chapter is
    available on GitHub at [https://packt.link/G8RoL](https://packt.link/G8RoL)
  prefs: []
  type: TYPE_NORMAL
- en: Activity transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When opening and closing an activity, Android will play a default transition.
    We can customize the activity transition to reflect the brand and/or differentiate
    our app. Activity transitions are available, starting with Android 5.0 Lollipop
    (API level 21).
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity transitions have two parts – the enter transition and the exit transition.
    The enter transition defines how the activity and its views will be animated when
    the activity is opened. The exit transition, meanwhile, describes how the activity
    and views are animated when the activity is closed, or a new activity is opened.
    Android supports the following built-in transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Explode**: This moves views in or out from the center'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fade**: This view slowly appears or disappears'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slide**: This moves views in or out from the edges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s see how we can add activity transitions in the following section.
    There are two ways to add activity transitions – through XML and through code.
    First, we will learn how to add transitions via XML, and then via code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding activity transitions through XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add activity transitions through XML. The first step is to enable window
    content transitions. This is done by adding the following in the activity’s theme
    in `themes.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can then add the enter and exit transitions with the `android:windowEnterTransition`
    and `android:windowExitTransition` style attributes. For example, if you want
    to use the default transitions from `@android:transition/`, the attributes you
    will need to add are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `themes.xml` file would then look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Activity transitions are enabled with `<``item name="android:windowActivityTransitions"`
    **>true</item>**. The `<item name="android:windowEnterTransition">@android:transition/slide_left</item>`
    attribute sets the enter transition, while `@android:transition/explode` is the
    exit transition file, as set by the `<item` `name="android:windowExitTransition">@android:transition/explode</item>`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to add activity transitions through
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: Adding activity transitions through code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity transitions can also be added programmatically. The first step is
    to enable window content transitions. You can do that by calling the following
    function in your activity before the call to `setContentView()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add the enter and exit transactions afterward with `window.enterTransition`
    and `window.exitTransition` respectively. We can use the built-in `Explode()`,
    `Slide()`, and `Fade()` transitions from the `android.transition` package. For
    example, if we want to use `Explode()` as an enter transition and `Slide()` as
    an exit transition, we can add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Remember to wrap these calls with a check for `Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP`
    if your app’s minimum supported SDK is lower than 21.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to add entry and exit activity transitions through code
    or XML, you need to learn how to activate the transition when opening the activity.
    We will do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an activity with an activity transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added activity transitions to an activity (either through XML
    or by coding), you can activate the transition when opening the activity. Instead
    of the `startActivity(intent)` call, you should pass in a bundle with the transition
    animation. To do that, start your activity with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `ActivityOptions.makeSceneTransitionAnimation(this).toBundle()` argument
    will create a bundle with the enter and exit transition we specified for the activity
    (via XML or with code).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try out what we have learned so far by adding activity transitions to
    an app.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.01 – creating activity transitions in an app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many establishments, it is common to leave a tip (often called a **gratuity**).
    This is a sum of money given to show appreciation for a service – for example,
    to the waiting staff in a restaurant. The tip is provided in addition to the basic
    charge denoted on the final bill.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will be working with an application that calculates
    the amount that should be given as a tip. This value will be based on the amount
    of the bill (the basic charge) and the extra percentage that the user wants to
    give. The user will input both values, and the app will calculate the tip value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we will be customizing the activity transition between the
    input and the output screen:'
  prefs: []
  type: TYPE_NORMAL
- en: In Android Studio, open the Tip Calculator project in the `Chapter16` directory
    from the book code repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application. Tap on the `OutputActivity` and going back. There is a
    default animation while `MainActivity` is being closed and `OutputActivity` is
    being opened and closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let’s start adding transition animations. Open `themes.xml` and update
    the activity theme with the `windowActivityTransitions`, `windowEnterTransition`,
    and `windowExitTransition` style attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will enable the activity transition, add an explode enter transition, and
    add a slide left exit transition to the activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the `MainActivity` file and replace `startActivity(intent)` with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will open `OutputActivity` with the transition animation we specified in
    the XML file (which we set in the previous step).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application. You will see that the animation when opening and closing
    `MainActivity` and `OutputActivity` has changed. When the Android UI opens `OutputActivity`,
    note that the text is moving toward the center. While closing, the views slide
    to the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.1 – The app screens – the input screen (on the left) and the output
    screen (on the right)](img/B19411_16_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – The app screens – the input screen (on the left) and the output
    screen (on the right)
  prefs: []
  type: TYPE_NORMAL
- en: We have added an activity transition to an app. When we open a new activity,
    the new activity’s enter transition will be played. Its exit transition will play
    when the activity is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, when we open another activity from one activity, there is a common
    element that is present in both activities. In the next section, we will learn
    about adding this shared element transition.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a shared element transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are times when an application moves from one activity to another and there
    is a common element that is present in both activities. We can add an animation
    to this shared element to highlight to users the link between the two activities.
  prefs: []
  type: TYPE_NORMAL
- en: In a movie application, for example, an activity with a list of movies (with
    a thumbnail image) can open a new activity with details of the selected movie,
    along with a full-sized image at the top. Adding a shared element transition for
    the image will link the thumbnail on the list activity to the image on the details
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: The shared element transition has two parts – the enter transition and the exit
    transition. These transitions can be done through XML or code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to enable a window content transition. You can do this by
    adding the activity’s theme to `themes.xml` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also do this programmatically by calling the following function in
    your activity before the call to `setContentView()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `android:windowContentTransitions` attribute with a `true` value and `window.requestFeature(Window.FEATURE_CONTENT_TRANSITIONS)`
    will enable the window content transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Afterward, you can add the shared element enter transition and the shared element
    exit transition. If you have `enter_transition.xml` and `exit_transition.xml`
    in your `res/transitions` directory, you can add the shared element enter transition
    by adding the following style attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also do this through code with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `windowSharedElementEnterTransition` attribute and `window.shared` **ElementEnterTransition**
    will set our enter transition to the `enter_transition.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the shared element exit transition, you can add the following style
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be done programmatically with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `windowSharedElementExitTransition` attribute and `window.sharedElement`
    **ExitTransition** will set our exit transition to the `exit_transition.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: You have learned how to add shared element transitions. In the next section,
    we’ll learn how to start an activity with the shared element transition.
  prefs: []
  type: TYPE_NORMAL
- en: Starting an activity with the shared element transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have added the shared element transition to an activity (either through
    XML or programmatically), you can activate the transition when opening the activity.
    Before you do that, add a `transitionName` attribute. Set its value as the same
    text for the shared element in both activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in `ImageView`, we can add a `transition_name` value for the `transitionName`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the activity with shared elements, we will be passing in a bundle
    with the transition animation. To do that, start your activity with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `ActivityOptions.makeSceneTransitionAnimation(this, sharedImage, "transition_name").toBundle()`
    argument will create a bundle with the shared element (`sharedImage`) and the
    transition name (`transition_name`).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have more than one shared element, you can pass the variable arguments
    of `Pair<View, String>` of `View`, and the transition name `String` instead. For
    example, if we have the view’s button and image as shared elements, we can do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will start the activity with two shared elements (the button and image).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember to import `android.util.Pair` instead of `kotlin.Pair`, as `makeSceneTransitionAnimation`
    is expecting the pair from the Android SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try out what we have learned so far by adding shared element transitions
    to the *Tip* *Calculator* app.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.02 – creating the shared element transition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first exercise, we customized the activity transitions for `MainActivity`
    and `OutputActivity`. In this exercise, we will be adding an image to both activities.
    This shared element will be animated when moving from the input screen to the
    output screen. We’ll be using the app launcher icon (`res/mipmap/ic_launcher`)
    for `ImageView`. You can change yours instead of using the default one:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Tip Calculator` project we developed in the previous exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `activity_main.xml` file and add `ImageView` at the top of the amount
    text field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code for this step can be found at [https://packt.link/NvDO2](https://packt.link/NvDO2).
  prefs: []
  type: TYPE_NORMAL
- en: The `transitionName` value of `transition_name` will be used to identify this
    as a shared element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the top constraint of the `TextInputLayout` with ID `amount_text_layout`
    by changing `app:layout_constraintTop_toTopOf="parent"` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will move the `amount_text_layout` below the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `activity_output.xml` file and add an image above the tip `TextView`,
    with a height and width of 200 dp and a `scaleType` of `fitXY` to fit the image
    to the dimensions of `ImageView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code for this step can be found at [https://packt.link/jpgVe](https://packt.link/jpgVe).
  prefs: []
  type: TYPE_NORMAL
- en: The `transitionName` value of `transition_name` is the same as the value for
    `ImageView` from `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `MainActivity` and change the `startActivity` code to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will start a transition from `ImageView` in `MainActivity`, with the ID
    image transitioning to another `ImageView` in `OutputActivity`, whose `transitionName`
    value is also `transition_name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application. Provide an amount and percentage, and then tap on the
    `OutputActivity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.2 – The app screens – the input screen (on the left) and the output
    screen (on the right)](img/B19411_16_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – The app screens – the input screen (on the left) and the output
    screen (on the right)
  prefs: []
  type: TYPE_NORMAL
- en: We have learned about adding activity transitions and shared element transitions.
    Now, let’s look into animating views inside a layout. If we have more than one
    element inside, it might be difficult to animate each element. `CoordinatorLayout`
    can be used to simplify this animation. We will discuss this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Animations with CoordinatorLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`CoordinatorLayout` is a layout that handles the motions between its child
    views. When you use `CoordinatorLayout` as the parent view group, you can animate
    the views inside it with little effort. You can add `CoordinatorLayout` to your
    project by adding your `app/build.gradle` file dependencies with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This will allow us to use `CoordinatorLayout` in our layout files.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have a layout file with a floating action button inside `CoordinatorLayout`.
    When tapping on the floating action button, the UI displays a `Snackbar` message.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`Snackbar` is an Android widget that provides a brief message to a user at
    the bottom of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use any layout other than `CoordinatorLayout`, `Snackbar` with its message
    will be rendered on top of the floating action button. If we use `CoordinatorLayout`
    as the parent view group, the layout will push the floating action button upwards,
    display `Snackbar` below it, and move it back when `Snackbar` disappears. *Figure
    16**.3* shows how the layout adjusts to prevent `Snackbar` from being on top of
    the floating action button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3 – The left screenshot displays the UI before and after the Snackbar
    message is shown. The screenshot on the right shows the UI while the Snackbar
    is visible](img/B19411_16_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – The left screenshot displays the UI before and after the Snackbar
    message is shown. The screenshot on the right shows the UI while the Snackbar
    is visible
  prefs: []
  type: TYPE_NORMAL
- en: The floating action button moves and gives space to the `Snackbar` message because
    it has a default behavior called `FloatingActionButton.Behavior`, a subclass of
    `CoordinatorLayout.Behavior`. The `FloatingActionButton.Behavior` subclass moves
    the floating action button while `Snackbar` is being displayed so that `Snackbar`
    won’t cover the floating action button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all views have the `CoordinatorLayout` behavior. To implement custom behavior,
    you can start by extending `CoordinatorLayout.Behavior`. You can then attach it
    to the view with the `layout_behavior` attribute. For example, if we made `CustomBehavior`
    in the `com.example.behavior` package for a button, we can update the button in
    the layout with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We have learned how to create animations and transitions with `CoordinatorLayout`.
    In the next section, we will look into another layout, `MotionLayout`, which allows
    developers more control over motion.
  prefs: []
  type: TYPE_NORMAL
- en: Animations with MotionLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating animations in Android is sometimes time-consuming. You need to work
    on XML and code files even to create simple animations. More complicated animations
    and transitions take even more time to make.
  prefs: []
  type: TYPE_NORMAL
- en: To help developers easily make animations, Google created `MotionLayout`. This
    is a new way to create motion and animations through XML. It is available starting
    at API level 14 (Android 4.0).
  prefs: []
  type: TYPE_NORMAL
- en: With `MotionLayout`, we can animate the position, width/height, visibility,
    alpha, color, rotation, elevation, and other attributes of one or more views.
    Normally, some of these are hard to do with code, but `MotionLayout` allows us
    to easily adjust them using declarative XML so that we can focus more on our application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started by adding `MotionLayout` to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding MotionLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add `MotionLayout` to your project, you just need to add the dependency
    for `ConstraintLayout 2.0`. `ConstraintLayout 2.0` is the new version of `ConstraintLayout`,
    with new features added, including `MotionLayout`. Add to your app/`build.gradle`
    file dependencies with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will add the latest version of ConstraintLayout (2.1.4 at the time of writing)
    to your app.
  prefs: []
  type: TYPE_NORMAL
- en: After adding the dependency, we can now use `MotionLayout` to create animations.
    We’ll be doing that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating animations with MotionLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MotionLayout` is a subclass of our good old friend ConstraintLayout. To create
    animations with `MotionLayout`, open the layout file where we will add the animations.
    Replace the root `ConstraintLayout` container with `androidx.constraintlayout.motion.widget.MotionLayout`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The animation itself won’t be in the layout file but in another XML file, called
    `motion_scene`. This will specify how `MotionLayout` will animate the views inside
    it. `motion_scene` files should be placed in the `res/xml` directory. The layout
    file will link to this `motion_scene` file with the `app:layoutDescription` attribute
    in the root view group. Your layout file should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To create animations with `MotionLayout`, we must have the initial state and
    final state of our views. `MotionLayout` will automatically animate the transition
    between the two. You can specify these two states in the same `motion_scene` file.
    If you have a lot of views inside the layout, you can also use two different layouts
    for the beginning and ending states of the animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The root container of the `motion_scene` file is `motion_scene`. This is where
    we add the constraints and animation for `MotionLayout`. It contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ConstraintSet**: Specifies the beginning and ending position and style for
    the view/layout to animate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition**: Specifies the start, end, duration, and other details of the
    animation to be done on the views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s try adding animations with `MotionLayout` by adding it to our *Tip* *Calculator*
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.03 – adding animations with MotionLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will be updating our *Tip Calculator* app with a `MotionLayout`
    animation. In the output screen, the image above the tip text will move down when
    tapped and will go back to its original position when tapped again:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the *Tip Calculator* project in Android Studio 4.0 or higher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `activity_output.xml` file and change the root `ConstraintLayout`
    tag to `MotionLayout`. Change `androidx.constraintlayout.widget.ConstraintLayout`
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `app:layoutDescription="@xml/motion_scene"` to the `MotionLayout` tag.
    The IDE will warn you that this file does not yet exist. Ignore that for now,
    as we will be adding it in the next step. Your file should look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `motion_scene.xml` file in the `res/xml` directory. This will be our
    `motion_scene` file where the animation configuration will be defined. Use `motion_scene`
    as the root element for the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the starting `Constraint` element by adding the following to the `motion_scene`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code for this step can be found at [https://packt.link/jdJrD](https://packt.link/jdJrD).
  prefs: []
  type: TYPE_NORMAL
- en: This is how the image looks at the current position (constrained to the top
    of the screen).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the ending `Constraint` element by adding the following to the `motion_scene`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The complete code for this step can be found at [https://packt.link/jdJrD](https://packt.link/jdJrD).
  prefs: []
  type: TYPE_NORMAL
- en: In the ending animation, `ImageView` will be at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now add in the transition for our `ImageView` after the `ConstraintSet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we’re specifying the start and end constraints, which will animate for
    2,000 milliseconds (2 seconds). We also added an `OnClick` event to `ImageView`.
    The toggle will animate the view from start to end, and if the view is already
    in the end state, it will animate back to the start state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the application and tap on `ImageView`. It will move straight downward
    in around 2 seconds. Tap it again, and it will move back up in 2 seconds. *Figure
    16**.4* shows the start and the end of this animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.4 – The starting animation (left) and the ending animation (right)](img/B19411_16_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – The starting animation (left) and the ending animation (right)
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we have animated `ImageView` in `MotionLayout` by specifying
    the start constraint, end constraint, and transition with a duration and `OnClick`
    event. `MotionLayout` automatically plays the animation from the start to the
    end position (which to us looks like it’s moving up or down in a straight line
    automatically when tapped).
  prefs: []
  type: TYPE_NORMAL
- en: We have created animations with `MotionLayout`. In the next section, we will
    be using Android Studio’s Motion Editor to create `MotionLayout` animations.
  prefs: []
  type: TYPE_NORMAL
- en: The Motion Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android Studio, starting with version 4.0, includes the Motion Editor. The Motion
    Editor can help developers create animations with `MotionLayout`. This makes it
    easier for developers to create and preview transitions and other motions, instead
    of doing it by hand and running the app to see the changes. The editor will also
    generate the corresponding files automatically.
  prefs: []
  type: TYPE_NORMAL
- en: You can convert your ConstraintLayout to `MotionLayout` in the Layout Editor
    by right-clicking the preview and clicking on the **Convert to MotionLayout**
    item. Android Studio will do the conversion and also create the motion scene file
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'When viewing a layout file that has `MotionLayout` as the root in the **Design**
    view, the Motion Editor UI will be included in the **Design** view, as shown in
    *Figure 16**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5 – The Motion Editor in Android Studio 4.0](img/B19411_16_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.5 – The Motion Editor in Android Studio 4.0
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper-right window (the `MotionLayout` and the start and end constraint.
    The transition is displayed as an arrow coming from the start constraint. The
    dot near the start constraint shows the click action for the transition. *Figure
    16**.6* shows the `start_constraint` selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6 – The Motion Editor’s Overview panel with start_constraint selected](img/B19411_16_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.6 – The Motion Editor’s Overview panel with start_constraint selected
  prefs: []
  type: TYPE_NORMAL
- en: 'The bottom-right window is the `MotionLayout` selected in the `start_constraint`
    is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7 – The Motion Editor’s Selection panel showing ConstraintSet for
    start_constraint](img/B19411_16_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.7 – The Motion Editor’s Selection panel showing ConstraintSet for
    start_constraint
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on `MotionLayout` on the left of the **Overview** panel, the
    **Selection** panel below will display the views and their constraints, as shown
    in *Figure 16**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8 – The Overview and Selection panels when MotionLayout is selected](img/B19411_16_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.8 – The Overview and Selection panels when MotionLayout is selected
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on `start_constraint` or `end_constraint`, the preview window
    on the left will display how the start or end state looks. The `start_constraint`
    is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9 – How the Motion Editor looks when start_constraint is selected](img/B19411_16_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.9 – How the Motion Editor looks when start_constraint is selected
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16**.10* shows how the Motion Editor will look if you select `end_constraint`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.10 – How the Motion Editor looks with end_constraint selected](img/B19411_16_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.10 – How the Motion Editor looks with end_constraint selected
  prefs: []
  type: TYPE_NORMAL
- en: 'The arrow connecting `start_constraint` and `end_constraint` represents the
    transition of `MotionLayout`. On the **Selection** panel, there are controls to
    play or go to the first or last state. You can also drag the arrow to a specific
    position. *Figure 16**.11* shows how it looks in the middle (50% of the animation):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11 – The transition in the middle of the animation](img/B19411_16_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.11 – The transition in the middle of the animation
  prefs: []
  type: TYPE_NORMAL
- en: During the development of animations with `MotionLayout`, it would be better
    if we could debug the animations to make sure we’re doing the animations correctly.
    We’ll discuss how we can do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging MotionLayout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To help you visualize the `MotionLayout` animation before running the app, you
    can show the motion path and the animation’s progress in the Motion Editor. The
    motion path is the straight route that the object to animate will take from the
    start to the end state.
  prefs: []
  type: TYPE_NORMAL
- en: To show the path and/or progress animation, we can add a `motionDebug` attribute
    to the `MotionLayout` container.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following values for `motionDebug`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SHOW_PATH`: This displays the path of the motion only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHOW_PROGRESS`: This displays the animation progress only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SHOW_ALL`: This displays both the path and the progress of the animation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_DEBUG`: This hides all animations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To display the `MotionLayout` path and progress, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SHOW_ALL` value will display the path and the progress of the animation.
    *Figure 16**.12* shows how it will look when we use `SHOW_PATH` and `SHOW_PROGRESS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.12 – Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress](img/B19411_16_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.12 – Using SHOW_PATH (left) shows the animation path, while SHOW_PROGRESS
    (right) shows the animation progress
  prefs: []
  type: TYPE_NORMAL
- en: While `motionDebug` sounds like something that only appears in debug mode, it
    will also appear in release builds, so it should be removed when you’re preparing
    your app for publishing.
  prefs: []
  type: TYPE_NORMAL
- en: During the `MotionLayout` animation, the start constraint will transition to
    the end constraint, even if there’s an element or elements that can block the
    objects in motion. We’ll discuss how we can avoid this from happening in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the MotionLayout path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In an animation with `MotionLayout`, the UI will play the motion from the start
    constraint to the end constraint, even if there are elements in the middle that
    can block our moving views. For example, if `MotionLayout` involves text that
    moves from the top to the bottom of the screen and vice versa, and we add a button
    to the middle, the button will cover the moving text.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16**.13* shows how the **OK** button blocks the moving text in the
    middle of the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.13 – The OK button is blocking the middle of the text animation](img/B19411_16_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.13 – The OK button is blocking the middle of the text animation
  prefs: []
  type: TYPE_NORMAL
- en: '`MotionLayout` plays the animation from the start to the end constraint in
    a straight path and adjusts the views, based on the specified attributes. We can
    add keyframes between the start and end constraints to adjust the animation path
    and/or the view attributes. For example, during the animation, as well as changing
    the position of the moving text to avoid the button, we can also change the attributes
    of the text or other views.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keyframes can be added in `KeyFrameSet` as a child of the transition attribute
    of `motion_scene`. We can use the following keyframes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyPosition`: This specifies the view’s position at a specific point during
    the animation to adjust the path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyAttribute`: This specifies the view’s attributes at a specific point during
    the animation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyCycle`: This adds oscillations during animations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyTimeCycle`: This allows cycles to be driven by time instead of animation
    progress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyTrigger`: This adds an element that can trigger an event based on the animation
    progress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will focus on `KeyPosition` and `KeyAttribute`, as `KeyCycle`, `KeyTimeCycle`,
    and `KeyTrigger` are more advanced keyframes.
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyPosition` allows us to change the location of views in the middle of the
    `MotionLayout` animation. It has the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the position is changed. For example, 25 means it is at one-quarter
    of the animation, and 50 is the halfway point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percentX`: This specifies how much the *x* value of the path will be modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percentY`: This specifies how much the *y* value of the path will be modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyPositionType`: This specifies how `KeyPosition` modifies the path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `keyPositionType` attribute can have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parentRelative`: `percentX` and `percentY` are specified based on the parent
    of the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pathRelative`: `percentX` and `percentY` are specified based on the straight
    path from the start constraint to the end constraint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deltaRelative`: `percentX` and `percentY` are specified based on the position
    of the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we want to modify the path of `TextView` with the `text_view`
    ID at the exact middle of the animation (50%), by moving it 10% by *x* and 10%
    by *y*, relative to the parent container of `TextView`, we will have the following
    key position in `motion_scene`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Meanwhile, `KeyAttribute` allows us to change the attributes of views while
    the `MotionLayout` animation is ongoing. Some of the view attributes we can change
    are `visibility`, `alpha`, `elevation`, `rotation`, `scale`, and `translation`.
    `KeyAttribute` has the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`motionTarget`: This specifies the object controlled by the keyframe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framePosition`: Numbered from 1 to 99, this specifies the percentage of the
    motion when the view attributes are applied. For example, 20 means it is one-fifth
    of the animation, and 75 is the three-quarter point of the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s try adding keyframes to the *Tip Calculator* app. When the `ImageView`
    animates, it goes on top of the text displaying the tip. We’ll fix that with keyframes.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.04 – modifying the animation path with keyframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous exercise, we animated the image to move straight down when
    tapped (or upward when it’s already at the bottom). When it is in the middle,
    the image is covering the tip `TextView`. We’ll be solving this issue in this
    exercise by adding `KeyFrame` to `motion_scene` using Android Studio’s Motion
    Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the *Tip Calculator* app with Android Studio 4.0 or higher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `activity_output.xml` file in the `res/layout` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `app:motionDebug="SHOW_ALL"` to the `MotionLayout` container. This will
    allow us to see the path and progress information in Android Studio and on our
    device/emulator. Your `MotionLayout` container will look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app and make a computation. On the output screen, tap on the image.
    Look at the tip text while the animation is in progress. Note that the text is
    covered by the image in the middle of the animation, as shown in *Figure 16**.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.14 – The image hides the TextView displaying the tip](img/B19411_16_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.14 – The image hides the TextView displaying the tip
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the `activity_output.xml` file in Android Studio. Make sure it’s
    opened in the **Design** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `start_constraint` and `end_constraint`. Drag the down arrow in the
    **Selection** panel to the middle (50%), as shown in *Figure 16**.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.15 – Selecting the arrow representing  transition between  start
    and end constraints](img/B19411_16_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.15 – Selecting the arrow representing transition between start and
    end constraints
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Create KeyFrames** icon to the right of **Transition** in the **Selection**
    panel (the one with a green **+** symbol), as shown in *Figure 16**.16*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.16 – The Create KeyFrames icon](img/B19411_16_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.16 – The Create KeyFrames icon
  prefs: []
  type: TYPE_NORMAL
- en: Select **KeyPosition**. We will be using **KeyPosition** to adjust the image
    in the output screen so that it will not overlap with the text containing the
    tip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `50`. The type is `parentRelative`, and the `1.5`, as shown in *Figure
    16**.17*. This will add a **KeyPosition** attribute for the image in the middle
    (50%) of the transition, which is 1.5 times relative to the *x* axis of the parent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17 – Provide the input to the key position to be made](img/B19411_16_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.17 – Provide the input to the key position to be made
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ImageView`. That will now be to the right of `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.18 – Path will now be curved;  Transition panel will have new item
    for KeyPosition](img/B19411_16_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.18 – Path will now be curved; Transition panel will have new item
    for KeyPosition
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the play icon to see how it will animate. Run the application to verify
    it on a device or emulator. You will see that the animation is now curving to
    the right instead of taking its previous straight path, as shown in *Figure 16**.19*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.19 – The animation now avoids TextView with the tip](img/B19411_16_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.19 – The animation now avoids TextView with the tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The Motion Editor will automatically generate the code for `KeyPosition`. If
    you go to the `motion_scene.xml` file, you will see that the Motion Editor added
    the following code in the transition attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `KeyPosition` attribute was added to the keyframes during the transition.
    At 50% of the animation, the image’s *x* position is moved 1.5 times relative
    to its parent view. This allows the image to avoid other elements during the animation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you have added a key position that will adjust the `MotionLayout`
    animation, ensuring that it will not block or be blocked by another view in its
    path.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s test everything you’ve learned by doing another activity.
  prefs: []
  type: TYPE_NORMAL
- en: Activity 16.01 – Password Generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a strong password is important to secure our online accounts. It must
    be unique and must include uppercase and lowercase letters, numbers, and special
    characters. In this activity, you will develop an app that can generate a strong
    password.
  prefs: []
  type: TYPE_NORMAL
- en: The app will have two screens – the input screen and the output screen. In the
    input screen, a user can provide the length of a password and specify whether
    it must have uppercase or lowercase letters, numbers, or special characters.
  prefs: []
  type: TYPE_NORMAL
- en: The output screen will display three possible passwords, and when the user selects
    one, the other passwords will move away, and a button will display to copy the
    password to the clipboard. You should customize the transition from the input
    screen to the output screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to complete are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio 4.0 or higher and name it `Password Generator`.
    Set its package name and **Minimum SDK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `MaterialComponents` dependency to your `app/build.gradle` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the dependency for `ConstraintLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the activity’s theme uses one from `MaterialComponents` in the
    `themes.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `activity_main.xml` file, remove the `Hello World` `TextView` and add
    the input text field for the length.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the code for checkboxes for uppercase, numbers, and special characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Generate** button at the bottom of the checkboxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another activity and name it `OutputActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the activity transition from the input screen (`MainActivity`) as
    `OutputActivity`. Open `themes.xml` and update the activity theme with the `windowActivityTransitions`,
    `windowEnterTransition`, and `windowExitTransition` style attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the end of the `onCreate` function in `MainActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the code for `androidx.constraintlayout.widget.ConstraintLayout` in the
    `activity_output.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `app:layoutDescription="@xml/motion_scene"` and `app:motion` **Debug="SHOW_ALL"**
    to the `MotionLayout` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add three instances of `TextView` to the output activity for the three passwords
    generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Copy** button at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `generatePassword` function in `OutputActivity`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the code to generate the three passwords based on user input, and add a
    `ClickListener` component to the **Copy** button for a user to copy the selected
    password to the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `OutputActivity`, create an animation per the password `TextView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create `ConstraintSet` for the default view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `ConstraintSet` when the first, second, and third passwords are selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add `Transition` when each password is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application by going to the **Run** menu and clicking the **Run app**
    menu item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input a length, select the checkboxes for uppercase, numbers, and special characters,
    and tap on the **Generate** button. Three passwords will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select one and the rest will move out of view. A **Copy** button will also
    be displayed. Click on it and check whether the password you selected is now on
    the clipboard. The initial and final state of the output screen will be similar
    to *Figure 16**.20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.20 – The start and end state of MotionLayout in the Password Generator
    app](img/B19411_16_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.20 – The start and end state of MotionLayout in the Password Generator
    app
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [https://packt.link/By7eE](https://packt.link/By7eE).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered creating animations and transitions with `CoordinatorLayout`
    and `MotionLayout`. Animations can improve the usability of our app and make it
    stand out compared to other apps.
  prefs: []
  type: TYPE_NORMAL
- en: We started by customizing the transition when opening and closing an activity
    with activity transitions. We also learned about adding shared element transitions
    when an activity and the activity that it opens both contain the same elements,
    enabling us to highlight this link between the shared elements to users.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how we can use `CoordinatorLayout` to handle the motion of its child
    views. Some views have built-in behaviors that handle how they work inside `CoordinatorLayout`.
    You can add custom behaviors to other views too. Then, we moved on to using `MotionLayout`
    to create animations by specifying the start constraint, end constraint, and the
    transition between them. We also looked into modifying the motion path by adding
    keyframes in the middle of an animation. We learned about keyframes such as `KeyPosition`,
    which can change a view’s position, and `KeyAttribute`, which can change the view’s
    style. We also looked into using the Motion Editor in Android Studio to simplify
    the creation and previewing of animations and modifying the path.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll learn about the Google Play store. We’ll discuss
    how you can create an account and prepare your apps for release, as well as how
    you can publish them for users to download and use.
  prefs: []
  type: TYPE_NORMAL
