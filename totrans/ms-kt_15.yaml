- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Improving Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we complete the development and publishing of our app, it is important
    to always be on the lookout when using things that help improve our apps, such
    as Firebase Messaging or Crashlytics. We are going to be learning how to use Firebase
    Messaging and Crashlytics in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn step-by-step techniques on how to improve our
    apps by adding analytics—Firebase Crashlytics—and how to use cloud messaging to
    increase user engagement. We will learn how to send notifications to our apps
    from the Firebase console. Additionally, we will learn some tips and tricks for
    securing our apps to ensure that user data is not compromised.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Firebase Crashlytics to detect crashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving app engagement with Firebase Messaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow the instructions in this chapter, you will need to have Android Studio
    Hedgehog or a later version ([https://developer.android.com/studio](https://developer.android.com/studio))
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the previous chapter’s code to follow the instructions in this chapter.
    You can find the code for this chapter on GitHub at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterfifteen).
  prefs: []
  type: TYPE_NORMAL
- en: Using Firebase Crashlytics to detect crashes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crashes can happen in our apps for a variety of reasons, including common coding
    issues such as null pointer exceptions, memory leaks, and improper data handling.
    Device fragmentation caused by different device hardware configurations and different
    Android operation systems introduces compatibility issues that may at times cause
    crashes too. Network issues, insufficient resources, or mismanagement of external
    dependencies, such as third-party libraries, can cause crashes too. Sometimes,
    we can anticipate and handle them gracefully. Other times, they are unexpected
    and we need to know about them so we can fix them. Our app is already on Google
    Play Store, so at times, we might not have the luxury to debug on the devices
    that are having issues. Tools such as **Firebase Crashlytics** can help us detect
    crashes in our apps and provide us with the information we need to fix them. In
    this section, we will be setting up Firebase Crashlytics in our app and seeing
    how we can use it to detect crashes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio has a built-in Firebase tool to help us quickly add Firebase
    to our app. We can access it from **Tools** | **Firebase**, which should open
    a side panel on the right, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Firebase setup](img/B19779_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – Firebase setup
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15**.1*, we can set up a variety of Firebase SDKs from this
    tool. We are interested in setting up **Crashlytics**. Tap on the **Crashlytics**
    option and we will see the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Firebase Crashlytics setup](img/B19779_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Firebase Crashlytics setup
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our project is written in Kotlin, we are going to select **Get started
    with Firebase Crashlytics** as an option. This will open a new window with the
    following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Steps to set up Crashlytics](img/B19779_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Steps to set up Crashlytics
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen from *Figure 15**.3*, it provides all the steps necessary for us to
    set up Firebase Crashlytics in our app. Let us tap the **Connect to Firebase**
    option. This opens a new tab in our browser with the Firebase console opened (see
    *Figure 15**.4*). It shows all the Firebase projects that we have on our console
    (if we have any). Use the **Create a project** option and specify your preferred
    project name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – New Firebase project](img/B19779_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – New Firebase project
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Continue** to proceed to the next step. This will take us to the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 –Google Analytics setup](img/B19779_15_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 –Google Analytics setup
  prefs: []
  type: TYPE_NORMAL
- en: In this screen, we configure Google Analytics for our app. It also shows the
    functionalities that Google Analytics provides for our app. Google Analytics collects
    usage and behavior data for our apps. We use it for tracking user events, system
    events, or errors, analyzing app performance, collecting user properties such
    as language preference and geographic location, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Continue** to proceed to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Configuring Google Analytics](img/B19779_15_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Configuring Google Analytics
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, we configure more options for Google Analytics. We must select
    a Google Analytics account. Selecting the default account hides the other questions
    if you have already configured other projects. When done, click **Create project**
    to finalize creating the project and you will see the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Finalizing setup dialog](img/B19779_15_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Finalizing setup dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking **Connect** after our project is created finalizes the setup of Firebase
    Crashlytics with Android Studio. Let us head back to Android Studio and see what
    has changed. We can see that the Firebase Crashlytics option is now checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – App connected](img/B19779_15_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – App connected
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add the Firebase Crashlytics SDK to our app. We can do this
    by clicking the **Add Crashlytics SDK and plugin to your app** button. This will
    add the necessary dependencies to our app. You can check the Gradle files to see
    these changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all the steps complete, we can now `MainActivity.kt` file inside the `onCreate()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the app. The app will crash with the following stack trace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Crash stack trace](img/B19779_15_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – Crash stack trace
  prefs: []
  type: TYPE_NORMAL
- en: 'We can head over to our newly created project in the Firebase console and see
    if the crash has been reported. In the Firebase console, Crashlytics is normally
    found under the **Release and Monitor** section on the navigation drawer, which
    is on the left side of the screen. It shows the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Firebase console crash overview](img/B19779_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – Firebase console crash overview
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the crash has been reported. We can click on the `MainActivity.onCreate`
    crash to see more details about it. It shows the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – Firebase console crash details](img/B19779_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – Firebase console crash details
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15**.10*, we have the following details from the Firebase
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stack trace**: This shows the stack trace of the crash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device**: This shows the device that the crash happened on. We can see the
    device model, the OS version, and the device state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App version**: This shows the version of the app that crashed. It also shows
    the total number of crashes that have happened for that version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This information is very helpful when debugging crashes. Android Studio Hedgehog
    and more recent versions also have a useful tool, **App Quality Insights**, that
    helps us view the Firebase crashes right from Android Studio. We can access it
    from the bottom tool tabs, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – App Quality Insights](img/B19779_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – App Quality Insights
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15**.11*, we need to log in to our Firebase account that
    has the project we are working on. We can do this by clicking on the **Log in**
    button and completing the login process on our browser. Once logged in, we can
    see the crashes that have happened in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – App Quality Insights crash details](img/B19779_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – App Quality Insights crash details
  prefs: []
  type: TYPE_NORMAL
- en: This shows all the details, as we saw earlier in our Firebase console. We can
    see the stack trace too. The beauty of this is that we can easily navigate to
    the file and line causing the crash without having to switch context and go to
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: With Firebase Crashlytics set up, we can now detect crashes in our app and fix
    them. This will help us improve the quality of our app and make our users happy.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Remember to remove the code that we added to force a crash in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let us set up **Firebase Analytics**, which also gathers useful information
    about our app. This will help us understand how our users are using our app and
    help us make informed decisions on how to improve it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Google Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting up Google Analytics is like setting up Firebase Crashlytics. Repeat
    the following steps that you took for Firebase Crashlytics:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Firebase tool from **Tools** | **Firebase**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Analytics** from the list of options that is similar to the list we
    saw in *Figure 15**.1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Get started with Google** **Analytics** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since our app is already connected to Firebase, we can skip the first step and
    proceed to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Add Analytics to your app** button to add the necessary dependencies
    to our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Gradle sync is complete, we have finalized setting up Firebase Analytics
    in our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With that set, we can always view the analytics from the Firebase console.
    We can access it from the navigation drawer under the **Analytics** section. It
    shows the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – App analytics](img/B19779_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – App analytics
  prefs: []
  type: TYPE_NORMAL
- en: We have learned how to set up Firebase Crashlytics and Firebase Analytics in
    our app. We can now detect crashes in our app and gather useful information about
    our app. This will help us improve the quality of our app and make our users happy.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to use Firebase Cloud Messaging to send
    notifications to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Improving app engagement with Firebase Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users install our app, they might not use it again after they finish what
    they want to do. This can lead to a decline in the number of active users, which
    can have different impacts on different apps.
  prefs: []
  type: TYPE_NORMAL
- en: We can leverage **Firebase Cloud Messaging** to send notifications to our users
    to remind them of our app. This will help us improve our app’s engagement and
    increase the number of active users. In this section, we will be setting up Firebase
    Cloud Messaging in our app and see how we can use it to send notifications to
    our app users.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to set up the Firebase Cloud Messaging SDK on our app. This
    allows us to use the SDK within our project and enables our app to receive Firebase
    notifications once the setup is complete. We will do it the same way we did for
    Firebase Crashlytics and Firebase Analytics. Repeat the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Firebase tool from **Tools** | **Firebase**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Cloud Messaging** from the list of options that is similar to the list
    we saw in *Figure 15**.1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Setup Firebase Cloud** **Messaging** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since our app is already connected to Firebase, we can skip the first step and
    proceed to the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Add FCM to your app** button to add the necessary dependencies to
    the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Gradle sync is complete, the FCM SDK is already set up in our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create a new service to handle notifications when they are received
    and to also get the device token. Let us create a new package called `firebase`.
    Inside this package, let us create a new file called `FirebaseMessagingService.kt`.
    This will be our service that will handle notifications that are received.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a breakdown of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We have created a class called `FirebaseNotificationService` that extends `FirebaseMessagingService`.
    This is the service that will handle notifications that are received.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have overridden the `onNewToken()` function. This function is called when
    a new token is generated. We can use this token to send notifications to our app.
    We have added a log message to log the token to our Logcat. Alternatively, we
    can send the token to our backend server to be used to send notifications to our
    app if we have such a requirement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have overridden the `onMessageReceived()` function. This function is called
    when a notification is received. We have called the `sendNotification()` function
    and passed the `RemoteMessage` object to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sendNotification()` function creates a notification and shows it to the
    user. We have used the `NotificationCompat.Builder` class to create the notification.
    We have also used the `RemoteMessage` object to get the notification `title`,
    `body`, and `ticker`. We have also set up a small icon to be used for the notification.
    We additionally set the notification channel if the device is running on Android
    Oreo or more recent versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we have created the `createChannel()` function, which creates the notification
    channel using the `NotificationChannel` class. We have also set the channel description
    and the importance of the channel. Additionally, we have set the default vibration
    for the channel. Finally, we have created the notification manager and used it
    to create the channel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the service created, we need to register it in our `AndroidManifest.xml`
    file. Let us add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With the service registered, we can now receive notifications in our app. Run
    the app with the recent changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let us test this by sending a notification from the Firebase console.
    We can do this by going to our Firebase console and selecting the **Cloud Messaging**
    option from the navigation drawer, which is in the **Engage** category. It shows
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – Firebase Cloud Messaging landing page](img/B19779_15_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.15 – Firebase Cloud Messaging landing page
  prefs: []
  type: TYPE_NORMAL
- en: 'This is our first time using Cloud Messaging, so we need to create a new campaign.
    Tap the **Create your first campaign** button. This opens a new dialog with the
    following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – Firebase Cloud Messaging options](img/B19779_15_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.16 – Firebase Cloud Messaging options
  prefs: []
  type: TYPE_NORMAL
- en: 'We can send either **Firebase Notification messages** or **Firebase In-App
    messages**. Firebase notifications are designed to reach users outside of the
    app, delivering messages through push notifications even when our app is inactive.
    In contrast, Firebase in-app messages are tailored to engage users actively using
    our app by displaying content directly within the app’s interface. Firebase notifications
    are suitable for sending timely updates or promotions, while in-app messages are
    effective for delivering contextual content and enhancing the user experience
    within our app. We are interested in **Firebase Notification messages**. Select
    the **Firebase Notification messages** option and tap **Create**. This brings
    us to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.17 – Creating a new notification](img/B19779_15_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.17 – Creating a new notification
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screen, we add the title and text for our notification. Once you fill
    in these details, tap **Next** to proceed to the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – Target and Scheduling settings](img/B19779_15_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.18 – Target and Scheduling settings
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in *Figure 15**.17*, we set the target app for our notification. In
    this case, it is the app that we created earlier in the *Using Firebase Crashlytics
    to detect crashes* section of this chapter. We then set the schedule for our notification.
    We have set the scheduling setting to **Send now**. Tap the **Review** button,
    which shows a dialog with the information we have set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Review message dialog](img/B19779_15_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.19 – Review message dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap the **Publish** button to publish the notification. This will send a notification
    to our app. We can now see the notification from our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.20 – First notification](img/B19779_15_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.20 – First notification
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you always test using a real device to see your notifications.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to set up Firebase Cloud Messaging in our app and how to send
    notifications to it. In the next section, we will cover yet another critical topic—securing
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensuring your apps are secure is particularly important. We need to ensure that
    our users’ data is safe and secure. We also need to ensure that our app is not
    vulnerable to attacks. Attacks such as malware, man-in-the-middle attacks, and
    data interception pose risks to sensitive information, while vulnerabilities such
    as SQL injection and privilege escalation can lead to unauthorized access and
    manipulation of databases or app functionalities. Cross-site scripting and code
    injection present avenues for attackers to execute malicious scripts or commands
    within the app, potentially compromising user sessions and data. Insecure data
    storage practices may expose sensitive information, and denial-of-service attacks
    can disrupt app services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to see some tips and tricks for securing our
    app. The following are some of the things that we can do to secure our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPS` for all our network requests, which adds an extra layer of security
    to our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code minification and obfuscation**: We should always minify and obfuscate
    our code to make it harder for attackers to reverse engineer our app. We already
    did this in [*Chapter 13*](B19779_13.xhtml#_idTextAnchor175) for our release build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encryption**: We should always encrypt sensitive data that we store in our
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passwords and private keys**: Never store passwords and private keys in Shared
    Preferences. We can always store them in other secure alternatives, such as the
    Android Keystore system used for storing cryptographic keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimizing logged information**: We should always minimize the information
    that we log. We should never log sensitive information such as passwords and private
    keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal storage**: We should always use internal storage for sensitive data.
    This is because internal storage is private to our app and other apps cannot access
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebView**: We use WebView to display web content in our app. This can introduce
    security issues on our app, so we should be careful when using WebView.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: We should always keep all our dependencies up to date. This
    is because new versions of dependencies might have security fixes that we need
    to apply to our app. We use tools such as Dependabot ([https://github.com/dependabot](https://github.com/dependabot))
    to automate dependency updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulators or rooted devices**: For payment or banking apps, ensure that they
    do not work on emulators or rooted devices. With emulators and rooted devices,
    it is easy to change your code or view the data that is being sent to the server
    or stored in our app. This can lead to security issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions**: We should always use the necessary permissions in our app.
    We should not use permissions that we do not need. This is because permissions
    can be used to access sensitive data in our app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you develop your apps, always keep security in mind. This will help you ensure
    that your app is secure and that your users’ data is safe. You can learn more
    about Android security from the official Android documentation at [https://developer.android.com/privacy-and-security/security-tips](https://developer.android.com/privacy-and-security/security-tips).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned techniques for improving our apps by adding
    analytics—in this case, Firebase Crashlytics—and how to use cloud messaging to
    increase user engagement in our apps. Additionally, we learned some tips and tricks
    for securing our apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have come to the end of this chapter and book. We hope that you’ve enjoyed
    following along with the chapters and that you’re now in a position to develop
    Android apps with the knowledge gained from this book. What are the next steps?
    Here are some of the things that you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure your app using the tips and tricks we went over in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspect, improve, and monitor the performance of your app. You can learn more
    about this from the official documentation at [https://developer.android.com/topic/performance/overview](https://developer.android.com/topic/performance/overview).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about **Modern Android Development** (**MAD**). MAD is a set of tools
    and libraries that help us develop Android apps faster and better. You can learn
    more about M.A.D from the official documentation at [https://developer.android.com/modern-android-development](https://developer.android.com/modern-android-development).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about Google Play Vitals and how you can use the information at [https://play.google.com/console/about/vitals/](https://play.google.com/console/about/vitals/)
    to improve the quality of your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep learning about Kotlin and Android. Build more apps and share them with
    the world. You can also contribute to open source projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
