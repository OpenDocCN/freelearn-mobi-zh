["```swift\nif condition {\n   code1\n} else {\n   code2\n}\n```", "```swift\n    let isRestaurantFound = false \n    if isRestaurantFound == false {\n       print(\"Restaurant was not found\")\n    }\n    ```", "```swift\n    let drinkingAgeLimit = 21 \n    let customerAge = 23\n    if customerAge < drinkingAgeLimit {\n       print(\"Under age limit\")\n    } else {\n       print(\"Over age limit\")\n    }\n    ```", "```swift\n    switch value {\n    case firstValue:\n       code1\n    case secondValue:\n       code2\n    default: \n       code3\n    }\n    ```", "```swift\n    trafficLightColor = \"Yellow\"\n    switch trafficLightColor {\n    case \"Red\":\n       print(\"Stop\")\n    case \"Yellow\":\n       print(\"Caution\")\n    case \"Green\":\n       print(\"Go\")\n    default:\n       print(\"Invalid color\")\n    }\n    ```", "```swift\n    var spouseName: String \n    print(spouseName)\n    ```", "```swift\n    var spouseName: String spouseName should not have a value.\n    ```", "```swift\n    var spouseName: StringspouseName is now an optional string variable instead of a regular string variable, and the print() statement is expecting a regular string variable: ![Figure 3.1: Warning notification\n    ](img/Figure_3.1_B17469.jpg)Figure 3.1: Warning notificationClick the Play/Stop button. Even though there is a warning, the program will execute. Ignore the warning for now. The value of `spouseName` is shown as `\"nil\\n\"` in the Results area, and `nil` is printed in the Debug area. `nil` is a special keyword that means the optional variable `spouseName` has no value.\n    ```", "```swift\n    var spouseName: String?\n    Nia appears in the Debug area.\n    ```", "```swift\n    print(spouseName ?? \"No value in spouseName\")\n    String variable to an optional using the + operator. To use the string inside the optional, you'll have to unwrap it first.\n    ```", "```swift\n    let greeting = \"Hello, \" + spouseName!\n    ```", "```swift\n    spouseName = spouseName is now nil, the program crashed while attempting to force-unwrap spouseName.A better way of handling this is to use optional binding. In optional binding, you attempt to assign the value in an optional to a temporary variable (you can name it whatever you like). If the assignment is successful, a block of code is executed.\n    ```", "```swift\n    spouseName = Hello, Nia will appear in the Debug area. Here's how it works. If spouseName has a value, it will be unwrapped and assigned to a temporary variable, spouseTempVar, and the if statement will return true. The statements between the curly braces will be executed and the constant greeting will then be assigned the value Hello, Nia. Then, Hello, Nia will be printed in the Debug area. Note that the temporary variable spouseTempVar is not an optional.If `spouseName` does not have a value, no value can be assigned to `spouseTempVar` and the `if` statement will return `false`. In this case, the statements in the curly braces will not be executed at all.\n    ```", "```swift\n    spouseName = spouseName is nil.\n    ```"]