- en: Spring Modules for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will cover the modules and features that support Spring for Android
    and use REST in Android as a client. There are some modules that help request
    and retrieve REST APIs. They also provide security, such as *basic authentication*
    and *OAuth2*. Because of these securities, the resources of the server are secured
    and are therefore difficult to hack. Even a client needs to be granted permission
    from the owner to use the resources from the protected server. The modules also incorporate
    a strong OAuth-based authorization client and implementations for mainstream social
    websites, such as Google, Twitter, Facebook, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `RestTemplate` module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Gradle and Maven repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RestTemplate` module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrofit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android SDK is required to develop Android applications. The developers
    used Eclipse and the Android plugin to develop Android applications at the beginning
    of the Android development. But later, Google announced that Android Studio is
    the official tool for Android application development. It has all the vital modules,
    such as Gradle, Maven, Android SDK, NDK, Java JDK, and so on, so we don't have
    to utilize the Terminal command line. In [Chapter 1](bfdcd6b3-5a5a-4fc7-af79-67e780f46ccb.xhtml),
    *About the Environment*, we demonstrated how to download and create a sample Android
    application using Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: The source code with an example for this chapter is available on GitHub at the
    following link: [https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04](https://github.com/PacktPublishing/Learn-Spring-for-Android-Application-Development/tree/master/Chapter04)
  prefs: []
  type: TYPE_NORMAL
- en: REST client module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**) is designed to take advantage
    of the existing protocols. The consistent systems of REST are often called **RESTful
    systems**. It can be used over almost every protocol, but it normally takes advantage
    of HTTP during the use of web APIs. It makes it simpler for systems to speak with
    one another. These systems are portrayed by how they are stateless and separate
    the concerns of the client and server. We will go in depth into what these terms
    mean and why they are advantageous qualities for services on the web.'
  prefs: []
  type: TYPE_NORMAL
- en: A RESTful web service is responded to with a payload formatted in either HTML,
    XML, JSON, or some other format. The response can affirm that a change has been
    made to the requested response, and the reaction can give hypertext links that
    are related to other resources, or a bundle of resources. At the point in which
    HTTP is utilized, as is normal, the tasks that are accessible are `GET`, `POST`,
    `PUT`, `DELETE`, and other predefined HTTP functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Spring for Android, you can use different HTTP libraries. Spring has
    suggested using `RestTemplate` for Android. This is now outdated and may not be
    supported for the newer Android version. However, now, you can find some libraries
    that are easier and more powerful, with lots of features. You can use a different
    HTTP library, such as  one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RestTemplate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrofit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volley
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore the use of all of these libraries in this chapter. In our upcoming
    chapters, we will use Retrofit because it's easier, updated, robust, and requires
    less code to be written. However, you can use any of them in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: The RestTemplate module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`RestTemplate` is a robust and Java-based REST client. In Android application
    development, we can use the `RestTemplate` module, which will provide a template
    to request and retrieve a REST API. `RestTemplate` is Spring''s core class for
    synchronous client-side HTTP access. It''s intended to disentangle correspondence
    with HTTP servers and authorize RESTful standards.'
  prefs: []
  type: TYPE_NORMAL
- en: '`RestTemplate` is the main class for synchronous RESTful HTTP requests. A native
    Android HTTP client library is used to retrieve requests. The default **`ClientHttpRequestFactory`, **which
    is utilized when you make another `RestTemplate` example, varies depending on
    the adaptation of Android on which your application is running.'
  prefs: []
  type: TYPE_NORMAL
- en: Gradle and Maven repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop an Android application, we have to implement or compile a few dependencies.
    Android officially supports Gradle to implement or compile dependencies. Android
    also supports Maven, so if you want to use Maven, then you need to modify `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: You can check the latest version of the dependency at [https://mvnrepository.com/artifact/org.springframework.android/spring-android-core ](https://mvnrepository.com/artifact/org.springframework.android/spring-android-core)for
    implementing `spring-android-core`, which has the core modules for Android.
  prefs: []
  type: TYPE_NORMAL
- en: You can check the latest version of the dependency at [https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template ](https://mvnrepository.com/artifact/org.springframework.android/spring-android-rest-template)for implementing `spring-android-rest-template`,
    which has the all modules for `RestTemplate`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at the use of Gradle and Maven for the Android project.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle is a build system that's used to build Android bundles (APK files) by
    overseeing conditions and giving custom build logic. It is a JVM-based form framework,
    meaning that you can compose your own content in Java, which Android Studio makes
    use of.
  prefs: []
  type: TYPE_NORMAL
- en: In Android Studio, Gradle is a custom form apparatus that's used to fabricate
    Android bundles (APK files) by overseeing dependencies and giving custom form
    rationale. An APK file (Android application bundle) is an extraordinarily formatted
    compressed file that contains bytecode, resources (pictures, UI, XML, and so on),
    and manifest files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependency command of how to implement these dependencies is shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android Maven module is used to build applications for the Android OS and
    assemble libraries. These are to be used to create the **Android Archive Library**
    (**AAR**) and the inheritance APKLIB format, thus utilizing Apache Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code sample of how to add a dependency of Android in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: RestTemplate constructors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The four `RestTemplate` constructors are listed in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This constructor has no parameter, by default. If you want to use a default
    set of message converters with another `RestTemplate` example, you can pass `TRUE`
    as a parameter. If you want to use another `ClientHttpRequestFactory`, then you
    need to pass it as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: RestTemplate functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`RestTemplate` gives a larger amount of functions. It has six primary HTTP functions,
    which makes it simple to conjure numerous RESTful services and authorize REST best
    practices. `RestTemplate`''s strategy name pursues a naming tradition; the initial
    segment demonstrates what the HTTP strategy is and the second part shows what
    will be returned. There is an interface called `ResponseErrorHandler` in  `RestTemplate` which
    is used to determine whether a particular response has an error or not. Here are
    the descriptions of the six HTTP functions.'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP GET
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP characterizes an arrangement of request functions to demonstrate the coveted
    activity to be performed for a given resource. The `GET` function requests a description
    of the predetermined resource and requests that utilizing `GET` should just retrieve
    data. `GET` is a standout among the most well-known HTTP functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `GET`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: HTTP POST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP `POST` requests that the asset at the URI accomplishes something with the
    given substance. `POST` is often utilized to make another substance; however,
    it can likewise be utilized to refresh an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `POST`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: HTTP PUT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store an element at a URI, the `PUT` function can create a new element or
    update a current one. A `PUT` request is idempotent. Idempotency is the fundamental
    contrast between the desires for `PUT` versus a `POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `PUT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call the functions of HTTP `PUT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: HTTP DELETE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP `DELETE` is a request function that is used to remove a resource. However,
    the resource does not have to be removed immediately. `DELETE` could be an asynchronous
    or long-running request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `DELETE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: HTTP OPTIONS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTTP `OPTIONS` function is utilized to depict the correspondence options
    for the target resource. The client can indicate a URL for the `OPTIONS` method,
    or a reference mark, `(*)`, to allude to the whole server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `OPTIONS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: HTTP HEAD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current version of Spring (4.3.10), `HEAD` is automatically supported.
  prefs: []
  type: TYPE_NORMAL
- en: '`@RequestMapping` functions mapped to `GET` are also implicitly mapped to `HEAD`,
    meaning that there is no need to have `HEAD` explicitly declared. An HTTP `HEAD`
    request is processed as if it were an HTTP `GET`, but instead of writing the body,
    only the number of bytes is counted, as well as the Content-Length header set.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the common functions of HTTP `HEAD`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Retrofit** is a library that makes parsing an API reaction simple and better for
    utilization in the application. Retrofit is a REST client for Java and Android
    that makes it moderately simple to recover and transfer JSON by means of a REST-based
    web service. In Retrofit, you can arrange which converter is utilized for the
    information serialization. Normally, for JSON, you utilize Gson, but you can add
    custom converters to process XML or different conventions. Retrofit utilizes the
    `OkHttp` library for HTTP requests.'
  prefs: []
  type: TYPE_NORMAL
- en: The use of Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work with Retrofit, you will require the following three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: A model class, which is utilized as a JSON model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfaces that characterize the conceivable HTTP activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Retrofit.Builder` class, which utilizes the interface and the developer
    programming interface to permit characterizing the URL endpoint for HTTP activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each function of an interface speaks to one conceivable programming interface
    call. It must have an HTTP annotation (`GET`, `POST`, `DELETE`, and so on) to
    determine the request type and the relative URL.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Retrofit is very easy to utilize. It basically gives you a chance to regard
    programming interface calls as straightforward Java method calls, so you just
    characterize which URLs to hit and the request/reaction parameters as Java classes.
  prefs: []
  type: TYPE_NORMAL
- en: The whole system call, plus JSON/XML parsing, is totally taken care of by Retrofit (with
    assistance from Gson for JSON parsing), alongside support for self-assertive formats
    with pluggable serialization/deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, Retrofit can just deserialize HTTP bodies into `OkHttp`'s `ResponseBody`
    type and it can acknowledge its `RequestBody` type for `@Body`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Converters can be added in order to support different sorts. Seven kinds of
    modules adjust mainstream serialization libraries for your benefit. These include
    the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gson**: `com.squareup.retrofit2:converter-gson`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jackson**: `com.squareup.retrofit2:converter-jackson`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Moshi**: `com.squareup.retrofit2:converter-moshi`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protobuf**: `com.squareup.retrofit2:converter-protobuf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wire**: `com.squareup.retrofit2:converter-wire`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple XML**: `com.squareup.retrofit2:converter-simplexml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalars (primitives, boxed, and String)**: `com.squareup.retrofit2:converter-scalars`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Retrofit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Download the latest JAR from [https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST](https://search.maven.org/remote_content?g=com.squareup.retrofit2&a=retrofit&v=LATEST).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can inject the dependency via Maven with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use Gradle, as per the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: HTTP request functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each function must have an HTTP annotation that gives the request function and
    relative URL. There are five built-in annotations—`GET`, `POST`, `PUT`, `DELETE`,
    and `HEAD`. The overall URL of the asset is indicated in the annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the use of these annotations. We are considering all the
    URLs based on GitHub API v3 ([https://developer.github.com/v3/](https://developer.github.com/v3/)).
  prefs: []
  type: TYPE_NORMAL
- en: GET
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that you want to get a response to your details from your GitHub
    account. You need to use the following endpoint with the `@GET` function to get
    the user''s info:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s assume that you want to create a new repo in your GitHub account. Here,
    you need to use the following endpoint with the `@POST` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: PUT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that you want to update a GitHub `Gist` object. You need to use
    the following endpoint with the `@PUT` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: DELETE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that you want to delete a repository from your GitHub account.
    In this case, you need to use the following endpoint with the `@DELETE` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: HEAD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A request header can be refreshed progressively using the `@Header` annotation.
    If the value is invalid, the header will be overlooked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating an Android app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a simple Android app as a client that will retrieve the REST
    API using the GitHub API. First of all, we need to create an app from Android
    Studio and put down our project and the company domain. Don''t forget to check **Include
    Kotlin support**. It will include all of the support of Kotlin. The following
    screenshot shows the **Create Android Project** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bcaa137-45c0-45c7-bc1b-d99aec15152a.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, select the minimum API version from the **Phone and Tablet** option. There
    is no need to add other options for this project. After clicking Next, in the
    **Add an Activity to Mobile **section, you can select **Empty Activity** and then,
    after renaming the **Activity Name** and layout, click Finish. After the build,
    you will be ready to start creating an Android app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final files of this project are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6edfddbb-1421-48a1-b5b1-bf25f815c0c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Gradle information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the details of my Android Studio''s Gradle file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Gradle dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use Retrofit and its features, so we need to implement all the dependencies,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the GitHub API. You can check all the REST API URLs at [https://api.github.com/](https://api.github.com/).
    We will use the simplest API, which has no security issues. We will show the list
    of a user's repositories. The API is [https://api.github.com/users/{user}/repos](https://api.github.com/users/%7Buser%7D/repos).
    You need a `GET` HTTP function with a username parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output of the REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e4a3efe-9a90-438e-a6ff-3ebbcf9017b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The left-hand side of the preceding screenshot shows part of the content of
    a repo and the right-hand side is the collapsed total repo list.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, according to the API, we will create a user model for the client side.
    Here is the model class named `GitHubUserModel.kt`, where we will show only the
    name of the list of all the repos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Create an interface that will have the HTTP request functions. In this project, we
    will only use a `GET` function that retrieves all the details of the users. Here,
    we are using the `GET` Retrofit annotation to encode details about the parameters
    and the request function. For this function, our endpoint is `/users/{user}/repos`,
    where you need to add a parameter of the `userName` and it will provide a list
    of `UserModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of the `GithubService` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Implementing a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class is responsible for the main task. It will be responsive for the control
    of all the tasks using the `Retrofit.builder` class and will configure it with
    the base of the given URL.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code of **`UserServiceImpl.kt`: **
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, our `baseUrl()` is `https://api.github.com/`.
  prefs: []
  type: TYPE_NORMAL
- en: Calling callback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we are calling `CallBack<>` from the `MainActivity`. This callback will
    have the response of the REST API request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the `MainActivity.kt` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: First of all, we need to initialize `GithubServiceImpl().getGithubServiceImpl(username,password)` so
    that we can call  `reposOfUser()` from  `UserService`. Here, I add my GitHub username
    in the parameter. Then, we will call `enqueue(retrofit2.Callback<T>)`, which will
    be executed asynchronously and send the request and get the response. It has two
    functions—`onResponse()` and `onFailure()`. If there is any server-related error,
    then it will call `onFailure()`, and if it gets the response and the resources,
    it will call `onResponse()`. We can use the resources of the `onResponse()` function
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will get a response of the `UserModel` list. So, we can use this list
    to show our REST output in our application UI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will show a list of the user's details and the names of all the repos. Here,
    we will use `ListView.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of the `acitivity_main.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We will use this `listview` in the `onResponse()` function of `MainActivity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will get the list and create a custom adapter to show the user list, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, we get the list of repos and convert them into an array. Then, we create
    the native adapter for the list with `val adapter = ArrayAdapter<String>(this@MainActivity,
    android.R.layout.simple_list_item_1, listItems)` and set the adapter in our list
    with `displayList.adapter = adapter`.
  prefs: []
  type: TYPE_NORMAL
- en: You should never perform long-running tasks on the main thread. It will incur
    an **Application Not Responding** (**ANR**) message.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, after everything, run your server. Then, run your app. The following screenshot
    shows the output of our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ffb7df1-9c5d-4f8a-9556-88a7c0c99056.png)'
  prefs: []
  type: TYPE_IMG
- en: You can modify this as you wish, although you have to be careful about the endpoint
    and the model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have given a quick presentation of the ideas driving REST
    and the REST client modules. The RESTful HTTP way of dealing with uncovering functionality
    is unique. We have seen the different libraries of REST client functions. First,
    we saw what RestTemplate is and its implementation in an Android application.
    Now, we know about the constructors of RestTemplate and its functionalities. Furthermore,
    we have learned about Retrofit, allowing us to actualize Retrofit in an Android
    application. We have also seen the utilization of its functionalities. Lastly,
    we look at how to implement Retrofit to get data from a REST API.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, we will develop a total project, including security,
    authorization/authentication, a database, and a custom REST API, with the Spring
    and Android application to deal with the API as a client. In these chapters, you
    will explore the full usage of the API and prepare to figure out how to make an
    API for a server and recover it from the client.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between REST and RESTful?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the architectural style for creating a web API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tools are required to test your web API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are RESTful web services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a URI? What is the purpose of a URI in REST-based web services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the HTTP Status Code `200` state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the HTTP Status Code `404` state?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On RESTful API Design Patterns and Best Practices* ([https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices](https://www.packtpub.com/application-development/hands-restful-api-design-patterns-and-best-practices)), by Pethuru
    Raj, Anupama Raman, and Harihara Subramanian'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building a RESTful Web Service with Spring* ([https://www.packtpub.com/web-development/building-restful-web-service-spring](https://www.packtpub.com/web-development/building-restful-web-service-spring)),
    by Ludovic Dewailly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
