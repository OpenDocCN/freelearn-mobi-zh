["```swift\nIwGetTextParserITX()->ParseFile(\"myfile.itx\");\n```", "```swift\nclass WidgetClass : public CIwManaged\n{\npublic:\n  IW_MANAGED_DECLARE(WidgetClass)\n  WidgetClass();\nprivate:\n  uint8         mColor[3];\n  int32         mSize;\n  bool          mSparkly;\n  WidgetClass*  mpNextWidget;\n  uint32        mNextWidgetHash;\n};\n```", "```swift\nWidgetClass\n{\n  name     \"red_widget\"\n  color    { 255 0 0 }\n  size     10\n  sparkly  true\n}\n\nWidgetClass\n{\n  name     \"green_widget\"\n  color    { 0 255 0 }\n  size    20\n  sparkly  false\n  next    \"red_widget\"\n}\n```", "```swift\nParentClass\n{\n    name \"parent\"\n\n    ChildClass\n    {\n        name \"child\"\n    }\n}\n```", "```swift\nbool WidgetClass::ParseAttribute(CIwTextParserITX* apParser,\nconst char* apAttribute)\n{\n  if (!stricmp(apAttribute, \"color\"))\n  {\n    apParser->ReadUInt8Array(mColor, 3);\n  }\nelse if (!stricmp(apAttribute, \"size\"))\n  {\n    apParser->ReadInt32(&mSize);\n  }\nelse if (!stricmp(apAttribute, \"sparkly\"))\n  {\n    apParser->ReadBool(&mSparkly);\n  }\nelse if (!stricmp(apAttribute, \"next\"))\n  {\n  CIwStringL lNextWidget;\n  apParser->ReadString(lNextWidget);\n  mNextWidgetHash = IwHashString(lNextWidget.c_str());\n  }\nelse\n    return CIwManaged::ParseAttribute(apParser, apAttribute);\nreturn true;\n}\n```", "```swift\nvoid WidgetClass::Serialise()\n{\n  CIwManaged::Serialise();\n  IwSerialiseUInt8(mColor[0], 3);\n  IwSerialiseInt32(mSize);\n  IwSerialiseBool(mSparkly);\n}\n```", "```swift\nvoid WidgetClass::ParseClose(CIwTextParserITX* apParser)\n{\n  // Add this instance to a list.  gpWidgetList is an instance of a\n  // Marmalade class called CIwManagedList which is very useful\n  // for storing lists of objects derived from CIwManaged!\n  gpWidgetList->Add(this);\n}\n\nvoid WidgetClass::Resolve()\n{\n  // Look up an instance of WidgetClass with the given hash\n  if (mNextWidgetHash)\n  {\n    mpNextWidget = static_cast<WidgetClass*>\n                   (gpWidgetList->GetObjHashed(mNextWidgetHash));\n  }\n}\n```", "```swift\nCIwResGroup\n{\n  name  \"game_resources\"\n\n  \"./images/titlescreen.png\"\n  \"./sounds/sounds.group\"\n  \"./levels/levels.itx\"\n}\n```", "```swift\nCIwResGroup* pResGroup;\npResGroup = IwGetResManager()->LoadGroup(\"groupfile.group\");\n```", "```swift\nCIwResource* pResource;\npResource = pResGroup->GetResNamed(name, type, flags);\n```", "```swift\nCIwResource* pResource;\npResource = IwGetResManager()->GetResNamed(name, type, flags);\n```", "```swift\nIwGetResManager()->DestroyGroup(pResGroup);\n```", "```swift\n[RESMANAGER]\nResBuild=1\n```", "```swift\nIwGxSetMaterial(pMaterial);\n```", "```swift\nCIwMaterial* lpRedMaterial = new CIwMaterial;\nlpRedMaterial->SetColAmbient(255, 0, 0, 128);\nlpRedMaterial->SetAlphaMode(CIwMaterial::ALPHA_BLEND);\n```", "```swift\nCIwMaterial\n{\n  name      \"red\"\n  colAmbient  { 255 0 0 128 }\n  alphaMode    BLEND\n}\n\nCIwMaterial\n{\n  name      \"grid\"\n  colAmbient  { 128 128 128 128 }\n  texture0    \"grid.png\"\n  alphaMode    ADD\n  shadeMode    FLAT\n  filtering    false\n}\n```", "```swift\nCIwSVec2* v = new CIwSVec2[3];\nv[0].x = 160;    v[0].y = 120;\nv[1].x = 20;     v[1].y = 360;\nv[2].x = 300;    v[2].y = 360;\nIwGxSetVertStreamScreenSpace(v, 3);\n```", "```swift\nCIwColour* c = new CIwColour[3];\nc[0].Set(255, 0, 0, 255);\nc[1].Set(0 255, 0, 255);\nc[2].Set(0, 0, 255, 255);\nIwGxSetColStream(c);\n```", "```swift\nCIwSVec2* uv = new CIwSVec2[3];\nuv[0].x = IW_GEOM_ONE / 2;    uv[0].y = 0;\nuv[1].x = 0;                  uv[1].y = IW_GEOM_ONE;\nuv[2].x = IW_GEOM_ONE;        uv[2].y = IW_GEOM_ONE;\nIwGxSetUVStream(uv, 0);\n```", "```swift\nIwGxDrawPrims(polygon_type, indices, num_indices);\n```", "```swift\nuint16* indices = new uint16[3];\nindices[0] = 0;  indices[1] = 1;  indices[2] = 2;\nIwGxDrawPrims(IW_GX_TRI_STRIP, indices, 3);\n```", "```swift\nIwGxDrawPrims(IW_GX_TRI_STRIP, NULL, 3);\n```", "```swift\nIwGxFlush();\nIwGxSwapBuffers();\n```"]