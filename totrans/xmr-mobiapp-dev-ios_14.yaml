- en: Chapter 14. Testing and Publishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your app is ready and waiting to be released to the entire world. You've sat
    there, coded, tested, coded, tested, and finally decided that you've created the
    most amazing app in the world and it's time to get it onto the Apple store. The
    problem is that only you have tested it. Unlike testing on Android, testing on
    iOS is not as straightforward and neither is getting your app into the store.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning and signing your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your app using TestFlight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging and signing the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing it on the App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning and signing your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For normal debugging to your own phone, it isn''t usually required for you
    to sign the application because a generic developer code is used when you deploy
    to the phone. This code is known as a **provisioning profile**. We''re now moving
    into a bigger league and the app needs testing. You may wonder why your app needs
    to be tested by other people. The answer is easy: to ensure the best possible
    user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the developer''s perspective, a piece of software follows a set pattern:
    A goes to B, B goes to C, C goes to D or E, and so on. When we test our code,
    this is the path we take; users don''t. They will go from A to C to F to B to
    C again and finally shout when the code takes exception and crashes for no reason
    while they try to go to H directly from C. The more people test your software
    before the release, the happier users are when they download the app from the
    **Mac App Store** and the fewer negative reviews get lodged against you.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For testing, you have to distribute the app, and it''s not as simple as uploading
    the app to your personal web space and saying, "Hey, go download and install"
    as you would for a typical desktop (or Android) application. Apple, to ensure
    the quality of the available apps, has a fairly strict and tight system for distribution,
    even for testing. Luckily, there is a way to distribute your app prior to releasing
    it on the unsuspecting public: *TestFlight*.'
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`TestFlight` is a platform that allows you to upload the test (or beta) versions
    of your software on invited users (iOS devices) or registered iOS devices. It
    is a free service that does not break any of Apple''s rules or regulations and,
    moreover, does not require the device to be jailbroken. Setting up this service
    is a three-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inviting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and uploading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Provisioning sets up the device to allow for the testing of non-Apple store
    approved applications. To start with, you need to set yourself up as an iOS developer
    at [http://developer.apple.com](http://developer.apple.com)—the cost is around
    $100 per year (about £65 at the time of writing). This is a yearly cost and you
    do get quite a bit for it. Once done, you will need to sign in and create an ID
    for your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Provisioning](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Registering the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, select **Identifiers**: you need to give your app a name. In my example,
    given as follows, I have filled in both the bundle name and the app name using
    a unique identifier—it''s always a good idea to keep your apps apart. You can
    set up a "catch all" identifier here if you wish.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering the app](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The grayed out area (in the preceding screenshot) will be the ID that Apple
    will provide you when you first create an account with them.
  prefs: []
  type: TYPE_NORMAL
- en: Once you're happy with the values (unless you need the likes of push notifications
    or in-app purchases, you can just create the ID), you will need to confirm the
    details. Once they are confirmed, you will be presented with a page detailing
    all of your apps in development.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering the app](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the developer profile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have created the app ID, you need to create a developer profile for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: On the left-side menu, click on **Provisioning Profiles** and then on **Development**.
    You will get the following screen:![Creating the developer profile](img/00050.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Distribution**, you need to select **Ad Hoc**. Click on **Continue**.
    The next couple of screens are simple to navigate.![Creating the developer profile](img/00051.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dropdown, select your app. Once it's done, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be presented with a screen asking you to select the certificate
    you wish to sign the apps with. The certificate is unique to you. If you don't
    have one, you can now create a new one quickly at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating your certificate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start Xcode and, under the **Window** option, select **Organizer**. Next, select
    the **Devices** option. You will see a menu on the left. Scroll down to **LIBRARY**
    and select **Provision Profiles**. You'll need to enter your Apple ID and password.
    Once done, click on the refresh icon. Xcode will inform you if you don't have
    a developer profile and give you the option to submit an application for creating
    one. Click the button with that option in. As soon as you submit the request,
    the certificate will be added to your keychain. Save the key somewhere safe and
    give it a username and password. That's it!
  prefs: []
  type: TYPE_NORMAL
- en: You then need to download and install the certificate. On the left-side menu,
    click on **Certificates**. You will be given an option to load a `.cert` file—this
    is the file you have just created. Upload the file and once you are done, you
    will see the following screenshot. Download the file, double-click on it to install,
    and the job is done. Your certificate is valid as long as you pay money to Apple,
    and it's all you need for development and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your certificate](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Back to registering your app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have selected your app, you can then select the devices it needs to
    go onto. If you have no devices, the page can be skipped and you can download
    the certificate. Once downloaded, double-click on it, and the profile is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling TestFlight within Xamarin Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xamarin Studio supports `TestFlight`, out of the box. To enable a build using
    Xamarin Studio, you need to set up the project correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Select your application under **Project**. Next, it needs to be enabled for
    **AdHoc/Enterprise distribution**. You will find this in the IPA section (check
    the tick box to enable it).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally (for now), select the correct provisioning; here, it is **Distribution
    (Automatic)** and the name of the app certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling TestFlight within Xamarin Studio](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Registering on TestFlight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Signing up on `TestFlight` is very easy. Create an account and they will provide
    you with an app and team ID. Don't worry about remembering these since Xamarin
    Studio will pick up the values when you build out to `TestFlight`.
  prefs: []
  type: TYPE_NORMAL
- en: Inviting and registering devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once registered, you will be invited to create a team. This is essential so
    you can invite people to test your app. Click on the **Create a new Team** button,
    type in the name you want to give that area, and click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inviting and registering devices](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will be invited to upload a build. This is rather like asking for
    the car before you've taken lessons. Uploading a build here is pointless as no
    one will be able to install the app! For this to happen, the testers must have
    their devices registered on your developer provisioning profile, which only happens
    once you've invited them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before that, though, you have to create an app. Click on the **Apps** link
    at the top of the page and then on **Create an app**. You will be presented with
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inviting and registering devices](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**App Name** is the common name for the app (for example, `mywhizzoapp`). For
    sanity, keep **BundleID** the same as you have used on the adhoc provisioning
    profile (`com.sporkish.mywhizzoapp`). You will need to add this to the application
    profile in Xamarin Studio (it''s under **Bundle**). Once created and saved, you
    can start inviting people.'
  prefs: []
  type: TYPE_NORMAL
- en: Inviting and registering someone is very simple. On the `TestFlight` website,
    click on the **People** option at the top. Next, create a new distribution list.
    These lists are very useful as it means with one account you can distribute a
    large number of apps to a large number of people.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inviting and registering devices](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Give the list a name and, as there is only one person available (that is, you),
    select your profile, and click on **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to invite people. On the left-side menu, click on **Invitations**.
    As there are no testers invited, you will be prompted to invite someone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inviting and registering devices](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If the person you're inviting is also a developer in your team, turn **ON**
    the **Team Developer** option; otherwise, leave that **OFF**. Once you click on
    the **Send Invitation** button, an e-mail will be sent to the person, who will
    in turn, accept the invitation and register the device. You will receive an e-mail
    once this has been done.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the device `UUID` (or if it has been sent by e-mail, you can upload the
    file sent containing the device `UUID` code), and go to the Apple developer website.
    Log in and select **Devices**. Here you can add one or more devices. Once added,
    go back to the **Developer Provisioning** option and enable that device. You will
    need to re-download the provisioning file and open it again with Xcode, and then
    rebuild the app with the updated profile. Failing to do this will result in the
    user not being able to install the app.
  prefs: []
  type: TYPE_NORMAL
- en: Building to TestFlight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have made sure that the **BundleID** in your project is the same as
    it is for the **BundleID** of `TestFlight`, things become very easy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building to TestFlight](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you have completed entering the details (similar to the preceding screenshot),
    click on **OK** and set the build to **Ad Hoc**. Select **Project** and then the
    `TestFlight` option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building to TestFlight](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Initially, this window will be blank. Click on **Get your API token** and then
    **Get your team token**, which will launch your default web browser. Copy and
    paste these values into the **API token** and **Team token** fields on the **Publish
    to TestFlight** screen (as seen in preceding screenshot). Next, provide some details
    of what changes are in the file, and finally select the distribution lists you've
    set up. Ensure that the top two tick boxes are ticked (it helps to let people
    know when something has been uploaded).
  prefs: []
  type: TYPE_NORMAL
- en: When you're done, click on **Publish** and, assuming there are no build issues,
    the app will be sent to `TestFlight` and the testers on the notified list.
  prefs: []
  type: TYPE_NORMAL
- en: After a few weeks of testing, you should be ready to submit the app to Apple
    for distribution. This is the final step to getting your app approved, but there
    are some hurdles you need to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing is complete and you've ironed out a majority of the bugs. There may
    still be some in there, but for now the app is behaving and you're ready to release
    it to the world.
  prefs: []
  type: TYPE_NORMAL
- en: App checklist
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before you submit your app to Apple for release through their App Store, you
    must have the following in place:'
  prefs: []
  type: TYPE_NORMAL
- en: The correct number and size of icons (see below for the sizes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app needs to be correctly signed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for iPhone 5 must be included (this includes the widgets being correctly
    placed on the screen for the new larger visible area)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You've not used any private API or forbidden API calls (Apple does not want
    you using libraries that it does not control and will throw out apps that circumvent
    hardware or software controls, or interfere with the operation of other software)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icon sizes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All of the following icons *must* be present with their correct sizes prior
    to submitting your app to Apple. The size of the icons (in pixels) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| iPhone | iPad |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |'
  prefs: []
  type: TYPE_TB
- en: '| App icons | Normal | Retina | iPad Compatibility | Normal | Retina |'
  prefs: []
  type: TYPE_TB
- en: '| 57 x 57 | 114 x 114 | 72 x 72 | 72 x 72 | 144 x 144 |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |'
  prefs: []
  type: TYPE_TB
- en: '| Launch images | Normal | Retina (3.5") | Retina (4") | Normal | Retina |'
  prefs: []
  type: TYPE_TB
- en: '| 320 x 480 | 640 x 960 | 640 x 1136 | 768 x 1024 | 1536 x 2048 |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |'
  prefs: []
  type: TYPE_TB
- en: '| iTunes artwork | Normal | Retina |   |'
  prefs: []
  type: TYPE_TB
- en: '| 512 x 512 | 1024 x 1024 |   |'
  prefs: []
  type: TYPE_TB
- en: Preparing to package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the icons in place, you next need an App Store provisioning profile. This
    is set up in a way similar to a **Developer** or **Ad Hoc** provisioning file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to package](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The process for creating the **App Store** profile is similar to the **Ad Hoc**
    profile generation except that you're not asked which devices you want the test
    software to be installed on. Download the provisioning file and install it as
    you did for the **Ad Hoc** profile. You will need to supply a name for the profile,
    though.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging your app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have created and installed the provisioning profile, you next need
    to package the app for distribution. This is not as straightforward as it may
    seem.
  prefs: []
  type: TYPE_NORMAL
- en: You have already created a development certificate; you now need to repeat the
    process to generate a distribution certificate. The process for doing this is
    exactly the same as that for a development certificate. Once you have done this,
    install the certificate in your keychain.
  prefs: []
  type: TYPE_NORMAL
- en: '![Packaging your app](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the certificate is installed, the next stage takes place in Xamarin Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the build configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the profile you need for creating your iOS application. Load the project
    that you wish to submit. Navigate to **Project** | **Solution Profile**. On the
    left-hand side, click on the **Configurations** option, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the build configuration](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To add the profile (assuming it's not there), click on **Add**. You will be
    presented with a **New Configuration** box. You will need to fill this in as shown.
    Once you've done this, click on **OK** and then click on **OK** again to remove
    the **Solution Options** window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the build configuration](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If the app you've created is universal (in other words, for iPhone and iPad),
    the platform should be universal. Failing that, for an iPad app, it will be just
    iPad for the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the application needs to be signed. Navigate to **Project** | **mywhizzoapp**
    (or whatever your app is called). Under the **Build** option, select **iOS build**
    and choose your AppStore configuration. After this, select the iOS bundle signing
    option. For the Identity drop-down, set this to Distribution (automatic) and the
    provisioning profile to the one you created to distribute the app (not the one
    created for distribution on TestFlight).
  prefs: []
  type: TYPE_NORMAL
- en: Once this has been done, click on **OK** to remove the window and set the build
    type for the app to **AppStore**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the build configuration](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For safety, click on **Build** | **Clean All** and then **Build** | **Build
    all**. If everything works, we're in the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: The App Store Submission Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to create a record with **iTunes Connect** ([https://itunesconnect.apple.com](https://itunesconnect.apple.com)).
    This is a simple process. The description has to reflect what the app can do (for
    example, you cannot submit a messenger application that is actually a game).
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that the record has been created correctly, click on the **Ready To
    Upload** binary button. You will be presented with a number of questions, and
    you can progress by answering them correctly. The last screen will tell you that
    the App Store is ready to upload and you can use the uploader facility. But *don't*.
    There is a simpler method via Xamarin Studio and Xcode, which has fewer issues.
    The first part is to create an archive.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an archive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to **Build** | **Archive**. This will build the app and create an archive
    from it that is correctly provisioned for distribution. Once the archive has been
    built, an **Archive** tab will appear in the code designer. Here you can look
    at any of the archives that you have created.
  prefs: []
  type: TYPE_NORMAL
- en: Submission via Xcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start Xcode and navigate to **Window** | **Organiser**. Click on the **Archives**
    tab. You will be presented with a list of all your apps for distribution. Select
    the one you wish to submit and you will see two options: **Validate** and **Submit**.
    Click on **Validate**. If there are no issues with the app, proceed to **Submit**.
    Typically, validation fails if there isn''t a correct provisioning certificate
    applied to the app or the certificate can''t be found. Fix the issue, rearchive,
    and validate again.'
  prefs: []
  type: TYPE_NORMAL
- en: The submission wizard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To guide you through the process of submission, Apple has included a very simple-to-use
    submission wizard. You must ensure that you have a network connection for this
    stage and that the app is ready for upload.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Submit**. Xcode communicates with **iTunes Connect** and retrieves
    a list of apps you have submitted for upload. Select the one you want to submit.
    Xcode will then upload the archive for you. Once uploaded, if you go back to **iTunes
    Connect**, you will see that the app is now waiting for approval. (Don't worry
    as this is largely an automated procedure.) Once approved, you're home and dry
    and your app is in the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing and distribution of iOS applications may seem a waste of time, but at
    the end of the day, controlling who is testing your app allows you to pick and
    choose who you want to test the code. Moreover, it doesn't allow for versions
    to be leaked and in turn giving you a potentially bad name. Yes, it may seem very
    control-freaky, but that's the game Apple wants you to play, and if you want to
    distribute your apps with them, that's the game you have to play.
  prefs: []
  type: TYPE_NORMAL
