["```kt\n<TextView\n    android:text=\"Hello World!\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/TextView\"\n    tools:text=\"helloWorld\"\n    android:textAppearance=\"@style/TextAppearance.AppCompat.Headline\" />\n\n```", "```kt\n<string name=\"app_name\">First Game</string>\n\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_fullscreen);\n\n        mVisible = true;\n        mControlsView = findViewById\n        (R.id.fullscreen_content_controls);\n        mContentView = findViewById(R.id.fullscreen_content);\n\n        // Manually show or hide the System UI\n        mContentView.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                toggle();\n            }\n        });\n\n        /* Upon interacting with UI controls, delay any scheduled hide() \n        operations to prevent the jarring behavior of controls going away while \n        interacting with the UI.*/\n\n        findViewById(R.id.dummy_button).\n        setOnTouchListener(mDelayHideTouchListener);\n    }\n\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_fullscreen);\n // Declare variable references for our TextView and Button with // their IDs final TextView tv = \n        (TextView)findViewById(R.id.myTextView); final Button button = \n        (Button) findViewById(R.id.myFirstButton);\n // Make an OnClickListener to listen to button click events button.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { // Perform action on click\n                tv.setText(\"Button Clicked\");\n } });        mVisible = true;\n        mControlsView = \n        findViewById(R.id.fullscreen_content_controls);\n        mContentView = \n        findViewById(R.id.fullscreen_content);\n\n        // Manually show or hide the System UI\n        mContentView.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                toggle();\n            }\n        });\n\n        // Upon interacting with UI controls, delay any scheduled hide()\n        // operations to prevent the jarring behavior of controls going\n        // away while interacting with the UI.\n\n        findViewById(R.id.dummy_button).\n        setOnTouchListener(mDelayHideTouchListener);\n    }\n\n```", "```kt\n    @Override\n    public void onBackPressed() {\n        // your code.\n        Toast.makeText(FullscreenActivity.this, \n        \"Back button pressed\", Toast.LENGTH_SHORT).show();\n    }\n\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_fullscreen);\n        final TextView tv = \n        (TextView) findViewById(R.id.myTextView);\n        final Button button = \n        (Button) findViewById(R.id.myFirstButton);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                // Perform action on click\n                tv.setText(\"Button Clicked\");\n            }\n        });\n        mVisible = true;\n        mControlsView =\n        findViewById(R.id.fullscreen_content_controls);\n        mContentView =\n        findViewById(R.id.fullscreen_content);\n\n        final LinearLayout parent = \n        (LinearLayout) findViewById(R.id.parent);\n\n        final TextView text = (TextView) findViewById(R.id.coords);\n\n        parent.setOnTouchListener(new View.OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent ev) {\n                text.setText\n                (\"Touch at \" + ev.getX() + \", \" + ev.getY());\n                return true;\n        }\n    });\n\n    // Set up the user interaction to manually show or hide the system UI.\n    mContentView.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            toggle();\n        }\n    });\n\n    // Upon interacting with UI controls, delay any scheduled hide()\n    // operations to prevent the jarring behavior of controls going\n    // away while interacting with the UI.\n\n    findViewById(R.id.dummy_button).\n    setOnTouchListener(mDelayHideTouchListener);\n    }\n\n```", "```kt\n<RelativeLayout\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/parent\">\n\n    <Button\n        android:text=\"Button\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/myFirstButton\"\n        android:layout_weight=\"1\" />\n\n    <TextView\n        android:text=\"Hello World!\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/myTextView\"\n        tools:text=\"helloWorld\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Headline\"\n        android:layout_weight=\"1\"\n        android:layout_alignBaseline=\"@+id/myFirstButton\"\n        android:layout_alignBottom=\"@+id/myFirstButton\"\n        android:layout_toRightOf=\"@+id/myFirstButton\"\n        android:layout_toEndOf=\"@+id/myFirstButton\" />\n\n    <TextView\n        android:text=\"Coords\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/coords\"\n        android:layout_weight=\"1\"\n        android:textAppearance=\"@style/TextAppearance.AppCompat.Headline\"\n        android:layout_below=\"@+id/myFirstButton\"\n        android:layout_alignRight=\"@+id/myFirstButton\"\n        android:layout_alignEnd=\"@+id/myFirstButton\" />\n</RelativeLayout>\n\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_fullscreen);\n        final TextView tv = \n        (TextView) findViewById(R.id.myTextView);\n        final Button button =\n        (Button) findViewById(R.id.myFirstButton);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                // Perform action on click\n                tv.setText(\"Button Clicked\");\n            }\n        });\n        mVisible = true;\n        mControlsView =\n        findViewById(R.id.fullscreen_content_controls);\n\n        mContentView = \n        findViewById(R.id.fullscreen_content);\n\n        final RelativeLayout parent = \n        (RelativeLayout) findViewById(R.id.parent);\n\n        final TextView text = \n        (TextView) findViewById(R.id.coords);\n        parent.setOnTouchListener(new View.OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent ev) {\n                text.setText\n                (\"Touch at \" + ev.getX() + \", \" + ev.getY());\n                return true;\n            }\n        });\n\n        // Set up the user interaction to manually show or hide the system UI.\n        mContentView.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                toggle();\n            }\n        });\n\n        // Upon interacting with UI controls, delay any scheduled hide()\n        // operations to prevent the jarring behavior of controls going\n        // away while interacting with the UI.\n\n        findViewById(R.id.dummy_button).\n        setOnTouchListener(mDelayHideTouchListener);\n    }\n\n```", "```kt\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.activity_fullscreen);\n        final TextView tv = \n        (TextView) findViewById(R.id.myTextView);\n\n        final Button button = \n        (Button) findViewById(R.id.myFirstButton);\n\n        button.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                // Perform action on click\n                tv.setText(\"Button Clicked\");\n            }\n        });\n        mVisible = true;\n        mControlsView =\n        findViewById(R.id.fullscreen_content_controls);\n        mContentView =\n        findViewById(R.id.fullscreen_content);\n\n        final RelativeLayout parent =\n        (RelativeLayout) findViewById(R.id.parent);\n\n        final TextView text = \n        (TextView) findViewById(R.id.coords);\n\n        parent.setOnTouchListener(new View.OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent ev) {\n                text.setText\n                (\"Touch at \" + ev.getX() + \", \" + ev.getY());\n                return true;\n            }\n        });\n        SensorManager sensorManager = \n        (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        Sensor sensor =\n        sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n\n        sensorManager.registerListener(new SensorEventListener() {\n            @Override\n            public void onSensorChanged(SensorEvent event) {\n\n                float x = event.values[0];\n                float y = event.values[1];\n                float z = event.values[2];\n                TextView acc = (TextView) findViewById(R.id.accel);\n                acc.setText(\"x: \"+x+\", y: \"+y+\", z: \"+z);\n\n            }\n\n            @Override\n            public void onAccuracyChanged(Sensor sensor, \n            int accuracy){\n            }\n        }, sensor, SensorManager.SENSOR_DELAY_FASTEST);\n        // Set up the user interaction to manually show or hide the system UI.\n        mContentView.setOnClickListener(new View.OnClickListener(){\n            @Override\n            public void onClick(View view) {\n                toggle();\n            }\n        });\n        // Upon interacting with UI controls, delay any scheduled hide()\n        // operations to prevent the jarring behavior of controls going \n        // away while interacting with the UI.\n\n        findViewById(R.id.dummy_button).\n        setOnTouchListener(mDelayHideTouchListener);\n    }\n\n```", "```kt\nandroid {\n    buildTypes {\n        debug {\n            debuggable true\n        }\n\n```"]