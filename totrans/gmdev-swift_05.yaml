- en: Chapter 5. Spawning Enemies, Coins, and Power-ups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most enjoyable and creative aspects of game development is building
    the game world for your players to explore. Our young project is starting to resemble
    a playable game after adding the controls; the next step is to build more content.
    We will create additional classes for new enemies, collectible coins, and special
    power-ups that give Pierre Penguin a boost as he navigates the perils of our world.
    We can then develop a system to spawn increasingly difficult patterns of these
    game objects as the player advances.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics in this chapter include:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the power-up star
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new enemy – the mad fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another terror – bats!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spooky ghost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guarding the ground with the blade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding coins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the new game objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the cast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Strap on your hard hat, we are going to be writing a lot of code in this chapter.
    Stick with it! The results are well worth the effort. Meet the new cast of characters
    we will be introducing in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing the cast](img/4532_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the power-up star
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many of my favorite games grant temporary invulnerability when the player picks
    up a star. We will add a hyperactive star power-up to our game. Meet our star:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the power-up star](img/4532_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Locating the art assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the art assets for power-up stars and coins inside the `goods.atlas`
    texture atlas in the `Coins` and `Powerups` folder of the assets bundle. Add the
    `goods.atlas` texture atlas to your project now.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Star class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the art is in place, you can create a new Swift file named `Star.swift`
    in your project; we will continue to organize classes into distinct files. The
    `Star` class will be similar to the `Bee` class we created earlier; it will inherit
    from `SKSpriteNode` and adhere to our `GameSprite` protocol. The star will add
    a lot of power to the player, so we will also give it a special `SKAction`-based
    zany animation to make it stand out.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `Star` class, add the following code in your `Star.swift` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! You should be familiar with most of this code at this point, since it
    is so similar to some of the other classes we have made. Let''s continue by adding
    another new character: a grumpy fly.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new enemy – the mad fly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pierre Penguin will need to dodge more than just bees to accomplish his goal.
    We will add a few new enemies in this chapter, starting with the `MadFly` class.
    The mad fly is quite grumpy, as you can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a new enemy – the mad fly](img/4532_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Locating the enemy assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find all of the art for our new enemies in the `Enemies` folder of the
    asset bundle, in the `enemies.atlas` texture atlas. Add this texture atlas to
    your project now.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the MadFly class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`MadFly` is another straightforward class; it looks a lot like the `Bee` code.
    Create a new Swift file named `MadFly.swift` and enter this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, you have successfully implemented the mad fly. No time to celebrate
    – onward to the bats!
  prefs: []
  type: TYPE_NORMAL
- en: Another terror – bats!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are getting into quite a rhythm with creating new classes. Now, we will
    add a bat to swarm with the bees. The bat is small, but has a very sharp fang:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Another terror – bats!](img/4532_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Bat class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add the `Bat` class, create a file named `Bat.swift` and add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have created the `Bat` class, there are two more enemies to add.
    We will add the `Ghost` class next.
  prefs: []
  type: TYPE_NORMAL
- en: The spooky ghost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will complement the bat with another spooky enemy: the Ghost as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The spooky ghost](img/4532_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of animating through multiple frames, we will use actions to animate
    the ghost's single frame.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Ghost class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with the other classes, create a new file in your project, `Ghost.swift`,
    and then add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Perfect. Our ghost is ready for action. We have added a lot of flying enemies
    to chase Pierre Penguin through the sky. We need a ground-based enemy that will
    prevent the player from taking an easy path just above the ground. Next, we will
    add the `Blade` class.
  prefs: []
  type: TYPE_NORMAL
- en: Guarding the ground – adding the blade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Blade` class will keep Pierre from flying too low. This enemy class will
    be similar to the others we have created, with one exception: we will generate
    a physics body based on the texture. The physics body circles that we have been
    using are much faster computationally and are usually sufficient to describe the
    shapes of our enemies; the `Blade` class requires a more complicated physics body,
    given its half-circle shape and bumpy edges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Guarding the ground – adding the blade](img/4532_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Blade class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add the `Blade` class, create a new file named `Blade.swift` and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, the `Blade` class was the last enemy we needed to add to our
    game. This process may seem repetitive – you have written a lot of boilerplate
    code – but separating our enemies into their own classes allows each enemy to
    implement unique logic and behavior. The benefits of this structure will become
    apparent as your games increase in complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we add the class for our coins.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the coins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Coins are more fun if there are two value variations. We will create:'
  prefs: []
  type: TYPE_NORMAL
- en: A bronze coin, worth one coin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A gold coin, worth five coins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The two coins will be distinguishable by their color on the screen and the
    denomination text on the coin, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the coins](img/4532_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the coin classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We only need a single `Coin` class to create both denominations. Everything
    in the `Coin` class should look very familiar at this point. To create the `Coin`
    class, add a new file named `Coin.swift` and then enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Great work – we have successfully added all of the new game objects we need
    for our final game!
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the project navigator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may notice that these new classes cluttered the project navigator. This
    is a good time to clean up the navigator. Right-click the project in the project
    navigator and select **Sort By Type**, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Organizing the project navigator](img/4532_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your project navigator will segment itself by file type and sort into alphabetical
    order. This makes it much easier to find files as you need them.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the new game objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is time to see our hard work in action. We will now add one instance of
    each of our new classes to the game. Note that we will remove this testing code
    after we are done; you may want to leave yourself a comment or extra space for
    easy removal. Open `GameScene.swift` and locate the six lines that spawn the existing
    bees. Add this code after the bee lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You may also wish to comment out the `Player` class line that moves Pierre forward,
    so the camera does not quickly move past your new game objects. Just make sure
    to uncomment it when you are done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are ready, run the project. You should see the entire family, as shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the new game objects](img/4532_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Terrific work! All of our code has paid off and we have a large cast of characters
    ready for action.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoint 5-A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download my project to this point, browse to this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.thinkingswiftly.com/game-development-with-swift/chapter-5](http://www.thinkingswiftly.com/game-development-with-swift/chapter-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for endless flight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Generating a Never-Ending World"), *Generating
    a Never-Ending World*, we will build a never-ending level by spawning tactical
    obstacle courses full of these new game objects. We need to clear out all of our
    test objects to get ready for this new level spawning system. Once you are ready,
    remove the spawning test code we just added to the `GameScene` class. Also, remove
    the six lines that we have been using to spawn the three bees from previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are finished, your `GameScene` class''s `didMoveToView` function should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the project, you should only see Pierre and the ground, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing for endless flight](img/4532_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are now ready to build our level.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You added the complete cast of characters to our game in this chapter. Look
    back at all that you accomplished; you added the power-up star, the bronze and
    gold coins, a spooky ghost, the mad fly, bats, and a blade. You tested all of
    the new classes and then removed the test code so that the project is ready for
    the level generation system we will put in place in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We spent a lot of effort building each new class. The world will come alive
    and reward our hard work in [Chapter 6](ch06.html "Chapter 6. Generating a Never-Ending
    World"), *Generating a Never-Ending World*.
  prefs: []
  type: TYPE_NORMAL
