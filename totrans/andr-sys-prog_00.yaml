- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android is the most popular mobile operating system in the world. Since 2013,
    Android has around 80% market share worldwide, while the second largest mobile
    operating system, iOS, has less than 20% market share. Due to the popularity of
    Android, there are many books about Android programming in the market. Most of
    them are targeted at Android application developers, which are the largest community
    in the world of Android development.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also another group of people working on the layer beneath the Android
    framework. Many people call them Android system developers. Comparing to Android
    application developers, Android system developers use the C/C++ languages, or
    even assembly language, to develop system services or device drivers. The scope
    and the definition of Android system development is much more vague than comparing
    to Android application development. For Android application development, the development
    environment and tools are very clear: the Android SDK and Android Studio from
    Google should be used and the programming language is Java.'
  prefs: []
  type: TYPE_NORMAL
- en: For Android system development, we may use the Android NDK to develop Android
    system services or native applications. Many people refer to development based
    on the Android Open Source Project (AOSP) as Android system development. Nevertheless,
    Android system development encompasses the activities that produces native applications,
    services, or device drivers for a particular hardware platform. It closer to the
    hardware and the operating system, whereas Android application development is
    more general and hardware-independent.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the hardware and operating system dependencies, it is more difficult
    to teach Android system programming than Android application programming. From
    the number of books in the market, we can see this. It is much easier to teach
    Android application development using specific examples. The readers of application
    programming books can follow the examples and can test them on most available
    Android devices. However, most Android system programming book can only talk about
    general concepts or ideas. When the authors want to use examples, they must pertain
    to a particular hardware platform and Android version. This makes it difficult
    for readers to repeat the same process.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual hardware platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make the discussion more general and overcome the issue of specific hardware
    platforms, I use virtual hardware platforms to demonstrate the work at the Android
    system level.
  prefs: []
  type: TYPE_NORMAL
- en: Before this book, I made an attempt to use a virtual hardware platform to explain
    how we can learn embedded system programming using an Android emulator in my previous
    book, *Embedded Programming with Android*. It seems many readers liked the idea,
    because they can explore the code examples much more easily on a virtual hardware
    platform that is available for everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Android version used in this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android is still changing at a very fast pace. When I completed the book *Embedded
    Programming with Android*, we were still using Android 5 (Lollipop), and Android
    6 (Marshmallow) was on the way to market with preview releases. Now while I am
    working on this book, Android 7 devices are available on the market and the next
    release of Android 8 has been announced with preview releases. We will use Android
    7 (Nougat) to build all source code used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we discuss the Android system programming practices. We will use
    two projects (x86emu and x86vbox) to teach essential knowledge of Android system
    programming. The book is split into includes two parts.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of this book talks about how to customize, extend, and port an
    Android system. We will use an Android emulator as the virtual hardware platform
    to demonstrate how to customize and extend an Android system. You will learn how
    to integrate an ARM translator (Houdini) into the Intel x86-based emulator and
    how to add Wi-Fi support to an Android emulator. We will use an x86emu device
    to learn these topics. After that, we will learn how to port an Android system
    to a new platform using VirtualBox. You will learn how to boot Android in the
    PXE/NFS environment, how to enable the graphics system, and how to integrate VirtualBox
    Guest Additions into the Android system. We will use x86vbox device to learn these
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: In the second part of this book, we will learn how to update or patch a released
    system using recovery. In this part, we will provide a general introduction to
    recovery first. After that, we will explore how to build recovery for x86vbox
    device. With recovery for x86vbox device, we will demonstrate how to flash an
    update package to change the system image. We will use examples such as the Gapps
    and xposed recovery packages to demonstrate how to update an Android system image
    using third-party recovery packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](4ddc5eff-b4d7-452c-b83c-0c3c1d40da57.xhtml), *Introduction to Android
    System Programming*, covers a general introduction of Android system programming.
    It also explains the scope of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](984e0cef-7bf6-4454-bede-bb34c553be12.xhtml), *Setting Up the Development
    Environment*, provides details of the development environment setup for AOSP programming.
    After we set up the development environment, we will build an Android emulator
    image to test our setup. Other than the environment setup, we specifically discuss
    how to create your own source code mirror of AOSP from GitHub to help your quickly
    switch between different configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](e0f861c2-5832-402f-89d3-cfc75785e759.xhtml), *Discovering Kernel,
    HAL, and Virtual Hardware*, covers an introduction to the Linux kernel, Hardware
    Abstraction Layer, and virtual hardware. In this chapter, we look at all the layers
    in the Android system software stack related to porting. We also take a in-depth
    look at the internals of the virtual hardware that we are going to use in this
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](f69f330a-932c-4a32-bb78-e427c860b65e.xhtml), *Customizing the Android
    Emulator*, covers the development of a new device, x86emu. We will learn how to
    customize and extend this device in the next few chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](9c298b48-2f4c-434f-8b7b-eb44d1d8a25f.xhtml), *Enabling the ARM
    Translator and Introducing Native Bridge*, explores a new feature introduced in
    Android 5--Native Bridge. Since we created an x86-based device, x86emu, we have
    to integrate the ARM translator module (Houdini) into our device so that most
    ARM-native applications can run on it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](b6a6462f-1c3d-46fd-89e9-a543423c576d.xhtml), *Debugging the Boot
    Up Process Using a Customized ramdisk*, introduces an advanced debugging skill
    to troubleshoot issues during the boot up stage. The famous Android-x86 project
    uses a special ramdisk to start the boot up process. It helps to troubleshoot
    device driver and init process issues very easily.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](7ff9a111-96cb-44ed-b92d-435e73821306.xhtml), *Enabling Wi-Fi on
    the Android Emulator*, presents details of how to enable Wi-Fi on our Android
    emulator. The Android emulator only supports an emulated 3G data connection, but
    many applications are aware of data and the Wi-Fi connection. We demonstrate how
    to enable Wi-Fi in the Android emulator in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](acf2363a-2a0f-40b9-a35f-c8bb0e523737.xhtml), *Creating Your Own
    Device on VirtualBox*, explores how to port Android on VirtualBox by introducing
    a new device x86vbox. The x86emu device is used to demonstrate how to customize
    an existing implementation, while x86vbox is used to demonstrate how to port Android
    to a new hardware platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](c8d10155-cc8e-4b8c-a5e0-f359520c894a.xhtml), *Booting Up x86vbox
    Using PXE/NFS*, explains how to boot up Android on VirtualBox using PXE/NFS. Since
    VirtualBox is a general virtual hardware, the first problem that we meet is we
    need a bootloader to boot the system. We will use the PXE/NFS boot to solve this
    issue. This is an advanced debugging skills which can be used in your own project.'
  prefs: []
  type: TYPE_NORMAL
- en: To discuss a more advanced case about the PXE/NFS setup using an external DHCP/TFTP
    server running in the host-only network environment, I have written an article,
    which you can find at [https://www.packtpub.com/books/content/booting-android-system-using-pxenfs](https://www.packtpub.com/books/content/booting-android-system-using-pxenfs).
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](900f7c1a-7db8-4172-899a-8e9a167372ce.xhtml), *Enabling Graphics*,
    covers the Android graphic system. We introduce the Android graphics architecture
    and how to enable it on the x86vbox device.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](3c6453e9-98bb-4979-9c61-f0df071b1255.xhtml), *Enabling VirtualBox-Specific
    Hardware Interfaces*, explains how to integrate the device drivers in VirtualBox
    Guest Additions into the Android system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](5eff5635-ac58-4b48-80d4-b7e69b464d8e.xhtml), *Introducing Recovery*,
    provides an introduction to recovery. We will learn how to customize and port
    recovery to a new hardware platform by building a recovery for the x86vbox device.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](32a9d777-755e-4758-a38a-f4e11d8ca2e9.xhtml), *Creating OTA Packages*,
    covers the scripting language used by recovery: Edify. We will learn how to build
    and test OTA updates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](15628e05-2216-4855-8347-588f61c8f61a.xhtml), *Customizing and
    Debugging Recovery*, expands on the concepts we learned about recovery and OTA
    packages. We will customize both recovery and updater for x86vbox device. We will
    test third-party OTA packages from Gapps and Xposed using our own recovery.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To read this book, you should have essential knowledge of embedded operating
    systems and C/C++ programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we talk about who should read this book, we should ask who are the people
    that usually do Android system programming in the real world? There are potentially
    quite a lot. Here, I can give a few general categories. Firstly, there are a large
    number of engineers at Google working on the Android system itself, since Android
    is a product from Google. Google usually work with silicon vendors to enable Android
    on various hardware platforms.
  prefs: []
  type: TYPE_NORMAL
- en: There are many engineers at silicon chip companies, such as Qualcomm, MTK, or
    Intel to enable Android on their platform. They develop HAL layer components or
    device drivers to enable hardware platforms. The hardware platforms are usually
    called reference platforms, which are provided to OEM/ODM to build the actual
    products. Then, the engineers at OEM/ODM companies usually customize the reference
    platform hardware and software to add unique features to their products. All these
    engineers form the major groups working on system-level programming. Thus, if
    you are working in any of these areas, you may want to read this book.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the previously mentioned categories, it is also possible that you are
    a developer working for an embedded system company. You may work on projects such
    as embedded system for automobile, video surveillance, or smart home. Many of
    these systems use Android nowadays. One of the fastest growing areas in embedded
    systems is Internet of Things (IoT) devices. Google announced Brillo as the operating
    system for IoT devices. Brillo is a simplified embedded operating system based
    on Android. The source code of Brillo is also included in the AOSP. This book
    is also relevant to people who use Brillo.
  prefs: []
  type: TYPE_NORMAL
- en: For Android application developers, system-level knowledge can help you to resolve
    complex issues as well. If you are working on projects that involve new hardware
    features, you may want to extend your knowledge to the system level.
  prefs: []
  type: TYPE_NORMAL
- en: This book is also useful for people teaching Android system programming or embedded
    system programming. There is plenty of source code in this book that can be used
    to form your own lesson plans.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    general Android kernel source code is in the `kernel/common` folder , which looks
    very much like the Vanilla kernel."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "We should set the launch type to Standard Create Process Launcher."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book-what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `feedback@packtpub.com`, and mention
    the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the SUPPORT tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Android-System-Programming](https://github.com/PacktPublishing/Android-System-Programming).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books-maybe a mistake in the text
    or the code-we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the Errata section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `copyright@packtpub.com` with a link to the suspected pirated
    material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `questions@packtpub.com`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
