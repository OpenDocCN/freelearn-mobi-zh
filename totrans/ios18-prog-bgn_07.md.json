["```swift\nfunc functionName(parameter1: ParameterType, ...) -> ReturnType {\n  code\n} \n```", "```swift\nfunctionName(parameter1: argument1, â€¦) \n```", "```swift\nfunc serviceCharge() {\n  let mealCost = 50\n  let serviceCharge = mealCost / 10\n  print(\"Service charge is \\(serviceCharge)\")\n}\nserviceCharge() \n```", "```swift\nfunc serviceCharge(**mealCost****:** **Int****) ->** **Int**{\n  **return** **mealCost** **/****10**\n}\n**let****serviceChargeAmount****=****serviceCharge****(****mealCost****:** **50****)**\n**print(****serviceChargeAmount****)** \n```", "```swift\nfunc serviceCharge(**forMealPrice** mealCost: Int) -> Int {\n  mealCost / 10\n}\nlet serviceChargeAmount = serviceCharge(**forMealPrice**: 50)\nprint(serviceChargeAmount) \n```", "```swift\nfunc calculateMonthlyPayments(carPrice: Double, downPayment: Double, interestRate: Double, paymentTerm: Double) -> Double {\n  func loanAmount() -> Double {\n    carPrice - downPayment\n  }\n  func totalInterest() -> Double {\n    interestRate * paymentTerm\n  }\n  func numberOfMonths() -> Double {\n    paymentTerm * 12\n  }\n  return ((loanAmount() + (loanAmount() *\n  totalInterest() / 100 )) / numberOfMonths())\n}\ncalculateMonthlyPayments(carPrice: 50000, downPayment: 5000, interestRate: 3.5, paymentTerm: 7.0) \n```", "```swift\nfunc approximateValueOfPi1() -> Double {\n  3.14159\n}\nfunc approximateValueOfPi2() -> Double {\n  22.0 / 7.0\n}\nfunc pi() -> (() -> Double) {\n  approximateValueOfPi1\n  // approximateValueOfPi2\n}\npi()() \n```", "```swift\nfunc isThereAMatch(listOfNumbers: [Int], condition: (Int) -> Bool) -> Bool {\n  for number in listOfNumbers {\n    if condition(number) {\n      return true\n    }\n  }\n  return false\n}\nfunc numberIsOdd(number: Int) -> Bool {\n  (number % 2) > 0\n}\nfunc numberIsEven(number: Int) -> Bool {\n  (number % 2) == 0\n}\nlet numbersList = [1, 3, 5, 7]\nisThereAMatch(listOfNumbers: numbersList, condition: numberIsOdd) \n```", "```swift\nfunc buySomething(itemValueEntered itemValueField: String, cardBalance: Int) -> Int {\n  guard let itemValue = Int(itemValueField) else {\n    print(\"Error in item value\")\n    return cardBalance\n  }\n  let remainingBalance = cardBalance - itemValue\n  return remainingBalance\n}\nprint(buySomething(itemValueEntered: \"10\", cardBalance: 50))\nprint(buySomething(itemValueEntered: \"blue\", cardBalance: 50)) \n```", "```swift\n40\nError in item value\n50 \n```", "```swift\nvar numbersArray = [2, 4, 6, 7]\nlet myClosure = { (number: Int) -> Int in\n   let result = number * number\n   return result\n}\nlet mappedNumbers = numbersArray.map(myClosure) \n```", "```swift\nvar testNumbers = [2, 4, 6, 7]\nlet mappedTestNumbers = testNumbers.map({ \n  (number: Int) -> Int in\n  let result = number * number\n  return result\n})\nprint(mappedTestNumbers) \n```", "```swift\nlet mappedTestNumbers = testNumbers.map({ number in\n  number * number\n}) \n```", "```swift\nlet mappedTestNumbers = testNumbers.map { number in\n  number * number\n} \n```", "```swift\nlet mappedTestNumbers = testNumbers.map { $0 * $0 } \n```"]