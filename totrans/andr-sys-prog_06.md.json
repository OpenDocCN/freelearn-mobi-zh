["```kt\nint main(int argc, char** argv) { \n    if (!strcmp(basename(argv[0]), \"ueventd\")) { \n        return ueventd_main(argc, argv); \n    } \n\n    if (!strcmp(basename(argv[0]), \"watchdogd\")) { \n        return watchdogd_main(argc, argv); \n    } \n    ... \n\n```", "```kt\non <trigger> \n    <command> \n    <command> \n    <command> \n    ... \n\n```", "```kt\non fs \n        mount_all /fstab.goldfish \n\n```", "```kt\n<name>=<value> \n\n```", "```kt\non property:sys.init_log_level=* \n    loglevel ${sys.init_log_level} \n\n```", "```kt\nservice <name> <pathname> [ <argument> ]* \n   <option> \n   <option> \n   ... \n\n```", "```kt\nservice goldfish-setup /system/etc/init.goldfish.sh \n    user root \n    group root \n    oneshot \n\n```", "```kt\n# Copyright (C) 2012 The Android Open Source Project \n# \n# IMPORTANT: Do not create world writable files or directories. \n# This is a common source of Android security bugs. \n# \n\nimport /init.environ.rc \nimport /init.usb.rc \nimport /init.${ro.hardware}.rc \nimport /init.usb.configfs.rc \nimport /init.${ro.zygote}.rc \nimport /init.trace.rc \n\non early-init \n... \n\n```", "```kt\n$ ls device/generic/goldfish\naudio           fstab.ranchu      libqemu  qemu-props\ncamera          gps               lights   sensors\ndata            init.goldfish.rc  opengl   ueventd.goldfish.rc\nfingerprint     init.goldfish.sh  power    ueventd.ranchu.rc\nfstab.goldfish  init.ranchu.rc    qemud    vibrator  \n\n```", "```kt\nservice goldfish-setup /system/etc/init.goldfish.sh \n    user root \n    group root \n    oneshot \n\n```", "```kt\n...\nemulator: argv[08] = \"-append\"\nemulator: argv[09] = \"qemu=1 clocksource=pit androidboot.console=ttyGF2 android.checkjni=1 console=ttyS0,38400 **androidboot.hardware=ranchu** qemu.gles=1 android.qemud=1\"\n...  \n\n```", "```kt\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<manifest> \n\n  <remote  name=\"github\" \n           revision=\"refs/tags/android-7.1.1_r4_x86emu_ch06_r1\" \n           fetch=\".\" /> \n\n  <remote  name=\"aosp\" \n           fetch=\"https://android.googlesource.com/\" /> \n  <default revision=\"refs/tags/android-7.1.1_r4\" \n           remote=\"aosp\" \n           sync-c=\"true\" \n           sync-j=\"1\" /> \n\n  <!-- github/shugaoye --> \n <project path=\"kernel\" name=\"goldfish\" remote=\"github\" /> <project path=\"device/generic/x86emu\" name=\"x86emu\" \n  remote=\"github\" /> <project path=\"bootable/newinstaller\"  \n  name=\"platform_bootable_newinstaller\" remote=\"github\" /> \n\n  <!-- aosp --> \n  <project path=\"build\" name=\"platform/build\" groups=\"pdk,tradefed\" > \n    <copyfile src=\"img/root.mk\" dest=\"Makefile\" /> \n  </project> \n... \n</manifest> \n\n```", "```kt\n$ ls -1 -F\nAndroid.mk\nboot/\neditdisklbl/\ninitrd/\ninstall/ \n\n```", "```kt\n$ make iso_img/usb_img/efi_img  \n\n```", "```kt\n$ cd bootable/newinstaller/initrd \n$ ls -1F \nbin/ \ninit* \nlib/ \nsbin/ \nscripts/ \n\n```", "```kt\n#!/bin/busybox sh \n# \n# By Chih-Wei Huang <cwhuang@linux.org.tw> \n# and Thorsten Glaser <tg@mirbsd.org> \n# \n# Last updated 2015/10/23 \n# \n# License: GNU Public License \n# We explicitely grant the right to use the scripts \n# with Android-x86 project. \n# \n\nPATH=/sbin:/bin:/system/bin:/system/xbin; export PATH \n... \necho -n Detecting Android-x86... \n... \nwhile :; do \n   for device in ${ROOT:-/dev/[hmsv][dmr][0-9a-z]*}; do \n check_root $device && break 2 \n         mountpoint -q /mnt && umount /mnt \n   done \n   sleep 1 \n   echo -n . \ndone \n... \n\n```", "```kt\n... \ncheck_root() \n{ \n... \n   if [ -n \"$iso\" -a -e /mnt/$iso ]; then \n         mount --move /mnt /iso \n         mkdir /mnt/iso \n         mount -o loop /iso/$iso /mnt/iso \n         SRC=iso \n elif [ ! -e /mnt/$SRC/ramdisk.img ]; then return 1 fi zcat /mnt/$SRC/ramdisk.img | cpio -id > /dev/null \n... \n\n```", "```kt\n... \nif [ -n \"$INSTALL\" ]; then \n zcat /src/install.img | ( cd /; cpio -iud > /dev/null ) \nfi \n... \n\n```", "```kt\n... \n# load scripts \nfor s in `ls /scripts/* /src/scripts/*`; do \n   test -e \"$s\" && source $s \ndone \n... \n\n```", "```kt\n... \n[ -n \"$INSTALL\" ] && do_install \n\nload_modules \nmount_data \nmount_sdcard \nsetup_tslib \nsetup_dpi \npost_detect \n... \nexec ${SWITCH:-switch_root} /android /init \n\n# avoid kernel panic \nwhile :; do \n   echo \n   echo '      Android-x86 console shell. Use only in emergencies.' \n   echo \n   debug_shell fatal-err \ndone \n\n```", "```kt\ndo_install() \n{ \n   error -e 'n  Android-x86 installer is not available.\\n  \n   Press RETURN to run live version.\\n' \n   read \n   cd /android \n} \n\n```", "```kt\ndo_install() \n{ \n  until install_hd; do \n    if [ $retval -eq 255 ]; then \n      dialog --title ' Error! ' --yes-label Retry --no-label Reboot  \n      --yesno 'nInstallation failed! Please check if you have enough \n      free disk space to install Android-x86.' 8 51 \n       [ $? -eq 1 ] && rebooting \n    fi \n  done \n\n  [ -n \"$VESA\" ] || runit=\"Run Android-x86\" \n... \n} \n\n```", "```kt\n... \n/dev/block/vda  /system  ext4      ro                 wait \n/dev/block/vdb  /cache   ext4      noatime,nosuid,nodev,nomblk_io_submit,errors=panic    wait \n/dev/block/vdc  /data    ext4      noatime,nosuid,nodev,nomblk_io_submit,errors=panic    wait \n... \n\n```", "```kt\n$ man qemu-img  \n\n```", "```kt\n... \ninitrd:  $(BUILT_IMG) \n\nX86EMU_EXTRA_SIZE := 100000000 \nX86EMU_DISK_SIZE := $(shell echo ${BOARD_SYSTEMIMAGE_PARTITION_SIZE}+${X86EMU_EXTRA_SIZE} | bc) \nX86EMU_TMP := x86emu_tmp \n\nqcow2_img: $(BUILT_IMG) \n  mkdir -p $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT} \n  cd $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT}; mkdir data \n  mv $(PRODUCT_OUT)/initrd.img $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT} \n  mv $(PRODUCT_OUT)/install.img $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT} \n  mv $(PRODUCT_OUT)/ramdisk.img $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT} \n  mv $(PRODUCT_OUT)/system.img $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT} \n  make_ext4fs -T -1 -l $(X86EMU_DISK_SIZE) $(PRODUCT_OUT)/${TARGET_PRODUCT}.img $(PRODUCT_OUT)/${X86EMU_TMP}  \n  mv $(PRODUCT_OUT)/${X86EMU_TMP}/${TARGET_PRODUCT}/*.img $(PRODUCT_OUT)/ \n  qemu-img convert -c -f raw -O qcow2 $(PRODUCT_OUT)/${TARGET_PRODUCT}.img $(PRODUCT_OUT)/${TARGET_PRODUCT}-qcow2.img \n  cd $(PRODUCT_OUT); qemu-img create -f qcow2 -b \n  ./${TARGET_PRODUCT}-qcow2.img ./${TARGET_PRODUCT}.img \n... \n\n```", "```kt\nmake_ext4fs -T {timestamp} -l {size of file system} {image file name} {source directory} {target out directory}  \n\n```", "```kt\n$ cd $OUT\n$ qemu-img create -f qcow2 -b ./x86emu_x86-qcow2.img ./x86emu_x86.img  \n\n```", "```kt\n$ qemu-img info x86emu_x86.img\nimage: x86emu_x86.img\nfile format: qcow2\nvirtual size: 1.3G (1442177024 bytes)\ndisk size: 196K\ncluster_size: 65536\nbacking file: ./x86emu_x86-qcow2.img\nFormat specific information:\n compat: 1.1\n lazy refcounts: false \n\n```", "```kt\n$ cd $AOSP/kernel\n$ git branch\n* android-x86emu-3.10\n$ gitk  \n\n```", "```kt\n$ make qcow2_img USE_SQUASHFS=0\n...\nmake_ext4fs -T -1 -S out/target/product/x86emu/root/file_contexts -L \nsystem -l 1342177280 -a system out/target/product/x86emu/obj/PACKAGING/systemimage_intermediates/system.img out/target/product/x86emu/system out/target/product/x86emu/system\nCreating filesystem with parameters:\n Size: 1342177280\n Block size: 4096\n Blocks per group: 32768\n Inodes per group: 8192\n Inode size: 256\n Journal blocks: 5120\n Label: system\n Blocks: 327680\n Block groups: 10\n Reserved block group size: 79\nCreated filesystem with 2122/81920 inodes and 178910/327680 blocks\nInstall system fs image: out/target/product/x86emu/system.img  \n\n```", "```kt\nVER ?= $(shell date +\"%F\") \n\n```", "```kt\nout/target/product/x86emu/system.img+ maxsize=1370278272 blocksize=2112 total=1342177280 reserve=13842048\nrm -rf out/target/product/x86emu/installer\nout/host/linux-x86/bin/acp -pr bootable/newinstaller/initrd out/target/product/x86emu/installer\nln -s /bin/ld-linux.so.2 out/target/product/x86emu/installer/lib\nmkdir -p out/target/product/x86emu/installer/android out/target/product/x86emu/installer/iso out/target/product/x86emu/installer/mnt out/target/product/x86emu/installer/proc out/target/product/x86emu/installer/sys out/target/product/x86emu/installer/tmp out/target/product/x86emu/installer/sfs out/target/product/x86emu/installer/hd\necho \"VER=x86emu\" > out/target/product/x86emu/installer/scripts/00-ver\nout/host/linux-x86/bin/mkbootfs out/target/product/x86emu/installer | gzip -9 > out/target/product/x86emu/initrd.img  \n\n```", "```kt\nmkdir -p out/target/product/x86emu/x86emu_tmp/x86emu_x86\ncd out/target/product/x86emu/x86emu_tmp/x86emu_x86; mkdir data\nmv out/target/product/x86emu/initrd.img out/target/product/x86emu/x86emu_tmp/x86emu_x86\nmv out/target/product/x86emu/install.img out/target/product/x86emu/x86emu_tmp/x86emu_x86\nmv out/target/product/x86emu/ramdisk.img out/target/product/x86emu/x86emu_tmp/x86emu_x86\nmv out/target/product/x86emu/system.img out/target/product/x86emu/x86emu_tmp/x86emu_x86\nmake_ext4fs -T -1 -l 1442177280 out/target/product/x86emu/x86emu_x86.img out/target/product/x86emu/x86emu_tmp out/target/product/x86emu/x86emu_tmp\nCreating filesystem with parameters:\n Size: 1442177024\n Block size: 4096\n Blocks per group: 32768\n Inodes per group: 8016\n Inode size: 256\n Journal blocks: 5501\n Label: \n Blocks: 352094\n Block groups: 11\n Reserved block group size: 87\nCreated filesystem with 17/88176 inodes and 340722/352094 blocks\nmv out/target/product/x86emu/x86emu_tmp/x86emu_x86/*.img out/target/product/x86emu/\nqemu-img convert -c -f raw -O qcow2 out/target/product/x86emu/x86emu_x86.img out/target/product/x86emu/x86emu_x86-qcow2.img\ncd out/target/product/x86emu; qemu-img create -f qcow2 -b ./x86emu_x86-qcow2.img ./x86emu_x86.img\nFormatting './x86emu_x86.img', fmt=qcow2 size=1442177024 backing_file='./x86emu_x86-qcow2.img' encryption=off cluster_size=65536 lazy_refcounts=off  \n\n```", "```kt\n#!/bin/sh \n\nif [ -z \"$1\" ]; then \n  EMULATOR1=emulator \nelse \n  EMULATOR1=\"/opt/VirtualGL/bin/vglrun emulator\" \nfi \n\nif [ -z \"$OUT\" ]; then \n  IMG_ROOT=. \nelse \n  IMG_ROOT=$OUT \nfi \n\n$EMULATOR1 @a23x86 -verbose -show-kernel -shell -system $IMG_ROOT/system.img -ramdisk $IMG_ROOT/initrd.img -initdata $IMG_ROOT/userdata.img -kernel $IMG_ROOT/kernel -qemu -append \"qemu=1 clocksource=pit android.checkjni=1 DEBUG=2 console=ttyS0,11520 androidboot.hardware=ranchu qemu.gles=1 android.qemud=1 root=/dev/sda SRC=x86emu_x86\" -hda $IMG_ROOT/x86emu_x86.img \n\n```", "```kt\n$ test-initrd.sh\n...\n(debug-found)@android:/android # mount\nrootfs on / type rootfs (rw)\nproc on /proc type proc (rw,relatime)\nsys on /sys type sysfs (rw,relatime)\ntmpfs on /android type tmpfs (rw,relatime)\n/dev/block/sda on /mnt type ext4 (rw,relatime,data=ordered)\n/dev/loop0 on /android/system type ext4 (rw,relatime,data=ordered)\n(debug-found)@android:/android # losetup -a \n/dev/loop0: 0 /mnt/x86emu_x86/system.img  \n\n```"]