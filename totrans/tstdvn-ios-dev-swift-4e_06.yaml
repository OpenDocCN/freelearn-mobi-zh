- en: '*Chapter 4*: The App We Are Going to Build'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you learned how to write unit tests and saw an easy
    example of **test-driven development** (**TDD**). When starting TDD, writing unit
    tests is easy for most people. The hard part is transferring knowledge from writing
    tests to driving development. What can be assumed? What should be done before
    we write the first test? What should be tested to end up with a complete app?
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you are used to thinking in terms of code. When you see a feature
    on the requirement list for an app, your brain already starts to lay out the code
    for this feature. For recurring problems in iOS development (such as building
    table views), you most probably have already developed your own best practices.
  prefs: []
  type: TYPE_NORMAL
- en: In TDD, you should not think about the code while working on the test. The tests
    have to describe what the unit under test should do and not how it should do it.
    It should be possible to change the implementation without breaking the tests.
    Thinking like this is the hard part of TDD. You'll need practice before this becomes
    natural.
  prefs: []
  type: TYPE_NORMAL
- en: To practice this development approach, we will develop a simple to-do list app
    in the remainder of this book. It is, on purpose, a boring and easy app. We want
    to concentrate on the TDD workflow, not complex implementations. An interesting
    app would distract from what is important in this book—how to perform TDD.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the app we are going to build and shows the views that
    the finished app will have.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main topics of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of to-do items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view for the details of a to-do item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view to add to-do items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started in Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code in this chapter is uploaded (in complete form) here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04](https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04)'
  prefs: []
  type: TYPE_NORMAL
- en: A list of to-do items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When starting the app (the one we are going to build), the user sees a list
    of to-do items on the screen of their iOS device. The items in the list consist
    of a title, an optional location, and the due date. New items can be added to
    the list by using an add (**+**) button, which is shown in the navigation bar
    of the view. The task list view will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – A list of to-do items'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – A list of to-do items
  prefs: []
  type: TYPE_NORMAL
- en: 'As a user, I have the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to see a list of to-do items when I open the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to add to-do items to the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a to-do list app, the user will obviously need to be able to check off items
    when they are finished. The checked items are shown below the unchecked items,
    and it is possible to uncheck them again. The app uses the **Delete** button in
    the UI of the table view to check and uncheck items. Checked items will be put
    at the end of the list in a section with the **Done** header. The UI for the to-do
    item list will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – To-do items can be checked as Done'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – To-do items can be checked as Done
  prefs: []
  type: TYPE_NORMAL
- en: 'As a user, I have the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to check a to-do item to mark it as finished.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to see all the checked items following the unchecked items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to uncheck a to-do item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to delete all the to-do items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the user taps an entry, the details of this entry are shown in the task
    detail view.
  prefs: []
  type: TYPE_NORMAL
- en: A view for the details of a to-do item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The task detail view shows all the information that''s stored for a to-do item.
    The information consists of a title, due date, location (name and address), and
    a description. If an address is given, a map with an address is shown. The detail
    view also allows checking off the item as done. The **Details** view looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The view for the details of a to-do item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – The view for the details of a to-do item
  prefs: []
  type: TYPE_NORMAL
- en: 'As a user, I have the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: I have tapped a to-do item in the list and I want to see its details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to check a to-do item from its details view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be able to add to-do items to the list. The next section shows what
    this input view will look like.
  prefs: []
  type: TYPE_NORMAL
- en: A view to add to-do items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the user selects the add (**+**) button in the list view, the task input
    view is shown. The user can add information for the task. Only the title is required.
    The **Save** button can only be selected when a title is given. It is not possible
    to add a task that is already on the list. The **Cancel** button dismisses the
    view. The task input view will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The view to add a to-do item to the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – The view to add a to-do item to the list
  prefs: []
  type: TYPE_NORMAL
- en: 'As a user, I have the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Given that I tapped the add (**+**) button in the item list, I want to see a
    form to put in the details (title, optional date, optional location name, optional
    address, and optional description) of a to-do item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I want to add a to-do item to the list of to-do items by tapping on the **Save**
    button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not implement the editing and deletion of tasks, but when you have worked
    through this book completely, it will be easy for you to add this feature yourself
    by writing the tests first.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that we will not test the look and design of the app. Unit tests
    cannot figure out whether an app looks like it was intended. Unit tests can test
    features, and these are independent of their presentation. In principle, it would
    be possible to write unit tests for the position and color of UI elements, but
    such things are very likely to change a lot in the early stages of development.
    We do not want to have failing tests only because a button has moved 10 points.
  prefs: []
  type: TYPE_NORMAL
- en: However, we will test whether the UI elements are present in the view. If your
    user cannot see the information for the tasks or if it is not possible to add
    all the information of a task, then the app does not meet the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss the structure of the app we are going to
    build.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start to implement the different views of our to-do app, we need
    to think about the structure of our app. The app is quite simple on purpose to
    help keep the focus on the main topic of this book: building an app using TDD.'
  prefs: []
  type: TYPE_NORMAL
- en: The table view controller, the delegate, and the data source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In iOS apps, data is often presented using a table view. Table views are highly
    optimized for performance; they are easy to use and implement. We will use a table
    view for the list of to-do items.
  prefs: []
  type: TYPE_NORMAL
- en: 'A table view is usually represented by `UITableViewController`, which is also
    the data source and delegate for the table view. This often leads to a massive
    table view controller, because it is doing too much: presenting the view, navigating
    to other view controllers, and managing the presentation of the data in the table
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the responsibility of the table view controller a bit, we will use
    the coordinator pattern. This way, a coordinator is responsible for navigating
    between different views of the app. As our app is quite simple, we will only need
    one coordinator for the whole app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The communication between the table view controller and the coordinator class
    will be defined using a protocol. Protocols define what the interface of a class
    looks like. This has a great benefit: if we need to replace an implementation
    with a better version (maybe because you have learned how to implement the feature
    in a better way), we only need to develop against the clear **application programming
    interface** (**API**). The inner workings of other classes do not matter.'
  prefs: []
  type: TYPE_NORMAL
- en: Table view cells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshots, the to-do list items have a title
    and, optionally, they can have a due date and a location name. The table view
    cells should only show the set data. We will accomplish this by implementing our
    own custom table view cell.
  prefs: []
  type: TYPE_NORMAL
- en: The model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The model of the app consists of the to-do item, the location, and an item manager,
    which allows the addition and removal of items and is also responsible for managing
    the items. Therefore, the controller will ask the item manager for items to present.
    The item manager will also be responsible for storing the items on disk.
  prefs: []
  type: TYPE_NORMAL
- en: Beginners often tend to manage the model objects within the controller. Then,
    the controller has a reference to a collection of items, and the addition and
    removal of items are directly done by the controller. This is not recommended
    because if we decide to change the storage of items (for example, using core data),
    their addition and removal would have to be changed within the controller. It
    is difficult to keep an overview of such a class as it does many different unrelated
    things; for this reason, it can be a source of bugs.
  prefs: []
  type: TYPE_NORMAL
- en: It's much easier to have a clear interface between the controller and the model
    objects because if we need to change how the model objects are managed, the controller
    can stay the same. We could even replace the complete model layer if we just keep
    the interface the same. Later in the book, we will see that this decoupling also
    helps to make testing easier.
  prefs: []
  type: TYPE_NORMAL
- en: Other views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app will have two more views: a task detail view and a task input view.'
  prefs: []
  type: TYPE_NORMAL
- en: When the user taps a to-do item in the list, the details of the item are presented
    in the task detail view controller. From the **Details** screen, the user will
    be able to check an item.
  prefs: []
  type: TYPE_NORMAL
- en: New to-do items will be added to the list through an input view. This view will
    be implemented using SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: The development strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we will build the app from the inside out. We will start with
    the model and then build the controllers and networking. At the end of the book,
    we will put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, you would rather build apps feature-by-feature when doing TDD, but
    by separating based on layers instead of features, it is easier to follow and
    keep an overview of what is happening. When you later need to refresh your memory,
    the relevant information you need is easier to find.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to set up the app in Xcode and tweak some
    Xcode behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s start our journey by creating a project that we will implement
    using TDD. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode and create a new iOS project using the **App** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `ToDo` as the product name, select the `Storyboard` interface and `Swift`
    as the language, and check the box next to **Include Tests**. Let the **Use Core
    Data** box stay unchecked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Xcode creates a small iOS project with three targets: one for the implementation
    code, one for the unit, and one for the UI tests. The template contains code that
    presents a single view on the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To take a look at how the app target and test target fit together, select the
    project in the project navigator and then select the `ToDoTests` target. In the
    **General** tab, you''ll find a setting for the **Host Application** that the
    test target should be able to test. It looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – General settings for the test target'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – General settings for the test target
  prefs: []
  type: TYPE_NORMAL
- en: Xcode has already set up the test target correctly to allow the testing of the
    implementations that we will write to the app target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, Xcode also created a test target for UI tests. UI tests are
    too slow for TDD. To keep the feedback from the test running fast, we need to
    disable the UI tests for the main scheme. Click the scheme in the **Build** information
    bar at the top of the Xcode window and select the **Test** stage. Next, uncheck
    the box next to the UI test target. The process is illustrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Disabling the UI tests'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Disabling the UI tests
  prefs: []
  type: TYPE_NORMAL
- en: Setting up useful Xcode behaviors for testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode has a feature called **Behaviors**. With the use of behaviors and tabs,
    Xcode can show useful information depending on its state.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Behaviors** window by navigating to **Xcode** | **Behaviors** | **Edit
    Behaviors**. On the left-hand side are the different stages for which you can
    add behaviors (**Build**, **Testing**, **Running**, and so on). These behaviors
    are useful when doing TDD.
  prefs: []
  type: TYPE_NORMAL
- en: The behaviors shown here are those that I find useful. Play around with the
    settings to find the ones most useful for you. Overall, I recommend using behaviors
    because I think they speed up development.
  prefs: []
  type: TYPE_NORMAL
- en: Useful build behaviors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the building starts, Xcode compiles the files and links them together.
    To see what is going on, you can activate the **Build** log when the building
    starts. It is recommended that you open the **Build** log in a new tab because
    this allows you to switch back to the code editor when no error occurs during
    the build:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Starts** stage and check **Show** for **window tab**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the name `Log` into the **named** field or use an emoji.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Show** for **navigator** and **Issues**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the window, check **Navigate to** and select **current log**.
    After you have made these changes, the settings window will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Behavior to show the build log when building starts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Behavior to show the build log when building starts
  prefs: []
  type: TYPE_NORMAL
- en: Build and run to see what the behavior looks like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing behaviors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I have a window tab for coding. The name of this tab is 🤓. Usually, in this
    tab, the test is open on the left-hand side, and in the **Assistant Editor** is
    the code to be tested (or in the case of TDD, the code to be written). It looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The <?AID d83e?><?AID dd13?> tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – The 🤓 tab
  prefs: []
  type: TYPE_NORMAL
- en: When the test starts, we want to see the code editor again. So, we add a behavior
    to show the 🤓 tab. In addition to this, we want to see the **Test** navigator
    and debugger with the console view.
  prefs: []
  type: TYPE_NORMAL
- en: When the test succeeds, Xcode should show a bezel to notify us that all tests
    have passed. Navigate to the **Testing** | **Succeeds** stage and check the **Notify
    using system notification** setting. In addition to this, it should hide the navigator
    and the debugger, because we want to concentrate on refactoring or writing the
    next test.
  prefs: []
  type: TYPE_NORMAL
- en: In case the testing fails (which happens a lot in TDD), Xcode should show a
    notification again. I like to hide the debugger because usually, it is not the
    best place to figure out what is going on in the case of a failing test. In most
    cases in TDD, we already know what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: You can even make your Mac speak announcements. Check **Speak announcements
    using** and select the voice you like but be careful not to annoy your co-workers.
    You might need their help in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the project and Xcode are set up, and we can start our TDD journey.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at the app that we are going to build throughout
    the course of this book. We took a look at how the screens of the app will look
    when we are finished with it. We created a project that we will use later on and
    learned about Xcode behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will develop the data model of the app using TDD. We
    will use structs for the model wherever we can because models are best represented
    in Swift by value types.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Replicate the mock-up screens using a storyboard in Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the behaviors such that you can figure out if a test failed or if all
    tests passed without looking at the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
