- en: '*Chapter 4*: The App We Are Going to Build'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第四章*：我们将要构建的应用'
- en: In the previous chapters, you learned how to write unit tests and saw an easy
    example of **test-driven development** (**TDD**). When starting TDD, writing unit
    tests is easy for most people. The hard part is transferring knowledge from writing
    tests to driving development. What can be assumed? What should be done before
    we write the first test? What should be tested to end up with a complete app?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你学习了如何编写单元测试，并看到了**测试驱动开发**（**TDD**）的一个简单示例。当开始TDD时，对大多数人来说编写单元测试很容易。困难的部分是将知识从编写测试转移到驱动开发。可以假设什么？在我们编写第一个测试之前应该做什么？我们应该测试什么才能最终得到一个完整的应用？
- en: As a developer, you are used to thinking in terms of code. When you see a feature
    on the requirement list for an app, your brain already starts to lay out the code
    for this feature. For recurring problems in iOS development (such as building
    table views), you most probably have already developed your own best practices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，你习惯于从代码的角度思考。当你看到应用需求列表上的一个功能时，你的大脑已经开始为这个功能规划代码。对于iOS开发中反复出现的问题（如构建表格视图），你很可能已经开发了自己的最佳实践。
- en: In TDD, you should not think about the code while working on the test. The tests
    have to describe what the unit under test should do and not how it should do it.
    It should be possible to change the implementation without breaking the tests.
    Thinking like this is the hard part of TDD. You'll need practice before this becomes
    natural.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在TDD中，你在编写测试时不应考虑代码。测试必须描述被测试单元应该做什么，而不是它应该如何做。应该能够在不破坏测试的情况下更改实现。这种思维方式是TDD的难点。你需要练习才能使它变得自然。
- en: To practice this development approach, we will develop a simple to-do list app
    in the remainder of this book. It is, on purpose, a boring and easy app. We want
    to concentrate on the TDD workflow, not complex implementations. An interesting
    app would distract from what is important in this book—how to perform TDD.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习这种开发方法，我们将在这本书的剩余部分开发一个简单的待办事项列表应用。故意让它变得无聊且简单。我们想专注于TDD工作流程，而不是复杂的实现。一个有趣的应用会分散本书的重点——如何执行TDD。
- en: This chapter introduces the app we are going to build and shows the views that
    the finished app will have.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了我们将要构建的应用，并展示了完成应用将拥有的视图。
- en: 'These are the main topics of this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章的主要主题：
- en: A list of to-do items
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待办事项列表
- en: A view for the details of a to-do item
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待办事项详情视图
- en: A view to add to-do items
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加待办事项的视图
- en: The structure of the app
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用的结构
- en: Getting started in Xcode
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Xcode 中开始
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code in this chapter is uploaded (in complete form) here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码都已上传（完整形式）在此：
- en: '[https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04](https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04](https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter04)'
- en: A list of to-do items
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待办事项列表
- en: 'When starting the app (the one we are going to build), the user sees a list
    of to-do items on the screen of their iOS device. The items in the list consist
    of a title, an optional location, and the due date. New items can be added to
    the list by using an add (**+**) button, which is shown in the navigation bar
    of the view. The task list view will look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当启动应用（我们将要构建的应用）时，用户会在他们的iOS设备屏幕上看到待办事项列表。列表中的项目包括标题、可选的位置和截止日期。可以通过使用添加（**+**）按钮将新项目添加到列表中，该按钮显示在视图的导航栏中。任务列表视图将看起来像这样：
- en: '![Figure 4.1 – A list of to-do items'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – 待办事项列表'
- en: '](img/Figure_4.01_B18127.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.01 – 待办事项列表](img/Figure_4.01_B18127.jpg)'
- en: Figure 4.1 – A list of to-do items
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 待办事项列表
- en: 'As a user, I have the following requirements:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我有以下要求：
- en: I want to see a list of to-do items when I open the app.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想在打开应用时看到待办事项列表。
- en: I want to add to-do items to the list.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想将待办事项添加到列表中。
- en: 'In a to-do list app, the user will obviously need to be able to check off items
    when they are finished. The checked items are shown below the unchecked items,
    and it is possible to uncheck them again. The app uses the **Delete** button in
    the UI of the table view to check and uncheck items. Checked items will be put
    at the end of the list in a section with the **Done** header. The UI for the to-do
    item list will look like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在待办事项列表应用中，用户显然需要在完成事项时能够勾选它们。勾选的事项会显示在未勾选事项下方，并且可以再次取消勾选。应用使用表格视图的用户界面中的**删除**按钮来勾选和取消勾选事项。勾选的事项将被放在列表末尾的**完成**标题部分。待办事项列表的用户界面看起来如下：
- en: '![Figure 4.2 – To-do items can be checked as Done'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 可以勾选待办事项为完成'
- en: '](img/Figure_4.02_B18127.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.02_B18127.jpg)'
- en: Figure 4.2 – To-do items can be checked as Done
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 可以勾选待办事项为完成
- en: 'As a user, I have the following requirements:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我有以下要求：
- en: I want to check a to-do item to mark it as finished.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要勾选一个待办事项以标记它为完成。
- en: I want to see all the checked items following the unchecked items.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要看到所有勾选的事项都跟在未勾选事项之后。
- en: I want to uncheck a to-do item.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要取消勾选一个待办事项。
- en: I want to delete all the to-do items.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要删除所有待办事项。
- en: When the user taps an entry, the details of this entry are shown in the task
    detail view.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击一个条目时，该条目的详细信息将在任务详情视图中显示。
- en: A view for the details of a to-do item
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 待办事项详情视图
- en: 'The task detail view shows all the information that''s stored for a to-do item.
    The information consists of a title, due date, location (name and address), and
    a description. If an address is given, a map with an address is shown. The detail
    view also allows checking off the item as done. The **Details** view looks like
    this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任务详情视图显示了存储在待办事项中的所有信息。信息包括标题、截止日期、位置（名称和地址）以及描述。如果提供了地址，则会显示带有地址的地图。详情视图还允许勾选事项为完成。**详情**视图看起来如下：
- en: '![Figure 4.3 – The view for the details of a to-do item'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 – 待办事项详情视图'
- en: '](img/Figure_4.03_B18127.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B18127.jpg)'
- en: Figure 4.3 – The view for the details of a to-do item
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 待办事项详情视图
- en: 'As a user, I have the following requirements:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我有以下要求：
- en: I have tapped a to-do item in the list and I want to see its details.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在列表中点击了一个待办事项，并想要看到它的详情。
- en: I want to check a to-do item from its details view.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要从详情视图中勾选待办事项。
- en: You need to be able to add to-do items to the list. The next section shows what
    this input view will look like.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要能够将待办事项添加到列表中。下一节将展示这个输入视图将看起来是什么样子。
- en: A view to add to-do items
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加待办事项的视图
- en: 'When the user selects the add (**+**) button in the list view, the task input
    view is shown. The user can add information for the task. Only the title is required.
    The **Save** button can only be selected when a title is given. It is not possible
    to add a task that is already on the list. The **Cancel** button dismisses the
    view. The task input view will look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在列表视图中选择添加（**+**）按钮时，将显示任务输入视图。用户可以为任务添加信息。标题是必需的。只有提供了标题时，才能选择**保存**按钮。无法添加列表中已经存在的任务。**取消**按钮将关闭视图。任务输入视图将看起来如下：
- en: '![Figure 4.4 – The view to add a to-do item to the list'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 – 添加待办事项到列表的视图'
- en: '](img/Figure_4.04_B18127.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B18127.jpg)'
- en: Figure 4.4 – The view to add a to-do item to the list
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 添加待办事项到列表的视图
- en: 'As a user, I have the following requirements:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，我有以下要求：
- en: Given that I tapped the add (**+**) button in the item list, I want to see a
    form to put in the details (title, optional date, optional location name, optional
    address, and optional description) of a to-do item.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设我在项目列表中点击了添加（**+**）按钮，我想要看到一个表单来输入待办事项的详情（标题、可选日期、可选位置名称、可选地址和可选描述）。
- en: I want to add a to-do item to the list of to-do items by tapping on the **Save**
    button.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想要通过点击**保存**按钮将待办事项添加到待办事项列表中。
- en: We will not implement the editing and deletion of tasks, but when you have worked
    through this book completely, it will be easy for you to add this feature yourself
    by writing the tests first.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不会实现任务的编辑和删除功能，但当你完全阅读完这本书后，通过先编写测试，你将很容易自己添加这个功能。
- en: Keep in mind that we will not test the look and design of the app. Unit tests
    cannot figure out whether an app looks like it was intended. Unit tests can test
    features, and these are independent of their presentation. In principle, it would
    be possible to write unit tests for the position and color of UI elements, but
    such things are very likely to change a lot in the early stages of development.
    We do not want to have failing tests only because a button has moved 10 points.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们不会测试应用的外观和设计。单元测试无法确定应用是否看起来符合预期。单元测试可以测试功能，而这些功能与其展示是独立的。原则上，我们可以为UI元素的定位和颜色编写单元测试，但这些事情在开发早期阶段很可能会有很大变化。我们不希望仅仅因为按钮移动了10个点就出现失败的测试。
- en: However, we will test whether the UI elements are present in the view. If your
    user cannot see the information for the tasks or if it is not possible to add
    all the information of a task, then the app does not meet the requirements.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将测试视图中的UI元素是否存在。如果你的用户看不到任务的信息，或者无法添加任务的所有信息，那么该应用不符合要求。
- en: In the next section, we will discuss the structure of the app we are going to
    build.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论我们将要构建的应用的结构。
- en: The structure of the app
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用结构
- en: 'Before we start to implement the different views of our to-do app, we need
    to think about the structure of our app. The app is quite simple on purpose to
    help keep the focus on the main topic of this book: building an app using TDD.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实现待办应用的不同视图之前，我们需要考虑应用的结构。故意使应用保持简单，以帮助集中关注本书的主要主题：使用TDD构建应用。
- en: The table view controller, the delegate, and the data source
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格视图控制器、代理和数据源
- en: In iOS apps, data is often presented using a table view. Table views are highly
    optimized for performance; they are easy to use and implement. We will use a table
    view for the list of to-do items.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS应用中，数据通常使用表格视图来展示。表格视图在性能上高度优化；它们易于使用和实现。我们将使用表格视图来展示待办事项列表。
- en: 'A table view is usually represented by `UITableViewController`, which is also
    the data source and delegate for the table view. This often leads to a massive
    table view controller, because it is doing too much: presenting the view, navigating
    to other view controllers, and managing the presentation of the data in the table
    view.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图通常由`UITableViewController`表示，它也是表格视图的数据源和代理。这通常会导致一个庞大的表格视图控制器，因为它做了太多事情：展示视图、导航到其他视图控制器，以及管理表格视图中数据的展示。
- en: To reduce the responsibility of the table view controller a bit, we will use
    the coordinator pattern. This way, a coordinator is responsible for navigating
    between different views of the app. As our app is quite simple, we will only need
    one coordinator for the whole app.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻表格视图控制器的责任，我们将使用协调器模式。这样，协调器负责在应用的不同视图之间导航。由于我们的应用相当简单，我们只需要一个协调器来管理整个应用。
- en: 'The communication between the table view controller and the coordinator class
    will be defined using a protocol. Protocols define what the interface of a class
    looks like. This has a great benefit: if we need to replace an implementation
    with a better version (maybe because you have learned how to implement the feature
    in a better way), we only need to develop against the clear **application programming
    interface** (**API**). The inner workings of other classes do not matter.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表格视图控制器与协调器类之间的通信将通过协议来定义。协议定义了一个类的接口看起来是什么样子。这有一个很大的好处：如果我们需要用更好的版本替换实现（可能是因为你学会了以更好的方式实现功能），我们只需要针对清晰的**应用程序编程接口**（**API**）进行开发。其他类的内部工作方式并不重要。
- en: Table view cells
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表格视图单元格
- en: As you can see in the preceding screenshots, the to-do list items have a title
    and, optionally, they can have a due date and a location name. The table view
    cells should only show the set data. We will accomplish this by implementing our
    own custom table view cell.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，待办事项列表项有一个标题，并且可选地可以有一个截止日期和位置名称。表格视图单元格应仅显示设置的数据。我们将通过实现我们自己的自定义表格视图单元格来完成这一点。
- en: The model
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: The model of the app consists of the to-do item, the location, and an item manager,
    which allows the addition and removal of items and is also responsible for managing
    the items. Therefore, the controller will ask the item manager for items to present.
    The item manager will also be responsible for storing the items on disk.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的模型由待办事项、位置和项目管理者组成，它允许添加和删除项目，并负责管理项目。因此，控制器将向项目管理者请求要显示的项目。项目管理者还将负责在磁盘上存储项目。
- en: Beginners often tend to manage the model objects within the controller. Then,
    the controller has a reference to a collection of items, and the addition and
    removal of items are directly done by the controller. This is not recommended
    because if we decide to change the storage of items (for example, using core data),
    their addition and removal would have to be changed within the controller. It
    is difficult to keep an overview of such a class as it does many different unrelated
    things; for this reason, it can be a source of bugs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者往往倾向于在控制器内管理模型对象。然后，控制器有一个对项目集合的引用，项目的添加和删除直接由控制器完成。这不被推荐，因为如果我们决定更改项目的存储（例如，使用
    Core Data），它们的添加和删除必须在控制器内进行更改。这样的类很难保持概览，因为它做了许多不同且不相关的事情；因此，它可能是一个错误源。
- en: It's much easier to have a clear interface between the controller and the model
    objects because if we need to change how the model objects are managed, the controller
    can stay the same. We could even replace the complete model layer if we just keep
    the interface the same. Later in the book, we will see that this decoupling also
    helps to make testing easier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器和模型对象之间有一个清晰的接口要容易得多，因为如果我们需要更改模型对象的管理方式，控制器可以保持不变。如果我们只是保持接口不变，甚至可以替换整个模型层。本书的后面，我们将看到这种解耦也有助于使测试更容易。
- en: Other views
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他视图
- en: 'The app will have two more views: a task detail view and a task input view.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将有两个额外的视图：任务详情视图和任务输入视图。
- en: When the user taps a to-do item in the list, the details of the item are presented
    in the task detail view controller. From the **Details** screen, the user will
    be able to check an item.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在列表中点击待办事项时，该事项的详细信息将在任务详情视图控制器中显示。从**详情**屏幕，用户将能够勾选一个事项。
- en: New to-do items will be added to the list through an input view. This view will
    be implemented using SwiftUI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新的待办事项将通过输入视图添加到列表中。此视图将使用 SwiftUI 实现。
- en: The development strategy
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发策略
- en: In this book, we will build the app from the inside out. We will start with
    the model and then build the controllers and networking. At the end of the book,
    we will put everything together.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将从内到外构建应用程序。我们将从模型开始，然后构建控制器和网络。本书的结尾，我们将把所有东西组合在一起。
- en: Usually, you would rather build apps feature-by-feature when doing TDD, but
    by separating based on layers instead of features, it is easier to follow and
    keep an overview of what is happening. When you later need to refresh your memory,
    the relevant information you need is easier to find.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在进行 TDD 时，你可能会按功能一个接一个地构建应用程序，但通过按层而不是按功能分离，更容易跟踪和了解正在发生的事情。当你后来需要刷新记忆时，你需要的相关信息更容易找到。
- en: In the next section, we are going to set up the app in Xcode and tweak some
    Xcode behaviors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将设置 Xcode 中的应用程序并调整一些 Xcode 的行为。
- en: Getting started in Xcode
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Xcode 中开始
- en: 'Now, let''s start our journey by creating a project that we will implement
    using TDD. Proceed as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过创建一个项目开始我们的旅程，我们将使用 TDD 来实现它。按照以下步骤进行：
- en: Open Xcode and create a new iOS project using the **App** template.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode 并使用**应用程序**模板创建一个新的 iOS 项目。
- en: In the `ToDo` as the product name, select the `Storyboard` interface and `Swift`
    as the language, and check the box next to **Include Tests**. Let the **Use Core
    Data** box stay unchecked.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“`ToDo`”作为产品名称时，选择“`Storyboard`”界面和“`Swift`”作为语言，并勾选**包含测试**旁边的框。让**使用 Core
    Data**框保持未勾选。
- en: 'Xcode creates a small iOS project with three targets: one for the implementation
    code, one for the unit, and one for the UI tests. The template contains code that
    presents a single view on the screen.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 创建了一个包含三个目标的 iOS 项目：一个用于实现代码，一个用于单元测试，一个用于 UI 测试。模板包含在屏幕上显示单个视图的代码。
- en: 'To take a look at how the app target and test target fit together, select the
    project in the project navigator and then select the `ToDoTests` target. In the
    **General** tab, you''ll find a setting for the **Host Application** that the
    test target should be able to test. It looks like this:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – General settings for the test target'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B18127.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – General settings for the test target
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Xcode has already set up the test target correctly to allow the testing of the
    implementations that we will write to the app target.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, Xcode also created a test target for UI tests. UI tests are
    too slow for TDD. To keep the feedback from the test running fast, we need to
    disable the UI tests for the main scheme. Click the scheme in the **Build** information
    bar at the top of the Xcode window and select the **Test** stage. Next, uncheck
    the box next to the UI test target. The process is illustrated in the following
    screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Disabling the UI tests'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B18127.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Disabling the UI tests
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Setting up useful Xcode behaviors for testing
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode has a feature called **Behaviors**. With the use of behaviors and tabs,
    Xcode can show useful information depending on its state.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Behaviors** window by navigating to **Xcode** | **Behaviors** | **Edit
    Behaviors**. On the left-hand side are the different stages for which you can
    add behaviors (**Build**, **Testing**, **Running**, and so on). These behaviors
    are useful when doing TDD.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: The behaviors shown here are those that I find useful. Play around with the
    settings to find the ones most useful for you. Overall, I recommend using behaviors
    because I think they speed up development.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Useful build behaviors
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the building starts, Xcode compiles the files and links them together.
    To see what is going on, you can activate the **Build** log when the building
    starts. It is recommended that you open the **Build** log in a new tab because
    this allows you to switch back to the code editor when no error occurs during
    the build:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Starts** stage and check **Show** for **window tab**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the name `Log` into the **named** field or use an emoji.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Show** for **navigator** and **Issues**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the window, check **Navigate to** and select **current log**.
    After you have made these changes, the settings window will look like this:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Behavior to show the build log when building starts'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B18127.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Behavior to show the build log when building starts
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Build and run to see what the behavior looks like.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing behaviors
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I have a window tab for coding. The name of this tab is 🤓. Usually, in this
    tab, the test is open on the left-hand side, and in the **Assistant Editor** is
    the code to be tested (or in the case of TDD, the code to be written). It looks
    like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The <?AID d83e?><?AID dd13?> tab'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B18127.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – The 🤓 tab
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: When the test starts, we want to see the code editor again. So, we add a behavior
    to show the 🤓 tab. In addition to this, we want to see the **Test** navigator
    and debugger with the console view.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试开始时，我们希望再次看到代码编辑器。因此，我们添加了一个显示🤓标签的行为。除此之外，我们还想看到带有控制台视图的**测试**导航器和调试器。
- en: When the test succeeds, Xcode should show a bezel to notify us that all tests
    have passed. Navigate to the **Testing** | **Succeeds** stage and check the **Notify
    using system notification** setting. In addition to this, it should hide the navigator
    and the debugger, because we want to concentrate on refactoring or writing the
    next test.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试成功时，Xcode应该显示一个边框来通知我们所有测试都已通过。导航到**测试** | **成功**阶段，并检查**使用系统通知通知**设置。除此之外，它还应该隐藏导航器和调试器，因为我们想专注于重构或编写下一个测试。
- en: In case the testing fails (which happens a lot in TDD), Xcode should show a
    notification again. I like to hide the debugger because usually, it is not the
    best place to figure out what is going on in the case of a failing test. In most
    cases in TDD, we already know what the problem is.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试失败（在TDD中这种情况经常发生），Xcode应该再次显示通知。我喜欢隐藏调试器，因为通常情况下，它不是找出失败测试中发生什么情况的最佳位置。在大多数TDD的情况下，我们
    already know what the problem is.
- en: You can even make your Mac speak announcements. Check **Speak announcements
    using** and select the voice you like but be careful not to annoy your co-workers.
    You might need their help in the future.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以让你的Mac朗读公告。检查**使用朗读公告**并选择你喜欢的声音，但要注意不要惹恼你的同事。你将来可能需要他们的帮助。
- en: Now, the project and Xcode are set up, and we can start our TDD journey.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，项目和Xcode已经设置好了，我们可以开始我们的TDD之旅了。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a look at the app that we are going to build throughout
    the course of this book. We took a look at how the screens of the app will look
    when we are finished with it. We created a project that we will use later on and
    learned about Xcode behaviors.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了一下我们将在本书的整个过程中构建的应用程序。我们查看了一下完成应用后屏幕将如何显示。我们创建了一个稍后将要使用的项目，并了解了Xcode的行为。
- en: In the next chapter, we will develop the data model of the app using TDD. We
    will use structs for the model wherever we can because models are best represented
    in Swift by value types.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用TDD开发应用程序的数据模型。我们将在可能的地方使用结构体来表示模型，因为模型在Swift中最好用值类型来表示。
- en: Exercises
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Replicate the mock-up screens using a storyboard in Xcode.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Xcode中的故事板复制模拟屏幕。
- en: Change the behaviors such that you can figure out if a test failed or if all
    tests passed without looking at the screen.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改行为，以便你可以在不查看屏幕的情况下确定测试是否失败或所有测试是否通过。
