- en: Chapter 12. Multitasking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting application states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving notifications for application states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running code in the background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio in the background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network connectivity maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the iOS platform was introduced in 2007, bringing lots of exciting new
    features to users, it drastically changed the concept of mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Despite its huge success, it lacked some features at the time that were considered
    as "basic". One of these features was multitasking; that is, support for running
    multiple processes at the same time. The platform actually did support multitasking
    to system processes internally, but it was not available to developers. Starting
    with iOS 4, Apple provided support for multitasking, although it is still quite
    different to what most developers are accustomed to.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to make use of the platform's multitasking
    features. We will see under what circumstances we can use these features and what
    functionality we can provide through multitasking to the users of our applications.
    Specifically, we will learn about an application's states and its runtime lifecycle.
    Through a series of detailed example projects, we will be able to execute code
    while an application is in the background, support audio playback, and VoIP connection
    maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting application states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to detect and respond accordingly when an
    application transitions from the active to the inactive state, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `AppStateApp`. There is no
    need for a view controller in this example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following method overrides in the `AppDelegate` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application either on the simulator or on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **home** button to suspend the application, and watch the **Application
    Output** pad in MonoDevelop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `UIApplicationDelegate` class contains methods that are triggered at specific
    notifications issued by the runtime. These methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnActivated:` This method is called when the application is made active, for
    example, when unlocking the screen, or when the application starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnResignActivation:` This method is called when the application is about to
    become inactive, for example, when the screen is locked or when the multitasking
    bar is presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DidEnterBackground:` This method is called when the application has entered
    the background, for example, when pressing the **home** button. The application
    is suspended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WillEnterForeground:` This method is called when the application is about
    to return to the foreground.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that when the application is moved to the background, both the `OnResignActivation`
    and `DidEnterBackground` methods are called. Similarly, when the application is
    moved to the foreground, both the `WillEnterForeground` and `OnActivated` methods
    are called.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these methods contain one parameter, which contains the `UIApplication`
    instance of the application. The `UIApplication` class contains the property `ApplicationState`,
    which returns the state of the application in values of the `UIApplicationState`
    property. These values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Active:` This value indicates that the application is active'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Inactive:` This value indicates that the application is inactive, for example,
    when a notification alert is displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Background:` This value indicates that the application is in the background'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multitasking is a feature of iOS 4+, and not all devices support multitasking,
    even if they are running on iOS 4+. For versions prior to 4, when the **home**
    button is pressed, the `WillTerminate` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are cases, however, in which iOS will kill your application; for example,
    when a memory warning is issued and your application does not free up resources.
    The `WillTerminate` method will also be called in these cases.
  prefs: []
  type: TYPE_NORMAL
- en: Support for multitasking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To check if the device supports multitasking, check the `UIDevice.CurrentDevice.IsMultitaskingSupported`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Proper usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These methods are very useful because they allow us to save the current data
    that is presented to the user when the application changes state. When the application
    transitions to an inactive or background state, each method is given a limited
    amount of time to execute, so we should make sure they do not perform long-running
    operations, or iOS will kill the application.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving notifications for application states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss getting notified to application state changes
    outside the scope of the `UIApplicationDelegate` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `NotifyStatesApp`. Add a view
    with controller to the project, and name it `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following fields in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `ViewDidLoad` override, call the `AddAppStateObservers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the **home** button, and watch the output in the **Application Output**
    pad. It should be similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1468EXP_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from calling the methods of the `UIApplicationDelegate` object for application
    states, iOS issues notifications that we can receive. This is very useful, because
    in most cases we need to be notified for application state changes outside of
    the scope of the `AppDelegate` class.
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish this, we use the `NSNotificationCenter:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The notification keys we are interested in are exposed through the `UIApplication`
    static properties. This example only adds notification observers for transition
    between background and foreground.
  prefs: []
  type: TYPE_NORMAL
- en: The result is similar to the example of the previous recipe, but only after
    the `MainController` is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add notification observers for when the application is activated or resigns
    activation, we use the `UIApplication.DidBecomeActiveNotification` and `UIApplication.WillResignActiveNotification`
    keys, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Removing notification observers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To remove the notification observers when they are no longer needed, call the
    `RemoveAppStateObservers` method inside the `ViewDidUnload` override:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Detecting application states*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running code in the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to execute code in the background, taking
    full advantage of iOS' multitasking feature.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `BackgroundCodeApp`. There
    is no need for a view controller in this example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code in the `AppDelegate` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and run the application on the simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the **home** button to make the application enter the background, and
    watch the **Application Output**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before the background task completes (one minute), bring the application to
    the foreground by either tapping on its icon in the multitasking bar, or on its
    icon on the **home** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous tasks, we learned how to get informed of an application's transitions
    from the foreground to the background, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Multitasking on iOS is not quite what we are used to on other platforms. The
    iOS platform makes sure that the foreground application will have all the available
    resources at its disposal (and the user's). To accomplish this, when the application
    enters the background, it is being suspended by the operating system. When it
    is suspended, it does not execute any code whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to prevent the application from being suspended when the user presses
    the **home** button, we can ask for background time. The time we ask for is limited
    to 600 seconds (10 minutes), which is more than enough for the majority of tasks
    we are likely to perform in the background (for example, save UI state, complete
    a file download/upload, close any open connections, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'To ask for background time, we call the `BeginBackgroundTask` method of our
    `UIApplication` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The method accepts one parameter of the type `NSAction` and returns an integer,
    which corresponds to the task ID. The `NSAction` parameter represents the block
    of code that will be executed just before the background time elapses. Inside
    that block of code, we have to call the `EndBackgroundTask` method, passing the
    ID of the task that was started, which will inform the runtime that we no longer
    need background time. Each call of `BeginBackgroundTask` should be followed by
    a call to `EndBackgroundTask`. If we do not call this method and the background
    time elapses, the application will be terminated.
  prefs: []
  type: TYPE_NORMAL
- en: After calling the `BeginBackgroundTask` method, we can execute the code we want.
    To allow the `DidEnterBackground` method to complete and to avoid blocking the
    main thread, we just enclose our code to either an asynchronous call, or in a
    separate thread. In this example, we use a thread from the `ThreadPool`. Since
    this specific task will be completed before the time we have elapses, we call
    the `EndBackgroundTask` method to let the system know that the job is done. The
    block of code we passed to the `BeginBackgroundTask` method will not be executed,
    since we ended the task.
  prefs: []
  type: TYPE_NORMAL
- en: There are cases, however, where the user might bring the application to the
    foreground while a background task is still running. To cover this scenario, we
    need to override the `WillEnterForeground` method and handle it in an appropriate
    manner. We can either stop the background task (by calling `EndBackgroundTask)`,
    or provide some sort of feedback to the user that a task is still running. Making
    an asynchronous call to our code in this scenario is best practice. If the code
    of our background task is synchronous, when the user brings the application to
    the foreground and the task is still running, the application will be frozen until
    the task completes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To know how much time is left to perform background tasks, we can check the
    value of the `BackgroundTimeRemaining` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Important considerations for background code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Do not update the UI while the application is in the background:** doing
    so may cause your application to be terminated or crash. Any updates to UI elements
    that take place while the application is in the background are queued to be performed
    when it returns to the foreground. This will surely make the application unresponsive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not inform the user to bring your application to the foreground, just
    to give more time to the task:** doing so will surely get your application rejected
    from the application store approval process. If a background task is in progress
    and the user brings the application to the foreground, moving the application
    back to the background again basically resets the background time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform lightweight operations in the background to avoid the runtime from killing
    your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid using external resources (for example, resources retrieved through the
    assets library).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Detecting application states*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio in the background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to prevent the application from being suspended,
    in order to allow audio playback.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `BackgroundAudioApp`. Add a
    button on the view of `MainController`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `Info.plist` file, and add the key `UIBackgroundModes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the item audio under it. Add the `MonoTouch.AVFoundation` namespace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code in the `MainController` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a sound file to the project, and set its **Build Action** to **Content**.
    This example uses a 20 second-long sound file named `sound.m4a`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile and run the application on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tap the **Start playing** button, and press the **home** button to make the
    application enter the background. Notice that the sound continues playing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make sure our application will be able to play audio while it is in the background,
    we have to set the audio item in the `UIBackgroundModes` key in the `Info.plist`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we use the `AVAudioPlayer` class to play a sound file. Just
    creating an instance of the class and calling its `Play` method is not enough
    though. We have to set a specific type for the audio session category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The static method `AVAudioSession.SharedInstance` returns the current audio
    session object. The audio session category is set to `AVAudioSession.CategoryPlayback`,
    which allows the `AVAudioPlayer` to play sounds while the application is in the
    background. This requirement is specific to objects in the `MonoTouch.AVFoundation`
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The available audio session categories are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CategoryAmbient:` In this category, sounds are silenced when the device screen
    locks or when the device sound silence switch is on. Sounds from external resources
    (such as the iPod application) are mixed with this category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategorySoloAmbient:` This is the default category. Sounds from external resources
    are silenced with this category. Sounds are silenced when the screen is locked
    or when the device silent switch is on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoryPlayback:` In this category, sounds are not silenced when the screen
    is locked or when the silent switch is on. Sounds from external resources are
    silenced, but can be mixed if the `MonoTouch.AudioToolbox.AudioSession.OverrideCategoryMixWithOthers`
    property is set to `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoryRecord:` This category is for recording audio. All audio playback
    is silenced. Recording continues even when the screen is locked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoryPlayAndRecord:` This category is for applications that need to record
    and play audio. Sounds from external resources are silenced, but can be mixed
    if the `MonoTouch.AudioToolbox.AudioSession.OverrideCategoryMixWithOthers` property
    is set to `true`. Sounds continue playing when the screen is locked or the silent
    switch is on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CategoryAudioProcessing:` This category is specific for processing audio.
    Sound playback and recording is disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background state for audio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even when the application is configured through the `Info.plist` file to support
    background audio playback, when the playback completes, the application will be
    suspended.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Network connectivity maintenance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Location Services and Maps"), Location
    Services and Maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network connectivity maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to periodically wake the application to perform
    network connectivity checks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new project in MonoDevelop, and name it `NetCheckApp`. There is no
    need for a view controller in this example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following `DidEnterBackground` override in the `AppDelegate` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `UIBackgroundModes` key in the `Info.plist` file with the item `voip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apple provides this multitasking feature to allow applications utilizing **Voice
    over Internet Protocol** (VoIP) communication to perform periodic network connectivity
    checks with the appropriate servers. To allow the application to be woken for
    this functionality, call the `SetKeepAliveTimeout` method of the `UIApplication`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the interval in seconds at which the application will
    be woken. The minimum interval that is allowed is 600 seconds (10 minutes). Setting
    an interval below the minimum value will cause the method to fail, and the application
    will be suspended. The second parameter is the handler that will be executed just
    before the interval elapses. This handler has only 30 seconds to execute. If it
    takes more than 30 seconds, the application will be terminated.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objects that can be used for network connectivity in the keep alive handler
    are `NSInputStream, NSOutputStream`, and `NSUrlRequest`.
  prefs: []
  type: TYPE_NORMAL
- en: Combining items for the UIBackgroundModes key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An application can use any combination or all of the available items for the
    `UIBackgroundModes` key. However, avoid adding a background mode for implementing
    different functionality than what it is intended for. In this case, your application
    will probably be rejected from the application store.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Playing audio in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Location Services and Maps"), Location
    Services and Maps:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Location services in the background*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
