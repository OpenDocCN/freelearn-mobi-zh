["```swift\nTabView{\n    VStack( alignment: .leading )\n    {\n        Text( timerString )\n            .font( .title2 )\n            .foregroundColor( Color.yellow )\n            .padding( .bottom )\n            .onReceive( timer )\n        { time in\n            counter += 1\n            let hours = counter / 3600\n            let minutes = ( counter % 3600 ) / 60\n            let seconds = counter % 3600 % 60\n            timerString = String( format: \"%02d\", hours ) + \":\"\n+ String( format: \"%02d\", minutes ) + \":\" +\nString( format: \"%02d\", seconds )\n        }\n        Text( String( bpm ) + \" BPM\" )\n        Text( String( calories ) + \" Calories\" )\n        Text( activity )\n    }\n    .padding( )\n}\n```", "```swift\nTabView{\n    VStack( alignment: .leading )\n    {\n        …\n    }\n    .padding( )\n    Text( \"Second Page\" )\n}\n```", "```swift\nextension Color{\n    static let lockColour = Color( \"lockColour\" )\n    static let lockColourBackground = Color( \"lockColourBackground\" )\n    static let newColour = Color( \"newColour\" )\n    static let newColourBackground = Color( \"newColourBackground\" )\n    static let endColour = Color( \"endColour\" )\n    static let endColourBackground = Color( \"endColourBackground\" )\n    static let pauseColour = Color( \"pauseColour\" )\n    static let pauseColourBackground = Color( \"pauseColourBackground\" )\n}\n```", "```swift\nZStack{\n    RoundedRectangle( cornerRadius: 18, style:\n.continuous )\n}\n```", "```swift\nZStack{\n    RoundedRectangle( cornerRadius: 18, style:\n.continuous )\n        .foregroundColor( .lockColourBackground )\n        .frame( width: 70, height: 64 )\n}\n```", "```swift\nZStack{\n    RoundedRectangle( cornerRadius: 18, style:\n.continuous )\n        .foregroundColor( .lockColourBackground )\n        .frame( width: 70, height: 64 )\n    Image( systemName: \"drop.fill\" )\n}\n```", "```swift\nImage( systemName: \"drop.fill\" )    .resizable( )\n    .foregroundColor( .lockColour )\n    .aspectRatio( contentMode: .fit )\n    .frame( width: 16 )\n```", "```swift\nVStack{\n    ZStack\n    {\n        RoundedRectangle( cornerRadius: 18, style:\n.continuous )\n            .foregroundColor( .lockColourBackground )\n            .frame( width: 70, height: 64 )\n        Image( systemName: \"drop.fill\" )\n            .resizable( )\n            .foregroundColor( .lockColour )\n            .aspectRatio( contentMode: .fit )\n            .frame( width: 16 )\n    }\n    Text( \"Lock\" )\n}\n```", "```swift\nfunc Lock( ){ print( \"Lock button is pressed\" ); }\nvar body: some View\n{\n     ...\n}\n```", "```swift\nVStack{\n    ZStack\n    {\n        RoundedRectangle( cornerRadius: 18, style:\n.continuous )\n            .foregroundColor( .lockColourBackground )\n            .frame( width: 70, height: 64 )\n        Image( systemName: \"drop.fill\" )\n            .resizable( )\n            .foregroundColor( .lockColour )\n            .aspectRatio( contentMode: .fit )\n            .frame( width: 16 )\n    }\n    Text( \"Lock\" )\n}.onTapGesture { Lock( ) }\n```", "```swift\n////  ContentView.swift\n//  Fitness Companion Watch App\n//\n//  Created by Frahaan on 03/04/2023.\n//\nimport SwiftUI\nextension Color\n{\n    static let lockColour = Color( \"lockColour\" )\n    static let lockColourBackground = Color( \"lockColourBackground\" )\n    static let newColour = Color( \"newColour\" )\n    static let newColourBackground = Color( \"newColourBackground\" )\n    static let endColour = Color( \"endColour\" )\n    static let endColourBackground = Color( \"endColourBackground\" )\n    static let pauseColour = Color( \"pauseColour\" )\n    static let pauseColourBackground = Color( \"pauseColourBackground\" )\n}\nstruct MainView: View\n{\n    @State private var counter = 0\n    @State private var timerString = \"00:00:00\"\n    @State private var bpm = 120\n    @State private var calories = 110\n    @State private var activity = \"Running\"\n    let timer = Timer.publish( every: 1, on: .main, in: .common ).autoconnect( )\n    func Lock( )\n    { print( \"Lock button is pressed\" ); }\n    var body: some View\n    {\n        TabView\n        {\n            VStack( alignment: .leading )\n            {\n                Text( timerString )\n                    .font( .title2 )\n                    .foregroundColor( Color.yellow )\n                    .padding( .bottom )\n                    .onReceive( timer )\n                { time in\n                    counter += 1\n                    let hours = counter / 3600\n                    let minutes = ( counter % 3600 ) / 60\n                    let seconds = counter % 3600 % 60\n                    timerString = String( format: \"%02d\", hours ) + \":\" + String( format: \"%02d\", minutes ) + \":\" + String( format: \"%02d\", seconds )\n                }\n                Text( String( bpm ) + \" BPM\" )\n                Text( String( calories ) + \" Calories\" )\n                Text( activity )\n            }\n            .padding( )\n            VStack\n            {\n                ZStack\n                {\n                    RoundedRectangle( cornerRadius: 18, style: .continuous )\n                        .foregroundColor( .lockColourBackground )\n                        .frame( width: 70, height: 64 )\n                    Image( systemName: \"drop.fill\" )\n                        .resizable( )\n                        .foregroundColor( .lockColour )\n                        .aspectRatio( contentMode: .fit )\n                        .frame( width: 16 )\n                }\n                Text( \"Lock\" )\n            }.onTapGesture { Lock( ) }\n        }\n    }\n}\nstruct MainView_Previews: PreviewProvider\n{\n    static var previews: some View\n    {\n        MainView( )\n    }\n}\n```", "```swift\nfunc Lock( ){ print( \"Lock button is pressed\" ); }\nfunc New( )\n{ print( \"New button is pressed\" ); }\nfunc End( )\n{ print( \"End button is pressed\" ); }\nfunc Pause( )\n{ print( \"Pause button is pressed\" ); }\nvar body: some View\n{\n    ...\n}\n```", "```swift\nVStack{\n    HStack\n    {\n        VStack\n        {\n            ZStack\n            {\n                RoundedRectangle( cornerRadius: 18, style: .continuous )\n                    .foregroundColor( .lockColourBackground )\n                    .frame( width: 70, height: 64 )\n                Image( systemName: \"drop.fill\" )\n                    .resizable( )\n                    .foregroundColor( .lockColour )\n                    .aspectRatio( 1.0, contentMode: .fit )\n                    .frame( width: 32 )\n            }\n            Text( \"Lock\" )\n        }.onTapGesture { Lock( ) }\n        VStack\n        {\n            ZStack\n            {\n                RoundedRectangle( cornerRadius: 18, style: .continuous )\n                    .foregroundColor( .newColourBackground )\n                    .frame( width: 70, height: 64 )\n                Image( systemName: \"plus\" )\n                    .resizable( )\n                    .foregroundColor( .newColour )\n                    .aspectRatio( 1.0, contentMode: .fit )\n                    .frame( width: 32 )\n            }\n            Text( \"New\" )\n        }.onTapGesture { New( ) }\n    }\n    HStack\n    {\n        VStack\n        {\n            ZStack\n            {\n                RoundedRectangle( cornerRadius: 18, style: .continuous )\n                    .foregroundColor( .endColourBackground )\n                    .frame( width: 70, height: 64 )\n                Image( systemName: \"xmark\" )\n                    .resizable( )\n                    .foregroundColor( .endColour )\n                    .aspectRatio( 1.0, contentMode: .fit )\n                    .frame( width: 32 )\n            }\n            Text( \"End\" )\n        }.onTapGesture { End( ) }\n        VStack\n        {\n            ZStack\n            {\n                RoundedRectangle( cornerRadius: 18, style: .continuous )\n                    .foregroundColor( .pauseColourBackground )\n                    .frame( width: 70, height: 64 )\n                Image( systemName: \"pause\" )\n                    .resizable( )\n                    .foregroundColor( .pauseColour )\n                    .aspectRatio( 1.0, contentMode: .fit )\n                    .frame( width: 32 )\n            }\n            Text( \"Pause\" )\n        }.onTapGesture { Pause( ) }\n    }\n}\n```", "```swift\n.padding( .top, 20.0 )\n```", "```swift\nimport SwiftUIextension Color {\n    static let lockColour = Color(\"lockColour\")\n    static let lockColourBackground = Color(\"lockColourBackground\")\n    static let newColour = Color(\"newColour\")\n    static let newColourBackground = Color(\"newColourBackground\")\n    static let endColour = Color(\"endColour\")\n    static let endColourBackground = Color(\"endColourBackground\")\n    static let pauseColour = Color(\"pauseColour\")\n    static let pauseColourBackground = Color(\"pauseColourBackground\")\n}\nstruct Exercise {\n    let name: String\n    let image: String\n}\nstruct MainView: View {\n    @State private var counter = 0\n    @State private var timerString = \"00:00:00\"\n    @State private var bpm = 120\n    @State private var calories = 110\n    @State private var activity = \"Running\"\n    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()\n    let exercises = [\n        Exercise(name: \"Running\", image: \"person.running\"),\n        Exercise(name: \"Cycling\", image: \"bicycle\"),\n        Exercise(name: \"Swimming\", image: \"figure.walk\"),\n        // Add more exercises here\n    ]\n    func Lock() {\n        print(\"Lock button is pressed\")\n    }\n    func New() {\n        print(\"New button is pressed\")\n    }\n    func End() {\n        print(\"End button is pressed\")\n    }\n    func Pause() {\n        print(\"Pause button is pressed\")\n    }\n    var body: some View {\n        TabView {\n            VStack(alignment: .leading) {\n                Text(timerString)\n                    .font(.title2)\n                    .foregroundColor(Color.yellow)\n                    .padding(.bottom)\n                    .onReceive(timer) { time in\n                        counter += 1\n                        let hours = counter / 3600\n                        let minutes = (counter % 3600) / 60\n                        let seconds = counter % 3600 % 60\n                        timerString = String(format: \"%02d\", hours) + \":\" + String(format: \"%02d\", minutes) + \":\" + String(format: \"%02d\", seconds)\n                    }\n                Text(String(bpm) + \" BPM\")\n                Text(String(calories) + \" Calories\")\n                Text(activity)\n            }\n            .padding()\n            VStack {\n                HStack {\n                    ForEach(exercises, id: \\.name) { exercise in\n                        VStack {\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                    .foregroundColor(.newColourBackground)\n                                    .frame(width: 70, height: 64)\n                                Image(systemName: exercise.image)\n                                    .resizable()\n                                    .foregroundColor(.newColour)\n                                    .aspectRatio(contentMode: .fit)\n                                    .frame(width: 32)\n                            }\n                            Text(exercise.name)\n                        }\n                        .onTapGesture {\n                            activity = exercise.name\n                        }\n                    }\n                }\n                HStack {\n                    VStack {\n                        ZStack {\n                            RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                .foregroundColor(.lockColourBackground)\n                                .frame(width: 70, height: 64)\n                            Image(systemName: \"lock.fill\")\n                                .resizable()\n                                .foregroundColor(.lockColour)\n                                .aspectRatio(contentMode: .fit)\n                                .frame(width: 32\n)\n                        }\n                        Text(\"Lock\")\n                    }.onTapGesture { Lock() }\n                    VStack {\n                        ZStack {\n                            RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                .foregroundColor(.endColourBackground)\n                                .frame(width: 70, height: 64)\n                            Image(systemName: \"xmark\")\n                                .resizable()\n                                .foregroundColor(.endColour)\n                                .aspectRatio(contentMode: .fit)\n                                .frame(width: 32)\n                        }\n                        Text(\"End\")\n                    }.onTapGesture { End() }\n                    VStack {\n                        ZStack {\n                            RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                .foregroundColor(.pauseColourBackground)\n                                .frame(width: 70, height: 64)\n                            Image(systemName: \"pause\")\n                                .resizable()\n                                .foregroundColor(.pauseColour)\n                                .aspectRatio(contentMode: .fit)\n                                .frame(width: 32)\n                        }\n                        Text(\"Pause\")\n                    }.onTapGesture { Pause() }\n                }\n            }\n            .padding(.top, 20.0)\n        }\n    }\n}\nstruct MainView_Previews: PreviewProvider {\n    static var previews: some View {\n        MainView()\n    }\n}\n```", "```swift\nimport SwiftUIstruct Exercise {\n    let name: String\n    let image: String\n}\nstruct MainView: View {\n    @State private var counter = 0\n    @State private var isTimerRunning = false\n    @State private var isTimerPaused = false\n    @State private var timerString = \"00:00:00\"\n    @State private var bpm = 120\n    @State private var calories = 110\n    @State private var activity = \"Running\"\n    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()\n    let exercises = [\n        Exercise(name: \"Running\", image: \"person.running\"),\n        Exercise(name: \"Cycling\", image: \"bicycle\"),\n        Exercise(name: \"Swimming\", image: \"figure.walk\"),\n        // Add more exercises here\n    ]\n    func lock() {\n        print(\"Lock button is pressed\")\n    }\n    func startTimer() {\n        isTimerRunning = true\n        isTimerPaused = false\n    }\n    func pauseTimer() {\n        isTimerRunning = false\n        isTimerPaused = true\n    }\n    func stopTimer() {\n        isTimerRunning = false\n        isTimerPaused = false\n        counter = 0\n        timerString = \"00:00:00\"\n    }\n    var body: some View {\n        TabView {\n            VStack(alignment: .leading) {\n                Text(timerString)\n                    .font(.title2)\n                    .foregroundColor(Color.yellow)\n                    .padding(.bottom)\n                    .onReceive(timer) { time in\n                        if isTimerRunning && !isTimerPaused {\n                            counter += 1\n                            let hours = counter / 3600\n                            let minutes = (counter % 3600) / 60\n                            let seconds = counter % 3600 % 60\n                            timerString = String(format: \"%02d\", hours) + \":\" + String(format: \"%02d\", minutes) + \":\" + String(format: \"%02d\", seconds)\n                        }\n                    }\n                Text(String(bpm) + \" BPM\")\n                Text(String(calories) + \" Calories\")\n                Text(activity)\n            }\n            .padding()\n            VStack {\n                HStack {\n                    ForEach(exercises, id: \\.name) { exercise in\n                        VStack {\n                            ZStack {\n                                RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                    .foregroundColor(.newColourBackground)\n                                    .frame(width: 70, height: 64)\n                                Image(systemName: exercise.image)\n                                    .resizable()\n                                    .foregroundColor(.newColour)\n                                    .aspectRatio(contentMode: .fit)\n                                    .frame(width: 32)\n                            }\n                            Text(exercise.name)\n                        }\n                        .onTapGesture {\n                            activity = exercise.name\n                        }\n                    }\n                }\n                HStack {\n                    VStack {\n                        ZStack {\n                            RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                .foregroundColor(.lockColourBackground)\n                                .frame(width: 70, height: 64)\n                            Image(systemName: \"lock.fill\")\n                                .resizable()\n                                .foregroundColor(.lockColour)\n                                .aspectRatio(contentMode: .fit)\n                                .frame(width: 32)\n                        }\n                        Text(\"Lock\")\n                    }\n                    .onTapGesture { lock() }\n                    VStack {\n                        if isTimerRunning\n {\n                            Button(action: pauseTimer) {\n                                ZStack {\n                                    RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                        .foregroundColor(.pauseColourBackground)\n                                        .frame(width: 70, height: 64)\n                                    Image(systemName: \"pause\")\n                                        .resizable()\n                                        .foregroundColor(.pauseColour)\n                                        .aspectRatio(contentMode: .fit)\n                                        .frame(width: 32)\n                                }\n                            }\n                            .buttonStyle(PlainButtonStyle())\n                        } else {\n                            Button(action: startTimer) {\n                                ZStack {\n                                    RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                        .foregroundColor(.pauseColourBackground)\n                                        .frame(width: 70, height: 64)\n                                    Image(systemName: \"play.fill\")\n                                        .resizable()\n                                        .foregroundColor(.pauseColour)\n                                        .aspectRatio(contentMode: .fit)\n                                        .frame(width: 32)\n                                }\n                            }\n                            .buttonStyle(PlainButtonStyle())\n                        }\n                        Text(isTimerRunning ? \"Pause\" : \"Start\")\n                    }\n                    VStack {\n                        ZStack {\n                            RoundedRectangle(cornerRadius: 18, style: .continuous)\n                                .foregroundColor(.endColourBackground)\n                                .frame(width: 70, height: 64)\n                            Image(systemName: \"xmark\")\n                                .resizable()\n                                .foregroundColor(.endColour)\n                                .aspectRatio(contentMode: .fit)\n                                .frame(width: 32)\n                        }\n                        Text(\"End\")\n                    }\n                    .onTapGesture { stopTimer() }\n                }\n            }\n            .padding(.top, 20.0)\n        }\n    }\n}\nstruct MainView_Previews: PreviewProvider {\n    static var previews: some View {\n        MainView()\n    }\n}\n```"]