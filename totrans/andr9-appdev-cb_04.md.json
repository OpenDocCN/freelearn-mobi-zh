["```kt\n<menu > \n</menu> \n```", "```kt\n<item  \n    android:id=\"@+id/settings\" \n    android:title=\"@string/settings\" /> \n```", "```kt\n    <string name=\"menu_settings\">Settings</string> \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n        <item android:id=\"@+id/menu_settings\"\n            android:title=\"@string/menu_settings\"\n            app:showAsAction=\"never\">\n        </item>\n    </menu>\n```", "```kt\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n```", "```kt\n@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    if (item.getItemId() == R.id.menu_settings) {\n        Toast.makeText(this, \"Settings\", Toast.LENGTH_LONG).show();\n    } else {\n        return super.onContextItemSelected(item);\n    }\n    return true;\n}\n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<menu \n\n    > \n    <item android:id=\"@+id/menu_settings \n        android:title=\"@string/menu_settings\" \n        app:showAsAction=\"never\"> \n        <menu> \n            <item android:id=\"@+id/menu_sub1\" \n                android:title=\"Storage Settings\" /> \n            <item android:id=\"@+id/menu_sub2\" \n                android:title=\"Screen Settings\" /> \n        </menu> \n    </item> \n</menu> \n```", "```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n    <group android:id=\"@+id/group_one\" >\n        <item android:id=\"@+id/menu_item1\"\n            android:title=\"Item 1\"\n            app:showAsAction=\"ifRoom\"/>\n        <item android:id=\"@+id/menu_item2\"\n            android:title=\"Item 2\"\n            app:showAsAction=\"ifRoom\"/>\n    </group>\n    <item android:id=\"@+id/menu_settings\"\n        android:title=\"@string/menu_settings\"\n        app:showAsAction=\"never\"/>\n</menu>\n```", "```kt\n    <string name=\"menu_download\">Download</string> \n    <string name=\"menu_settings\">Settings</string> \n```", "```kt\n    <Button\n        android:id=\"@+id/buttonToggleMenu\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Toggle Menu\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n```", "```kt\n    private final int MENU_DOWNLOAD = 1; \n    private final int MENU_SETTINGS = 2; \n    private boolean showDownloadMenu = false; \n```", "```kt\n    public void toggleMenu(View view) { \n        showDownloadMenu=!showDownloadMenu; \n    } \n```", "```kt\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        menu.add(0, MENU_DOWNLOAD, 0, R.string.menu_download);\n        menu.add(0, MENU_SETTINGS, 0, R.string.menu_settings);\n        return true;\n    }\n```", "```kt\n    @Override \n    public boolean onPrepareOptionsMenu(Menu menu) { \n        MenuItem menuItem = menu.findItem(MENU_DOWNLOAD); \n        menuItem.setVisible(showDownloadMenu); \n        return true; \n    } \n```", "```kt\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case MENU_DOWNLOAD:\n                Toast.makeText(this, R.string.menu_download, \n                Toast.LENGTH_LONG).show();\n            break;\n            case MENU_SETTINGS:\n                Toast.makeText(this, R.string.menu_settings,     \n                Toast.LENGTH_LONG).show();\n                break;\n            default:\n                return super.onContextItemSelected(item);\n        }\n        return true;\n    }\n```", "```kt\nmenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS); \n```", "```kt\ninvalidateOptionsMenu(); \n```", "```kt\n    <string name=\"menu_cast\">Cast</string> \n    <string name=\"menu_print\">Print</string> \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\">\n        <item android:id=\"@+id/menu_cast\"\n            android:title=\"@string/menu_cast\" />\n        <item android:id=\"@+id/menu_print\"\n            android:title=\"@string/menu_print\" />\n    </menu>\n```", "```kt\n    <ImageView\n        android:id=\"@+id/imageView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:srcCompat=\"@mipmap/ic_launcher\" />\n```", "```kt\n    ActionMode mActionMode;\n```", "```kt\n    private ActionMode.Callback mActionModeCallback = new \n    ActionMode.Callback() {\n        @Override\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n            mode.getMenuInflater().inflate(R.menu.context_menu, menu);\n            return true;\n        }\n\n        @Override\n        public boolean onPrepareActionMode(ActionMode mode, Menu menu)   \n        {\n            return false;\n        }\n\n        @Override\n        public boolean onActionItemClicked(ActionMode mode, MenuItem            \n        item) {\n            switch (item.getItemId()) {\n                case R.id. menu_cast:\n                    Toast.makeText(MainActivity.this, \"Cast\",  \n                    Toast.LENGTH_SHORT).show();\n                    mode.finish();\n                    return true;\n                case R.id. menu_print:\n                    Toast.makeText(MainActivity.this, \"Print\", \n                    Toast.LENGTH_SHORT).show();\n                    mode.finish();\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        @Override\n        public void onDestroyActionMode(ActionMode mode) {\n            mActionMode = null;\n        }\n    };\n```", "```kt\n    ImageView imageView = findViewById(R.id.imageView);\n    imageView.setOnLongClickListener(new View.OnLongClickListener() {\n        public boolean onLongClick(View view) {\n            if (mActionMode != null) return false;\n            mActionMode = startSupportActionMode(mActionModeCallback);\n            return true;\n        }\n    });\n```", "```kt\nmActionMode.setTitle(\"New Title\"); \n```", "```kt\n    <string name=\"delete_all\">Delete All</string>\n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n        <item android:id=\"@+id/delete_all\"\n            android:title=\"@string/delete_all\" />\n    </menu>\n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\" >\n        <item android:id=\"@+id/delete_all\"\n        android:title=\"@string/delete_all\" />\n    </menu>\n```", "```kt\n    android:background=\"@drawable/item_selector\"\n```", "```kt\n    public interface SelectMode {\n        void onSelect();\n    }\n```", "```kt\n    public class MyAdapter extends \n    RecyclerView.Adapter<MyAdapter.MyViewHolder>\n        implements SelectMode { \n```", "```kt\n    @Override\n    public void onSelect() {\n        if (mListener!=null) {\n            mListener.onSelect();\n        }\n    }\n```", "```kt\n    private SparseArray<Boolean> selectedList = new SparseArray<>();\n```", "```kt\npublic void deleteAllSelected() {\n    if (selectedList.size()==0) { return; }\n    for (int index = nameList.size()-1; index >=0; index--) {\n        if (selectedList.get(index,false)) {\n            remove(index);\n        }\n    }\n    selectedList.clear();\n}\n```", "```kt\n    @Override\n    public void onClick(View v) {\n        holder.itemView.setSelected(!holder.itemView.isSelected());\n        if (holder.itemView.isSelected()) {\n           selectedList.put(position, true);\n        } else {\n            selectedList.remove(position);\n        }\n        onSelect();\n    }\n```", "```kt\n    public class MainActivity extends AppCompatActivity\n    implements SelectMode {\n```", "```kt\n    MyAdapter myAdapter;\n    ActionMode mActionMode;\n```", "```kt\n    private ActionMode.Callback mActionModeCallback = new \n    ActionMode.Callback() {\n        @Override\n        public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n            mode.getMenuInflater().inflate(R.menu.context_menu, menu);\n            return true;\n        }\n\n        @Override\n        public boolean onPrepareActionMode(ActionMode mode, Menu menu) \n        {\n            return false;\n        }\n\n        @Override\n        public boolean onActionItemClicked(ActionMode mode, MenuItem \n        item) {\n            switch (item.getItemId()) {\n                case R.id. delete_all:\n                    myAdapter.deleteAllSelected();\n                    mode.finish();\n                    return true;\n                default:\n                    return false;\n            }\n        }\n\n        @Override\n        public void onDestroyActionMode(ActionMode mode) {\n            mActionMode = null;\n        }\n    };\n```", "```kt\n    myAdapter = new MyAdapter(list, this);\n```", "```kt\n    @Override\n    public void onSelect() {\n        if (mActionMode != null) return;\n        mActionMode = startSupportActionMode(mActionModeCallback);\n    }\n```", "```kt\nholder.itemView.setSelected(selectedList.get(position,false));\n```", "```kt\n    <string name=\"menu_reply\">Reply</string> \n    <string name=\"menu_reply_all\">Reply All</string> \n    <string name=\"menu_forward\">Forward</string> \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n        <item android:id=\"@+id/menu_reply\"\n            android:title=\"@string/menu_reply\" />\n        <item android:id=\"@+id/menu_reply_all\"\n            android:title=\"@string/menu_reply_all\" />\n        <item android:id=\"@+id/menu_forward\"\n            android:title=\"@string/menu_forward\" />\n    </menu>\n```", "```kt\n    <ImageButton\n        android:id=\"@+id/imageButtonReply\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"8dp\"\n        android:layout_marginTop=\"8dp\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:srcCompat=\"@android:drawable/ic_menu_revert\"\n        android:onClick=\"showPopupMenu\"/>\n```", "```kt\n    private PopupMenu.OnMenuItemClickListener mOnMenuItemClickListener  \n    = new\n            PopupMenu.OnMenuItemClickListener() {\n                @Override\n                public boolean onMenuItemClick(MenuItem item) {\n                    switch (item.getItemId()) {\n                        case R.id.menu_reply:\n                            Toast.makeText(MainActivity.this, \"Reply\", \n                            Toast.LENGTH_SHORT).show();\n                            return true;\n                        case R.id.menu_reply_all:\n                            Toast.makeText(MainActivity.this,\"Reply \n                            All\",Toast.LENGTH_SHORT).show();\n                            return true;\n                        case R.id.menu_forward:\n                            Toast.makeText(MainActivity.this,\"Forward\", \n                            Toast.LENGTH_SHORT).show();\n                            return true;\n                        default:\n                            return false;\n                    }\n                }\n            };\n```", "```kt\n    public void showPopupMenu(View view) {\n        PopupMenu popupMenu = new PopupMenu(MainActivity.this,view);\n        popupMenu.inflate(R.menu.menu_popup);\n        popupMenu.setOnMenuItemClickListener(mOnMenuItemClickListener);\n        popupMenu.show();\n    }\n```"]