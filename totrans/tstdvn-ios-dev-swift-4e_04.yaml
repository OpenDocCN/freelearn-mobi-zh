- en: '*Chapter 3*: Test-Driven Development in Xcode'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For **test-driven development** (**TDD**), we need a way to write and execute
    unit tests. We could write the tests into the main target of our Xcode project
    but that would be impractical. We would have to separate the test code from the
    production code somehow, and we would have to write some scripts that execute
    the text code and gather feedback about the results of the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, this has already been done. It all started in 1998, when the Swiss
    company Sen:te developed OCUnit, a testing framework for Objective-C (hence the
    OC prefix). OCUnit was a port of SUnit, a testing framework that Kent Beck had
    written for Smalltalk in 1994.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Xcode 2.1, Apple added OCUnit to Xcode. One reason for this step was that
    they used it to develop Core Data at the same time that they developed Tiger,
    the OS with which Core Data was shipped. Bill Bumgarner, an Apple engineer, wrote
    this later in a blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Core Data 1.0 is not perfect, but it is a rock solid product that I''m damned
    proud of. The quality and performance achieved could not have been done without
    the use of unit testing. Furthermore, we were able to perform highly disruptive
    operations to the codebase very late in the development cycle. The end result
    was a vast increase in performance, a much cleaner codebase, and rock solid release."'
  prefs: []
  type: TYPE_NORMAL
- en: Apple realized how valuable unit tests can be when developing complex systems
    in a changing environment. They wanted third-party developers to benefit from
    unit tests as well. OCUnit could be (and has been) added to Xcode by hand before
    version 2.1\. But by including it in the **Integrated Development Environment**
    (**IDE**), the investment in time that was needed to start unit testing was reduced
    a lot, and as a result, more people started to write tests.
  prefs: []
  type: TYPE_NORMAL
- en: In 2008, OCUnit was integrated into the iPhone SDK 2.2 to allow unit testing
    of iPhone apps.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in 2013, unit testing became a first-class citizen in Xcode 5 with
    the introduction of XCTest. With XCTest, Apple added specific user interface elements
    to Xcode that helped with testing, which allowed running specific tests, finding
    failing tests quickly, and getting an overview of all the tests. We will go over
    the testing user interface in Xcode later in this chapter. But, first, we will
    take a look at TDD using Xcode in action. This chapter sets the foundation we
    need to start building our first app using TDD.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main sections we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An example of TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding information about tests in Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and tearing down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code in this chapter is uploaded (in complete form) here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter03](https://github.com/PacktPublishing/Test-Driven-iOS-Development-with-Swift-Fourth-Edition/tree/main/chapter03)'
  prefs: []
  type: TYPE_NORMAL
- en: An example of TDD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this TDD example, we are going to use the same project we created in [*Chapter
    1*](B18127_01_ePub.xhtml#_idTextAnchor018), *Your First Unit Tests*. Open the
    FirstDemo project in Xcode, and run the tests by hitting *⌘**U*. The test we wrote
    to explore the custom assert function is failing. We don't need this test anymore.
    Delete it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we are building an app for a blogging platform. When writing a new
    post, the user puts in a headline for the post. All the words in the headline
    should start with an uppercase letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the TDD workflow, we need a failing test. The following questions
    need to be considered when writing the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precondition**: What is the state of the system before we invoke the method?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invocation**: How should the signature of the method look? What are the input
    parameters (if any) of the method?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assertion**: What is the expected result of the method invocation?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our blogging app example, here are some possible answers to these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precondition**: None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`makeHeadline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assertion**: The resulting string should be the same, but all the words should
    start with an uppercase letter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is enough to get us started. Enter the red step.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline – red
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps bring us to the first red state of our TDD journey:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `FirstDemoTests.swift`, and add the following code to the `FirstDemoTests`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This isn't a complete test method yet because we aren't really testing anything.
    But we have to stop writing the test at this point because the compiler complains
    that it `Blogger` but we haven't added it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Following the TDD workflow, we need to add code until the compiler stops printing
    errors. Remember that **code does not compile** within a test means "the test
    is failing." And a failing test means we need to write code until the test does
    not fail anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a Swift file `Blogger.swift` to the main target with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Xcode replaces the error in the test with a warning that we do not use the `blogger`
    variable. That's true. So let's use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the test code such that it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The test is still not complete. But again we have to stop because the compiler
    is complaining, this time with the message **Value of type 'Blogger' has no member
    'makeHeadline'**. So even with these few lines of code, you can already see how
    the test is "driving" the development. Step by step, we add code to the test and
    to the production code to implement the feature we are trying to build.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the test is failing (not compiling) right now, we need to switch back to
    the `Blogger` struct and add some more code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, this changes the error in the test code to a warning that we are not
    using the headline variable. This is true. But we aren't finished with the test
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the variable next. Add the following assertion to the test method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This makes the test compile. Run the tests with the keyboard shortcut *⌘**U*.
  prefs: []
  type: TYPE_NORMAL
- en: The test we just added compiles and fails. We can move on to the green phases
    in the TDD workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline – green
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The test fails because the string that is returned from `makeHeadline(from:)`
    is just an empty string. But the method should return the capitalized version
    of the input string `The Accessibility inspector`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the TDD workflow, we need to go back to the implementation and add
    the simplest code that makes the test pass. In `Blogger.swift`, change the code
    of `makeHeadline(from:)` such that it reads like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code is stupid and wrong, but it is the simplest code that makes the test
    pass. Run the tests (*⌘* *U*) to make sure that this is actually the case.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the code we just wrote is useless for the feature we are trying
    to implement, it still has value for us, the developers. It tells us that we need
    another test.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline – refactor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before writing more tests, we need to refactor the existing ones. In the production
    code, there is nothing to refactor. This code couldn't be simpler or more elegant.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the test can be improved. Right now, the relevant information for the test
    is kind of unstructured. It''s not a big problem but maybe we can improve the
    readability of the test by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `test_makeHeadline_shouldCapitalisePassedInString()` test method
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By using variables in the test, we make it easier to understand. The names of
    the variables inform the reader of the test about the purpose of these values.
    One value is the input, one is the result, and one is the expected value.
  prefs: []
  type: TYPE_NORMAL
- en: Run the tests. All the tests should still pass. But how do we know whether the
    tests still test the same thing as they did earlier? In most cases, the changes
    we'll make while refactoring the tests don't need to be tested themselves. But,
    sometimes (such as in this case), it is good to make sure that the test still
    works. This means that we need a failing test again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `makeHeadline(from:)` and change the returned string like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have removed the last word from the return string. Run the tests again to
    make sure that the test now fails.
  prefs: []
  type: TYPE_NORMAL
- en: Now change the returned string back to `The Accessibility Inspector` to make
    the test pass again. Confirm that all tests pass again by running the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By making the test fail on purpose and fixing it in the next step, we have proven
    that the test can fail. This is important because writing a test that always passes
    can easily happen. For example, if you forget to add an `assert` function or the
    `assert` function is never reached because of some conditionals in the test, the
    test is always reported as green.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Always confirm that the test can fail!
  prefs: []
  type: TYPE_NORMAL
- en: We already know that the implementation is not correct. The `makeHeadline(from:)`
    method always returns the same string and ignores the string that gets passed
    into the method. But all tests we have passed. When all tests pass, but we know
    that we are not finished with the feature yet, this means we need another test.
    In TDD, we always start with a failing test.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline 2 – red
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The production code we have written to make the previous test pass only works
    for one specific headline. But the feature we want to implement has to work for
    all possible headlines. Add the following test to `FirstDemoTests.swift`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run the tests. This new test obviously fails. Now, take a break. Go for a walk
    or prepare some beverages. Seriously, go away from the computer for half an hour
    or so.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make the tests green.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline 2 – green
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `Blogger.swift`, and replace the implementation of `makeHeadline(from:)`
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It's OK to be shocked by this implementation. With this code, I'm trying to
    make the point that, in the green step of TDD, any code is good as long as it
    makes the test pass. We'll improve this code in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through this implementation step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: Split the string into words.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate over the words, and remove the first character and change it to uppercase.
    Add the changed character to the beginning of the word. Add this word with a trailing
    space to the headline string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the last space and return the string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests. All the tests pass. The next thing to perform in the TDD workflow
    is refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Do not skip refactoring. This step is as important as the red and the green
    step. You are not done until there is nothing to refactor anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Capitalize headline 2 – refactor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start our refactoring with the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: The two `makeHeadline` tests both start with creating an instance of `Blogger`.
    This is a repetition of code and a good candidate for refactoring.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following property at the beginning of the `FirstDemoTests` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the `setUp()` method is called before each test is executed.
    So, it is the perfect place to initialize the `blogger` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Each test should clean up after it has run. So, add the following code to `tearDownWithError()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we can remove the `let blogger = Blogger()` line from the headline tests.
    Run the tests to make sure that they still compile and run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we need to refactor the implementation code. The implementation we have
    right now looks like it was translated from Objective-C to Swift (if you haven''t
    used Objective-C yet, you have to trust me on this). But Swift is different and
    has many concepts that make it possible to write less code that is easier to read.
    Let''s make the implementation swifter. Replace `makeHeadline(from:)` with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How cool is that? Swift even comes with a method on the `String` class to do
    exactly that. Run the tests again to make sure we didn't break anything with the
    refactoring. All the tests should still pass.
  prefs: []
  type: TYPE_NORMAL
- en: A recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we have added a feature to our project using the TDD workflow.
    We started with a failing test. We made the test pass. And, finally, we refactored
    the code to be clean. The steps you have seen here seem so simple and insignificant
    that you may think that you could skip some of the tests and still be good. But
    then it's not TDD anymore. The beauty of TDD is that the steps are so easy that
    you do not have to think about them. You just have to remember what the next step
    is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the steps and the rules are so easy, you don''t have to waste your
    brainpower thinking about what the steps actually mean. The only thing you have
    to remember is red, green, and refactor. As a result, you can concentrate on the
    difficult part: *writing tests*, *making them pass*, and *improving code*.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to write tests, let's see where we can find information
    about our tests in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: Finding information about tests in Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Xcode 5 and the introduction of XCTest, unit testing became tightly integrated
    into Xcode. Apple added many UI elements to navigate to tests, run specific tests,
    and find information about failing tests. Over the years, they improved the integration
    further. One key element here is the **test navigator**.
  prefs: []
  type: TYPE_NORMAL
- en: Test navigator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To open the test navigator, click the diamond with the minus sign in the navigator
    panel or use the shortcut *⌘* *6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The test navigator in Xcode'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.01_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The test navigator in Xcode
  prefs: []
  type: TYPE_NORMAL
- en: The test navigator shows all tests in the open project or workspace. In the
    preceding screenshot, you can see the test navigator for our demo project. In
    the project, there are two test targets, one for the unit tests and one for the
    UI tests. For complex apps, it can be useful to have more than one unit tests
    target, but this is beyond the scope of this book. The number of tests is shown
    right behind the name of the test target. In our case, there are three tests in
    the unit tests target.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the navigator is a filter control with which you can filter
    the shown tests. As soon as you start typing, the shown tests are filtered using
    fuzzy matching. There''s a button in the control showing a diamond with a cross:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The button in the test navigator to only show the failing tests'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.02_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – The button in the test navigator to only show the failing tests
  prefs: []
  type: TYPE_NORMAL
- en: If this button is selected, only the failing tests are shown in the list. With
    the button on the right, you can filter all skipped tests.
  prefs: []
  type: TYPE_NORMAL
- en: Test overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xcode also has a test overview where all the results of the tests are collected
    in one place. To open it, select **Report navigator** in the navigator panel,
    and select the last test in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Access the overview of the tests in the report navigator'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.03_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Access the overview of the tests in the report navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also select other tests in the list if you want to compare test runs
    with each other. In the editor on the right-hand side, an overview of all the
    tests from the selected test run is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Overview of the tests of the last test run'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.04_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Overview of the tests of the last test run
  prefs: []
  type: TYPE_NORMAL
- en: When you hover over one of the tests with the mouse pointer, a circle with an
    arrow to the right appears. If you click on the arrow, Xcode opens the test in
    the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the report navigator, there is also the **Log** item. It shows all the tests
    in a tree-like structure. Here is an example of what this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Log of the test reports'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.05_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Log of the test reports
  prefs: []
  type: TYPE_NORMAL
- en: The logs show the test cases (in this example, one test case) and the tests
    within the test cases (in this example, two failing and one passing test). In
    addition to this, you can also seethe time each test case and even each test needs
    to execute.
  prefs: []
  type: TYPE_NORMAL
- en: In TDD, it is important for the tests to execute quickly. You want to be able
    to execute the whole test suite in less than a second. Otherwise, the whole workflow
    is dominated by test execution and testing can distract your focus and concentration.
    You should never be tempted to switch to another application (such as Safari)
    because the tests will take half a minute.
  prefs: []
  type: TYPE_NORMAL
- en: If you notice that the test suite takes too long to be practical, open the logs
    and search for the tests that slow down testing and try to make the tests faster.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen where we can find information about our tests, in the
    next section we will explore the different ways to run tests.
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xcode provides many different ways to execute tests. You have already seen
    two ways to execute all the tests in the test suite: go to the **Project** | **Test**
    menu item or use the *⌘**U* keyboard shortcut.'
  prefs: []
  type: TYPE_NORMAL
- en: Running one specific test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In TDD, you normally want to run all the tests as often as possible. Running
    the tests gives you confidence that the code does what you intended when you wrote
    the tests. In addition to this, you want immediate feedback (that is, a failing
    test) whenever new code breaks a seemingly unrelated feature. Immediate feedback
    means that your memory of the changes that broke the feature is fresh, and the
    fix is made quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, sometimes, you need to run one specific test, but don''t let
    it become a habit. To run one specific test, you can click on the diamond visible
    next to the test method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Run one specific test by clicking the diamond next to the test
    method in the gutter'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.06_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – Run one specific test by clicking the diamond next to the test
    method in the gutter
  prefs: []
  type: TYPE_NORMAL
- en: When you click on it, the production code is compiled and launched in the simulator
    or on the device, and the test is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another way to execute exactly one specific test. When you open the
    test navigator and hover over one test, a circle with a play icon is shown next
    to the test method name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Click the diamond next to the test in the test navigator to
    run this test'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.07_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Click the diamond next to the test in the test navigator to run
    this test
  prefs: []
  type: TYPE_NORMAL
- en: Again, if you click on this test, it is run exclusively.
  prefs: []
  type: TYPE_NORMAL
- en: The test framework identifies tests by the prefix of the method name. If you
    want to run all tests but one, remove the `test` prefix from the beginning of
    this test's method name.
  prefs: []
  type: TYPE_NORMAL
- en: Running all tests in a test case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the same way as running one specific test, you can run all the tests of a
    specific test case. Click on the diamond next to the definition of the test case,
    or click on the play button that appears when you hover over the test case name
    in the test navigator.
  prefs: []
  type: TYPE_NORMAL
- en: Running a group of tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can choose to run a group of tests by editing the build scheme. To edit
    the build scheme, click on the scheme in the toolbar in Xcode, and then click
    on **Edit Scheme...**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Open the scheme editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.08_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Open the scheme editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, select **Test**, and expand the test suite by clicking on the small triangle.
    On the right-hand side, there is a column called **Tests**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Test setting in the scheme editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.09_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Test setting in the scheme editor
  prefs: []
  type: TYPE_NORMAL
- en: The selected scheme only runs the tests that are checked. By default, all the
    tests are checked, but you can uncheck some tests if you need to. But don't forget
    to check all the tests again when you are finished.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative, you can add a build scheme for a group of tests that you
    want to run regularly without running all tests.
  prefs: []
  type: TYPE_NORMAL
- en: But as mentioned earlier, you should run the complete test suite as often as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: The following section shows how to add code that is run before and after each
    test invocation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and tearing down
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen the `setUpWithError()` and `tearDownWithError()` instance
    methods earlier in this chapter. The code in the `setUpWithError()` instance method
    is run before each test invocation. In our example, we used `setUpWithError()`
    to initialize the `Blogger` that we wanted to test. As it was run before each
    test invocation, each test used its own instance of `Blogger`. The changes we
    made to this particular instance in one test didn't affect the other test. The
    tests are executed independently of each other.
  prefs: []
  type: TYPE_NORMAL
- en: The `tearDownWithError()` instance method is run after each test invocation.
    Use `tearDownWithError()` to perform the necessary cleanup. In the example, we
    set the `blogger` to `nil` in the `tearDownWithError()` method.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the instance methods, there are also the `setUp()` and `tearDown()`
    class methods. These are run before and after all the tests of a test case, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, but not often, you may need to debug your tests. As with normal code,
    you can set breakpoints in test code. The debugger then stops the execution of
    the code at that breakpoint. You can also set breakpoints in the code that will
    be tested to check whether you have missed something or whether the code you'd
    like to test is actually executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a feeling of how this works, let''s add an error to a test in the preceding
    example and debug it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `FirstDemoTests.swift` and replace the test method `test_makeHeadline_shouldCapitalisePassedInString_2()`
    with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Have you seen the error that we have introduced? The value of the string expected
    has a typo. The last character in `Contextual` is an uppercase "i" and not a lowercase
    "l". Run the tests. The test fails and Xcode tells you what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: 'But for the sake of this exercise, let''s set a breakpoint in the line with
    the `XCTAssertEqual()` function. Click on the area on the left-hand side of the
    line where you want to set a breakpoint. You have to click on the area next to
    the red diamond. As a result, your editor will look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Add a breakpoint in the line with the assertion'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Add a breakpoint in the line with the assertion
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests again. The execution of the tests stops at the breakpoint. Open
    the debug console if it is not already open (go to `(lldb)` and a blinking cursor.
    Put in `po expected` and hit *Return*. `po` is the "print object" command. As
    the name suggests, it prints a representation of the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now print the value of the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, with the help of the debugger, you can find out what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, the debugger is attached to the running app when we run the
    tests. This means breakpoints in production code are also hit when we run the
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the debugger, search for `lldb` in the Apple documentation.
  prefs: []
  type: TYPE_NORMAL
- en: For now, keep the typo in the `expected` string constant as it is, but remove
    the breakpoint by dragging it with the mouse from the area to the left of the
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: A breakpoint that breaks on test failure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode has a built-in breakpoint that breaks on test failures. When this breakpoint
    is set, the execution of the tests is stopped, and a debug session is started
    whenever a test fails.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, this is not what you want because in TDD, failing tests are normal
    and you don't need a debugger to find out what's going on. You explicitly wrote
    the test to fail at the beginning of the TDD workflow cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'But in case you need to debug one or more failing tests, it''s good to know
    how this breakpoint is activated. Open the breakpoint navigator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The breakpoint navigator'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – The breakpoint navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the navigator view is a button with a plus sign (+). Click
    on it, and select **Test Failure Breakpoint**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Select Test Failure Breakpoint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B18127.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Select Test Failure Breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, this breakpoint stops the execution of the tests whenever
    a test fails. We still have a failing test in our example. Run the tests to see
    the breakpoint in action.
  prefs: []
  type: TYPE_NORMAL
- en: The debugger stops at the line with the assertion because the tests fail. Like
    in the preceding example, you get a debug session so that you can put in `LLDB`
    commands to find out why the test failed.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the breakpoint again because it's not very practical while performing
    TDD. In TDD, we have failing tests all the time. A test failure breakpoint would
    disturb the TDD flow too much.
  prefs: []
  type: TYPE_NORMAL
- en: The test again feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's fix the error in the tests and learn how to run the previous test
    again. Open `FirstDemoTests.swift` and run only the failing test by clicking on
    the diamond symbol next to the test method. The test still fails. Fix it by changing
    the last character in `ContextuaI` to "l" in the `expected` string constant. Then,
    go to **Product** | **Perform Action** | **Test "test_makeHeadline_shouldCapitalisePassedInString_2()"
    Again**, or use the shortcut *⌃⌥⌘**G* to run just the previous test again. The
    shortcut is especially useful when you are working on one specific feature and
    you need to test whether the implementation is sufficient already.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how unit testing and TDD works in Xcode. We saw
    real tests testing real code. Using the different test-related features of Xcode,
    we learned to write, run, and fix tests and to find test-relevant information.
    All this is important for the rest of the book. We need to know how to use Xcode
    when doing TDD.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will figure out the app we are going to build using
    test-driven development.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a test for a method that reverses a string. Write the code that makes
    the test pass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a test for a method that takes a headline and creates a filename from
    it. In the filename, make sure that spaces are replaced by `_` and it only contains
    lowercase characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
