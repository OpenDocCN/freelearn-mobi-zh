- en: Chapter 10. Building Android Applications with Gradle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：使用Gradle构建Android应用
- en: With an increasing number of smartphone users in recent years, mobile application
    development has become one of the major areas to focus on other than big data
    and Cloud computing. Most of the companies are coming up with mobile apps for
    their products such as games, social networking, e-commerce, and so on. And this
    trend is surely going to increase in next few years. So, in the last chapter,
    we will cover the topic related to mobile technology.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，随着智能手机用户的不断增加，除了大数据和云计算之外，移动应用开发已经成为一个主要的关注领域。大多数公司都在为他们的产品开发移动应用，如游戏、社交网络、电子商务等。这种趋势无疑将在未来几年内继续增长。因此，在最后一章中，我们将涵盖与移动技术相关的主题。
- en: In this chapter, we will discuss how to create a basic Android application with
    Android Studio as IDE and how to build the application with Gradle. We already
    know that the Gradle philosophy is based on conventions rather than configurations,
    and it is much easier to write a build automation infrastructure with Gradle in
    comparison to other build tools available in the market. This is one of the reasons
    why Gradle is the official build tool for Android. You just write few lines of
    code in the build file and the application is ready for different platforms and
    versions, such as free or paid. It also provides support to sign application before
    release. With Gradle, you can run the application on an emulator or physical devices
    to run unit and function tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用Android Studio作为IDE创建基本的Android应用以及如何使用Gradle构建应用。我们已经知道，Gradle哲学基于约定而非配置，与市场上其他构建工具相比，使用Gradle编写构建自动化基础设施要容易得多。这就是为什么Gradle是Android官方构建工具的原因之一。您只需在构建文件中编写几行代码，应用就可以为不同的平台和版本做好准备，例如免费或付费。它还提供了在发布前对应用进行签名的支持。使用Gradle，您可以在模拟器或物理设备上运行应用以执行单元和功能测试。
- en: 'In this chapter, we will primarily focus on two areas: a quick overview of
    Android application development with Android Studio and various aspects of Gradle
    as a build tool for Android. As this is a Gradle book, our discussion will be
    focused on understanding the Gradle features.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将主要关注两个领域：使用Android Studio对Android应用开发的快速概述以及Gradle作为Android构建工具的各个方面。由于这是一本关于Gradle的书，我们的讨论将集中在理解Gradle特性上。
- en: Creating Android project using Android Studio
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Android Studio创建Android项目
- en: We will start by creating a sample Android application, which will display `Hello
    World` when you open it on a mobile device. You can use Eclipse with the **Android
    Development Tool** (**ADT**) plugin or Android Studio, which has been released
    by Google. Android Studio is based on IntelliJ IDEA and it is now the most preferred
    IDE for building Android applications. Both Eclipse with ADT and Android studio
    setup instructions can be found at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个示例Android应用开始，当您在移动设备上打开它时，它将显示`Hello World`。您可以使用带有**Android开发工具**（**ADT**）插件的Eclipse或由Google发布的Android
    Studio。Android Studio基于IntelliJ IDEA，现在是构建Android应用最首选的IDE。带有ADT的Eclipse和Android
    Studio的设置说明可以在[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)找到。
- en: 'In this chapter, we will use Android Studio for application development. Once
    you have downloaded and installed Android Studio on your system, start Android
    Studio. Android Studio also installs Android SDK, which is required to compile
    and execute Android applications. To create an application, navigate to **File**
    | **New Project**. You will see the following screen:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Android Studio进行应用开发。一旦您在系统上下载并安装了Android Studio，请启动Android Studio。Android
    Studio还会安装Android SDK，这是编译和执行Android应用所必需的。要创建一个应用，导航到**文件** | **新建项目**。您将看到以下屏幕：
- en: '![Creating Android project using Android Studio](img/B02000_10_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio创建Android项目](img/B02000_10_01.jpg)'
- en: Figure 10.1
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1
- en: 'Click on the **Next** button and follow the steps. On the activity screen,
    select **Blank Activity**:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮并按照步骤操作。在活动屏幕上，选择**空白活动**：
- en: '![Creating Android project using Android Studio](img/B02000_10_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用Android Studio创建Android项目](img/B02000_10_02.jpg)'
- en: Figure 10.2
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2
- en: For this chapter, our main purpose is to create a sample application and emphasize
    on the build process of the Android application with Gradle. So it is not required
    to create a full-fledged Android application. Therefore, the sample application
    will do just one job, which is to display `Hello World` when you launch the application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们的主要目的是创建一个示例应用程序，并强调使用 Gradle 的 Android 应用程序构建过程。因此，不需要创建一个完整的 Android
    应用程序。因此，示例应用程序将只做一项工作，即在启动应用程序时显示 `Hello World`。
- en: 'To complete the project setup, in the **Customize the Activity** screen, provide
    the details such as **Activity Name**, **Title**, and so on:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成项目设置，在 **自定义活动** 界面中，提供如 **活动名称**、**标题**等详细信息：
- en: '![Creating Android project using Android Studio](img/B02000_10_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Android Studio 创建 Android 项目](img/B02000_10_03.jpg)'
- en: Figure 10.3
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3
- en: 'Once you click on **Finish**, Android studio will create the project and the
    directory structure will be as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击 **完成**，Android Studio 将创建项目，目录结构如下所示：
- en: '![Creating Android project using Android Studio](img/B02000_10_04.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Android Studio 创建 Android 项目](img/B02000_10_04.jpg)'
- en: Figure 10.4
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4
- en: In the project home directory, you will find the `build.gradle` and `settings.gradle`
    files. This means that Android Studio has created a multi-project build structure.
    In [Chapter 6](ch06.html "Chapter 6. Working with Gradle"), *Working with Gradle*,
    we have already covered the multi-project structure, in which a parent project
    contains one or more subprojects. The parent project contains all the common configurations
    and other related details that are shared among the subprojects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目主目录中，你会找到 `build.gradle` 和 `settings.gradle` 文件。这意味着 Android Studio 创建了一个多项目构建结构。在
    [第 6 章](ch06.html "第 6 章。使用 Gradle") 中，我们已经介绍了多项目结构，其中父项目包含一个或多个子项目。父项目包含所有子项目共享的公共配置和其他相关细节。
- en: 'Android Studio creates one `build.gradle` for the parent project and individual
    `build.gradle` files for the subprojects. It also creates `settings.gradle` file
    that includes all the subprojects that are part of this parent project. You will
    also find the `local.properties` file. This file has information about the location
    of the Android SDK. The content of this file will be as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 为父项目创建一个 `build.gradle` 文件，并为子项目创建单独的 `build.gradle` 文件。它还会创建一个包含所有属于此父项目的子项目的
    `settings.gradle` 文件。你还会找到 `local.properties` 文件。此文件包含有关 Android SDK 位置的信息。此文件的内容如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Android Studio also adds Gradle Wrapper, which means the Android project can
    be built on a machine where Gradle is not installed. Gradle Wrapper automatically
    installs Gradle and executes the build.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 还添加了 Gradle Wrapper，这意味着 Android 项目可以在未安装 Gradle 的机器上构建。Gradle
    Wrapper 自动安装 Gradle 并执行构建。
- en: 'The actual Android application is in the `app` directory that has the source
    code, resource, and so on. The content of app directory is as shown here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的 Android 应用程序位于 `app` 目录中，该目录包含源代码、资源等。`app` 目录的内容如下所示：
- en: '![Creating Android project using Android Studio](img/B02000_10_05.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Android Studio 创建 Android 项目](img/B02000_10_05.jpg)'
- en: Figure 10.5
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5
- en: It contains the `src` directory for the Java source code and test code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含用于 Java 源代码和测试代码的 `src` 目录。
- en: 'Source and test directories are `src/main/java` and `src/androidTest/java,`
    respectively, as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码目录和测试目录分别是 `src/main/java` 和 `src/androidTest/java`，如下截图所示：
- en: '![Creating Android project using Android Studio](img/B02000_10_06.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Android Studio 创建 Android 项目](img/B02000_10_06.jpg)'
- en: Figure 10.6
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6
- en: 'Already you are aware of Java plugin and its default conventions. If we include
    Java plugin in a project, the source structure is `src/main/java` and `src/main/resources`.
    For Android plugin apart from these two directories, you can also add extra files
    and folders specific to Android conventions, as mentioned here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解 Java 插件及其默认约定。如果我们在一个项目中包含 Java 插件，源结构将是 `src/main/java` 和 `src/main/resources`。对于
    Android 插件，除了这两个目录外，你还可以添加特定于 Android 约定的额外文件和文件夹，如以下内容所述：
- en: '`AndroidManifest.xml`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`'
- en: '`res/`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/`'
- en: '`assets/`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets/`'
- en: '`jni/`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jni/`'
- en: '`proguard-rules.pro`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proguard-rules.pro`'
- en: 'This can be configured in the `android` closure as `sourceSets` properties,
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在 `android` 封闭中配置为 `sourceSets` 属性，如下所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will discuss some of the important concepts here. You can find more details
    at [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里讨论一些重要概念。更多详细信息请参阅[https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html)。
- en: The `AndroidManifest.xml` file is one of the important files that must be present
    in the application directory. It contains some important information related to
    the application, such as activities, content providers, permissions, and so on.
    Manifest file contains only predefined elements. Some values are populated from
    the Gradle properties. You cannot add any custom element in the manifest file.
    Elements such as `<manifest>` and `<application>` are mandatory and they appear
    only once. Other elements are optional and can be applied once or multiple times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml` 文件是必须存在于应用程序目录中的重要文件之一。它包含与应用程序相关的一些重要信息，例如活动、内容提供者、权限等。清单文件仅包含预定义元素。一些值是从
    Gradle 属性中填充的。您不能在清单文件中添加任何自定义元素。例如 `<manifest>` 和 `<application>` 这样的元素是必需的，并且只出现一次。其他元素是可选的，可以应用一次或多次。'
- en: The `res` directory is used to place resources. You can place all the application
    resources, such as layout files, drawable files, and string values under the `res`
    directory. You can find more details about resources at [http://developer.android.com/guide/topics/resources/providing-resources.html](http://developer.android.com/guide/topics/resources/providing-resources.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`res` 目录用于放置资源。您可以在 `res` 目录下放置所有应用程序资源，例如布局文件、可绘制文件和字符串值。有关资源的更多详细信息，请参阅[http://developer.android.com/guide/topics/resources/providing-resources.html](http://developer.android.com/guide/topics/resources/providing-resources.html)。'
- en: 'The directories supported inside the `res` directory are:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `res` 目录内部支持的目录包括：
- en: '`animator`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animator`'
- en: '`anim`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anim`'
- en: '`color`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`'
- en: '`drawable`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drawable`'
- en: '`mipmap`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mipmap`'
- en: '`layout`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layout`'
- en: '`menu`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`menu`'
- en: '`raw`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw`'
- en: '`values`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values`'
- en: '`xml`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xml`'
- en: The `assets` directory may contain all the basic files. Files under this directory
    will be part of the `.apk` file without any modification and the original file
    name is preserved.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`assets` 目录可能包含所有基本文件。此目录下的文件将作为未经修改的 `.apk` 文件的一部分，并且保留原始文件名。'
- en: '`jni` contains native code using the Java Native Interface.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`jni` 包含使用 Java Native Interface 的本地代码。'
- en: '`proguard-rules.pro` contains the ProGuard-related settings. We will discuss
    ProGuard settings later in this chapter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`proguard-rules.pro` 包含与 ProGuard 相关的设置。我们将在本章后面讨论 ProGuard 设置。'
- en: Building the Android project with Gradle
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gradle 构建 Android 项目
- en: 'We created the application with one simple activity and now we will try to
    build the application with Gradle. Android Studio has automatically generated
    two build files for the project; one `build.gradle` file in the root folder of
    the project and other build file in the `app` directory. We will use the `build.gradle`
    file of the subproject (`app` folder) to build the Android application. This `build.gradle`
    file has the following content:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个简单的活动创建了应用程序，现在我们将尝试使用 Gradle 构建应用程序。Android Studio 已经为项目自动生成了两个构建文件；一个位于项目根目录的
    `build.gradle` 文件，另一个位于 `app` 目录中的构建文件。我们将使用子项目（`app` 文件夹）的 `build.gradle` 文件来构建
    Android 应用程序。此 `build.gradle` 文件包含以下内容：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the very first line, we applied a plugin with the `apply plugin: ''com.android.application''`
    statement. This is similar to applying any other standard Gradle plugin. But from
    where will this plugin jar be downloaded? If you check the `build.gradle` file
    in the parent project, you will find the following entry:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '在第一行，我们使用 `apply plugin: ''com.android.application''` 语句应用了一个插件。这与应用任何其他标准
    Gradle 插件类似。但这个插件 JAR 文件将从哪里下载？如果您检查父项目的 `build.gradle` 文件，您将找到以下条目：'
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `buildscript` closure, we have defined dependencies as `com.android.tools.build:gradle:1.2.3`.
    This JAR file will be downloaded from the `jcenter` repository and it will be
    added to the classpath of the `build.gradle`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `buildscript` 闭包中，我们定义了依赖项为 `com.android.tools.build:gradle:1.2.3`。此 JAR 文件将从
    `jcenter` 仓库下载，并将其添加到 `build.gradle` 的类路径中。
- en: Next part of the build file is the android closure definition where we define
    all the basic configurations related to the application such as SDK version, minimum
    SDK version supported, target SDK version, application ID, and versioning.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 构建文件的下一部分是 Android 闭包定义，其中我们定义了与应用程序相关的所有基本配置，例如 SDK 版本、支持的最低 SDK 版本、目标 SDK
    版本、应用程序 ID 和版本控制。
- en: Next, we have the standard `dependencies` closure to define compile and runtime
    dependencies for the application. Here, we have included the `lib` directory and
    `appcompat-v7 jar` as dependencies.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有标准的 `dependencies` 闭包来定义应用程序的编译和运行时依赖项。在这里，我们已经包括了 `lib` 目录和 `appcompat-v7
    jar` 作为依赖项。
- en: 'With these simple configurations, we are ready to build the application with
    Gradle. We have applied Android plugin in the build file. Now, we will explore
    different tasks available to build the project. Type `gradle tasks` on the command
    prompt to get the list of tasks, as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些简单的配置，我们就可以使用 Gradle 构建应用程序。我们已经在构建文件中应用了 Android 插件。现在，我们将探索可用于构建项目的不同任务。在命令提示符中输入
    `gradle tasks` 以获取任务列表，如下所示：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that to build Android project, you need Gradle 2.2.1 and above.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要构建 Android 项目，你需要 Gradle 2.2.1 及以上版本。
- en: 'Following are the some of the important tasks that you might need to build
    an Android application:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些你可能需要构建 Android 应用程序的重要任务：
- en: '`assemble`: This task is same as the assemble task in the Java plugin that
    is used to assemble the output of the application.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assemble`: 此任务与 Java 插件的组装任务相同，用于组装应用程序的输出。'
- en: '`check`: This is similar to the Java plugin check task, it runs all the checks.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check`: 这类似于 Java 插件的检查任务，它运行所有检查。'
- en: '`clean`: This task removes all the artifacts created during build process.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`: 此任务删除构建过程中创建的所有工件。'
- en: '`build`: This task executes the assemble and check task and builds the application
    artifacts.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`: 此任务执行组装和检查任务，并构建应用程序工件。'
- en: '`androidDependencies`: This task will display all the Android dependencies
    of the project.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`androidDependencies`: 此任务将显示项目的所有 Android 依赖项。'
- en: '`connectedCheck`: It will execute the check task on all the connected devices
    in parallel'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connectedCheck`: 它将在所有连接的设备上并行执行检查任务'
- en: '`install<buildVariant>`: You can find various install tasks (such as `installDebug`,
    `installRelease`) that are used to install specific `buildVariant` on a device.
    We will discuss more on the `buildVariant` in a later section of the book.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install<buildVariant>`: 你可以找到各种安装任务（例如 `installDebug`、`installRelease`），它们用于在设备上安装特定的
    `buildVariant`。我们将在本书的后续部分中更详细地讨论 `buildVariant`。'
- en: buildTypes
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: buildTypes
- en: The `buildTypes` configuration is used to define types or environments of build,
    such as debug, release, QA, and staging to build and package the app. By default,
    when you build the Android project, you can find both the debug and release versions
    that were created in the `build/outputs/apk` directory. By default, the debug
    version is signed with a key/certificate that is created automatically with a
    known username/password. The release build type is not signed during the build
    process; therefore, you can find the `app-release-unsigned.apk` file created for
    the release build type. Release build type needs to be signed before deploying
    it in any device.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildTypes` 配置用于定义构建类型或环境，例如调试、发布、QA 和预发布，以构建和打包应用程序。默认情况下，当你构建 Android 项目时，你可以在
    `build/outputs/apk` 目录中找到创建的调试和发布版本。默认情况下，调试版本使用自动创建的已知用户名/密码的密钥/证书进行签名。发布构建类型在构建过程中未签名；因此，你可以找到为发布构建类型创建的
    `app-release-unsigned.apk` 文件。发布构建类型在部署到任何设备之前需要签名。'
- en: 'You can customize both build and release build types and also extend the build
    types by adding your own build types, as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自定义构建和发布构建类型，也可以通过添加自己的构建类型来扩展构建类型，如下所示：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here we have added one more build type `staging` (for staging environment),
    and configured it to be a copy of the release build type and added `debuggable
    true`. You can modify the following properties for any build types:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个额外的构建类型 `staging`（用于预发布环境），并将其配置为发布构建类型的副本，并添加了 `debuggable true`。你可以修改以下属性以适用于任何构建类型：
- en: '| Property name | Default values for debug type | Default values for release
    and other types |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 调试类型的默认值 | 发布和其他类型的默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `debuggable` | `true` | `false` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `debuggable` | `true` | `false` |'
- en: '| `jniDebuggable` | `false` | `false` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `jniDebuggable` | `false` | `false` |'
- en: '| `renderscriptDebuggable` | `false` | `false` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `renderscriptDebuggable` | `false` | `false` |'
- en: '| `renderscriptOptimLevel` | `3` | `3` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `renderscriptOptimLevel` | `3` | `3` |'
- en: '| `applicationIdSuffix` | `null` | `null` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `applicationIdSuffix` | `null` | `null` |'
- en: '| `versionNameSuffix` | `null` | `null` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `versionNameSuffix` | `null` | `null` |'
- en: '| `signingConfig (discussed later)` | `android.signingConfigs.debug` | `null`
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `signingConfig (稍后讨论)` | `android.signingConfigs.debug` | `null` |'
- en: '| `zipAlignEnabled` | `false` | `true` |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `zipAlignEnabled` | `false` | `true` |'
- en: '| `minifyEnabled` (discussed later) | `false` | `false` |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `minifyEnabled`（稍后讨论） | `false` | `false` |'
- en: '*Table 10.1*'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*表 10.1*'
- en: Also, for each build type, you can define their build type-specific SourceSet
    such as `src/<build type>`. As mentioned in the preceding example, you can define
    a new directory `src/staging` and put the staging-related source code and resources
    in this directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于每个构建类型，您可以定义其特定的构建类型 SourceSet，例如 `src/<build type>`。如前例所述，您可以定义一个新的目录
    `src/staging`，并将与预发布相关的源代码和资源放在此目录中。
- en: 'Also for each build type, new tasks will be added by the Android plugin in
    the following format: `assemble<buildtype>`, `install<buildtype>`, `compile<buildtype>`,
    `jar<buildtype>`. This can be observed by executing the `gradle task` command,
    as shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于每个构建类型，Android 插件将在以下格式中添加新任务：`assemble<buildtype>`、`install<buildtype>`、`compile<buildtype>`、`jar<buildtype>`。这可以通过执行
    `gradle task` 命令来观察，如下所示：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As mentioned previously, these task are only associated with the staging build
    types.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这些任务仅与预发布构建类型相关联。
- en: ProGuard settings
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ProGuard 设置
- en: For `release` build type, Gradle provides access to the Proguard tool that is
    used to optimize and obfuscate the code. It shrinks the source code and makes
    the `.apk` file smaller in size. You can enable/disable this feature by setting
    `minifyEnabled` in the `buildTypes/release` closure. As mentioned in *Table 10.1*,
    the default value is set to `false`; so set it to `true` if you want to enable
    it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `release` 构建类型，Gradle 提供了用于优化和混淆代码的 Proguard 工具的访问权限。它缩小了源代码，并使 `.apk` 文件的大小减小。您可以通过在
    `buildTypes/release` 封闭中设置 `minifyEnabled` 来启用/禁用此功能。如 *表 10.1* 中所述，默认值设置为 `false`；因此，如果要启用它，请将其设置为
    `true`。
- en: 'The default setting can be obtained using the `getDefaultProguardFile(''proguard-android.txt'')`
    method. You can find the location of the ProGuard tool at `<Android sdk dir>/tools/proguard`.
    If you want to provide custom rules for the project, you can add it to the `proguard-rules.pro`
    file provided by Android studio. You can even add your own files with different
    names:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置可以通过 `getDefaultProguardFile('proguard-android.txt')` 方法获取。您可以在 `<Android
    sdk dir>/tools/proguard` 找到 ProGuard 工具的位置。如果您想为项目提供自定义规则，可以将它添加到 Android Studio
    提供的 `proguard-rules.pro` 文件中。您甚至可以添加自己的文件，并使用不同的名称：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build flavors
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建风味
- en: 'Build flavors or product flavors are different from build type. It is another
    level of separation, which allows building multiple flavors of the application,
    such as paid version, free version, phone version, and tab version. Each version
    of the application can have its own separate features and different hardware requirements.
    The combination of `productFlavors` and `buildTypes` forms a build variant and
    a different APK is generated for each build variant. Product flavors are defined
    under the `productFlavors` closure:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 构建风味或产品风味与构建类型不同。这是另一个分离级别，允许构建应用程序的多个风味，例如付费版本、免费版本、手机版本和标签版本。每个应用程序版本都可以有自己的独立功能和不同的硬件要求。`productFlavors`
    和 `buildTypes` 的组合形成了一个构建变体，并为每个构建变体生成不同的 APK。产品风味在 `productFlavors` 封闭下定义：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, if we build the project with the `gradle clean build` command, we will
    find different APK files created in the `build/outputs/apk/` directory. We have
    two flavors (`phone` and `tab`) with four build types (`debug signed`, `debug
    unaligned`, `staging`, and `release`). Therefore, total *2*4 = 8* APK files will
    be created in the build process.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用 `gradle clean build` 命令构建项目，我们将在 `build/outputs/apk/` 目录中找到不同的 APK
    文件。我们有两个风味（`phone` 和 `tab`）和四个构建类型（`debug signed`、`debug unaligned`、`staging`
    和 `release`）。因此，在构建过程中将创建总共 *2*4 = 8* 个 APK 文件。
- en: '![Build flavors](img/B02000_10_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![构建风味](img/B02000_10_07.jpg)'
- en: Figure 10.7
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7
- en: 'When we added `staging` as the build type in the previous section, we observed
    that Gradle had automatically created some tasks. Similarly, for each flavor configuration,
    Gradle will add different tasks such as `assemblePhoneDebug` and `assembleTabDebug`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在上一节中将 `staging` 添加为构建类型时，我们观察到 Gradle 自动创建了一些任务。同样，对于每个风味配置，Gradle 将添加不同的任务，如
    `assemblePhoneDebug` 和 `assembleTabDebug`：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Product flavors extend the configuration from the `defaultConfig` closure. You
    can overwrite the default configurations inside each product flavor. For each
    flavor, you can also have a separate source code and the required files as `src/<flavor>/java`,
    `src/<flavor>/resources`, and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 产品风味扩展了 `defaultConfig` 封闭中的配置。您可以在每个产品风味中覆盖默认配置。对于每个风味，您还可以拥有独立的源代码和所需的文件，如
    `src/<flavor>/java`、`src/<flavor>/resources` 等。
- en: Running the application on a device/emulator
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在设备/模拟器上运行应用程序
- en: 'Once an application is built, you will want to install or run the application,
    either on an emulator or a physical mobile device. For simplicity, we will run
    the application on an emulator. During the development phase, with the help of
    an emulator you can test the application on different platforms without using
    devices. Some of the advantages of using an emulator are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了应用程序，您可能想要在模拟器或物理移动设备上安装或运行应用程序。为了简单起见，我们将在模拟器上运行应用程序。在开发阶段，借助模拟器，您可以在不使用设备的情况下测试不同平台上的应用程序。使用模拟器的优点如下：
- en: You can test the application on multiple emulator devices
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在多个模拟器设备上测试应用程序
- en: You can test with different hardware features such as sound, webcam, or sensors
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用不同的硬件功能进行测试，例如声音、网络摄像头或传感器
- en: You control battery power, phone location, network settings, such as 2G or 3G,
    and so on
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以控制电池电量、手机位置、网络设置，如 2G 或 3G 等
- en: 'Emulators are very flexible, but using too many emulators can bring down your
    system performance. Based on your system configuration, you should carefully configure
    the emulators. You can add new emulator devices using AVD Manager as shown in
    the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器非常灵活，但使用过多的模拟器可能会降低系统性能。根据您的系统配置，您应仔细配置模拟器。您可以使用 AVD 管理器添加新的模拟器设备，如图所示：
- en: '![Running the application on a device/emulator](img/B02000_10_08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![在设备/模拟器上运行应用程序](img/B02000_10_08.jpg)'
- en: Figure 10.8
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8
- en: It will show the existing emulator devices. You can create a new device as per
    application requirement. For more information, refer to this link [http://developer.android.com/tools/help/emulator.html](http://developer.android.com/tools/help/emulator.html).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示现有的模拟器设备。您可以根据应用程序需求创建新的设备。有关更多信息，请参阅此链接 [http://developer.android.com/tools/help/emulator.html](http://developer.android.com/tools/help/emulator.html)。
- en: '![Running the application on a device/emulator](img/B02000_10_09.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![在设备/模拟器上运行应用程序](img/B02000_10_09.jpg)'
- en: Figure 10.9
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9
- en: 'You can start the emulator by clicking on the start symbol in the **Actions**
    column. For our example, we created a **Nexus 5 API 22x86** emulator to test the
    application. Alternatively, you can also start the emulator device by executing
    the following command on the command prompt:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击 **动作** 列表中的启动符号来启动模拟器。在我们的例子中，我们创建了一个 **Nexus 5 API 22x86** 模拟器来测试应用程序。或者，您也可以通过在命令提示符中执行以下命令来启动模拟器设备：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It takes a while to initialize the emulator. Once the emulator is up and running,
    we should be able to run the application from Android Studio. Go to the **Run**
    menu and choose **Run app**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化模拟器需要一些时间。一旦模拟器启动并运行，我们应该能够从 Android Studio 运行应用程序。转到 **运行** 菜单并选择 **运行应用程序**。
- en: '![Running the application on a device/emulator](img/B02000_10_10.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![在设备/模拟器上运行应用程序](img/B02000_10_10.jpg)'
- en: Figure 10.10
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10
- en: This will show all the devices (connected to the system) and the emulator that
    is up and running. You can select any of the running devices and click **OK**.
    The application should be visible in the emulator after few seconds.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示所有连接到系统的设备以及正在运行的模拟器。您可以选择任何正在运行的设备并点击 **确定**。几秒钟后，应用程序应该会在模拟器中可见。
- en: '![Running the application on a device/emulator](img/B02000_10_11.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![在设备/模拟器上运行应用程序](img/B02000_10_11.jpg)'
- en: Figure 10.11
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11
- en: 'Alternatively, you can also install the application using the `gradle install<buildVariant>`
    command. We have already created different build variants and flavors in the previous
    section. Let''s try to install the `PhoneDebug` variant on the emulator. This
    is done as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以使用 `gradle install<buildVariant>` 命令来安装应用程序。我们已经在上一节中创建了不同的构建变体和口味。让我们尝试在模拟器上安装
    `PhoneDebug` 变体。操作如下：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You will be able to find the application in the phone's application list. `AndroidSampleApp`
    is the application that we installed using Gradle task. You can launch the application
    and check the output. It will display `Hello World`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在手机的程序列表中找到该应用程序。`AndroidSampleApp` 是我们使用 Gradle 任务安装的应用程序。您可以启动应用程序并检查输出。它将显示
    `Hello World`。
- en: 'To uninstall the application using Gradle, use the gradle uninstall command
    as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Gradle 卸载应用程序，请使用以下 gradle uninstall 命令：
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Signing the release version
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 签署发布版本
- en: 'You might have observed while running `gradle tasks` that the release related
    install tasks are not created; for example, `installPhoneRelease`, `installTabRelease`,
    and so on. Release build type-related tasks will be available, if you sign the
    application using keystore. Now, we will try to sign an application using a keystore.
    If you already have a valid keystore, you can use that file to sign the application;
    otherwise you will need to generate a new keystore by using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在运行`gradle tasks`时观察到与发布相关的安装任务尚未创建；例如，`installPhoneRelease`、`installTabRelease`等。如果你使用密钥库签名应用程序，将会有与发布构建类型相关的任务可用。现在，我们将尝试使用密钥库签名一个应用程序。如果你已经有一个有效的密钥库，你可以使用该文件来签名应用程序；否则，你需要使用以下命令生成一个新的密钥库：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To create the keystore, we need to provide some basic details. On entering
    all the details, the preceding command will generate the `myCustomkey.keystore`
    file. Now, we have to update `build.gradle` with the following configurations
    to enable the signing of the application:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建密钥库，我们需要提供一些基本信息。在输入所有详细信息后，前面的命令将生成`myCustomkey.keystore`文件。现在，我们必须使用以下配置更新`build.gradle`以启用应用程序的签名：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, if we execute the `gradle tasks` command, we will find new tasks have
    been added for the release builds. Similarly, new APK files will be created in
    the `apk` folder:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们执行`gradle tasks`命令，我们会发现为发布构建添加了新的任务。同样，新的APK文件将在`apk`文件夹中创建：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly discussed Android development with Gradle as a build
    tool. We also discussed different closures provided by the Android plugin and
    how to build an Android project by following the default conventions. We also
    explained how to customize the build file to fulfill the new project requirements.
    Of course, there are a lot of things to discuss, such as Android development and
    Android with Gradle, and we were not able to cover everything in a single chapter.
    It would require a separate book to detail out all the features of the Android
    plugin. But we think that we covered most of the basic and important steps required
    to build an Android project, which will help you to get started with Gradle as
    an Android build system.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要讨论了使用Gradle作为构建工具的Android开发。我们还讨论了Android插件提供的不同闭包以及如何遵循默认约定构建Android项目。我们还解释了如何自定义构建文件以满足新项目的要求。当然，还有很多事情可以讨论，例如Android开发和使用Gradle的Android，但我们无法在一个章节中涵盖所有内容。这需要一本书来详细说明Android插件的全部功能。但我们认为，我们已经涵盖了构建Android项目所需的大部分基本和重要步骤，这将帮助你开始使用Gradle作为Android构建系统。
