- en: Chapter 10. Building Android Applications with Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With an increasing number of smartphone users in recent years, mobile application
    development has become one of the major areas to focus on other than big data
    and Cloud computing. Most of the companies are coming up with mobile apps for
    their products such as games, social networking, e-commerce, and so on. And this
    trend is surely going to increase in next few years. So, in the last chapter,
    we will cover the topic related to mobile technology.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to create a basic Android application with
    Android Studio as IDE and how to build the application with Gradle. We already
    know that the Gradle philosophy is based on conventions rather than configurations,
    and it is much easier to write a build automation infrastructure with Gradle in
    comparison to other build tools available in the market. This is one of the reasons
    why Gradle is the official build tool for Android. You just write few lines of
    code in the build file and the application is ready for different platforms and
    versions, such as free or paid. It also provides support to sign application before
    release. With Gradle, you can run the application on an emulator or physical devices
    to run unit and function tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will primarily focus on two areas: a quick overview of
    Android application development with Android Studio and various aspects of Gradle
    as a build tool for Android. As this is a Gradle book, our discussion will be
    focused on understanding the Gradle features.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Android project using Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by creating a sample Android application, which will display `Hello
    World` when you open it on a mobile device. You can use Eclipse with the **Android
    Development Tool** (**ADT**) plugin or Android Studio, which has been released
    by Google. Android Studio is based on IntelliJ IDEA and it is now the most preferred
    IDE for building Android applications. Both Eclipse with ADT and Android studio
    setup instructions can be found at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will use Android Studio for application development. Once
    you have downloaded and installed Android Studio on your system, start Android
    Studio. Android Studio also installs Android SDK, which is required to compile
    and execute Android applications. To create an application, navigate to **File**
    | **New Project**. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Next** button and follow the steps. On the activity screen,
    select **Blank Activity**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, our main purpose is to create a sample application and emphasize
    on the build process of the Android application with Gradle. So it is not required
    to create a full-fledged Android application. Therefore, the sample application
    will do just one job, which is to display `Hello World` when you launch the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the project setup, in the **Customize the Activity** screen, provide
    the details such as **Activity Name**, **Title**, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on **Finish**, Android studio will create the project and the
    directory structure will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4
  prefs: []
  type: TYPE_NORMAL
- en: In the project home directory, you will find the `build.gradle` and `settings.gradle`
    files. This means that Android Studio has created a multi-project build structure.
    In [Chapter 6](ch06.html "Chapter 6. Working with Gradle"), *Working with Gradle*,
    we have already covered the multi-project structure, in which a parent project
    contains one or more subprojects. The parent project contains all the common configurations
    and other related details that are shared among the subprojects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio creates one `build.gradle` for the parent project and individual
    `build.gradle` files for the subprojects. It also creates `settings.gradle` file
    that includes all the subprojects that are part of this parent project. You will
    also find the `local.properties` file. This file has information about the location
    of the Android SDK. The content of this file will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Android Studio also adds Gradle Wrapper, which means the Android project can
    be built on a machine where Gradle is not installed. Gradle Wrapper automatically
    installs Gradle and executes the build.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual Android application is in the `app` directory that has the source
    code, resource, and so on. The content of app directory is as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5
  prefs: []
  type: TYPE_NORMAL
- en: It contains the `src` directory for the Java source code and test code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Source and test directories are `src/main/java` and `src/androidTest/java,`
    respectively, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Android project using Android Studio](img/B02000_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6
  prefs: []
  type: TYPE_NORMAL
- en: 'Already you are aware of Java plugin and its default conventions. If we include
    Java plugin in a project, the source structure is `src/main/java` and `src/main/resources`.
    For Android plugin apart from these two directories, you can also add extra files
    and folders specific to Android conventions, as mentioned here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jni/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proguard-rules.pro`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be configured in the `android` closure as `sourceSets` properties,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will discuss some of the important concepts here. You can find more details
    at [https://developer.android.com/sdk/index.html](https://developer.android.com/sdk/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: The `AndroidManifest.xml` file is one of the important files that must be present
    in the application directory. It contains some important information related to
    the application, such as activities, content providers, permissions, and so on.
    Manifest file contains only predefined elements. Some values are populated from
    the Gradle properties. You cannot add any custom element in the manifest file.
    Elements such as `<manifest>` and `<application>` are mandatory and they appear
    only once. Other elements are optional and can be applied once or multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: The `res` directory is used to place resources. You can place all the application
    resources, such as layout files, drawable files, and string values under the `res`
    directory. You can find more details about resources at [http://developer.android.com/guide/topics/resources/providing-resources.html](http://developer.android.com/guide/topics/resources/providing-resources.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The directories supported inside the `res` directory are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`anim`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mipmap`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assets` directory may contain all the basic files. Files under this directory
    will be part of the `.apk` file without any modification and the original file
    name is preserved.
  prefs: []
  type: TYPE_NORMAL
- en: '`jni` contains native code using the Java Native Interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '`proguard-rules.pro` contains the ProGuard-related settings. We will discuss
    ProGuard settings later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Building the Android project with Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We created the application with one simple activity and now we will try to
    build the application with Gradle. Android Studio has automatically generated
    two build files for the project; one `build.gradle` file in the root folder of
    the project and other build file in the `app` directory. We will use the `build.gradle`
    file of the subproject (`app` folder) to build the Android application. This `build.gradle`
    file has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the very first line, we applied a plugin with the `apply plugin: ''com.android.application''`
    statement. This is similar to applying any other standard Gradle plugin. But from
    where will this plugin jar be downloaded? If you check the `build.gradle` file
    in the parent project, you will find the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the `buildscript` closure, we have defined dependencies as `com.android.tools.build:gradle:1.2.3`.
    This JAR file will be downloaded from the `jcenter` repository and it will be
    added to the classpath of the `build.gradle`.
  prefs: []
  type: TYPE_NORMAL
- en: Next part of the build file is the android closure definition where we define
    all the basic configurations related to the application such as SDK version, minimum
    SDK version supported, target SDK version, application ID, and versioning.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the standard `dependencies` closure to define compile and runtime
    dependencies for the application. Here, we have included the `lib` directory and
    `appcompat-v7 jar` as dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these simple configurations, we are ready to build the application with
    Gradle. We have applied Android plugin in the build file. Now, we will explore
    different tasks available to build the project. Type `gradle tasks` on the command
    prompt to get the list of tasks, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that to build Android project, you need Gradle 2.2.1 and above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the some of the important tasks that you might need to build
    an Android application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assemble`: This task is same as the assemble task in the Java plugin that
    is used to assemble the output of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check`: This is similar to the Java plugin check task, it runs all the checks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean`: This task removes all the artifacts created during build process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`: This task executes the assemble and check task and builds the application
    artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`androidDependencies`: This task will display all the Android dependencies
    of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connectedCheck`: It will execute the check task on all the connected devices
    in parallel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install<buildVariant>`: You can find various install tasks (such as `installDebug`,
    `installRelease`) that are used to install specific `buildVariant` on a device.
    We will discuss more on the `buildVariant` in a later section of the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: buildTypes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `buildTypes` configuration is used to define types or environments of build,
    such as debug, release, QA, and staging to build and package the app. By default,
    when you build the Android project, you can find both the debug and release versions
    that were created in the `build/outputs/apk` directory. By default, the debug
    version is signed with a key/certificate that is created automatically with a
    known username/password. The release build type is not signed during the build
    process; therefore, you can find the `app-release-unsigned.apk` file created for
    the release build type. Release build type needs to be signed before deploying
    it in any device.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize both build and release build types and also extend the build
    types by adding your own build types, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we have added one more build type `staging` (for staging environment),
    and configured it to be a copy of the release build type and added `debuggable
    true`. You can modify the following properties for any build types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Default values for debug type | Default values for release
    and other types |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `debuggable` | `true` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `jniDebuggable` | `false` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `renderscriptDebuggable` | `false` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `renderscriptOptimLevel` | `3` | `3` |'
  prefs: []
  type: TYPE_TB
- en: '| `applicationIdSuffix` | `null` | `null` |'
  prefs: []
  type: TYPE_TB
- en: '| `versionNameSuffix` | `null` | `null` |'
  prefs: []
  type: TYPE_TB
- en: '| `signingConfig (discussed later)` | `android.signingConfigs.debug` | `null`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `zipAlignEnabled` | `false` | `true` |'
  prefs: []
  type: TYPE_TB
- en: '| `minifyEnabled` (discussed later) | `false` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '*Table 10.1*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also, for each build type, you can define their build type-specific SourceSet
    such as `src/<build type>`. As mentioned in the preceding example, you can define
    a new directory `src/staging` and put the staging-related source code and resources
    in this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also for each build type, new tasks will be added by the Android plugin in
    the following format: `assemble<buildtype>`, `install<buildtype>`, `compile<buildtype>`,
    `jar<buildtype>`. This can be observed by executing the `gradle task` command,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned previously, these task are only associated with the staging build
    types.
  prefs: []
  type: TYPE_NORMAL
- en: ProGuard settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For `release` build type, Gradle provides access to the Proguard tool that is
    used to optimize and obfuscate the code. It shrinks the source code and makes
    the `.apk` file smaller in size. You can enable/disable this feature by setting
    `minifyEnabled` in the `buildTypes/release` closure. As mentioned in *Table 10.1*,
    the default value is set to `false`; so set it to `true` if you want to enable
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default setting can be obtained using the `getDefaultProguardFile(''proguard-android.txt'')`
    method. You can find the location of the ProGuard tool at `<Android sdk dir>/tools/proguard`.
    If you want to provide custom rules for the project, you can add it to the `proguard-rules.pro`
    file provided by Android studio. You can even add your own files with different
    names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Build flavors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Build flavors or product flavors are different from build type. It is another
    level of separation, which allows building multiple flavors of the application,
    such as paid version, free version, phone version, and tab version. Each version
    of the application can have its own separate features and different hardware requirements.
    The combination of `productFlavors` and `buildTypes` forms a build variant and
    a different APK is generated for each build variant. Product flavors are defined
    under the `productFlavors` closure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we build the project with the `gradle clean build` command, we will
    find different APK files created in the `build/outputs/apk/` directory. We have
    two flavors (`phone` and `tab`) with four build types (`debug signed`, `debug
    unaligned`, `staging`, and `release`). Therefore, total *2*4 = 8* APK files will
    be created in the build process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Build flavors](img/B02000_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7
  prefs: []
  type: TYPE_NORMAL
- en: 'When we added `staging` as the build type in the previous section, we observed
    that Gradle had automatically created some tasks. Similarly, for each flavor configuration,
    Gradle will add different tasks such as `assemblePhoneDebug` and `assembleTabDebug`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Product flavors extend the configuration from the `defaultConfig` closure. You
    can overwrite the default configurations inside each product flavor. For each
    flavor, you can also have a separate source code and the required files as `src/<flavor>/java`,
    `src/<flavor>/resources`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application on a device/emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once an application is built, you will want to install or run the application,
    either on an emulator or a physical mobile device. For simplicity, we will run
    the application on an emulator. During the development phase, with the help of
    an emulator you can test the application on different platforms without using
    devices. Some of the advantages of using an emulator are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can test the application on multiple emulator devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can test with different hardware features such as sound, webcam, or sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You control battery power, phone location, network settings, such as 2G or 3G,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Emulators are very flexible, but using too many emulators can bring down your
    system performance. Based on your system configuration, you should carefully configure
    the emulators. You can add new emulator devices using AVD Manager as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on a device/emulator](img/B02000_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8
  prefs: []
  type: TYPE_NORMAL
- en: It will show the existing emulator devices. You can create a new device as per
    application requirement. For more information, refer to this link [http://developer.android.com/tools/help/emulator.html](http://developer.android.com/tools/help/emulator.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on a device/emulator](img/B02000_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start the emulator by clicking on the start symbol in the **Actions**
    column. For our example, we created a **Nexus 5 API 22x86** emulator to test the
    application. Alternatively, you can also start the emulator device by executing
    the following command on the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It takes a while to initialize the emulator. Once the emulator is up and running,
    we should be able to run the application from Android Studio. Go to the **Run**
    menu and choose **Run app**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on a device/emulator](img/B02000_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10
  prefs: []
  type: TYPE_NORMAL
- en: This will show all the devices (connected to the system) and the emulator that
    is up and running. You can select any of the running devices and click **OK**.
    The application should be visible in the emulator after few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application on a device/emulator](img/B02000_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can also install the application using the `gradle install<buildVariant>`
    command. We have already created different build variants and flavors in the previous
    section. Let''s try to install the `PhoneDebug` variant on the emulator. This
    is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will be able to find the application in the phone's application list. `AndroidSampleApp`
    is the application that we installed using Gradle task. You can launch the application
    and check the output. It will display `Hello World`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To uninstall the application using Gradle, use the gradle uninstall command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Signing the release version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might have observed while running `gradle tasks` that the release related
    install tasks are not created; for example, `installPhoneRelease`, `installTabRelease`,
    and so on. Release build type-related tasks will be available, if you sign the
    application using keystore. Now, we will try to sign an application using a keystore.
    If you already have a valid keystore, you can use that file to sign the application;
    otherwise you will need to generate a new keystore by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the keystore, we need to provide some basic details. On entering
    all the details, the preceding command will generate the `myCustomkey.keystore`
    file. Now, we have to update `build.gradle` with the following configurations
    to enable the signing of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we execute the `gradle tasks` command, we will find new tasks have
    been added for the release builds. Similarly, new APK files will be created in
    the `apk` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly discussed Android development with Gradle as a build
    tool. We also discussed different closures provided by the Android plugin and
    how to build an Android project by following the default conventions. We also
    explained how to customize the build file to fulfill the new project requirements.
    Of course, there are a lot of things to discuss, such as Android development and
    Android with Gradle, and we were not able to cover everything in a single chapter.
    It would require a separate book to detail out all the features of the Android
    plugin. But we think that we covered most of the basic and important steps required
    to build an Android project, which will help you to get started with Gradle as
    an Android build system.
  prefs: []
  type: TYPE_NORMAL
