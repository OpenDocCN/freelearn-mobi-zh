- en: Getting Started with the Grid
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用网格
- en: I am a visual person; I prefer to start with the visuals and make sure that
    the app looks like the design. Starting with the UI helps me to identify the data
    structure and allows me to get familiar with the app. Therefore, I can focus my
    attention on the code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个视觉型的人；我更喜欢从视觉开始，确保应用看起来符合设计。从UI开始帮助我识别数据结构，并使我熟悉应用。因此，我可以将注意力集中在代码上。
- en: In earlier chapters, we set up our app structure and developed a good understanding
    of the basics involved. In this chapter, you will learn about app architecture
    and how to create it for our *Let's Eat* app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们设置了我们的应用结构，并对涉及的基本概念有了良好的理解。在本章中，你将学习关于应用架构以及如何为我们的“让我们吃饭”应用创建架构。
- en: 'We will cover the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下内容：
- en: Understanding the Model View Controller architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解模型-视图-控制器（MVC）架构
- en: Classes and structures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和结构
- en: Controllers and classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器和类
- en: Understanding the Model View Controller architecture
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型-视图-控制器（MVC）架构
- en: Apple built iOS apps to use what is known as the **Model View Controller** (**MVC**),
    which is an architectural pattern that describes a way to structure the code in
    your app. In layman's terms, this just means breaking up our app into three distinct
    camps, Model, View, and Controller.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果构建iOS应用以使用被称为**模型-视图-控制器**（**MVC**）的东西，这是一种描述在应用中结构化代码的架构模式。用通俗易懂的话来说，这仅仅意味着将我们的应用分成三个不同的阵营：模型、视图和控制器。
- en: 'Here is a diagram of MVC to help you understand it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个MVC架构的图解，帮助你理解它：
- en: '![](img/1559ec72-768b-4906-aba7-b4725a4fb207.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1559ec72-768b-4906-aba7-b4725a4fb207.png)'
- en: 'Let''s discuss each camp:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论每个阵营：
- en: '**Model**: The **Model** camp is responsible for an app''s data and business
    logic. The Model''s only job is to handle representations of data, data storage,
    and the operations performed on data.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：**模型**阵营负责应用的数据和业务逻辑。模型唯一的工作是处理数据的表示、数据存储以及数据上的操作。'
- en: '**View**: The **View** camp is responsible for all the things that you see
    on the screen. The View handles presenting and formatting data that results from
    the user''s interactions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：**视图**阵营负责屏幕上显示的所有内容。视图处理展示和格式化用户交互产生的结果数据。'
- en: '**Controller**: The **Controller** camp is the liaison or coordinator between
    the other two camps. The Controller handles a lot of setup and connections to
    the View. The Controller also interprets user interactions. Since the Controller
    is between both the View and the Model, the View and the Model should know nothing
    about each other.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：**控制器**阵营是其他两个阵营之间的联络员或协调者。控制器处理大量的设置和与视图的连接。控制器还解释用户交互。由于控制器位于视图和模型之间，因此视图和模型对彼此一无所知。'
- en: In summary, the Controller takes user interactions and either responds back
    to the View or passes it onto the Model. When the Model completes a task, it passes
    it back to the Controller, and then the Controller talks with the View.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，控制器处理用户交互，要么直接对视图做出响应，要么将其传递给模型。当模型完成一个任务时，它将任务传递回控制器，然后控制器与视图进行交流。
- en: Getting familiar with the setup
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉设置
- en: For beginners, the MVC architecture can make you uncertain about where things
    should go. As we progress through the book, you will learn where to put things
    and why. So, you need not worry about where things should be placed as we work
    through this process together step by step.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，MVC架构可能会让你不确定事物应该放在哪里。随着我们通过本书的进展，你将学会放置事物的位置以及原因。所以，在我们一步步共同完成这个过程时，你不需要担心事物应该放置的位置。
- en: As your project grows, the MVC architecture places a lot of the responsibility
    on the Controller. Therefore, in this book, we tweak the MVC pattern in order
    to not put so much pressure on the Controller.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的项目增长，MVC架构将很多责任放在了控制器上。因此，在本书中，我们调整了MVC模式，以便不对控制器施加过多压力。
- en: Before we continue with our coding, we need to discuss classes and structures.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续编码之前，我们需要讨论类和结构。
- en: Classes and structures
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和结构
- en: Classes and structures (also known as structs) are files that contain properties
    and methods. You use these properties and methods to add functionality. You have
    been working with structs since [Chapter 1](3fd2bd2c-00aa-4684-a09d-56f9cf67da6d.xhtml),
    *Getting Familiar with Xcode*. Strings, Ints, Bools, Arrays, Dictionaries, and
    Sets are all structs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 类和结构体（也称为结构体）是包含属性和方法的文件。您使用这些属性和方法来添加功能。您从[第1章](3fd2bd2c-00aa-4684-a09d-56f9cf67da6d.xhtml)，“熟悉Xcode”，就开始使用结构体了。字符串、整数、布尔值、数组、字典和集合都是结构体。
- en: Earlier in the book, we created functions. As noted in [Chapter 6](75201e71-726f-4ab1-8d45-bb84774b10e6.xhtml),
    *Starting the UI Setup*, a method is a function that lives inside a class or struct.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的早期，我们创建了函数。正如[第6章](75201e71-726f-4ab1-8d45-bb84774b10e6.xhtml)，“开始UI设置”中提到的，方法是一个存在于类或结构体内部的函数。
- en: Classes and structs are very similar; however, Swift handles each of them a
    bit differently. To get a better understanding of how classes and structs work,
    we create a new Playground project. Working in the Playground gives us the ability
    to learn how to create custom classes and structs and to gain an understanding
    of each of their positives and negatives.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类和结构体非常相似；然而，Swift对它们各自的处理方式略有不同。为了更好地理解类和结构体是如何工作的，我们创建一个新的Playground项目。在Playground中工作使我们能够学习如何创建自定义类和结构体，并了解它们各自的优点和缺点。
- en: You can keep your project open, but let's jump back into Playgrounds. Since
    we have Xcode open, go to File | New |Playground.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以保持项目打开，但让我们回到Playgrounds。由于我们打开了Xcode，请转到文件 | 新建 | Playground。
- en: In the options screen that appears, name your new Playground, `FunctionsStructs`,
    and make sure that your Platform is set to iOS. Hit Next and then Create. Now,
    let's delete everything inside your new Playground and toggle on the Debug panel,
    using either the toggle button or *cmd* + *Shift* + *Y*.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，为新Playground命名，命名为`FunctionsStructs`，并确保平台设置为iOS。点击下一步然后创建。现在，让我们删除新Playground中的所有内容，并打开调试面板，可以使用切换按钮或*cmd*
    + *Shift* + *Y*。
- en: 'In your empty Playground, add the following:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的空Playground中添加以下内容：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We just created our first class and struct and defined two new custom data types
    (known as **Swift types**), `Cat` and `Dog`. Since we have not yet given the class
    or struct a property (such as a name) or created an instance of either `Cat` or
    `Dog`, you see nothing in the Results or Debug panels.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了我们第一个类和结构体，并定义了两个新的自定义数据类型（称为**Swift类型**），`Cat`和`Dog`。由于我们尚未为类或结构体提供一个属性（如名称）或创建`Cat`或`Dog`的实例，所以在结果或调试面板中您什么也看不到。
- en: When you create classes and structs, it is a best practice to start with a capital
    letter. In addition, you must have different names for your class and for your
    struct. Otherwise, you will get an error. Even though one is a class and the other
    is a struct, each of them needs a distinct name.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建类和结构体时，最佳实践是使用大写字母开头。此外，您必须为您的类和结构体使用不同的名称。否则，您将得到一个错误。尽管一个是类，另一个是结构体，但它们各自都需要一个独特的名称。
- en: 'Now, we need to give our `Cat` class and our `Dog` struct names. Therefore,
    let''s give them both a property, called `name`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的`Cat`类和`Dog`结构体命名。因此，让我们给它们都添加一个名为`name`的属性：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you cannot set a property when it is created, then it is recommended that
    you set that property to an optional using the question mark (`?`). Using optionals,
    protect your code trying to access the name if you never set it. You can also
    set your variable as an optional unwrapped. For example, you can also do the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建时无法设置属性，那么建议您使用问号（`?`）将该属性设置为可选。使用可选，保护您的代码在未设置名称时尝试访问名称。您还可以将变量设置为可选未包装。例如，您还可以这样做：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With both `Cat` and `Dog` now having a property called `name`, let''s create
    an instance of each of them:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Cat`和`Dog`都有了一个名为`name`的属性，让我们为它们各自创建一个实例：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/5a717362-7756-49d5-a357-36f9fa362c15.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a717362-7756-49d5-a357-36f9fa362c15.png)'
- en: So far, everything on the surface looks the same. We created both a `Cat` and
    a `Dog` and gave them each names. However, let's say `Whiskers` runs away and,
    a few weeks later, finds a home with a new family, who decide to change his name
    to `Smokey`. After `Whiskers` runs away, `Bruno` becomes lonely and decides to
    find him, but also gets lost. `Bruno` finds a new home as well, and this new family
    decides to name him, `Max`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，表面上看起来一切正常。我们创建了 `Cat` 和 `Dog`，并为它们各自命名。但是，假设 `Whiskers` 跑掉了，几周后，它在新家庭中找到了一个家，这个新家庭决定将它的名字改为
    `Smokey`。在 `Whiskers` 跑掉后，`Bruno` 变得孤独，决定去找它，但也迷路了。`Bruno` 找到了一个新的家，这个新家庭决定将它命名为
    `Max`。
- en: In Playgrounds, we create a new constant called `yellowStrayCat` and set it
    equal to `yellowCat`, since it is still `Whiskers`. However, we change the name
    of `yellowStrayCat` to `Smokey`. We also create a new constant called `yellowStrayDog`,
    setting it equal to `yellowDog` and naming it `Max`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在游乐场中，我们创建了一个新的常量，名为 `yellowStrayCat`，并将其设置为等于 `yellowCat`，因为它仍然是 `Whiskers`。然而，我们将
    `yellowStrayCat` 的名称更改为 `Smokey`。我们还创建了一个新的常量，名为 `yellowStrayDog`，将其设置为等于 `yellowDog`，并将其命名为
    `Max`。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our Results panel shows that the names of `yellowStrayCat` and `yellowStrayDog`,
    respectively, are now `Smokey` and `Max`. So, everything seems to be the same
    between our class and our struct, right? No, they are not the same. Let''s print
    the name of `yellowCat` underneath the line where we have print (`yellowStrayCat.name`).
    In addition, let''s do the same for the name of `yellowDog` underneath where we
    have print (`yellowStrayDog.name`). Your code should now look as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果面板显示，`yellowStrayCat` 和 `yellowStrayDog` 的名称现在分别是 `Smokey` 和 `Max`。所以，在我们的类和我们的结构体之间似乎一切正常，对吧？不，它们并不相同。在打印语句（`yellowStrayCat.name`）下方打印
    `yellowCat` 的名称。此外，对于 `yellowDog` 的名称，在打印语句（`yellowStrayDog.name`）下方也做同样的操作。现在，你的代码应该如下所示：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In our Results panel, as shown in the preceding screenshot, you should notice
    an unexpected result. The `yellowCat`, `Whiskers`, now has the name `Smokey`,
    but the `yellowDog` is still `Bruno`. Without getting too technical, when you
    use a class and copy it as we did, it refers back to the original instance created.
    This is known as a reference type. However, when structs get copied, they create
    a new instance and the original is not affected. This is known as a **value type**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的结果面板中，如前面的截图所示，你应该注意到一个意外的结果。`yellowCat`，`Whiskers` 现在的名字是 `Smokey`，但 `yellowDog`
    仍然是 `Bruno`。不深入技术细节，当你使用类并像我们这样复制它时，它会回指原始实例。这被称为引用类型。然而，当结构体被复制时，它会创建一个新的实例，原始实例不受影响。这被称为
    **值类型**。
- en: 'Before we move on, let''s look at one more difference between the two. In programming,
    we have what is called **inheritance**, which means that we can create another
    object with default values and other objects can inherit from those default values.
    Let''s create an `Animal` class that is the base class immediately below our `Cat`
    class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们看看两者之间还有一个区别。在编程中，我们有一个称为 **继承** 的概念，这意味着我们可以创建另一个具有默认值的对象，其他对象可以继承这些默认值。让我们创建一个
    `Animal` 类，它是我们的 `Cat` 类下面的基类：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s update our `Cat` class to inherit from it, as shown in the following
    code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新我们的 `Cat` 类，使其继承自它，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that we are only updating what goes directly after `Cat`. The rest of the
    class in the curly braces stays the same.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们只更新了 `Cat` 之后的内容。花括号中的其余类保持不变。
- en: 'Since our class now inherits from `Animal`, we should have a new property called
    `age`. Underneath where we name `yellowCat` as `Whiskers` and above our `print`
    statement, enter the following after we set Whiskers name:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的类现在继承自 `Animal`，我们应该有一个名为 `age` 的新属性。在将 `yellowCat` 命名为 `Whiskers` 并在 `print`
    语句之上，在我们设置 Whiskers 的名称之后，输入以下内容：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/2500eeba-7cd3-45c6-9b65-15ab5c7c9ce7.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2500eeba-7cd3-45c6-9b65-15ab5c7c9ce7.png)'
- en: 'So, as expected, we were able to give `Whiskers` an `age`. Let''s do the same
    for our `Dog` struct by adding `Animal` directly after `Dog`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如预期的那样，我们能够给 `Whiskers` 一个 `age`。让我们通过在 `Dog` 结构体后直接添加 `Animal` 来为我们的 `Dog`
    结构体做同样的事情：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once you have entered the preceding code snippet, you will see the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你输入了前面的代码片段，你会看到以下内容：
- en: '![](img/0cb19b8a-653c-44d6-8563-c15372214595.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0cb19b8a-653c-44d6-8563-c15372214595.png)'
- en: 'A red error displays and informs you that `Non-class type ''Dog'' cannot inherit
    from class Animal`. Therefore, we need to create a struct called, `AnimalB`, since
    we cannot have the same name:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 出现了一个红色错误，并通知你 `Non-class type 'Dog' cannot inherit from class Animal`。因此，我们需要创建一个名为
    `AnimalB` 的结构体，因为我们不能有相同的名称：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update your `Dog` struct from `Animal` to `AnimalB`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的`Dog`结构体从`Animal`更新到`AnimalB`：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, you should see an error called `Inheritance from non-protocol type ''AnimalB''`,
    which means that our struct cannot inherit from another struct:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该看到一个错误叫做`从非协议类型'AnimalB'继承`，这意味着我们的结构体不能从另一个结构体继承：
- en: '![](img/3c3bcdae-6b39-486c-9a53-5585fda72ab0.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3bcdae-6b39-486c-9a53-5585fda72ab0.png)'
- en: Inheritance is something that you can do with classes, but not with structs;
    this is another difference between classes and structs. There are a couple of
    other advanced technical differences but, for our purposes, the two described
    here are sufficient.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是你可以用类来做的，但不能用结构体来做的事情；这是类和结构体之间的另一个区别。还有一些其他的高级技术差异，但就我们的目的而言，这里描述的两个就足够了。
- en: Controllers and classes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器和类
- en: When working with `UIViewController`, `UICollectionViewController`, and `UITableViewController`,
    you need to create a class file for each of these elements. Each file handles
    all of the logic and interactions that the controller sends and receives. Along
    with interactions, the class file is responsible for receiving data. You should
    understand this more when we delve more deeply into creating each of these class
    files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当与`UIViewController`、`UICollectionViewController`和`UITableViewController`一起工作时，你需要为这些元素中的每一个创建一个类文件。每个文件处理控制器发送和接收的所有逻辑和交互。除了交互之外，类文件还负责接收数据。当我们更深入地创建每个这些类文件时，你应该对此有更深的理解。
- en: Creating our controller
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的控制器
- en: When working with our UI, we used controllers that were done for you. Now that
    we know that our UI is in place, we can get rid of these two files. We are going
    to recreate them together and understand how they work.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们处理UI时，我们使用了为你准备好的控制器。现在我们知道我们的UI已经就绪，我们可以去掉这两个文件。我们将一起重新创建它们，并了解它们是如何工作的。
- en: 'Please select the `ExploreViewController.swift` and *cmd* + click on `RestaurantViewController.swift`.
    When you do this you should have both files selected:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请选择`ExploreViewController.swift`，然后*cmd* + 点击`RestaurantViewController.swift`。当你这样做时，你应该有两个文件被选中：
- en: '![](img/b4718415-aabb-4268-8017-8a1174295b01.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4718415-aabb-4268-8017-8a1174295b01.png)'
- en: 'Next, hit *Delete* on your keyboard. You should see the following screen:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按键盘上的*Delete*键。你应该看到以下屏幕：
- en: '![](img/43ef5fdc-a1ac-4c19-a066-db6a9e8b4616.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43ef5fdc-a1ac-4c19-a066-db6a9e8b4616.png)'
- en: Click on Move to Trash.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击移至废纸篓。
- en: If you select Remove References, it removes it from the project, but it is still
    in your project folder.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你选择移除引用，它会从项目中移除，但它仍然在你的项目文件夹中。
- en: 'Next, let''s create our first file:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建我们的第一个文件：
- en: Right-click inside of the `LetsEat` folder and select New File.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`LetsEat`文件夹，并选择新建文件。
- en: 'Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Cocoa Touch Class. Then, hit Next:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择iOS，然后选择Cocoa Touch Class。然后，点击下一步：
- en: '![](img/d3a22cf2-e06d-496b-a029-e385de7929d7.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3a22cf2-e06d-496b-a029-e385de7929d7.png)'
- en: 'You should see an options screen. Add the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到一个选项屏幕。添加以下内容：
- en: 'New file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `ExploreViewController`'
  id: totrans-78
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`ExploreViewController`
- en: 'Subclass: `UIViewController`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`UIViewController`
- en: 'Also create XIB: Unchecked'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还要创建XIB：未选中
- en: 'Language: `` `Swift` ``'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`` `Swift` ``
- en: After hitting Next, you are asked to create this file. Select Create and then
    your file should look like mine.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步后，你会被要求创建这个文件。选择创建，然后你的文件应该看起来像我的一样。
- en: Let's review this `ExploreViewController` class file and also do some maintenance
    inside of the file. We created this file to use with the `UIViewController` that
    we created when we initially set up our UI.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这个`ExploreViewController`类文件，并在文件内部做一些维护。我们创建这个文件是为了与我们在最初设置UI时创建的`UIViewController`一起使用。
- en: 'Note that there are three methods in this file—`viewDidLoad()`, `didReceiveMemoryWarning()`,
    and `prepare()` (which is commented out). Let''s delete both `didReceiveMemoryWarning()`
    and `prepare()`, as we do not need them at this time:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个文件中有三个方法——`viewDidLoad()`、`didReceiveMemoryWarning()`和`prepare()`（已被注释掉）。让我们删除`didReceiveMemoryWarning()`和`prepare()`，因为我们现在不需要它们：
- en: '![](img/8206db76-3e58-4eb7-b289-0c43c097fbc1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8206db76-3e58-4eb7-b289-0c43c097fbc1.png)'
- en: 'What remains is `viewDidLoad()`; this method is called only once during the
    life of the View Controller. Let''s see what this means by updating `viewDidLoad()`
    to the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是`viewDidLoad()`；这个方法在视图控制器的一生中只会被调用一次。让我们通过更新`viewDidLoad()`来了解这意味着什么：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, run the project by hitting the Play button (or using *cmd* + *R*). Although
    we expected to see the above `print` statement in our Debug panel, we got a crash:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过点击播放按钮（或使用 *cmd* + *R*）来运行项目。尽管我们期望在 Debug 面板中看到上面的 `print` 语句，但我们遇到了崩溃：
- en: '![](img/ec0ad23c-a124-45b4-9b70-3384abffab80.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec0ad23c-a124-45b4-9b70-3384abffab80.png)'
- en: This crash is telling us that it has a key `collectionView`, but it cannot find
    it. When we deleted our file, the storyboard still has a reference to it because
    it has no clue the file was deleted and recreated. To stop it from crashing, we
    need to either remove the reference or add the variable `collectionView` to our
    file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个崩溃告诉我们，它有一个名为 `collectionView` 的键，但是找不到它。当我们删除我们的文件时，storyboard 仍然有对这个文件的引用，因为它不知道文件已被删除并重新创建。为了防止它崩溃，我们需要移除这个引用或者在我们的文件中添加变量
    `collectionView`。
- en: For learning purposes, we are going to do both. Let’s remove the reference and
    later we will add and connect it back later. The reason we are doing this is because
    this is one of the most common errors beginners see. You connect something and
    remove it but never remove it from storyboard and so your app crashes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习目的，我们将做两件事。让我们先移除引用，稍后我们将添加并重新连接它。我们这样做的原因是因为这是初学者最常见的错误之一。你连接了某个东西，然后移除了它，但从未从
    storyboard 中移除，所以你的应用崩溃了。
- en: Open the `Explore.storyboard` file and, in the Utilities panel, select the Connections
    inspector.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Explore.storyboard` 文件，并在 Utilities 面板中选择 Connections 检查器。
- en: 'Next, select the Explore View Controller in the Outline view, and you will
    see the problem under Outlets:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 Outline 视图中选择 Explore 视图控制器，你将在 Outlets 下看到问题：
- en: '![](img/98aae0e6-b7d3-4401-a08e-8c94bc89e633.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98aae0e6-b7d3-4401-a08e-8c94bc89e633.png)'
- en: This exclamation is telling us that it cannot find this variable in our `ExploreViewController.swift`
    file. Just click the X and the variable is removed from the storyboard file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个感叹号告诉我们，它在我们 `ExploreViewController.swift` 文件中找不到这个变量。只需点击 X，变量就会从 storyboard
    文件中移除。
- en: 'If you rerun the project now, our app crashes again. The reason is that our
    app is looking for data for Collection View that we have not set up yet. Let’s
    update this so that we get rid of our crash:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在重新运行项目，我们的应用会再次崩溃。原因是我们的应用正在寻找我们尚未设置的数据集合视图。让我们更新这一点，以消除我们的崩溃：
- en: Open the `Explore.storyboard` file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Explore.storyboard` 文件。
- en: Then, with the Explore View Controller still selected in the Outline view, click
    the X for both data source and delegate in the Connections inspector of the Utilities
    panel.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 Outline 视图中仍然选中 Explore 视图控制器，在 Utilities 面板的 Connections 检查器中点击数据源和代理的
    X。
- en: '![](img/10ff28ef-8469-405e-8ef3-0e1a449a13a5.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/10ff28ef-8469-405e-8ef3-0e1a449a13a5.png)'
- en: Let's run the project again by hitting the Play button (or using *cmd* + *R*);
    you should now only see Hello Explore View Controller inside of the Debug panel.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次通过点击播放按钮（或使用 *cmd* + *R*）来运行项目；你现在应该在 Debug 面板中只看到 Hello Explore View Controller。
- en: Before we continue, we need to update our Restaurant View Controller as well.
    You are going to go into your `Restaurants.storyboard` file and, in the Outlets
    inspector, select the X for `collectionView`, `dataSource`, and `delegate` to
    get rid of the outlet we added earlier in the book.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们还需要更新我们的 Restaurant 视图控制器。你需要进入你的 `Restaurants.storyboard` 文件，并在 Outlets
    检查器中选择 `collectionView`、`dataSource` 和 `delegate` 的 X，以移除我们在书中之前添加的 outlet。
- en: '![](img/029b6ef6-47b4-4597-b914-761c8bdfe742.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/029b6ef6-47b4-4597-b914-761c8bdfe742.png)'
- en: Next, in the Identity inspector, delete `RestaurantViewController` inside of
    the custom class.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 Identity 检查器中，删除自定义类中的 `RestaurantViewController`。
- en: '![](img/bbc31f5c-94af-417c-b273-507382474ea4.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbc31f5c-94af-417c-b273-507382474ea4.png)'
- en: Since we deleted those files, we would have had more crashing. Now that we have
    our `ExploreViewController` hooked up with our `UIViewController` in the storyboard,
    let's start working with our `UICollectionView`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自从我们删除了那些文件，我们的程序崩溃情况会更多。现在，我们已经将我们的 `ExploreViewController` 与 storyboard 中的
    `UIViewController` 连接起来，让我们开始使用我们的 `UICollectionView`。
- en: Understanding Collection View controllers and Collection View cells
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Collection View 控制器和 Collection View 单元
- en: As noted earlier in the book, Collection View Controllers allow us to display
    our data in a grid. The individual items inside of Collection Views are called
    cells, and these cells are what show the data. This data can be anything from
    an image to text or both an image and text. You have complete control over what
    your Collection View cell can display. Our Collection View Controller is responsible
    for making sure the correct number of cells is displayed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如本书前面所述，集合视图控制器允许我们在网格中显示我们的数据。集合视图内的单个项目称为单元格，这些单元格显示数据。这些数据可以是图片、文本，或者图片和文本的组合。你可以完全控制你的集合视图单元格可以显示的内容。我们的集合视图控制器负责确保显示正确的单元格数量。
- en: 'Let''s now connect our file, `ExploreViewController`, with our `UICollectionView`
    in the storyboard. To do this, we use the Assistant editor (or split screen),
    which we access by doing the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们的文件`ExploreViewController`与故事板中的`UICollectionView`连接起来。为此，我们使用辅助编辑器（或分屏），我们可以通过以下操作访问它：
- en: Open `Explore.storyboard`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Explore.storyboard`。
- en: Close the Navigator panel using the hide Navigator toggle or *cmd* + *0*.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用隐藏导航器切换或*cmd* + *0*关闭导航器面板。
- en: Close the Utilities panel by hitting the Utilities toggle or use *cmd* + *Alt*
    + *0*.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按工具切换或使用*cmd* + *Alt* + *0*关闭工具面板。
- en: Next, select the Assistant editor or use *cmd* + *Alt* + *Enter*.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择辅助编辑器或使用*cmd* + *Alt* + *Enter*。
- en: 'You should now see `Explore.storyboard` on the left and `ExploreViewController.swift`
    on the right:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到左侧的`Explore.storyboard`和右侧的`ExploreViewController.swift`：
- en: '![](img/02d0ad4d-f05d-44cd-9032-b6b9a60b1a2e.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02d0ad4d-f05d-44cd-9032-b6b9a60b1a2e.png)'
- en: 'Add the following inside of your `ExploreViewController.swift` file on the
    line after the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`ExploreViewController.swift`文件中，在以下代码行之后添加以下内容：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`IBOutlet` is a way to a connect to UI element. We have a Collection View on
    our `UIViewController`; now, we are creating a variable that allows us to hook
    into it.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`IBOutlet`是一种连接到UI元素的方式。我们在`UIViewController`上有一个集合视图；现在，我们正在创建一个变量，允许我们连接到它。'
- en: 'After you create the variable, you should see a small circle to the left of
    the variable:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你创建变量后，你应该在变量的左侧看到一个小的圆圈：
- en: '![](img/60864770-995b-42d4-b841-24a19abd0e3b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60864770-995b-42d4-b841-24a19abd0e3b.png)'
- en: 'When you hover over it, you should see a plus button appear inside of the circle:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你悬停在它上面时，你应该在圆圈内部看到一个加号按钮：
- en: '![](img/69c3d93d-a4c8-4bd1-aeed-b7a05b74627a.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69c3d93d-a4c8-4bd1-aeed-b7a05b74627a.png)'
- en: 'Click on it and drag this to your Collection View inside of your `UIViewController`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它并将其拖动到你的`UIViewController`中的集合视图中：
- en: '![](img/6ee04d4b-b2a8-4353-9903-a9aaf3b0410d.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ee04d4b-b2a8-4353-9903-a9aaf3b0410d.png)'
- en: 'Once you release the mouse button, you should see the circle become filled:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你释放鼠标按钮，你应该看到圆圈被填充：
- en: '![](img/c664539c-3644-4cb3-acb8-4747e5c58dc8.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c664539c-3644-4cb3-acb8-4747e5c58dc8.png)'
- en: Now, select the Standard editor or use *cmd* + *Enter*.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择标准编辑器或使用*cmd* + *Enter*。
- en: 'In your scene, select your Collection View. Then, in your Utilities panel,
    select the Connections inspector, which is the last icon on the right. Under the
    Outlets section, we now add back dataSource and delegate, the same ones we removed
    earlier:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的场景中，选择你的集合视图。然后，在你的工具面板中，选择连接检查器，这是右侧的最后一个图标。在出口部分，我们现在重新添加回`dataSource`和代理，与之前移除的相同：
- en: '![](img/d47a5139-7c05-4d4a-8ff7-4275b61bbd90.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d47a5139-7c05-4d4a-8ff7-4275b61bbd90.png)'
- en: The `dataSource` property is what is used to supply the data for our Collection
    View, so we need to pass whatever data we have to this property. On the other
    hand, the `delegate` property, which supplies the behavior, does not require us
    to supply anything as it receives interactions that happen within our Collection
    View.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`dataSource`属性是用来为我们的集合视图提供数据的，因此我们需要将我们拥有的任何数据传递给这个属性。另一方面，提供行为的`delegate`属性不需要我们提供任何内容，因为它接收在集合视图内发生的事件。'
- en: 'We need to update our data source for our Collection View; let’s add this now:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新我们的集合视图的数据源；现在让我们添加这个：
- en: Click and drag the `dataSource` property to the Explore View Controller in your
    Outline view.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动`dataSource`属性到你的大纲视图中的探索视图控制器。
- en: '![](img/752edffa-c5f8-4eff-b0e9-820623bb11b6.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/752edffa-c5f8-4eff-b0e9-820623bb11b6.png)'
- en: 'Click and drag the delegate property to the Explore View Controller in your
    Outline view:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动代理属性到你的大纲视图中的探索视图控制器：
- en: '![](img/dac31f72-c2ca-42b5-83d4-92bac29e8e6e.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dac31f72-c2ca-42b5-83d4-92bac29e8e6e.png)'
- en: Getting data into Collection View
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据放入集合视图
- en: 'Having boxes is great, but having data with nice pictures is so much more appealing. 
    Let’s get some data displaying inside of our Collection View:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 有盒子是很好的，但是有带漂亮图片的数据要吸引人得多。让我们在集合视图中显示一些数据：
- en: Use *cmd* + *Shift* + *O*, which opens a small window called Open Quickly. Inside
    of the window, type `ExploreView` and hit *Enter* to select the `ExploreViewController.swift`
    file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*cmd* + *Shift* + *O*，这将打开一个名为“快速打开”的小窗口。在窗口内部，输入`ExploreView`并按*Enter*键以选择`ExploreViewController.swift`文件。
- en: 'Update our class definition from the `ExploreViewController:UIViewController`
    class to the following:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的类定义从`ExploreViewController:UIViewController`类更新为以下内容：
- en: '[PRE14]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Understanding the data source
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解数据源
- en: 'Whenever we use Collection View to get data, we must conform to a protocol.
    A protocol is a set of methods to which we have access and can either be required
    or optional. For Collection Views, we are required to implement three methods
    to get data into a Collection View. So, let''s add the following four functions
    (each beginning with `func`) after the closing curly brace of `viewDidLoad()`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们使用集合视图获取数据时，我们必须遵守一个协议。协议是一组我们可以访问的方法，可以是必需的或可选的。对于集合视图，我们必须实现三个方法来将数据放入集合视图中。所以，让我们在`viewDidLoad()`的闭合花括号之后添加以下四个函数（每个都以`func`开头）：
- en: '![](img/952ec5a6-2961-41b3-a2d2-2d30024f1495.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/952ec5a6-2961-41b3-a2d2-2d30024f1495.png)'
- en: 'Let''s break down the code to better understand what we are doing:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解代码以更好地理解我们在做什么：
- en: '**Part A**: This first method is what we need to add a header to our Collection
    View.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第A部分**：这是我们添加到集合视图中的标题所需的第一种方法。'
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Part B**: The identifier is what we added when we were designing in earlier
    chapters. This identifier helps Xcode know what view we are referring to:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第B部分**：标识符是我们之前在章节中设计时添加的。这个标识符帮助Xcode知道我们正在引用什么视图：'
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Part C**: Our next method gets called for every item we need. Therefore,
    in our case, it gets called 20 times:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第C部分**：我们的下一个方法会在我们需要每个项目时被调用。因此，在我们的情况下，它会被调用20次：'
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Part D**: Here, we are creating a cell every time `collectionView(_:numberOfItemsInSection:)`
    is called. The identifier, exploreCell, is the name we gave it in the storyboard;
    so, this is the cell that is grabbed and used inside of our Collection View:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第D部分**：在这里，每当调用`collectionView(_:numberOfItemsInSection:)`时，我们都会创建一个单元格。标识符`exploreCell`是我们给它在故事板中起的名字；因此，这就是我们在我们的集合视图中抓取并使用的单元格：'
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Part E**: This method tells our Collection View how many different sections
    we want to display:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第E部分**：此方法告诉我们的集合视图我们想要显示多少个不同的部分：'
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Part F**: Here, we are telling our Collection View that we only want one
    section:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第F部分**：在这里，我们正在告诉我们的集合视图我们只想显示一个部分：'
- en: '[PRE20]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Part G**: Our next method tells our Collection View how many different items
    we are going to display inside of the section we set up.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第G部分**：我们的下一个方法告诉我们的集合视图我们将在我们设置的部分中显示多少个不同的项目。'
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Part H**: We are telling our Collection View that we want to display 20 items.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第H部分**：我们正在告诉我们的集合视图我们想要显示20个项目。'
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Part I**: Finally, we add this line back as it was removed. We use this function
    to dismiss our location modal when you hit the Cancel button.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第I部分**：最后，我们将这一行恢复原样，因为它被移除了。我们使用这个函数在点击取消按钮时关闭位置模态。'
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Let's build and run the project by hitting the Play button (or using *cmd* +
    *R*). You will see that our app is back to where it was at the end of [Chapter
    11](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml), *Designing Static Tables*, but
    now we actually know what is going on the code side.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击播放按钮（或使用*cmd* + *R*）来构建和运行项目。你会看到我们的应用回到了[第11章](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml)的结尾，*设计静态表格*，但现在我们实际上知道代码方面发生了什么。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered quite a few new topics as well as a lot of code.
    As long as you have a basic understanding of what we covered in this chapter,
    you will be fine to continue. A lot of these concepts and ideas will be covered
    again, as these are common design patterns in iOS.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了相当多的新主题以及大量的代码。只要你对本章所涵盖的内容有基本的理解，你就可以继续前进。许多这些概念和想法将会再次被涉及，因为这些是iOS中的常见设计模式。
- en: We learned about the Model View Controller architecture. Then, we covered classes
    and structures, their similarities and differences. Finally, we looked at Controllers
    and classes and how they work. We then created our Controller for our storyboard
    file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了模型视图控制器架构。然后，我们介绍了类和结构体，它们的相似之处和不同之处。最后，我们探讨了控制器和类以及它们是如何工作的。然后我们为我们的故事板文件创建了控制器。
- en: In the next chapter, we will look at how to get local data into our app. We
    will also look at how to pass data from the Explore view to the restaurant list.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将本地数据导入我们的应用。我们还将了解如何将数据从探索视图传递到餐厅列表。
