- en: Getting Started with the Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am a visual person; I prefer to start with the visuals and make sure that
    the app looks like the design. Starting with the UI helps me to identify the data
    structure and allows me to get familiar with the app. Therefore, I can focus my
    attention on the code.
  prefs: []
  type: TYPE_NORMAL
- en: In earlier chapters, we set up our app structure and developed a good understanding
    of the basics involved. In this chapter, you will learn about app architecture
    and how to create it for our *Let's Eat* app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Model View Controller architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes and structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Model View Controller architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apple built iOS apps to use what is known as the **Model View Controller** (**MVC**),
    which is an architectural pattern that describes a way to structure the code in
    your app. In layman's terms, this just means breaking up our app into three distinct
    camps, Model, View, and Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a diagram of MVC to help you understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1559ec72-768b-4906-aba7-b4725a4fb207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s discuss each camp:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: The **Model** camp is responsible for an app''s data and business
    logic. The Model''s only job is to handle representations of data, data storage,
    and the operations performed on data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: The **View** camp is responsible for all the things that you see
    on the screen. The View handles presenting and formatting data that results from
    the user''s interactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: The **Controller** camp is the liaison or coordinator between
    the other two camps. The Controller handles a lot of setup and connections to
    the View. The Controller also interprets user interactions. Since the Controller
    is between both the View and the Model, the View and the Model should know nothing
    about each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, the Controller takes user interactions and either responds back
    to the View or passes it onto the Model. When the Model completes a task, it passes
    it back to the Controller, and then the Controller talks with the View.
  prefs: []
  type: TYPE_NORMAL
- en: Getting familiar with the setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For beginners, the MVC architecture can make you uncertain about where things
    should go. As we progress through the book, you will learn where to put things
    and why. So, you need not worry about where things should be placed as we work
    through this process together step by step.
  prefs: []
  type: TYPE_NORMAL
- en: As your project grows, the MVC architecture places a lot of the responsibility
    on the Controller. Therefore, in this book, we tweak the MVC pattern in order
    to not put so much pressure on the Controller.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue with our coding, we need to discuss classes and structures.
  prefs: []
  type: TYPE_NORMAL
- en: Classes and structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes and structures (also known as structs) are files that contain properties
    and methods. You use these properties and methods to add functionality. You have
    been working with structs since [Chapter 1](3fd2bd2c-00aa-4684-a09d-56f9cf67da6d.xhtml),
    *Getting Familiar with Xcode*. Strings, Ints, Bools, Arrays, Dictionaries, and
    Sets are all structs.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in the book, we created functions. As noted in [Chapter 6](75201e71-726f-4ab1-8d45-bb84774b10e6.xhtml),
    *Starting the UI Setup*, a method is a function that lives inside a class or struct.
  prefs: []
  type: TYPE_NORMAL
- en: Classes and structs are very similar; however, Swift handles each of them a
    bit differently. To get a better understanding of how classes and structs work,
    we create a new Playground project. Working in the Playground gives us the ability
    to learn how to create custom classes and structs and to gain an understanding
    of each of their positives and negatives.
  prefs: []
  type: TYPE_NORMAL
- en: You can keep your project open, but let's jump back into Playgrounds. Since
    we have Xcode open, go to File | New |Playground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the options screen that appears, name your new Playground, `FunctionsStructs`,
    and make sure that your Platform is set to iOS. Hit Next and then Create. Now,
    let's delete everything inside your new Playground and toggle on the Debug panel,
    using either the toggle button or *cmd* + *Shift* + *Y*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your empty Playground, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We just created our first class and struct and defined two new custom data types
    (known as **Swift types**), `Cat` and `Dog`. Since we have not yet given the class
    or struct a property (such as a name) or created an instance of either `Cat` or
    `Dog`, you see nothing in the Results or Debug panels.
  prefs: []
  type: TYPE_NORMAL
- en: When you create classes and structs, it is a best practice to start with a capital
    letter. In addition, you must have different names for your class and for your
    struct. Otherwise, you will get an error. Even though one is a class and the other
    is a struct, each of them needs a distinct name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to give our `Cat` class and our `Dog` struct names. Therefore,
    let''s give them both a property, called `name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you cannot set a property when it is created, then it is recommended that
    you set that property to an optional using the question mark (`?`). Using optionals,
    protect your code trying to access the name if you never set it. You can also
    set your variable as an optional unwrapped. For example, you can also do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With both `Cat` and `Dog` now having a property called `name`, let''s create
    an instance of each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/5a717362-7756-49d5-a357-36f9fa362c15.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, everything on the surface looks the same. We created both a `Cat` and
    a `Dog` and gave them each names. However, let's say `Whiskers` runs away and,
    a few weeks later, finds a home with a new family, who decide to change his name
    to `Smokey`. After `Whiskers` runs away, `Bruno` becomes lonely and decides to
    find him, but also gets lost. `Bruno` finds a new home as well, and this new family
    decides to name him, `Max`.
  prefs: []
  type: TYPE_NORMAL
- en: In Playgrounds, we create a new constant called `yellowStrayCat` and set it
    equal to `yellowCat`, since it is still `Whiskers`. However, we change the name
    of `yellowStrayCat` to `Smokey`. We also create a new constant called `yellowStrayDog`,
    setting it equal to `yellowDog` and naming it `Max`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our Results panel shows that the names of `yellowStrayCat` and `yellowStrayDog`,
    respectively, are now `Smokey` and `Max`. So, everything seems to be the same
    between our class and our struct, right? No, they are not the same. Let''s print
    the name of `yellowCat` underneath the line where we have print (`yellowStrayCat.name`).
    In addition, let''s do the same for the name of `yellowDog` underneath where we
    have print (`yellowStrayDog.name`). Your code should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In our Results panel, as shown in the preceding screenshot, you should notice
    an unexpected result. The `yellowCat`, `Whiskers`, now has the name `Smokey`,
    but the `yellowDog` is still `Bruno`. Without getting too technical, when you
    use a class and copy it as we did, it refers back to the original instance created.
    This is known as a reference type. However, when structs get copied, they create
    a new instance and the original is not affected. This is known as a **value type**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on, let''s look at one more difference between the two. In programming,
    we have what is called **inheritance**, which means that we can create another
    object with default values and other objects can inherit from those default values.
    Let''s create an `Animal` class that is the base class immediately below our `Cat`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s update our `Cat` class to inherit from it, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are only updating what goes directly after `Cat`. The rest of the
    class in the curly braces stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our class now inherits from `Animal`, we should have a new property called
    `age`. Underneath where we name `yellowCat` as `Whiskers` and above our `print`
    statement, enter the following after we set Whiskers name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2500eeba-7cd3-45c6-9b65-15ab5c7c9ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, as expected, we were able to give `Whiskers` an `age`. Let''s do the same
    for our `Dog` struct by adding `Animal` directly after `Dog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have entered the preceding code snippet, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cb19b8a-653c-44d6-8563-c15372214595.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A red error displays and informs you that `Non-class type ''Dog'' cannot inherit
    from class Animal`. Therefore, we need to create a struct called, `AnimalB`, since
    we cannot have the same name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Update your `Dog` struct from `Animal` to `AnimalB`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you should see an error called `Inheritance from non-protocol type ''AnimalB''`,
    which means that our struct cannot inherit from another struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c3bcdae-6b39-486c-9a53-5585fda72ab0.png)'
  prefs: []
  type: TYPE_IMG
- en: Inheritance is something that you can do with classes, but not with structs;
    this is another difference between classes and structs. There are a couple of
    other advanced technical differences but, for our purposes, the two described
    here are sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers and classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with `UIViewController`, `UICollectionViewController`, and `UITableViewController`,
    you need to create a class file for each of these elements. Each file handles
    all of the logic and interactions that the controller sends and receives. Along
    with interactions, the class file is responsible for receiving data. You should
    understand this more when we delve more deeply into creating each of these class
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with our UI, we used controllers that were done for you. Now that
    we know that our UI is in place, we can get rid of these two files. We are going
    to recreate them together and understand how they work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please select the `ExploreViewController.swift` and *cmd* + click on `RestaurantViewController.swift`.
    When you do this you should have both files selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4718415-aabb-4268-8017-8a1174295b01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, hit *Delete* on your keyboard. You should see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43ef5fdc-a1ac-4c19-a066-db6a9e8b4616.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Move to Trash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you select Remove References, it removes it from the project, but it is still
    in your project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s create our first file:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click inside of the `LetsEat` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside of the Choose a template for your new file screen, select iOS at the
    top and, then, Cocoa Touch Class. Then, hit Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3a22cf2-e06d-496b-a029-e385de7929d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should see an options screen. Add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ExploreViewController`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `UIViewController`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `` `Swift` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After hitting Next, you are asked to create this file. Select Create and then
    your file should look like mine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's review this `ExploreViewController` class file and also do some maintenance
    inside of the file. We created this file to use with the `UIViewController` that
    we created when we initially set up our UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that there are three methods in this file—`viewDidLoad()`, `didReceiveMemoryWarning()`,
    and `prepare()` (which is commented out). Let''s delete both `didReceiveMemoryWarning()`
    and `prepare()`, as we do not need them at this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8206db76-3e58-4eb7-b289-0c43c097fbc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What remains is `viewDidLoad()`; this method is called only once during the
    life of the View Controller. Let''s see what this means by updating `viewDidLoad()`
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the project by hitting the Play button (or using *cmd* + *R*). Although
    we expected to see the above `print` statement in our Debug panel, we got a crash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec0ad23c-a124-45b4-9b70-3384abffab80.png)'
  prefs: []
  type: TYPE_IMG
- en: This crash is telling us that it has a key `collectionView`, but it cannot find
    it. When we deleted our file, the storyboard still has a reference to it because
    it has no clue the file was deleted and recreated. To stop it from crashing, we
    need to either remove the reference or add the variable `collectionView` to our
    file.
  prefs: []
  type: TYPE_NORMAL
- en: For learning purposes, we are going to do both. Let’s remove the reference and
    later we will add and connect it back later. The reason we are doing this is because
    this is one of the most common errors beginners see. You connect something and
    remove it but never remove it from storyboard and so your app crashes.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Explore.storyboard` file and, in the Utilities panel, select the Connections
    inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the Explore View Controller in the Outline view, and you will
    see the problem under Outlets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98aae0e6-b7d3-4401-a08e-8c94bc89e633.png)'
  prefs: []
  type: TYPE_IMG
- en: This exclamation is telling us that it cannot find this variable in our `ExploreViewController.swift`
    file. Just click the X and the variable is removed from the storyboard file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you rerun the project now, our app crashes again. The reason is that our
    app is looking for data for Collection View that we have not set up yet. Let’s
    update this so that we get rid of our crash:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Explore.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, with the Explore View Controller still selected in the Outline view, click
    the X for both data source and delegate in the Connections inspector of the Utilities
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10ff28ef-8469-405e-8ef3-0e1a449a13a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's run the project again by hitting the Play button (or using *cmd* + *R*);
    you should now only see Hello Explore View Controller inside of the Debug panel.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue, we need to update our Restaurant View Controller as well.
    You are going to go into your `Restaurants.storyboard` file and, in the Outlets
    inspector, select the X for `collectionView`, `dataSource`, and `delegate` to
    get rid of the outlet we added earlier in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/029b6ef6-47b4-4597-b914-761c8bdfe742.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, in the Identity inspector, delete `RestaurantViewController` inside of
    the custom class.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbc31f5c-94af-417c-b273-507382474ea4.png)'
  prefs: []
  type: TYPE_IMG
- en: Since we deleted those files, we would have had more crashing. Now that we have
    our `ExploreViewController` hooked up with our `UIViewController` in the storyboard,
    let's start working with our `UICollectionView`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Collection View controllers and Collection View cells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted earlier in the book, Collection View Controllers allow us to display
    our data in a grid. The individual items inside of Collection Views are called
    cells, and these cells are what show the data. This data can be anything from
    an image to text or both an image and text. You have complete control over what
    your Collection View cell can display. Our Collection View Controller is responsible
    for making sure the correct number of cells is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now connect our file, `ExploreViewController`, with our `UICollectionView`
    in the storyboard. To do this, we use the Assistant editor (or split screen),
    which we access by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Explore.storyboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the Navigator panel using the hide Navigator toggle or *cmd* + *0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the Utilities panel by hitting the Utilities toggle or use *cmd* + *Alt*
    + *0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the Assistant editor or use *cmd* + *Alt* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see `Explore.storyboard` on the left and `ExploreViewController.swift`
    on the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02d0ad4d-f05d-44cd-9032-b6b9a60b1a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following inside of your `ExploreViewController.swift` file on the
    line after the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`IBOutlet` is a way to a connect to UI element. We have a Collection View on
    our `UIViewController`; now, we are creating a variable that allows us to hook
    into it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you create the variable, you should see a small circle to the left of
    the variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60864770-995b-42d4-b841-24a19abd0e3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you hover over it, you should see a plus button appear inside of the circle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69c3d93d-a4c8-4bd1-aeed-b7a05b74627a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on it and drag this to your Collection View inside of your `UIViewController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ee04d4b-b2a8-4353-9903-a9aaf3b0410d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you release the mouse button, you should see the circle become filled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c664539c-3644-4cb3-acb8-4747e5c58dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the Standard editor or use *cmd* + *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your scene, select your Collection View. Then, in your Utilities panel,
    select the Connections inspector, which is the last icon on the right. Under the
    Outlets section, we now add back dataSource and delegate, the same ones we removed
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d47a5139-7c05-4d4a-8ff7-4275b61bbd90.png)'
  prefs: []
  type: TYPE_IMG
- en: The `dataSource` property is what is used to supply the data for our Collection
    View, so we need to pass whatever data we have to this property. On the other
    hand, the `delegate` property, which supplies the behavior, does not require us
    to supply anything as it receives interactions that happen within our Collection
    View.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to update our data source for our Collection View; let’s add this now:'
  prefs: []
  type: TYPE_NORMAL
- en: Click and drag the `dataSource` property to the Explore View Controller in your
    Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/752edffa-c5f8-4eff-b0e9-820623bb11b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click and drag the delegate property to the Explore View Controller in your
    Outline view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dac31f72-c2ca-42b5-83d4-92bac29e8e6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting data into Collection View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having boxes is great, but having data with nice pictures is so much more appealing. 
    Let’s get some data displaying inside of our Collection View:'
  prefs: []
  type: TYPE_NORMAL
- en: Use *cmd* + *Shift* + *O*, which opens a small window called Open Quickly. Inside
    of the window, type `ExploreView` and hit *Enter* to select the `ExploreViewController.swift`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update our class definition from the `ExploreViewController:UIViewController`
    class to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever we use Collection View to get data, we must conform to a protocol.
    A protocol is a set of methods to which we have access and can either be required
    or optional. For Collection Views, we are required to implement three methods
    to get data into a Collection View. So, let''s add the following four functions
    (each beginning with `func`) after the closing curly brace of `viewDidLoad()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/952ec5a6-2961-41b3-a2d2-2d30024f1495.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s break down the code to better understand what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part A**: This first method is what we need to add a header to our Collection
    View.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Part B**: The identifier is what we added when we were designing in earlier
    chapters. This identifier helps Xcode know what view we are referring to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Part C**: Our next method gets called for every item we need. Therefore,
    in our case, it gets called 20 times:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Part D**: Here, we are creating a cell every time `collectionView(_:numberOfItemsInSection:)`
    is called. The identifier, exploreCell, is the name we gave it in the storyboard;
    so, this is the cell that is grabbed and used inside of our Collection View:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Part E**: This method tells our Collection View how many different sections
    we want to display:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Part F**: Here, we are telling our Collection View that we only want one
    section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Part G**: Our next method tells our Collection View how many different items
    we are going to display inside of the section we set up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Part H**: We are telling our Collection View that we want to display 20 items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Part I**: Finally, we add this line back as it was removed. We use this function
    to dismiss our location modal when you hit the Cancel button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Let's build and run the project by hitting the Play button (or using *cmd* +
    *R*). You will see that our app is back to where it was at the end of [Chapter
    11](08517443-a8a5-49e8-9b03-9d29359beac5.xhtml), *Designing Static Tables*, but
    now we actually know what is going on the code side.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered quite a few new topics as well as a lot of code.
    As long as you have a basic understanding of what we covered in this chapter,
    you will be fine to continue. A lot of these concepts and ideas will be covered
    again, as these are common design patterns in iOS.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the Model View Controller architecture. Then, we covered classes
    and structures, their similarities and differences. Finally, we looked at Controllers
    and classes and how they work. We then created our Controller for our storyboard
    file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to get local data into our app. We
    will also look at how to pass data from the Explore view to the restaurant list.
  prefs: []
  type: TYPE_NORMAL
