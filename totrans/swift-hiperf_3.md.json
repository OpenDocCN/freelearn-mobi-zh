["```swift\n$ xcrun swift\n\n```", "```swift\nlet a = 10\nlet b = a + \"c\"\nlet b = a + 10\n\n```", "```swift\n    //: Markup text\n\n    ```", "```swift\n    /*:\n     Markup text\n    /*\n\n    ```", "```swift\n//: # Array\n//: Arrays is an ordered collection. [Read more here](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html)\n//: Arrays operations:\n//: * Sort\n//: * Map\n//: * Etc.\n\n```", "```swift\nlet circle = UIImage(named: \"circle.png\")\n```", "```swift\nif let path = NSBundle.mainBundle().pathForResource(\"circle\", ofType: \"png\") {\n  let cicrcle2 = UIImage(contentsOfFile: path)\n}\n```", "```swift\nFirst and last pages links\n//: [First Page](@first)\n//: [Last Page](@last) \n\nNext and previous pages links\n//: [Next](@next)\n//: [Previous](@previous) \n\nPage specific links. Use the same page name as a link. The space must be changed to \"%20\" \n//: [Type Safe](Type%20Safe)\n//: [Optionals](Optionals)\n```", "```swift\nfor i in 0...100 {\n  let r = arc4random_uniform(100)\n  XCPCaptureValue(\"random\", value: r)\n}\n```", "```swift\nlet frame = CGRect(x: 10, y: 10, width: 100, height: 100)\nlet view = UIView(frame: frame)\nview.backgroundColor = .redColor()\n\nXCPShowView(\"View\", view: view)\n```", "```swift\npublic func skipNegatives(a: [Int]) -> [Int] {\n  return a.filter { $0 >= 0 }\n}\n\nfunc REPLTutorial() {\n  let numbers = [2, -3, 1]\n  let result = skipNegatives(numbers) \n}\n```", "```swift\nfunc REPLTutorial() {\n\n  let manyNumbers = makeNumbers()\n  let bigResult = skipNegatives(manyNumbers)\n}\n\npublic func makeNumbers() -> [Int] {\n  var array = [Int]()\n  for _ in 0..<1000 {\n    let rand = Int(arc4random_uniform(10)) - 5\n    array.append(rand)\n  }\n  return array\n}\n```", "```swift\n(lldb) repl\n1> func isAllPositive(ar: [Int]) -> Bool { \n2\\.   let negatives = ar.filter { $0 < 0 }\n3\\.   return negatives.count == 0\n4\\. }\n5> \n6> isAllPositive( skipNegatives([1, 2, -4, 7, 9, -1, 5, 12, -12, 24]))\n$R0: Bool = true\n7> isAllPositive([1, 2, -4])\n$R1: Bool = false\n8>\n\n```", "```swift\nstruct Person {\n  let name: String\n  let age: Int\n\nextension Person: CustomStringConvertible, CustomDebugStringConvertible {\n\n  // CustomStringConvertible\n  var description: String {\n    return \"Name: \\(name)\"\n  }\n\n  // CustomDebugStringConvertible\n  var debugDescription: String {\n    return \"Name: \\(name) age: \\(age)\"\n  }\n}\n```", "```swift\nlet startTime = CACurrentMediaTime()\n// Perform code that we need to measure.\nlet endTime = CACurrentMediaTime()\nprint(\"Time - \\(endTime - startTime)\")\n```", "```swift\nfunc measure(call: () -> Void) {\n  let startTime = CACurrentMediaTime()\n  call()\n  let endTime = CACurrentMediaTime()\n\n  print(\"Time - \\(endTime - startTime)\")\n}\n```", "```swift\nfor i in 0...1000 {\n  let person = Person(name: \"Sam\", age: i)\n}\n```", "```swift\nmeasure {\n  for i in 1...1000 {\n    let person = Person(name: \"Sam\", age: i)\n  }\n}\n```", "```swift\nTime 0.000434298478008714.\n\n```", "```swift\n    func testCreatingPerson\n    func testChangingName\n\n    ```", "```swift\n@testable import Swift_Toolkit\n\nfunc testCreatingPeoplePerformance() {\n  measureBlock() {\n    for i in 1...1000 {\n      _ = Person(name: \"Sam\", age: i)\n    }\n  }\n}\n```", "```swift\ninit(name: String, age:Int) {\n  self.name = name\n  self.age = age\n  usleep(100)\n}\n```"]