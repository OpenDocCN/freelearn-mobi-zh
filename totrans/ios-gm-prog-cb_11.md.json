["```swift\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n\n    // Configure the view.\n    SKView * skView = (SKView *)self.view;\n//    skView.showsFPS = YES;\n//    skView.showsNodeCount = YES;\n\n    /* Sprite Kit applies additional optimizations to improve rendering performance */\n    skView.ignoresSiblingOrder = YES;\n\n    // Create and configure the scene.\n    GameScene *scene = [GameScene unarchiveFromFile:@\"GameScene\"];\n    scene.scaleMode = SKSceneScaleModeAspectFill;\n\n    // Present the scene.\n    [skView presentScene:scene];\n}\n```", "```swift\n    @interface GameScene() <MCSessionDelegate>\n\n    @property (nonatomic, strong) MCSession* gameSession;\n    @property (nonatomic, strong) MCPeerID* gamePeerID;\n    @property (nonatomic, strong) NSString* serviceType;\n    @property (nonatomic, strong) MCAdvertiserAssistant* advertiser;\n\n    @property (nonatomic, strong) SKLabelNode* gameInfoLabel;\n\n    @end\n    ```", "```swift\n    #pragma mark - Adding Assets Methods\n\n    - (void)addGameInfoLabelWithText:(NSString*)labelText\n    {\n        if (self.gameInfoLabel == nil) {\n            self.gameInfoLabel = [SKLabelNode labelNodeWithFontNamed:@\"Chalkduster\"];\n            self.gameInfoLabel.text = labelText;\n            self.gameInfoLabel.fontSize = 32;\n            self.gameInfoLabel.position = CGPointMake(CGRectGetMidX(self.frame),\n                                                      CGRectGetMidY(self.frame));\n            self.gameInfoLabel.zPosition = 100;\n\n            [self addChild:self.gameInfoLabel];\n        }\n    }\n    ```", "```swift\n    #define kConnectingDevicesText @\"Tap to Connect\"\n    #define kGameStartedText       @\"Game Started\"\n    #define kConnectedDevicesText @\"Devices Connected\"\n    ```", "```swift\n    #pragma mark - Overridden Methods\n\n    -(void)didMoveToView:(SKView *)view {\n        /* Setup your scene here */\n        [self addGameInfoLabelWithText:kConnectingDevicesText];\n    }\n    ```", "```swift\n    typedef enum {\n\n        kGameStatePlayerToConnect,\n        kGameStatePlayerAllotment,\n        kGameStatePlaying,\n        kGameStateComplete,\n\n    } GameState;\n    ```", "```swift\n    @property (nonatomic, assign) GameState gameState;\n    ```", "```swift\n    self.gameState = kGameStatePlayerToConnect;\n    ```", "```swift\n    #pragma mark - Networking Related Methods\n\n    - (void)instantiateMCSession\n    {\n      if (self.gameSession == nil)\n      {\n        UIDevice *device = [UIDevice currentDevice];\n        MCPeerID* peerID = [[MCPeerID alloc] initWithDisplayName:device.name];\n        self.gameSession = [[MCSession alloc] initWithPeer:peerID];\n        self.gameSession.delegate = self;\n          self.serviceType = @\"TankFight\"; // should be unique\n        self.advertiser = [[MCAdvertiserAssistant alloc] initWithServiceType:self.serviceTypediscoveryInfo:nil session:self.gameSession];\n            [self.advertiser start];\n        }\n    }\n    ```", "```swift\n    pragma marks. Using pragma marks we can make our code much more readable and also provide logical grouping to our methods. It is a good programming practice to follow.\n    ```", "```swift\n    #pragma mark - MCSessionDelegate Methods\n\n    - (void)session:(MCSession *)session peer:(MCPeerID *)peerID\n     didChangeState:(MCSessionState)state {\n    // A peer has changed state - it's now either connecting, connected, or disconnected.\n        if (state == MCSessionStateConnected)\n        {\n          NSLog(@\"state == MCSessionStateConnected\");\n        }\n        else if (state == MCSessionStateConnecting)\n        {\n            NSLog(@\"state == MCSessionStateConnecting\");\n        }\n        else if (state == MCSessionStateNotConnected)\n        {\n            NSLog(@\"state == MCSessionStateNotConnected\");\n        }\n    }\n\n    - (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID {\n        // Data has been received from a peer.\n        // Do something with the received data, on the main thread\n        [[NSOperationQueue mainQueue]  addOperationWithBlock:^{\n\n            // Process the data\n        }];\n    }\n\n    - (void)session:(MCSession *)session didStartReceivingResourceWithName:(NSString *)resourceName fromPeer:(MCPeerID *)peerID withProgress:(NSProgress *)progress {\n        // A file started being sent from a peer. (Not used in this example.)\n    }\n    - (void)session:(MCSession *)session didFinishReceivingResourceWithName:(NSString*)resourceName fromPeer:(MCPeerID *)peerID atURL:(NSURL *)localURL withError:(NSError *)error {\n        // A file finished being sent from a peer. (Not used in this example.)\n    }\n\n    - (void)session:(MCSession *)session didReceiveStream:(NSInputStream *)stream\n     withName:(NSString *)streamName fromPeer:(MCPeerID *)peerID {\n        // Data started being streamed from a peer. (Not used in this example.)\n    }\n    ```", "```swift\n    #pragma mark - Touch Methods\n    -(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event {\n        /* Called when a touch begins */\n\n        if (self.gameState == kGameStatePlayerToConnect)\n        {\n            [self instantiateMCSession];\n        }\n        else if (self.gameState == kGameStatePlaying)\n        {\n        }\n    }\n    ```", "```swift\n    @protocol GameSceneDelegate <NSObject>\n\n    - (void)showMCBrowserControllerForSession:(MCSession*)sessionserviceType:(NSString*)serviceType;\n    @end\n\n    @property (nonatomic, weak) id<GameSceneDelegate> gameSceneDelegate;\n    ```", "```swift\n    if (self.gameSceneDelegate && [self.gameSceneDelegate respondsToSelector:@selector(showMCBrowserControllerForSession:serviceType:)])\n      {\n        [self.gameSceneDelegate showMCBrowserControllerForSession:self.gameSession serviceType:self.serviceType];\n      }\n    ```", "```swift\n    @interface GameViewController() <MCBrowserViewControllerDelegate,\n           GameSceneDelegate>\n    @property (nonatomic, strong) GameScene* gameScene;\n    @end\n    ```", "```swift\n       // Create and configure the scene.\n        self.gameScene = [GameScene unarchiveFromFile:@\"GameScene\"];\n        self.gameScene.scaleMode = SKSceneScaleModeAspectFill;\n\n        self.gameScene.gameSceneDelegate = self;\n\n        // Present the scene.\n        [skView presentScene:self.gameScene];\n    ```", "```swift\n    - (void)showMCBrowserControllerForSession:(MCSession*)session\n    serviceType:(NSString*)serviceType\n    {\n        MCBrowserViewController* viewController = [[MCBrowserViewController alloc]\n        initWithServiceType:serviceType session:session];\n\n        viewController.minimumNumberOfPeers = 2;\n        viewController.maximumNumberOfPeers = 2;\n\n        viewController.delegate = self;\n\n        [self presentViewController:viewController animated:YES completion:nil];\n    }\n    ```", "```swift\n        #pragma mark - Public Methods\n\n        - (void)startGame;\n        - (void)discardSession;\n        ```", "```swift\n        - (void)startGame\n        {\n            self.gameInfoLabel.text = kConnectedDevicesText;\n        }\n\n        - (void)discardSession\n        {\n            self.gameState = kGameStatePlayerToConnect;\n\n            self.gameSession = nil;\n            self.gamePeerID = nil;\n            self.serviceType = nil;\n            self.advertiser = nil;\n        }\n        ```", "```swift\n    #pragma mark - MCBrowserViewControllerDelegate Methods\n\n    - (void)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController {\n        // The MCSession is now ready to use.\n        [self dismissViewControllerAnimated:YES completion:nil];\n        if (self.gameScene)\n        {\n            [self.gameScene startGame];\n        }\n    }\n\n    - (void)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController{\n        // The user cancelled.\n        [self dismissViewControllerAnimated:YES completion:nil];\n        if (self.gameScene)\n        {\n            [self.gameScene discardSession];\n        }\n    }\n    ```", "```swift\n        typedef enum {\n            KNetworkPacketCodePlayerAllotment,\n            // More to be added while creating the game\n        } NetworkPacketCode;\n        ```", "```swift\n        // Blue is the First and Red is the Second Player\n        #define kFirstPlayerLabelText  @\"You're First Player\"\n        #define kSecondPlayerLabelText @\"You're Second Player\"\n        ```", "```swift\n        #define kMaxTankPacketSize 1024\n        int gameUniqueIdForPlayerAllocation;\n        @property (nonatomic, assign) int gamePacketNumber;\n        ```", "```swift\n    - (void)sendNetworkPacketToPeerId:(MCPeerID*)peerId\n       forPacketCode:(NetworkPacketCode)packetCode\n          withData:(void *)data\n             ofLength:(NSInteger)length\n                reliable:(BOOL)reliable\n    {\n        // the packet we'll send is resued\n        static unsigned char networkPacket[kMaxTankPacketSize];\n        const unsigned int packetHeaderSize = 2 * sizeof(int);\n    // we have two \"ints\" for our header\n        if(length < (kMaxTankPacketSize - packetHeaderSize))\n        {\n    // our networkPacket buffer size minus the size of the header info\n          int *pIntData = (int *)&networkPacket[0];\n          // header info\n          pIntData[0] = self.gamePacketNumber++;\n          pIntData[1] = packetCode;\n\n          if (data)â€©      {\n            // copy data in after the header\n              memcpy( &networkPacket[packetHeaderSize], data, length );\n            }\n\n            NSData *packet = [NSData dataWithBytes: networkPacket length: (length+8)];\n                 NSError* error;\n            if(reliable == YES)\n            {\n                [self.gameSession sendData:packet toPeers:[NSArray arrayWithObject:peerId] withMode:MCSessionSendDataReliableerror:&error];\n            }\n            else\n            {\n                [self.gameSession sendData:packet toPeers:[NSArray arrayWithObject:peerId]withMode:MCSessionSendDataUnreliableerror:&error];\n            }\n            if (error)\n            {\n                NSLog(@\"Error:%@\",[error description]);\n            }\n        }\n    }\n    ```", "```swift\n    gameUniqueIdForPlayerAllocation = arc4random();\n    ```", "```swift\n    - (void)session:(MCSession *)session didReceiveData:(NSData *)data fromPeer:(MCPeerID *)peerID {\n        // Data has been received from a peer.\n        // Do something with the received data, on the main thread\n        [[NSOperationQueue mainQueue]  addOperationWithBlock:^{\n        // Process the data\n          unsigned char *incomingPacket = (unsigned char *)[data bytes];\n          int *pIntData = (int *)&incomingPacket[0];\n          NetworkPacketCode packetCode = (NetworkPacketCode)pIntData[1];\n\n          switch( packetCode ) {\n           case KNetworkPacketCodePlayerAllotment:\n           {\n            NSInteger gameUniqueId = pIntData[2];                \n            if (gameUniqueIdForPlayerAllocation > gameUniqueId)\n             {\n                self.gameInfoLabel.text = kFirstPlayerLabelText;\n             }\n            else\n               {\n                  self.gameInfoLabel.text = kSecondPlayerLabelText;\n                    }\n                    break;\n                }\n                default:\n                break;\n            }\n        }];\n    }\n    ```", "```swift\n    self.gameInfoLabel.text = kConnectedDevicesText;\n    ```", "```swift\n    - (void)session:(MCSession *)session peer:(MCPeerID *)peerID didChangeState:(MCSessionState)state {\n       // A peer has changed state - it's now either connecting, connected, or disconnected.\n\n        if (state == MCSessionStateConnected)\n        {\n            NSLog(@\"state == MCSessionStateConnected\");\n\n            // Remember the current peer\n            self.gamePeerID = peerID;\n            // Make sure we have a reference to the game session and it is set up\n            self.gameSession = session;\n            self.gameSession.delegate = self;\n            self.gameState = kGameStatePlayerAllotment;\n\n            self.gameInfoLabel.text = kGameStartedText;\n\n            [self sendNetworkPacketToPeerId:self.gamePeerID\n              forPacketCode:KNetworkPacketCodePlayerAllotment\n                withData:&gameUniqueIdForPlayerAllocation\n                   ofLength:sizeof(int)\n                      reliable:YES];\n        }\n        else if (state == MCSessionStateConnecting)\n        {\n            NSLog(@\"state == MCSessionStateConnecting\");\n        }\n        else if (state == MCSessionStateNotConnected)\n        {\n            NSLog(@\"state == MCSessionStateNotConnected\");\n        }\n    }\n    ```"]