- en: '24'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with SwiftUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, you created the **user interface** (**UI**) for the *JRNL*
    app using storyboards. The process involved dragging objects representing views
    to a storyboard, creating outlets in view controller files, and connecting the
    two together.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on **SwiftUI**, an easy and innovative way to create
    apps across all Apple platforms. Instead of specifying the user interface using
    storyboards, SwiftUI uses a declarative Swift syntax and works with new Xcode
    design tools to keep your code and design in sync. Features such as Dynamic Type,
    dark mode, localization, and accessibility are automatically supported.
  prefs: []
  type: TYPE_NORMAL
- en: Even though this book focuses on UIKit, a working knowledge of SwiftUI is beneficial
    as some iOS features, such as widgets, can only be implemented using SwiftUI.
    It also appears that SwiftUI is the way ahead for app development for all Apple
    platforms, but at present it does not have feature parity with UIKit.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will build a simplified version of the *JRNL* app using
    SwiftUI. This app will contain just the Journal List and Journal Entry Detail
    screens. Since writing apps with SwiftUI is very different from what you have
    already done, you will not be modifying the *JRNL* project you have been working
    on thus far. You will create a new SwiftUI Xcode project instead.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start by adding and configuring SwiftUI views to create the Journal List
    screen. Next, you’ll add model objects to your app, and configure the navigation
    between the Journal List and Journal Entry Detail screens. After that, you’ll
    learn how to use MapKit to build a map view for the Journal Entry Detail screen.
    Finally, you’ll create the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to build a SwiftUI app that
    reads model objects, presents them in a list, and allows navigation to a second
    screen containing a map view. You will then be able to implement this functionality
    in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SwiftUI Xcode project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Journal List screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding model objects and configuring navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MapKit for SwiftUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Journal Entry Detail screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will create a new SwiftUI Xcode project for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter24` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/VIbBcmHmf8k](https://youtu.be/VIbBcmHmf8k%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating a new SwiftUI Xcode project for your SwiftUI app in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SwiftUI Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A SwiftUI Xcode project is created in the same way as a regular Xcode project,
    but you configure it to use SwiftUI instead of storyboards to create the user
    interface. As you will see, the user interface is generated entirely in code,
    and you’ll be able to see changes in the user interface immediately as you modify
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: You can watch a video of Apple’s SwiftUI presentation during WWDC20 at [https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119).
  prefs: []
  type: TYPE_NORMAL
- en: You can watch a video showing what’s new in SwiftUI during WWDC24 at [https://developer.apple.com/videos/play/wwdc2024/10144/](https://developer.apple.com/videos/play/wwdc2024/10144/).
  prefs: []
  type: TYPE_NORMAL
- en: Apple’s official SwiftUI documentation can be found online at [https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by creating a new SwiftUI Xcode project. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode and create a new Xcode project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **iOS**. Select the **App** template, and then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Choose options for your new project:** screen appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.1: Project options screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure this screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product Name:** `JRNLSwiftUI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface:** `SwiftUI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other settings should already be set. Click **Next** when done.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a location to save the `JRNLSwiftUI` project and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your project appears on the screen, with the `ContentView` file selected in
    the Project navigator. You’ll see the content of this file on the left side of
    the Editor area, and a canvas containing a preview on the right side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.2: Xcode showing JRNLSwiftUI project'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see a **Preview paused** box in the canvas, click the circular arrow
    to display the preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3: Preview paused box with circular arrow'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ContentView` file contains code that declares and defines the initial
    view for your app. If you need more room to work, click the Navigator button to
    hide the Navigator, and drag the border in the Editor area to resize the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.4: Xcode interface showing Navigator button and border in the Editor
    area'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created your first SwiftUI Xcode project! Great! Now you’ll
    see how changing the code in the Editor area will update the preview on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the `ContentView` file. This file contains a `ContentView` structure
    and a `#Preview` macro. The `ContentView` structure describes the view’s content
    and layout and conforms to the `View` protocol. The `#Preview` macro generates
    source code that declares a preview for the `ContentView` structure, which is
    displayed on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: To view the code generated by a macro, right-click the macro and choose **Expand
    Macro** from the pop-up menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in action, change the `Hello, World!` text to `JRNL` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preview in the canvas updates to reflect your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_24_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.5: Canvas showing app preview with updated text view'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll create the Journal List screen, starting with a
    view that will display the data of a particular journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Journal List screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using storyboards, you modify attributes of a view using the Attributes
    inspector. In SwiftUI, you can modify either your code or the preview in the canvas.
    As you have seen, changing the code in the `ContentView` file will immediately
    update the preview, and modifying the preview will update the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s customize the `ContentView` structure to display the data of a particular
    restaurant. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Library button. Type `tex` in the filter field, then drag a **Text**
    view to the Editor area and drop it under the text view containing the “JRNL”
    string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.6: Library with Text object to be dragged'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode has automatically added code to the `ContentView` file for this text
    view. Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, a second text view has been added after the text view containing
    the `"JRNL"` string, and both text views and an image view are enclosed in a `VStack`
    view. A `VStack` view contains subviews that are arranged vertically, and it is
    like a vertically oriented stack view in a storyboard. Note that the image view
    has a `systemName` property. This property can be set to one of the images in
    Apple’s **SF Symbols** library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the SF Symbols library here: [https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/).'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `VStack` view and choose **Embed in HStack** from the pop-up
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.7: Pop-up menu showing Embed in HStack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that your code looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the `VStack` view is now enclosed in an `HStack` view. An `HStack`
    view contains subviews that are arranged horizontally, and it is like a horizontally
    oriented stack view in a storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the code as shown here to display a sample journal entry and to reposition
    the image view to the left of the two text views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the changes are reflected in the preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.8: App preview showing sample journal entry'
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the appearance of user interface elements, you use **modifiers**
    instead of the Attributes inspector. These are methods that change how your objects
    look or behave. Note that the image view already has modifiers. Update your code
    as shown here to set the style and color of your text views and set the size for
    the image view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the changes are reflected in the preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.9: App preview showing sample journal entry'
  prefs: []
  type: TYPE_NORMAL
- en: Your view is now complete. You will use this view as a cell on the Journal List
    screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding model objects and configuring navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You now have a view that can be used to represent a journal entry on the Journal
    List screen. You’ll use this view as a cell in a SwiftUI list, which is a container
    that presents data in a single column. You’ll also configure model objects to
    populate this list. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `HStack` view and choose **Embed in VStack** from the pop-up
    menu. This keeps all the views together when you embed them in a list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the outer `VStack` view and choose **Embed in List** to display
    a list containing five cells in the canvas. Remove the padding modifiers as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that your code now looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see in the canvas, the view you created in the previous section is
    now enclosed in a list configured to display five items. Note that no delegates
    and data sources are required to display data in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `resources` folder contained in the `Chapter24` folder of the code
    bundle you downloaded from [https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition).
    Drag the `JournalEntry` file to the Project navigator and click **Finish** when
    prompted to add it to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `JournalEntry` file in the Project navigator and you should see the
    following code inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `JournalItem` file contains a structure, `JournalItem`, and an array, `testData`.
  prefs: []
  type: TYPE_NORMAL
- en: The `JournalItem` structure is like the `JournalItem` class that you used in
    your `JRNL` project. To use this structure in a list, you must make it conform
    to the `Identifiable` protocol. This protocol specifies that a list item must
    have an `id` property that can identify a particular item. A `UUID` instance is
    assigned to each `JournalEntry` instance upon creation to ensure the value stored
    in each `id` property is unique.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this structure also conforms to the `Hashable` protocol. This will
    be used later to determine the data to be displayed when you tap on a cell.
  prefs: []
  type: TYPE_NORMAL
- en: '`testData` is an array containing three `JournalItem` instances, which you
    will use to populate the Journal List screen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the Identifiable protocol at this link: [https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the Hashable protocol at this link: [https://developer.apple.com/documentation/swift/hashable](https://developer.apple.com/documentation/swift/hashable).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ContentView` file in the Project navigator. Add a `journalEntries`
    property to your view and assign the `testData` array to it, after the opening
    curly brace of the `ContentView` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify your code as shown here to display a journal entry’s photo, date, and
    title in each view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s see how this code works.
  prefs: []
  type: TYPE_NORMAL
- en: The `ContentView` structure stores an array of `JournalEntry` instances in the
    `journalEntries` property. This array is passed to the list. For every item in
    the `journalEntries` array, a view is created and assigned with data from the
    item’s properties.
  prefs: []
  type: TYPE_NORMAL
- en: The image for each journal entry is converted from a `UIImage` instance stored
    in `journalEntry.photo`, and a default value is provided if the `photo` property
    is `nil`. The date is converted into a text string using the `formatted()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are three items in the array, three `VStack` views appear in the
    canvas.
  prefs: []
  type: TYPE_NORMAL
- en: When you make major changes to your code, the automatic updating of the canvas
    is paused. Click the circular arrow in the **Preview paused** box to resume if
    required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you’ll implement navigation so that when a cell is tapped, a second screen
    is presented that will show details of a particular journal entry. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `List` view, choose **Embed...** from the pop-up menu, and replace
    the placeholder text with `NavigationStack`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that your code now looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the navigation stack works like an instance of the `UINavigationController`
    class, which you’ve used before in your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `navigationTitle()` modifier at the location shown here to set the list
    view’s `title` property to display `Journal List` at the top of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Embed the cell in a navigation link view as shown here and add a `.navigationDestination(for:destination:)`
    modifier after the `.navigationTitle()` modifier to display the title of the journal
    entry in a new screen when the `VStack` view is tapped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that the list in the canvas has automatically displayed disclosure arrows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.10: App preview showing disclosure arrows'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this working as it should in an app, make sure the Live Preview button
    in the canvas is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_24_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.11: Canvas showing Live Preview button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on any cell in the preview to display text containing the title of the
    tapped journal entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_24_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.12: App preview showing the title of a tapped journal entry'
  prefs: []
  type: TYPE_NORMAL
- en: This is a great way of ensuring your list works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The view code is starting to look cluttered, so you’ll extract the `VStack`
    view into its own separate view. Right-click the `NavigationLink` view and choose
    **Extract Subview** from the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that all the view code for the `VStack` view has been moved into a separate
    view named `ExtractedView`. Your code will now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `ExtractedView` view and choose **Refactor** | **Rename** from
    the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the name of the extracted view to `JournalCell` and click **Rename**
    when done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.13: ExtractedView renamed to JournalCell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that your code now looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don’t worry about the error; you’ll fix it in the next two steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a property to the `JournalCell` view to hold a `JournalEntry` instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add code to the `ContentView` structure to pass the `JournalEntry` instance
    to the `JournalCell` view as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that the preview still works the way it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, you’ve completed the implementation of the Journal List screen. Cool!
    In the next section, you’ll see how you can use **MapKit for SwiftUI** to create
    a map view that you’ll use in the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using MapKit for SwiftUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During WWDC23, Apple introduced expanded MapKit support for SwiftUI, which makes
    it easier than ever to integrate Maps into your app. Using SwiftUI, you can easily
    add annotations and overlays to a map, control the camera, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'To watch Apple’s Meet MapKit for SwiftUI video from WWDC23, refer to this link:
    [https://developer.apple.com/videos/play/wwdc2023/10043/](https://developer.apple.com/videos/play/wwdc2023/10043/).'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have created the Journal List screen, and tapping each cell
    on this screen displays the journal entry’s title on a second screen. You’ll modify
    your app to display a Journal Entry Detail screen when a cell on the Journal List
    screen is tapped, but before that, you’ll create a SwiftUI view that displays
    a map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **File** | **New** | **File from Template...** to open the template selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file `MapView` and click **Create**. The `MapView` file will appear
    in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MapView` file, import `MapKit` and replace the `Text` view with a `Map`
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that a map is displayed in the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.14: Canvas displaying a map'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `journalEntry` property of type `JournalEntry` to the `MapView` structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `#Preview` macro as shown to assign a journal entry from the `testData`
    array to the `journalEntry` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Marker` instance to the `Map` view as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The values for the `title` and `coordinate` properties of the `Marker` instance
    are obtained from the `journalEntry` instance’s `entryTitle`, `latitude`, and
    `longitude` properties, and the Marker instance’s `coordinate` property will determine
    the center point of the map region to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The map is currently zoomed all the way in. To set the zoom level, add the
    following code to the **Map** view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the map is currently displaying a map of Apple Park:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.15: Canvas displaying a map of Apple Park'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve created a SwiftUI map view that shows a journal entry location. Now,
    let’s see how to make the complete Journal Entry Detail screen in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the Journal Entry Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You now have a SwiftUI map view displaying a map. Now, you’ll create a new
    SwiftUI view to represent the Journal Entry Detail screen and add the map view
    to it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **File** | **New** | **File from Template...** to open the template selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new file `JournalEntryDetail` and click **Create**. The `JournalEntryDetail`
    file appears in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare and define the `JournalEntryDetail` structure in this file as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `JournalEntryDetail` structure contains a `selectedJournalEntry` property
    of the type `JournalEntry` and a `ScrollView` view enclosing a `Vstack` view.
    The `VStack` view contains `Text` views that display the selected journal entry’s
    date, title, and body, an `Image` view that displays the selected journal entry’s
    photo, and a `MapView` view that displays a map showing the selected journal entry’s
    location, provided that the selected journal entry’s `longitude` and `latitude`
    properties are not `nil`.
  prefs: []
  type: TYPE_NORMAL
- en: To create the preview in the canvas, the first `JournalEntry` instance in the
    `testData` array is assigned to the `selectedJournalEntry` property. Note that
    the `JournalEntryDetail` instance is enclosed in a `NavigationView` instance to
    make the navigation bar appear in the preview.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the canvas now displays a scrollable Journal Entry Detail screen
    with a rendered map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.16: App preview showing Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve completed the implementation of the Journal Entry Detail screen
    using SwiftUI, you’ll modify the list on the Journal List screen so that the Journal
    Entry Detail screen will be displayed when a cell is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `ContentView` file in the project navigator and modify the `navigationDestination(for:destination:)`
    modifier to use the `JournalEntryDetail` structure as the destination when a cell
    is tapped:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Live Preview button in the canvas should already be selected. Tap a cell
    on the Journal List screen. You’ll see the Journal Entry Detail screen for that
    restaurant appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.17: App preview showing Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app to test it in Simulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_24_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.18: Simulator showing Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: You have completed building a simple version of the *JRNL* app using SwiftUI!
    Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this brief introduction to SwiftUI, you’ve seen how to build a simplified
    version of the *JRNL* app using SwiftUI.
  prefs: []
  type: TYPE_NORMAL
- en: You started by adding and configuring SwiftUI views to create the Journal List
    screen. You then added the model objects to your app and configured the navigation
    between the Journal List and Journal Entry Detail screens. After that, you used
    MapKit to build a map view for the Journal Entry Detail screen. Finally, you created
    the Journal Entry Detail screen and added to it the map view you created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use SwiftUI to create an app that reads model objects, presents
    them in a list, and enables navigation to a second screen containing a map view.
    You are now able to implement this in your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to learn more about SwiftUI, you can refer to Apple’s Develop in
    Swift tutorials here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/tutorials/develop-in-swift](https://developer.apple.com/tutorials/develop-in-swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Packt Publishing also has a book on SwiftUI. You can find out more here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731](https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about **Swift Testing**, which lets you
    test your Swift code with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
