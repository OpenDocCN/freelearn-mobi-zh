- en: '24'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '24'
- en: Getting Started with SwiftUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SwiftUI 入门
- en: In previous chapters, you created the **user interface** (**UI**) for the *JRNL*
    app using storyboards. The process involved dragging objects representing views
    to a storyboard, creating outlets in view controller files, and connecting the
    two together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你使用故事板创建了 *JRNL* 应用的 **用户界面**（**UI**）。这个过程涉及将代表视图的对象拖动到故事板中，在视图控制器文件中创建输出，并将两者连接起来。
- en: This chapter will focus on **SwiftUI**, an easy and innovative way to create
    apps across all Apple platforms. Instead of specifying the user interface using
    storyboards, SwiftUI uses a declarative Swift syntax and works with new Xcode
    design tools to keep your code and design in sync. Features such as Dynamic Type,
    dark mode, localization, and accessibility are automatically supported.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍 **SwiftUI**，这是一种简单且创新的方法，可以在所有 Apple 平台上创建应用。SwiftUI 使用声明式 Swift 语法来指定用户界面，并与新的
    Xcode 设计工具协同工作，以保持代码和设计的同步。动态类型、暗黑模式、本地化和无障碍功能都自动支持。
- en: Even though this book focuses on UIKit, a working knowledge of SwiftUI is beneficial
    as some iOS features, such as widgets, can only be implemented using SwiftUI.
    It also appears that SwiftUI is the way ahead for app development for all Apple
    platforms, but at present it does not have feature parity with UIKit.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书侧重于 UIKit，但了解 SwiftUI 对你来说是有益的，因为一些 iOS 功能，如小部件，只能使用 SwiftUI 实现。此外，SwiftUI
    似乎将成为所有 Apple 平台应用开发的未来之路，但到目前为止，它还没有与 UIKit 具有相同的功能性。
- en: In this chapter, you will build a simplified version of the *JRNL* app using
    SwiftUI. This app will contain just the Journal List and Journal Entry Detail
    screens. Since writing apps with SwiftUI is very different from what you have
    already done, you will not be modifying the *JRNL* project you have been working
    on thus far. You will create a new SwiftUI Xcode project instead.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用 SwiftUI 构建一个简化版的 *JRNL* 应用。此应用将仅包含期刊列表和期刊条目详情屏幕。由于使用 SwiftUI 编写应用与您之前所做的方式非常不同，你将不会修改迄今为止一直在工作的
    *JRNL* 项目。相反，你将创建一个新的 SwiftUI Xcode 项目。
- en: You’ll start by adding and configuring SwiftUI views to create the Journal List
    screen. Next, you’ll add model objects to your app, and configure the navigation
    between the Journal List and Journal Entry Detail screens. After that, you’ll
    learn how to use MapKit to build a map view for the Journal Entry Detail screen.
    Finally, you’ll create the Journal Entry Detail screen.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你将首先添加并配置 SwiftUI 视图以创建期刊列表屏幕。接下来，你将在你的应用中添加模型对象，并配置期刊列表和期刊条目详情屏幕之间的导航。之后，你将学习如何使用
    MapKit 为期刊条目详情屏幕构建地图视图。最后，你将创建期刊条目详情屏幕。
- en: By the end of this chapter, you’ll have learned how to build a SwiftUI app that
    reads model objects, presents them in a list, and allows navigation to a second
    screen containing a map view. You will then be able to implement this functionality
    in your own projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何构建一个 SwiftUI 应用，该应用可以读取模型对象，以列表形式展示它们，并允许导航到包含地图视图的第二屏幕。然后你可以在自己的项目中实现此功能。
- en: 'The following topics will be covered:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Creating a SwiftUI Xcode project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 SwiftUI Xcode 项目
- en: Creating the Journal List screen
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建期刊列表屏幕
- en: Adding model objects and configuring navigation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加模型对象和配置导航
- en: Using MapKit for SwiftUI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SwiftUI 中使用 MapKit
- en: Creating the Journal Entry Detail screen
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建期刊条目详情屏幕
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will create a new SwiftUI Xcode project for this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为本章创建一个新的 SwiftUI Xcode 项目。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter24` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的 Xcode 项目位于本书代码包的 `Chapter24` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际运行情况：
- en: '[https://youtu.be/VIbBcmHmf8k](https://youtu.be/VIbBcmHmf8k%0D)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/VIbBcmHmf8k](https://youtu.be/VIbBcmHmf8k%0D)'
- en: Let’s start by creating a new SwiftUI Xcode project for your SwiftUI app in
    the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下一节开始创建一个新的 SwiftUI Xcode 项目，用于你的 SwiftUI 应用。
- en: Creating a SwiftUI Xcode project
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 SwiftUI Xcode 项目
- en: A SwiftUI Xcode project is created in the same way as a regular Xcode project,
    but you configure it to use SwiftUI instead of storyboards to create the user
    interface. As you will see, the user interface is generated entirely in code,
    and you’ll be able to see changes in the user interface immediately as you modify
    your code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个SwiftUI Xcode项目的方式与创建一个常规Xcode项目的方式相同，但您需要配置它以使用SwiftUI而不是故事板来创建用户界面。正如您将看到的，用户界面完全由代码生成，您在修改代码时将能够立即看到用户界面的变化。
- en: You can watch a video of Apple’s SwiftUI presentation during WWDC20 at [https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在WWDC20期间观看苹果SwiftUI演示的视频，网址为[https://developer.apple.com/videos/play/wwdc2020/10119](https://developer.apple.com/videos/play/wwdc2020/10119)。
- en: You can watch a video showing what’s new in SwiftUI during WWDC24 at [https://developer.apple.com/videos/play/wwdc2024/10144/](https://developer.apple.com/videos/play/wwdc2024/10144/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在WWDC24期间观看SwiftUI新功能的视频，网址为[https://developer.apple.com/videos/play/wwdc2024/10144/](https://developer.apple.com/videos/play/wwdc2024/10144/)。
- en: Apple’s official SwiftUI documentation can be found online at [https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在网上找到苹果官方的SwiftUI文档，网址为[https://developer.apple.com/xcode/swiftui/](https://developer.apple.com/xcode/swiftui/)。
- en: 'Let’s begin by creating a new SwiftUI Xcode project. Follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个新的SwiftUI Xcode项目。按照以下步骤操作：
- en: Launch Xcode and create a new Xcode project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Xcode并创建一个新的Xcode项目。
- en: Click **iOS**. Select the **App** template, and then click **Next**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**iOS**。选择**App**模板，然后点击**下一步**。
- en: 'The **Choose options for your new project:** screen appears:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择您新项目选项**屏幕出现：'
- en: '![](img/B31371_24_01.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_01.png)'
- en: 'Figure 24.1: Project options screen'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.1：项目选项屏幕
- en: 'Configure this screen as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式配置此屏幕：
- en: '**Product Name:** `JRNLSwiftUI`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**：`JRNLSwiftUI`'
- en: '**Interface:** `SwiftUI`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**界面**：`SwiftUI`'
- en: The other settings should already be set. Click **Next** when done.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其他设置应该已经设置好了。完成后点击**下一步**。
- en: Choose a location to save the `JRNLSwiftUI` project and click **Create**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择保存`JRNLSwiftUI`项目的位置，然后点击**创建**。
- en: 'Your project appears on the screen, with the `ContentView` file selected in
    the Project navigator. You’ll see the content of this file on the left side of
    the Editor area, and a canvas containing a preview on the right side:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的项目将显示在屏幕上，`ContentView`文件在项目导航器中被选中。您将在编辑器区域的左侧看到此文件的内容，以及包含预览的画布在右侧：
- en: '![](img/B31371_24_02.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_02.png)'
- en: 'Figure 24.2: Xcode showing JRNLSwiftUI project'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.2：Xcode显示JRNLSwiftUI项目
- en: 'If you see a **Preview paused** box in the canvas, click the circular arrow
    to display the preview:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在画布上看到一个**预览暂停**框，请点击圆形箭头以显示预览：
- en: '![](img/B31371_24_03.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_03.png)'
- en: 'Figure 24.3: Preview paused box with circular arrow'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3：带有圆形箭头的预览暂停框
- en: 'The `ContentView` file contains code that declares and defines the initial
    view for your app. If you need more room to work, click the Navigator button to
    hide the Navigator, and drag the border in the Editor area to resize the canvas:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ContentView`文件包含声明和定义应用初始视图的代码。如果您需要更多的工作空间，点击导航器按钮隐藏导航器，并将编辑器区域中的边框拖动以调整画布大小：'
- en: '![](img/B31371_24_04.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_04.png)'
- en: 'Figure 24.4: Xcode interface showing Navigator button and border in the Editor
    area'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.4：Xcode界面显示导航器按钮和编辑器区域中的边框
- en: You have successfully created your first SwiftUI Xcode project! Great! Now you’ll
    see how changing the code in the Editor area will update the preview on the canvas.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功创建您的第一个SwiftUI Xcode项目！太棒了！现在您将看到如何更改编辑器区域中的代码将更新画布上的预览。
- en: Let’s look at the `ContentView` file. This file contains a `ContentView` structure
    and a `#Preview` macro. The `ContentView` structure describes the view’s content
    and layout and conforms to the `View` protocol. The `#Preview` macro generates
    source code that declares a preview for the `ContentView` structure, which is
    displayed on the canvas.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`ContentView`文件。这个文件包含一个`ContentView`结构和`#Preview`宏。`ContentView`结构描述了视图的内容和布局，并遵循`View`协议。`#Preview`宏生成声明`ContentView`结构预览的源代码，该预览在画布上显示。
- en: To view the code generated by a macro, right-click the macro and choose **Expand
    Macro** from the pop-up menu.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看宏生成的代码，右键单击宏，并在弹出菜单中选择**展开宏**。
- en: 'To see this in action, change the `Hello, World!` text to `JRNL` as shown:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看实际操作，将`Hello, World!`文本更改为如图所示的`JRNL`：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preview in the canvas updates to reflect your changes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 画布中的预览将更新以反映您的更改：
- en: '![](img/B31371_24_05.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_05.png)'
- en: 'Figure 24.5: Canvas showing app preview with updated text view'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.5：显示带有更新后的文本视图的应用预览的画布
- en: In the next section, you’ll create the Journal List screen, starting with a
    view that will display the data of a particular journal entry.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将创建期刊列表屏幕，从显示特定期刊条目数据的视图开始。
- en: Creating the Journal List screen
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建期刊列表屏幕
- en: When using storyboards, you modify attributes of a view using the Attributes
    inspector. In SwiftUI, you can modify either your code or the preview in the canvas.
    As you have seen, changing the code in the `ContentView` file will immediately
    update the preview, and modifying the preview will update the code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用故事板时，您使用属性检查器修改视图的属性。在SwiftUI中，您可以修改代码或画布中的预览。如您所见，更改`ContentView`文件中的代码将立即更新预览，而修改预览将更新代码。
- en: 'Let’s customize the `ContentView` structure to display the data of a particular
    restaurant. Follow these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们自定义`ContentView`结构以显示特定餐厅的数据。按照以下步骤操作：
- en: 'Click the Library button. Type `tex` in the filter field, then drag a **Text**
    view to the Editor area and drop it under the text view containing the “JRNL”
    string:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击图书馆按钮。在过滤器字段中输入`tex`，然后将**文本**视图拖到编辑区域，并将其放置在包含“JRNL”字符串的文本视图下方：
- en: '![](img/B31371_24_06.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_06.png)'
- en: 'Figure 24.6: Library with Text object to be dragged'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.6：带有可拖动文本对象的图书馆
- en: 'Xcode has automatically added code to the `ContentView` file for this text
    view. Verify that your code looks like this:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xcode已自动将代码添加到`ContentView`文件中，用于此文本视图。请确认您的代码看起来像这样：
- en: '[PRE1]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, a second text view has been added after the text view containing
    the `"JRNL"` string, and both text views and an image view are enclosed in a `VStack`
    view. A `VStack` view contains subviews that are arranged vertically, and it is
    like a vertically oriented stack view in a storyboard. Note that the image view
    has a `systemName` property. This property can be set to one of the images in
    Apple’s **SF Symbols** library.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在包含“JRNL”字符串的文本视图之后添加了一个第二个文本视图，并且两个文本视图和一个图像视图都被包含在一个`VStack`视图中。`VStack`视图包含垂直排列的子视图，它类似于故事板中的垂直堆叠视图。请注意，图像视图有一个`systemName`属性。此属性可以设置为苹果公司**SF
    Symbols**库中的其中一个图像。
- en: 'You can learn more about the SF Symbols library here: [https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处了解更多关于SF Symbols库的信息：[https://developer.apple.com/sf-symbols/](https://developer.apple.com/sf-symbols/)。
- en: Right-click on the `VStack` view and choose **Embed in HStack** from the pop-up
    menu.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`VStack`视图，从弹出菜单中选择**嵌入到HStack**。
- en: '![](img/B31371_24_07.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_07.png)'
- en: 'Figure 24.7: Pop-up menu showing Embed in HStack'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.7：弹出菜单显示嵌入到HStack中
- en: 'Verify that your code looks like this:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请确认您的代码看起来像这样：
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the `VStack` view is now enclosed in an `HStack` view. An `HStack`
    view contains subviews that are arranged horizontally, and it is like a horizontally
    oriented stack view in a storyboard.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`VStack`视图现在被包含在一个`HStack`视图中。`HStack`视图包含水平排列的子视图，它类似于故事板中的水平堆叠视图。
- en: 'Modify the code as shown here to display a sample journal entry and to reposition
    the image view to the left of the two text views:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改如下代码以显示示例期刊条目并重新定位图像视图到两个文本视图的左侧：
- en: '[PRE3]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Verify that the changes are reflected in the preview:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证更改是否反映在预览中：
- en: '![](img/B31371_24_08.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_08.png)'
- en: 'Figure 24.8: App preview showing sample journal entry'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.8：显示更新后的文本视图的应用预览
- en: 'To change the appearance of user interface elements, you use **modifiers**
    instead of the Attributes inspector. These are methods that change how your objects
    look or behave. Note that the image view already has modifiers. Update your code
    as shown here to set the style and color of your text views and set the size for
    the image view:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改用户界面元素的外观，您使用**修饰符**而不是属性检查器。这些是改变对象外观或行为的方法。请注意，图像视图已经具有修饰符。按照如下所示更新您的代码以设置文本视图的样式和颜色，并设置图像视图的大小：
- en: '[PRE4]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Verify that the changes are reflected in the preview:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证更改是否反映在预览中：
- en: '![](img/B31371_24_09.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_09.png)'
- en: 'Figure 24.9: App preview showing sample journal entry'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.9：显示示例期刊条目的应用预览
- en: Your view is now complete. You will use this view as a cell on the Journal List
    screen in the next section.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您的视图现在已完成。您将在下一节中将此视图用作期刊列表屏幕上的单元格。
- en: Adding model objects and configuring navigation
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模型对象和配置导航
- en: 'You now have a view that can be used to represent a journal entry on the Journal
    List screen. You’ll use this view as a cell in a SwiftUI list, which is a container
    that presents data in a single column. You’ll also configure model objects to
    populate this list. Follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您有一个可以用来在期刊列表屏幕上表示期刊条目的视图。您将使用此视图作为SwiftUI列表中的一个单元格，这是一个以单列形式展示数据的容器。您还将配置模型对象以填充此列表。按照以下步骤操作：
- en: Right-click on the `HStack` view and choose **Embed in VStack** from the pop-up
    menu. This keeps all the views together when you embed them in a list.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`HStack`视图，从弹出菜单中选择**嵌入到VStack中**。这样，当您将视图嵌入到列表中时，所有视图都会保持在一起。
- en: Right-click on the outer `VStack` view and choose **Embed in List** to display
    a list containing five cells in the canvas. Remove the padding modifiers as well.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击外部的`VStack`视图，并选择**嵌入到列表中**以在画布中显示包含五个单元格的列表。同时移除填充修饰符。
- en: 'Verify that your code now looks like this:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的代码现在看起来像这样：
- en: '[PRE5]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see in the canvas, the view you created in the previous section is
    now enclosed in a list configured to display five items. Note that no delegates
    and data sources are required to display data in the list.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在画布中所见，您在上一节中创建的视图现在被配置为显示五个项目的列表所包围。请注意，在列表中显示数据不需要任何代表者和数据源。
- en: Open the `resources` folder contained in the `Chapter24` folder of the code
    bundle you downloaded from [https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition).
    Drag the `JournalEntry` file to the Project navigator and click **Finish** when
    prompted to add it to your project.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您从[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition)下载的代码包中的`Chapter24`文件夹内的`resources`文件夹。将`JournalEntry`文件拖到项目导航器中，并在提示时点击**完成**将其添加到您的项目中。
- en: 'Click the `JournalEntry` file in the Project navigator and you should see the
    following code inside it:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`JournalEntry`文件，您应该在其中看到以下代码：
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `JournalItem` file contains a structure, `JournalItem`, and an array, `testData`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`JournalItem`文件包含一个结构`JournalItem`和一个数组`testData`。'
- en: The `JournalItem` structure is like the `JournalItem` class that you used in
    your `JRNL` project. To use this structure in a list, you must make it conform
    to the `Identifiable` protocol. This protocol specifies that a list item must
    have an `id` property that can identify a particular item. A `UUID` instance is
    assigned to each `JournalEntry` instance upon creation to ensure the value stored
    in each `id` property is unique.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`JournalItem`结构类似于您在`JRNL`项目中使用的`JournalItem`类。要在列表中使用此结构，您必须使其符合`Identifiable`协议。此协议指定列表项必须有一个可以识别特定项的`id`属性。在创建每个`JournalEntry`实例时，都会分配一个`UUID`实例，以确保每个`id`属性中存储的值是唯一的。'
- en: Note that this structure also conforms to the `Hashable` protocol. This will
    be used later to determine the data to be displayed when you tap on a cell.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此结构也符合`Hashable`协议。这将在您点击单元格时用于确定要显示的数据。
- en: '`testData` is an array containing three `JournalItem` instances, which you
    will use to populate the Journal List screen.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`testData`是一个包含三个`JournalItem`实例的数组，您将使用它来填充期刊列表屏幕。'
- en: 'You can learn more about the Identifiable protocol at this link: [https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多关于`Identifiable`协议的信息：[https://developer.apple.com/documentation/swift/identifiable](https://developer.apple.com/documentation/swift/identifiable)。
- en: 'You can learn more about the Hashable protocol at this link: [https://developer.apple.com/documentation/swift/hashable](https://developer.apple.com/documentation/swift/hashable).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多关于`Hashable`协议的信息：[https://developer.apple.com/documentation/swift/hashable](https://developer.apple.com/documentation/swift/hashable)。
- en: 'Click the `ContentView` file in the Project navigator. Add a `journalEntries`
    property to your view and assign the `testData` array to it, after the opening
    curly brace of the `ContentView` structure:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ContentView`文件。在`ContentView`结构的开括号之后添加一个`journalEntries`属性，并将其分配给`testData`数组：
- en: '[PRE7]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Modify your code as shown here to display a journal entry’s photo, date, and
    title in each view:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下所示修改您的代码，以在每个视图中显示期刊条目的照片、日期和标题：
- en: '[PRE8]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s see how this code works.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这段代码是如何工作的。
- en: The `ContentView` structure stores an array of `JournalEntry` instances in the
    `journalEntries` property. This array is passed to the list. For every item in
    the `journalEntries` array, a view is created and assigned with data from the
    item’s properties.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentView`结构在`journalEntries`属性中存储了一个`JournalEntry`实例数组。这个数组被传递到列表中。对于`journalEntries`数组中的每个项目，都会创建一个视图并将其分配给项目的属性数据。'
- en: The image for each journal entry is converted from a `UIImage` instance stored
    in `journalEntry.photo`, and a default value is provided if the `photo` property
    is `nil`. The date is converted into a text string using the `formatted()` method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每个日记条目的图像都是从存储在`journalEntry.photo`中的`UIImage`实例转换而来，如果`photo`属性为`nil`，则提供默认值。日期使用`formatted()`方法转换为文本字符串。
- en: Since there are three items in the array, three `VStack` views appear in the
    canvas.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数组中有三个项目，画布中会出现三个`VStack`视图。
- en: When you make major changes to your code, the automatic updating of the canvas
    is paused. Click the circular arrow in the **Preview paused** box to resume if
    required.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对代码进行重大更改时，画布的自动更新会暂停。如果需要继续，请点击**预览暂停**框中的圆形箭头。
- en: 'Next, you’ll implement navigation so that when a cell is tapped, a second screen
    is presented that will show details of a particular journal entry. Follow these
    steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将实现导航，以便当单元格被点击时，将显示一个第二屏幕，该屏幕将显示特定日记条目的详细信息。按照以下步骤操作：
- en: Right-click the `List` view, choose **Embed...** from the pop-up menu, and replace
    the placeholder text with `NavigationStack`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`List`视图，从弹出菜单中选择**嵌入...**，并用`NavigationStack`替换占位文本。
- en: 'Verify that your code now looks like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的代码现在看起来像这样：
- en: '[PRE9]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, the navigation stack works like an instance of the `UINavigationController`
    class, which you’ve used before in your app.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，导航堆栈工作类似于之前在您的应用中使用的`UINavigationController`类实例。
- en: 'Add a `navigationTitle()` modifier at the location shown here to set the list
    view’s `title` property to display `Journal List` at the top of the screen:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此处所示的位置添加一个`navigationTitle()`修饰符，将列表视图的`title`属性设置为在屏幕顶部显示`Journal List`：
- en: '[PRE10]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Embed the cell in a navigation link view as shown here and add a `.navigationDestination(for:destination:)`
    modifier after the `.navigationTitle()` modifier to display the title of the journal
    entry in a new screen when the `VStack` view is tapped:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如此嵌入单元格到导航链接视图中，并在`.navigationTitle()`修饰符之后添加`.navigationDestination(for:destination:)`修饰符，以便在点击`VStack`视图时在新屏幕中显示日记条目的标题：
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that the list in the canvas has automatically displayed disclosure arrows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，画布中的列表已自动显示展开箭头：
- en: '![](img/B31371_24_10.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_24_10.png)'
- en: 'Figure 24.10: App preview showing disclosure arrows'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.10：显示展开箭头的应用预览
- en: 'To see this working as it should in an app, make sure the Live Preview button
    in the canvas is selected:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保在应用中按预期工作，请确保画布中的实时预览按钮被选中：
- en: '![](img/B31371_24_11.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_24_11.png)'
- en: 'Figure 24.11: Canvas showing Live Preview button'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.11：显示实时预览按钮的画布
- en: 'Click on any cell in the preview to display text containing the title of the
    tapped journal entry:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 点击预览中的任何单元格，将显示包含被点击日记条目标题的文本：
- en: '![](img/B31371_24_12.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_24_12.png)'
- en: 'Figure 24.12: App preview showing the title of a tapped journal entry'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.12：显示被点击日记条目标题的应用预览
- en: This is a great way of ensuring your list works as expected.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种确保您的列表按预期工作的好方法。
- en: The view code is starting to look cluttered, so you’ll extract the `VStack`
    view into its own separate view. Right-click the `NavigationLink` view and choose
    **Extract Subview** from the pop-up menu.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图代码开始显得杂乱，因此您将`VStack`视图提取到其自己的单独视图中。右键点击`NavigationLink`视图，从弹出菜单中选择**提取子视图**。
- en: 'Verify that all the view code for the `VStack` view has been moved into a separate
    view named `ExtractedView`. Your code will now look like this:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认所有`VStack`视图的视图代码都已移动到名为`ExtractedView`的单独视图中。您的代码现在将看起来像这样：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Right-click the `ExtractedView` view and choose **Refactor** | **Rename** from
    the pop-up menu.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`ExtractedView`视图，从弹出菜单中选择**重构** | **重命名**。
- en: Change the name of the extracted view to `JournalCell` and click **Rename**
    when done.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提取视图的名称更改为`JournalCell`，完成后点击**重命名**。
- en: '![](img/B31371_24_13.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B31371_24_13.png)'
- en: 'Figure 24.13: ExtractedView renamed to JournalCell'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.13：从ExtractedView重命名为JournalCell
- en: 'Verify that your code now looks like this:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的代码现在看起来像这样：
- en: '[PRE13]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Don’t worry about the error; you’ll fix it in the next two steps.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心错误；您将在接下来的两个步骤中修复它。
- en: 'Add a property to the `JournalCell` view to hold a `JournalEntry` instance:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `JournalCell` 视图添加一个属性以保存 `JournalEntry` 实例：
- en: '[PRE14]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add code to the `ContentView` structure to pass the `JournalEntry` instance
    to the `JournalCell` view as shown:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在 `ContentView` 结构中添加代码，将 `JournalEntry` 实例传递到 `JournalCell` 视图中：
- en: '[PRE15]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Verify that the preview still works the way it did before.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证预览是否仍然按预期工作。
- en: With that, you’ve completed the implementation of the Journal List screen. Cool!
    In the next section, you’ll see how you can use **MapKit for SwiftUI** to create
    a map view that you’ll use in the Journal Entry Detail screen.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经完成了 Journal List 屏幕的实现。酷！在下一节中，你将了解如何使用 **MapKit for SwiftUI** 创建一个将在
    Journal Entry Detail 屏幕中使用的地图视图。
- en: Using MapKit for SwiftUI
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MapKit for SwiftUI
- en: During WWDC23, Apple introduced expanded MapKit support for SwiftUI, which makes
    it easier than ever to integrate Maps into your app. Using SwiftUI, you can easily
    add annotations and overlays to a map, control the camera, and more.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WWDC23 期间，Apple 引入了针对 SwiftUI 的 MapKit 扩展支持，这使得将地图集成到你的应用程序中比以往任何时候都更容易。使用
    SwiftUI，你可以轻松地向地图添加注释和覆盖层，控制相机等等。
- en: 'To watch Apple’s Meet MapKit for SwiftUI video from WWDC23, refer to this link:
    [https://developer.apple.com/videos/play/wwdc2023/10043/](https://developer.apple.com/videos/play/wwdc2023/10043/).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要观看 WWDC23 中 Apple 的 Meet MapKit for SwiftUI 视频，请参阅此链接：[https://developer.apple.com/videos/play/wwdc2023/10043/](https://developer.apple.com/videos/play/wwdc2023/10043/)。
- en: At this point, you have created the Journal List screen, and tapping each cell
    on this screen displays the journal entry’s title on a second screen. You’ll modify
    your app to display a Journal Entry Detail screen when a cell on the Journal List
    screen is tapped, but before that, you’ll create a SwiftUI view that displays
    a map.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了 Journal List 屏幕并且点击该屏幕上的每个单元格都会在第二个屏幕上显示日记条目的标题。你将修改你的应用程序以在点击
    Journal List 屏幕上的单元格时显示 Journal Entry Detail 屏幕但在此之前，你将创建一个 SwiftUI 视图来显示地图。
- en: 'Follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: Choose **File** | **New** | **File from Template...** to open the template selector.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **文件** | **新建** | **从模板新建...** 以打开模板选择器。
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。在 **用户界面** 部分中，点击 **SwiftUI 视图** 并点击 **下一步**。'
- en: Name the new file `MapView` and click **Create**. The `MapView` file will appear
    in the Project navigator.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为 `MapView` 并点击 **创建**。`MapView` 文件将出现在项目导航器中。
- en: 'In the `MapView` file, import `MapKit` and replace the `Text` view with a `Map`
    view:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapView` 文件中，导入 `MapKit` 并将 `Text` 视图替换为 `Map` 视图：
- en: '[PRE16]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Verify that a map is displayed in the canvas:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证画布中是否显示地图：
- en: '![](img/B31371_24_14.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_14.png)'
- en: 'Figure 24.14: Canvas displaying a map'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.14：显示地图的画布
- en: 'Add a `journalEntry` property of type `JournalEntry` to the `MapView` structure:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MapView` 结构中添加一个类型为 `JournalEntry` 的 `journalEntry` 属性：
- en: '[PRE17]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Modify the `#Preview` macro as shown to assign a journal entry from the `testData`
    array to the `journalEntry` property:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改 `#Preview` 宏，将 `testData` 数组中的一个日记条目分配给 `journalEntry` 属性：
- en: '[PRE18]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add a `Marker` instance to the `Map` view as shown:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将 `Marker` 实例添加到 `Map` 视图中：
- en: '[PRE19]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The values for the `title` and `coordinate` properties of the `Marker` instance
    are obtained from the `journalEntry` instance’s `entryTitle`, `latitude`, and
    `longitude` properties, and the Marker instance’s `coordinate` property will determine
    the center point of the map region to be displayed.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Marker` 实例的 `title` 和 `coordinate` 属性的值是从 `journalEntry` 实例的 `entryTitle`、`latitude`
    和 `longitude` 属性中获得的，并且 `Marker` 实例的 `coordinate` 属性将确定要显示的地图区域的中心点。'
- en: 'The map is currently zoomed all the way in. To set the zoom level, add the
    following code to the **Map** view:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前地图已完全缩进。要设置缩放级别，请将以下代码添加到 **Map** 视图中：
- en: '[PRE20]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that the map is currently displaying a map of Apple Park:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证地图当前是否显示 Apple Park 的地图：
- en: '![](img/B31371_24_15.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_15.png)'
- en: 'Figure 24.15: Canvas displaying a map of Apple Park'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 24.15：显示 Apple Park 地图的画布
- en: You’ve created a SwiftUI map view that shows a journal entry location. Now,
    let’s see how to make the complete Journal Entry Detail screen in the next section.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了一个显示日记条目位置的 SwiftUI 地图视图。现在，让我们看看如何在下一节中制作完整的 Journal Entry Detail 屏幕。
- en: Completing the Journal Entry Detail screen
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成 Journal Entry Detail 屏幕的实现
- en: 'You now have a SwiftUI map view displaying a map. Now, you’ll create a new
    SwiftUI view to represent the Journal Entry Detail screen and add the map view
    to it. Follow these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个显示地图的 SwiftUI 地图视图。现在，你将创建一个新的 SwiftUI 视图来表示 Journal Entry Detail 屏幕并将地图视图添加到其中。按照以下步骤操作：
- en: Choose **File** | **New** | **File from Template...** to open the template selector.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件** | **新建** | **从模板新建文件...**以打开模板选择器。
- en: '**iOS** should already be selected. In the **User Interface** section, click
    **SwiftUI View** and click **Next**.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS**应该已经选中。在**用户界面**部分，点击**SwiftUI视图**并点击**下一步**。'
- en: Name the new file `JournalEntryDetail` and click **Create**. The `JournalEntryDetail`
    file appears in the Project navigator.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`JournalEntryDetail`并点击**创建**。`JournalEntryDetail`文件将出现在项目导航器中。
- en: 'Declare and define the `JournalEntryDetail` structure in this file as shown
    here:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中声明并定义`JournalEntryDetail`结构，如下所示：
- en: '[PRE21]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `JournalEntryDetail` structure contains a `selectedJournalEntry` property
    of the type `JournalEntry` and a `ScrollView` view enclosing a `Vstack` view.
    The `VStack` view contains `Text` views that display the selected journal entry’s
    date, title, and body, an `Image` view that displays the selected journal entry’s
    photo, and a `MapView` view that displays a map showing the selected journal entry’s
    location, provided that the selected journal entry’s `longitude` and `latitude`
    properties are not `nil`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`JournalEntryDetail`结构包含一个类型为`JournalEntry`的`selectedJournalEntry`属性和一个包含`Vstack`视图的`ScrollView`视图。`VStack`视图包含显示所选日记条目的日期、标题和正文的`Text`视图，显示所选日记条目照片的`Image`视图，以及显示所选日记条目位置的地图的`MapView`视图，前提是所选日记条目的`longitude`和`latitude`属性不是`nil`。'
- en: To create the preview in the canvas, the first `JournalEntry` instance in the
    `testData` array is assigned to the `selectedJournalEntry` property. Note that
    the `JournalEntryDetail` instance is enclosed in a `NavigationView` instance to
    make the navigation bar appear in the preview.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要在画布中创建预览，将`testData`数组中的第一个`JournalEntry`实例分配给`selectedJournalEntry`属性。请注意，`JournalEntryDetail`实例被包含在一个`NavigationView`实例中，以便在预览中显示导航栏。
- en: 'Verify that the canvas now displays a scrollable Journal Entry Detail screen
    with a rendered map:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证画布现在是否显示了一个可滚动的日记条目详情屏幕，并渲染了地图：
- en: '![](img/B31371_24_16.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_16.png)'
- en: 'Figure 24.16: App preview showing Journal Entry Detail screen'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.16：应用预览显示日记条目详情屏幕
- en: Now that you’ve completed the implementation of the Journal Entry Detail screen
    using SwiftUI, you’ll modify the list on the Journal List screen so that the Journal
    Entry Detail screen will be displayed when a cell is tapped.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使用SwiftUI完成了日记条目详情屏幕的实现，你将修改日记列表屏幕上的列表，以便在单元格被点击时显示日记条目详情屏幕。
- en: 'Follow these steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Click the `ContentView` file in the project navigator and modify the `navigationDestination(for:destination:)`
    modifier to use the `JournalEntryDetail` structure as the destination when a cell
    is tapped:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`ContentView`文件，并修改`navigationDestination(for:destination:)`修饰符，以便在单元格被点击时使用`JournalEntryDetail`结构作为目标：
- en: '[PRE22]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The Live Preview button in the canvas should already be selected. Tap a cell
    on the Journal List screen. You’ll see the Journal Entry Detail screen for that
    restaurant appear:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 画布中的实时预览按钮应该已经选中。在日记列表屏幕上点击一个单元格。你将看到该餐厅的日记条目详情屏幕：
- en: '![](img/B31371_24_17.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_17.png)'
- en: 'Figure 24.17: App preview showing Journal Entry Detail screen'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.17：应用预览显示日记条目详情屏幕
- en: 'Build and run your app to test it in Simulator:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并运行你的应用以在模拟器中测试它：
- en: '![](img/B31371_24_18.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_24_18.png)'
- en: 'Figure 24.18: Simulator showing Journal List screen'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.18：模拟器显示日记列表屏幕
- en: You have completed building a simple version of the *JRNL* app using SwiftUI!
    Awesome!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用SwiftUI构建了一个简单的*JRNL*应用版本！太棒了！
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this brief introduction to SwiftUI, you’ve seen how to build a simplified
    version of the *JRNL* app using SwiftUI.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本简要介绍SwiftUI中，你看到了如何使用SwiftUI构建*JRNL*应用的简化版本。
- en: You started by adding and configuring SwiftUI views to create the Journal List
    screen. You then added the model objects to your app and configured the navigation
    between the Journal List and Journal Entry Detail screens. After that, you used
    MapKit to build a map view for the Journal Entry Detail screen. Finally, you created
    the Journal Entry Detail screen and added to it the map view you created earlier.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先添加并配置SwiftUI视图以创建日记列表屏幕。然后，你将模型对象添加到你的应用中，并配置了日记列表和日记条目详情屏幕之间的导航。之后，你使用MapKit为日记条目详情屏幕构建了一个地图视图。最后，你创建了日记条目详情屏幕，并将之前创建的地图视图添加到其中。
- en: You now know how to use SwiftUI to create an app that reads model objects, presents
    them in a list, and enables navigation to a second screen containing a map view.
    You are now able to implement this in your own projects.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道了如何使用 SwiftUI 创建一个读取模型对象、在列表中展示它们并允许导航到包含地图视图的第二屏幕的应用程序。你现在可以在自己的项目中实现这一点。
- en: 'If you wish to learn more about SwiftUI, you can refer to Apple’s Develop in
    Swift tutorials here:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 SwiftUI 的信息，可以参考苹果的 Develop in Swift 教程：
- en: '[https://developer.apple.com/tutorials/develop-in-swift](https://developer.apple.com/tutorials/develop-in-swift%0D)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/tutorials/develop-in-swift](https://developer.apple.com/tutorials/develop-in-swift%0D)'
- en: 'Packt Publishing also has a book on SwiftUI. You can find out more here:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Packt Publishing 也有一本关于 SwiftUI 的书。你可以在这里了解更多信息：
- en: '[https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731](https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731](https://www.amazon.com/SwiftUI-Cookbook-building-beautiful-interactive/dp/1805121731)'
- en: In the next chapter, you will learn about **Swift Testing**, which lets you
    test your Swift code with ease.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习关于 **Swift 测试** 的内容，它让你能够轻松地测试你的 Swift 代码。
- en: Join us on Discord!
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家和作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
