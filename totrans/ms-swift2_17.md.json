["```swift\nclass MyClass {\n    var number = 0\n}\n\nstruct MyStruct {\n    var number = 0\n}\n```", "```swift\nlet myClass1 = MyClass()\nlet myClass2 = myClass1\n\nmyClass2.number = 5\n\nprint(\"myClass1 = \\(myClass1.number)\")\nprint(\"myClass2 = \\(myClass2.number)\")\n```", "```swift\nmyClass1 = 5\nmyClass2 = 5\n```", "```swift\nvar myStruct1 = MyStruct()\nvar myStruct2 = myStruct1\n\nmyStruct2.number = 5\n\nprint(\"myStruct1 = \\(myStruct1.number)\")\nprint(\"myStruct2 = \\(myStruct2.number)\")\n```", "```swift\nmyStruct1 = 0\nmyStruct2 = 5\n```", "```swift\nclass MySingleton {\n  static let sharedInstance = MySingleton()\n  var number = 0\n\n  private init() {}\n\n}\n```", "```swift\nvar singleA = MySingleton.sharedInstance\nvar singleB = MySingleton.sharedInstance\nvar singleC = MySingleton.sharedInstance\n\nsingleB.number = 2\n\nprint(singleA.number)\nprint(singleB.number)\nprint(singleC.number)\n\nsingleC.number = 3\n\nprint(singleA.number)\nprint(singleB.number)\nprint(singleC.number)\n```", "```swift\nclass BurgerOld {\n    var name: String\n    var patties: Int\n    var bacon: Bool\n    var cheese: Bool\n    var pickles: Bool\n    var ketchup: Bool\n    var mustard: Bool\n    var lettuce: Bool\n    var tomato: Bool\n\n    init(name: String, patties: Int, bacon: Bool, cheese: Bool, pickles: Bool,ketchup: Bool,mustard: Bool,lettuce: Bool,tomato: Bool) {\n        self.name = name\n        self.patties = patties\n        self.bacon = bacon\n        self.cheese = cheese\n        self.pickles = pickles\n        self.ketchup = ketchup\n        self.mustard = mustard\n        self.lettuce = lettuce\n        self.tomato = tomato\n    }\n}\n```", "```swift\n// Create Hamburger\nvar burgerOld = BurgerOld(name: \"Hamburger\", patties: 1, bacon: false, cheese: false, pickles: false, ketchup: false, mustard: false, lettuce: false, tomato: false)\n\n// Create Cheeseburger\nvar burgerOld = BurgerOld(name: \"Cheeseburger\", patties: 1, bacon: false, cheese: false, pickles: false, ketchup: false, mustard: false, lettuce: false, tomato: false)\n```", "```swift\nprotocol BurgerBuilder {\n    var name: String {get}\n    var patties: Int {get}\n    var bacon: Bool {get}\n    var cheese: Bool {get}\n    var pickles: Bool {get}\n    var ketchup: Bool {get}\n    var mustard: Bool {get}\n    var lettuce: Bool {get}\n    var tomato: Bool {get}\n}\n```", "```swift\nclass HamBurgerBuilder: BurgerBuilder {\n    let name = \"Burger\"\n    let patties = 1\n    let bacon = false\n    let cheese = false\n    let pickles = true\n    let ketchup = true\n    let mustard = true\n    let lettuce = false\n    let tomato = false\n}\n\nclass CheeseBurgerBuilder: BurgerBuilder {\n    let name = \"CheeseBurger\"\n    let patties = 1\n    let bacon = false\n    let cheese = true\n    let pickles = true\n    let ketchup = true\n    let mustard = true\n    let lettuce = false\n    let tomato = false\n}\n```", "```swift\nclass Burger {\n    var name: String\n    var patties: Int\n    var bacon: Bool\n    var cheese: Bool\n    var pickles: Bool\n    var ketchup: Bool\n    var mustard: Bool\n    var lettuce: Bool\n    var tomato: Bool\n\n    init(builder: BurgerBuilder) {\n        self.name = builder.name\n        self.patties = builder.patties\n        self.bacon = builder.bacon\n        self.cheese = builder.cheese\n        self.pickles = builder.pickles\n        self.ketchup = builder.ketchup\n        self.mustard = builder.mustard\n        self.lettuce = builder.lettuce\n        self.tomato = builder.tomato\n    }\n\nfunc showBurger() {\n    print(\"Name:    \\(name)\")\n    print(\"Patties: \\(patties)\")\n    print(\"Bacon:   \\(bacon)\")\n    print(\"Cheese:  \\(cheese)\")\n    print(\"Pickles: \\(pickles)\")\n    print(\"Ketchup: \\(ketchup)\")\n    print(\"Mustard: \\(mustard)\")\n    print(\"Lettuce: \\(lettuce)\")\n    print(\"Tomato:  \\(tomato)\")\n}\n}\n```", "```swift\n// Create Hamburger\nvar myBurger = Burger(builder: HamBurgerBuilder())\nmyBurger.showBurger()\n\n// Create Cheeseburger with tomatoes\nvar myCheeseBurgerBuilder = CheeseBurgerBuilder()\nvar myCheeseBurger = Burger(builder: myCheeseBurgerBuilder)\nmyCheeseBurger.tomato = false\nmyCheeseBurger.showBurger()\n```", "```swift\nprotocol Computer {\n  func getType() -> String\n}\n```", "```swift\nclass MacbookPro: Computer {\n  func getType() -> String {\n    return \"Macbook Pro\"\n  }\n}\nclass IMac: Computer {\n  func getType() -> String {\n    return \"iMac\"\n  }\n}\n\nclass MacMini: Computer {\n  func getType() -> String {\n    return \"MacMini\"\n  }\n}\n```", "```swift\nclass ComputerStore {\n  enum ComputerType {\n    case Laptop\n    case Desktop\n    case Headless\n  }\n\n  func getModel(type: ComputerType) -> Computer {\n    switch(type) {\n    case ComputerType.Laptop:\n      return MacbookPro()\n    case ComputerType.Desktop:\n      return IMac()\n    case ComputerType.Headless:\n      return MacMini()  \n    }\n  }\n}\n```", "```swift\nvar laptop = store.getModel(.Laptop)\nprint(laptop.getType())\n```", "```swift\nprotocol TV {\n  var currentChannel: Int {get set}\n\n  func turnOn()\n  func turnOff()\n}\n\nprotocol RemoteControl {\n  var tv: TV {get set}\n  init(tv: TV)\n}\n```", "```swift\nextension TV {\n    mutating func changeChannel(channel: Int) {\n        self.currentChannel = channel\n    }\n}\n\nextension RemoteControl {\n    func turnOn() {\n        tv.turnOn()\n    }\n    func turnOff() {\n        tv.turnOff()\n    }\n    mutating func setChannel(channel: Int) {\n        tv.changeChannel(channel)\n    }\n    mutating func nextChannel() {\n        tv.changeChannel(tv.currentChannel + 1)\n    }\n    mutating func prevChannel() {\n        tv.changeChannel(tv.currentChannel - 1)\n    }\n}\n```", "```swift\nstruct VizioTV: TV {\n\n    var currentChannel = 1\n\n    func turnOn() {\n        print(\"Vizio On\")\n    }\n    func turnOff() {\n        print(\"Vizio Off\")\n    }\n}\n\nstruct SonyTV: TV {\n\n    var currentChannel = 1\n\n    func turnOn() {\n        print(\"Sony On\")\n    }\n    func turnOff() {\n        print(\"Sony Off\")\n    }\n}\n```", "```swift\nclass MyUniversalRemote: RemoteControl {\n    var tv: TV\n\n    required init(tv: TV) {\n        self.tv = tv\n    }\n}\n```", "```swift\nvar myTv = VizioTV()\nvar remote = MyUniversalRemote(tv: myTv)\nremote.turnOn()\nremote.nextChannel()\nprint(\"Channel on: \\(myTv.currentChannel)\")\nremote.nextChannel()\nprint(\"Channel on: \\(myTv.currentChannel)\")\nremote.turnOff()\n```", "```swift\nvar myTv = VizioTV()\nvar remoteForTV1 = MyUniversalRemote(tv: myTv)\nvar remoteForTV2 = MyUniversalRemote (tv: myTv)\n```", "```swift\nstruct HotelBooking {\n    static func getHotelNameForDates(to: NSDate, from: NSDate) -> [String]? {\n        let hotels = [String]()\n        //logic to get hotels\n        return hotels\n    }\n}\n\nstruct FlightBooking {\n    static func getFlightNameForDates(to: NSDate, from: NSDate) -> [String]? {\n        let flights = [String]()\n        //logic to get flights\n        return flights\n    }\n}\n\nstruct RentalCarBooking {\n    static func getRentalCarNameForDates(to: NSDate, from: NSDate) -> [String]? {\n        let cars = [String]()\n        //logic to get flights\n        return cars\n    }\n}\n```", "```swift\nclass TravelFacade {\nvar hotels: [String]?\nvar flights: [String]?\nvar cars: [String]?    \n\n    init(to: NSDate, from: NSDate) {\n        hotels = HotelBooking.getHotelNameForDates(to, from: from)\n        flights = FlightBooking.getFlightNameForDates(to, from: from)\n        cars = RentalCarBooking.getRentalCarNameForDates(to, from: from)\n    }\n}\n```", "```swift\nprotocol FloorPlanProtocol {\n  var bedRooms: Int {get set}\n  var utilityRooms: Int {get set}\n  var bathRooms: Int {get set}\n  var kitchen: Int {get set}\n  var livingRooms: Int {get set}\n}\n```", "```swift\nstruct FloorPlan: FloorPlanProtocol {\n  var bedRooms = 0\n  var utilityRooms = 0\n  var bathRooms = 0\n  var kitchen = 0\n  var livingRooms = 0\n}\n```", "```swift\nclass House {\n  private var stories = [FloorPlanProtocol]()\n\n  func addStory(floorPlan: FloorPlanProtocol) {\n    stories.append(floorPlan)\n  }\n}\n```", "```swift\nclass HouseProxy {\n var house = House()\n\n  func addStory(floorPlan: FloorPlanProtocol) -> Bool {\n    if house.stories.count < 3 {\n      house.addStory(floorPlan)\n      return true\n    }\n    else {\n      return false\n    }\n  }\n}\n```", "```swift\nvar ourHouse = HouseProxy()\n\nvar basement = FloorPlan(bedRooms: 0, utilityRooms: 1, bathRooms: 1, kitchen: 0, livingRooms: 1)\nvar firstStory = FloorPlan(bedRooms: 1, utilityRooms: 0, bathRooms: 2, kitchen: 1, livingRooms: 1)\nvar secondStory = FloorPlan(bedRooms: 2, utilityRooms: 0, bathRooms: 1, kitchen: 0, livingRooms: 1)\nvar additionalStory = FloorPlan(bedRooms: 1, utilityRooms: 0, bathRooms: 1, kitchen: 1, livingRooms: 1)\n\nprint(ourHouse.addStory(basement))\nprint(ourHouse.addStory(firstStory))\nprint(ourHouse.addStory(secondStory))\nprint(ourHouse.addStory(additionalStory))\n```", "```swift\nprotocol Command {\n  func execute()\n}\n```", "```swift\nstruct RockerSwitchLightOnCommand: Command {\n  func execute() {\n    print(\"Rocker Switch:  Turning Light On\")\n  }\n}\n\nstruct RockerSwitchLightOffCommand: Command {\n  func execute() {\n    print(\"Rocker Switch:  Turning Light Off\")\n  }\n}\nstruct PullSwitchLightOnCommand: Command {\n  func execute() {\n    print(\"Pull Switch:  Turning Light On\")\n  }\n}\n\nstruct PullSwitchLightOffCommand: Command {\n  func execute() {\n    print(\"Pull Switch:  Turning Light Off\")\n  }\n}\n```", "```swift\nclass Light {\n  var lightOnCommand: Command\n  var lightOffCommand: Command\n\n  init(lightOnCommand: Command, lightOffCommand: Command) {\n    self.lightOnCommand = lightOnCommand\n    self.lightOffCommand = lightOffCommand\n  }\n\n  func turnOnLight() {\n    self.lightOnCommand.execute()\n  }\n\n  func turnOffLight() {\n    self.lightOffCommand.execute()\n  }\n}\n```", "```swift\nvar on = PullSwitchLightOnCommand()\nvar off = PullSwitchLightOffCommand()\nvar light = Light(lightOnCommand: on, lightOffCommand: off)\n\nlight.turnOnLight()\nlight.turnOffLight()\n\nlight.lightOnCommand = RockerSwitchLightOnCommand()\nlight.turnOnLight()\n```", "```swift\nprotocol CompressionStrategy {\n  func compressFiles(filePaths: [String])\n}\n```", "```swift\nstruct ZipCompressionStrategy: CompressionStrategy {\n  func compressFiles(filePaths: [String]) {\n    print(\"Using Zip Compression\")\n  }\n}\n\nstruct RarCompressionStrategy: CompressionStrategy {\n  func compressFiles(filePaths: [String]) {\n    print(\"Using RAR Compression\")\n  }\n}\n```", "```swift\nclass CompressContent {\n  var strategy: CompressionStrategy\n\n  init(strategy: CompressionStrategy) {\n    self.strategy = strategy\n  }\n\n  func compressFiles(filePaths: [String]) {\n    self.strategy.compressFiles(filePaths)\n  }\n}\n```", "```swift\nvar filePaths = [\"file1.txt\", \"file2.txt\"]\nvar zip = ZipCompressionStrategy()\nvar rar = RarCompressionStrategy()\n\nvar compress = CompressContent(strategy: zip)\ncompress.compressFiles(filePaths)\n\ncompress.strategy = rar\ncompress.compressFiles(filePaths)\n```"]