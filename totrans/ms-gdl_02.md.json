["```java\nfile: GroovyTest.groovy\n  println \"Hello Groovy\"\n```", "```java\n$ groovy GroovyTest.groovy\n Hello Groovy\n\n```", "```java\n    $ groovyc GroovyTest.groovy\n\n    ```", "```java\n    $ java -cp %GROOVY_HOME%/embeddable/groovy-all-2.3.1.jar;. GroovyTest\n\n    ```", "```java\ndef s1='This is single quote string.'\n\ndef s2=\"This is double quote string.\"\n\ndef s3=\"\"\"This is multi line String.\nYou can write multiple lines here.\"\"\"\n\ndef s4 =\"Example of Gstring, You can refer to variable also like ${s1}\"\n\ndef s5='''This is multi line String.\nYou can write multiple lines here.'''\n\ndef s6 =/ This is 'slashy' String.\nIt can also contains multiple lines $s1\n/\n```", "```java\ndef var1\nvar1 ='a'     \nprintln var1.class   // will print class java.lang.String\nvar1 = 1       \nprintln var1.class   // will print class java.lang.Integer\ndef method1() {/*method body*/}\n```", "```java\ndef addition(a, b) { return a + b}\naddition (1, 2)      // Output: 3\naddition ([1,2], [4, 5])  // Output: [1, 2, 4, 5]\naddition('Hi ', 3)    // Output: Hi 3\n```", "```java\nclass Person{\n  String name\n\n  @Override\n  public String toString() {\n    return \"Person [name=\" + name +\"]\";\n  }\n}\n\np1 = new Person()\np2 = new Person()\naddition(p1, p2)  // Output: groovy.lang.MissingMethodException\n```", "```java\ndef methodMissing(String name, args) {\n  if (name.startsWith(\"plus\") ) {\n// write your own implementation\n    return \"plus method intercepted\"\n  }\n  else {\n    println \"Method name does not start with plus\"\n    throw new MissingMethodException(name, this.class, args)\n  }\n}\n```", "```java\naddition(p1, p2)  // Output: plus method intercepted\n```", "```java\nimport java.lang.* // this is the only default import in Java\nimport java.util.*\nimport java.io.*\nimport java.net.*\nimport groovy.lang.*\nimport groovy.util.*\nimport java.math.BigInteger\nimport java.math.BigDecimal\n```", "```java\nclass Order {\n  int orderNo\n  Customer orderedByCustomer\n  String description\n\n  static main(args) {\n    Order order1 = new Order();\n    order1.orderNo = 1;\n    order1.orderedByCustomer = new Customer(name: \"Customer1\", email: \"cust1@example.com\")\n    order1.setDescription(\"Ordered by Customer1\")\n    println order1.orderByCustomer.showMail()\n  }\n}\n\nclass Customer{\n  String name\n  String email\n  String address\n\n  String showMail(){\n  email\n }\n}\n```", "```java\ndef sum(x,y=10,z=1) {x+y+z}\n// x = 1\nsum(1)\n// x = 1, y= 2\nsum(1, 2)\n```", "```java\ndef condition1 = true\nint condition2 = 0\nif(condition1){\n  println(\"Condition 1 satisfied\")\n  if(condition2){\n    println(\"Condition 2 satisfied\")\n  }else{\n    println(\"Condition 2 failed\")\n  }\n}else{\n  println(\"Condition 1 failed\")\n}\n```", "```java\n(condition2> 0 )? println(\"Positive\") : println(\"Negative\")\n```", "```java\ndef inputName\nString username = inputName?:\"guest\"\n```", "```java\ndef checkInput(def input){\nswitch(input){    \n  case [3, 4, 5]   :   println(\"Array Matched\"); break;\n  case 10..15      :   println(\"Range Matched\"); break;\n  case Integer     :   println(\"Integer Matched\"); break;\n  case ~/\\w+/      :   println(\"Pattern Matched\"); break;\n  case String      :   println(\"String Matched\"); break;\n  default          :   println(\"Nothing Matched\"); break;\n}\n}\ncheckInput(3)  // will print Array Matched\ncheckInput(1)  // will print Integer Matched\ncheckInput(10)  // will print Range Matched\ncheckInput(\"abcd abcd\") // will print String Matched\ncheckInput(\"abcd\")  // will print Pattern Matched\n```", "```java\n// Traditional for loop\nfor(int i = 0; i< 3; i++) {/* do something */ }\n// Loop over a Range\nfor(i in 1..5) println(i)\n// Array iteration\ndef arr = [\"Apple\", \"Banana\", \"Mango\"]\nfor(i in arr) println(i)\n// for applied on Set\nfor(i in ([10,10,11,11,12,12] as Set)) println(i)\n```", "```java\nint count = 0\nwhile(count < 5) {\n  println count++\n}\n```", "```java\n// Creating a Set\ndef Set1 = [1,2,1,4,5,9] as Set\nSet Set2 = new HashSet( ['a','b','c','d'] )\n\n// Modifying a Set\nSet2.add(1)\nSet2.add(9)\nSet2.addAll([4,5])        // Set2: [1, d, 4, b, 5, c, a, 9]\n\nSet2.remove(1)        \nSet2.removeAll([4,5])    // Set2: [d, b, c, a, 9]\n\n// Union of Set\nSet Union = Set1 + Set2     // Union: [1, 2, 4, 5, 9, d, b, c, a]\n\n// Intersection of Set\nSet intersection = Set1.intersect(Set2)    // Intersection: [9]\n\n// Complement of Set\nSet Complement = Union.minus(Set1)    // Complement: [d, b, c, a]\n```", "```java\n// Creating a List\n def list1 = ['a', 'b', 'c', 'd']\n def list2 = [3, 2, 1, 4, 5] as List\n\n// Reading a List\nprintln list1[1]          // Output: b\nprintln list2.get(4)      // Output: 5\nprintln list1.get(5)      //Throws IndexOutOfBoundsException\n\n// Some utility method on List\n//Sort a List\nprintln list2.sort()      // Output: [1, 2, 3, 4, 5]\n// Reserve a list\nprintln list1.reverse()      // Output: [d, c, b, a]\n// Finding elements\nprintln (\"Max:\" + list2.max() + \":Last:\" + list1.last())   \n// Output: Max:5:Last:d\n```", "```java\nprintln list2.find({ it %2 == 0})    // Output: 2\nprintln list2.findAll({it %2 == 0})  // Output: [2, 4]\n```", "```java\nMap m1 = [name:\"Groovy\"]\n```", "```java\nString s1 = \"name\"\nMap m1 = [(s1):\"Groovy\"]\n```", "```java\ndef m2 = [id:1,title: \"Mastering Groovy\" ] as Map\n```", "```java\nMap ageMap = [John:24, Meera:28,Kat:31,Lee:19,Harry:18]\n```", "```java\nageMap.each {key, value ->\n  println \"Name is \"+key\n  println \"Age is \" + value\n}\n```", "```java\nageMap.each {entry  ->\n  println \"Name is \"+entry.key\n  println \"Age is \" + entry.value\n}\n```", "```java\nageMap.any {entry -> entry.value > 25 }\n```", "```java\nageMap.every {entry -> entry.value > 18 }\n```", "```java\ndef range1 = 1..10\nRange range2 = 'a'..'e'\n```", "```java\nrange1.each { println it }\n```", "```java\nrange1.any { it > 5 }\nrange1.every { it > 0 }\n```", "```java\nList l1 = range1.step(2)    //Output: [1, 3, 5, 7, 9]\n```", "```java\nrange1.getFrom()      //Output: 1\nrange1.getTo()        //Output: 10\n```", "```java\nrange1.isReverse()       // Output: false\n```", "```java\ndef addTwo = {it+2 }\naddTwo(2)          // Output: 4\naddTwo()          // NullPointerException\n```", "```java\ngroovy.lang.Closure closure1 = { println it }\nclosure1(\"This will be printed\") // Output: This will be printed\n```", "```java\nint constantValue = 9\ndef addOne = { Integer a -> constantValue + a }\n\naddOne(1)         // unnamed () invocation. Output: 10\naddOne.call(1)    // call() invocation. Output: 10\naddOne(\"One\")     // MissingMethodException\n```", "```java\nclass PrintValue{\n  def printClosure = {\n    println myValue\n  }\n}\ndef pcl = new PrintValue().printClosure\npcl()   //Output: MissingPropertyException: No such property\n```", "```java\nclass PrintHandler{\n  def myValue = \"I'm Defined Here\"\n}\n\ndef pcl = new PrintValue().printClosure\npcl.delegate = new PrintHandler()\npcl()\n\nOUTPUT: I'm Defined Here\n```", "```java\nclass PrintValue{\n  def myValue = \"I'm owner\"\n  def printClosure = {\n    println myValue\n  }\n}\n```", "```java\ndef pcl = new PrintValue().printClosure\npcl.resolveStrategy = Closure.DELEGATE_FIRST\npcl.delegate = new PrintHandler()\npcl()\n```", "```java\n<orders>\n  <order>\n    <no>1</no>\n    <description>Ordered by customer 1</description>\n    <customer>\n      <name firstname='Customer1' />\n      <email>cust1@example.com</email>\n    </customer>\n  </order>\n  <order>\n    <no>2</no>\n    <description>Ordered by customer 2</description>\n    <customer>\n      <name firstname='Customer2' />\n      <email>cust2@example.com</email>\n    </customer>\n  </order>\n  â€¦.\n</orders>\n```", "```java\ndef builder = new groovy.xml.MarkupBuilder(new FileWriter(\"orders.xml\"))\n\n  builder.orders{\n    for(i in orderlist){\n      order{\n        no(i.orderNo)\n        description(i.description)\n        customer{\n          name(firstname : i.orderedBy.name)\n          email(i.orderedBy.email)\n        }\n      }\n    }\n  }\n```"]