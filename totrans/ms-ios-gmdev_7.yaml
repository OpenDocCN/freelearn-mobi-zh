- en: Chapter 7. Deploying and Monetizing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wow! You have done a lot of work so far! And we''re not even done yet! It''s
    about time for your hard work to pay off. In this chapter, we will discuss the
    following things to keep in mind during this final part of development:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your app for deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monetizing (Making MOAR money!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All your hard work has come down to this, and now it's time to shine by making
    the money you deserve for working super hard! Of course there are way more options
    then simply charging for your app and, you know what, let's just dive right in
    to it shall we?
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin making money...
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's finally time! It's finally that time; all your work has come down to this
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: For me, this has always been the most exciting time of development, especially
    when you get the e-mail from Apple saying that your app is in review.
  prefs: []
  type: TYPE_NORMAL
- en: Then, when it gets released, just seeing your app in the AppStore is so exciting!
    I'll never forget the first app I released, the moment I saw my first app I went
    around to show it to my whole family. I had finally done it. Now it's your turn.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we are going to create our app within iTunes Connect. Simply go to
    [itunesconnect.apple.com](http://itunesconnect.apple.com) and log in with your
    Apple ID that is linked to your developer account, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve logged in, click on the **My Apps** icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, you will now be able to see all the apps you have created (if any):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just below the **iTunes Connect** logo, simply click on the **+** button to
    begin creating a new app. You will now see a roll-out menu appear, asking what
    type of app you would like to create. We will create a new iOS App.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will then be greeted by a new popup window asking for some basic information
    for the app, such as the app name, app language, bundle ID (which I will discuss
    in just a second), version number, and SKU for your app (for the SKU, I literally
    just use the time I am filling it in, but you can use whatever you like):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Don't have a bundle ID? Simply click on the **Register a new bundle ID on the
    Developer Portal** button below the **Bundle ID** selection.
  prefs: []
  type: TYPE_NORMAL
- en: From there, it's simply a matter of filling in all the information, such as
    the App ID description, prefix, suffix, and services you want to include in the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have it all filled out, return to the app creation screen and select
    the new bundle id (if it hasn't appeared yet, simply cancel the creation and try
    again).
  prefs: []
  type: TYPE_NORMAL
- en: Your app is now created! Well, somewhat...
  prefs: []
  type: TYPE_NORMAL
- en: The next page requires you to fill in the complete information regarding the
    app—that is, the description, keywords, screenshots, copyright information, and
    that kind of stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to submit your app to the AppStore for review!
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways of doing this. One is directly through Xcode and the second
    is through the Application Loader (both app icons can be seen in the following
    image); we will discuss how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: No matter which method you choose to upload your app, though, both ways will
    require you to archive it. Before you archive the app, I highly recommend doing
    another test just to ensure that everything is working as it should.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the archive in Xcode, ensure that you have **iOS Device** selected
    under the scheme selection. To recap, schemes are presets on the simulator or
    iOS device you want to run your project on. The following screenshot shows the
    **iOS Device** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have that selected, simply click on **Product** on the toolbar, then
    select **Archive**. By archiving, you are essentially putting your whole project
    into a single, compressed file so that you can upload it to the app store.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, all you have to do is wait... Depending on how large your app is, you may
    be waiting for a while.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it''s done, you will encounter the Archive window, which will show you
    a list of all the archives you have created for your awesome apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, it's a good idea to validate your app through the iTunes validation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do you do this? Simple! Click on the **Validate** button you see in the
    **Archive** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If all goes well, you will get a window saying it''s been validated. However,
    if you''re like me, you will get an error, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sure enough, I had made a blooper and wasn't using the correct provisioning
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: Once that's all done, we can upload it!
  prefs: []
  type: TYPE_NORMAL
- en: Simply click on the big **Submit to App Store** button!
  prefs: []
  type: TYPE_NORMAL
- en: In the dialog that appears, choose a team from the pop-up menu and click on
    **Choose**.
  prefs: []
  type: TYPE_NORMAL
- en: If need be, Xcode will create a distribution certificate and distribution provisioning
    profile for you. The name of the distribution provisioning profile begins with
    the text **XC**.
  prefs: []
  type: TYPE_NORMAL
- en: In the dialog that appears, review the app, its entitlements, and provisioning
    profile, and click on **Submit**.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode will then upload the archive to iTunes Connect. If a dialog appears stating
    that no application record can be found, click on **Done**, create an app record
    in iTunes Connect, and repeat these steps.
  prefs: []
  type: TYPE_NORMAL
- en: If issues are found, click on **Done** and fix them before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: If no issues are found, click on **Submit** to upload your app.
  prefs: []
  type: TYPE_NORMAL
- en: You have now uploaded your app to the App Store! Await an e-mail saying your
    app is in review!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the easiest way to upload your app, but alternatively you can upload
    your app via the **ApplicationLoader** option. Simply open the **ApplicationLoader**
    tab; you will be greeted by the **Template Chooser**, which will allow you to
    either upload your app or upload an in-app-purchase, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Before we click on **Deliver Your App**, we need to export the project as an
    archive back in Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: In Xcode, click on **Window** in **Organizer** and we will be back to the Archive
    of our app. Now, instead of clicking on **Submit to AppStore**, we will click
    on **Export**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it will ask how you want to save the app as— **Save for iOS App Store
    Deployment**, **Save for Ad Hoc Deployment**, or for **Save for Enterprise Deployment**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Save for iOS AppStore Deployment**, then click on **Next**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing to deploy](img/B03553_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, it will ask you which development team you would like to use; select
    the team you are using.
  prefs: []
  type: TYPE_NORMAL
- en: It will again run validation tests, and then ask you where you want to save
    the archive.
  prefs: []
  type: TYPE_NORMAL
- en: Simply select an easy-to-remember location, then pop back to **Application Loader**
    and click on **Deliver your App**.
  prefs: []
  type: TYPE_NORMAL
- en: Select the app you just created. Application loader will then search for the
    application and display a window with all the application details, such as the
    name, version number, SKU number, primary language, copyright, type, and Apple
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Next**. **Application Loader** begins uploading your application
    binary file to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Once it's done, all you have to do is wait!
  prefs: []
  type: TYPE_NORMAL
- en: You can always log in to iTunes Connect to stay up-to-date on the status of
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to make some dough!
  prefs: []
  type: TYPE_NORMAL
- en: Tips for monetizing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply charging $0.99 (or a similar conversion for your country) for your app
    isn't the only way to make money on it. Actually, in my experience, it's one of
    the worst ways to make money from your app.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, I have made more money with in-app advertising then I ever have with
    the funds from app purchases.
  prefs: []
  type: TYPE_NORMAL
- en: The best thing that you can do is make your app free, then incorporate some
    kind of advertising outlet such as **iAds**, **Admob**, **Chartboost**, or any
    other iOS-enabled advertising API.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through a few of the advertising APIs and how you can sign up for them
    and integrate them into your game.
  prefs: []
  type: TYPE_NORMAL
- en: iAds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since you are already signed up as an iOS developer, you don't need to go through
    any sign-up process. You do, however, need to (if you haven't already) set up
    the appropriate contracts for iAds.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, log in to [itunesconnect.apple.com](http://itunesconnect.apple.com)
    and click on the **Agreements, Tax, and Banking** icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, you will see **Request Contracts** if you haven't yet set
    them up. Simply request the **iAd App Network** contract. I recommend that you
    request all the agreements, but for this section of the chapter we only need iAds.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have clicked on **Request**, you will be asked for legal entity information—in
    other words, information about the person who has the authority to agree to the
    contracts. Once done, simply agree and go back to the contracts screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re back at the contracts screen, you will be required to fill in
    your banking information, tax information, and so on, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Are you getting excited? I know I am! Here''s some exciting information at
    a glance about iAds:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Banner views use just a portion of the screen to display a banner ad**: We''ve
    all seen them, those tiny little ads at the bottom of a game we are playing or
    an app we are using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full screen ads provide larger advertisements to iPad apps**: We can even
    show a full screen ad! This can come in handy when, let''s say, the player beats
    a level. You can show a fullscreen ad, so it''s not exactly disturbing a player''s
    gameplay.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**You can pause nonessential activities while users interact with advertisements**:
    Once the user taps on the ad, it will launch into a fullscreen interactive experience
    for the user. This obscures everything happening underneath, but fortunately we
    can pause everything going on in the game, so our player''s progress isn''t being
    hampered by an ad displaying, and our poor player runs into an enemy. That wouldn''t
    be fun...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canceling advertising negatively impacts your app**: You can programmatically
    cancel the interactive ad experience and force the user back to your app if your
    app needs the attention of the user. However, Apple recommends you only do this
    if absolutely necessary because it may affect your fill rates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we can start integrating!
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s really simple, so let''s start by adding the iAds framework to our project.
    Do you remember how to add frameworks? The following screenshot shows how to do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Don''t worry if you don''t remember! In your Xcode, select your project in
    the sidebar. Then, in the center window, with your **Target** selected (see the
    previous screenshot), under general, scroll down to the bottom of the window where
    you see **Linked Frameworks and Libraries**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Simply click on the **+** button to add a new framework. In the search bar,
    type the screenshot shows ''iAd'':'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, click on the **Ok** button!
  prefs: []
  type: TYPE_NORMAL
- en: It's that easy! The iAd framework is officially integrated into our project!
    Now, all that we have to do is insert the code to display the ads.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will hop in to our **ViewController.h** file and we will adjust the code
    so that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To explain, we imported the iAd framework into the `ViewController` class, then
    we declared the `ViewController` class and `AdBannerViewDelegate` to control iAds.
  prefs: []
  type: TYPE_NORMAL
- en: We then declared the `ADBannerView` variable as `adView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go in to our `ViewController.m` file now and change the following methods
    to display our ads. The bold text is what''s new:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will go on over to our `GameLevelScene.m` file. Let''s scroll down
    to our `initWithSize` method and add the following code (again the bold text is
    added):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will scroll down even further to our `touchesBegan:` method and, within
    the `if (node.name isEqualToString:@"playButton"])` method, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Confused? No problem!
  prefs: []
  type: TYPE_NORMAL
- en: What we did is set up a notification center to accept certain, well, notifications.
    This is an easy way to call methods between different class files. All we did
    is set up the notification center in our `ViewController` class to receive a notification
    to show and hide the banners.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we do it this way?
  prefs: []
  type: TYPE_NORMAL
- en: Banner views are only able to be displayed on a `ViewController` class. In the
    case of our game, we only have one view controller, whereas our `GameLevelScene`
    is not a `ViewController` class; it's a SpriteKit scene that is displayed on our
    `ViewController` class. Ergo, if you were to set up and display the Banner View
    in our scene, it wouldn't show up because it's a SpriteKit scene, not a `ViewController`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Makes sense?
  prefs: []
  type: TYPE_NORMAL
- en: Once you have everything coded, test to see what happens!
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, when you click on the play button, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![iAds](img/B03553_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All gone!
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that no actual ads will appear until the game has been released;
    until then, it will display placeholder ads.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You are now well on your way to making ad money!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about the other advertising outlets.
  prefs: []
  type: TYPE_NORMAL
- en: AdMob
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After downloading the framework (which you can find easily on Google), extract
    it to a place that's easy to locate again.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we have to do is right-click on our project on the left-hand side bar,
    and choose **Add Files To (Your Project Name)**:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `GoogleMobileAds.framework` you just downloaded, and add it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AdMob SDK depends on the following iOS development frameworks, which may
    not already be part of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: AdSupport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AudioToolbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AVFoundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreGraphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreMedia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreTelephony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EventKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EventKitUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MessageUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StoreKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SystemConfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have imported these frameworks and referenced the AdMob SDK, Xcode
    will automatically link to the required frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following Google''s own documentation, add the following code in your `ViewController`
    class to set up ads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that our project has the SDK referenced, let's put banner ads into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **GADBannerView** (**GoogleAd Banner View**) can be created from a storyboard
    or from code. For regular apps, things are put together in the Storyboard editor
    but the same methods work for a game such as ours, just remember to keep the code
    in your `ViewController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AdMob](img/B03553_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the main storyboard and, in the `Object` library in the bottom-right corner,
    search for `UIView` and drag a `UIView` element into your view controller. Then,
    in the **Identity inspector** button in the top-right corner, we will change the
    class of this view to a `GADBannerView`, as seen in the previous image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GADBannerView` class needs a reference in code to load ads into it. Open
    the **Assistant Editor** by navigating to **View** | **Assistant Editor** | **Show
    Assistant Editor**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![AdMob](img/B03553_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the assistant editor, ensure that the `ViewController.h` file is displayed.
    Next, holding the Control key (or just right-click and drag), click on the `GADBannerView`
    element and drag your cursor over to the `ViewController.h` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the easiest way to link outlets in your storyboard to code. This has
    been extremely streamlined and takes a bunch of work out of programming; previously,
    we would have had to manually type the outlet, then link it manually in the storyboard
    editor, which wasn''t fun. We are going to add the following code, by doing the
    following, we are going to import the Google ads framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You then add the following code and make the required adjustments to the methods
    that are already in your `ViewController.m` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to display an ad, just insert the following method in either the `ViewDidLoad`
    section or wherever you would like it to appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It's (almost) that easy!
  prefs: []
  type: TYPE_NORMAL
- en: There are a few changes that need to be made, though. First, you need to create
    a new `AppID` variable through the website. All you gotta do is copy and paste
    the ID in place of the one that is after `self.bannerView.adUnitID =`.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Chartboost!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Importing the framework will be the same no matter what framework you import.
    Here are the required frameworks for Chartboost:'
  prefs: []
  type: TYPE_NORMAL
- en: StoreKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CoreGraphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UIKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will have to add only one of these. The other three should be included
    with a SpriteKit project. For Chartboost, we need to start in our `AppDelegate`
    class to initialize the app ID and app signature, both of which are set up under
    Chartboost''s website. At the top of the `AppDelegate.m` file, we need to import
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside our `Application didFinishLaunchingWithOptions` method, we need
    to add the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a note, Chartboost must be initialized this way, as they record app
    bootups to track analytics for you. If you don''t do it this way, you won''t get
    any ads. Then you cry. Want to know what''s next? The following code will show
    us the ad:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It's really that easy! Simply add that line of code when you want to display
    your ad and boom! Done! I can smell the revenue now!
  prefs: []
  type: TYPE_NORMAL
- en: You know, you guys are a great audience, I really hope you've enjoyed and learned
    a lot from this book.
  prefs: []
  type: TYPE_NORMAL
- en: I really feel you will be able to create your own full-fledged games and monetize
    them with extreme ease.
  prefs: []
  type: TYPE_NORMAL
- en: But you know what... we aren't done yet. No no! We are actually going to talk
    about updating your app, and adding multiplayer functionality!
  prefs: []
  type: TYPE_NORMAL
- en: Buckle up, this last chapter is going to be a blast!
  prefs: []
  type: TYPE_NORMAL
- en: It is too dangerous to go alone... Does the following image seem familiar?
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Chartboost!](img/B03553_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to deploy your app on the App store and how
    to make money on your published app by incorporating advertising outlets, such
    as iAds, Admob, and Chartboost. Now, you can develop and deploy as many app as
    you want. Enjoy developing, deploying, and earning money on your apps.
  prefs: []
  type: TYPE_NORMAL
