- en: '*Chapter 9*: Setting Up the User Interface'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：设置用户界面'
- en: In *Part 1* of this book, you studied about the Swift language and how it works.
    Now that you have a good working knowledge of the language, you can learn how
    to develop an iOS application. In this part, you will build the user interface
    of a restaurant reservation app, *Let's Eat*. You will use Xcode's **Interface
    Builder** for this, and coding will be kept to a minimum.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的*第一部分*中，你学习了Swift语言及其工作原理。现在你对这门语言有了很好的了解，你可以学习如何开发iOS应用。在本部分，你将构建一个餐厅预订应用*Let's
    Eat*的用户界面。你将使用Xcode的**Interface Builder**，并将编码保持到最小。
- en: You'll start this chapter by learning useful terms used in iOS app development,
    which are used extensively throughout this book. Next, you will tour the screens
    used in the *Let's Eat* app and learn how the user would use the app. Finally,
    you will begin recreating the app's UI with Interface Builder, starting with the
    **tab bar**, which allows the user to select between the **Explore** and **Map**
    screens. You'll add navigation bars to the top of both screens. You'll also learn
    how to configure the **Launch** screen that is displayed when the app is started
    and how to use custom icons for the **Launch** screen and the **tab bar buttons**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从这个章节开始学习iOS应用开发中使用的有用术语，这些术语在本书中被广泛使用。接下来，你将浏览*Let's Eat*应用中使用的屏幕，并学习用户如何使用该应用。最后，你将开始使用Interface
    Builder重新创建应用的UI，从**标签栏**开始，允许用户在**探索**和**地图**屏幕之间进行选择。你将在两个屏幕的顶部添加导航栏。你还将学习如何配置应用启动时显示的**启动**屏幕，以及如何为**启动**屏幕和**标签栏按钮**使用自定义图标。
- en: By the end of this chapter, you'll have learned common terms used in iOS app
    development, what the flow of your app will look like, how to add resources to
    your app, and how to use Interface Builder to add, configure and position UI elements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习到iOS应用开发中常用的术语，了解你的应用流程将如何，以及如何向应用添加资源，以及如何使用Interface Builder添加、配置和定位UI元素。
- en: 'The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Learning useful terms in iOS development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习iOS开发中的有用术语
- en: Touring the *Let's Eat* app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览*Let's Eat*应用
- en: Creating a new Xcode project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的Xcode项目
- en: Setting up a tab bar controller scene
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置标签栏控制器场景
- en: Setting up the **Launch** screen
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置**启动**屏幕
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will create a new Xcode project, `LetsEat`, in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建一个新的Xcode项目，名为`LetsEat`。
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter09` folder of the code bundle for this book, which can be downloaded here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源文件和完成的Xcode项目位于本书代码包的`Chapter09`文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，看看代码的实际效果：
- en: '[https://bit.ly/3qcB2kO](https://bit.ly/3qcB2kO)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3qcB2kO](https://bit.ly/3qcB2kO)'
- en: Before you create the project, you'll learn some common terms used in iOS development.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目之前，你将学习一些在iOS开发中常用的术语。
- en: Learning useful terms in iOS development
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习iOS开发中的有用术语
- en: 'As you begin your journey into iOS app development, you will encounter special
    terms and definitions. Here are some of the most commonly used terms and definitions.
    Just read through them for now. Even though you may not understand everything
    yet, it will become clearer as you go along:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始iOS应用开发的旅程时，你将遇到特殊的术语和定义。以下是一些最常用的术语和定义。现在先阅读一下。即使你现在可能并不完全理解，但随着你的学习，它们会变得更加清晰：
- en: '`UIView` class or one of its subclasses. Anything you see on your screen (buttons,
    text fields, labels, and so on) is a view. You will use views to build your UI.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIView`类或其子类。你屏幕上看到的一切（按钮、文本字段、标签等）都是一个视图。你将使用视图来构建你的UI。'
- en: '`UIStackView` class, which is a subclass of `UIView`. It is used to group views
    together in a horizontal or vertical stack. This makes them easier to position
    on the screen using **Auto Layout**, which is described later in this section.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIStackView`类，它是`UIView`的子类。它用于将视图组合成水平或垂直堆叠，这使得它们更容易使用**自动布局**进行定位，这在本节后面将进行描述。'
- en: '`UIViewController` class. It determines what a view displays to the user, and
    what happens when a user interacts with a view. Every view controller has a `view`
    property, which contains a reference to a view.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIViewController` 类。它决定了视图向用户显示的内容，以及用户与视图交互时会发生什么。每个视图控制器都有一个 `view` 属性，其中包含对视图的引用。'
- en: '`UITableViewController` class, which is a subclass of the `UIViewController`
    class. Its `view` property has a reference to a `UITableView` instance (`UITableViewCell`
    instances (**table view cells**).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UITableViewController` 类，它是 `UIViewController` 类的子类。它的 `view` 属性指向一个 `UITableView`
    实例（`UITableViewCell` 实例，**表格视图单元**）。'
- en: 'The *Settings* app displays your device settings in a table view:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*设置*应用以表格视图的形式显示您的设备设置：'
- en: '![Figure 9.1: Settings app'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1：设置应用'
- en: '](img/Figure_9.01_B17469.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.01_B17469.jpg)'
- en: 'Figure 9.1: Settings app'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：设置应用
- en: As you can see, all of the different settings (**General**, **Accessibility**,
    **Privacy**, and so on) are displayed in table view cells inside the table view.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，所有不同的设置（**通用**、**辅助功能**、**隐私**等）都在表格视图的表格单元中显示。
- en: '`UICollectionViewController` class, which is a subclass of the `UIViewController`
    class. Its `view` property has a reference to a `UICollectionView` instance (`UICollectionViewCell`
    instances (**collection view cells**).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UICollectionViewController` 类，它是 `UIViewController` 类的子类。它的 `view` 属性指向一个
    `UICollectionView` 实例（`UICollectionViewCell` 实例，**集合视图单元**）。'
- en: 'The *Photos* app displays photos in a collection view:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*照片*应用以集合视图的形式显示照片：'
- en: '![Figure 9.2: Photos app'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2：照片应用'
- en: '](img/Figure_9.02_B17469.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.02_B17469.jpg)'
- en: 'Figure 9.2: Photos app'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：照片应用
- en: As you can see, thumbnail pictures are displayed in collection view cells inside
    the collection view.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，缩略图在集合视图的集合视图单元中显示。
- en: '`UINavigationController` class, which is a subclass of the `UIViewController`
    class. It has a `viewControllers` property that holds an array of view controllers.
    The view of the last view controller in the array appears onscreen, along with
    a navigation bar at the top of the screen.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UINavigationController` 类，它是 `UIViewController` 类的子类。它有一个 `viewControllers`
    属性，包含一个视图控制器数组。数组中最后一个视图控制器的视图显示在屏幕上，同时在屏幕顶部还有一个导航栏。'
- en: 'The table view controller in the *Settings* app is embedded in a navigation
    controller, and you can see the navigation bar above the table view:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*设置*应用中的表格视图控制器嵌入在导航控制器中，您可以看到表格视图上方的导航栏：'
- en: '![Figure 9.3: Navigation bar in Settings app'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3：设置应用中的导航栏'
- en: '](img/Figure_9.03_B17469.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B17469.jpg)'
- en: 'Figure 9.3: Navigation bar in Settings app'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：设置应用中的导航栏
- en: When you tap on a setting, the view controller for that setting is added to
    the array of view controllers assigned to the `viewControllers` property. The
    user sees the view for that view controller slide in from the right. Note the
    navigation bar at the top of the screen, which can hold a title and buttons. A
    **< Settings** button appears in the top left side of the navigation bar. Tapping
    this button returns you to the previous screen.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击设置时，该设置的视图控制器将被添加到分配给 `viewControllers` 属性的视图控制器数组中。用户会看到该视图控制器从右侧滑入。注意屏幕顶部的导航栏，它可以包含标题和按钮。一个
    **< 设置** 按钮出现在导航栏的左上角。点击此按钮将返回到上一个屏幕。
- en: '`UITabBarController` class, which is a subclass of the `UIViewController` class.
    It has a `viewControllers` property that holds an array of view controllers. The
    view of the first view controller in the array appears onscreen, along with a
    tab bar with buttons at the bottom. The button on the extreme left corresponds
    to the first view controller in the array and will be already selected. When you
    tap another button, the corresponding view controller is loaded, and its view
    appears on screen.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UITabBarController` 类，它是 `UIViewController` 类的子类。它有一个 `viewControllers` 属性，包含一个视图控制器数组。数组中第一个视图控制器的视图显示在屏幕上，同时还有一个底部带有按钮的标签栏。最左边的按钮对应于数组中的第一个视图控制器，并且已经被选中。当您点击另一个按钮时，相应的视图控制器将被加载，其视图将显示在屏幕上。'
- en: 'The *Photos* app uses a tab bar controller to display a row of buttons at the
    bottom of the screen:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*照片*应用使用标签栏控制器在屏幕底部显示一行按钮：'
- en: '![Figure 9.4: Tab bar in Photos app'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4：照片应用中的标签栏'
- en: '](img/Figure_9.04_B17469.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.04_B17469.jpg)'
- en: 'Figure 9.4: Tab bar in Photos app'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：照片应用中的标签栏
- en: Tapping each button in the tab bar will display a different screen.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击标签栏中的每个按钮将显示不同的屏幕。
- en: '**Model-View-Controller (MVC)**: This is a very common design pattern used
    in iOS app development. The user interacts with views onscreen. App data is stored
    in data model objects. Controllers manage the flow of information between views
    and data model objects. It will be discussed in detail in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194),
    *Getting Started with MVC and Collection Views*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器 (MVC)**：这是一个在 iOS 应用开发中非常常见的模式。用户与屏幕上的视图进行交互。应用数据存储在数据模型对象中。控制器管理视图和数据模型对象之间的信息流。它将在[*第
    13 章*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194)中详细讨论，*开始使用 MVC 和集合视图*。'
- en: '`Exploring Xcode` project that you created in [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016),
    *Getting Familiar with Xcode,* and click the `Main` storyboard file:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016)中创建的 `Exploring Xcode`
    项目中，点击 `Main` 故事板文件：
- en: '![Figure 9.5: Exploring Xcode project showing Main storyboard file'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5：探索 Xcode 项目，显示主故事板文件'
- en: '](img/Figure_9.05_B17469.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.05_B17469.jpg)'
- en: 'Figure 9.5: Exploring Xcode project showing Main storyboard file'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：探索 Xcode 项目，显示主故事板文件
- en: You'll see one scene in it, and when you run your app in the iOS Simulator,
    the contents of this scene will be displayed on the screen. You can have more
    than one scene in a storyboard file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个场景，当你你在 iOS 模拟器中运行你的应用时，这个场景的内容将显示在屏幕上。你可以在故事板文件中拥有多个场景。
- en: '`ExploringXcode` project does not have any segues since there is just one scene
    in its storyboard, but you will see them in a later part of this chapter.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExploringXcode` 项目在其故事板中只有一个场景，因此没有任何转换，但你将在本章的后续部分看到它们。'
- en: '**Auto Layout**: As a developer, you have to make sure that your app looks
    good on devices with different screen sizes. Auto Layout helps you lay out your
    user interface based on constraints you specify. For instance, you can set a constraint
    to make sure a button is centered on the screen regardless of screen size or make
    a text field expand when the device is rotated from portrait to landscape.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动布局**：作为一名开发者，你必须确保你的应用在不同屏幕尺寸的设备上看起来都很好。自动布局帮助你根据你指定的约束来布局你的用户界面。例如，你可以设置一个约束来确保按钮无论屏幕大小如何都居中显示，或者当设备从纵向旋转到横向时，使文本字段扩展。'
- en: Now that you are familiar with the terms used in iOS app development, let's
    take a tour through the app you will build.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了 iOS 应用开发中使用的术语，让我们浏览一下你将要构建的应用。
- en: Touring the Let's Eat app
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览 Let's Eat 应用
- en: Let's take a quick tour of the app that you will build. The *Let's Eat* app
    is a restaurant app that allows users to explore a list of restaurants categorized
    by cuisine or view a map showing all restaurants in a particular area. You'll
    see all the screens used in the app and its overall flow in the next sections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下你将要构建的应用。*Let's Eat* 应用是一个餐厅应用，允许用户探索按菜系分类的餐厅列表或查看显示特定区域内所有餐厅的地图。你将在下一节中看到应用中使用的所有屏幕及其整体流程。
- en: Tip
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You can see a video version of this app tour at this link: [https://bit.ly/3G0Pv7U](https://bit.ly/3G0Pv7U).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这个链接看到这个应用浏览的视频版本：[https://bit.ly/3G0Pv7U](https://bit.ly/3G0Pv7U)。
- en: Using the Explore screen
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用探索屏幕
- en: 'When the app is launched, you will see the **Explore** screen:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用启动时，你会看到**探索**屏幕：
- en: '![Figure 9.6: Explore screen'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6：探索屏幕'
- en: '](img/Figure_9.06_B17469.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.06_B17469.jpg)'
- en: 'Figure 9.6: Explore screen'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6：探索屏幕
- en: Let's study the different parts of this screen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究这个屏幕的不同部分。
- en: A `UITabBar` instance (tab bar) at the bottom of the screen displays `UICollectionReusableView`
    instance (section header) containing a **LOCATION** button is at the top of the
    screen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕底部的 `UITabBar` 实例（标签栏）显示包含位于屏幕顶部的**位置**按钮的 `UICollectionReusableView` 实例（部分标题）。
- en: Before you can pick a cuisine, you have to select a location by tapping the
    **LOCATION** button.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在你选择菜系之前，你必须通过点击**位置**按钮来选择一个位置。
- en: Using the Locations screen
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用位置屏幕
- en: 'When you tap the **LOCATION** button, you will see the **Locations** screen:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**位置**按钮时，你会看到**位置**屏幕：
- en: '![Figure 9.7: Locations screen'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7：位置屏幕'
- en: '](img/Figure_9.07_B17469.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.07_B17469.jpg)'
- en: 'Figure 9.7: Locations screen'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7：位置屏幕
- en: Let's study the different parts of this screen.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究这个屏幕的不同部分。
- en: A navigation bar at the top of the screen contains **Cancel** and **Done** buttons.
    A table view displays a list of locations in table view cells.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部有一个包含**取消**和**完成**按钮的导航栏。一个表格视图显示表格单元格中的位置列表。
- en: You have to tap a row to select a location and tap the **Done** button to confirm.
    Once you tap **Done**, you are returned to the **Explore** screen and can then
    pick a cuisine. You can also tap **Cancel** to return to the **Explore** screen
    without choosing a location.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须点击一行来选择位置，并点击**完成**按钮来确认。一旦点击**完成**，您将返回到**探索**屏幕，然后可以选择一种菜系。您也可以点击**取消**返回到**探索**屏幕而不选择位置。
- en: Using the Restaurant List screen
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用**餐厅列表**屏幕
- en: 'Once a location has been set (**ASPEN, CO** in this case), you can tap a cuisine.
    This displays the **Restaurant List** screen:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了位置（本例中为**ASPEN, CO**），您可以点击一个菜系。这将显示**餐厅列表**屏幕：
- en: '![Figure 9.8: Restaurant List screen'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8：餐厅列表屏幕'
- en: '](img/Figure_9.08_B17469.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.08_B17469.jpg)'
- en: 'Figure 9.8: Restaurant List screen'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：餐厅列表屏幕
- en: Let's study the different parts of this screen.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一下这个屏幕的不同部分。
- en: A navigation bar at the top of the screen contains a **Back** button. A collection
    view displays a list of restaurants at that location offering the selected cuisine,
    in collection view cells.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部的导航栏包含一个**返回**按钮。一个集合视图在该位置显示提供所选菜系的餐厅列表，在集合视图中显示。
- en: You have to tap a restaurant to see its details. You can also tap the **Back**
    button to return to the **Explore** screen without choosing a restaurant.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须点击一个餐厅来查看其详情。您也可以点击**返回**按钮返回到**探索**屏幕而不选择餐厅。
- en: Using the Restaurant Detail screen
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用**餐厅详情**屏幕
- en: 'Tapping on a restaurant on the **Restaurant List** screen displays details
    of that restaurant on the **Restaurant Detail** screen:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**餐厅列表**屏幕上的餐厅会显示该餐厅在**餐厅详情**屏幕上的详细信息：
- en: '![Figure 9.9: Restaurant Detail screen'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9：餐厅详情屏幕'
- en: '](img/Figure_9.09_B17469.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.09_B17469.jpg)'
- en: 'Figure 9.9: Restaurant Detail screen'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：餐厅详情屏幕
- en: Let's study the different parts of this screen.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一下这个屏幕的不同部分。
- en: A navigation bar at the top of the screen contains a button showing the location
    (**ASPEN, CO** in this case). A table view displays the restaurant's location,
    rating, customer reviews, photo reviews, and a location map in table view cells.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部的导航栏包含一个显示位置（本例中为**ASPEN, CO**）的按钮。一个表格视图在表格视图中显示餐厅的位置、评分、顾客评论、照片评论和位置地图。
- en: You can tap the **ASPEN, CO** button to return to the **Restaurant List** screen
    or tap the **Add Review** or **Add Photo** button to display the **Review Form**
    or **Photo Filter** screens.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击**ASPEN, CO**按钮返回到**餐厅列表**屏幕，或点击**添加评论**或**添加照片**按钮来显示**评论表单**或**照片滤镜**屏幕。
- en: Using the Review Form screen
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用**查看表单**屏幕
- en: 'Tapping on the **Add Review** button displays the **Review Form** screen:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加评论**按钮会显示**评论表单**屏幕：
- en: '![Figure 9.10: Review Form screen'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.10：评论表单屏幕'
- en: '](img/Figure_9.10_B17469.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.10_B17469.jpg)'
- en: 'Figure 9.10: Review Form screen'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：评论表单屏幕
- en: Let's study the different parts of this screen.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一下这个屏幕的不同部分。
- en: A navigation bar at the top of the screen contains **Cancel** and **Save** buttons.
    A table view displays a rating and text fields in table view cells.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部的导航栏包含**取消**和**保存**按钮。一个表格视图在表格视图中显示评分和文本字段。
- en: You can set a rating and write a review for the restaurant on this screen. You
    can then tap the **Save** button to save your rating and review or the **Cancel**
    button to return to the **Restaurant Detail** screen without saving.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在该屏幕上为餐厅设置评分并撰写评论。然后，您可以点击**保存**按钮来保存您的评分和评论，或点击**取消**按钮不保存直接返回**餐厅详情**屏幕。
- en: Using the Photo Filter screen
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用**照片滤镜**屏幕
- en: 'Tapping on the **Add Photo** button displays the **Photo Filter** screen:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加照片**按钮会显示**照片滤镜**屏幕：
- en: '![Figure 9.11: Photo Filter screen'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11：照片滤镜屏幕'
- en: '](img/Figure_9.11_B17469.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B17469.jpg)'
- en: 'Figure 9.11: Photo Filter screen'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：照片滤镜屏幕
- en: Let's study the different parts of this screen.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究一下这个屏幕的不同部分。
- en: A navigation bar at the top of the screen contains **Cancel**, **Camera** and
    **Save** buttons. An image view displays a picture, and a collection view displays
    photo filters in collection view cells.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕顶部的导航栏包含**取消**、**相机**和**保存**按钮。一个图像视图显示一张图片，一个集合视图在集合视图中显示照片滤镜。
- en: You can choose a picture and apply a filter to it on this screen. You can then
    tap the **Save** button to save your picture or the **Cancel** button to return
    to the **Restaurant Detail** screen without saving.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在该屏幕上选择一张图片并对其应用滤镜。然后，您可以点击**保存**按钮来保存您的图片，或点击**取消**按钮不保存直接返回**餐厅详情**屏幕。
- en: Using the Map screen
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用**地图**屏幕
- en: 'Tapping the **Map** button in the tab bar displays the **Map** screen:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 点击标签栏中的 **地图** 按钮将显示 **地图** 屏幕：
- en: '![Figure 9.12: Map screen'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12：地图屏幕'
- en: '](img/Figure_9.12_B17469.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.12_B17469.jpg)'
- en: 'Figure 9.12: Map screen'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12：地图屏幕
- en: Let's study the different parts of this screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们研究这个屏幕的不同部分。
- en: A tab bar at the bottom of the screen displays `MKMapView` instance (map view)
    displaying a map on the screen, with pins indicating restaurant locations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕底部的一个标签栏显示 `MKMapView` 实例（地图视图），在屏幕上显示地图，并用图钉指示餐厅位置。
- en: Tapping a pin will display an annotation and tapping the button in the annotation
    will display the **Restaurant Detail** screen for that restaurant.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 点击一个图钉将显示一个注释，点击注释中的按钮将显示该餐厅的 **餐厅详情** 屏幕。
- en: This completes the tour of the app. Now, it's time to start building the UI
    for your app!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了应用的浏览。现在，是时候开始构建您应用的 UI 了！
- en: Creating a new Xcode project
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 Xcode 项目
- en: 'Now that you know what the screens of the app are going to look like, you can
    start building your app. Let''s begin by creating a new project. This is the same
    process you used to create the `ExploringXcode` project in [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016),
    *Getting Familiar with Xcode*. Follow these steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经知道了应用屏幕的样式，您就可以开始构建您的应用了。让我们先创建一个新的项目。这与您在 [*第 1 章*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016)，*熟悉
    Xcode* 中创建 `ExploringXcode` 项目所使用的相同过程。按照以下步骤操作：
- en: Launch Xcode and click **Create a new Xcode project**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Xcode 并点击 **创建一个新的 Xcode 项目**。
- en: '**iOS** should already be selected. Choose **App** and click **Next**.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**iOS** 应已选中。选择 **App** 并点击 **下一步**。'
- en: The `LetsEat`
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LetsEat`'
- en: '`com.` followed by your own name'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`com.` 后跟您的名字'
- en: '`Storyboard`'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Storyboard`'
- en: Leave the rest of the settings at their default values. Click **Next**.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其余设置保留为默认值。点击 **下一步**。
- en: Choose a location to save your project and click **Create**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个位置来保存您的项目并点击 **创建**。
- en: You'll be using the iPhone SE (2nd generation) iOS simulator as a test device.
    In the **Scheme** menu, choose the **iPhone SE (2**nd **generation)** simulator.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将使用 iPhone SE (第 2 代) iOS 模拟器作为测试设备。在 **方案** 菜单中，选择 **iPhone SE (第 2 代**) 模拟器。
- en: Build and run your app. You will see a blank white screen. If you click the
    `Main` storyboard file in the Project navigator, you will see that it contains
    a single scene containing a blank view. This is why you only see a blank white
    screen when you run the app.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。您将看到一个空白白色屏幕。如果您在项目导航器中点击 `Main` 故事板文件，您将看到它包含一个包含空白视图的单个场景。这就是为什么您运行应用时只看到一个空白白色屏幕的原因。
- en: To configure the UI, you will modify the `Main` storyboard file using Interface
    Builder. Interface Builder allows you to add and configure scenes. Each scene
    represents a screen the user will see. You can add UI objects such as views and
    buttons to a scene, and configure them as required using the **Attributes inspector**.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置 UI，您将使用 Interface Builder 修改 `Main` 故事板文件。Interface Builder 允许您添加和配置场景。每个场景代表用户将看到的屏幕。您可以将
    UI 对象，如视图和按钮，添加到场景中，并使用 **属性检查器** 配置它们。
- en: Important Information
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on how to use Interface Builder, visit this link: [https://help.apple.com/xcode/mac/current/#/dev31645f17f](https://help.apple.com/xcode/mac/current/#/dev31645f17f).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用 Interface Builder 的更多信息，请访问此链接：[https://help.apple.com/xcode/mac/current/#/dev31645f17f](https://help.apple.com/xcode/mac/current/#/dev31645f17f)。
- en: Now that you've created your project, you will add a tab bar controller scene
    to it. This scene displays a tab bar with two tabs at the bottom of the screen.
    Tapping a tab will display the screen associated with it. These screens correspond
    to the **Explore** and **Map** screens shown in the app tour. Let's see how to
    do this in the next section.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了项目，您将向其中添加一个标签栏控制器场景。这个场景在屏幕底部显示一个标签栏，其中包含两个标签。点击一个标签将显示与之关联的屏幕。这些屏幕对应于应用浏览中显示的
    **探索** 和 **地图** 屏幕。让我们在下一节中看看如何做到这一点。
- en: Setting up a tab bar controller scene
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置标签栏控制器场景
- en: 'As you saw in the app tour, the *Let''s Eat* app has a tab bar with two buttons
    at the bottom of the screen, which are used to display the `ViewController` Swift
    file and add a tab bar controller scene with two buttons to your project. Follow
    these steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在应用浏览中看到的，*Let's Eat* 应用在屏幕底部有一个标签栏，其中包含两个按钮，用于显示 `ViewController` Swift 文件，并将带有两个按钮的标签栏控制器场景添加到项目中。按照以下步骤操作：
- en: 'Click the `Main` storyboard file in the Project navigator:![Figure 9.14: Project
    navigator with Main storyboard file selected'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击 `Main` 故事板文件：![图 9.14：已选择 Main 故事板文件的项目导航器
- en: '](img/Figure_9.14_B17469.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.14_B17469.jpg)'
- en: 'Figure 9.14: Project navigator with Main storyboard file selected'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.14：项目导航器，已选择主故事板文件
- en: 'The contents of the `Main` storyboard file appear in the Editor area. Click
    the Document Outline button to collapse the document outline if it is present.
    This gives you more room to work with:![Figure 9.15: Editing area with the Document
    Outline button shown'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Main`故事板文件的内容出现在编辑区域。如果存在，点击文档大纲按钮以折叠文档大纲。这为你提供了更多的工作空间：![图9.15：显示文档大纲按钮的编辑区域'
- en: '](img/Figure_9.15_B17469.jpg)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.15_B17469.jpg)'
- en: 'Figure 9.15: Editing area with the Document Outline button shown'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.15：显示文档大纲按钮的编辑区域
- en: 'Click the **+** button to open the **library**:![Figure 9.16: Toolbar with
    the Library button shown'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**+**按钮打开**库**：![图9.16：显示库按钮的工具栏
- en: '](img/Figure_9.16_B17469.jpg)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.16_B17469.jpg)'
- en: 'Figure 9.16: Toolbar with the Library button shown'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.16：显示库按钮的工具栏
- en: The library allows you to pick UI objects to be added to a scene.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 库允许你选择要添加到场景中的UI对象。
- en: 'Type `tabbar` in the filter field. A **Tab Bar Controller** object will appear
    in the list of results:![Figure 9.17: Library with Tab Bar Controller object selected'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器字段中输入`tabbar`。一个**Tab Bar Controller**对象将出现在结果列表中：![图9.17：选中标签栏控制器对象的库
- en: '](img/Figure_9.17_B17469.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.17_B17469.jpg)'
- en: 'Figure 9.17: Library with Tab Bar Controller object selected'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.17：选中标签栏控制器对象的库
- en: 'Drag the **Tab Bar Controller** object to the storyboard to add a new tab bar
    controller scene. It''s okay if it covers the existing view controller scene.
    You can see it consists of a scene with two arrows representing segues leading
    to two more scenes:![Figure 9.18: Main storyboard file with tab bar controller
    scene added'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Tab Bar Controller**对象拖动到故事板中，以添加一个新的标签栏控制器场景。如果它覆盖了现有的视图控制器场景，那也是可以的。你可以看到它由一个场景组成，其中包含两个箭头，代表通向两个更多场景的转换：![图9.18：添加了标签栏控制器场景的主故事板文件
- en: '](img/Figure_9.18_B17469.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.18_B17469.jpg)'
- en: 'Figure 9.18: Main storyboard file with tab bar controller scene added'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.18：添加了标签栏控制器场景的主故事板文件
- en: 'Click the **-** button to zoom out, and rearrange the scenes in the storyboard
    so that both the tab bar controller scene and the view controller scene are visible:![Figure
    9.19: Editing area with zoom out button shown'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**-**按钮以缩小视图，并重新排列故事板中的场景，以便标签栏控制器场景和视图控制器场景都可见：![图9.19：显示缩小按钮的编辑区域
- en: '](img/Figure_9.19_B17469.jpg)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.19_B17469.jpg)'
- en: 'Figure 9.19: Editing area with zoom out button shown'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.19：显示缩小按钮的编辑区域
- en: 'Select the arrow pointing to the view controller scene as shown. This arrow
    determines the initial view controller scene of your app, making the view appear
    when the app is launched:![Figure 9.20: Editing area with arrow showing initial
    view controller scene'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示选择指向视图控制器场景的箭头。这个箭头决定了你的应用的初始视图控制器场景，使得应用启动时视图出现：![图9.20：编辑区域，箭头显示初始视图控制器场景
- en: '](img/Figure_9.20_B17469.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.20_B17469.jpg)'
- en: 'Figure 9.20: Editing area with arrow showing initial view controller scene'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.20：编辑区域，箭头显示初始视图控制器场景
- en: 'Drag the arrow from the view controller scene to the tab bar controller scene
    as shown. This makes the tab bar controller scene the initial scene, and the tab
    bar will appear when you launch the app:![Figure 9.21: Editing area with tab bar
    controller scene as initial view controller'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示，从视图控制器场景拖动箭头到标签栏控制器场景。这使得标签栏控制器场景成为初始场景，当你启动应用时会出现标签栏：![图9.21：编辑区域，标签栏控制器场景作为初始视图控制器
- en: '](img/Figure_9.21_B17469.jpg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.21_B17469.jpg)'
- en: 'Figure 9.21: Editing area with tab bar controller scene as initial view controller'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.21：编辑区域，标签栏控制器场景作为初始视图控制器
- en: Tip
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also make the tab bar controller scene the initial view controller scene
    by selecting it, clicking the Attributes inspector button, and ticking the **is
    Initial View Controller** checkbox. You'll learn more about the Attributes inspector
    in the next section.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也可以通过选择它，点击属性检查器按钮，并勾选**is Initial View Controller**复选框，将标签栏控制器场景设置为初始视图控制器场景。你将在下一节中了解更多关于属性检查器的内容。
- en: Select the existing view controller scene in the storyboard and press *Delete*
    on the keyboard to remove it, as you won't be using it for this project.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在故事板中选择现有的视图控制器场景，然后在键盘上按*Delete*键将其删除，因为你不会在这个项目中使用它。
- en: 'Select the `ViewController` file in the Project navigator and press *Delete*
    on the keyboard to remove it, as you won''t be using it for this project:![Figure
    9.22: Project navigator showing the file to be deleted'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中选择`ViewController`文件，然后在键盘上按*Delete*键将其删除，因为您不会在这个项目中使用它：![图 9.22：项目导航器显示要删除的文件
- en: '](img/Figure_9.22_B17469.jpg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.22_B17469.jpg)'
- en: 'Figure 9.22: Project navigator showing the file to be deleted'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.22：项目导航器显示要删除的文件
- en: 'Click **Move to Trash** in the dialog box that pops up:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击弹出的对话框中的**移动到废纸篓**：
- en: '![Figure 9.23: Move to Trash dialog box'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.23：移动到废纸篓对话框'
- en: '](img/Figure_9.23_B17469.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.23_B17469.jpg)'
- en: 'Figure 9.23: Move to Trash dialog box'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.23：移动到废纸篓对话框
- en: 'Build and run your app in the iOS simulator, and you''ll see the tab bar with
    two buttons at the bottom of the screen:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 模拟器中构建并运行您的应用，您将在屏幕底部看到带有两个按钮的标签栏：
- en: '![Figure 9.24: iOS simulator showing tab bar with two buttons'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.24：iOS 模拟器显示带有两个按钮的标签栏'
- en: '](img/Figure_9.24_B17469.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.24_B17469.jpg)'
- en: 'Figure 9.24: iOS simulator showing tab bar with two buttons'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.24：iOS 模拟器显示带有两个按钮的标签栏
- en: You have successfully added a tab bar to your project, but as you can see, the
    button titles are currently **Item 1** and **Item 2**. You will change them to
    **Explore** and **Map** in the next section.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将标签栏添加到项目中，但如您所见，按钮标题目前为**项目 1**和**项目 2**。您将在下一节中将它们更改为**探索**和**地图**。
- en: Setting the titles of the tab bar's buttons
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置标签栏按钮的标题
- en: 'Your app now displays a tab bar at the bottom of the screen, but the button
    titles do not match those shown in the app tour. To make them match, you will
    configure the button titles to **Explore** and **Map** in the Attributes inspector.
    Follow these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用现在在屏幕底部显示了一个标签栏，但按钮标题与应用导览中显示的不匹配。为了使它们匹配，您将在属性检查器中将按钮标题配置为**探索**和**地图**。按照以下步骤操作：
- en: 'Click the `Main` storyboard file in the Project navigator. Click the Document
    Outline button to show the document outline. Click **Item 1 Scene** in the document
    outline:![Figure 9.25: Document outline showing Item 1 scene selected'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中点击`Main`故事板文件。点击文档大纲按钮以显示文档大纲。在文档大纲中点击**项目 1 场景**：![图 9.25：文档大纲显示选中的项目
    1 场景
- en: '](img/Figure_9.25_B17469.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.25_B17469.jpg)'
- en: 'Figure 9.25: Document outline showing Item 1 scene selected'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.25：文档大纲显示选中的项目 1 场景
- en: 'Click the **Item 1** button under **Item 1 Scene**. Click the Attributes inspector
    button:![Figure 9.26: Attributes inspector selected'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**项目 1 场景**下的**项目 1**按钮。点击属性检查器按钮：![图 9.26：属性检查器被选中
- en: '](img/Figure_9.26_B17469.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.26_B17469.jpg)'
- en: 'Figure 9.26: Attributes inspector selected'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.26：属性检查器被选中
- en: 'Under `Explore`:![Figure 9.27: Attributes inspector with Title set to Explore'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`探索`下：![图 9.27：属性检查器标题设置为探索
- en: '](img/Figure_9.27_B17469.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.27_B17469.jpg)'
- en: 'Figure 9.27: Attributes inspector with Title set to Explore'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.27：属性检查器标题设置为探索
- en: 'Click the `Map`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`地图`：
- en: '![Figure 9.28: Attributes inspector with Title set to Map'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.28：属性检查器标题设置为地图'
- en: '](img/Figure_9.28_B17469.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.28_B17469.jpg)'
- en: 'Figure 9.28: Attributes inspector with Title set to Map'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.28：属性检查器标题设置为地图
- en: Build and run your app in the Simulator. You'll see the titles for the buttons
    have changed to **Explore** and **Map**, respectively. Great!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在模拟器中构建并运行您的应用。您会看到按钮的标题已分别更改为**探索**和**地图**。太棒了！
- en: Tapping the **Explore** and **Map** buttons will display the scenes for the
    **Explore** and **Map** screens. As shown in the app tour, if you tap the **LOCATION**
    button on the **Explore** screen, you will see a navigation bar at the top of
    the **Locations** screen containing the **Cancel** and **Done** buttons. You'll
    also see an empty navigation bar at the top of the **Map** screen. As you have
    seen in the app tour, some screens have titles and buttons in the navigation bar.
    In the next section, you will learn how to add navigation bars to your screens,
    so you can add buttons and titles to them later as required.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**探索**和**地图**按钮将显示**探索**和**地图**屏幕的场景。如应用导览所示，如果您在**探索**屏幕上点击**位置**按钮，您将在**位置**屏幕的顶部看到一个包含**取消**和**完成**按钮的导航栏。您还会在**地图**屏幕的顶部看到一个空白的导航栏。如您在应用导览中所见，一些屏幕在导航栏中有标题和按钮。在下一节中，您将学习如何向您的屏幕添加导航栏，这样您就可以根据需要稍后添加按钮和标题。
- en: Embedding view controllers in navigation controllers
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在导航控制器中嵌入视图控制器
- en: 'As you saw in the app tour, the **Explore** and **Map** screens both have a
    navigation bar at the top of the screen. To add the navigation bars for both screens,
    you will embed the view controllers of the **Explore** and **Map** scenes in a
    navigation controller. This will make navigation bars appear at the top of the
    screen when the **Explore** and **Map** screens are displayed. Follow these steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在应用游览中看到的，**探索** 和 **地图** 屏幕在屏幕顶部都有一个导航栏。要为两个屏幕添加导航栏，您需要将 **探索** 和 **地图**
    场景的视图控制器嵌入到导航控制器中。这将使得当 **探索** 和 **地图** 屏幕显示时，导航栏会出现在屏幕顶部。按照以下步骤操作：
- en: 'Click **Explore Scene** in the document outline:![Figure 9.29: Document outline
    with Explore Scene selected'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中点击 **探索场景**：![图 9.29：已选择探索场景的文档大纲
- en: '](img/Figure_9.29_B17469.jpg)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.29_B17469.jpg)'
- en: 'Figure 9.29: Document outline with Explore Scene selected'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.29：已选择探索场景的文档大纲
- en: 'Choose **Editor** | **Embed In** | **Navigation Controller**:![Figure 9.30:
    Editor menu with Embed In | Navigation Controller selected'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **编辑器** | **嵌入** | **导航控制器**：![图 9.30：已选择嵌入 | 导航控制器的编辑器菜单
- en: '](img/Figure_9.30_B17469.jpg)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.30_B17469.jpg)'
- en: 'Figure 9.30: Editor menu with Embed In | Navigation Controller selected'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.30：已选择嵌入 | 导航控制器的编辑器菜单
- en: 'A navigation controller scene appears between the **Tab Bar Controller Scene**
    and the **Explore Scene**:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个导航控制器场景出现在 **标签栏控制器场景** 和 **探索场景** 之间：
- en: '![Figure 9.31: Editing area showing navigation controller scene added'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.31：显示已添加导航控制器场景的编辑区域'
- en: '](img/Figure_9.31_B17469.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.31_B17469.jpg)'
- en: 'Figure 9.31: Editing area showing navigation controller scene added'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.31：显示已添加导航控制器场景的编辑区域
- en: Build and run your app. The **Explore** screen now has a navigation bar but
    since it is the same color as the background, it is not apparent on the screen.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。现在 **探索** 屏幕上有一个导航栏，但由于它与背景颜色相同，所以在屏幕上不明显。
- en: Embedding a view controller in a navigation controller adds that view controller
    to the navigation controller's `viewControllers` array. The navigation controller
    then displays the view controller's view on the screen. The navigation controller
    also displays a navigation bar at the top of the screen.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航控制器中嵌入视图控制器会将该视图控制器添加到导航控制器的 `viewControllers` 数组中。然后导航控制器在屏幕上显示视图控制器的视图。导航控制器还会在屏幕顶部显示导航栏。
- en: 'The **Map** screen does not have a navigation bar yet. Let''s add one now.
    Follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**地图** 屏幕目前还没有导航栏。现在让我们添加一个。按照以下步骤操作：'
- en: 'Click **Map Scene** in the document outline:![Figure 9.32: Document outline
    with Map Scene selected'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中点击 **地图场景**：![图 9.32：已选择地图场景的文档大纲
- en: '](img/Figure_9.32_B17469.jpg)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.32_B17469.jpg)'
- en: 'Figure 9.32: Document outline with Map Scene selected'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.32：已选择地图场景的文档大纲
- en: Choose **Editor** | **Embed In** | **Navigation Controller**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **编辑器** | **嵌入** | **导航控制器**。
- en: 'A navigation controller scene appears between the **Tab Bar Controller Scene**
    and the **Map Scene**:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个导航控制器场景出现在 **标签栏控制器场景** 和 **地图场景** 之间：
- en: '![Figure 9.33: Editing area showing navigation controller scene added'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.33：显示已添加导航控制器场景的编辑区域'
- en: '](img/Figure_9.33_B17469.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_9.33_B17469.jpg)'
- en: 'Figure 9.33: Editing area showing navigation controller scene added'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.33：显示已添加导航控制器场景的编辑区域
- en: Build and run your app. Both Explore and Map screens now have a navigation bar,
    even though you can't see them right now.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。现在探索和地图屏幕都有导航栏，尽管您现在看不到它们。
- en: The tab bar buttons can switch between the **Explore** and **Map** screens,
    and each screen now has a navigation bar. The button titles are correct but the
    buttons themselves do not have icons. To get the button icons, you will add a
    file containing all of the graphics assets required for your project in the next
    section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 标签栏按钮可以在 **探索** 和 **地图** 屏幕之间切换，并且每个屏幕现在都有一个导航栏。按钮标题是正确的，但按钮本身没有图标。要获取按钮图标，您将在下一节中添加包含项目所需所有图形资源的文件。
- en: Adding the Assets.xcassets file
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Assets.xcassets 文件
- en: 'The `Assets.xcassets` file contains resources, such as app icons and custom
    images, for your project. It is currently empty as you just created this project.
    You will need to download the `Assets.xcassets` file in the `Chapter09` folder
    (which contains all of the resources for the *Let''s Eat* app) from this link
    if you have not yet done so:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`Assets.xcassets` 文件包含项目资源，例如应用图标和自定义图片。由于您刚刚创建了此项目，它目前是空的。如果您还没有这样做，您需要从以下链接下载
    `Assets.xcassets` 文件（它包含 *Let''s Eat* 应用程序的所有资源）：'
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
- en: 'Once you have downloaded the file, you can add it to your project by following
    these steps:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，您可以按照以下步骤将其添加到项目中：
- en: 'You have to remove the existing `Assets.xcassets` file (shown as **Assets**
    in the Project navigator) from your project. Select it in the Project navigator
    and press the *Delete* key to remove it:![Figure 9.34: Project navigator showing
    file to be removed'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须从项目中删除现有的 `Assets.xcassets` 文件（在项目导航器中显示为**Assets**），选择它并在项目导航器中按 *Delete*
    键删除：![图 9.34：项目导航器显示要删除的文件
- en: '](img/Figure_9.34_B17469.jpg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.34_B17469.jpg)'
- en: 'Figure 9.34: Project navigator showing file to be removed'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.34：项目导航器显示要删除的文件
- en: Click **Move to Trash** in the dialog box that pops up.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的对话框中点击**移动到废纸篓**。
- en: 'Open the `Chapter09` folder inside the code bundle files you downloaded. You
    will see `Assets.xcassets` inside:![Figure 9.35: Assets.xcassets file from the
    downloaded code bundle'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您下载的代码包文件中的 `Chapter09` 文件夹。您将看到其中的 `Assets.xcassets`：![图 9.35：下载的代码包中的 Assets.xcassets
    文件
- en: '](img/Figure_9.35_B17469.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.35_B17469.jpg)'
- en: 'Figure 9.35: Assets.xcassets file from the downloaded code bundle'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.35：下载的代码包中的 Assets.xcassets 文件
- en: 'Drag the new `Assets.xcassets` file to the Project navigator area. The **Choose
    options for adding these files** dialog box appears. Tick the **Copy items if
    needed** checkbox. Tick the **Create groups** radio button. Leave the rest of
    the settings at their default values. Click **Finish**:![Figure 9.36: Choose options
    for adding these files dialog box'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的 `Assets.xcassets` 文件拖动到项目导航器区域。将出现**选择添加这些文件的选项**对话框。勾选**如果需要则复制项目**复选框。勾选**创建组**单选按钮。将其他设置保留为默认值。点击**完成**：![图
    9.36：选择添加这些文件的选项对话框
- en: '](img/Figure_9.36_B17469.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.36_B17469.jpg)'
- en: 'Figure 9.36: Choose options for adding these files dialog box'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.36：选择添加这些文件的选项对话框
- en: 'The `Assets.xcassets` file has been added to your project. Note that it appears
    as `Assets` in the Project navigator. Click it to see its contents:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Assets.xcassets` 文件已添加到您的项目中。请注意，它在项目导航器中显示为 `Assets`。点击它以查看其内容：'
- en: '![Figure 9.37: Project navigator with Assets.xcassets selected'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.37：已选择 Assets.xcassets 的项目导航器'
- en: '](img/Figure_9.37_B17469.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.37_B17469.jpg)'
- en: 'Figure 9.37: Project navigator with Assets.xcassets selected'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.37：已选择 Assets.xcassets 的项目导航器
- en: Among the graphics assets included are icons for the tab bar buttons. You'll
    add the icons for the **Explore** and **Map** buttons in the next section.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在图形资源中的图标包括标签栏按钮的图标。您将在下一节中添加**探索**和**地图**按钮的图标。
- en: Adding the icons for the Explore and Map buttons
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加探索和地图按钮的图标
- en: 'The `Assets.xcassets` folder. Add them to the buttons now by following these
    steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`Assets.xcassets` 文件夹。按照以下步骤将它们添加到按钮中：'
- en: 'Click the `Main` storyboard file. Click the **Explore** button under **Explore
    Scene** in the document outline. Click the Attributes inspector button:![Figure
    9.38: Attributes inspector for the Explore button selected'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Main` 故事板文件。在文档大纲中的**探索场景**下点击**探索**按钮。点击属性检查器按钮：![图 9.38：已选择的探索按钮的属性检查器
- en: '](img/Figure_9.38_B17469.jpg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.38_B17469.jpg)'
- en: 'Figure 9.38: Attributes inspector for the Explore button selected'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.38：已选择的探索按钮的属性检查器
- en: 'Under `icon-explore-on`:![Figure 9.39: Attributes inspector with Image set
    to icon-explore-on'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `icon-explore-on` 下：![图 9.39：属性检查器中图像设置为 icon-explore-on
- en: '](img/Figure_9.39_B17469.jpg)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.39_B17469.jpg)'
- en: 'Figure 9.39: Attributes inspector with Image set to icon-explore-on'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.39：属性检查器中图像设置为 icon-explore-on
- en: 'Click the `icon-map-on`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `icon-map-on`：
- en: '![Figure 9.40: Attributes inspector with Image set to icon-map-on'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.40：属性检查器中图像设置为 icon-map-on'
- en: '](img/Figure_9.40_B17469.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.40_B17469.jpg)'
- en: 'Figure 9.40: Attributes inspector with Image set to icon-map-on'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.40：属性检查器中图像设置为 icon-map-on
- en: 'Build and run your app. You can see the Explore and Map buttons now have icons:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用。您现在可以看到探索和地图按钮现在有了图标：
- en: '![Figure 9.41: iOS simulator showing Explore and Map buttons with icons'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.41：iOS 模拟器显示带有图标的探索和地图按钮'
- en: '](img/Figure_9.41_B17469.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.41_B17469.jpg)'
- en: 'Figure 9.41: iOS simulator showing Explore and Map buttons with icons'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.41：iOS 模拟器显示带有图标的探索和地图按钮
- en: Congratulations! You've just configured the tab bar for your app!
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚已为您应用配置了标签栏！
- en: When your app is launched, you may see a white screen briefly before you see
    the tab bar. This screen is called the **Launch** screen, and it's displayed briefly
    as your app is starting. You'll learn how to configure this screen to display
    a custom color and app logo in the next section.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的应用启动时，你可能会在看到标签栏之前短暂地看到一个白色屏幕。这个屏幕被称为**启动**屏幕，当你的应用启动时会短暂显示。你将在下一节学习如何配置这个屏幕以显示自定义颜色和应用程序徽标。
- en: Setting up the Launch screen
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置启动屏幕
- en: The `LaunchScreen` storyboard file in your project. This file is automatically
    created when you create an Xcode project.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你项目中的`LaunchScreen`故事板文件。当你创建Xcode项目时，此文件会自动创建。
- en: You will create a new custom color for this screen, add an icon from the `Assets.xcassets`
    folder, and set the icon's location using Auto Layout constraints.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为这个屏幕创建一个新的自定义颜色，从`Assets.xcassets`文件夹中添加一个图标，并使用自动布局约束设置图标的定位。
- en: Important Information
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'For more information on Auto Layout and how to use it, see this link: [https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/).'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自动布局及其使用方法的更多信息，请参阅此链接：[https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/).
- en: You'll start by creating a new custom color in the next section.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在下一节创建一个新的自定义颜色。
- en: Configuring the Launch screen's background color
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置启动屏幕的背景颜色
- en: 'The Attributes inspector can be used to modify the colors of the UI elements
    on screen. You can specify the precise color you want by using custom red, green
    and blue values. You''ll set a custom color for the Launch screen by following
    these steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 属性检查器可以用来修改屏幕上UI元素的颜色。你可以通过使用自定义的红色、绿色和蓝色值来指定你想要的精确颜色。你将通过以下步骤为启动屏幕设置自定义颜色：
- en: 'Click the `Launchscreen` storyboard file in your Project navigator:![Figure
    9.42: Project navigator with LaunchScreen storyboard selected'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目导航器中点击`Launchscreen`故事板文件：![图9.42：选择LaunchScreen故事板的项目导航器
- en: '](img/Figure_9.42_B17469.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.42_B17469.jpg)'
- en: 'Figure 9.42: Project navigator with LaunchScreen storyboard selected'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.42：选择LaunchScreen故事板的项目导航器
- en: 'Select **View** in the document outline. Click the Attributes inspector button.
    Under **View**, click the **Background** pop-up menu:![Figure 9.43: Attributes
    inspector with Background attribute selected'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档大纲中选择**视图**。点击属性检查器按钮。在**视图**下，点击**背景**弹出菜单：![图9.43：选择背景属性的属性检查器
- en: '](img/Figure_9.43_B17469.jpg)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.43_B17469.jpg)'
- en: 'Figure 9.43: Attributes inspector with Background attribute selected'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.43：选择背景属性的属性检查器
- en: 'Choose **Custom...** from the pop-up menu:![Figure 9.44: Background pop-up
    menu with Custom... selected'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从弹出菜单中选择**自定义...**：![图9.44：选择自定义...的背景弹出菜单
- en: '](img/Figure_9.44_B17469.jpg)'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.44_B17469.jpg)'
- en: 'Figure 9.44: Background pop-up menu with Custom... selected'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.44：选择自定义...的背景弹出菜单
- en: 'In the color picker, choose the second tab (the one with the three sliders):![Figure
    9.45: Color picker with the second tab selected'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在颜色选择器中，选择第二个标签（带有三个滑块的标签）：![图9.45：选择第二个标签的颜色选择器
- en: '](img/Figure_9.45_B17469.jpg)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.45_B17469.jpg)'
- en: 'Figure 9.45: Color picker with the second tab selected'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.45：选择第二个标签的颜色选择器
- en: 'Select `4A4A4A` in the **Hex Color** # box:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在**十六进制颜色** # 框中选中`4A4A4A`：'
- en: '![Figure 9.46: Color picker showing Hex Color # set to 4A4A4A'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.46：显示十六进制颜色#设置为4A4A4A的颜色选择器'
- en: '](img/Figure_9.46_B17469.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.46_B17469.jpg)'
- en: 'Figure 9.46: Color picker showing Hex Color # set to 4A4A4A'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.46：显示十六进制颜色#设置为4A4A4A的颜色选择器
- en: A color consists of red, green and blue. The range of values for each color
    from `0` to `255`. This hex value sets the red, green and blue values to `74`,
    resulting in a pleasant dark gray color.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色由红色、绿色和蓝色组成。每种颜色的值范围从`0`到`255`。这个十六进制值将红色、绿色和蓝色值设置为`74`，从而得到一种令人愉悦的深灰色。
- en: Build and run your app. You should briefly see a dark gray screen before the
    tab bar appears. Cool!
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。你应该在标签栏出现之前短暂地看到一个深灰色屏幕。酷！
- en: In the next section, you'll add a logo to this screen, and use Auto Layout constraints
    to position it in the exact center of the screen regardless of the device and
    orientation. Adding a logo informs the user that the app is launching and is one
    way to make your app look good.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将为这个屏幕添加一个徽标，并使用自动布局约束将其定位在屏幕的精确中心，无论设备类型和方向如何。添加徽标会告知用户应用正在启动，这是让你的应用看起来不错的一种方式。
- en: Adding a logo and constraints to the Launch screen
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将logo和约束添加到启动屏幕
- en: 'Your `Assets.xcassets` file you added to your project earlier. You''ll also
    use Auto Layout constraints to position the logo in the center of the screen.
    Follow these steps:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你之前添加到项目中的`Assets.xcassets`文件。你还将使用自动布局约束将logo放置在屏幕中央。按照以下步骤操作：
- en: 'The `LaunchScreen` storyboard file should still be selected in the Project
    navigator. Click the **+** button to display the library:![Figure 9.47: Toolbar
    with the Library button shown'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中应仍然选择`LaunchScreen`故事板文件。点击**+**按钮以显示库：![图9.47：显示库按钮的工具栏
- en: '](img/Figure_9.47_B17469.jpg)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.47_B17469.jpg)'
- en: 'Figure 9.47: Toolbar with the Library button shown'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.47：显示库按钮的工具栏
- en: 'Click the Media button to show all of the graphic files in your project:![Figure
    9.48: Library with the Media button selected'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击媒体按钮以显示项目中所有的图形文件：![图9.48：选择媒体按钮的库
- en: '](img/Figure_9.48_B17469.jpg)'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.48_B17469.jpg)'
- en: 'Figure 9.48: Library with the Media button selected'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.48：选择媒体按钮的库
- en: 'Type `detail` in the filter field. You''ll see `detail-logo` in the results:![Figure
    9.49: Library with detail-logo selected'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器字段中输入`detail`。你将在结果中看到`detail-logo`：![图9.49：选择detail-logo的库
- en: '](img/Figure_9.49_B17469.jpg)'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.49_B17469.jpg)'
- en: 'Figure 9.49: Library with detail-logo selected'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.49：选择detail-logo的库
- en: 'Drag `detail-logo` into the view of your view controller scene and center it
    vertically and horizontally. You''ll see blue guidelines to help you. Click the
    Auto Layout Align button when you''re done:![Figure 9.50: The Launchscreen storyboard''s
    view controller scene with logo added'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`detail-logo`拖动到你的视图控制器场景的视图中，并垂直和水平居中。你会看到蓝色辅助线来帮助你。完成操作后，点击自动布局对齐按钮：![图9.50：添加了logo的Launchscreen故事板视图控制器场景
- en: '](img/Figure_9.50_B17469.jpg)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.50_B17469.jpg)'
- en: 'Figure 9.50: The Launchscreen storyboard''s view controller scene with logo
    added'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.50：添加了logo的Launchscreen故事板视图控制器场景
- en: Tip
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you don't see the Auto Layout Align button, click the Inspector button in
    the toolbar to hide the Inspector area.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有看到自动布局对齐按钮，请点击工具栏中的检查器按钮以隐藏检查器区域。
- en: 'Tick **Horizontally in Container** and **Vertically in Container**. Click **Add
    2 Constraints**:![Figure 9.51: Auto Layout align pop-up dialog box'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**在容器中水平对齐**和**在容器中垂直对齐**。点击**添加2个约束**：![图9.51：自动布局对齐弹出对话框
- en: '](img/Figure_9.51_B17469.jpg)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.51_B17469.jpg)'
- en: 'Figure 9.51: Auto Layout align pop-up dialog box'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.51：自动布局对齐弹出对话框
- en: 'The constraints have been added to `detail-logo` and are visible in the document
    outline:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 约束已添加到`detail-logo`，并在文档大纲中可见：
- en: '![Figure 9.52: Document outline showing constraints for the logo'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.52：显示logo约束的文档大纲'
- en: '](img/Figure_9.52_B17469.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.52_B17469.jpg)'
- en: 'Figure 9.52: Document outline showing constraints for the logo'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.52：显示logo约束的文档大纲
- en: What the constraints do is specify the position of the logo in relation to the
    view controller's view. The view controller's view is the container in this case.
    **Horizontally in Container** calculates the logo's horizontal position relative
    to the left and the right sides of the container, and **Vertically in Container**
    calculates the logo's vertical position relative to the top and bottom of the
    container.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 约束的作用是指定logo相对于视图控制器视图的位置。在这个例子中，视图控制器视图是容器。**在容器中水平对齐**计算logo相对于容器的左右边的水平位置，而**在容器中垂直对齐**计算logo相对于容器的顶部和底部的垂直位置。
- en: Build and run your app. You'll see the logo in the middle of the screen. Even
    if you try running the app in the iOS simulator with a different screen size,
    the logo will still be in the exact center of the screen.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行你的应用。你将在屏幕中间看到logo。即使你在iOS模拟器中尝试以不同的屏幕尺寸运行应用，logo仍然会位于屏幕的精确中心。
- en: Congratulations! You have successfully configured the **Launch** screen of your
    app!
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功配置了你的应用**启动**屏幕！
- en: You may have noticed that the screens represented in Interface Builder don't
    match the iPhone model you selected in the iOS simulator, and you may find the
    minimap display gets in the way of arranging screens in your app. Let's do some
    additional configuration for Interface Builder to fix that.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在Interface Builder中表示的屏幕与你在iOS模拟器中选择的iPhone型号不匹配，你可能会发现最小图显示会妨碍你在应用中排列屏幕。让我们对Interface
    Builder进行一些额外的配置以修复这个问题。
- en: Configuring Interface Builder
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Interface Builder
- en: 'Even though you have configured iPhone SE (2nd generation) as the iOS simulator
    for your app, you may find that the scenes shown in Interface Builder are for
    a different iPhone model. You may also wish to hide the minimap display. Let''s
    configure Interface Builder to use the screens from the iPhone SE (2nd generation)
    and to hide the minimap display. Follow these steps:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您已将iPhone SE（第二代）配置为您的应用程序的iOS模拟器，您可能会发现Interface Builder中显示的场景是为不同的iPhone型号。您还可能希望隐藏最小地图显示。让我们配置Interface
    Builder以使用iPhone SE（第二代）的屏幕并隐藏最小地图显示。按照以下步骤操作：
- en: 'The `Launchscreen` storyboard file should still be selected. To configure Interface
    Builder, click the device configuration button:![Figure 9.53: Editing area with
    device configuration button shown'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应仍然选择`Launchscreen`故事板文件。要配置Interface Builder，请单击设备配置按钮：![图9.53：显示设备配置按钮的编辑区域
- en: '](img/Figure_9.53_B17469.jpg)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.53_B17469.jpg)'
- en: 'Figure 9.53: Editing area with device configuration button shown'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.53：显示设备配置按钮的编辑区域
- en: 'A pop-up window displaying different device screens will appear:![Figure 9.54:
    Editing area with device pop-up window'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现显示不同设备屏幕的弹出窗口：![图9.54：带有设备弹出窗口的编辑区域
- en: '](img/Figure_9.54_B17469.jpg)'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.54_B17469.jpg)'
- en: 'Figure 9.54: Editing area with device pop-up window'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.54：带有设备弹出窗口的编辑区域
- en: Note that **iPhone 11** is selected.
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意已选择**iPhone 11**。
- en: 'Choose **iPhone SE (2nd generation)** from this pop-up window:![Figure 9.55:
    Device pop-up window with iPhone SE (2nd generation) selected'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从此弹出窗口中选择**iPhone SE (第二代)**：![图9.55：显示为iPhone SE（第二代）选择的设备弹出窗口
- en: '](img/Figure_9.55_B17469.jpg)'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.55_B17469.jpg)'
- en: 'Figure 9.55: Device pop-up window with iPhone SE (2nd generation) selected'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.55：显示为iPhone SE（第二代）选择的设备弹出窗口
- en: 'After iPhone SE (2nd generation) has been set in the device pop-up window,
    note the scene has changed to reflect the iPhone SE (2nd generation)''s screen.
    The logo is still located at the exact center of the **Launch** screen:![Figure
    9.56: Device configuration button showing iPhone SE (2nd generation) selected'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备弹出窗口中设置iPhone SE（第二代）后，请注意场景已更改以反映iPhone SE（第二代）的屏幕。标志仍然位于**启动**屏幕的**精确中心**：![图9.56：显示为iPhone
    SE（第二代）选择的设备配置按钮
- en: '](img/Figure_9.56_B17469.jpg)'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.56_B17469.jpg)'
- en: 'Figure 9.56: Device configuration button showing iPhone SE (2nd generation)
    selected'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.56：显示为iPhone SE（第二代）选择的设备配置按钮
- en: 'Click the `Main` storyboard file in the Project navigator. Configure the storyboard
    here to use iPhone SE (2nd generation) as well:![Figure 9.57: Device configuration
    button showing iPhone SE (2nd generation) selected for the Main storyboard file'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中单击`Main`故事板文件。在此处配置故事板以使用iPhone SE（第二代）：![图9.57：显示为`Main`故事板文件选择iPhone
    SE（第二代）的设备配置按钮
- en: '](img/Figure_9.57_B17469.jpg)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.57_B17469.jpg)'
- en: 'Figure 9.57: Device configuration button showing iPhone SE (2nd generation)
    selected for the Main storyboard file'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.57：显示为`Main`故事板文件选择iPhone SE（第二代）的设备配置按钮
- en: 'If you wish to hide the minimap, choose **Editor** | **Minimap** from Xcode''s
    menu bar to deselect it:![Figure 9.58: Editor menu with Canvas | Minimap selected'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想隐藏最小地图，请从Xcode菜单栏中选择**编辑器** | **最小地图**以取消选中它：![图9.58：显示Canvas | 最小地图已选中的编辑器菜单
- en: '](img/Figure_9.58_B17469.jpg)'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.58_B17469.jpg)'
- en: 'Figure 9.58: Editor menu with Canvas | Minimap selected'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.58：显示Canvas | 最小地图已选中的编辑器菜单
- en: 'Verify that you have the following scenes in the `Main` storyboard file:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您在`Main`故事板文件中有以下场景：
- en: '![Figure 9.59: Editor area showing completed Main storyboard file'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.59：显示完成的主故事板文件的编辑区域'
- en: '](img/Figure_9.59_B17469.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.59_B17469.jpg)'
- en: 'Figure 9.59: Editor area showing completed Main storyboard file'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.59：显示完成的主故事板文件的编辑区域
- en: Build and run your app. It should work just as it did before.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 构建并运行您的应用程序。它应该像之前一样工作。
- en: You have created the **Explore** and **Map** screens for your app! Well done!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经为您的应用程序创建了**探索**和**地图**屏幕！做得好！
- en: Summary
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned some useful terms used in iOS app development.
    This will make it easier for you to understand the remainder of this book, as
    well as other books or online resources on the subject.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了iOS应用程序开发中使用的某些有用术语。这将使您更容易理解本书的其余部分，以及有关该主题的其他书籍或在线资源。
- en: Next, you also learned about the different screens used in the *Let's Eat* app
    and how the user would use the app. As you recreate the app's user interface from
    scratch, you'll be able to compare what you're doing to what the actual app looks
    like.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你还学习了*让我们吃饭*应用中使用的不同屏幕以及用户如何使用该应用。当你从头开始重新创建应用的用户界面时，你将能够将你所做的工作与实际应用的外观进行比较。
- en: Finally, you learned how to use Interface Builder and storyboards to add a tab
    bar controller scene to your app, configure the button titles, and configure the
    navigation bar for the `Assets.xcassets` file that contains all of the graphic
    files required for your project, configured custom tab bar button icons, and configured
    the **Launch** screen for your app with a custom color and icon. This will familiarize
    you with adding UI elements, configuring them and setting their constraints for
    your own apps.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了如何使用界面构建器和故事板将标签栏控制器场景添加到你的应用中，配置按钮标题，并为包含项目中所需所有图形文件的`Assets.xcassets`文件配置导航栏。你还配置了自定义标签栏按钮图标，并使用自定义颜色和图标配置了应用的**启动**屏幕。这将使你熟悉为你的应用添加UI元素、配置它们以及设置它们的约束。
- en: In the next chapter, you will continue setting up your app's user interface
    and become familiar with more UI elements. You will configure the **Explore**
    screen to display a collection view displaying collection view cells and a collection
    view section header containing a button that displays another view when tapped.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将继续设置你应用的用户界面，并熟悉更多的UI元素。你将配置**探索**屏幕以显示一个展示集合视图和集合视图单元格的集合视图，以及一个包含按钮的集合视图部分标题，当按钮被点击时，会显示另一个视图。
