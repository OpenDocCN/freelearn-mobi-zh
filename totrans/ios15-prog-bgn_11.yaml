- en: '*Chapter 9*: Setting Up the User Interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Part 1* of this book, you studied about the Swift language and how it works.
    Now that you have a good working knowledge of the language, you can learn how
    to develop an iOS application. In this part, you will build the user interface
    of a restaurant reservation app, *Let's Eat*. You will use Xcode's **Interface
    Builder** for this, and coding will be kept to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: You'll start this chapter by learning useful terms used in iOS app development,
    which are used extensively throughout this book. Next, you will tour the screens
    used in the *Let's Eat* app and learn how the user would use the app. Finally,
    you will begin recreating the app's UI with Interface Builder, starting with the
    **tab bar**, which allows the user to select between the **Explore** and **Map**
    screens. You'll add navigation bars to the top of both screens. You'll also learn
    how to configure the **Launch** screen that is displayed when the app is started
    and how to use custom icons for the **Launch** screen and the **tab bar buttons**.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll have learned common terms used in iOS app
    development, what the flow of your app will look like, how to add resources to
    your app, and how to use Interface Builder to add, configure and position UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning useful terms in iOS development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touring the *Let's Eat* app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Xcode project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a tab bar controller scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the **Launch** screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will create a new Xcode project, `LetsEat`, in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter09` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3qcB2kO](https://bit.ly/3qcB2kO)'
  prefs: []
  type: TYPE_NORMAL
- en: Before you create the project, you'll learn some common terms used in iOS development.
  prefs: []
  type: TYPE_NORMAL
- en: Learning useful terms in iOS development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you begin your journey into iOS app development, you will encounter special
    terms and definitions. Here are some of the most commonly used terms and definitions.
    Just read through them for now. Even though you may not understand everything
    yet, it will become clearer as you go along:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIView` class or one of its subclasses. Anything you see on your screen (buttons,
    text fields, labels, and so on) is a view. You will use views to build your UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIStackView` class, which is a subclass of `UIView`. It is used to group views
    together in a horizontal or vertical stack. This makes them easier to position
    on the screen using **Auto Layout**, which is described later in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIViewController` class. It determines what a view displays to the user, and
    what happens when a user interacts with a view. Every view controller has a `view`
    property, which contains a reference to a view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UITableViewController` class, which is a subclass of the `UIViewController`
    class. Its `view` property has a reference to a `UITableView` instance (`UITableViewCell`
    instances (**table view cells**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Settings* app displays your device settings in a table view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.1: Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.1: Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all of the different settings (**General**, **Accessibility**,
    **Privacy**, and so on) are displayed in table view cells inside the table view.
  prefs: []
  type: TYPE_NORMAL
- en: '`UICollectionViewController` class, which is a subclass of the `UIViewController`
    class. Its `view` property has a reference to a `UICollectionView` instance (`UICollectionViewCell`
    instances (**collection view cells**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Photos* app displays photos in a collection view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.2: Photos app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.2: Photos app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, thumbnail pictures are displayed in collection view cells inside
    the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: '`UINavigationController` class, which is a subclass of the `UIViewController`
    class. It has a `viewControllers` property that holds an array of view controllers.
    The view of the last view controller in the array appears onscreen, along with
    a navigation bar at the top of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The table view controller in the *Settings* app is embedded in a navigation
    controller, and you can see the navigation bar above the table view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.3: Navigation bar in Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.3: Navigation bar in Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: When you tap on a setting, the view controller for that setting is added to
    the array of view controllers assigned to the `viewControllers` property. The
    user sees the view for that view controller slide in from the right. Note the
    navigation bar at the top of the screen, which can hold a title and buttons. A
    **< Settings** button appears in the top left side of the navigation bar. Tapping
    this button returns you to the previous screen.
  prefs: []
  type: TYPE_NORMAL
- en: '`UITabBarController` class, which is a subclass of the `UIViewController` class.
    It has a `viewControllers` property that holds an array of view controllers. The
    view of the first view controller in the array appears onscreen, along with a
    tab bar with buttons at the bottom. The button on the extreme left corresponds
    to the first view controller in the array and will be already selected. When you
    tap another button, the corresponding view controller is loaded, and its view
    appears on screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *Photos* app uses a tab bar controller to display a row of buttons at the
    bottom of the screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.4: Tab bar in Photos app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.4: Tab bar in Photos app'
  prefs: []
  type: TYPE_NORMAL
- en: Tapping each button in the tab bar will display a different screen.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model-View-Controller (MVC)**: This is a very common design pattern used
    in iOS app development. The user interacts with views onscreen. App data is stored
    in data model objects. Controllers manage the flow of information between views
    and data model objects. It will be discussed in detail in [*Chapter 13*](B17469_13_Final_VK_ePub.xhtml#_idTextAnchor194),
    *Getting Started with MVC and Collection Views*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploring Xcode` project that you created in [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016),
    *Getting Familiar with Xcode,* and click the `Main` storyboard file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 9.5: Exploring Xcode project showing Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.5: Exploring Xcode project showing Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: You'll see one scene in it, and when you run your app in the iOS Simulator,
    the contents of this scene will be displayed on the screen. You can have more
    than one scene in a storyboard file.
  prefs: []
  type: TYPE_NORMAL
- en: '`ExploringXcode` project does not have any segues since there is just one scene
    in its storyboard, but you will see them in a later part of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Layout**: As a developer, you have to make sure that your app looks
    good on devices with different screen sizes. Auto Layout helps you lay out your
    user interface based on constraints you specify. For instance, you can set a constraint
    to make sure a button is centered on the screen regardless of screen size or make
    a text field expand when the device is rotated from portrait to landscape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you are familiar with the terms used in iOS app development, let's
    take a tour through the app you will build.
  prefs: []
  type: TYPE_NORMAL
- en: Touring the Let's Eat app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a quick tour of the app that you will build. The *Let's Eat* app
    is a restaurant app that allows users to explore a list of restaurants categorized
    by cuisine or view a map showing all restaurants in a particular area. You'll
    see all the screens used in the app and its overall flow in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see a video version of this app tour at this link: [https://bit.ly/3G0Pv7U](https://bit.ly/3G0Pv7U).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Explore screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the app is launched, you will see the **Explore** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.6: Explore screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A `UITabBar` instance (tab bar) at the bottom of the screen displays `UICollectionReusableView`
    instance (section header) containing a **LOCATION** button is at the top of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can pick a cuisine, you have to select a location by tapping the
    **LOCATION** button.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Locations screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you tap the **LOCATION** button, you will see the **Locations** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.7: Locations screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains **Cancel** and **Done** buttons.
    A table view displays a list of locations in table view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You have to tap a row to select a location and tap the **Done** button to confirm.
    Once you tap **Done**, you are returned to the **Explore** screen and can then
    pick a cuisine. You can also tap **Cancel** to return to the **Explore** screen
    without choosing a location.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Restaurant List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a location has been set (**ASPEN, CO** in this case), you can tap a cuisine.
    This displays the **Restaurant List** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.8: Restaurant List screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains a **Back** button. A collection
    view displays a list of restaurants at that location offering the selected cuisine,
    in collection view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You have to tap a restaurant to see its details. You can also tap the **Back**
    button to return to the **Explore** screen without choosing a restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Restaurant Detail screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping on a restaurant on the **Restaurant List** screen displays details
    of that restaurant on the **Restaurant Detail** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.9: Restaurant Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains a button showing the location
    (**ASPEN, CO** in this case). A table view displays the restaurant's location,
    rating, customer reviews, photo reviews, and a location map in table view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You can tap the **ASPEN, CO** button to return to the **Restaurant List** screen
    or tap the **Add Review** or **Add Photo** button to display the **Review Form**
    or **Photo Filter** screens.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Review Form screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping on the **Add Review** button displays the **Review Form** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.10: Review Form screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains **Cancel** and **Save** buttons.
    A table view displays a rating and text fields in table view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You can set a rating and write a review for the restaurant on this screen. You
    can then tap the **Save** button to save your rating and review or the **Cancel**
    button to return to the **Restaurant Detail** screen without saving.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Photo Filter screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping on the **Add Photo** button displays the **Photo Filter** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.11: Photo Filter screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains **Cancel**, **Camera** and
    **Save** buttons. An image view displays a picture, and a collection view displays
    photo filters in collection view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You can choose a picture and apply a filter to it on this screen. You can then
    tap the **Save** button to save your picture or the **Cancel** button to return
    to the **Restaurant Detail** screen without saving.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Map screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping the **Map** button in the tab bar displays the **Map** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: Map screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.12: Map screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A tab bar at the bottom of the screen displays `MKMapView` instance (map view)
    displaying a map on the screen, with pins indicating restaurant locations.
  prefs: []
  type: TYPE_NORMAL
- en: Tapping a pin will display an annotation and tapping the button in the annotation
    will display the **Restaurant Detail** screen for that restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the tour of the app. Now, it's time to start building the UI
    for your app!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you know what the screens of the app are going to look like, you can
    start building your app. Let''s begin by creating a new project. This is the same
    process you used to create the `ExploringXcode` project in [*Chapter 1*](B17469_01_Final_VK_ePub.xhtml#_idTextAnchor016),
    *Getting Familiar with Xcode*. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode and click **Create a new Xcode project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **App** and click **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `LetsEat`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`com.` followed by your own name'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Storyboard`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Leave the rest of the settings at their default values. Click **Next**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose a location to save your project and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be using the iPhone SE (2nd generation) iOS simulator as a test device.
    In the **Scheme** menu, choose the **iPhone SE (2**nd **generation)** simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and run your app. You will see a blank white screen. If you click the
    `Main` storyboard file in the Project navigator, you will see that it contains
    a single scene containing a blank view. This is why you only see a blank white
    screen when you run the app.
  prefs: []
  type: TYPE_NORMAL
- en: To configure the UI, you will modify the `Main` storyboard file using Interface
    Builder. Interface Builder allows you to add and configure scenes. Each scene
    represents a screen the user will see. You can add UI objects such as views and
    buttons to a scene, and configure them as required using the **Attributes inspector**.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on how to use Interface Builder, visit this link: [https://help.apple.com/xcode/mac/current/#/dev31645f17f](https://help.apple.com/xcode/mac/current/#/dev31645f17f).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've created your project, you will add a tab bar controller scene
    to it. This scene displays a tab bar with two tabs at the bottom of the screen.
    Tapping a tab will display the screen associated with it. These screens correspond
    to the **Explore** and **Map** screens shown in the app tour. Let's see how to
    do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a tab bar controller scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you saw in the app tour, the *Let''s Eat* app has a tab bar with two buttons
    at the bottom of the screen, which are used to display the `ViewController` Swift
    file and add a tab bar controller scene with two buttons to your project. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator:![Figure 9.14: Project
    navigator with Main storyboard file selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.14: Project navigator with Main storyboard file selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The contents of the `Main` storyboard file appear in the Editor area. Click
    the Document Outline button to collapse the document outline if it is present.
    This gives you more room to work with:![Figure 9.15: Editing area with the Document
    Outline button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.15: Editing area with the Document Outline button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **+** button to open the **library**:![Figure 9.16: Toolbar with
    the Library button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.16: Toolbar with the Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The library allows you to pick UI objects to be added to a scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `tabbar` in the filter field. A **Tab Bar Controller** object will appear
    in the list of results:![Figure 9.17: Library with Tab Bar Controller object selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.17: Library with Tab Bar Controller object selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag the **Tab Bar Controller** object to the storyboard to add a new tab bar
    controller scene. It''s okay if it covers the existing view controller scene.
    You can see it consists of a scene with two arrows representing segues leading
    to two more scenes:![Figure 9.18: Main storyboard file with tab bar controller
    scene added'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.18: Main storyboard file with tab bar controller scene added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **-** button to zoom out, and rearrange the scenes in the storyboard
    so that both the tab bar controller scene and the view controller scene are visible:![Figure
    9.19: Editing area with zoom out button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.19: Editing area with zoom out button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the arrow pointing to the view controller scene as shown. This arrow
    determines the initial view controller scene of your app, making the view appear
    when the app is launched:![Figure 9.20: Editing area with arrow showing initial
    view controller scene'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.20_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.20: Editing area with arrow showing initial view controller scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag the arrow from the view controller scene to the tab bar controller scene
    as shown. This makes the tab bar controller scene the initial scene, and the tab
    bar will appear when you launch the app:![Figure 9.21: Editing area with tab bar
    controller scene as initial view controller'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.21: Editing area with tab bar controller scene as initial view controller'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also make the tab bar controller scene the initial view controller scene
    by selecting it, clicking the Attributes inspector button, and ticking the **is
    Initial View Controller** checkbox. You'll learn more about the Attributes inspector
    in the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the existing view controller scene in the storyboard and press *Delete*
    on the keyboard to remove it, as you won't be using it for this project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `ViewController` file in the Project navigator and press *Delete*
    on the keyboard to remove it, as you won''t be using it for this project:![Figure
    9.22: Project navigator showing the file to be deleted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.22: Project navigator showing the file to be deleted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Move to Trash** in the dialog box that pops up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.23: Move to Trash dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.23: Move to Trash dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app in the iOS simulator, and you''ll see the tab bar with
    two buttons at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24: iOS simulator showing tab bar with two buttons'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.24: iOS simulator showing tab bar with two buttons'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added a tab bar to your project, but as you can see, the
    button titles are currently **Item 1** and **Item 2**. You will change them to
    **Explore** and **Map** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the titles of the tab bar's buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your app now displays a tab bar at the bottom of the screen, but the button
    titles do not match those shown in the app tour. To make them match, you will
    configure the button titles to **Explore** and **Map** in the Attributes inspector.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator. Click the Document
    Outline button to show the document outline. Click **Item 1 Scene** in the document
    outline:![Figure 9.25: Document outline showing Item 1 scene selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.25_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.25: Document outline showing Item 1 scene selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Item 1** button under **Item 1 Scene**. Click the Attributes inspector
    button:![Figure 9.26: Attributes inspector selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.26_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.26: Attributes inspector selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under `Explore`:![Figure 9.27: Attributes inspector with Title set to Explore'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.27_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.27: Attributes inspector with Title set to Explore'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `Map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.28: Attributes inspector with Title set to Map'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.28_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.28: Attributes inspector with Title set to Map'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app in the Simulator. You'll see the titles for the buttons
    have changed to **Explore** and **Map**, respectively. Great!
  prefs: []
  type: TYPE_NORMAL
- en: Tapping the **Explore** and **Map** buttons will display the scenes for the
    **Explore** and **Map** screens. As shown in the app tour, if you tap the **LOCATION**
    button on the **Explore** screen, you will see a navigation bar at the top of
    the **Locations** screen containing the **Cancel** and **Done** buttons. You'll
    also see an empty navigation bar at the top of the **Map** screen. As you have
    seen in the app tour, some screens have titles and buttons in the navigation bar.
    In the next section, you will learn how to add navigation bars to your screens,
    so you can add buttons and titles to them later as required.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding view controllers in navigation controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you saw in the app tour, the **Explore** and **Map** screens both have a
    navigation bar at the top of the screen. To add the navigation bars for both screens,
    you will embed the view controllers of the **Explore** and **Map** scenes in a
    navigation controller. This will make navigation bars appear at the top of the
    screen when the **Explore** and **Map** screens are displayed. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Explore Scene** in the document outline:![Figure 9.29: Document outline
    with Explore Scene selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.29_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.29: Document outline with Explore Scene selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **Editor** | **Embed In** | **Navigation Controller**:![Figure 9.30:
    Editor menu with Embed In | Navigation Controller selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.30_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.30: Editor menu with Embed In | Navigation Controller selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A navigation controller scene appears between the **Tab Bar Controller Scene**
    and the **Explore Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.31: Editing area showing navigation controller scene added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.31_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.31: Editing area showing navigation controller scene added'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. The **Explore** screen now has a navigation bar but
    since it is the same color as the background, it is not apparent on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding a view controller in a navigation controller adds that view controller
    to the navigation controller's `viewControllers` array. The navigation controller
    then displays the view controller's view on the screen. The navigation controller
    also displays a navigation bar at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Map** screen does not have a navigation bar yet. Let''s add one now.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Map Scene** in the document outline:![Figure 9.32: Document outline
    with Map Scene selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.32_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.32: Document outline with Map Scene selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose **Editor** | **Embed In** | **Navigation Controller**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A navigation controller scene appears between the **Tab Bar Controller Scene**
    and the **Map Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.33: Editing area showing navigation controller scene added'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.33_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.33: Editing area showing navigation controller scene added'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. Both Explore and Map screens now have a navigation bar,
    even though you can't see them right now.
  prefs: []
  type: TYPE_NORMAL
- en: The tab bar buttons can switch between the **Explore** and **Map** screens,
    and each screen now has a navigation bar. The button titles are correct but the
    buttons themselves do not have icons. To get the button icons, you will add a
    file containing all of the graphics assets required for your project in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Assets.xcassets file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Assets.xcassets` file contains resources, such as app icons and custom
    images, for your project. It is currently empty as you just created this project.
    You will need to download the `Assets.xcassets` file in the `Chapter09` folder
    (which contains all of the resources for the *Let''s Eat* app) from this link
    if you have not yet done so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition](https://github.com/PacktPublishing/iOS-15-Programming-for-Beginners-Sixth-Edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have downloaded the file, you can add it to your project by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to remove the existing `Assets.xcassets` file (shown as **Assets**
    in the Project navigator) from your project. Select it in the Project navigator
    and press the *Delete* key to remove it:![Figure 9.34: Project navigator showing
    file to be removed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.34_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.34: Project navigator showing file to be removed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Move to Trash** in the dialog box that pops up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Chapter09` folder inside the code bundle files you downloaded. You
    will see `Assets.xcassets` inside:![Figure 9.35: Assets.xcassets file from the
    downloaded code bundle'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.35_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.35: Assets.xcassets file from the downloaded code bundle'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag the new `Assets.xcassets` file to the Project navigator area. The **Choose
    options for adding these files** dialog box appears. Tick the **Copy items if
    needed** checkbox. Tick the **Create groups** radio button. Leave the rest of
    the settings at their default values. Click **Finish**:![Figure 9.36: Choose options
    for adding these files dialog box'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.36_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.36: Choose options for adding these files dialog box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Assets.xcassets` file has been added to your project. Note that it appears
    as `Assets` in the Project navigator. Click it to see its contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.37: Project navigator with Assets.xcassets selected'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.37_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.37: Project navigator with Assets.xcassets selected'
  prefs: []
  type: TYPE_NORMAL
- en: Among the graphics assets included are icons for the tab bar buttons. You'll
    add the icons for the **Explore** and **Map** buttons in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the icons for the Explore and Map buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Assets.xcassets` folder. Add them to the buttons now by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file. Click the **Explore** button under **Explore
    Scene** in the document outline. Click the Attributes inspector button:![Figure
    9.38: Attributes inspector for the Explore button selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.38_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.38: Attributes inspector for the Explore button selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under `icon-explore-on`:![Figure 9.39: Attributes inspector with Image set
    to icon-explore-on'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.39_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.39: Attributes inspector with Image set to icon-explore-on'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `icon-map-on`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.40: Attributes inspector with Image set to icon-map-on'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.40_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.40: Attributes inspector with Image set to icon-map-on'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. You can see the Explore and Map buttons now have icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.41: iOS simulator showing Explore and Map buttons with icons'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.41_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.41: iOS simulator showing Explore and Map buttons with icons'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've just configured the tab bar for your app!
  prefs: []
  type: TYPE_NORMAL
- en: When your app is launched, you may see a white screen briefly before you see
    the tab bar. This screen is called the **Launch** screen, and it's displayed briefly
    as your app is starting. You'll learn how to configure this screen to display
    a custom color and app logo in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Launch screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `LaunchScreen` storyboard file in your project. This file is automatically
    created when you create an Xcode project.
  prefs: []
  type: TYPE_NORMAL
- en: You will create a new custom color for this screen, add an icon from the `Assets.xcassets`
    folder, and set the icon's location using Auto Layout constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Important Information
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Auto Layout and how to use it, see this link: [https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/).'
  prefs: []
  type: TYPE_NORMAL
- en: You'll start by creating a new custom color in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Launch screen's background color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Attributes inspector can be used to modify the colors of the UI elements
    on screen. You can specify the precise color you want by using custom red, green
    and blue values. You''ll set a custom color for the Launch screen by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Launchscreen` storyboard file in your Project navigator:![Figure
    9.42: Project navigator with LaunchScreen storyboard selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.42_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.42: Project navigator with LaunchScreen storyboard selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select **View** in the document outline. Click the Attributes inspector button.
    Under **View**, click the **Background** pop-up menu:![Figure 9.43: Attributes
    inspector with Background attribute selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.43_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.43: Attributes inspector with Background attribute selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **Custom...** from the pop-up menu:![Figure 9.44: Background pop-up
    menu with Custom... selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.44_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.44: Background pop-up menu with Custom... selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the color picker, choose the second tab (the one with the three sliders):![Figure
    9.45: Color picker with the second tab selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.45_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.45: Color picker with the second tab selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select `4A4A4A` in the **Hex Color** # box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.46: Color picker showing Hex Color # set to 4A4A4A'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.46_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.46: Color picker showing Hex Color # set to 4A4A4A'
  prefs: []
  type: TYPE_NORMAL
- en: A color consists of red, green and blue. The range of values for each color
    from `0` to `255`. This hex value sets the red, green and blue values to `74`,
    resulting in a pleasant dark gray color.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. You should briefly see a dark gray screen before the
    tab bar appears. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll add a logo to this screen, and use Auto Layout constraints
    to position it in the exact center of the screen regardless of the device and
    orientation. Adding a logo informs the user that the app is launching and is one
    way to make your app look good.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a logo and constraints to the Launch screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your `Assets.xcassets` file you added to your project earlier. You''ll also
    use Auto Layout constraints to position the logo in the center of the screen.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `LaunchScreen` storyboard file should still be selected in the Project
    navigator. Click the **+** button to display the library:![Figure 9.47: Toolbar
    with the Library button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.47_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.47: Toolbar with the Library button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the Media button to show all of the graphic files in your project:![Figure
    9.48: Library with the Media button selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.48_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.48: Library with the Media button selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type `detail` in the filter field. You''ll see `detail-logo` in the results:![Figure
    9.49: Library with detail-logo selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.49_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.49: Library with detail-logo selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Drag `detail-logo` into the view of your view controller scene and center it
    vertically and horizontally. You''ll see blue guidelines to help you. Click the
    Auto Layout Align button when you''re done:![Figure 9.50: The Launchscreen storyboard''s
    view controller scene with logo added'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.50_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.50: The Launchscreen storyboard''s view controller scene with logo
    added'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don't see the Auto Layout Align button, click the Inspector button in
    the toolbar to hide the Inspector area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tick **Horizontally in Container** and **Vertically in Container**. Click **Add
    2 Constraints**:![Figure 9.51: Auto Layout align pop-up dialog box'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.51_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.51: Auto Layout align pop-up dialog box'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The constraints have been added to `detail-logo` and are visible in the document
    outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.52: Document outline showing constraints for the logo'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.52_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.52: Document outline showing constraints for the logo'
  prefs: []
  type: TYPE_NORMAL
- en: What the constraints do is specify the position of the logo in relation to the
    view controller's view. The view controller's view is the container in this case.
    **Horizontally in Container** calculates the logo's horizontal position relative
    to the left and the right sides of the container, and **Vertically in Container**
    calculates the logo's vertical position relative to the top and bottom of the
    container.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. You'll see the logo in the middle of the screen. Even
    if you try running the app in the iOS simulator with a different screen size,
    the logo will still be in the exact center of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully configured the **Launch** screen of your
    app!
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the screens represented in Interface Builder don't
    match the iPhone model you selected in the iOS simulator, and you may find the
    minimap display gets in the way of arranging screens in your app. Let's do some
    additional configuration for Interface Builder to fix that.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Interface Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though you have configured iPhone SE (2nd generation) as the iOS simulator
    for your app, you may find that the scenes shown in Interface Builder are for
    a different iPhone model. You may also wish to hide the minimap display. Let''s
    configure Interface Builder to use the screens from the iPhone SE (2nd generation)
    and to hide the minimap display. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Launchscreen` storyboard file should still be selected. To configure Interface
    Builder, click the device configuration button:![Figure 9.53: Editing area with
    device configuration button shown'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.53_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.53: Editing area with device configuration button shown'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A pop-up window displaying different device screens will appear:![Figure 9.54:
    Editing area with device pop-up window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.54_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.54: Editing area with device pop-up window'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that **iPhone 11** is selected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose **iPhone SE (2nd generation)** from this pop-up window:![Figure 9.55:
    Device pop-up window with iPhone SE (2nd generation) selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.55_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.55: Device pop-up window with iPhone SE (2nd generation) selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After iPhone SE (2nd generation) has been set in the device pop-up window,
    note the scene has changed to reflect the iPhone SE (2nd generation)''s screen.
    The logo is still located at the exact center of the **Launch** screen:![Figure
    9.56: Device configuration button showing iPhone SE (2nd generation) selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.56_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.56: Device configuration button showing iPhone SE (2nd generation)
    selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the `Main` storyboard file in the Project navigator. Configure the storyboard
    here to use iPhone SE (2nd generation) as well:![Figure 9.57: Device configuration
    button showing iPhone SE (2nd generation) selected for the Main storyboard file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.57_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.57: Device configuration button showing iPhone SE (2nd generation)
    selected for the Main storyboard file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you wish to hide the minimap, choose **Editor** | **Minimap** from Xcode''s
    menu bar to deselect it:![Figure 9.58: Editor menu with Canvas | Minimap selected'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.58_B17469.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.58: Editor menu with Canvas | Minimap selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify that you have the following scenes in the `Main` storyboard file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.59: Editor area showing completed Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.59_B17469.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.59: Editor area showing completed Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. It should work just as it did before.
  prefs: []
  type: TYPE_NORMAL
- en: You have created the **Explore** and **Map** screens for your app! Well done!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned some useful terms used in iOS app development.
    This will make it easier for you to understand the remainder of this book, as
    well as other books or online resources on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you also learned about the different screens used in the *Let's Eat* app
    and how the user would use the app. As you recreate the app's user interface from
    scratch, you'll be able to compare what you're doing to what the actual app looks
    like.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to use Interface Builder and storyboards to add a tab
    bar controller scene to your app, configure the button titles, and configure the
    navigation bar for the `Assets.xcassets` file that contains all of the graphic
    files required for your project, configured custom tab bar button icons, and configured
    the **Launch** screen for your app with a custom color and icon. This will familiarize
    you with adding UI elements, configuring them and setting their constraints for
    your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will continue setting up your app's user interface
    and become familiar with more UI elements. You will configure the **Explore**
    screen to display a collection view displaying collection view cells and a collection
    view section header containing a button that displays another view when tapped.
  prefs: []
  type: TYPE_NORMAL
