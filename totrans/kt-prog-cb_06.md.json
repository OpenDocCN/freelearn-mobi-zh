["```kt\nvar listA= mutableListOf<String>(\"a\",\"a\",\"b\")\nvar listB= mutableListOf<String>(\"a\",\"c\")\n```", "```kt\nfun main(args: Array<String>) {\n    val listA= mutableListOf<String>(\"a\",\"a\",\"b\")\n    val listB= mutableListOf<String>(\"a\",\"c\")\n    listB.addAll(listA)\n    println(listB)\n}\n```", "```kt\n[a, c, a, a, b]\n```", "```kt\nfun main(args: Array<String>) {\n    val listA= mutableListOf<String>(\"a\",\"a\",\"b\")\n    val listB= mutableListOf<String>(\"a\",\"c\")\n    val listC=listB.union(listA)\n    println(listC)\n}\n```", "```kt\n[a, c, b]\n```", "```kt\nval setA= mutableSetOf<String>(\"a\",\"b\",\"c\")\nval setB= mutableSetOf<String>(\"a\",\"b\",\"c\",\"d\")\nsetB.addAll(setA)\nprintln(setB)\nprintln(setB.union(setA))\n```", "```kt\n[a, b, c, d]\n[a, b, c, d]\n```", "```kt\nval mapA= mutableMapOf<String,Int>(\"a\" to 1, \"b\" to 2)\nval mapB= mutableMapOf<String,Int>(\"a\" to 2, \"d\" to 4)\nmapA.putAll(mapB)\nprintln(mapA)\n```", "```kt\n{a=2, b=2, d=4}\n```", "```kt\nfun main(args: Array<String>) {\n    val listA= listOf(1,2,3,4,5,6)\n    val pair=listA.partition {\n        it%2==0\n    }\n    println(pair)\n}\n```", "```kt\n([2, 4, 6], [1, 3, 5])\n```", "```kt\nval setA= setOf(1,2,3,4,5,6)\nval pair=setA.partition {\n    it%2==0\n}\nprintln(pair)\n\n```", "```kt\n([2, 4, 6], [1, 3, 5])\n```", "```kt\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n```", "```kt\n// Produces two lists\ninline fun <T> Array<out T>.partition(\n    predicate: (T) -> Boolean\n): Pair<List<T>, List<T>>\n```", "```kt\n// Breaks original list of Byte and produces two lists of Byte\ninline fun ByteArray.partition(\n    predicate: (Byte) -> Boolean\n): Pair<List<Byte>, List<Byte>>\n\n```", "```kt\n// Breaks original list of Short and produces two lists of Short\ninline fun ShortArray.partition(\n    predicate: (Short) -> Boolean\n): Pair<List<Short>, List<Short>>\n```", "```kt\n// Breaks original list of Int and produces two lists of Int\ninline fun IntArray.partition(\n    predicate: (Int) -> Boolean\n): Pair<List<Int>, List<Int>>\n```", "```kt\n// Breaks original list of Long and produces two lists of Long\ninline fun LongArray.partition(\n    predicate: (Long) -> Boolean\n): Pair<List<Long>, List<Long>>\n```", "```kt\n// Breaks original list of Float and produces two lists of Float\ninline fun FloatArray.partition(\n    predicate: (Float) -> Boolean\n): Pair<List<Float>, List<Float>>\n```", "```kt\n// Breaks original list of Double and produces two lists of Double\ninline fun DoubleArray.partition(\n    predicate: (Double) -> Boolean\n): Pair<List<Double>, List<Double>>\n```", "```kt\n// Breaks original list of Boolean and produces two lists of Boolean\ninline fun BooleanArray.partition(\n    predicate: (Boolean) -> Boolean\n): Pair<List<Boolean>, List<Boolean>>\n```", "```kt\n// Breaks original list of Char and produces two lists of Char\ninline fun CharArray.partition(\n    predicate: (Char) -> Boolean\n): Pair<List<Char>, List<Char>>\n```", "```kt\nfun main(args: Array<String>) {\n    val p1=Person(91)\n    val p2=Person(10)\n    val p3=Person(78)\n    val listOfPerson= listOf(p1,p2,p3)\n    var sortedListOfPerson=listOfPerson.sortedBy {\n        it.age\n    }\n}\nclass Person(var age:Int)\n```", "```kt\nfun main(args: Array<String>) {\n    val p1=Person(91)\n    val p2=Person(10)\n    val p3=Person(78)\n    val listOfPerson= listOf(p1,p2,p3)\n    var sortedListOfPerson=listOfPerson.sortedBy {\n        it.age\n    }\n}\nclass Person(var age:Int)\n\n```", "```kt\nfun main(args: Array<String>)\n{\n  val p1=Person(91)\n  val p2=Person(10)\n  val p3=Person(78)\n  val listOfPerson= listOf(p1,p2,p3)\n  var sortedListOfPerson=listOfPerson\n  .sortedWith<Person>(object:Comparator<Person>{\n      override fun compare(p0: Person, p1: Person):Int {\n        if(p0.age>p1.age){\n              return 1\n          }\n          if(p0.age==p1.age){\n              return 0\n          }\n          return -1\n      }\n  })\n}\nclass Person(var age:Int)\n```", "```kt\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n```", "```kt\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n```", "```kt\nval listOfInt= listOf(1,2,3,4,5)\nvar sortedList=listOfInt.sortedDescending()\nsortedList.forEach {\n    print(\"${it} \")\n}\n```", "```kt\n5 4 3 2 1\n```", "```kt\nval p1=Person(91)\nval p2=Person(10)\nval p3=Person(78)\nval listOfPerson= listOf<Person>(p1,p2,p3)\nval sortedListOfPerson=listOfPerson.sortedByDescending {\n    it.age\n}\nsortedListOfPerson.forEach {\n    print(\"${it.age} \")\n}\n```", "```kt\n91 78 10\n```", "```kt\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n```", "```kt\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n        Comparator { a, b -> compareValuesBy(b, a, selector) }\n```", "```kt\ncompile 'com.google.code.gson:gson:2.8.0'\n```", "```kt\nval jsonStr=\"\"\"\n    {\n     \"name\": \"Aanand Shekhar\",\n     \"age\": 21,\n     \"isAwesome\": true\n    }\n\"\"\".trimIndent()\n```", "```kt\ndata class Information(val name:String,val age:Int, val isAwesome:Boolean)\n```", "```kt\nval information:Information= Gson().fromJson<Information>(jsonStr,Information::class.java)\n```", "```kt\nval listOfNumbers=listOf(1,2,3,4,5,6,7,8,9)\nvar evenList=listOfNumbers.filter {\n    it%2==0\n}\nprintln(evenList)\n\n//Output: [2, 4, 6, 8]\n```", "```kt\nval listOfNumbers=listOf(1,2,3,4,5,6,7,8,9)\nvar transformedList=listOfNumbers.map {\n    it*2\n}\nprintln(transformedList)\n\n//Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n```", "```kt\nval listOfNumbers=listOf(1,2,3,4,5)\nval map=listOfNumbers.mapIndexed { index, it\n    -> it*index}\nprintln(map)\n\n//Output: [0, 2, 6, 12, 20]\n```", "```kt\nclass Person(var age:Int?)\n```", "```kt\nval listOfPersons=listOf(Person(10), Person(20), Person(2), Person(null))\n```", "```kt\nval sortedList=listOfPersons.sortedWith(compareBy(nullsLast<Int>(),{it.age}))\nsortedList.forEach {\n    print(\" ${it.age} \")\n}\n\n```", "```kt\n2 10 20 null \n```", "```kt\nval A= listOf(1,2,3,4)\nvar B=A.filter {\n    it%2==0\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val A= listOf(1,2,3,4)\n    var B=A.filter {\n        println(\"checking ${it}\")\n        it%2==0\n    }\n}\n```", "```kt\nchecking 1\nchecking 2\nchecking 3\nchecking 4\n```", "```kt\nfun main(args: Array<String>) {\n    val A= listOf(1,2,3,4).asSequence()\n    var B=A.filter {\n        println(\"checking ${it}\")\n        it%2==0\n    }\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val A= listOf(1,2,3,4).asSequence()\n    var B=A.filter {\n        println(\"checking ${it}\")\n        it%2==0\n    }\n    B.forEach {\n        println(\"printing ${it}\")\n    }\n}\n\n//Output:checking 1\n checking 2\n printing 2\n checking 3\n checking 4\n printing 4\n```", "```kt\nval seq= generateSequence(1){it*2}\nseq.take(10).forEach {\n    print(\" ${it} \")\n}\n```", "```kt\nfun main(args: Array<String>) {\n    val string=\"abcdef\"\n    val pad=string.padStart(10,'-')\n    println(pad)\n}\n```", "```kt\n ----abcdef\n```", "```kt\nval string=\"abcdef\"\nval pad=string.padEnd(10,'-')\nprintln(pad)\n```", "```kt\n abcdef----\n```", "```kt\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n```", "```kt\nfun main(args: Array<String>) {\n    val a= arrayOf(arrayOf(1,2,3),arrayOf(1,2,3),arrayOf(1,2,3))\n    a.flatten().forEach { print(\" ${it} \") }\n}\n\n//Output:  1 2 3 1 2 3 1 2 3 \n```", "```kt\nfun main(args: Array<String>) {\n    val a= listOf(listOf(1,2,3),listOf(1,2,3),listOf(1,2,3))\n    a.flatten().forEach { print(\" ${it} \") }\n}\n```", "```kt\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n```", "```kt\nclass Student(val age:Int, val GPA: Double)\n```", "```kt\nval studentA=Student(11,2.0)\nval studentB=Student(11,2.1)\nval studentC=Student(11,1.3)\nval studentD=Student(12,1.3)\nval studentsList=listOf<Student>(studentA,studentB,studentC,studentD)\n```", "```kt\nval sortedList=studentsList.sortedWith(compareBy({it.age},{it.GPA}))\n```", "```kt\nsortedList.forEach {\n    println(\"age: ${it.age}, GPA: ${it.GPA} \")\n}\n\n//Output: age: 11, GPA: 1.3 \n age: 11, GPA: 2.0 \n age: 11, GPA: 2.1 \n age: 12, GPA: 1.3\n```", "```kt\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?):Comparator<T>\n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf(1,2,3,4,5)\n    val limitedList=list.take(3)\n    println(limitedList)\n}\n\n//Output: [1,2,3]\n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf(1,2,3,4,5)\n    val limitedList=list.takeLast(3)\n    println(limitedList)\n}\n\n//Output: [3,4,5]\n```", "```kt\nval list= listOf(1,2,3,4,5)\nval limitedList=list.takeWhile { it<3 }\nprintln(limitedList)\n\n//Output: [1,2]\n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf(1,2,3,4,5)\n    var limitedList=list.takeIf { it .contains(1) }\n    println(limitedList)\n}\n\n//Output: [1,2,3,4,5]\n```", "```kt\nint[][] data = new int[size][size];\n```", "```kt\nval array = Array(n, {IntArray(n)})\n```", "```kt\npublic inline constructor(size: Int, init: (Int) -> T)\n```", "```kt\nArray<IntArray>(10,{IntArray(10,{-1})})\n```", "```kt\nval even: IntArray = intArrayOf(2, 4, 6)\nval odd: IntArray = intArrayOf(1, 3, 5)\n\nval lala: Array<IntArray> = arrayOf(even, odd)\nlala.forEach {\n    it.forEach {\n        print(\" ${it} \")\n    }\n    println()\n}\n\n//Output: 2 4 6 \n 1 3 5 \n```", "```kt\ninline fun <reified inside> array2d(sizeOuter: Int, sizeInner: Int, noinline innerInit: (Int)->inside): Array<Array<inside>>\n       = Array(sizeOuter) { Array<inside>(sizeInner, innerInit) }\n```", "```kt\narray2d(10,10,{0})\n```", "```kt\nfun main(args: Array<String>) {\n    val a= listOf(listOf(1,2,3), listOf(4,5,6), listOf(7,8,9))\n    a.forEach {\n        print(\" ${it} \")\n    }\n}\n\n```", "```kt\n[1, 2, 3] [4, 5, 6] [7, 8, 9] \n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf<Int>(1,2,3,4,5,6,7,8,9)\n    var droppedList=list.drop(2)\n    droppedList.forEach {\n        print(\" ${it} \")\n    }\n}\n\n//Output: 3 4 5 6 7 8 9 \n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf<Int>(1,2,3,4,5,6,7,8,9)\n    var droppedList=list.dropLast(2)\n    droppedList.forEach {\n        print(\" ${it} \")\n    }\n}\n\n//Output:  1 2 3 4 5 6 7 \n```", "```kt\nval list= listOf<Int>(1,2,3,4,5,6,7,8,9,1,2,3)\nval droppedList=list.dropWhile { it<3 }\ndroppedList.forEach {\n    print(\" ${it} \")\n}\n\n//Output:  3 4 5 6 7 8 9 1 2 3 \n```", "```kt\nfun main(args: Array<String>) {\n    val list= listOf<Int&gt;(1,2,3,4,5,6,7,8,9,3,1,2)\n    val droppedList=list.dropLastWhile { it<3 }\n    droppedList.forEach {\n        print(\" ${it} \")\n    }\n}\n\n//Output: 1 2 3 4 5 6 7 8 9 3 \n```"]