- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation in Modern Android Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android development, navigation is the interaction that allows your Android
    application users to navigate to, from, and back out from the different screens
    within your app, an action that is very vital in the mobile ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Jetpack navigation has simplified navigation between screens, and in this chapter,
    we will learn how to implement navigation with a simple view click, from the bottom
    navigation bar, which is most commonly used, by navigating with arguments, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a bottom navigation bar using navigation destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a new screen in Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating with arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating deep links for destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The complete source code for this chapter can be found at [https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four](https://github.com/PacktPublishing/Modern-Android-13-Development-Cookbook/tree/main/chapter_four).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a bottom navigation bar using navigation destinations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Android development, having a bottom navigation bar is very common; it helps
    inform your users that there are different sections in your application. In addition,
    other apps opt to include a navigation drawer activity, which holds a profile
    and additional information about the application.
  prefs: []
  type: TYPE_NORMAL
- en: An excellent example of an app that utilizes both – a navigation drawer and
    bottom navigation – is Twitter. It is also important to mention that some companies
    prefer to have a top navigation bar as a preference. In addition, others such
    as Google Play Store have both bottom and drawer navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Android project with your preferred editor or Android Studio, or
    you can use any project from previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to create a new project and call it `BottomNavigationBarSample`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating our new empty `Activity BottomNavigationBarSample` project,
    we will start by adding the required navigation dependency in `build.gradle`,
    and then sync the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As noticed in a previous new project, when you create a new project, there is
    code that comes with it, the `Greeting()` function; you can go ahead and delete
    that code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After deleting that code, let us go ahead and create a `sealed` class in the
    main package directory and call it `Destination.kt`, where we will define our
    `route` string, `icon:` `Int`, and `title: String` for our bottom navigation items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Strictly speaking, we might not need the `sealed` class, but it is a nicer way
    to implement navigation. A `sealed` class in Kotlin represents a restricted class
    hierarchy that provides more control over inheritance. Alternatively, you can
    think of it as a class that, in its value, can have one of the types from a limited
    set, but it cannot have any other types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `sealed` class, now let’s go ahead and create our destinations.
    For our sample, we will assume we are creating a budgeting app. Hence, the destinations
    we can have are `Transactions`, `Budgets`, `Tasks`, and `Settings`. See the next
    step on how to get the icons; in addition, you will need to import them. For good
    practice, you can extract the `String` resource and save it in the `String` XML
    file. You can try this as a small exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the icons, you can access them easily but clicking on the resource folder
    (`res`), then navigating to **Vector Assets** | **Clip Art**, which will launch
    and bring up free icons that you can use, as shown in *Figure 4**.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – How to access Vector Asset](img/Figure_4.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – How to access Vector Asset
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also upload an SVG file and access it through **Asset Studio**. For
    more icons, you can check out this link: [https://fonts.google.com/icons](https://fonts.google.com/icons).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Asset Studio](img/Figure_4.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Asset Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the destinations we just added, let’s go ahead and add dummy text
    to verify that, indeed, when we navigate, we are on the right screen. Create a
    new file and name it `AppContent.kt`. Inside `AppContent`, we will add our `Transaction`
    function, which will be our home screen, where new users enter the app the first
    time; then later, they can navigate to other screens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go ahead and add the remaining three screens, `Task`, `Budget`, and `Settings`,
    using the same composable pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to create a bottom navigation bar composable and tell the `Composable`
    function how to react when clicked, and also restore the state when re-selecting
    a previously selected item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s go to `MainActivity` and create `NavHost` and a few composable functions,
    `AppScreen()`, `AppNavigation()`, and `BottomNavigationBar()`. Each nav controller
    must be associated with a single nav host composable because it connects the controller
    with a nav graph that helps specify the composable directions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let’s go ahead and glue everything together by creating another composable
    function and calling it `AppScreen()`. We will call this function inside `setContent`
    in the `onCreate()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, call this created function inside `setContent{}`; the import should be
    `import androidx.activity.compose.setContent`, based on the fact that sometimes
    it might happen that you import the wrong one. Run the application. You will notice
    a screen with four tabs, and when you select a tab, the selected one gets highlighted,
    as shown in *Figure 4**.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.3 – The bottom na\uFEFFvigation bar](img/Figure_4.3.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – The bottom navigation bar
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Compose, navigation has a crucial term called **route**. The key is the string
    that defines the pathway to your composable. The key basically is the source of
    truth – or think of it as a deep link that takes you to a specific destination,
    and each destination should have a unique route.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, each destination should consist of a unique key route. In our example,
    we added icons and a title. The icons, as seen in *Figure 4**.3*, show what the
    bottom navigation entails, and the title describes the specific screen we are
    browsing at that exact time. In addition, these are optional and only needed for
    some routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`NavController()` is the main API for our navigation component, and it keeps
    track of every back stack entry for the composables that make up the screens in
    our application and the state of each screen. We created this using `rememberNavController`:
    as we mentioned in the previous chapter, `remember`, as the name suggests, remembers
    the value; in this instance, we are remembering `NavController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`NavHost()`, on the other hand, requires the `NavController()` previously created
    through `rememberNavController()` and the destination route of the entry point
    of our graph. In addition, `rememberNavController()` returns `NavHostController`,
    which is a subclass of `NavController()` that offers some additional APIs that
    `NavHost` requires.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is very similar to how Android developers build navigation before composing
    fragments. The steps include creating a bottom navigation menu with the `menu`
    items, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create another resource in the `navigation` package that points to
    the screens (fragments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Navigating to a new screen in Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will build a register screen prompt on our login page for registering first-time
    users of our application. This is a standard pattern because we need to save the
    user’s credentials so that the next time they log in to our application, we just
    log them in without registering again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have completed the previous recipe, *Implementing a bottom navigation
    bar using navigation destinations*, before getting started with this one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will need to use our `SampleLogin` project and add a new
    screen that users can navigate to if it is their first time using the application.
    This is a typical use case in many applications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `SampleLogin` project, create a new `sealed` class, and call it `Destination`.
    To also ensure we maintain great packaging, add this class to `util`. Also, just
    like the bottom bar, we will have a route, but this time, we do not need any icons
    or titles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After creating the destinations, we now need to go ahead and add clickable
    text in `LoginContent` to ask users whether it is their first time using the application.
    They should click `RegisterContent`. You can open the project by checking out
    the *Technical requirements* section if you need to refer to any step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when you click on `ClickableText`, our clickable text is text that you
    can click, and it will help users navigate to the registration screen via **First-time
    user? Sign UP**. Once you click on this, it should navigate to a different screen
    where users can now sign up, as shown in *Figure 4**.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – A new Register screen](img/Figure_4.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – A new Register screen
  prefs: []
  type: TYPE_NORMAL
- en: 'For the **Register** screen, you can get the entire code in the *Technical
    requirements* section. We will reuse the user input fields that we created and
    just change the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `MainActivity`, we will have a `Navigation()` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `PasswordInputField`, we will name each input appropriately for reusability:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Moreover, you can also navigate to the previous **Sign in** screen by clicking
    on the hardware **Back** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, in `setContent`, we will need to update the code to accommodate the
    new navigation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the code and click on the **Sign up** text, and you should now be taken
    to a new screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will notice that we have just created a different destination entry point,
    where `ClickableText` is used to navigate to the newly created screen. Furthermore,
    in order to navigate to a composable destination in the nav graph, you must use
    `navController.navigate(Destination.RegisterScreen.route)`, and as mentioned earlier,
    the string represents the destination route.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, `navigate()` adds our destination to the back stack by default,
    but if we need to modify the behavior, we can easily do that by adding additional
    nav options to our `navigate()` call.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you want to work with animations when navigating. In that case, you
    can easily do that by using the Accompanist library – [https://github.com/google/accompanist](https://github.com/google/accompanist)
    –which offers a group of libraries that aim to supplement Jetpack Compose with
    features that are required mainly by developers and are not available yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can utilize `enterTransition`, which explicitly specifies the animation
    that runs when you navigate to a particular destination, whereas `exitTransition`
    does the opposite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: You can also use `popEnterTransition`, which specifies the animation that runs
    when the destination re-enters the screen after going through `popBackStack()`,
    or `popExitTranstion`, which does the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is crucial to note a good practice that becomes relevant for hoisting the
    state is when you expose events from your composable functions to callers in your
    application that know how to handle that logic properly. In addition, under-the-hood
    navigation is all state-managed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more about `AnimatedNavHost`, you can find details here: [https://google.github.io/accompanist/navigation-animation/](https://google.github.io/accompanist/navigation-animation/).'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating with arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passing data between destinations is very vital in Android development. The
    new Jetpack navigation allows developers to attach data to a navigation operation
    by defining an argument for a destination. Readers will learn how to pass data
    between destinations using arguments.
  prefs: []
  type: TYPE_NORMAL
- en: A good use case is, say, you load an API with data and want to show more description
    on the data you just displayed; you can navigate with unique arguments to the
    next screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will explore the most common interview project requirement, which is to fetch
    data from an API and display one screen and add an additional screen for extra
    points.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s assume the API is the GitHub API, and you want to display all organizations.
    Then, you want to navigate to another screen and see the number of repositories
    each company has.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will look at an example of navigating with arguments as
    a concept since there is little more to do other than create the basic arguments
    to pass to utilize an already-built project – `SampleLogin`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and create `SearchScreen`, and this screen will have just a
    search function, `EditText`, and a column to display the data returned from an
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And now, when setting up navigation to `BrowseRepository`, you will need to
    add the following code. This piece of code is for passing a mandatory data parameter
    from one screen to another, but adding the example of passing an optional argument;
    a default value will help the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also use the `enter` and `exit` transition for animations. In this recipe,
    we have just touched on the concept of navigating with arguments, which can be
    applied to many projects.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you want to pass an argument to the destination, which is something that
    might be required, you need to explicitly attach it to the route when initiating
    the `navigate` function call, as you can see in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: We added an argument placeholder to our route, similar to how we added arguments
    to a deep link when using the base navigation library.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a list of what the navigation library supports; if you have a
    different use case, you can look into this document: [https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types](https://developer.android.com/guide/navigation/navigation-pass-data#supported_argument_types).'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 4.5 – Navigation support argument t\uFEFFype (credit: developers.android.com)](img/Figure_4.5.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5 – Navigation support argument type (credit: developers.android.com)'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is more to learn about navigation and, for a more thorough way to look
    into how you can navigate with arguments, retrieve complex data when navigating,
    and add additional arguments in depth, you can read more here: [https://developer.android.com/jetpack/compose/navigation](https://developer.android.com/jetpack/compose/navigation).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating deep links for destinations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Modern Android Development, deep links are very vital. A link that helps
    you navigate directly to a specific destination within an app is called a `Navigation`
    component lets you create two types of deep links: **explicit** and **implicit**.'
  prefs: []
  type: TYPE_NORMAL
- en: Compose navigation supports implicit deep links, which can be part of your Composable
    functions. It is also fair to mention there is no huge difference between how
    you would handle these using XML layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we don’t have a deep link use case in our application, in this recipe,
    we will look into how we can utilize the knowledge by learning how to implement
    implicit deep links.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can match deep links using a **Uniform Resource Locator** (**URI**), intent
    actions, or **Multipurpose Internet Mail Extensions** (**MIME**) types. Furthermore,
    you can easily specify multiple types that match for a deep link single but remember
    that the URI argument comparison is always prioritized, followed by the intent
    action, then the MIME type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compose has made it easier for developers to work with deep links. The `composable`
    function accepts a parameter list of `NavDeepLinks`, which can be easily created
    using the `navDeepLink` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by making the deep link externally available by adding the appropriate
    intent filter to our `AndroidManifest.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now in our `composable` function, we can use the `deepLinks` parameter, specify
    the list of `navDeepLink`, and then pass the URI pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Please note that navigation will automatically deep-link into that composable
    when another application triggers the deep link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Many applications still use `launchMode` when navigating. This is when using
    the Navigation Jetpack component, as seen in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can also utilize `deepLinkPendingIntent` like any other `PendingIntent`
    to start your Android application at the deep link destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When triggering an implicit deep link, the back stack state depends on when
    the implicit intent was launched with `Intent.FLAG_ACTIVITY_NEW_TASK`. Furthermore,
    if the flag is set, the back stack task is cleared and then replaced with the
    intended deep link destination.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Android development, a deep link refers to a specific destination for the
    application. For instance, when you invoke the deep link, the link opens up your
    application’s corresponding destination when a user clicks on the specified link.
  prefs: []
  type: TYPE_NORMAL
- en: This refers to where the link is meant to lead once clicked. The explicit deep
    link is a single instance that uses `PendingIntent` to take users to a specific
    location within your application. A good use case is when using notifications
    or app widgets.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is more to learn about deep links; for instance, how to create an explicit
    deep link. You can learn more about deep links here: [https://developer.android.com/training/app-links/deep-linking](https://developer.android.com/training/app-links/deep-linking).'
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests for navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created a new screen for our `SampleLogin` project, we need
    to fix the broken test and add new tests for the UI package. If you can recall,
    in [*Chapter 3*](B18827_03.xhtml#_idTextAnchor137), *Handling the UI State in
    Jetpack Compose and Using Hilt*, we did unit tests and not UI tests. This means
    after adding all the `ViewModel` instances, our UI tests are now broken. In this
    recipe, we will fix the failing tests and add a navigation test.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you do not need to create any new project; use the already-created
    project, `SampleLogin`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can apply these concepts to test the bottom navigation bar we created.
    Hence, we will not be writing tests for the `BottomNavigationBarSample` project.
    Open `SampleLogin` and navigate to the `androidTest` package. We will add tests
    here for the new `RegisterScreen()` a Composable function, and also fix the broken
    tests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s open the `LoginContentTest` class. Now, let’s move the `LoginContent`
    class to a helper class that we will create to help us with testing the UI logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `LoginContentTest` class, now, we will replace `LoginContent` with
    the newly created `contentLoginForTest()` function inside the `initCompose` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have fixed the tests, we can now add a `test` tag for our newly
    created clickable, `TextView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once that is done, we now need to create `lateint var NavHostController`, and
    a `launchRegisterScreenWithNavGraph` function to help us set up the navigation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can call the created function inside the `initCompose` function or in the
    new test function that we will create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a test function and name it `assertRegisterClickableButtonNavigatesToRegisterScreen()`.
    In this test case, we will set our route and then use `assert` when the correct
    `TextView` is clicked; we will navigate to the correct destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the test, and the UI test should pass, as seen in *Figure 4**.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Tests passing](img/Figure_4.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Tests passing
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `contentLoginForTest` that can help us verify our navigation.
    That is, when a user enters a valid username and password, they can navigate to
    a home screen. Furthermore, we created `launchRegisterScreenWithNavGraph()`, a
    helper function that creates the testing graph for our navigation test case.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using `FragmentScenario`, there are great tips for testing your
    navigation that you can see here: [https://developer.android.com/guide/navigation/navigation-testing](https://developer.android.com/guide/navigation/navigation-testing).'
  prefs: []
  type: TYPE_NORMAL
