["```\nimport Intents \n```", "```\nfunc requestSiriPermissions() { \n    INPreferences.requestSiriAuthorization({ (status) in \n        print(status) \n    }) \n} \n```", "```\nimport Intents \n\nstruct RestaurantContact { \n    let name: String \n    let email: String \n\n    static func allContacts() -> [RestaurantContact] { \n        return [ \n            RestaurantContact(name: \"Jason Clayton\", email: \"jason@mac.com\"), \n            RestaurantContact(name: \"Joshua Clayton\", email: \"joshua@texas.edu\"), \n            RestaurantContact(name: \"Teena Harris\", email: \"teena@gmail.com\") \n        ] \n    } \n\n    func inPerson() -> INPerson { \n        let formatter = PersonNameComponentsFormatter() \n        let handle = INPersonHandle(value: email, type: .emailAddress) \n\n        if let components = formatter.personNameComponents(from: name) { \n            return INPerson(personHandle: handle, nameComponents: components, displayName: components.familyName, image: nil, contactIdentifier: nil, customIdentifier: nil) \n        } \n        else { \n            return INPerson(personHandle: handle, nameComponents: nil, displayName: nil, image: nil, contactIdentifier: nil, customIdentifier: nil) \n        } \n    } \n} \n```", "```\nclass IntentHandler: INExtension{ \n\n    override func handler(for intent: INIntent) -> Any { \n        if intent is INSendPaymentIntent { \n            return SendMoneyIntent() \n        } \n\n        return self \n    } \n} \n```", "```\nclass SendMoneyIntent: NSObject, INSendPaymentIntentHandling { \n    func handle(intent: INSendPaymentIntent, completion: @escaping (INSendPaymentIntentResponse) -> Void) { \n        if let person = intent.payee, let amount = intent.currencyAmount { \n            //handle payment \n            print(\"person (person.displayName) - amount (String(describing: amount.amount))\") \n\n            completion(INSendPaymentIntentResponse(code: .success, userActivity: nil)) \n        } \n        else { \n            completion(INSendPaymentIntentResponse(code: .failure, userActivity: nil)) \n        } \n    } \n\n} \n```", "```\nfunc resolvePayee(for intent: INSendPaymentIntent, with completion: @escaping (INPersonResolutionResult) -> Void) { \n\n    if let payee = intent.payee { \n        let contacts:[RestaurantContact] = RestaurantContact.allContacts() \n        var result: INPersonResolutionResult? \n        var matchedContacts:[RestaurantContact] = [] \n\n        for contact in contacts { \n            print(\"checking existing: (contact.name) - (payee.displayName)\") \n\n            if contact.name == payee.displayName { \n                matchedContacts.append(contact) \n            } \n\n            switch matchedContacts.count { \n                case 0: \n                    print(\"no matches\") \n                    result = .unsupported() \n                case 1: \n                    print(\"best matched\") \n                    let person = matchedContacts[0].inPerson() \n                    result = INPersonResolutionResult.success(with: person) \n                default: \n                    print(\"more than one match\") \n                    let person:[INPerson] = matchedContacts.map { contact in \n                        return contact.inPerson() \n                    } \n                    result = INPersonResolutionResult.disambiguation(with: person) \n            } \n        } \n\n        completion(result!) \n    } else { \n\n        completion(INPersonResolutionResult.needsValue()) \n    } \n} \n```", "```\nvar desiredSize: CGSize { \n    return CGSize(width: self.desiredSize.width, height: 150) \n} \n```"]