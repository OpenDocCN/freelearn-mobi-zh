- en: Chapter 2. Starting a Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have installed Android Studio, the next thing to do is to get familiar
    with its features. You need to understand the necessary fields and form factors
    when creating a project. Also, you may need to choose the activity type to create
    the main activity. How can you achieve this using Android Studio?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to create a new project with the basic
    content that is needed to start out. We will use the Android Studio wizard to
    create the project and go through the project configuration fields. We will also
    select one of the different kinds of activities available in the wizard as our
    main activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing your main activity from different types of activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing your main activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new project, click on the **Start a new Android Studio project**
    option from the welcome screen. If you are not in the welcome screen, then navigate
    to **File** | **New Project**. This opens the **New Project** wizard, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new project](img/B05459_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The fields that will be shown on the **New Project** wizard are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: This is the name shown in Google Play and the name that
    users see.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company Domain**: This is the company or domain name that is used to create
    the package name of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: This is the unique identifier of your application, usually
    in the `com.company_name.app_name` or `reverse_company_domain.app_name` form.
    This form reduces the risk of name conflicts with other applications. A default
    package name is proposed, based on the **Company Domain** and **Application name**
    fields. You can change the package name by clicking on **Edit**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project location**: This is the directory in your system in which the project
    is saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete the information for your project and click on the **Next** button.
    This will take you to the second screen. This screen allows you to select your
    platform and the minimum SDK your project will support on different devices.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the form factors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because of the way Android has expanded to different types of devices, you
    may want to select one or more kinds of platforms and devices to be included in
    your project. For each type of device, you can select a different minimum SDK.
    The devices Android supports are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Phone and Tablet**: These are standard Android platforms used to create an
    application for phones and/or tablets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wear**: This is an Android Wear platform used to design applications for
    wearable devices such as smartwatches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TV**: This is an Android TV platform used to design applications for big
    screens, such as those of television sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Auto**: This is an extension to the Android platform to enable your
    app to work in cars. There is no platform selector for Android Auto because it
    depends on a standard **Phone and Tablet** project. Your app needs to target Android
    5.0 or higher to support Android Auto.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glass**: This is an Android Glass platform used to design applications for
    Google Glass devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've decided on your devices, you can choose the minimum SDK supported
    by your application. Devices with an older SDK will not be able to install your
    application. Try to reach a balance between supported devices and available features.
    If your application does not require a specific feature published in the newest
    SDKs, then you can select an older **Application Programming Interface** (**API**).
    The last dashboards published by Google about platform distribution show that
    97.3 percent of the devices use Android 4.0.3 Ice Cream Sandwich or a later version.
    If you select Android 2.3.3 Gingerbread, then the percentage rises to almost 100
    percent. You can check out these values by clicking on the **Help me choose**
    link. The official Android dashboards are also available at [http://developer.android.com/about/dashboards/index.html](http://developer.android.com/about/dashboards/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: To include any of the platforms and SDKs in your project, you need to have them
    installed in your system. The usual way to install a new platform is using a tool
    known as Android SDK Manager, which will be explained in [Chapter 6](ch06.html
    "Chapter 6. Tools"), *Tools*. You don't have to use the manager now since the
    wizard to create a new project does all the work for you.
  prefs: []
  type: TYPE_NORMAL
- en: Check the **Phone** and **Tablet** option and select `API 16` as the minimum
    SDK. After that, click on **Next**. The required components will be installed
    if necessary. If this is your case, click on **Next** again once the installation
    is completed. This will take you to the next screen where you can select the activity
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the activity type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activities are the components associated with the screens with which users interact
    in an application. The logic of an activity is implemented in a Java class with
    the name of the activity, which is created inside the source folder of your project.
    Android applications usually have multiple screens and are usually based on multiple
    activities. All the activities of an application have to be declared in the `AndroidManifest.xml`
    file. It is mandatory in any Android application since it describes essential
    information about the application. In [Chapter 3](ch03.html "Chapter 3. Navigating
    a Project"), *Navigating a Project*, you will learn about the project structure
    and the `AndroidManifest.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: When an application is launched, it shows the main screen of the application.
    This step of the **New Project** wizard creates the main activity of your application,
    which is the main entry point of your application. You can indicate the type of
    activity you want to create as the main activity of your application. You can
    complete the creation of a new project without adding an activity, but you will
    need to add a main activity when you are finished creating your project. You can
    also change your main activity later in your project by modifying the `AndroidManifest.xml`
    file. You will be able to add new activities to complete your application once
    your project is created. To create new activities you can use this same wizard
    step in the menu by navigating to **File** | **New** | **Activity** | **Gallery**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several types of activities that can be selected are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic Activity**: This template creates an activity with an action bar and
    a floating action button. The action bar includes a title and an options menu.
    Action bars can provide navigation modes and user actions. You can read more about
    action bars at [http://developer.android.com/guide/topics/ui/actionbar.html](http://developer.android.com/guide/topics/ui/actionbar.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read more about floating action buttons at [https://www.google.com/design/spec/components/buttons-floating-action-button.html](https://www.google.com/design/spec/components/buttons-floating-action-button.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows **Basic Activity**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Choosing the activity type](img/B05459_02_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you select this template, Android Studio will create a project with two
    layout files (`activity_main.xml` and `content_main.xml`) and the main activity
    class. The main layout (`activity_main.xml`) declares the action bar and the floating
    action button, and includes the content layout (`content_main.xml`) by adding
    the following XML declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Empty Activity**: This creates a blank activity. Here is a screenshot showing
    **Empty Activity**:![Choosing the activity type](img/B05459_02_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fullscreen Activity**: This template hides the system''s user interface (such
    as the notification bar) in a fullscreen view. By default, the fullscreen mode
    is alternated with an action bar that shows up when the user touches the device
    screen. **Fullscreen Activity** is shown in the following screenshot:![Choosing
    the activity type](img/B05459_02_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you select this template, Android Studio will create a project with a main
    activity and its main layout. The main activity contains all the logic to handle
    the fullscreen mode. For example, you will notice two helper methods that hide
    and show the action bar:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And you will notice the constant variables to configure whether the bar should
    hide automatically after a delay and the time of that delay:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Google AdMob Ads Activity**: This template creates an activity with a contained
    **AdMob Ad**. The purpose of this template is to display ads that allow monetizing
    your app. Here is a screenshot showing **Google AdMob Ads Activity**:![Choosing
    the activity type](img/B05459_02_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you select this template, Android Studio will create a project with a main
    activity and its main layout. The main activity contains all the logic to create
    (`newInterstitialAd` method), load (`loadInterstitial` method), and show (`showInterstital`
    method) ads, which are saved in an `InterstitialAd` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Google Maps Activity**: This template creates a new activity with a Google
    map in a fragment. A fragment is a portion of user interface in an activity. Fragments
    can be reused in multiple activities, and multiple fragments can be combined in
    a single activity. See more about fragments at [https://developer.android.com/guide/components/fragments.html](https://developer.android.com/guide/components/fragments.html).
    It is shown in the next screenshot:![Choosing the activity type](img/B05459_02_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you select this template, Android Studio will create a project with a main
    activity and a layout containing the following map fragment:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Login Activity**: This template creates a view as a login screen, allowing
    the users to log in or register with e-mail and password.![Choosing the activity
    type](img/B05459_02_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you select this template, Android Studio will create a project with a main
    activity and its layout. The main layout contains: a `ProgressBar` to show the
    login progress, an `AutoCompleteTextView` for the user''s e-mail, an `EditText`
    for the user''s password, and a `Button` to sign in.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The main activity includes code to autocomplete the e-mail, code to change the
    focus from one field to another, an `AsyncTask` class to perform the login in
    background, and code to show the progress of the login.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Master/Detail Flow**: This template splits the screen into two sections:
    a left-hand-side menu and the details of the selected item on the right-hand side.
    On a smaller screen, just one section is displayed, but on a bigger screen, both
    sections are displayed at the same time.![Choosing the activity type](img/B05459_02_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you select this template, Android Studio will create a project with two
    activities: the list activity and the detail activity. The project also contains
    the two layouts for both activities: the list layout and the detail layout. There
    are some additional classes, such as a detail fragment and layouts to create the
    master list.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Navigation Drawer Activity**: This template creates a new activity with a
    navigation drawer. It displays the main navigation options in a panel that is
    brought onto the screen from a left-hand-side panel. You can read more about navigation
    drawers at [https://developer.android.com/design/patterns/navigation-drawer.html](https://developer.android.com/design/patterns/navigation-drawer.html).![Choosing
    the activity type](img/B05459_02_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This template contains a main activity that implements the `NavigationView.OnNavigationItemSelectedListener`
    interface. This listener allows the activity to receive an event when the user
    selects an option from the drawer menu. Events are received in the `onNavigationItemSelected`
    method implemented by the main activity:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The main layout is `DrawerLayout`, which contains a `NavigationView` object.
    Extra layouts are also created in the project for the main content, the main top
    bar, and the drawer header views.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Scrolling Activity**: This template creates an activity that scrolls vertically.![Choosing
    the activity type](img/B05459_02_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This template contains a main activity and a main layout. The main layout has
    a `Toolbar` and includes the scroll content layout:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The content layout is `NestedScrollView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Settings Activity**: This creates a preferences activity with a list of settings:![Choosing
    the activity type](img/B05459_02_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This template has two activities: the main activity and the preferences activity.
    The preferences activity extends the `PreferenceActivity` class and overrides
    the methods to build the preferences screen. The preferences content is configured
    using the XML files that define the `PreferenceScreen` components.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Tabbed Activity**: This creates a blank activity with an action bar similar
    to **Basic Activity**, but it also includes a navigational element. The navigational
    element can be a tabbed user interface (fixed or scrollable tabs), a horizontal
    swipe, or a spinner menu. The project content generated by Android Studio depends
    on the navigational element selected.![Choosing the activity type](img/B05459_02_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Empty Activity** and click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing your activity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last step of the **New Project** wizard, you can customize a little bit
    of your activity. This customization is going to determine the names of some of
    your classes and resources files. You can also customize from this wizard the
    use of fragments or the navigation type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the customization screen for an **Empty Activity**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing your activity](img/B05459_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The basic customization for the activity has the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Activity Name**: Name of the main activity class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout Name**: You can create a layout for your activity if you check the
    **Generate Layout File** option. This field lets you specify the name of the layout
    associated with your main activity, which will be created in the resources folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Depending on the type of activity selected in the previous steps, you can customize
    more parameters. The following screenshot shows the customization of **Basic Activity**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing your activity](img/B05459_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to the activity and layout names, you can configure the following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**: This will be used for the activity and in the action bar by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Menu Resource Name**: The name of the resource file that configures the menu
    items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are other customizations that are available only to one type of activity,
    such as **AdMob Ads Activity** and **Tabbed Activity**. The **AdMob Ads Activity**
    contains one additional option, **Ad Format**, which is the format of the ad.
    Format can be **Interstitial** or **Banner**. The **Tabbed Activity** includes
    two additional options: **Fragment Layout Name**, which is the name of the layout
    associated with the activity''s content fragment; and **Navigation Style**, which
    is the type of navigation. You can choose to navigate by any of the following
    three alternatives:'
  prefs: []
  type: TYPE_NORMAL
- en: Swiping the views (**Swipe Views**) as shown in the next screenshot:![Customizing
    your activity](img/B05459_02_15.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This type of navigation uses a `ViewPager` component to display the fragments.
    The `ViewPager` object is configured, in the main activity, with a `SectionsPagerAdapter`
    object. It provides the fragments that the `ViewPager` needs. In addition to the
    main layout that contains a `ViewPager`, a fragment layout is also created: `fragment_main.xml`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tabs in the action bar (**Action Bar Tabs**) as shown in the next screenshot:![Customizing
    your activity](img/B05459_02_16.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This type of navigation uses the same components and files as the **Swipe Views**
    navigation type, plus a `TabLayout` object. The `TabLayout` object needs to receive
    the `ViewPager` object, which is set in the `onCreate` method of the main activity:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a spinner in the action bar (**Action Bar Spinner**) as shown in the next
    screenshot:![Customizing your activity](img/B05459_02_17.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This type of navigation uses a `Spinner` component to display the fragments.
    The `Spinner` object is configured, in the main activity, with `ThemedSpinnerAdapter`.
    It provides the fragments that the `Spinner` needs. In addition to the main layout
    that contains `ViewPager`, a fragment layout is also created: `fragment_main.xml`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To complete this chapter, we select **Empty Activity**. Retain the default values
    in the customization and click on **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: 'An **Empty Activity** will be created in your project. This activity is also
    configured as the main activity of your application in the `AndroidManifest.xml`
    file by setting the following intent filter action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `android.intent.action.MAIN` action sets the activity as the main entry
    point of your application. The `android.intent.category.LAUNCHER` category indicates
    that the entry point should appear as a top-level application in the launcher.
    We will examine this `AndroidManifest.xml` file in [Chapter 3](ch03.html "Chapter 3. Navigating
    a Project"), *Navigating a Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have used the Android Studio wizard to create our first project and have
    filled the configuration fields. We also went through the different kinds of activities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go through the different elements of the structure
    of Android Studio. We will see how to create new classes, add and access libraries,
    and configure the project.
  prefs: []
  type: TYPE_NORMAL
