- en: Displaying Data in Restaurant Detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our app is coming together nicely, but we have one more section to do before
    we can start adding features. We have data in all of our views except for in our
    restaurant detail. In the last chapter, we passed data using segues, and we are
    going to do this again in this chapter.  We have a few other things in this view
    that we need to set up before we move on to some of the features of the app; so
    in this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Passing data using segues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting IBOutlet to display data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying one annotation in a Map view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s set up our `RestaurantDetailViewController` by adding the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following variables after the class declaration and before the `selectedRestaurant`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we''ve created our `IBOutlet`, we need to connect them:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `RestaurantDetail.storyboard`, select the Restaurant Detail View Controller
    in the Outline view, and then open the Connections inspector in the Utilities
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on and drag from the empty circle of each of the following variables
    we just added under Outlets to their respective elements listed as follows in
    either the scene or Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An empty circle for `imgMap` to the Map View in the Outline view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ff6e39c9-1aa9-44d7-9d37-3ac1dedb6f8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblAddress` to the address Label above the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6b2d9af-605c-4016-94ab-95eb6c9e5881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblOverallRating` to the Label inside the Reviews cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/63b0ffe4-f29c-4b27-ae49-4349ec06c1be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblTableDetails` to the Label under the header in the
    scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88fc7ed3-0f37-4124-8881-8cc8404076a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblName` to the Label under the logo in the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de5080c3-2bf2-4eb2-a5c0-2ce4eba827a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblCuisine` to the Label under `lblName` in the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af0ddf35-a74f-4cc6-911f-c6eca0f2cb20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An empty circle for `lblHeaderAddress` to the Label under `lblCuisine` in the
    scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3a020d3e-f0f2-4380-a1b5-99fbff35e0d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a navigation button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding a navigation button used to be as simple as just dragging out the button;
    however, for some reason that isn''t the case anymore. To display a heart in the
    navigation bar, we will have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Restaurant Detail View Controller in the Outline view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to Editor | Embed In | Navigation Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When complete, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78204bb9-9cfc-4d9e-b34c-05911f2ea1ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open the Utilities panel, and in the filter bar of the object library,
    type `bar`; drag a bar button item to the top-right of the Restaurant Detail View
    Controller. You will see an outline appear in this area, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7409004b-29c6-4fa8-96ee-d24c2ef9d64e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Attributes inspector, under Bar Item, delete the text Item for Title
    and Image and update the image value to heart-unselected. When complete, you should
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9f4740a-64de-4846-99ee-99054ee0a3cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to connect our favorite icon in the navigation bar. Select the
    Restaurant Detail View Controller in the Outline view. Then, in the Outlet inspector,
    click and drag `btnHeart` to our newly created button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23563ce0-65e3-4a4a-a765-b1ae31670d02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, with the View Controller still selected, in the Attributes inspector
    click on the checkbox next to Is Initial View Controller. When complete, you should
    see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/177d7ed6-ce61-46b4-a867-20b860ced851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now select the Navigation Controller and delete it. When you are done, you
    should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9970e8bf-8e63-49a4-b453-f1d26578fef0.png)'
  prefs: []
  type: TYPE_IMG
- en: For some reason, we had to go through all of that just to add the bar button
    item, even though typically we could just drag it and drop it. Now that we have
    everything connected, we can now jump into coding and get our detail page displaying
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in our static Table View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we need to create a method that will display all of our data in our labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, open the `RestaurantDetailViewController.swift` file and add the following
    before the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This method will now get the data and display it inside our labels. Next, we
    want to display a map of the restaurant location at the bottom of our Detail view. 
    Now, you might be wondering why we are using an image and not a map. Using a map
    uses a lot more resources, whereas an image makes things a lot smoother.  Let''s
    arrange for an image of a map to display, and also show our custom annotation
    in the image. Add the following method under the `setupLabels()` method and before
    the last curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, we get the longitude and latitude and enter the values into
    a `CLLocationCoordinate2D` object. We then pass the location to a method called
    `takeSnapShot(with:)`.  Add the following method under the `createMap()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This method is long, but it allows us to create a map at the size we need. We
    then pass all of our settings to our snapshotter to create a picture. Once we
    have created our image, we then add our custom annotation to it. Although this
    requires a lot of code, it is the best way to understand it in its entirety. Here,
    we would recommend changing values line-by-line to see how it affects the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created our functions, we just need to call them, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following after the `viewDidLoad()` method in the `RestaurantDetailViewController.swift`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This method now needs to be called inside your `viewDidLoad()` method.  Replace
    the `dump` statement in the `viewDidLoad()` method with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we have finished with our Restaurant Detail View Controller.  Let's build
    and run the project by hitting the Play button (or using *cmd* + *R*). When you
    select a restaurant, you should see all of the restaurant's information on the
    details page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you should see a pin dropped at the restaurant''s location on the map,
    which is actually an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77e1d5b1-0086-4fd4-9c5c-4af292901419.png)'
  prefs: []
  type: TYPE_IMG
- en: We are done with the restaurant detail for now, but we still need to be able
    to show ratings, reviews, and photos. We will work on all of these features in
    upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have JSON data loading into our app.  As you can see, going from a plist
    to a JSON file was not a huge step. Our app is now looking more and more like
    it should be available on the App Store. In the following chapters, we will turn
    our attention to adding features that you might want to use in your app. These
    features will enhance the user experience, and therefore learning them will be
    invaluable. Even if the features don't seem like something you want or need, it
    will be beneficial in the long run to understand what they are and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will work with the camera and learn how to apply filters
    and save images to the Camera Roll.
  prefs: []
  type: TYPE_NORMAL
