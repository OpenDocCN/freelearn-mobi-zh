["```swift\n    import UIKit\n    class ViewController: UIViewController {\n       @IBOutlet var toastLabel: UILabel!\n       @IBOutlet var eggLabel: UILabel!\n       @IBOutlet var sandwichLabel: UILabel!\n       @IBOutlet var elapsedTimeLabel: UILabel!\n       override func viewDidAppear(_ animated: Bool) {\n          super.viewDidAppear(animated)\n          let startTime = Date().timeIntervalSince1970\n          toastLabel.text = \"Making toast...\"\n          toastLabel.text = makeToast()\n          eggLabel.text = \"Poaching egg...\"\n          eggLabel.text = poachEgg()\n          sandwichLabel.text = makeSandwich()\n          let endTime = Date().timeIntervalSince1970\n          elapsedTimeLabel.text = \"Elapsed time is \n          \\(((endTime - startTime) * 100).rounded() \n          / 100) seconds\"\n       }\n       func makeToast() -> String {\n          sleep(2)\n          return \"Toast done\"\n       }\n       func poachEgg() -> String {\n          sleep(6)\n          return \"Egg done\"\n       }\n       func makeSandwich() -> String {\n          return \"Sandwich done\"\n       }\n       @IBAction func testButton(_ sender: UIButton) {\n          print(\"Button tapped\")\n       }\n    }\n    ```", "```swift\n    @IBOutlet var toastLabel: UILabel!\n    @IBOutlet var eggLabel: UILabel!\n    @IBOutlet var sandwichLabel: UILabel!\n    @IBOutlet var elapsedTimeLabel: UILabel!\n    ```", "```swift\n    override  func viewDidAppear(_ animated: Bool) {\n    ```", "```swift\n    let startTime = Date().timeIntervalSince1970\n    ```", "```swift\n    toastLabel.text = \"Making toast...\"\n    ```", "```swift\n    toastLabel.text = makeToast()\n    ```", "```swift\n    eggLabel.text = \"Poaching egg...\"\n    ```", "```swift\n    eggLabel.text = poachEgg()\n    ```", "```swift\n    sandwichLabel.text = makeSandwich()\n    ```", "```swift\n    let endTime = Date().timeIntervalSince1970\n    ```", "```swift\n    elapsedTimeLabel.text = \"Elapsed time is \n    \\(((endTime - startTime) * 100).rounded() \n    / 100) seconds\"\n    ```", "```swift\n    @IBAction func testButton(_ sender: UIButton) {\n       print(\"Button tapped\")\n    }\n    ```", "```swift\nfunc methodName() async -> returnType {\n```", "```swift\nawait methodName()\n```", "```swift\n    func makeToast() -> String {\n       Task represents a unit of asynchronous work. Task has a static method, sleep(nanoseconds:), which pauses execution for a specified duration, measured in nanoseconds. Multiplying by 1,000,000,000 converts the duration to seconds. The await keyword indicates this code can be suspended to allow other code to run.\n    ```", "```swift\n    func makeToast() async -> String {\n       try! await Task.sleep(nanoseconds: 2 * 1_000_000_000)\n       return \"Toast done\"\n    }\n    func poachEgg() async -> String {\n       try! await Task.sleep(nanoseconds: 6 * 1_000_000_000)\n       return \"Egg done\"\n    }\n    ```", "```swift\n    override  func viewDidAppear(_ animated: Bool) {\n       super.viewDidAppear(animated)\n       Task {\n          let startTime = Date().timeIntervalSince1970\n          toastLabel.text = \"Making toast...\"\n          toastLabel.text = await makeToast() \n          eggLabel.text = \"Poaching egg...\"\n          eggLabel.text = await poachEgg() \n          sandwichLabel.text = makeSandwich()\n          let endTime = Date().timeIntervalSince1970\n          elapsedTimeLabel.text = \"Elapsed time is \n          \\(((endTime - startTime) * 100).rounded() \n          / 100) seconds\"\n       }\n    }\n    ```", "```swift\nasync let temporaryConstant1 = methodName1()\nasync let temporaryConstant2 = methodName2()\nawait variable1 = temporaryConstant1\nawait variable2 = temporaryConstant1\n```", "```swift\nTask {\n   let startTime = Date().timeIntervalSince1970\n   toastLabel.text = \"Making toast...\"\n   async let tempToast = makeToast()\n   eggLabel.text = \"Poaching egg...\"\n   async let tempEgg = poachEgg()\n   await toastLabel.text = tempToast\n   await eggLabel.text = tempEgg\n   sandwichLabel.text = makeSandwich()\n   let endTime = Date().timeIntervalSince1970\n   elapsedTimeLabel.text = \"Elapsed time is \n   \\(((endTime - startTime) * 100).rounded() \n   / 100) seconds\"\n}\n```", "```swift\n   if let imageURL = restaurantItem.imageURL {\n      Task {\n         guard let url = URL(string: imageURL)\n         else {\n            return\n         }\nlet (imageData, response) = try await \n         URLSession.shared.data(from: url)\nguard let httpResponse = response as? \nHTTPURLResponse, httpResponse.statusCode \n         == 200 else {\n            return\n         }\nguard let cellImage = UIImage(data: \n         imageData) else {\n            return\n         }\n         cell.restaurantImageView.image = cellImage\n         }\n      }\n   return cell\n}\n```", "```swift\nTask {\n```", "```swift\nguard let url = URL(string: imageURL)\nelse {\n   return\n}\n```", "```swift\nlet (imageData, response) = try await \nURLSession.shared.data(from: url)\n```", "```swift\nguard let httpResponse = response as? HTTPURLResponse,\nhttpResponse.statusCode == 200 else {\n   return\n}\n```", "```swift\nguard let cellImage = UIImage(data: imageData) else {\n   return\n}\n```", "```swift\ncell.restaurantImageView.image = cellImage\n```", "```swift\nreturn cell\n```"]