- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iPhone Project – Tax Calculator Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we did a recap of Swift and SwiftUI. We looked at the
    requirements, the coding standards used, and the basics of SwiftUI components.
    We will use these in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will work on the design of our first project, a tax calculator.
    We will assess the requirements for designing such an application and discuss
    the design specifications, allowing us to get a better understanding of what is
    required and how it will all fit together. Then, we will start our application’s
    coding process to build out the UI, which will be connected together allowing
    the application to fully function in the next chapter. This project will teach
    us the foundations of SwiftUI components and how to interact with external code
    bases. We will discuss all of this in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the Calculator UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of what is
    required and the design of our application. You will also have a skeleton UI that
    will be used as the foundation for making the calculator work in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install Xcode, just search for `Xcode` in the App Store, then select and
    download the latest version. Open Xcode and follow any additional installation
    instructions. Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download the sample code from the following GitHub link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will provide clarity on the specifications of our application’s
    design and look at mockups of what the app will look like.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Design Specifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the design specifications of our tax calculator
    application. This section describes the features we are going to implement in
    our tax calculator app. The best method for figuring out the features required
    is to put yourself in the user’s shoes to determine how they will use the app
    and break it into individual steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The features of our app are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Income entry – the ability to enter an income.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salary summary – a summary of how much is going to be taxed and how much is
    left as income.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tax breakdown – a breakdown of how much tax is paid on a given salary, that
    is, tax brackets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different taxes – the ability to calculate a breakdown for different types of
    taxes, such as income, property flipping, inheritance, and stamp duty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tax geography – the ability to calculate a breakdown for taxes in different
    geographies, including countries and states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combination of the previous two – the ability to calculate a breakdown for different
    taxes in different geographies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User system – allows users to create an account to store tax calculations, see
    how the tax has changed over time relative to new tax laws, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have listed the ideal features we would like, next, it is important
    for us to determine which features are absolutely crucial. To do this, we must
    understand the end use of our product. For me, the purpose of creating this tax
    calculator is not to release it and have it serve millions of people but to be
    a personal project for our use. It is to demonstrate a basic implementation of
    SwiftUI within the context of this book. Based on that, I know that all the features
    are not required; actually, it would be useful if some were omitted and assigned
    as extra tasks for you as the developer to undertake. Based on all of this, the
    following are the core features we will be implementing:'
  prefs: []
  type: TYPE_NORMAL
- en: Income entry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salary summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tax breakdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the features will be left for you to implement as an exercise once
    you have completed this and the next chapter. The next section will cover the
    acceptance criteria for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will discuss the mandatory requirements for our application that we absolutely
    want to see in the end product at the end of the next chapter. If possible, we
    should try to make them measurable. Let’s do this right now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Error detection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not a Number** (**NaN**) values'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Values that are equal to or less than 0
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides the before- and after-tax salaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pie chart to illustrate the breakdown visually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progress bars to further expand upon the breakdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation to allow users to switch between the pages effortlessly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop test cases in which the application’s acceptance criteria will be tested.
    Using this method allows you to see the conditions in which the application will
    be used by the end user and the level of functionality that needs to be attained
    for it to be considered successful.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the most useful tools for designing layouts is wireframing. A wireframe
    is an overview of how the layout will look. The following figure shows what the
    front page of our app would look like using a wireframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Front page wireframe preview](img/Figure_2.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Front page wireframe preview
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the wireframe of what our results page would look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Results page wireframe preview](img/Figure_2.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Results page wireframe preview
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will build the interface for our application and make
    sure it looks the way we designed it in the wireframes. Though we will build it
    the same way, there can be small differences. This will serve as the foundation
    for connecting it all together in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building the calculator UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now build the UI for the calculator app. There are two main parts to
    the calculator, the first being the front page, which is loaded on launch. Once
    the user inputs an income and hits **Calculate Tax**, they are taken to the results
    page, which is the second part. On this page, the results of the tax calculation
    and a breakdown of it will be displayed. Naturally, we will start off with the
    first part, the front page, but before even that, we will create our project.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Xcode and select **Create a new** **Xcode project**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Create a new Xcode project](img/Figure_2.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Create a new Xcode project
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will choose the template for our application. As we are creating an
    iPhone application, we will select **iOS** from the top and then select **App**
    and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Xcode project template selection](img/Figure_2.04_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Xcode project template selection
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now choose the options for our project. Here, there are only two crucial
    things to select/set. Make sure **Interface** is set to **SwiftUI**; this will
    be the UI our system will use. Set **Language** to **Swift**; this is the programming
    language used for our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Xcode project options](img/B18783_02_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Xcode project options
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you press **Next**, you can choose where to create your project, as seen
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Xcode project save directory](img/B18783_02_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Xcode project save directory
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have found the location you would like to create the project in, click
    on **Create** at the bottom right. Xcode shows your project in all its glory,
    as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – New Xcode project overview](img/B18783_02_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – New Xcode project overview
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will implement the front page of our application using
    SwiftUI and further look at the Xcode IDE as we do so.
  prefs: []
  type: TYPE_NORMAL
- en: Front page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will implement the front page’s UI. As a reminder, here
    is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.8 – Front page wireframe p\uFEFFreview](img/B18783_02_8.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Front page wireframe preview
  prefs: []
  type: TYPE_NORMAL
- en: There are three main elements on the front page. As a little task, see whether
    you can figure out what they are. Don’t worry if you don’t know the exact UI component
    names; we will look at these components in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A Text component is one of the simplest components offered by SwiftUI. It allows
    you to display a string of characters/numbers, which is very useful for headings
    and providing information. We will use it to provide context to the next component,
    which is `TextField`. Without the Text component, the user doesn’t know the purpose
    of the `TextField`. The following figure shows the label on the front page, telling
    the user what the following text input field is used for:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.9 – Front \uFEFFpage label](img/Figure_2.09_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Front page label
  prefs: []
  type: TYPE_NORMAL
- en: TextField
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'TextFields allow the user to input text that can consist of numbers and any
    character. Our TextField will be used to input a number, hence it will only accept
    numbers. This is a feature we will configure. Some applications put background
    text in the text field providing context to the purpose of the `TextField`; however,
    we have opted for a label component to provide context and do not require this.
    The following figure shows the `TextField` that the user can use to input their
    salary:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.10 – Front pag\uFEFFe TextField](img/Figure_2.10_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Front page TextField
  prefs: []
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Buttons are used when you want the user to explicitly trigger some functionality.
    In our case, we want the user to press the button when they are ready to calculate
    their tax calculation. Naturally, we as developers must error-check this to check
    whether the button can be pressed when the `TextField` is empty or if the wrong
    type of data has been inputted in the `TextField`. We will handle that with an
    error message instead of displaying the tax calculation. If you take a look at
    the following screenshot, you will see what this button looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Front page button](img/Figure_2.11_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Front page button
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add the elements we discussed previously using
    SwiftUI into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Front Page Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will add the components we listed previously to create
    our front page. Look for the `ContentView` file, which can be found in the **Project
    navigator**, usually on the left, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Project navigator](img/B18783_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Project navigator
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following code and add it to the `ContentView` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding code, we are able to render a `Text`, `TextField`, and
    `Button`. This will form the basis of allowing the user to enter their salary
    and click the button to calculate the tax breakdown. We use a variable called
    `salary` to store TextField’s data. Let’s take a look at the end result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Elements without styling preview](img/B18783_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Elements without styling preview
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the `Text` component looks pretty good, but the `TextField`
    has no obvious boundaries. I put a placeholder inside it as without it, the user
    wouldn’t even know where the `TextField` is. Next, the `Button` has the wrong
    styling. Let’s fix both of these with the following updated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the preceding code, we added a black border with a width of `1` to the
    `TextField` and removed the placeholder text. Next, we added a button style to
    the `Text` component of the button. We used the `borderedProminent` style, which
    is exactly what we need. All these changes result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Updated code preview](img/B18783_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Updated code preview
  prefs: []
  type: TYPE_NORMAL
- en: 'The preview shows we are very close. For the type of data we are inserting
    into `TextField`, it doesn’t need to be this wide. Let’s make it smaller. Modify
    `TextField` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added a width of `200` to make the `TextField` look better suited for
    what we need. Thus far, we have changed the properties of our app’s components
    programmatically. However, you can use the Xcode UI to tweak the properties as
    well. Doing this is simple: select a component in the code by hovering the mouse
    cursor over it and clicking the code as if you are going to edit it. Now, on the
    right, a pane including the **Attributes Inspector** will appear.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Attributes Inspector](img/B18783_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Attributes Inspector
  prefs: []
  type: TYPE_NORMAL
- en: If the **Attributes Inspector** pane doesn’t appear, go to **View** | **Inspectors**
    | **Attributes**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Opening Attributes Inspector manually](img/B18783_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Opening Attributes Inspector manually
  prefs: []
  type: TYPE_NORMAL
- en: 'We are almost done; we only have three UI components. The interface is currently
    quite compact. Let’s spread out the components to make it look nicer. Add the
    following code to space out the components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we added padding at the bottom of the `Text` and `TextField`
    components to evenly spread all three items out. Feel free to experiment with
    the padding values to get the UI to feel like what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you have four components and want to add padding to the top three, the formula
    would be `n - 1` in terms of the number of components that need padding to be
    evenly spread out. `n` is the total number of components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our front page now looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Preview with padding](img/B18783_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Preview with padding
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, if we launch our app and click the `TextField`, a regular keyboard
    appears, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Front page of the regular keyboard preview](img/B18783_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Front page of the regular keyboard preview
  prefs: []
  type: TYPE_NORMAL
- en: 'This is fine for a field that requires text input for names or addresses, but
    this field only requires a salary and therefore only needs numerical input. Let’s
    update our code to set the keyboard type to `decimalPad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: There is a `numberPad` option but it doesn’t allow the input of decimal numbers,
    so we will go ahead and use the `decimalPad` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the app now, it will show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Front page decimal pad preview](img/B18783_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Front page decimal pad preview
  prefs: []
  type: TYPE_NORMAL
- en: 'The keyboard type can also be changed in the **Attributes Inspector**. This
    is a great place to quickly see all the available keyboard types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Keyboard Type](img/B18783_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Keyboard Type
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on keyboard types, check out [https://developer.apple.com/documentation/swiftui/view/keyboardtype(_:)](https://developer.apple.com/documentation/swiftui/view/keyboardtype(_:)).
  prefs: []
  type: TYPE_NORMAL
- en: "If the keyboard doesn’t show in the simulator, this is due to the fact your\
    \ Mac already has a keyboard and the simulator decides you don’t need it displayed.\
    \ But this can be overridden. Either use the\L ** *+ K* keyboard shortcut to\
    \ open and ***+* ** *+ K* to close it, or go to **I/O** | **Keyboard** | **Toggle**\
    \ **Software Keyboard**:"
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Toggle Software Keyboard](img/B18783_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Toggle Software Keyboard
  prefs: []
  type: TYPE_NORMAL
- en: Now the software keyboard in the simulator will appear. This should only need
    to be done once. We have now completed the design for the front page. Currently,
    there is no functionality, but this will be implemented in the following chapter.
    But we are not done with the design. We will now implement the design for the
    results page.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the results page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will implement the results page’s UI. As a reminder, here
    is what it will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Results page wireframe preview](img/B18783_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Results page wireframe preview
  prefs: []
  type: TYPE_NORMAL
- en: There are three main sections on the results page. Each section is composed
    of two or more components. As a little task, see whether you can figure out what
    they are. Don’t worry if you don’t know the exact UI component names as we will
    take a look at them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Graph Summary Section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The graph summary section comprises two main components, a Text component and
    a pie chart. SwiftUI doesn’t provide a pie chart, so we will use an external library.
    We will use the `ChartView` library created by *Andras Samu*, which can be found
    here: [https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView).'
  prefs: []
  type: TYPE_NORMAL
- en: This section will visually showcase a simple breakdown of the tax calculation.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF2.23 – Graph summary wireframe](img/B18783_02_23.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Graph summary wireframe
  prefs: []
  type: TYPE_NORMAL
- en: Text Summary Section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the text summary section, there are four text components. The first component
    informs the user that the following `Text` component is used to display the **Before
    Tax** salary title. The second component tells the user that the following text
    component is used to display the **After Tax** salary title. This does not include
    a breakdown of how the tax is split. This will come in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure\uFEFF 2.24 – Text summary wireframe](img/B18783_02_24.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Text summary wireframe
  prefs: []
  type: TYPE_NORMAL
- en: Individual breakdown section
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The individual breakdown section displays how the tax and salary are broken
    down. There are six components, three `Text` components and three `ProgressView`
    components. Each is paired together to make three subsections, **Base Salary**,
    **Tax**, and **National Insurance**. This design is simple but extendible. Once
    it is created, I give you the task of adding further breakdowns of the tax, such
    as student loans and pension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Individual breakdown wireframe](img/B18783_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Individual breakdown wireframe
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add the elements that make up the results page
    before wrapping up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding results page components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will add the previously discussed components to our results
    page. However, firstly we must integrate the `ChartView` framework by *Andras
    Samu*. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **File |** **Add Packages…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Xcode Add Packages… option](img/B18783_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – Xcode Add Packages… option
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for the `ChartView` framework using the following URL: [https://github.com/AppPear/ChartView](https://github.com/AppPear/ChartView).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `2.0.0-beta.2`, or whatever the latest version is for you. Then, click
    **Add Package** at the bottom right. It is grayed out in mine as I have already
    added it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Search for the ChartView package](img/B18783_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Search for the ChartView package
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on **Add Package** will add the package to the project successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now create a new SwiftUI View for the results page. Right-click the
    calculator folder inside of your **Project Navigator** pane and select **New File…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.28 – New File…](img/B18783_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – New File…
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will select the type of file we want to add, which for us is a SwiftUI
    View (selecting this provides a SwiftUI template, which saves us time and effort
    retyping the SwiftUI file structure every time), under the **User** **Interface**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.29 – SwiftUI View selection](img/B18783_02_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – SwiftUI View selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must rename our `ResultsView` and press **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.30 – View naming](img/B18783_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – View naming
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `ResultsView` file and import the `SwiftUICharts` framework by adding
    the following code to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to create the chart itself. Doing so is very simple, thanks to
    the `ChartView` library. First, add the data the chart will be using. For now,
    we will add some dummy hardcoded data for testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The values in the array will represent the base salary, tax, and national insurance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will implement our pie chart using `ChartView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.31 – Pie chart added](img/B18783_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – Pie chart added
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the `ResultsView`, you will need to use the **Live Preview Window**.
    By default, it should appear. If it doesn’t, use the following keyboard shortcut:
    *+ + Return*. Now, Xcode will look like the following screenshot:![](img/03.jpg)![](img/01.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.32 – Live preview window location](img/B18783_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.32 – Live preview window location
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, the pie chart goes up to the edges. Let’s put the pie chart inside
    a VStack with padding. Edit the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The changes in the preceding code will now make the chart look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.33 – Pie chart with padding](img/B18783_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.33 – Pie chart with padding
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a `Text` component that says `36`. Add the following code to the
    body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following output shows the new summary text above the pie chart that we
    added previously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.34 – Summary header](img/B18783_02_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.34 – Summary header
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the pie chart, we will add four more text components, for **Before Tax**
    and **After Tax**: one for the heading of each subsection and one for the actual
    figure. For now, we will hardcode the values. Update the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code will display the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.35 – Before Tax and After Tax text](img/B18783_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.35 – Before Tax and After Tax text
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, the text components on the bottom of the page are crammed together.
    Let’s add padding to the top and bottom of each text component to spread them
    out. You can obviously use the **Attributes Inspector** to do this, but we will
    do it programmatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After adding the padding in the preceding code, we will have a results page
    that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.36 – Results after padding](img/B18783_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.36 – Results after padding
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the progress bars, which will represent the salary, tax,
    and national insurance. We will use the `ProgressView` component combined with
    a `Text` component to display the tax breakdown. After the previously added `Text`
    components, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code adds the two `ProgressView` and `Text` component pairs,
    which shows the post-tax salary and tax. This will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.37 – Breakdown components added](img/B18783_02_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.37 – Breakdown components added
  prefs: []
  type: TYPE_NORMAL
- en: 'You have probably noticed that we only added two of the three `ProgressView`
    components. The reason for this is to showcase an error that occurs. So, now add
    the following code after the previously added code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will result in the following error: `Group` component, which will make
    the view detect it as one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will group the three `ProgressView` and `Text` components as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will solve the annoying 10-limit error and result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.38 – Components grouped](img/B18783_02_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.38 – Components grouped
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a look at the whole code now that we are finished with this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We have covered a lot in this vast section. We started off by adding an external
    framework, which we saw is very easy to integrate and extremely powerful. The
    framework allowed us to easily implement a pie chart. This is very useful as not
    all basic features are provided by Apple in Swift and SwiftUI, so being able to
    add external code bases makes the development process less painful. After that,
    we implemented the pie chart, text summaries, and progress views to further illustrate
    the tax breakdown.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the design of our tax calculator application. We
    looked at wireframes and broke down each element into SwiftUI components. We then
    implemented the SwiftUI components to match the design from the wireframes. We
    also took a look at the requirements for building this application, and the design
    specifications, which looked at the features a tax calculator app can have. Then,
    we simplified it to the core features our app will provide. We further advanced
    in the design specifications with acceptance criteria for what we would like our
    app to do. We also looked at how external libraries can be integrated to provide
    additional functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll take a look at implementing the tax calculation backend
    functionality and tying the two views together.
  prefs: []
  type: TYPE_NORMAL
