["```kt\nprivate ExplosionEffect explosionEffect;\nprivate long startReset;\nprivate boolean reset;\nprivate boolean started;\n\n```", "```kt\n@Override\npublic void surfaceCreated(SurfaceHolder holder){\n\n    bgImg = new BackgroundImage(BitmapFactory.decodeResource\n    (getResources(), R.drawable.background_image));\n    playerCharacter = new PlayerCharacter(BitmapFactory.decodeResource\n    (getResources(),R.drawable.player_run),200,246,3);\n    rocks = new ArrayList<Rock>();\n    upperBoundary = new ArrayList<UpperBoundary>();\n    lowerBoundary = new ArrayList<LowerBoundary>();\n\n    mainThread = new MainGameThread(getHolder(), this);\n    //we can safely start the game loop\n    mainThread.setRunning(true);\n    mainThread.start();\n\n}\n\n```", "```kt\n@Override\npublic boolean onTouchEvent(MotionEvent event)\n{\n if(event.getAction() == MotionEvent.ACTION_DOWN) {\n if(!playerCharacter.getPlaying() && newGameCreated && reset){\n playerCharacter.setPlaying(true);\n playerCharacter.setUp(true);\n }\n if(playerCharacter.getPlaying()){\n if(!started)started = true;\n reset = false;\n playerCharacter.setUp(true);\n }        return true;\n    }\n}\n\n```", "```kt\nelse {\n    playerCharacter.resetDYC();\n    if(!reset) {\n        newGameCreated = false;\n        startReset = System.nanoTime();\n        reset = true;\n        explosionEffect = new ExplosionEffect(BitmapFactory\n        .decodeResource(getResources(),R.drawable.explosion)\n        playerCharacter.getXC(),playerCharacter.getYC()\n        -30,100,100,25);\n    }\n\n    //Code block after this part remains the same\n}\n\n```", "```kt\nif(started) {\n    explosionEffect.draw(canvas);\n}\n\n```", "```kt\n//Package name and import statements remain same as previous chapter\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback\n{\n    //Same variables as defined earlier\n private ExplosionEffect explosionEffect;\n private long startReset;\n private boolean reset;\n private  boolean started;\n\n    private Random rnd = new Random();\n    //GameView constructor, SurfaceChanged and surfaceDestroyed methods \n    remain same\n    @Override\n    public void surfaceCreated(SurfaceHolder holder){\n        //bgImg, playerCharacter, rocks, upperBoundary and \n        lowerBoundary code same as before\n mainThread = new MainGameThread(getHolder(), this);        //main thread code after this as earlier\n\n    }\n    @Override\n    public boolean onTouchEvent(MotionEvent event)\n    {\n        if(event.getAction() == MotionEvent.ACTION_DOWN) {\n if(!playerCharacter.getPlaying() \n            && newGameCreated && reset){\n playerCharacter.setPlaying(true);\n playerCharacter.setUp(true);\n }\n if(playerCharacter.getPlaying()){\n if(!started)started = true;\n reset = false;\n playerCharacter.setUp(true);\n }            return true;\n        }\n        //MotionEvent.ACTION_UP code same as earlier\n\n        return super.onTouchEvent(event);\n    }\n\n    public void update()\n    {\n        if(playerCharacter.getPlaying()) {\n            //Same code as earlier\n        } else {\n playerCharacter.resetDYC();\n if(!reset) {\n newGameCreated = false;\n startReset = System.nanoTime();\n reset = true;\n explosionEffect = new ExplosionEffect(BitmapFactory\n                .decodeResource(getResources(),R.drawable.explosion),\n                playerCharacter.getXC(),playerCharacter.getYC()\n                -30,100,100,25);\n }\n\n explosionEffect.update();\n long resetElapsed = (System.nanoTime()-startReset)/1000000;\n\n if(resetElapsed > 2500 && !newGameCreated) {\n newGame();\n }\n\n if(!newGameCreated) {\n newGame();\n }\n        }\n    }\n\n    //collision code remains same. no change\n\n    @Override\n    public void draw(Canvas canvas)\n    {\n            //Same as till lower boundary and upper boundary code block\n if(started) {\n explosionEffect.draw(canvas);\n }\n\n            canvas.restoreToCount(savedState);\n        }\n    }\n\n    //No change in updateUpperBound, updateLowerBound and update method\n}\n\n```", "```kt\nprivate int bestScore;\n\n```", "```kt\nif(playerCharacter.getScore() > bestScore) {\n    bestScore = playerCharacter.getScore();\n}\n\n```", "```kt\npublic void newGame () {\n    //clear code and minBoundaryHeight, maxBoundaryHeight code same as \n    before\n if(playerCharacter.getScore() > bestScore) { \n        bestScore = playerCharacter.getScore(); \n    } \n    //Rest of the code block after this is the same as previous\n}\n\n```", "```kt\npublic void drawText(Canvas canvas) {\n    Paint p = new Paint();\n    p.setColor(Color.BLACK);\n    p.setTextSize(30);\n    p.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));\n    canvas.drawText(\"DISTANCE: \"+\n    (playerCharacter.getScore()*3),10,HEIGHT-10,p);\n    canvas.drawText(\"BEST: \"+ bestScore,WIDTH - 215,HEIGHT-10,p);\n}\n\n```", "```kt\nif(!playerCharacter.getPlaying() && newGameCreated && reset) {\n\n    Paint p1 = new Paint();\n    p1.setTextSize(40);\n    p1.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));\n    canvas.drawText(\"TAP TO START\",WIDTH/2-50,HEIGHT/2,p1);\n\n    p1.setTextSize(20);\n    canvas.drawText(\"KEEP PRESSED TO GO UP\",WIDTH/2 - \n    50,HEIGHT/2+20,p1);\n    canvas.drawText(\"RELEASE TO GO DOWN\",WIDTH/2 - 50,HEIGHT/2+40,p1);\n}\n\n```", "```kt\npublic void drawText(Canvas canvas) {\n    Paint p = new Paint();\n    p.setColor(Color.BLACK);\n    p.setTextSize(30);\n    p.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));\n    canvas.drawText(\"DISTANCE: \"+\n    (playerCharacter.getScore()*3),10,HEIGHT-10,p);\n    canvas.drawText(\"BEST: \"+ bestScore,WIDTH - 215,HEIGHT-10,p);\n\nif(!playerCharacter.getPlaying() && newGameCreated && reset) {\n\n        Paint p1 = new Paint();\n        p1.setTextSize(40);\n        p1.setTypeface(Typeface.create(Typeface.DEFAULT, \n        Typeface.BOLD));\n        canvas.drawText(\"TAP TO START\",WIDTH/2-50,HEIGHT/2,p1);\n\n        p1.setTextSize(20);\n        canvas.drawText(\"KEEP PRESSED TO GO UP\",WIDTH/2 - \n        50,HEIGHT/2+20,p1);\n        canvas.drawText(\"RELEASE TO GO DOWN\",WIDTH/2 - \n        50,HEIGHT/2+40,p1);\n    }\n}\n\n```", "```kt\n@Override\npublic void draw(Canvas canvas)\n{\n    final float scaleFactorX = getWidth()/WIDTH;\n    final float scaleFactorY = getHeight()/HEIGHT;\n    if(canvas!=null) {\n        //No changes in code till if(started) statement\n\n        if(started) {\n            explosionEffect.draw(canvas);\n        }\n drawText(canvas);\n\n        canvas.restoreToCount(savedState);\n    }\n}\n\n```", "```kt\n//package name and import statements remain the same as before\npublic class GameView extends SurfaceView implements SurfaceHolder.Callback\n{\n    //no change in variable names\n    //GameView constructor. No change needed, write as is\n    //surfaceChanged method constant as before\n    //surfaceDestroyed method same as before\n    //surfaceCreated method same as before\n\n    //onTouchEvent same as before\n    //collision method written as is\n\n    @Override\n    public void draw(Canvas canvas)\n    {\n        final float scaleFactorX = getWidth()/WIDTH;\n        final float scaleFactorY = getHeight()/HEIGHT;\n        if(canvas!=null) {\n            final int savedState = canvas.save();\n            canvas.scale(scaleFactorX, scaleFactorY);\n            bgImg.draw(canvas);\n            playerCharacter.draw(canvas);\n\n            for(Rock r : rocks) {\n                r.draw(canvas);\n            }\n\n            for(UpperBoundary ub : upperBoundary){\n                ub.draw(canvas);\n            }\n\n            for(LowerBoundary lb: lowerBoundary) {\n                lb.draw(canvas);\n            }\n\n            if(started) {\n                explosionEffect.draw(canvas);\n            }\n drawText(canvas);\n\n            canvas.restoreToCount(savedState);\n        }\n    }\n    //updateUpperBound code remains same\n    //updateLowerBound code remains same\n\n    public void newGame () {\n        lowerBoundary.clear();\n        upperBoundary.clear();\n        rocks.clear();\n\n        minBoundaryHeight = 5;\n        maxBoundaryHeight = 30;\n if(playerCharacter.getScore() > bestScore) {  \n             bestScore = playerCharacter.getScore(); } \n        playerCharacter.resetScore();\n        playerCharacter.resetDYC();\n        playerCharacter.setYC(HEIGHT/2);\n\n        for(int i=0; i*20<WIDTH+40;i++) {\n            if(i==0) {\n                upperBoundary.add(new UpperBoundary\n                (BitmapFactory.decodeResource(getResources(),\n                R.drawable.ground),i*20,0,10));\n            } else {\n                upperBoundary.add(new UpperBoundary\n                (BitmapFactory.decodeResource(getResources(),\n                R.drawable.ground),i*20,0,\n                upperBoundary.get(i-1).getHeight()+1));\n            }\n        }\n\n        for(int i = 0; i*20<WIDTH+40;i++) {\n            if(i==0) {\n                lowerBoundary.add(new LowerBoundary\n                (BitmapFactory.decodeResource(getResources(),\n                R.drawable.ground),i*20, HEIGHT-minBoundaryHeight));\n            } else {\n                lowerBoundary.add(new LowerBoundary\n                (BitmapFactory.decodeResource\n                (getResources(),R.drawable.ground),\n                i*20, lowerBoundary.get(i-1).getYC()-1));\n            }\n        }\n        newGameCreated = true;\n    }\n\npublic void drawText(Canvas canvas) {\n Paint p = new Paint();\n p.setColor(Color.BLACK);\n p.setTextSize(30);\n p.setTypeface(Typeface.create(Typeface.DEFAULT, \n        Typeface.BOLD));\n canvas.drawText(\"DISTANCE: \"+\n        (playerCharacter.getScore()*3),10,HEIGHT-10,p);\n canvas.drawText(\"BEST: \"+ bestScore,WIDTH - 215,HEIGHT-10,p);\n\n if(!playerCharacter.getPlaying() && newGameCreated && reset) {\n\n Paint p1 = new Paint();\n p1.setTextSize(40);\n p1.setTypeface(Typeface.create(Typeface.DEFAULT,            Typeface.BOLD));\n canvas.drawText(\"TAP TO START\",WIDTH/2-50,HEIGHT/2,p1);\n\n p1.setTextSize(20);\n canvas.drawText(\"KEEP PRESSED TO GO UP\",WIDTH/2 - \n            50,HEIGHT/2+20,p1);\n canvas.drawText(\"RELEASE TO GO DOWN\",WIDTH/2 - \n            50,HEIGHT/2+40,p1);\n }\n }\n\n}\n\n```"]