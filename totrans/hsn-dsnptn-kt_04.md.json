["```kt\nenum class Direction {\n    LEFT, RIGHT\n}\n```", "```kt\nabstract class Projectile(private val x: Int,\n                          private val y: Int,\n                          private val direction: Direction)\n```", "```kt\nclass OurHero {\n    private var direction = Direction.LEFT\n    private var x: Int = 42\n    private var y: Int = 173\n\n    fun shoot(): Projectile {\n        return object : Projectile(x, y, direction) {\n            // Draw and animate projectile here\n        }\n    }\n}\n```", "```kt\ninterface Weapon {\n    fun shoot(x: Int,\n              y: Int,\n              direction: Direction): Projectile\n}\n```", "```kt\nclass Peashooter : Weapon {\n    override fun shoot(x: Int,\n                       y: Int,\n                       direction: Direction) = \n                        object : Projectile(x, y, direction) {\n        // Fly straight\n    }\n}\n\nclass Pomegranate : Weapon {\n    override fun shoot(x: Int,\n                       y: Int,\n                       direction: Direction)  = \n                        object : Projectile(x, y, direction) {\n        // Explode when you hit first enemy\n    }\n}\n\nclass Banana : Weapon {\n    override fun shoot(x: Int,\n                       y: Int,\n                       direction: Direction)  = \n                        object : Projectile(x, y, direction) {\n        // Return when you hit screen border\n    }\n}\n```", "```kt\nprivate var currentWeapon : Weapon = Peashooter()\n```", "```kt\nfun shoot(): Projectile = currentWeapon.shoot(x, y, direction)\n```", "```kt\nfun equip(weapon: Weapon) {\n    currentWeapon = weapon\n}\n```", "```kt\nval x = 7\n```", "```kt\nvar myPet = Canary(\"Michael\")\n```", "```kt\nval square = fun (x: Int): Long {\n    return (x * x).toLong()\n}\n```", "```kt\nobject Weapons {\n    // Functions we'll be there soon\n}\n```", "```kt\nval peashooter = fun(x: Int, y: Int, direction: Direction):             Projectile {\n        // Fly straight\n}\n\nval banana = fun(x: Int, y: Int, direction: Direction): \n    Projectile {\n        // Return when you hit screen border\n}\n\nval pomegranate = fun(x: Int, y: Int, direction: Direction):             Projectile {\n        // Explode when you hit first enemy\n}    \n```", "```kt\nclass OurHero {\n    // As before\n    var currentWeapon = Weapons.peashooter\n\n    val shoot = fun() {\n        currentWeapon(x, y, direction)\n    }\n}\n```", "```kt\nval h = OurHero()\nh.shoot()\nh.currentWeapon = Weapons.banana\nh.shoot()\n```", "```kt\ninterface InfantryUnit\n\nclass Squad(val infantryUnits: MutableList<InfantryUnit> =         mutableListOf()) {   \n}\n```", "```kt\nclass Squad(...) {\n    val commander = Sergeant()\n}\n\nclass Sergeant: InfantryUnit\n```", "```kt\nclass Platoon(val squads: MutableList<Squad> = mutableListOf()) {\n    val commander = Lieutenant()\n}\n\nclass Lieutenant: InfantryUnit\n```", "```kt\nval rangers = Squad(\"Josh\", \"Ew    an\", \"Tom\")\nval deltaForce = Squad(\"Sam\", \"Eric\", \"William\")\nval blackHawk = Platoon(rangers, deltaForce)\n\nfor (u in blackHawk) {\n    println(u)\n}\n```", "```kt\nLieutenant, Sergeant, Josh, Ewan, Tom, ...\n```", "```kt\nint[] array = new int[] {1, 2, 3};\n\nfor (int i = 0; i < array.length; i++) {\n    System.out.println(i);\n}\n```", "```kt\nfor (u in blackHawk) { <== For-loop range must have an 'iterator()'                            method\n    // Wanted to do something here\n}\n```", "```kt\noperator fun iterator() = ...\n```", "```kt\n... = object: Iterator<InfantryUnit> {\n    override fun hasNext(): Boolean {\n        // Are there more objects to iterate over?\n    }\n\n    override fun next(): InfantryUnit {\n        // Return next InfantryUnit\n    }\n}\n```", "```kt\noperator fun iterator() = object: Iterator<InfantryUnit> {\n    var i = 0\n    // More code here\n}\n```", "```kt\noverride fun hasNext(): Boolean {\n    return i < infantryUnits.size + 1\n}\n```", "```kt\noverride fun next() =\n    when (i) {\n        0 -> commander\n        else -> infantryUnits[i - 1]\n    }.also { i++ }\n```", "```kt\nfor (u in deltaForce.reverseIterator()) {\n    println(u)\n}\n```", "```kt\nfun reverseIterator() = object: Iterator<InfantryUnit> {\n    // hasNext() is same as before\n}\n```", "```kt\noverride fun next() =\n        when (i) {\n            infantryUnits.size -> commander\n            else -> infantryUnits[infantryUnits.size - i - 1]\n        }.also { i++ }\n```", "```kt\nfun <T> printAll(iter: Iterator<T>) {\n    while (iter.hasNext()) {\n        println(iter.next())\n    }\n}\n```", "```kt\nprintAll(deltaForce.iterator())\nprintAll(deltaForce.reverseIterator())\n```", "```kt\ninterface WhatCanHappen {\n    fun seeHero()\n\n    fun getHit(pointsOfDamage: Int)\n\n    fun calmAgain()\n}\n```", "```kt\nclass Snail : WhatCanHappen {\n    private var healthPoints = 10\n\n    override fun seeHero() {\n    }\n\n    override fun getHit(pointsOfDamage: Int) {\n    }\n\n    override fun timePassed() {\n    }\n}\n```", "```kt\nsealed class Mood {\n   // Some abstract methods here, like draw(), for example\n}\n```", "```kt\nclass Still : Mood() \n\nclass Aggressive : Mood()\n\nclass Retreating : Mood()\n\nclass Dead : Mood()\n```", "```kt\nclass Snail : WhatCanHappen {\n    private var mood: Mood = Still()\n    // As before\n}\n```", "```kt\noverride fun seeHero() {\n        mood = when(mood) {\n            is Still -> Aggressive()\n        }\n    }\n```", "```kt\noverride fun seeHero() {\n    mood = when(mood) {\n        is Still -> Aggressive()\n        is Aggressive -> mood\n        is Retreating -> mood\n        is Dead -> mood\n    }\n}\n```", "```kt\noverride fun timePassed() {\n    mood = when(mood) {\n        is Retreating -> Aggressive()\n        else -> mood\n    }\n}\n```", "```kt\noverride fun getHit(pointsOfDamage: Int) {\n    healthPoints -= pointsOfDamage\n\n    mood = when {\n        (healthPoints <= 0) -> Dead()\n        mood is Aggressive -> Retreating()\n        else -> mood\n    }\n}\n```", "```kt\nclass Snail {\n    internal var mood: Mood = Still(this)\n\n    private var healthPoints = 10\n    // That's all!\n}\n```", "```kt\nsealed class Mood : WhatCanHappen\n```", "```kt\nclass Still(private val snail: Snail) : Mood() {\n    override fun seeHero() = snail.mood.run {\n            Aggressive(snail)\n        }\n\n    override fun getHit(pointsOfDamage: Int) = this\n    override fun timePassed() = this\n}\n```", "```kt\noverride fun seeHero(): Mood {\n    snail.mood = Aggressive(snail)\n    return snail.mood\n}\n```", "```kt\nclass Soldier(...)... {\n    fun attack(x: Long, y: Long) {\n        println(\"Attacking ($x, $y)\")\n        // Actual code here\n    }\n\n    fun move(x: Long, y: Long) {\n        println(\"Moving to ($x, $y)\")\n        // Actual code here\n    }\n}\n```", "```kt\n[cat](0, 0) ⇒  good direction  ⇒    (20, 0)\n\n          [dog] [dog]                   ⇓\n        [dog] [dog] [dog]               ⇓\n           [dog] [dog]\n            (5, 20)                  (20, 20)\n```", "```kt\nclass Soldier {\n    private val orders = mutableListOf<Any>() \n\n    fun anotherOrder(action: Any) {\n        this.orders.add(command)\n    }\n    // More code here\n}\n```", "```kt\nclass Soldier {\n    ...\n    // This will be triggered from the outside once in a while\n    fun execute() {\n        while (!orders.isEmpty()) {\n            val action = orders.removeAt(0)\n            action.execute() // Compile error for now\n        }\n    }\n    ...\n}\n```", "```kt\ninterface Command {\n    fun execute()\n}\n```", "```kt\nprivate val commands = mutableListOf<Command>()\n```", "```kt\nfun command(): Unit {\n  // Some code here\n}\n```", "```kt\n() -> Unit\n```", "```kt\ntypealias Command = ()->Unit\n```", "```kt\ncommand.execute() // Unresolved reference: execute \n```", "```kt\ncommand.invoke() // Compiles\n```", "```kt\n(x: Int, y: Int)->Unit\n```", "```kt\nval moveGenerator = fun(s: Soldier,\n                        x: Int,\n                        y: Int): Command {\n    return fun() {\n        s.move(x, y)\n    }\n}\n```", "```kt\nfun appendMove(x: Int, y: Int) = apply {\n        commands.add(moveGenerator(this, x, y))\n}\n```", "```kt\nval s = Soldier()\ns.appendMove(20, 0)\n    .appendMove(20, 20)\n    .appendMove(5, 20)\n    .execute()\n```", "```kt\nMoving to (20, 0)\nMoving to (20, 20)\nMoving to (5, 20)\n```", "```kt\nprivate val commands = mutableListOf<Pair<Command, Command>>()\n```", "```kt\nfun appendMove(x: Int, y: Int) = apply {\n    val oppositeMove = /* If it's the first command, generate move to current location. Otherwise, get the previous command */\n    commands.add(moveGenerator(this, x, y) to oppositeMove)\n}\n```", "```kt\nfun handleRequest(r: Request) {\n    // Validate\n    if (r.email.isEmpty() || r.question.isEmpty()) {\n        return\n    }\n\n    // Authenticate\n    // Make sure that you know whos is this user\n    if (r.email.isKnownEmail()) {\n        return\n    }\n\n    // Authorize\n    // Requests from juniors are automatically ignored by architects\n    if (r.email.isJuniorDeveloper()) {\n        return\n    }\n\n    println(\"I don't know. Did you check StackOverflow?\")\n}\n```", "```kt\ninterface Handler {\n    fun handle(request: Request): Response\n}\n```", "```kt\ndata class Request(val email: String, val question: String)\n\ndata class Response(val answer: String)\n```", "```kt\nclass BasicValidationHandler(private val next: Handler) : Handler {\n    override fun handle(request: Request): Response {\n        if (request.email.isEmpty() || request.question.isEmpty()) {\n            throw IllegalArgumentException()\n        }\n\n        return next.handle(request)\n    }\n}\n```", "```kt\nval req = Request(\"developer@company.com\", \n        \"Who broke my build?\")\n\nval chain = AuthenticationHandler(\n                BasicValidationHandler(\n                    FinalResponseHandler()))\n\nval res = chain.handle(req)\n\nprintln(res) \n```", "```kt\ntypealias Handler = (request: Request) -> Response\n```", "```kt\nval authentication = fun(next: Handler) =\n    fun(request: Request): Response {\n        if (!request.email.isKnownEmail()) {\n            throw IllegalArgumentException()\n        }\n        return next(request)\n    }\n```", "```kt\nval req = Request(\"developer@company.com\", \n    \"Why do we need Software Architects?\")\n\nval chain = basicValidation(authentication(finalResponse()))\n\nval res = chain(req)\n\nprintln(res)\n```", "```kt\nval sql = select(\"name, age\", {\n              from(\"users\", {\n                  where(\"age > 25\")\n              }) // Closes from\n          }) // Closes select\n\nprintln(sql) // \"SELECT name, age FROM users WHERE age > 25\"\n```", "```kt\nfun select(columns: String, from: SelectClause.()->Unit): \n    SelectClause {\n    return SelectClause(columns).apply(from)\n}\n```", "```kt\nSelectClause.()->Unit\n```", "```kt\nSelectClause.()->Unit == (SelectClause)->Unit\n```", "```kt\nSelectClause(columns).apply(from)\n```", "```kt\nval selectClause = SelectClause(columns)\nfrom(selectClause)\nreturn selectClause\n```", "```kt\nselect(\"name, age\", {\n this@select.from(\"users\", {\n        where(\"age > 25\")\n    })\n})\n```", "```kt\nclass SelectClause(private val columns: String) {\n    private lateinit var from : FromClause\n    fun from(table: String, where: FromClause.()->Unit): FromClause {\n        this.from = FromClause(table)\n        return this.from.apply(where)\n    }\n}\n```", "```kt\nselect(\"name, age\", {\n    this@select.from(\"users\", {\n this@from.where(\"age > 25\")\n    })\n})\n```", "```kt\nclass FromClause(private val table: String) {\n    private lateinit var where: WhereClause\n\n    fun where(conditions: String) = this.apply {\n        where = WhereClause(conditions)\n    }\n}\n```", "```kt\nclass WhereClause(private val conditions: String) {\n    override fun toString(): String {\n        return \"WHERE $conditions\"\n    }\n}\n```", "```kt\nclass FromClause(private val table: String) {\n    // More code here...\n    override fun toString(): String {\n        return \"FROM $table ${this.where}\"\n    }\n}\n```", "```kt\nclass SelectClause(private val columns: String) {\n    // More code here...\n    override fun toString(): String {\n        return \"SELECT $columns ${this.from}\"\n    }\n}\n```", "```kt\nval sql = select(\"name, age\", {\n              from(\"users\", {\n                  where(\"age > 25\")\n              }) // Closes from\n          }) // Closes select\n```", "```kt\nval sql = select(\"name, age\") {\n              from(\"users\") {\n                  where(\"age > 25\")\n              } // Closes from\n          } // Closes select\n```", "```kt\ninterface QA {\n    fun doesMyCodeWork(): Boolean\n}\n\ninterface Parrot {\n    fun isEating(): Boolean\n    fun isSleeping(): Boolean\n}\n\nobject Kenny : QA, Parrot {\n    // Implements interface methods based on parrot schedule\n}\n```", "```kt\nclass MyMind {\n    val qa = Kenny\n\n    fun taskCompleted() {\n        if (!qa.isEating() && !qa.isSleeping()) {\n            println(qa.doesMyCodeWork())\n        }\n    }\n}\n```", "```kt\nobject Kenny : ... {\n    val developer = Me\n}\n```", "```kt\nclass MyMind {\n    ...\n    val qa2 = Brad\n\n    fun taskCompleted() {\n        ...\n        else if (!qa2.isEating() && !qa2.isSleeping()) {\n            println(qa2.doesMyCodeWork())\n        }\n    }\n}\n```", "```kt\nobject Brad : QA, Parrot {\n    val senior = Kenny\n    val developer = Me\n    ...\n}\n```", "```kt\nclass MyMind {\n    ...\n    val qa3 = George\n\n    fun taskCompleted() {\n        ...\n        else if (!qa3.isWatchingFootball()) {\n            println(qa3.doesMyCodeWork())\n        }\n    }\n}\n```", "```kt\nobject Kenny : QA, Parrot {\n    val peer = George\n    ...\n}\n```", "```kt\n\nobject George : QA, Owl {\n    val mate = Kenny\n    ...\n}\n```", "```kt\nobject George : QA, Owl {\n    val developer = Me\n    ...\n}\n```", "```kt\ninterface Copywriter {\n    fun areAllTextsCorrect(): Boolean\n}\n\ninterface Kiwi\n\nobject Sandra : Copywriter, Kiwi {\n    override fun areAllTextsCorrect(): Boolean {\n        return ...\n    }\n}\n```", "```kt\nclass MyMind {\n    ...\n    val translator = Sandra\n\n    fun taskCompleted(isMajorRelease: Boolean) {\n        ...\n        if (isMajorRelease) {\n            println(translator.areAllTranslationsCorrect())\n        }\n    }\n}\n```", "```kt\ninterface Manager {\n    fun isAllGood(majorRelease: Boolean): Boolean\n}\n```", "```kt\nobject Michael: Canary, Manager {\n    private val kenny = Kenny(this)\n    // And all the others\n    ...\n\n    override fun isAllGood(majorRelease: Boolean): Boolean {\n        if (!kenny.isEating() && !kenny.isSleeping()) {\n            println(kenny.doesMyCodeWork())\n        }\n        // And all the other logic I had in MyMind\n        ...\n    }\n}\n```", "```kt\nclass MyPeacefulMind(private val manager: Manager) {\n    fun taskCompleted(isMajorRelease: Boolean) {\n        println(manager.isAllGood(isMajorRelease))\n    }\n}\n```", "```kt\n\nclass Brad(private val manager: Manager) : ... {\n   // No reference to Me here\n   ...\n}\n```", "```kt\nclass Kenny(private val manager: Manager) : ... {\n   // No reference to George, or anyone else\n   ...\n}\n```", "```kt\nclass Manager {\n    private var lastThought = \"Should get some coffee\"\n    private var repeatThat = 3\n    private var thenHesitate = \"Or maybe tea?\"\n    private var secretThought = \"No, coffee it is\"\n    ...\n}\n```", "```kt\nclass Manager {\n    ...\n    fun whatAreYouThinking() {\n        for (i in 1..repeatThat) {\n            println(lastThought)\n        }\n        println(thenHesitate)\n    }\n    ...\n}\n```", "```kt\nclass Manager {\n    ...\n    class Thought {\n        fun captureThought(): CapturedThought {\n            return CapturedThought(lastThought, \n                                   repeatThat,                              \n                                   thenHesitate, \n                                   secretThought)\n        }\n    }\n\n    data class CapturedThought(val thought: String, \n                               val repeat: Int, \n                               val hesitate: String,\n                               val secret: String)\n}\n```", "```kt\nval michael = Manager()\n\nval captured = michael.Thought().captureThought()\n```", "```kt\nclass Manager {\n    ...\n    fun anotherThought() {\n        lastThought = \"Tea would be better\"\n        repeatThat = 2\n        thenHesitate = \"But coffee is also nice\"\n        secretThought = \"Big latte would be great\"\n    }\n}\nmichael.anotherThought()\n```", "```kt\nmichael.whatAreYouThinking()\n```", "```kt\nTea would be better\nTea would be better\nBut coffee is also nice\n```", "```kt\nprintln(captured)\n```", "```kt\nCapturedThought(thought=Should get some coffee, repeat=3, hesitate=Or maybe tea?, secret=No, coffee it is)\n```", "```kt\nclass Manager {\n    ...\n    inner class Thought {\n        ...\n        fun rewindThought(val previousThought: CapturedThought) {\n            with(previousThought) {\n                lastThought = thought\n                repeatThat = repeat\n                thenHesitate = hesitate\n                secretThought = secret\n            }\n        }\n    }\n    ...\n}\n```", "```kt\nPage(Container(Image(),\n               Link(),\n               Image()),\n     Table(),\n     Link(),\n     Container(Table(),\n               Link()),\n     Container(Image(),\n               Container(Image(),\n                         Link())))\n```", "```kt\nfun collectLinks(page: Page): List<String> {\n    // No need for intermediate variable there\n    return LinksCrawler().run {\n        page.accept(this)\n        this.links\n    }\n}\n```", "```kt\nprivate fun Container.accept(feature: LinksCrawler) {\n    feature.visit(this)\n}\n\n// Same as above but shorter\nprivate fun Page.accept(feature: LinksCrawler) = feature.visit(this)\n```", "```kt\nclass LinksCrawler {\n    private var _links = mutableListOf<String>()\n\n    val links\n        get()= _links.toList()\n    ...\n}\n```", "```kt\nclass LinksCrawler {\n    ...\n    fun visit(page: Page) {\n        visit(page.elements)\n    }\n\n    fun visit(container: Container) = visit(container.elements)\n    ...\n}\n```", "```kt\nsealed class HtmlElement\n\nclass Container(...) : HtmlElement(){\n    ...\n}\n\nclass Image(...) : HtmlElement() {\n    ...\n}\n\nclass Link(...) : HtmlElement() {\n    ...\n}\n\nclass Table : HtmlElement()\n```", "```kt\nclass LinksCrawler {\n    ...\n    private fun visit(elements: List<HtmlElement>) {\n        for (e in elements) {\n            when (e) {\n                is Container -> e.accept(this)\n                is Link -> _links.add(e.href)\n                is Image -> _links.add(e.src)\n                else -> {}\n            }\n        }\n    }\n}\n```", "```kt\nabstract class DayRoutine {\n    private fun arriveToWork() {\n        println(\"Hi boss! I appear in the office sometimes!\")\n    }\n\n    private fun drinkCoffee() {\n        println(\"Coffee is delicious today\")\n    }\n\n    ...\n\n    private fun goToLunch() {\n        println(\"Hamburger and chips, please!\")\n    }\n\n    ...\n\n    private fun goHome() {\n        // Very important no one notices me\n        println()\n    }\n\n    ...\n}\n```", "```kt\nabstract class DayRoutine {\n    ...\n    abstract fun doBeforeLunch()\n    ...\n    abstract fun doAfterLunch()\n    ...\n}\n```", "```kt\nabstract class DayRoutine {\n    ...\n    open fun bossHook() {\n        // Hope he doesn't hook me there\n    }\n    ...\n}\n```", "```kt\nabstract class DayRoutine {\n    ...\n    fun runSchedule() {\n        arriveToWork()\n        drinkCoffee()\n        doAfterLunch()\n        goToLunch()\n        doAfterLunch()\n        goHome()\n    }\n}\n```", "```kt\nclass MondaySchedule : DayRoutine() {\n    override fun doBeforeLunch() {\n        println(\"Some pointless meeting\")\n        println(\"Code review. What this does?\")\n    }\n\n    override fun doAfterLunch() {\n        println(\"Meeting with Ralf\")\n        println(\"Telling jokes to other architects\")\n    }\n\n    override fun bossHook() {\n        println(\"Hey, can I have you for a sec in my office?\")\n    }\n}\n```", "```kt\nfun runSchedule(beforeLunch: ()->Unit,\n                afterLunch: ()->Unit,\n                bossHook: (()->Unit)? = fun() { println() }) {\n    ...\n}\n```", "```kt\nfun runSchedule(...) {\n    ...\n    arriveToWork()\n    drinkCoffee()\n    beforeLunch()\n    goToLunch()\n    afterLunch()\n    bossHook?.let { it() }\n    goHome()\n}\n```", "```kt\nfun runSchedule(...) {\n    fun arriveToWork(){\n        println(\"How are you all?\")\n    }\n\n    val drinkCoffee = { println(\"Did someone left the milk out?\") }\n\n    fun goToLunch() = println(\"I would like something italian\")\n\n    val goHome = fun () {\n        println(\"Finally some rest\")\n    }\n\n    arriveToWork()\n    drinkCoffee()\n    ...\n    goToLunch()\n    ...\n    goHome()\n}\n```", "```kt\nclass Bat {\n    fun screech() {\n        println(\"Eeeeeee\")\n    }\n}\n\nclass Turkey {\n    fun gobble() {\n        println(\"Gob-gob\")\n    }\n}\n\nclass Dog {\n    fun bark() {\n        println(\"Woof\")\n    }\n\n    fun howl() {\n        println(\"Auuuu\")\n    }\n}\n```", "```kt\nclass Cat {\n    ...\n    fun joinChoir(whatToCall: ()->Unit) {\n        ...\n    }\n\n    fun leaveChoir(whatNotToCall: ()->Unit) {\n        ...\n    }\n    ...\n}\n```", "```kt\nval catTheConductor = Cat()\n\nval bat = Bat()\nval dog = Dog()\nval turkey = Turkey()\n\ncatTheConductor.joinChoir(bat::screech)\ncatTheConductor.joinChoir(dog::howl)\ncatTheConductor.joinChoir(dog::bark)\ncatTheConductor.joinChoir(turkey::gobble)\n```", "```kt\nclass Cat {\n    private val participants = mutableMapOf<()->Unit, ()->Unit>()\n\n    fun joinChoir(whatToCall: ()->Unit) {\n        participants.put(whatToCall, whatToCall)\n    }\n    ...\n}\n```", "```kt\nclass Cat {\n    ...\n    fun leaveChoir(whatNotToCall: ()->Unit) {\n        participants.remove(whatNotToCall)\n    }\n    ...\n}\n```", "```kt\ncatTheConductor.leaveChoir(bat::screech)\n```", "```kt\ntypealias Times = Int\n\nclass Cat {\n    ...\n    fun conduct(n: Times) {\n        for (p in participants.values) {\n            for (i in 1..n) {\n                p()\n            }\n        }\n    }\n}\n```", "```kt\nclass Cat {\n    private val participants = mutableMapOf<(Int)->Unit, (Int)->Unit>()\n\n    fun joinChoir(whatToCall: (Int)->Unit) {\n        ...\n    }\n\n    fun leaveChoir(whatNotToCall: (Int)->Unit) {\n        ...\n    }\n\n    fun conduct(n: Times) {\n        for (p in participants.values) {\n            p(n)\n        }\n    }\n}\n```", "```kt\nclass Turkey {\n    fun gobble(repeat: Times) {\n        for (i in 1..repeat) {\n            println(\"Gob-gob\")\n        }\n    }\n}\n```", "```kt\nenum class SoundPitch {HIGH, LOW}\ndata class Message(val repeat: Times, val pitch: SoundPitch)\n\nclass Bat {\n    fun screech(message: Message) {\n        for (i in 1..message.repeat) {\n            println(\"${message.pitch} Eeeeeee\")\n        }\n    }\n}\n```", "```kt\ninterface Message {\n    val repeat: Times\n    val pitch: SoundPitch \n}\n\ndata class LowMessage(override val repeat: Times) : Message {\n    override val pitch = SoundPitch.LOW\n}\n\ndata class HighMessage(override val repeat: Times) : Message {\n    override val pitch = SoundPitch.HIGH\n}\n\nclass Bat {\n    fun screech(message: Message) {\n        when (message) {\n            is HighMessage -> {\n                for (i in 1..message.repeat) {\n                    println(\"${message.pitch} Eeeeeee\")\n                }\n            }\n            else -> println(\"Can't :(\")\n        }\n    }\n}\n```"]