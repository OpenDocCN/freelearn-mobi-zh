["```java\n#include <SPI.h>\n#include <PN532_SPI.h>\n#include <PN532.h>\n#include <NfcAdapter.h>\n\n// NFC instances\nPN532_SPI pn532spi(SPI, 10);\nNfcAdapter nfc = NfcAdapter(pn532spi);\n\nvoid setup(void) {\n\n  // Start Serial\n  Serial.begin(9600);\n\n  // Start NFC chip\n  Serial.println(\"NFC shield started\");\n  nfc.begin();\n}\n\nvoid loop(void) {\n\n  // Start scan\n  Serial.println(\"\\nScan a NFC tag\\n\");\n  if (nfc.tagPresent())\n  {\n    NfcTag tag = nfc.read();\n    tag.print();\n  }\n  delay(5000);\n}\n```", "```java\n#include <SPI.h>\n#include <PN532_SPI.h>\n#include <PN532.h>\n#include <NfcAdapter.h>\n```", "```java\nPN532_SPI pn532spi(SPI, 10);\nNfcAdapter nfc = NfcAdapter(pn532spi);\n```", "```java\nSerial.begin(9600);\n```", "```java\nnfc.begin();\nSerial.println(\"NFC shield started\");\n```", "```java\nif (nfc.tagPresent())\n{\n  NfcTag tag = nfc.read();\n  tag.print();\n}\n  delay(5000);\n}\n```", "```java\n#include \"SPI.h\"\n#include \"PN532_SPI.h\"\n#include \"snep.h\"\n#include \"NdefMessage.h\"\n```", "```java\n#define RELAY_PIN 8\n```", "```java\n#define RELAY_ON \"oWnHV6uXre\"\n```", "```java\nPN532_SPI pn532spi(SPI, 10);\nSNEP nfc(pn532spi);\n```", "```java\nuint8_t ndefBuf[128];\n```", "```java\nSerial.begin(9600);\nSerial.println(\"NFC Peer to Peer Light Switch\");\n```", "```java\npinMode(RELAY_PIN, OUTPUT);\n```", "```java\nSerial.println(\"Waiting for message from Peer\");\nint msgSize = nfc.read(ndefBuf, sizeof(ndefBuf));\n```", "```java\nif (msgSize > 0) {\n\n    // Read message\n    NdefMessage message  = NdefMessage(ndefBuf, msgSize);\n\n    // Make sure there is at least one NDEF Record\n    if (message.getRecordCount() > 0) {\n\n      NdefRecord record = message.getRecord(0);\n      Serial.println(\"Got first record\");\n\n      // Check the TNF and Record Type\n      if (record.getTnf() == TNF_MIME_MEDIA && record.getType() == \"application/com.arduinoandroid.arduinonfc\") {\n        Serial.println(\"Type is OK\");\n\n        // Get the bytes from the payload\n        int payloadLength = record.getPayloadLength();\n        byte payload[payloadLength];\n        record.getPayload(payload);\n\n        // Convert the payload to a String\n        String payloadAsString = \"\";\n        for (int c = 0; c < payloadLength; c++) {\n          payloadAsString += (char)payload[c];\n        }\n\n        // Print out the data on the Serial monitor\n        Serial.print(\"Payload is \");Serial.println(payloadAsString);\n\n        // Modify the state of the light, based on the tag contents\n        if (payloadAsString == RELAY_ON) {\n            digitalWrite(RELAY_PIN, HIGH);\n        } else {\n            digitalWrite(RELAY_PIN, LOW);    \n        }\n      } else {\n        Serial.print(\"Expecting TNF 'Mime Media' (0x02) with type 'application/com.arduinoandroid.arduinonfc' but found TNF \");\n        Serial.print(record.getTnf(), HEX);\n        Serial.print(\" type \");\n        Serial.println(record.getType());\n      }\n    }\n  }\n}\n```", "```java\n<uses-permission android:name=\"android.permission.NFC\" />\n<uses-feature android:name=\"android.hardware.nfc\" android:required=\"true\" />\n```", "```java\n<RelativeLayout \n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:paddingLeft=\"@dimen/activity_horizontal_margin\"\n    android:paddingRight=\"@dimen/activity_horizontal_margin\"\n    android:paddingTop=\"@dimen/activity_vertical_margin\"\n    android:paddingBottom=\"@dimen/activity_vertical_margin\"\n    tools:context=\".NFCActivity\">\n\n    <TextView\n        android:text=\"NFC Status\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:id=\"@+id/nfcTextStatus\"\n        android:layout_marginTop=\"83dp\"\n        android:layout_alignParentTop=\"true\"\n        android:layout_centerHorizontal=\"true\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Switch On\"\n        android:id=\"@+id/switchOnBtn\"\n        android:layout_marginTop=\"59dp\"\n        android:layout_below=\"@+id/nfcTextStatus\"\n        android:layout_toLeftOf=\"@+id/nfcTextStatus\"\n        android:layout_toStartOf=\"@+id/nfcTextStatus\" />\n\n    <Button\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Switch Off\"\n        android:id=\"@+id/switchOffBtn\"\n        android:layout_alignTop=\"@+id/switchOnBtn\"\n        android:layout_toRightOf=\"@+id/nfcTextStatus\"\n        android:layout_toEndOf=\"@+id/nfcTextStatus\" />\n\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textAppearance=\"?android:attr/textAppearanceMedium\"\n        android:text=\"NFC Message to be sent\"\n        android:id=\"@+id/messageToBeam\"\n        android:layout_below=\"@+id/switchOnBtn\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginTop=\"93dp\" />\n\n</RelativeLayout>\n```", "```java\n    //Declaring the User Interface Variables for mStatusText as a TextView\n    private TextView mStatusText;\n    private TextView messageToBeam;\n    private Button switchOn;\n    private Button switchOff;\n\n    //Initializing the NFC Adapater for sending messages\n    NfcAdapter mNfcAdapter;\n    private static final int BEAM_BEAMED = 0x1001;\n    public static final String MIMETYPE = \"application/com.arduinoandroid.arduinonfc\";\n\n    //Keys for Opening and Closing the Relay\n    String open_key = \"oWnHV6uXre\";\n    String close_key = \"C19HNuqNU4\";\n\n    //Getting the name for Log Tags\n    private final String TAG = NFCActivity.class.getSimpleName();\n```", "```java\n        mStatusText = (TextView) findViewById(R.id.nfcTextStatus);\n        messageToBeam = (TextView) findViewById(R.id.messageToBeam);\n        switchOn = (Button) findViewById(R.id.switchOnBtn);\n        switchOff = (Button) findViewById(R.id.switchOffBtn);\n```", "```java\n// Adding OnClick Listeners to the Buttons\n        switchOn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                messageToBeam.setText(open_key);\n            }\n        });\n\n        switchOff.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                messageToBeam.setText(close_key);\n            }\n        });\n```", "```java\n// Check for available NFC Adapter\n        mNfcAdapter = NfcAdapter.getDefaultAdapter(this);\n        if (mNfcAdapter == null) {\n            mStatusText.setText(\"NFC is not available on this device.\");\n        }\n```", "```java\n// Register to create and NDEF message when another device is in range\n        mNfcAdapter.setNdefPushMessageCallback(new NfcAdapter.CreateNdefMessageCallback() {\n            @Override\n            public NdefMessage createNdefMessage(NfcEvent event) {\n                //the variable message is from the EditText field\n                String message = messageToBeam.getText().toString();\n                String text = (message);\n                byte[] mime = MIMETYPE.getBytes(Charset.forName(\"US-ASCII\"));\n                NdefRecord mimeMessage = new NdefRecord(\n                        NdefRecord.TNF_MIME_MEDIA, mime, new byte[0], text\n                        .getBytes());\n                NdefMessage msg = new NdefMessage(\n                        new NdefRecord[]{\n                                mimeMessage,\n                                NdefRecord\n                                        .createApplicationRecord(\"com.arduinoandroid.arduinonfc\")});\n                return msg;\n            }\n        }, this);\n\n        // And handle the send status\n        mNfcAdapter.setOnNdefPushCompleteCallback(\n                new NfcAdapter.OnNdefPushCompleteCallback() {\n\n                    @Override\n                    public void onNdefPushComplete(NfcEvent event) {\n                        mHandler.obtainMessage(BEAM_BEAMED).sendToTarget();\n                    }\n                }, this);\n```", "```java\n   @SuppressLint(\"HandlerLeak\")\n    private final Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message message) {\n            switch (message.what) {\n                case BEAM_BEAMED:\n                    mStatusText.setText(\"Your message has been beamed\");\n                    break;\n            }\n        }\n    };\n```", "```java\n    @Override\n    public void onResume() {\n        super.onResume();\n        // Did we receive an NDEF message?\n\n        Intent intent = getIntent();\n        if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(intent.getAction())) {\n            try {\n                Parcelable[] rawMsgs = intent\n                        .getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);\n\n                // we created the message, so we know the format\n                NdefMessage msg = (NdefMessage) rawMsgs[0];\n                NdefRecord[] records = msg.getRecords();\n                byte[] firstPayload = records[0].getPayload();\n                String message = new String(firstPayload);\n                mStatusText.setText(message);\n            } catch (Exception e) {\n                Log.e(TAG, \"Error retrieving beam message.\", e);\n            }\n        }\n    }\n\n    @Override\n    public void onNewIntent(Intent intent) {\n        setIntent(intent);\n    }\n```"]