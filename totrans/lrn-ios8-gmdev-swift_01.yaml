- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So you want to create games for iOS? With the introduction of **SpriteKit**
    in **Xcode 5**, it has become a breeze to create two-dimensional games for iOS.
    Previously, even before thinking about creating games, you had to think about
    what framework to use to create games. There were so many frameworks available,
    and each had its own pros and cons. Also, what if you wanted to create your own
    framework? In that case, you had to write it from the ground up using **OpenGLES**,
    which required writing a whole lot of code just to display a triangle. And let's
    not even talk about creating three-dimensional games using the frameworks, as
    most of the frameworks don't even support it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Apple solved all of these questions and issues by giving all the required tools
    with Xcode 6\. In Xcode 6, you are really limited by your imagination. You can
    create 2D or 3D games using **SpriteKit** and **SceneKit**. If you want to create
    your own 2D or 3D engine, there is Metal available, which makes it easy to communicate
    with the **GPU** (short for **Graphics Processing Unit**). But if you are a veteran
    and have used OpenGL ES to create games, don't worry! That option is still there,
    so you are not tied down to using only Metal. So, let's get started with iOS 8
    game development with Xcode 6.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Xcode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an iOS developer account
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Swift
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Playground
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing SpriteKit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the default SpriteKit project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New features in SpriteKit
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the default SceneKit project
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding 3D objects
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 2D/3D coordinate system
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring SceneKit
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Metal
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The graphics pipeline
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing Xcode
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have an Apple account, you can open the desktop version of the App Store
    and search for Xcode. Click on **Install** so that you can start downloading it.
    For this book, I will be using Xcode 6.1\. By the time this book gets published,
    there might be a newer version of Xcode 6\. If you wish to download the same version
    that I used to work with, you can create a free Apple Developer Account, go to
    the **Downloads** section, and download the previous version.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading and installing Xcode](img/B04014_01_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before downloading Xcode, make sure you are working on either Mac OS X Yosemite
    10.10 or Maverick 9.4\. Otherwise, Xcode 6.1 can't be installed on your machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Xcode is Apple's **Integrated Development Environment** (**IDE**). It is required
    for developing any sort of app for iOS or Mac OS X. It is not just an IDE; it
    is packed with a lot of tools and features, which makes it an integral part of
    any developer's arsenal. You can click on the **...More** button on Xcode's **App
    Store** page to see the different tools and features it has to offer. We will
    also look at some features of Xcode in the next chapter, when we cover the Xcode
    interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Xcode, click on the **Install** button under the icon. You will
    then be asked to enter your Apple ID and password. The installation will start
    soon after. Once you click on the **Install** button, the download will start
    in the launch pad, as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Xcode，请点击图标下的**安装**按钮。然后您将被要求输入您的Apple ID和密码。安装将在不久后开始。一旦您点击**安装**按钮，下载将在启动板上开始，如下面的屏幕截图所示：
- en: '![Downloading and installing Xcode](img/B04014_01_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![下载和安装Xcode](img/B04014_01_02.jpg)'
- en: Once it is downloaded and installed, you can see it appear in your launch pad.
    You can click on the application's icon to launch the application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装后，您可以在启动板上看到它出现。您可以点击应用程序的图标来启动应用程序。
- en: Creating an iOS developer account
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建iOS开发者账号
- en: To create any app and publish it on the App Store for iOS, Mac OS X, or Safari,
    you need to be enrolled in a developer program. You can create a free developer
    account to access certain sections such as tutorials and downloads, but you won't
    be given access to the latest beta software. Also, to run and test the app or
    game on your device, you need to be enrolled for this developer program.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建任何应用程序并在iOS、Mac OS X或Safari的App Store上发布，您需要注册开发者计划。您可以创建一个免费的开发者账户以访问某些部分，如教程和下载，但您将无法访问最新的测试软件。此外，要在您的设备上运行和测试应用程序或游戏，您需要注册此开发者计划。
- en: Since we do plan to create a small game for iOS and publish it on the App Store,
    we do need to enroll for the iOS Developer Program. I will assume that we don't
    have a developer account yet, so let's create a new developer account first, and
    then we will enroll for the iOS program.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们确实计划为iOS创建一个小游戏并在App Store上发布，因此我们需要注册iOS开发者计划。我将假设我们还没有开发者账户，所以让我们首先创建一个新的开发者账户，然后我们将注册iOS计划。
- en: 'To register as an Apple developer, go to [https://developer.apple.com/register/index.action](https://developer.apple.com/register/index.action).
    The following page will be displayed:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册为Apple开发者，请访问[https://developer.apple.com/register/index.action](https://developer.apple.com/register/index.action)。将显示以下页面：
- en: '![Creating an iOS developer account](img/B04014_01_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![创建iOS开发者账号](img/B04014_01_03.jpg)'
- en: 'If you already have an Apple ID, you can use it to log in. Otherwise, click
    on **Create Apple ID**. Here, you will be asked to fill in the information under
    the following headings:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有了Apple ID，您可以使用它来登录。否则，点击**创建Apple ID**。在这里，您将被要求填写以下标题下的信息：
- en: '**Name**: Enter the following details here:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**姓名**：在此处输入以下详细信息：'
- en: First name
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名字
- en: Middle name
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间名
- en: Last name
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 姓氏
- en: '**Apple ID and Password**: Enter a preferred Apple ID and password here. Keep
    the following pointers in mind:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple ID和密码**：在这里输入您首选的Apple ID和密码。请注意以下几点：'
- en: '**Apple ID**: Any e-mail address of your choice.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apple ID**：您选择的任何电子邮件地址。'
- en: '**Password**: The password should have at least eight characters; it should
    have at least one lowercase character, one capital letter, and one number; and
    it should not contain identical characters consecutively. Also, it shouldn''t
    be the same as the account name.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：密码应至少包含八个字符；它应至少包含一个小写字母、一个大写字母和一个数字；并且不应包含连续相同的字符。此外，它不应与账户名相同。'
- en: '**Confirm Password**: Type the same password that you typed in the **Password**
    field.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认密码**：在此处输入与**密码**字段中输入的相同密码。'
- en: '**Security Questions**: If you forget your password, you will be asked to answer
    some questions to gain access to your account. You can choose them here. So, be
    careful when choosing these questions, and also make note of the questions and
    answers for future reference. There are three questions, and each question has
    multiple choices. So, choose a question that is most relevant to you and select
    answers that you can remember easily.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全问题**：如果您忘记密码，您将需要回答一些问题以获取对账户的访问权限。您可以选择它们。因此，在选择这些问题时要小心，并记下问题和答案以供将来参考。有三个问题，每个问题都有多个选项。因此，选择一个与您最相关的问题，并选择您容易记住的答案。'
- en: 'All the headings mentioned until now can be seen in this screenshot:'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止提到的所有标题都可以在这个屏幕截图中看到：
- en: '![Creating an iOS developer account](img/B04014_01_04.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建iOS开发者账号](img/B04014_01_04.jpg)'
- en: '**Date of Birth**: Enter your date of birth.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出生日期**：请输入您的出生日期。'
- en: '**Rescue Email Address**: This is an alternate e-mail address through which
    you can be communicated with.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**备用电子邮件地址**：这是您可以通过它进行沟通的备用电子邮件地址。'
- en: 'The preceding two headings can be seen in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前两个标题可以在以下屏幕截图中看到：
- en: '![Creating an iOS developer account](img/B04014_01_05.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建 iOS 开发者账号](img/B04014_01_05.jpg)'
- en: '**Mailing Address**: Enter your mailing address.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邮寄地址**：输入您的邮寄地址。'
- en: '**Preferred Language**: Choose the language in which you are most comfortable.
    If you ask any questions to the Apple support team, they will respond to you in
    this language.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首选语言**：选择您最舒适的语言。如果您向苹果支持团队提出任何问题，他们将以这种语言回答您。'
- en: '**Email Preference**: If you like to be up to date with the latest Apple news,
    software updates, and information on products and services, you can check the
    two check boxes below this heading.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件偏好**：如果您想了解最新的苹果新闻、软件更新以及有关产品和服务的最新信息，您可以在本标题下方检查两个复选框。'
- en: '**CAPTCHA**: Type the CAPTCHA image in the box shown in this screenshot:![Creating
    an iOS developer account](img/B04014_01_06.jpg)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证码**：在此截图所示的框中输入验证码图像：![创建 iOS 开发者账号](img/B04014_01_06.jpg)'
- en: Now click on **Create Apple ID** to generate the Apple ID. If you've done everything
    successfully, congratulations!!!!! You are now an Apple developer.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**创建 Apple ID**以生成 Apple ID。如果您一切操作都成功，恭喜！您现在是一名苹果开发者。
- en: 'Once you are in, you will be greeted with the following screen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入，您将看到以下屏幕：
- en: '![Creating an iOS developer account](img/B04014_01_07.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![创建 iOS 开发者账号](img/B04014_01_07.jpg)'
- en: You will be spending most of the time in the **Technical Resources and Tools**
    section, though you have a strong developer community and developer support, which
    can be accessed at any time under the **Community and Support** section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在**技术资源和工具**部分花费大部分时间，尽管您有一个强大的开发者社区和开发者支持，您可以在**社区和支持**部分随时访问。
- en: 'Under the **Technical Resources and Tools** section, you have two subsections:
    **Dev Centers** and **Certificates, Identifiers & Profiles**. In the **Dev Centers**
    subsection, you will find all the technical resources for the appropriate development
    platform. Through the **Certificates, Identifiers and Profiles** link, you can
    generate and manage your certificates, create provisioning profiles, and manage
    App IDs and development devices. We will go through this section when we create
    an app and wish to run it on our device.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在**技术资源和工具**部分下，您有两个子部分：**开发中心**和**证书、标识符和配置文件**。在**开发中心**子部分中，您将找到适用于适当开发平台的所有技术资源。通过**证书、标识符和配置文件**链接，您可以生成和管理您的证书，创建配置文件，并管理
    App ID 和开发设备。当我们在创建应用程序并希望在我们的设备上运行它时，我们将介绍这个部分。
- en: Let's look at the **Dev Centers** section. If you click on **Mac**, you will
    see the links to the resources that develop apps for Yosemite, such as the link
    to the latest build of OS X. You can also get articles, sample code, guides, and
    so on that you can use to develop the app you always wanted to make for Yosemite.
    You also get a link to the development video that was shown in WWDC.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看**开发中心**部分。如果您点击**Mac**，您将看到开发适用于 Yosemite 的应用程序的资源链接，例如指向最新 OS X 版本的链接。您还可以获取文章、示例代码、指南等，您可以使用这些资源开发您一直想为
    Yosemite 制作的程序。您还可以获得在 WWDC 上展示的开发视频链接。
- en: If you click on **Safari**, you will see a layout similar to what you saw earlier,
    with links to sample code, and the developer library that you can use to develop
    apps for Safari.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击**Safari**，您将看到与您之前看到的类似的布局，包括示例代码和您可以使用来开发 Safari 应用的开发者库链接。
- en: 'Now click on **iOS** in **Dev Centers**. You should be greeted with the following
    screen:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**开发中心**中的**iOS**。您应该会看到以下屏幕：
- en: '![Creating an iOS developer account](img/B04014_01_08.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建 iOS 开发者账号](img/B04014_01_08.jpg)'
- en: Here, you will find all the resources that are required to develop all kinds
    of apps for iOS. You can download the latest version of iOS SDK, or if you wish
    to download an older version of Xcode, you can do that from the **Downloads**
    link.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以找到开发各种 iOS 应用所需的所有资源。您可以下载最新版本的 iOS SDK，或者如果您想下载较旧版本的 Xcode，您可以从**下载**链接中进行。
- en: Similar to Mac Developer Library, you have an iOS Developer Library with links
    to how to get started, guides, sample code, references, and release notes. There
    are also links to videos on iOS development under the **Development Videos** section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Mac 开发者库类似，您有一个 iOS 开发者库，其中包含如何入门、指南、示例代码、参考和发布说明的链接。在**开发视频**部分下，还有关于 iOS
    开发的视频链接。
- en: You can download Xcode, install it on your machine, and test your coding skills,
    but if you want to test your awesome app on a device and later publish it on the
    App Store, you need to register to the iOS Developer Program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以下载Xcode，将其安装到你的机器上，并测试你的编码技能，但如果你想在一个设备上测试你的出色应用，并将其发布到App Store，你需要注册iOS开发者计划。
- en: As I said earlier, you are required to be part of the program to be able to
    test the app on the device or publish it on the App Store. In the meantime, you
    can run the SpriteKit and SceneKit apps you make on the simulator. So, if you
    wish, you can enroll once you are satisfied with how the game looks on the simulator.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，你必须成为该计划的一部分，才能在设备上测试应用或将其发布到App Store。在此期间，你可以在模拟器上运行你制作的SpriteKit和SceneKit应用。所以，如果你愿意，当你对模拟器上的游戏外观满意后，你可以注册。
- en: 'That being said, a simulator is just that—a simulator. How the game works on
    the simulator shouldn''t be taken to mean how the game will actually work on the
    device. The game will run slower on the simulator because the Mac processor performs
    two tasks: running your OS and also the simulator.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，模拟器只是模拟器而已。游戏在模拟器上的运行方式不应被视为游戏在实际设备上运行的实际情况。游戏在模拟器上会运行得更慢，因为Mac处理器执行两个任务：运行你的操作系统和运行模拟器。
- en: So, it is better to test the app on the device to get a better understanding
    of how it is going to finally run on the device, and the more devices you run
    it on, the better.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好在设备上测试应用，以更好地了解它最终将在设备上如何运行，并且你测试的设备越多，效果越好。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Additionally, it should be noted that at the time of writing this book, apps/games
    developed using Metal cannot be run on the simulator, and they require an A7 or
    A8 chip to run on the device. If you try running them on the simulator, it will
    give an error.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，需要注意的是，在撰写这本书的时候，使用Metal开发的应用程序/游戏无法在模拟器上运行，它们需要在配备A7或A8芯片的设备上运行。如果你尝试在模拟器上运行它们，将会出现错误。
- en: So, if you are ready to enroll in the iOS Developer Program, click on the **Learn
    More** link under the **Join the iOS Developer Program** heading on the right-hand
    side of the page you are currently at.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你已经准备好注册iOS开发者计划，请点击你当前所在页面右侧“加入iOS开发者计划”标题下的**了解更多**链接。
- en: Let's get enrolled in the iOS Developer Program. Get your credit card and your
    attorney ready, and click on the **Enroll Now** button at the top to start the
    process. Next, click on the **Continue** button to go to the next screen. Click
    on **Continue** again, as you have already created an Apple ID. If you have still
    not created an Apple ID, click on **Create Apple ID** and follow the mentioned
    steps, then come back to this page, and continue with your new Apple ID. Once
    you click on **Continue**, you will be redirected to a page where you will have
    to choose whether you want to register as an individual or a company.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们注册iOS开发者计划。准备好你的信用卡和律师，然后点击顶部的**立即注册**按钮开始流程。接下来，点击**继续**按钮进入下一屏幕。再次点击**继续**，因为你已经创建了一个Apple
    ID。如果你还没有创建Apple ID，请点击**创建Apple ID**并按照说明操作，然后回到这个页面，并使用你的新Apple ID继续。一旦点击**继续**，你将被重定向到一个页面，你将需要选择你是想以个人身份还是公司身份注册。
- en: If you register as an individual, your name will be displayed as the seller
    on the App Store, and you won't be asked for any documentation for registration.
    If you register as a company, non-profit organization, joint venture, partnership,
    or government organization, you should select the option to register as an organization.
    To enroll as an organization, you will need additional documents such as the Tax
    ID, D-U-N-S number (which is available for free), and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以个人身份注册，你的名字将作为卖家显示在App Store上，并且注册时不需要提供任何文件。如果你以公司、非营利组织、合资企业、合伙企业或政府机构身份注册，你应该选择注册为组织的选项。要注册为组织，你需要额外的文件，例如税务识别号、D-U-N-S号码（免费提供）等等。
- en: 'In the case of the organization, the name of the organization will be displayed
    as the seller on the App Store. You can also include additional developers as
    part of the team, unlike individual registration, in which only one individual
    can be added per account, that is, the person who is enrolling. The following
    screenshot shows the screen where you can select whether you are registering as
    an individual or a company/organization:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织的情况下，组织的名称将显示为 App Store 上的卖家。你还可以将其他开发者作为团队的一部分添加，与个人注册不同，在个人注册中，每个账户只能添加一个个人，即注册的人。以下截图显示了你可以选择是否作为个人或公司/组织注册的屏幕：
- en: '![Creating an iOS developer account](img/B04014_01_09.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![创建 iOS 开发者账号](img/B04014_01_09.jpg)'
- en: For this book, we will be enrolling as an individual, so click on **Individual**
    in the bottom-left corner of the screen to proceed to the next screen.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，我们将以个人身份注册，所以点击屏幕左下角的 **个人** 以进入下一页。
- en: 'On the next page, you will have to choose the program that you want to enroll
    for. Since we are going to enroll for the iOS Developer Program, we check the
    box to the left of **iOS Developer Program** and click on **Continue**, as shown
    in the following screenshot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页，你必须选择你想要注册的项目。由于我们将注册 iOS 开发者项目，我们勾选 **iOS 开发者项目** 左侧的复选框，然后点击 **继续**，如以下截图所示：
- en: '![Creating an iOS developer account](img/B04014_01_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建 iOS 开发者账号](img/B04014_01_10.jpg)'
- en: On the next page, you are required to agree to the Program License Agreement.
    Get your attorney over and ask them to read it. After their confirmation, click
    on the checkbox to agree to having read the agreement, and to being above the
    legal age. Click on **I Agree** at the bottom of the page to agree and move on
    to the next page.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页，你必须同意程序许可协议。请让你的律师过来看看。在他们确认后，点击复选框以同意已阅读协议，并且年龄已满法定年龄。点击页面底部的 **我同意**
    以同意并进入下一页。
- en: Here, you have to enter your payment information. Provide your credit card and
    billing information and click on **Continue**. Now verify the information once
    again and click on **Place Order**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你必须输入你的支付信息。提供你的信用卡和账单信息，然后点击 **继续**。现在再次验证信息，然后点击 **下单**。
- en: Once you are done with this, you are a registered iOS developer. You will get
    a **Thank You** screen and also an e-mail confirmation. It will take up to 2 business
    days for the order to be processed, so in the meantime, we will take a sneak peek
    at Swift, SpriteKit, SceneKit, and Metal.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，你就是一个注册的 iOS 开发者。你将得到一个 **感谢** 屏幕和一封电子邮件确认。订单处理可能需要最多 2 个工作日，所以在这期间，我们将提前了解一下
    Swift、SpriteKit、SceneKit 和 Metal。
- en: Introducing Swift
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 简介
- en: With Xcode 6, Apple has introduced a new scripting language called Swift. If
    you are coming from a JavaScript or ActionScript background, you will find yourself
    very much at home. But even if you have been using Objective-C for a long time,
    don't worry. You can still create games using Objective-C. Before creating any
    project, you will be asked in which language you want to create the app/game.
    Just select **Swift** and you are good to go.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 6 中，苹果引入了一种名为 Swift 的新脚本语言。如果你来自 JavaScript 或 ActionScript 背景，你会觉得自己非常熟悉。即使你已经长时间使用
    Objective-C，也不要担心。你仍然可以使用 Objective-C 创建游戏。在创建任何项目之前，你将被要求选择你想要创建应用程序/游戏的编程语言。只需选择
    **Swift**，然后你就可以开始了。
- en: In [Chapter 2](ch02.html "Chapter 2. Swift Basics"), *Swift Basics*, you will
    learn how to code in Swift, and we will see how it is different from Objective-C.
    When coding in Swift, we will start from the absolute beginning, with variables,
    control statements, loops, and advanced topics such as classes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章。Swift 基础")，*Swift 基础* 中，你将学习如何在 Swift 中编码，我们将看到它与
    Objective-C 的不同之处。在 Swift 中编码时，我们将从绝对开始，包括变量、控制语句、循环和类等高级主题。
- en: Introducing Playground
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Playground 简介
- en: Playground is a file that you can use to test your Swift code and see immediate
    results of your code. Let's actually create a new file and take a look at it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Playground 是一个你可以用来测试 Swift 代码并立即看到代码结果的文件。让我们实际创建一个新文件并看看它。
- en: If you have downloaded Xcode from the developer portal instead of the Mac Store,
    double-click on the DMG file to open it. Once it is open, you can drag the Xcode
    app into your `Applications` folder to install it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从开发者门户而不是 Mac Store 下载了 Xcode，请双击 DMG 文件以打开它。一旦打开，你可以将 Xcode 应用程序拖到你的 `Applications`
    文件夹中以安装它。
- en: Once it is installed, drag the app into the dock, as we will be using it quite
    often. Once you have dragged it into the dock, click on it to open it. You will
    have to agree to the terms and conditions once it opens, so agree to them to proceed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，将应用程序拖入 dock，因为我们将会经常使用它。一旦您将其拖入 dock，点击它以打开。打开后，您需要同意条款和条件，因此请同意它们以继续。
- en: 'You should see the welcome screen on Xcode. Here, you can click on any one
    of **Get started with a playground**, **Create a new Xcode project**, or **Check
    out an existing project**. The details of these three options are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在 Xcode 上看到欢迎界面。在这里，您可以点击以下任何一个选项：**使用游乐场开始**、**创建一个新的 Xcode 项目**或**查看现有项目**。这三个选项的详细信息如下：
- en: '**Get Started with a playground**: With a playground, you can test your Swift
    coding skills and hone them before using the playground to develop an app or game'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用游乐场开始**：使用游乐场，您可以测试您的 Swift 编码技能，并在使用游乐场开发应用程序或游戏之前磨练它们。'
- en: '**Create a new Xcode project**: Whenever you want to create a new Xcode project,
    you will have to click on this button, and then you can also select the type of
    project you want to create'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建一个新的 Xcode 项目**：每次您想要创建一个新的 Xcode 项目时，您都必须点击此按钮，然后您还可以选择您想要创建的项目类型。'
- en: '**Check out an existing project**: If you are using a **source code manager**
    (**SCM**) to manage code, such as GitHub, SVN, or BitBucker, you can check out
    the project you have there, using this'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看现有项目**：如果您正在使用**源代码管理器**（**SCM**）来管理代码，例如 GitHub、SVN 或 BitBucker，您可以使用此方法查看您那里的项目。'
- en: 'These options can be seen in this screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项可以在以下屏幕截图中看到：
- en: '![Introducing Playground](img/B04014_01_11.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![介绍游乐场](img/B04014_01_11.jpg)'
- en: 'For now, click on the **Get Started with a playground** button. Give a filename
    (I gave it the name `playgroundTest`), select the **iOS** platform, and click
    on **Next**, as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**使用游乐场开始**按钮。输入文件名（我将其命名为`playgroundTest`），选择**iOS**平台，然后点击**下一步**，如图所示：
- en: '![Introducing Playground](img/B04014_01_12.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![介绍游乐场](img/B04014_01_12.jpg)'
- en: On the next screen, you will be asked where you want to create the project folder.
    To be organized, I keep all my projects in the `_Projects` folder in the `Documents`
    folder, under the specific game technology's folder name starting with an underscore
    (`_`). So in this case, I created a new `_Projects` folder in the `Documents`
    folder. Then I created a new folder called `_Playground`, selected it, and clicked
    on **Create**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏，您将被询问希望在哪里创建项目文件夹。为了保持整洁，我将所有项目都保存在“文档”文件夹下的“_Projects”文件夹中，该文件夹以下划线（`_`）开头。因此，在这种情况下，我在“文档”文件夹中创建了一个新的“_Projects”文件夹。然后我创建了一个名为“_Playground”的新文件夹，选中它，并点击**创建**。
- en: 'You will see that the `playgroundTest` file is created in the `_Projects/_Playground`
    folder in the `Documents` folder. Once the file is created, you will see the following
    window:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到在“文档”文件夹的“_Projects/_Playground”文件夹中创建了一个名为“playgroundTest”的文件。一旦文件创建完成，您将看到以下窗口：
- en: '![Introducing Playground](img/B04014_01_13.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![介绍游乐场](img/B04014_01_13.jpg)'
- en: You will be coding in the left pane, and you will be able to see the immediate
    result in the right-hand-side pane. You can see that there is already some code
    written on the left and the result is shown on the right. Here, the `Hello, playground`
    string is assigned to a new variable called `str`, and the `str` variable's value
    is immediately logged on the screen to the right.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在左侧面板中编码，您将能够在右侧面板中看到即时结果。您可以看到左侧已经编写了一些代码，而结果在右侧显示。在这里，`Hello, playground`字符串被分配给一个新的变量`str`，而`str`变量的值立即在右侧屏幕上记录。
- en: We will cover more information about playgrounds when you learn Swift in [Chapter
    3](ch03.html "Chapter 3. An Introduction to Xcode"), *An Introduction to Xcode*,
    as all the coding practices that we will be doing will require the playground
    file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在[第 3 章](ch03.html "第 3 章。Xcode 简介")学习 Swift 时，我们将详细介绍有关游乐场的信息，因为我们将要进行的所有编码实践都需要游乐场文件。
- en: Exploring SpriteKit
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 SpriteKit
- en: SpriteKit is a 2D game development framework that was first introduced in iOS
    7 and Xcode 5\. It is primarily used to create 2D games, so objects can be placed
    or moved only in the *x* and *y* coordinates. Using SpriteKit, you can create
    2D games for both iOS and OS X.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit 是一个首次在 iOS 7 和 Xcode 5 中引入的 2D 游戏开发框架。它主要用于创建 2D 游戏，因此对象只能在 *x* 和
    *y* 坐标上放置或移动。使用 SpriteKit，您可以创建适用于 iOS 和 OS X 的 2D 游戏。
- en: If you have used Cocos2d, you will feel very much at home with the architecture
    and syntax of SpriteKit. Since the game will be mostly populated with sprites,
    it is called SpriteKit.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过Cocos2d，你将非常熟悉SpriteKit的架构和语法。由于游戏将主要由精灵组成，因此它被称为SpriteKit。
- en: Since SpriteKit is a 2D game development framework, it provides all the tools
    that you require to create a complete 2D game from start to finish. You can create
    a MainMenu Screen, Gameplay Screen, and Options Screen. You can also create buttons
    on each of these screens. When the buttons are pressed, you can navigate between
    the screens. In the gameplay screen, you can add players, enemies, text to display
    the score, and particles such as smoke and explosion with the particle editor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SpriteKit是一个2D游戏开发框架，它提供了从开始到结束创建完整2D游戏所需的所有工具。你可以创建主菜单屏幕、游戏玩法屏幕和选项屏幕。你还可以在每个屏幕上创建按钮。当按钮被按下时，你可以在屏幕之间导航。在游戏玩法屏幕中，你可以添加玩家、敌人、用于显示分数的文本，以及使用粒子编辑器创建的烟雾和爆炸等粒子。
- en: SpriteKit also includes a physics engine that performs all the physics-related
    calculations. All you have to do is include it in the scene, and you will see
    the objects in the scene interacting with each other automatically, according
    to the physics simulation. In addition, SpriteKit also includes an automatic texture
    atlas generator for better optimization of your game assets.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit还包括一个执行所有物理相关计算的物理引擎。你只需要将其包含在场景中，你将看到场景中的对象根据物理模拟自动相互交互。此外，SpriteKit还包括一个自动纹理图集生成器，以更好地优化你的游戏资源。
- en: There are some classes in SpriteKit that are the basic building blocks for creating
    any game.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit中有些类是创建任何游戏的基本构建块。
- en: New features in SpriteKit
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SpriteKit的新特性
- en: 'There are a lot of new cool features added in SpriteKit in Xcode 6:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode 6中，SpriteKit添加了许多新酷炫的特性：
- en: 'Graphics technologies:'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形技术：
- en: Shaders
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 着色器
- en: Lighting and shadows
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灯光和阴影
- en: 'Physics simulations technologies:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理模拟技术：
- en: Per-pixel physics
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每像素物理
- en: Physics fields
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理场
- en: Inverse kinematics
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逆运动学
- en: Constraints
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 约束
- en: 'Tools and improvements:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具和改进：
- en: SpriteKit Editor
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpriteKit编辑器
- en: Integration with SceneKit
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与SceneKit的集成
- en: SpriteKit now includes shaders that you can use to create new and interesting
    effects in your game. You can also create light sources to cast real-time 2D shadows.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit现在包括你可以用来在游戏中创建新的有趣效果的着色器。你还可以创建光源来投射实时2D阴影。
- en: The already powerful physics engine of SpriteKit has been made even more powerful
    with the inclusion of per-pixel physics for pixel-perfect collision detection.
    With the addition of physics fields, we can create an *Angry Birds Space* clone
    in no time, and with inverse kinematics, it is easier to make joint movements
    of your 2D characters look more realistic. Along with all of this, you can also
    use constraints to control the movement or rotation of any physics object in the
    scene along any direction or angle.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit已经强大的物理引擎通过包含每像素物理以实现像素级碰撞检测而变得更加强大。通过添加物理场，我们可以迅速创建一个《愤怒的小鸟太空版》的克隆，并且通过逆运动学，使你的2D角色的关节运动看起来更加逼真。除此之外，你还可以使用约束来控制场景中任何物理对象沿任何方向或角度的运动或旋转。
- en: SpriteKit also includes a new editor that can be used to create a simple game
    without writing a single line of code. It can also be used to check for errors
    as a debugging tool.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit还包括一个新编辑器，可以用来创建一个无需编写任何代码的简单游戏。它也可以用作调试工具来检查错误。
- en: SpriteKit can also be used with SceneKit. SceneKit is a 3D game development
    framework newly developed by Apple. If you want to create GUI elements in your
    3D game, such as 2D buttons and radars, this can be achieved very easily using
    SpriteKit.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: SpriteKit也可以与SceneKit一起使用。SceneKit是苹果公司新开发的3D游戏开发框架。如果你想在3D游戏中创建GUI元素，例如2D按钮和雷达，使用SpriteKit可以非常容易地实现这一点。
- en: Looking at the default SpriteKit project
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看默认的SpriteKit项目
- en: Let's look at the default SpriteKit project that gets created when we create
    a new project so that you can understand some of the terms that you will be using
    while creating the game.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当我们创建一个新项目时默认创建的SpriteKit项目，这样你就可以理解你在创建游戏时将使用的一些术语。
- en: 'For now, we will create a new project. So, click on the **Create a New Xcode
    Project** button in the middle. Once you have clicked, you will see the following
    window:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个新项目。因此，点击中间的**创建新Xcode项目**按钮。一旦点击，你将看到以下窗口：
- en: '![Looking at the default SpriteKit project](img/B04014_01_14.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认的SpriteKit项目](img/B04014_01_14.jpg)'
- en: In the left panel, you need to select the platform you wish to create the game
    for, iOS or OS X. Since we are going to be creating games for iOS in this book,
    we will select from the iOS section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧面板中，你需要选择你想要为哪个平台创建游戏，iOS或OS X。由于我们将在本书中创建iOS游戏，我们将从iOS部分选择。
- en: 'In **Applications**, you can select the type of application that you want to
    create: **Master-Detail Application**, **Page-Based Application**, **Single View
    Application**, **Tabbed Application**, or **Game**. Since SpriteKit, SceneKit,
    Metal, and OpenGL ES are part of a game application, we will select **Game**.
    Then click on **Next**.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用类型**中，你可以选择你想要创建的应用类型：**主从应用**、**页面应用**、**单视图应用**、**标签应用**或**游戏**。由于SpriteKit、SceneKit、Metal和OpenGL
    ES都是游戏应用的一部分，我们将选择**游戏**。然后点击**下一步**。
- en: 'In the **Choose options for your new project** window, you will have to fill
    the **Product Name**, **Organization Name**, **Organization Identifier**, **Language**,
    **Game Technology**, and **Devices** fields:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在**选择新项目选项**窗口中，你必须填写**产品名称**、**组织名称**、**组织标识符**、**语言**、**游戏技术**和**设备**字段：
- en: '![Looking at the default SpriteKit project](img/B04014_01_15.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认的SpriteKit项目](img/B04014_01_15.jpg)'
- en: 'The details of the fields shown in the preceding screenshot are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图所示字段的详细信息如下：
- en: '**Product Name**: When you create an actual project, the entry for this field
    is the name of the game that you are creating, such as `AngryBirds`, `CutTheRope`,
    and so on.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品名称**：当你创建实际项目时，这个字段的输入是你正在创建的游戏名称，例如`AngryBirds`、`CutTheRope`等等。'
- en: '**Organization Name**: Here, you can input the organization name for which
    you are developing your game. For the purpose of this book, you can input any
    name you want.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织名称**：在这里，你可以输入你为该组织开发游戏的组织名称。为了本书的目的，你可以输入任何你想要的名称。'
- en: '**Organization Identifier**: This is very important, and I can''t stress enough
    on how important it is. On the App Store, Apple will identify your app by only
    this. Whatever input is given here translates into the value for **Bundle Identifier**.
    This has to be unique, and no other app on the App Store can have the same package
    name. Although you can call it whatever you wish, the standard format used is
    the reverse format of the company website followed by the product name, like this:
    `com.<company name>.<product name>`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织标识符**：这一点非常重要，我无法强调它的重要性。在App Store上，苹果将只通过这个标识符来识别你的应用。这里输入的任何内容都将转换为**包标识符**的值。这必须是唯一的，App
    Store上的其他应用不能有相同的包名。虽然你可以随意命名，但常用的格式是公司网站反向格式加上产品名称，例如：`com.<公司名称>.<产品名称>`。'
- en: If you don't have a company or a website, don't fret. You just have to make
    sure your package name is unique. If it is not, Apple will not accept the app.
    In such a case, you can try different package names, and later you have the option
    to change the package name in Xcode to whatever Apple approved as the package
    name.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有公司或网站，不要担心。你只需确保你的包名是唯一的。如果不是，苹果将不会接受这个应用。在这种情况下，你可以尝试不同的包名，稍后你可以在Xcode中将包名更改为苹果批准的包名。
- en: '**Language**: From this drop-down list, you can select the language of choice
    in which you want to develop the game. You can choose between **Objective-C**
    and **Swift**. Since we will be developing the games in Swift in this book, we
    will use the **Swift** option here.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言**：从这个下拉列表中，你可以选择你想要用哪种语言开发游戏。你可以选择**Objective-C**和**Swift**。由于我们将在本书中使用Swift开发游戏，这里我们将使用**Swift**选项。'
- en: '**Game Technology**: From this drop-down list, you can select the technology
    that you want to use to develop the game with. You have the option of choosing
    SceneKit, SpriteKit, Metal, and OpenGL ES. As we are going to use SpriteKit, select
    it from the dropdown.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏技术**：从这个下拉列表中，你可以选择你想要用来开发游戏的科技。你可以选择SceneKit、SpriteKit、Metal和OpenGL ES。由于我们将使用SpriteKit，请从下拉列表中选择它。'
- en: '**Devices**: From this drop-down list, you can select the device that you want
    to develop the game for. You can choose either **iPhone** or **iPad** if you want
    to develop for the iPhone or the iPad, or you can choose **Universal** if you
    want the game to run on both the platforms. You can choose **iPad** for now.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：从这个下拉列表中，你可以选择你想要为哪个设备开发游戏。如果你想为iPhone或iPad开发，你可以选择**iPhone**或**iPad**，或者如果你想游戏能在两个平台上运行，你可以选择**通用**。现在你可以选择**iPad**。'
- en: Click on **Next** to proceed. In the screen that follows, you will be asked
    where to create the project folder. For this, create a new folder called `_SpriteKit`
    in the `_Projects` folder. Then select this folder and click on **Create**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**继续。在接下来的屏幕中，你将被询问在哪里创建项目文件夹。为此，在`_Projects`文件夹中创建一个名为`_SpriteKit`的新文件夹。然后选择此文件夹，并点击**创建**。
- en: 'You will see that the `spriteKitTest` project folder is created in the `_Projects/_SpriteKit`
    folder in the `Documents` folder, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现`spriteKitTest`项目文件夹在`Documents`文件夹中的`_Projects/_SpriteKit`文件夹内被创建，如下面的截图所示：
- en: '![Looking at the default SpriteKit project](img/B04014_01_16.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认SpriteKit项目](img/B04014_01_16.jpg)'
- en: 'Now double-click on the `spriteKitTest.xcodeproj` file to open your project
    in Xcode. Your project should open up, as shown in this screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在双击`spriteKitTest.xcodeproj`文件以在Xcode中打开你的项目。你的项目应该会打开，如下面的截图所示：
- en: '![Looking at the default SpriteKit project](img/B04014_01_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认SpriteKit项目](img/B04014_01_17.jpg)'
- en: 'Xcode has a built-in simulator that can show you how the game or app will look
    in a specified device. You can select the device by clicking on the name of the
    project to the right of the stop button at the top of the window, as shown in
    the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode内置了一个模拟器，可以展示游戏或应用在指定设备上的外观。你可以通过点击窗口顶部停止按钮右侧的项目名称来选择设备，如下面的截图所示：
- en: '![Looking at the default SpriteKit project](img/B04014_01_18.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认SpriteKit项目](img/B04014_01_18.jpg)'
- en: 'Click on the play button in the top-left corner to build the current project.
    The game will start compiling all of the code and will automatically launch the
    simulator. Once the simulator starts, give it some time to display the following
    screen:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 点击左上角的播放按钮来构建当前项目。游戏将开始编译所有代码，并自动启动模拟器。一旦模拟器启动，给它一些时间来显示以下屏幕：
- en: '![Looking at the default SpriteKit project](img/B04014_01_19.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![查看默认SpriteKit项目](img/B04014_01_19.jpg)'
- en: Well, it won't look exactly like the preceding screenshot. For one thing, you
    won't see the image of the plane above `Hello, World`. Secondly, it will be in
    portrait mode, instead of landscape as shown in the preceding screenshot.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，它看起来不会完全像前面的截图。首先，你不会看到在“Hello, World”上面的飞机图像。其次，它将是纵向模式，而不是前面截图中的横向模式。
- en: To change the view to landscape mode, click on the project name in the left
    panel. The middle panel will change and display the options for landscape, portrait,
    and so on. Uncheck the portrait option and stop and build the game again. Now
    the view will change from portrait to landscape whenever you build the game.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要将视图更改为横向模式，点击左侧面板中的项目名称。中间面板将改变并显示横向、纵向等选项。取消选中纵向选项，并停止并重新构建游戏。现在，每次构建游戏时，视图都会从纵向变为横向。
- en: 'Next, how do you get the plane onto the screen? It is very simple; all you
    have to do for it to appear is to click anywhere on the screen. I clicked on the
    center of the screen, between the top and the place where `Hello, World` is shown,
    which is why the plane showed up there. To create more planes, all you have to
    do is keep on clicking wherever you want a new plane to appear. You will see that
    when you add more planes, the numbers on the bottom right of the screen also change,
    and the planes start rotating slower and slower. Why is this happening? And what
    are these numbers? Before that, let''s first cover a few terms, classes, and functions
    that we need to familiarize ourselves with:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你如何将飞机放到屏幕上？这非常简单；要让它出现，你只需在屏幕上的任何地方点击。我在屏幕中心点击，在顶部和显示“Hello, World”的地方之间，这就是为什么飞机出现在那里。要创建更多飞机，你只需继续在你想出现新飞机的地方点击。你会看到，当你添加更多飞机时，屏幕右下角的数字也会改变，飞机开始旋转得越来越慢。为什么会这样？这些数字是什么？在那之前，让我们首先了解一些术语、类和函数，这些是我们需要熟悉的：
- en: '`SKScene`: This is a class used to create scenes, for example, the MainMenuScreen,
    OptionsScreen, and GamePlayScreen. Each scene will contain sprites such as the
    player and buttons, which will populate the screens and help you to navigate to
    other screens. In the project on the left-hand-side panel, you will find a file
    called `GameScene.swift`. This is the scene that gets loaded as soon as the game
    is built.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SKScene`：这是一个用于创建场景的类，例如，主菜单屏幕、选项屏幕和游戏玩法屏幕。每个场景将包含玩家和按钮等精灵，这些精灵将填充屏幕并帮助你导航到其他屏幕。在左侧面板的项目中，你会找到一个名为`GameScene.swift`的文件。这是游戏构建时立即加载的场景。'
- en: '`SKSpriteNode`: As we saw earlier, each scene will be loaded with sprites or
    images. To load a sprite onto the screen, you have to use `SKSpriteNode`. In this
    scene, whenever you touch the screen, you create a sprite in the specific location.
    It gets the image name of `Spaceship`. This can be seen in the `touchesBegan`
    function in the same class.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SKSpriteNode`：正如我们之前看到的，每个场景都会加载精灵或图像。要将精灵加载到屏幕上，您必须使用`SKSpriteNode`。在这个场景中，每次您触摸屏幕时，您都会在特定位置创建一个精灵。它获取`Spaceship`的图像名称。这可以在同一类的`touchesBegan`函数中看到。'
- en: '`SKLabelNode`: In order to display any sort of text on the screen, you need
    to use `SKLabelNode` to decide which font should be used to create the text. You
    also need to provide the text that needs to be displayed on the screen, along
    with the size and the position of the text to be displayed. Here, we see that
    `SKLabelNode` is used to display `Hello, World` on the screen. In `myLabeltext`,
    you can write whatever you want to display, in quotes, and build again to see
    whatever you typed get displayed on the screen.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SKLabelNode`：为了在屏幕上显示任何类型的文本，您需要使用`SKLabelNode`来决定应该使用哪种字体来创建文本。您还需要提供需要在屏幕上显示的文本，以及要显示的文本的大小和位置。在这里，我们看到`SKLabelNode`被用来在屏幕上显示`Hello,
    World`。在`myLabeltext`中，您可以在引号内写下您想要显示的内容，然后重新构建以查看您输入的内容是否在屏幕上显示。'
- en: '`SKAction`: These are used to modify nodes'' parameters over a period of time.
    For example, you can scale an object up to twice its size over a 1-second duration,
    and then bring it back to its normal size. Or you can change the position of an
    object to make it move or rotate over a period of time. You can perform these
    actions together or one after the other, using SKAction. Here, as soon as the
    spaceship is created, an action is run on it, telling it to rotate by 180 degrees
    every second.![Looking at the default SpriteKit project](img/B04014_01_20.jpg)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SKAction`：这些用于在一段时间内修改节点的参数。例如，您可以在1秒内将一个对象放大到其大小的两倍，然后将其恢复到正常大小。或者，您可以将对象的位置改变以使其在一段时间内移动或旋转。您可以使用SKAction一起执行这些操作或一个接一个地执行，这里，一旦宇宙飞船被创建，就会对其运行一个动作，告诉它每秒旋转180度。![查看默认的SpriteKit项目](img/B04014_01_20.jpg)'
- en: '`touchesBegan`: SpriteKit has inbuilt overridable functions that can be used
    to register touches on the screen. There are four functions called `touchesBegan`,
    `touchesMoved`, `touchesEnded`, and `touchesCancelled`. You can use these functions
    in combination with each other to detect finger touches and create your own control
    schemes such as tap, swipe, and double tap.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchesBegan`：SpriteKit内置了可重写的函数，可以用来在屏幕上注册触摸。有四个函数称为`touchesBegan`、`touchesMoved`、`touchesEnded`和`touchesCancelled`。您可以使用这些函数组合在一起来检测手指触摸并创建自己的控制方案，如点击、滑动和双击。'
- en: '`update`: The `update` function is another overridable function that is provided
    by SpriteKit and gets called repeatedly throughout the game, depending on how
    often you set it to call itself. Usually, the `update` function gets called 60
    times a second. We can use this function to update the position, check a collision,
    or update the score of the game. The `update` function starts getting called automatically
    once the scene gets initialized.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：`update`函数是SpriteKit提供的另一个可重写的函数，它会在整个游戏中根据您设置的调用频率反复调用。通常，`update`函数每秒调用60次。我们可以使用这个函数来更新位置、检查碰撞或更新游戏的分数。一旦场景初始化，`update`函数就会自动开始调用。'
- en: So now, knowing all that, let's answer the question asked earlier; what are
    the two values in the bottom-right corner of the screen?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在，知道了所有这些，让我们回答之前提出的问题；屏幕右下角的那两个值是什么？
- en: The Nodes represent the number of nodes you have added to the scene. These nodes
    can be sprites, labels, and so on. This is why each time you add a new spaceship
    on the screen, you will see the node count increase. The more objects you add
    to the screen, the more the processing power required.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 节点代表您添加到场景中的节点数量。这些节点可以是精灵、标签等。这就是为什么每次您在屏幕上添加新的宇宙飞船时，您都会看到节点计数增加。屏幕上添加的对象越多，所需的处理能力就越大。
- en: The number next to the node count is the calculation of FPS or frames per second.
    In the `update` function, we saw that the function gets called 60 times a second.
    So, 60 times in a second, the screen is wiped and redrawn again to create a new
    frame, and the position and rotation of each object will also be updated. So,
    if you add more objects to the screen, the processor has to do that much work
    more by drawing all the images on the screen. This is why you see a dip in the
    FPS; that is, the spaceship starts rotating slower and slower when you add more
    spaceships to the scene. Also, in this case, it needs to be taken into consideration
    that the new spaceships are also asked to rotate, so the processor has to do additional
    work calculating by how much the spaceships need to be rotated every second.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 节点计数旁边的数字是 FPS 或每秒帧数的计算。在 `update` 函数中，我们看到该函数每秒被调用 60 次。所以，每秒 60 次，屏幕被擦除并重新绘制以创建一个新的帧，每个对象的位子和旋转也将被更新。因此，如果你在屏幕上添加更多对象，处理器就必须做更多的工作来绘制屏幕上的所有图像。这就是为什么你会看到
    FPS 的下降；也就是说，当你向场景中添加更多飞船时，飞船的旋转会越来越慢。此外，在这种情况下，还需要考虑新飞船也需要旋转，因此处理器必须额外计算飞船每秒需要旋转多少。
- en: That's all for the introduction to SpriteKit and `GameScene.swift`. There are
    additional files on the panel that we will cover in the next chapter when we take
    a deeper look into Xcode. Let's look at SceneKit next.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SpriteKit 和 `GameScene.swift` 的介绍就到这里。面板上还有其他文件，我们将在下一章中深入探讨 Xcode 时进行讲解。接下来，让我们看看
    SceneKit。
- en: Exploring SceneKit
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 SceneKit
- en: SceneKit is a 3D game development framework. So, it can be used to create 3D
    games or apps for iOS and OS X. It was initially released in OS X 10.8, and now
    it is available on iOS 8\. It is a high-level API built on OpenGL and OpenGL ES,
    and can be integrated with SpriteKit, as we saw earlier.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: SceneKit 是一个 3D 游戏开发框架。因此，它可以用来创建 iOS 和 OS X 的 3D 游戏或应用程序。它最初在 OS X 10.8 中发布，现在在
    iOS 8 中可用。它是一个基于 OpenGL 和 OpenGL ES 的高级 API，可以与 SpriteKit 集成，就像我们之前看到的。
- en: In SceneKit, as in any 3D game development framework, we need to provide the
    camera, lights, and objects for the scene so that the scene can be rendered from
    the viewpoint of the camera and be processed and displayed on the viewport of
    the device.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SceneKit 中，就像在任何 3D 游戏开发框架中一样，我们需要为场景提供相机、灯光和对象，以便场景可以从相机的视角进行渲染，并在设备的视口中进行处理和显示。
- en: '![Exploring SceneKit](img/B04014_01_21.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![探索 SceneKit](img/B04014_01_21.jpg)'
- en: All objects need to be added to the nodes by creating one for every object you
    place, whether it is a camera, light, or an object.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所有对象都需要通过为放置的每个对象创建一个节点来添加到节点中，无论是相机、灯光还是对象。
- en: You can either add a predefined object, such as boxes, spheres, tori, and planes
    and add texture to it; or import COLLADA files or Alembic files created in a 3D
    program, export it in `.dae` or `.abc` format, and import it into SceneKit. These
    can be opened in **Preview** so that you can take a look and check the file before
    importing it to the SceneKit project. Apart from the geometries; the animations,
    textures, lights/camera, and so on that you added to the imported scene will also
    be imported. You can also add 3D text and shapes to your game using SceneKit.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加预定义的对象，例如盒子、球体、环面和平面，并为其添加纹理；或者导入在 3D 程序中创建的 COLLADA 文件或 Alembic 文件，将其导出为
    `.dae` 或 `.abc` 格式，并将其导入到 SceneKit 中。这些可以在 **预览** 中打开，这样你可以在将其导入 SceneKit 项目之前查看和检查文件。除了几何形状之外，你添加到导入场景中的动画、纹理、灯光/相机等也会被导入。你还可以使用
    SceneKit 添加 3D 文本和形状到你的游戏中。
- en: If you assign a texture to the object in the `COLLADA` file, the texture maps
    need to be imported along with the file. You can add textures to primitive shapes,
    3D text, and complex shapes. You will also be able to modify the 3D text and shapes
    by extruding them to give them depth, or chamfering the corners, in code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将纹理分配给 `COLLADA` 文件中的对象，则需要将纹理映射与文件一起导入。你可以将纹理添加到原始形状、3D 文本和复杂形状中。你还可以通过在代码中将
    3D 文本和形状拉伸以赋予它们深度，或者通过倒角角落来修改它们。
- en: Custom objects and shapes can also be created by providing the position, texture,
    coordinates, and color for each of the vertices used to create the shape. You
    have full freedom over the polygon count; if you want smoother models, you can
    divide the polygons to get a smoother result—all through code.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供用于创建形状的每个顶点的位置、纹理、坐标和颜色，也可以创建自定义对象和形状。你对多边形数量有完全的自由；如果你想得到更平滑的模型，你可以将多边形分割以获得更平滑的结果——这一切都是通过代码实现的。
- en: SceneKit, along with a camera, also provides different light types such as **Ambient**,
    **Omni**, **Direction**, and **Spot light**. These can be attached to the nodes,
    making them easy to place and move around.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: There is also an editor that can be used to view your scene and all the objects
    added to the scene. You will also be able to look at the properties of the individual
    objects and modify them if you wish, after importing them to the scene.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The game assets will be managed by the Asset Catalogue, which will optimize
    the assets at build time, similar to the texture atlas creator in SpriteKit.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Similar to SpriteKit, SceneKit has actions that can be performed on objects
    to animate them. It also has a physics engine for physics simulations and collision
    detection. Like the physics engine in SpriteKit, you can add joints, constraints,
    and inverse kinematics to your objects and scenes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the default SceneKit project
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to how you created a SpriteKit project, create a SceneKit project. The
    only difference when creating the project is that while selecting **Game Technology**
    in the drop-down list, select **SceneKit** instead of **SpriteKit**. Name the
    project `SceneKitTest`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Once the project is created, double-click on the `SceneKitTest.xcodeproj` file.
    Once it opens, you should see a project structure similar to what you saw in the
    case of SpriteKit.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: As we did earlier, you can click on the play button on the top of the window
    and select the simulator of your choice. Once the simulator loads, you should
    see a window similar to what is shown in the following screenshot. I have once
    again changed the view to landscape for the sake of convenience.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![Looking at the default SceneKit project](img/B04014_01_22.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: At the bottom, you get more debug information than in SpriteKit. In the bottom-left
    corner, you have the FPS counter, which is the same as in SpriteKit. As expected,
    the FPS will be less than SpriteKit projects. This is because we are now looking
    at 3D models, which include a higher number of vertices and polygons for the processor
    to calculate, causing the FPS to dip. This is only on the simulator; on the actual
    device, the FPS will be at 60.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: In the bottom-right corner of the screen, the diamond shows the number of draw
    calls, which is similar to the nodes in SpriteKit. Since there is only one object
    on the screen—the fighter jet—you get one draw call. The more the objects added,
    the higher the draw call.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The triangle tells the number of polygons that form the object. The star, or
    the asterisk, shows the number of vertices that are present in the object. You
    can click on the **+** sign on the left to get additional information such as
    **Animations**, **Physics**, **Constraints**, **Particles**, **Delegate**, **Rendering**,
    **GL Flush**, and **2D**.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 3D objects are made of vertices, and these vertices are joined by lines forming
    triangular or rectangular shapes called polygons. These in turn form the mesh,
    giving a shape to the object, the fighter jet in this case. Then a 2D image is
    painted over the shape, giving it the look of a fighter jet. In the left panel,
    you can open `art.acnassets`. This is where all the art assets of the game will
    be stored. Select it to look at the mesh and the image, or texture files that
    get placed on the mesh.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 3D物体由顶点组成，这些顶点通过线条连接形成三角形或矩形形状，称为多边形。这些多边形进而形成网格，给物体赋予形状，在这个例子中是战斗机。然后，在形状上绘制2D图像，使其看起来像战斗机。在左侧面板中，您可以打开`art.acnassets`。这是游戏所有艺术资源将被存储的地方。选择它来查看网格和图像，或者放置在网格上的纹理文件。
- en: Understanding 3D objects
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解3D物体
- en: I have taken the `ship.dae` COLLADA file and imported it into a 3D program to
    show the mesh of the jet object. COLLADA files can be imported into any of the
    popular 3D software packages, such as 3DSMax, Maya, or Blender.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将`ship.dae` COLLADA文件导入到3D程序中，以展示喷气物体的网格。COLLADA文件可以导入到任何流行的3D软件包中，例如3DSMax、Maya或Blender。
- en: In the SceneKit project, we saw the object in all its textured glory. The scene
    had the textured object, along with the camera, and lights casting shadows. In
    the following figure, you can see the wire mesh view of the actual mesh of the
    object. This has been provided so that you can understand what a 3D polygon object
    is and how vertices make up the polygon to create a mesh of a 3D object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在SceneKit项目中，我们看到了物体在所有纹理的荣耀中。场景中有纹理化的物体，以及相机和投射阴影的光源。在下面的图中，您可以看到物体的实际网格的线框视图。这已被提供，以便您了解3D多边形物体是什么，以及顶点如何组成多边形以创建3D物体的网格。
- en: '![Understanding 3D objects](img/B04014_01_23.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![理解3D物体](img/B04014_01_23.jpg)'
- en: The green lines are the lines that connect points to form the polygon surface
    of the object. You can see how these vertices are used to form triangles or polygons
    to create the desired shape, such as the wings, the cockpit, and the fuselage
    of the plane. The object is completely hollow. A texture is then pasted on it
    so that it looks as if it has had a fresh coat of paint put on it. You can also
    specify a material that can reflect light, making it shiny and reflective.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色线条是连接点到形成物体多边形表面的线条。您可以看到这些顶点是如何用来形成三角形或多边形以创建所需形状的，例如飞机的机翼、驾驶舱和机身。物体是完全空心的。然后在其上粘贴纹理，使其看起来像刚刚涂上了一层新漆。您还可以指定一个可以反射光的材料，使其看起来闪亮和反光。
- en: In SceneKit, you can import a 3D scene created in a 3D package, with the texture,
    lighting, animations, and camera completely intact. You can create it in your
    favorite 3D package and export it in the `.dae` format. You will be able to import
    it into SceneKit, like the jet.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在SceneKit中，您可以导入在3D软件包中创建的3D场景，包括纹理、光照、动画和相机，这些都将保持完整。您可以在您喜欢的3D软件包中创建它，并以`.dae`格式导出。您将能够将其导入到SceneKit中，就像喷气物体一样。
- en: If your game is very simple and doesn't require such complex shapes, then you
    can create a box, a sphere, and other primitive objects and shapes in SceneKit
    itself through code, and give them whatever color that you wish. However, you
    will still need to create a camera and lights so that the object will be visible
    in the scene.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的游戏非常简单，不需要这样复杂的形状，那么您可以通过代码在SceneKit中本身创建一个盒子、球体和其他原始对象和形状，并给它们任何您想要的颜色。然而，您仍然需要创建一个相机和光源，以便物体在场景中可见。
- en: Going back to the simulator, you can click and drag the viewport to rotate the
    object around its center to take a better look at the object. You can also double-click
    on the screen to reset the view to its initial state. Other than creating a 3D
    scene, SceneKit also allows the touch interface so that the player can interact
    with the object. We will look at this in detail when we cover SceneKit in depth
    later in this book.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到模拟器，您可以通过点击并拖动视口来旋转物体，以便更好地观察物体。您也可以在屏幕上双击以将视图重置到初始状态。除了创建3D场景外，SceneKit还允许触摸界面，以便玩家可以与物体交互。我们将在本书稍后深入探讨SceneKit时详细讨论这一点。
- en: 2D and 3D coordinate systems
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D和3D坐标系
- en: In the case of 2D game development, we have only two coordinate systems to worry
    about. The first is the screen coordinate system, and the other is the object
    coordinate system.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在2D游戏开发的情况下，我们只需要关注两个坐标系。第一个是屏幕坐标系，另一个是对象坐标系。
- en: In 2D, whenever we place an object on the screen, we always wonder how far the
    object is from the bottom-left corner of the screen. This is because the bottom-left
    corner of the screen, and not the center of screen, is the origin. Therefore,
    if you place a sprite without changing its position, it will be created in the
    bottom-left part of the screen. The screen origin or the `(0, 0)` position is
    in the bottom-left corner of the screen. If you want to place the sprite in the
    center of the screen, you need to add half the width and height to the position
    property, since everything is in respect to the bottom-left corner of the screen.
    This is called the Screen Coordinate system.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在2D中，无论何时我们在屏幕上放置一个对象，我们总是想知道对象距离屏幕左下角有多远。这是因为屏幕的左下角，而不是屏幕中心，是原点。因此，如果你不改变其位置放置一个精灵，它将在屏幕的左下角创建。屏幕原点或`(0,
    0)`位置在屏幕的左下角。如果你想将精灵放置在屏幕中心，你需要将宽度和高度的一半加到位置属性上，因为所有一切都是相对于屏幕的左下角。这被称为屏幕坐标系。
- en: The object coordinate system refers to the sprite itself. The center of the
    sprite is at the center of the object, unlike the screen, which has its origin
    at the bottom-left corner. The center of the sprite is called the **anchor point**.
    When you rotate a sprite, it will rotate about its center because its origin is
    at its center. You can change the origin of the sprite by accessing its **Anchor
    Point** property.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对象坐标系指的是精灵本身。精灵的中心位于对象的中心，与屏幕不同，屏幕的原点在左下角。精灵的中心被称为**锚点**。当你旋转一个精灵时，它将围绕其中心旋转，因为其原点在其中心。你可以通过访问其**锚点**属性来改变精灵的原点。
- en: '![2D and 3D coordinate systems](img/B04014_01_24.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![2D和3D坐标系统](img/B04014_01_24.jpg)'
- en: In 3D game development, there are a couple of more coordinate systems. So, there
    are the World, Object, View, and Screen coordinate systems. Other than being referred
    to as Coordinate Systems, they are also referred to as a space.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D游戏开发中，存在几个坐标系统。因此，有世界、对象、视图和屏幕坐标系统。除了被称为坐标系统外，它们也被称作空间。
- en: 'In the case of 2D, the World Coordinate system is the same as the Screen Coordinate
    System, but in 3D that is not the case. In the following diagram, imagine you
    are seeing the jet on your device:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在2D的情况下，世界坐标系与屏幕坐标系相同，但在3D中并非如此。在下面的图中，想象你正在你的设备上看到喷气式飞机：
- en: '![2D and 3D coordinate systems](img/B04014_01_25.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![2D和3D坐标系统](img/B04014_01_25.jpg)'
- en: The World space's origin is where the red, green, and yellow arrows originate
    from. The red arrow represents the positive *x* axis, green is the positive *y*
    axis, and yellow is the positive *z* axis. The World space's origin is at `0,
    0, 0`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 世界空间的起点是红色、绿色和黄色箭头的起源处。红色箭头代表正*x*轴，绿色是正*y*轴，黄色是正*z*轴。世界空间的起点是`0, 0, 0`。
- en: The jet is placed within the World space. As with the sprite, the Object Coordinate
    System is at the center of the object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 喷气式飞机放置在世界空间内。与精灵一样，对象坐标系位于对象的中心。
- en: The red box represents a camera looking towards the jet plane. The place where
    the camera is positioned is called a view, eye, or camera coordinate system. The
    view frustum represents the view limits of the camera. Anything placed outside
    this area won't be rendered by the camera. In graphics programming, this is called
    **clipping**.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 红色方框代表一个朝向喷气式飞机的相机。相机所在的位置被称为视图、眼睛或相机坐标系统。视图视锥体代表相机的视图限制。任何放置在此区域之外的对象都不会被相机渲染。在图形编程中，这被称为**裁剪**。
- en: Finally, whatever is seen by the camera has to be projected onto the screen
    of the device. This is called the Screen Coordinate System.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，相机所看到的一切都必须投影到设备的屏幕上。这被称为屏幕坐标系。
- en: The basics of SceneKit
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SceneKit的基础
- en: Let's take a brief look at how the scene was created in this project. Open the
    `GameViewController.swift` file. To create a scene in SceneKit, you have a separate
    scene creator, here is it called `SCNScene`, to create 3D scenes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地看看在这个项目中场景是如何创建的。打开`GameViewController.swift`文件。在SceneKit中创建场景，你有一个独立的场景创建器，这里称为`SCNScene`，用于创建3D场景。
- en: 'The `GameViewController.swift` file is responsible for the views. Any app that
    is created must contain at least one view so that it can be displayed on the screen.
    Whenever you open a new application, a view is created. Once the view is created,
    the first function that gets called is the `viewDidLoad` function, which starts
    executing whatever code is written in it:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameViewController.swift`文件负责视图。任何创建的应用都必须包含至少一个视图，以便可以在屏幕上显示。每次打开新的应用程序时，都会创建一个视图。一旦视图创建，第一个被调用的函数就是`viewDidLoad`函数，它开始执行其中编写的任何代码：'
- en: '![The basics of SceneKit](img/B04014_01_26.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![SceneKit的基本概念](img/B04014_01_26.jpg)'
- en: We create a new scene of the `SCNScene` type and load the `ship.dae` object.
    There's no need to load the material for the plane separately; it will automatically
    be assigned to the plane. As every scene first needs a camera, we create a new
    camera node and add it to the scene. Then the camera is positioned in the 3D space.
    So unlike SpriteKit, in which positions are specified in *x* and *y* coordinates,
    SceneKit needs its coordinates to be defined in terms of *x*, *y*, and *z*.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的`SCNScene`类型的场景，并加载了`ship.dae`对象。不需要单独加载飞机的材料；它将自动分配给飞机。由于每个场景首先需要一个相机，我们创建了一个新的相机节点并将其添加到场景中。然后，相机被定位在3D空间中。所以与SpriteKit不同，在SpriteKit中位置是通过*x*和*y*坐标指定的，SceneKit需要其坐标以*x*、*y*和*z*来定义。
- en: The origin is at the center of the scene. In one of the previous screenshots
    (the one which shows the world space), the red arrow shows the positive *x* axis,
    the green arrow denotes the positive *y* axis, and the yellow arrow shows the
    positive *z* axis. So, the camera—denoted by the red cube—is placed 15 pixels
    away from the object in the positive *z* direction. The jet object is placed at
    the origin.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 原点位于场景中心。在之前的某个截图（显示世界空间的截图）中，红色箭头表示正*x*轴，绿色箭头表示正*y*轴，黄色箭头表示正*z*轴。因此，相机（用红色立方体表示）放置在对象正*z*方向上15像素处。喷气式飞机对象放置在原点。
- en: Next, we create two light sources. First we create an omni light, and then we
    create an ambient light to illuminate the scene. If you don't add any light sources,
    nothing will be visible in the scene. You can try commenting out the lines, but
    due to this being where the light sources are added to the scene; you will see
    a black screen. The jet is still there, but due to the absence of light, you are
    just not able to see it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建两个光源。首先创建一个泛光灯，然后创建一个环境光来照亮场景。如果您不添加任何光源，场景中将看不到任何东西。您可以尝试注释掉这些行，但由于这是添加光源到场景的地方；您将看到一个黑色屏幕。喷气式飞机仍然在那里，但由于缺少光源，您无法看到它。
- en: Then we get the ship object from the scene and apply the rotation action to
    it, similarly to how it was done in SpriteKit. It is just that now, it is called
    `SCNAction` instead of `SKAction`. Also, you are providing the angle in all three
    axes, keeping the value for the *x* and *z* axes zero, and rotating the object
    in the *y* axis every second.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从场景中获取飞船对象并对其应用旋转动作，类似于在SpriteKit中执行的方式。只是现在，它被称为`SCNAction`而不是`SKAction`。此外，你在所有三个轴上提供了角度，*x*和*z*轴的值为零，并在每秒内绕*y*轴旋转对象。
- en: Then, a new `sceneView` variable is created, assigned with the current view
    and then, the current scene is assigned to the scene of `sceneView`. Then `sceneView`
    is allowed to control the camera, and show the debug information, such as FPS.
    You should also set the background color to `black`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建了一个新的`sceneView`变量，将其分配给当前视图，然后将当前场景分配给`sceneView`的场景。然后允许`sceneView`控制相机并显示调试信息，例如FPS。您还应该将背景颜色设置为`black`。
- en: A new function is created, called `handleTap`, where resetting of the view on
    double tapping is handled.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个新函数，称为`handleTap`，其中处理了双击重置视图。
- en: 'The `GameViewControllerclass` class has other functions such as `shouldAutoRotate`,
    `prefersStatusBarHidden`, `supportInterfaceOrientation`, and `didReceieveMemoryWarning`.
    Let us look at each of them in detail:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`GameViewControllerclass`类有其他函数，如`shouldAutoRotate`、`prefersStatusBarHidden`、`supportInterfaceOrientation`和`didReceieveMemoryWarning`。让我们详细看看每个函数：'
- en: '`shouldAutoRotate`: This function is set to `true` or `false` depending on
    whether you want to rotate the view if the device is flipped. If it is `true`,
    the view will be rotated.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shouldAutoRotate`：此函数设置为`true`或`false`，取决于您是否希望在设备翻转时旋转视图。如果是`true`，视图将被旋转。'
- en: '`prefersStatusBarHidden`: Enable this function if you want the status bar hidden.
    If you want it to be shown for some reason, you should disable this option.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefersStatusBarHidden`: 如果您想隐藏状态栏，请启用此功能。如果出于某种原因需要显示状态栏，则应禁用此选项。'
- en: '`supportInterfaceOrientation`: The device will automatically check which types
    of orientation are allowed. In this case, if it is an iPhone, it accepts all but
    the upside down orientation.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supportInterfaceOrientation`: 设备将自动检查允许哪些类型的方向。在这种情况下，如果是 iPhone，则接受除了倒置方向之外的所有方向。'
- en: '`didReceiveMemoryWarning`: If there are images and other data that you haven''t
    released, and if they are putting stress on the memory, this function will automatically
    issue a warning saying that there is not enough memory and will close the app.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`didReceiveMemoryWarning`: 如果有您尚未释放的图像和其他数据，并且如果它们正在对内存造成压力，此函数将自动发出警告，表示内存不足，并将关闭应用程序。'
- en: All of this would have been fairly complex, but don't worry. We will break this
    down to its basics when we cover SceneKit later in the book.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都会相当复杂，但请放心。当我们在本书中稍后介绍 SceneKit 时，我们将将其分解为基本原理。
- en: Introducing Metal
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Metal
- en: Metal is Apple's new low-level graphics API. With it, you can communicate with
    the GPU directly and conduct graphics, as well as other computational operations.
    Using Metal, you can create 2D and 3D apps or games by developing your own custom
    framework from the ground up, without relying on pre-existing frameworks such
    as SpriteKit and SceneKit.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Metal 是苹果公司的新低级图形 API。通过它，您可以直接与 GPU 通信并执行图形以及其他计算操作。使用 Metal，您可以从头开发自己的自定义框架，创建
    2D 和 3D 应用或游戏，而无需依赖现有的框架，如 SpriteKit 和 SceneKit。
- en: Metal, like any other graphics API, has a graphics pipeline with programmable
    shaders. You are also able to allocate the memory, including buffer and texture
    objects. Metal also has it own shader language for compiling and applying the
    shaders.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他图形 API 一样，Metal 有一个具有可编程着色器的图形管道。您还可以分配内存，包括缓冲区和纹理对象。Metal 还有自己的着色器语言，用于编译和应用着色器。
- en: But why do we need Metal when there is SceneKit? In SceneKit, SpriteKit, or
    any other game development framework, Metal first interacts with a graphics library,
    such as OpenGL ES, which in turn transfers the information to the GPU. Well! With
    Metal, you have the absolute power to directly communicate with the GPU and create
    your own framework as per your desire so that you can create a more optimized
    game.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们需要 Metal，当 SceneKit 和 SpriteKit 等其他游戏开发框架已经存在时？在 SceneKit、SpriteKit 或任何其他游戏开发框架中，Metal
    首先与图形库（如 OpenGL ES）交互，然后该库将信息传递到 GPU。哇！使用 Metal，您拥有直接与 GPU 通信并创建自己框架的绝对权力，这样您就可以创建一个更优化的游戏。
- en: 'A framework always sits above OpenGL or Metal, then communicates with the graphics
    processor, as shown in the following diagram. With Metal, you can eliminate one
    layer and talk directly with the GPU:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 框架始终位于 OpenGL 或 Metal 之上，然后与图形处理器通信，如下面的图所示。使用 Metal，您可以消除一层，直接与 GPU 通信：
- en: '![Introducing Metal](img/B04014_01_27.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Metal](img/B04014_01_27.jpg)'
- en: You also have the freedom to create your own tools as per your own specifications,
    from the ground up. Further, you can access the memory to get the maximum juice
    out of the processor.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以根据自己的需求从头开始创建自己的工具。此外，您还可以访问内存以获取处理器最大的性能。
- en: However, you might still say; "Well, OpenGL ES also provides all of this." That
    is true, but OpenGL ES is cross-platform and will work on other devices running
    many other operating systems. So, you can imagine the amount of extra material
    in OpenGL ES that is there to support all the devices and operating systems. This
    is where the difference between Metal and OpenGL ES lies.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可能会说：“哦，OpenGL ES 也提供了所有这些功能。”这是真的，但 OpenGL ES 是跨平台的，将在运行许多其他操作系统的其他设备上工作。因此，您可以想象
    OpenGL ES 中有多少额外的材料是为了支持所有设备和操作系统。这就是 Metal 和 OpenGL ES 之间的区别所在。
- en: Metal is very specifically written for the Apple range of devices and OS. In
    fact, at the time of writing this book, it is highly constrained to what Apple
    devices and OS are required to run it. You need an Apple device that has an A7
    or A8 chip running iOS 8 to run games made with Metal. Moreover, if you want to
    test the game during development, you can't run it on a simulator, as it is not
    supported. You will require an actual device to run it, so you will require at
    least an iPad Mini 2, iPad Air, or iPhone 5S just to test your game.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Metal非常具体地针对苹果设备系列和操作系统编写。实际上，在撰写本书时，它高度依赖于苹果设备和操作系统。您需要一个配备A7或A8芯片并运行iOS 8的苹果设备来运行用Metal制作的游戏。此外，如果您想在开发过程中测试游戏，您不能在模拟器上运行它，因为它不受支持。您需要一个实际设备来运行它，因此您至少需要一个iPad
    Mini 2、iPad Air或iPhone 5S来测试您的游戏。
- en: With Metal, developers are seeing at least a 30 percent increase in performance
    as compared to the same game made with OpenGL ES running on the current Apple
    devices. So, if you are planning to create a 3D game just for the latest range
    of devices of Apple, it is highly recommended that you start creating your games
    using Metal.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Metal，开发者们发现与在当前苹果设备上运行的相同OpenGL ES游戏相比，性能至少提高了30%。因此，如果您计划只为最新的苹果设备创建3D游戏，强烈建议您开始使用Metal创建您的游戏。
- en: You can create a Metal project and build it on your device to see the output.
    Since a lot of concepts will have to be covered to even start explaining all of
    the code on the screen—and since we will be covering these in detail later in
    the book—it is better that we go through the code later, after we understand the
    meaning of terms such as vertex buffer, frame buffer, and index buffer, and the
    difference between each of them.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在设备上创建一个Metal项目并构建它来查看输出。由于需要涵盖许多概念才能开始解释屏幕上所有的代码——并且我们将在本书的后面详细讲解这些内容——因此我们最好在理解了诸如顶点缓冲区、帧缓冲区和索引缓冲区等术语的含义以及它们之间的区别之后，再回头查看代码。
- en: 'If you have a device connected and have downloaded the developer license from
    the Apple Developer portal, you can click on the play button to build the app.
    Once the project is built, you will see the following screen:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的设备已连接并且已从苹果开发者门户下载了开发者许可证，您可以点击播放按钮来构建应用程序。一旦项目构建完成，您将看到以下屏幕：
- en: '![Introducing Metal](img/B04014_01_28.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Metal](img/B04014_01_28.jpg)'
- en: To better understand Metal or OpenGL and appreciate the effort it actually takes
    to render even a triangle on the screen, you will need an understanding of what
    is called a **graphics pipeline**.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Metal或OpenGL，并欣赏渲染屏幕上甚至一个三角形所付出的努力，您需要了解所谓的**图形管线**。
- en: The graphics pipeline
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形管线
- en: If we look at any game development framework, we will realize that there are
    at least two functions that are present in almost every class. The first function
    is `init` or the `start` function, and the second function is the `update` function.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看任何游戏开发框架，我们会意识到几乎每个类中至少都有两个函数。第一个函数是`init`或`start`函数，第二个函数是`update`函数。
- en: The `init` function or the start function is called once, at the beginning,
    to initialize all the variables of the class. On the other hand, the `update`
    function is usually called 60 times per second to update the position of the objects
    or detect collisions between objects.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`init`函数或启动函数在开始时只调用一次，用于初始化类的所有变量。另一方面，`update`函数通常每秒调用60次，用于更新对象的位置或检测对象之间的碰撞。'
- en: Apart from initializing and updating the position, there is also another function
    that needs to be called along with the `update` function. Like a wiper on your
    windscreen, it needs to erase and redraw the content on the screen. This is called
    the `draw` function. In some frameworks, it is the third function, called `draw()`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 除了初始化和更新位置之外，还需要与`update`函数一起调用的另一个函数。就像您挡风玻璃上的雨刷一样，它需要擦除并重新绘制屏幕上的内容。这个函数被称为`draw`函数。在一些框架中，它是第三个函数，称为`draw()`。
- en: Every time this function is called, it is termed as a *draw call*. In SceneKit,
    we saw this word. But where is this function in SceneKit or SpriteKit? In both
    of these frameworks, similar to Cocos2d and ActionScript, there is something called
    a display list. Whenever you add an object using `addChild`, that object gets
    added to the display list.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用此函数时，都称为一次*绘制调用*。在SceneKit中，我们看到了这个单词。但在SceneKit或SpriteKit中这个函数在哪里？在这两个框架中，类似于Cocos2d和ActionScript，有一个称为显示列表的东西。每次使用`addChild`添加对象时，该对象都会被添加到显示列表中。
- en: A display list is like any array in which you can add or remove objects. The
    display list loops through all the objects that are added to it, and then draws
    all objects on the screen.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 显示列表就像任何数组一样，你可以添加或删除对象。显示列表遍历添加到其中的所有对象，然后在屏幕上绘制所有对象。
- en: So, you don't have to worry about calling the `draw` function; you just add
    the object to be drawn by calling `addChild`. Otherwise—that is, if you don't
    want the object to be rendered—you can call the `removeChild` function to remove
    that object from the display list so that it won't be drawn to the screen.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你不必担心调用 `draw` 函数；你只需通过调用 `addChild` 添加要绘制的对象。否则——也就是说，如果你不想渲染对象——你可以调用 `removeChild`
    函数从显示列表中移除该对象，这样它就不会被绘制到屏幕上。
- en: The process of displaying things on the screen is known as a graphics pipeline.
    This is a step-by-step process of converting the vertex data and texture data
    that is provided to the GPU so that an object can be displayed and manipulated
    on the screen. Let's look at this process in detail.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上显示事物的过程被称为图形管线。这是一个逐步的过程，将提供给 GPU 的顶点数据和纹理数据转换，以便在屏幕上显示和操作对象。让我们详细看看这个过程。
- en: 'Shown here are the stages in a render pipeline:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了渲染管线中的阶段：
- en: '![The graphics pipeline](img/B04014_01_29.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图形管线](img/B04014_01_29.jpg)'
- en: 'Let us look at each stage in detail:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每个阶段：
- en: '**Vertices**: You can provide either individual vertices with coordinates of
    each of the points, or the mesh itself. In the case of the jet, we provided the
    `.dae` file. The vertex information provided will contain the *x*, *y*, and *z*
    positions in 3D space. Apart from just position information, some of them may
    also contain information such as color, surface normal, and texture coordinate
    information. All of this information is stored in a sequence of memory space called
    a buffer, similar to an array.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顶点**：你可以提供具有每个点坐标的单独顶点，或者整个网格。在喷气式飞机的情况下，我们提供了 `.dae` 文件。提供的顶点信息将包含 3D 空间中的
    *x*、*y* 和 *z* 位置。除了位置信息之外，其中一些还可能包含颜色、表面法线和纹理坐标信息。所有这些信息都存储在称为缓冲区的内存空间序列中，类似于数组。'
- en: Pieces of vertex information, such as position and color, are fed to the GPU
    as attributes. Attributes can be imagined as a set of properties of a particular
    vertex. So, there are position attributes, color attributes, and so on. All of
    these attributes are provided to the GPU to start generating the object.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 顶点信息片段，如位置和颜色，作为属性被馈送到 GPU。属性可以想象为特定顶点的一组属性。因此，有位置属性、颜色属性等等。所有这些属性都提供给 GPU 以开始生成对象。
- en: '**Generating primitives**: The vertices position provided in the position buffer
    are now connected to form small triangles, which in turn form the mesh of the
    object. These triangles are formed based on the sequential vertex information
    provided as an attribute.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成原语**：位置缓冲区中提供的顶点位置现在被连接起来形成小三角形，这些三角形进而形成物体的网格。这些三角形是基于作为属性提供的顺序顶点信息形成的。'
- en: '**Vertex/Geometry Shader**: The information is then passed to the vertex shader.
    Vertex shaders are programmable by using a shader language. The language is similar
    to C. Using this language, we can change the position, causing the object to move,
    scale, and rotate, just as our `update` function does, within the game loop.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顶点/几何着色器**：然后信息被传递到顶点着色器。顶点着色器可以通过着色器语言进行编程。这种语言类似于 C 语言。使用这种语言，我们可以在游戏循环中改变位置，使对象移动、缩放和旋转，就像我们的
    `update` 函数一样。'
- en: '**Rasterization**: After knowing which vertex falls where, based on the locations
    of the polygons created by the vertices, the GPU starts drawing the pixels between
    the points.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光栅化**：在知道哪些顶点位于何处之后，基于由顶点创建的多边形的定位，GPU 开始绘制点之间的像素。'
- en: '**Pixel/Fragment Shader**: As in the vertex shader, where you were able to
    do vertex modification, pixel shaders enable you to perform pixel-based operations.
    So, since this is also a shader, you know that it is programmable as well. Using
    pixel shaders, you can create effects such as changing the color and transparency
    of texture provided.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像素/片段着色器**：与顶点着色器类似，在那里你可以进行顶点修改，像素着色器使你能够执行基于像素的操作。所以，既然这也是一个着色器，你知道它也是可编程的。使用像素着色器，你可以创建诸如改变纹理的颜色和透明度等效果。'
- en: '**Testing and Mixing**: This is the stage where the GPU will check whether
    the pixel should be actually displayed on the screen. Suppose there is an object
    in front of the current object, and the current object should be only partially
    visible. The GPU will put only those pixels on the screen that should actually
    be visible, and will disregard the overlapping pixels.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试和混合**：这是GPU检查像素是否应该实际显示在屏幕上的阶段。假设当前物体前方有一个物体，当前物体应该只部分可见。GPU只会将那些应该实际可见的像素放置在屏幕上，并忽略重叠的像素。'
- en: '**Frame Buffer**: Buffer? So is this a memory space again? Yes. Before the
    image gets finally displayed on the screen, the whole image is first stored in
    a memory space called the frame buffer. When all of the computation is done and
    the final image is ready to be displayed on the screen, the data from the frame
    buffer is taken and then displayed on the screen.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帧缓冲区**：缓冲区？这又是一个内存空间吗？是的。在图像最终显示在屏幕上之前，整个图像首先存储在一个称为帧缓冲区的内存空间中。当所有计算完成，最终图像准备好在屏幕上显示时，从帧缓冲区取出的数据然后显示在屏幕上。'
- en: If you don't understand all of this, it is completely fine. When we take a look
    at creating objects and displaying them on the screen in Metal, we will be walking
    through these steps practically, so don't worry about them.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有完全理解这些内容，那完全没问题。当我们查看在Metal中创建对象并在屏幕上显示它们时，我们将实际走过这些步骤，所以不用担心。
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: There are a lot of basics and features of Xcode 6, and we covered them in this
    chapter. You saw how to become an Apple developer so that you can test the games
    that you are going to build on the device. Later, you will be uploading a game
    to the App Store.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 6有很多基础功能和特性，我们在这章中介绍了它们。你看到了如何成为苹果开发者，以便你可以在设备上测试你将要构建的游戏。稍后，你将把游戏上传到App
    Store。
- en: We looked at how to create a playground file and project folders for different
    game technologies such as SceneKit, SpriteKit, and Metal, which we will be using
    in the forthcoming chapters. Finally, we looked at the render pipeline that is
    widely used to render stuff on the screen in any device.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何为不同的游戏技术（如SceneKit、SpriteKit和Metal）创建playground文件和项目文件夹，这些技术我们将在接下来的章节中使用。最后，我们探讨了广泛用于在任意设备上渲染屏幕上内容的渲染管线。
- en: In the next chapter, we will take a look at the interface of Xcode and the tools
    and features it provides.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Xcode的界面以及它提供的工具和功能。
