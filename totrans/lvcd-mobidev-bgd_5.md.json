["```java\npixelcolor = bitmapvariable.getPixel(19,14);\n```", "```java\npixelcolor = imagevariable.getPixel(20,15)\n```", "```java\nput getPixel(\"\"test image\"\",20,15) into pixelcolor\n\nfunction getPixel pImage,pX,pY\n  put the imageData of image pImage into tImageData\n  put the width of image pImage into tWidth\n  put ((pY-1)*tWidth + (pX-1)) * 4 into tStartChar\n  put charToNum(char tStartChar+2 of tImageData) into tRed\n  put charToNum(char tStartChar+3 of tImageData) into tGreen\n  put charToNum(char tStartChar+4 of tImageData) into tBlue\n  return tRed*65536+tGreen*256+tBlue\nend getPixel\n```", "```java\nput the maskData of image \"test image\" into tMaskData\nput the alphaData of image \"test image\" into tAlphaData\n```", "```java\n    set the filled of graphic 1 to true\n    ```", "```java\n    on mouseMove pMx,pMy\n      --put getPixel(the short name of me,pMx - the left of me,pMy - the top of me) into tPixelColor\n      --set the backgroundColor of graphic \"swatch\" to tPixelColor\n    end mouseMove\n    ```", "```java\n    function getPixel pImage,pX,pY\n      put the imageData of image pImage into tImageData\n      put the width of image pImage into tWidth\n      put ((pY-1)*tWidth + (pX-1)) * 4 into tStartChar\n      put charToNum(char tStartChar+2 of tImageData) into tRed\n      put charToNum(char tStartChar+3 of tImageData) into tGreen\n      put charToNum(char tStartChar+4 of tImageData) into tBlue\n      return tRed,tGreen,tBlue\n    end getPixel\n    ```", "```java\n    set the screengamma to 2.23\n    ```", "```java\n    on mouseMove pMx,pMy\n      put getPixel(the short name of me,pMx - the left of me,pMy - the top of me) into tStateColor\n      set the itemdelimiter to comma\n      put item 1 of tStateColor - 100 into tLine\n      put line tLine of field \"states\" into field \"state\"\n    end mouseMove\n    ```", "```java\n    import snapshot from rect the rect of this stack\n    ```", "```java\n    global gBackdropMaskData,gMaskWidth,gSpeeds,gMovingCars,gMaskWidth\n    ```", "```java\n    on startStopCars\n      if gMovingCars is true then\n        put false into gMovingCars\n      else\n        put the maskData of image \"backdrop\" into gBackdropMaskData\n        put the width of image \"backdrop\" into gMaskWidth\n        setSpeeds\n        put true into gMovingCars\n        send moveCars to this card in 2 ticks\n      end if\n    end startStopCars\n    ```", "```java\n    on setSpeeds\n      put empty into gSpeeds\n      repeat with a = 1 to 100\n        put \"car\" & a into carname\n        if there is a image carname then\n          put (random(10)+10)/10 into item 1 of line a of gSpeeds\n          put 0 into item 2 of line a of gSpeeds\n          set the loc of image carname to 200,200\n        else\n          exit repeat\n        end if\n      end repeat\n    end setSpeeds\n    ```", "```java\n    function hitBarrier pX,pY\n      put (pY-1)*gMaskWidth + pX into tStartChar\n      put charToNum(char tStartChar of gBackdropMaskData) into tMaskValue\n      if tMaskValue = 255 then return true\n      else return false\n    end hitBarrier\n    ```", "```java\n    on moveCars\n      put the long time\n      lock screen\n      repeat with a = 1 to 100\n        put \"car\" & a into carname\n        put .1 into anglechange\n        if there is a image carname then\n          put 0 into counter\n          repeat while counter < 20\n            add 1 to counter\n            put item 1 of line a of gSpeeds into tCarSpeed\n            put item 2 of line a of gSpeeds into tCarDirection\n            put item 1 of the loc of image carname into tCarX\n            put item 2 of the loc of image carname into tCarY\n            put the round of ((cos(tCarDirection)*tCarSpeed)*20 + tCarX) into tLookAheadX\n            put the round of ((sin(tCarDirection)*tCarSpeed)*20 + tCarY) into tLookAheadY\n            if hitBarrier(tLookAheadX,tLookAheadY) then\n              put tCarDirection + anglechange into item 2 of line a of gSpeeds\n              put anglechange * -1 * ((20 - random(10))/10) into anglechange\n              put max(1,tCarSpeed - .1) into item 1 of line a of gSpeeds\n            else\n              put min(3,tCarSpeed + .05) into item 1 of line a of gSpeeds\n              exit repeat\n            end if\n            end repeat\n          set the loc of image carname to item 1 of the loc of image carname + (tLookAheadX-item 1 of the loc of image carname)/10,item 2 of the loc of image carname + (tLookAheadY-item 2 of the loc of image carname)/10\n          set the angle of image carname to 360 - item 2 of line a of gSpeeds / PI * 180\n        else\n          exit repeat\n        end if\n      end repeat\n      unlock screen\n      if gMovingCars is true then send moveCars to this card in 2 ticks\n    end moveCars\n    ```", "```java\n    on mouseUp\n      startStopCars\n    end mouseUp\n    ```", "```java\n    on mouseUp\n      loadimage \"camera\"\n    end mouseUp\n    Make another button, named \"fromlibrary\" and labeled \"Load a Picture\", with this script:\n    on mouseUp\n      loadimage \"library\"\n    end mouseUp\n    ```", "```java\n    global originalimage, puzzlewidth, puzzleheight, snapdistance, hcount, vcount\n\n    on opencard\n       setvalues\n    end opencard\n\n    on setvalues\n       put 900 into puzzlewidth\n       put 662 into puzzleheight\n       put 50 into snapdistance\n       put 11 into hcount\n       put 8 into vcount\n    end setvalues\n    ```", "```java\n    on loadImage cameratype\n      if puzzlewidth is empty then setvalues\n      if there is an image \"original\" then delete image \"original\"\n      mobilePickPhoto cameratype,puzzlewidth,puzzleheight\n      if the result is empty then\n\n        lock screen\n        set the name of image the number of images to \"original\"\n        set the width of image \"original\" to puzzlewidth\n        set the height of image \"original\" to puzzleheight\n        put the imageData of image \"original\" into originalImage\n        delete image \"original\"\n        --makepuzzle\n        --scatter\n        unlock screen\n      else\n        answer the result\n      end if\n    end loadImage\n    ```", "```java\n    on makepuzzle\n      resetpuzzle\n      put the number of images in group \"pieces\" into imagecount\n      repeat with a = 1 to imagecount\n        makepiece the short name of image a of group \"pieces\"\n      end repeat\n    end makepuzzle\n    ```", "```java\n    on makepiece piecename\n      put the width of image piecename into piecewidth\n      put the height of image piecename into pieceheight\n      put empty into tempimage\n      put the left of image piecename - the left of group \"pieces\" into dx\n      put the top of image piecename - the top of group \"pieces\" into dy\n      repeat with y = 1 to pieceheight\n        put ((y+dy-1) * puzzlewidth + dx)*4 into sourcestart\n        put char sourcestart+1 to sourcestart+piecewidth*4 of originalimage after tempimage\n      end repeat\n      set the imageData of image piecename to tempimage\n    end makepiece\n    ```", "```java\n    on scatter\n      repeat with a = 1 to the number of images in group \"pieces\"\n        set the myloc of image a of group \"pieces\" to the loc of image a of group \"pieces\"\n        put the short name of image a of group \"pieces\" into n\n        if edgepiece(n) then\n          set the loc of image a of group \"pieces\" to 40 + random(400),300 + random(400)\n        else\n          set the loc of image a of group \"pieces\" to 500 + random(500),300 + random(400)\n        end if\n      end repeat\n    end scatter\n    ```", "```java\n    function edgepiece pName\n      return word 2 of pName = 1 or word 3 of pName = 1 or word 2 of pName = hcount or word 3 of pName = vcount\n    end edgepiece\n    ```", "```java\n    on resetpuzzle\n      repeat with a = 1 to the number of images in group \"pieces\"\n        if the myloc of image a of group \"pieces\" is not empty then\n          set the loc of image a of group \"pieces\" to the myloc of image a of group \"pieces\"\n        else\n         set the myloc of image a of group \"pieces\" to the loc of image a of group \"pieces\"\n        end if\n      end repeat\n    end resetpuzzle\n    ```", "```java\n    global snapdistance\n\n    on preopenstack\n      if the platform contains \"iphone\" then iphoneUseDeviceResolution true\n    end preopenstack\n\n    on openstack\n      set the compositorType of this stack to \"Static OpenGL\"\n    end openstack\n    ```", "```java\n    on touchStart touchid\n      put the short name of the target into n\n      if word 1 of n is \"p\" then\n        set the dropShadow of image n to the dropShadow of button \"fromlibrary\"\n        set the relayerGroupedControls to true\n        set the layer of the target to the number of images in group \"pieces\"\n      end if\n    end touchstart\n    ```", "```java\n    on touchMove touchid,touchx,touchy\n      put the short name of the target into n\n      if word 1 of n is \"p\" then\n        set the loc of the target to touchx,touchy\n      end if\n    end touchMove\n    ```", "```java\n    on touchEnd touchid\n      put the short name of the target into n\n      if word 1 of n is \"p\" then\n        checkdistance the short name of the target\n        set the dropShadow of the target to empty\n        checkfinished\n      end if\n    end touchEnd\n    ```", "```java\n    on checkdistance dt\n      if snapdistance is empty then put 100 into snapdistance\n      put distance(item 1 of the loc of image dt - item 1 of the myloc of image dt,item 2 of the loc of image dt - item 2 of the myloc of image dt) into d\n      if d<snapdistance then\n        put max(.1,min(.2,d/200)) into t\n        move image dt to the myloc of image dt in t seconds\n        set the relayerGroupedControls to true\n        set the layer of image dt to 2\n      end if\n    end checkdistance\n\n    function distance dx,dy\n      return sqrt(dx*dx+dy*dy)\n    end distance\n    ```", "```java\n    on checkfinished\n      repeat with a = 1 to the number of images in group \"pieces\"\n        if the myloc of image a of group \"pieces\" <> the loc of image a of group \"pieces\" then exit checkfinished\n      end repeat\n      answer \"You've done it!\"\n    end checkfinished\n    ```"]