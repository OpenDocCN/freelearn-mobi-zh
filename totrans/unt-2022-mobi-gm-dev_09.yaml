- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Keeping Players Involved with Notifications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用通知保持玩家参与
- en: One of the best ways to keep users coming back to your game is through the use
    of push notifications. This allows you to stay in contact with your users even
    when they’re not using your game. Used wisely, this can keep users playing your
    game for a long period of time. Using notifications too often or poorly will cause
    users to mute your app’s notifications, which is not an ideal situation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户不断回到你的游戏中的最佳方式之一是通过使用推送通知。这允许你在用户不使用你的游戏时与他们保持联系。如果使用得当，这可以让用户长时间玩你的游戏。过于频繁或不当使用通知会导致用户静音你的应用通知，这并不是一个理想的情况。
- en: In this chapter, we will explore how to create notifications for both Android
    and iOS devices. We will then learn how to schedule notifications to keep players
    returning to the game later on, as well as ways that we can customize them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何为 Android 和 iOS 设备创建通知。然后我们将学习如何安排通知，以便玩家在之后返回游戏，以及我们可以自定义它们的方式。
- en: 'The chapter is split into a number of topics. It contains a simple, step-by-step
    process from beginning to end. Here is the outline of our tasks:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为多个主题。它包含从开始到结束的简单、分步的过程。以下是我们的任务大纲：
- en: Setting up notifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置通知
- en: Scheduling notifications ahead of time
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前安排通知
- en: Customizing notification presentation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义通知展示
- en: Canceling notifications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消通知
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the *Unity Editor system requirements* section. To deploy your project, you
    will need an Android or iOS device.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用 Unity 2022.1.0b16 和 Unity Hub 3.3.1，但步骤应该在未来版本的编辑器中只需做最小改动即可。如果你想要下载本书中使用的确切版本，并且有新版本发布，你可以访问
    Unity 的下载存档[https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive)。你还可以在
    *Unity 编辑器系统要求* 部分找到 Unity 的系统要求[https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)。为了部署你的项目，你需要一个
    Android 或 iOS 设备。
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到本章中存在的代码文件[https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09)。
- en: Setting up notifications
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置通知
- en: 'Before we can start adding notifications to our project, we will need to add
    a special preview package that Unity makes available. Follow the steps given here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向我们的项目添加通知之前，我们需要添加一个 Unity 提供的特殊预览包。按照这里给出的步骤操作：
- en: From the Unity Editor, go to **Window** | **Package** **Manager**.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Unity 编辑器中，转到 **窗口** | **包管理器**。
- en: 'From there, if the top-left section does not say **Packages: Unity Registry**,
    click on the **In Project** drop-down menu from the toolbar of the **Packages**
    menu and select **Unity Registry**.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，如果左上角部分没有显示 **包：Unity 注册表**，请从 **包** 菜单的工具栏中选择 **项目** 下拉菜单，并选择 **Unity 注册表**。
- en: 'Scroll down the available options until you reach **Mobile Notifications**
    and select it. Once there, click on the arrow to the side of it and select **See
    All Versions** and then select the latest version (in my case, it was **Version
    2.0.2**). From there, click the **Install** button and you’ll see the following
    screenshot:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到可用的选项，直到你到达**移动通知**并选择它。一旦到达那里，点击它旁边的箭头并选择**查看所有版本**，然后选择最新版本（在我的情况下，是**版本
    2.0.2**）。从那里，点击**安装**按钮，你将看到以下截图：
- en: '![Figure 9.1: Installing the Mobile Notifications package](img/B18868_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1：安装移动通知包](img/B18868_09_01.jpg)'
- en: 'Figure 9.1: Installing the Mobile Notifications package'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：安装移动通知包
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It’s important to note that this package requires your game to use Android 5.1
    (API level 22) and iOS 10 or above in order to function properly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，此包要求你的游戏使用 Android 5.1（API 级别 22）和 iOS 10 或更高版本才能正常工作。
- en: We will also be using a cross-platform wrapper, also written by Unity, in order
    to get notifications working quickly and remove the requirement of writing platform-specific
    code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用由 Unity 编写的另一个跨平台包装器，以便快速实现通知功能并消除编写平台特定代码的需求。
- en: After this, open up the **Samples** section and then click on the **Import**
    button next to the **Notification** **Samples** button.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开 **Samples** 部分，然后点击 **Notification Samples** 按钮旁边的 **Import** 按钮。
- en: '![Figure 9.2: Importing the notification samples](img/B18868_09_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2：导入通知样本](img/B18868_09_02.jpg)'
- en: 'Figure 9.2: Importing the notification samples'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：导入通知样本
- en: This project, created by Unity, is used to show how you can use Unity’s Mobile
    Notifications API in some real-world examples. We are using it for the cross-platform
    wrapper, which will allow us to create a notification once, and it will work on
    both Android and iOS without us doing any additional work.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个由 Unity 创建的项目用于展示如何在一些实际示例中使用 Unity 的移动通知 API。我们正在使用它作为跨平台包装器，这将允许我们创建一次通知，它将在
    Android 和 iOS 上工作，而无需我们进行任何额外的工作。
- en: After installing this, you may close the **Package Manager** window. To ensure
    that we can export our project, we need to ensure that our project has the correct
    Minimum API level.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，你可以关闭 **Package Manager** 窗口。为了确保我们可以导出我们的项目，我们需要确保我们的项目具有正确的最小 API 级别。
- en: 'Next, go to the **Project Settings** menu by going to **Edit** | **Project
    Settings**. From there, go to the **Player** options and under **Other Settings**
    scroll down to **Minimum API Level** and verify that it is set to the version
    specified in the Mobile Notifications package (in this case, **Android 5.1 ‘Lollipop’
    (API level 22)**) or higher. Afterward, you can close the **Project** **Settings**
    window:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过访问 **Edit** | **Project Settings** 菜单进入 **Project Settings**。从那里，转到 **Player**
    选项，并在 **Other Settings** 下滚动到 **Minimum API Level** 并确认它设置为与移动通知包中指定的版本（在本例中为
    **Android 5.1 ‘Lollipop’（API 级别 22）**）或更高版本。之后，你可以关闭 **Project Settings** 窗口：
- en: '![Figure 9.3: Ensuring the Minimum API Level is set correctly](img/B18868_09_03.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：确保设置正确的最小 API 级别](img/B18868_09_03.jpg)'
- en: 'Figure 9.3: Ensuring the Minimum API Level is set correctly'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：确保设置正确的最小 API 级别
- en: 'You should see that there are a number of folders that are part of the project.
    The files that we care about are located in the `Assets\Samples\Mobile Notifications\2.0.2\Notification
    Samples\Scripts` folder. See the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到有几个文件夹是项目的一部分。我们关心的文件位于 `Assets\Samples\Mobile Notifications\2.0.2\Notification
    Samples\Scripts` 文件夹中。请看以下截图：
- en: '![Figure 9.4: The Notification Samples Scripts folder](img/B18868_09_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4：通知样本脚本文件夹](img/B18868_09_04.jpg)'
- en: 'Figure 9.4: The Notification Samples Scripts folder'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4：通知样本脚本文件夹
- en: This gives us the code needed – in particular, the `GameNotificationManager`
    class – to be added to our script. At this point, we could move these scripts
    into a subfolder of our `Scripts` folder and delete the other files or keep the
    files where they are.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了所需的代码——特别是 `GameNotificationManager` 类——可以添加到我们的脚本中。在这个时候，我们可以将这些脚本移动到我们的
    `Scripts` 文件夹的子文件夹中，并删除其他文件，或者保持文件在当前位置。
- en: 'To begin displaying notifications on our screen, we first need to add a new
    object to our level that will contain the Game Notifications Manager:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在屏幕上显示通知，我们首先需要在我们的级别中添加一个新的对象，该对象将包含游戏通知管理器：
- en: Open the **MainMenu** scene if it isn’t already open. From there, create a new
    game object by going to **GameObject** | **Create Empty**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果还没有打开，请打开 **MainMenu** 场景。从那里，通过访问 **GameObject** | **Create Empty** 创建一个新的游戏对象。
- en: From the `Notifications Manager` and, for the sake of neatness, reset the **Transform**
    component’s **Position** property by right-clicking on the **Transform** component
    and selecting the **Reset** **Position** option.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Notifications Manager` 中，为了整洁，通过右键点击 **Transform** 组件并选择 **Reset Position**
    选项来重置 **Transform** 组件的 **Position** 属性。
- en: 'Afterward, attach the `gamen`, and then selecting **Game Notifications Manager**
    from the list. It should look something like the following screenshot:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，附加 `gamen`，然后从列表中选择 **Game Notifications Manager**。它应该看起来像以下截图：
- en: '![Figure 9.5: Adding the Game Notifications Manager](img/B18868_09_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5：添加游戏通知管理器](img/B18868_09_05.jpg)'
- en: 'Figure 9.5: Adding the Game Notifications Manager'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：添加游戏通知管理器
- en: After the component has been placed, we can do the setup needed to create our
    first notification. Due to the implementation of the `GameNotificationsManager`
    class, we will need to have another script to send the notifications, which we
    will call `NotificationsController`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件放置完毕后，我们可以进行创建第一个通知所需的设置。由于 `GameNotificationsManager` 类的实现，我们需要另一个脚本来发送通知，我们将称之为
    `NotificationsController`。
- en: From the `Assets/Scripts` folder and create a new C# script called `NotificationsController`.
    Double-click on the newly created file to open up your code editor of choice.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Assets/Scripts` 文件夹创建一个新的 C# 脚本，命名为 `NotificationsController`。双击新创建的文件以打开你选择的代码编辑器。
- en: 'Next, add the following code for the class:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为该类添加以下代码：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, we are first getting access to the `GameNotificationsManager`
    class through the component. Since we are attaching this script to the same game
    object that contains this script, we can use the `GetComponent` function. Afterward,
    we create a channel to post our notifications on. Lastly, we initialize the `GameNotificationsManager`
    component using the channel.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先通过组件获取对 `GameNotificationsManager` 类的访问权限。由于我们将此脚本附加到包含此脚本的同一游戏对象上，我们可以使用
    `GetComponent` 函数。之后，我们创建一个频道来发布我们的通知。最后，我们使用该频道初始化 `GameNotificationsManager`
    组件。
- en: 'Save your script and go back to the Unity Editor. From the **Inspector** window,
    attach the **Notifications Controller** script to the **Notifications Manager**
    object, as shown in the following screenshot:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并返回到 Unity 编辑器。在 **检查器** 窗口中，将 **通知控制器** 脚本附加到 **通知管理器** 对象上，如图下所示：
- en: "![Figure 9.6: Adding the Notifications Manager\uFEFF](img/B18868_09_06.jpg)"
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6：添加通知管理器](img/B18868_09_06.jpg)'
- en: 'Figure 9.6: Adding the Notifications Manager'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6：添加通知管理器
- en: Now that we have the setup taken care of, let’s see how we can actually schedule
    a notification to happen.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了设置，让我们看看我们如何实际安排一个通知发生。
- en: Scheduling notifications ahead of time
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提前安排通知
- en: 'One of the most common forms of creating a notification is asking players to
    come back and play the game at a later time. This encourages users to continue
    playing our game and to come back multiple times. We can do this by setting a
    delivery time in the future using the following steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建通知的最常见形式之一是要求玩家在以后的时间回来玩游戏。这鼓励用户继续玩我们的游戏，并多次回来。我们可以通过以下步骤设置未来的交付时间来实现这一点：
- en: 'Open up the `NotificationsController` script and add the following function
    to it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `NotificationsController` 脚本，并向其中添加以下函数：
- en: '[PRE1]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function takes in three parameters – the title, the body, and the time
    at which to send the notification.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数接受三个参数——标题、正文和发送通知的时间。
- en: 'This function requires the use of the `System` namespace for the `DateTime`
    class, so at the top of the `NotificationsController` file, add the following
    line:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此函数需要使用 `System` 命名空间中的 `DateTime` 类，因此请在 `NotificationsController` 文件顶部添加以下行：
- en: '[PRE2]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Creating the function doesn’t do anything, so for the sake of testing that
    everything has been set up correctly, let’s call the function within our `Start`
    function by adding the following highlighted code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试中调用函数，以确保一切设置正确，让我们在 `Start` 函数中调用该函数，添加以下突出显示的代码：
- en: '[PRE3]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we are passing in `"Endless Runner"` as the title, `"Come back!"`
    as the body, and for the third parameter, we are getting the current time by using
    `DateTime.Now` and then asking to add 5 seconds by using the `AddSeconds` method,
    passing in `5`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将 `"Endless Runner"` 作为标题，将 `"Come back!"` 作为正文，对于第三个参数，我们通过使用 `DateTime.Now`
    获取当前时间，然后使用 `AddSeconds` 方法添加 5 秒，传递 `5`。
- en: Save the script and return to the Unity Editor.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到 Unity 编辑器。
- en: Unfortunately, you won’t be able to test whether notifications work on your
    PC. We’ll have to export the game to see whether it works correctly.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，你无法在您的电脑上测试通知是否工作。我们必须导出游戏以查看它是否正确工作。
- en: Export your game to your device and start the game. As you can see, our notifications
    are working correctly!
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的游戏导出到你的设备上并开始游戏。正如你所看到的，我们的通知正在正常工作！
- en: "![Figure 9.7: Our default notification working prop\uFEFFerly](img/B18868_09_07.jpg)"
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7：我们的默认通知正常工作](img/B18868_09_07.jpg)'
- en: 'Figure 9.7: Our default notification working properly'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7：我们的默认通知正常工作
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: By default, the **Game Notifications Manager** component has **Mode** set to
    **Queue Clear and Reschedule**, which will make it so that you will be unable
    to see notifications if the game is open. If you would like to see the notifications
    always, change the mode to **NoQueue**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**游戏通知管理器**组件的**模式**设置为**队列清除和重新安排**，这将导致如果你打开游戏，将无法看到通知。如果你希望始终看到通知，请将模式更改为**无队列**。
- en: 'Generally, these kinds of notifications should be sent a day after the player
    has last played. We can do that by modifying the function to the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常情况下，这类通知应该在玩家上次玩完游戏后的一天发送。我们可以通过修改函数来实现这一点：
- en: '[PRE4]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will make it so that when we reach a level, we will display the notification
    after a day, but this will also happen every time we go to the main menu. To prevent
    this, we can add a `static bool` variable that will turn on when adding the notification.
    In Unity, when a variable is marked as `static`, it will be consistent throughout
    the running of the program. To add this variable, follow the steps given here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当我们达到某个等级时，通知将在一天后显示，但每次我们进入主菜单时也会发生这种情况。为了防止这种情况，我们可以添加一个`static bool`变量，在添加通知时将其打开。在Unity中，当一个变量被标记为`static`时，它将在整个程序运行过程中保持一致。要添加此变量，请按照以下步骤操作：
- en: 'Update the script to add the following code highlighted in bold:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新脚本，添加以下加粗显示的代码：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save your script. Now, when we play the game, we will only see the notification
    once every time we play the game!
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本。现在，每次我们玩游戏时，我们只会看到一次通知！
- en: This shows us how we can create notifications within our script, but right now,
    the notifications are kind of plain. Thankfully, it’s possible to customize notifications,
    which is what we’ll be working on next.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了我们如何在脚本中创建通知，但到目前为止，通知看起来有点简单。幸运的是，我们可以自定义通知，这是我们接下来要做的。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you’d like to look into how to send notifications from outside of Unity to
    your app through tools such as Google Firebase, check out [https://firebase.google.com/products/cloud-messaging](https://firebase.google.com/products/cloud-messaging).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解如何通过Google Firebase等工具从Unity外部发送通知到你的应用，请查看[https://firebase.google.com/products/cloud-messaging](https://firebase.google.com/products/cloud-messaging)。
- en: Customizing notifications
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义通知
- en: 'Unity includes some default visuals to be used with notifications, but generally,
    replacing the content with our own will help our game stand out and be more visually
    appealing to players. In order to have custom icons for Android notifications,
    you are required to have a small icon with at least 48 x 48 pixels, and have only
    white pixels with a transparent backdrop. The large icon must be at least 192
    x 192 and can have whatever colors we’d like. You can create images of your own,
    or use the images named `Hi-ResIcon.png` and `Small-ResIcon.png` provided in the
    example code for this book in the `Chapter 08``\Assets\Sprites` folder of the
    GitHub repository. Follow the steps given here for customization:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Unity包含一些默认的视觉效果，用于与通知一起使用，但通常，用我们自己的内容替换可以帮助我们的游戏脱颖而出，并使玩家更具视觉吸引力。为了为Android通知提供自定义图标，你需要有一个至少48
    x 48像素的小图标，并且只有白色像素和透明的背景。大图标至少需要192 x 192像素，可以有任何我们想要的颜色。你可以创建自己的图像，或者使用示例代码中提供的`Hi-ResIcon.png`和`Small-ResIcon.png`图像，这些图像位于GitHub仓库的`Chapter
    08/Assets/Sprites`文件夹中。按照以下步骤进行自定义：
- en: From the **Project** window, select the images you are planning to use for the
    small and large icons.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**窗口中选择你计划用于小图标和大图标的图像。
- en: With the images selected, go to the **Inspector** window and check the **Alpha
    Is** **Transparency** property.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择图像后，转到**检查器**窗口并检查**Alpha Is Transparency**属性。
- en: Finally, open up the **Advanced** options and check the **Read/Write** properties.
    Click on the **Apply** button so the changes happen.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开**高级**选项并检查**读写**属性。点击**应用**按钮以使更改生效。
- en: 'You can see the options in the **Inspector** window in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下截图中的**检查器**窗口中看到选项：
- en: "![Figure 9.\uFEFF8: Setting the properties needed for the notification icons](img/B18868_09_08.jpg)"
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8：设置通知图标所需的属性](img/B18868_09_08.jpg)'
- en: 'Figure 9.8: Setting the properties needed for the notification icons'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：设置通知图标所需的属性
- en: 'At this point, our images are ready and we can start to put them into our notifications.
    To do this, we will need to go to the **Project** **Settings** menu:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图片已经准备好了，我们可以开始将它们放入通知中。为此，我们需要进入**项目设置**菜单：
- en: Open the **Project Settings** menu by going to **Edit** | **Project Settings**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问**编辑** | **项目设置**来打开**项目设置**菜单。
- en: From there, go to the **Mobile Notifications** settings option.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，转到**移动通知**设置选项。
- en: From the menu, you’ll see two options – iOS and Android. We will want to use
    the default properties for the iOS options so we will first select **Android**
    if it isn’t selected already.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中，您将看到两个选项——iOS和Android。我们希望使用iOS选项的默认属性，因此如果尚未选择，我们首先选择**Android**。
- en: Check the **Reschedule Notifications on Device Restart** option. This will make
    it so that if someone plays the game again, they will no longer get the notification
    we created earlier. This will help the user not get annoyed at us spamming them
    too often.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查**设备重启时重新安排通知**选项。这将使得如果有人再次玩游戏，他们将不再收到我们之前创建的通知。这有助于用户不会因为频繁收到垃圾信息而感到烦恼。
- en: 'Next, under **Notification Icons**, click on the plus (**+**) icon. Drag and
    drop the small icon image into the first **Texture 2D** option. Next, click on
    the plus (**+**) icon again and then change **Type** to **Large**. Afterward,
    assign your large icon to the Texture 2D spot:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在**通知图标**下，点击加号（**+**）图标。将小图标图像拖放到第一个**2D纹理**选项中。然后，再次点击加号（**+**）图标，并将**类型**更改为**大号**。之后，将您的大图标分配到2D纹理位置：
- en: '![Figure 9.9: Setting up Mobile Notification Icons](img/B18868_09_09.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9：设置移动通知图标](img/B18868_09_09.jpg)'
- en: 'Figure 9.9: Setting up Mobile Notification Icons'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：设置移动通知图标
- en: 'Then, go back to the `NotificationsController` script and update the `ShowNotification`
    function to use our new icons:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，返回到`NotificationsController`脚本并更新`ShowNotification`函数以使用我们新的图标：
- en: '[PRE6]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Save your script and return to the Unity Editor. Export your game to Android
    and you should see the icons update. Now, the notification will show the small
    icon from the toolbar, as shown in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并返回到Unity编辑器。将您的游戏导出为Android，您应该会看到图标已更新。现在，通知将显示工具栏中的小图标，如图下所示：
- en: '![Figure 9.10: Small notification icon being shown](img/B18868_09_10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10：显示小通知图标](img/B18868_09_10.jpg)'
- en: 'Figure 9.10: Small notification icon being shown'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：显示小通知图标
- en: 'And it will use both icons when accessing the notification itself! This can
    be seen in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问通知本身时，它将使用两个图标！这可以在以下屏幕截图中看到：
- en: "![Figure 9.11: Seeing the notification from the notifications bar with bo\uFEFF\
    th icons](img/B18868_09_11.jpg)"
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图9.11：从通知栏中查看带有两个图标的通知](img/B18868_09_11.jpg)'
- en: 'Figure 9.11: Seeing the notification from the notifications bar with both icons'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：从通知栏中查看带有两个图标的通知
- en: 'It is also possible to modify other properties, such as the badge number used
    in iOS, by using a line such as the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用如下类似的行来修改其他属性，例如iOS中使用的徽章数字：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more information on how you can customize your notifications, check out
    [https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于如何自定义通知的信息，请查看[https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html)。
- en: This allows us to have our notifications look just the way we want them to with
    as much polish as we would like them to have. Now that we have our notifications
    customized the way that we want them, it might be pertinent for us to discuss
    how we can cancel notifications that we no longer wish to have happen.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们的通知看起来就像我们想要的那样，具有我们希望拥有的尽可能多的光泽。现在我们已经将通知自定义成我们想要的样子，讨论如何取消我们不再希望发生的通知可能是有意义的。
- en: Canceling notifications
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消通知
- en: There are several reasons why we may want to cancel notifications. This could
    be due to the fact that, during play, the player has made a decision that has
    caused something to no longer be relevant.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要取消通知的几个原因。这可能是由于在游戏过程中，玩家做出了一个决定，导致某些内容不再相关。
- en: 'For this example, let’s create a sample notification that we will cancel before
    it has a chance to happen. But for us to cancel a notification, we must have a
    way of knowing which notification is which. Thankfully, the Notifications Manager
    has a property called an `Id` that each notification has. We can set the notification
    ourselves by hand or Unity will generate it for us. In our case, we will use the
    automatically generated one:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，让我们创建一个示例通知，在我们有机会取消它之前取消它。但为了取消一个通知，我们必须有一种方法来知道哪个通知是哪个。幸运的是，通知管理器有一个名为`Id`的属性，每个通知都有一个。我们可以手动设置通知，或者Unity会为我们生成它。在我们的情况下，我们将使用自动生成的：
- en: 'Open up the `NotificationsController` script and go to the `ShowNotification`
    function. Update it to the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NotificationsController`脚本并转到`ShowNotification`函数。更新如下：
- en: '[PRE8]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that our return type for this function has changed from `void` to `int?`
    and the question mark is not a typo. This is something called a `System.Nullable`
    struct, which is basically a special type that allows us to have a variable that
    can consist of having any value of the type associated with it, but also can be
    assigned to `null` as well. That means that this value can either be set or not.
    Some platforms, such as PCs, don’t have support for notifications with the system
    so, in those cases, they’ve chosen to use `null` instead of something like *negative
    one*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个函数的返回类型已从`void`更改为`int?`，问号不是笔误。这被称为`System.Nullable`结构体，它基本上是一种特殊类型，允许我们有一个变量，它可以包含与其关联的类型的任何值，也可以被分配为`null`。这意味着这个值可以设置也可以不设置。一些平台，如PC，没有对系统通知的支持，因此在这些情况下，他们选择使用`null`而不是类似*负一*的东西。
- en: 'Now that we’ve updated our script, let’s now show an example of how we can
    cancel a notification. Go to the `Start` function and update it to the following:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经更新了脚本，让我们现在展示一个示例，说明我们如何取消一个通知。转到`Start`函数并更新如下：
- en: '[PRE9]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Save your script and build your game. If you open up the project on your Android
    or IOS device, you should be able to see that the verification that we have set
    to not be canceled plays as normal. But the one that we canceled does not happen.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并构建你的游戏。如果你在你的Android或IOS设备上打开项目，你应该能够看到我们设置为不可取消的验证正常播放。但被取消的那个没有发生。
- en: Tip
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also cancel all notifications at once by simply calling the `CancelAllNotifications`
    function from the `GameNotificationManager` class. For more information on canceling
    notifications, check out [https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过简单地从`GameNotificationManager`类中调用`CancelAllNotifications`函数一次性取消所有通知。有关取消通知的更多信息，请参阅[https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html)。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, we have seen how we can make use of Unity’s Mobile Notifications
    package to create notifications for our players. We’ve learned how to schedule
    them to take place in the future as well as how to customize these notifications
    to have our own distinct visual style!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何利用Unity的移动通知包为我们的玩家创建通知。我们学习了如何安排它们在未来发生，以及如何自定义这些通知以拥有我们独特的视觉风格！
- en: We now have everything in place for players to play and come back to our game,
    but we are only relying on what we created. In addition to that, we may want to
    see what our players are doing while playing our games. Then, we can use that
    information to improve and/or tweak our game.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为玩家提供了所有必要的条件来玩游戏并返回我们的游戏，但我们只依赖于我们创建的内容。除此之外，我们可能还想了解玩家在玩游戏时的行为。然后，我们可以利用这些信息来改进和/或调整我们的游戏。
- en: In the next chapter, we will take a look at how we can do this using tools from
    Unity Analytics.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用Unity Analytics的工具来实现这一点。
