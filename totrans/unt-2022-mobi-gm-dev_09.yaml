- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping Players Involved with Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best ways to keep users coming back to your game is through the use
    of push notifications. This allows you to stay in contact with your users even
    when they’re not using your game. Used wisely, this can keep users playing your
    game for a long period of time. Using notifications too often or poorly will cause
    users to mute your app’s notifications, which is not an ideal situation.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore how to create notifications for both Android
    and iOS devices. We will then learn how to schedule notifications to keep players
    returning to the game later on, as well as ways that we can customize them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter is split into a number of topics. It contains a simple, step-by-step
    process from beginning to end. Here is the outline of our tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling notifications ahead of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing notification presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canceling notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book utilizes Unity 2022.1.0b16 and Unity Hub 3.3.1, but the steps should
    work with minimal changes in future versions of the editor. If you would like
    to download the exact version used in this book, and there is a new version out,
    you can visit Unity’s download archive at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
    You can also find the system requirements for Unity at [https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html](https://docs.unity3d.com/2022.1/Documentation/Manual/system-requirements.html)
    in the *Unity Editor system requirements* section. To deploy your project, you
    will need an Android or iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Unity-2022-Mobile-Game-Development-3rd-Edition/tree/main/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start adding notifications to our project, we will need to add
    a special preview package that Unity makes available. Follow the steps given here:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Unity Editor, go to **Window** | **Package** **Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From there, if the top-left section does not say **Packages: Unity Registry**,
    click on the **In Project** drop-down menu from the toolbar of the **Packages**
    menu and select **Unity Registry**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the available options until you reach **Mobile Notifications**
    and select it. Once there, click on the arrow to the side of it and select **See
    All Versions** and then select the latest version (in my case, it was **Version
    2.0.2**). From there, click the **Install** button and you’ll see the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1: Installing the Mobile Notifications package](img/B18868_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Installing the Mobile Notifications package'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that this package requires your game to use Android 5.1
    (API level 22) and iOS 10 or above in order to function properly.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using a cross-platform wrapper, also written by Unity, in order
    to get notifications working quickly and remove the requirement of writing platform-specific
    code.
  prefs: []
  type: TYPE_NORMAL
- en: After this, open up the **Samples** section and then click on the **Import**
    button next to the **Notification** **Samples** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2: Importing the notification samples](img/B18868_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Importing the notification samples'
  prefs: []
  type: TYPE_NORMAL
- en: This project, created by Unity, is used to show how you can use Unity’s Mobile
    Notifications API in some real-world examples. We are using it for the cross-platform
    wrapper, which will allow us to create a notification once, and it will work on
    both Android and iOS without us doing any additional work.
  prefs: []
  type: TYPE_NORMAL
- en: After installing this, you may close the **Package Manager** window. To ensure
    that we can export our project, we need to ensure that our project has the correct
    Minimum API level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, go to the **Project Settings** menu by going to **Edit** | **Project
    Settings**. From there, go to the **Player** options and under **Other Settings**
    scroll down to **Minimum API Level** and verify that it is set to the version
    specified in the Mobile Notifications package (in this case, **Android 5.1 ‘Lollipop’
    (API level 22)**) or higher. Afterward, you can close the **Project** **Settings**
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3: Ensuring the Minimum API Level is set correctly](img/B18868_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Ensuring the Minimum API Level is set correctly'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see that there are a number of folders that are part of the project.
    The files that we care about are located in the `Assets\Samples\Mobile Notifications\2.0.2\Notification
    Samples\Scripts` folder. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: The Notification Samples Scripts folder](img/B18868_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: The Notification Samples Scripts folder'
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the code needed – in particular, the `GameNotificationManager`
    class – to be added to our script. At this point, we could move these scripts
    into a subfolder of our `Scripts` folder and delete the other files or keep the
    files where they are.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin displaying notifications on our screen, we first need to add a new
    object to our level that will contain the Game Notifications Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **MainMenu** scene if it isn’t already open. From there, create a new
    game object by going to **GameObject** | **Create Empty**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `Notifications Manager` and, for the sake of neatness, reset the **Transform**
    component’s **Position** property by right-clicking on the **Transform** component
    and selecting the **Reset** **Position** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Afterward, attach the `gamen`, and then selecting **Game Notifications Manager**
    from the list. It should look something like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5: Adding the Game Notifications Manager](img/B18868_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Adding the Game Notifications Manager'
  prefs: []
  type: TYPE_NORMAL
- en: After the component has been placed, we can do the setup needed to create our
    first notification. Due to the implementation of the `GameNotificationsManager`
    class, we will need to have another script to send the notifications, which we
    will call `NotificationsController`.
  prefs: []
  type: TYPE_NORMAL
- en: From the `Assets/Scripts` folder and create a new C# script called `NotificationsController`.
    Double-click on the newly created file to open up your code editor of choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following code for the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are first getting access to the `GameNotificationsManager`
    class through the component. Since we are attaching this script to the same game
    object that contains this script, we can use the `GetComponent` function. Afterward,
    we create a channel to post our notifications on. Lastly, we initialize the `GameNotificationsManager`
    component using the channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your script and go back to the Unity Editor. From the **Inspector** window,
    attach the **Notifications Controller** script to the **Notifications Manager**
    object, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.6: Adding the Notifications Manager\uFEFF](img/B18868_09_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Adding the Notifications Manager'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the setup taken care of, let’s see how we can actually schedule
    a notification to happen.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduling notifications ahead of time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most common forms of creating a notification is asking players to
    come back and play the game at a later time. This encourages users to continue
    playing our game and to come back multiple times. We can do this by setting a
    delivery time in the future using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `NotificationsController` script and add the following function
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function takes in three parameters – the title, the body, and the time
    at which to send the notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function requires the use of the `System` namespace for the `DateTime`
    class, so at the top of the `NotificationsController` file, add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Creating the function doesn’t do anything, so for the sake of testing that
    everything has been set up correctly, let’s call the function within our `Start`
    function by adding the following highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we are passing in `"Endless Runner"` as the title, `"Come back!"`
    as the body, and for the third parameter, we are getting the current time by using
    `DateTime.Now` and then asking to add 5 seconds by using the `AddSeconds` method,
    passing in `5`.
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, you won’t be able to test whether notifications work on your
    PC. We’ll have to export the game to see whether it works correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export your game to your device and start the game. As you can see, our notifications
    are working correctly!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.7: Our default notification working prop\uFEFFerly](img/B18868_09_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: Our default notification working properly'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: By default, the **Game Notifications Manager** component has **Mode** set to
    **Queue Clear and Reschedule**, which will make it so that you will be unable
    to see notifications if the game is open. If you would like to see the notifications
    always, change the mode to **NoQueue**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, these kinds of notifications should be sent a day after the player
    has last played. We can do that by modifying the function to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will make it so that when we reach a level, we will display the notification
    after a day, but this will also happen every time we go to the main menu. To prevent
    this, we can add a `static bool` variable that will turn on when adding the notification.
    In Unity, when a variable is marked as `static`, it will be consistent throughout
    the running of the program. To add this variable, follow the steps given here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the script to add the following code highlighted in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script. Now, when we play the game, we will only see the notification
    once every time we play the game!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows us how we can create notifications within our script, but right now,
    the notifications are kind of plain. Thankfully, it’s possible to customize notifications,
    which is what we’ll be working on next.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to look into how to send notifications from outside of Unity to
    your app through tools such as Google Firebase, check out [https://firebase.google.com/products/cloud-messaging](https://firebase.google.com/products/cloud-messaging).
  prefs: []
  type: TYPE_NORMAL
- en: Customizing notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity includes some default visuals to be used with notifications, but generally,
    replacing the content with our own will help our game stand out and be more visually
    appealing to players. In order to have custom icons for Android notifications,
    you are required to have a small icon with at least 48 x 48 pixels, and have only
    white pixels with a transparent backdrop. The large icon must be at least 192
    x 192 and can have whatever colors we’d like. You can create images of your own,
    or use the images named `Hi-ResIcon.png` and `Small-ResIcon.png` provided in the
    example code for this book in the `Chapter 08``\Assets\Sprites` folder of the
    GitHub repository. Follow the steps given here for customization:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project** window, select the images you are planning to use for the
    small and large icons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the images selected, go to the **Inspector** window and check the **Alpha
    Is** **Transparency** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, open up the **Advanced** options and check the **Read/Write** properties.
    Click on the **Apply** button so the changes happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see the options in the **Inspector** window in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.\uFEFF8: Setting the properties needed for the notification icons](img/B18868_09_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: Setting the properties needed for the notification icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, our images are ready and we can start to put them into our notifications.
    To do this, we will need to go to the **Project** **Settings** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Project Settings** menu by going to **Edit** | **Project Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From there, go to the **Mobile Notifications** settings option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, you’ll see two options – iOS and Android. We will want to use
    the default properties for the iOS options so we will first select **Android**
    if it isn’t selected already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Reschedule Notifications on Device Restart** option. This will make
    it so that if someone plays the game again, they will no longer get the notification
    we created earlier. This will help the user not get annoyed at us spamming them
    too often.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, under **Notification Icons**, click on the plus (**+**) icon. Drag and
    drop the small icon image into the first **Texture 2D** option. Next, click on
    the plus (**+**) icon again and then change **Type** to **Large**. Afterward,
    assign your large icon to the Texture 2D spot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.9: Setting up Mobile Notification Icons](img/B18868_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Setting up Mobile Notification Icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, go back to the `NotificationsController` script and update the `ShowNotification`
    function to use our new icons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your script and return to the Unity Editor. Export your game to Android
    and you should see the icons update. Now, the notification will show the small
    icon from the toolbar, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.10: Small notification icon being shown](img/B18868_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: Small notification icon being shown'
  prefs: []
  type: TYPE_NORMAL
- en: 'And it will use both icons when accessing the notification itself! This can
    be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.11: Seeing the notification from the notifications bar with bo\uFEFF\
    th icons](img/B18868_09_11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Seeing the notification from the notifications bar with both icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to modify other properties, such as the badge number used
    in iOS, by using a line such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how you can customize your notifications, check out
    [https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to have our notifications look just the way we want them to with
    as much polish as we would like them to have. Now that we have our notifications
    customized the way that we want them, it might be pertinent for us to discuss
    how we can cancel notifications that we no longer wish to have happen.
  prefs: []
  type: TYPE_NORMAL
- en: Canceling notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several reasons why we may want to cancel notifications. This could
    be due to the fact that, during play, the player has made a decision that has
    caused something to no longer be relevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, let’s create a sample notification that we will cancel before
    it has a chance to happen. But for us to cancel a notification, we must have a
    way of knowing which notification is which. Thankfully, the Notifications Manager
    has a property called an `Id` that each notification has. We can set the notification
    ourselves by hand or Unity will generate it for us. In our case, we will use the
    automatically generated one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `NotificationsController` script and go to the `ShowNotification`
    function. Update it to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that our return type for this function has changed from `void` to `int?`
    and the question mark is not a typo. This is something called a `System.Nullable`
    struct, which is basically a special type that allows us to have a variable that
    can consist of having any value of the type associated with it, but also can be
    assigned to `null` as well. That means that this value can either be set or not.
    Some platforms, such as PCs, don’t have support for notifications with the system
    so, in those cases, they’ve chosen to use `null` instead of something like *negative
    one*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve updated our script, let’s now show an example of how we can
    cancel a notification. Go to the `Start` function and update it to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and build your game. If you open up the project on your Android
    or IOS device, you should be able to see that the verification that we have set
    to not be canceled plays as normal. But the one that we canceled does not happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You can also cancel all notifications at once by simply calling the `CancelAllNotifications`
    function from the `GameNotificationManager` class. For more information on canceling
    notifications, check out [https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html](https://docs.unity3d.com/Packages/com.unity.mobile.notifications@1.0/manual/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have seen how we can make use of Unity’s Mobile Notifications
    package to create notifications for our players. We’ve learned how to schedule
    them to take place in the future as well as how to customize these notifications
    to have our own distinct visual style!
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything in place for players to play and come back to our game,
    but we are only relying on what we created. In addition to that, we may want to
    see what our players are doing while playing our games. Then, we can use that
    information to improve and/or tweak our game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at how we can do this using tools from
    Unity Analytics.
  prefs: []
  type: TYPE_NORMAL
