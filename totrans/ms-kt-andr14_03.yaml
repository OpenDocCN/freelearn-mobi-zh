- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating Your First Android App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个Android应用
- en: Android, a mobile operating system developed by Google, runs on over two billion
    devices, such as smartphones, tablets, TVs, watches, and cars, and developers
    are able to write code that is compatible with these different devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Android是由Google开发的移动操作系统，运行在超过20亿台设备上，如智能手机、平板电脑、电视、手表和汽车，开发者能够编写与这些不同设备兼容的代码。
- en: In this chapter, we’ll create our first Android app. We will also familiarize
    ourselves with Android Studio, the **Integrated Development Environment** (**IDE**)
    that we’ll use to develop Android apps. We will also learn some tips, shortcuts,
    and useful Android Studio features and understand the process of creating a project
    in Android Studio.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建我们的第一个Android应用。我们还将熟悉Android Studio，这是我们用于开发Android应用的**集成开发环境（IDE**）。我们还将学习一些技巧、快捷键和有用的Android
    Studio功能，并了解在Android Studio中创建项目的流程。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Android Studio overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio概述
- en: Creating your Android app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的Android应用
- en: Android Studio tips and tricks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio技巧和窍门
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the instructions in this chapter, you will need to have Android Studio
    Hedgehog or later ([https://developer.android.com/studio/download](https://developer.android.com/studio/download))
    downloaded.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的说明，您需要下载Android Studio Hedgehog或更高版本（[https://developer.android.com/studio/download](https://developer.android.com/studio/download)）。
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chaptertwo)找到本章的代码。
- en: Android Studio overview
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio概述
- en: Developed by Google, Android Studio is the official IDE for creating Android
    applications. Built upon JetBrains’ IntelliJ IDEA, it provides a comprehensive
    platform for Android app development. It has all the features to enable you to
    develop Android apps with ease.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由Google开发，Android Studio是创建Android应用的官方IDE。建立在JetBrains的IntelliJ IDEA之上，它为Android应用开发提供了一个全面的平台。它拥有所有功能，使您能够轻松地开发Android应用。
- en: 'Once you download Android Studio from the official site, you need to download
    SDKs and set everything up for it to be ready for use. Open your newly installed
    Android Studio. You will see the following welcome screen:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完Android Studio后，您需要下载SDKs并设置好一切，以便它准备好使用。打开您新安装的Android Studio。您将看到以下欢迎屏幕：
- en: '![ Figure 2.1 – Android Studio welcome screen](img/B19779_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – Android Studio欢迎屏幕](img/B19779_02_01.jpg)'
- en: Figure 2.1 – Android Studio welcome screen
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – Android Studio欢迎屏幕
- en: 'On the top right, we have these quick options:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角，我们有以下快速选项：
- en: '**New Project**: We use this to create new projects in Android Studio.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新建项目**：我们使用这个选项在Android Studio中创建新项目。'
- en: '**Open**: We use this when we want to open existing projects using Android
    Studio.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开**：当我们想使用Android Studio打开现有项目时，我们会使用这个选项。'
- en: '**Get from VCS**: **VCS** stands for **version control system**. Examples of
    VCSs are GitHub, GitLab, and Bitbucket. We can always link our accounts and easily
    import projects that are hosted on VCS to our Android Studio.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从VCS获取**：**VCS**代表**版本控制系统**。VCS的例子包括GitHub、GitLab和Bitbucket。我们可以随时链接我们的账户，并轻松地将托管在VCS上的项目导入到Android
    Studio中。'
- en: '**More options icon**: This provides us with more options, such as **Profile
    or Debug APK**, **Import Project**, **Import an Android Code Sample**, **SDK Manager**,
    and **Virtual Device Manager**. We only use these options as needed, so we are
    not going to dive deep into them at this point.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更多选项图标**：这个图标为我们提供了更多选项，例如**配置文件或调试APK**、**导入项目**、**导入Android代码示例**、**SDK管理器**和**虚拟设备管理器**。我们只会在需要时使用这些选项，所以在此处不会深入探讨。'
- en: 'Now, let us look at the navigation options on the left:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看左侧的导航选项：
- en: '**Projects**: This is selected by default. It shows all the projects that you
    have created with Android Studio if present. If you do not have any, an empty
    screen will be displayed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**：这是默认选项。如果有，它将显示您使用Android Studio创建的所有项目。如果没有，将显示一个空屏幕。'
- en: '**Customize**: This provides a settings screen to customize the various aspects
    of Android Studio, as shown in the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：这提供了一个设置屏幕，可以自定义Android Studio的各个方面，如以下截图所示：'
- en: '![Figure 2.2 – Customize Android Studio screen](img/B19779_02_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – 自定义Android Studio屏幕](img/B19779_02_02.jpg)'
- en: Figure 2.2 – Customize Android Studio screen
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 自定义 Android Studio 屏幕
- en: 'From the preceding screenshot, we can see that we can quickly customize the
    following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一个屏幕截图，我们可以看到我们可以快速自定义以下内容：
- en: '**Color theme**: We can set the theme to dark (**Dracula**), light (**InteliJ
    Light**), or high contrast depending on our preferences.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色主题**：我们可以根据个人喜好将主题设置为深色（**Dracula**）、浅色（**IntelliJ Light**）或高对比度。'
- en: '**IDE font**: Here we set the preferred font size for our IDE.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE 字体**：在这里，我们设置 IDE 的首选字体大小。'
- en: '**Keymap**: Here we configure what IntelliJ should use for mapping our keyboard
    and mouse shortcuts. It automatically picks the one for our operating system.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键映射**：在这里，我们配置 IntelliJ 应该使用什么来映射我们的键盘和鼠标快捷键。它将自动选择适合我们操作系统的选项。'
- en: At the bottom of this screen, we can see two more settings options. One is **Import
    Settings…**, which we use when we want to import settings from either a previous
    Android Studio installation or a custom file. The other one is **All settings…**,
    which provides more customization options.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕底部，我们可以看到另外两个设置选项。一个是**导入设置…**，当我们想要从之前的 Android Studio 安装或自定义文件导入设置时使用。另一个是**所有设置…**，它提供了更多的自定义选项。
- en: '**Plugins**: Here, we can install external plugins to our Android Studio and
    also manage our installed plugins. There are several plugins in the Marketplace
    that we can install depending on the needs.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**：在这里，我们可以安装外部插件到我们的 Android Studio，并管理已安装的插件。根据需要，市场上有几个插件可供安装。'
- en: '![Figure 2.3 – Plugins screen](img/B19779_02_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 插件屏幕](img/B19779_02_03.jpg)'
- en: Figure 2.3 – Plugins screen
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 插件屏幕
- en: Now that we have an overview of several essential options on the Android Studio
    welcome screen, we will use the **New Project** option to create our first Android
    app in the next section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 Android Studio 欢迎屏幕上的几个基本选项有了概述，我们将使用**新项目**选项在下一节创建我们的第一个 Android 应用。
- en: Creating your Android app
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的 Android 应用
- en: 'Follow these steps to create your first Android app:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的第一个 Android 应用：
- en: 'Tap on the **New Project** button, which will take you to the **Templates**
    screen, as shown in the following figure:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新项目**按钮，这将带您进入**模板**屏幕，如图下所示：
- en: '![Figure 2.4 – New Project | Templates screen](img/B19779_02_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 新项目 | 模板屏幕](img/B19779_02_04.jpg)'
- en: Figure 2.4 – New Project | Templates screen
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 新项目 | 模板屏幕
- en: The IDE presents us with a variety of options to choose from while creating
    new projects, as seen in *Figure 2**.4*. To start with, on the right-hand side,
    we need to choose the specific form factor that we are targeting. By default,
    **Phone and Tablet** is selected. We have other options, such as **Wear OS** if
    we want to target wearables, **Android TV** if we want to develop apps that run
    on Smart TVs powered by Android OS, and, lastly, **Automotive**, for apps that
    target Android Auto.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建新项目时，IDE 提供了多种选项供我们选择，如*图 2*.4*所示。首先，在右侧，我们需要选择我们针对的具体形式因素。默认情况下，**手机和平板**被选中。我们还有其他选项，例如，如果我们想针对可穿戴设备，可以选择**Wear
    OS**；如果我们想开发在由 Android OS 驱动的智能电视上运行的应用程序，可以选择**Android TV**；最后，对于针对 Android Auto
    的应用程序，可以选择**汽车**。
- en: We are going to use the default option since we want to target Android and tablet
    devices.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认选项，因为我们想针对 Android 和平板电脑设备。
- en: Next, we have to choose a template from the options provided. There are several
    templates that we can use to quickly generate some functionality for our apps.
    For example, we have **Bottom Navigation View Activity** to generate a project
    with both UI and Koltin code for displaying bottom tabs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须从提供的选项中选择一个模板。我们可以使用几个模板来快速生成一些应用的功能。例如，我们有**底部导航视图活动**来生成一个具有 UI 和
    Kotlin 代码的项目，用于显示底部标签。
- en: We will choose **Empty Activity** as we want to start from scratch. We use this
    instead of the **No Activity** option since this comes with some dependencies
    set up for us.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择**空活动**，因为我们想从头开始。我们使用这个选项而不是**无活动**选项，因为后者为我们设置了一些依赖项。
- en: 'Tap **Next**, and we’ll see the screen to configure the project details, as
    follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，我们将看到配置项目详情的屏幕，如下所示：
- en: '![Figure 2.5 – New Project settings](img/B19779_02_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 新项目设置](img/B19779_02_05.jpg)'
- en: Figure 2.5 – New Project settings
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 新项目设置
- en: 'As seen in the preceding screenshot, to finalize creating the project, we need
    to specify the following:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，要最终创建项目，我们需要指定以下内容：
- en: '**Name**: This is the unique name for our project.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：这是我们的项目的唯一名称。'
- en: '**Package name**: This is a unique identifier for our project. Normally it’s
    a combination of the company website and app name.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包名**: 这是我们的项目的唯一标识符。通常它是由公司网站和应用程序名称的组合。'
- en: '**Save location**: Here we specify the directory that our project will be in.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存位置**: 在这里，我们指定项目将所在的目录。'
- en: '**Minimum SDK**: This is the minimum Android version that our Android app will
    support. Android Studio gives us the percentage of devices using all the versions
    to help us decide the minimum Android version to support. For our project, we’ve
    chosen **API 24: Android 7.0 (Nougat)**, which will run on approximately 94% of
    devices. It is important to note that choosing a lower minimum SDK version means
    we will have to make our app compatible across the different device versions,
    which can be a lot of work. Also, some features are only available in newer SDK
    versions, so we have to add a fallback mechanism for devices for'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小SDK版本**: 这是我们的Android应用将支持的最低Android版本。Android Studio会提供使用所有版本的设备百分比，帮助我们决定要支持的最低Android版本。对于我们的项目，我们选择了**API
    24: Android 7.0 (Nougat**)，这将运行在大约94%的设备上。需要注意的是，选择较低的最低SDK版本意味着我们必须使我们的应用兼容不同的设备版本，这可能是一项大量工作。此外，一些功能仅在较新的SDK版本中可用，因此我们必须为设备添加回退机制'
- en: 'Lastly, tap **Finish**—this creates our project. It will take a couple of minutes
    to prepare our project. Once done, we’ll be presented with the following screen:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**完成**—这将创建我们的项目。准备项目可能需要几分钟时间。一旦完成，我们将看到以下屏幕：
- en: '![Figure 2.6 – New project](img/B19779_02_06.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6 – 新项目](img/B19779_02_06.jpg)'
- en: Figure 2.6 – New project
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 – 新项目
- en: There are a few things about the project structure we need to understand here.
    We will be diving deep into them in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要了解关于项目结构的几个问题。我们将在下一节深入探讨。
- en: Exploring the new project
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索新项目
- en: In this subsection, we are going to look at the whole project structure so that
    we can understand the different components.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将查看整个项目结构，以便我们能够理解不同的组件。
- en: 'On the left, we have the **project structure** with different directories and
    packages. On the right is the editor section, which by default does not have anything.
    When you open any file inside Android Studio, this is where they appear. This
    is the project structure for our new project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有**项目结构**，包含不同的目录和包。在右侧是编辑器部分，默认情况下没有任何内容。当你打开Android Studio中的任何文件时，它们就会出现在这里。这是我们新项目的项目结构：
- en: '![Figure 2.7 – Project structure](img/B19779_02_07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7 – 项目结构](img/B19779_02_07.jpg)'
- en: Figure 2.7 – Project structure
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 项目结构
- en: 'On the left, we have the `app` directory, which is the root directory, which
    has all files related to the project. From *Figure 2**.7*, we can see that inside
    the `app` directory, we have the following different directories:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们有`app`目录，这是根目录，包含与项目相关的所有文件。从**图2.7**中，我们可以看到在`app`目录内，我们有以下不同的目录：
- en: '**manifests**: This has a single **AndroidManifest.xml** file, which is essential
    for our app configuration. A manifest file has a **.xml** extension and contains
    the information critical to your app. It communicates this information to the
    Android system. In this file, we define the permissions needed for our app, the
    app name, and icons. We also declare activities and services in this file. Without
    declaring them, it’s hard for our app to use them.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**manifests**: 这包含一个单一的**AndroidManifest.xml**文件，这对于我们的应用配置至关重要。一个清单文件具有**.xml**扩展名，包含对您的应用至关重要的信息。它将此信息传达给Android系统。在此文件中，我们定义了应用所需的权限、应用名称和图标。我们还在此文件中声明活动和服务。如果没有声明，我们的应用很难使用它们。'
- en: 'The **java** package: This package, although named **java**, has all the Kotlin
    files for our project. If we need to add any files, this is where we add them.
    We can also create packages that help us group files with related functionality
    together. This directory is further subdivided into the following:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**java**包：这个包，尽管命名为**java**，但包含了我们项目的所有Kotlin文件。如果我们需要添加任何文件，这就是我们添加它们的地方。我们还可以创建帮助我们将具有相关功能的文件分组在一起的包。此目录进一步细分为以下：'
- en: '**com.packt.chaptertwo**: This is for the Kotlin files in our app'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**com.packt.chaptertwo**: 这是用于我们应用中的Kotlin文件'
- en: '**com.packt.chaptertwo (androidTest)**: Here, we add all the files for our
    instrumentation tests'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**com.packt.chaptertwo (androidTest)**: 在这里，我们添加了所有用于仪器测试的文件'
- en: '**com.packt.chaptertwo (test)**: Here, we add all the files for our unit tests'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**com.packt.chaptertwo (test)**: 在这里，我们添加了所有用于单元测试的文件'
- en: 'Resources: This directory, normally shortened to **res**, has all the resources
    needed for our app. These resources can include images, strings, and assets. From
    *Figure 2**.6*, we can see that we have the following subdirectories:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源：这个目录，通常简称为**res**，包含了我们应用程序所需的所有资源。这些资源可以包括图像、字符串和资产。从*图2*.6中，我们可以看到以下子目录：
- en: '**drawable**: This folder contains custom drawables, vector drawables, or PNGs
    and JPEGs that are used in the app.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**drawable**: 这个文件夹包含自定义的可绘制对象、矢量可绘制对象或用于应用程序中的PNG和JPEG文件。'
- en: '**mipmap**: This folder is where we place our launcher icons.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mipmap**: 这个文件夹是我们放置启动器图标的地方。'
- en: '**values**: This folder is where we place our color, string, style, and theme
    files. In this folder, we define global values to be used all throughout the app.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**values**: 这个文件夹是我们放置颜色、字符串、样式和主题文件的地点。在这个文件夹中，我们定义了全局值，这些值将在整个应用程序中使用。'
- en: '**xml**: In this folder, we store XML files.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xml**: 在这个文件夹中，我们存储XML文件。'
- en: '**Gradle Scripts**: Here, we have all the Gradle scripts and Gradle property
    files needed for our project. In our new project, we have the following files:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gradle Scripts**: 在这里，我们包含了项目所需的全部Gradle脚本和Gradle属性文件。在我们的新项目中，我们有以下文件：'
- en: '**build.gradle (Project: chaptertwo)**: This is the top-level Gradle file where
    we add configurations that apply all over the project and submodules.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**build.gradle (Project: chaptertwo)**: 这是顶级Gradle文件，在这里我们添加了适用于整个项目和子模块的配置。'
- en: '**build.gradle (Module: app)**: This is the app module Gradle file. Inside
    here, we configure the app module. To understand this file, let’s look at the
    one generated for our project:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**build.gradle (Module: app)**: 这是应用程序模块的Gradle文件。在这里，我们配置应用程序模块。为了理解这个文件，让我们看看为我们项目生成的文件：'
- en: '[PRE0]'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'At the very top, we specify the plugins needed by the module. In this case,
    we have the Android application and Kotlin plugins declared. After the `plugins`
    block, we have the `android` block. You can see we have the following properties
    defined inside this block:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在最顶部，我们指定了模块所需的插件。在这种情况下，我们声明了Android应用程序和Kotlin插件。在`plugins`块之后，我们有`android`块。您可以看到，在这个块内部定义了以下属性：
- en: '**namespace**: This is used as the Kotlin or Java package name for the generated
    **R** and **BuildConfig** classes.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**namespace**: 这用于生成的**R**和**BuildConfig**类的Kotlin或Java包名。'
- en: '**compileSDK**: This defines the Android SDK version that will be used by Gradle
    to compile our app.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**compileSDK**: 这定义了Gradle将用于编译我们的应用程序的Android SDK版本。'
- en: '**defaultConfig**: This is a block where we specify the default config for
    all flavors and build types. Inside this block, we specify properties such as
    **applicationId**, **minSDK**, **targetSDK**, **versionCode**, **versionName**,
    and **testInstrumentationRunner**.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**defaultConfig**: 这是一个块，用于指定所有风味和构建类型的默认配置。在这个块内部，我们指定了诸如**applicationId**、**minSDK**、**targetSDK**、**versionCode**、**versionName**和**testInstrumentationRunner**等属性。'
- en: '**buildTypes**: This configures different build types for our application,
    such as **debug** and **release**, or any custom build that we define. Within
    each build type block, we specify properties such as **minifyEnabled**, **proguardFiles**,
    or **debuggable**.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**buildTypes**: 这配置了应用程序的不同构建类型，例如**debug**和**release**，或我们定义的任何自定义构建。在每个构建类型块内部，我们指定了诸如**minifyEnabled**、**proguardFiles**或**debuggable**等属性。'
- en: '**compileOptions**: We use this block to configure properties related to Java
    compilation. For example, we have defined **sourceCompatibility** and **targetCompatibility**,
    which specify the Java version compatibility for our project source code.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**compileOptions**: 我们使用这个块来配置与Java编译相关的属性。例如，我们定义了**sourceCompatibility**和**targetCompatibility**，它们指定了项目源代码的Java版本兼容性。'
- en: '**kotlinOptions**: We use this block to configure options related to Kotlin.
    A commonly used option is **jvmTarget**, which specifies which Java version to
    use for Kotlin compilation.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kotlinOptions**: 我们使用这个块来配置与Kotlin相关的选项。常用的选项是**jvmTarget**，它指定了用于Kotlin编译的Java版本。'
- en: '**buildFeatures**: We use this block to enable and disable specific features
    in our project. For example, we’ve enabled **compose** in our project. We can
    enable or disable other additional features, such as **viewBinding** and **dataBinding**.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**buildFeatures**: 我们使用这个块来启用和禁用项目中的特定功能。例如，我们在我们的项目中启用了**compose**。我们可以启用或禁用其他附加功能，例如**viewBinding**和**dataBinding**。'
- en: '**ComposeOptions**: This block is specific to projects that use Jetpack Compose.
    For example, inside this block, we can set **kotlinCompilerExtensionVersion**.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ComposeOptions**: 这个块是针对使用Jetpack Compose的项目特定的。例如，在这个块内部，我们可以设置**kotlinCompilerExtensionVersion**。'
- en: '**packagingOptions**: We use this block to customize the packaging options
    of our project, particularly regarding conflicts and merging.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**packagingOptions**: 我们使用这个块来自定义项目的打包选项，特别是关于冲突和合并。'
- en: '**dependencies**: Here we specify the dependencies in our project. We can add
    different libraries, modules, or external dependencies in this block.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dependencies**: 在此，我们指定项目中的依赖项。我们可以在此块中添加不同的库、模块或外部依赖项。'
- en: '**proguard-rules.pro**: This is a file where you define rules for ProGuard
    to use when obfuscating your code. We will dive deep into this later in [*Chapter
    13*](B19779_13.xhtml#_idTextAnchor175).'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**proguard-rules.pro**: 这是一个定义ProGuard在混淆代码时使用的规则的文件。我们将在[第13章](B19779_13.xhtml#_idTextAnchor175)中深入探讨。'
- en: '**gradle.properties (Project Properties)**: Here we define properties that
    apply to the whole project. Some of the properties include setting the Kotlin
    style and also specifying the memory to be used.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gradle.properties (项目属性)**: 在这里，我们定义适用于整个项目的属性。一些属性包括设置Kotlin样式以及指定要使用的内存。'
- en: '**gradle.properties (Global Properties)**: This is a global file. We specify
    settings that we want to apply to all our Android Studio projects.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gradle.properties (全局属性)**: 这是一个全局文件。我们指定我们想要应用于所有Android Studio项目的设置。'
- en: '**gradle-wrapper.properties (Gradle Version)**: In this file, we specify the
    Gradle wrapper properties, including the version and the URL from where to download
    the Gradle wrapper.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gradle-wrapper.properties (Gradle版本)**: 在此文件中，我们指定Gradle包装器的属性，包括版本和下载Gradle包装器的URL。'
- en: '**local.properties (Local Properties)**: In this file, we specify settings
    that need to apply to our local setup. Normally, this file is never committed
    to version control, so it means the configurations we add here only apply to our
    individual setup.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**local.properties (本地属性)**: 在此文件中，我们指定需要应用于本地设置的设置。通常，此文件永远不会提交到版本控制，这意味着我们在此处添加的配置仅适用于我们的个人设置。'
- en: '**settings.gradle (Project Setting)**: We use this file to apply some settings
    to our project. For example, if we need more modules in our project, this is where
    they’re specified.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**settings.gradle (项目设置)**: 我们使用此文件来应用一些项目设置。例如，如果我们需要在项目中添加更多模块，这就是它们被指定的地方。'
- en: When we build the project, Android Studio compiles all the resources and code
    using the configurations specified in our Gradle files and converts them into
    an **Android Application Package** (**APK**) or **Android Application Bundle**
    (**AAB**) that can run on our Android phones or emulators.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建项目时，Android Studio会使用我们在Gradle文件中指定的配置来编译所有资源和代码，并将它们转换为可以在我们的Android手机或模拟器上运行的**Android应用程序包（APK**）或**Android应用程序包（AAB**）。
- en: In this section, we have explored the newly created project and understood some
    of the key files and folders generated by Android Studio. In the next section,
    we are going to see how we can customize some things inside our Android Studio.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探索了新创建的项目，并了解了Android Studio生成的一些关键文件和文件夹。在下一节中，我们将看到如何自定义Android Studio内部的一些设置。
- en: Android Studio tips and tricks
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android Studio技巧与窍门
- en: In this section, we’re going to learn about some useful tips, shortcuts, and
    features in Android Studio.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解一些有用的技巧、快捷方式和Android Studio中的功能。
- en: 'We’ll start by opening the `MainActivity.kt` file. When you open the file,
    you’ll be presented with the following layout:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先打开`MainActivity.kt`文件。当您打开文件时，您将看到以下布局：
- en: '![Figure 2.8 – MainActivity file](img/B19779_02_08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8 – MainActivity文件](img/B19779_02_08.jpg)'
- en: Figure 2.8 – MainActivity file
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – MainActivity文件
- en: 'We can now see the code inside the `MainActivity.kt` file, which is Kotlin
    source code. Above the tab with the filename, we can see a navigation bar, as
    shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到`MainActivity.kt`文件内的代码，这是Kotlin源代码。在文件名标签上方，我们可以看到一个导航栏，如下面的截图所示：
- en: '![Figure 2.9 – Navigation bar](img/B19779_02_09.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 导航栏](img/B19779_02_09.jpg)'
- en: Figure 2.9 – Navigation bar
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 导航栏
- en: The navigation bar enables you to navigate easily and quickly between the different
    project files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏使您能够轻松快速地在不同的项目文件之间导航。
- en: 'We can also switch to the **project view** to see all the resources in our
    project. The switch is at the very top of all the directories. By default, it
    is set to **Android view** and has more options depending on your preference.
    Switching to project view gives us the following folder structure:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以切换到**项目视图**来查看项目中的所有资源。切换按钮位于所有目录的最顶部。默认情况下，它设置为**Android视图**，并且根据您的偏好有更多选项。切换到项目视图会给我们以下文件夹结构：
- en: '![Figure 2.10 – Project view](img/B19779_02_10.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 项目视图](img/B19779_02_10.jpg)'
- en: Figure 2.10 – Project view
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 项目视图
- en: In *Figure 2**.10*, we can see all the resources in our project, and we can
    easily navigate through the different files and folders.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 2**.10 中，我们可以看到我们项目中的所有资源，并且可以轻松地在不同的文件和文件夹之间导航。
- en: 'Android Studio has a variety of different tool windows that provide a variety
    of options. Let us start with the **Resource Manager** tool window, which is at
    the top left part below the view switcher tab. Open that window and you will see
    the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 有多种不同的工具窗口，提供了各种选项。让我们从位于视图切换标签页下方左上角的 **资源管理** 工具窗口开始。打开该窗口，您将看到以下内容：
- en: '![Figure 2.11 – Resource Manager tab](img/B19779_02_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 资源管理标签页](img/B19779_02_11.jpg)'
- en: Figure 2.11 – Resource Manager tab
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 资源管理标签页
- en: As shown in *Figure 2**.11*, the **Resource Manager** tab shows all the resources
    in your project. We can also quickly add new vector and image assets and drawable
    files and import drawable here. The good thing is that we can also see a preview
    of these resources and easily browse the resources that we have in our project.
    Below this tab, we have the **Project** tab, to switch back to our project view,
    and below it, there is the **Pull Requests** tab, which enables us to see open
    pull requests from the project’s version control repository. This is especially
    useful when we are collaborating with other team members or colleagues.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 2**.11 所示，**资源管理** 标签页显示了项目中的所有资源。我们还可以快速添加新的矢量、图像资源和可绘制文件，并在此处导入可绘制资源。好事是，我们还可以预览这些资源，并轻松浏览项目中的资源。在此标签页下方，我们有
    **项目** 标签，用于切换回项目视图，再下方是 **拉取请求** 标签，它使我们能够查看项目版本控制仓库中的开放拉取请求。当我们与其他团队成员或同事协作时，这特别有用。
- en: Android Studio allows us to add or remove these tabs or choose which tabs to
    be shown on either the left, right, or bottom side. To remove a tab, you simply
    right-click on it and select the **Remove from Sidebar** option. Click on **View**,
    followed by **Tool Windows**. This action will display all the tool windows currently
    available for use.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 允许我们添加或删除这些标签页或选择要在左侧、右侧或底部显示的标签页。要删除标签页，只需右键单击它并选择 **从侧边栏移除**
    选项。点击 **视图**，然后点击 **工具窗口**。此操作将显示当前可用的所有工具窗口。
- en: 'Android Studio provides alternative viewing options in the **View** menu. For
    example, we can switch to presentation mode while we are doing our presentations.
    To do this, still, in the **View** menu, tap **Appearance** and then **Enter Presentation
    Mode**. This brings up a minimized UI, as shown in the following figure:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 在 **视图** 菜单中提供了替代查看选项。例如，我们可以在进行演示时切换到演示模式。要这样做，仍然在 **视图** 菜单中，点击
    **外观** 然后点击 **进入演示模式**。这将显示一个最小化的 UI，如下图所示：
- en: '![Figure 2.12 – Presentation Mode](img/B19779_02_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 演示模式](img/B19779_02_12.jpg)'
- en: Figure 2.12 – Presentation Mode
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 演示模式
- en: As shown in *Figure 2**.12*, we can see that the font size has increased, and
    the UI is very minimal. This mode is extremely helpful when doing presentations.
    To exit this mode, go to **View** and then tap **Exit** **Presentation Mode**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 2**.12 所示，我们可以看到字体大小已增加，UI 非常简洁。这种模式在进行演示时非常有帮助。要退出此模式，请转到 **视图** 并然后点击
    **退出演示模式**。
- en: 'At the bottom, we have some more useful tools as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，我们有一些其他有用的工具，如下所示：
- en: '![Figure 2.13 – Android Studio bottom tabs](img/B19779_02_13.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – Android Studio 底部标签页](img/B19779_02_13.jpg)'
- en: Figure 2.13 – Android Studio bottom tabs
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – Android Studio 底部标签页
- en: 'From *Figure 2**.13*, let us learn what the tabs do:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *图 2**.13 中，让我们了解标签页的功能：
- en: '**TODO**: Shows all our to-do items. This is useful for keeping track of things
    you need to do.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项**：显示所有待办事项。这对于跟踪需要做的事情非常有用。'
- en: '**Problems**: Shows all the problems in our project. This is useful for keeping
    track of errors and warnings in our project.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：显示我们项目中的所有问题。这对于跟踪项目中的错误和警告非常有用。'
- en: '**Terminal**: Allows us to run terminal commands. This is useful for running
    commands such as Git or **Android Debug Bridge** (**ADB**) commands.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端**：允许我们运行终端命令。这对于运行 Git 或 **Android 调试桥接**（**ADB**）命令非常有用。'
- en: '**App Inspection**: This allows us to inspect various elements in our app and
    is useful for debugging our app. It allows us to inspect our background jobs,
    database, and network requests. For the database, we can see the data in our database,
    and we can also run queries with the data. For network requests, we can see the
    network requests and their JSON responses. And for background jobs, we can see
    the jobs and their status. These are helpful for us to debug and check issues
    on our app.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用检查**：这使我们能够检查我们应用中的各种元素，并且对调试我们的应用很有用。它允许我们检查我们的后台任务、数据库和网络请求。对于数据库，我们可以查看数据库中的数据，并且我们还可以使用数据运行查询。对于网络请求，我们可以查看网络请求及其
    JSON 响应。对于后台任务，我们可以查看任务及其状态。这些对我们调试和检查应用上的问题很有帮助。'
- en: '**Logcat**: This shows all our log messages. It is especially useful for debugging
    errors as they arise.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志输出**：显示所有我们的日志消息。它在调试错误发生时特别有用。'
- en: '**App Quality Insights**: This allows us to view our app quality insights.
    This enables us to view crashes detected by Firebase Crashlytics inside our Android
    Studio. We can also see the crash stack trace and the line of code that has the
    issue, and we can easily navigate to that line from here.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用质量洞察**：这使我们能够查看我们的应用质量洞察。这使我们能够查看 Firebase Crashlytics 在 Android Studio
    内部检测到的崩溃。我们还可以看到崩溃的堆栈跟踪和有问题的代码行，并且我们可以轻松地从这里导航到该行。'
- en: '**Build**: Shows the build output. This is useful for debugging build errors.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：显示构建输出。这对于调试构建错误很有用。'
- en: '**Profiler**: Allows us to profile our app. For the profiler to work, we must
    have an instance of our app running. The profiler is useful for debugging performance
    issues. This provides metrics on how our app is using the CPU, memory, and energy.
    We can use these metrics to optimize our app.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能分析器**：允许我们对应用进行性能分析。为了使性能分析器工作，我们必须有一个运行中的应用实例。性能分析器对于调试性能问题很有用。它提供了关于应用如何使用
    CPU、内存和能量的度量标准。我们可以使用这些度量标准来优化我们的应用。'
- en: These tabs can vary in position and at times some might not be shown. You can
    also easily add or remove them from the sidebar.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签的位置可能会有所不同，有时某些标签可能不会显示。您也可以轻松地从侧边栏添加或删除它们。
- en: Let us now look at some useful shortcuts inside Android Studio.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Android Studio 内部的一些有用的快捷键。
- en: Some useful shortcuts
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些有用的快捷键
- en: 'Shortcuts help us quickly achieve things inside Android Studio. When well mastered,
    they can help us boost our productivity. There are many shortcuts available, and
    you can also customize and create your own. Some of the most common ones include
    the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷键帮助我们快速在 Android Studio 内部完成任务。当熟练掌握时，它们可以帮助我们提高生产力。有许多快捷键可供选择，您也可以自定义并创建自己的快捷键。以下是一些最常见的一些：
- en: '*Alt* + *7* on Windows or *Command* + *7* on Mac: This opens the **Structure**
    tab. In this tab, you see the various methods and properties available to the
    class/object or file. For our **MainActivity.kt** file, we can see the following
    structure:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt* + *7*（在 Windows 上）或 *Command* + *7*（在 Mac 上）：这打开 **结构** 标签。在这个标签页中，您可以看到类/对象或文件可用的各种方法和属性。对于我们的
    **MainActivity.kt** 文件，我们可以看到以下结构：'
- en: '![Figure 2.14 – Structure tab](img/B19779_02_14.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – 结构标签](img/B19779_02_14.jpg)'
- en: Figure 2.14 – Structure tab
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 结构标签
- en: From *Figure 2**.14*, we can see that the `MainActivity.kt` file. Clicking on
    a method from this tab quickly navigates us to the method in our code. There is
    also an icon, highlighted in red in *Figure 2**.14*, that shows the inherited
    methods. When we click this, it shows all the inherited methods in the file as
    well.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *图 2**.14*，我们可以看到 `MainActivity.kt` 文件。从该标签页单击方法可以快速导航到我们的代码中的方法。在 *图 2**.14*
    中，还有一个图标，用红色突出显示，显示继承的方法。当我们点击这个图标时，它会显示文件中的所有继承方法。
- en: '*Alt* + *Enter* on Windows or *Option* + *Enter* on Mac: This allows us to
    quickly add imports for packages, files, or dependencies in our project. It also
    offers more functionality, such as providing quick fixes for errors and allowing
    us to implement methods.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt* + *Enter*（在 Windows 上）或 *Option* + *Enter*（在 Mac 上）：这允许我们快速为项目中的包、文件或依赖项添加导入。它还提供了更多功能，例如提供错误快速修复以及允许我们实现方法。'
- en: 'Double-press *Shift*: This opens the general search window. Here we can search
    for classes, symbols, and files all over the project.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双击 *Shift*：这打开通用搜索窗口。在这里，我们可以搜索整个项目中的类、符号和文件。
- en: '*Ctrl* + *Shift* + *F* on Windows or *Command* + *Shift* + *F* on Mac: This
    is helpful for searching text in all files.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Shift* + *F*（在 Windows 上）或 *Command* + *Shift* + *F*（在 Mac 上）：这有助于在所有文件中搜索文本。'
- en: '*Ctrl* + *F6* on Windows or *Command* + *F6*: This allows us to refactor code.
    We have renaming, changing method signatures, moving code, and many more.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的*Ctrl* + *F6* 或Mac上的*Command* + *F6*：这允许我们重构代码。我们包括重命名、更改方法签名、移动代码等许多操作。
- en: '*Ctrl* + *D* on Windows or *Command* + *D* on Mac: This is for duplicating
    a line of code or a selected section of code.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的*Ctrl* + *D* 或Mac上的*Command* + *D*：这是用于复制一行代码或选定的代码段。
- en: '*Ctrl* + *B* on Windows or *Command* + *B* on Mac: This allows us to jump to
    declarations.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows上的*Ctrl* + *B* 或Mac上的*Command* + *B*：这允许我们跳转到声明。
- en: We have only covered some of these shortcuts. There are many of them available.
    If you want to master most of these shortcuts, you can install the Key Promoter
    X plugin ([https://plugins.jetbrains.com/plugin/9792-key-promoter-x](https://plugins.jetbrains.com/plugin/9792-key-promoter-x)).
    The plugins remind you of the shortcut whenever you perform an action that has
    a shortcut, and it also prompts you to create shortcuts when you repetitively
    do something that does not have a shortcut.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只介绍了一些这些快捷键。还有很多其他的快捷键可用。如果你想掌握这些快捷键中的大多数，你可以安装Key Promoter X插件([https://plugins.jetbrains.com/plugin/9792-key-promoter-x](https://plugins.jetbrains.com/plugin/9792-key-promoter-x))。这些插件会在你执行有快捷键的动作时提醒你，同时当你重复执行没有快捷键的动作时，它也会提示你创建快捷键。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created our first Android app. We familiarized ourselves
    with Android Studio, the IDE that we use to develop Android apps. We also learned
    about some tips, shortcuts, and useful Android Studio features and understood
    the process of creating a project in Android Studio.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了我们的第一个Android应用。我们熟悉了Android Studio，这是我们用来开发Android应用的IDE。我们还了解了一些技巧、快捷键和有用的Android
    Studio功能，并理解了在Android Studio中创建项目的流程。
- en: In the next chapter, we will be covering Jetpack Compose layout basics. We’ll
    start with an introduction to Jetpack Compose, a declarative way of declaring
    UIs for our apps.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Jetpack Compose布局的基础知识。我们将从Jetpack Compose的介绍开始，这是一种为我们的应用声明UI的声明式方法。
