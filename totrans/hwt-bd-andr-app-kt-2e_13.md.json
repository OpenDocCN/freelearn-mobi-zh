["```swift\nclass AppContainer(applicationContext:Context) {\n    val myRepository: MyRepository\n    init {\n        val retrofit =\n            Retrofit.Builder().baseUrl(\n            \"https://google.com/\").build()\n        val myService=\n            retrofit.create<MyService>(MyService::\n            class.java)\n        val database =\n            Room.databaseBuilder(applicationContext,\n            MyDatabase::class.java, \"db\").build()\n        myRepository = MyRepositoryImpl(myService,\n            database.myDao())\n    }\n}\n```", "```swift\nclass MyApplication : Application() {\n    lateinit var appContainer: AppContainer\n    override fun onCreate() {\n        super.onCreate()\n        appContainer = AppContainer(this)\n    }\n}\n```", "```swift\n    override fun onCreate(savedInstanceState: Bundle?) {\n        ....\n        val myRepository = (application as\n        MyApplication).appContainer. myRepository\n        ...\n}\n```", "```swift\nclass MyContainer(private val myRepository: MyRepository) {\n    fun geMyViewModelFactory(): ViewModelProvider.Factory {\n        return object : ViewModelProvider.Factory {\n            override fun <T : ViewModel?>\n            create(modelClass: Class<T>): T {\n                return MyViewModel(myRepository) as T\n            }\n        }\n    }\n}\n```", "```swift\nclass MyActivity : AppCompatActivity() {\n    private lateinit var myViewModel: MyViewModel\n    private lateinit var myContainer: MyContainer\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        ....\n        val myRepository = (application as\n            MyApplication).appContainer. myRepository\n        myContainer = MyContainer (myRepository)\n        myViewModel = ViewModelProvider(this,\n            myContainer.geMyViewModelFactory())\n            .get(MyViewModel::class.java)\n    }\n}\n```", "```swift\n        implementation \"androidx.lifecycle:\n            lifecycle-viewmodel-ktx:2.5.1\"\n        implementation \"androidx.lifecycle:\n            lifecycle-livedata-ktx:2.5.1\"\n    ```", "```swift\n    interface NumberRepository {\n        fun generateNextNumber(): Int\n    }\n    ```", "```swift\n    class NumberRepositoryImpl(private val random: Random)\n    : NumberRepository {\n        override fun generateNextNumber(): Int {\n            return random.nextInt()\n        }\n    }\n    ```", "```swift\n    class MainViewModel(private val numberRepository:\n    NumberRepository) : ViewModel() {\n        private val _numberLiveData =\n            MutableLiveData<Int>()\n        val numberLiveData: LiveData<Int> =\n            _numberLiveData\n        fun generateNextNumber() {\n            _numberLiveData.postValue(numberRepository\n            .generateNextNumber())\n        }\n    }\n    ```", "```swift\n        <TextView\n            android:id=\"@+id/activity_main_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n        <Button\n            android:id=\"@+id/activity_main_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/randomize\" />\n    ```", "```swift\n       <string name=\"randomize\">Randomize</string>\n    ```", "```swift\n    class RandomApplication : Application() {\n        override fun onCreate() {\n            super.onCreate()\n        }\n    }\n    ```", "```swift\n        <application\n            ...\n            android:name=\".RandomApplication\"\n    .../>\n    ```", "```swift\n    class ApplicationContainer {\n        val numberRepository: NumberRepository =\n        NumberRepositoryImpl(Random())\n    }\n    ```", "```swift\n    class RandomApplication : Application() {\n        val applicationContainer = ApplicationContainer()\n        override fun onCreate() {\n            super.onCreate()\n        }\n    }\n    ```", "```swift\n    class MainContainer(private val numberRepository: NumberRepository) {\n        fun getMainViewModelFactory():\n        ViewModelProvider.Factory {\n            return object : ViewModelProvider.Factory {\n                override fun <T : ViewModel>\n                create(modelClass: Class<T>): T {\n                    return MainViewModel(numberRepository)\n                    as T\n                }\n            }\n        }\n    }\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            val mainContainer =\n                MainContainer((application as\n                RandomApplication).applicationContainer\n                .numberRepository)\n            val viewModel = ViewModelProvider(this,\n                mainContainer.getMainViewModelFactory()\n            ).get(MainViewModel::class.java)\n            viewModel.numberLiveData.observe(this,\n            Observer {\n                findViewById<TextView>(\n                R.id.activity_main_text_view).text =\n                it.toString()\n            }\n            )\n            findViewById<TextView>(\n            R.id.activity_main_button).setOnClickListener\n            {\n                viewModel.generateNextNumber()\n            }\n        }\n    }\n    ```", "```swift\nimplementation 'com.google.dagger:dagger:2.44.2'\nkapt 'com.google.dagger:dagger-compiler:2.44.2'\n```", "```swift\napply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-kapt'\n```", "```swift\nimport javax.inject.Inject\nclass ClassA @Inject constructor()\nclass ClassB @Inject constructor(private val classA:\nClassA)\n```", "```swift\nimport javax.inject.Inject\nclass ClassA @Inject constructor()\nclass ClassB {\n    @Inject\n    lateinit var classA: ClassA\n}\n```", "```swift\nimport dagger.Module\nimport dagger.Provides\nclass ClassA\nclass ClassB(private val classA: ClassA)\n@Module\nobject MyModule {\n    @Provides\n    fun provideClassA(): ClassA = ClassA()\n    @Provides\n    fun provideClassB(classA: ClassA): ClassB =\n        ClassB(classA)\n}\n```", "```swift\nimport dagger.Component\n@Component(modules = [MyModule::class])\ninterface MyComponent {\n    fun inject(myApplication: MyApplication)\n}\n```", "```swift\nimport android.app.Application\nimport javax.inject.Inject\nclass MyApplication : Application() {\n    @Inject\n    lateinit var classB: ClassB\n    override fun onCreate() {\n        super.onCreate()￼\nval component = DaggerMyComponent.create()\n        //needs to build the project once to generate\n        //DaggerMyComponent.class\n        component.inject(this)\n    }\n}\n```", "```swift\n@Module\nobject MyModule {\n    @Named(\"classA1\")\n    @Provides\n    fun provideClassA1(): ClassA = ClassA()\n    @Named(\"classA2\")\n    @Provides\n    fun provideClassA2(): ClassA = ClassA()\n    @Provides\n    fun provideClassB(@Named(\"classA1\") classA: ClassA):\n    ClassB = ClassB(classA)\n}\n```", "```swift\nimport javax.inject.Qualifier\n@Qualifier\n@MustBeDocumented\n@kotlin.annotation.Retention(AnnotationRetention.RUNTIME)\nannotation class ClassA1Qualifier\n@Qualifier\n@MustBeDocumented\n@kotlin.annotation.Retention(AnnotationRetention.RUNTIME)\nannotation class ClassA2Qualifier\n```", "```swift\n@Module\nobject MyModule {\n    @ClassA1Qualifier\n    @Provides\n    fun provideClassA1(): ClassA = ClassA()\n    @ClassA2Qualifier\n    @Provides\n    fun provideClassA2(): ClassA = ClassA()\n    @Provides\n    fun provideClassB(@ClassA1Qualifier classA: ClassA):\n    ClassB = ClassB(classA)\n}\n```", "```swift\nimport javax.inject.Scope\n@Scope\n@MustBeDocumented\n@kotlin.annotation.Retention(AnnotationRetention.RUNTIME)\nannotation class ActivityScope\n@Scope\n@MustBeDocumented\n@kotlin.annotation.Retention(AnnotationRetention.RUNTIME)\nannotation class FragmentScope\n```", "```swift\n@ActivityScope\n@Provides\nfun provideClassA(): ClassA = ClassA()\n```", "```swift\n@ActivityScope\n@Component(modules = [MyModule::class])\ninterface MyComponent {\n}\n```", "```swift\nclass ClassC\n@Module\nobject MySubcomponentModule {\n    @Provides\n    fun provideClassC(): ClassC = ClassC()\n}\n```", "```swift\nimport dagger.Subcomponent\n@ActivityScope\n@Subcomponent(modules = [MySubcomponentModule::class])\ninterface MySubcomponent {\n    fun inject(mainActivity: MainActivity)\n}\n```", "```swift\nimport dagger.Component\n@Component(modules = [MyModule::class])\ninterface MyComponent {\n    fun inject(myApplication: MyApplication)\n    fun createSubcomponent(mySubcomponentModule:\n    MySubcomponentModule): MySubcomponent\n}\n```", "```swift\n@Inject\n    lateinit var classC: ClassC\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        (application as MyApplication).component\n        .createSubcomponent(MySubcomponentModule)\n        .inject(this)\n}\n```", "```swift\n        implementation 'com.google.dagger:dagger:2.44.2'\n        kapt 'com.google.dagger:dagger-compiler:2.44.2'\n        implementation \"androidx.lifecycle:\n            lifecycle-viewmodel-ktx:2.5.1\"\n        implementation \"androidx.lifecycle:\n            lifecycle-livedata-ktx:2.5.1\"\n    ```", "```swift\n    apply plugin: 'kotlin-kapt'\n    ```", "```swift\n        @Module\n        class ApplicationModule {\n            @Provides\n            fun provideRandom(): Random = Random()\n            @Provides\n            fun provideNumberRepository(random: Random):\n            NumberRepository =\n            NumberRepositoryImpl(random)\n    }\n    ```", "```swift\n    @Module\n    class MainModule {\n        @Provides\n        fun provideMainViewModelFactory(numberRepository:\n        NumberRepository): ViewModelProvider.Factory {\n            return object : ViewModelProvider.Factory {\n                override fun <T : ViewModel>\n                create(modelClass: Class<T>): T {\n                    return MainViewModel(numberRepository)\n                    as T\n                }\n            }\n        }\n    }\n    ```", "```swift\n    @Scope\n    @MustBeDocumented\n    @kotlin.annotation.Retention(AnnotationRetention\n    .RUNTIME)\n    annotation class MainScope\n    ```", "```swift\n    @MainScope\n    @Subcomponent(modules = [MainModule::class])\n    interface MainSubcomponent {\n        fun inject(mainActivity: MainActivity)\n    }\n    ```", "```swift\n    @Singleton\n    @Component(modules = [ApplicationModule::class])\n    interface ApplicationComponent {\n        fun createMainSubcomponent(): MainSubcomponent\n    }\n    ```", "```swift\n    class RandomApplication : Application() {\n        lateinit var applicationComponent:\n        ApplicationComponent\n        override fun onCreate() {\n            super.onCreate()\n            applicationComponent =\n            DaggerApplicationComponent.create()\n        }\n    }\n    ```", "```swift\n    class MainActivity : AppCompatActivity() {\n        @Inject\n        lateinit var factory: ViewModelProvider.Factory\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            (application as RandomApplication)\n                .applicationComponent\n                .createMainSubcomponent()\n                .inject(this)\n            super.onCreate(savedInstanceState)\n        }\n    }\n    ```", "```swift\napply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-kapt'\napply plugin: 'com.google.dagger.hilt.android'\n```", "```swift\nplugins {\n  …\n  id 'kotlin-kapt'\n  id 'com.google.dagger.hilt.android'\n}\n```", "```swift\ndependencies {\n  implementation \"com.google.dagger:hilt-android:2.44.2\"\n  kapt \"com.google.dagger:hilt-compiler:2.44.2\"\n}\n```", "```swift\n@HiltAndroidApp\nclass MyApplication : Application() {\n}\n```", "```swift\n@AndroidEntryPoint\nclass MyActivity : AppCompatActivity() {\n    @Inject\n    lateinit var myObject: MyObject\n}\n```", "```swift\n@HiltViewModel\nclass MyViewModel @Inject constructor(private val myObject:\nMyObject) : ViewModel()\n```", "```swift\n@Module\n@InstallIn(SingletonComponent::class)\nclass MyModule {\n    @Provides\n    fun provideMyObject(): MyObject = MyObject()\n}\n```", "```swift\n    androidTestImplementation 'com.google.dagger:\n        hilt-android-testing:2.44.2'\n    kaptAndroidTest 'com.google.dagger:\n        hilt-android-compiler:2.44.2'\n```", "```swift\n@HiltAndroidTest\nclass MyInstrumentedTest {\n    @get:Rule\n    var hiltRule = HiltAndroidRule(this)\n    @Inject\n    lateinit var myObject: MyObject\n    @Before\n    fun init() {\n        hiltRule.inject()\n    }\n}\n```", "```swift\n@Module\n@TestInstallIn(\n    components = [SingletonComponent::class],\n    replaces = [MyModule::class]\n)\nclass MyTestModule {\n    @Provides\n    fun provideMyObject(): MyObject = MyTestObject()\n}\n```", "```swift\nclass HiltTestRunner : AndroidJUnitRunner() {\n    override fun newApplication(cl: ClassLoader?, name:\n    String?, context: Context?): Application {\n        return super.newApplication(cl,\n        HiltTestApplication::class.java.name, context)\n    }\n}\n```", "```swift\nandroid {\n    …\n    defaultConfig {\n        …\n        testInstrumentationRunner \"{app_package_name}\n            .HiltTestRunner\"\n    }\n}\n```", "```swift\n    plugins {\n        …\n        id 'com.google.dagger.hilt.android' version\n        '2.44.2' apply false\n    }\n    ```", "```swift\n    plugins {\n        id 'com.android.application'\n        id 'org.jetbrains.kotlin.android'\n        id 'kotlin-kapt'\n        id 'com.google.dagger.hilt.android'\n    }\n    ```", "```swift\n        implementation \"com.google.dagger:\n            hilt-android:2.44.2\"\n        kapt \"com.google.dagger:hilt-compiler:2.44.2\"\n        implementation 'androidx.fragment:\n            fragment-ktx:1.5.5'\n    ```", "```swift\n    @Module\n    @InstallIn(SingletonComponent::class)\n    class ApplicationModule {\n    }\n    ```", "```swift\n    @HiltAndroidApp\n    class RandomApplication : Application()\n    ```", "```swift\n    @HiltViewModel\n    class MainViewModel @Inject constructor(private val\n    numberRepository: NumberRepository) :\n        ViewModel() {\n        …\n    }\n    ```", "```swift\n    @AndroidEntryPoint\n    class MainActivity : AppCompatActivity() {\n        private val mainViewModel: MainViewModel by\n        viewModels()\n    }\n    ```", "```swift\nimplementation \"io.insert-koin:koin-core:3.2.2\"\n```", "```swift\nclass MyApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n            androidLogger(Level.INFO)\n            androidContext(this@MyApplication)\n            androidFileProperties()\n            modules(myModules)\n        }\n    }\n}\n```", "```swift\nclass ClassA\nclass ClassB(private val classB: ClassA)\n    val moduleForClassA = module {\n        single { ClassA() }\n    }\n    val moduleForClassB = module {\n        factory { ClassB(get()) }\n    }\n    override fun onCreate() {\n        super.onCreate()\n        startKoin {\n            androidLogger(Level.INFO)\n            androidContext(this@MyApplication)\n            androidFileProperties()\nmodules(listOf(moduleForClassA,\n            moduleForClassB))\n        }\n    }\n```", "```swift\n    class MainActivity : AppCompatActivity() {\n      val classB: ClassB by inject()\n    }\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val classB: ClassB = get()\n    }\n```", "```swift\n    val moduleForClassA = module {\n        single(named(\"name\")) { ClassA() }\n    }\n```", "```swift\n    val moduleForClassB = module {\n        scope(named<MainActivity>()) {\n            scoped { ClassB(get()) }\n        }\n    }\n```", "```swift\nclass MainActivity : ScopeActivity() {\n    val classB: ClassB by inject()\n}\n```", "```swift\nimplementation \"io.insert-koin:koin-android:3.2.2\"\n```", "```swift\n    val moduleForClassB = module {\n        factory {\n            ClassB(get())\n        }\n        viewModel { MyViewModel(get()) }\n    }\n```", "```swift\nclass MainActivity : AppCompatActivity() {\n    val model: MyViewModel by viewModel()\n}\n```", "```swift\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val model : MyViewModel = getViewModel()\n    }\n```", "```swift\n        implementation \"androidx.lifecycle:\n            lifecycle-viewmodel-ktx:2.5.1\"\n        implementation \"androidx.lifecycle:\n            lifecycle-livedata-ktx:2.5.1\"\n        implementation \"io.insert-koin:koin-android:3.2.2\"\n        implementation \"io.insert-koin:koin-core:3.2.2\"\n        testImplementation 'junit:junit:4.13.2'\n    ```", "```swift\n    class RandomApplication : Application() {\n        val appModule = module {\n            single {\n                Random()\n            }\n            single<NumberRepository> {\n                NumberRepositoryImpl(get())\n            }\n    }\n    }\n    ```", "```swift\n        val mainModule = module {\n            scope(named<MainActivity>()) {\n                scoped {\n                    MainViewModel(get())\n                }\n            }\n        }\n    ```", "```swift\n            super.onCreate()\n            startKoin {\n                androidLogger()\n                androidContext(this@RandomApplication)\n                modules(listOf(appModule, mainModule))\n            }\n    ```", "```swift\n    class MainActivity : ScopeActivity() {\n        private val mainViewModel: MainViewModel by\n        inject()\n    }\n    ```", "```swift\n    [Koin]: [init] declare Android Context\n    [Koin]: bind type:'android.content.Context' ~ [type:Single,primary_type:'android.content.Context']\n    [Koin]: bind type:'android.app.Application' ~ [type:Single,primary_type:'android.app.Application']\n    [Koin]: bind type:'java.util.Random' ~ [type:Single,primary_type:'java.util.Random']\n    [Koin]: bind type:'com.android.testable.randomapplication .NumberRepository' ~ [type:Single,primary_type:'com.android .testable.randomapplication.NumberRepository']\n    [Koin]: total 5 registered definitions\n    [Koin]: load modules in 0.4638 ms\n    ```"]