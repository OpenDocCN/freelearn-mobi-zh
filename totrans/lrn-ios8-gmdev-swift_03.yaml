- en: Chapter 3. An Introduction to Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we saw the Playground tool. It's a simple tool to test
    your code, but if you want to actually create an application and run it on a device
    or publish and distribute it through the Mac or iOS App Store, you need to create
    an Xcode project.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a tour of Xcode. We will take a detailed look
    at the interface, create a very basic "Hello World" application, and make it run
    on the simulator and later on the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics extensively in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode application types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Xcode interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the app on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode application types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xcode comes with some predefined application types for creating some specific
    types of applications. They are the **Master-Detail Application**, **Page-Based
    Application**, **Single View Application**, **Tabbed Application**, and **Game**
    types, as shown in the following screenshot. We have already seen what is in the
    **Game** type, so let''s look at the other types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Xcode application types](img/B04014_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Master-Detail Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to create a very basic application type, such as the *Notes* application,
    for the iOS, you should choose this template and then modify it to create your
    application. There is a **Master** list (shown in the following screenshot), and
    when you click on the each item on the list, it will show the details of the selected
    item from the list. There is a customizable **Master** button in the top-left
    corner of the **Detail** view. Clicking on it will take you back to the **Master**
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Master-Detail Application](img/B04014_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can create the project in a way similar to how you created the **Game**
    application in the first chapter: click on the icon for the type of application,
    and then select the name of the project, its location, bundle ID, and platforms
    that you want to create the app for.'
  prefs: []
  type: TYPE_NORMAL
- en: Page-Based Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to create an application that resembles a book with a page-flipping
    effect, you need to choose the **Page-Based Application** template. You can specify
    the book cover and then add content to the pages to create a flipbook application.
    You can swipe your fingers to the left to turn to the next page, or swipe to the
    right to go back to the previous page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Page-Based Application](img/B04014_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tabbed Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Tabbed Application** template will have a row of buttons at the bottom
    of the screen, and clicking through it will show you different views. A **Tabbed
    Application** template is similar to the way the tabs work when opening the *Music*
    app on your device. When the Music app is opened, the tab displayed is **Playlists**.
    The other tabs are **Artists**, **Songs**, **Albums**, **Genres**, **Compilations**,
    and **Composers** (the last tab). The **Playlist** tab shows the playlists that
    you have stored, but if you click on the **Artists** tab, it will show a list
    of songs that has been sorted by artists. If you build the default application,
    you will have two tabs: **First** and **Second**. Clicking on the tab at the bottom
    will open the respective screens, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabbed Application](img/B04014_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Single View Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Single View Application** template is the most basic one. If your application
    doesn't adhere to any of the previous application template types, then you can
    use this to create your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we will start from the basics, so we will create a Single
    View Application. Click on **Xcode** to open it and then on **Create a new Xcode
    project**. Under **iOS**, select **Application** on the left panel. Then, select
    **Single View Application** and create it.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a project and run it, the simulator will open up to show a blank
    screen, as shown in the following screenshot. When I said **Single View Application**
    templates are the most basic, I wasn't kidding. You will get a single view controller
    and no buttons to navigate. The advantage here is that you will see some basic
    classes that Apple already provides for creating the app from scratch, and then
    you can add items of your own to make it your app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Single View Application](img/B04014_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should save this blank project, as we will be referring to it when we cover
    the interface of Xcode in the next section. So go ahead; name the file and save
    the project in the Mac.
  prefs: []
  type: TYPE_NORMAL
- en: The Xcode interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are continuing from the previous section, then open the single view application
    you created in the previous section. Otherwise, you can create a new Single View
    Application project. As we will be spending most of our time looking at this window
    for the rest of the book, let's get a detailed understanding of its layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the project and you will be greeted with the window that is shown in the
    following screenshot. The top area of the **Project** view is called a toolbar.
    Below the toolbar on the left is the **Project Navigation** Panel. Right under
    in the middle is the **Editor** panel, and to the right of that is the **Utilities**
    panel. There is one more panel, the **Debug** panel, that might not be open by
    default, but we will activate it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Xcode interface](img/B04014_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a lot of information in each of the toolbars and panels. Let's look
    at them individually.
  prefs: []
  type: TYPE_NORMAL
- en: The toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The top of the Xcode project is the toolbar. Next to the maximize button on
    the left, the play and stop button are for running and stopping the application.
    Next to these buttons are the schemes in which you can select the target app and
    the device that you would like to run the application on, whether it is an actual
    device or a simulator.
  prefs: []
  type: TYPE_NORMAL
- en: At the center of the toolbar is the Activity View. This shows the status of
    the application at any given time. When you build a project, it will show the
    progress of the build, displaying the various stages of the build process.
  prefs: []
  type: TYPE_NORMAL
- en: '![The toolbar](img/B04014_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To the right of the Activity View, there are two sets of three buttons. The
    first set of three buttons on the right is used to change the **Editor** panel
    according to your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard Editor**: This is activated by default whenever a new project is
    created. This setting is used when coding, debugging, or navigating through the
    project. We will be using this panel almost all the time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assistant Editor**: Click on this button and another panel will open up to
    the right of **Standard Editor**. This is called **Assistant Editor**. It will
    provide more information, depending on what is clicked on in **Standard Editor**.
    In the following example, in the navigation panel, I clicked on the `Main.Storyboard`
    file. The **Standard Editor** changes to display the objects in the file, and
    the **Assistant Editor** shows the contents of the class associated with the View
    Controller as it is selected in the **Standard Editor**.![The toolbar](img/B04014_03_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version Editor**: When selected, the **Standard Editor** is again split into
    two panels, and we will be able to see and compare the changes in the current
    and previous versions of the code. In the example shown in the following screenshot,
    I made some changes to the `ViewController.swift` file. The comment added is highlighted
    on the left panel, and the right panel shows where these changes are being made
    to the file. This is obviously very powerful when using source code management
    for your project. Source Control Management is already included in Xcode and is
    initiated when a new project is created.![The toolbar](img/B04014_03_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The three buttons to the right of the editor are used to hide and show the **Navigator**,
    **Debug**, and **Utilities** panels. These panels can be shown or hidden as per
    your requirement or convenience. For example, to take the preceding screenshot
    and get more screen real estate, I hid the utilities panel by clicking on the
    rightmost button.
  prefs: []
  type: TYPE_NORMAL
- en: That is all for the toolbar. Let's look at the **Navigation** panel next.
  prefs: []
  type: TYPE_NORMAL
- en: The Navigation panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below the toolbar on the left is the **Navigation** panel. It has eight tabs.
    From left to right, they are **Project Navigation**, **Symbol**, **Find**, **Issue**,
    **Test**, **Debug**, **Breakpoint**, and **Report Navigator**. Clicking on any
    tab will activate it. By default, the **Project Navigation** tab is selected.
  prefs: []
  type: TYPE_NORMAL
- en: The Project Navigation tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Project Navigation** tab shows the content of the files that you have
    in a project, including code files and asset files. Later, if you add frameworks
    to the games, those will also be displayed is this panel, making it easier to
    navigate through. As we saw earlier, you can edit code by clicking on a code file
    such as a `.swift` file, and in the editor window, you can add, remove, and modify
    code. If you have image assets and three-dimensional meshes, those files will
    also be shown here. By clicking on the images and three-dimensional files, you
    can view the content, but you will not be able to modify it. For that, you will
    need to open the file in applications such as Photoshop to edit images and three-dimensional
    packages such as `Maya` or `3dsmax` to edit the three-dimensional geometry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Project Navigation tab](img/B04014_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can organize a set of files using folders (called **groups** here). Keep
    in mind that this is meant just to organize files in **Project Navigator**. Creating
    a new group or folder in the **Navigation** panel won't create a folder in the
    project directory in the system.
  prefs: []
  type: TYPE_NORMAL
- en: The Symbol Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next button to the right is the **Symbol Navigator** tab. You can access
    all the symbols such as functions, methods, properties, classes, structs, enums,
    and variables in the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Symbol Navigator tab](img/B04014_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**C** denotes that it is a class, **M** stands for method, and **P** stands
    for property. There are other notations also, but these are the most basic notations
    you will usually come across.'
  prefs: []
  type: TYPE_NORMAL
- en: So, in the `AppDelegate` class, there are six methods and a property called
    `window`.
  prefs: []
  type: TYPE_NORMAL
- en: The Find Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Find Navigator** tab is used to search for phrases or files in the project
    by name. In the following example, I am trying to search for the term `UIKit`,
    and it looks as if it is imported in the three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Find Navigator tab](img/B04014_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also choose to search for the keyword in the current score, or create
    a new scope to look in other places. Also, by clicking on the **Find** drill-down
    arrow, you can choose to find or replace commands on text that contain, match,
    start with, or end with your search term.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Find Navigator tab](img/B04014_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Issue Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The errors and warnings list, count, and description will be displayed in the
    **Issue Navigator** tab whenever your project has build errors. You can click
    on the items in the list to show the location and file where the error exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Issue Navigator tab](img/B04014_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, I forgot to close the comment section in the `ViewController`
    class, so I get an error after building the project telling me that in `ViewController.swift`,
    there is an undetermined `/*` comment. In some cases, the error message may not
    be very explicit, but at least, you will get a hint of what might be causing the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: The Test Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using unit tests on the project, then the results of the test are
    displayed in the **Test Navigator** tab. Unit testing is a topic in itself, and
    is unfortunately beyond the scope of this book. To know more about unit testing,
    you can look at Apple's official documentation for more information at [https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1](https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1).
  prefs: []
  type: TYPE_NORMAL
- en: '![The Test Navigator tab](img/B04014_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Debug Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Debug Navigator** tab is used for debugging and showing how optimized
    your code is. This navigator is active only when an application is running. While
    an application is running on the simulator or on a device, we can get information
    regarding CPU, memory, disk, and network usage. Apart from general system information,
    you also get a stack of methods and functions that were called in the corresponding
    order. Clicking on the methods and functions will open them in the editor panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Debug Navigator tab](img/B04014_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are two buttons to the right of the running app. The first button on the
    left lets you hide or show the gauges, and the button on right lets you select
    whether you want to view the **Process by thread**, **Process by Queue**, or **View
    by UI Hierarchy**.
  prefs: []
  type: TYPE_NORMAL
- en: The Breakpoint Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Breakpoint Navigator** tab shows the location of all the breakpoints we've
    added to the files in the project. The location of the breakpoints is shown class-
    and method-wise. It will also show the line number on which the breakpoint was
    added.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Breakpoint Navigator tab](img/B04014_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By right-clicking on the any breakpoints, you can edit, disable, share, delete,
    or move it.
  prefs: []
  type: TYPE_NORMAL
- en: The Report Navigator tab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Report Navigator** tab shows the history of the recent builds and logs
    of the project, along with a timestamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Report Navigator tab](img/B04014_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This concludes the section on the **Navigation** panel.
  prefs: []
  type: TYPE_NORMAL
- en: The Utility panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The top part of the **Utility** panel is context-sensitive, depending on what
    kind of file is clicked on in the **Navigation** panel. The bottom part of the
    **Utility** panel has four tabs for the different library types used to drag-and-drop
    certain library-specific objects onto the **Editor** panel. Sometimes, the top
    part gets hidden under the bottom part of the panel, but you can drag the bottom
    part of the utility to reveal the content hidden under it.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Utility panel](img/B04014_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Utility** panel is better understood once we jump through the project
    and look at each file individually.
  prefs: []
  type: TYPE_NORMAL
- en: The Single View Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go back to the **Project Navigator** tab. This is the first tab from the left
    in the **Navigation** panel. Let's look at the files in the **Project Navigator**
    tab. The **Project Navigator** tab shows the project root and under it, all the
    files associated with the project. Let's look at the project root first.
  prefs: []
  type: TYPE_NORMAL
- en: The project root
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you click on the root of the application that is at the top of the tab,
    you will see the **Editor** panel change to display six tabs: **General**, **Capabilities**,
    **Info**, **Build Settings**, **Build Phases**, and **Build Rules**. Most of the
    time, you will be concerned with the first three tabs: **General**, **Capabilities**,
    and **Info**.'
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This tab contains the basic information about the app. We had a brief look
    at it in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*,
    when we changed the orientation of the game. This tab has five subsections, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General](img/B04014_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot has the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity**: This shows the bundle identifier, version number of the app,
    build number of the app, and team. We will look at the team when we deploy the
    app on the device, as it requires some steps to get it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment Info**: Here, you can select the value of **Deployment Target**.
    By default, we are targeting iOS 8.1 devices here, but if we want our app to be
    compatible with previous version, we can use 7.0\. However, we must make sure
    we are not using any APIs from 8.1, in which case the app will give build errors.
    We can select the device that we want to target, whether we want to target the
    iPhone or iPad, or make a universal app. The main interface file is the first
    file that will be called when the application has finished loading. The files
    here should have the`.storyboard` extension, so here we are calling the `Main.storyboard`
    file when the application launches. We can also change the device orientation
    here and select the value for **Status Bar Style**, and also hide the status bar
    by clicking on the check box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Icons and Launch Images**: The source file for the app icons is provided
    here. The `AppIcon` file is selected here. If you are wondering where this file
    is, it is in the `Images.xcassets` folder. We will use this file to assign the
    icons for different iOS versions and devices. If you want an image to be displayed
    at launch of the application, you can create an asset catalog file to display
    the launch images for different devices and iOS versions, similar to icons. We
    can also specify a launch screen file, which will be displayed while the application
    is launching. Here, the `LaunchScreen` file will be displayed during the launch.
    The file extension for the `LaunchScreen` file, which was in `.nib` format previously,
    should be in `.xib` format. Even though the extension has changed, they are still
    referred to as NIB files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embedded Binaries**: This shows any binaries that are embedded in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linked Frameworks and Libraries**: This displays the list of frameworks and
    libraries included in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Capabilities tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This shows the Apple services that the application uses. To use a service, you
    will need to activate it by turning it **ON** on the right-hand side. Games usually
    use services such as GameCenter, In-App Purchases, and iCloud integration for
    cloud saves.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Capabilities tab](img/B04014_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Info tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Info** tab contains information regarding the version number, build number,
    storyboard file base name (which is the storyboard file to be loaded at start
    of the app), app name, and some other information. All of this information is
    loaded from the `info.plist` file, which is located in the `Supporting Files`
    folder of the project. There are some other things such as document types, exported
    UTIs, imported UTIs, and URL types, which, for the most part, you won't be dealing
    with during the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Info tab](img/B04014_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Build Settings tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The basic view of the **Build Settings** tab shows information regarding deployment,
    such as the target device and iOS version, location of the path for frameworks,
    packaging info such as location of the `info.plist` file and **Product Name**,
    **Asset Catalog App Icon Set Name**, and other user-defined settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Build Settings tab](img/B04014_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A more detailed look can be taken by clicking on the **All** tab instead of
    **Basic**. This will give information about the setting for the architectures
    supported, locations and options for the build, and code signing, which we will
    cover when we are ready to test the app on the device and deploy it on the App
    Store. It has further settings and information regarding the kernel module, linker,
    and compiler.
  prefs: []
  type: TYPE_NORMAL
- en: The Build Phases tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Build Phases** tab shows the target dependencies added, list of source
    files, libraries added, and asset resources added.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Build Phases tab](img/B04014_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This tab is sort of important, in the sense that when you want to add frameworks
    to your project, you will have come to this tab to include them. Also, sometimes
    when you get build errors, you might want to check whether all the required source
    files are actually in the **Compile Sources** list, as this can be the reason
    for build errors. Build errors can be introduced once your project becomes bigger
    as you might end up deleting some source files.
  prefs: []
  type: TYPE_NORMAL
- en: The Build Rules tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will probably never be required to change anything here, as it is mostly
    used if you want a specific file type to compile in a certain way. To define a
    custom process for a certain file type, you just have to create a new build rule.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Build Rules tab](img/B04014_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have taken a look at the project root, you can click on the small
    triangle button to the side of the project root to open the project tree, if it
    is not already open.
  prefs: []
  type: TYPE_NORMAL
- en: Under the created project, there are three groups. The first is given the same
    name as the project. The second group holds the files for the project test files,
    so it will always have the project name and be suffixed with `Tests`. The third
    is the **Products** group, containing the `.app` file and the `Tests` files. For
    the majority of the time, we will be dealing with the files in the first group,
    that is, the group names after the name of the application. The first folder is
    where all the code, assets, and project-related files for the project should exist.
    You can create subfolders like the `Supported Files` folder to organize your project
    better. So, you can get a `Classes` folder that contains all the classes for the
    project, and an assets folder in which you can put your images, icons and three-dimensional
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at each of the files of the main project folder in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The project folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main project folder contains the `AppDelegate.swift`, `ViewController.swift`,
    `Main.Storyboard`, `Images.xcassets`, and `LaunchScreeb.xib` files; and the `Supported
    Files` folder.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as we open the `AppDelegate.swift` file, we see that the `AppDelegate`
    class inherits from the `UIResponder` and `UIApplicationDelegate` classes. Both
    of these classes are part of the UIKit. The UIKit framework is most important,
    as it is required to create and manage any iOS application. This framework provides
    basics elements such as window and view creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UIResponder` class is responsible for handling events such as detecting
    touch and motion events. For touch events, it has `touchesBegan`, `touchesMoved`,
    `touchesEnded`, and `touchesCancelled`, which are called when a finger touches
    the screen. There are three motion events: `motionBegan`, `motionEnded`, and `motionCancelled`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UIApplicationDelegate`: This is a subclass of `UIResponder` that responds
    to events during the life cycle of the application. The functions in the `AppDelegate`
    class are from `UIApplicationDelegate`, which will be called when any of those
    functions are triggered by the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationdidFinishinLaunchingWithOptions`: This is the function that gets
    called when the application has finished launching. It returns `true` when the
    application is launched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationWillResignActive`: This is called after the application has just
    become inactive and is about to go to the background. It is triggered when you
    either receive a phone call or press the home button to switch apps. It is used
    to disable timers or pause any update function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationDidEnterBackground`: When the application has gone to the background
    and is no longer active, this function gets called. You can save the user score
    and make the application ready, if it is about to be terminated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationWillEnterForeground`: Once the application sitting in the background
    is selected and is about to be active again, this function is called. Since the
    user didn''t terminate the application, you can restore the values to the previous
    state here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationDidBecomeActive`: Now the application is fully active again, so
    you can resume the game and unpause and resume the update function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationWillTerminate`: This is the last function that will get called
    before the application fully terminates, so you might want to save the game and
    release all objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an optional variable created, called window, and it is of the UIWindow
    type. Each application created is inside a window, and this window variable will
    give access to the current window. If needed, you can assign the current window
    to this variable to gain access to the properties of the currently running window,
    such as the size of the window.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at `ViewController.swift`, you need to get an understanding of
    `Main.Storyboard`, as the `ViewController.swift` class is called through `Main.StoryBoard`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Main.storyboard` file is automatically called right after the application
    has finished launching. This is done automatically by Xcode as a standard protocol,
    and therefore, you won''t see it getting called in the `applicationDidFinishLaunching`
    function in the `AppDelegate` class. We have already called it in the **General**
    tab of the project root. Let''s now look at the file in detail and see what it
    does. For this, you need to understand what storyboards are in iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project folder](img/B04014_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A storyboard is a part of iOS Interface Builder or UITookit. It is used to create
    a user interface without writing any code. You can add buttons, texts, or sliders
    to your app. Also, by clicking on the button, you can make the app change views
    by creating a link between the current view and the next view. You can create
    a chain of such views to create the screen flow for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Every storyboard needs a ViewController to start the application with. ViewControllers
    are like screens that create the building blocks of the app. You will be linking
    the ViewControllers in the storyboard to develop the screens for any app you want.
  prefs: []
  type: TYPE_NORMAL
- en: The ViewController is associated with the custom class `ViewController.swift`
    file. This can be seen in the **Utility** panel by clicking on the **Identity
    Inspector** (third tab from the left). In the custom class, in the `class` field,
    the `ViewController` class is specified. We will cover more on **Utility** panel
    later.
  prefs: []
  type: TYPE_NORMAL
- en: '![The project folder](img/B04014_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are not able to see the ViewController tree, you can click on the small
    box icon at the bottom-left corner of the **Editor** panel to open it. The **View
    Controller Scene** has **View Controller**, **First Responder**, and **Exit**.
  prefs: []
  type: TYPE_NORMAL
- en: '![The project folder](img/B04014_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the triangle next to the ViewController, you will see that it
    contains three more items: **Top Layout Guide**, **Bottom Layout Guide**, and
    **View**. The top and bottom layout show the top and bottom ends of the view.
    The top starts after the battery indicator icon and the bottom ends at the bottom
    of the view. These are more like guides to let you know the limits that you need
    to be working within. The **View** item is the entire area the user will be able
    to see when the ViewController opens.'
  prefs: []
  type: TYPE_NORMAL
- en: The **First Responder** item is the first object that you interact with in the
    ViewController. This will send the message to the UIResponder. Each time you click
    on a button, interact with a slider, or enter the text field, **First Responder**
    gives information on what you are interacting with at that time. So, if you click
    on a button, the responder will know immediately that you are clicking on a button.
  prefs: []
  type: TYPE_NORMAL
- en: Exit is used when you want the user to be sent to a different ViewController.
    This can be the previous ViewController from which the user came to the present
    scene, or it can be some other ViewController. This is not all that important
    at this stage as long as you understand what a ViewController is.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have seen that `ViewController.swift` gets called through the `ViewController`
    object in the `.storyboard` file. Inside the `ViewController.swift` file, there
    are two functions: one is `ViewDidLoad` and the other is `didReceieveMemoryWarning`.
    In the `.storyboard` file, we saw that `ViewController` contains the view. When
    the view gets created, the `ViewDidLoad` function gets called. This means that
    the ViewController can display whatever is in the view and it is ready for any
    interaction that the user might have with the view.'
  prefs: []
  type: TYPE_NORMAL
- en: The `didReceieveMemoryWarning` function gets called exactly when that happens.
    This function will get called either when you have too many apps open on the device,
    or if your program is not releasing the objects that it created earlier from the
    memory. The latter shouldn't be a problem because Swift has its own garbage collection,
    so you have to worry only about releasing memory.
  prefs: []
  type: TYPE_NORMAL
- en: '`Images.xcasstes` will contain all the image assets for the project. As of
    now, the only file in it is the `AppIcon` set. In this file, all the different
    iOS versions and resolutions of the icon images are shown with placeholders.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the icon set for the game *pizZapMania* that was created.
    The value mentioned under each set is the base dimension. The base for the first
    icon in the top left is 29 points, so to create icons for iOS 5 and 6, we will
    need two icons: one at **1x**, meaning 29 x 29 pixels, and another twice that
    size. Similarly, icons will have to be created for all the base values and multiplication
    factors mentioned for a particular device.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project folder](img/B04014_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While looking at the **General** tab of the project root, we saw that the `LaunchScreen.xib`
    file is called at the launch of the app. So what is this XIB file?
  prefs: []
  type: TYPE_NORMAL
- en: '![The project folder](img/B04014_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The XIB file is called the NIB file (just as `.xib` was previously `.nib`) or
    NeXTSTEP Interface Builder. As of now, this file is XML-based and `n` is replaced
    by `x`, but it is still called a NIB file. So, when someone refers to a NIB file,
    they mean an XIB file. According to Apple, storyboards are the way to go forward
    as they support multiple view controllers and a `.xib` file can have only one.
    Since in this case the application and the launch screen both use a single view
    controller, it is the same.
  prefs: []
  type: TYPE_NORMAL
- en: The `Launchscreen.xib` file adds two labels upon the creation of the project,
    by default. The first label is the name of the app, placed at the center of the
    view, and the other is placed at the bottom of the view to display the copyright
    information. Click on either of the text to see the **Utility** panel light up
    like a Christmas tree. Let's finally look at the **Utility** panel.
  prefs: []
  type: TYPE_NORMAL
- en: The Utility panel (Redux)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The top part of the **Utility** panel contains six inspector tabs, and the bottom
    part has four library tabs. Let's first look at the inspector tabs one by one.
  prefs: []
  type: TYPE_NORMAL
- en: The inspector tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start from the leftmost tab, the **File Inspector** tab, and then we will
    look at the **Quick Help Inspector**, **Identity Inspector**, **Attributes Inspector**,
    **Size Inspector**, and **Connections Inspectors** tabs. The main tab to remember
    is **Attributes Inspector**. We will just glance at the rest.
  prefs: []
  type: TYPE_NORMAL
- en: The File Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **File Inspector** tab gives information about the parent file that the
    current object is attached to. Here, the label is attached to the `LaunchScreen.xib`
    file and is located in the `Base.lproj` directory on the Mac.
  prefs: []
  type: TYPE_NORMAL
- en: '![The File Inspector tab](img/B04014_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It shows the Xcode version that can open it, the build target version, and the
    iOS version supported by the document. It also has details regarding **Source
    Control**, such as the repository name, type, and branch.
  prefs: []
  type: TYPE_NORMAL
- en: The Quick Help Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Quick Help Inspector** tab provides a brief description, features, and
    capabilities of the item selected. Here, since we selected the label, it shows
    the parent class of the label, which is `UILabel`. It also provides other details,
    such as **Availability**, which tell us which iOS versions support this.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Quick Help Inspector tab](img/B04014_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Identity Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Identity Inspector** tab helps in assigning and managing metadata for
    any object, which in this case will be the text label selected. It also shows
    the custom class attached to it. Here, it is expecting a class that is inherited
    from the `UILabel` class.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Identity Inspector tab](img/B04014_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Attributes Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is where you can edit the properties of the object selected. So here, we
    can change the look, color, position, search, and text—as we can for a page of
    a word document.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Attributes Inspector tab](img/B04014_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Size Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The **Size Inspector** tab helps you position the object, set the size of the
    object, and add constraints for further assistance in positioning the object correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Size Inspector tab](img/B04014_03_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Connections Inspector tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As explained earlier, we can connect the ViewControllers to create the screen
    flow and transition from one ViewController to the next. In the **Connections
    Inspector** tab, we can see which objects are connected to which outlet.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Connections Inspector tab](img/B04014_03_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The library contains four tabs: **File Template**, **Code Snippet**, **Object**,
    and **Media Library**.'
  prefs: []
  type: TYPE_NORMAL
- en: The File Template tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you want to create a new file, you can either navigate to **File** | **New**
    or simply drag the required file type into the project navigator.
  prefs: []
  type: TYPE_NORMAL
- en: '![The File Template tab](img/B04014_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, if we want to, we can drag the **Swift File** template into our project,
    and once we release the left mouse button, Xcode will ask us to save the file.
    Then we will be able to rename the file and it will be included in the project.
  prefs: []
  type: TYPE_NORMAL
- en: The Code Snippet Library tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: These contain a collection of code blocks that can be dragged and dropped into
    your file to remove rework.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Code Snippet Library tab](img/B04014_03_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Object Library tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the object library, you have predefined objects such as **Text**, **Label**,
    and **Button** that can be dropped into the ViewController.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Object Library tab](img/B04014_03_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Media Library tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tab contains all media, such as **Movies**, **Audio**, and **Images**,
    that you have added to the library and dragged into your app. Currently, no media
    have been added, so this tab is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Media Library tab](img/B04014_03_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This concludes the section on the **Utility** panel. Now that we have covered
    the other files and looked at the **Utility** panel, let's look at the last folder
    in the project hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: The `Supported Files` folder/group contains only an `info.plist` file, which
    consists all of the necessary information about the app. It will contain details
    such as the name of the app, bundle name, version number of the app, and other
    basic information about the app to Xcode. Mostly, we will be making changes to
    this file only when we upload an update to an application that is already live
    on the store, and we would want the version number of the latest build to be 1.1
    instead of 1.0\. We will cover this when we publish the app on the App Store in
    the last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Debug panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is one more panel that we haven't covered yet, and that is the **Debug**
    panel. This can be activated by clicking on the middle button from the three-button
    set to the right of the toolbar and left to the **Utility** panel. Once you click
    on it, the panel shown in the following screenshot will open up. You can click
    on it again to hide it.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Debug panel](img/B04014_03_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Debug** panel or area has two subsections. To the left is the **Variables**
    view, and to the right is **Console**. Whatever you log using the `println` function
    will get displayed here. For example, in the ViewController class in the `viewDidLoad`
    function, I logged this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When I ran the application, the message popped up in the console. So, similar
    to how we logged information in the playground, we can do it in Xcode, but to
    see it, you obviously need to run the application—unlike playground.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have this awesome app, we can see how to run it on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app on the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All this time, we ran the app on the simulator. Making the app run on the simulator
    is relatively easier—select the simulator to run the app on, click on the play
    button, and that's it! To run the app on a device, however, you'll need to perform
    a couple of steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to get the **Developer** certificate and install it. So, go
    to the iOS developer portal at [https://developer.apple.com](https://developer.apple.com),
    click on **Member Center**, and type in the login name and password we created
    in the [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*:'
  prefs: []
  type: TYPE_NORMAL
- en: Under **Developer Program Resources**, click on **Certificates, Identifiers
    & Profiles**.![Running the app on the device](img/B04014_03_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **iOS Apps**, click on **Certificates**.![Running the app on the device](img/B04014_03_43.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Certificates**, click on **Development**. In the top-right corner, click
    on the **+** sign next to the search button.![Running the app on the device](img/B04014_03_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **iOS Development** once the page loads and then click on **Continue**.
    Then, we have to create a certificate signing request.![Running the app on the
    device](img/B04014_03_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your Mac, open *Keychain* by clicking on *Launchpad*. Once the *KeyChain*
    app is opened, go to **CertificateAssistant** and click on **Request a Certificate
    From a Certificate Authority...**.![Running the app on the device](img/B04014_03_46.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the popup, type the e-mail address that you used to create the Apple Developer
    ID. Then type a common name for reference, select **Saved to Disk**, and click
    to continue to select the location where you want the certificate to be downloaded.
    You can save it on the desktop for now, but later, move it to a safer place.![Running
    the app on the device](img/B04014_03_47.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the iOS Developer portal and click on **Continue**. Now, you have
    to upload the CSR file that you saved on the Mac in the previous step. Click on
    **Choose file**, navigate to the desktop where you downloaded the file, select
    it, and click on **Generate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now your certificate is ready. Click on **Download** to download the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the downloaded file to install it. Then, click on **Done**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open Xcode, go to **Preferences**, click on **Accounts**, and then click
    on **View Details**. In the top part, it should show the iOS Development meaning
    that the certificate is installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This certificate is only for development. For distribution, you will have to
    download a distribution certificate, which we will do once we are ready to publish
    our game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, plug in your device to Mac. Xcode will automatically assume that you will
    use the device connected for development and register it for you. You can see
    all the registered devices. Open Xcode and, from the top bar, select **Window**
    and then **Devices** to show all the registered devices. You can have up to 100
    devices registered to test your application.![Running the app on the device](img/B04014_03_48.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the top-left corner next to the play button, from where we previously
    used to select the simulator, we can select the device.![Running the app on the
    device](img/B04014_03_49.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There''s one final step: we still have to select the team to make the app run
    on the device. So, go to the **Project Navigator** tab and select the project
    root. In the Editor, under team, scroll down to select the team.![Running the
    app on the device](img/B04014_03_50.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if everything goes well, you should be able to run the app on the device.
    Congratulations!!!!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the interface of Xcode. I hope that you now have
    a good idea about the different panels and how to access, activate, and deactivate
    them. I intentionally haven't covered the **File**, **Edit**, and **View** menus
    because these are somewhat similar to other applications. If needed, we will go
    through some of them on a need-to-know basis.
  prefs: []
  type: TYPE_NORMAL
- en: As an exercise, you can try and change the color of the view, or change the
    height and type in the `.storyboard` file. You can also make similar changes in
    the NIB file and the app a little more colorful.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how Xcode works, we will jump straight into game development
    using SpriteKit. Once we have mastered 2D space, we will look at the 3D space
    in SceneKit.
  prefs: []
  type: TYPE_NORMAL
