- en: Chapter 3. An Introduction to Xcode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。Xcode简介
- en: In the last chapter, we saw the Playground tool. It's a simple tool to test
    your code, but if you want to actually create an application and run it on a device
    or publish and distribute it through the Mac or iOS App Store, you need to create
    an Xcode project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了Playground工具。这是一个简单的测试代码的工具，但如果你想要真正创建一个应用程序并在设备上运行它，或者通过Mac或iOS
    App Store发布和分发它，你需要创建一个Xcode项目。
- en: In this chapter, we will take a tour of Xcode. We will take a detailed look
    at the interface, create a very basic "Hello World" application, and make it run
    on the simulator and later on the device.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将游览Xcode。我们将详细查看界面，创建一个非常基本的“Hello World”应用程序，并在模拟器和稍后设备上运行它。
- en: 'We will be covering the following topics extensively in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细介绍以下主题：
- en: Xcode application types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode应用程序类型
- en: The Xcode interface
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode界面
- en: Running the app on the device
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设备上运行应用程序
- en: Xcode application types
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xcode应用程序类型
- en: 'Xcode comes with some predefined application types for creating some specific
    types of applications. They are the **Master-Detail Application**, **Page-Based
    Application**, **Single View Application**, **Tabbed Application**, and **Game**
    types, as shown in the following screenshot. We have already seen what is in the
    **Game** type, so let''s look at the other types:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode提供了一些预定义的应用程序类型，用于创建特定类型的应用程序。它们是**主-详细应用程序**、**基于页面的应用程序**、**单视图应用程序**、**标签页应用程序**和**游戏**类型，如下面的截图所示。我们已经看到了**游戏**类型的内容，所以让我们看看其他类型：
- en: '![Xcode application types](img/B04014_03_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode应用程序类型](img/B04014_03_01.jpg)'
- en: Master-Detail Application
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主-详细应用程序
- en: 'If you want to create a very basic application type, such as the *Notes* application,
    for the iOS, you should choose this template and then modify it to create your
    application. There is a **Master** list (shown in the following screenshot), and
    when you click on the each item on the list, it will show the details of the selected
    item from the list. There is a customizable **Master** button in the top-left
    corner of the **Detail** view. Clicking on it will take you back to the **Master**
    screen:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要为iOS创建一个非常基础的应用程序类型，例如**笔记**应用程序，你应该选择这个模板，然后修改它以创建你的应用程序。有一个**主**列表（如下面的截图所示），当你点击列表上的每个项目时，它将显示列表中选定项目的详细信息。在**详细**视图的左上角有一个可定制的**主**按钮。点击它将带回到**主**屏幕：
- en: '![Master-Detail Application](img/B04014_03_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![主-详细应用程序](img/B04014_03_02.jpg)'
- en: 'You can create the project in a way similar to how you created the **Game**
    application in the first chapter: click on the icon for the type of application,
    and then select the name of the project, its location, bundle ID, and platforms
    that you want to create the app for.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以以类似于你在第一章中创建**游戏**应用程序的方式创建项目：点击应用程序类型的图标，然后选择项目的名称、位置、捆绑ID以及你想要为应用程序创建的平台。
- en: Page-Based Application
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于页面的应用程序
- en: If you want to create an application that resembles a book with a page-flipping
    effect, you need to choose the **Page-Based Application** template. You can specify
    the book cover and then add content to the pages to create a flipbook application.
    You can swipe your fingers to the left to turn to the next page, or swipe to the
    right to go back to the previous page.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建一个类似于翻页效果的书本应用程序，你需要选择**基于页面的应用程序**模板。你可以指定书封面，然后向页面添加内容以创建翻页应用程序。你可以用手指向左滑动以翻到下一页，或者向右滑动以返回上一页。
- en: '![Page-Based Application](img/B04014_03_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![基于页面的应用程序](img/B04014_03_03.jpg)'
- en: Tabbed Application
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标签页应用程序
- en: 'The **Tabbed Application** template will have a row of buttons at the bottom
    of the screen, and clicking through it will show you different views. A **Tabbed
    Application** template is similar to the way the tabs work when opening the *Music*
    app on your device. When the Music app is opened, the tab displayed is **Playlists**.
    The other tabs are **Artists**, **Songs**, **Albums**, **Genres**, **Compilations**,
    and **Composers** (the last tab). The **Playlist** tab shows the playlists that
    you have stored, but if you click on the **Artists** tab, it will show a list
    of songs that has been sorted by artists. If you build the default application,
    you will have two tabs: **First** and **Second**. Clicking on the tab at the bottom
    will open the respective screens, like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**标签页应用程序**模板将在屏幕底部有一排按钮，点击它将显示不同的视图。**标签页应用程序**模板类似于在你的设备上打开*音乐*应用时标签页的工作方式。当音乐应用打开时，显示的标签是**播放列表**。其他标签包括**艺术家**、**歌曲**、**专辑**、**流派**、**合辑**和**作曲家**（最后一个标签）。**播放列表**标签显示你存储的播放列表，但如果你点击**艺术家**标签，它将显示按艺术家排序的歌曲列表。如果你构建默认的应用程序，你将有两个标签：**第一个**和**第二个**。点击底部的标签将打开相应的屏幕，如下所示：'
- en: '![Tabbed Application](img/B04014_03_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![标签页应用程序](img/B04014_03_04.jpg)'
- en: Single View Application
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单视图应用程序
- en: The **Single View Application** template is the most basic one. If your application
    doesn't adhere to any of the previous application template types, then you can
    use this to create your own applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**单视图应用程序**模板是最基本的。如果你的应用程序不符合任何之前的应用程序模板类型，那么你可以使用这个模板来创建自己的应用程序。'
- en: For this chapter, we will start from the basics, so we will create a Single
    View Application. Click on **Xcode** to open it and then on **Create a new Xcode
    project**. Under **iOS**, select **Application** on the left panel. Then, select
    **Single View Application** and create it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们将从基础知识开始，因此我们将创建一个单视图应用程序。点击**Xcode**以打开它，然后点击**创建一个新的Xcode项目**。在**iOS**部分，在左侧面板中选择**应用程序**。然后，选择**单视图应用程序**并创建它。
- en: When you create a project and run it, the simulator will open up to show a blank
    screen, as shown in the following screenshot. When I said **Single View Application**
    templates are the most basic, I wasn't kidding. You will get a single view controller
    and no buttons to navigate. The advantage here is that you will see some basic
    classes that Apple already provides for creating the app from scratch, and then
    you can add items of your own to make it your app.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个项目并运行它时，模拟器将打开以显示一个空白屏幕，如下面的截图所示。当我提到**单视图应用程序**模板是最基本的，我并不是在开玩笑。你将获得一个单视图控制器，没有任何按钮进行导航。这里的优势是，你将看到一些苹果已经提供的用于从头开始创建应用程序的基本类，然后你可以添加自己的项目以使其成为你的应用程序。
- en: '![Single View Application](img/B04014_03_05.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![单视图应用程序](img/B04014_03_05.jpg)'
- en: You should save this blank project, as we will be referring to it when we cover
    the interface of Xcode in the next section. So go ahead; name the file and save
    the project in the Mac.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该保存这个空白项目，因为我们将在下一节介绍Xcode界面时参考它。所以请继续；命名文件并将项目保存在Mac上。
- en: The Xcode interface
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xcode界面
- en: If you are continuing from the previous section, then open the single view application
    you created in the previous section. Otherwise, you can create a new Single View
    Application project. As we will be spending most of our time looking at this window
    for the rest of the book, let's get a detailed understanding of its layout.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在继续上一节的内容，那么请打开上一节中创建的单视图应用程序。否则，你可以创建一个新的单视图应用程序项目。由于我们将在接下来的书中大部分时间都会查看这个窗口，让我们详细了解其布局。
- en: 'Open the project and you will be greeted with the window that is shown in the
    following screenshot. The top area of the **Project** view is called a toolbar.
    Below the toolbar on the left is the **Project Navigation** Panel. Right under
    in the middle is the **Editor** panel, and to the right of that is the **Utilities**
    panel. There is one more panel, the **Debug** panel, that might not be open by
    default, but we will activate it later:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目，你将看到以下截图所示的窗口。**项目**视图的顶部区域被称为工具栏。工具栏下方左侧是**项目导航**面板。中间下方是**编辑器**面板，其右侧是**实用工具**面板。还有一个可能默认未打开的**调试**面板，但稍后我们将激活它：
- en: '![The Xcode interface](img/B04014_03_06.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode界面](img/B04014_03_06.jpg)'
- en: There is a lot of information in each of the toolbars and panels. Let's look
    at them individually.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工具栏和面板中都有很多信息。让我们逐一查看。
- en: The toolbar
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏
- en: The top of the Xcode project is the toolbar. Next to the maximize button on
    the left, the play and stop button are for running and stopping the application.
    Next to these buttons are the schemes in which you can select the target app and
    the device that you would like to run the application on, whether it is an actual
    device or a simulator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode项目的顶部是工具栏。在左侧的最大化按钮旁边，播放和停止按钮用于运行和停止应用程序。这些按钮旁边是方案，您可以在其中选择目标应用程序和您想要运行应用程序的设备，无论是实际设备还是模拟器。
- en: At the center of the toolbar is the Activity View. This shows the status of
    the application at any given time. When you build a project, it will show the
    progress of the build, displaying the various stages of the build process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏中央是活动视图。这显示了应用程序在任何给定时间的状态。当您构建项目时，它将显示构建进度，显示构建过程的各个阶段。
- en: '![The toolbar](img/B04014_03_07.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![工具栏](img/B04014_03_07.jpg)'
- en: 'To the right of the Activity View, there are two sets of three buttons. The
    first set of three buttons on the right is used to change the **Editor** panel
    according to your needs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动视图右侧，有两组三个按钮。右侧的第一组三个按钮用于根据您的需求更改**编辑器**面板：
- en: '**Standard Editor**: This is activated by default whenever a new project is
    created. This setting is used when coding, debugging, or navigating through the
    project. We will be using this panel almost all the time.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准编辑器**：每次创建新项目时都会默认激活。此设置用于编码、调试或导航项目。我们将几乎一直使用此面板。'
- en: '**Assistant Editor**: Click on this button and another panel will open up to
    the right of **Standard Editor**. This is called **Assistant Editor**. It will
    provide more information, depending on what is clicked on in **Standard Editor**.
    In the following example, in the navigation panel, I clicked on the `Main.Storyboard`
    file. The **Standard Editor** changes to display the objects in the file, and
    the **Assistant Editor** shows the contents of the class associated with the View
    Controller as it is selected in the **Standard Editor**.![The toolbar](img/B04014_03_08.jpg)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**辅助编辑器**：点击此按钮，将在**标准编辑器**右侧打开另一个面板。这被称为**辅助编辑器**。它将根据在**标准编辑器**中点击的内容提供更多信息。在以下示例中，在导航面板中，我点击了`Main.Storyboard`文件。**标准编辑器**会改变以显示文件中的对象，而**辅助编辑器**则显示与在**标准编辑器**中选择的视图控制器关联的类的内容。![工具栏](img/B04014_03_08.jpg)'
- en: '**Version Editor**: When selected, the **Standard Editor** is again split into
    two panels, and we will be able to see and compare the changes in the current
    and previous versions of the code. In the example shown in the following screenshot,
    I made some changes to the `ViewController.swift` file. The comment added is highlighted
    on the left panel, and the right panel shows where these changes are being made
    to the file. This is obviously very powerful when using source code management
    for your project. Source Control Management is already included in Xcode and is
    initiated when a new project is created.![The toolbar](img/B04014_03_09.jpg)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本编辑器**：当选择时，**标准编辑器**再次分为两个面板，我们将能够看到和比较当前版本和之前版本代码的变化。在以下截图所示的示例中，我对`ViewController.swift`文件进行了一些更改。左侧面板中突出显示了添加的注释，右侧面板显示了这些更改在文件中的位置。当使用源代码管理进行项目时，这显然非常强大。源代码管理已包含在Xcode中，并在创建新项目时启动。![工具栏](img/B04014_03_09.jpg)'
- en: The three buttons to the right of the editor are used to hide and show the **Navigator**,
    **Debug**, and **Utilities** panels. These panels can be shown or hidden as per
    your requirement or convenience. For example, to take the preceding screenshot
    and get more screen real estate, I hid the utilities panel by clicking on the
    rightmost button.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器右侧的三个按钮用于隐藏和显示**导航器**、**调试**和**实用工具**面板。这些面板可以根据您的需求或方便性显示或隐藏。例如，为了获取前面的截图并获取更多屏幕空间，我通过点击最右侧的按钮隐藏了实用工具面板。
- en: That is all for the toolbar. Let's look at the **Navigation** panel next.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏的所有内容就这些了。让我们接下来看看**导航**面板。
- en: The Navigation panel
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航面板
- en: Below the toolbar on the left is the **Navigation** panel. It has eight tabs.
    From left to right, they are **Project Navigation**, **Symbol**, **Find**, **Issue**,
    **Test**, **Debug**, **Breakpoint**, and **Report Navigator**. Clicking on any
    tab will activate it. By default, the **Project Navigation** tab is selected.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏左侧下方是**导航**面板。它有八个标签。从左到右，它们是**项目导航**、**符号**、**查找**、**问题**、**测试**、**调试**、**断点**和**报告导航器**。点击任何标签都会激活它。默认情况下，**项目导航**标签被选中。
- en: The Project Navigation tab
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目导航标签
- en: 'The **Project Navigation** tab shows the content of the files that you have
    in a project, including code files and asset files. Later, if you add frameworks
    to the games, those will also be displayed is this panel, making it easier to
    navigate through. As we saw earlier, you can edit code by clicking on a code file
    such as a `.swift` file, and in the editor window, you can add, remove, and modify
    code. If you have image assets and three-dimensional meshes, those files will
    also be shown here. By clicking on the images and three-dimensional files, you
    can view the content, but you will not be able to modify it. For that, you will
    need to open the file in applications such as Photoshop to edit images and three-dimensional
    packages such as `Maya` or `3dsmax` to edit the three-dimensional geometry:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目导航** 标签显示了你在项目中的文件内容，包括代码文件和资源文件。稍后，如果你向游戏中添加框架，这些框架也将在此面板中显示，使导航更容易。正如我们之前看到的，你可以通过单击代码文件（如
    `.swift` 文件）来编辑代码。在编辑器窗口中，你可以添加、删除和修改代码。如果你有图像资源文件和三维网格，这些文件也将在此处显示。通过单击图像和三维文件，你可以查看内容，但无法修改它。为此，你需要使用
    Photoshop 等应用程序打开文件来编辑图像，以及使用 `Maya` 或 `3dsmax` 等应用程序来编辑三维几何形状：'
- en: '![The Project Navigation tab](img/B04014_03_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![项目导航标签](img/B04014_03_10.jpg)'
- en: You can organize a set of files using folders (called **groups** here). Keep
    in mind that this is meant just to organize files in **Project Navigator**. Creating
    a new group or folder in the **Navigation** panel won't create a folder in the
    project directory in the system.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用文件夹（在这里称为 **组**）来组织一组文件。请注意，这只是为了在 **项目导航** 中组织文件。在 **导航** 面板中创建新的组或文件夹不会在系统项目目录中创建文件夹。
- en: The Symbol Navigator tab
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号导航标签
- en: The next button to the right is the **Symbol Navigator** tab. You can access
    all the symbols such as functions, methods, properties, classes, structs, enums,
    and variables in the project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的下一个按钮是 **符号导航** 标签。你可以访问项目中的所有符号，如函数、方法、属性、类、结构体、枚举和变量。
- en: '![The Symbol Navigator tab](img/B04014_03_11.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![符号导航标签](img/B04014_03_11.jpg)'
- en: '**C** denotes that it is a class, **M** stands for method, and **P** stands
    for property. There are other notations also, but these are the most basic notations
    you will usually come across.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**C** 表示这是一个类，**M** 表示方法，**P** 表示属性。还有其他符号，但这些是你通常会遇到的最基本的符号。'
- en: So, in the `AppDelegate` class, there are six methods and a property called
    `window`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 `AppDelegate` 类中，有六个方法和一个名为 `window` 的属性。
- en: The Find Navigator tab
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找导航标签
- en: 'The **Find Navigator** tab is used to search for phrases or files in the project
    by name. In the following example, I am trying to search for the term `UIKit`,
    and it looks as if it is imported in the three classes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**查找导航** 标签用于通过名称在项目中搜索短语或文件。在以下示例中，我正在尝试搜索术语 `UIKit`，看起来它被导入到三个类中：'
- en: '![The Find Navigator tab](img/B04014_03_12.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![查找导航标签](img/B04014_03_12.jpg)'
- en: You can also choose to search for the keyword in the current score, or create
    a new scope to look in other places. Also, by clicking on the **Find** drill-down
    arrow, you can choose to find or replace commands on text that contain, match,
    start with, or end with your search term.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以选择在当前评分中搜索关键字，或者创建一个新的范围在其他地方查找。此外，通过单击 **查找** 下拉箭头，你可以选择在包含、匹配、以搜索词开头或以搜索词结尾的文本上查找或替换命令。
- en: '![The Find Navigator tab](img/B04014_03_13.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![查找导航标签](img/B04014_03_13.jpg)'
- en: The Issue Navigator tab
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题导航标签
- en: 'The errors and warnings list, count, and description will be displayed in the
    **Issue Navigator** tab whenever your project has build errors. You can click
    on the items in the list to show the location and file where the error exists:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的项目有构建错误时，错误和警告列表、计数和描述将在 **问题导航** 标签中显示。你可以点击列表中的条目来显示错误存在的位置和文件：
- en: '![The Issue Navigator tab](img/B04014_03_14.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![问题导航标签](img/B04014_03_14.jpg)'
- en: In the preceding example, I forgot to close the comment section in the `ViewController`
    class, so I get an error after building the project telling me that in `ViewController.swift`,
    there is an undetermined `/*` comment. In some cases, the error message may not
    be very explicit, but at least, you will get a hint of what might be causing the
    error.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我忘记在 `ViewController` 类中关闭注释部分，所以在构建项目后，我得到了一个错误，告诉我 `ViewController.swift`
    中有一个未确定的 `/*` 注释。在某些情况下，错误消息可能不是很明确，但至少，你会得到一些关于可能引起错误的线索。
- en: The Test Navigator tab
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试导航标签
- en: If you are using unit tests on the project, then the results of the test are
    displayed in the **Test Navigator** tab. Unit testing is a topic in itself, and
    is unfortunately beyond the scope of this book. To know more about unit testing,
    you can look at Apple's official documentation for more information at [https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1](https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在项目中使用单元测试，则测试结果将在**测试导航器**选项卡中显示。单元测试是一个独立的话题，不幸的是，它超出了本书的范围。要了解更多关于单元测试的信息，您可以查看Apple官方文档，了解更多信息，请访问[https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1](https://developer.apple.com/library/ios/recipes/xcode_help-test_navigator/Recipe.html#//apple_ref/doc/uid/TP40013329-CH1-SW1)。
- en: '![The Test Navigator tab](img/B04014_03_15.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![测试导航器选项卡](img/B04014_03_15.jpg)'
- en: The Debug Navigator tab
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**调试导航器选项卡**'
- en: The **Debug Navigator** tab is used for debugging and showing how optimized
    your code is. This navigator is active only when an application is running. While
    an application is running on the simulator or on a device, we can get information
    regarding CPU, memory, disk, and network usage. Apart from general system information,
    you also get a stack of methods and functions that were called in the corresponding
    order. Clicking on the methods and functions will open them in the editor panel.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试导航器**选项卡用于调试并显示代码的优化程度。此导航器仅在应用程序运行时才处于活动状态。当应用程序在模拟器或设备上运行时，我们可以获取有关CPU、内存、磁盘和网络使用的相关信息。除了通用系统信息外，您还可以获得调用顺序的方法和函数的堆栈。点击方法和函数将在编辑器面板中打开它们。'
- en: '![The Debug Navigator tab](img/B04014_03_16.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![调试导航器选项卡](img/B04014_03_16.jpg)'
- en: There are two buttons to the right of the running app. The first button on the
    left lets you hide or show the gauges, and the button on right lets you select
    whether you want to view the **Process by thread**, **Process by Queue**, or **View
    by UI Hierarchy**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序右侧有两个按钮。左侧的第一个按钮允许您隐藏或显示仪表盘，右侧的按钮允许您选择是否要按**线程**、**队列**或**UI层次结构**查看进程。
- en: The Breakpoint Navigator tab
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**断点导航器选项卡**'
- en: The **Breakpoint Navigator** tab shows the location of all the breakpoints we've
    added to the files in the project. The location of the breakpoints is shown class-
    and method-wise. It will also show the line number on which the breakpoint was
    added.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**断点导航器**选项卡显示了我们在项目中添加到文件的断点位置。断点的位置按类和方法显示。它还会显示添加断点的行号。'
- en: '![The Breakpoint Navigator tab](img/B04014_03_17.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![断点导航器选项卡](img/B04014_03_17.jpg)'
- en: By right-clicking on the any breakpoints, you can edit, disable, share, delete,
    or move it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通过右键单击任何断点，您可以编辑、禁用、共享、删除或移动它。
- en: The Report Navigator tab
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**报告导航器选项卡**'
- en: 'The **Report Navigator** tab shows the history of the recent builds and logs
    of the project, along with a timestamp:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告导航器**选项卡显示了最近构建的历史记录和项目的日志，以及时间戳：'
- en: '![The Report Navigator tab](img/B04014_03_18.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![报告导航器选项卡](img/B04014_03_18.jpg)'
- en: This concludes the section on the **Navigation** panel.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于**导航**面板的部分。
- en: The Utility panel
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**实用工具**面板'
- en: The top part of the **Utility** panel is context-sensitive, depending on what
    kind of file is clicked on in the **Navigation** panel. The bottom part of the
    **Utility** panel has four tabs for the different library types used to drag-and-drop
    certain library-specific objects onto the **Editor** panel. Sometimes, the top
    part gets hidden under the bottom part of the panel, but you can drag the bottom
    part of the utility to reveal the content hidden under it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**实用工具**面板的顶部部分是上下文相关的，取决于在**导航**面板中单击了哪种类型的文件。**实用工具**面板的底部部分有四个选项卡，用于不同类型的库，以便将特定的库对象拖放到**编辑器**面板。有时，顶部部分会被面板的底部部分隐藏，但您可以拖动实用工具的底部部分来揭示其下的内容。'
- en: '![The Utility panel](img/B04014_03_19.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![实用工具面板](img/B04014_03_19.jpg)'
- en: The **Utility** panel is better understood once we jump through the project
    and look at each file individually.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**实用工具**面板一旦我们跳过项目并逐个查看每个文件，就会更容易理解。'
- en: The Single View Project
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**单视图项目**'
- en: Go back to the **Project Navigator** tab. This is the first tab from the left
    in the **Navigation** panel. Let's look at the files in the **Project Navigator**
    tab. The **Project Navigator** tab shows the project root and under it, all the
    files associated with the project. Let's look at the project root first.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**项目导航器**标签页。这是**导航**面板中从左数第一个标签。让我们看看**项目导航器**标签页中的文件。**项目导航器**标签页显示了项目根目录，以及其下的所有与项目相关的文件。让我们首先看看项目根目录。
- en: The project root
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目根目录
- en: 'When you click on the root of the application that is at the top of the tab,
    you will see the **Editor** panel change to display six tabs: **General**, **Capabilities**,
    **Info**, **Build Settings**, **Build Phases**, and **Build Rules**. Most of the
    time, you will be concerned with the first three tabs: **General**, **Capabilities**,
    and **Info**.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击标签页顶部的应用根时，您将看到**编辑器**面板变为显示六个标签：**通用**、**能力**、**信息**、**构建设置**、**构建阶段**和**构建规则**。大多数时候，您将关注前三个标签：**通用**、**能力**和**信息**。
- en: General
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: 'This tab contains the basic information about the app. We had a brief look
    at it in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*,
    when we changed the orientation of the game. This tab has five subsections, as
    shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此标签页包含有关应用的基本信息。我们在[第1章](ch01.html "第1章。入门")“入门”中简要地看过它，当我们改变游戏方向时。此标签页有五个子部分，如下截图所示：
- en: '![General](img/B04014_03_20.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![通用](img/B04014_03_20.jpg)'
- en: 'The preceding screenshot has the following sections:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图包含以下部分：
- en: '**Identity**: This shows the bundle identifier, version number of the app,
    build number of the app, and team. We will look at the team when we deploy the
    app on the device, as it requires some steps to get it.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标识**：这显示了应用捆绑标识符、应用的版本号、应用的构建号和团队。当我们将在设备上部署应用时，我们将查看团队，因为它需要一些步骤来获取它。'
- en: '**Deployment Info**: Here, you can select the value of **Deployment Target**.
    By default, we are targeting iOS 8.1 devices here, but if we want our app to be
    compatible with previous version, we can use 7.0\. However, we must make sure
    we are not using any APIs from 8.1, in which case the app will give build errors.
    We can select the device that we want to target, whether we want to target the
    iPhone or iPad, or make a universal app. The main interface file is the first
    file that will be called when the application has finished loading. The files
    here should have the`.storyboard` extension, so here we are calling the `Main.storyboard`
    file when the application launches. We can also change the device orientation
    here and select the value for **Status Bar Style**, and also hide the status bar
    by clicking on the check box.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署信息**：在这里，您可以选择**部署目标**的值。默认情况下，我们在这里针对的是iOS 8.1设备，但如果我们想让我们的应用与旧版本兼容，可以使用7.0。然而，我们必须确保我们没有使用任何8.1的API，否则应用将给出构建错误。我们可以选择我们想要的目标设备，无论是iPhone还是iPad，或者制作一个通用应用。主界面文件是当应用完成加载时将被调用的第一个文件。这里的文件应该有`.storyboard`扩展名，因此当应用启动时，我们在这里调用`Main.storyboard`文件。我们还可以在这里更改设备方向并选择**状态栏样式**的值，也可以通过点击复选框来隐藏状态栏。'
- en: '**App Icons and Launch Images**: The source file for the app icons is provided
    here. The `AppIcon` file is selected here. If you are wondering where this file
    is, it is in the `Images.xcassets` folder. We will use this file to assign the
    icons for different iOS versions and devices. If you want an image to be displayed
    at launch of the application, you can create an asset catalog file to display
    the launch images for different devices and iOS versions, similar to icons. We
    can also specify a launch screen file, which will be displayed while the application
    is launching. Here, the `LaunchScreen` file will be displayed during the launch.
    The file extension for the `LaunchScreen` file, which was in `.nib` format previously,
    should be in `.xib` format. Even though the extension has changed, they are still
    referred to as NIB files.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用图标和启动图像**：这里提供了应用图标的源文件。在这里选择了`AppIcon`文件。如果您想知道这个文件在哪里，它位于`Images.xcassets`文件夹中。我们将使用这个文件为不同的iOS版本和设备分配图标。如果您想在应用启动时显示图像，您可以创建一个资产目录文件来显示不同设备和iOS版本的启动图像，类似于图标。我们还可以指定一个启动屏幕文件，在应用启动时将显示该文件。在这里，`LaunchScreen`文件将在启动时显示。`LaunchScreen`文件的文件扩展名，之前是`.nib`格式，现在应该是`.xib`格式。尽管扩展名已更改，但它们仍然被称为NIB文件。'
- en: '**Embedded Binaries**: This shows any binaries that are embedded in the project.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入的二进制文件**：这显示了项目中嵌入的任何二进制文件。'
- en: '**Linked Frameworks and Libraries**: This displays the list of frameworks and
    libraries included in the project.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接的框架和库**：这显示了项目中包含的框架和库列表。'
- en: The Capabilities tab
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 能力选项卡
- en: This shows the Apple services that the application uses. To use a service, you
    will need to activate it by turning it **ON** on the right-hand side. Games usually
    use services such as GameCenter, In-App Purchases, and iCloud integration for
    cloud saves.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了应用程序使用的Apple服务。要使用服务，您需要在右侧将其**开启**。游戏通常使用GameCenter、应用内购买和iCloud集成等云保存服务。
- en: '![The Capabilities tab](img/B04014_03_21.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![能力选项卡](img/B04014_03_21.jpg)'
- en: The Info tab
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 信息选项卡
- en: The **Info** tab contains information regarding the version number, build number,
    storyboard file base name (which is the storyboard file to be loaded at start
    of the app), app name, and some other information. All of this information is
    loaded from the `info.plist` file, which is located in the `Supporting Files`
    folder of the project. There are some other things such as document types, exported
    UTIs, imported UTIs, and URL types, which, for the most part, you won't be dealing
    with during the course of this book.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息**选项卡包含有关版本号、构建号、故事板文件基本名称（这是应用程序启动时加载的故事板文件）、应用程序名称以及其他一些信息。所有这些信息都是从`info.plist`文件中加载的，该文件位于项目的`Supporting
    Files`文件夹中。还有一些其他内容，如文档类型、导出的UTI、导入的UTI和URL类型，在本书的大部分内容中，你不会与之打交道。'
- en: '![The Info tab](img/B04014_03_22.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![信息选项卡](img/B04014_03_22.jpg)'
- en: The Build Settings tab
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建设置选项卡
- en: The basic view of the **Build Settings** tab shows information regarding deployment,
    such as the target device and iOS version, location of the path for frameworks,
    packaging info such as location of the `info.plist` file and **Product Name**,
    **Asset Catalog App Icon Set Name**, and other user-defined settings.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建设置**选项卡的基本视图显示了有关部署的信息，例如目标设备、iOS版本、框架路径的位置、打包信息，例如`info.plist`文件的位置、**产品名称**、**资产目录应用图标集名称**以及其他用户定义的设置。'
- en: '![The Build Settings tab](img/B04014_03_23.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![构建设置选项卡](img/B04014_03_23.jpg)'
- en: A more detailed look can be taken by clicking on the **All** tab instead of
    **Basic**. This will give information about the setting for the architectures
    supported, locations and options for the build, and code signing, which we will
    cover when we are ready to test the app on the device and deploy it on the App
    Store. It has further settings and information regarding the kernel module, linker,
    and compiler.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**所有**选项卡而不是**基本**选项卡，可以查看更详细的信息。这将提供有关支持的架构的设置、构建的位置和选项以及代码签名的信息，这些内容将在我们准备在设备上测试应用程序并将其部署到App
    Store时进行介绍。它还包括有关内核模块、链接器和编译器的进一步设置和信息。
- en: The Build Phases tab
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建规则选项卡
- en: The **Build Phases** tab shows the target dependencies added, list of source
    files, libraries added, and asset resources added.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建阶段**选项卡显示了添加的目标依赖项、源文件列表、添加的库和添加的资产资源。'
- en: '![The Build Phases tab](img/B04014_03_24.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![构建阶段选项卡](img/B04014_03_24.jpg)'
- en: This tab is sort of important, in the sense that when you want to add frameworks
    to your project, you will have come to this tab to include them. Also, sometimes
    when you get build errors, you might want to check whether all the required source
    files are actually in the **Compile Sources** list, as this can be the reason
    for build errors. Build errors can be introduced once your project becomes bigger
    as you might end up deleting some source files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项卡相当重要，因为当你想要向项目中添加框架时，你会来到这个选项卡来包含它们。此外，有时当你遇到构建错误时，你可能想要检查是否所有必需的源文件实际上都包含在**编译源文件**列表中，因为这可能是构建错误的原因。随着项目变大，构建错误可能会出现，因为你可能删除了一些源文件。
- en: The Build Rules tab
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建规则选项卡
- en: You will probably never be required to change anything here, as it is mostly
    used if you want a specific file type to compile in a certain way. To define a
    custom process for a certain file type, you just have to create a new build rule.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能永远不会需要在这里更改任何内容，因为这个选项卡主要用于当你想要以特定方式编译特定文件类型时。为了定义某种文件类型的自定义过程，你只需创建一个新的构建规则。
- en: '![The Build Rules tab](img/B04014_03_25.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![构建规则选项卡](img/B04014_03_25.jpg)'
- en: Now that you have taken a look at the project root, you can click on the small
    triangle button to the side of the project root to open the project tree, if it
    is not already open.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经查看了项目根目录，您可以点击项目根目录旁边的三角形按钮来打开项目树，如果它还没有打开的话。
- en: Under the created project, there are three groups. The first is given the same
    name as the project. The second group holds the files for the project test files,
    so it will always have the project name and be suffixed with `Tests`. The third
    is the **Products** group, containing the `.app` file and the `Tests` files. For
    the majority of the time, we will be dealing with the files in the first group,
    that is, the group names after the name of the application. The first folder is
    where all the code, assets, and project-related files for the project should exist.
    You can create subfolders like the `Supported Files` folder to organize your project
    better. So, you can get a `Classes` folder that contains all the classes for the
    project, and an assets folder in which you can put your images, icons and three-dimensional
    objects.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建的项目下，有三个组。第一个组与项目名称相同。第二个组包含项目测试文件的文件，因此它将始终包含项目名称，并以 `Tests` 后缀。第三个是 **Products**
    组，包含 `.app` 文件和 `Tests` 文件。在大多数时间里，我们将处理第一个组的文件，即应用名称之后的组名。第一个文件夹是所有代码、资源和项目相关文件应该存在的地方。您可以创建类似于
    `Supported Files` 文件夹的子文件夹来更好地组织项目。因此，您可以创建一个包含项目所有类的 `Classes` 文件夹，以及一个可以放置您的图片、图标和三维对象的资源文件夹。
- en: Let's look at each of the files of the main project folder in detail.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看主要项目文件夹中的每个文件。
- en: The project folder
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目文件夹
- en: The main project folder contains the `AppDelegate.swift`, `ViewController.swift`,
    `Main.Storyboard`, `Images.xcassets`, and `LaunchScreeb.xib` files; and the `Supported
    Files` folder.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 主要项目文件夹包含 `AppDelegate.swift`、`ViewController.swift`、`Main.Storyboard`、`Images.xcassets`
    和 `LaunchScreen.xib` 文件；以及 `Supported Files` 文件夹。
- en: As soon as we open the `AppDelegate.swift` file, we see that the `AppDelegate`
    class inherits from the `UIResponder` and `UIApplicationDelegate` classes. Both
    of these classes are part of the UIKit. The UIKit framework is most important,
    as it is required to create and manage any iOS application. This framework provides
    basics elements such as window and view creation.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开 `AppDelegate.swift` 文件，我们会看到 `AppDelegate` 类继承自 `UIResponder` 和 `UIApplicationDelegate`
    类。这两个类都是 UIKit 的组成部分。UIKit 框架是最重要的，因为它是创建和管理任何 iOS 应用所必需的。此框架提供了基本元素，如窗口和视图的创建。
- en: 'The `UIResponder` class is responsible for handling events such as detecting
    touch and motion events. For touch events, it has `touchesBegan`, `touchesMoved`,
    `touchesEnded`, and `touchesCancelled`, which are called when a finger touches
    the screen. There are three motion events: `motionBegan`, `motionEnded`, and `motionCancelled`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIResponder` 类负责处理事件，例如检测触摸和运动事件。对于触摸事件，它有 `touchesBegan`、`touchesMoved`、`touchesEnded`
    和 `touchesCancelled`，当手指触摸屏幕时会被调用。有三个运动事件：`motionBegan`、`motionEnded` 和 `motionCancelled`：'
- en: '`UIApplicationDelegate`: This is a subclass of `UIResponder` that responds
    to events during the life cycle of the application. The functions in the `AppDelegate`
    class are from `UIApplicationDelegate`, which will be called when any of those
    functions are triggered by the application.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIApplicationDelegate`: 这是一个 `UIResponder` 的子类，它会在应用的生命周期中响应事件。`AppDelegate`
    类中的函数来自 `UIApplicationDelegate`，当这些函数被应用触发时，将会被调用。'
- en: '`applicationdidFinishinLaunchingWithOptions`: This is the function that gets
    called when the application has finished launching. It returns `true` when the
    application is launched.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationdidFinishLaunchingWithOptions`: 当应用完成启动时，会调用此函数。当应用启动时，它返回 `true`。'
- en: '`applicationWillResignActive`: This is called after the application has just
    become inactive and is about to go to the background. It is triggered when you
    either receive a phone call or press the home button to switch apps. It is used
    to disable timers or pause any update function.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationWillResignActive`: 当应用刚刚变为非活动状态并即将进入后台时，会调用此方法。当你接听电话或按下主页按钮切换应用时，会触发此方法。它用于禁用计时器或暂停任何更新功能。'
- en: '`applicationDidEnterBackground`: When the application has gone to the background
    and is no longer active, this function gets called. You can save the user score
    and make the application ready, if it is about to be terminated.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationDidEnterBackground`: 当应用进入后台并且不再活跃时，此函数会被调用。如果应用即将被终止，您可以保存用户分数并使应用准备就绪。'
- en: '`applicationWillEnterForeground`: Once the application sitting in the background
    is selected and is about to be active again, this function is called. Since the
    user didn''t terminate the application, you can restore the values to the previous
    state here.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationWillEnterForeground`：一旦后台运行的应用程序被选中并即将再次激活，此函数将被调用。由于用户没有终止应用程序，您可以在此处恢复到之前的状态。'
- en: '`applicationDidBecomeActive`: Now the application is fully active again, so
    you can resume the game and unpause and resume the update function.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationDidBecomeActive`：现在应用程序再次完全激活，因此您可以恢复游戏并取消暂停和恢复更新函数。'
- en: '`applicationWillTerminate`: This is the last function that will get called
    before the application fully terminates, so you might want to save the game and
    release all objects.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applicationWillTerminate`：这是在应用程序完全终止之前将被调用的最后一个函数，因此您可能想要保存游戏并释放所有对象。'
- en: There is an optional variable created, called window, and it is of the UIWindow
    type. Each application created is inside a window, and this window variable will
    give access to the current window. If needed, you can assign the current window
    to this variable to gain access to the properties of the currently running window,
    such as the size of the window.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个可选变量被创建，称为 window，它是 UIWindow 类型。每个创建的应用程序都在一个窗口内部，这个窗口变量将提供对当前窗口的访问。如果需要，您可以将当前窗口分配给此变量以访问当前运行窗口的属性，例如窗口的大小。
- en: Before we look at `ViewController.swift`, you need to get an understanding of
    `Main.Storyboard`, as the `ViewController.swift` class is called through `Main.StoryBoard`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看 `ViewController.swift` 之前，您需要了解 `Main.Storyboard`，因为 `ViewController.swift`
    类是通过 `Main.StoryBoard` 调用的。
- en: 'The `Main.storyboard` file is automatically called right after the application
    has finished launching. This is done automatically by Xcode as a standard protocol,
    and therefore, you won''t see it getting called in the `applicationDidFinishLaunching`
    function in the `AppDelegate` class. We have already called it in the **General**
    tab of the project root. Let''s now look at the file in detail and see what it
    does. For this, you need to understand what storyboards are in iOS:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main.storyboard` 文件在应用程序完成启动后自动调用。这是 Xcode 通过标准协议自动完成的，因此您在 `AppDelegate`
    类的 `applicationDidFinishLaunching` 函数中看不到它被调用。我们已经在项目根的 **常规** 选项卡中调用了它。现在让我们详细查看该文件并了解它做了什么。为此，您需要了解
    iOS 中的故事板是什么：'
- en: '![The project folder](img/B04014_03_26.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![项目文件夹](img/B04014_03_26.jpg)'
- en: A storyboard is a part of iOS Interface Builder or UITookit. It is used to create
    a user interface without writing any code. You can add buttons, texts, or sliders
    to your app. Also, by clicking on the button, you can make the app change views
    by creating a link between the current view and the next view. You can create
    a chain of such views to create the screen flow for your application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 故事板是 iOS 接口构建器或 UIToolkit 的一部分。它用于创建用户界面而无需编写任何代码。您可以在您的应用程序中添加按钮、文本或滑块。此外，通过点击按钮，您可以通过在当前视图和下一个视图之间创建链接来使应用程序更改视图。您可以通过创建此类视图的链来为您的应用程序创建屏幕流程。
- en: Every storyboard needs a ViewController to start the application with. ViewControllers
    are like screens that create the building blocks of the app. You will be linking
    the ViewControllers in the storyboard to develop the screens for any app you want.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个故事板都需要一个 ViewController 来启动应用程序。ViewController 类似于屏幕，是应用程序构建块。您将链接故事板中的 ViewController
    来开发您想要的任何应用程序的屏幕。
- en: The ViewController is associated with the custom class `ViewController.swift`
    file. This can be seen in the **Utility** panel by clicking on the **Identity
    Inspector** (third tab from the left). In the custom class, in the `class` field,
    the `ViewController` class is specified. We will cover more on **Utility** panel
    later.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'ViewController 与自定义类 `ViewController.swift` 文件相关联。这可以通过点击 **实用工具** 面板中的 **身份检查器**（从左数第三个标签）来在
    **实用工具** 面板中看到。在自定义类中，在 `class` 字段中指定了 `ViewController` 类。我们将在稍后详细介绍 **实用工具**
    面板。 '
- en: '![The project folder](img/B04014_03_27.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![项目文件夹](img/B04014_03_27.jpg)'
- en: If you are not able to see the ViewController tree, you can click on the small
    box icon at the bottom-left corner of the **Editor** panel to open it. The **View
    Controller Scene** has **View Controller**, **First Responder**, and **Exit**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看不到 ViewController 树，您可以点击 **编辑器** 面板左下角的小方块图标来打开它。**视图控制器场景** 包含 **视图控制器**、**第一响应者**
    和 **退出**。
- en: '![The project folder](img/B04014_03_28.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![项目文件夹](img/B04014_03_28.jpg)'
- en: 'By clicking on the triangle next to the ViewController, you will see that it
    contains three more items: **Top Layout Guide**, **Bottom Layout Guide**, and
    **View**. The top and bottom layout show the top and bottom ends of the view.
    The top starts after the battery indicator icon and the bottom ends at the bottom
    of the view. These are more like guides to let you know the limits that you need
    to be working within. The **View** item is the entire area the user will be able
    to see when the ViewController opens.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击ViewController旁边的三角形，你会看到它包含三个更多项：**顶部布局指南**、**底部布局指南**和**视图**。顶部和底部布局显示了视图的顶部和底部端点。顶部从电池指示图标开始，底部在视图底部结束。这些更像是指南，让你知道你需要在此范围内工作的限制。**视图**项是用户在ViewController打开时将能够看到的整个区域。
- en: The **First Responder** item is the first object that you interact with in the
    ViewController. This will send the message to the UIResponder. Each time you click
    on a button, interact with a slider, or enter the text field, **First Responder**
    gives information on what you are interacting with at that time. So, if you click
    on a button, the responder will know immediately that you are clicking on a button.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一响应者**项是你在ViewController中首先与之交互的对象。这将向UIResponder发送消息。每次你点击按钮、与滑块交互或输入文本字段时，**第一响应者**会提供关于你当时正在与之交互的信息。因此，如果你点击按钮，响应者会立即知道你正在点击按钮。'
- en: Exit is used when you want the user to be sent to a different ViewController.
    This can be the previous ViewController from which the user came to the present
    scene, or it can be some other ViewController. This is not all that important
    at this stage as long as you understand what a ViewController is.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 退出用于当你想要将用户发送到不同的ViewController时。这可以是用户从其中来到当前场景的先前ViewController，或者可以是其他ViewController。在这个阶段，只要你能理解ViewController是什么，这并不那么重要。
- en: 'We have seen that `ViewController.swift` gets called through the `ViewController`
    object in the `.storyboard` file. Inside the `ViewController.swift` file, there
    are two functions: one is `ViewDidLoad` and the other is `didReceieveMemoryWarning`.
    In the `.storyboard` file, we saw that `ViewController` contains the view. When
    the view gets created, the `ViewDidLoad` function gets called. This means that
    the ViewController can display whatever is in the view and it is ready for any
    interaction that the user might have with the view.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`ViewController.swift`是通过`.storyboard`文件中的`ViewController`对象被调用的。在`ViewController.swift`文件中，有两个函数：一个是`ViewDidLoad`，另一个是`didReceiveMemoryWarning`。在`.storyboard`文件中，我们看到`ViewController`包含视图。当视图被创建时，`ViewDidLoad`函数会被调用。这意味着ViewController可以显示视图中的任何内容，并且它准备好应对用户可能对视图进行的任何交互。
- en: The `didReceieveMemoryWarning` function gets called exactly when that happens.
    This function will get called either when you have too many apps open on the device,
    or if your program is not releasing the objects that it created earlier from the
    memory. The latter shouldn't be a problem because Swift has its own garbage collection,
    so you have to worry only about releasing memory.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，`didReceiveMemoryWarning`函数会被调用。这个函数会在你有太多应用程序打开在设备上，或者如果你的程序没有释放它之前创建的对象时被调用。后者不应该有问题，因为Swift有自己的垃圾回收，所以你只需要担心释放内存。
- en: '`Images.xcasstes` will contain all the image assets for the project. As of
    now, the only file in it is the `AppIcon` set. In this file, all the different
    iOS versions and resolutions of the icon images are shown with placeholders.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`Images.xcasstes`将包含项目的所有图像资源。到目前为止，里面唯一的文件是`AppIcon`集合。在这个文件中，显示了不同iOS版本和分辨率的图标图像，并带有占位符。'
- en: 'Here is an example of the icon set for the game *pizZapMania* that was created.
    The value mentioned under each set is the base dimension. The base for the first
    icon in the top left is 29 points, so to create icons for iOS 5 and 6, we will
    need two icons: one at **1x**, meaning 29 x 29 pixels, and another twice that
    size. Similarly, icons will have to be created for all the base values and multiplication
    factors mentioned for a particular device.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建的游戏*pizZapMania*的图标集的示例。每个集合下面提到的值是基本尺寸。左上角第一个图标的基线是29点，因此为了创建iOS 5和6的图标，我们需要两个图标：一个**1x**，意味着29
    x 29像素，另一个是这个尺寸的两倍。类似地，还需要为特定设备提到的所有基值和乘数创建图标。
- en: '![The project folder](img/B04014_03_29.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![项目文件夹](img/B04014_03_29.jpg)'
- en: While looking at the **General** tab of the project root, we saw that the `LaunchScreen.xib`
    file is called at the launch of the app. So what is this XIB file?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看项目根的**常规**选项卡时，我们发现`LaunchScreen.xib`文件在应用启动时被调用。那么这个XIB文件是什么？
- en: '![The project folder](img/B04014_03_30.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![项目文件夹](img/B04014_03_30.jpg)'
- en: The XIB file is called the NIB file (just as `.xib` was previously `.nib`) or
    NeXTSTEP Interface Builder. As of now, this file is XML-based and `n` is replaced
    by `x`, but it is still called a NIB file. So, when someone refers to a NIB file,
    they mean an XIB file. According to Apple, storyboards are the way to go forward
    as they support multiple view controllers and a `.xib` file can have only one.
    Since in this case the application and the launch screen both use a single view
    controller, it is the same.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: XIB文件被称为NIB文件（就像`.xib`之前是`.nib`一样）或NeXTSTEP界面构建器。到目前为止，这个文件是基于XML的，`n`被替换为`x`，但它仍然被称为NIB文件。所以，当有人提到NIB文件时，他们指的是XIB文件。根据Apple的说法，故事板是前进的方向，因为它们支持多个视图控制器，而`.xib`文件只能有一个。由于在这种情况下，应用程序和启动屏幕都使用单个视图控制器，所以它们是相同的。
- en: The `Launchscreen.xib` file adds two labels upon the creation of the project,
    by default. The first label is the name of the app, placed at the center of the
    view, and the other is placed at the bottom of the view to display the copyright
    information. Click on either of the text to see the **Utility** panel light up
    like a Christmas tree. Let's finally look at the **Utility** panel.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时，`Launchscreen.xib`文件默认添加了两个标签。第一个标签是应用名称，放置在视图的中心，另一个放置在视图底部以显示版权信息。点击任意文本，可以看到**实用工具**面板像圣诞树一样亮起。让我们最后看看**实用工具**面板。
- en: The Utility panel (Redux)
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实用工具面板（Redux）
- en: The top part of the **Utility** panel contains six inspector tabs, and the bottom
    part has four library tabs. Let's first look at the inspector tabs one by one.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**实用工具**面板的上半部分包含六个检查器选项卡，下半部分有四个库选项卡。让我们首先逐一查看检查器选项卡。'
- en: The inspector tabs
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查器选项卡
- en: Let's start from the leftmost tab, the **File Inspector** tab, and then we will
    look at the **Quick Help Inspector**, **Identity Inspector**, **Attributes Inspector**,
    **Size Inspector**, and **Connections Inspectors** tabs. The main tab to remember
    is **Attributes Inspector**. We will just glance at the rest.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最左边的选项卡开始，即**文件检查器**选项卡，然后我们将查看**快速帮助检查器**、**身份检查器**、**属性检查器**、**大小检查器**和**连接检查器**选项卡。需要记住的主要选项卡是**属性检查器**。我们只需快速浏览其他选项卡。
- en: The File Inspector tab
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件检查器选项卡
- en: The **File Inspector** tab gives information about the parent file that the
    current object is attached to. Here, the label is attached to the `LaunchScreen.xib`
    file and is located in the `Base.lproj` directory on the Mac.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件检查器**选项卡提供了关于当前对象所附加的父文件的信息。在这里，标签附加到`LaunchScreen.xib`文件上，位于Mac上的`Base.lproj`目录中。'
- en: '![The File Inspector tab](img/B04014_03_31.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![文件检查器选项卡](img/B04014_03_31.jpg)'
- en: It shows the Xcode version that can open it, the build target version, and the
    iOS version supported by the document. It also has details regarding **Source
    Control**, such as the repository name, type, and branch.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了可以打开它的Xcode版本、构建目标版本以及文档支持的iOS版本。它还提供了有关**源控制**的详细信息，例如仓库名称、类型和分支。
- en: The Quick Help Inspector tab
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 快速帮助检查器选项卡
- en: The **Quick Help Inspector** tab provides a brief description, features, and
    capabilities of the item selected. Here, since we selected the label, it shows
    the parent class of the label, which is `UILabel`. It also provides other details,
    such as **Availability**, which tell us which iOS versions support this.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速帮助检查器**选项卡提供了所选项目的简要描述、功能和能力。在这里，由于我们选择了标签，它显示了标签的父类，即`UILabel`。它还提供了其他详细信息，例如**可用性**，它告诉我们哪些iOS版本支持此功能。'
- en: '![The Quick Help Inspector tab](img/B04014_03_32.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![快速帮助检查器选项卡](img/B04014_03_32.jpg)'
- en: The Identity Inspector tab
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 身份检查器选项卡
- en: The **Identity Inspector** tab helps in assigning and managing metadata for
    any object, which in this case will be the text label selected. It also shows
    the custom class attached to it. Here, it is expecting a class that is inherited
    from the `UILabel` class.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份检查器**选项卡有助于为任何对象分配和管理元数据，在这种情况下将是选中的文本标签。它还显示了附加到其上的自定义类。在这里，它期望一个继承自`UILabel`类的类。'
- en: '![The Identity Inspector tab](img/B04014_03_33.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![身份检查器选项卡](img/B04014_03_33.jpg)'
- en: The Attributes Inspector tab
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 属性检查器选项卡
- en: This is where you can edit the properties of the object selected. So here, we
    can change the look, color, position, search, and text—as we can for a page of
    a word document.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您可以编辑所选对象属性的地方。因此，在这里，我们可以更改外观、颜色、位置、搜索和文本——就像我们可以在一个Word文档的页面中做的那样。
- en: '![The Attributes Inspector tab](img/B04014_03_34.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![属性检查器选项卡](img/B04014_03_34.jpg)'
- en: The Size Inspector tab
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 大小检查器选项卡
- en: The **Size Inspector** tab helps you position the object, set the size of the
    object, and add constraints for further assistance in positioning the object correctly.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**大小检查器**选项卡可以帮助您定位对象，设置对象的大小，并添加约束以进一步帮助正确定位对象。'
- en: '![The Size Inspector tab](img/B04014_03_35.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![大小检查器选项卡](img/B04014_03_35.jpg)'
- en: The Connections Inspector tab
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接检查器选项卡
- en: As explained earlier, we can connect the ViewControllers to create the screen
    flow and transition from one ViewController to the next. In the **Connections
    Inspector** tab, we can see which objects are connected to which outlet.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以连接ViewControllers以创建屏幕流程，并从ViewController切换到下一个。在**连接检查器**选项卡中，我们可以看到哪些对象连接到了哪些出口。
- en: '![The Connections Inspector tab](img/B04014_03_36.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![连接检查器选项卡](img/B04014_03_36.jpg)'
- en: The library
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 库
- en: 'The library contains four tabs: **File Template**, **Code Snippet**, **Object**,
    and **Media Library**.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 该库包含四个选项卡：**文件模板**、**代码片段**、**对象**和**媒体库**。
- en: The File Template tab
  id: totrans-171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 文件模板选项卡
- en: If you want to create a new file, you can either navigate to **File** | **New**
    or simply drag the required file type into the project navigator.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建一个新文件，您可以通过导航到**文件** | **新建**，或者简单地将所需的文件类型拖放到项目导航器中。
- en: '![The File Template tab](img/B04014_03_37.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![文件模板选项卡](img/B04014_03_37.jpg)'
- en: Here, if we want to, we can drag the **Swift File** template into our project,
    and once we release the left mouse button, Xcode will ask us to save the file.
    Then we will be able to rename the file and it will be included in the project.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果我们想的话，可以将**Swift文件**模板拖入我们的项目，一旦我们释放鼠标左键，Xcode将要求我们保存文件。然后我们可以重命名文件，并且它将被包含在项目中。
- en: The Code Snippet Library tab
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 代码片段库选项卡
- en: These contain a collection of code blocks that can be dragged and dropped into
    your file to remove rework.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包含可以拖放到文件中以避免重复工作的代码块集合。
- en: '![The Code Snippet Library tab](img/B04014_03_38.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![代码片段库选项卡](img/B04014_03_38.jpg)'
- en: The Object Library tab
  id: totrans-178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 对象库选项卡
- en: In the object library, you have predefined objects such as **Text**, **Label**,
    and **Button** that can be dropped into the ViewController.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象库中，您有预定义的对象，如**文本**、**标签**和**按钮**，可以将它们拖放到ViewController中。
- en: '![The Object Library tab](img/B04014_03_39.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![对象库选项卡](img/B04014_03_39.jpg)'
- en: The Media Library tab
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 媒体库选项卡
- en: This tab contains all media, such as **Movies**, **Audio**, and **Images**,
    that you have added to the library and dragged into your app. Currently, no media
    have been added, so this tab is empty.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项卡包含您添加到库中并拖放到应用程序中的所有媒体，如**电影**、**音频**和**图像**。目前尚未添加任何媒体，因此此选项卡为空。
- en: '![The Media Library tab](img/B04014_03_40.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![媒体库选项卡](img/B04014_03_40.jpg)'
- en: This concludes the section on the **Utility** panel. Now that we have covered
    the other files and looked at the **Utility** panel, let's look at the last folder
    in the project hierarchy.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了关于**实用工具**面板的部分。现在我们已经涵盖了其他文件并查看了**实用工具**面板，让我们看看项目层次结构中的最后一个文件夹。
- en: The `Supported Files` folder/group contains only an `info.plist` file, which
    consists all of the necessary information about the app. It will contain details
    such as the name of the app, bundle name, version number of the app, and other
    basic information about the app to Xcode. Mostly, we will be making changes to
    this file only when we upload an update to an application that is already live
    on the store, and we would want the version number of the latest build to be 1.1
    instead of 1.0\. We will cover this when we publish the app on the App Store in
    the last chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`Supported Files`文件夹/组中只包含一个`info.plist`文件，它包含有关应用程序的所有必要信息。它将包含有关应用程序名称、捆绑名称、应用程序版本号以及其他基本信息的详细信息，并将传递给Xcode。大多数情况下，我们只有在将已上架的应用程序更新上传到商店时才会修改此文件，并且我们希望最新构建的版本号为1.1而不是1.0。我们将在最后一章中发布应用程序到App
    Store时介绍这一点。'
- en: The Debug panel
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试面板
- en: There is one more panel that we haven't covered yet, and that is the **Debug**
    panel. This can be activated by clicking on the middle button from the three-button
    set to the right of the toolbar and left to the **Utility** panel. Once you click
    on it, the panel shown in the following screenshot will open up. You can click
    on it again to hide it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个我们还没有介绍的面板，那就是**调试**面板。可以通过点击工具栏右侧、**实用工具**面板左侧的三个按钮中间的按钮来激活它。一旦点击，就会打开以下截图所示的面板。您可以再次点击它来隐藏它。
- en: '![The Debug panel](img/B04014_03_41.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![调试面板](img/B04014_03_41.jpg)'
- en: 'The **Debug** panel or area has two subsections. To the left is the **Variables**
    view, and to the right is **Console**. Whatever you log using the `println` function
    will get displayed here. For example, in the ViewController class in the `viewDidLoad`
    function, I logged this:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试**面板或区域有两个子部分。左侧是**变量**视图，右侧是**控制台**。您使用`println`函数记录的任何内容都会在这里显示。例如，在ViewController类的`viewDidLoad`函数中，我记录了以下内容：'
- en: '[PRE0]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When I ran the application, the message popped up in the console. So, similar
    to how we logged information in the playground, we can do it in Xcode, but to
    see it, you obviously need to run the application—unlike playground.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行应用程序时，控制台弹出了消息。所以，类似于我们在playground中记录信息的方式，我们可以在Xcode中这样做，但为了看到它，显然您需要运行应用程序——与playground不同。
- en: Now that we have this awesome app, we can see how to run it on the device.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这个很棒的应用，我们可以看看如何在设备上运行它。
- en: Running the app on the device
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设备上运行应用
- en: All this time, we ran the app on the simulator. Making the app run on the simulator
    is relatively easier—select the simulator to run the app on, click on the play
    button, and that's it! To run the app on a device, however, you'll need to perform
    a couple of steps.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些时间，我们都在模拟器上运行应用。在模拟器上运行应用相对容易——选择要运行应用的模拟器，点击播放按钮，就这样！然而，要在设备上运行应用，您需要执行几个步骤。
- en: 'First, we need to get the **Developer** certificate and install it. So, go
    to the iOS developer portal at [https://developer.apple.com](https://developer.apple.com),
    click on **Member Center**, and type in the login name and password we created
    in the [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取**开发者**证书并安装它。因此，前往[iOS开发者门户](https://developer.apple.com)，点击**会员中心**，并输入我们在[第1章](ch01.html
    "第1章。入门")中创建的登录名和密码，*入门*：
- en: Under **Developer Program Resources**, click on **Certificates, Identifiers
    & Profiles**.![Running the app on the device](img/B04014_03_42.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**开发者计划资源**下，点击**证书、标识符和配置文件**。![在设备上运行应用](img/B04014_03_42.jpg)
- en: Under **iOS Apps**, click on **Certificates**.![Running the app on the device](img/B04014_03_43.jpg)
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**iOS应用**下，点击**证书**。![在设备上运行应用](img/B04014_03_43.jpg)
- en: Under **Certificates**, click on **Development**. In the top-right corner, click
    on the **+** sign next to the search button.![Running the app on the device](img/B04014_03_44.jpg)
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**证书**下，点击**开发**。在右上角，点击搜索按钮旁边的**+**号。![在设备上运行应用](img/B04014_03_44.jpg)
- en: Next, click on **iOS Development** once the page loads and then click on **Continue**.
    Then, we have to create a certificate signing request.![Running the app on the
    device](img/B04014_03_45.jpg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，页面加载完成后，点击**iOS开发**，然后点击**继续**。然后，我们必须创建一个证书签名请求。![在设备上运行应用](img/B04014_03_45.jpg)
- en: On your Mac, open *Keychain* by clicking on *Launchpad*. Once the *KeyChain*
    app is opened, go to **CertificateAssistant** and click on **Request a Certificate
    From a Certificate Authority...**.![Running the app on the device](img/B04014_03_46.jpg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Mac上，通过点击**启动台**打开*密钥链*。一旦打开*密钥链*应用，前往**证书助手**并点击**从证书颁发机构请求证书...**。![在设备上运行应用](img/B04014_03_46.jpg)
- en: In the popup, type the e-mail address that you used to create the Apple Developer
    ID. Then type a common name for reference, select **Saved to Disk**, and click
    to continue to select the location where you want the certificate to be downloaded.
    You can save it on the desktop for now, but later, move it to a safer place.![Running
    the app on the device](img/B04014_03_47.jpg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，输入您用于创建Apple开发者ID的电子邮件地址。然后输入一个常见的名称作为参考，选择**保存到磁盘**，然后点击继续以选择您希望证书下载的位置。您现在可以将其保存在桌面上，但稍后将其移动到更安全的地方。![在设备上运行应用](img/B04014_03_47.jpg)
- en: Go back to the iOS Developer portal and click on **Continue**. Now, you have
    to upload the CSR file that you saved on the Mac in the previous step. Click on
    **Choose file**, navigate to the desktop where you downloaded the file, select
    it, and click on **Generate**.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 iOS 开发者门户并点击**继续**。现在，你必须上传你在上一步中保存在 Mac 上的 CSR 文件。点击**选择文件**，导航到下载文件的桌面，选择它，然后点击**生成**。
- en: Now your certificate is ready. Click on **Download** to download the file.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你的证书已经准备好了。点击**下载**以下载文件。
- en: Double-click on the downloaded file to install it. Then, click on **Done**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击下载的文件进行安装。然后，点击**完成**。
- en: Now, open Xcode, go to **Preferences**, click on **Accounts**, and then click
    on **View Details**. In the top part, it should show the iOS Development meaning
    that the certificate is installed.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 Xcode，转到**偏好设置**，点击**账户**，然后点击**查看详情**。在顶部部分，应该显示 iOS 开发，这意味着证书已安装。
- en: This certificate is only for development. For distribution, you will have to
    download a distribution certificate, which we will do once we are ready to publish
    our game.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此证书仅用于开发。对于分发，你将需要下载一个分发证书，我们将在准备发布游戏时进行。
- en: Now, plug in your device to Mac. Xcode will automatically assume that you will
    use the device connected for development and register it for you. You can see
    all the registered devices. Open Xcode and, from the top bar, select **Window**
    and then **Devices** to show all the registered devices. You can have up to 100
    devices registered to test your application.![Running the app on the device](img/B04014_03_48.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将你的设备连接到 Mac。Xcode 将自动假设你将使用连接的设备进行开发并为你注册。你可以看到所有注册的设备。打开 Xcode，从顶部栏选择**窗口**，然后选择**设备**以显示所有注册的设备。你可以注册多达
    100 台设备以测试你的应用程序。[在设备上运行应用](img/B04014_03_48.jpg)
- en: Now, in the top-left corner next to the play button, from where we previously
    used to select the simulator, we can select the device.![Running the app on the
    device](img/B04014_03_49.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在播放按钮旁边的左上角，从我们之前用来选择模拟器的位置，我们可以选择设备。[在设备上运行应用](img/B04014_03_49.jpg)
- en: 'There''s one final step: we still have to select the team to make the app run
    on the device. So, go to the **Project Navigator** tab and select the project
    root. In the Editor, under team, scroll down to select the team.![Running the
    app on the device](img/B04014_03_50.jpg)'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步：我们还需要选择团队以使应用在设备上运行。因此，转到**项目导航器**标签并选择项目根目录。在编辑器中，在团队部分向下滚动以选择团队。[在设备上运行应用](img/B04014_03_50.jpg)
- en: Now, if everything goes well, you should be able to run the app on the device.
    Congratulations!!!!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果一切顺利，你应该能够在设备上运行应用。恭喜!!!!
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the interface of Xcode. I hope that you now have
    a good idea about the different panels and how to access, activate, and deactivate
    them. I intentionally haven't covered the **File**, **Edit**, and **View** menus
    because these are somewhat similar to other applications. If needed, we will go
    through some of them on a need-to-know basis.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Xcode 的界面。我希望你现在对不同的面板以及如何访问、激活和停用它们有了很好的了解。我故意没有涵盖**文件**、**编辑**和**查看**菜单，因为这些与其他应用程序有些相似。如果需要，我们将根据需要了解一些内容。
- en: As an exercise, you can try and change the color of the view, or change the
    height and type in the `.storyboard` file. You can also make similar changes in
    the NIB file and the app a little more colorful.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，你可以尝试更改视图的颜色，或在`.storyboard`文件中更改高度并输入。你还可以在 NIB 文件中对应用进行类似更改，使其更加多彩。
- en: Now that you know how Xcode works, we will jump straight into game development
    using SpriteKit. Once we have mastered 2D space, we will look at the 3D space
    in SceneKit.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Xcode 的工作原理，我们将直接进入使用 SpriteKit 进行游戏开发。一旦我们掌握了二维空间，我们将在 SceneKit 中查看三维空间。
