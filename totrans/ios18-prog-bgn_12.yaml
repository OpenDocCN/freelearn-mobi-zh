- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Part 1* of this book, you studied the Swift language and how it works. Now
    that you have a good working knowledge of the language, you can learn how to develop
    an iOS application. In this part, you will build the **user interface** (**UI**)
    of a journal app, *JRNL*. You will use Xcode’s **Interface Builder** for this,
    and coding will be kept to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start this chapter by learning useful terms used in iOS app development,
    which are used extensively throughout this book. Next, you will take a tour of
    the screens used in the *JRNL* app and learn how a user would use the app. Finally,
    you will begin recreating the app’s UI with Interface Builder, starting with the
    tab bar, which allows the user to select between the Journal List and Map screens.
    You’ll add navigation bars to the top of both screens and configure the tab bar
    buttons.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned common terms used in iOS app
    development, what the flow of your app will look like, and how to use Interface
    Builder to add and configure UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning useful terms in iOS development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tour of the *JRNL* app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying your Xcode project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a tab bar controller scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will modify the `JRNL` Xcode project that you created in *Chapter 1*, *Exploring
    Xcode*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource files and completed Xcode project for this chapter are in the
    `Chapter10` folder of the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/lgyerQeTgN4](https://youtu.be/lgyerQeTgN4%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Before you get started with the project, you’ll learn some common terms used
    in iOS development.
  prefs: []
  type: TYPE_NORMAL
- en: Learning useful terms in iOS development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you begin your journey into iOS app development, you will encounter special
    terms and definitions. Here are some of the most used terms and definitions. Just
    read through them for now. Even though you may not understand everything yet,
    things will become clearer as you go along:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View**: A view is an instance of the `UIView` class or one of its subclasses.
    Anything you see on your screen (buttons, text fields, labels, and so on) is a
    view. You will use views to build your UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes are covered in *Chapter 7,* *Classes, Structures, and Enumerations*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Stack view**: A stack view is an instance of the `UIStackView` class, which
    is a subclass of `UIView`. It is used to group views together in a horizontal
    or vertical stack. This makes them easier to position on the screen using **Auto
    Layout**, which is discussed later in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View controller**: A view controller is an instance of the `UIViewController`
    class. Every view controller has a `view` property, which contains a reference
    to a view. It determines what a view displays to a user and what happens when
    the user interacts with a view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View controllers will be discussed in detail in *Chapter 14,* *Getting Started
    with MVC and Table Views*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table view controller**: A table view controller is an instance of the `UITableViewController`
    class, which is a subclass of the `UIViewController` class. Its `view` property
    has a reference to a `UITableView` instance (table view), which displays a single
    column of `UITableViewCell` instances (table view cells).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Settings** app displays your device settings in a table view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all the different settings (**General**, **Accessibility**,
    **Privacy**, and so on) are displayed in table view cells inside the table view.
  prefs: []
  type: TYPE_NORMAL
- en: '**Collection view controller**: A collection view controller is an instance
    of the `UICollectionViewController` class, which is a subclass of the `UIViewController`
    class. Its `view` property has a reference to a `UICollectionView` instance (collection
    view), which displays a grid of `UICollectionViewCell` instances (collection view
    cells).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Photos** app displays photos in a collection view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Photos app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, thumbnail pictures are displayed in collection view cells inside
    the collection view.
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation controller**: A navigation controller is an instance of the `UINavigationController`
    class, which is a subclass of the `UIViewController` class. It has a `viewControllers`
    property that holds an array of view controllers. The view of the last view controller
    in the array appears onscreen, along with a navigation bar at the top of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The table view controller in the **Settings** app is embedded in a navigation
    controller, and you can see the navigation bar above the table view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Navigation bar in the Settings app'
  prefs: []
  type: TYPE_NORMAL
- en: When you tap on a setting, the view controller for that setting is added to
    the array of view controllers assigned to the `viewControllers` property. The
    user sees the view for that view controller slide in from the right. Note the
    navigation bar at the top of the screen, which can hold a title and buttons. A
    **< Settings** button appears on the top-left side of the navigation bar. Tapping
    this button returns you to the previous screen, and it removes the view controller
    for that setting from the array of view controllers assigned to the `viewControllers`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tab bar controller**: A tab bar controller is an instance of the `UITabBarController`
    class, which is a subclass of the `UIViewController` class. It has a `viewControllers`
    property that holds an array of view controllers. The view of the first view controller
    in the array appears onscreen, along with a tab bar with buttons at the bottom.
    The button on the extreme left corresponds to the first view controller in the
    array and will already be selected. When you tap another button, the corresponding
    view controller is loaded, and its view appears on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Fitness** app uses a tab bar controller to navigate to different screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: Tab bar in the Fitness app'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the different screens for this app (**All Photos**, **For You**,
    **Albums**, and **Search**) are accessed by tapping the corresponding tab bar
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model-View-Controller (MVC)**: This is a very common design pattern used
    in iOS app development. The user interacts with views onscreen. App data is stored
    in data model objects. Controllers manage the flow of information between views
    and data model objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC will be discussed in detail in *Chapter 14,* *Getting Started with MVC and
    Table Views*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Storyboard file**: A storyboard file contains a visual representation of
    what a user sees. Each screen of an app is represented by a storyboard **scene**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the *JRNL* project that you created in *Chapter 1*, *Exploring Xcode*,
    and click the **Main** storyboard file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: JRNL Xcode project showing the Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see one scene in it, and when you run your app in **Simulator**, the
    contents of this scene will be displayed on the screen. You can have more than
    one scene in a storyboard file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Segue**: If you have more than one scene in an app, you use segues to move
    from one scene to another. The *JRNL* project does not have any segues, since
    there is just one scene in its storyboard file, but you will see them in a later
    part of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Layout**: As a developer, you must make sure that your app looks good
    on devices with different screen sizes. **Auto Layout** helps you lay out your
    UI based on the **constraints** you specify. For instance, you can set a constraint
    to make sure that a button is centered on the screen, regardless of screen size,
    or make a text field expand to the width of the screen when a device is rotated
    from portrait to landscape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you are familiar with the terms used in iOS app development, let’s
    take a tour of the app you will build.
  prefs: []
  type: TYPE_NORMAL
- en: A tour of the JRNL app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a quick tour of the app that you will build. The *JRNL* app is a
    journal app that lets users write their own personal journal, with the option
    of storing a photo or a map location for each journal entry. Users can also view
    a map that shows the locations of entries that are close to a user’s current location.
    You’ll see all the screens used in the app and its overall flow in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Journal List screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the app is launched, you will see the Journal List screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: Journal List screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A `UITabBar` instance (tab bar) at the bottom of the screen displays the **Journal**
    and **Map** buttons. The **Journal** button is selected, and you can see a table
    view displaying a list of journal entries in table view cells. A `UISearchController`
    instance displays a search bar at the top of the screen. This allows you to search
    for a particular journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: To add a new journal entry, you tap the **+** button at the top of the screen.
    This displays the Add New Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Add New Journal Entry screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you tap the **+** button at the top of the Journal List screen, you will
    see the Add New Journal Entry screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: Add New Journal Entry screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains the **Cancel** and **Save**
    buttons. A stack view displays a custom rating control, a switch, an entry title
    text field, a body text view, and a placeholder photo. Tapping the rating control
    allows you to assign 0 to 5 stars for this entry. Switching the switch on will
    obtain your current location.
  prefs: []
  type: TYPE_NORMAL
- en: You can enter the journal entry’s title in the entry title text field, and the
    details in the body text view. You can also tap the placeholder photo to take
    a picture with your device camera. Once you tap **Save**, you are returned to
    the Journal List screen, and then the new entry will be visible in the table view.
    You can also tap **Cancel** to return to the Journal List screen without creating
    a new journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: To see the details of a particular journal entry, tap the entry you want in
    the list, and then you will see the Journal Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Journal Entry Detail screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping any one of the journal entries on the Journal List screen will display
    the corresponding Journal Entry Detail screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.8: Journal Entry Detail screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation bar at the top of the screen contains a **Back** button. A table
    view displays the journal entry’s date, rating, title text, body text, photo,
    and location map in table view cells.
  prefs: []
  type: TYPE_NORMAL
- en: You can tap the **< Journal** button to return to the Journal List screen.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Map screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tapping the **Map** button in the tab bar displays the Map screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.9: Map screen'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s study the different parts of this screen.
  prefs: []
  type: TYPE_NORMAL
- en: A tab bar at the bottom of the screen displays the **Journal** and **Map** buttons.
    The **Map** button is selected, and you can see an `MKMapView` instance (map view)
    displaying a map on the screen, with pins indicating journal entries.
  prefs: []
  type: TYPE_NORMAL
- en: Tapping a pin will display an annotation, and tapping the button in the annotation
    will display the Journal Entry Detail screen for that journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the tour of the app. Now, it’s time to start building the UI
    for it!
  prefs: []
  type: TYPE_NORMAL
- en: Modifying your Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you know what the screens of the app are going to look like, you can
    start building it. If you have not yet done so, open the `JRNL` project you created
    in *Chapter 1*, *Exploring Xcode*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_10_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.10: The JRNL project'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that **iPhone SE (3rd generation)** is selected from the Destination
    menu. Build and run your app. You will see a blank white screen. If you click
    the **Main** storyboard file in the Project navigator, you will see that it contains
    a single scene containing a blank view. This is why you only see a blank white
    screen when you run the app.
  prefs: []
  type: TYPE_NORMAL
- en: To configure the UI, you will modify the **Main** storyboard file using Interface
    Builder. Interface Builder allows you to add and configure scenes. Each scene
    represents a screen that a user will see. You can add UI objects such as views
    and buttons to a scene and configure them as required, using the Attributes inspector.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on how to use Interface Builder, visit this link: [https://help.apple.com/xcode/mac/current/#/dev31645f17f](https://help.apple.com/xcode/mac/current/#/dev31645f17f).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will embed the existing scene in a tab bar and add another scene to
    it. The tab bar scene will display a tab bar with two buttons at the bottom of
    the screen. Tapping a button will display the screen associated with it. These
    screens correspond to the Journal List and Map screens shown in the app tour.
    Let’s see how to do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a tab bar controller scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you saw in the app tour, the *JRNL* app has a tab bar with two buttons at
    the bottom of the screen, which are used to display the Journal List and Map screens.
    You will embed the existing view controller scene in a tab bar and add a second
    view controller scene to the tab bar. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Main** storyboard file in the Project navigator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.11: Project navigator with the Main storyboard file selected'
  prefs: []
  type: TYPE_NORMAL
- en: The contents of the **Main** storyboard file appear in the Editor area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Document Outline button to display the document outline if it is
    not present:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.12: Editor area with the Document Outline button shown'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **View Controller** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.13: Document outline with View Controller selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll embed the existing view controller scene in a tab bar controller scene.
    Choose **Embed In** | **Tab Bar Controller** from the **Editor** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.14: Editor menu with Embed In | Tab Bar Controller selected'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see a new tab bar controller scene appear in the Editor area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **+** button at the top-right side of the window to show the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.15: Toolbar with the + button shown'
  prefs: []
  type: TYPE_NORMAL
- en: The library allows you to pick UI objects to be added to a scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `view con` in the library’s filter field. A **View Controller** object
    will appear in the list of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.16: Library with the View Controller object selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag the **View Controller** object to the storyboard to add a new view controller
    scene, and position it below the existing view controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.17: Main storyboard file with the view controller scene added'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **-** button to zoom out, and rearrange the scenes in the storyboard
    so that both the tab bar controller scene and the view controller scenes are visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.18: Editor area with the zoom buttons shown'
  prefs: []
  type: TYPE_NORMAL
- en: If the **–** and **+** buttons are not visible, try making the Xcode window
    larger. You could also try hiding the **Navigator** and **Inspector** areas using
    the **Navigator** and **Inspector** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Tab Bar Controller** in the document outline. Press *Ctrl* and drag
    from **Tab Bar Controller** to the newly added view controller scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.19: Editor area showing the drag destination'
  prefs: []
  type: TYPE_NORMAL
- en: 'A segue pop-up menu will appear. Choose **view controllers** from this menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.20: Segue pop-up menu'
  prefs: []
  type: TYPE_NORMAL
- en: A segue connecting the tab bar controller scene to the view controller scene
    will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rearrange the scenes in the **Editor** area so that it looks like the screenshot
    below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.21: Editor area with rearranged scenes'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app in Simulator, and you’ll see the tab bar with two buttons
    at the bottom of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.22: Simulator showing the tab bar with two buttons'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added a tab bar to your project, but as you can see, the
    button titles are currently both named **Item**. You will change them to **Journal**
    and **Map** in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the tab bar button titles and icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your app now displays a tab bar at the bottom of the screen, but the button
    titles and icons do not match those shown in the app tour. To make them match,
    you will configure the button titles to read **Journal** and **Map** in the Attributes
    inspector and configure their icons as well. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Main** storyboard file in the Project navigator. Click the Document
    Outline button to show the document outline if it is not present. Click the first
    **Item Scene** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.23: Document outline showing the first Item Scene selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Item** button under **Item Scene**. Then, click the Attributes
    inspector button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.24: Attributes inspector selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Bar Item**, set **Title** to `Journal` and **Image** to `person.fill`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.25: Attributes inspector with Title set to Journal and Image set
    to person.fill'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Item** button in the second **Item** scene, and under **Bar Item**,
    set **Title** to `Map` and **Image** to `map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.26: Attributes inspector with Title set to Map and Image set to map'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app in Simulator. You’ll see that the titles for the buttons
    have changed to **Journal** and **Map**, respectively, and each button also has
    a custom icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.27: Simulator showing the tab bar with custom button titles and icons'
  prefs: []
  type: TYPE_NORMAL
- en: Tapping the **Journal** and **Map** buttons will display the scenes for the
    Journal List and Map screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `person.fill` and `map` icons are part of Apple’s **SF Symbols** library.
    To learn more about it, visit this link: [https://developer.apple.com/design/human-interface-guidelines/sf-symbols](https://developer.apple.com/design/human-interface-guidelines/sf-symbols).'
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen in the app tour, some screens have titles and buttons in the
    navigation bar. In the next section, you will learn how to add navigation bars
    to your screens so that you can add buttons and titles to them later as required.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding view controllers in navigation controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you saw in the app tour, the Journal List and Map screens both have a navigation
    bar at the top of the screen. To add the navigation bars for both screens, you
    will embed the view controllers of the Journal and Map scenes in a navigation
    controller. This will make navigation bars appear at the top of the screen when
    the Journal List and Map screens are displayed. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Journal Scene** in the document outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.28: Document outline with Journal Scene selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **Embed In** | **Navigation Controller** from the **Editor** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.29: Editor menu with Embed In | Navigation Controller selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that a navigation controller scene has appeared between the tab bar
    controller scene and the journal scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.30: Editor area showing an added navigation controller scene'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Map Scene** in the document outline and repeat *step 2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.31: Editor area showing an added navigation controller scene'
  prefs: []
  type: TYPE_NORMAL
- en: Both the **Journal List** screen and the **Map** screen now have navigation
    bars, but since they are the same color as the background, it is not apparent
    on the screen. You will set the titles for each scene’s navigation item to distinguish
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Navigation Item** for the first **View Controller Scene** in the
    document outline. In the Attributes inspector, under **Navigation Item**, set
    **Title** to `Journal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.32: Attributes inspector with Title set to Journal'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Navigation Item** for the second **View Controller Scene** in
    the document outline. In the Attributes inspector, under **Navigation Item**,
    set **Title** to `Map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.33: Attributes inspector with Title set to Map'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app, and tap each tab bar button to display the corresponding
    screen. Note that each screen displays a title in the navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Embedding a view controller in a navigation controller adds that view controller
    to the navigation controller’s `viewControllers` array. The navigation controller
    then displays the view controller’s view on the screen. The navigation controller
    also displays a navigation bar with a title at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You’ve just configured the tab bar and navigation controllers
    for your app!
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the screens represented in Interface Builder don’t
    match the iPhone model you selected in the Destination menu, and you may find
    that the minimap display gets in the way of arranging screens in your app. Let’s
    do some additional configuration of Interface Builder to fix that.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Xcode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Even though you have configured Simulator to use iPhone SE (3^(rd) generation)
    for your app, the scenes shown in Interface Builder are for a different iPhone
    model. You may also wish to hide the minimap display. Let’s configure the scenes
    in Interface Builder to use iPhone SE (3^(rd) generation) and hide the minimap
    display. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Main** storyboard file should still be selected. To configure the appearance
    of the scenes in Interface Builder, click the device configuration button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.34: Editing area with the device configuration button shown'
  prefs: []
  type: TYPE_NORMAL
- en: A pop-up window displaying different device screens will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **iPhone SE (3rd generation)** from this pop-up window, and click anywhere
    in the Editor area to dismiss it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.35: Device pop-up window with iPhone SE (3rd generation) selected'
  prefs: []
  type: TYPE_NORMAL
- en: The appearance of the scenes in the storyboard will change to reflect the iPhone
    SE (3^(rd) generation)’s screen.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to hide the minimap, choose **Minimap** from the **Editor** menu
    to deselect it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.36: Editor menu with Minimap highlighted'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that you have the following scenes in the `Main` storyboard file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_10_37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.37: Editor area showing the completed Main storyboard file'
  prefs: []
  type: TYPE_NORMAL
- en: Build and run your app. It should work just as it did before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created the Journal List and Map screens for your app! Well done!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned some useful terms used in iOS app development.
    This will make it easier for you to understand the remainder of this book, as
    well as other books or online resources on the subject.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you also learned about the different screens used in the *JRNL* app and
    how a user could use the app. As you recreate the app’s UI from scratch, you’re
    able to compare what you’re doing to what the actual app looks like.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to use Interface Builder and storyboards to add a tab
    bar controller scene to your app, configure the button titles and icons, and add
    navigation controllers for the JournalList and Map screens. This will familiarize
    you with adding and configuring UI elements for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will continue setting up your app’s UI and become familiar
    with more UI elements. You will add and configure the remaining screens for your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
