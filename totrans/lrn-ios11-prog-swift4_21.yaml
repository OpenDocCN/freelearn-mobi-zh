- en: Understanding Core Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Core Data
- en: Our app is coming along nicely and we are close to wrapping it up. In the previous
    chapter, we created a restaurant review form, the Create Review form, which allows
    us to take pictures or use photos from our library. We can apply filters to photos
    and even add more filters quickly by updating our plist file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序进展顺利，我们即将完成它。在前一章中，我们创建了一个餐厅评论表单，即创建评论表单（Create Review form），它允许我们拍照或使用相册中的照片。我们可以对照片应用滤镜，甚至可以通过更新我们的
    plist 文件快速添加更多滤镜。
- en: In this chapter, we finish up working on the Create Review form. We get the
    form fully working where we can save the data entered into the form to what is
    known as Core Data. Core Data is a framework that handles persistent data using
    what is known as **Object-Relational Mapping** (**ORM**). We go much deeper into
    what Core Data is and how to use it in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将完成创建评论表单（Create Review form）的工作。我们使表单完全工作，可以将表单中输入的数据保存到所谓的 Core Data
    中。Core Data 是一个框架，它使用所谓的 **对象关系映射（Object-Relational Mapping，ORM**）来处理持久化数据。在本章中，我们将更深入地探讨
    Core Data 是什么以及如何使用它。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is Core Data?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Core Data？
- en: What are `NSManagedObjectModel`, `NSManagedObjectContext`, and `NSPersistentStoreCoordinator`?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObjectModel`、`NSManagedObjectContext` 和 `NSPersistentStoreCoordinator`
    是什么？'
- en: Creating our first Core Data model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个 Core Data 模型
- en: What is Core Data?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Core Data？
- en: 'Let''s start by taking a quote directly from Apple: <q>"Core Data is a framework
    for managing and persisting an object graph."</q> Apple does not call Core Data
    a database, even though, behind the scenes, it saves data to a SQLite file in
    iOS. Core Data is very hard to explain to someone new to programming or to someone
    who has come from a different programming language. However, in iOS 10, Core Data
    has been dramatically simplified. Having a general understanding of what Core
    Data does and how it works is sufficient for our purposes in this book.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从直接引用苹果公司的一句话开始：<q>"Core Data 是一个用于管理和持久化对象图（object graph）的框架。"</q> 苹果公司并没有将
    Core Data 称作数据库，尽管在 iOS 中，它实际上是将数据保存到 SQLite 文件中。对于编程新手或来自不同编程语言背景的人来说，Core Data
    非常难以解释。然而，在 iOS 10 中，Core Data 的使用已经大大简化了。对 Core Data 的功能和它的工作原理有一个一般性的理解，就足以满足我们在本书中的需求。
- en: 'When using the Core Data framework, you should be familiar with the **managed
    object model**, the managed object context, and the **persistent store coordinator**.
    Let''s look at a diagram to get a better understanding of how they interact with
    each other:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Core Data 框架时，你应该熟悉 **管理对象模型（managed object model**）、管理对象上下文以及 **持久化存储协调器（persistent
    store coordinator**）。让我们通过一个图表来更好地理解它们之间的交互：
- en: '![](img/9ef91087-0a08-4ef0-9745-929faa308bea.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9ef91087-0a08-4ef0-9745-929faa308bea.png)'
- en: '`NSManagedObjectModel`: The managed object model represents the data model
    of your Core Data application. The managed object model interacts with all of
    the data models (also known as entities) that you create within your app. This
    model is known for any relationships that your data may have in your app. The
    managed object model interacts with your data model as well as with the persistent
    store coordinator.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObjectModel`：管理对象模型代表你的 Core Data 应用程序的数据模型。管理对象模型与你在应用中创建的所有数据模型（也称为实体）交互。该模型以任何数据模型中可能存在的关系而闻名。管理对象模型与你的数据模型以及持久化存储协调器交互。'
- en: Entities are just objects that represent your data. In our app, since we are
    going to be saving customer reviews for restaurants, we need to create a review
    entity.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实体（Entities）只是代表你的数据的对象。在我们的应用中，由于我们将要保存餐厅的评论，我们需要创建一个评论实体。
- en: '`NSManagedObjectContext`: The managed object context manages a collection of
    model objects, which it receives from the persistent store coordinator. The managed
    object context is responsible for creating, reading, updating, and deleting models.
    The context is what you interact with the most.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSManagedObjectContext`：管理对象上下文（managed object context）管理从持久化存储协调器接收到的模型对象集合。管理对象上下文负责创建、读取、更新和删除模型。上下文是你与之交互最多的部分。'
- en: '`NSPersistentStoreCoordinator`: The persistent store coordinator has a reference
    to the managed object model, as well as the managed object context. The persistent
    store coordinator communicates with the persistent object store. The persistent
    store coordinator interacts with an object graph. This graph is where you create
    your entities and set up relationships within your app.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NSPersistentStoreCoordinator`：持久化存储协调器有一个对托管对象模型和托管对象上下文的引用。持久化存储协调器与持久化对象存储进行通信。持久化存储协调器与对象图交互。这个图是您创建实体并在应用内设置关系的地点。'
- en: Core Data is not an easy topic, so you do not need to worry about the finer
    details. The more you work with Core Data, the easier it becomes to understand
    it. In this chapter, focus on obtaining a high-level understanding and the rest
    will come.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Core Data 不是一个容易的主题，所以你不需要担心更详细的细节。你越使用 Core Data，它就越容易理解。在本章中，专注于获得高级理解，其余的将会逐渐明了。
- en: 'Before iOS 10, you had to create an instance of each of the following: the
    managed object model, the managed object context, and the persistent store coordinator.
    Now, in iOS 10, these have been consolidated into what is called `NSPersistentContainer`.
    We cover this shortly but, first, we need to create our data model.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 iOS 10 之前，您必须创建以下每个实例：托管对象模型、托管对象上下文和持久化存储协调器。现在，在 iOS 10 中，这些已经被合并为所谓的 `NSPersistentContainer`。我们稍后会介绍这个，但首先，我们需要创建我们的数据模型。
- en: Creating a data model
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据模型
- en: 'The data model is where you create your app''s model objects and their properties.
    For our project, we only need to create one model object, called **Review**. Let''s
    create a managed object model now:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 数据模型是您创建应用模型对象及其属性的地方。对于我们的项目，我们只需要创建一个模型对象，称为 **Review**。现在让我们创建一个托管对象模型：
- en: In the Navigator panel, right-click on the `Misc` folder and create a new group,
    called `Core Data`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航器面板中，右键点击 `Misc` 文件夹并创建一个新的组，命名为 `Core Data`。
- en: Next, right-click this new `Core Data` folder and click New File.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，右键点击这个新的 `Core Data` 文件夹，然后点击新建文件。
- en: 'Inside the Choose a template for your new file screen, select iOS at the top
    and then scroll down to the Core Data section and select Data Model. Then, hit
    Next:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择 iOS，然后向下滚动到 Core Data 部分，并选择数据模型。然后，点击下一步：
- en: '![](img/93008a3d-61ec-4403-bae7-be1cd247ae93.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93008a3d-61ec-4403-bae7-be1cd247ae93.png)'
- en: Name the file `LetsEatModel` and click Create.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `LetsEatModel` 并点击创建。
- en: 'Click Add Entity in the screen that appears:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的屏幕上点击添加实体：
- en: '![](img/a3e64f60-7bdd-4a77-8bd2-889a5f50a4ff.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3e64f60-7bdd-4a77-8bd2-889a5f50a4ff.png)'
- en: 'Then, in the bottom-right corner of the new screen, change the Editor Style
    to the Graph Style:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在新屏幕的右下角，将编辑样式更改为图形样式：
- en: '![](img/33f5329e-51e4-41cf-8090-f3e80d91b565.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33f5329e-51e4-41cf-8090-f3e80d91b565.png)'
- en: 'In the Graph Style, double-click on Entity in the box in the middle of the
    graph to change our entity''s name:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在图形样式下，双击图中中间的实体来更改我们的实体名称：
- en: '![](img/375db4e2-0dd9-4254-b3f8-011d5be89f86.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/375db4e2-0dd9-4254-b3f8-011d5be89f86.png)'
- en: Update the text to say Review and then hit *Enter*.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本更新为 Review 并按 *Enter*。
- en: 'Now that we have our first entity created, let''s add our first attribute. Select
    our Review Entity and click the Add Attribute button in the bottom-right corner
    of the screen. The word attribute is under Attributes in the box in the middle
    of the screen:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了第一个实体，让我们添加第一个属性。选择我们的 Review 实体，然后点击屏幕右下角的添加属性按钮。属性这个词位于屏幕中间的框中的属性部分：
- en: '![](img/eff0e2c9-109d-48ad-a330-78e326ff5f14.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eff0e2c9-109d-48ad-a330-78e326ff5f14.png)'
- en: You see that Xcode has given you an error. The reason for the error is that
    we created an attribute without giving it a type yet. Let's do this now.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以看到 Xcode 给你了一个错误。错误的原因是我们创建了一个属性，但没有给它指定类型。现在让我们来做这个。
- en: 'Select the word attribute and open your Utilities panel. You only see three
    icons: the File inspector, the Quick Help inspector, and the Data Model inspector.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择属性这个词并打开你的工具面板。你只看到三个图标：文件检查器、快速帮助检查器和数据模型检查器。
- en: Select the last icon, the Data Model inspector, and, under Attribute, click
    on the drop-down for Attribute Type and change it from Undefined to String. The
    error should now disappear.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最后一个图标，即数据模型检查器，然后在属性部分，点击属性类型下拉菜单，将其从未定义更改为字符串。错误应该现在消失了。
- en: Next, under Attribute in the Data Model inspector, change the Name from attribute
    to name and hit *Enter*.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在数据模型检查器中的属性部分，将名称从属性更改为名称并按 *Enter*。
- en: 'Your first attribute should now look as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您的第一个属性现在应该看起来如下：
- en: '![](img/101372a4-8d83-4a96-9d7a-1d0749428f29.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/101372a4-8d83-4a96-9d7a-1d0749428f29.png)'
- en: 'We have created our first attribute in the Graph Style and now need to set
    up the rest of our attributes, which we do in the Table Style:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在图形样式下创建了第一个属性，现在需要设置其余的属性，我们在表格样式下进行此操作：
- en: 'Switch the Editor Style to the Table Style and then click Add Attribute:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编辑器样式切换到表格样式，然后点击添加属性：
- en: Update the attribute to date and set its data type to Date. You do not have
    to do anything in the Data Model inspector for this attribute.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将属性更新为日期类型并设置其数据类型为Date。对于此属性，您在数据模型检查器中无需执行任何操作。
- en: Next, select the + button in the Attributes section of the Table Style screen
    under the two attributes we just added.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在表格样式屏幕下的属性部分选择我们刚刚添加的两个属性旁边的+按钮。
- en: Update this third attribute to `customerReview` and set its data type to String.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此第三个属性更新为`customerReview`并设置其数据类型为String。
- en: Next, add a fourth attribute, named rating with a data type of Float.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个名为rating的第四个属性，其数据类型为Float。
- en: Now, add a fifth attribute, named `restaurantID` with a data type of Integer
    32.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一个名为`restaurantID`的第五个属性，其数据类型为Integer 32。
- en: When we save reviews, we save them with their `restaurantID`. Whenever we go
    to a restaurant detail page, we get all of the reviews just for that specific
    restaurant and then display them. If we do not have any reviews, then we display
    a default message.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们保存评论时，我们会将它们与它们的`restaurantID`一起保存。每次我们访问餐厅详情页面时，我们都会获取该特定餐厅的所有评论，然后显示它们。如果没有评论，则显示默认消息。
- en: Lastly, add a sixth attribute, named `uuid` with a data type of String and,
    under Attribute in the Data Model inspector, uncheck the Optional checkbox. This
    attribute is our unique ID for each review.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个名为`uuid`的第六个属性，其数据类型为String，并在数据模型检查器中的属性下取消选择可选复选框。此属性是每个评论的唯一ID。
- en: 'Your Attributes table should now look like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Attributes表现在应该看起来如下：
- en: '![](img/07b1dea8-1c30-4b5e-bae0-38d978c86b62.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07b1dea8-1c30-4b5e-bae0-38d978c86b62.png)'
- en: Now that we have our attributes set, we need to do a few more things before
    we start working on some code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了属性，在开始编写代码之前，我们还需要做一些其他事情。
- en: Entity auto-generation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体自动生成
- en: 'We could have Xcode create a file for our Review Entity; however, if we wanted
    to add more attributes, we would have to generate more code. Core Data offers
    the ability to auto-generate our code for us. To take advantage of this feature:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以让Xcode为我们的Review实体创建文件；然而，如果我们想添加更多属性，我们就必须生成更多代码。Core Data为我们提供了自动生成代码的能力。为了利用此功能：
- en: In in the list of entities in the left panel, select our only Entity, Review.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板的实体列表中，选择我们唯一的实体，即Review。
- en: After you select the entity, select the Data Model inspector in the Utilities
    panel. You should notice that your Data Model inspector panel has changed from
    when we were working on our Attributes.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择实体后，在实用工具面板中选择数据模型检查器。您应该注意到，当我们在属性上工作时，您的数据模型检查器面板已经发生了变化。
- en: '![](img/4830e621-3002-4827-97c4-89fcfadf341c.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4830e621-3002-4827-97c4-89fcfadf341c.png)'
- en: Now, hit cmd + *B* to build the project. This will create the Review class that
    we created in Core Data. You will not see the file anywhere, but it has been created.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按cmd + *B*构建项目。这将创建我们在Core Data中创建的Review类。您可能看不到文件，但它已经被创建。
- en: We now need to create another entity called `RestaurantPhoto`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建另一个名为`RestaurantPhoto`的实体。
- en: Restaurant Photo Entity
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 餐厅照片实体
- en: 'Using the same steps as in the previous section, create a photo entity with
    the following values:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与上一节相同的步骤，创建一个具有以下值的照片实体：
- en: '![](img/102c8634-26e1-4055-840a-523dbf019416.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/102c8634-26e1-4055-840a-523dbf019416.png)'
- en: Now, hit *cmd* + *B* to build the project; this creates the `Photo` class that
    we created in Core Data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按*cmd* + *B*构建项目；这将创建我们在Core Data中创建的`Photo`类。
- en: We cannot just store images in Core Data, as they have to be converted to data
    first. Therefore, we take the image used in the review and convert it to binary
    data for Core Data to save. Then, when we pull the review out of the Core Data,
    we convert it back to an image to display it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能直接在Core Data中存储图片，因为它们必须先转换为数据。因此，我们将用于评论的图片转换为二进制数据以便Core Data保存。然后，当我们从Core
    Data中提取评论时，我们将其转换回图片以显示。
- en: For learning, we store images in Core Data. I would stay away from doing this
    as much as possible, because images can be large and you can quickly fill up the
    user's storage. If you are using a feed, you can save the URL path to the image
    instead of the actual image. If the user is not online, then you can just display
    a placeholder in its place.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习，我们在Core Data中存储图像。我会尽量避免这样做，因为图像可能很大，你很快就会填满用户的存储空间。如果你使用的是信息流，你可以保存图像的URL路径而不是实际的图像。如果用户不在线，你只需在它的位置显示一个占位符即可。
- en: Review item
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查条目
- en: We get this new `Review` class back from Core Data when we need to fetch items
    from it. Instead of passing the `Review` class around, we create a generic data
    object that we can use instead.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要从Core Data中检索项目时，我们得到这个新的`Review`类。我们不再传递`Review`类，而是创建一个通用的数据对象，我们可以用它来代替。
- en: 'When I work with stored data, I typically like to have two model objects: one
    used when storing data and the other generic. In the past, passing around Core
    Data objects caused a lot of technical issues. These issues were addressed in
    iOS 10; however, in an overabundance of caution, I typically get the items from
    Core Data and then convert those objects into a struct.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我处理存储的数据时，我通常喜欢有两个模型对象：一个用于存储数据，另一个是通用的。在过去，传递Core Data对象引起了很多技术问题。这些问题在iOS
    10中得到了解决；然而，出于过度谨慎，我通常从Core Data获取项目，然后将这些对象转换为结构体。
- en: 'Let''s create this file now:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建这个文件：
- en: Right-click the `Review Form` folder and select New File.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Review Form`文件夹并选择新建文件。
- en: Inside Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”的屏幕上，顶部选择iOS，然后选择Swift File。然后点击下一步。
- en: Name this file `ReviewItem` and hit Create.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`ReviewItem`并点击创建。
- en: 'Update your file to the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件更新为以下内容：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file is not doing anything special, other than using a variable to handle
    dates.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件没有做任何特别的事情，只是使用一个变量来处理日期。
- en: The extension in this file allows us to take the Review from Core Data and map
    it to a `ReviewItem`. Our custom `init()` method allows us just to pass the `Review`
    object into the `init` parameters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件中的扩展允许我们将从Core Data中获取的`Review`映射到`ReviewItem`。我们的自定义`init()`方法允许我们只需将`Review`对象传递到`init`参数中。
- en: 'We need to create another item for our photos that we are saving. This file
    has the same basic structure as the `ReviewItem` does. Let''s create this file
    now:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为我们要保存的照片创建另一个条目。这个文件与`ReviewItem`具有相同的基本结构。现在让我们创建这个文件：
- en: Right-click `Controllers` to create a new group called `Photo Reviews`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Controllers`创建一个名为`Photo Reviews`的新组。
- en: Right-click the `Photo Filter` folder and select New File.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Photo Filter`文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Swift File. Then hit Next.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”的屏幕上，顶部选择iOS，然后选择Swift File。然后点击下一步。
- en: Name this file `RestaurantPhotoItem` and hit Create.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件命名为`RestaurantPhotoItem`并点击创建。
- en: 'Update your file to the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的文件更新为以下内容：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first part of this file is exactly what we did for the review item, except
    for the `photoData` variable. Since we cannot store an image directly into Core
    Data, we need to convert it into binary data. The `photoData` variable handles
    this for us and makes it easier when we save an item just to pass `photoData`
    to Core Data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的前一部分与我们为审查条目所做的是一样的，只是`photoData`变量。由于我们无法直接将图像存储到Core Data中，我们需要将其转换为二进制数据。`photoData`变量为我们处理了这个问题，并在我们保存项目时只需传递`photoData`到Core
    Data就更容易了。
- en: Now that we have our `ReviewItem` and `RestaurantPhotoItem`, we need to set
    up our manager next.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`ReviewItem`和`RestaurantPhotoItem`，我们需要设置我们的管理器。
- en: Core Data manager
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Core Data管理器
- en: 'As we have done throughout the book, we are going to create a `Manager` class.
    This class will be responsible for getting data in and out of Core Data. Let''s
    get started:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在整本书中所做的那样，我们将创建一个`Manager`类。这个类将负责从Core Data中获取和输出数据。让我们开始吧：
- en: Right-click the `Core Data` folder in the `Common` folder and select New File.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Common`文件夹中的`Core Data`文件夹上右键点击并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then hit Next.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择新文件模板”的屏幕上，顶部选择iOS，然后选择Cocoa Touch Class。然后点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `CoreDataManager`'
  id: totrans-90
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`CoreDataManager`
- en: 'Subclass: `NSObject`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`NSObject`
- en: 'Also create XIB: Unchecked'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建XIB：未勾选
- en: 'Language: `Swift`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: Click Next and then Create.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。
- en: 'When the file opens, under your `import UIKit`, add the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件打开时，在您的 `import UIKit` 下方添加以下内容：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This import allows us to have access to the Core Data library. Next, inside
    the class definition, add the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个导入使我们能够访问 Core Data 库。接下来，在类定义内部，添加以下内容：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This constant, which is an `NSPersistentContainer`, gives us everything we need
    within a Core Data stack. As we discussed earlier, the `NSPersistentContainer`
    is composed of three things; a persistent store coordinator, a managed object
    context, and a managed object model.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个常量是一个 `NSPersistentContainer`，它为我们提供了 Core Data 栈中所需的一切。正如我们之前讨论的，`NSPersistentContainer`
    由三部分组成；一个持久化存储协调器、一个托管对象上下文和一个托管对象模型。
- en: You may have noticed an error after adding this variable. The reason for the
    error is that we do not have an `init()` method created.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到添加此变量后出现了一个错误。错误的原因是我们没有创建一个 `init()` 方法。
- en: 'Let''s add this `init()` method after the constant we just added:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在刚刚添加的常量之后添加这个 `init()` 方法：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code is initializing the container and grabbing the managed object model
    we created earlier. The model is now able to see all of our entities and attributes
    therein.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码初始化容器并获取我们之前创建的托管对象模型。现在模型能够看到我们所有的实体及其属性。
- en: 'Our `CoreDataManager` needs to do two things for us. We need to be able to
    add new a `ReviewItem` and fetch it. When we save a restaurant review, we want
    to be able to save the review with the restaurant. We do not need to save all
    of the restaurant information, since we can simply use the `restaurantID`. When
    we go to restaurant details, we can check Core Data for any reviews for a particular
    restaurant by its `restaurantID`. Let''s add the following method after our `init()`
    method to accomplish this task for us:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `CoreDataManager` 需要为我们做两件事。我们需要能够添加新的 `ReviewItem` 并获取它。当我们保存餐厅评论时，我们希望能够与餐厅一起保存评论。由于我们可以简单地使用
    `restaurantID`，我们不需要保存所有餐厅信息。当我们查看餐厅详情时，我们可以通过 `restaurantID` 在 Core Data 中检查特定餐厅的任何评论。让我们在
    `init()` 方法之后添加以下方法来完成这项任务：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's review this code. Our `fetchReviews(by:)` method takes an ID and we use
    it to find reviews for a particular restaurant.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这段代码。我们的 `fetchReviews(by:)` 方法接受一个 ID，并使用它来查找特定餐厅的评论。
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the first line, we are creating an instance of the **managed object context**
    (**moc**). This variable allows us to interact with Core Data. In the next line,
    we are creating a fetch request. This request is passed to the managed object
    context and tells it what we need. Finally, we are creating a predicate, which
    allows us to apply some search parameters. Specifically, we are saying that we
    want every `ReviewItem` that has the ID that we pass it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们创建了一个 **托管对象上下文**（**moc**）的实例。这个变量允许我们与 Core Data 交互。在下一行，我们创建了一个获取请求。这个请求传递给托管对象上下文，并告诉它我们需要什么。最后，我们创建了一个谓词，这允许我们应用一些搜索参数。具体来说，我们正在说我们想要每个具有我们传递的
    ID 的 `ReviewItem`。
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are applying a sort descriptor to our request. Instead of getting reviews
    back in a random order, we sort all of the reviews by date.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在对我们的请求应用一个排序描述符。我们不是以随机顺序获取评论，而是按日期对所有评论进行排序。
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, we are wrapping everything into a `do...catch` block. When the search
    occurs, it returns an array of `ReviewItems` or, if there were no `ReviewItems`,
    an empty array. If there was a problem with your setup, then you get a fatal error.
    When the fetch is complete, we then loop through the items and create our `ReviewItems`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将一切包裹在 `do...catch` 块中。当搜索发生时，它返回一个 `ReviewItems` 数组，如果没有 `ReviewItems`，则返回一个空数组。如果您的设置有问题，则会收到一个致命错误。当获取完成时，我们遍历项目并创建我们的
    `ReviewItems`。
- en: Here, we are applying a sort descriptor to our request. Instead of getting reviews
    back in a random order, we sort all of the reviews by date.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在对我们的请求应用一个排序描述符。我们不是以随机顺序获取评论，而是按日期对所有评论进行排序。
- en: 'We have added our method to get reviews; we need to do the same for fetching
    photos. Add the following after the `fetchReviews(identifier:)` method:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了获取评论的方法；我们需要为获取照片做同样的事情。在 `fetchReviews(identifier:)` 方法之后添加以下内容：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Everything is the same as what we did to fetch review items, except we are
    fetching `RestaurantPhoto` items instead. Now we need to add a method to save
    our data into Core Data. Let''s add the next two methods by adding the following
    after our `init()` method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们获取评论项所做的一切相同，只是我们现在正在获取 `RestaurantPhoto` 项。现在我们需要添加一个方法将我们的数据保存到 Core Data
    中。让我们在 `init()` 方法之后添加以下两个方法：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You will get an error, because we have not created the `save()` method yet.
    Ignore it for now, as it will be created next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个错误，因为我们还没有创建 `save()` 方法。现在忽略它，因为它将在稍后创建。
- en: This `addReview()` method takes a `ReviewItem` in the parameters. We convert
    the `ReviewItem` into a `Review` and then call the `save()` method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `addReview()` 方法接受一个 `ReviewItem` 参数。我们将 `ReviewItem` 转换为 `Review`，然后调用 `save()`
    方法。
- en: 'Now, let''s add the `save()` method after the `addReview()` method we just
    created:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在刚刚创建的 `addReview()` 方法之后添加 `save()` 方法：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once again, we are wrapping everything into a `do...catch` block. Inside of
    the do, we check to see if the managed object context has changed. If it has changed,
    then we call the `save()` method. We have now completed our Core Data manager.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将所有内容包裹在一个 `do...catch` 块中。在 `do` 块内部，我们检查托管对象上下文是否已更改。如果已更改，则调用 `save()`
    方法。现在我们已经完成了我们的 Core Data 管理器。
- en: 'Next, we need to create another manager class. This manager is responsible
    for making calls to the Core Data manager, similar to how the corresponding manager
    in the explore manager is responsible for getting the data from the plist; this
    gets us photos and reviews. Let''s create this manager file now:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建另一个管理类。这个管理类负责调用 Core Data 管理器，类似于探索管理器中相应的管理器负责从 plist 中获取数据；这为我们获取照片和评论。现在让我们创建这个管理文件：
- en: Right-click the `Misc` folder and select New File.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Misc` 文件夹并选择新建文件。
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then hit Next.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新文件模板的屏幕上，顶部选择 iOS，然后选择 Cocoa Touch Class。然后点击下一步。
- en: 'In the options screen that appears, add the following:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的选项屏幕中，添加以下内容：
- en: 'New file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 新文件：
- en: 'Class: `ReviewDataManager`'
  id: totrans-128
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类：`ReviewDataManager`
- en: 'Subclass: `NSObject`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子类：`NSObject`
- en: 'Also create XIB: Unchecked'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也创建 XIB：未选中
- en: 'Language: `Swift`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言：`Swift`
- en: 'Hit Next and then Create. Update your file to the following:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步然后创建。更新你的文件如下：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This manager class is similar to the other managers that we have created so
    far. In this manager, our fetch method takes an ID in the parameter. This ID represents
    the `restaurantID` that we use to search for `ReviewItems` in Core Data. If we
    find any `ReviewItems`, we add them to our array.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个管理类与我们迄今为止创建的其他管理类类似。在这个管理类中，我们的获取方法接受一个参数 ID。这个 ID 代表我们用来在 Core Data 中搜索
    `ReviewItems` 的 `restaurantID`。如果我们找到任何 `ReviewItems`，我们将它们添加到我们的数组中。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about what Core Data is and how to use it. We also
    looked at `NSManagedObjectModel`, `NSManagedObjectContext`, and `NSPersistentStoreCoordinator`
    and how they work together inside Core Data. Even if they all do not make sense,
    and they did not work for me the first time, it is all right because it eventually
    clicks. Finally, we created two Core Data models, one for reviews and one for
    photos.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Core Data 是什么以及如何使用它。我们还探讨了 `NSManagedObjectModel`、`NSManagedObjectContext`
    和 `NSPersistentStoreCoordinator` 以及它们如何在 Core Data 内部协同工作。即使它们一开始都不太明白，而且第一次尝试时它们没有工作，那也没关系，因为最终会明白的。最后，我们创建了两个
    Core Data 模型，一个用于评论，一个用于照片。
- en: In the next chapter, we work on actually saving the data we create as well as
    getting it back out. We take our reviews and photos and display them inside our
    restaurant details.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实际保存我们创建的数据以及如何将其取回。我们将我们的评论和照片显示在我们的餐厅详情中。
