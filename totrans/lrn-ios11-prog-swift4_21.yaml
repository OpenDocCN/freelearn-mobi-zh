- en: Understanding Core Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app is coming along nicely and we are close to wrapping it up. In the previous
    chapter, we created a restaurant review form, the Create Review form, which allows
    us to take pictures or use photos from our library. We can apply filters to photos
    and even add more filters quickly by updating our plist file.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we finish up working on the Create Review form. We get the
    form fully working where we can save the data entered into the form to what is
    known as Core Data. Core Data is a framework that handles persistent data using
    what is known as **Object-Relational Mapping** (**ORM**). We go much deeper into
    what Core Data is and how to use it in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Core Data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are `NSManagedObjectModel`, `NSManagedObjectContext`, and `NSPersistentStoreCoordinator`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first Core Data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Core Data?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by taking a quote directly from Apple: <q>"Core Data is a framework
    for managing and persisting an object graph."</q> Apple does not call Core Data
    a database, even though, behind the scenes, it saves data to a SQLite file in
    iOS. Core Data is very hard to explain to someone new to programming or to someone
    who has come from a different programming language. However, in iOS 10, Core Data
    has been dramatically simplified. Having a general understanding of what Core
    Data does and how it works is sufficient for our purposes in this book.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the Core Data framework, you should be familiar with the **managed
    object model**, the managed object context, and the **persistent store coordinator**.
    Let''s look at a diagram to get a better understanding of how they interact with
    each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ef91087-0a08-4ef0-9745-929faa308bea.png)'
  prefs: []
  type: TYPE_IMG
- en: '`NSManagedObjectModel`: The managed object model represents the data model
    of your Core Data application. The managed object model interacts with all of
    the data models (also known as entities) that you create within your app. This
    model is known for any relationships that your data may have in your app. The
    managed object model interacts with your data model as well as with the persistent
    store coordinator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entities are just objects that represent your data. In our app, since we are
    going to be saving customer reviews for restaurants, we need to create a review
    entity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NSManagedObjectContext`: The managed object context manages a collection of
    model objects, which it receives from the persistent store coordinator. The managed
    object context is responsible for creating, reading, updating, and deleting models.
    The context is what you interact with the most.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NSPersistentStoreCoordinator`: The persistent store coordinator has a reference
    to the managed object model, as well as the managed object context. The persistent
    store coordinator communicates with the persistent object store. The persistent
    store coordinator interacts with an object graph. This graph is where you create
    your entities and set up relationships within your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core Data is not an easy topic, so you do not need to worry about the finer
    details. The more you work with Core Data, the easier it becomes to understand
    it. In this chapter, focus on obtaining a high-level understanding and the rest
    will come.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before iOS 10, you had to create an instance of each of the following: the
    managed object model, the managed object context, and the persistent store coordinator.
    Now, in iOS 10, these have been consolidated into what is called `NSPersistentContainer`.
    We cover this shortly but, first, we need to create our data model.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data model is where you create your app''s model objects and their properties.
    For our project, we only need to create one model object, called **Review**. Let''s
    create a managed object model now:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Navigator panel, right-click on the `Misc` folder and create a new group,
    called `Core Data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click this new `Core Data` folder and click New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the Choose a template for your new file screen, select iOS at the top
    and then scroll down to the Core Data section and select Data Model. Then, hit
    Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93008a3d-61ec-4403-bae7-be1cd247ae93.png)'
  prefs: []
  type: TYPE_IMG
- en: Name the file `LetsEatModel` and click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Add Entity in the screen that appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3e64f60-7bdd-4a77-8bd2-889a5f50a4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, in the bottom-right corner of the new screen, change the Editor Style
    to the Graph Style:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33f5329e-51e4-41cf-8090-f3e80d91b565.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Graph Style, double-click on Entity in the box in the middle of the
    graph to change our entity''s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/375db4e2-0dd9-4254-b3f8-011d5be89f86.png)'
  prefs: []
  type: TYPE_IMG
- en: Update the text to say Review and then hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have our first entity created, let''s add our first attribute. Select
    our Review Entity and click the Add Attribute button in the bottom-right corner
    of the screen. The word attribute is under Attributes in the box in the middle
    of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eff0e2c9-109d-48ad-a330-78e326ff5f14.png)'
  prefs: []
  type: TYPE_IMG
- en: You see that Xcode has given you an error. The reason for the error is that
    we created an attribute without giving it a type yet. Let's do this now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the word attribute and open your Utilities panel. You only see three
    icons: the File inspector, the Quick Help inspector, and the Data Model inspector.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the last icon, the Data Model inspector, and, under Attribute, click
    on the drop-down for Attribute Type and change it from Undefined to String. The
    error should now disappear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under Attribute in the Data Model inspector, change the Name from attribute
    to name and hit *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your first attribute should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/101372a4-8d83-4a96-9d7a-1d0749428f29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have created our first attribute in the Graph Style and now need to set
    up the rest of our attributes, which we do in the Table Style:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch the Editor Style to the Table Style and then click Add Attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the attribute to date and set its data type to Date. You do not have
    to do anything in the Data Model inspector for this attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the + button in the Attributes section of the Table Style screen
    under the two attributes we just added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update this third attribute to `customerReview` and set its data type to String.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add a fourth attribute, named rating with a data type of Float.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a fifth attribute, named `restaurantID` with a data type of Integer
    32.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we save reviews, we save them with their `restaurantID`. Whenever we go
    to a restaurant detail page, we get all of the reviews just for that specific
    restaurant and then display them. If we do not have any reviews, then we display
    a default message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, add a sixth attribute, named `uuid` with a data type of String and,
    under Attribute in the Data Model inspector, uncheck the Optional checkbox. This
    attribute is our unique ID for each review.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Attributes table should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07b1dea8-1c30-4b5e-bae0-38d978c86b62.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our attributes set, we need to do a few more things before
    we start working on some code.
  prefs: []
  type: TYPE_NORMAL
- en: Entity auto-generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We could have Xcode create a file for our Review Entity; however, if we wanted
    to add more attributes, we would have to generate more code. Core Data offers
    the ability to auto-generate our code for us. To take advantage of this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: In in the list of entities in the left panel, select our only Entity, Review.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you select the entity, select the Data Model inspector in the Utilities
    panel. You should notice that your Data Model inspector panel has changed from
    when we were working on our Attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4830e621-3002-4827-97c4-89fcfadf341c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, hit cmd + *B* to build the project. This will create the Review class that
    we created in Core Data. You will not see the file anywhere, but it has been created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to create another entity called `RestaurantPhoto`.
  prefs: []
  type: TYPE_NORMAL
- en: Restaurant Photo Entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the same steps as in the previous section, create a photo entity with
    the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/102c8634-26e1-4055-840a-523dbf019416.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, hit *cmd* + *B* to build the project; this creates the `Photo` class that
    we created in Core Data.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot just store images in Core Data, as they have to be converted to data
    first. Therefore, we take the image used in the review and convert it to binary
    data for Core Data to save. Then, when we pull the review out of the Core Data,
    we convert it back to an image to display it.
  prefs: []
  type: TYPE_NORMAL
- en: For learning, we store images in Core Data. I would stay away from doing this
    as much as possible, because images can be large and you can quickly fill up the
    user's storage. If you are using a feed, you can save the URL path to the image
    instead of the actual image. If the user is not online, then you can just display
    a placeholder in its place.
  prefs: []
  type: TYPE_NORMAL
- en: Review item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We get this new `Review` class back from Core Data when we need to fetch items
    from it. Instead of passing the `Review` class around, we create a generic data
    object that we can use instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I work with stored data, I typically like to have two model objects: one
    used when storing data and the other generic. In the past, passing around Core
    Data objects caused a lot of technical issues. These issues were addressed in
    iOS 10; however, in an overabundance of caution, I typically get the items from
    Core Data and then convert those objects into a struct.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create this file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Review Form` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside Choose a template for your new file screen, select iOS at the top and
    then Swift File. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `ReviewItem` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This file is not doing anything special, other than using a variable to handle
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: The extension in this file allows us to take the Review from Core Data and map
    it to a `ReviewItem`. Our custom `init()` method allows us just to pass the `Review`
    object into the `init` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create another item for our photos that we are saving. This file
    has the same basic structure as the `ReviewItem` does. Let''s create this file
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click `Controllers` to create a new group called `Photo Reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Photo Filter` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Swift File. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name this file `RestaurantPhotoItem` and hit Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first part of this file is exactly what we did for the review item, except
    for the `photoData` variable. Since we cannot store an image directly into Core
    Data, we need to convert it into binary data. The `photoData` variable handles
    this for us and makes it easier when we save an item just to pass `photoData`
    to Core Data.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our `ReviewItem` and `RestaurantPhotoItem`, we need to set
    up our manager next.
  prefs: []
  type: TYPE_NORMAL
- en: Core Data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have done throughout the book, we are going to create a `Manager` class.
    This class will be responsible for getting data in and out of Core Data. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Core Data` folder in the `Common` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `CoreDataManager`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `NSObject`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click Next and then Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the file opens, under your `import UIKit`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This import allows us to have access to the Core Data library. Next, inside
    the class definition, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This constant, which is an `NSPersistentContainer`, gives us everything we need
    within a Core Data stack. As we discussed earlier, the `NSPersistentContainer`
    is composed of three things; a persistent store coordinator, a managed object
    context, and a managed object model.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed an error after adding this variable. The reason for the
    error is that we do not have an `init()` method created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add this `init()` method after the constant we just added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code is initializing the container and grabbing the managed object model
    we created earlier. The model is now able to see all of our entities and attributes
    therein.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `CoreDataManager` needs to do two things for us. We need to be able to
    add new a `ReviewItem` and fetch it. When we save a restaurant review, we want
    to be able to save the review with the restaurant. We do not need to save all
    of the restaurant information, since we can simply use the `restaurantID`. When
    we go to restaurant details, we can check Core Data for any reviews for a particular
    restaurant by its `restaurantID`. Let''s add the following method after our `init()`
    method to accomplish this task for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's review this code. Our `fetchReviews(by:)` method takes an ID and we use
    it to find reviews for a particular restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we are creating an instance of the **managed object context**
    (**moc**). This variable allows us to interact with Core Data. In the next line,
    we are creating a fetch request. This request is passed to the managed object
    context and tells it what we need. Finally, we are creating a predicate, which
    allows us to apply some search parameters. Specifically, we are saying that we
    want every `ReviewItem` that has the ID that we pass it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are applying a sort descriptor to our request. Instead of getting reviews
    back in a random order, we sort all of the reviews by date.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we are wrapping everything into a `do...catch` block. When the search
    occurs, it returns an array of `ReviewItems` or, if there were no `ReviewItems`,
    an empty array. If there was a problem with your setup, then you get a fatal error.
    When the fetch is complete, we then loop through the items and create our `ReviewItems`.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are applying a sort descriptor to our request. Instead of getting reviews
    back in a random order, we sort all of the reviews by date.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have added our method to get reviews; we need to do the same for fetching
    photos. Add the following after the `fetchReviews(identifier:)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything is the same as what we did to fetch review items, except we are
    fetching `RestaurantPhoto` items instead. Now we need to add a method to save
    our data into Core Data. Let''s add the next two methods by adding the following
    after our `init()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You will get an error, because we have not created the `save()` method yet.
    Ignore it for now, as it will be created next.
  prefs: []
  type: TYPE_NORMAL
- en: This `addReview()` method takes a `ReviewItem` in the parameters. We convert
    the `ReviewItem` into a `Review` and then call the `save()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the `save()` method after the `addReview()` method we just
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we are wrapping everything into a `do...catch` block. Inside of
    the do, we check to see if the managed object context has changed. If it has changed,
    then we call the `save()` method. We have now completed our Core Data manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create another manager class. This manager is responsible
    for making calls to the Core Data manager, similar to how the corresponding manager
    in the explore manager is responsible for getting the data from the plist; this
    gets us photos and reviews. Let''s create this manager file now:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Misc` folder and select New File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Choose a template for your new file screen, select iOS at the top
    and then Cocoa Touch Class. Then hit Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the options screen that appears, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: `ReviewDataManager`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subclass: `NSObject`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also create XIB: Unchecked'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Language: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hit Next and then Create. Update your file to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This manager class is similar to the other managers that we have created so
    far. In this manager, our fetch method takes an ID in the parameter. This ID represents
    the `restaurantID` that we use to search for `ReviewItems` in Core Data. If we
    find any `ReviewItems`, we add them to our array.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about what Core Data is and how to use it. We also
    looked at `NSManagedObjectModel`, `NSManagedObjectContext`, and `NSPersistentStoreCoordinator`
    and how they work together inside Core Data. Even if they all do not make sense,
    and they did not work for me the first time, it is all right because it eventually
    clicks. Finally, we created two Core Data models, one for reviews and one for
    photos.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we work on actually saving the data we create as well as
    getting it back out. We take our reviews and photos and display them inside our
    restaurant details.
  prefs: []
  type: TYPE_NORMAL
