- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Get Started with Kotlin Android Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is a static programming language that allows you to write concise and
    typed code. It’s the language preferred for Android development by Google.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll get to know Kotlin as a programming language. We will
    cover features that are useful for Android development and their importance for
    Android developers. Additionally, we’ll cover how to migrate from Java to Kotlin
    and some useful tips for developers coming from Java backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin syntax, types, functions, and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating from Java to Kotlin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin features for Android developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the instructions in this chapter, you’ll need to have the following
    ready:'
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA Community Edition ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenJDK 11 or higher ([https://openjdk.java.net/install/](https://openjdk.java.net/install/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone](https://github.com/PacktPublishing/Mastering-Kotlin-for-Android/tree/main/chapterone)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kotlin is a language that runs on the **Java Virtual Machine** (**JVM**) developed
    by JetBrains. It was developed to overcome the following challenges that Java
    had:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Verbosity**: Java has a very verbose syntax and this leads to developers
    writing a lot of boilerplate code even for trivial tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Null pointer exceptions**: By default, Java allows variables to have null
    values. This normally results in null pointer exceptions, which has been called
    **the billion-dollar** **mistake** in Java as many applications have been affected
    by this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurency**: Java has threads, but managing concurrency and thread safety
    can be such a hard task at times. This leads to a lot of performance and memory
    issues that seriously affect applications that need to do work off the main thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Slow adoption of features**: The Java release cycle is slow and it is difficult
    to use the latest Java version to develop Android apps as there’s a lot to be
    done to ensure backward compatibility. This means it’s hard for Android developers
    to easily adopt the new language features and improvements as they’re stuck using
    older versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of functional support**: Java is not a functional language, which makes
    it hard for developers to write functional code in Java. It’s hard to employ features
    such as high-order functions or treat functions as first-class citizens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Over the years, Kotlin has evolved to be multiplatform and server-side and
    not serviced, and is used in data science as well. Some of the features where
    Kotlin has an edge over Java are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conciseness**: The syntax is concise, which in turn reduces the amount of
    boilerplate code that you write.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Null safety**: Many Java developers are very familiar with the famous **Null
    Pointer Exception** that was a source of many bugs and issues in applications.
    Kotlin was designed with null safety in mind. Variables that can have null values
    are indicated when declaring them, and before using these variables, the Kotlin
    compiler enforces checks for nullability, thereby reducing the number of exceptions
    and crashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coroutines support**: Kotlin has built-in support for Kotlin coroutines.
    Coroutines are lightweight threads that you can use to perform asynchronous operations.
    It’s easy to understand and use them in your applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data classes**: Kotlin has a built-in data class construct that makes it
    easy to define classes that are used primarily to store data. Data classes automatically
    generate **equals()**, **hashCode()**, and **toString()** methods, reducing the
    amount of boilerplate code required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extension functions**: Kotlin allows developers to add functions to existing
    classes without inheriting from them, through extension functions. This makes
    it easier to add functionality to existing classes and reduces the need for boilerplate
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart casting**: Kotlin’s smart casting system makes it possible to cast
    variables without the need for an explicit cast. The compiler automatically detects
    when a variable can be safely cast and performs the cast automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JetBrains is also the company behind IntelliJ IDEA. The language support in
    this **Integrated Development Environment** (**IDE**) is also great.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kotlin has evolved over the years to support the following different platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kotlin Multiplatform**: This is used to develop applications that target
    different platforms such as Android, iOS, and web applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin for server side**: This is used to write backend applications and
    a number of frameworks to support server-side development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin for Android**: Google has supported Kotlin as a first-class language
    for Android development since 2017'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin for JavaScript**: This provides support for writing Kotlin code that
    is transpiled to compatible JavaScript libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin/Native**: This compiles Kotlin code to native binaries and runs without
    a **Java Virtual** **Machine** (**JVM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin for data science**: You can use Kotlin to build and explore data pipelines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, Kotlin provides a more modern and concise approach to programming
    than Java while still maintaining interoperability with existing Java libraries
    and code. In addition, you can write Kotlin code and target different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have got the gist of Kotlin and its various features, let’s move
    on to the next section where we will understand Kotlin as a programming language
    and understand Kotlin syntax, types, functions, and classes.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin syntax, types, functions and classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’ll be looking at Kotlin syntax and familiarize ourselves
    with the language. Kotlin is a strongly typed language. The type of a variable
    is determined at the time of compilation. Kotlin has a rich type system that has
    the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nullable types**: Every type in Kotlin can either be nullable or non-nullable.
    Nullable types are denoted with a question mark operator – for example, **String?**.
    Non-nullable types are normal types without any operator at the end – for example,
    **String**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic types**: These types are similar to Java. Examples include Int, Long,
    Boolean, Double, and Char.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class types**: As Kotlin is an object-oriented programming language, it provides
    support for classes, sealed classes, interfaces, and so on. You define a class
    using the **class** keyword and you can add methods, properties, and constructors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arrays**: There is support for both primitive and object arrays. To declare
    a primitive array, you specify the type and size, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Kotlin automatically infers the type when you don’t specify it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Collections**: Kotlin has a rich collection of APIs providing types such
    as sets, maps, and lists. They’re designed to be concise and expressive, and the
    language offers a wide range of operations for sorting, filtering, mapping, and
    many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enum types**: These are used to define a fixed set of options. Kotlin has
    the **Enum** keyword for you to declare enumerations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional types**: Kotlin is a functional language as well, meaning functions
    are treated as first-class citizens. You can be able to assign functions to variables,
    return functions as values from functions, and pass functions as arguments to
    other functions. To define a function as a type, you use the **(Boolean) -> Unit**
    shorthand notation. This example takes a **Boolean** argument and returns a **Unit**
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ve learned the different types available in Kotlin, and we’ll use this knowledge
    in the next section to define some of these types.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kotlin project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create your first Kotlin project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open IntelliJ IDEA. On the welcome screen, click on **New Project**. You’ll
    be presented with a dialog to create your new project as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – New Project dialog](img/B19779_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – New Project dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s work through the options in the dialog shown in *Figure 1**.1* as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You start by giving the project a name. In this case, it’s **chapterone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You also specify the location of your project. This is normally where you store
    your working projects. Change the directory to your preferred one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, specify your target language from the options provided. In this case,
    we opt for **Kotlin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next step, specify your build system. We specify **Gradle**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need to specify the Java version that our project is going to use. In
    this case, it’s Java **11**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you specify the Gradle DSL to use. For this project, we’ve chosen to use
    **Kotlin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, you specify the group and artifact IDs that, when combined, form a unique
    identifier for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create** to finalize creating your new project. The IDE will create
    your project, which might take a few minutes. Once done, you’ll see your project
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Project structure](img/B19779_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Project structure
  prefs: []
  type: TYPE_NORMAL
- en: The IDE creates the project with the project structure seen in *Figure 1**.2*.
    We are mostly interested in the `src/main/kotlin` package, which is where we’ll
    add our Kotlin files.
  prefs: []
  type: TYPE_NORMAL
- en: Start by right-clicking the **src/main/kotlin** package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New** and then **New Kotlin Class/File**. Select the **File** option
    from the list that appears and name the file **Main**. The IDE will generate a
    **Main.kt** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we’ve created our first Kotlin project and added a Kotlin file, in
    the next section, we will create functions in this file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Kotlin, a function is a block of code that does a specific task. We use the
    `fun` keyword to define functions. Function names should be in camel case and
    descriptive to indicate what the function is doing. Functions can take arguments
    and return values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `main()` function in your `Main.kt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we’ve used the `fun` keyword to define a function with
    the name `main`. Inside the function, we have a `println` statement that prints
    the message `"``Hello Word!"`.
  prefs: []
  type: TYPE_NORMAL
- en: You can run the function by pressing the green run icon to the right of the
    function. You’ll see the console window pop up, displaying the message `"``Hello
    World!"`.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve learned how to create functions and print output to the console. In the
    next section, we’ll learn how to create classes in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To declare a class in Kotlin, we have the `class` keyword. We’re going to create
    a `Recipe` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the preceding class:'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve called the class **Recipe** and it has no constructor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the class, we have a member variable, **ingredients**, which is a **MutableList**
    of Strings. It’s mutable to allow us to add more items to the list. Defining variables
    in a class like this allows us to be able to access the variable anywhere in the
    class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have **addIngredient(name: String)**, which takes in a name as an argument.
    Inside the function, we add the argument to our ingredients list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we have the **getIngredients()** function, which returns an immutable
    list of strings. It simply returns the value of our ingredients list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To be able to use the class, we have to modify our main function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The changes can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new instance of the **Recipe** class and assign it to the
    **recipe** variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we call the **addIngredient** method on the **recipe** variable and pass
    in the string **Rice**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, we call the **addIngredient** method on the **recipe** variable and pass
    in the string **Chicken**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we call the **getIngredients** method on the **recipe** variable and
    print the result to the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run the main function again and your output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Recipes](img/B19779_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Recipes
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, the output is a list of ingredients
    that you added! Now you can prepare a nice rice and chicken meal, but in Kotlin!
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin has tons of features and we’ve barely scratched the surface. You can
    check out the official Kotlin documentation ([https://kotlinlang.org/docs/home.html](https://kotlinlang.org/docs/home.html))
    as well to learn more. You’ll also learn more features as you go deeper into this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve learned how to create classes, define top-level variables, and add functions
    to our class. This helps us understand how classes in Kotlin work. In the next
    section, we will learn how to migrate a Java class to Kotlin and some of the tools
    available to use in the migration.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from Java to Kotlin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Are you a Java developer and have your apps in Java? Are you wondering how
    you could get started with Kotlin? Worry not, this is your section. Kotlin offers
    two ways for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java-to-Kotlin migration**: The IDE that we are using, IntelliJ IDEA, has
    a tool for converting existing Java files to Kotlin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interoperability**: Kotlin is highly interoperable with Java code, meaning
    you can have both Java and Kotlin code in the same project. You can continue using
    your favorite Java libraries in your Kotlin projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see how to migrate a sample Java class to Kotlin using IntelliJ IDEA:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside **src/main/kotlin**, open the **Song** class, which has a number of Java
    functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click the file and you’ll see the **Convert Java to Kotlin** option at
    the bottom. Select this and you’ll be presented the following confirmation dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Confirmation dialog](img/B19779_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Confirmation dialog
  prefs: []
  type: TYPE_NORMAL
- en: At times after a conversion, you might need to make some corrections and that’s
    why we have this dialog. Click **Yes** to proceed and you’ll see your code is
    now in Kotlin. This is a useful feature that handles a major part of the conversion
    to Kotlin and you also learn about the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve learned how to migrate Java code to Kotlin, in the next section
    we will cover some of the features of Kotlin that make it useful for Android developers.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin features for Android developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have had an introduction to Kotlin, let’s look at why Kotlin is
    a great language specifically for Android development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google announced Kotlin as a first-class language for writing Android apps
    back in 2017\. Since then, there has been lots of work done to make sure that
    developers have all they need to develop Android apps in Kotlin. Here are some
    of the features that developers can benefit from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved developer productivity**: Kotlin’s concise and expressive syntax
    can help developers write code faster and with fewer errors, which can ultimately
    improve developer productivity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Null safety**: Since Kotlin is written with nullability in mind, it helps
    us to avoid crashes related to the Null Pointer Exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IDE support**: IDE support has been continuously improving. Android Studio,
    which is built on top of IntelliJ IDEA, has been receiving tons of features such
    as improved autocompletion support to improve the Kotlin experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jetpack libraries**: Jetpack libraries are available in Kotlin, and older
    ones are being rewritten with Kotlin. These are a set of libraries and tools to
    help Android developers write less code. They address common developer pain points
    and increase developer efficiency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jetpack Compose**: Jetpack Compose, a new UI framework, is completely written
    in Kotlin and takes advantage of features of the Kotlin language. It’s a declarative
    UI framework that makes it easy for Android developers to build beautiful UIs
    for their apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kotlin Gradle DSL**: You are now able to write your Gradle files in Kotlin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coroutine support**: A lot of Jetpack Libraries support coroutines. For example,
    the **ViewModel** class has **viewModelScope** that you can use to scope coroutines
    in the lifecycle of the **ViewModel**. This aligns with the Structured Concurrency
    principles for coroutines. This helps cancel all coroutines when they’re no longer
    needed. Some libraries including Room, Paging 3, and DataStore also support Kotlin
    coroutines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support from Google**: Google continues to invest in Kotlin. Currently, there
    are resources ranging from articles to code labs, documentation, videos, and tutorials
    from the Android DevRel team at Google to assist you in learning new libraries
    and architecture for Android Development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active community and tooling**: Kotlin has a vibrant and active community
    of developers, which means that there are plenty of unofficial resources, libraries,
    and tools available to help with Android development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Kotlin programming language and its features.
    We explored the Kotlin features that are useful for Android development and why
    it’s important to Android developers. Additionally, we covered how to migrate
    from Java to Kotlin and some useful tips for developers coming from Java backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll learn how to create Android apps with Android Studio.
    We will explore some of the features that Android Studio offers and learn some
    tips and shortcuts.
  prefs: []
  type: TYPE_NORMAL
