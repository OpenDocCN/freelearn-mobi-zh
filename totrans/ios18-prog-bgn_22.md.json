["```swift\n    // MARK: - Properties\n    private var ratingButtons = [UIButton()]\n    var rating = 0\n    private let buttonSize = CGSize(width: 44.0, height: 44.0)\n    private let buttonCount = 5 \n    ```", "```swift\n    // MARK: - Initialization\n    required init(coder: NSCoder) {\n      super.init(coder: coder)\n    } \n    ```", "```swift\n    // MARK: - Private methods\n    private func setupButtons() {\n      for button in ratingButtons {\n        removeArrangedSubview(button)\n        button.removeFromSuperView()\n      }\n      ratingButtons.removeAll()\n      let filledStar = UIImage(systemName:\"star.fill\" )\n      let emptyStar = UIImage(systemName: \"star\")\n      let highlightedStar =\n      UIImage(systemName: \"star.fill\")?.withTintColor(.red,\n      renderingMode: .alwaysOriginal)\n      for _ in 0..<buttonCount {\n        let button = UIButton()\n        button.setImage(emptyStar, for: .normal)\n        button.setImage(filledStar, for: .selected)\n        button.setImage(highlightedStar, for: .highlighted)\n        button.setImage(highlightedStar, for: [.highlighted,    .selected])\n        button.translatesAutoresizingMaskIntoConstraints =\n        false\n        button.heightAnchor.constraint(equalToConstant:     buttonSize.height).isActive = true\n        button.widthAnchor.constraint(equalToConstant:     buttonSize.width).isActive = true\n        addArrangedSubview(button)\n        ratingButtons.append(button)\n      }\n    } \n    ```", "```swift\nfor button in ratingButtons {\n  removeArrangedSubview(button)\n  button.removeFromSuperView()\n}\nratingButtons.removeAll() \n```", "```swift\nlet filledStar = UIImage(systemName:\"star.fill\" )\nlet emptyStar = UIImage(systemName: \"star\")\nlet highlightedStar =\nUIImage(systemName: \"star.fill\")?.withTintColor(.red,\nrenderingMode: .alwaysOriginal) \n```", "```swift\nfor _ in 0..<buttonCount { \n```", "```swift\nlet button = UIButton() \n```", "```swift\nbutton.setImage(emptyStar, for: .normal)\nbutton.setImage(filledStar, for: .selected)\nbutton.setImage(highlightedStar, for: .highlighted)\nbutton.setImage(highlightedStar, for: [.highlighted, .selected]) \n```", "```swift\nbutton.translatesAutoresizingMaskIntoConstraints =\nfalse\nbutton.heightAnchor.constraint(equalToConstant: buttonSize.height).isActive = true\nbutton.widthAnchor.constraint(equalToConstant: buttonSize.width).isActive = true \n```", "```swift\naddArrangedSubview(button) \n```", "```swift\nratingButtons.append(button) \n```", "```swift\n    required init(coder: NSCoder) {\n      super .init(coder: coder)\n      **setupButtons****()**\n    } \n    ```", "```swift\n    @objc private func ratingButtonTapped(_ button: UIButton) {\n      guard let index = ratingButtons.firstIndex(of: button)   else {\n        fatalError(\"The button, \\(button), is not in the \n        ratingButtons array: \\(ratingButtons)\")\n      }\n      let selectedRating = index + 1\n      if selectedRating == rating {\n        rating = 0\n      } else {\n        rating = selectedRating\n      }\n    } \n    ```", "```swift\n    button.widthAnchor.constraint(equalToConstant: starSize.width).isActive = true\n    **button.****addTarget****(****self****, action:** **#selector****(****RatingView****.****ratingButtonTapped****(****_****:)),** **for****: .****touchUpInside****)**\n    addArrangedSubview(button) \n    ```", "```swift\n    private func updateButtonSelectionStates() {\n      for (index, button) in ratingButtons.enumerated() {\n        button.isSelected = index < rating\n      }\n    } \n    ```", "```swift\n    var rating = 0 **{**\n    **didSet** **{**\n    **updateButtonSelectionStates****()**\n     **}**\n    **}** \n    ```", "```swift\n    @IBOutlet var getLocationSwitch: UISwitch!\n    @IBOutlet var getLocationSwitchLabel: UILabel!\n    **@IBOutlet****var****ratingView****:** **RatingView****!** \n    ```", "```swift\n    let photo = photoImageView.image\n    let rating = **ratingView****.****rating**\n    let lat = currentLocation?.coordinate.latitude \n    ```", "```swift\n    @IBOutlet var photoImageView: UIImageView!\n    @IBOutlet var mapImageView: UIImageView!\n    **@IBOutlet****var****ratingView****:** **RatingView****!** \n    ```", "```swift\n    super.viewDidLoad()\n    dateLabel.text = selectedJournalEntry?.date.formatted(\n    .dateTime.day().month(.wide).year()\n    )\n    **ratingView****.****rating****=****selectedJournalEntry****?****.****rating****??****0**\n    titleLabel.text = selectedJournalEntry?.entryTitle \n    ```"]