["```swift\nfunc sayHello(name: String) ->    Void { \n    let retString = \"Hello \" + name\n    print(retString)\n} \n```", "```swift\nfunc sayHello2(name: String) ->String { \n    let retString = \"Hello \" + name \n    return retString\n} \n```", "```swift\nsayHello(name:\"Jon\") \n```", "```swift\nvar message = sayHello2(name:\"Jon\")\nprint(message) \n```", "```swift\nsayHello2(name:\"Jon\")\nvar message = sayHello2(name:\"Jon\") \n```", "```swift\n_ = sayHello2(name:\"Jon\") \n```", "```swift\n@discardableResult func sayHello2(name: String) ->String { \n    let retString = \"Hello \" + name\n    return retString\n} \n```", "```swift\nfunc sayHello4(name: String) -> String {\n    \"Hello \" + name\n} \n```", "```swift\nLet message = sayHello4(name:\"Kara\") \n```", "```swift\nfunc sayHello(name: String, greeting: String) { \n    print(\"\\(greeting) \\(name)\")\n} \n```", "```swift\nsayHello(name:\"Jon\", greeting:\"Bonjour\") \n```", "```swift\nfunc sayHello(name: String, greeting: String = \"Bonjour\") { \n    print(\"\\(greeting) \\(name)\")\n} \n```", "```swift\nsayHello(name:\"Jon\") \nsayHello(name:\"Jon\", greeting: \"Hello\") \n```", "```swift\nfunc sayHello(name: String = \"Test\", name2: String = \"Kailey\", greeting: String = \"Bonjour\") {\n    print(\"\\(greeting) \\(name) and \\(name2)\")\n}\nsayHello(name:\"Jon\",greeting: \"Hello\") \n```", "```swift\nfunc getNames() -> [String] {\n    var retArray = [\"Jon\", \"Kailey\", \"Kara\"]\n    return retArray\n}\nvar names = getNames() \n```", "```swift\nfunc getTeam() -> (team:String, wins:Int, percent:Double) { \n    let retTuple = (\"Red Sox\", 99, 0.611)\n    return retTuple\n}\nvar t = getTeam()\nprint(\"\\(t.team) had \\(t.wins) wins\") \n```", "```swift\nRed Sox had 99 wins \n```", "```swift\nfunc getName() ->String { \n    return nil\n} \n```", "```swift\nfunc getName() ->String? { \n    return nil\n} \n```", "```swift\nfunc getTeam2(id: Int) -> (team:String, wins:Int, percent:Double)? { \n    if id == 1 {\n        return (\"Red Sox\", 99, 0.611)\n    }\n    return nil\n} \n```", "```swift\nfunc getTeam() -> (team:String, wins:Int, percent:Double?) { \n    let retTuple: (String, Int, Double?) = (\"Red Sox\", 99, nil) \n    return retTuple\n} \n```", "```swift\nfunc winPercentage(team: String, wins: Int, loses: Int) -> Double{ \n    return Double(wins) / Double(wins + loses)\n} \n```", "```swift\nvar per = winPercentage(team: \"Red Sox\", wins: 99, loses: 63) \n```", "```swift\nfunc winPercentage(baseballTeam team: String, withWins wins: Int, andLoses losses: Int) -> Double {\n    return Double(wins) / Double(wins + losses)\n} \n```", "```swift\nvar per = winPercentage(baseballTeam:\"Red Sox\", withWins:99, andLoses:63) \n```", "```swift\nfunc sayHello(greeting: String, names: String...) { \n    for name in names {\n        print(\"\\(greeting) \\(name)\")\n    }\n} \n```", "```swift\nsayHello(greeting:\"Hello\", names: \"Jon\", \"Kara\") \n```", "```swift\nHello Jon\nHello Kara \n```", "```swift\nfunc reverse(first: inout String, second: inout String) { \n    let tmp = first\n    first = second\n    second = tmp\n} \n```", "```swift\nvar one = \"One\"\nvar two = \"Two\"\nreverse(first: &one, second: &two)\nprint(\"one: \\(one) two: \\(two)\") \n```", "```swift\nfunc sayHello(_ name: String, greeting: String) { \n    print(\"\\(greeting) \\(name)\")\n} \n```", "```swift\nsayHello(\"Jon\", greeting: \"Hi\") \n```", "```swift\nfunc isValidIP(ipAddr: String?) ->Bool { \n    guard let ipAddr = ipAddr else {\n        return false\n    }\n    let octets = ipAddr.split { $0 == \".\"}.map{String($0)} \n    guard octets.count == 4 else {\n        return false\n    }\n    for octet in octets {\n        guard validOctet(octet: octet) else { \n            return false\n        }\n    }\n    return true\n} \n```", "```swift\nfunc validOctet(octet: String) ->Bool {\n    guard let num = Int(octet),num >= 0 && num <256 else { \n        return false\n    }\n    return true\n} \n```"]