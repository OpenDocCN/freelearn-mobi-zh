["```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchMovies(): Flow<Movie> = flow {\n```", "```kt\n        movieRepository.fetchMovies().forEach {\n```", "```kt\n            emit(it)\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun fetchMovies(): Flow<Movie> {\n```", "```kt\n        return movieRepository.fetchMovies().cancellable()\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun favoriteMovie(id: Int) =\n```", "```kt\n        movieRepository.favoriteMovie(id)\n```", "```kt\n            .retry(3) { cause -> cause is IOException }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() {\n```", "```kt\n    ...\n```", "```kt\n    fun favoriteMovie(id: Int) =\n```", "```kt\n        movieRepository.favoriteMovie(id)\n```", "```kt\n            .retryWhen { cause, attempt -> attempt <3 &&\n```", "```kt\n                cause is IOException }\n```", "```kt\n}\n```", "```kt\nclass MovieViewModel : ViewModel() { \n```", "```kt\n    ... \n```", "```kt\n    fun getTopMovieTitle(): Flow<String> { \n```", "```kt\n        return movieRepository.getTopMovieTitle(id) \n```", "```kt\n            .retryWhen { cause, attempt -> \n```", "```kt\n                emit(\"Fetching title again...\")\n```", "```kt\n                attempt <3 && cause is IOException \n```", "```kt\n            }\n```", "```kt\n            ...\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n ...\n```", "```kt\n override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n     ...\n```", "```kt\n     lifecycleScope.launch {\n```", "```kt\n         repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n             try {\n```", "```kt\n                 viewModel.fetchMovies().collect { movie ->\n```", "```kt\n                     processMovie(movie)\n```", "```kt\n                 }\n```", "```kt\n             } catch (exception: Exception) {\n```", "```kt\n                 Log.e(\"Error\", exception.message)\n```", "```kt\n             }  \n```", "```kt\n         }\n```", "```kt\n     }\n```", "```kt\n }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n  ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              viewModel.fetchMovies()\n```", "```kt\n                  .catch { exception ->\n```", "```kt\n                      handleException(exception) }\n```", "```kt\n                  .collect { movie -> processMovie(movie) }\n```", "```kt\n            }\n```", "```kt\n        }\n```", "```kt\n    }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n  ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              viewModel.getTopMovieTitle()\n```", "```kt\n                  .catch { emit(\"No Movie Fetched\") }\n```", "```kt\n                  .collect { title -> displayTitle(title) }\n```", "```kt\n          }\n```", "```kt\n      }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n  ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              viewModel.fetchMovies()\n```", "```kt\n                  .onEach { movie -> processMovie(movie) }\n```", "```kt\n                  .catch { exception ->\n```", "```kt\n                      handleError(exception) }\n```", "```kt\n                  .collect()\n```", "```kt\n          }\n```", "```kt\n      }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n  ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              viewModel.fetchMovies()\n```", "```kt\n                  .onStart { progressBar.isVisible = true }\n```", "```kt\n                  .onEach { movie -> processMovie(movie) }\n```", "```kt\n                  .onCompletion { progressBar.isVisible =\n```", "```kt\n                      false }\n```", "```kt\n                  .catch { exception ->\n```", "```kt\n                      handleError(exception) }\n```", "```kt\n                  .collect()\n```", "```kt\n          }\n```", "```kt\n      }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n  ...\n```", "```kt\n  override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n      ...\n```", "```kt\n      lifecycleScope.launch {\n```", "```kt\n          repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n              viewModel.getTopMovieTitle()\n```", "```kt\n                  .onStart { emit(\"Loading...\") }\n```", "```kt\n                  .catch { emit(\"No Movie Fetched\") }\n```", "```kt\n                  .collect { title -> displayTitle(title) }\n```", "```kt\n          }\n```", "```kt\n      }\n```", "```kt\n  }\n```", "```kt\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n```", "```kt\n ...\n```", "```kt\n override fun onCreate(savedInstanceState: Bundle?) {\n```", "```kt\n     ...\n```", "```kt\n     lifecycleScope.launch {\n```", "```kt\n         repeatOnLifecycle(Lifecycle.State.STARTED) {\n```", "```kt\n             viewModel.getTopMovieTitle()\n```", "```kt\n                 .onCompletion { cause ->\n```", "```kt\n                     progressBar.isVisible = false\n```", "```kt\n                     if (cause != null) displayError(cause)\n```", "```kt\n                 }\n```", "```kt\n                 .catch { emit(\"No Movie Fetched\") }\n```", "```kt\n                 .collect { title -> displayTitle(title) }\n```", "```kt\n         }\n```", "```kt\n     }\n```", "```kt\n }\n```", "```kt\n}\n```", "```kt\n    fun fetchMovies() {\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .collect {\n                    _movies.value = it\n                    _loading.value = false\n                }\n        }\n    }\n    ```", "```kt\n    fun fetchMovies() {\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .onStart { _loading.value = true }\n                .collect {\n                    _movies.value = it\n                    _loading.value = false\n                }\n        }\n    }\n    ```", "```kt\n    fun fetchMovies() {\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .onStart { _loading.value = true }\n                .collect {\n                    _movies.value = it\n                }\n        }\n    }\n    ```", "```kt\n    fun fetchMovies() {\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .onStart { _loading.value = true }\n                .onCompletion { _loading.value = false }\n                .collect {\n                    _movies.value = it\n                }\n        }\n    }\n    ```", "```kt\n    fun fetchMovies() {\n        viewModelScope.launch (dispatcher) {\n            MovieRepository.fetchMoviesFlow()\n                .onStart { _loading.value = true }\n                .onCompletion { _loading.value = false }\n                .catch {\n                    _error.value = \"An exception occurred:\n                      ${it.message}\"\n                }\n                .collect {\n                    _movies.value = it\n                }\n        }\n    }\n    ```"]