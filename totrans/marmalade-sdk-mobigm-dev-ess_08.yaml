- en: Chapter 8. Supporting a Wide Range of Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。支持广泛的设备
- en: It's really great that the Marmalade SDK allows us to target so many different
    devices and platforms. However, a certain degree of care and awareness is required
    in order to optimize your application fully for all of these varying device types.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很棒，Marmalade SDK允许我们针对如此多的不同设备和平台。然而，为了完全优化您的应用程序以适应所有这些不同的设备类型，需要一定的关注和意识。
- en: 'In this chapter we''ll be covering the following subjects:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: A general overview of the kinds of things to be wary of when trying to support
    a wide range of different devices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在尝试支持广泛不同设备时需要警惕的一些内容的概述
- en: A more advanced look at the ICF filesystem we encountered back in the first
    chapter of this book
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们在本书第一章中遇到的ICF文件系统的更深入探讨
- en: Using Marmalade's built-in systems to allow multiple different data sets to
    be used and to process those data sets in different ways (for example, allowing
    the final texture format used on the device to be specified)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Marmalade的内置系统允许使用多个不同的数据集，并以不同的方式处理这些数据集（例如，允许指定设备上使用的最终纹理格式）
- en: Configuring the deployment system to make different types of builds
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置部署系统以创建不同类型的构建
- en: Using the Derbh archiver to reduce the size of our assets in the install package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Derbh归档器减小安装包中资源的大小
- en: Accommodating a wide range of device types
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适应广泛的设备类型
- en: Mobile operating systems such as iOS or Android are capable of running on a
    widely varying range of devices. Before we get on to discussing the ways in which
    Marmalade makes it easy for us to target multiple device types, we'll first highlight
    some of the things to keep in mind when developing a game so that it will look
    and run its best on as many different devices as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 移动操作系统，如iOS或Android，能够在广泛不同的设备上运行。在我们讨论Marmalade如何使我们轻松针对多种设备类型之前，我们首先强调在开发游戏时应注意的一些事项，以确保它在尽可能多的不同设备上看起来和运行得最好。
- en: Marmalade also ships with a whitepaper that covers some of the things to be
    careful about when developing a game destined to run on more than one device specification.
    You can find it in the Marmalade documentation at **Whitepapers** | **Device Independent
    Code**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade还附带了一份白皮书，涵盖了在开发旨在在多个设备规范上运行的游戏时需要注意的一些事项。您可以在Marmalade文档的**白皮书** |
    **设备无关代码**部分找到它。
- en: Dealing with different screen resolutions
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理不同的屏幕分辨率
- en: Probably the most immediately notable difference between different devices will
    be the screen resolution. Taking iOS as an example, you may find yourself having
    to support screen resolutions ranging from 320 x 480 at the low end through the
    two different iPhone Retina screen resolutions (640 x 960 and 640 x 1136) and
    iPad at 1024 x 768, right up to the frankly crazy resolution of 2048 x 1536 of
    the most recent iPad (you'll be hard pressed to find a PC monitor capable of displaying
    that resolution!).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不同设备之间最明显的一个差异可能是屏幕分辨率。以iOS为例，你可能需要支持从低端320 x 480到两个不同的iPhone Retina屏幕分辨率（640
    x 960和640 x 1136）以及iPad的1024 x 768，一直到最新iPad的疯狂分辨率2048 x 1536（你很难找到能够显示该分辨率的PC显示器！）。
- en: We've already touched on this subject in [Chapter 6](ch06.html "Chapter 6. Implementing
    Fonts, User Interfaces, and Localization"), *Implementing Fonts, User Interfaces,
    and Localization*, when we discussed the best way of implementing a user interface.
    We should never hardcode our game to work at a fixed screen resolution as it will
    be much harder to port it across to other screen resolutions later.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第6章](ch06.html "第6章。实现字体、用户界面和本地化")中提到了这个主题，*实现字体、用户界面和本地化*，当时我们讨论了实现用户界面的最佳方式。我们永远不应该将游戏硬编码为在固定屏幕分辨率下运行，因为这将在以后将其移植到其他屏幕分辨率时变得更加困难。
- en: 'Instead, we should query Marmalade for the screen dimensions and then use these
    values to position and size everything we want to draw, whether that be through
    using percentages of the screen size, by clamping objects to the edges of the
    screen, or indeed some other method of your own choosing. We can find the screen
    width and height as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该查询Marmalade的屏幕尺寸，然后使用这些值来定位和调整我们想要绘制的所有内容的位置和大小，无论是通过使用屏幕大小的百分比，通过将对象固定在屏幕边缘，还是确实使用你自己的选择的其他方法。我们可以如下找到屏幕宽度和高度：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These functions will also automatically take care of device orientation. The
    returned values will change when the player rotates the device, unless we have
    disabled this functionality using the `DispFixRot` ICF file setting (more on this
    setting shortly).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数也会自动处理设备方向。当玩家旋转设备时，返回的值会改变，除非我们使用`DispFixRot` ICF文件设置禁用了此功能（稍后我们将详细介绍此设置）。
- en: Using different resources for different screen resolutions
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用不同资源针对不同屏幕分辨率
- en: Using the screen dimensions to position and size the elements we wish to draw
    works well, but it does lead to a further problem. We may find that any images
    used to render items on screen start to look blurry or blocky if they have to
    be scaled up in size too much.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用屏幕尺寸来定位和调整我们想要绘制的元素大小效果很好，但这确实会导致另一个问题。我们可能会发现，如果屏幕上的图像需要被放大到很大尺寸，它们开始看起来模糊或块状。
- en: Similarly, fonts that work well at a low resolution may become impossible to
    read because they are too small when used on a higher-resolution device. While
    we could just apply a scale to the font when rendering, a more aesthetically pleasing
    solution is to use a different version of the font created at a bigger point size.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在低分辨率下表现良好的字体，当在更高分辨率的设备上使用时可能变得难以阅读，因为它们太小了。虽然我们可以在渲染时对字体应用缩放，但一个更美观的解决方案是使用在更大点大小创建的不同版本的字体。
- en: Luckily, as we'll see later in this chapter, Marmalade has a very easy-to-use
    solution for this problem that allows us to provide alternate sets of resources
    that can be used when targeting different sets of screen resolutions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，正如我们将在本章后面看到的那样，Marmalade为这个问题提供了一个非常易于使用的解决方案，允许我们提供用于针对不同屏幕分辨率的替代资源集。
- en: Checking device capabilities
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查设备功能
- en: Another thing to be vigilant of when targeting a large number of different devices
    is that some devices may not include support for certain Marmalade SDK features.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对大量不同设备时，还需要警惕的另一件事是，某些设备可能不支持某些Marmalade SDK功能。
- en: Some devices may feature a multi-touch display while others only have single
    touch or indeed no touch screen at all. Some may not feature accelerometer inputs
    or keypads. It is therefore a good idea to ensure that we call the various Marmalade
    functions that enquire whether these and other features are available for use
    and what capabilities are provided, so that we can then provide the user with
    options tailored to their device.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些设备可能具有多点触控显示屏，而另一些设备可能只有单点触控或根本没有触摸屏。一些设备可能没有加速度计输入或键盘。因此，确保我们调用各种Marmalade函数来查询这些和其他功能是否可用以及提供了哪些功能，这样我们就可以为用户提供适合他们设备的选项，这是一个好主意。
- en: Configuring your game using ICF file settings
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ICF文件设置配置您的游戏
- en: If you cast your mind back to the "Hello World" project in the very first chapter
    of this book, you will recall that we used the ICF file to display a different
    welcome message depending on which platform the code was being executed on. Don't
    worry if you've forgotten how all this works, as we'll be covering it again shortly.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回想起本书第一章中的“Hello World”项目，你会记得我们使用ICF文件来根据代码在哪个平台上执行来显示不同的欢迎信息。如果你已经忘记了所有这些是如何工作的，不要担心，我们很快就会再次介绍。
- en: This functionality proves extremely useful when we are trying to target as many
    different devices as possible, as there are built-in parameters that allow us
    to apply different settings for a range of things including memory usage, OpenGL
    ES graphics performance, splash screens, and much more.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们试图针对尽可能多的不同设备时，这个功能证明极其有用，因为内置的参数允许我们为包括内存使用、OpenGL ES图形性能、启动画面等在内的各种事物应用不同的设置。
- en: Built-in ICF settings
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置ICF设置
- en: 'ICF file settings are assigned to a section identifier which is defined by
    placing the name of the section in square brackets. When specifying a value for
    an ICF setting you must ensure that it appears after the correct section identifier,
    otherwise it will not be found at runtime and an assert will be raised. Here''s
    an example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ICF文件设置被分配给一个由方括号中放置的章节名称定义的章节标识符。当指定一个ICF设置的值时，你必须确保它出现在正确的章节标识符之后，否则在运行时将找不到它，并且会引发断言。以下是一个示例：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are far too many ICF settings to be able to cover all of them in this
    book, so instead we'll be taking a look at some of the more immediately useful
    ones. If you want to see a complete list, take a look in the Marmalade documentation,
    by going to **Marmalade** | **Marmalade Development Tools Reference** | **ICF
    File Settings**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ICF 设置太多，无法在本书中全部涵盖，因此我们将查看一些更实用的设置。如果您想查看完整列表，请查阅 Marmalade 文档，通过访问 **Marmalade**
    | **Marmalade 开发工具参考** | **ICF 文件设置**。|
- en: 'The following table shows a few of the settings that control Marmalade at its
    lowest level. The section identifier for these settings is `[S3E]`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了控制 Marmalade 在其最低级别的几个设置。这些设置的标识符为 `[S3E]`：
- en: '| Setting | Value type | Description |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 值类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `MemSize` | Integer | The size, in bytes, of the main memory heap available
    to an application. A Marmalade application can actually have up to ten memory
    heaps available, so there are also settings called `MemSize0` through `MemSize9`,
    which allow the sizes of these heaps to be declared. `MemSize0` is actually equivalent
    to using `MemSize`. For more information on memory heaps take a look at the s3eMemory
    API in the Marmalade documentation. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `MemSize` | 整数 | 可供应用程序使用的内存堆大小，以字节为单位。实际上，Marmalade 应用程序可以有最多十个内存堆可用，因此还有
    `MemSize0` 到 `MemSize9` 等设置，这些设置允许声明这些堆的大小。`MemSize0` 实际上等同于使用 `MemSize`。有关内存堆的更多信息，请参阅
    Marmalade 文档中的 s3eMemory API。|'
- en: '| `MemSizeDebug` | Integer | The size, in bytes, of the debug memory heap when
    a Windows debug build is executed. This is a special block of memory that is used
    for tasks such as processing 3D models and converting textures to different formats
    during the resource building process. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `MemSizeDebug` | 整数 | 当执行 Windows 调试构建时，调试内存堆的大小，以字节为单位。这是一个用于在资源构建过程中处理
    3D 模型和将纹理转换为不同格式的特殊内存块。|'
- en: '| `SysAppVersion` | String | Allows an application to access its version number.
    While this value can be set in the ICF file, it can also be set using the MKB
    deployment''s `version` setting. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `SysAppVersion` | 字符串 | 允许应用程序访问其版本号。虽然此值可以在 ICF 文件中设置，但也可以使用 MKB 部署的 `version`
    设置来设置。|'
- en: '| `SysGlesVersion` | Integer | Identifies whether the application should attempt
    to initialize an OpenGL ES 1.x or 2.x interface. Only the major version number
    (that is, 1 or 2) can be specified. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `SysGlesVersion` | 整数 | 识别应用程序是否应尝试初始化 OpenGL ES 1.x 或 2.x 接口。只能指定主版本号（即
    1 或 2）。|'
- en: '| `SysStackSize` | Integer | The size of the stack available to the program,
    in bytes. It is useful, for example, when an application requires extra stack
    space (due to heavily recursive algorithms). |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `SysStackSize` | 整数 | 程序可用的堆栈大小，以字节为单位。例如，当应用程序需要额外的堆栈空间（由于高度递归的算法）时，这很有用。|'
- en: '| `SplashScreenFile` | String | The name of an image file that will be displayed
    while an application is loading. The filename is relative to the `data` directory.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `SplashScreenFile` | 字符串 | 在应用程序加载期间显示的图像文件的名称。文件名相对于 `data` 目录。|'
- en: '| `SplashScreenBkR` `,``SplashScreenBkG` , and`SplashScreenBkB` | Byte | A
    value from `0` through `255` to specify the red, green, and blue component values
    of the splash screen background color. This is the color that will be used to
    clear the screen before displaying the specified splash screen image, assuming
    the image is smaller than the screen size. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `SplashScreenBkR` `,``SplashScreenBkG` , and`SplashScreenBkB` | 字节 | 一个从
    `0` 到 `255` 的值，用于指定启动画面背景颜色的红色、绿色和蓝色分量值。这是在显示指定的启动画面图像之前用于清除屏幕的颜色，假设图像小于屏幕尺寸。|'
- en: '| `SplashScreenWidth` and`SplashScreenHeight` | Integer | The width and height
    that the splash screen image should be drawn at. If smaller than the screen size,
    the image will be centered. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `SplashScreenWidth` 和 `SplashScreenHeight` | 整数 | 启动画面图像应该绘制的宽度和高度。如果小于屏幕尺寸，图像将居中显示。|'
- en: '| `AudioAllowBackground` | `0` or `1` | When set to `1` this allows any audio
    track a user may have started (for example, through the iPod application on an
    iOS device) to continue playing when our application starts. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `AudioAllowBackground` | `0` 或 `1` | 当设置为 `1` 时，允许用户可能已启动的任何音频轨道（例如，通过 iOS
    设备上的 iPod 应用程序）在我们应用程序启动时继续播放。|'
- en: '| `DispFixRot` | String | Allows the screen to be locked to a particular orientation,
    rather than rotating when the user rotates the device. Can be set to one of the
    following values: `Free`, `Portrait`, `Landscape`, `FixedPortrait`, or `FixedLandscape`.
    The `Free` setting allows any device orientation, while `FixedPortrait` and `FixedLandscape`
    keep the screen orientation locked to a default portrait or landscape aspect,
    which can be very important to prevent unwanted screen rotations when using the
    accelerometer to control a game! |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `DispFixRot` | 字符串 | 允许屏幕锁定到特定方向，而不是在用户旋转设备时旋转。可以设置为以下值之一：`Free`、`Portrait`、`Landscape`、`FixedPortrait`
    或 `FixedLandscape`。`Free` 设置允许任何设备方向，而 `FixedPortrait` 和 `FixedLandscape` 将屏幕方向锁定到默认的纵向或横向比例，这在使用加速度计控制游戏时防止不希望的屏幕旋转非常重要！|'
- en: 'The following table lists some useful parameters for altering the initialization
    of OpenGL ES. These settings must occur after the section identifier `[GL]`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了用于更改 OpenGL ES 初始化的一些有用参数。这些设置必须在 `[GL]` 部分标识符之后发生：
- en: '| Setting | Value type | Description |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 值类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `AlphaInFrameBuffer` | `0` or `1` | When set to `1`, this setting indicates
    that the frame buffer also includes the destination alpha channel. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `AlphaInFrameBuffer` | `0` 或 `1` | 当设置为 `1` 时，此设置表示帧缓冲区也包括目标 alpha 通道。|'
- en: '| `EGL_RED_SIZE` ,`EGL_GREEN_SIZE` ,`EGL_BLUE_SIZE` ,`EGL_ALPHA_SIZE` | Integer
    | Indicates the number of bits to be used to store each of the red, green, blue,
    and alpha channels in the frame buffer. For best render quality, all of these
    settings would normally be given the value `8`, yielding an RGBA8888 display.
    Most hardware can also support formats such as RGBA5551 and RGB565, which will
    use less video memory and may render faster at the expense of a drop in visual
    quality. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `EGL_RED_SIZE`、`EGL_GREEN_SIZE`、`EGL_BLUE_SIZE`、`EGL_ALPHA_SIZE` | 整数 | 指示在帧缓冲区中存储红色、绿色、蓝色和
    alpha 通道时使用的位数。为了获得最佳的渲染质量，所有这些设置通常都应设置为 `8`，从而产生 RGBA8888 显示。大多数硬件也可以支持 RGBA5551
    和 RGB565 等格式，这将使用更少的视频内存，并且可能在牺牲视觉质量的情况下渲染得更快。|'
- en: '| `EGL_DEPTH_SIZE` | Integer | The number of bits to use for the depth buffer.
    Valid values are `16`, `24`, and `32`, with the latter giving the most precision
    and therefore least chance of Z-buffer clashes when rendering, at the expense
    of slower rendering and more memory usage. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `EGL_DEPTH_SIZE` | 整数 | 用于深度缓冲区的位数。有效值是 `16`、`24` 和 `32`，其中 `32` 提供最高的精度，因此在渲染时最不可能发生
    Z 缓冲区冲突，但代价是渲染速度较慢和内存使用量较大。|'
- en: 'We''ll finish off with some settings related to resource management that we''ll
    be looking at in more depth later in this chapter. They have been included here
    for easy reference. The settings reside in the ICF section `[RESMANAGER]`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以一些与资源管理相关的设置结束，这些设置我们将在本章后面更深入地探讨。它们已被包含在此处以便于参考。这些设置位于 ICF 部分 `[RESMANAGER]`：
- en: '| Setting | Value type | Description |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 设置 | 值类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ResBuild` | `0` or `1` | When set to `1`, the Windows debug build will load
    resources by parsing the original GROUP files and loading the source models, textures,
    and other resources. Once the data has been processed, it is saved to the `data-ram`
    directory in a binary format. If this setting is set to `0`, the source assets
    will not be loaded and any existing binary-formatted data will be loaded directly.
    This can speed up testing when there have been no changes made to game data. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `ResBuild` | `0` 或 `1` | 当设置为 `1` 时，Windows 调试构建将通过解析原始 GROUP 文件并加载源模型、纹理和其他资源来加载资源。一旦数据被处理，它将以二进制格式保存到
    `data-ram` 目录。如果此设置设置为 `0`，则不会加载源资产，并且将直接加载任何现有的二进制格式数据。这可以在游戏数据没有更改时加快测试速度。|'
- en: '| `ResBuildStyle` | String | Specifies the resource building style to use when
    the Windows debug build is processing the original source assets. As we will learn
    later in this chapter, this parameter allows us to provide different sets of resources
    to cater for devices of varying abilities. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `ResBuildStyle` | 字符串 | 指定在 Windows 调试构建处理原始源资产时使用的资源构建样式。正如我们将在本章后面学到的那样，此参数允许我们提供不同集合的资源，以适应不同能力的设备。|'
- en: Defining new ICF settings
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义新的 ICF 设置
- en: One of the best things about ICF files is that we are able to make use of them
    ourselves by creating our own custom settings. To define new settings we just
    need to add them to the file `app.config.txt`, which is automatically generated
    for us when creating a new project using an MKB file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ICF 文件最好的事情之一是我们能够通过创建自己的自定义设置来利用它们。为了定义新的设置，我们只需要将它们添加到 `app.config.txt` 文件中，当我们使用
    MKB 文件创建新项目时，该文件会自动为我们生成。
- en: When defining new settings, we can also provide a string of text that explains
    what this setting is for. While this description isn't actually used or needed
    by the Marmalade SDK, it's a good way of documenting what a setting is supposed
    to do!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义新的设置时，我们还可以提供一个文本字符串来解释这个设置的作用。虽然这个描述实际上并不被 Marmalade SDK 使用或需要，但它是一种很好的记录设置预期功能的方法！
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is, however, important to add definitions for all our settings to the `app.config.txt`
    file because it will prevent the application generating lots of asserts when it
    is executed. In a Windows Debug build, Marmalade checks to see if an ICF setting
    has been declared both when loading the ICF file at the start of execution and
    also whenever we try to access a setting from within our own code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，将所有设置的说明添加到 `app.config.txt` 文件中是非常重要的，因为它将防止应用程序在执行时生成大量的断言。在 Windows 调试构建中，Marmalade
    检查在执行开始时加载 ICF 文件以及每次我们尝试从自己的代码中访问设置时是否已声明 ICF 设置。
- en: 'We can also define our own section identifiers in the `app.config.txt` file
    simply by listing the name of the section in square brackets and following it
    with the new setting definitions. Here''s an example illustrating how to create
    new section identifiers and settings:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过在 `app.config.txt` 文件中列出方括号中的节名称，然后跟上新设置的定义来定义我们自己的节标识符。以下是一个说明如何创建新的节标识符和设置的示例：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Defining our own section identifiers can be extremely useful when creating library
    modules, such as the GUI and `Localise` modules created in [Chapter 6](ch06.html
    "Chapter 6. Implementing Fonts, User Interfaces, and Localization"), *Implementing
    Fonts, User Interfaces, and Localization*. The only difference when creating a
    module is that the `app.config.txt` file changes to `modulename.config.txt` and
    it should reside in a subdirectory called `docs` in the module's main directory.
    As an example, if we were to add our own settings to the GUI module we would create
    a directory called `GUI\docs`, and the file that lists the settings would be called
    `GUI.config.txt`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建库模块时，定义自己的节标识符可以非常有用，例如在 [第 6 章](ch06.html "第 6 章。实现字体、用户界面和本地化") 中创建的 GUI
    和 `Localise` 模块，*实现字体、用户界面和本地化*。创建模块时的唯一区别是 `app.config.txt` 文件将更改为 `modulename.config.txt`，并且它应该位于模块主目录中的
    `docs` 子目录中。例如，如果我们想向 GUI 模块添加自己的设置，我们会创建一个名为 `GUI\docs` 的目录，列出设置的文件将被称为 `GUI.config.txt`。
- en: Accessing ICF settings in code
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在代码中访问 ICF 设置
- en: It's very little use to be able to provide settings in the ICF files without
    some way of accessing them. This is where the s3eConfig API comes into play and
    we can use it by just including the `s3eConfig.h` header file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有某种方式访问它们，仅仅能够在 ICF 文件中提供设置几乎没有任何用处。这就是 s3eConfig API 发挥作用的地方，我们可以通过只包含 `s3eConfig.h`
    头文件来使用它。
- en: The first function we will look at is `s3eConfigGetString`, which takes the
    section identifier and setting name we want to access and also a pointer to an
    array of `char` that will be used to return the value of the setting when the
    function completes. Since the `app.icf` file is really little more than an ASCII
    text file, all this function does is return the string of text following the equals
    sign for the specified ICF setting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第一个函数是 `s3eConfigGetString`，它接受我们想要访问的节标识符和设置名称，以及一个指向 `char` 数组的指针，该数组将在函数完成后用于返回设置的值。由于
    `app.icf` 文件实际上不过是一个 ASCII 文本文件，这个函数所做的只是返回指定 ICF 设置等于号后面的文本字符串。
- en: The `char` array supplied to `s3eConfigGetString` should be at least of length
    `S3E_CONFIG_STRING_MAX`, as this is the largest string size the function can return.
    If the requested setting can't be found in the ICF file this buffer will not be
    changed, which is very useful as it allows us to set up a default value for the
    parameter in our code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `s3eConfigGetString` 的 `char` 数组应该至少有 `S3E_CONFIG_STRING_MAX` 的长度，因为这是该函数可以返回的最大字符串大小。如果请求的设置在
    ICF 文件中找不到，则此缓冲区将不会改变，这非常有用，因为它允许我们在代码中为参数设置默认值。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Quite often we will want to specify ICF settings, which just need a numeric
    value. To make this easier for us, Marmalade provides another function called
    `s3eConfigGetInt`, which, instead of a pointer to a `char` array, takes a pointer
    to an `int` variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 很频繁地，我们可能需要指定 ICF 设置，这只需要一个数值。为了使我们更容易做到这一点，Marmalade 提供了另一个名为 `s3eConfigGetInt`
    的函数，它不是指向一个 `char` 数组的指针，而是指向一个 `int` 变量的指针。
- en: This function will read the setting string from the ICF file and then attempt
    to convert it into an integer value. If this fails (for example, the string contains
    non-numeric characters or is out of the range of an `int`) or the setting does
    not exist in the ICF file, the variable's current value will not be changed, thus
    allowing default values to be specified in code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将读取 ICF 文件中的设置字符串，然后尝试将其转换为整数值。如果失败（例如，字符串包含非数字字符或超出 `int` 的范围）或设置在 ICF 文件中不存在，则不会更改变量的当前值，从而允许在代码中指定默认值。
- en: 'Both functions will return `S3E_RESULT_SUCCESS` if the setting value could
    be retrieved, or `S3E_RESULT_ERROR` if there was a problem. The function `s3eConfigGetError`
    will let us discover what the problem was by returning one of the following values:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置值可以检索到，这两个函数都将返回 `S3E_RESULT_SUCCESS`，如果存在问题，则返回 `S3E_RESULT_ERROR`。函数 `s3eConfigGetError`
    将通过返回以下值之一让我们发现问题：
- en: '| Value | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `S3E_CONFIG_ERR_NONE` | No error occurred. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `S3E_CONFIG_ERR_NONE` | 没有发生错误。 |'
- en: '| `S3E_CONFIG_ERR_PARAM` | One of the parameters to `s3eConfigGetInt` or `s3eConfigGetString`
    was not valid. For example, a `NULL` value passed in. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `S3E_CONFIG_ERR_PARAM` | `s3eConfigGetInt` 或 `s3eConfigGetString` 的一个参数无效。例如，传递了一个
    `NULL` 值。 |'
- en: '| `S3E_CONFIG_ERR_NOT_FOUND` | The requested ICF setting could not be found.
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `S3E_CONFIG_ERR_NOT_FOUND` | 请求的 ICF 设置找不到。 |'
- en: '| `S3E_CONFIG_ERR_PARSE` | There was a problem converting the ICF setting value
    to an integer when using `s3eConfigGetInt`. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `S3E_CONFIG_ERR_PARSE` | 在使用 `s3eConfigGetInt` 将 ICF 设置值转换为整数值时出现了问题。 |'
- en: Limiting ICF settings by platform and device
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过平台和设备限制 ICF 设置
- en: When targeting a large number of different devices, it is not uncommon to have
    a situation where we want to be able to do different things depending on the device
    the application is running on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对大量不同的设备时，我们想要根据应用程序运行的设备执行不同的事情，这种情况并不少见。
- en: The ICF filesystem makes handling this incredibly easy by allowing us to provide
    different values for parameters based on both the operating system of the device
    and even by individual device type.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ICF 文件系统通过允许我们根据设备的操作系统甚至根据单个设备类型提供不同的参数值，使处理这一点变得非常容易。
- en: 'To begin with, we can provide different settings on a platform-wide basis.
    The "Hello World" project from [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Marmalade"), *Getting Started with Marmalade*, has already demonstrated this,
    but to recap, we limit the settings to a particular operating system using the
    `OS` conditional. This is best illustrated by an example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以在平台范围内提供不同的设置。"Hello World" 项目来自 [第 1 章](ch01.html "第 1 章。Marmalade 入门")，*Marmalade
    入门*，已经展示了这一点，但为了回顾，我们使用 `OS` 条件将设置限制在特定的操作系统上。这最好通过一个示例来说明：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This example sets a default value for the `FrameRate` setting of `20`. It then
    overrides this value for Bada devices with a value of `15` and for iOS devices
    with a value of `30`. Note that for legacy reasons the value `IPHONE` refers to
    all iOS devices (all versions of iPad and iPod touch as well as all iPhones).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例为 `FrameRate` 设置设置了默认值 `20`。然后，它将此值覆盖为 Bada 设备的 `15` 和 iOS 设备的 `30`。请注意，出于历史原因，值
    `IPHONE` 指的是所有 iOS 设备（所有版本的 iPad 和 iPod touch 以及所有 iPhone）。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The earlier example ends with open and close braces. This returns all settings
    made after this point to being global settings that apply to all devices and platforms.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 早期示例以开闭大括号结束。这会将此点之后所做的所有设置返回为全局设置，适用于所有设备和平台。
- en: 'It is also possible to make settings that will only apply to a particular subset
    of devices on a particular platform. This is done using the `ID` conditional that
    first specifies the platform type and then has a comma-separated list of device
    identifiers that the setting should apply to. Here''s another example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以创建仅适用于特定平台上的特定设备子集的设置。这是通过使用 `ID` 条件来完成的，它首先指定平台类型，然后有一个以逗号分隔的设备标识符列表，该设置应应用于这些标识符。以下是一个示例：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we set a default value for the `FrameRate` setting of `30`, then limit
    the value to just `20` if the game is running on either of the listed Android
    devices. Quote marks are only required on device names that contain spaces.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为`FrameRate`设置设置默认值`30`，然后如果游戏运行在列出的任何Android设备上，则将值限制为`20`。仅当设备名称包含空格时才需要引号。
- en: 'Wondering how to discover the device name? Often it is the name of the device,
    but this is not always the case. The easiest way to discover the device name for
    a particular device is to create a short test program that makes a call to `s3eDeviceGetString`,
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 想要知道如何发现设备名称？通常它是设备的名称，但并不总是如此。发现特定设备名称的最简单方法是为该设备创建一个简短的测试程序，调用`s3eDeviceGetString`函数，如下所示：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `s3eDeviceGetString` function and its sibling `s3eDeviceGetInt` allow us
    to determine an awful lot of information about the device we're running on, including
    the operating system, processor type, phone number, current language settings,
    and much more. Take a look at the `s3eDevice.h` header file or the Marmalade documentation
    for more details.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`s3eDeviceGetString`函数及其兄弟函数`s3eDeviceGetInt`允许我们确定运行在设备上的大量信息，包括操作系统、处理器类型、电话号码、当前语言设置等等。请参阅`s3eDevice.h`头文件或Marmalade文档以获取更多详细信息。'
- en: Creating multiple resource sets
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多个资源集
- en: Since Marmalade allows us to target so many different devices, it seems a shame
    to limit ourselves to a subset of them just because our graphics are too low or
    too high resolution for certain devices, or some devices have less memory and
    therefore can't handle lots of high resolution textures.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Marmalade允许我们针对如此多的不同设备，因此限制自己仅使用其中的一部分，仅仅因为我们的图形分辨率过高或过低，或者某些设备内存较少，因此无法处理大量高分辨率纹理，这似乎有些遗憾。
- en: Another issue we might face is that different devices support different file
    formats for audio or video clips. To improve render speed and memory usage we
    might also consider using hardware texture compression, which of course varies
    depending on the type of graphics processor a particular device has.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还会遇到另一个问题，即不同的设备支持不同的音频或视频剪辑文件格式。为了提高渲染速度和内存使用效率，我们还可以考虑使用硬件纹理压缩，当然，这取决于特定设备所使用的图形处理器的类型。
- en: Marmalade provides a couple of solutions to these problems. The first, more
    global approach is to make use of **build styles** , which allow us to both load
    different sets of resource files when loading a GROUP file and specify the type
    of hardware texture compression to apply.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade提供了一些解决方案来解决这个问题。第一种，更全局的方法是利用**构建风格**，它允许我们在加载GROUP文件时加载不同的资源文件集，并指定要应用的硬件纹理压缩类型。
- en: Build styles are then enhanced by the concept of **resource templates**, which
    allow us to more finely control the configuration of resources. Resource templates
    can be used to affect the final format of a texture or to modify the way a 3D
    model is converted for use in the game, among other things.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 构建风格通过**资源模板**的概念得到增强，这允许我们更精细地控制资源的配置。资源模板可以用来影响纹理的最终格式，或者修改3D模型以用于游戏中的方式，以及其他方面。
- en: Using build styles
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用构建风格
- en: 'Marmalade comes with a number of built-in build styles that allow us to build
    resources for all the common GPU formats used across mobile devices. The build
    styles available are shown in the following table:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade附带了一些内置的构建风格，允许我们为移动设备上使用的所有常见GPU格式构建资源。以下表格显示了可用的构建风格：
- en: '| Build style | Description |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 构建风格 | 描述 |'
- en: '| --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `sw` | Build resources optimized for use with Marmalade''s legacy software
    renderer. Resources built in this way cannot be rendered using hardware acceleration.
    This format is now only of use if we are using the `IW_USE_LEGACY_MODULES` define
    in our MKB file in order to make the software renderer available for use. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `sw` | 为与Marmalade的遗留软件渲染器一起使用而优化的构建资源。以这种方式构建的资源不能使用硬件加速进行渲染。此格式现在仅在我们使用MKB文件中的`IW_USE_LEGACY_MODULES`定义以使软件渲染器可用时才有用。
    |'
- en: '| `gles1` | Builds resources without any form of texture compression. This
    is the default if no build style is specified. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `gles1` | 不使用任何形式的纹理压缩构建资源。如果没有指定构建风格，这是默认设置。 |'
- en: '| `gles1-pvrtc` | Same as `gles1`, but uses the PVRTC format for texture compression
    on images where this type of compression works well. Typically this just means
    images with no alpha channel, as PVRTC tends to perform badly on such textures.
    |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `gles1-pvrtc` | 与 `gles1` 相同，但在图像上使用 PVRTC 格式进行纹理压缩，这种压缩类型效果良好。通常这仅仅意味着没有
    alpha 通道的图像，因为 PVRTC 在这种纹理上通常表现不佳。|'
- en: '| `gles-atitc` | Same as `gles1`, but uses the ATITC texture compression format
    where possible. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `gles-atitc` | 与 `gles1` 相同，但在可能的情况下使用 ATITC 纹理压缩格式。|'
- en: '| `gles1-dxt` | Same as `gles1`, but uses the DXT format for texture compression.
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `gles1-dxt` | 与 `gles1` 相同，但在可能的情况下使用 DXT 格式进行纹理压缩。|'
- en: '| `gles2-etc` | Intended for use on devices that make use of OpenGL ES 2.x
    and support the ETC texture compression format. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `gles2-etc` | 适用于使用 OpenGL ES 2.x 并支持 ETC 纹理压缩格式的设备。|'
- en: We can also define our own custom build styles should the default ones not suffice.
    To do this we create a file in the `data` directory called `resbuildstyles.itx`.
    This file is automatically loaded by the resource manager when it is initialized
    in the call to `IwResManagerInit` and it contains one or more instances of the
    `CIwResBuildStyle` class.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认的构建样式不足以满足需求，我们也可以定义自己的自定义构建样式。为此，我们在 `data` 目录中创建一个名为 `resbuildstyles.itx`
    的文件。当在调用 `IwResManagerInit` 时初始化资源管理器时，该文件会自动被加载，并包含一个或多个 `CIwResBuildStyle` 类的实例。
- en: To declare a build style instance we must give it a name so that it can be selected
    for use, an optional list of directories in which resource files can reside, and
    an indication of the platform this build style is targeting. Note that in the
    case of build styles, the platform does not refer to any particular operating
    system; instead it refers to the type of GPU the style targets, which for the
    most part means the type of hardware texture compression to be used.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了声明一个构建样式实例，我们必须给它一个名称，以便它可以被选中使用，一个可选的目录列表，资源文件可以驻留在其中，以及一个指示此构建样式针对的平台。请注意，在构建样式的案例中，平台并不指代任何特定的操作系统；相反，它指的是样式针对的
    GPU 类型，这在很大程度上意味着将要使用的硬件纹理压缩类型。
- en: 'Here''s an example of a `resbuildstyles.itx` file that will be used for discussion
    in the following sections:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个用于以下部分讨论的 `resbuildstyles.itx` 文件示例：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Adding extra resource directories
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加额外的资源目录
- en: The `addReadPrefix` parameter allows us to add a new search path that will be
    checked whenever we attempt to load a file of any kind. A directory name is specified;
    this must be a subdirectory within the project's `data` directory. If you want
    to add more than one extra search directory, just include further `addReadPrefix`
    entries.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`addReadPrefix` 参数允许我们在尝试加载任何类型的文件时添加一个新的搜索路径。指定一个目录名称；这必须是项目 `data` 目录下的一个子目录。如果您想添加多个额外的搜索目录，只需包含更多的
    `addReadPrefix` 条目。'
- en: Whenever we try to open a file, Marmalade will first look in the list of extra
    directories specified by the build style in the order they were specified. If
    the requested file is found in one of these directories, it will be loaded from
    there; otherwise the resource manager will revert to looking in the `data` directory.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们尝试打开一个文件时，Marmalade 会首先按照指定的顺序在由构建样式指定的额外目录列表中查找。如果请求的文件在这些目录中的任何一个中找到，它将从那里加载；否则，资源管理器将回退到在
    `data` 目录中查找。
- en: Supported build style platforms
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的构建样式平台
- en: 'The `platform` field of a `CIwResBuildStyle` instance can take one of the following
    values:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`CIwResBuildStyle` 实例的 `platform` 字段可以取以下值之一：'
- en: '| Platform value | Description |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 平台值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SW` | Build resources optimized for use with Marmalade''s legacy software
    renderer. Again, we must be using the `IW_USE_LEGACY_MODULES` define in our MKB
    in order to use this. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `SW` | 为与 Marmalade 的传统软件渲染器一起使用而优化的构建资源。再次强调，我们必须在我们的 MKB 中使用 `IW_USE_LEGACY_MODULES`
    定义才能使用此功能。|'
- en: '| `GLES1` | This is the default option if none is specified and builds resources
    that can be rendered efficiently using OpenGL ES. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `GLES1` | 如果未指定，这是默认选项，并构建可以使用 OpenGL ES 高效渲染的资源。|'
- en: '| `IMG_MBX` | Same as `GLES1`, but uses the PVRTC format for texture compression
    on images where this type of compression works well. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `IMG_MBX` | 与 `GLES1` 相同，但在图像上使用 PVRTC 格式进行纹理压缩，这种压缩类型效果良好。|'
- en: '| `IMG_MBX_VGP` | Currently the same as `IMG_MBX`. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `IMG_MBX_VGP` | 目前与 `IMG_MBX` 相同。|'
- en: '| `ATI_IMAGEON` | Same as `GLES1`, but uses the ATITC format for texture compression
    where possible. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `ATI_IMAGEON` | 与 `GLES1` 相同，但在可能的情况下使用 ATITC 格式进行纹理压缩。|'
- en: '| `NVIDIA_GOFORCE` | Currently performs the same as `GLES1`. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `NVIDIA_GOFORCE` | 目前与`GLES1`执行相同。|'
- en: '| `ARM_MALI` | Currently performs the same as `GLES1`. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `ARM_MALI` | 目前与`GLES1`执行相同。|'
- en: 'While the platform identifier makes it easy to create resources for different
    types of GPU, it is also possible to be a little more specific about the type
    of texture compression to use. This can be done by specifying the platform as
    `GLES1` and adding a `textureFormat` setting. For example, the `atitc` entry from
    the earlier example could be written as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然平台标识符使得为不同类型的GPU创建资源变得容易，但也可以更具体地指定要使用的纹理压缩类型。这可以通过指定平台为`GLES1`并添加`textureFormat`设置来实现。例如，前面示例中的`atitc`条目可以写成以下形式：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following values can be used for the `textureFormat` parameter:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下值作为`textureFormat`参数：
- en: '| Value | Description |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `PVRTC_2` | Uses 2-bit PVR texture compression. Not normally recommended,
    as it tends to produce poor-quality results. Can be used on devices featuring
    an Imagination-produced chipset, such as iOS devices. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `PVRTC_2` | 使用2位PVR纹理压缩。通常不推荐使用，因为它往往会产生低质量的结果。可以在具有Imagination生产的芯片组的设备上使用，例如iOS设备。|'
- en: '| `PVRTC_4` | Uses 4-bit PVR texture compression. This type generally yields
    good results for textures with no alpha channel, but can be quite poor when compressing
    transparent textures. By default Marmalade will not perform this type of compression
    on any source texture with an alpha component. This type of compression is supported
    by devices using an Imagination GPU, for example iOS devices. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `PVRTC_4` | 使用4位PVR纹理压缩。这种类型通常对没有alpha通道的纹理产生良好的结果，但在压缩透明纹理时可能会相当差。默认情况下，Marmalade不会对任何具有alpha组件的源纹理执行此类型压缩。这种压缩类型由使用Imagination
    GPU的设备支持，例如iOS设备。|'
- en: '| `ATITC` | Will compress textures using ATI compression. Automatically uses
    4-bit compression on textures with no alpha channel, or 8-bit compression on textures
    with transparency. Supported on ATI/Qualcomm chipsets typically used in many Android
    devices. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `ATITC` | 将使用ATI压缩纹理。自动在无alpha通道的纹理上使用4位压缩，或在具有透明度的纹理上使用8位压缩。支持在许多Android设备中使用的ATI/Qualcomm芯片组。|'
- en: '| `ETC` | Uses 4-bit Ericsson texture compression on textures with no alpha
    channel. Transparent textures cannot be compressed. Supported on ATI/Qualcomm
    chipsets and most chipsets that support OpenGL ES 2.x. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `ETC` | 使用4位爱立信纹理压缩对没有alpha通道的纹理进行压缩。透明纹理无法压缩。支持在ATI/Qualcomm芯片组和大多数支持OpenGL
    ES 2.x的芯片组上使用。|'
- en: '| `DXT1`,`DXT3`, and`DXT5` | `DXT1` compression is a 4-bit format used for
    non-transparent textures. `DXT3` is an 8-bit format that allows transparent textures
    to be compressed. `DXT5` is another 8-bit format that has better support for gradients
    in the alpha channel. If `DXT3` or `DXT5` is specified and an opaque texture is
    encountered, Marmalade will automatically use `DXT1` compression instead. Available
    on NVidia Tegra2 chipset devices. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `DXT1`,`DXT3`, 和`DXT5` | `DXT1`压缩是一种用于非透明纹理的4位格式。`DXT3`是一种允许压缩透明纹理的8位格式。`DXT5`是另一种具有更好的alpha通道渐变支持的8位格式。如果指定了`DXT3`或`DXT5`，并且遇到不透明纹理，Marmalade将自动使用`DXT1`压缩。在NVIDIA
    Tegra2芯片组设备上可用。|'
- en: Specifying which build style to use
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定要使用的构建样式
- en: 'With our build styles declared, we now just need to let Marmalade know which
    of them to use when loading resources. The easiest way of doing this is to use
    the `ResBuildStyle` ICF setting, which we do by adding the following to our ICF
    file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明了构建样式之后，我们现在只需让Marmalade知道在加载资源时要使用哪个。最简单的方法是使用`ResBuildStyle` ICF设置，我们通过在ICF文件中添加以下内容来实现：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also switch between build styles at runtime as the resource manager
    provides methods for us to set and get the current build style. The following
    code snippets illustrate this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在运行时切换构建样式，因为资源管理器为我们提供了设置和获取当前构建样式的功能。以下代码片段说明了这一点：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Bear in mind, however, that while it is easy to switch between build styles,
    this behavior is only supported in Windows debug builds. When we create a release
    build for devices, we will generally only provide the resources required for that
    device type in order to reduce the size of the installation package. We'll be
    looking at how to achieve this later in this chapter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请注意，虽然切换构建样式很容易，但这种行为仅在Windows调试构建中受支持。当我们为设备创建发布构建时，我们通常会只为该设备类型提供所需的资源，以减少安装包的大小。我们将在本章后面讨论如何实现这一点。
- en: Using resource templates
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用资源模板
- en: Build styles allow us to make decisions on how the resources for our game are
    processed on a global level; but sometimes we want a little more fine-grained
    control so we can treat different types of resources in different ways.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 构建样式允许我们在全局层面上对游戏资源进行处理做出决策；但有时我们希望有更精细的控制，以便以不同的方式处理不同类型的资源。
- en: This is where resource templates come into play. Put simply, all a resource
    template allows us to do is alter the default settings that are applied when processing
    textures, materials, 3D models, animations, and GROUP files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是资源模板发挥作用的地方。简单来说，资源模板允许我们更改在处理纹理、材质、3D模型、动画和GROUP文件时应用的默认设置。
- en: Resource templates can be defined in an ITX file that we parse before attempting
    to load any resources. Since these are only required in Windows debug builds,
    we do not need to load this file if we won't be building resources.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 资源模板可以在一个ITX文件中定义，我们在尝试加载任何资源之前会解析这个文件。由于这些模板仅在Windows调试构建中需要，所以如果我们不会构建资源，我们不需要加载这个文件。
- en: 'Marmalade provides a handy define, `IW_BUILD_RESOURCES`, which is only defined
    in Windows debug builds. Using this define, we can reduce the size of our compiled
    code by excluding any resource processing code. For example, if our resource template
    definitions are contained in a file called `restemplates.itx`, we could use the
    following code snippet to load the file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade提供了一个方便的宏定义，`IW_BUILD_RESOURCES`，它仅在Windows调试构建中定义。使用这个宏定义，我们可以通过排除任何资源处理代码来减小编译代码的大小。例如，如果我们的资源模板定义包含在一个名为
    `restemplates.itx` 的文件中，我们可以使用以下代码片段来加载该文件：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The following code provides an example of what the `restemplates.itx` file might
    look like. We'll discuss the different resource template types in greater detail
    in the coming sections; but notice how a template called `default` is defined
    for each type. This is so we can revert to normal loading behavior should we want
    to.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码提供了一个 `restemplates.itx` 文件可能的样子。我们将在接下来的章节中更详细地讨论不同的资源模板类型；但请注意，每种类型都有一个名为
    `default` 的模板被定义。这样，如果我们想恢复正常的加载行为，就可以这样做。
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once a resource template has been defined, it can be invoked from within a
    GROUP file by using the `useTemplate` parameter. This parameter takes the type
    and name of a resource template, searches for it and, if found, applies any settings
    defined in the template to any resource of the type that is loaded from then on.
    Here''s an example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了资源模板，就可以通过在GROUP文件中使用 `useTemplate` 参数从内部调用它。此参数接受资源模板的类型和名称，搜索它，如果找到，则将模板中定义的任何设置应用于从那时起加载的任何类型的资源。以下是一个示例：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Defining material templates
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义材质模板
- en: A material resource template is declared by an instance of the `CIwResTemplateMTL`
    class and is used to provide a starting configuration for all instances of `CIwMaterial`
    that are created while the template is in use.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 材质资源模板通过 `CIwResTemplateMTL` 类的实例声明，并用于为在模板使用期间创建的所有 `CIwMaterial` 实例提供一个起始配置。
- en: 'We can specify any parameter in a material template that can be applied to
    a `CIwMaterial` instance when processed from an ITX file. In the following table,
    a few of the more useful ones for template purposes are listed, but for a complete
    list take a look at the Marmalade documentation for `CIwMaterial`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在材质模板中指定任何可以应用于从ITX文件处理时的 `CIwMaterial` 实例的参数。在以下表中，列出了一些对模板有用的参数，但完整的列表请参阅Marmalade文档中的
    `CIwMaterial`。
- en: '| Parameter | Description |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `colAmbient` ,`colDiffuse` ,`colEmissive` , and`colSpecular` | Allows a default
    RGBA color to be specified for the ambient, diffuse, emissive, and specular lighting
    components. For example: `colAmbient { 255, 255, 255, 255 }`. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `colAmbient`、`colDiffuse`、`colEmissive` 和 `colSpecular` | 允许为环境、漫反射、发射和镜面反射照明组件指定默认的RGBA颜色。例如：`colAmbient
    { 255, 255, 255, 255 }`。 |'
- en: '| `cullMode` | Specifies the back-face culling method to use for the material.
    Can be one of `BACK`, `FRONT`, or `NONE`. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `cullMode` | 指定材质使用的背面剔除方法。可以是 `BACK`、`FRONT` 或 `NONE` 之一。 |'
- en: '| `alphaMode` | Specifies a default transparency mode. Can be one of `NONE`,
    `ADD`, `SUB`, `HALF`, or `BLEND`. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `alphaMode` | 指定默认的不透明度模式。可以是 `NONE`、`ADD`、`SUB`、`HALF` 或 `BLEND` 之一。 |'
- en: '| `blendMode` | Specifies the blending type that will be used when drawing.
    Possible values are `MODULATE`, `MODULATE_2X`, `MODULATE_4X`, `DECAL`, `ADD`,
    `REPLACE`, and `BLEND`. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `blendMode` | 指定绘制时使用的混合类型。可能的值有 `MODULATE`、`MODULATE_2X`、`MODULATE_4X`、`DECAL`、`ADD`、`REPLACE`
    和 `BLEND`。 |'
- en: '| `alphaTest` | Specifies the type of alpha test to use when drawing pixels.
    Consists of a test type followed by an alpha value. Valid test types are `DISABLED`,
    `NEVER`, `LESS`, `EQUAL`, `LEQUAL`, `GREATER`, `GEQUAL`, `NOTEQUAL`, and `ALWAYS`.
    For example: `alphaTest GEQUAL 128`. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `alphaTest` | 指定绘制像素时使用的alpha测试类型。由一个测试类型后跟一个alpha值组成。有效的测试类型有 `DISABLED`、`NEVER`、`LESS`、`EQUAL`、`LEQUAL`、`GREATER`、`GEQUAL`、`NOTEQUAL`
    和 `ALWAYS`。例如：`alphaTest GEQUAL 128`。 |'
- en: '| `zDepthOfs` and`zDepthOfsHW` | Allows this material to have an offset added
    to the z component of vertices when they are rendered, to force drawing backwards
    or forwards. Useful for drawing glowing effects so they can be forced to appear
    behind or in front of a 3D model. `zDepthOfs` is used in the software renderer
    and `zDepthOfsHW` is used when rendering with OpenGL ES. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `zDepthOfs` 和 `zDepthOfsHW` | 允许在渲染时将偏移量添加到顶点的z分量，以强制绘制前后。这对于绘制发光效果非常有用，可以强制它们出现在3D模型之后或之前。`zDepthOfs`
    用于软件渲染器，而 `zDepthOfsHW` 用于使用OpenGL ES进行渲染。 |'
- en: '| `filtering` | Set to `true` to use bilinear filtering when rendering. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `filtering` | 设置为 `true` 以在渲染时使用双线性过滤。 |'
- en: '| `clampUV` | If `true`, the UV coordinates are clamped within the bounds of
    the texture. This helps avoid the problems caused by bilinear filtering when rendering
    the edges of a texture, as bilinear filtering will attempt to blend between texels
    on the left and right or top and bottom of the image as it will assume the texture
    can be tiled otherwise. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `clampUV` | 如果设置为 `true`，则UV坐标将在纹理的边界内夹紧。这有助于避免在渲染纹理边缘时由双线性过滤引起的问题，因为双线性过滤将尝试在图像的左和右或上和下之间的texel之间进行混合，因为它假定纹理可以被平铺。
    |'
- en: Defining image templates
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义图像模板
- en: 'We can also use the resource template system to specify how we want images
    to be processed, which includes the ability to specify what texture format is
    used. To define a resource template for images we have to declare an instance
    of `CIwResTemplateImage`, which can be configured using the following parameters:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用资源模板系统来指定我们希望图像如何处理，这包括指定使用的纹理格式。为了定义图像的资源模板，我们必须声明一个 `CIwResTemplateImage`
    实例，可以使用以下参数进行配置：
- en: '| Parameter | Description |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `formatSW` and`formatHW` | Converts any image to the requested format. The
    two versions of this parameter allow a format to be defined for the software renderer
    and another format for OpenGL ES rendering.For a complete list of texture formats,
    take a look at the Marmalade documentation for the `CIwImage` class, but bear
    in mind that some of these formats apply only to software or hardware rendering.
    For example, OpenGL ES does not support any of the palette-based formats, while
    the software renderer does not support compressed formats such as PVRTC or ATITC.
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `formatSW` 和 `formatHW` | 将任何图像转换为请求的格式。此参数的两个版本允许为软件渲染器定义一个格式，并为OpenGL ES渲染定义另一个格式。有关纹理格式的完整列表，请参阅Marmalade文档中的
    `CIwImage` 类，但请注意，其中一些格式仅适用于软件或硬件渲染。例如，OpenGL ES不支持任何基于调色板的格式，而软件渲染器不支持压缩格式，如PVRTC或ATITC。
    |'
- en: '| `compressForDiskSpace` | When `true`, converting textures using the `formatSW`
    and `formatHW` parameters will only store the converted version in the binary
    version of the GROUP file if it is smaller (in memory terms) than the image in
    its original format. Defaults to `false`. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `compressForDiskSpace` | 当设置为 `true` 时，使用 `formatSW` 和 `formatHW` 参数转换纹理时，如果转换后的二进制版本
    GROUP 文件（在内存大小上）小于原始格式的图像，则只存储转换后的版本。默认为 `false`。 |'
- en: '| `mipMapping` | When `true`, mipmaps will automatically be generated for the
    image. It can be very useful to set this to `false` for images that will form
    part of the UI, since these generally want to be drawn at their native size and
    mipmaps will not be needed. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `mipMapping` | 当设置为 `true` 时，图像将自动生成米柏图。对于将形成UI一部分的图像，将其设置为 `false` 可能非常有用，因为这些图像通常希望以原生大小绘制，而米柏图将不再需要。
    |'
- en: '| `allowLowQualityCompression` | If using a hardware compressed format, Marmalade
    will not use the requested compression if the resulting texture is likely to be
    of low quality, for example, when using PVRTC on an image with an alpha channel.
    Setting this parameter to `true` allows you to force Marmalade to perform the
    requested compression. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `allowLowQualityCompression` | 如果使用硬件压缩格式，当结果纹理可能质量较低时，例如在使用具有alpha通道的图像上使用PVRTC时，Marmalade不会使用请求的压缩。将此参数设置为
    `true` 允许您强制Marmalade执行请求的压缩。 |'
- en: '| `ignoreImages` | If set to `true`, images will be ignored and a 2 x 2 checkerboard
    texture will be used instead. Can be useful when debugging to speed up loading
    time. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `ignoreImages` | 如果设置为 `true`，将忽略图像，并使用 2 x 2 的棋盘纹理代替。这在调试时可以加快加载时间。 |'
- en: Defining model templates
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义模型模板
- en: When loading a 3D model from a GEO file, we can use an instance of the `CIwResTemplateGEO`
    resource template to control how the model is processed. Many of the options available
    allow us to increase rendering performance when we know that a particular model
    will be used under certain conditions; for example, it will only ever be rendered
    using OpenGL ES or it may have been exported with normals, which are not required
    as the model will never be rendered with lighting enabled.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 GEO 文件加载 3D 模型时，我们可以使用 `CIwResTemplateGEO` 资源模板的一个实例来控制模型的处理方式。许多可用的选项允许我们在知道特定模型将在某些条件下使用时提高渲染性能；例如，它将仅使用
    OpenGL ES 进行渲染，或者它可能已经导出带有法线，因为模型将永远不会启用光照进行渲染。
- en: 'Some of the more useful settings are shown in the following table, but there
    are a great many more, so check out the Marmalade documentation for `CIwResTemplateGEO`
    for more details:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了一些更有用的设置，但还有很多其他设置，因此请查阅 Marmalade 文档中的 `CIwResTemplateGEO` 以获取更多详细信息：
- en: '| Parameter | Description |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `scale` | Allows a floating point value that will be used to scale all the
    vertices of the model, to be specified. Can be useful to allow 3D models to be
    created in a modeling package with one scale and used at a different scale in
    the game. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `scale` | 允许指定一个浮点值，该值将用于缩放模型的全部顶点。这在允许使用建模软件中的一个比例创建 3D 模型并在游戏中以不同的比例使用时很有用。
    |'
- en: '| `buildCols` ,`buildNorms` ,`buildUVs` , and`buildUV1s` | If set to `true`,
    the processed model data will include vertex colors, normals, and UV information,
    assuming it exists in the exported model. This can be useful to save memory in
    the game if lighting or textures are not required on the model. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `buildCols`、`buildNorms`、`buildUVs` 和 `buildUV1s` | 如果设置为 `true`，处理后的模型数据将包括顶点颜色、法线和
    UV 信息（假设在导出的模型中存在）。这在游戏中对模型不需要光照或纹理时可以节省内存。 |'
- en: '| `triStrip` | If set to `true`, a model will be conditioned for rendering
    using triangle strips. The default is `false`, which will cause triangle lists
    to be generated. Only takes effect if the model is being conditioned for rendering
    with OpenGL ES. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `triStrip` | 如果设置为 `true`，模型将准备使用三角形带进行渲染。默认值为 `false`，这将导致生成三角形列表。仅在模型正在为使用
    OpenGL ES 进行渲染而准备时生效。 |'
- en: '| `calculateNorms` | If set to `true`, the model builder will attempt to generate
    vertex normals for lighting purposes. Useful if the source model was exported
    without normals for any reason. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `calculateNorms` | 如果设置为 `true`，模型构建器将尝试为光照目的生成顶点法线。如果源模型由于任何原因导出时没有法线，则很有用。
    |'
- en: '| `chunked` | If set to `true`, the model will be subdivided into smaller "chunks"
    for rendering using binary space partitioning. This can be useful when rendering
    a model much larger than screen size, as it allows whole sections of the model
    which are off-screen to be ignored. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `chunked` | 如果设置为 `true`，模型将被细分为更小的 "chunk" 以使用二进制空间划分进行渲染。这在渲染比屏幕尺寸大的模型时很有用，因为它允许忽略模型中不在屏幕上的整个部分。
    |'
- en: '| `maxPrimsPerChunk` | Used in conjunction with the `chunked` parameter to
    specify the maximum number of polygons each chunk of the model should contain.
    |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `maxPrimsPerChunk` | 与 `chunked` 参数一起使用，用于指定模型每个 chunk 应包含的最大多边形数量。 |'
- en: Defining animation templates
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义动画模板
- en: 'The `CIwResTemplateANIM` class allows ANIM file data to be adjusted when being
    processed. It only provides a couple of options, which are listed in the following
    table:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`CIwResTemplateANIM` 类允许在处理过程中调整 ANIM 文件数据。它只提供了一两个选项，如下表所示：'
- en: '| Parameter | Description |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `zeroMotionTolerance` | Allows a floating point value to be specified that
    will be used to filter the translation part of any key frame data. When animating
    a model it is possible that the artist may accidentally include some small movements
    to the bone positions, which yields a larger output data set. This value allows
    movements up to the specified value to be ignored, which can mean fewer key frames
    have to be output. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `zeroMotionTolerance` | 允许指定一个浮点值，该值将用于过滤任何关键帧数据的平移部分。在动画模型时，艺术家可能会不小心将一些微小的动作包含到骨骼位置中，这会导致输出数据集更大。此值允许忽略达到指定值以内的动作，这意味着可能需要输出的关键帧更少。
    |'
- en: '| `transformPrecision` | Another floating point value that specifies the precision
    to be used when animating. The default value is `4.0`, meaning that the animation
    mathematics are calculated at four times the world space resolution. If you have
    an animation with lots of subtle movements, you may want to consider increasing
    this value so that those movements are not lost. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `transformPrecision` | 另一个浮点值，用于指定动画时的精度。默认值是 `4.0`，这意味着动画数学计算是在世界空间分辨率的四倍下进行的。如果您有一个包含许多微妙动作的动画，您可能需要考虑增加此值，以防止这些动作丢失。
    |'
- en: Defining GROUP file templates
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义 GROUP 文件模板
- en: Finally, there is the `CIwResTemplateGROUP` class that is used for creating
    a **texture atlas**. A texture atlas is simply a collection of several smaller
    textures that are laid out within a much larger texture. This can improve rendering
    speed since fewer texture swaps are required when rendering.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个 `CIwResTemplateGROUP` 类，用于创建**纹理图集**。纹理图集简单地说就是一组较小的纹理，这些纹理被排列在一个更大的纹理中。这可以提高渲染速度，因为渲染时需要的纹理交换更少。
- en: We won't be looking at texture atlases in detail in this book, so if you want
    further information take a look at the Marmalade documentation page for the `CIwResTemplateGROUP`
    class.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们不会详细探讨纹理图集，所以如果您想了解更多信息，请查看 Marmalade 文档页面中的 `CIwResTemplateGROUP` 类。
- en: Producing binary versions of resources
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成资源的二进制版本
- en: Previously in this book we've seen references to the fact that Marmalade produces
    binary versions of our resources, which are normally both smaller in size and
    quicker to load compared to the source assets.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的之前部分，我们已经看到有关 Marmalade 生成我们资源二进制版本的引用，这些二进制版本通常比源资产更小，加载速度更快。
- en: Until now we've kind of glossed over this a little, but now that we know about
    build styles it's worth taking a closer look.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们对此有点轻描淡写，但现在我们知道了构建样式，值得仔细看看。
- en: The binary versions of resources are generated automatically for us whenever
    we load a GROUP file, assuming we have the ICF setting `ResBuild` set to `1` and
    we're running a Windows debug build of our game. These files are written out with
    the file extension `.group.bin` into a directory called `data-ram`, which lives
    alongside the regular `data` directory where our source assets reside.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们加载 GROUP 文件时，资源二进制版本会自动为我们生成，前提是我们将 ICF 设置 `ResBuild` 设置为 `1`，并且正在运行游戏的
    Windows 调试构建。这些文件以 `.group.bin` 文件扩展名写入到名为 `data-ram` 的目录中，该目录位于我们的源资产所在的常规 `data`
    目录旁边。
- en: If we look inside the `data-ram` directory for any project, we'll discover another
    set of subdirectories and these are what contain the binary versions of our resources.
    These subdirectories correspond to the extra prefix directories that we specify
    in our build styles.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在任何项目的 `data-ram` 目录中查看，我们会发现另一组子目录，这些子目录包含我们资源的二进制版本。这些子目录对应于我们在构建样式中指定的额外前缀目录。
- en: When the `.group.bin` files are written out, they will always be written to
    the prefix directory specified by the currently active build style, regardless
    of whether the source file was read from the standard `data` directory or from
    the extra prefix directory.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `.group.bin` 文件被写入时，它们将始终写入由当前活动构建样式指定的前缀目录，无论源文件是从标准 `data` 目录还是从额外前缀目录读取的。
- en: The relative directory path from the `data` directory will also be created in
    the output directory when writing out the binary versions of the files.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `data` 目录到相对目录路径也会在输出目录中创建，当写入文件的二进制版本时。
- en: This makes it very easy for us to deploy different sets of resources to different
    platforms as we just need to include all the `.group.bin` files from one of the
    subdirectories of `data-ram`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们可以非常容易地将不同的资源集部署到不同的平台，因为我们只需要包含 `data-ram` 的子目录之一中的所有 `.group.bin` 文件。
- en: Let's illustrate this with a quick example. Suppose we have a file `data/images/images.group`
    that loads in a number of textures. If no build style is specified, the default
    is the Marmalade-defined `GLES1` style, which specifies a prefix directory called
    `data-gles1`. The binary version of the file will be written to the file path
    `data-ram/data-gles1/images/images.group.bin`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的例子来说明这一点。假设我们有一个名为`data/images/images.group`的文件，它加载了多个纹理。如果没有指定构建样式，默认是Marmalade定义的`GLES1`样式，它指定了一个名为`data-gles1`的前缀目录。文件的二进制版本将被写入文件路径`data-ram/data-gles1/images/images.group.bin`。
- en: If we now run our program again, with the `pvrtc` build style selected (as defined
    in the section on build styles earlier in this chapter), the images will be converted
    to PVRTC format and instead written to the file path `data-ram/data-pvrtc/images/images.group.bin`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在再次运行程序，选择`pvrtc`构建样式（如本章前面关于构建样式的部分所述），图像将被转换为PVRTC格式，并写入文件路径`data-ram/data-pvrtc/images/images.group.bin`。
- en: As it happens, Marmalade does not just write out the binary versions of the
    GROUP files, it also creates a number of other files that can be useful for debugging
    purposes. We won't look at these in detail in this book, but you might find them
    useful to take a look at if you're having problems with some resource not being
    processed as expected. In particular, there is a file with the extension `.group.bin.txt`
    that details all the classes encountered while processing a particular GROUP file.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Marmalade不仅会输出GROUP文件的二进制版本，还会创建一些其他文件，这些文件在调试过程中可能很有用。在这本书中，我们不会详细讨论这些文件，但如果你在处理某些资源时遇到问题，你可能需要查看这些文件。特别是，有一个扩展名为`.group.bin.txt`的文件，它详细说明了在处理特定GROUP文件时遇到的所有类。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is one drawback to this approach, that is, you must load every single
    GROUP file that your game makes reference to in order to generate all the binary
    versions of them. This can particularly be a problem if your game has a large
    number of levels and you have a GROUP file for each level. A good way of solving
    this issue is to create a special mode for your game that can be given a list
    of all the required GROUP files (and potentially any dependencies between them)
    and will then load each file in turn to generate the binary version.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有一个缺点，那就是你必须加载游戏中引用的每一个GROUP文件，以便生成它们的所有二进制版本。如果你的游戏有大量关卡，并且每个关卡都有一个GROUP文件，这尤其可能成为一个问题。解决这个问题的好方法是为你的游戏创建一个特殊模式，它可以接受一个包含所有必需GROUP文件的列表（以及它们之间可能存在的任何依赖关系），然后依次加载每个文件以生成二进制版本。
- en: Compressing resources using the Derbh archiver
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Derbh归档程序压缩资源
- en: Game resources can soon grow very large in size, so it would be great if we
    could somehow compress these files so that they take up less space in our installation
    package, particularly if there are any restrictions on the maximum size an install
    package can have.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏资源很快就会变得非常大，所以如果我们能以某种方式压缩这些文件，使它们在安装包中占用的空间更少，那就太好了，尤其是如果安装包的最大大小有限制的话。
- en: Marmalade provides just such a feature in the form of Derbh archives, which
    is very similar to compression systems such as ZIP that you will no doubt be familiar
    with. Derbh supports multiple compression algorithms, including the standard LZMA
    and also its own proprietary algorithm, which can achieve improved compression
    by operating over multiple files simultaneously.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade提供了类似Derbh归档这样的功能，这与你可能熟悉的ZIP等压缩系统非常相似。Derbh支持多种压缩算法，包括标准的LZMA以及它自己的专有算法，通过同时操作多个文件，可以实现更好的压缩效果。
- en: The Marmalade SDK provides an API which allows us to load compressed files as
    easily as if they were provided as individual uncompressed files. A command-line
    utility called DZip is also provided to generate the archives in the first place.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Marmalade SDK提供了一个API，允许我们以与提供单个未压缩文件一样容易的方式加载压缩文件。还提供了一个名为DZip的命令行实用程序，用于最初生成归档。
- en: Creating a Derbh archive
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Derbh归档
- en: 'To create a Derbh archive, the first thing we have to do is create a **DZip
    Configuration File** (**DCL**). This file is passed to the DZip utility to specify
    the source files and how they should be compressed. Here is a simple example of
    a DCL file taken from the Skiing example project for this chapter:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Derbh归档，我们首先必须创建一个**DZip配置文件**（**DCL**）。这个文件被传递给DZip实用程序，以指定源文件以及它们应该如何被压缩。以下是一个简单的DCL文件示例，它来自本章的滑雪示例项目：
- en: '[PRE14]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first line uses the `archive` keyword to specify the name of the Derbh archive
    to be created, which is normally given the extension `.dz`. It is possible to
    create several archives at once by simply adding further `archive` entries.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行使用`archive`关键字来指定要创建的Derbh存档的名称，通常会给它一个`.dz`扩展名。可以通过简单地添加更多的`archive`条目来一次创建多个存档。
- en: The `basedir` keyword allows us to specify a directory in which to search for
    the files that will make up the archive. In the previous example we specify the
    directories `data` and `data-ram\data-gles1`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`basedir`关键字允许我们指定一个目录，用于搜索将构成存档的文件。在先前的例子中，我们指定了`data`和`data-ram\data-gles1`目录。'
- en: Next we list all the files that will be added to the archive using the `file`
    keyword. The first parameter is the name of the file to include, which should
    be relative to one of the directories specified by the `basedir` keyword. This
    is followed by a number and a compression type. The number refers to which archive
    the file should be added to, with zero being the first archive specified in the
    DCL file.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`file`关键字列出所有将被添加到存档中的文件。第一个参数是要包含的文件名，它应该是相对于由`basedir`关键字指定的目录的相对路径。之后是一个数字和一个压缩类型。这个数字指的是文件应该添加到哪个存档中，其中零是指DCL文件中指定的第一个存档。
- en: 'There are a number of compression types available, although note that not all
    of them actually compress the source file! We can use a different compression
    type for each file if we so wish. The following table shows the types available:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种压缩类型可供选择，尽管请注意，并非所有这些类型实际上都会压缩源文件！如果我们愿意，可以为每个文件使用不同的压缩类型。以下表格显示了可用的类型：
- en: '| Type | Description |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `lzma` | Uses lzma compression, which generally gives the best compression
    ratio and has a reasonable decompression speed. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `lzma` | 使用lzma压缩，通常提供最佳的压缩比，并且具有合理的解压速度。|'
- en: '| `dz` | Marmalade''s own compression format, which gives a good compression
    ratio and decompression speed. |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `dz` | Marmalade的自身压缩格式，提供了良好的压缩比和解压速度。|'
- en: '| `zlib` | Uses zlib compression, which provides a less optimal compression
    ratio but has a very good decompression speed. |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `zlib` | 使用zlib压缩，提供了不太理想的压缩比，但具有非常好的解压速度。|'
- en: '| `zero` | A block of zeros the same size as the file will be added to the
    archive. Can be used for debugging purposes, for example, if we need to detect
    corrupted files. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `zero` | 将添加一个与文件大小相同的零块到存档中。可以用于调试目的，例如，如果我们需要检测损坏的文件。|'
- en: '| `copy` | The file is included uncompressed in the archive. In the case of
    a file type that is already compressed, this can produce a smaller end file size
    for the archive than trying to compress the file. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `copy` | 文件以未压缩的形式包含在存档中。对于已经压缩的文件类型，这可以产生比尝试压缩文件更小的存档最终文件大小。|'
- en: With the DCL file constructed, we can then build the archive file using the
    DZip utility. This utility can be found as the file `tools\dzip\dzip.exe` in the
    Marmalade SDK install directory.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 构建了DCL文件后，我们可以使用DZip实用程序来构建存档文件。这个实用程序可以在Marmalade SDK安装目录中的`tools\dzip\dzip.exe`文件中找到。
- en: To create the archive, simply pass the name of the DCL file into the DZip utility,
    ensuring you run the command from within a directory where the `archive` and `basedir`
    entries can be located.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建存档，只需将DCL文件的名称传递给DZip实用程序，确保您在可以找到`archive`和`basedir`条目的目录中运行命令。
- en: Using a Derbh archive in code
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在代码中使用Derbh存档
- en: With a Derbh archive created, it is then really easy to make use of it in our
    game. Firstly we need to add support for the Derbh API by adding `derbh` to the
    list of `subprojects` in the MKB file. We also need to include the `derbh.h` file
    to provide access to the API functions.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了Derbh存档后，在游戏中使用它就变得非常简单。首先，我们需要通过在MKB文件中将`derbh`添加到`subprojects`列表中来添加对Derbh
    API的支持。我们还需要包含`derbh.h`文件，以便访问API函数。
- en: To make use of our archive file we just need to add a call to the function `dzArchiveAttach`,
    which takes a single parameter—the filename of the Derbh archive itself. From
    then on any call to open a file will first check to see if it exists in the Derbh
    archive, and if it does the data will automatically be decompressed and returned
    whenever we try to read from the file. It really is that simple!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用我们的存档文件，我们只需要添加一个对函数`dzArchiveAttach`的调用，该函数接受单个参数——Derbh存档本身的文件名。从那时起，任何打开文件的调用都将首先检查它是否存在于Derbh存档中，如果存在，数据将在我们尝试从文件中读取时自动解压并返回。这真的非常简单！
- en: We can attach more than one archive at a time as well by simply calling `dzArchiveAttach`
    for each archive we wish to use.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过简单地调用每个我们希望使用的存档的 `dzArchiveAttach` 来一次附加多个存档。
- en: If a request is made for a file that doesn't appear in the archive, Marmalade
    will then look in the `data` and `data-ram` directories.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求的文件不在存档中，Marmalade 将会查找 `data` 和 `data-ram` 目录。
- en: If we want to stop using a Derbh archive for any reason, we can either call
    `dzArchiveDetach` to remove the last archive that was attached or we can specify
    the archive to detach using the `dzArchiveDetachNamed` function.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们出于任何原因想要停止使用 Derbh 存档，我们可以通过调用 `dzArchiveDetach` 来移除最后附加的存档，或者我们可以使用 `dzArchiveDetachNamed`
    函数指定要分离的存档。
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that only files loaded from within the application code
    will be accessible from an attached Derbh archive. If you are trying to start
    a music track with s3eAudio or a video clip with s3eVideo, these files must exist
    as separate files as they are loaded by the operating system native methods, which
    obviously will have no way of accessing a Derbh file's contents.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，只有从应用程序代码中加载的文件才能从附加的 Derbh 存档中访问。如果你试图使用 s3eAudio 播放音乐轨道或使用 s3eVideo
    播放视频剪辑，这些文件必须作为单独的文件存在，因为它们是通过操作系统原生方法加载的，显然将无法访问 Derbh 文件的内容。
- en: The automatic Derbh method
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动 Derbh 方法
- en: For most projects there is actually an even easier way of making use of Derbh
    archives, which doesn't require us to create a DCL file or build a Derbh file
    ourselves. We don't even have to attach the archive in our code! To make use of
    this feature, all we need to do is add the following to the `deployments` section
    of our MKB file (we'll be covering this section of the MKB file in greater detail
    in just a moment).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数项目来说，实际上还有一种更简单的方法来利用 Derbh 存档，这不需要我们创建 DCL 文件或自己构建 Derbh 文件。我们甚至不需要在我们的代码中附加存档！要使用此功能，我们只需要将以下内容添加到我们的
    MKB 文件 `deployments` 部分即可（我们将在稍后更详细地介绍 MKB 文件的这一部分）。
- en: '[PRE15]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: With this in place, the Marmalade Deployment Tool will automatically build us
    a Derbh archive from the relevant files in the `assets` section of the MKB file
    (again, the `assets` section will be discussed shortly) and will attach it before
    our application code starts executing.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，Marmalade 部署工具将自动从 MKB 文件 `assets` 部分的相关文件中构建一个 Derbh 存档（再次提醒，`assets`
    部分将在稍后讨论），并在我们的应用程序代码开始执行之前将其附加。
- en: Note
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be wary of using the automatic Derbh facility if you ever deploy files that
    need to be modified by your code after installation. You will not be able to modify
    a file once it is contained within an archive, so you would instead need to make
    a copy of any such files in a new location the first time your application runs.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你部署的文件需要在安装后由你的代码修改，请小心使用自动 Derbh 功能。一旦文件包含在存档中，你将无法修改该文件，因此你需要在应用程序第一次运行时在新的位置创建任何此类文件的副本。
- en: Creating different deployment types
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建不同的部署类型
- en: It's now time to take a deeper look at how Marmalade handles the deployment
    process. If you've been following the sample code, you may be wondering how we
    are able to make a deployment package that contains all the necessary resource
    files in order to function. Or, if we're creating multiple resource sets, how
    do we choose which one to pair with our code when creating the installer package?
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更深入地了解 Marmalade 如何处理部署过程了。如果你一直在跟踪示例代码，你可能想知道我们是如何制作包含所有必要资源文件以便运行的部署包的。或者，如果我们正在创建多个资源集，我们在创建安装包时如何选择与我们的代码配对的哪一个？
- en: We also need a way of including icons and captions that will be used to represent
    our application when installed on a device.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一种方法来包含图标和标题，这些图标和标题将用于在设备上安装我们的应用程序时表示我们的应用程序。
- en: All of this magic occurs in the MKB file, and the following sections aim to
    explain exactly what you have to do.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些魔法都在 MKB 文件中发生，接下来的部分旨在解释你确切需要做什么。
- en: Specifying icons, application names, and other details
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定图标、应用程序名称和其他详细信息
- en: The `deployments` section of the MKB file is where we can set all manner of
    attributes that will be applied to the final installation package of our application.
    There are a huge number of deployment options that can be specified, some of which
    are global to all supported platforms and some that are operating system specific.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: MKB 文件的 `deployments` 部分是我们可以设置所有将应用于我们应用程序最终安装包的属性的地方。有大量的部署选项可以指定，其中一些适用于所有支持的平台，而另一些则是特定于操作系统的。
- en: The following table lists several of the more immediately useful attributes,
    but you should go to **Marmalade** | **Marmalade Development Tools Reference**
    | **MKB File Settings** | **Deployment Options** in the Marmalade documentation
    for full details.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了几个更直接有用的属性，但你应该查阅 Marmalade 文档中的 **Marmalade | Marmalade 开发工具参考 | MKB
    文件设置 | 部署选项**，以获取完整详情。
- en: '| Attribute | Description |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assets` | Specifies which asset group to use in a deployment. This will
    be explained in greater detail in the following sections. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `assets` | 指定在部署中使用的资产组。这将在以下部分中详细解释。|'
- en: '| `name` | Specifies the name of the deployment. This name will be used for
    the name of the installation directory, the executable file, and the installation
    package file. If this value is not specified, the filename of the MKB file will
    be used instead. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 指定部署的名称。此名称将用于安装目录、可执行文件和安装包文件的名称。如果没有指定此值，则将使用 MKB 文件的文件名。|'
- en: '| `caption` | This is the name that will be used to identify the application
    once installed on the device—for example, the text that appears underneath a program
    icon. If no caption is specified, the `name` value will be used instead. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `caption` | 这是用于识别设备上已安装的应用程序的名字——例如，出现在程序图标下方的文本。如果没有指定标题，则将使用 `name` 值。|'
- en: '| `app-icf` | Allows an alternative file to be specified for use instead of
    the default `app.icf` file. |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `app-icf` | 允许指定一个替代文件，而不是默认的 `app.icf` 文件。|'
- en: '| `version` | Specifies the version number of the application. It should be
    provided in the form `major.minor.revision`. |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `version` | 指定应用程序的版本号。它应以 `major.minor.revision` 的形式提供。|'
- en: '| `version-major`,`version-minor`, and`version-revision` | An alternative way
    of specifying the version number. Each of these attributes should be followed
    by a number representing the respective part of the version number. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `version-major`,`version-minor`, 和 `version-revision` | 指定版本号的另一种方式。每个属性后应跟一个数字，代表版本号的相应部分。|'
- en: '| `iphone-icon`,`iphone-icon-ipad`,`iphone-icon-high-res`, and`iphone-icon-ipad-high-res`
    | Sets the icons for use in iOS deployment. These settings specify a filename
    to an icon of suitable format and dimension to be used as the specified icon type.
    |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `iphone-icon`,`iphone-icon-ipad`,`iphone-icon-high-res`, 和 `iphone-icon-ipad-high-res`
    | 设置用于 iOS 部署的图标。这些设置指定了一个图标文件的名称，该文件具有合适的格式和尺寸，用作指定的图标类型。|'
- en: '| `android-icon`,`android-icon-hdpi`, and`android-icon-ldpi` | Sets the filenames
    containing the icons for use on Android deployments. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `android-icon`,`android-icon-hdpi`, 和 `android-icon-ldpi` | 设置用于 Android
    部署的图标文件名。|'
- en: '| `bada-icon` | Specifies the file to be used for the icon on Bada deployments.
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `bada-icon` | 指定用于 Bada 部署的图标文件。|'
- en: As you can see, there are options for specifying the icon files for most platforms
    and indeed there are further platform-specific attributes for specifying information
    such as application signing keys.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，大多数平台都有指定图标文件的选项，实际上还有更多针对特定平台的属性，用于指定诸如应用程序签名密钥等信息。
- en: You should check out the aforementioned page of the Marmalade documentation
    for further details on this, as you will be unable to produce final deployment
    packages for submission purposes without this information.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该查看 Marmalade 文档中提到的上述页面，以获取更多关于此方面的详细信息，因为没有这些信息，你将无法生成用于提交的最终部署包。
- en: Specifying asset lists
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定资产列表
- en: 'We need some way of listing all the resource files that have to be included
    in the deployment package so our game can run. Marmalade allows us to do this
    by way of the `assets` section of the MKB file. Here''s an example from this chapter''s
    version of the Skiing project:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方式来列出所有必须包含在部署包中的资源文件，以便我们的游戏可以运行。Marmalade 允许我们通过 MKB 文件的 `assets` 部分来实现这一点。以下是本章
    Skiing 项目的示例：
- en: '[PRE16]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This small example demonstrates most of the functionality available in the `assets`
    section. First, you will notice the use of square brackets to create named groups
    of assets. In the example we have asset groups called `common`, `normal`, and
    `highres`.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小示例演示了在 `assets` 部分中大部分可用的功能。首先，你会注意到使用方括号创建资产命名单元组。在示例中，我们有名为 `common`、`normal`
    和 `highres` 的资产组。
- en: Normal brackets are used to specify a directory, relative to the directory containing
    the MKB file, where files that need to be included in the deployment package can
    be located. This is then followed by the files themselves. You can have any number
    of these blocks of files in an asset group.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的括号用于指定一个目录，相对于包含 MKB 文件的目录，需要包含在部署包中的文件可以位于该目录。然后是文件本身。在资产组中可以有任意数量的这些文件块。
- en: The important thing to remember about how directories and files are specified
    in an asset group is that the directory in brackets becomes the root path of the
    application's installation directory on the device. Let's illustrate this by looking
    at an example.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在资产组中指定目录和文件时需要记住的重要事项是，括号中的目录成为设备上应用程序安装目录的根路径。让我们通过查看一个示例来阐述这一点。
- en: First we have the `common` asset group, which specifies that the file called
    `sound/music.mp3` can be found in the `data` directory. When installed on the
    device, the `music.mp3` file will be written into a subdirectory called `sound`
    in the application's installation directory.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有 `common` 资产组，它指定名为 `sound/music.mp3` 的文件可以在 `data` 目录中找到。当安装在设备上时，`music.mp3`
    文件将被写入应用程序安装目录下的一个名为 `sound` 的子目录中。
- en: Now let's consider the asset group called `normal`. Here the path to the file
    is completely enclosed in the brackets and just the name of the file, `skiing.dz`,
    is specified. This will result in the `skiing.dz` file being written into the
    application's installation directory.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑名为 `normal` 的资产组。在这里，文件的路径完全被括号包围，只指定了文件名，`skiing.dz`。这将导致 `skiing.dz`
    文件被写入应用程序的安装目录中。
- en: There is one final feature of the assets section demonstrated by the example,
    which is the ability to include an asset group from within another asset group.
    This is done using the `include` keyword, which is enclosed in angle brackets
    along with the name of the asset group to be included.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中展示了资产部分的最后一个特性，即能够在另一个资产组中包含一个资产组。这是通过使用 `include` 关键字来完成的，该关键字用尖括号括起来，并包含要包含的资产组的名称。
- en: Looking at the example we can see that both the `normal` and `highres` asset
    groups include the `common` asset group.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看示例，我们可以看到 `normal` 和 `highres` 资产组都包括了 `common` 资产组。
- en: Creating and using deployment types
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和使用部署类型
- en: We can now look at creating different configurations for different devices.
    The `deployments` sections of the MKB file also allows us to create different
    deployment types by specifying a name in square brackets. All settings that are
    made after this will only apply to that deployment type. Settings can be applied
    globally across all deployment types by specifying them with square brackets before
    defining a deployment type.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以查看为不同设备创建不同的配置。MKB 文件的 `deployments` 部分还允许我们通过指定方括号中的名称来创建不同的部署类型。在此之后所做的所有设置将仅适用于该部署类型。可以通过在定义部署类型之前使用方括号来指定设置，以将设置应用于所有部署类型。
- en: It is possible to limit a deployment type to a certain set of mobile platforms
    by following the name in square brackets with a platform identifier or a comma-separated
    list of platforms in quote marks.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在方括号后的名称后跟一个平台标识符或用引号分隔的平台列表来限制部署类型到一组特定的移动平台。
- en: 'A full list of all the platforms supported by Marmalade at the time of this
    writing is provided in the following table:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文撰写时，Marmalade 支持的所有平台的全列表如下表所示：
- en: '| Platform | Notes |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 平台 | 备注 |'
- en: '| --- | --- |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `android` | Specifies the Android operating system. |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| `android` | 指定 Android 操作系统。|'
- en: '| `iphone` | Any iOS-based device—iPhone, iPod touch, or iPad. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| `iphone` | 任何基于 iOS 的设备——iPhone、iPod touch 或 iPad。|'
- en: '| `bada` | Targets the Samsung Bada platform. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| `bada` | 针对三星 Bada 平台。|'
- en: '| `lgtv` | Specifies the LG Smart TV system. |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `lgtv` | 指定 LG 智能电视系统。|'
- en: '| `playbook` | For targeting the Blackberry Playbook tablet. |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| `playbook` | 用于针对 Blackberry Playbook 平板。|'
- en: '| `symbian9` | Builds an application that runs on Symbian 9 S60 or Symbian
    ^3 devices. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `symbian9` | 构建在 Symbian 9 S60 或 Symbian ^3 设备上运行的应用程序。|'
- en: '| `webos` | Targets the webOS platform, the best known device being the now
    discontinued HP TouchPad. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `webos` | 针对 webOS 平台，最知名的设备是现已停产的 HP TouchPad。|'
- en: '| `winmobile` | Allows for Windows Mobile 6 device support. Note that Marmalade
    cannot target Windows Phone 7. |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| `winmobile` | 允许支持 Windows Mobile 6 设备。注意，Marmalade 无法针对 Windows Phone 7
    进行目标定位。|'
- en: '| `win32` | For x86 Windows builds. |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| `win32` | 用于 x86 Windows 构建版本。|'
- en: '| `osx` | For x86 Apple Mac builds (when using the Mac version of Marmalade).
    |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| `osx` | 用于 x86 Apple Mac 构建（当使用 Marmalade 的 Mac 版本时）。|'
- en: It is not mandatory to specify a platform list in a deployment type. If no list
    is given, it is assumed that any platform is a valid target.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署类型中指定平台列表不是强制性的。如果没有给出列表，则假定任何平台都是有效的目标。
- en: Once a deployment type has been specified, any attributes will only apply to
    that deployment type. This is particularly useful to us for being able to specify
    different sets of resources. By using the `assets` attribute we can specify the
    asset group that we want to be included in the final deployment package. The following
    example of the `deployments` section is taken from the Skiing project for this
    chapter.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦指定了部署类型，任何属性都将仅适用于该部署类型。这对于我们来说非常有用，因为我们能够指定不同的资源集。通过使用 `assets` 属性，我们可以指定我们希望在最终部署包中包含的资产组。以下
    `deployments` 部分的示例取自本章的滑雪项目。
- en: '[PRE17]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To create an installation package for a particular deployment type, all we
    have to do is follow the same deployment instructions provided in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Marmalade"), *Getting Started with Marmalade*,
    of this book to start up the **Marmalade System Deployment Tool**. The second
    page of this application allows us to choose the deployment types that we want
    to create by clicking on checkboxes, as shown in the following screenshot:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定的部署类型创建安装包，我们只需遵循本书第 1 章（ch01.html "第 1 章. Marmalade 入门"）中提供的相同部署说明来启动 **Marmalade
    系统部署工具**。此应用程序的第二页允许我们通过点击复选框来选择我们想要创建的部署类型，如下面的截图所示：
- en: '![Creating and using deployment types](img/3363_08_01.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![创建和使用部署类型](img/3363_08_01.jpg)'
- en: This page does allow you to create and modify deployment types by way of the
    **Add <config>**, **Copy <config>**, and **Remove <config>** buttons, but I personally
    prefer specifying them by hand in the MKB file. Using these buttons modifies the
    MKB file accordingly.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面允许你通过 **添加 <config>**、**复制 <config>** 和 **删除 <config>** 按钮创建和修改部署类型，但我个人更喜欢在
    MKB 文件中手动指定它们。使用这些按钮会相应地修改 MKB 文件。
- en: Once you have progressed through all the pages of the deployment tool and made
    the deployment packages, they can be found in the folder `build_projectname_vcxx\deployments`,
    where `projectname` is the name of the MKB file and `vcxx` refers to the version
    of Microsoft Visual C++ that you are using for development.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了部署工具的所有页面并制作了部署包，它们可以在 `build_projectname_vcxx\deployments` 文件夹中找到，其中
    `projectname` 是 MKB 文件的名字，`vcxx` 指的是你用于开发的 Microsoft Visual C++ 版本。
- en: Example code
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例代码
- en: There are two example projects that accompany this chapter, and they are described
    in the following sections.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 本章附带两个示例项目，它们将在以下部分中描述。
- en: The build styles project
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建样式项目
- en: This is a very simple example demonstrating the use of build styles, resource
    templates, and deployment types. It is based on the Graphics2D example from [Chapter
    2](ch02.html "Chapter 2. Resource Management and 2D Graphics Rendering"), *Resource
    Management and 2D Graphics Rendering*.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的示例，展示了构建样式、资源模板和部署类型的用法。它基于第 2 章的 Graphics2D 示例，*资源管理和 2D 图形渲染*。
- en: The `resbuildstyles.itx` file defines a build style called `highres` that specifies
    a prefix directory called `data-highres`. If you look inside the `data` directory,
    you will see that the jar of the marmalade image in `data\images\textures\marmalade.png`
    is 256 x 256 pixels in size. A new directory for the `highres` build style has
    also been added, containing a 512 x 512 version of this image. This file is called
    `data\data-highres\images\textures\marmalade.png`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`resbuildstyles.itx` 文件定义了一个名为 `highres` 的构建样式，该样式指定了一个名为 `data-highres` 的前缀目录。如果你查看
    `data` 目录，你会看到 `data\images\textures\marmalade.png` 中的橘皮果图像的 jar 文件大小为 256 x 256
    像素。还添加了一个新的 `highres` 构建样式的目录，其中包含该图像的 512 x 512 版本。此文件名为 `data\data-highres\images\textures\marmalade.png`。'
- en: If you now look at the `app.icf` file, you will see the new entry `ResBuildStyle=highres`.
    If you run the program with this line in place, the 512 x 512 version of the image
    will be loaded. Comment out or remove this line, and the 256 x 256 image will
    be loaded.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在查看 `app.icf` 文件，你会看到新的条目 `ResBuildStyle=highres`。如果你用这一行运行程序，将会加载 512 x
    512 版本的图像。取消注释或删除此行，将加载 256 x 256 像素的图像。
- en: The `restemplates.itx` file shows a simple example of a resource template that
    will force the images to be converted into RGBA4444 format and also disables mipmapping.
    This resource template is used in the `data\images\images.group` file to reduce
    the size of the `images.group.bin` file as no mipmap images need to be stored
    in it.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`restemplates.itx` 文件显示了一个简单的资源模板示例，该模板将强制图像转换为RGBA4444格式，并禁用mipmap。此资源模板在
    `data\images\images.group` 文件中使用，以减小 `images.group.bin` 文件的大小，因为不需要在其中存储mipmap图像。'
- en: Finally, the `BuildStyles.mkb` file declares two deployment types called `normal`
    and `highres`. When making an install package using the **Marmalade System Deployment
    Tool**, we can select either of these options to include the low or high resolution
    images. Note that the deployment tool will also list the default deployment type
    as this is always defined automatically by the deployment tool. Using the default
    type will not include any resources and so will not work on the device.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`BuildStyles.mkb` 文件声明了两个名为 `normal` 和 `highres` 的部署类型。当使用 **Marmalade系统部署工具**
    制作安装包时，我们可以选择这两个选项之一来包含低分辨率或高分辨率图像。请注意，部署工具还将列出默认部署类型，因为这总是由部署工具自动定义。使用默认类型将不会包含任何资源，因此不会在设备上工作。
- en: The Skiing project
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滑雪项目
- en: For this chapter the Skiing project has been updated to use build styles, resource
    templates, and deployment types. It also makes use of Derbh archives to reduce
    the size of the install package.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，滑雪项目已被更新以使用构建样式、资源模板和部署类型。它还利用Derbh存档来减小安装包的大小。
- en: In this instance the build styles system has been used to allow a larger size
    of font to be used on devices with a higher screen resolution. The `data\data-highres\ui\fonts`
    directory contains alternative versions of the font files `skiing.gxfont` and
    `skiing.tga` that will be loaded when the `highres` build style has been selected
    in the `app.icf` file.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，构建样式系统已被用于允许在屏幕分辨率更高的设备上使用更大的字体。`data\data-highres\ui\fonts` 目录包含字体文件
    `skiing.gxfont` 和 `skiing.tga` 的替代版本，当在 `app.icf` 文件中选择 `highres` 构建样式时，这些版本将被加载。
- en: No changes were necessary to any of the UI layout configuration since we used
    the approach of sizing controls based on the screen dimensions of the device.
    We just need a slightly bigger sized font to fill the larger screen area better.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了基于设备屏幕尺寸来调整控件大小的方法，因此不需要对任何UI布局配置进行更改。我们只需要一个稍微大一点的字体来更好地填充更大的屏幕区域。
- en: To make deployments easier and to reduce the overall memory size of install
    packages, the Derbh API has also been used. If you look in the root project directory,
    you will see two new files called `skiing.dcl` and `skiing-highres.dcl`. These
    files list all the resources needed by the game and are used as input to the DZip
    tool to create the archive files. A batch file called `MakeDerbh.bat` has also
    been included to demonstrate use of the DZip tool.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使部署更容易并减小安装包的整体内存大小，还使用了Derbh API。如果您查看根项目目录，您将看到两个名为 `skiing.dcl` 和 `skiing-highres.dcl`
    的新文件。这些文件列出了游戏所需的所有资源，并用作DZip工具的输入以创建存档文件。还包含了一个名为 `MakeDerbh.bat` 的批处理文件，以演示DZip工具的使用。
- en: Note that the Derbh archives can obviously not be created until the various
    `.group.bin` files have been generated. In order to do this you will need to run
    the game twice, once with the `ResBuildStyle=highres` setting set in the `app.icf`
    file and again with this line commented out.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Derbh存档显然不能在生成各种 `.group.bin` 文件之前创建。为了做到这一点，您需要运行游戏两次，一次是在 `app.icf` 文件中将
    `ResBuildStyle=highres` 设置设置为高分辨率，再次是将此行注释掉。
- en: The two DCL files create the target archives inside the `data-ram\data-gles1`
    and `data-ram\data-highres` directories, but both generate an archive called `skiing.dz`.
    The deployment types in the `Skiing.mkb` file include the relevant version of
    this file so our code becomes independent of the deployment type. At the start
    of the program we just have to attach the `skiing.dz` archive with the `dzArchiveAttach`
    function in order to access the correct resource files.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 两个DCL文件在 `data-ram\data-gles1` 和 `data-ram\data-highres` 目录内创建目标存档，但两者都生成一个名为
    `skiing.dz` 的存档。`Skiing.mkb` 文件中的部署类型包括此文件的相关版本，因此我们的代码与部署类型无关。在程序开始时，我们只需使用 `dzArchiveAttach`
    函数附加 `skiing.dz` 存档，以便访问正确的资源文件。
- en: Summary
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we have learnt how Marmalade makes it easy to organize our resource
    files so that we can create different versions of them for devices of different
    specifications. We only need to provide alternative versions of resources that
    must be different, for example higher resolution textures. Any common files, such
    as configuration and GROUP files, can generally stay the same.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Marmalade如何简化我们组织资源文件的方式，以便我们可以为不同规格的设备创建它们的多个版本。我们只需要提供必须不同的资源替代版本，例如更高分辨率的纹理。任何常见的文件，如配置和GROUP文件，通常可以保持不变。
- en: We've also covered the use of resource templates to allow us finer control over
    how our resources will be used in the game (for example, by specifying a particular
    type of texture compression to be used) and we've seen how to make different deployment
    types that include the same core code but different resource files.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了资源模板的使用，这使我们能够更精细地控制资源在游戏中的使用方式（例如，指定要使用的特定类型的纹理压缩）以及我们如何创建包含相同核心代码但不同资源文件的不同的部署类型。
- en: Finally, we've also looked at the Derbh API to allow us to compress our resource
    files to save space in the installation package.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还研究了Derbh API，它允许我们压缩资源文件以节省安装包中的空间。
- en: In the next chapter we'll be looking at how we can make use of social media
    to allow our players to share information about our game with their Facebook friends.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何利用社交媒体让我们的玩家与他们的Facebook朋友分享有关我们游戏的信息。
