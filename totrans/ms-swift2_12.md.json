["```swift\n{\n(parameters) -> return-type in\n  statements\n}\n```", "```swift\nlet clos1 = {\n  () -> Void in\n\n  print(\"Hello World\")\n}\n```", "```swift\nclos1()\n```", "```swift\nlet clos2 = {\n  (name: String) -> Void in\n\n  print(\"Hello \\(name)\")\n}\n```", "```swift\nclos2(\"Jon\")\n```", "```swift\nfunc testClosure(handler:(String)->Void) {\n  handler(\"Dasher\")\n}\n```", "```swift\ntestClosure(clos2)\n```", "```swift\nlet clos3 = {\n  (name: String) -> String in\n\n  return \"Hello \\(name)\"\n}\n```", "```swift\nvar message = clos3(\"Buddy\")\n```", "```swift\nfunc testFunction(num: Int, handler:()->Void) {\n  for var i=0; i < num; i++ {â€©    handler()\n  }\n}\n```", "```swift\nlet clos = {\n    () -> Void in\n    print(\"Hello from standard syntax\")\n}\ntestFunction(5,handler: clos)\n```", "```swift\ntestFunction(5,handler: {print(\"Hello from Shorthand closure\")})\n```", "```swift\nfunc testFunction2(num: Int, handler:(name: String)->Void) {\n  for var i=0; i < num; i++ {\n    handler(name: \"Me\")\n  }\n}\n```", "```swift\ntestFunction2(5,handler: {print(\"Hello from \\($0)\")}) \n```", "```swift\nlet clos5: (String, String) ->Void = {\n    print(\"\\($0) \\($1)\")\n}\n```", "```swift\nlet clos5b = {\n    (String, String) -> Void in\n    print(\"\\($0) \\($1)\")\n}\n```", "```swift\nclos5(\"Hello\",\"Kara\")\n```", "```swift\nlet clos6: () -> () = {\n    print(\"Howdy\")\n}\n```", "```swift\nclos6()\n```", "```swift\nlet clos7 = {\n    (first: Int, second: Int) -> Int in\n    first + second\n}\n```", "```swift\nlet guests = [\"Jon\", \"Kim\", \"Kailey\", \"Kara\"]\n```", "```swift\nguests.map({\n    (name: String) -> Void in\n    print(\"Hello \\(name)\")\n})\n```", "```swift\nguests.map({print(\"Hello \\($0)\")})\n```", "```swift\nvar messages = guests.map({\n    (name:String) -> String in\n    return \"Welcome \\(name)\"\n})\n```", "```swift\nlet greetGuest = {\n  (name:String) -> Void in\n    print(\"Hello guest named \\(name)\")\n}\n\nlet sayGoodbye = {\n  (name:String) -> Void in\n    print(\"Goodbye \\(name)\")\n}\n```", "```swift\nguests.map(greetGuest)\nguests.map(sayGoodbye)\n```", "```swift\nguests.map(greetGuest)\nguests2.map(greetGuest)\nguests.map(sayGoodbye)\nguests2.map(sayGoodbye)\n```", "```swift\nlet greetGuest2 = {\n  (name:String) -> Void in\n    if (name.hasPrefix(\"K\")) {\n      print(\"\\(name) is on the guest list\")\n    } else {\n    print(\"\\(name) was not invited\")\n    }\n}\n```", "```swift\nfunc temperatures(calculate:(Int)->Void) {\n    var tempArray = [72,74,76,68,70,72,66]\n    tempArray.map(calculate)\n\n}\n```", "```swift\nfunc testFunction() {\n    var total = 0\n    var count = 0\n    let addTemps = {\n      (num: Int) -> Void in\n      total += num\n      count++\n    }\n    temperatures(addTemps)\n    print(\"Total: \\(total)\")\n    print(\"Count: \\(count)\")\n    print(\"Average: \\(total/count)\")\n}\n```", "```swift\nTotal: 498\nCount: 7\nAverage: 71\n```", "```swift\nclass Guests {\n    var guestNames = [\"Jon\",\"Kim\",\"Kailey\",\"Kara\",\"Buddy\",\"Lily\",\"Dash\"]\n\n    typealias UseArrayClosure = [String] -> Void   \n    func getGuest(handler:UseArrayClosure) {\n        handler(guestNames)\n    }\n\n}\n```", "```swift\n@IBOutlet var tableView:UITableView?\nvar tableData: [String]?\n```", "```swift\nfunc getData() {\n  let dataClosure: Guests.UseArrayClosure = {\n    self.tableData = $0\n    if let tView = self.tableView {\n      tView.reloadData()\n    }\n  }\n\n  let guests = Guests()\n  guests.getGuest(dataClosure)\n}\n```", "```swift\nclass TestClass {\n  typealias getNumClosure = ((Int, Int) -> Int)\n\n  var numOne = 5\n  var numTwo = 8\n\n  var results = 0\n  func getNum(handler: getNumClosure) -> Int {\n    results = handler(numOne,numTwo)\n    return results\n\n  }\n}\n```", "```swift\nvar max: TestClass.getNumClosure = {\n  if $0 > $1 {\n    return $0\n  } else {\n    return $1\n  }\n}\n\nvar min: TestClass.getNumClosure = {\n  if $0 < $1 {\n    return $0\n  } else {\n    return $1\n  }\n}\n\nvar multiply:  TestClass.getNumClosure = {\n  return $0 * $1\n}\n\nvar second: TestClass.getNumClosure = {\n  return $1\n}\n\nvar answer: TestClass.getNumClosure = {\n  var tmp = $0 + $1\n  return 42\n}\n```", "```swift\nvar answer: TestClass.getNumClosure = {\n    return 42\n}\n```", "```swift\nvar myClass = TestClass()\n\nmyClass.getNum(max)\nmyClass.getNum(min)\nmyClass.getNum(multiply)\nmyClass.getNum(second)\nmyClass.getNum(answer)\n```", "```swift\nclass TestClass {\n  typealias ResultsClosure = ((String) -> Void)\n\n  func isGreater(numOne: Int, numTwo:Int, successHandler: ResultsClosure, failureHandler: ResultsClosure) {\n    if numOne > numTwo {\n      successHandler(\"\\(numOne) is greater than \\(numTwo)\")\n    }\n    else {\n      failureHandler(\"\\(numOne) is not greater than \\(numTwo)\")\n    }\n\n  }\n}\n```", "```swift\nvar success: TestClass. ResultsClosure = {\n    print(\"Success: \\($0)\")\n}\n\nvar failure: TestClass. ResultsClosure = {\n    print(\"Failure: \\($0)\")\n}\n```", "```swift\nvar test = TestClass()\ntest.isGreater(8, numTwo: 6, successHandler:success, failureHandler:failure)\n```", "```swift\nvar data = myWebClass.myWebServiceCall(someParameter)\n```", "```swift\nclass TestClassOne {\n  typealias nameClosure = (() -> String)\n\n  var name = \"Jon\"\n\n  lazy var myClosure: nameClosure =  {\n    return self.name\n  }\n\n  deinit {\n    print(\"TestClassOne deinitialized\")\n  }\n}\n```", "```swift\nclass TestClassTwo {\n\n  func closureExample(handler: TestClassOne.nameClosure) {\n    print(handler())\n  }\n\n  deinit {\n    print(\"TestClassTwo deinitialized\")\n  }\n}\n```", "```swift\nvar testClassOne: TestClassOne? = TestClassOne()\nvar testClassTwo: TestClassTwo? = TestClassTwo()\n\ntestClassTwo?.closureExample(testClassOne!.myClosure)\n\ntestClassOne = nil\nprint(\"testClassOne is gone\")\n\ntestClassTwo = nil\nprint(\"testClassTwo is gone\")\n```", "```swift\ntestClassOne is gone\nTestClassTwo deinitialized\ntestClassTwo is gone\n```", "```swift\nlazy var myClosure: nameClosure = {\n  return \"Just Me\"\n}\n```", "```swift\nTestClassOne deinitialized\ntestClassOne is gone\nTestClassTwo deinitialized\ntestClassTwo is gone\n```", "```swift\nlazy var myClosure: nameClosure =  {\n  [unowned self] in\n  return self.name\n}\n```", "```swift\nTestClassOne deinitialized\ntestClassOne is gone\nTestClassTwo deinitialized\ntestClassTwo is gone\n```"]