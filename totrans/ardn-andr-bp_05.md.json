["```java\nssh root@yourYùnName.local\n\n```", "```java\nopkg update\n\n```", "```java\nopkg install kmod-video-uvc mjpg-streamer\n\n```", "```java\nssh root@yourYùnName\n\n```", "```java\nmjpg_streamer -i \"input_uvc.so -d /dev/video0 -r 640x480 -f 25\" -o \"output_http.so -p 8080 -w /www/webcam\" &\n\n```", "```java\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest \n    package=\"com.arduinoandroid.androidYùnsecurity\" >\n\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@drawable/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:theme=\"@style/AppTheme\" >\n        <activity\n            android:name=\".StreamActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```", "```java\npublic class StreamActivity extends Activity {\n    private static final String TAG = \"MjpegActivity\";\n\n    private MjpegView mv;\n```", "```java\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //sample public ca\n        String URL = \"http://youripaddress:8080/?action=stream\";\n\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n        mv = new MjpegView(this);\n        setContentView(mv);\n\n        new DoRead().execute(URL);\n    }\n```", "```java\n    public void onPause() {\n        super.onPause();\n        mv.stopPlayback();\n    }\n```", "```java\n    public class DoRead extends AsyncTask<String, Void, MjpegInputStream> {\n        protected MjpegInputStream doInBackground(String... url) {\n\n            HttpResponse res = null;\n            DefaultHttpClient httpclient = new DefaultHttpClient();\n            Log.d(TAG, \"1\\. Sending http request\");\n            try {\n                res = httpclient.execute(new HttpGet(URI.create(url[0])));\n                Log.d(TAG, \"2\\. Request finished, status = \" + res.getStatusLine().getStatusCode());\n                if(res.getStatusLine().getStatusCode()==401){\n                    //You must turn off camera User Access Control before this will work\n                    return null;\n                }\n                return new MjpegInputStream(res.getEntity().getContent());\n            } catch (ClientProtocolException e) {\n                e.printStackTrace();\n                Log.d(TAG, \"Request failed-ClientProtocolException\", e);\n                //Error connecting to camera\n            } catch (IOException e) {\n                e.printStackTrace();\n                Log.d(TAG, \"Request failed-IOException\", e);\n                //Error connecting to camera\n            }\n\n            return null;\n        }\n```", "```java\n        protected void onPostExecute(MjpegInputStream result) {\n            mv.setSource(result);\n            mv.setDisplayMode(MjpegView.SIZE_BEST_FIT);\n            mv.showFps(true);\n        }\n    }\n}\n```", "```java\npublic class MjpegInputStream extends DataInputStream {\n    private static final String TAG = \"MjpegInputStream\";\n\n    private final byte[] SOI_MARKER = { (byte) 0xFF, (byte) 0xD8 };\n    private final byte[] EOF_MARKER = { (byte) 0xFF, (byte) 0xD9 };\n    private final String CONTENT_LENGTH = \"Content-Length\";\n    private final static int HEADER_MAX_LENGTH = 100;\n    private final static int FRAME_MAX_LENGTH = 40000 + HEADER_MAX_LENGTH;\n    private int mContentLength = -1;\n\n    public MjpegInputStream(InputStream in) {\n        super(new BufferedInputStream(in, FRAME_MAX_LENGTH));\n    }\n\n    private int getEndOfSeqeunce(DataInputStream in, byte[] sequence) throws IOException {\n        int seqIndex = 0;\n        byte c;\n        for(int i=0; i < FRAME_MAX_LENGTH; i++) {\n            c = (byte) in.readUnsignedByte();\n            if(c == sequence[seqIndex]) {\n                seqIndex++;\n                if(seqIndex == sequence.length) {\n                    return i + 1;\n                }\n            } else {\n                seqIndex = 0;\n            }\n        }\n        return -1;\n    }\n\n    private int getStartOfSequence(DataInputStream in, byte[] sequence) throws IOException {\n        int end = getEndOfSeqeunce(in, sequence);\n        return (end < 0) ? (-1) : (end - sequence.length);\n    }\n\n    private int parseContentLength(byte[] headerBytes) throws IOException, NumberFormatException {\n        ByteArrayInputStream headerIn = new ByteArrayInputStream(headerBytes);\n        Properties props = new Properties();\n        props.load(headerIn);\n        return Integer.parseInt(props.getProperty(CONTENT_LENGTH));\n    }\n\n    public Bitmap readMjpegFrame() throws IOException {\n        mark(FRAME_MAX_LENGTH);\n        int headerLen = getStartOfSequence(this, SOI_MARKER);\n        reset();\n        byte[] header = new byte[headerLen];\n        readFully(header);\n        try {\n            mContentLength = parseContentLength(header);\n        } catch (NumberFormatException nfe) {\n            nfe.getStackTrace();\n            Log.d(TAG, \"catch NumberFormatException hit\", nfe);\n            mContentLength = getEndOfSeqeunce(this, EOF_MARKER);\n        }\n        reset();\n        byte[] frameData = new byte[mContentLength];\n        skipBytes(headerLen);\n        readFully(frameData);\n        return BitmapFactory.decodeStream(new ByteArrayInputStream(frameData));\n    }\n}\n```"]