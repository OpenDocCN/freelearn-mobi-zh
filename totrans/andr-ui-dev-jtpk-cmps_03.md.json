["```kt\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n\n  android:layout_width=\"match_parent\"\n  android:layout_height=\"match_parent\">\n  <TextView\n    android:id=\"@+id/message\"\n    style=\"@style/TextAppearance.AppCompat.Medium\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:textAlignment=\"center\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintBottom_toTopOf=\"@id/name\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintHorizontal_bias=\"0.5\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\"\n    app:layout_constraintVertical_bias=\"0.5\"\n    app:layout_constraintVertical_chainStyle=\"packed\" />\n  ...\n</androidx.constraintlayout.widget.ConstraintLayout>\n```", "```kt\nprivate lateinit var doneButton: Button\n...\nval doneButton = findViewById(R.id.done)\n```", "```kt\nval doneButton = findViewById<Button>(R.id.done)\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n  private lateinit var binding: MainBinding\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    binding = MainBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n    ...\n    enableOrDisableButton()\n  }\n  ...\n}\n```", "```kt\nandroid {\n  ...\n  buildFeatures {\n    viewBinding true\n  }\n}\n```", "```kt\nprivate fun enableOrDisableButton() {\n  binding.done.isEnabled = binding.name.text.isNotBlank()\n}\n```", "```kt\nbinding.name.run {\n  setOnEditorActionListener { _, _, _ ->\n    binding.done.performClick()\n    true\n  }\n  doAfterTextChanged {\n    enableOrDisableButton()\n  }\n  visibility = VISIBLE\n}\n```", "```kt\nbinding.done.run {\n  setOnClickListener {\n    val name = binding.name.text\n    if (name.isNotBlank()) {\n      binding.message.text = getString(R.string.hello,\n                                       name)\n      binding.name.visibility = GONE\n      it.visibility = GONE\n    }\n  }\n  visibility = VISIBLE\n}\n```", "```kt\njava.lang.Object\n  ↳  android.view.View\n     ↳  android.view.ViewGroup\n        ↳  androidx.constraintlayout.widget.ConstraintLayout\n```", "```kt\njava.lang.Object\n  ↳  android.view.View\n     ↳  android.widget.TextView\n        ↳  android.widget.Button\n```", "```kt\njava.lang.Object\n  ↳  android.view.View\n     ↳  android.widget.TextView\n        ↳  android.widget.EditText\n```", "```kt\njava.lang.Object\n  ↳  android.view.View\n     ↳  android.widget.ImageView\n        ↳  android.widget.ImageButton\n```", "```kt\nfun factorialAsString(n: Int): String {\n  var result = 1L\n  for (i in 1..n) {\n    result *= i\n  }\n  return \"$n! = $result\"\n}\n```", "```kt\n@Composable\nfun Factorial() {\n  var expanded by remember { mutableStateOf(false) }\n  var text by remember {\n    mutableStateOf(factorialAsString(0)) }\n  Box(\n    modifier = Modifier.fillMaxSize(),\n    contentAlignment = Alignment.Center\n  ) {\n    Text(\n      modifier = Modifier.clickable {\n        expanded = true\n      },\n      text = text,\n      style = MaterialTheme.typography.h2\n    )\n    DropdownMenu(\n      expanded = expanded,\n      onDismissRequest = {\n        expanded = false\n      }) {\n      for (n in 0 until 10) {\n        DropdownMenuItem(onClick = {\n          expanded = false\n          text = factorialAsString(n)\n        }) {\n          Text(\"${n.toString()}!\")\n        }\n      }\n    }\n  }\n}\n```", "```kt\n@Composable\n@Preview\nfun ButtonDemo() {\n  Box {\n    Button(onClick = {\n      println(\"clicked\")\n    }) {\n      Text(\"Click me!\")\n    }\n  }\n}\n```", "```kt\nButton(\n  onClick = {\n    println(\"clicked\")\n  },\n  enabled = false\n) {\n  Text(\"Click me!\")\n}\n```", "```kt\nmodifier = Modifier.clickable { ...\n```", "```kt\n@Composable\n@Preview\nfun BoxDemo() {\n  Box(contentAlignment = Alignment.Center) {\n    Box(\n      modifier = Modifier\n        .size(width = 100.dp, height = 100.dp)\n        .background(Color.Green)\n    )\n    Box(\n      modifier = Modifier\n        .size(width = 80.dp, height = 80.dp)\n        .background(Color.Yellow)\n    )\n    Text(\n      text = \"Hello\",\n      color = Color.Black,\n      modifier = Modifier.align(Alignment.TopStart)\n    )\n  }\n}\n```"]