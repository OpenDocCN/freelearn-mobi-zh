- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: iPad Project – Photo Gallery Enhanced View
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: iPad 项目 – 照片库增强视图
- en: In this chapter, we will work on implementing enhanced view and page navigation
    functionalities in our photo gallery project. In the previous chapter, we looked
    at the design of the photo gallery and how it works uniquely due to it being developed
    for a large device. Then, we broke it down into two views and a fullscreen mode.
    Afterward, we implemented the first view, which was the highlight view. To do
    this, we figured out the components required. We then implemented all the components
    using SwiftUI. At the end of the previous chapter, we only had a fancy wireframe
    for the highlight view and no connection to another view. Now, we will create
    the enhanced view and implement all the functionality to provide navigation between
    the views and send image metadata between the highlight and enhanced views.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将致力于在我们的照片库项目中实现增强视图和页面导航功能。在前一章中，我们探讨了照片库的设计及其独特的工作方式，因为它是为大设备开发的。然后，我们将其分解为两个视图和全屏模式。之后，我们实现了第一个视图，即突出视图。为此，我们确定了所需的组件。然后，我们使用
    SwiftUI 实现了所有组件。在前一章的结尾，我们只有一个突出视图的精美线框，没有与其他视图的连接。现在，我们将创建增强视图并实现所有功能，以在视图之间提供导航并在突出视图和增强视图之间发送图像元数据。
- en: 'This chapter will be split into the following sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将分为以下部分：
- en: '`EnhancedView` Design Overview'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EnhancedView` 设计概述'
- en: Updating `HighlightView`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `HighlightView`
- en: Testing `EnhancedView`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 `EnhancedView`
- en: Extra tasks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外任务
- en: By the end of this chapter, you will have created a fully functional photo gallery
    that leverages the iPad’s immense screen real estate, which is yours to be modified,
    tweaked, and used as you see fit. I will give you exercises when we reach the
    end of the chapter to implement more advanced functionality into the photo gallery.
    This will transition nicely into our next project, the Mac App Store.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将创建一个功能齐全的照片库，利用 iPad 的巨大屏幕空间，你可以根据自己的需求进行修改、调整和使用。当本章结束时，我将给你一些练习，以将更高级的功能实现到照片库中。这将很好地过渡到我们的下一个项目，即
    Mac App Store。
- en: Technical Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您从 Apple 的 App Store 下载 Xcode 14 或更高版本。
- en: To install Xcode just search for Xcode in the App Store, then select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Xcode，只需在 App Store 中搜索 Xcode，然后选择并下载最新版本。打开 Xcode 并遵循任何额外的安装说明。一旦 Xcode
    打开并启动，你就可以开始了。
- en: 'Version 14 of Xcode has the following features/requirements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 14 版本具有以下功能/要求：
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适用于 iOS 16、iPadOS 16、macOS 12.3、tvOS 16 和 watchOS 9 的 SDK。
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 iOS 11 或更高版本、tvOS 11 或更高版本和 watchOS 4 或更高版本在设备上的调试。
- en: Requires a Mac running macOS Monterey 12.5 or later.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要 Mac 运行 macOS Monterey 12.5 或更高版本。
- en: For further information regarding technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如需有关技术细节的更多信息，请参阅[*第 1 章*](B18783_01.xhtml#_idTextAnchor014)。
- en: 'The code files for this chapter can be found here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在此处找到：
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View)'
- en: In the next section, we will look at the `EnhancedView`. We will break it down
    into components that we can implement.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 `EnhancedView`。我们将将其分解为我们可以实现的部分。
- en: EnhancedView design overview
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强视图设计概述
- en: 'In this section, we will implement the `EnhancedView`. If you recall, in the
    previous chapter, we discussed the design of the `EnhancedView`. The following
    figures show the portrait and landscape modes of the `EnhancedView` as a reminder:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现 `EnhancedView`。如果你还记得，在前一章中，我们讨论了 `EnhancedView` 的设计。以下图示显示了 `EnhancedView`
    的竖屏和横屏模式，以供提醒：
- en: '![Figure 5.1 – EnhancedView wireframe preview in portrait mode](img/Figure_5.01_B18783.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 竖屏模式下的增强视图线框预览](img/Figure_5.01_B18783.jpg)'
- en: Figure 5.1 – EnhancedView wireframe preview in portrait mode
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – EnhancedView 线框预览（纵向模式）
- en: '![Figure 5.2 – EnhancedView wireframe preview in landscape mode](img/Figure_5.02_B18783.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 横屏模式下的 EnhancedView 线框预览](img/Figure_5.02_B18783.jpg)'
- en: Figure 5.2 – EnhancedView wireframe preview in landscape mode
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 横屏模式下的 EnhancedView 线框预览
- en: Before we code our application, we will break down the `EnhancedView` into the
    elements that comprise it. As a little task, see whether you can figure out what
    they are. Don’t worry if you don’t know the exact UI component names; we will
    look at the components in the following sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写应用程序代码之前，我们将把 `EnhancedView` 分解成构成它的元素。作为一个小任务，看看你是否能弄清楚它们是什么。如果你不知道确切的
    UI 组件名称，不要担心；我们将在以下几节中查看这些组件。
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The components are the same for portrait and landscape orientation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件在纵向和横向方向上都是相同的。
- en: The Text component
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本组件
- en: 'The `Text` component is one of the simplest components offered by SwiftUI.
    It allows you to display a string of characters/numbers, which is very useful
    for headings and providing information. We will use it three times for the following
    features:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Text` 组件是 SwiftUI 提供的最简单的组件之一。它允许你显示一串字符/数字，这对于标题和信息提供非常有用。我们将用它三次来实现以下功能：'
- en: Image title
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片标题
- en: Date
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期
- en: Image description
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片描述
- en: 'The following figures show `Text` components:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了 `Text` 组件：
- en: '![Figure 5.3 – Image Title text component](img/Figure_5.03_B18783.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 图片标题文本组件](img/Figure_5.03_B18783.jpg)'
- en: Figure 5.3 – Image Title text component
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 图片标题文本组件
- en: '![Figure 5.4 – Image date text component](img/Figure_5.04_B18783.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 图像日期文本组件](img/Figure_5.04_B18783.jpg)'
- en: Figure 5.4 – Image date text component
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 图像日期文本组件
- en: '![Figure 5.5 – Image description text component](img/Figure_5.05_B18783.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – 图片描述文本组件](img/Figure_5.05_B18783.jpg)'
- en: Figure 5.5 – Image description text component
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 图片描述文本组件
- en: The Image component
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像组件
- en: 'The `Image` component is one of the core components offered by SwiftUI. It
    allows you to display an image, which can be used to provide a visual representation
    or to a body of text. We will use it to show a bigger version of the image that
    was selected from the `HighlightView`. The following figure shows the image in
    `EnhancedView`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image` 组件是 SwiftUI 提供的核心组件之一。它允许你显示一个图像，可以用来提供视觉表示或文本的主体。我们将使用它来显示从 `HighlightView`
    中选择的图像的大版本。以下图显示了 `EnhancedView` 中的图像：'
- en: '![Figure 5.6 – Image component](img/Figure_5.06_B18783.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 图像组件](img/Figure_5.06_B18783.jpg)'
- en: Figure 5.6 – Image component
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 图像组件
- en: In the next section, we will create `EnhancedView` and implement it using the
    components we discussed using SwiftUI in our application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建 `EnhancedView` 并使用我们在应用中使用 SwiftUI 讨论过的组件来实现它。
- en: Adding EnhancedView Components
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 EnhancedView 组件
- en: 'In this section, we will add the previously discussed components to create
    our `EnhancedView`. However, we first need to create the `EnhancedView` file.
    Doing so is simple; follow these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加之前讨论过的组件来创建我们的 `EnhancedView`。然而，我们首先需要创建 `EnhancedView` 文件。这样做很简单；按照以下步骤操作：
- en: 'We will now create a new SwiftUI View for the results page. Right-click the
    gallery folder inside of your **Project Navigator** pane and select **New File...**:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建一个新的 SwiftUI 视图用于结果页面。在您的 **项目导航器** 面板内的相册文件夹上右键单击，并选择 **新建文件...**：
- en: "![Figure 5.7 – Select New File\uFEFF...](img/Figure_5.07_B18783.jpg)"
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 选择新建文件](img/Figure_5.07_B18783.jpg)'
- en: Figure 5.7 – Select New File...
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 选择新建文件
- en: 'Next, we will select the type of file we want to add, which is a **SwiftUI
    View** (selecting this provides a SwiftUI template, which saves us the time and
    effort of retyping the SwiftUI file structure every time) in the **User** **Interface**
    section:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将选择要添加的文件类型，它是一个 **SwiftUI 视图**（选择此选项将提供一个 SwiftUI 模板，这可以节省我们每次重新输入 SwiftUI
    文件结构的麻烦）在 **用户界面** 部分：
- en: '![Figure 5.8 – SwiftUI View selection](img/Figure_5.08_B18783.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – SwiftUI 视图选择](img/Figure_5.08_B18783.jpg)'
- en: Figure 5.8 – SwiftUI View selection
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – SwiftUI 视图选择
- en: 'Finally, we must rename our `EnhancedView` and press **Create**:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们必须重命名我们的 `EnhancedView` 并按 **创建**：
- en: '![Figure 5.9 – Naming our view](img/Figure_5.09_B18783.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 命名我们的视图](img/Figure_5.09_B18783.jpg)'
- en: Figure 5.9 – Naming our view
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 命名我们的视图
- en: So far, we have looked at the wireframes and the components that compose them.
    Finally, we created our `EnhancedView` file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看过线框及其组成的组件。最后，我们创建了我们的 `EnhancedView` 文件。
- en: Updating HighlightView
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 HighlightView
- en: 'The first thing I will do is update the code to align with my coding standards;
    feel free to do the same. Now, we will add five state variables. One will be used
    to track whether an image has been clicked, and the other four will be used to
    pass data from the `HighlightView` to the `EnhancedView`. Add the code after the
    adaptive columns like so:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先要做的是更新代码以符合我的编码标准；您可以自由地这样做。现在，我们将添加五个状态变量。一个将用于跟踪图像是否被点击，其他四个将用于从`HighlightView`传递数据到`EnhancedView`。像这样在自适应列之后添加代码：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, update the body to match the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新主体以匹配以下代码：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We just added a lot of code, so let’s unpack it all:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了很多代码，所以让我们逐一解释：
- en: '`NavigationView {`: We implement a navigation system that will allow us to
    go to the `EnhancedView` and back. Using this code for the `NavigationView` alone
    will result in a split system, thus at the end we add the proceeding code to remove
    the split view mode.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavigationView {`: 我们实现了一个导航系统，允许我们导航到`EnhancedView`并返回。仅使用此代码为`NavigationView`将导致分割系统，因此最后我们添加了后续代码以移除分割视图模式。'
- en: '`.navigationViewStyle( StackNavigationViewStyle( ) )`: Coupled with the new
    `NavigationView`, we wrap each image around a `NavigationLink`, which allows it
    to be clickable so we can navigate to another view.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navigationViewStyle( StackNavigationViewStyle( ) )`: 与新的`NavigationView`结合使用，我们将每个图像包裹在一个`NavigationLink`中，这使得它可以点击，从而我们可以导航到另一个视图。'
- en: '`NavigationLink( destination: EnhancedView( imageFile: $imageFile, imageName:
    $imageName, imageDate: $imageDate, imageDescription: $imageDescription ), isActive:
    $isClicked, label`: Within the `NavigationLink`, we have several parameters. Let’s
    break down the purpose of each one:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavigationLink( destination: EnhancedView( imageFile: $imageFile, imageName:
    $imageName, imageDate: $imageDate, imageDescription: $imageDescription ), isActive:
    $isClicked, label`: 在`NavigationLink`中，我们有几个参数。让我们逐一分析每个参数的作用：'
- en: '`destination: EnhancedView(`: Sets the view to navigate to upon clicking the
    image.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destination: EnhancedView(`: 设置点击图像时导航到的视图。'
- en: '`imageFile: $imageFile`: Passes the `imageFile` state variable that was created
    previously to the `EnhancedView`. This variable is the path/filename of the image.
    This will be stored as a string.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageFile: $imageFile`: 将之前创建的`imageFile`状态变量传递给`EnhancedView`。这个变量是图像的路径/文件名。这将作为字符串存储。'
- en: '`imageName: $imageName`: Passes the `imageName` state variable to the `EnhancedView`.
    This variable is the name/title of the image.'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageName: $imageName`: 将`imageName`状态变量传递给`EnhancedView`。这个变量是图像的名称/标题。'
- en: '`imageDate: $imageDate`: Passes the `imageDate` state variable that was created
    previously to the `EnhancedView`. This variable is the date of the image. This
    could be the creation date, edit date, or some other relevant date.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageDate: $imageDate`: 将之前创建的`imageDate`状态变量传递给`EnhancedView`。这个变量是图像的日期。这可能是指创建日期、编辑日期或其他相关日期。'
- en: '`imageDescription: $imageDescription`: Passes the `imageDescription` state
    variable to the `EnhancedView`. This variable is the description of the image.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageDescription: $imageDescription`: 将`imageDescription`状态变量传递给`EnhancedView`。这个变量是图像的描述。'
- en: '`isActive: $isClicked`: Tracks whether the image has been clicked. If so, it
    will navigate to the `EnhancedView`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isActive: $isClicked`: 跟踪图像是否被点击。如果是，它将导航到`EnhancedView`。'
- en: '`label`: Although we are not using any form of text for the button, the image
    will be used as a label, which will act as the clickable label/image for navigation.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`: 虽然我们没有使用任何形式的文本作为按钮，但图像将被用作标签，它将作为导航的可点击标签/图像。'
- en: 'The next step is to add clickable functionality to the image allowing the user
    to navigate from the `HighlightView` to the `EnhancedView`. Update the image code
    within the `NavigationLink` as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加图像的可点击功能，允许用户从`HighlightView`导航到`EnhancedView`。更新`NavigationLink`中的图像代码如下：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have added an `onTapGesture` function. The purpose of this is to assign the
    metadata for the image to the `@State` variables created earlier. All the metadata
    variables are hardcoded, except `imageFile`, which uses an array. Feel free to
    extend the current array to become a multidimensional data container to store
    unique metadata for each image. Finally, we set `isClicked` to `true`; this tells
    the view to navigate to the designated view on the `NavigationLink`, which is
    the `EnhancedView`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个`onTapGesture`函数。这个函数的目的是将图像的元数据分配给之前创建的`@State`变量。所有元数据变量都是硬编码的，除了`imageFile`，它使用一个数组。您可以自由扩展当前数组，使其成为一个多维数据容器，以存储每个图像的独特元数据。最后，我们将`isClicked`设置为`true`；这告诉视图在点击`NavigationLink`时导航到指定的视图，即`EnhancedView`。
- en: 'All these changes will result in the following code for the `HighlightView`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些更改将导致以下`HighlightView`的代码：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'That was a lot to unpack! Feel free to take another look at this section before
    moving on. Remember, you have access to the GitHub repository for online access
    for easy copy and paste: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分内容有很多要理解！在继续之前，请随意再次查看本节。记住，您可以通过GitHub仓库在线访问，以便轻松复制和粘贴：[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects)。
- en: Implementing EnhancedView
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现EnhancedView
- en: 'First, we need to implement code to handle the rotation functionality. Add
    the following code above the `EnhancedView` struct:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要实现处理旋转功能的代码。在`EnhancedView`结构上方添加以下代码：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code we added allows us to render the content again when rotating
    the screen. This will be used shortly when detecting the device’s orientation.
    Now, we can add the `@Binding` variables at the start of our `EnhancedView` struct,
    which allows us to pass in metadata:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的先前代码允许我们在旋转屏幕时重新渲染内容。这将在检测设备方向时很快被使用。现在，我们可以在`EnhancedView`结构的开始处添加`@Binding`变量，这允许我们传递元数据：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we will add two variables, the first detecting the device’s orientation
    and the second detecting the device screen size in pixels. The former will be
    used to determine the correct layout, and the latter will be used when sizing
    components. Add the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加两个变量，第一个用于检测设备的方向，第二个用于检测设备屏幕尺寸（以像素为单位）。前者将用于确定正确的布局，后者将用于调整组件大小。添加以下代码：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the body, we will create a group, which will contain two layouts, one for
    each orientation: portrait and landscape. Add the following code, and we will
    discuss everything that is happening:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在主体中，我们将创建一个组，其中包含两个布局，一个用于纵向，一个用于横屏。添加以下代码，我们将讨论正在发生的一切：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s run through the code we just added, bit by bit. First, we check which
    orientation the device is in. By default, we check whether it’s landscape. If
    not, it must be portrait, and we handle the component sizes and positioning accordingly:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行分析我们刚刚添加的代码。首先，我们检查设备处于哪种方向。默认情况下，我们检查它是否为横屏。如果不是，则必须是纵向，并且我们相应地处理组件大小和位置：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we create a lazy horizontal stack for storing the components in the landscape
    orientation:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个用于存储横屏方向组件的懒加载水平堆叠：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we create two vertical stacks. The frame width is set to half of the
    screen’s width. This effectively creates an equal splitscreen design. Feel free
    to modify the multiplier if you would like a custom split. Inside the first vertical
    stack, we put the image, which is set to `resizable` and `scaledToFit`. In the
    second vertical stack, we put the text metadata in simple `Text` components:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建两个垂直堆叠。框架宽度设置为屏幕宽度的一半。这实际上创建了一个等分的分屏设计。如果您想要自定义分割，可以随意修改乘数。在第一个垂直堆叠中，我们放置图片，设置为`resizable`和`scaledToFit`。在第二个垂直堆叠中，我们放置文本元数据，使用简单的`Text`组件：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `else` statement, we simply use `LazyVStack` as it pertains to the portrait
    orientation. The only other change made is to the frame size: it is not linked
    to the screen’s width but its height. The rest remains the same.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`else`语句中，我们简单地使用`LazyVStack`，因为它与纵向方向相关。所做的唯一其他更改是调整框架大小：它不再与屏幕宽度相关联，而是与高度相关联。其余部分保持不变。
- en: 'Finally, we add a detector to our `Group` component, which simply detects when
    the device has been rotated and updates the orientation variable, which is used
    to detect which mode to draw:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在`Group`组件中添加一个检测器，它简单地检测设备是否已旋转，并更新用于检测绘制模式的`orientation`变量：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The only thing that remains is updating the preview provider at the bottom
    of the `EnhancedView` file. Update the code as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的唯一事情是更新`EnhancedView`文件底部的预览提供者。按照以下方式更新代码：
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code just adds a default set of parameters to be passed through
    for the preview. I have left it blank as I used the simulator for testing, but
    feel free to put in dummy data to ensure you can properly add text using the preview.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码仅为预览传递添加了一组默认参数。我将其留空，因为我使用了模拟器进行测试，但您可以根据需要输入占位符数据，以确保您可以使用预览正确添加文本。
- en: In this section, we implemented the `EnhancedView` code. In the next section,
    we will take a look at the result. Feel free to modify the layout for landscape
    and portrait to make it unique.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实现了`EnhancedView`代码。在下一节中，我们将查看结果。请随意修改横屏和竖屏的布局，使其独特。
- en: Testing EnhancedView
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试EnhancedView
- en: 'In this section, we will finally get to test our application. Launching it
    up will take us to the `HighlightView`; click on any image and it will take you
    to the `EnhancedView`. The portrait mode will look as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们最终将测试我们的应用程序。启动它将带我们到`HighlightView`；点击任何图片，它将带您到`EnhancedView`。竖屏模式如下所示：
- en: '![Figure 5.10 – Portrait mode](img/Figure_5.10_B18783.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图5.10 – 竖屏模式](img/Figure_5.10_B18783.jpg)'
- en: Figure 5.10 – Portrait mode
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 – 竖屏模式
- en: 'Rotating the application will result in the following output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转应用程序将产生以下输出：
- en: '![Figure 5.11 – Landscape mode](img/Figure_5.11_B18783.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图5.11 – 横屏模式](img/Figure_5.11_B18783.jpg)'
- en: Figure 5.11 – Landscape mode
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 – 横屏模式
- en: Now, our application is complete and features a navigational menu for going
    back to the `HighlightView`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序已经完成，并具有一个导航菜单，用于返回到`HighlightView`。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you require help with rotating the simulator, please refer to the previous
    chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要旋转模拟器的帮助，请参阅上一章。
- en: Extra tasks
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外任务
- en: 'Now that the application is complete, here is a list of extra tasks for you
    to complete to enhance your application:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序已经完成，以下是一些额外的任务列表，供您完成以增强您的应用程序：
- en: 'Use different source data:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的源数据：
- en: Different images
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的图片
- en: Different title
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的标题
- en: Different description
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的描述
- en: Different date
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的日期
- en: Load images from the internet
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从互联网加载图片
- en: Load metadata from the internet
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从互联网加载元数据
- en: Extend the scope of supported devices to iPhone as well, thus providing you
    with the opportunity to consider cross-platform design
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将支持设备的范围扩展到iPhone，从而为您提供考虑跨平台设计的机遇
- en: Make the image fullscreen without any extra information
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无额外信息使图片全屏
- en: 'Fullscreen tap for more info: A single tap while in fullscreen will show the
    photo’s title'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全屏点击获取更多信息：在全屏模式下单次点击将显示照片的标题
- en: 'Collections: Different sets of images'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收藏夹：不同的图片集
- en: A side panel, which displays all the collection names, hidden in portrait mode,
    activated using a button; always visible in landscape mode
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一侧面板，显示所有收藏夹名称，在竖屏模式下隐藏，通过按钮激活；在横屏模式下始终可见
- en: 'Delete and rename: Allows the user to delete images from the gallery and rename
    them'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除和重命名：允许用户从相册中删除图片并重命名它们
- en: 'Sharing: The ability to share an image'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享：分享图片的能力
- en: 'Different display modes: List and grid view'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的显示模式：列表和网格视图
- en: We will summarize what we have covered in this chapter, but first, we will look
    at the code for implementing a few of the extra tasks.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将总结本章所涵盖的内容，但首先，我们将查看实现一些额外任务的代码。
- en: Fullscreen mode
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全屏模式
- en: 'In order to add fullscreen mode to the `EnhancedView`, we will add a new `@State`
    variable called `isFullScreen`. We will use this variable to toggle between fullscreen
    mode and regular mode. Additionally, we will need to add `onTapGesture` to the
    image so that when the image is tapped, it toggles fullscreen mode. Here is the
    modified code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将全屏模式添加到`EnhancedView`，我们将添加一个新的`@State`变量，称为`isFullScreen`。我们将使用此变量在全屏模式和常规模式之间切换。此外，我们还需要向图片添加`onTapGesture`，以便当图片被点击时，它会切换全屏模式。以下是修改后的代码：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s see what this modified code does:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个修改后的代码做了什么：
- en: Adds a new `@State` variable, `isFullScreen`, to keep track of whether the view
    is in fullscreen mode or not.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个新的`@State`变量`isFullScreen`，用于跟踪视图是否处于全屏模式。
- en: Adds a new condition at the beginning of the `Group` that, if `isFullScreen`
    is `true`, shows the image in fullscreen mode. In this condition, we use `.edgesIgnoringSafeArea(.all)`
    to ensure the image takes up the entire screen, and `.onTapGesture` to toggle
    `isFullScreen` when the image is tapped.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Group`的开始处添加一个新的条件，如果`isFullScreen`为`true`，则显示全屏模式的图片。在这个条件下，我们使用`.edgesIgnoringSafeArea(.all)`确保图片占据整个屏幕，并使用`.onTapGesture`在图片被点击时切换`isFullScreen`。
- en: Modifies the existing `Image` views in both landscape and portrait mode by adding
    `.onTapGesture` to toggle `isFullScreen` when the image is tapped.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加`.onTapGesture`在横屏和竖屏模式下修改现有的`Image`视图，当图片被点击时切换`isFullScreen`。
- en: This results in the image taking up the full screen when tapped and returning
    to its original size when tapped again.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致图片在被点击时占据整个屏幕，再次点击时恢复到原始大小。
- en: Collections
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收藏夹
- en: 'To add collections (albums) and a side panel to display the names of these
    collections, we will make several changes to the code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加集合（相册）并显示这些集合名称的侧边栏，我们需要对代码进行几处修改：
- en: Create a data structure to represent a collection of images.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数据结构来表示图片集合。
- en: Modify `HighlightView` to display a list of collections in a side panel when
    in landscape mode.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `HighlightView` 以在横幅模式下在侧边栏中显示集合列表。
- en: Show the images of the selected collection.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示所选集合的图片。
- en: 'This is how you can do it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以这样做的方法：
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s explain the changes:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下这些更改：
- en: We added a struct called `ImageCollection` that represents a collection of images
    with a name.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加了一个名为 `ImageCollection` 的结构体，它代表一个带有名称的图片集合。
- en: We updated the `collections` property to be an array of `ImageCollections`.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们更新了 `collections` 属性，使其成为一个 `ImageCollections` 数组的数组。
- en: We removed the old `images` array as it’s now part of the collections.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们移除了旧的 `images` 数组，因为它现在已经是集合的一部分了。
- en: We used `GeometryReader` to determine whether the view is in horizontal or vertical
    mode. In horizontal mode, a side panel is displayed with a list of collection
    names.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `GeometryReader` 来确定视图是在水平模式还是垂直模式。在水平模式下，显示一个包含集合名称列表的侧边栏。
- en: In horizontal mode, clicking on a collection name in the side panel updates
    the `selectedCollection` state variable, which in turn updates the images displayed
    to the right of the side panel.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在水平模式下，点击侧边栏中的集合名称会更新 `selectedCollection` 状态变量，进而更新侧边栏右侧显示的图片。
- en: In vertical mode, only the images of the selected collection are displayed.
    By default, the first collection is selected.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在垂直模式下，仅显示所选集合的图片。默认情况下，第一个集合被选中。
- en: This code demonstrates how you can create an adaptive layout that shows a side
    panel in horizontal mode and adjusts its content based on the selected collection.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码演示了如何创建一个自适应布局，在水平模式下显示侧边栏，并根据所选集合调整其内容。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the design of our `EnhancedView` using wireframes.
    These wireframes helped us break down the views into their components. We then
    implemented the SwiftUI components to match the design from the wireframe. Though
    the components were the same for the portrait and landscape orientation, we configured
    their positions and sizes accordingly. It is very important to make sure each
    orientation that is supported is best utilized in line with industry standards.
    We also updated the `HighlightView` to pass in data to the `EnhancedView`. This
    data was used to display content in components added in `EnhancedView`. Then,
    we covered extra tasks for you to undertake; feel free to look over this chapter
    again before proceeding. We have now completed our second application, which is
    ready for you to modify and use as you see fit.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用线框图设计了我们的 `EnhancedView`。这些线框图帮助我们分解视图为它们的组件。然后，我们实现了 SwiftUI 组件以匹配线框图中的设计。尽管这些组件在纵向和横向方向上相同，但我们相应地配置了它们的定位和大小。确保每个受支持的定位都符合行业标准，这一点非常重要。我们还更新了
    `HighlightView` 以将数据传递给 `EnhancedView`。这些数据用于在 `EnhancedView` 中添加的组件中显示内容。然后，我们介绍了额外的任务供你执行；在继续之前，请随意再次查看本章。我们现在已经完成了第二个应用程序，它现在可供你修改和使用。
- en: In our next chapter, we will start our next application, the App Store for Mac.
    We will naturally look at the design and break it down to help us understand and
    implement the application for our next platform.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始我们的下一个应用程序，即 Mac 的 App Store。我们将自然地研究其设计，并将其分解以帮助我们理解和实现适用于我们下一个平台的应用程序。
