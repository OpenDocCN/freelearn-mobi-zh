- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: iPad Project – Photo Gallery Enhanced View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will work on implementing enhanced view and page navigation
    functionalities in our photo gallery project. In the previous chapter, we looked
    at the design of the photo gallery and how it works uniquely due to it being developed
    for a large device. Then, we broke it down into two views and a fullscreen mode.
    Afterward, we implemented the first view, which was the highlight view. To do
    this, we figured out the components required. We then implemented all the components
    using SwiftUI. At the end of the previous chapter, we only had a fancy wireframe
    for the highlight view and no connection to another view. Now, we will create
    the enhanced view and implement all the functionality to provide navigation between
    the views and send image metadata between the highlight and enhanced views.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will be split into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EnhancedView` Design Overview'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating `HighlightView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing `EnhancedView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have created a fully functional photo gallery
    that leverages the iPad’s immense screen real estate, which is yours to be modified,
    tweaked, and used as you see fit. I will give you exercises when we reach the
    end of the chapter to implement more advanced functionality into the photo gallery.
    This will transition nicely into our next project, the Mac App Store.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to download Xcode version 14 or above from Apple’s
    App Store.
  prefs: []
  type: TYPE_NORMAL
- en: To install Xcode just search for Xcode in the App Store, then select and download
    the latest version. Open Xcode and follow any additional installation instructions.
    Once Xcode has opened and launched, you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Version 14 of Xcode has the following features/requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Includes SDKs for iOS 16, iPadOS 16, macOS 12.3, tvOS 16, and watchOS 9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-device debugging in iOS 11 or later, tvOS 11 or later, and watchOS
    4 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a Mac running macOS Monterey 12.5 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For further information regarding technical details, please refer to [*Chapter
    1*](B18783_01.xhtml#_idTextAnchor014).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects/tree/main/Code/Chapter%205%20-%20iPad%20Project%20-%20Photo%20Gallery%20Enhanced%20View)'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the `EnhancedView`. We will break it down
    into components that we can implement.
  prefs: []
  type: TYPE_NORMAL
- en: EnhancedView design overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will implement the `EnhancedView`. If you recall, in the
    previous chapter, we discussed the design of the `EnhancedView`. The following
    figures show the portrait and landscape modes of the `EnhancedView` as a reminder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – EnhancedView wireframe preview in portrait mode](img/Figure_5.01_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – EnhancedView wireframe preview in portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – EnhancedView wireframe preview in landscape mode](img/Figure_5.02_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – EnhancedView wireframe preview in landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: Before we code our application, we will break down the `EnhancedView` into the
    elements that comprise it. As a little task, see whether you can figure out what
    they are. Don’t worry if you don’t know the exact UI component names; we will
    look at the components in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The components are the same for portrait and landscape orientation.
  prefs: []
  type: TYPE_NORMAL
- en: The Text component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Text` component is one of the simplest components offered by SwiftUI.
    It allows you to display a string of characters/numbers, which is very useful
    for headings and providing information. We will use it three times for the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Image title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figures show `Text` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Image Title text component](img/Figure_5.03_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Image Title text component
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Image date text component](img/Figure_5.04_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Image date text component
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Image description text component](img/Figure_5.05_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Image description text component
  prefs: []
  type: TYPE_NORMAL
- en: The Image component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Image` component is one of the core components offered by SwiftUI. It
    allows you to display an image, which can be used to provide a visual representation
    or to a body of text. We will use it to show a bigger version of the image that
    was selected from the `HighlightView`. The following figure shows the image in
    `EnhancedView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Image component](img/Figure_5.06_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Image component
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create `EnhancedView` and implement it using the
    components we discussed using SwiftUI in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding EnhancedView Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will add the previously discussed components to create
    our `EnhancedView`. However, we first need to create the `EnhancedView` file.
    Doing so is simple; follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a new SwiftUI View for the results page. Right-click the
    gallery folder inside of your **Project Navigator** pane and select **New File...**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 5.7 – Select New File\uFEFF...](img/Figure_5.07_B18783.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Select New File...
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will select the type of file we want to add, which is a **SwiftUI
    View** (selecting this provides a SwiftUI template, which saves us the time and
    effort of retyping the SwiftUI file structure every time) in the **User** **Interface**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.8 – SwiftUI View selection](img/Figure_5.08_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – SwiftUI View selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must rename our `EnhancedView` and press **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Naming our view](img/Figure_5.09_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Naming our view
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked at the wireframes and the components that compose them.
    Finally, we created our `EnhancedView` file.
  prefs: []
  type: TYPE_NORMAL
- en: Updating HighlightView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing I will do is update the code to align with my coding standards;
    feel free to do the same. Now, we will add five state variables. One will be used
    to track whether an image has been clicked, and the other four will be used to
    pass data from the `HighlightView` to the `EnhancedView`. Add the code after the
    adaptive columns like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, update the body to match the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We just added a lot of code, so let’s unpack it all:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NavigationView {`: We implement a navigation system that will allow us to
    go to the `EnhancedView` and back. Using this code for the `NavigationView` alone
    will result in a split system, thus at the end we add the proceeding code to remove
    the split view mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navigationViewStyle( StackNavigationViewStyle( ) )`: Coupled with the new
    `NavigationView`, we wrap each image around a `NavigationLink`, which allows it
    to be clickable so we can navigate to another view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NavigationLink( destination: EnhancedView( imageFile: $imageFile, imageName:
    $imageName, imageDate: $imageDate, imageDescription: $imageDescription ), isActive:
    $isClicked, label`: Within the `NavigationLink`, we have several parameters. Let’s
    break down the purpose of each one:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destination: EnhancedView(`: Sets the view to navigate to upon clicking the
    image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageFile: $imageFile`: Passes the `imageFile` state variable that was created
    previously to the `EnhancedView`. This variable is the path/filename of the image.
    This will be stored as a string.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageName: $imageName`: Passes the `imageName` state variable to the `EnhancedView`.
    This variable is the name/title of the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageDate: $imageDate`: Passes the `imageDate` state variable that was created
    previously to the `EnhancedView`. This variable is the date of the image. This
    could be the creation date, edit date, or some other relevant date.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imageDescription: $imageDescription`: Passes the `imageDescription` state
    variable to the `EnhancedView`. This variable is the description of the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isActive: $isClicked`: Tracks whether the image has been clicked. If so, it
    will navigate to the `EnhancedView`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: Although we are not using any form of text for the button, the image
    will be used as a label, which will act as the clickable label/image for navigation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to add clickable functionality to the image allowing the user
    to navigate from the `HighlightView` to the `EnhancedView`. Update the image code
    within the `NavigationLink` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have added an `onTapGesture` function. The purpose of this is to assign the
    metadata for the image to the `@State` variables created earlier. All the metadata
    variables are hardcoded, except `imageFile`, which uses an array. Feel free to
    extend the current array to become a multidimensional data container to store
    unique metadata for each image. Finally, we set `isClicked` to `true`; this tells
    the view to navigate to the designated view on the `NavigationLink`, which is
    the `EnhancedView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these changes will result in the following code for the `HighlightView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That was a lot to unpack! Feel free to take another look at this section before
    moving on. Remember, you have access to the GitHub repository for online access
    for easy copy and paste: [https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects](https://github.com/PacktPublishing/Elevate-SwiftUI-Skills-by-Building-Projects).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing EnhancedView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to implement code to handle the rotation functionality. Add
    the following code above the `EnhancedView` struct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code we added allows us to render the content again when rotating
    the screen. This will be used shortly when detecting the device’s orientation.
    Now, we can add the `@Binding` variables at the start of our `EnhancedView` struct,
    which allows us to pass in metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add two variables, the first detecting the device’s orientation
    and the second detecting the device screen size in pixels. The former will be
    used to determine the correct layout, and the latter will be used when sizing
    components. Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body, we will create a group, which will contain two layouts, one for
    each orientation: portrait and landscape. Add the following code, and we will
    discuss everything that is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s run through the code we just added, bit by bit. First, we check which
    orientation the device is in. By default, we check whether it’s landscape. If
    not, it must be portrait, and we handle the component sizes and positioning accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create a lazy horizontal stack for storing the components in the landscape
    orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we create two vertical stacks. The frame width is set to half of the
    screen’s width. This effectively creates an equal splitscreen design. Feel free
    to modify the multiplier if you would like a custom split. Inside the first vertical
    stack, we put the image, which is set to `resizable` and `scaledToFit`. In the
    second vertical stack, we put the text metadata in simple `Text` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `else` statement, we simply use `LazyVStack` as it pertains to the portrait
    orientation. The only other change made is to the frame size: it is not linked
    to the screen’s width but its height. The rest remains the same.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we add a detector to our `Group` component, which simply detects when
    the device has been rotated and updates the orientation variable, which is used
    to detect which mode to draw:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing that remains is updating the preview provider at the bottom
    of the `EnhancedView` file. Update the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code just adds a default set of parameters to be passed through
    for the preview. I have left it blank as I used the simulator for testing, but
    feel free to put in dummy data to ensure you can properly add text using the preview.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we implemented the `EnhancedView` code. In the next section,
    we will take a look at the result. Feel free to modify the layout for landscape
    and portrait to make it unique.
  prefs: []
  type: TYPE_NORMAL
- en: Testing EnhancedView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will finally get to test our application. Launching it
    up will take us to the `HighlightView`; click on any image and it will take you
    to the `EnhancedView`. The portrait mode will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Portrait mode](img/Figure_5.10_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Rotating the application will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Landscape mode](img/Figure_5.11_B18783.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: Now, our application is complete and features a navigational menu for going
    back to the `HighlightView`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you require help with rotating the simulator, please refer to the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Extra tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the application is complete, here is a list of extra tasks for you
    to complete to enhance your application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use different source data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different images
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Different title
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Different description
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Different date
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Load images from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load metadata from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend the scope of supported devices to iPhone as well, thus providing you
    with the opportunity to consider cross-platform design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the image fullscreen without any extra information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fullscreen tap for more info: A single tap while in fullscreen will show the
    photo’s title'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Collections: Different sets of images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A side panel, which displays all the collection names, hidden in portrait mode,
    activated using a button; always visible in landscape mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete and rename: Allows the user to delete images from the gallery and rename
    them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sharing: The ability to share an image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different display modes: List and grid view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will summarize what we have covered in this chapter, but first, we will look
    at the code for implementing a few of the extra tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Fullscreen mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to add fullscreen mode to the `EnhancedView`, we will add a new `@State`
    variable called `isFullScreen`. We will use this variable to toggle between fullscreen
    mode and regular mode. Additionally, we will need to add `onTapGesture` to the
    image so that when the image is tapped, it toggles fullscreen mode. Here is the
    modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see what this modified code does:'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a new `@State` variable, `isFullScreen`, to keep track of whether the view
    is in fullscreen mode or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a new condition at the beginning of the `Group` that, if `isFullScreen`
    is `true`, shows the image in fullscreen mode. In this condition, we use `.edgesIgnoringSafeArea(.all)`
    to ensure the image takes up the entire screen, and `.onTapGesture` to toggle
    `isFullScreen` when the image is tapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifies the existing `Image` views in both landscape and portrait mode by adding
    `.onTapGesture` to toggle `isFullScreen` when the image is tapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This results in the image taking up the full screen when tapped and returning
    to its original size when tapped again.
  prefs: []
  type: TYPE_NORMAL
- en: Collections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add collections (albums) and a side panel to display the names of these
    collections, we will make several changes to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a data structure to represent a collection of images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `HighlightView` to display a list of collections in a side panel when
    in landscape mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show the images of the selected collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is how you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s explain the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: We added a struct called `ImageCollection` that represents a collection of images
    with a name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We updated the `collections` property to be an array of `ImageCollections`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We removed the old `images` array as it’s now part of the collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used `GeometryReader` to determine whether the view is in horizontal or vertical
    mode. In horizontal mode, a side panel is displayed with a list of collection
    names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In horizontal mode, clicking on a collection name in the side panel updates
    the `selectedCollection` state variable, which in turn updates the images displayed
    to the right of the side panel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In vertical mode, only the images of the selected collection are displayed.
    By default, the first collection is selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code demonstrates how you can create an adaptive layout that shows a side
    panel in horizontal mode and adjusts its content based on the selected collection.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the design of our `EnhancedView` using wireframes.
    These wireframes helped us break down the views into their components. We then
    implemented the SwiftUI components to match the design from the wireframe. Though
    the components were the same for the portrait and landscape orientation, we configured
    their positions and sizes accordingly. It is very important to make sure each
    orientation that is supported is best utilized in line with industry standards.
    We also updated the `HighlightView` to pass in data to the `EnhancedView`. This
    data was used to display content in components added in `EnhancedView`. Then,
    we covered extra tasks for you to undertake; feel free to look over this chapter
    again before proceeding. We have now completed our second application, which is
    ready for you to modify and use as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will start our next application, the App Store for Mac.
    We will naturally look at the design and break it down to help us understand and
    implement the application for our next platform.
  prefs: []
  type: TYPE_NORMAL
