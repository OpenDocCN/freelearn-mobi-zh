- en: Chapter 12. Preparing your App for Distribution and Getting it Published
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Joining the iOS Developer Program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing iOS Developer Certificates and Provisioning Profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build your app for iOS using Titanium Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining the Google Android Developer Program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your application's distribution key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and submitting your app to the Android Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final piece of our development puzzle is addressing how we package and distribute
    our Titanium applications to the iTunes store and Android Marketplace in order
    for our potential customers to download and enjoy all our hard work. Each of these
    stores has their own separate processes, certifications, and membership programs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll show you how to set up your system in preparation for
    distribution and how to register for each site, as well as how to package and
    submit your apps to the iTunes and Android Marketplace stores.
  prefs: []
  type: TYPE_NORMAL
- en: Joining the iOS Developer Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to submit applications to the iTunes store, you must first pay to become
    a member of the Apple's iOS Developer Program. Membership is paid, and starts
    from $99 USD (or equivalent), recurring annually. Even if you intend to develop
    and distribute your apps for free, you will still need to be a paid member of
    the iOS Developer Program. It is worth noting up front that only Mac users can
    follow and implement the steps for the iOS recipes since the building and distribution
    of iOS apps is only available to those running the Mac OSX operating system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To register for Apple's iOS program, first open up a web browser and navigate
    to [http://developer.apple.com/programs/register](http://developer.apple.com/programs/register),
    and click on the **Get Started** link. The following page that loads will then
    ask you if you want to create a new Apple ID or use an existing one. Unless you
    have registered for some of Apple's developer services before, you should choose
    the **Create New Profile** link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are on the **Create Profile** page:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide your contact information, including your country of residence. This
    is important since you'll need to provide some evidence of your residence when
    you want to start selling paid applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, provide the information required in Professional Profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, carefully read and agree to the Terms and Conditions set out by Apple
    and confirm that you agree, and are at least 18 years old (or the legal equivalent
    in your country). Click on the **I Agree** button to complete your account creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apple will then send you an e-mail with a confirmation code/link. Clicking on
    this link in your e-mail will open your browser and confirm your e-mail address
    and complete your account setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to see the following page in your browser. It is from
    here that we will register to the Developer Program and pay the $99 USD (or equivalent)
    annual fee.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_01_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Programs & Add-ons** tab in the top left of the page''s menu,
    which will take you to a page showing the list of memberships you are currently
    subscribed to. Presuming you have a new account, then a list of three developer
    programs should appear, each with a **Join Today** button on the right. To continue,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the iOS Developer Program's **Join Today** button, which should appear
    at the top of that list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page that loads, click on **Enroll Now**, and continue until you
    get to the step-by-step wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **I'm registered as a developer with Apple and would like to enroll in
    a paid Apple Developer Program**. from the list on the right and press **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here you need to provide all of the information asked of you in order to
    complete your account setup. You should choose whether to register as a business
    or individual. Be aware that whichever method of registration you should choose
    you need to ensure you have all of the relevant documentation. You will be asked
    to submit this documentation for verification by Apple and you'll not be able
    to submit paid applications until that documentation is received and approved.
    Some of this information cannot be changed and once you have entered it and completed
    the application it is, for all intents and purposes, set in stone!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, agree to the final set of terms and conditions and then make your payment
    online. You will require a credit card or debit card to make this purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be able to log in to your new Apple Developer account by navigating
    your browser to [http://developer.apple.com/devcenter/ios](http://developer.apple.com/devcenter/ios).
    Once logged in, you should get some new menu options on your account's home page,
    including **Provisioning** and **iTunes Connect**. Any information you are missing
    for your account can be found under the iTunes Connect option, under the **Contracts,
    Tax and Banking** section. It is likely that you may need to upload some documentation
    and agree to new terms and conditions from time to time within this section of
    the website.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing iOS Developer Certificates and Provisioning Profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two types of certificates required to build your applications, both
    for debugging on a device and for iTunes store distribution. The first is your
    Development Certificate. This certificate is installed on your Mac within the
    `KeyChain` and is used for every single application you will develop. It identifies
    you, the developer, when you are distributing an app.
  prefs: []
  type: TYPE_NORMAL
- en: The second type is the application's Provisioning Profile. This profile certificate
    is both application specific and release specific. This means you'll need to create
    a separate profile for each state of the application you wish to release (most
    commonly being Development and Distribution).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go through the process of creating and installing your
    Developer Certificate, and then creating and using an application-specific Provisioning
    Profile in Titanium Studio.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now start off with the steps required for installing iOS Developer Certificates
    and Provisioning Profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Set up your iOS Developer Certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your Apple Developer account if you have not done so already, at [http://developer.apple.com/ios](http://developer.apple.com/ios),
    and click on the **iOS Provisioning Portal** link. The page that loads will have
    a number of options on the left-hand menu, click on the **Certificates** option.
    A page will load with a series of steps entitled **How to create a Development
    Certificate**. You will need to follow these steps exactly as described, and when
    you have gone through them from start to finish you should have a Certificate
    Signing Request (CSR) file saved on your Mac. For this recipe, we'll make the
    assumption that you have followed these steps closely and have saved a CSR to
    your desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose** button at the bottom of the screen to select the CSR
    file from your computer and upload it to the web page. Once it has finished uploading,
    select the **Submit** button in the bottom right corner of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the screen reloads, you should now see a certificate appear in the grid,
    with the name you gave it when generated, and a status of **Pending Issuance**.
    If you own the iOS account, you can simply wait 20-30 seconds and refresh the
    page to have the status change to **Issued** and a **Download** action appear
    to the right of the grid. If the account you are using belongs to another party,
    you will need to wait for them to confirm this action before you receive an issued
    certificate. Download the certificate now, and double-click the resulting saved
    file when it has completed downloading. It will then automatically open in `KeyChain`
    Access and show you that it's been installed. If you have a message at the bottom
    of the page about the WWDR certificate needing to be installed, you may also choose
    to download and run that at this point.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Setting up your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have an iPhone or iPod touch and wish to test with it, then you first
    need to register that device against your iTunes account. Click on the **Devices**
    menu link on the left-hand side of the page and then **Add Device**. The screen
    that appears will ask you for information about who owns the device, and more
    specifically, what that device's unique identifier is. You can find this identifier
    by plugging in your device to your Mac and opening iTunes. It will appear under
    **My iPhone/iPod** and then clicking on the **Serial Number** label that appears.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An example of the unique identifier is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968_12_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Creating your Application Provisioning profile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that your Developer Certificate is set up, it's time to create the provisioning
    profiles for an application we have built. For this example, we're going to use
    the details for the **LoanCalc** app we built in [*Chapter 1*](ch01.html "Chapter 1. Building
    Apps using Native UI Components"). However, you could use any application you
    have already created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **App IDs** link from the left-hand menu, and when the screen loads,
    select the **New App ID** button.
  prefs: []
  type: TYPE_NORMAL
- en: Give your app a description and leave the Bundle Seed ID drop down list set
    as **Generate New**.
  prefs: []
  type: TYPE_NORMAL
- en: Enter in the Bundle Identifier. This is the all-important identifier that you
    give your application upon its creation in Titanium Studio. In this example, our
    bundle identifier is `com.packtpub.loancalc`.
  prefs: []
  type: TYPE_NORMAL
- en: Press **Submit** to complete the process and generate your App ID.
  prefs: []
  type: TYPE_NORMAL
- en: Now click on **Provisioning** and select **New Profile** after the screen loads.
    It should have the **Development** tab activated.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a name for your profile. We'll keep it simple and call this one **LoanCalc
    Development Profile**. You should now be able to check your certificate checkbox,
    and choose the `LoanCalc` app identifier from the drop down list, as well as the
    device you wish to use for this Development profile. Press **Submit** when you
    have completed filling in the form.
  prefs: []
  type: TYPE_NORMAL
- en: Your new profile should now appear in the list of profiles under the **Development**
    tab. Wait for 20-30 seconds and refresh the page, and its status should change
    from **Pending** to **Download**. Download the certificate to a location on your
    computer such as the Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat the previous steps, but instead of choosing the **Development** tab
    options, choose the **Distribution** tab instead. You''ll also have an additional
    option when creating the certificate for **Distribution: App Store or Ad Hoc**.
    If you want to distribute your app on the iTunes store, ensure you check the first
    radio button option.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're not the account owner, but have been given membership status to someone
    else's iTunes account (e.g. if you are the employee of a larger company), then
    you need to ensure that you've been given admin access in order to set up your
    certificates and profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Build your app for iOS using Titanium Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue the process started in the two recipes prior
    to this one and build our application for both development and distribution to
    the iTunes store.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, if all else fails, you can always build your application manually
    in XCode by navigating to the `build/iphone` folder of your project and opening
    the XCode project file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building your application for development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: i. Open your project in Titanium Studio; we are using the `LoanCalc` app from
    [Chapter 1](ch01.html "Chapter 1. Building Apps using Native UI Components") as
    an example, however, you may use any project you wish. Ensure that the Application
    ID in Titanium Studio (on the **Edit** tab) matches the ID you used when creating
    your provisioning profiles. In our case, this ID is `com.packtpub.loancalc`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ii. Switch across to the **Test & Package** tab, and choose **Run on Device**.
    Titanium Studio should automatically have the iPhone option highlighted. If it
    doesn't, then you either aren't on a Mac (required) or perhaps don't have the
    necessary XCode tools installed. You can download XCode from [http://developer.apple.com/xcode](http://developer.apple.com/xcode).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'iii. On the file selection icon next to the **Upload Provisioning Profile**
    text box, select the development profile you created for `LoanCalc`. Presuming
    you installed your WWDR Certificate and Development Certificate properly as per
    the previous recipe, you should now see a screen similar to the one shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968_12_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: iv. Press the **Finish** button to have Titanium Studio kick off the build process.
    During this process your application will be built and added to your list of apps
    in the iTunes library. You will need to sync your iPhone or iPod Touch in order
    to get your app running on your device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Building your applications for distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'i. First, we need to create your new application in iTunes Connect, on the
    Apple Developer website. Navigate to the iTunes Connect section on the Apple Developer
    website in your browser and click **Manage Applications**. The next screen that
    loads will list all of your current apps (if you have created any). To create
    a new one, click **Add New App** in the top left corner. Add in the information
    requested, including the app name (**Packt LoanCalc** in our example) and select
    the `LoanCalc` app from the product identifier list. The SKU can be any code you
    wish, e.g. packtpub001\. Fill in the information on the next two screens with
    a description, keywords, screenshots, and data about your application. When finished,
    you should be forwarded to a screen that looks like the one shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968_12_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: ii. Now, if you're ready to upload, press the **View Details** button in the
    bottom left, and on the next page that loads, press the **Ready To Upload Binary**
    button that appears in the top right of the screen. Apple will ask you a couple
    of security questions. Answer these and your App status will changed from **Prepare
    for Upload** to **Ready for Upload**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: iii. Switch back to Titanium`Studio, make sure your project is selected in the
    Project explorer page, and then select the **Distribution** button followed by
    the **Distribute - App Store** option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'iv. You should now be faced with a similar screen to the one you used to package
    your app for development testing. Enter in a distribution location (any will do,
    we have chosen the `Downloads` folder for this example), and choose your Distribution
    profile that you saved from the previous recipe. Your **Distribute** screen in
    Titanium Studio should now look something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968_12_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: v. Hit the **Finish** button to start the build process. If you get an error
    about a missing file in the `Users/[your username]/Library/MobileDevice/Provisioning
    Profiles` directory, then simply copy the Distribution profile saved on your computer
    to this directory and rename it to the name of the missing file in the error dialog.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'vi. When this process is complete, XCode should load and the Organizer window
    should appear on screen with your application archived and ready to be submitted
    to the iTunes store, as seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3968_12_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: vii. Hit **Submit** on this screen and follow the prompts. If everything has
    been done correctly (and according to Apple's rules), your app should be uploaded
    to the iTunes server and you should receive email confirmation of it being received
    within a few minutes!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can check on the progress of your submission at any time via the iTunes
    Connect section of the developer program website. Approval usually takes between
    1-2 weeks. However, this tends to fluctuate depending on the number of submissions
    and whether your app is rejected or requires changes before approval will be granted.
    Apple will send you emails at each stage of the submission cycle, including when
    you first submit the app, when they start reviewing it, and when they approve
    or reject it.
  prefs: []
  type: TYPE_NORMAL
- en: Joining the Google Android Developer Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to submit applications to the Android Marketplace, you must first register
    a Google account, and then register for both a Google Checkout account and Android
    Developer account. All of these accounts utilize the same username and password
    combination and the process is quite straightforward. Membership is paid, and
    starts from $25 USD (or equivalent), and is a one-time payment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To register, first open up a web browser and navigate to [http://market.android.com/publish](http://market.android.com/publish).
    You'll be asked to log in to your Google Account (as seen in the following screenshot).
    If you don't have one, then this is the stage at which you need to create an account.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you've completed the sign in or registration process, you'll then be asked
    to provide your Developer/Publisher details. After that, you'll be required to
    pay the US $25 registration fee. That's it—simple and straightforward! You can
    now start to create and upload applications to the Android Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google may send you an e-mail a few weeks after registering, asking for identification
    for the account, usually in the form of a passport or driver's licence. You can
    e-mail them this information back within the allotted timeframe and all will be
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your application's distribution key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build applications made for the Android Marketplace, you need to
    create a distribution key on your local computer. This key is used to digitally
    sign your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the Terminal if you use Mac or Linux, or alternatively the command prompt
    if you''re a Windows user. Change the current directory to the following using
    the `cd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the key, we need to use the Java **keytool** located in this directory.
    In the command prompt/terminal, type in the following, while replacing `my-release-key.keystore`
    and `alias_name` with the key and alias of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, our `LoanCalc` application key command will look something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Press *Enter* and execute the command and you'll be asked a series of questions.
    You need to provide a password for the keystore - it would be wise to write it
    down as you will need it to package your app later. We'll use the password `packtpub`.
    When you are prompted for the secondary key password, simply press *Enter* to
    use the same one.
  prefs: []
  type: TYPE_NORMAL
- en: Now your key will be exported and saved to the directory you were currently
    in. In our case, this is the `tools` directory under our Android SDK folder. You
    will need to remember the file location in order to build your Android app using
    Titanium Studio in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Building and submitting your app to the Android Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue the process started in the two previous recipes
    and build our application for distribution to the Android Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your project in Titanium Studio. We are using the `LoanCalc` app from
    [Chapter 1](ch01.html "Chapter 1. Building Apps using Native UI Components") as
    an example, however, you may use any project you wish. Make sure your project
    is selected in the Project explorer page, and then select the **Distribution**
    button followed by the **Distribute - Android** option, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to enter in the distribution location (where you want the packaged
    APK file saved to) and the location of the keystore file you created in the previous
    recipe, along with the password and alias you provided earlier. After you enter
    in that information it should look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If all of the information is correct, click **Finish**. After a few minutes
    the APK file will be written out to the distribution location you provided. Go
    back to the Android Marketplace website, and on the home screen, click **Add New
    Application**. Select the **Upload** button and choose your saved APK (`LoanCalc.apk`
    in our case) and upload it to the server. If everything was successful, you should
    see a screen similar to the one shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3968_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All that is left to do now is fill in the remaining information, including a
    description and title for your app, plus some screenshots. You will also be asked
    to select pricing information and agree to Google's terms and conditions. Once
    that is done, all that is left to do is press **Submit**. Within a few minutes,
    your application should start to appear in the Android Marketplace! Unlike Apple,
    there is no approval process necessary for apps submitted for Android.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be able to build and submit applications to both the Apple and
    Android Marketplaces.
  prefs: []
  type: TYPE_NORMAL
