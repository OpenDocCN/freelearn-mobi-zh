- en: Cloud Solutions for App Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While an MVP could be something as minimal as a landing page, announcing your
    app, or a live mock up version of your app, there comes a time that your app should
    be a little more than that, whether it is to prove your next hypotheses or to
    see the actual thing in its most basic shape in action. It's about time to create
    a **Proof of Concept** (**PoC**).
  prefs: []
  type: TYPE_NORMAL
- en: Standalone apps are rare these days. Most apps have functionality to share content
    on Twitter or Facebook, have leaderboards (if it is a game), let the user post
    pictures or video, have a chat or otherwise communicate with each other, and so
    on. For this your app needs to have a backend.
  prefs: []
  type: TYPE_NORMAL
- en: You can of course create your own API or use the API of the many solutions that
    do exist for this purpose, the so-called **Mobile backend as a Service** (**MBaaS**).
    These solutions do work like any other **Software as a Service** (**SaaS**) but
    are specifically intended for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will have a look on MBaaS solutions and will see what it
    takes to build an Android PoC using Firebase, a popular cloud-based backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in the chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out if we need to create a backend on our own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage cloud solutions for app experiments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine what services are available as MBaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examine an Android PoC app using Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you need to create a backend yourself?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It totally depends on your app's needs, but for most apps there is no reason
    at all to create a backend yourself, at least not for your **Minimum Viable Product**
    (**MVP**). There are plenty of readymade backend solutions available.
  prefs: []
  type: TYPE_NORMAL
- en: Most solutions support push notifications, data storage, social sign up and
    login (sign up or login using your Facebook or Twitter credentials for example)
    and data synchronization functionality, including offline support for your app.
  prefs: []
  type: TYPE_NORMAL
- en: If you have to program all these things for yourself, it could take up a lot
    of time and it will probably take even more time to make it error free.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all solutions come as freemium service and most of the time the free
    options are good enough to build your MVP. Some of them, such as Firebase, come
    with real-time support, making it a great base for a chat app. Later, we will
    build a PoC with Firebase, but first let's see what solutions are currently available.
  prefs: []
  type: TYPE_NORMAL
- en: 'What a MBaaS can do for you is illustrated here. Most solutions offer a web-based
    **Content Management System** (**CMS**), an **Application Programming Interface**
    (**API**) and a **Software Development Kit** (**SDK**). Such a solution will take
    care of storing both remote and local data. In addition, it has support for the
    synchronization of data (it sends local persisting data to a remote location and
    vice versa) and for distributing push notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/142bd4e2-c6cc-4025-b86a-4e04bf332b4e.png)'
  prefs: []
  type: TYPE_IMG
- en: To be more precise, an API is a way for apps to communicate with the data stored
    at the remote server (cloud solution). Data can often be retrieved through a **Representational
    State Transfer** (**REST**) interface over http(s). The SDK is a piece of software
    that you can add to your own app. It will make the usage of the API more convenient.
    Often the API will take care of things such as obtaining data and data synchronization.
    The integration of the service will be simplified by using the API, but you can
    still use the REST interface, for example, to show the same data on the website.
  prefs: []
  type: TYPE_NORMAL
- en: Leverage cloud solutions for app experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MBaaS solutions are great for getting things going real quickly. Most solutions
    come with features that almost any app has in common, such as registration, login,
    retrieving, saving, and sharing data. Another big advantage of using an MBaaS
    is its scalability. Right now we are aiming for the development of an MVP and
    technical scaling issues are luxury problems. However, it is good to know upfront
    that these problems are easier to resolve using these kinds of third-party solutions.
    Your app has scalability but does not yet need to scale. If it needs to be scaled
    up, then you just switch to a bigger plan (from a technical perspective). You
    will read more about scaling strategies in [Chapter 15](d9145149-0f4e-47b6-bc9d-ff46e5e63304.xhtml),
    *Growing Traction and Improving Retention*.
  prefs: []
  type: TYPE_NORMAL
- en: Things to consider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some other things to look at, such as pricing. You can start with
    a free plan, but if you need to scale up your solution, it is important to know
    how fast the price will increase. Is the service still reasonably priced if you
    need to deal with high volumes. When that happens money may no longer be a big
    issue as your business already has grown significantly. It could also be that
    your strategy is to use the service only for a first MVP. It is all fine as long
    as you have a strategy and you keep these things in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to think about is the fact that your user data resides on the
    server of a third party such as Facebook or Google. You should ask yourself if
    you should trust third parties to build a solution. Of course a lot depends on
    the nature of the solution. Anyhow there are things that you would like to know
    for sure such as "Is your data safe and what is going to happen if the service
    provider decides to discontinue its services?" Parse server and Firebase have
    some impressive names in their testimonials, so we can probably assume that in
    most cases your data is safe indeed.
  prefs: []
  type: TYPE_NORMAL
- en: The story of Parse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second one is more relevant than you might think. A while ago Parse announced
    they were going to discontinue their services. That announcement made a lot of
    (independent) developers pretty angry. These developers were totally dependent
    on Parse services. The discontinuation of Parse made them fearful because they
    thought they had no other choice but to end their business. Developers had high
    expectations from the services, also because Parse had been acquired by Facebook.
    It seemed to be very solid. Apparently, that acquisition perhaps also led to that
    same announcement. For Facebook, the team was probably more interesting than the
    service itself.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, this fairy tale has a happy end. Parse came with a nice migration
    plan, which nowadays is known as the open source solution Parse server. You can
    host it yourself but if you do not want to do that then there is no problem either.
    A lot of other parties jumped right on it and started to offer Parse server hosting.
    The server itself does not come with all the features that were available in Parse
    but parties such as Back4App did a great job adding them all back in.
  prefs: []
  type: TYPE_NORMAL
- en: In short, this story proves that you should not completely depend on services
    like these. Partners are important but when they become irreplaceable the future
    of your startup could possibly be uncertain. And while this story is about Parse,
    the same thing could happen to Firebase, for example. That is not very likely
    but Google has shut down some services before, so it also is not completely impossible.
  prefs: []
  type: TYPE_NORMAL
- en: Strategic considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to make a decision whether to use a cloud-based service or not and
    if you need to make a choice from the various available services, then there are
    some strategic considerations that could be important. Using such a service comes
    with both advantages and disadvantages. A number of them are listed next.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: The service shortens the development time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out of the box the service often comes with support for registration and login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most services can easily be scaled up or down, depending on the amount of traffic
    that you are expecting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost all services support push notifications and media storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: A ready-to-use service is often more expensive. Pricing could be an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The privacy of your (user) data could be an issue. You have to trust that the
    company, that is offering the service, is taking the right precautions to ensure
    the security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is always the risk that the service will be discontinued.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lock-in risk. It could be difficult to migrate to another service
    when all your data is residing with a particular provider.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What services are available as MBaaS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a couple of services available that could act as a backend for your
    app. Given the strategic considerations from the previous paragraph and the specific
    needs of your app, one service might be more suitable than another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some offer real-time data, making it perfect for a chat application. Others
    are more about persisting data or come with building blocks, such as QuickBlox,
    allowing you to create your app even faster. Some are pretty dedicated solutions,
    pretty easy and fast to use but not very flexible. Others are very flexible but
    come with a steeper learning curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69fdd9d9-4824-4462-8a81-494055beaf2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Most solutions store data in a document-related database, such as MongoDB.
    If you need to have a relational type of database for your app, then choosing
    Azure with SQL Server will probably be the best thing to do. Choose the service
    that matches most closely with your app needs and your current development skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Back4App**: The service offers hosted parse servers. The service has support
    for push notifications, data, and file storage and it supports Cloud code. Cloud
    code is code, often queries, that run on the Parse server. You can use the common
    Android and iOS Parse SDKs to communicate with the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SashiDo**: Just like Back4App, this is a service that offers a hosted parse
    server plus a couple of extra things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Firebase**: It is a scalable real-time backend for web, Android, and iOS.
    It is perfect for chat and collaboration tools, but is also suitable for other
    needs. Storing media such as images or video is a bit more complicated when compared
    with Parse server or Azure, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BaasBox**: This is an open source backend for your mobile app. It has SDKs
    for iOS, Android, and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QuickBlox**: This service provides building blocks for a backend infrastructure.
    It offers data storage, push notifications, text and video chat, and many other
    features. It allows developers to create apps quickly, but is a bit pricy. For
    this reason, it is most suitable for a PoC and less for a real app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: Microsoft Azure comes with support for push notifications and other
    mobile services. It has become one of Microsoft''s core businesses, so you can
    see Azure as one of the most trustworthy MBaaS solutions. The platform will stay
    for sure. It is also true that, compared to other MBaaS, the Azure services can
    sometimes be a little bit confusing. It is less dedicated to MBaaS alone. It can
    simply do way too many things and it can make the service a bit overwhelming if
    you just got started. It is very flexible and because of this it has a relatively
    steep learning curve. For your app needs, you can use table and blob storage (for
    images, documents, and so on), use the mobile services, the API services, or you
    can create your own API using .NET or another language. There are Azure client
    SDKs for Android, iOS, and Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backendless**: Backendless provides an instant mobile Backend as a Service
    and overall application development Platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**remoteStorage**: [remoteStorage](https://remotestorage.io/) offers an open
    protocol for per-user storage. Use a storage account with a provider you trust,
    or set up your own storage server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CloudBoost.io**: This is a complete database service that comes with data
    storage, search, real-time and other stuff.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PubNub**: [PubNub](https://www.pubnub.com/) is a real-time network that enables
    software developers to rapidly build and scale real-time apps by providing the
    cloud infrastructure, connections, and key building.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parse server**: The Parse server is an open source solution that you can
    download and host by yourself. You could also, for example, host it on Heroku
    or on Azure. The server uses a MongoDB database and utilizes Amazon S3 storage
    to store files, such as images, audio or video. The Parse SDKs for Android and
    iOS include all kinds of handy stuff, such as caching data and uploading data
    or files in the background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides strategic considerations, there are also a couple of technical aspects
    to consider. Before you choose a particular service, you should ask yourself the
    following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Does your app require real-time support?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your app handle a lot of media (images, video, and audio)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How trustworthy should the service provider be?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How good are your current skills that are required to use the chosen service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much flexibility do you need and how much time do you have available?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next paragraph, we will examine an Android MVP that is using Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Canvapp - an Android MVP app using Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build an Android MVP app using Firebase. For this particular case, we
    will have an app that allows you to create and share your business model canvas,
    just by using your phone. Anyone can view or edit each other's canvases so you
    can gather feedback easily. If you do not remember what the business model canvas
    looks like, you can have a look at [Chapter 2](4846c191-1deb-4452-90d3-2bac5032aa3a.xhtml),
    *Lean Startup Primer* again.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using a wireframing tool, such as SwordSoft Layout as shown in the
    following example . Let''s say that the app should look more or less like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fff2520-8ed2-4616-ae9d-8bf84e1fc80f.png)'
  prefs: []
  type: TYPE_IMG
- en: The first view displays a list of business model canvases and it has a sliding
    menu. The second view is the one that the user will see when he is creating a
    new canvas or when he chooses a canvas from the list. It displays a number of
    pages, each containing a title, description, and some hint. Users can swipe back
    and forward. It is a very basic app. It has only three views, but that will be
    sufficient to demonstrate how to use Firebase as a backend and we can use it to
    prove that this app concept does make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the sake of simplicity, we will just say, for this example, that you have
    already validated your earliest hypotheses. The hypotheses for this solution are:'
  prefs: []
  type: TYPE_NORMAL
- en: Startup entrepreneurs want to share their canvases to get feedback from other
    entrepreneurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Startup entrepreneurs want to share their canvases using a smartphone or tablet.
    This will allow us to focus on the technical implementation of the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the source for this project at: [https://github.com/mikerworks/packt-lean-saas-canvapp](https://github.com/mikerworks/packt-lean-saas-canvapp).'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up for Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see things in action, you will have to go to [www.firebase.com](http://www.firebase.com)
    and sign up. Once you have done that, you can create your first app. The only
    thing that matters is the endpoint that Firebase will create. You need this endpoint
    to configure your app. In the following example, the endpoint is torrid-head-3108.firebaseIO.com:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18a20cac-a02d-4876-b52e-ec37d0eed9a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, download the Android Firebase example from GitHub ([https://github.com/mikerworks/packt-lean-saas-canvapp](https://github.com/mikerworks/packt-lean-saas-canvapp)),
    so we can go through it and see what it is all about. If you prefer, and if you
    have some time left, you can also build this app from scratch, of course. For
    now, you can download the readymade app, examine it, and modify it as needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e41af29c-a353-4bdb-8cbb-8f96eb5f2be0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the app in Android Studio or another IDE if you prefer. One of the things
    that you need to modify is the Firebase endpoint in the application. Collapse
    the `data` package node within the app and open the `FirebaseRepository` class.
    Within the `FirebaseRepository` class, locate the constructor and adapt the firebase
    reference so that it matches yours:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the app and have added a couple of canvases it looks more or less
    like this. Yeah, it already contains some cool ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8519c38b-8cff-4300-a180-2ab17b183bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: When you run the app and have added a couple of canvases it looks more or less
    like this. Yeah, it already contains some cool ideas. The app will display a list
    of canvas models residing in Firebase. The title and description for each model
    will be shown. Anyone can view or edit it by clicking on a model. This will display
    the edit view, which will contain a swipeable collection of canvas elements. A
    new canvas can be created through the options in the menu.
  prefs: []
  type: TYPE_NORMAL
- en: For this app, we have created a new project in Android Studio and we chose the
    Navigation Drawer to be our first activity. This will give us a nice template
    with a readymade menu. It is here that the List and New canvas options are going
    to appear.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few layout resources in the project (res/layout) that we will describe.
    These layouts are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The list layout**: This displays a list of canvases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The pager layout**: This shows a swipeable series of elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The element layout**: This layout will display a title, description, some
    hints, and edit box for each element of the Business Model Canvas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The row layout**: This renders each row in the list of canvases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The layout files are small and contain just some boilerplate code. It is nothing
    fancy but we need it anyway to create the Android Firebase PoC. You can examine
    them if you want, but for now let's proceed with the parts of the code that are
    most relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To examine the list of dependencies for the app, open the `build.gradle` file
    within the `app` folder. Among other things, you will find the dependencies for
    Firebase and JSON deserialization here, as listed next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Within the `res` folder raw, you will find the `canvas.json` file. The JSON
    data in this file will be parsed using `Gson`. It will act as a template for each
    new canvas. All the user needs to do is to provide a value for each element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JSON object in the file looks like this. It will be processed by the `LocalRepository`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This template implements a particular type of Business Model Canvas. There are
    some variants as well. Ash Maurya, for example, uses a different and, in my opinion,
    more suitable canvas. He calls it the Lean Canvas and it has been described in
    [Chapter 2](4846c191-1deb-4452-90d3-2bac5032aa3a.xhtml), *Lean Startup Primer*.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to modify the template or to create a totally different application,
    derived from this one, for example, for some kind of survey.
  prefs: []
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A canvas typically has a collection of Canvas elements, each representing a
    section of the Business Model Canvas. For the sake of simplicity, these classes
    contain only the most basic information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important models used in the app are the `Canvas` and the `CanvasElement`
    models. Both the `Canvas` and `CanvasElement` classes implement the `Parcelable`
    interface. This will make it easier to pass (complex) objects to each fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CanvasElement` class and the JSON object found in the template file have
    similar fields. Each element of the canvas has an ID, title, description, and
    text for the placeholder. The user input will fill the `value` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The local repository reads the raw JSON file, which contains the template.
    It will convert the data to a `CanvasElementsModel` class, which, in turn, is
    nothing but a wrapper around canvas elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it is time for some Firebase stuff. The `IRemoteRepository` interface has
    been added to the app. This will avoid a vendor lock in. If you ever want to use
    another MBaaS or your own API, then all you need to do is change the implementation
    for the three methods found as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FirebaseRepository` class is the Firebase-specific implementation for
    the `IRemoteRepository` interface. The following code snippet shows you what is
    needed to store and to retrieve canvases. Let''s have a look at the constructor
    first. Here, the reference to a Firebase endpoint is defined. You can modify the
    reference value to match the endpoint of your own Firebase app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `createCanvas` method, a new `Canvas` object will be created. It will
    be prefilled with the information we get from the template file through the `LocalRepository`
    class. We change the reference to a child node canvas and a canvas node is being
    added as a child node of that node. The `push` method obtains a unique identifier
    for the canvas. We will store that ID, created by Firebase, with the `Canvas`
    object. Finally, this method returns the new `Canvas` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: One of the cool things about Firebase is that developers do not need to worry
    too much about being online or offline. In case the device is offline, this method
    will succeed anyway. Firebase will take care of persisting the new `Canvas` object
    locally. Once there is an internet connection available again, Firebase will take
    care of synchronizing the data between your app and the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what the app looks like when you start to create a new
    canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e7ff96c-70aa-4225-aa91-8813660be9a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `saveCanvasModel` method implementation is even smaller. It will update
    the Firebase data in case the user has made some changes. All you need to do is
    to call the `setValue` method with a given `Canvas` object. The method retrieves
    a reference to the canvas data node. The unique ID we obtained earlier in the
    `createCanvas` method will be used to find the right node. Finally, we only need
    to call the `setValue` method to send the data to Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the `loadCanvasModels` method, we will retrieve all the stored canvases and
    we will add a listener to the canvases node. Every time data is inserted or when
    existing data changes, the `onDataChange` event will be fired. A snapshot will
    be provided with each event. It contains the (JSON) data for all child nodes under
    the canvas's node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each child node of the obtained snapshot will be deserialized to a `Canvas`
    object. The `CanvasList` fragment will be notified so that it can display or update
    the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `MainActivity` class is derived from the one that comes with the Navigation
    Drawer template. It has been slightly modified, so it can display the various
    fragments. It will also handle the clicks on any of the menu items. The `onList`
    method is triggered if the app starts for the first time or if the user chooses
    the list option from the menu. The `onEdit` method is triggered if the user chooses
    the new canvas option from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onEdit` method will also be called if the users click on any of the listed
    Business Model Canvases, as displayed in the `CanvasList` fragment. In the `onEdit`
    method, the `canvas` parameter will be passed. The `getRepository` method returns
    a class that implements the `IRemoteRepository` interface, which in our example
    is the `FireBaseRepository` class. If you want to switch from Firebase to Parse
    or another MBaaS, then all you need to do is return another repository here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The app uses three fragments. There is one to display a list of canvases, another
    one to act as a container for a series of swipeable canvas elements, and there
    is one for the canvas elements themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CanvasListFragment` has a `loadData` method, which calls the `loadCanvasModels`
    method from the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When the results are retrieved they will be handled in the `onResult` method,
    which will take the result and display list canvases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CanvasPagerFragment` is a container fragment. It can hold a number of
    canvas element fragments, each representing a particular element of the canvas.
    Users can swipe backward and forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `loadData` method, we will create the `pagerAdapter` based on the provided
    `Canvas` object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setOffscreenPageLimit` method is set to `11` here (each canvas contains
    11 elements, so we need 11 instances of the `CanvasElementFragment` class) to
    make sure we can access all element fragments. This is done for demonstration
    purposes only and it should be avoided in a real-world app. It may cause memory
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user clicks on the Save button, the `onSaveData` method will be triggered.
    There we call the `saveCanvasModel` method from the repository and pass the updated
    canvas object. Finally, we will navigate back to the list of canvases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CanvasElementFragment` represents an element of the Business Model Canvas.
    This, for example, could be the card where a user can enter ideas about the value
    proposition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `OnCreateView` method, we will bind the element object to the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Firebase dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have been playing with the app a little, have added some canvases and
    then gone to the Firebase dashboard, you will see all the canvases that you have
    just created appear here. All updates appear here instantly (of course, only if
    the device you are testing the app on is online).
  prefs: []
  type: TYPE_NORMAL
- en: This also makes Firebase very suitable for chat applications. It works the other
    way around as well. If you add a new canvas node here, it will appear instantly
    in the app. Just give it a try, add some nodes, play a bit and adapt the app a
    bit to test other Firebase functionality as well.
  prefs: []
  type: TYPE_NORMAL
- en: This is what the dashboard may look like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clarify this example, the title, description and hint fields, that already
    persist locally, are stored here as well. It makes sense to avoid data redundancy
    as much as possible and to store only the `ID` and `VALUE` properties of each
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edafd642-50b0-4e2d-8fe0-ecefc7289f3b.png)'
  prefs: []
  type: TYPE_IMG
- en: With only a little bit of code, you can persist your data in the cloud with
    Firebase. You do not need to worry about scalability issues, being online or offline
    and many other cases. Firebase has many more options such as user management (sign
    up, login), security, limitation, and paging options.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen what services we can choose from if we do not
    want to create the backend for the app ourselves. We learned what could be important
    for making the right strategic and technical choices and also saw an example app,
    which is using Firebase as a mobile backend. You can use the app to learn from
    or you can enhance it and use it as a starter project for your own app idea.
  prefs: []
  type: TYPE_NORMAL
- en: The app that we examined is for Android only. What if you want to have this
    app built for iOS? Should you create it again, but this time using Swift and Xcode?
    Are there other options to develop an app just one time but for multiple (mobile)
    platforms? You can check out the next chapter to learn more about this.
  prefs: []
  type: TYPE_NORMAL
