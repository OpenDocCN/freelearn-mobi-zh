["```swift\n// Constants\nlet freezingTemperatureOfWaterCelsius = 0\nlet speedOfLightKmSec = 300000\n// Variables\nvar currentTemperature = 22\nvar currentSpeed = 55 \n```", "```swift\n// Constants\nlet freezingTemperatureOfWaterCelsius = 0, speedOfLightKmSec = 300000\n// Variables\nvar currentTemperature = 22, currentSpeed = 55 \n```", "```swift\nint myInt = 1 \n```", "```swift\nvar myInt = 1 \n```", "```swift\nvar x = 3.14  // Double type\nvar y = \"Hello\"  // String type\nvar z = true   // Boolean type \n```", "```swift\nvar x:Float = 3.14 \n```", "```swift\nvar x: Float = \"My str\" \n```", "```swift\nvar x \n```", "```swift\nvar x: Int \n```", "```swift\nlet speedOfLightKmSec = 300_000 \n```", "```swift\nlet number = 4\nif number % 2 == 0 { \n    print(\"Even\")\n} else {\n    print(\"Odd\")\n} \n```", "```swift\nlet number = 4\nif number.isMultiple(of: 2) { \n    print(\"Even\")\n} else {\n    print(\"Odd\")\n} \n```", "```swift\nvar a: Int = 3\nvar b: Double = 0.14\nvar c = a + b \n```", "```swift\noperator '+' cannot be applied to operands of type Int and Double \n```", "```swift\nvar a: Int = 3\nvar b: Double = 0.14\nvar c = Double(a) + b \n```", "```swift\nvar intVar = 32\nvar floatVar = Float(intVar)\nvar uint16Var = UInt16(intVar) \n```", "```swift\nlet swiftIsCool = true\nvar itIsRaining = false \n```", "```swift\nlet isSwiftCool = true\nvar isItRaining = false\nif isSwiftCool {\n    print(\"YEA, I cannot wait to learn it\")\n}\nif isItRaining {\n    print(\"Get a rain coat\")\n} \n```", "```swift\nisItRaining = !isItRaining \n```", "```swift\nisItRaining.toggle() \n```", "```swift\nvar stringOne = \"Hello\"\nvar stringTwo = \"World\" \n```", "```swift\nvar multiLine = \"\"\"\nThis is a multiline string literal.\nThis shows how we can create a string over multiple lines.\n\"\"\" \n```", "```swift\nvar multiLine = \"\"\"\nThis is a multiline string literal.\nThis shows how we can create a string over multiple lines.\nJon says, \"multiline string literals are cool\"\n\"\"\" \n```", "```swift\nvar stringOne = \"Hello\"\nfor char in stringOne {\n    print(char)\n} \n```", "```swift\nstringOne.map {\n    print($0)\n} \n```", "```swift\nvar stringC = stringA + stringB\nstringA += string \n```", "```swift\nvar stringA = \"Jon\"\nvar stringB = \"Hello \\(stringA)\" \n```", "```swift\nlet str = \"The main character said \\\"hello\\\"\" \n```", "```swift\nlet str1 = #\"The main character said \"hello\"\"# \n```", "```swift\nlet ans = 42\nvar str2 = #\"The answer is \\#(ans)\"# \n```", "```swift\nvar x = \"Hello\" \nlet y = \"HI\"\nvar z = \" World\"\n//This is valid because x is mutable\nx += z\n//This is invalid because y is not mutable.\ny += z \n```", "```swift\nvar stringOne = \"hElLo\"\nprint(\"Lowercase String:\t\\(stringOne.lowercased())\")\nprint(\"Uppercase String:\t\\(stringOne.uppercased())\") \n```", "```swift\nLowercase String: hello\nUppercase String: HELLO \n```", "```swift\nvar stringOne = \"one,to,three,four\"\nvar stringTwo = stringOne.replacingOccurrences(of: \"to\", with: \"two\")\nprint(stringTwo) \n```", "```swift\nvar path = \"/one/two/three/four\"\n//Create start and end indexes\nlet startIndex = path.index(path.startIndex, offsetBy: 4)\nlet endIndex = path.index(path.startIndex, offsetBy: 14)\nlet sPath = path[startIndex ..< endIndex] //returns the \"/two/three\"\n//convert the substring to a string \nlet newStr = String(sPath)\npath[..<startIndex]    //returns the \"/one\"\npath[endIndex...]     //returns the \"/four\"\npath.last\npath.first \n```", "```swift\nvar path = \"/one/two/three/four\"\nvar length = path.count \n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9) \n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9)\nvar (city, name, wins, losses, percent) = team \n```", "```swift\nvar team = (\"Boston\", \"Red Sox\", 97, 65, 59.9)\nvar city = team.0\nvar name = team.1\nvar wins = team.2\nvar losses = team.3\nvar percent = team.4 \n```", "```swift\nvar team = (city:\"Boston\", name:\"Red Sox\", wins:97, losses:65, percent:59.9) \n```", "```swift\nenum Planets {\n    case mercury\n    case venus\n    case earth\n    case mars\n    case Jupiter\n    case Saturn\n    case Uranus\n    case neptune\n} \n```", "```swift\nenum Planets {\ncase mercury, venus, earth, mars, jupiter\ncase saturn, uranus, neptune\n} \n```", "```swift\nvar planetWeLiveOn = Planets.earth\nvar furthestPlanet = Planets.neptune \n```", "```swift\nplanetWeLiveOn = .mars \n```", "```swift\n// Using the traditional == operator\nif planetWeLiveOn == .earth {\n    print(\"Earth it is\")\n}\n// Using the switch statement\nswitch planetWeLiveOn {\ncase .mercury:\n    print(\"We live on Mercury, it is very hot!\")\ncase .venus:\n    print(\"We live on Venus, it is very hot!\")\ncase .earth:\n    print(\"We live on Earth, just right\")\ncase .mars:\n    print(\"We live on Mars, a little cold\")\ndefault:\n    print(\"Where do we live?\")\n} \n```", "```swift\nenum Devices: String {\n    case MusicPlayer = \"iPod\"\n    case Phone = \"iPhone\"\n    case Tablet = \"iPad\"\n}\nprint(\"We are using an \\(Devices.Tablet.rawValue)\") \n```", "```swift\nenum Planets: Int {\n    case Mercury = 1\n    case Venus\n    case Warth\n    case Mars\n    case Jupiter\n    case Saturn\n    case Uranus\n    case Neptune\n}\nprint(\"Earth is planet number \\(Planets.earth.rawValue)\") \n```", "```swift\nenum Product {\n    case Book(Double, Int, Int)\n    case Puzzle(Double, Int)\n}\nvar masterSwift = Product.Book(49.99, 2017, 310) \nvar worldPuzzle = Product.Puzzle(9.99, 200)\nswitch masterSwift {\ncase .Book(let price, let year, let pages):\n    print(\"Mastering Swift was published in \\(year) for the price of \\(price) and has \\(pages) pages\")\ncase .Puzzle(let price, let pieces):\n    print(\"Mastering Swift is a puzzle with \\(pieces) and sells for \\(price)\")\n}\nswitch worldPuzzle {\ncase .Book(let price, let year, let pages):\n    print(\"World Puzzle was published in \\(year) for the price of \\(price) and has \\(pages) pages\")\ncase .Puzzle(let price, let pieces):\n    print(\"World Puzzle is a puzzle with \\(pieces) and sells for \\(price)\")\n} \n```", "```swift\n\"Master Swift was published in 2017 for the price of 49.99 and has 310 pages\"\n\"World Puzzle is a puzzle with 200 and sells for 9.99\" \n```", "```swift\nenum Grades: Comparable {\n    case f\n    case d\n    case c\n    case b\n    case a\n}\nlet acceptableGrade = Grades.c\nlet testOneGrade = Grades.b\nif  testOneGrade < acceptableGrade {\n    print(\"Grade is unacceptable\")\n}\nelse {\n    Print(\"Grade is acceptable\")\n} \n```", "```swift\nvar A = var B \n```", "```swift\nlet x = 1\nvar y = \"Hello\"\na = b \n```", "```swift\nEquality:  varA == varB\nNot equal:  varA != varB \nGreater than:  varA > varB \nLess than:  varA < varB\nGreater than or equal to: varA >= varB\nLess than or equal to: varA <= varB \n```", "```swift\n2 == 1 //false, 2 does not equal 1\n2 != 1 //true, 2 does not equal 1\n2 > 1 //true, 2 is greater than 1\n2 < 1 //false, 2 is not less than 1\n2 >= 1 //true, 2 is greater or equal to 1\n2 <= 1 //false, 2 is not less or equal to 1 \n```", "```swift\nAddition: varA + varB\nSubtraction: varA - varB\nMultiplication: varA * varB\nDivision: varA / varB \n```", "```swift\nvar x = 4 + 2  //x will equal 6\nvar x = 4 â€“ 2  //x will equal 2\nvar x = 4 * 2  //x will equal 8\nvar x = 4 / 2  //x will equal 2\nvar x = \"Hello \" + \"world\"  //x will equal \"Hello World\" \n```", "```swift\nvarA % varB \n```", "```swift\nvar x = 10 % 3  //x will equal 1\nvar x = 10 % 6  //x will equal 4 \n```", "```swift\nvarA += varB\nvarA -= varB\nvarA *= varB\nvarA /= varB \n```", "```swift\nvar x = 6\nx += 2  //x now is 8\nx -= 2  //x now is 4\nx *= 2  //x now is 12\nx /= 2  //x now is 3 \n```", "```swift\n(a...b) \n```", "```swift\nfor i in 1...3 {\n    print(\"Number: \\(i)\")\n} \n```", "```swift\nNumber: 1\nNumber: 2\nNumber: 3 \n```", "```swift\n(a..<b) \n```", "```swift\nfor i in 1..<3 { \n    print(\"Number: \\(i)\")\n} \n```", "```swift\nNumber: 1\nNumber: 2 \n```", "```swift\n(boolValue ? valueA : valueB) \n```", "```swift\nvar x = 2\nvar y = 3\nvar z = (y >x ? \"Y is greater\" : \"X is greater\")  //z equals \"Y is greater\" \n```", "```swift\nvarA = !varB \n```", "```swift\nvar x = true\nvar y = !x\t  //y equals false \n```", "```swift\nvarA && varB \n```", "```swift\nvar x = true \nvar y = false\nvar z = x && y  //z equals false \n```", "```swift\nvarA || varB \n```", "```swift\nvar x = true\nvar y = false\nvar z = x|| y  //z is true \n```"]