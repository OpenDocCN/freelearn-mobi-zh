- en: Chapter 4. Using Xcode Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Xcode Instruments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing iOS applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and profiling an iOS project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting virtual memory faults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting memory leaks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling runtime errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling compile-time errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and configuring Instruments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will focus on how to effectively use the Xcode Instruments
    within our applications to track down areas within our iOS applications that could
    be affecting the overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: These types of issues could potentially cause an application to run slowly,
    or even crash on the user's iOS device. We will take a look at each of the different
    types of built-in Instruments, which come as part of the Instruments applications.
    We will also see how we can use the System Trace Instrument to help track down
    system calls, memory use, and threads within your code that may be affecting the
    application's overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Xcode Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how we can use Instruments to help gather important
    information about the performance of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how to launch the Instruments application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined below:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Instruments** from the **Xcode** menu, located under the **Open Developer
    Tool** submenu as shown in the following screenshot:![How to do it...](img/3349_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Activity Monitor** option from the list of available templates.![How
    to do it...](img/3349_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **All Processes** from the drop-down menu as highlighted by the
    rectangle in the following screenshot:![How to do it...](img/3349_04_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Record** button to begin profiling and monitoring system processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how easy it is to launch the Instruments application
    to profile an application. We learned how to use the **Activity Monitor** option
    to show how we can use this Instrument to monitor the overall CPU, memory, disk,
    and network activity of the current computer system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through the use of the Instruments application, you can gather information based
    on a variety of different types of data and view these side by side at the same
    time. This enables you to spot trends, which would be hard to spot otherwise,
    and this can be used to see code running by your program along with the corresponding
    memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides a brief description of each feature within the
    Instruments application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Instruments feature | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Instruments pane | This pane lists all of the Instruments, which have been
    added for those that you want to profile against.New Instruments can be added
    by selecting and then dragging each one from the Instruments library into this
    pane. Items within this pane can also be deleted. |'
  prefs: []
  type: TYPE_TB
- en: '| Track pane | This pane displays a graphical summary of the data returned
    by the current Instruments. Each Instrument has its own track that provides a
    chart of the data that is collected by that Instrument. The information within
    this pane is read-only. |'
  prefs: []
  type: TYPE_TB
- en: '| Detail pane | This pane shows the details of the data that has been collected
    by each of the Instruments. It displays the set of events gathered and used to
    create the graphical view within the track pane. Depending on the type of Instrument,
    information that is represented by this pane can be customized to represent the
    data differently. |'
  prefs: []
  type: TYPE_TB
- en: '| Extended detail pane | This pane displays detailed information about the
    item that is currently selected in the detail pane. This pane displays the complete
    stack trace, timestamp, and other Instrument-specific data gathered for the given
    event. |'
  prefs: []
  type: TYPE_TB
- en: '| Navigation bar | This pane shows you where you currently are and the steps
    you took to get there. It includes two menus: the active Instrument menu and the
    detail view menu. You can click on the entries within the navigation bar to select
    the active Instrument, and the level and type of information in the detail view.
    |'
  prefs: []
  type: TYPE_TB
- en: 'The Instruments trace document toolbar allows you to add and control Instruments,
    open view, and configure the track pane as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3349_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table provides an explanation for each of the different controls
    on the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Toolbar item | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Pause / Resume button | This button pauses the gathering of trace data while
    a recording is in progress. When the pause button has been pressed within the
    track pane, it will show a gap in the trace data to highlight this. |'
  prefs: []
  type: TYPE_TB
- en: '| The **Record** / Stop button | This button starts or stops the recording
    process. You use this button to begin gathering trace data for your application.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Loop button | This button enables you to set whether the recorder should
    loop during playback to repeat the recorded steps continuously. This can be useful
    if you want to gather multiple runs for a given set of steps. |'
  prefs: []
  type: TYPE_TB
- en: '| **Target** | This button selects the trace target for the document. This
    is the process for which data is gathered. |'
  prefs: []
  type: TYPE_TB
- en: '| **Inspection Range** | This enables you to select the time range in the track
    pane. When this has been set, the Instrument displays only the data collected
    within the specified time period. Using the buttons with this control enables
    you to set the start and end points of the inspection range, and to clear the
    current range. |'
  prefs: []
  type: TYPE_TB
- en: '| Time / Run control | Shows the time elapsed by the current document trace.
    If the trace document contains multiple data runs associated with it, you can
    use the arrow controls to choose which run data you want to display in the track
    pane. |'
  prefs: []
  type: TYPE_TB
- en: '| The **View** control | Hides or shows the **Instruments** pane, **Detail**
    pane, and **Extended** **View** pane. These controls make it easier to only focus
    on the area in which you are interested in. |'
  prefs: []
  type: TYPE_TB
- en: '| **Library** | Hides or shows the Instruments library window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Search** | This option filters information within the **Detail** pane,
    based on a search term that you enter. |'
  prefs: []
  type: TYPE_TB
- en: The Instruments application is now located inside the Xcode bundle located within
    the `/Developer/Applications` folder and can be launched through the Xcode development
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information about using Instruments application to debug your applications,
    you can refer to the Apple developer documentation located at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html](https://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Tracing iOS applications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running and profiling a project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces – Creating the App UI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing iOS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to open a project that will be used for profiling
    its performance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will start by opening our **TwitterExample** application
    that we created in our previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin tracing an application, follow the following outlined simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Open**, or alternatively press *Command* + *O*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select the `TwitterExample.xcodeproj` file from within the dialog.![How
    to do it...](img/3349_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Open** button to continue and load your project into the Xcode
    workspace environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we selected our `TwitterExample` application that we created
    in our previous chapter, which will be used to profile its performance using the
    Instruments application.
  prefs: []
  type: TYPE_NORMAL
- en: In our next recipe, we will look at how we can use the System Trace Instrument
    to profile our application, to track down system calls, memory, and thread calls
    that may be affecting the overall performance of your iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *How to run and profile an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *How to detect VM faults* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and profiling an iOS project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the System Trace Instrument to monitor
    performance of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how to run the Instruments application from within
    the Xcode environment in order to profile our `TwitterExample` application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin profiling our **TwitterExample**, follow the following outlined steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **TwitterExample** option from the **Project Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Product** | **Build For** | **Profiling**, from the **Product**
    menu, or alternatively use the keyboard shortcut *Shift* + *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **Profile** from the **Product** menu to launch the Instruments
    application. Similarly, you can use the keyboard shortcut *Command* + *I*.![How
    to do it...](img/3349_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once this option has been selected, you will eventually see the **Instruments**
    application window display on your screen. This is shown in the following screenshot:![How
    to do it...](img/3349_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **System Trace** option from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Profile** button to start profiling our `TwitterExample` application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your application will then be analyzed, and each system call and thread that
    has been made to memory will be profiled. These also include **Virtual Memory**
    (**VM**) operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_04_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After a number of seconds have passed, your trace information will be displayed,
    and this will contain information relating to the thread and system calls, and
    their duration that your application is currently making. Other information, such
    as VM faults, is also recorded as shown in the following screenshot:![How to do
    it...](img/3349_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose to stop the application from profiling by clicking on the **Record**
    button, since the Instruments application has already done its full analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to run the Instruments application directly from
    within the Xcode development environment. We then saw how we can use the System
    Trace Instrument to profile our application that enables us to monitor system
    calls, threads, as well as virtual memory faults encountered by the Instruments
    application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Along with the System Trace Instrument, the Instruments application contains
    additional templates that you can use to profile your application against. The
    following table gives an overview of each of the templates that are available
    for iOS development:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Template | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Blank` | Creates an empty trace document to which you can add your own combinations
    of Instruments. |'
  prefs: []
  type: TYPE_TB
- en: '| `Time Profiler` | Performs low-overhead and time-based sampling of one or
    all processes. |'
  prefs: []
  type: TYPE_TB
- en: '| `System Trace` | Provides you with the ability to profile against different
    aspects of the operating system that could be affecting application''s performance.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Activity Monitor` | This monitors overall CPU, memory, disk, and network
    activity. |'
  prefs: []
  type: TYPE_TB
- en: '| `Automation` | Automates user interface tests within your application. |'
  prefs: []
  type: TYPE_TB
- en: '| `Energy Diagnostics` | Displays diagnostics information regarding the amount
    of energy being used on the device for GPU activity, display brightness, sleep/wake,
    Bluetooth, Wi-Fi, and GPS. |'
  prefs: []
  type: TYPE_TB
- en: '| `Network Connections` | With this Instrument, it''s possible to see how much
    data is flowing over each connection, for each application, as well as interesting
    statistics, such as round trip times and retransmission requests. You can use
    this information to help reduce network traffic and energy consumption. |'
  prefs: []
  type: TYPE_TB
- en: '| `Allocations` | Monitors memory and object-allocation patterns within your
    program. |'
  prefs: []
  type: TYPE_TB
- en: '| `Leaks` | Detects memory leaks within your application. |'
  prefs: []
  type: TYPE_TB
- en: '| `Threads` | Analyzes thread state transitions within a process, including
    running and terminated threads, thread state, and associated back traces. |'
  prefs: []
  type: TYPE_TB
- en: '| `File Activity` | Monitors an application''s interaction with the filesystem.
    |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting Virtual Memory faults* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting virtual memory faults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the Activity Monitor Instrument to
    monitor performance of your operating system and computer's hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how to use the Instruments to check the virtual
    memory to see if thrashing (excessive paging) is occurring or if the VM size is
    growing excessively, indicating over-retained auto released objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the following outlined simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **TwitterExample** option from the **Project Navigator** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Product** | **Build For** | **Profiling**, from the **Product**
    menu, or alternatively using the keyboard shortcut *Shift* + *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose **Profile** from the **Product** menu to launch the Instruments
    application. Similarly, you can use the keyboard shortcut *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **Activity Monitor** optionfrom the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Profile** button to start profiling our **TwitterExample** application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a number of seconds have passed, your trace information will be displayed,
    and this will contain information relating to the overall CPU, memory, disk, and
    network activity used by your application as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_04_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can choose to stop the application from profiling by clicking on the **Stop**
    button, since the Instruments application has already done its full analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to use the Activity Monitor Instruments component
    which enables us to check the virtual memory of the OS that can potentially cause
    the computer system to perform sluggishly. The previous screenshot displays information
    relating to the overall load which the system is currently undergoing, as well
    as the user applications performance and the total virtual memory that is currently
    being allocated to cache these operations.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting memory leaks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the Leaks Instrument to check for memory
    leaks within an iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how we can quickly determine when a memory leak
    occurs within our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with creating a new Xcode project, follow these simple steps as outlined
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode from the `/Developer/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create a new Xcode project**, or navigate to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** option from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `MemoryLeaks` as the name for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iPhone** from under the **Devices** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **Use Storyboards** checkbox has not been ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **Use Automatic Reference Counting** checkbox has not been ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the **Include Unit Tests** checkbox has not been ticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify where you would like to save your project, and click on the **Create**
    button to save your project at the location specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our next step is to create the code functionality that will be responsible for
    allocating our string objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `ViewController.m` file implementation file from the **Project Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad` method as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our next step is to start profiling our project that will help us check for
    memory leaks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Product** | **Build For** | **Profiling**, from the **Product**
    menu, or alternatively using the keyboard shortcut *Shift* + *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, choose **Profile** from the **Product** menu to launch the Instruments
    application. Similarly, you can use the keyboard shortcut *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **Leaks** option from the list of available templates under
    the **Memory** section header.![How to do it...](img/3349_04_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Profile** button to start profiling our `MemoryLeaks` application.![How
    to do it...](img/3349_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose to stop the application from profiling by clicking on the **Stop**
    button, since the Instruments application has already done its full analysis.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created an application that included a piece of code that
    allocated 5000 strings inside a loop to demonstrate ways in which memory leaks
    can happen. The code allocates memory for each new string called `Status` each
    time it goes through the loop, and lets the pointer of each string that gets allocated
    go out of scope and never be released.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that the memory that gets allocated never gets released, which
    is caused by the tight `for` loop starving the execution of `run` loop, causing
    your application to run slowly, potentially causing it to crash or simply hang.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshot displays information relating to the memory currently allocated,
    as well as the user applications performance and the total virtual memory that
    is currently being allocated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an IOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling runtime errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to handle runtime errors within an iOS application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how we can handle runtime errors and learn how
    we can improve error handling using the `@try…@catch…@finally` clauses to prevent
    our application from crashing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the following simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MemoryLeaks.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad` method as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `causeRuntimeError` method as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, build and run the application by navigating to **Product** | **Run** from
    the **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that once the program executes, an exception is raised and
    the code execution stops. The following screenshot shows the exception error details
    within the Xcode IDE:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new method `causeRuntimeError` that allocated an
    array to hold the maximum capacity of 30 items. We then cycled through the loop
    and added the integer values from 0 to 29 into this array. Once, all items have
    been added, the loop exits and we then attempt to remove an item at the 31st position
    within the array.
  prefs: []
  type: TYPE_NORMAL
- en: Since we don't have an object stored at the 31st position within our array,
    this results in the code execution halting, causing the exception error information
    display as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like to find out more information on the `NSMutableArray` class,
    you can refer to the Apple developer documentation located at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSmutableArray_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSmutableArray_Class/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Objective-C provides you with a fail-safe method that can help you handle exception
    errors that can prevent your application from falling over. Keep in mind, this
    will still cause an error, but the exception error would have been handled by
    your application, preventing your app from crashing, and allowing your code to
    continue executing.
  prefs: []
  type: TYPE_NORMAL
- en: An exception is a special condition that interrupts the normal flow of program
    execution. There are a variety of reasons why an exception may be generated (exceptions
    are typically said to be raised or thrown), by hardware as well as software.
  prefs: []
  type: TYPE_NORMAL
- en: Examples include arithmetical errors such as division by zero, calling undefined
    instructions (such as attempting to invoke an unimplemented method), and attempting
    to access a collection element out of bounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Objective-C exception support involves four compiler directives: `@try`, `@catch`,
    `@throw`, and `@finally`, which are explained in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Objective-C exception handler | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@catch` | This code block contains exception-handling logic for exceptions
    thrown in a `@try {}` block. You can have multiple `@catch {}` blocks to catch
    different types of exception. |'
  prefs: []
  type: TYPE_TB
- en: '| `@throw` | This compiler directive allows you to throw an exception, which
    is essentially an Objective-C object. You typically use an `NSException` object,
    but you are not required to use it. |'
  prefs: []
  type: TYPE_TB
- en: '| `@finally` | This code block must be executed whether or not an exception
    is thrown and is done after the catch statement finishes. |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s take a look at how we can modify our `causeRuntimeError` method to take
    advantage of these compiler directives, and prevent our code from crashing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `causeRuntimeError` method as shown by the highlighted code sections
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, build and run the application by navigating to **Product** | **Run** from
    the **Product** menu, or alternatively pressing *Command* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that once the program executes, the exception is raised and
    caught by the `@catch` code block, and the exception error message is logged to
    the console window, and the code execution continues normally.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like to find out more information on Objective-C exception handling,
    you can refer to the Apple developer documentation located at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/cocoa/conceptual/objectivec/Chapters/ocExceptionHandling.html](https://developer.apple.com/library/ios/#documentation/cocoa/conceptual/objectivec/Chapters/ocExceptionHandling.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling compile-time errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to handle compile-time errors within an iOS
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn about compile-time errors and how these can be
    corrected.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MemoryLeaks.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad` method as shown by the highlighted code sections in
    the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the `causeCompileTimeError` method as shown in the following code
    snippet below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will notice that the compiler notifies you that the nonexistent method could
    not be found. The screenshot below shows the compiler error details within the
    Xcode IDE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_04_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new method `causeCompiletimeError` that sets the
    background color of the view to blue. We use the `UIColor` class to set and specify
    the color that we would like the background color of our view to take on.
  prefs: []
  type: TYPE_NORMAL
- en: We received a compiler warning letting us know of the non-existent method that
    we used. These types of errors are most obvious and generally these come from
    typographical errors, but can be fixed easily using code auto-completion within
    Xcode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Objective-C compiler is case sensitive, which means that `UIcolor` and
    `UIColor` are treated differently. For example, in Objective-C, the compiler can
    understand the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'But, if you type in the following as we did in our method definition, the compiler
    warns you about a potential (but not definite) problem, because you''ve specified
    a language-specific syntax that it can''t recognize and therefore is not associated
    with the `UIColor` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like to find out more information on the `UIColor` class, you
    can refer to the Apple developer documentation located at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/#documentation/uikit/reference/UIColor_Class/Reference/Reference.html](https://developer.apple.com/library/ios/#documentation/uikit/reference/UIColor_Class/Reference/Reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the user interface for our application* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding and customizing views* recipe in [Chapter 2](ch02.html "Chapter 2. User
    Interfaces – Creating the UI"), *User Interfaces – Creating the UI*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and configuring Instruments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Instruments application comes with a wide range of built-in Instruments
    to make your job easier, by using them to gather data from one or more processes.
    Most of these Instruments require little configuration to use, and are simply
    added to your trace document to start gathering trace data. In this recipe, we
    will look at how we can add and configure Instruments into an existing trace document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn how to add and configure Instruments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn how to add and configure Instruments, follow the following steps outlined:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MemoryLeaks.xcodeproj` project file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `viewDidLoad` method as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to **Product** | **Build For** | **Profiling**, from the **Product**
    menu, or alternatively use the keyboard shortcut *Shift* + *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, choose **Profile** from the **Product** menu to launch the Instruments
    application. Similarly, you can use the keyboard shortcut *Command* + *I*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **Blank** optionfrom the list of available templates under
    the **Memory** section header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Profile** button to begin profiling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Instruments **Library** list displays all of the Instruments that you can
    use and add to your trace document. The library contains all of the built-in Instruments
    that come with the installation of Xcode 4, as well as any custom Instruments
    that you have already created.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the **Instruments** window, follow the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Library** button from within your trace document window, or navigate
    to **Window** | **Library** from the menu bar. Alternatively, you can use the
    *Command* + *L* keyboard shortcut.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, choose the **Memory** option from within the drop-down list as shown in
    the following screenshot:![How to do it...](img/3349_04_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To add an Instrument, select the Instrument from the Instruments Library list,
    and then drag it either to the **Instruments** pane, or directly onto the **Track**
    pane of your trace document, as shown in the following screenshot:![How to do
    it...](img/3349_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Record** button to start profiling the **MemoryLeaks**
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To configure an Instrument, select the Instrument from the **Instruments** pane
    and click on the Instruments inspector icon, which is located to the right of
    the Instrument as shown in the following screenshot:![How to do it...](img/3349_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To dismiss the Inspector, click on the close button highlighted by an **X**.
    You can similarly use the *Command* + *I* keys or navigate to **File** | **Get
    Info** to open and close this window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how easy it is to add and configure Instruments within
    a trace document using the Instruments inspector. The options listed vary based
    on the type of Instrument that is being configured. Most Instruments contain options
    for configuring the contents of the track pane, while only a small handful contain
    additional functionality for determining what type of information is gathered
    by the Instrument.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the type of Instrument that is being configured, they can be configured
    before, during, or after the data within your trace document has been recorded.
    The **Zoom** control can be found in most of the Inspector controls for those
    Instruments, which you configure. This feature controls the magnification of the
    trace data that is displayed within the **Track** pane, and adjusts the height
    of the Instrument within the **Track** pane.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running and profiling an iOS project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
