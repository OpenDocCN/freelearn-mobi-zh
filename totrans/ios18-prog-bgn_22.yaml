- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Custom Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, your *JRNL* app is functional. All the screens are working, but
    as the rating user interface element is missing, you can’t set a star rating for
    a journal entry as shown in the app tour. You also can’t set a custom picture,
    but that will be addressed in *Chapter 20*, *Getting Started with the Camera and
    Photo Library*.
  prefs: []
  type: TYPE_NORMAL
- en: You have been using Apple’s standard UI elements so far. In this chapter, you’ll
    create a **custom view** subclass of the `UIStackView` class that displays a journal
    entry rating in the form of stars, and you’ll modify this subclass so users can
    set a rating for a journal entry by tapping it. After that, you’ll implement it
    on the Add New Journal Entry screen. Finally, you’ll implement it on the Journal
    Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have learned how to create custom views for
    your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom `UIStackView` subclass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your custom view to the Add New Journal Entry screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your custom view to the Journal Entry Detail screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will continue working on the `JRNL` project that you modified in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The completed Xcode project for this chapter is in the `Chapter19` folder of
    the code bundle for this book, which can be downloaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/Y21q6voqYuk](https://youtu.be/Y21q6voqYuk%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by learning how to create a custom `UIStackView` subclass that will
    display a star rating on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom UIStackView subclass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You’ve only used Apple’s predefined UI elements so far, such as labels and
    buttons. All you had to do was click the Library button, search for the object
    you want, and drag it into the storyboard. However, there will be cases where
    the objects provided by Apple are either unsuitable or don’t exist. In such cases,
    you will need to build your own. Let’s review the Add New Journal Entry screen
    that you saw in the app tour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B31371_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Add New Journal Entry screen showing the star rating'
  prefs: []
  type: TYPE_NORMAL
- en: You can see a group of five stars just above the **Get Location** switch. Currently,
    the **New Entry Scene** and the **Entry Detail Scene** in the `Main` storyboard
    file have placeholder view objects where the stars should be. You will create
    the `RatingView` class, a custom subclass of the `UIStackView` class, which you
    will use in both scenes. An instance of this class will display ratings as stars.
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of this chapter, an instance of the `RatingView` class will be
    referred to as a rating view (the same way an instance of the `UIButton` class
    is referred to as a button).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by creating a subclass of the `UIStackView` class. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, right-click on the **JRNL** folder and choose **New
    Group** from the pop-up menu. Name this group **Views**. Move this group to a
    new location below the **Model** group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.2: Project navigator showing Views group below the Model group'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **Views** folder and select **New File from Template...** from
    the pop-up menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**iOS** should already be selected. Choose **Cocoa Touch Class** and then click
    **Next**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Class**: `RatingView`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subclass**: `UIStackView`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language**: `Swift`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create**. The `RatingView` file will appear in the Project navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove all the commented code in this file, and type the following after the
    `RatingView` class declaration to declare the properties for the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ratingButtons` property is an array that will hold all the buttons for
    this class.
  prefs: []
  type: TYPE_NORMAL
- en: The `rating` property is used to store a journal entry rating. It determines
    the number and types of stars that will be drawn. For instance, if `rating` contains
    `3`, the rating view will display three filled stars and two empty stars.
  prefs: []
  type: TYPE_NORMAL
- en: The `buttonSize` property determines the height and the width of the buttons
    that will be drawn onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: The `buttonCount` property determines the total number of buttons to be drawn
    onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement the initializer for this class after the property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement a method to draw stars on the screen after the initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s break this down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These statements remove any existing buttons from the stack view and the `ratingButtons`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These statements create three `UIImage` instances from symbols in Apple’s `SFSymbols`
    library. `filledStar` will store an image of a filled star, `emptyStar` will store
    an image of a star outline, and `highlightedStar` will store an image of a filled
    star that has been tinted red.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Apple’s `SFSymbols` library, see [https://developer.apple.com/design/human-interface-guidelines/sf-symbols](https://developer.apple.com/design/human-interface-guidelines/sf-symbols).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Since `buttonCount` is set to `5`, this `for` loop will repeat five times.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This statement assigns an instance of `UIButton` to `button`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on `UIButton`, see [https://developer.apple.com/documentation/uikit/uibutton](https://developer.apple.com/documentation/uikit/uibutton).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These statements set the images for the different states of the `UIButton` instance.
    The `.normal` state displays a star outline. When in the `.selected` state, a
    filled star is displayed. If you tap the `UIButton` instance, it will be in either
    the `.highlighted` state or the `.highlighted` and `.selected` states, depending
    on whether it was in the `.normal` state or `.selected` state prior to being tapped.
    It then displays a red-tinted filled star.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: These statements set the size of the buttons. The first statement sets the `UIButton`
    instance’s `translatesAutoresizingMaskIntoConstraints` property to `false`; otherwise,
    the system would create a set of constraints that duplicate the behavior specified
    by the view’s auto-resizing mask, and you would not be able to set your own constraints.
    The next two statements set the instance’s height and width by programmatically
    setting the height and width constraints using the value stored in `buttonSize`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This statement adds the `UIButton` instance as a subview of the stack view programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This statement adds the `UIButton` instance to the `ratingButtons` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call the `setupButtons()` method in the initializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This draws the rating view onscreen when the rating view is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have created a custom `UIStackView` subclass named `RatingView`, and you
    have added code to make it draw five stars on the screen. Now let’s add code to
    enable the user to change the rating when the stars in the rating view are tapped.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a method to change the rating view’s `rating` property when a button
    in the `ratingButtons` array is tapped after the `setupButtons()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a button in the `ratingButtons` array is tapped, the `guard` statement
    assigns the index of the button to `index`. `selectedRating` is then set to the
    value stored in `index` + 1\. If the `rating` property has the same value as `selectedRating`,
    it is set to `0`; otherwise, it is set to the same value as `selectedRating`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s say you tap the third star in the rating view. Since the
    third star is the third element in the `ratingButtons` array, `index` would be
    set to `2` and `selectedRating` would be set to 2 + 1 = `3`. Assuming that the
    initial value of the `rating` property is `0`, `selectedRating == rating` would
    return `false`, and the `rating` property’s value would be set to `3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign this method as the button action in the `for` loop of the `setupButtons`
    method after the statements setting the constraints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method to change the button state according to the rating that was set
    before the closing curly brace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To see how this works, let’s say that the `rating` property is set to `3`. The
    default state for each button is `.normal`.
  prefs: []
  type: TYPE_NORMAL
- en: The first button is at index `0`, so `button.isSelected` is 0 < 3, which returns
    `true`. Since the image for the `.selected` state is a filled star, this button’s
    image is set to a filled star. The same is true for the next two buttons.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth button is at index `3`, so `button.isSelected` is 3 < 3, which returns
    `false`. This means that the button’s state remains `.normal`. The image for the
    `.normal` state is a star outline, so this button’s image is set to a star outline.
    The same is true for the fifth button.
  prefs: []
  type: TYPE_NORMAL
- en: In short, when the `rating` property is set to `3`, the rating view displays
    the first three buttons with filled stars, and the remaining two buttons with
    star outlines.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need to call the `updateButtonSelectionStates()` method every time the
    `rating` property’s value changes. To do so, modify the `rating` property as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is known as a **property observer**, and every time the `rating` property’s
    value changes, the `updateButtonSelectionStates()` method will be called.
  prefs: []
  type: TYPE_NORMAL
- en: You have completed the implementation of the rating view. In the next section,
    you’ll add it to the Add New Journal Entry screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your custom view to the Add New Journal Entry screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, you have created a new `RatingView` class in your project and configured
    it to set its `rating` property when a star in it is tapped. In this section,
    you will set the identity of the stack view object above the **Get Location**
    switch in the **New Entry Scene** to the `RatingView` class, configure an outlet
    for it in the `AddJournalEntryViewController` class, and add code to use the `rating`
    property’s value when creating a new journal entry. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **AddJournalEntryViewController** file.
    Add a new outlet for a rating view in the `AddJournalEntryViewController` class
    after all other property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `prepare(for:sender:)` method to get the rating view’s `rating`
    property value when creating a new journal entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Main** storyboard file and select **New Entry Scene** in the document
    outline. Click the `UIStackView` object above the **Get Location** switch, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.3: Editor area showing UIStackView object above the Get Location
    switch'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Identity inspector button. Under **Custom Class**, set **Class**
    to `RatingView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4: Identity inspector with Class set to RatingView'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button. Verify the settings under **Stack View**,
    and under **View**, set **Background** to `Default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.5: Attributes inspector with Background set to Default'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **New Entry Scene** in the document outline, and click the Connections
    inspector button. Connect the `ratingView` outlet to the rating view in the **New
    Entry** **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.6: Connections inspector showing ratingView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Tap the **+** button to go to the Add New Journal Entry
    screen and you will see the rating view displayed above the **Get Location** switch.
    Add a journal entry title, body, and rating, and tap **Save**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.7: Simulator showing the rating view on the Add New Journal Entry
    screen'
  prefs: []
  type: TYPE_NORMAL
- en: A new journal entry with a rating is now visible on the Journal List screen.
    In the next section, you’ll modify the Journal Entry Detail screen to display
    the rating for this journal entry.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your custom view to the Journal Entry Detail screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you’re able to set a rating when you create a new journal entry
    using the Add New Journal Entry screen, but the rating you set is not visible
    on the Journal Entry Detail screen. You’ll add an outlet for a rating view and
    modify the code in the `JournalEntryDetailViewController` class, and you’ll add
    a rating view to the **Entry Detail Scene**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project navigator, click the **JournalEntryDetailViewController** file.
    Add an outlet for a rating view after all other property declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the code in the `viewDidLoad()` method to set the value of the rating
    view’s `rating` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Main** storyboard file and click **Entry Detail Scene** in the
    document outline. Select the stack view in the second table view cell. Click the
    Identity inspector button and, under **Custom Class**, set **Class** to `RatingView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.8: Identity inspector with Class set to RatingView'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Attributes inspector button and verify the settings under **Stack
    View**. Under **View**, untick the **User Interaction Enabled** checkbox (as the
    user should not be able to change the rating on the Journal Entry Detail screen),
    and set **Background** to `Default`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.9: Attributes inspector with Background set to Default'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Entry Detail Scene** in the document outline, and click the Connections
    inspector button. Connect the **ratingView** outlet to the rating view in the
    **Entry Detail** scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.10: Connections inspector showing ratingView outlet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run your app. Tap the journal entry you added in the previous section,
    and you’ll see the rating displayed in a rating view on the Journal Entry Detail
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B31371_19_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.11: Simulator showing the rating view on the Journal Entry Detail
    screen'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve successfully added and configured a rating view on the Journal Entry
    Detail screen! Good job!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a custom subclass of the `UIStackView` class that
    displays a journal entry rating in the form of stars, and you modified this subclass
    so users can set a rating for a journal entry by tapping it. After that, you added
    it to the Add New Journal Entry screen. Finally, you implemented it on the Journal
    Entry Detail screen.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to create custom views for your own apps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to work with photos from the camera or
    photo library.
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift%0D)'
  prefs: []
  type: TYPE_NORMAL
