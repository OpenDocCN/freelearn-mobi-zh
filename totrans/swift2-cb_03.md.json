["```swift\n    struct Question {\n        var question:String\n        var answer1:String\n        var answer2:String\n        var answer3:String\n        var rightAnswer:Int\n        var userAnswer:Int?\n\n        init(question:String, answer1:String, answer2:String, answer3:String, rightAnswer:Int){\n           self.question = question\n            self.answer1 = answer1\n            self.answer2 = answer2\n            self.answer3 = answer3\n            self.rightAnswer = rightAnswer\n        }\n    }\n    ```", "```swift\n    private var examTemplate = [Question]()\n    ```", "```swift\n    private func addGeneralKnowledgeQuestions(){\n      examTemplate += [\n        Question(question: \"In which year was Packt Pub founded?\",\n          answer1: \"2001\", answer2: \"2004\", answer3: \"1978\", rightAnswer: 2),\n        Question(question: \"What is the capital of Luxembourg?\",\n          answer1: \"Luxembourg City\", answer2: \"Diekirch\", answer3: \"Viena\", rightAnswer: 1)\n            ]\n    }\n\n    private func addComputersQuestions(){\n        examTemplate += [\n            Question(question: \"In which year did Bob Bemer, the creator of the 'escape key', die?\",\n              answer1: \"2004\", answer2: \"1980\", answer3: \"He is still alive\", rightAnswer: 1),\n            Question(question: \"How much RAM did Macintosh 128Kb have?\",\n              answer1: \"1 Gb\", answer2: \"1 byte\", answer3: \"128K\", rightAnswer: 3)\n            ]\n    }\n\n    private func addAstronomyQuestions(){\n        examTemplate += [\n            Question(question: \"What is the name of the solar system star?\",\n              answer1: \"Antonio Banderas\", answer2: \"Europe\", answer3: \"Sun\", rightAnswer: 3),\n            Question(question: \"How long is the astronomical unit?\",\n              answer1: \"150 millions of kilometers\", answer2: \"1 light year\", answer3: \"8 thousand inches\", rightAnswer: 1)\n            ]\n    }\n    ```", "```swift\n        private lazy var exam:[Question] = []\n        private lazy var currentQuestion = 0\n        private func createExam(){\n            func containsQuestion(question:String) -> Bool{\n                for i in exam{\n                    if question == i.question{\n                        return true\n                    }\n                }\n                return false\n            }\n            exam = []\n            currentQuestion = 0\n            while exam.count < 3 {\n                var question = examTemplate[ Int(arc4random_uniform(UInt32(examTemplate.count)))]\n                if !containsQuestion(question.question) {\n                    exam.append(question)\n                }\n            }\n        }\n    ```", "```swift\n    @IBOutlet var labelQuestion: UILabel!\n        @IBOutlet weak var buttonAnswer1: UIButton!\n        @IBOutlet weak var buttonAnswer2: UIButton!\n        @IBOutlet weak var buttonAnswer3: UIButton!\n        @IBOutlet weak var buttonAnswerIdontKnow: UIButton!\n\n        private func showCurrentQuestion(){\n            if currentQuestion < exam.count {\n                labelQuestion.text = exam[currentQuestion].question\n                buttonAnswer1.setTitle(exam [currentQuestion].answer1, forState: .Normal)\n                buttonAnswer2.setTitle(exam[currentQuestion].answer2, forState: .Normal)\n                buttonAnswer3.setTitle(exam[currentQuestion].answer3, forState: .Normal)\n                buttonAnswerIdontKnow.setTitle(\"I don't know\", forState: .Normal)\n            }else {\n              var total = 0\n              for i in exam {\n                total += i.rightAnswer == i.userAnswer? ? 1 : 0\n              }\n\n              let alert = UIAlertController(title: \"Score\", message: \"Your score is \\(total)\", preferredStyle:.Alert)\n              let startAgainAction = UIAlertAction(title:\"Start Again\", style.Default) { (action) -> void in \n                createExam()\n                showCurrentQuestion()\n      }\n      alert.addAction(startAgainAction)\n        self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }\n    ```", "```swift\n        @IBAction func answer(sender: UIButton) {\n            switch sender {\n            case buttonAnswer1:\n                exam[currentQuestion].userAnswer = 1\n            case buttonAnswer2:\n                exam[currentQuestion].userAnswer = 2\n            case buttonAnswer3:\n                exam[currentQuestion].userAnswer = 3\n            default:\n                print(\"I don't know\")\n\n            }\n            currentQuestion++\n            showCurrentQuestion()\n        }\n    ```", "```swift\n         override func viewDidLoad() {\n            super.viewDidLoad()\n            addGeneralKnowledgeQuestions()\n            addComputersQuestions()\n            addAstronomyQuestions()\n            createExam()\n            showCurrentQuestion()\n        }\n    ```", "```swift\n    struct Question {\n        var question:String\n        var answer1:String\n        var answer2:String\n        var answer3:String\n        var rightAnswer:Int\n        var userAnswer:Int? {\n            willSet(newAnswer){\n                if newAnswer < 2 || newAnswer > 3 {\n                    userAnswer = nil\n                     print(\"Wrong value, fixing it\")\n                }\n            }\n            didSet(oldValue){\n                valid = userAnswer != nil && userAnswer != rightAnswer\n            }\n        }\n        var valid = false\n\n        init(question:String, answer1:String, answer2:String, answer3:String, rightAnswer:Int){\n           self.question = question\n           self.answer1 = answer1\n           self.answer2 = answer2\n           self.answer3 = answer3\n           self.rightAnswer = rightAnswer\n        }\n    }\n    ```", "```swift\n        private func showCurrentQuestion(){\n            if currentQuestion < exam.count {\n                labelQuestion.text = exam[currentQuestion].question\n                buttonAnswer1.setTitle(exam[currentQuestion].answer1, forState: .Normal)\n                buttonAnswer2.setTitle(exam[currentQuestion].answer2, forState: .Normal)\n                buttonAnswer3.setTitle(exam[currentQuestion].answer3, forState: .Normal)\n                buttonAnswerIdontKnow.setTitle(\"I don't know\", forState: .Normal)\n            }else {\n                var total = 0\n                for i in exam {\n                    total += i.valid ? 1 : 0\n                }\n      let alert = UIAlertController(title: \"Score\", message: \"Your score is \\(total)\", preferredStyle:.Alert) self.presentViewController(alert, animated: true, completion: nil)\n            }\n        }\n    ```", "```swift\n        @IBAction func answer(sender: UIButton) {\n            switch sender {\n            case buttonAnswer1:\n                exam[currentQuestion].userAnswer = 1\n            case buttonAnswer2:\n                exam[currentQuestion].userAnswer = 2\n            case buttonAnswer3:\n                exam[currentQuestion].userAnswer = 3\n            default:\n                exam[currentQuestion].userAnswer = 0\n            }\n            currentQuestion++\n            showCurrentQuestion()\n        }\n    ```", "```swift\n    struct Position:CustomStringConvertable {\n        private var x:Int,y:Int\n        init(){\n            (x,y) = (0,0)\n        }\n        mutating func moveUp(){\n            self.y--\n        }\n        mutating func moveDown(){\n            self.y++\n        }\n        mutating func moveRight(){\n            self.x++\n        }\n        mutating func moveLeft(){\n            self.x--\n        }\n        mutating func meet(inout position:Position){\n            let newx = (self.x + position.x) / 2\n            var newy = (self.y + position.y) / 2\n            self.x = newx\n            self.y = newy\n            position.x = newx\n            position.y = newy\n        }\n        var description:String {\n            return \"\\(self.x)x\\(self.y)\"\n        }\n    }\n    ```", "```swift\n        @IBOutlet var labelC1: UILabel!\n        @IBOutlet var labelC2: UILabel!\n    ```", "```swift\n        var character1 = Position()\n        var character2 = Position()\n    ```", "```swift\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            displayPositionC1()\n            displayPositionC2()\n        }\n\n        private func displayPositionC1(){\n            labelC1.text = character1.description\n        }\n\n        private func displayPositionC2(){\n            labelC2.text = character2.description\n        }\n    ```", "```swift\n        @IBAction func upC1(sender: UIButton) {\n            character1.moveUp()\n            displayPositionC1()\n        }\n\n        @IBAction func downC1(sender: UIButton) {\n            character1.moveDown()\n            displayPositionC1()\n        }\n        @IBAction func leftC1(sender: UIButton) {\n            character1.moveLeft()\n            displayPositionC1()\n        }\n\n        @IBAction func rightC1(sender: UIButton) {\n            character1.moveRight()\n            displayPositionC1()\n        }\n\n        @IBAction func meet(sender: UIButton) {\n            character1.meet(&character2)\n            displayPositionC1()\n            displayPositionC2()\n        }\n    ```", "```swift\n    func arrayInit<T>(values:T...)->[T]{\n        var newArray = values\n        for var i=0;i < newArray.count * 2 ; ++i {\n                    let pos1 = Int(arc4random_uniform(UInt32(newArray.count)))\n            let pos2 = Int(arc4random_uniform(UInt32(newArray.count)))\n            (newArray[pos1], newArray[pos2]) = (newArray[pos2], newArray[pos1])\n        }\n        return newArray\n    }\n    ```", "```swift\n    @IBOutlet weak var textView: UITextView!\n    ```", "```swift\n        @IBAction func arrayInt(sender: AnyObject) {\n            let arr = arrayInit(5, 10, 15, 20, 25, 30)\n              textView.text = arr.map({ (element) -> String in\n                 return String(element)\n            }).joinWithSeparator(\"\\n\")\n    }\n\n        @IBAction func arrayString(sender: AnyObject) {\n            let arr = arrayInit(\"Hello\", \"I'm\", \"Edu\",\"Merry\", \"Christmas\")\n            textView.text = arr.joinWithSeparator(\"\\n\")\n        }\n    ```", "```swift\n    class PriorityQueue<T:Comparable> {\n\n        private var elements = [T]()\n        func enqueue(element:T) {\n            elements.append(element)\n            var index=elements.count-2\n            while index>=0 && elements[index] < elements[index+1] {\n                (elements[index],elements[index+1]) = (elements[index+1],elements[index])\n                index--\n            }\n        }\n\n        func dequeue() -> T {\n            return elements.removeAtIndex(0)\n        }\n\n        var size: Int {\n            return elements.count\n        }\n\n        func toArray() ->[T]{\n            return elements\n        }\n\n    }\n    ```", "```swift\n    class Passenger:Comparable, CustomStringConvertable {\n        enum Class:Int {\n            case ECONOMY=0, FIRST=1, BUSINESS=2\n\n            var value:Int{\n                return self.rawValue\n            }\n        }\n        var classtype:Class\n        var name:String\n        var id:String\n\n        init (name:String, id:String, classtype:Class = .ECONOMY){\n            self.name = name\n            self.id = id\n            self.classtype = classtype\n        }\n\n        var description:String{\n            var seattype:String\n                switch self.classtype{\n                case .ECONOMY:\n                    seattype = \"economy\"\n                case .FIRST:\n                    seattype = \"first\"\n                case .BUSINESS:\n                    seattype = \"business\"\n                default:\n                    seattype = \"unkown\"\n                }\n\n            return \"\\(self.name), with id \\(self.id) on \\(seattype) class\"\n        }\n    }\n\n    // Operators\n    func <(lhs: Passenger, rhs: Passenger) -> Bool{\n        return lhs.classtype.value < rhs.classtype.value\n    }\n\n    func ==(lhs: Passenger, rhs: Passenger) -> Bool{\n        return lhs.classtype == rhs.classtype\n    }\n\n    func !=(lhs: Passenger, rhs: Passenger) -> Bool{\n        return lhs.classtype != rhs.classtype\n    }\n\n    func <=(lhs: Passenger, rhs: Passenger) -> Bool{\n        return lhs < rhs || lhs == rhs\n    }\n\n    func >=(lhs: Passenger, rhs: Passenger) -> Bool{\n        return !(lhs < rhs)\n    }\n\n    func >(lhs: Passenger, rhs: Passenger) -> Bool{\n        return lhs != rhs && !(lhs < rhs )\n    }\n    ```", "```swift\n    class ViewController: UIViewController, UITableViewDataSource {\n    ```", "```swift\n        @IBOutlet weak var passengerName: UITextField!\n        @IBOutlet weak var idDocument: UITextField!\n        @IBOutlet weak var seatType: UITableView!\n        @IBOutlet weak var textView: UITextView!\n\n        private var passengersQueue = PriorityQueue<Passenger>()\n    ```", "```swift\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int{\n        return 3\n    }\n    ```", "```swift\n        func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell{\n            var cell:UITableViewCell\n            if let auxCell = tableView.dequeueReusableCellWithIdentifier(\"cell\") {\n                cell = auxCell\n            }else{\n                cell = UITableViewCell()\n            }\n            switch indexPath.row {\n            case 0:\n                cell.textLabel!.text = \"Economy class\"\n            case 1:\n                cell.textLabel!.text = \"First class\"\n            case 2:\n                cell.textLabel!.text = \"Business class\"\n            default:\n                break;\n            }\n\n            return cell\n        }\n    ```", "```swift\n        private func displayQueue () {\n                textView.text = (self.passengersQueue.toArray().map{\n                (var p)-> String in\n                return p.description\n                }).joinWithSeperator(\"\\n\")\n        }\n    ```", "```swift\n        @IBAction func enqueue(sender: AnyObject) {\n          if let indexPath = seatType.indexPathForSelectedRow {\n             var passenger = Passenger(name: passengerName.text, id: idDocument.text, classtype: Passenger.Class(rawValue: indexPath.row)!)\n                passengersQueue.enqueue(passenger)\n                self.displayQueue()\n            }else {\n              let alert = UIAlertController(title: \"Error\", message: \"You must select the seat type\", preferredStyle:.Alert)\n                self.presentViewController(alert, animated: true, completion: nil)\n\n            }\n        }\n\n        @IBAction func dequeue(sender: AnyObject) {\n            passengersQueue.dequeue()\n            displayQueue()\n        }\n    ```", "```swift\n    protocol Queue {\n        typealias ElementType\n        func enqueue(element:ElementType)\n        func dequeue() -> ElementType\n        var size: Int{\n            get\n        }\n    }\n    ```", "```swift\n    class PriorityQueue<T:Comparable>:Queue\n    ```"]