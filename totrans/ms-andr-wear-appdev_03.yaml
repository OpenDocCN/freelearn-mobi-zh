- en: Chapter 3. Developing Android Wear Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"All compromise is based on give and take, but there can be no give
    and take on fundamentals. Any compromise on mere fundamentals is a surrender.
    For it is all give and no take."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Mahatma Gandhi* |'
  prefs: []
  type: TYPE_TB
- en: In this chapter, we will be covering the concepts involved in the sample skeleton
    project that we imported using Android Studio in the previous chapter. We will
    be discussing the code involved in detail to help us gain some understanding of
    the fundamental building blocks of an Android Wear application.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we'll be creating a new Android Wear app from scratch using Android Studio.
    We'll walk through the steps involved in creating the app and discuss the code
    changes needed and run the app to see the desired outcome.
  prefs: []
  type: TYPE_NORMAL
- en: Let's roll up our sleeves and see some code in action.
  prefs: []
  type: TYPE_NORMAL
- en: Skeleton app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you recall from the previous chapter, we used Android Studio to import the
    sample project to build a skeleton wearable application. If you wonder where we
    got all the code from, here is the GitHub repository link for that project, [https://github.com/googlesamples/android-SkeletonWearableApp/](https://github.com/googlesamples/android-SkeletonWearableApp/).
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio gets updated all the time. At the time of writing, Android Studio
    2.0 preview 7 is the latest version currently available. It may or may not be
    the same version while you are reading this book.
  prefs: []
  type: TYPE_NORMAL
- en: If, for some reason, Android Studio doesn't let you import the Skeleton wearable
    app or the repository of the sample code is not available in Google's Samples
    GitHub repository, you can clone it from the fork I created for that project in
    my GitHub repository, [https://github.com/siddii/android-SkeletonWearableApp](https://github.com/siddii/android-SkeletonWearableApp).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have done any Android app development before, you'll be able to follow
    this chapter. If not, this is a good time to brush up on some Android application
    development basic concepts and foundations.
  prefs: []
  type: TYPE_NORMAL
- en: The Android manifest file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every Android application consists of an Android manifest file named `AndroidManifest.xml`.
    It contains all the essential information needed for the Android operating system
    to launch the application. The manifest file is used for declaring the activities,
    services, intents, SDK versions, features, permissions, and other application-specific
    components and behavioral elements for the Android application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should pay close attention to line number *23* of the Android manifest file
    that was included in the Skeleton wearable app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This line basically explains to the Android operating system that it is an
    Android Wear app. To prove this out, let''s try commenting out this line from
    the `AndroidManifest.xml` file and launch the application. You should see the
    following error message when you launch the application using an emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android manifest file](img/image00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Gradle build files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how the Gradle build files are configured. The `settings.gradle`
    file in the root folder includes all the modules for this project. In this case,
    it''s just one module, which is the `Wearable` module folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gradle build files](img/image00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that there are two `build.gradle` files. One is at the project
    level and the other is inside the `Wearable` folder's module level.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project''s `build.gradle` file is empty because we don''t have anything
    specific to the project build settings, whereas the `build.gradle` file in the
    `Wearable` module contains all the build configurations for this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gradle build files](img/image00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Lines 20, 21, and 22 of the `build.gradle` file specifies the external build
    dependencies for this project. Line 20 includes the dependency for **Google Play
    Services**, which is an integral part of the Android Wear platform. Google Play
    Services is used heavily for data synchronization and communication between the
    Android phones and wearable devices. We'll be covering them in detail in later
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Line 21 includes the dependency for the `v13` support library. The reason is
    that we use **Fragment** inside the `GridExampleActivity` class.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, line 22 includes the dependency for the wearable support library
    since it's a wearable application.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the configuration is pretty standard for Android applications, including
    the source path, compile and target SDK versions, and the app's version settings.
  prefs: []
  type: TYPE_NORMAL
- en: App activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The skeleton project consists of two activities, `MainActivity` and `GridExampleActivity`.
    The `MainActivity` activity contains a header text with `Main Activity` and three
    buttons inside `ScrollView` layout.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the `main_activity.xml` file to see how the component layout
    is structured. One of the biggest advantages to developing Android applications
    using Android Studio is its layout editor. Although it may not be precisely the
    same during runtime, it can give a closer idea in terms of how the UI components
    are rendered during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have opened the `main_activity.xml` file, make sure you have the
    **Preview** tool window selected on the right side of Android Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![App activities](img/image00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Android Studio layout editor will display the live preview for changes to
    layout files. It also helps to get an understanding of how the components will
    be laid out for different form factors. As we know, Android Wear comes in square
    and circle-shaped form factors, so it will be a good idea to check how the components
    are laid out in both square and circle forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the layout drop-down menu will display all the form factors available
    in the SDK and tool configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![App activities](img/image00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you select the **Android Wear Round** layout, then you'll be able to see
    how the `main_activity.xml` file will be rendered on round-faced Android Wear
    watches.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to provide the best user experience, you should make sure that the
    components are laid out and the users are able to access the UI elements without
    a problem. The only way we can do that is to test the app on various form factors
    and layout settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![App activities](img/image00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we progress further through the book, we'll use techniques that will help
    serve both square-shaped and circle-shaped Android Wear devices by leveraging
    some Android support libraries.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you'll have a basic understanding of how the skeleton wearable app was
    developed using some basic Android Wear API objects and components. Spend some
    time reading through `GridExampleActivity` and other parts of this project to
    get an idea of how all these pieces of the project are connected together.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't follow much of the code in this project, do not fear. We'll be
    digging into all these aspects of Android Wear application development in later
    chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let's build an Android Wear app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've been looking at the Skeleton wearable sample app that we cloned
    from Google's GitHub repository. We familiarized ourselves with how the skeleton
    app was structured and got some ideas of how the code and components are structured.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time for us to build our own Android Wear app. We'll be using Android
    Studio to create this app from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Android Studio welcome screen, click on **Start a new Android Studio
    project** option as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Configure the project with an application name, domain, and package name that
    suits your system settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Target Android Devices** screen, uncheck the **Phone and Tablet** option
    and make sure you select the **Wear** option. Android Studio will automatically
    select the safest minimum SDK needed to create the app based on the SDKs and system
    images you have installed on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to the default settings that were selected by Android Studio for
    this app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click the **Next** button, select **Blank Wear Activity**. By default,
    Android Studio will select  **Always On Wear Activity**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, keep the activity name and other configurations unchanged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After you click on the **Finish** button, Android Studio will take some time
    to compile and build the project.
  prefs: []
  type: TYPE_NORMAL
- en: Once it's done, you'll see the project with `MainActivity` and three layout
    files, `activity_main.xml`, `rect_activity_main.xml`, and `round_activity_main.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio will also create a default run configuration for running the
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on **Run** will list all the Android device emulators. You can select
    one from the list we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: After you select the emulator, the device will boot up and the Android Studio
    will deploy the app to the emulator. Be patient at this stage, because it might
    take a while for the device to start and run the app we just built. Try not to
    interfere with the running emulator as it might cause issues running the app.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it might sound easy to develop an Android application using emulators,
    the frustrating part is the emulator's boot-up and application load times. If
    you have the option to develop using a physical device, go for that rather than
    wasting lots of time waiting and watching.
  prefs: []
  type: TYPE_NORMAL
- en: At some point during the course of this book, we'll be developing using a physical
    Android phone and a wearable device. We'll cover the settings and configurations
    needed to develop using those devices when we get there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of how the screen looks after successfully running this
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add some customization to this project now. Update the `onCreate` method
    of the `MainActivity` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What we are doing here is basically setting a dynamic text to `mTextView` component
    with the content saying today's date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `rect_activity_main.xml` file with the following content. We have
    just updated the background color of the layout and updated the text view''s color
    and padding options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When you re-run the app, your output should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s build an Android Wear app](img/image00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you got stuck with any of the preceding steps, don't worry. The code we discussed
    is available on the GitHub repository ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_3](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_3)).
    Use that for reference or to compare against your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed various components and aspects of our Android Wear project by going
    over the sample code from the skeleton wearable app. We looked at Android Studio's
    layout editor and saw how it was used to preview live updates to layout files.
  prefs: []
  type: TYPE_NORMAL
- en: We developed `Today`, an Android Wear app, from scratch using Android Studio.
    We'll be extending that app as we progress further through this book.
  prefs: []
  type: TYPE_NORMAL
