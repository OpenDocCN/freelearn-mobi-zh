["```kt\nthrow RuntimeException(\"Test Crash\")\n```", "```kt\nclass FirebaseNotificationService: FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        Log.d(\"Firebase Token\", token)\n    }\n    override fun onMessageReceived(remoteMessage: RemoteMessage) {\n        super.onMessageReceived(remoteMessage)\n        sendNotification(remoteMessage)\n    }\n    private fun sendNotification(remoteMessage: RemoteMessage) {\n        val notification = NotificationCompat.Builder(applicationContext, \"Pets Apps\")\n            .setContentTitle(remoteMessage.notification?.title)\n            .setTicker(remoteMessage.notification?.ticker)\n            .setContentText(remoteMessage.notification?.body)\n            .setContentInfo(remoteMessage.notification?.body)\n             .setStyle(NotificationCompat.BigTextStyle().bigText(remoteMessage.notification?.body))\n            .setSmallIcon(R.drawable.ic_launcher_background)\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            createChannel(notification, \"Pets Apps\")\n        }\n    }\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun createChannel(notificationBuilder: NotificationCompat.Builder, id: String) {\n        notificationBuilder.setDefaults(Notification.DEFAULT_VIBRATE)\n        val channel = NotificationChannel(\n            id,\n            \"Pets Apps\",\n            NotificationManager.IMPORTANCE_HIGH\n        )\n        channel.description = \"Pets Apps\"\n        val notificationManager: NotificationManager =\n            getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}\n```", "```kt\n<service\n    android:name=\".firebase.FirebaseNotificationService\"\n    android:exported=\"false\">\n    <intent-filter>\n        <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n    </intent-filter>\n</service>\n```"]