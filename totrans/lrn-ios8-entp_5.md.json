["```swift\n[PHAsset fetchAssetsWithMediaType: options:];\n[PHAssetCollection fetchMomentsWithOptions:];\n[PHAssetCollection transientAssetCollectionWithAssets:title:];\n```", "```swift\n[startContentEditingWithInput:]\n[finishContentEditingWithCompletionHandler:]\n[canHandleAdjustmentData:]\n[cancelContentEditing]\n```", "```swift\nPHFetchResult fetchResults = PHAsset.FetchAssets (PHAssetMediaType.Image, null);\n```", "```swift\npublic override UICollectionViewCell GetCell (UICollectionView collectionView, NSIndexPath indexPath)\n{\n  var imageCell = (ImageCell)collectionView.DequeueReusableCell(cellId, indexPath);\n  imageMgr.RequestImageForAsset ((PHAsset)fetchResults[(uint)indexPath.Item], \n    thumbnaillSize,\n    PHImageContentMode.AspectFill, new PHImageRequestOptions (),(img, info) => {\n        imageCell.ImageView.Image = img;\n    });\n  return imageCell;\n}\n```", "```swift\nclass PhotoLibraryObserver : PHPhotoLibraryChangeObserver\n{\n  readonly PhotosViewController controller;\n  public PhotoLibraryObserver (PhotosViewController controller)\n  {\n    this.controller = controller;\n  }\n  public override void PhotoLibraryDidChange (PHChange changeInstance)\n  {\n    DispatchQueue.MainQueue.DispatchAsync (() => {\n      var changes = changeInstance.GetFetchResultChangeDetails (controller.fetchResults);\n      controller.fetchResults = changes.FetchResultAfterChanges;\n      controller.CollectionView.ReloadData ();\n    });\n  }\n}\n```", "```swift\nvoid ApplyNoirFilter (object sender, EventArgs e)\n{\n  Asset.RequestContentEditingInput (new PHContentEditingInputRequestOptions (), (input, options) => {\n    //\n    // perform the editing operation, which applies a noir filter in this case\n    var image = CIImage.FromUrl (input.FullSizeImageUrl);\n    image = image.CreateWithOrientation ((CIImageOrientation)input.FullSizeImageOrientation);\n    var noir = new CIPhotoEffectNoir {\n      Image = image\n    };\n    var ciContext = CIContext.FromOptions (null);\n    var output = noir.OutputImage;\n    var uiImage = UIImage.FromImage (ciContext.CreateCGImage (output, output.Extent));\n    imageView.Image = uiImage;\n    //\n    // save the filtered image data to a PHContentEditingOutput instance\n    var editingOutput = new PHContentEditingOutput(input);\n    var adjustmentData = new PHAdjustmentData();\n    var data = uiImage.AsJPEG();\n    NSError error;\n    data.Save(editingOutput.RenderedContentUrl, false, out error);\n    editingOutput.AdjustmentData = adjustmentData;\n    //\n    // make a change request to publish the changes form the editing output\n    PHPhotoLibrary.GetSharedPhotoLibrary.PerformChanges (\n      () => {\n        PHAssetChangeRequest request = PHAssetChangeRequest.ChangeRequest(Asset);\n        request.ContentEditingOutput = editingOutput;\n      },\n    (ok, err) => Console.WriteLine (\"photo updated successfully: {0}\", ok));\n  });\n}\n```", "```swift\nNSUserActivity* myActivity = [[NSUserActivity alloc]\n   initWithActivityType: @\"com.myCompany.myBrowser.browsing\"];\nmyActivity.userInfo = @{ ... };\nmyActivity.title = @\"Browsing\";\n[myActivity becomeCurrent];\n```", "```swift\n    // UIResponder and NSResponder have a userActivity property\n    NSUserActivity *currentActivity = [self userActivity];\n\n   // Build an activity type using the app's bundle identifier\n    NSString *bundleName = [[NSBundle mainBundle] bundleIdentifier];\n    NSString *myActivityType = [bundleName stringByAppendingString:@\".selected-list\"];\n\n    if(![[currentActivity activityType] isEqualToString:myActivityType]) {\n        [currentActivity invalidate];\n\n        currentActivity = [[NSUserActivity alloc]\n          initWithActivityType:myActivityType];\n        [currentActivity setDelegate:self];\n        [currentActivity setNeedsSave:YES];\n\n        [self setUserActivity:currentActivity];\n\n    } else {\n\n      // Already tracking user activity of this type\n      [currentActivity setNeedsSave:YES];\n    }\n```", "```swift\nNSUserActivity* myActivity = [[NSUserActivity alloc]\n                      initWithActivityType: @\"com.myCompany.myReader.reading\"];\n\n// Initialize userInfo\nNSURL* webpageURL = [NSURL URLWithString:@\"http://www.myCompany.com\"];\nmyActivity.userInfo = @{\n             @\"docName\" : currentDoc,\n             @\"pageNumber\" : self.pageNumber,\n             @\"scrollPosition\" : self.scrollPosition\n};\n```", "```swift\n- (void)updateUserActivityState:(NSUserActivity *)userActivity {\n    . . .\n  [userActivity setTitle: self.activityTitle];\n  [userActivity addUserInfoEntriesFromDictionary: self.activityUserInfo];\n}\n```", "```swift\n- (BOOL)application:(NSApplication *)application\n             continueUserActivity: (NSUserActivity *)userActivity\n               restorationHandler: (void (^)(NSArray*))restorationHandler {\n    BOOL handled = NO;\n    // Extract the payload\n    NSString *type = [userActivity activityType];\n    NSString *title = [userActivity title];\n    NSDictionary *userInfo = [userActivity userInfo];\n    // Assume the app delegate has a text field to display the activity information\n    [appDelegateTextField setStringValue: [NSString stringWithFormat:\n        @\"User activity is of type %@, has title %@, and user info %@\",\n        type, title, userInfo]];\n\n    restorationHandler(self.windowControllers);\n    handled = YES;\n\n    return handled;\n}\n```", "```swift\n{\n    \"activitycontinuation\": {\n    \"apps\": [ \"YWBN8XTPBJ.com.example.myApp\",\n              \"YWBN8XTPBJ.com.example.myOtherApp\" ]\n    }\n}\n```", "```swift\necho '{\"activitycontinuation\":{\"apps\":[\"YWBN8XTPBJ.com.example.myApp\",\n\"YWBN8XTPBJ.com.example.myOtherApp\"]}}' > json.txt\n cat json.txt | openssl smime -sign -inkey example.com.key\n -signer example.com.pem\n -certfile intermediate.pem\n -noattr -nodetach\n -outform DER > apple-app-site-association\n\n```", "```swift\nNSUserActivity* activity = [[NSUserActivity alloc] init];\nactivity.title = @\"Editing Mail\";\nactivity.supportsContinuationStreams = YES;\nactivity.delegate = self;\n[activity becomeCurrent];\n```", "```swift\n- (BOOL)application:(UIApplication *)application\n        continueUserActivity: (NSUserActivity *)userActivity\n        restorationHandler: (void(^)(NSArray *restorableObjects))restorationHandler\n{\n    [userActivity getContinuationStreamsWithCompletionHandler:^(\n                  NSInputStream *inputStream,\n                  NSOutputStream *outputStream, NSError *error) {\n\n        // Do something with the streams\n\n    }];\n\n  return YES;\n}\n```"]