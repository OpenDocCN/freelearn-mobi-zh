["```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\" \n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval file = File(filePahtName)\n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval file = File(filePahtName)\nval fileText: String = file.readText()\nprintln(fileText)\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\" \n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval stream = File(filePahtName).inputStream()\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval stream = File(fileName).inputStream()\nstream.use {\n    it.readBytes().also { println(String(it)) }\n}\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\" \n```", "```kt\nval filePahtName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval file = File(filePahtName)\n```", "```kt\nval filePathName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file1.txt\"\nval file = File(fileName)\nval fileLines = file.readLines()\nfileLines.forEach { println(it) }\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\nfile.apply {\n    val text =\n \"\\\"No one in the brief history of computing \" +\n \"has ever written a piece of perfect software. \" +\n \"It's unlikely that you'll be the first.\\\" - Andy Hunt\" \n```", "```kt\n writeText(text) \n}\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\nfile.apply {\n    val text =\n        \"\\\"No one in the brief history of computing \" +\n          \"has ever written a piece of perfect software. \" +\n          \"It's unlikely that you'll be the first.\\\" - Andy Hunt\"\n    writeText(text)\n}\nfile.readText().apply { println(this) }\n```", "```kt\n\"No one in the brief history of computing has ever written a piece of perfect software. It's unlikely that you'll be the first.\" - Andy Hunt\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\nif (file.exists()) file.delete()\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\nif (file.exists()) file.delete()\n\nfile.apply {\n    appendText(\"\\\"A language that doesn't affect the way you think \")\n appendText(\"about programming \")\n appendText(\"is worth knowing.\\\"\")\n appendText(\"\\n\")\n appendBytes(\"Alan Perlis\".toByteArray())\n}\n```", "```kt\nval fileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}temp_file\"\nval file = File(fileName)\nif (file.exists()) file.delete()\n\nfile.apply {\n    appendText(\"\\\"A language that doesn’t affect the way you think \")\n    appendText(\"about programming \")\n    appendText(\"is worth knowing.\\\"\")\n    appendText(\"\\n\")\n    appendBytes(\"Alan Perlis\".toByteArray())\n}\n\nfile.readText().let { println(it) }\n```", "```kt\n\"A language that doesn’t affect the way you think about programming is worth knowing.\"\nAlan Perlis\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval sourceFileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2.txt\"\nval sourceFile = File(sourceFileName)\n```", "```kt\nval sourceFileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2.txt\"\nval sourceFile = File(sourceFileName)\n\nval targetFileName =         \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2_copy.txt\"\nval targetFile = File(targetFileName)\n```", "```kt\nval sourceFileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2.txt\"\nval sourceFile = File(sourceFileName)\n\nval targetFileName =     \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2_copy.txt\"\nval targetFile = File(targetFileName)\n\nif (targetFile.exists()) targetFile.delete()\n```", "```kt\nval sourceFileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2.txt\"\nval sourceFile = File(sourceFileName)\n\nval targetFileName =     \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2_copy.txt\"\nval targetFile = File(targetFileName)\n\nif (targetFile.exists()) targetFile.delete()\n\nsourceFile.copyTo(targetFile)\n```", "```kt\nval sourceFileName = \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2.txt\"\nval sourceFile = File(sourceFileName)\n\nval targetFileName =     \"src${SEPARATOR}main${SEPARATOR}resources${SEPARATOR}file2_copy.txt\"\nval targetFile = File(targetFileName)\n\nif (targetFile.exists()) targetFile.delete()\n\nsourceFile.copyTo(targetFile)\n\nFile(sourceFileName).readText().apply { println(this) }\nFile(targetFileName).readText().apply { println(this) }\n```", "```kt\n\"Testing can show the presence of errors, but not their absence.\" - E. W. Dijkstra\n\"Testing can show the presence of errors, but not their absence.\" - E. W. Dijkstra\n```", "```kt\nimport java.io.File.separator as SEPARATOR\n```", "```kt\nval directoryPath = \"src${SEPARATOR}main${SEPARATOR}resources\"\nval fileTreeWalk: FileTreeWalk = File(directoryPath).walk()\n```", "```kt\nval directoryPath = \"src${SEPARATOR}main${SEPARATOR}resources\"\n\nval fileTreeWalk: FileTreeWalk = File(directoryPath).walk()\nfileTreeWalk\n .filter { it.isFile }\n        .filter { it.extension == \"txt\" }\n        .filter { it.readBytes().isNotEmpty() }\n        .forEach {\n            it.apply {\n                println(path)\n println(readText())\n println()\n }\n        }\n```"]