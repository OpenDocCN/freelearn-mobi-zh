- en: Chapter 9.  Material Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*"This world is but a canvas to our imagination."                          
                                           - Henry David Thoreau*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we provide a conceptual understanding of material design and
    touch upon a few key principles specific to wearable app design and development.
    We solidify our understanding by extending our `Todo` app from previous chapters
    to incorporate a navigation drawer that lets us switch between `Todo` categories
    and view items and perform actions specific to each category.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code accompanying this chapter is available for reference on GitHub ([https://github.com/siddii/mastering-android-wear/tree/master/Chapter_9](https://github.com/siddii/mastering-android-wear/tree/master/Chapter_9)).
    For the sake of brevity, only code snippets are included as needed. The reader
    is encouraged to download the referenced code from GitHub and follow along as
    they progress through the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching material design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your primary resource to understanding material design is [material.google.com](http://material.google.com),
    which is the living online documentation outlining the tenets and principles of
    material design. It really ought to be bookmarked by any serious designer or developer
    enthused by material design.
  prefs: []
  type: TYPE_NORMAL
- en: While we encourage you to read through Google's documentation, we feel that
    it would not be terribly superfluous if we advanced an approach on how to think
    about material design. Our goal is to give you, as a reader interested in the
    material design philosophy, an intuitive and symbolic understanding of the paradigm.
    We hope that this brief introduction readies you with a mindset that will expedite
    your journey through the material design online documentation and stimulate a
    level of creativity that should leave you well-positioned to project your imagination
    onto tangible design ideas for your wearable apps.
  prefs: []
  type: TYPE_NORMAL
- en: This section is only intended for those of us who may be new to the idea and
    may need a primer that is hopefully sufficient to light a spark and get us thinking
    anew.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the world
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can go over a formal definition of material design, maybe even more than
    one. But, that would not be a good use of our time. Google's documentation does
    a great job at that and more. Rather than getting caught up in articulations of
    what material design is, let's step back and understand what exactly the motivation
    behind it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, let us consider the scenario where you are at a coffee shop,
    sitting at a table. Take a look at the empty tabletop in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the world](img/image00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Your tabletop has great potential to become your workspace. Let's call that
    potential **affordance**. The term affordance generally means a possibility of
    an action of an object or environment. For instance, looking at a steering wheel
    of a car, it is natural to think that it should be rotated to make it operational
    rather than pulled or pushed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s spend a moment and study our workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: It is flat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has clear boundaries; in this case, the continuous edge of the circle that
    defines the shape of our table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In its initial state, it holds no objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s stop there and interact with our table a little bit. Here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the world](img/image00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now our table is not empty anymore. Let''s continue with our observations:'
  prefs: []
  type: TYPE_NORMAL
- en: Objects that get on the table, stay on the table; they don't slide off by themselves,
    nor do they float away (thank you, gravity).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects can be moved on the table subject to its bounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only objects that we care about are on the table. Objects that we don't care
    about, we tend to take them off the table. Do you see my notepad on there? Not
    yet, because I haven't cared about it enough.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s change this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interacting with the world](img/image00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, this is starting to look a bit more familiar now. Here are some more
    observations:'
  prefs: []
  type: TYPE_NORMAL
- en: Objects share space if they need to be readily accessible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an object has my attention, it is on top.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At any given time, each object on the table occupies a specific (how should
    I say it) elevation depending on whether it is on top of everything else, at the
    bottom (that is, directly on the table), or between other objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the number of objects on the table increases, the affordance can increase.
    Affordance is a term used in **Human Computer Interaction** (**HCI**) to describe
    the possible actions a user can take while interacting with the objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can go on and on, making all sorts of intelligent observations about what
    is possible and what isn't with respect to our surface (the table) and the objects
    on it. What's important, however, is that all of these observations are completely
    unnecessary to our successful use of the table and the heap of objects we pile
    on to it to help us get through all our work, or play, as the case may be.
  prefs: []
  type: TYPE_NORMAL
- en: The reasons for this are likely more suited to a talk on HCI or more broadly,
    the fields of perceptive/cognitive/environmental psychology. All we need to understand
    and appreciate is that our intuitive understanding of how we use surfaces and
    interact with them can hold the key to a productive and efficient design of user
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: A visual language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The question to ask is how does all this help us design better user interfaces?
  prefs: []
  type: TYPE_NORMAL
- en: The designers at Google have distilled our knowledge of, and experience with,
    how we interact with surfaces in the real world into a set of tenets and principles
    collectively referred to as **Material Design**. These tenets and principles are
    laid out at [material.google.com](http://material.google.com), which should be
    our primary reference for all things material design.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What do we mean by the term material?
  prefs: []
  type: TYPE_NORMAL
- en: It is worth clarifying that when Google documentation uses the term *material*,
    it is essentially used to refer to any of the graphical objects in your visual
    design. These may be navigational objects, action bars, dialogs, and so on. Each
    material object you can interact with has dimensions (height and width), it is
    of a standard thickness, and it is located on an imaginary surface at a specific
    elevation (along the *z*-axis) in the three-dimensional space of the view in question.
  prefs: []
  type: TYPE_NORMAL
- en: To equip ourselves with an understanding of what material design is, it is required
    that we adopt a mindset necessary to material design thinking. Of course, the
    way we interact with the real world does not always translate directly to the
    way we interact with devices. But where there is an overlap, it must be exploited
    to employ the user's intuitive powers to further the usability of the system.
    Where our interaction with the real world is quite limited, software enriches
    the user experience by expanding the realm of possibilities to surpass that of
    the physical world, while at all times respecting and engaging user intuition.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you read through the precepts at [material.google.com](http://material.google.com),
    you will come across detailed discussions of the following, to cite a few:'
  prefs: []
  type: TYPE_NORMAL
- en: The idea of material inspired by paper and ink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key light and ambient light as visual cues to elevation (shadow size and sharpness)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The motion respects the user as the prime initiator of movement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each material object has three dimensions (*x*, *y*, and *z* coordinates) and
    always occupies a fixed z-axis position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects are presented to the user as seamlessly as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rules of physics are respected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the rules are broken, they are broken intentionally, for instance, to capture
    the user's attention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How objects can and should be manipulated and how they should not be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material motion and transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core iconography and typography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigational components and patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The adoption of material design philosophy in our design and development practices
    becomes even more important when working with apps for wearable devices where
    the form factor is decreased significantly, thereby increasing our usability challenges.
    Building upon these widely recognized metaphors is key to ensuring the usability
    and longevity of our wearable apps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's write some code.
  prefs: []
  type: TYPE_NORMAL
- en: To-do item menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's augment the `Today Todo` app with a powerful design metaphor—*navigation
    drawers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is add a `Todos` action to our `arrays.xml` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how it shows up on the list menus. Go ahead and click on the `Todos`
    menu item and we''ll interact with the items in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![To-do item menus](img/image00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will implement a menu for our `Todo` app using the `WearableNavigationDrawer`
    component from the Android Wear API. The menu will let us choose a different view
    (tab) corresponding to the type of to-do item (for example, home, work, and so
    on) and list to-do items of that type when the drawer tab is selected.
  prefs: []
  type: TYPE_NORMAL
- en: About the navigation drawer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigation drawer is a material object accessible from a sheet that slides down
    from the top edge of the screen. A navigation drawer is ideally suited for apps
    that have multiple views. Pagination dots guide users between views through a
    left or right swipe.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation drawers offer a feature whereby the content of each view becomes
    visible when the user scrolls to the top of the view. The drawer stays open for
    five seconds if idle, after which it is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: Complementing the navigation drawer is an action drawer object that is accessible
    from a material sheet that slides up from the bottom edge of the screen. Swiping
    up reveals the action drawer that holds additional actionable content.
  prefs: []
  type: TYPE_NORMAL
- en: The TodosActivity class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Implementing a navigation drawer involves creating a drawer layout using the
    `WearableDrawerLayout` class and adding to it a view that contains the main content
    of the screen. This primary view has child views that contain the contents of
    the drawer. The `TodosActivity` class will control navigation drawers and initialize
    drawer layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The TodoItemTypeFragment class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `TodoItemTypeFragment` class is an inner class of the `TodosActivity` activity
    and contains content for each type of to-do item. For the sake of simplicity,
    we show some static content (highlighted in the following code). Refer to [Chapter
    5](part0041.xhtml#aid-173721 "Chapter 5. Synchronizing Data"), *Synchronizing
    Data*, for information on synchronizing data between wearable and handheld apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the to-do item card will look like. Note that the `Home` to-do
    item is selected as default, as mentioned in the preceding code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TodoItemTypeFragment class](img/image00209.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The NavigationAdapter class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigation adapter controls what''s shown in a navigational state. We implement
    the `WearableNavigationDrawerAdapter` class to populate the contents of the navigation
    drawer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Navigation item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While on the **Home Todos** screen (if you recall, `Home` was the default type),
    let''s swipe down from the top. As expected, the `Home` to-do type was pre-selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation item](img/image00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The WearableDrawerLayout class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `activity_todo_main.xml` file contains the definition of the root drawer
    layout containing a top navigation drawer and a bottom action drawer. Take note
    of the menu layout highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Menu items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `activity_todo_drawer_menu.xml` file contains the definitions of the individual
    drawers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'While on the `Home Todos` index card (shown in a previous image), swiping from
    bottom to the top will show the action drawer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menu items](img/image00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Menu listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking on individual menu items, we just display the toast message. Like
    we said earlier, we want to make the code concise and easily readable. Based on
    the chapters we covered earlier, we should have an understanding of how to perform
    data synchronization for these individual menu actions. We have used the `onMenuItemClick` class
    to perform the menu listener activity, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking on the **Add Todo** option performs the following action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menu listener](img/image00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Switching to-do types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now if we pull the drawer down from the top edge of the screen and swipe from
    right to left, we switch to a different to-do item as shown in the following image,
    which in effect displays a new navigation item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to-do types](img/image00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we pull the drawer back to the top, it has the effect of setting the navigation
    item to the current selection. This happens using the `onItemSelected` method
    of the `WearableActionDrawer.OnMenuItemClickListener` class implemented by the
    `TodosActivity` activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what we see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to-do types](img/image00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pulling from bottom to top, we see the menu items such as **Add Todo**, **Update
    Todo List**, and **Clear List** again. Here is what we see when we click on the
    **Clear List** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching to-do types](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we obtained an intuitive understanding of what material design
    really is, and we explored several key principles relevant to Android Wear design
    and development. We implemented navigation drawers for our `Todo` app that add
    the ability to switch between to-do types and view the to-do items that perform
    actions specific to each type.
  prefs: []
  type: TYPE_NORMAL
