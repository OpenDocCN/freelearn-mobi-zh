["```swift\n    private UIPageViewController pageViewController;\n    private int pageCount = 3;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      Page firstPage = new Page(0);\n      this.pageViewController = new UIPageViewController(UIPageViewControllerTransitionStyle.PageCurl, UIPageViewControllerNavigationOrientation.Horizontal, UIPageViewControllerSpineLocation.Min);\n      this.pageViewController.SetViewControllers(new UIViewController[] { firstPage }, UIPageViewControllerNavigationDirection.Forward, false, s => { });\n      this.pageViewController.GetNextViewController = this.GetNextViewController;\n      this.pageViewController.GetPreviousViewController = this.GetPreviousViewController;\n      this.pageViewController.View.Frame = this.View.Bounds;\n      this.View.AddSubview(this.pageViewController.View);\n    }\n\n    private UIViewController GetNextViewController(UIPageViewController pageController, UIViewController referenceViewController)\n    {\n\n      Page currentPageController = referenceViewController as Page;\n\n      if (currentPageController.PageIndex >= (this.pageCount - 1))\n      {\n\n        return null;\n\n      }  else\n      {\t\n        int nextPageIndex = currentPageController.PageIndex + 1;\n        return new Page(nextPageIndex);\n\n      }\n    }\n\n    private UIViewController GetPreviousViewController(UIPageViewController pageController, UIViewController referenceViewController)\n    {\n\n      Page currentPageController = referenceViewController as Page;\n      if (currentPageController.PageIndex <= 0)\n      {\n        return null;\n      }  else\n      {\n\n        int previousPageIndex = currentPageController.PageIndex - 1;\n\n        return new Page(previousPageIndex);\n\n      }\n    }\n    ```", "```swift\n    public Page (int pageIndex) : base (\"Page\", null)\n    {\n      this.PageIndex = pageIndex;\n    }\n\n    public int PageIndex\n    {\n      get;\n      private set;\n    }\n    ```", "```swift\n    this.imgView.Image = UIImage.FromFile(string.Format(\"images/{0}.jpg\", this.PageIndex + 1));\n      this.lblPageNumber.Text = string.Format(\"Page {0}\", this.PageIndex + 1);\n    ```", "```swift\nthis.pageViewController = new UIPageViewController(UIPageViewControllerTransitionStyle.PageCurl, UIPageViewControllerNavigationOrientation.Horizontal, UIPageViewControllerSpineLocation.Min);\n```", "```swift\nthis.pageViewController.SetViewControllers(new UIViewController[] { firstPage }, UIPageViewControllerNavigationDirection.Forward, \n  false, s => { });\n```", "```swift\nUIViewController GetNextViewController(UIPageViewController pageController, UIViewController referenceViewController);\nUIViewController GetPreviousViewController(UIPageViewController pageController, UIViewController referenceViewController);\n```", "```swift\nthis.pageViewController.View.Frame = this.View.Bounds;\n  this.View.AddSubview(this.pageViewController.View);\n```", "```swift\n    private UIActivityViewController shareController;\n    public override void ViewDidLoad ()\n    {\n      base.ViewDidLoad ();\n      this.btnShare.TouchUpInside += async (sender, e) => {\n        NSString link = new NSString(\"http://software.tavlikos.com\");\n        this.shareController = new UIActivityViewController(new NSObject[] {\n          link\n        }, null);\n        this.shareController.CompletionHandler = this.ActivityCompleted;\n\n        await this.PresentViewControllerAsync(this.shareController, true);\n      };\n    }\n    private void ActivityCompleted(NSString activityType, bool completed)\n    {\n      Console.WriteLine(\"Activity type: {0}\", activityType);\n      Console.WriteLine(\"Completion: {0}\", completed);\n    }\n    ```", "```swift\nthis.shareController = new UIActivityViewController(new NSObject[] {\n  link\n}, null);\n```", "```swift\nthis.shareController.CompletionHandler = this.ActivityCompleted;\n//..\nprivate void ActivityCompleted(NSString activityType, bool completed)\n{\n  Console.WriteLine(\"Activity type: {0}\", activityType);\n  Console.WriteLine(\"Completion: {0}\", completed);\n}\n```", "```swift\nawait this.PresentViewControllerAsync(this.shareController, true);\n```", "```swift\nthis.shareController.ExcludeActivityTypes = new NSString[] { \"com.apple.UIKit.activity.Mail\" };\n```", "```swift\n    public class MyTransitionAnimator : UIViewControllerAnimatedTransitioning\n    {\n      public bool IsPresenting { get; set; }\n      public override double TransitionDuration (IUIViewControllerContextTransitioning transitionContext) {\n        return 1;\n      }\n      public override void AnimateTransition (IUIViewControllerContextTransitioning transitionContext) {\n        if (this.IsPresenting) {\n          UIView containerView = transitionContext.ContainerView;\n          UIViewController toViewController = transitionContext.GetViewControllerForKey(UITransitionContext.ToViewControllerKey);\n          containerView.AddSubview(toViewController.View);\n          RectangleF frame = toViewController.View.Frame;\n          toViewController.View.Frame = RectangleF.Empty;\n          UIView.Animate(this.TransitionDuration(transitionContext), () => toViewController.View.Frame = new RectangleF (20f, 20f, frame.Width - 40f, frame.Height - 40f), () => transitionContext.CompleteTransition (true));\n        } else {\n          UIViewController fromViewController = transitionContext.GetViewControllerForKey(UITransitionContext.FromViewControllerKey);\n          RectangleF frame = fromViewController.View.Frame;\n          frame = RectangleF.Empty;\n          UIView.Animate(this.TransitionDuration(transitionContext), () => fromViewController.View.Frame = frame, () => transitionContext.CompleteTransition (true));\n        }\n      }\n    }\n    public class MyTransitionDelegate : UIViewControllerTransitioningDelegate\n    {\n      private MyTransitionAnimator animator;\n      public override IUIViewControllerAnimatedTransitioning PresentingController (UIViewController presented, UIViewController presenting, UIViewController source)\n      {\n\n        this.animator = new MyTransitionAnimator();\n        this.animator.IsPresenting = true;\n        return this.animator;\n      }\n      public override IUIViewControllerAnimatedTransitioning GetAnimationControllerForDismissedController (UIViewController dismissed) {\n        this.animator.IsPresenting = false;\n        return this.animator;\n      }\n    }\n    ```", "```swift\n    this.btnPresent.TouchUpInside += async (sender, e) => {\n      ModalController modalController = new ModalController();\n      modalController.ModalPresentationStyle = UIModalPresentationStyle.Custom;\n      modalController.TransitioningDelegate = new MyTransitionDelegate();\n      await this.PresentViewControllerAsync(modalController, true);\n    };\n    ```", "```swift\npublic class MyTransitionAnimator : UIViewControllerAnimatedTransitioning\n```", "```swift\nUIView containerView = transitionContext.ContainerView;\n```", "```swift\nUIViewController toViewController = transitionContext.GetViewControllerForKey(UITransitionContext.ToViewControllerKey);\n```", "```swift\ncontainerView.AddSubview(toViewController.View);\n//..\nUIView.Animate(this.TransitionDuration(transitionContext), () => toViewController.View.Frame = new RectangleF(20f, 20f, frame.Width, frame.Height), () => transitionContext.CompleteTransition(true));\n```", "```swift\npublic class MyTransitionDelegate : UIViewControllerTransitioningDelegate\n```", "```swift\nthis.animator = new MyTransitionAnimator();\nthis.animator.IsPresenting = true;\nreturn this.animator;\n```", "```swift\nthis.animator.IsPresenting = false;\nreturn this.animator;\n```", "```swift\nmodalController.ModalPresentationStyle = UIModalPresentationStyle.Custom;\nmodalController.TransitioningDelegate = new MyTransitionDelegate();\n```", "```swift\n    private RectangleF imageRect;\n    private UIDynamicAnimator animator;\n    ```", "```swift\n    this.View.InsertSubviewBelow(this.imgView, this.btnReset);\n    this.imageRect = this.imgView.Frame;\n    this.imgView.Image = UIImage.FromFile(\"1.jpg\");\n    this.animator = new UIDynamicAnimator(this.View);\n    ```", "```swift\n    this.btnDrop.TouchUpInside += (sender, e) => {\n      UIGravityBehavior gravity = new UIGravityBehavior(this.imgView);\n      UICollisionBehavior collision = new UICollisionBehavior(this.imgView);\n      collision.TranslatesReferenceBoundsIntoBoundary = true;\n      this.animator.AddBehaviors(gravity, collision);\n    };\n    this.btnReset.TouchUpInside += (sender, e) => {\n      this.animator.RemoveAllBehaviors();\n      this.imgView.Frame = this.imageRect;\n    };\n    ```", "```swift\nthis.animator = new UIDynamicAnimator(this.View);\n```", "```swift\nUIGravityBehavior gravity = new UIGravityBehavior(this.imgView);\n```", "```swift\nUICollisionBehavior collision = new UICollisionBehavior(this.imgView);\ncollision.TranslatesReferenceBoundsIntoBoundary = true;\n```", "```swift\nthis.animator.AddBehaviors(gravity, collision);\n```", "```swift\nUIDynamicItemBehavior dynBehavior = new UIDynamicItemBehavior(this.imgView);\ndynBehavior.Density = 1f;\ndynBehavior.Elasticity = 0.7f;\ndynBehavior.Friction = 1f;\n```", "```swift\nthis.animator.AddBehaviors(gravity, collision, dynBehavior);\n```", "```swift\n    using MonoTouch.AVFoundation;\n    ```", "```swift\n    this.txtEntry.ShouldReturn = (textField) => textField.ResignFirstResponder();\n    this.btnSpeak.TouchUpInside += (sender, e) => {\n      AVSpeechSynthesizer synth = new AVSpeechSynthesizer();\n      AVSpeechUtterance utterance = new AVSpeechUtterance(this.txtEntry.Text);\n      utterance.Rate = 0.3f;\n      utterance.Voice = AVSpeechSynthesisVoice.FromLanguage(\"en-US\");\n      synth.SpeakUtterance(utterance);\n    };\n    ```", "```swift\nAVSpeechSynthesizer synth = new AVSpeechSynthesizer();\nAVSpeechUtterance utterance = new AVSpeechUtterance(this.txtEntry.Text);\n```", "```swift\nutterance.Rate = 0.3f;\nutterance.Voice = AVSpeechSynthesisVoice.FromLanguage(\"en-US\");\n```", "```swift\nsynth.SpeakUtterance(utterance);\n```", "```swift\nforeach (AVSpeechSynthesisVoice eachVoice in AVSpeechSynthesisVoice.GetSpeechVoices()) {\n  Console.WriteLine(eachVoice.Description);\n}\n```"]