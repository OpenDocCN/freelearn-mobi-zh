["```swift\npreconditionFailure(\"Must be overridden\")\n```", "```swift\nclass Logger {\n  static var ERROR = 1\n  static var INFO = 2\n  static var DEBUG = 3\n\n  var mask:Int?\n  var next:Logger?\n\n  func nextHandler(nextLogger:Logger) -> Logger? {\n    next = nextLogger\n    return next\n  }\n\n  func message(message: String, priority: Int){\n    if priority <= mask {\n      writeMessage(message)\n      if let next = next {\n        next.message(message, priority: priority)\n      }\n    }\n  }\n\n  func writeMessage(message: String) {\n    preconditionFailure(\"Must be overridden\")\n  }\n\n  static func prepareDefaultChain() -> Logger? {\n    var l: Logger?\n    var l1: Logger?\n\n    l = StdOutLogger(mask: Logger.DEBUG)\n    l1 = l!.nextHandler(EmailLogger(mask: Logger.INFO))\n    l1 = l1!.nextHandler(ErrLogger(mask: Logger.ERROR))\n    return l\n  }}\n```", "```swift\n    l = StdOutLogger(mask: Logger.DEBUG)\n    l1 = l!.nextHandler(EmailLogger(mask: Logger.INFO))\n    ```", "```swift\nclass StdOutLogger: Logger {\n  init(mask: Int) {\n    super.init()\n    self.mask = mask\n  }\n\n  override func writeMessage(message: String) {\n    print(\"Sending to StdOutLogger: \\(message)\")\n  }\n}\n```", "```swift\nclass EmailLogger: Logger {\n  init(mask: Int) {\n    super.init()\n    self.mask = mask\n  }\n\n  override func writeMessage(message: String) {\n    print(\"Sending by Email: \\(message)\")\n  }\n}\n```", "```swift\nclass ErrLogger: Logger {\n  init(mask: Int) {\n    super.init()\n    self.mask = mask\n  }\n\n  override func writeMessage(message: String) {\n    print(\"Sending to ErrorLogger: \\(message)\")\n  }\n}\n```", "```swift\nprint(\"Building the Chain\")\nvar l: Logger?\n\nl = Logger.prepareDefaultChain()\n```", "```swift\nprint(\"- *** stdOutLogger:\")\n// Handled by StdOutLogger\nl?.message(\"Entering the func Y()\", priority: Logger.DEBUG)\n\nprint(\"- StdOutLogger && EmailLogger:\")\n// Handled by StdOutLogger && EmailLogger\nl?.message(\"Step 1 Completed\", priority: Logger.INFO)\n\nprint(\"- all three loggers:\")\n// Handled by all Logger\nl?.message(\"An error occurred\", priority: Logger.ERR)\n```", "```swift\nprotocol ICommand {\n  func execute()\n}\n```", "```swift\nclass Light {\n\n  func on() {\n    print(\"Light is On\")\n  }\n\n  func off() {\n    print(\"Light is Off\")\n  }\n}\n```", "```swift\nclass AudioPlayer {\n\n  enum AudioPlayerState {\n    case On\n    case Off\n    case Playing\n  }\n\n  private var state = AudioPlayerState.Off\n\n  func on() {\n    state = AudioPlayerState.On\n    print(\"Audio Player is On\")\n  }\n\n  func off() {\n    state = AudioPlayerState.Off\n    print(\"Audio Player is Off\")\n  }\n\n  func playCD(){\n    if state == AudioPlayerState.Off {\n      print(\"doesn't work : the audio player is currently off\")\n    } else {\n      state = AudioPlayerState.Playing\n      print(\"AudioPlayer is playing\")\n    }\n  }\n\n  func stopCD(){\n    if state == AudioPlayerState.Off {\n      print(\"doesn't work : the audio player is currently off\")\n    }\n    if state == AudioPlayerState.On {\n      print(\"doesn't work : the audio player currently doesn't play music\")\n    } else {\n      state = AudioPlayerState.On\n      print(\"AudioPlayer has stopped to play music\")\n    }\n  }\n}\n```", "```swift\nclass LightOnCommand: ICommand {\n\n  var light:Light\n\n  init(light: Light) {\n    self.light = light\n  }\n\n  func execute() {\n    self.light.on()\n  }\n}\n```", "```swift\n init(light: Light) {\n    self.light = light\n  }\n```", "```swift\nclass LightOffCommand: ICommand {\n\n  var light:Light\n\n  init(light: Light) {\n    self.light = light\n  }\n\n  func execute() {\n    self.light.off()\n  }\n}\n```", "```swift\nclass AudioPlayerOnCommand: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.on()\n  }\n} \n```", "```swift\nclass AudioPlayerOffCommand: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.off()\n  }\n}\n```", "```swift\nclass AudioPlayerPlayCDCommand: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.playCD()\n  }\n}\n```", "```swift\nclass AudioPlayerStopCDCommand: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.stopCD()\n  }\n}\n```", "```swift\nclass AudioPlayerSetOnAndPlayCommand: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.on()\n    audioPlayer.playCD()\n  }\n\n}\n```", "```swift\nclass AudioPlayerStopMusicAndSetOff: ICommand {\n  var audioPlayer:AudioPlayer\n\n  init(audioPlayer:AudioPlayer) {\n    self.audioPlayer = audioPlayer\n  }\n\n  func execute() {\n    audioPlayer.stopCD()\n    audioPlayer.off()\n  }\n\n}\n```", "```swift\nclass UniversalRemoteControl {\n  var onCommands = [ICommand]()\n  var offCommands = [ICommand]()\n\n  init() {\n    for _ in 1...4 {\n      onCommands.append(NoCommand())\n      offCommands.append(NoCommand())\n    }\n  }\n\n  func addCommandToSlot(slot:Int, onCommand:ICommand, offCommand:ICommand) {\n    onCommands[slot] = onCommand\n    offCommands[slot] = offCommand\n  }\n\n  func buttonOnIsPushedOnSlot(slot:Int) {\n    onCommands[slot].execute()\n  }\n\n  func buttonOffIsPushedOnSlot(slot:Int) {\n    offCommands[slot].execute()\n  }\n}\n```", "```swift\nclass NoCommand: ICommand {\n\n  func execute() {\n    print(\"No command associated to this\")\n  }\n}\n```", "```swift\n    onCommands[slot].execute()\n```", "```swift\n    offCommands[slot].execute()\n```", "```swift\nlet uRemoteControl = UniversalRemoteControl()\n\nlet audioPlayerLivingRoom = AudioPlayer()\nlet lightBedroom = Light()\nlet lightHall = Light()\n```", "```swift\n// MARK: Definition of our commands\nlet bedroomLightOnCommand = LightOnCommand(light: lightBedroom)\nlet bedroomLightOffCommand = LightOffCommand(light: lightBedroom)\n\nlet hallLightOnCommand = LightOnCommand(light: lightHall)\nlet hallLightOffCommand = LightOffCommand(light: lightHall)\n\nlet audioPlayerLivingRoomOnCommand = AudioPlayerOnCommand(audioPlayer: audioPlayerLivingRoom)\nlet audioPlayerLivingRoomOffCommand = AudioPlayerOffCommand(audioPlayer: audioPlayerLivingRoom)\n\nlet audioPlayerOnAndPlayLivingRoom = AudioPlayerSetOnAndPlayCommand(audioPlayer: audioPlayerLivingRoom)\nlet audioPlayerStopAndOffLivingRoom = AudioPlayerStopMusicAndSetOff(audioPlayer: audioPlayerLivingRoom)\n```", "```swift\n// Mark: Assign commands to the remote controller\nuRemoteControl.addCommandToSlot(0, onCommand: bedroomLightOnCommand, offCommand: bedroomLightOffCommand)\nuRemoteControl.addCommandToSlot(1, onCommand: hallLightOnCommand, offCommand: hallLightOffCommand)\n\nuRemoteControl.addCommandToSlot(2, onCommand: audioPlayerLivingRoomOnCommand, offCommand: audioPlayerLivingRoomOffCommand)\nuRemoteControl.addCommandToSlot(3, onCommand: audioPlayerOnAndPlayLivingRoom, offCommand: audioPlayerStopAndOffLivingRoom)\n```", "```swift\n// Mark: Usage of the remote controller\nuRemoteControl.buttonOnIsPushedOnSlot(0)\nuRemoteControl.buttonOffIsPushedOnSlot(0)\n\nuRemoteControl.buttonOnIsPushedOnSlot(1)\nuRemoteControl.buttonOffIsPushedOnSlot(1)\n\nuRemoteControl.buttonOnIsPushedOnSlot(2)\nuRemoteControl.buttonOffIsPushedOnSlot(2)\n\nuRemoteControl.buttonOnIsPushedOnSlot(3)\nuRemoteControl.buttonOffIsPushedOnSlot(3)\n```"]