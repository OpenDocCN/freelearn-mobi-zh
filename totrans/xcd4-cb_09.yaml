- en: Chapter 9. Creating a Social Networking App with the Facebook iOS SDK
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：使用Facebook iOS SDK创建社交网络应用
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Downloading the Facebook iOS SDK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Facebook iOS SDK
- en: Registering your iOS applications with Facebook
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Facebook上注册您的iOS应用
- en: Building a simple social networking application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的社交网络应用
- en: Adding the Facebook iOS SDK to your project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Facebook iOS SDK添加到您的项目中
- en: Implementing the Single Sign On (SSO) feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现单点登录（SSO）功能
- en: Requesting additional Facebook permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求额外的Facebook权限
- en: Implementing and using the Graph API to read JSON data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和使用Graph API读取JSON数据
- en: Integrating with the Facebook social channels
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Facebook社交渠道集成
- en: Handling Facebook errors within your application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用中处理Facebook错误
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: On May 24, 2007, Mark Zuckerberg announced the Facebook platform, a development
    platform for programmers to create social applications within Facebook.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在2007年5月24日，马克·扎克伯格宣布了Facebook平台，这是一个为程序员创建Facebook内社交应用的开发平台。
- en: When Facebook launched the development platform, numerous applications had been
    built, and already had millions of users playing them. The social networking application
    utilizes the Facebook collection of APIs that enables you to connect to Facebook
    and send application request notifications, so that you can add them to your list
    of friends.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当Facebook推出开发平台时，已经建立了许多应用，并且已经有数百万用户在玩这些应用。社交网络应用利用Facebook的API集合，使您能够连接到Facebook并发送应用请求通知，以便您可以将他们添加到您的朋友列表中。
- en: In this chapter, we will take a look at how to download the Facebook iOS SDK
    and register your iOS application, so that it can be used with Facebook. We will
    then start by creating a simple application and look at how we can add the Facebook
    iOS SDK into our project, so that the user can sign in to their Facebook account
    in order to send notification requests as well as submit news feeds directly to
    their home page wall.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何下载Facebook iOS SDK并注册您的iOS应用，以便它可以与Facebook一起使用。然后，我们将从创建一个简单应用开始，看看我们如何将Facebook
    iOS SDK添加到我们的项目中，以便用户可以登录他们的Facebook账户，以便发送通知请求以及直接将新闻源提交到他们的主页墙。
- en: Finally, we will look at how to implement the **Single Sign On** (**SSO**) feature
    of the Facebook iOS SDK that allows the user to sign in to your application using
    their Facebook identity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将探讨如何实现Facebook iOS SDK的**单点登录（SSO**）功能，该功能允许用户使用他们的Facebook身份登录您的应用。
- en: Downloading the Facebook iOS SDK
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Facebook iOS SDK
- en: In this recipe we will learn the steps involved to download the Facebook iOS
    SDK.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习下载Facebook iOS SDK所需的步骤。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to proceed, we first need to launch our browser and download the Facebook
    iOS SDK package from the Facebook developer website.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续操作，我们首先需要启动我们的浏览器，并从Facebook开发者网站下载Facebook iOS SDK包。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow these simple steps as outlined in the given steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照以下步骤操作：
- en: Launch your browser and enter in [http://developers.facebook.com/ios/](http://developers.facebook.com/ios/).![How
    to do it...](img/3349_09_01.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的浏览器并输入[http://developers.facebook.com/ios/](http://developers.facebook.com/ios/)。![如何操作...](img/3349_09_01.jpg)
- en: Next, click on the **Download the SDK** button to start downloading the Facebook
    SDK. Once downloaded, install the package. The default installation location is
    `~/Documents/FacebookSDK`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**下载SDK**按钮开始下载Facebook SDK。下载完成后，安装该包。默认安装位置是`~/Documents/FacebookSDK`。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we looked at the necessary steps required to download the Facebook
    iOS SDK from the Facebook developer portal. Compared to earlier releases of the
    Facebook SDK, this SDK is now packaged as a framework and provides you with all
    of the functionality required to make your applications interact with the Facebook
    platform. Whenever developing applications with the Version 3.1 and above of the
    Facebook SDK, it requires Xcode 4.5 and above.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们探讨了从Facebook开发者门户下载Facebook iOS SDK所需的必要步骤。与Facebook SDK的早期版本相比，现在的SDK被包装成一个框架，并提供您所需的所有功能，以便您的应用与Facebook平台交互。当使用Facebook
    SDK的3.1版及以上版本开发应用时，它需要Xcode 4.5及以上版本。
- en: There's more…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The Facebook SDK framework contains all of the method objects and APIs that
    are required to enable you to interact with Facebook and send notification requests,
    or simply post messages to the current person's wall page using the Single Sign
    On feature of the Facebook iOS SDK.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook SDK 框架包含所有必需的方法对象和 API，使您能够与 Facebook 交互，发送通知请求，或简单地使用 Facebook iOS
    SDK 的单点登录功能向当前人的墙页发布消息。
- en: This lets your users sign in to your app using their Facebook identity. With
    the initial release of the SDK, the `authorize` method always opened an inline
    dialog box containing `UIWebView` in which the authorization UI was shown to the
    user, and required users to enter their credentials separately for each app they
    authorized.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许您的用户使用他们的 Facebook 身份登录您的应用程序。在 SDK 的初始版本中，`authorize` 方法总是打开一个包含 `UIWebView`
    的内联对话框，其中显示了授权用户界面，并要求用户为每个他们授权的应用程序分别输入他们的凭据。
- en: 'In the updated version of the SDK this has been changed and no longer requires
    users having to re-enter their credentials for every application on the device
    they want to authorize. Using the Facebook iOS SDK allows you to do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SDK 的更新版本中，这一变化已经发生，不再需要用户为设备上他们想要授权的每个应用程序重新输入凭据。使用 Facebook iOS SDK 允许您执行以下操作：
- en: '| Facebook iOS SDK types | Description |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Facebook iOS SDK 类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Authentication and authorization | Prompt users to log in to Facebook and
    grant permissions to your application. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 身份验证和授权 | 提示用户登录 Facebook 并授予您的应用程序权限。|'
- en: '| Make API calls | This allows you to fetch user profile data, as well as any
    information related to the user''s friends using JSON API calls. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 调用 API | 这允许您通过 JSON API 调用获取用户配置文件数据，以及与用户的朋友相关的任何信息。|'
- en: '| Display dialog | This allows you to interact with the user via a `UIWebView`
    view. This is extremely useful for enabling interactions with Facebook, without
    requiring upfront permissions. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 显示对话框 | 这允许您通过 `UIWebView` 视图与用户交互。这对于在不要求预先权限的情况下启用与 Facebook 的交互非常有用。|'
- en: See also
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Registering your iOS applications with Facebook* recipe
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Facebook 注册您的 iOS 应用程序* 的配方'
- en: Registering your iOS applications with Facebook
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Facebook 注册您的 iOS 应用程序
- en: In this recipe we will learn how to register an iOS application so that it can
    be used with the Facebook platform.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何注册 iOS 应用程序，以便它可以与 Facebook 平台一起使用。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe and before we can start integrating our
    application with the Facebook platform, we will need to register the application
    with Facebook's mobile website and provide some basic application information.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的配方之后，在我们开始将我们的应用程序与 Facebook 平台集成之前，我们需要将应用程序注册到 Facebook 的移动网站上，并提供一些基本的应用程序信息。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照给定顺序概述的简单步骤进行操作：
- en: Open your browser and enter in [http://developers.facebook.com/apps](http://developers.facebook.com/apps).![How
    to do it...](img/3349_09_02.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器并输入 [http://developers.facebook.com/apps](http://developers.facebook.com/apps)。![如何做...](img/3349_09_02.jpg)
- en: Next, either sign up for Facebook if you are not a registered user, or enter
    in your Facebook account credentials and click on the **Log In** button.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果您不是注册用户，请注册 Facebook，或者输入您的 Facebook 账户凭据并点击 **登录** 按钮。
- en: Next, click on the **+Create New App** button from the **Apps** page.![How to
    do it...](img/3349_09_03.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从 **应用** 页面点击 **+创建新应用** 按钮。![如何做...](img/3349_09_03.jpg)
- en: Next, enter `Social Networking App` for the **App Name** field.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 **应用名称** 字段中输入 `Social Networking App`。
- en: Click on the **Continue** button to proceed to the next step in the wizard.
    This will be used and displayed whenever you post or send a notification message
    to your friends.![How to do it...](img/3349_09_04.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **继续** 按钮以进入向导的下一步。这将用于并显示在您向朋友发布或发送通知消息时。![如何做...](img/3349_09_04.jpg)
- en: Next, you will be prompted to enter in the **Security Check** words before you
    can proceed to the next step.![How to do it...](img/3349_09_05.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在您继续下一步之前，系统将提示您输入 **安全验证** 词语。![如何做...](img/3349_09_05.jpg)
- en: Enter in the words displayed on your screen and click on the **Submit** button
    to continue. The words displayed will be different each time this screen is displayed.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入屏幕上显示的词语并点击 **提交** 按钮以继续。显示的词语每次都会不同。
- en: Note
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you enter in the words incorrectly, you may end up with your account being
    blocked. If this is the case, you will need to contact Facebook directly to have
    this unlocked.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您输入的单词不正确，您的账户可能会被锁定。如果是这种情况，您需要直接联系Facebook以解锁此账户。
- en: '![How to do it...](img/3349_09_06.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做...](img/3349_09_06.jpg)'
- en: The above screenshot shows the final screen that allows you to make any final
    changes before you commit your changes. Once you are satisfied with all changes,
    click on the **Save Changes** button.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了允许您在提交更改之前进行任何最终更改的最终屏幕。一旦您对所有的更改都感到满意，请点击**保存更改**按钮。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **App ID** is an important field that we will be using in our iOS application
    to communicate with Facebook, and is highlighted by an arrow in the previous screenshot.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**App ID**是我们将在iOS应用程序中使用的重要字段，用于与Facebook通信，并在之前的屏幕截图中被箭头突出显示。'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we looked at the steps required to register our application
    with Facebook's mobile development platform so that our application can communicate
    with this platform.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们探讨了将我们的应用程序注册到Facebook移动开发平台所需的步骤，以便我们的应用程序可以与该平台通信。
- en: We looked at how to create and define a new application name that will be displayed
    whenever notification messages are sent or posted to your wall or friends. In
    the next recipe, we will take a look at how to build the user interface for our
    social networking application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何创建和定义一个新的应用名称，该名称将在发送或发布到您的墙或朋友的通知消息时显示。在下一个菜谱中，我们将看看如何构建我们的社交网络应用的用户界面。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Building a simple social networking application* recipe
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建简单的社交网络应用*菜谱'
- en: Building a simple social networking application
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建简单的社交网络应用
- en: In this recipe we will learn how to build the user interface for our social
    networking application project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何构建我们的社交网络应用项目的用户界面。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this section, we will start by building the components that will comprise
    of the user interface for our application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始构建将构成我们应用程序用户界面的组件。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照给定的顺序遵循简单的步骤：
- en: Launch **Xcode** from the `/Xcode4/Applications` folder.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/Xcode4/Applications`文件夹启动**Xcode**。
- en: Choose **Create a new Xcode project**, or **File** | **New Project**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新的Xcode项目**，或**文件** | **新建项目**。
- en: Select the **Single View Application** from the list of available templates.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用模板列表中选择**单视图应用程序**。
- en: Click on the **Next** button to proceed to the next step in the wizard.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮，进入向导的下一步。
- en: Next, enter in `SocialNetworkApp` as the name for your project.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入`SocialNetworkApp`作为您项目的名称。
- en: Choose **iPhone** from under the **Devices** drop-down list.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**设备**下拉列表中选择**iPhone**。
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保没有选中**使用故事板**的复选框。
- en: Ensure that the **Use Automatic Reference Counting** and the **Include Unit
    Tests** checkboxes have not been selected.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保没有选中**使用自动引用计数**和**包含单元测试**的复选框。
- en: Next, click on the **Next** button to proceed to the next step in the wizard
    and specify the location where you would like to save your project.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**下一步**按钮，进入向导的下一步，并指定您想要保存项目的位置。
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**创建**按钮继续，并显示Xcode工作区。
- en: 'Now that we have created our `SocialNetworkApp` project, we can start building
    our user interface that will be responsible for allowing us to communicate with
    Facebook:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`SocialNetworkApp`项目，我们可以开始构建我们的用户界面，该界面将使我们能够与Facebook通信：
- en: Select the `ViewController.xib` files from the **Project Navigator** Window.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中选择`ViewController.xib`文件。
- en: From the **Object Library**, select and drag a **UIToolbar** object, and add
    this to our view and select the **Item** button located within our toolbar.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中选择并拖动一个**UIToolbar**对象，并将其添加到我们的视图中，然后选择工具栏内的**项目**按钮。
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Custom** and change the value of **Style** to **Bordered** and the value
    of **Title** to **Sign In**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**属性检查器**部分，将**标识符**属性更改为**自定义**，并将**样式**的值更改为**带边框**，将**标题**的值更改为**登录**。
- en: Create an outlet for this `UIBarButtonItem`, and name it `loginButton`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此`UIBarButtonItem`创建一个出口，并将其命名为`loginButton`。
- en: Create the `action` method for the **Sign In** button and name it `loginButton`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为**登录**按钮创建一个`action`方法，并将其命名为`loginButton`。
- en: Add a **flexible space bar button item** next to the **Sign In** button.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**登录**按钮旁边添加一个**灵活空间按钮项**。
- en: Add another `UIBarButtonItem` to the right of the flexible space bar button
    item and from the **Attributes Inspector**, change the **Identifier** property
    to **Action**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在灵活空间按钮项的右侧添加另一个`UIBarButtonItem`，并在**属性检查器**中，将**标识符**属性更改为**Action**。
- en: From the **Object Library**, drag a **UIImageView** object onto the view.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个**UIImageView**对象到视图中。
- en: Resize the `UIImageView` control so that it can hold a passport size photo.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整`UIImageView`控件的大小，使其能够容纳护照大小的照片。
- en: Next, create the outlet for this `UIImageView`, and name it `imgPhoto`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`UIImageView`创建一个出口，并将其命名为`imgPhoto`。
- en: From the **Object Library**, drag a **UITextView** object onto the view.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**对象库**中拖动一个**UITextView**对象到视图中。
- en: Resize the **UITextView** control so that it takes up the width of the View
    Controller.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整**UITextView**控件的大小，使其占据视图控制器宽度。
- en: Next, create the outlet for this `UITextView`, and name it `userInfoDetails`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为这个`UITextView`创建一个出口，并将其命名为`userInfoDetails`。
- en: Save the **SocialNetworkApp** by choosing **File** | **Save** from the menu
    bar.![How to do it…](img/3349_09_07.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单栏中的**文件** | **保存**来保存**SocialNetworkApp**。![如何操作…](img/3349_09_07.jpg)
- en: If you have followed the steps correctly, the completed View Controller screen
    should look similar to the previous screenshot. Feel free to adjust your screen
    accordingly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正确地遵循了步骤，完成的视图控制器屏幕应该与之前的截图类似。请随意调整您的屏幕。
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we started by building our user interface for our `SocialNetworkApp`
    application that will enable us to log in and out of Facebook and post messages
    to our wall. In our next recipe, we will look at how to add the Facebook iOS SDK
    into our project, which allows us to communicate with the Facebook mobile development
    platform, and includes the necessary properties and methods that allows us to
    post messages to the current user's wall.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们首先构建了我们`SocialNetworkApp`应用程序的用户界面，这将使我们能够登录和注销 Facebook 并在我们的墙上发布消息。在我们的下一个菜谱中，我们将探讨如何将
    Facebook iOS SDK 添加到我们的项目中，这将允许我们与 Facebook 移动开发平台进行通信，并包括必要的属性和方法，使我们能够向当前用户的墙发布消息。
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Adding the Facebook SDK and dependencies to your project* recipe
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将 Facebook SDK 和依赖项添加到您的项目中*菜谱'
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装 iOS SDK 开发工具")的*使用 Xcode 创建 iOS 项目*菜谱中，*获取和安装 iOS
    SDK 开发工具*
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。获取和安装 iOS SDK 开发工具")的*为 Interface Builder 对象创建出口*菜谱中，*获取和安装
    iOS SDK 开发工具*
- en: Adding the Facebook SDK and dependencies to your project
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Facebook SDK 和依赖项添加到您的项目中
- en: In this recipe, we will learn how to include the Facebook SDK and the framework
    dependencies as part of our `SocialNetworkingApp` project to enable us to communicate
    with the Facebook mobile platform.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将学习如何将 Facebook SDK 和框架依赖项作为我们`SocialNetworkingApp`项目的一部分来包含，以便我们能够与
    Facebook 移动平台进行通信。
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，确保我们的`SocialNetworkApp`项目文件已打开。
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add the Facebook SDK and the required frameworks, follow the given simple
    steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Facebook SDK 和所需的框架，请按照以下简单步骤操作：
- en: From the **Project Navigator** window, select the `SocialNetworkApp` folder.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**窗口中，选择`SocialNetworkApp`文件夹。
- en: Choose **Add Files to "SocialNetworkApp" …** or Mac users can press *Option*
    + *Command* + *A*.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**将文件添加到 "SocialNetworkApp" …**或 Mac 用户可以按*Option* + *Command* + *A*。
- en: Next, drag the `FacebookSDK.framework` folder from the `Facebook SDK installation`
    folder into the **Frameworks** section of your **Project Navigator**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`FacebookSDK.framework`文件夹从`Facebook SDK 安装`文件夹拖动到您的**项目导航器**的**框架**部分。
- en: Then, choose **Create groups for any added folders** and deselect **Copy Items
    into destination group's folder** (if needed) to keep the reference to the SDK
    installation folder, rather than creating a copy.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**为任何添加的文件夹创建组**，并取消选择**将项目复制到目标组文件夹中**（如果需要）以保持对SDK安装文件夹的引用，而不是创建一个副本。
- en: Next, add the Facebook SDK for iOS resource bundle by dragging the `FacebookSDKResources.bundle`
    file from the `FacebookSDK.framework/Resources` folder into the **Frameworks**
    section of your **Project Navigator**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过将`FacebookSDKResources.bundle`文件从`FacebookSDK.framework/Resources`文件夹拖动到您的**项目导航器**的**框架**部分，添加Facebook
    SDK for iOS资源包。
- en: Next, the SDK relies on three other frameworks (AdSupport, Accounts, and Social)
    to use the Facebook features built into iOS6\. To add these, go to the **Linked
    Frameworks and Libraries** section of the target's **Summary** pane, and click
    on the **+** button to add them.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，SDK依赖于其他三个框架（AdSupport、Accounts和Social）来使用iOS6中内置的Facebook功能。要添加这些框架，请转到目标的**摘要**面板中的**链接框架和库**部分，然后点击**+**按钮来添加它们。
- en: Next, we need to import the Facebook Dialog calls headers by dragging the `DeprecatedHeaders`
    folder from the `FacebookSDK.framework/Versions/A/DeprecatedHeaders` folder into
    the **Frameworks** section of your **Project Navigator**:![How to do it...](img/3349_09_08.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过将`DeprecatedHeaders`文件夹从`FacebookSDK.framework/Versions/A/DeprecatedHeaders`文件夹拖动到您的**项目导航器**的**框架**部分来导入Facebook对话框调用头文件：![如何操作...](img/3349_09_08.jpg)
- en: Then, we need to add the **–lsqlite3.0** SQL library to the list of build dependencies
    in the **Build Settings** pane:![How to do it...](img/3349_09_08a.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在**构建设置**面板中将**–lsqlite3.0** SQL库添加到构建依赖项列表中：![如何操作...](img/3349_09_08a.jpg)
- en: Once the changes have been made, your solution should contain the following
    files:![How to do it...](img/3349_09_08b.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦做出更改，您的解决方案应包含以下文件：![如何操作...](img/3349_09_08b.jpg)
- en: Save your project by selecting **File** | **Save**, as we are done adding the
    Facebook SDK.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**文件** | **保存**来保存您的项目，因为我们已经完成了添加Facebook SDK。
- en: How it works...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we learned how to manually add the Facebook SDK components into
    our project using Xcode to provide us with the ability to communicate with the
    Facebook platform to post messages to the current user's wall, or to retrieve
    information associated with the user using both the SSO feature and the Facebook
    Graph API methods.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们学习了如何使用Xcode手动将Facebook SDK组件添加到我们的项目中，以便我们能够与Facebook平台通信，向当前用户的墙发布消息，或者使用SSO功能和Facebook
    Graph API方法检索与用户关联的信息。
- en: We learned about the new framework dependencies that are dependent upon the
    Facebook SDK when building projects under the iOS6 platform, as well as adding
    the SQLite SQL library to the list of build dependencies within our project build
    settings.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当在iOS6平台上构建项目时，我们学习了关于依赖于Facebook SDK的新框架依赖项，以及将SQLite SQL库添加到项目构建设置中的构建依赖项列表。
- en: Finally, we learned how to import the Facebook Feed and Requests Dialogs methods
    to ensure backward compatibility of the Facebook SDK headers with the same methods
    used within Version 2.0 of the Facebook SDK.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们学习了如何导入Facebook Feed和Requests对话框方法，以确保Facebook SDK头文件与Facebook SDK 2.0版本中使用的相同方法保持向后兼容性。
- en: In our next recipe, we will learn how to implement the SSO within our application
    to enable us to log in and out of Facebook, as well as positing message details
    to the current user's Facebook wall.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个菜谱中，我们将学习如何在我们的应用程序中实现单点登录（SSO）功能，以便我们能够登录和注销Facebook，以及向当前用户的Facebook墙发布消息。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on the Facebook iOS SDK, please refer to the Facebook Developer
    Documentation, which can be found at [http://developers.facebook.com/docs/guides/mobile](http://developers.facebook.com/docs/guides/mobile)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Facebook iOS SDK的更多信息，请参阅Facebook开发者文档，可在[http://developers.facebook.com/docs/guides/mobile](http://developers.facebook.com/docs/guides/mobile)找到。
- en: See also
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现单点登录（SSO）功能*菜谱'
- en: Implementing the Single Sign On (SSO) feature
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现单点登录（SSO）功能
- en: In this recipe, we will learn how to implement the Single Sign On feature of
    the Facebook iOS SDK that will enable our application to communicate with Facebook.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何实现Facebook iOS SDK的单点登录功能，这将使我们的应用程序能够与Facebook通信。
- en: The process of using SSO works by redirecting the user to the Facebook iOS application
    on their device, and presenting them with an authentication dialog box, showing
    only those permissions that your application has been configured to use.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSO的过程是通过将用户重定向到他们设备上的Facebook iOS应用程序，并向他们展示一个认证对话框，只显示您的应用程序已配置为使用的那些权限。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，确保我们的`SocialNetworkApp`项目文件是打开的。
- en: How to do it...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，按照给定的顺序遵循以下简单步骤：
- en: Open the `AppDelegate.hinterface` file from the **Project Navigator**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**中打开`AppDelegate.hinterface`文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据高亮显示的代码部分修改接口文件：
- en: '[PRE0]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, open the `AppDelegate.m` implementation file from the **Project Navigator**.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**项目导航器**中打开`AppDelegate.m`实现文件。
- en: 'Modify the implementation file as shown by the highlighted code sections:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改实现文件，如高亮显示的代码部分所示：
- en: '[PRE1]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, modify the `didFinishLaunchingWithOptions:` method as shown in the following
    code snippet:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`didFinishLaunchingWithOptions:`方法，如以下代码片段所示：
- en: '[PRE2]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To ensure your application works with your own AppID, you will need to replace
    the `YOUR_APPID_HERE` string after the `initWithAppId:` with your own created
    Facebook AppID.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了确保您的应用程序与您自己的AppID一起工作，您需要将`initWithAppId:`后面的`YOUR_APPID_HERE`字符串替换为您自己创建的Facebook
    AppID。
- en: 'Next, create the following code sections, as specified in the code snippets:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中指定：
- en: '[PRE3]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we started by extending our class to include the `FBSessionDelegate`
    and `FBDIalogDelegate` class protocols, as well as its methods. We then declared
    an instance variable called `facebook` that will enable us to access the `Facebook`
    class methods. Next, we added a property instance of the `Facebook` class to create
    the class getters and setters and then proceeded to synthesize our `facebook`
    variable that we defined within the `AppDelegate.h` interface file. This is done
    so that we can make our implementation file aware of the `facebook` variable,
    so that we can access the object properties and methods. In our `didFinishLaunchingWithOptions:`
    method, we initialize our `Facebook` object to invoke the SSO, by passing in the
    application AppID that we created when we registered our iOS mobile app, as well
    as the Graph API and Platform Dialogs from within our app. Once the object has
    been instantiated, we need to check for any previously saved access token information
    and then use this saved information to set up a valid session, by assigning the
    saved information to the Facebook access token and expiration date properties
    to ensure that your app does not redirect to the Facebook application. Invoke
    the authorization dialog box, if the application already has a valid `access_token`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先通过扩展我们的类来包含`FBSessionDelegate`和`FBDIalogDelegate`类协议及其方法。然后我们声明了一个名为`facebook`的实例变量，这将使我们能够访问`Facebook`类的方法。接下来，我们添加了一个`Facebook`类的属性实例来创建类获取器和设置器，然后继续在`AppDelegate.h`接口文件中合成我们定义的`facebook`变量。这样做是为了让我们的实现文件知道`facebook`变量，以便我们可以访问对象属性和方法。在我们的`didFinishLaunchingWithOptions:`方法中，我们初始化我们的`Facebook`对象以调用SSO，通过传递我们在注册iOS移动应用时创建的应用程序AppID以及我们应用内的Graph
    API和平台对话框。一旦对象被实例化，我们需要检查任何之前保存的访问令牌信息，然后使用这些保存的信息来设置一个有效的会话，通过将保存的信息分配给Facebook访问令牌和过期日期属性，以确保您的应用不会重定向到Facebook应用程序。如果应用程序已经有一个有效的`access_token`，则调用授权对话框。
- en: We proceed to check for a valid session and if it is not valid, we call the
    `authorize` method which will log the user in and prompt the user to authorize
    the application and then declare two methods that will be called by the iOS when
    the Facebook application redirects to the app during the SSO process. These methods
    provide the app with the user's credentials.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续检查有效的会话，如果会话无效，我们调用`authorize`方法，这将登录用户并提示用户授权应用程序，然后声明两个iOS在SSO过程中将应用程序重定向到应用时将被调用的方法。这些方法为应用程序提供了用户的凭据。
- en: You will notice that we have declared two different methods that will be used
    to handle different versions of the iOS app. `The handleOpenURL:` method is for
    versions prior to Version 4.2, and the `openURL` one is for Versions 4.2 and greater.
    In our next step, we implement the Facebook `fbDidLogin:` method of `FBSessionDelegate`.
    After the SSO process has successfully signed in and the Facebook app redirects
    back to the calling application, we save the user's credentials using the `FBAccessTokenKey`
    and `FBExpirationDateKey` keys, and then save these into the user preferences
    `NSUserDefaults`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们声明了两种不同的方法来处理 iOS 应用的不同版本。`The handleOpenURL:` 方法用于版本低于 4.2 的版本，而 `openURL`
    方法用于 4.2 版本及以上。在我们的下一步中，我们实现了 `FBSessionDelegate` 的 `fbDidLogin:` 方法。在 SSO 过程成功登录并
    Facebook 应用将用户重定向回调用应用后，我们使用 `FBAccessTokenKey` 和 `FBExpirationDateKey` 键保存用户的凭据，然后将这些信息保存到用户偏好设置
    `NSUserDefaults` 中。
- en: We then proceed to implement the Facebook `fbDidLogout:` method of `FBSessionDelegate`.
    After the SSO process successfully signs out of the iOS app, the `callback` method
    gets called. We need to check to see if we have a successful access token key
    prior to removing the stored user's credentials, using the `FBAccessTokenKey`
    and `FBExpirationDateKey` keys.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续实现 `FBSessionDelegate` 的 `fbDidLogout:` 方法。在 SSO 过程成功从 iOS 应用中注销后，`callback`
    方法被调用。在移除存储的用户凭据之前，我们需要检查是否有成功的访问令牌键，使用 `FBAccessTokenKey` 和 `FBExpirationDateKey`
    键。
- en: We then remove those details from the user preferences using the `NSUserDefaults`
    object. Finally, we create an instance of the `UIAlertView` dialog box to notify
    the user that a successful logout has happened. In our previous sections, we implemented
    the Facebook `fbSessionInvalidated` method of `FBSessionDelegate`. When a request
    is made to post a new message to the current user's wall or to send notifications
    to your friends, the `fbSessionInvalidated` method is called to ensure that a
    valid session exists. This uses the `session` object, created by the SSO process
    when your application signed in. If the session state has expired, we declare
    an instance of the `UIAlertView` class to display a message to the user, before
    finally making a call to the `fbDidLogout` method to ensure that all of the required
    access tokens are removed cleanly.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `NSUserDefaults` 对象从用户偏好设置中删除这些详细信息。最后，我们创建一个 `UIAlertView` 对话框的实例来通知用户已成功注销。在我们之前的章节中，我们实现了
    `FBSessionDelegate` 的 `fbSessionInvalidated` 方法。当请求向当前用户的墙发布新消息或向您的朋友发送通知时，会调用
    `fbSessionInvalidated` 方法以确保存在有效的会话。这使用了 SSO 过程在您的应用登录时创建的 `session` 对象。如果会话状态已过期，我们声明一个
    `UIAlertView` 类的实例来向用户显示一条消息，然后最终调用 `fbDidLogout` 方法以确保所有必需的访问令牌都被干净地移除。
- en: There's more…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If a user is already signed into the Facebook iOS application on their device,
    he won't need to provide this again. The process of using SSO works by redirecting
    the users to the Facebook iOS application on their device, and presenting them
    with an authentication dialog box, showing only those permissions that your application
    has been configured to use. Once the user has allowed those permissions requested
    by your iOS app, they will be redirected back to your application with the appropriate
    access token.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已经在他们的设备上登录了 Facebook iOS 应用，则无需再次提供。使用 SSO 的过程是通过将用户重定向到他们设备上的 Facebook
    iOS 应用，并向他们展示一个身份验证对话框来实现的，该对话框只显示您的应用已配置为使用的权限。一旦用户允许了 iOS 应用请求的权限，他们将被重定向回您的应用，并带有适当的访问令牌。
- en: When using the Facebook SSO process, certain things can behave slightly differently
    depending on what version of the Facebook iOS app has been installed on the user's
    iOS device.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Facebook SSO 过程时，某些行为可能会根据用户 iOS 设备上安装的 Facebook iOS 应用的版本有所不同。
- en: 'The following table explains what happens when the Facebook SSO process is
    run under certain conditions:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格解释了在特定条件下运行 Facebook SSO 过程时会发生什么：
- en: '| Facebook SSO condition | Description |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| Facebook SSO 条件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| iOS application is running with a version of iOS that supports multitasking
    and running Version 3.2.3, or greater of the Facebook iOS app. | The Facebook
    SDK will attempt to open the authorization dialog box within the Facebook app.After
    the user grants or declines authorization, the user is redirected back to the
    calling application, passing back with it an authorization token, expiration,
    and any other parameters the Facebook `oAuth` authentication server may happen
    to return. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| iOS应用运行支持多任务的iOS版本，并且运行3.2.3或更高版本的Facebook iOS应用。 | Facebook SDK将尝试在Facebook应用内打开授权对话框。在用户授权或拒绝授权后，用户将被重定向回调用应用，并带有一个授权令牌、过期时间以及Facebook
    `oAuth`认证服务器可能返回的任何其他参数。 |'
- en: '| iOS device running with a version of iOS that supports multitasking, and
    isn''t running Version 3.2.3, or greater of the Facebook iOS app. | The Facebook
    SDK will open the authorization dialog box within Safari. After the user grants,
    or declines authorization, Safari will redirect the user back to the calling application.This
    process is similar to the Facebook app authorization, and allows for multiple
    apps to share the same Facebook user `access_token` through the `Safari` cookie.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| iOS设备运行支持多任务的iOS版本，并且不是运行3.2.3或更高版本的Facebook iOS应用。 | Facebook SDK将在Safari中打开授权对话框。在用户授权或拒绝授权后，Safari将用户重定向回调用应用。此过程类似于Facebook应用的授权，允许多个应用通过Safari
    cookie共享相同的Facebook用户`access_token`。 |'
- en: '| If the iOS application is running a version of iOS that does not support
    multitasking. | The SDK will use the old mechanism of popping up an inline `UIWebView`
    web view control, prompting the user to log in and grant access. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 如果iOS应用运行不支持多任务的iOS版本。 | SDK将使用弹出内联`UIWebView`网页视图控件的老机制，提示用户登录并授权。 |'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Facebook recommends that you should always ensure that your devices are running
    the latest version of the Facebook iOS app.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook建议您始终确保您的设备运行的是最新版本的Facebook iOS应用。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing the View Controller class* recipe
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现视图控制器类*菜谱'
- en: Implementing the View Controller class
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现视图控制器类
- en: In this recipe, we will start to implement additional functionality to our `ViewController`
    class, as well as importing some very important header files and extend our class.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将开始为我们的`ViewController`类实现额外的功能，以及导入一些非常重要的头文件并扩展我们的类。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱基础上，确保我们的`SocialNetworkApp`项目文件已打开。
- en: How to do it...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow these simple steps as outlined in the given order:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请按照给定顺序遵循以下简单步骤：
- en: Open the `ViewController.h` interface file from the **Project Navigator**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**打开`ViewController.h`接口文件。
- en: 'Next, modify the interface file as shown by the highlighted code sections:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据高亮代码部分修改接口文件：
- en: '[PRE4]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, open the `ViewController.m` implementation file from the **Project Navigator**
    and modify the implementation file as shown by the highlighted code sections:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**项目导航器**打开`ViewController.m`实现文件，并根据高亮代码部分修改实现文件：
- en: '[PRE5]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we started by extending our class to include the `UIActionSheetDelegate`
    and `FBRequestDelegate` class protocols, as well as its methods. We then declared
    an instance variable called `facebook` that will enable us to access the `Facebook`
    class methods. Next, we added a property instance of the `Facebook` class to create
    the class getters and setters and then proceed to synthesize our `facebook` variable
    that we defined within the `AppDelegate.h` interface file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先扩展了我们的类以包含`UIActionSheetDelegate`和`FBRequestDelegate`类协议及其方法。然后我们声明了一个名为`facebook`的实例变量，这将使我们能够访问`Facebook`类的方法。接下来，我们添加了一个`Facebook`类的属性实例以创建类获取器和设置器，然后继续合成我们在`AppDelegate.h`接口文件中定义的`facebook`变量。
- en: Next, we import the interface file header information for our `FBConnect.h`
    interface file, so that we can access the request dialog class methods. Next,
    we declare an application delegate object `mainDelegate` that points to the properties
    and class methods within our `delegate` class. Next, we initialize our facebook
    object within our `ViewController` to use the same object instance as the one
    which we instantiated within our `delegate` class. Finally, we initialize our
    user info details using `UITextView` control.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们导入我们的`FBConnect.h`接口文件的接口文件头信息，以便我们可以访问请求对话框类方法。接下来，我们声明一个指向我们的`delegate`类中属性和类方法的`mainDelegate`应用程序委托对象。接下来，我们在`ViewController`中初始化我们的`facebook`对象，使用与我们在`delegate`类中实例化的相同对象实例。最后，我们使用`UITextView`控件初始化我们的用户信息详情。
- en: Next, we create our `loginButton:` method, and check the status of the button.
    If the button reads **Sign In**, we use the `isSessionValid` method of the `facebook`
    object to determine if we still have a valid connection to the `facebook` instance.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的`loginButton:`方法，并检查按钮的状态。如果按钮读取为**登录**，我们使用`facebook`对象的`isSessionValid`方法来确定我们是否仍然与`facebook`实例保持有效连接。
- en: If it proves that our session has expired, we initialize and pass to our `authorize`
    method of the facebook class permissions to request for accessing the user's e-mail,
    and allow the iOS to publish to the **Open Graph API** actions. Finally, we release
    the memory that has been allocated by our `permissions` object and then update
    the title of the button to read **Sign Out**. If our button reads **Sign Out**
    as determined by the `loginButton:` method, we update the title of the button
    to read **Sign In** and then call the `logout` method of the `Facebook` class,
    and then pass in our `mainDelegate` object. When this method is called, it will
    call the `fbDidLogout` method of the `FBSessionDelegate` within our `AppDelegate`
    class to handle any post logout actions and releasing of objects as well as for
    notifying the user that a successful logout has taken place.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它证明我们的会话已过期，我们初始化并将请求访问用户电子邮件的权限传递给我们的`facebook`类的`authorize`方法，并允许iOS发布到**Open
    Graph API**操作。最后，我们释放由我们的`permissions`对象分配的内存，然后更新按钮的标题为**注销**。如果我们的按钮通过`loginButton:`方法读取为**注销**，我们更新按钮的标题为**登录**，然后调用`Facebook`类的`logout`方法，并传入我们的`mainDelegate`对象。当这个方法被调用时，它将在我们的`AppDelegate`类中调用`FBSessionDelegate`的`fbDidLogout`方法来处理任何注销后的操作和对象的释放，以及通知用户已成功注销。
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'When making a call to the `logout` method, your application''s permissions
    will not be revoked; it will simply clear the value of your application''s `access_token`.
    If a user who has previously logged out of your application decides to run it
    again, they will simply see a notification that they are logging back into your
    application, not a notification requesting for permissions. For more information
    on the Facebook protocol methods, refer to the following URL: [http://developers.facebook.com/docs/reference/iossdk/#protocols](http://developers.facebook.com/docs/reference/iossdk/#protocols)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`logout`方法时，你的应用程序权限不会被撤销；它只会清除你应用程序的`access_token`值。如果之前已经从你的应用程序注销的用户决定再次运行它，他们只会看到一个通知，表明他们正在重新登录你的应用程序，而不是请求权限的通知。有关Facebook协议方法的更多信息，请参阅以下URL：[http://developers.facebook.com/docs/reference/iossdk/#protocols](http://developers.facebook.com/docs/reference/iossdk/#protocols)
- en: See also
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Requesting additional Facebook permissions* recipe
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*请求额外的Facebook权限*食谱'
- en: Requesting additional Facebook permissions
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求额外的Facebook权限
- en: In this recipe, we will learn how to specify additional permissions to be used
    by our application.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何指定我们的应用程序要使用的额外权限。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, we will learn how to implement additional
    permissions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的食谱基础上，我们将学习如何实现额外的权限。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，按照以下顺序遵循给定的简单步骤：
- en: Open the `AppDelegate.m` implementation file from the **Project Navigator**.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**打开`AppDelegate.m`实现文件。
- en: 'Next, modify the `didFinishLaunchingWithOptions:` method as shown in the following
    code snippet:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改`didFinishLaunchingWithOptions:`方法，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we begin by declaring an `NSArray` object variable permission
    that will be used to store each of our permissions that we want to request. We
    then pass this variable to our `authorize` method of the `facebook` object, before
    finally releasing the memory allocated by the object.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们首先声明一个用于存储我们想要请求的每个权限的 `NSArray` 对象变量 `permission`。然后，我们将此变量传递给 `facebook`
    对象的 `authorize` 方法，最后释放对象分配的内存。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the full list of available permissions that are made
    available to you, refer to the Facebook Permissions reference at the following
    URL: [https://developers.facebook.com/docs/authentication/permissions/](https://developers.facebook.com/docs/authentication/permissions/)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有关您可用的完整权限列表的更多信息，请参阅以下 URL 的 Facebook 权限参考：[https://developers.facebook.com/docs/authentication/permissions/](https://developers.facebook.com/docs/authentication/permissions/)
- en: There's more…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When using Facebook integration within your application, you can specify additional
    permissions to be used by your application. When you launch the application without
    specifying additional permissions, this will use the default permissions and will
    only get the ability to read only the user's basic information and this includes
    certain properties of the `User` object such as id, name, picture, gender, and
    their locale. If you want to read additional data or publish data back to Facebook,
    you will need to request these additional permissions.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当在您的应用程序中使用 Facebook 集成时，您可以指定应用程序要使用的额外权限。当您未指定额外权限启动应用程序时，这将使用默认权限，并且只能读取用户的基本信息，这包括
    `User` 对象的某些属性，如 id、姓名、图片、性别和他们的地区。如果您想读取额外的数据或将数据发布回 Facebook，您将需要请求这些额外权限。
- en: 'These additional permissions fall into the following sections, as shown in
    the given table:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外权限分为以下几部分，如给定的表格所示：
- en: '| Requested permissions | Description |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 请求的权限 | 描述 |'
- en: '| --- | --- |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Basic information (no permissions) | When a user authorizes your application
    and you don''t specify additional permissions, your application will only have
    access to the user''s basic information. This includes certain properties such
    as their id, name, gender, locale, and their profile picture. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 基本信息（无权限） | 当用户授权您的应用程序且您未指定额外权限时，您的应用程序将只能访问用户的基本信息。这包括某些属性，如他们的 id、姓名、性别、地区和他们的个人资料图片。|'
- en: '| User and friend permissions | As a part of the authorization process, you
    can also request for additional access to your user''s profile. You can access
    information such as their birthday, activities, checkins, and education history.
    The user must, however, authorize this at startup, in order to continue and authorize
    your application. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 用户和好友权限 | 作为授权过程的一部分，您还可以请求对用户个人资料的额外访问权限。您可以访问诸如他们的生日、活动、签到和教育历史等信息。然而，用户必须在启动时授权，以便继续并授权您的应用程序。|'
- en: '| Extended permissions | If you are using the Enhanced Authorization Dialog,
    the extended permissions will be presented to the user. These types of permissions
    allow you to read your user''s friend lists, read the user''s mail inbox, access
    your user''s friend requests, and create and modify events on the user''s behalf.
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 扩展权限 | 如果您正在使用增强型授权对话框，则将向用户展示扩展权限。这类权限允许您读取您用户的朋友列表、读取用户的邮件收件箱、访问您用户的朋友请求，并代表用户创建和修改事件。|'
- en: '| Open graph permissions | These types of permissions allow your applications
    to publish actions to the Open Graph API and enable it to retrieve any actions
    that have been published by any other application. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 开放图权限 | 这类权限允许您的应用程序向 Open Graph API 发布操作，并使其能够检索任何其他应用程序已发布的任何操作。|'
- en: '| Page permissions | These types of permissions allow you to retrieve `access_tokens`
    for pages and applications that the user administrates, and is only compatible
    with the Graph API. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 页面权限 | 这类权限允许您检索用户管理的页面和应用程序的 `access_tokens`，并且仅与 Graph API 兼容。|'
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现单点登录（SSO）功能的配方*'
- en: The *Using the Graph API to read JSON data* recipe
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Graph API 读取 JSON 数据* 的配方'
- en: Using the Graph API to read JSON data
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Graph API 读取 JSON 数据
- en: In this recipe we will learn about the Graph API and the Facebook Query Language
    (FQL). The Graph API is the core of Facebook and represents a simple social graph
    pertaining to people and each of the connections they have, by representing each
    of the objects in the graph (for example, people, photos, events, and pages) and
    the connections between them (for example, friend relationships, shared content,
    and photo tags).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习关于图形API和Facebook查询语言（FQL）的内容。图形API是Facebook的核心，它通过表示图中每个对象（例如，人、照片、活动和页面）以及它们之间的连接（例如，朋友关系、共享内容和照片标签）来表示一个简单的社会图。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, we will learn how simple it is to access
    the Graph API by passing the Graph Path to the `request` method. This can be achieved
    by following the steps as outlined.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱之后，我们将学习如何通过将图形路径传递给`request`方法来访问图形API，这是非常简单的。这可以通过遵循以下步骤来实现。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Within the **facebook DEVELOPERS** website, you can access the **Graph API Explorer**
    to learn more about what type of information is returned, and see a visual representation
    of the data schema that the **Facebook Query** **Language** (**FQL**) produces.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在**facebook DEVELOPERS**网站上，您可以访问**图形API探索器**来了解更多关于返回的信息类型，并查看**Facebook查询语言**（**FQL**）产生的数据模式的视觉表示。
- en: 'Log in to the **facebook DEVELOPERS** website at the following address: [http://developers.facebook.com/tools](http://developers.facebook.com/tools).'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到以下地址的**facebook DEVELOPERS**网站：[http://developers.facebook.com/tools](http://developers.facebook.com/tools)。
- en: Next, from the **Tools** section, click on the **Graph API Explorer** link.![How
    to do it...](img/3349_09_09.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**工具**部分，点击**图形API探索器**链接。![如何做...](img/3349_09_09.jpg)
- en: This will display the **Graph API Explorer** window and display an explanation
    of each of the data fields returned within the center view.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示**图形API探索器**窗口，并在中心视图中显示返回的每个数据字段的说明。
- en: Next, from the **Application** section, select **Social Networking App** from
    the drop-down menu.![How to do it...](img/3349_09_10.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从**应用程序**部分，从下拉菜单中选择**社交网络应用程序**。![如何做...](img/3349_09_10.jpg)
- en: Then, click on the **Submit** button to retrieve all basic information for the
    current user ID.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**提交**按钮以检索当前用户ID的所有基本信息。
- en: You have seen how easy it is to use the Graph API Explorer to retrieve a visual
    representation of the data for various types of information. Let's take a look
    at how we can access information about the currently logged in user.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到使用图形API探索器检索各种类型信息的数据视觉表示是多么容易。让我们看看我们如何访问当前登录用户的信息。
- en: Open the `ViewController.m` implementation file, located within the `SocialNetworkApp`
    folder.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`SocialNetworkApp`文件夹中的`ViewController.m`实现文件。
- en: 'Next, create the following code sections, as specified in the code snippets:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中指定：
- en: '[PRE7]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we start by declaring an `NSMutableDictionary` object variable
    `param` that will be used to pass an SQL query to the FQL object. This enables
    us to use an SQL style interface using the Graph API to query the data.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们首先声明一个`NSMutableDictionary`对象变量`param`，它将被用来将SQL查询传递给FQL对象。这使得我们能够使用SQL风格的接口通过图形API查询数据。
- en: We then call the `requestWithMethodName` method of the `facebook` object and
    set up `type` to be `FQL.query`, which tells the method that we are passing in
    a query string and to return the contents as a dictionary array object. When our
    `requestWithMethodName` method completes, it calls the `didLoad` method of the
    `request` method. This method parses the result using a JSON call.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用`facebook`对象的`requestWithMethodName`方法，并将`type`设置为`FQL.query`，这告诉该方法我们正在传递一个查询字符串，并返回一个字典数组对象的内容。当我们的`requestWithMethodName`方法完成后，它调用`request`方法的`didLoad`方法。此方法使用JSON调用解析结果。
- en: Next, we check to see the type that has been returned. If multiple results are
    returned, an `NSArray` object is returned, otherwise an `NSDictionary` object
    is returned for single result values. We then set our result to point to the first
    position within the array, and then retrieve each of the fields for the `uid`,
    `name`, and `quotes`. We then declare a `UIImage` variable image and then typecast
    the profile picture to be of the type `UIImage`, before assigning this to our
    `imgPhoto` control on our form, as well as display the relevant profile details.
    Finally, if any JSON parsing errors are determined when our `requestWithMethodName`
    method completes, the `didFailWithError` method is called. Any error information
    is contained within the `NSError` variable error object.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查返回的类型。如果返回多个结果，则返回一个`NSArray`对象，否则对于单个结果值返回一个`NSDictionary`对象。然后，我们将我们的结果设置为指向数组中的第一个位置，然后检索`uid`、`name`和`quotes`的每个字段。然后我们声明一个`UIImage`变量`image`，然后将个人资料图片类型转换为`UIImage`，将其分配给我们的表单上的`imgPhoto`控件，并显示相关的个人资料详情。最后，如果我们的`requestWithMethodName`方法完成时确定存在JSON解析错误，则调用`didFailWithError`方法。任何错误信息都包含在`NSError`变量`error`对象中。
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on the Graph API and FQL Query language, please refer
    to the Facebook API and FQL reference material at the following locations: [https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/)
    and [https://developers.facebook.com/docs/reference/fql/](https://developers.facebook.com/docs/reference/fql/)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Graph API和FQL查询语言的更多信息，请参阅以下位置的Facebook API和FQL参考材料：[https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/)
    和 [https://developers.facebook.com/docs/reference/fql/](https://developers.facebook.com/docs/reference/fql/)
- en: See also
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Integrating with the Facebook social channels* recipe
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*与Facebook社交渠道集成*的示例'
- en: Integrating with the Facebook social channels
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Facebook社交渠道集成
- en: In this recipe we will learn how to delete an item from a table view, as well
    our Core Data model.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何从表格视图中删除一个项目，以及我们的Core Data模型。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, we will learn how to delete a row from
    our table view, and permanently remove this from our Core Data database.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的前一个示例之后，我们将学习如何从我们的表格视图中删除一行，并将其永久地从我们的Core Data数据库中删除。
- en: How to do it...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照给定的顺序遵循简单的步骤：
- en: Open the `ViewController.m` implementation file, located within the `SocialNetworkApp`
    folder.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开位于`SocialNetworkApp`文件夹中的`ViewController.m`实现文件。
- en: 'Next, create the following code sections, as specified in the code snippets:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如代码片段中指定：
- en: '[PRE8]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we start by declaring an `NSMutableDictionary` object variable
    `params` that will be used to pass the message and the notification text, using
    the `@message` and `@notification_text` parameters. We then use the `dialog` method
    of our `facebook` object, and tell the dialog that we want to use the `apprequests`
    dialog. Next, we declare the method called `dialogDidComplete`, which gets called
    if the `requests` dialog gets successfully displayed to the user. In the `postMessagetoWall:`
    method, we declare an `NSMutableDictionary` object variable `params` that will
    be used to pass the message and the notification text, using the `@name`, `@caption`,
    `@description`, `@link`, and `@picture` properties. These define what information
    is displayed when posting the messageto the user's wall. Next, we use the `dialog`
    method of our `facebook` object, and tell the dialog that we want to use the `feed`
    dialog, since we are posting details to the wall.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们首先声明一个`NSMutableDictionary`对象变量`params`，该变量将用于传递消息和通知文本，使用`@message`和`@notification_text`参数。然后，我们使用`facebook`对象的`dialog`方法，并告诉对话框我们想要使用`apprequests`对话框。接下来，我们声明一个名为`dialogDidComplete`的方法，该方法在`requests`对话框成功显示给用户时被调用。在`postMessagetoWall:`方法中，我们声明一个`NSMutableDictionary`对象变量`params`，该变量将用于传递消息和通知文本，使用`@name`、`@caption`、`@description`、`@link`和`@picture`属性。这些属性定义了在向用户的墙发布消息时显示的信息。接下来，我们使用`facebook`对象的`dialog`方法，并告诉对话框我们想要使用`feed`对话框，因为我们正在向墙发布详细信息。
- en: Next, in our `postMessage:` method, we declare and instantiate an `actionsheet`
    object that is based on the `UIActionSheet` class, and then initialize our action
    sheet to display the different types of actions we want to perform, to have displayed
    as the list of options to choose from. Next, we proceed to set the style for our
    action sheet using the `actionSheetStyle` property of the `UIActionSheet` class,
    and then display the action sheet into the current view using the `showInView:self.view`
    method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的`postMessage:`方法中，我们声明并实例化一个基于`UIActionSheet`类的`actionsheet`对象，然后初始化我们的操作表，以显示我们想要执行的不同类型的操作，作为可供选择的选项列表。接下来，我们使用`UIActionSheet`类的`actionSheetStyle`属性设置我们的操作表样式，然后使用`showInView:self.view`方法将操作表显示在当前视图中。
- en: In our next part, we define a delegate method to determine the button that was
    pressed from the action sheet and used the `clickedButtonAtIndex` method of the
    `actionSheet` property. We then check the value of the `buttonIndex` variable
    to determine the index of the button that was pressed.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一部分，我们定义一个委托方法来确定从操作表按下的按钮，并使用`actionSheet`属性的`clickedButtonAtIndex`方法。然后我们检查`buttonIndex`变量的值以确定按下的按钮索引。
- en: There's more…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Facebook iOS SDK provides you with an easy way of making your applications
    integrate with the Facebook social channels. Using these social channels allows
    your users to submit posts to their wall, or send notification requests to their
    friends.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook iOS SDK为您提供了一个简单的方法，使您的应用程序能够与Facebook社交渠道集成。使用这些社交渠道允许您的用户向他们的墙提交帖子，或向他们的朋友发送通知请求。
- en: 'The iOS SDK provides you with a method to integrate through the social channels
    using the Facebook platform dialogs. The following table lists the dialogs that
    are currently supported by Facebook:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: iOS SDK为您提供了一个通过Facebook平台对话框使用社交渠道进行集成的功能。以下表格列出了Facebook目前支持的对话框：
- en: '| Social channel dialogs | Description |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 社交渠道对话框 | 描述 |'
- en: '| --- | --- |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Feed dialog | This dialog is used for publishing posts to a user''s news
    feed. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 喂食对话框 | 此对话框用于向用户的新闻源发布帖子。|'
- en: '| Requests dialog | This type of dialog allows you to send a request to one
    or more of your friends. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 请求对话框 | 此类型对话框允许您向一个或多个朋友发送请求。|'
- en: When using Facebook requests, these social channel dialogs provide you with
    a great way of allowing users to invite their friends to your iOS application
    or even accept gifts from their friends.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Facebook请求时，这些社交渠道对话框为您提供了允许用户邀请他们的朋友到您的iOS应用程序或甚至接受他们朋友礼物的绝佳方式。
- en: Requests are sent using the `Request` dialog, and if the user's iOS device supports
    `push` notifications, they will receive a push notification via the Facebook iOS
    application whenever a notification request is sent.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 请求是通过`Request`对话框发送的，如果用户的iOS设备支持`push`通知，那么每当发送通知请求时，他们将通过Facebook iOS应用程序收到推送通知。
- en: See also
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *How to handle Facebook errors in your application* recipe
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如何在您的应用程序中处理Facebook错误*配方'
- en: Handling Facebook errors within your application
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的应用程序中处理Facebook错误
- en: In this recipe, we will learn how to handle Facebook errors within our application.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何在我们的应用程序中处理Facebook错误。
- en: Getting ready
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Following on from our previous recipe, handling errors within your application
    when using the Facebook SDK is extremely easy. Should any errors occur within
    your iOS application, the `FBRequestDelegate` and the `FBDialogDelegateprotocols`
    will immediately handle them.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的配方中，当使用Facebook SDK时，在您的应用程序中处理错误非常简单。如果在您的iOS应用程序中发生任何错误，`FBRequestDelegate`和`FBDialogDelegateprotocols`将立即处理它们。
- en: How to do it...
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, follow the simple steps as outlined in the given order:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照给定的顺序遵循简单的步骤：
- en: Open the `ViewController.m` implementation file from the **Project Navigator**.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**中打开`ViewController.m`实现文件。
- en: 'Next, create the following code sections, as specified in the following code
    snippets:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建以下代码部分，如以下代码片段中指定：
- en: '[PRE9]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we start by creating the `request::(FBRequest *)request:didFailWithError:`,
    which gets called upon whenever an error during the requesting of information
    using the Graph API occurs. Any errors that occur will be captured and returned
    in the `error` object.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们首先创建`request::(FBRequest *)request:didFailWithError:`，当使用Graph API请求信息时发生错误时会被调用。任何发生的错误都将被捕获并返回在`error`对象中。
- en: The `dialog:didFailWithError` method is invoked if there is an error during
    the dialog process. Any errors that occur will be captured and returned in the
    `error` object.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在对话框过程中出现错误，将调用`dialog:didFailWithError`方法。发生的任何错误都将被捕获并返回到`error`对象中。
- en: Note
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on how to handle errors when using the Facebook iOS SDK,
    you can refer to the Facebook iOS Reference documentation at the following URL:
    [https://developers.facebook.com/docs/mobile/ios/build/#errors](https://developers.facebook.com/docs/mobile/ios/build/#errors)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用Facebook iOS SDK处理错误的更多信息，您可以参考以下URL的Facebook iOS参考文档：[https://developers.facebook.com/docs/mobile/ios/build/#errors](https://developers.facebook.com/docs/mobile/ios/build/#errors)
- en: There's more…
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We just have a few more things to implement before we have a complete working
    application. We will need to make some changes to our application's property list
    to enable SSO support when the application is run.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们拥有一个完整的运行应用程序之前，我们还需要实现一些功能。我们需要对我们的应用程序属性列表进行一些更改，以便在应用程序运行时启用单点登录（SSO）支持。
- en: 'This can be achieved by following the given, simple steps:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过遵循以下简单步骤实现：
- en: Select the `SocialNetworkApp-info.plist` file from within **Project Navigator**.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目导航器**中选择`SocialNetworkApp-info.plist`文件。
- en: Next, right-click within the center of the panel, then select **Add Row** from
    the pop up list.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在面板中心右键点击，然后从弹出列表中选择**添加行**。
- en: Add a new entry called `URL Types`, and set its type to be **Array**.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`URL Types`的新条目，并将其类型设置为**数组**。
- en: Right-click and select **Add Row** inside the **URL** types.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击，然后在**URL**类型中选择**添加行**。
- en: Then, create a new item called `Item 0`, and set its type to be **Dictionary**.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`Item 0`的新条目，并将其类型设置为**字典**。
- en: Next, create a new entry called `URL Schemes`, and set its type to be **Array**.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`URL Schemes`的新条目，并将其类型设置为**数组**。
- en: Then, create a new item called `Item 0`, and set its type to be **String**.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`Item 0`的新条目，并将其类型设置为**字符串**。
- en: Finally, using the Facebook AppID value when we registered our mobile application,
    enter this in for the **Value** field. You must prefix this with `fb` followed
    by your App ID for this to work correctly.![There's more…](img/3349_09_11.jpg)
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用我们在注册移动应用程序时注册的Facebook AppID值，将其输入到**值**字段中。您必须在此前加上`fb`，然后加上您的App ID，这样才能正确工作。![还有更多…](img/3349_09_11.jpg)
- en: 'As you can see from the preceding screenshot, we have modified our `.plist`
    file so that it can support SSO. We specifically created and registered two URL
    variables: `URL Types` and `URL Schemes`, so that it can uniquely identify your
    application with iOS.'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，我们已经修改了我们的`.plist`文件，使其能够支持SSO。我们特别创建并注册了两个URL变量：`URL Types`和`URL
    Schemes`，以便iOS能够唯一地识别您的应用程序。
- en: Next, build and run the application by choosing **Product** | **Run from the
    Product** menu, or Mac users can alternatively press *Command*+ *R*.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过选择**产品** | **从产品菜单运行**，或Mac用户可以按*Command*+ *R*来构建和运行应用程序。
- en: 'The following screenshot shows the application running on the iOS device:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了在iOS设备上运行的应用程序：
- en: '![There''s more…](img/3349_09_12.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/3349_09_12.jpg)'
- en: From the preceding screenshot, you can see that when we first load our social
    networking application, we receive the authorization dialog box with the permissions
    that we have requested.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图可以看出，当我们首次加载我们的社交网络应用程序时，我们会收到带有我们请求的权限的授权对话框。
- en: Once the user has pressed on the **Log In** button, the dialog box will disappear,
    and our iOS application will be displayed (as shown in the second part of the
    screenshot).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户点击了**登录**按钮，对话框将消失，我们的iOS应用程序将显示出来（如屏幕截图的第二部分所示）。
- en: We then press the **Action** button and select the **Submit new post** button
    to display the posted new message to our wall, which is shown in the final screenshot.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们按下**操作**按钮，并选择**提交新帖子**按钮来显示发布到我们墙上的新消息，这显示在最后的屏幕截图中。
- en: See also
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Integrating with the Facebook social channels* recipe
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成Facebook社交渠道*配方'
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现单点登录（SSO）功能*配方'
