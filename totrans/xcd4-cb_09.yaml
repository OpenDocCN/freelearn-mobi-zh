- en: Chapter 9. Creating a Social Networking App with the Facebook iOS SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Facebook iOS SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering your iOS applications with Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple social networking application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Facebook iOS SDK to your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Single Sign On (SSO) feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting additional Facebook permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and using the Graph API to read JSON data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with the Facebook social channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling Facebook errors within your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On May 24, 2007, Mark Zuckerberg announced the Facebook platform, a development
    platform for programmers to create social applications within Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: When Facebook launched the development platform, numerous applications had been
    built, and already had millions of users playing them. The social networking application
    utilizes the Facebook collection of APIs that enables you to connect to Facebook
    and send application request notifications, so that you can add them to your list
    of friends.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at how to download the Facebook iOS SDK
    and register your iOS application, so that it can be used with Facebook. We will
    then start by creating a simple application and look at how we can add the Facebook
    iOS SDK into our project, so that the user can sign in to their Facebook account
    in order to send notification requests as well as submit news feeds directly to
    their home page wall.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will look at how to implement the **Single Sign On** (**SSO**) feature
    of the Facebook iOS SDK that allows the user to sign in to your application using
    their Facebook identity.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Facebook iOS SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn the steps involved to download the Facebook iOS
    SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to proceed, we first need to launch our browser and download the Facebook
    iOS SDK package from the Facebook developer website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch your browser and enter in [http://developers.facebook.com/ios/](http://developers.facebook.com/ios/).![How
    to do it...](img/3349_09_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Download the SDK** button to start downloading the Facebook
    SDK. Once downloaded, install the package. The default installation location is
    `~/Documents/FacebookSDK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at the necessary steps required to download the Facebook
    iOS SDK from the Facebook developer portal. Compared to earlier releases of the
    Facebook SDK, this SDK is now packaged as a framework and provides you with all
    of the functionality required to make your applications interact with the Facebook
    platform. Whenever developing applications with the Version 3.1 and above of the
    Facebook SDK, it requires Xcode 4.5 and above.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook SDK framework contains all of the method objects and APIs that
    are required to enable you to interact with Facebook and send notification requests,
    or simply post messages to the current person's wall page using the Single Sign
    On feature of the Facebook iOS SDK.
  prefs: []
  type: TYPE_NORMAL
- en: This lets your users sign in to your app using their Facebook identity. With
    the initial release of the SDK, the `authorize` method always opened an inline
    dialog box containing `UIWebView` in which the authorization UI was shown to the
    user, and required users to enter their credentials separately for each app they
    authorized.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the updated version of the SDK this has been changed and no longer requires
    users having to re-enter their credentials for every application on the device
    they want to authorize. Using the Facebook iOS SDK allows you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Facebook iOS SDK types | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication and authorization | Prompt users to log in to Facebook and
    grant permissions to your application. |'
  prefs: []
  type: TYPE_TB
- en: '| Make API calls | This allows you to fetch user profile data, as well as any
    information related to the user''s friends using JSON API calls. |'
  prefs: []
  type: TYPE_TB
- en: '| Display dialog | This allows you to interact with the user via a `UIWebView`
    view. This is extremely useful for enabling interactions with Facebook, without
    requiring upfront permissions. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Registering your iOS applications with Facebook* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering your iOS applications with Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to register an iOS application so that it can
    be used with the Facebook platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe and before we can start integrating our
    application with the Facebook platform, we will need to register the application
    with Facebook's mobile website and provide some basic application information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and enter in [http://developers.facebook.com/apps](http://developers.facebook.com/apps).![How
    to do it...](img/3349_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, either sign up for Facebook if you are not a registered user, or enter
    in your Facebook account credentials and click on the **Log In** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **+Create New App** button from the **Apps** page.![How to
    do it...](img/3349_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter `Social Networking App` for the **App Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button to proceed to the next step in the wizard.
    This will be used and displayed whenever you post or send a notification message
    to your friends.![How to do it...](img/3349_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will be prompted to enter in the **Security Check** words before you
    can proceed to the next step.![How to do it...](img/3349_09_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in the words displayed on your screen and click on the **Submit** button
    to continue. The words displayed will be different each time this screen is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you enter in the words incorrectly, you may end up with your account being
    blocked. If this is the case, you will need to contact Facebook directly to have
    this unlocked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3349_09_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The above screenshot shows the final screen that allows you to make any final
    changes before you commit your changes. Once you are satisfied with all changes,
    click on the **Save Changes** button.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **App ID** is an important field that we will be using in our iOS application
    to communicate with Facebook, and is highlighted by an arrow in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we looked at the steps required to register our application
    with Facebook's mobile development platform so that our application can communicate
    with this platform.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at how to create and define a new application name that will be displayed
    whenever notification messages are sent or posted to your wall or friends. In
    the next recipe, we will take a look at how to build the user interface for our
    social networking application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building a simple social networking application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple social networking application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to build the user interface for our social
    networking application project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will start by building the components that will comprise
    of the user interface for our application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch **Xcode** from the `/Xcode4/Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Create a new Xcode project**, or **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Single View Application** from the list of available templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Next** button to proceed to the next step in the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter in `SocialNetworkApp` as the name for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **iPhone** from under the **Devices** drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Storyboards** checkbox has not been selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Use Automatic Reference Counting** and the **Include Unit
    Tests** checkboxes have not been selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Next** button to proceed to the next step in the wizard
    and specify the location where you would like to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button to continue and display the Xcode workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created our `SocialNetworkApp` project, we can start building
    our user interface that will be responsible for allowing us to communicate with
    Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `ViewController.xib` files from the **Project Navigator** Window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, select and drag a **UIToolbar** object, and add
    this to our view and select the **Item** button located within our toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Attributes Inspector** section, change the **Identifier** property
    to **Custom** and change the value of **Style** to **Bordered** and the value
    of **Title** to **Sign In**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an outlet for this `UIBarButtonItem`, and name it `loginButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `action` method for the **Sign In** button and name it `loginButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **flexible space bar button item** next to the **Sign In** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add another `UIBarButtonItem` to the right of the flexible space bar button
    item and from the **Attributes Inspector**, change the **Identifier** property
    to **Action**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, drag a **UIImageView** object onto the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `UIImageView` control so that it can hold a passport size photo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet for this `UIImageView`, and name it `imgPhoto`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Object Library**, drag a **UITextView** object onto the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the **UITextView** control so that it takes up the width of the View
    Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the outlet for this `UITextView`, and name it `userInfoDetails`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the **SocialNetworkApp** by choosing **File** | **Save** from the menu
    bar.![How to do it…](img/3349_09_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have followed the steps correctly, the completed View Controller screen
    should look similar to the previous screenshot. Feel free to adjust your screen
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by building our user interface for our `SocialNetworkApp`
    application that will enable us to log in and out of Facebook and post messages
    to our wall. In our next recipe, we will look at how to add the Facebook iOS SDK
    into our project, which allows us to communicate with the Facebook mobile development
    platform, and includes the necessary properties and methods that allows us to
    post messages to the current user's wall.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding the Facebook SDK and dependencies to your project* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Xcode to create an iOS project* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    and Installing the iOS SDK Development Tools"), *Getting and Installing the iOS
    SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating outlets to Interface Builder objects* recipe in [Chapter 1](ch01.html
    "Chapter 1. Getting and Installing the iOS SDK Development Tools"), *Getting and
    Installing the iOS SDK Development Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Facebook SDK and dependencies to your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to include the Facebook SDK and the framework
    dependencies as part of our `SocialNetworkingApp` project to enable us to communicate
    with the Facebook mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the Facebook SDK and the required frameworks, follow the given simple
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project Navigator** window, select the `SocialNetworkApp` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Add Files to "SocialNetworkApp" …** or Mac users can press *Option*
    + *Command* + *A*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag the `FacebookSDK.framework` folder from the `Facebook SDK installation`
    folder into the **Frameworks** section of your **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, choose **Create groups for any added folders** and deselect **Copy Items
    into destination group's folder** (if needed) to keep the reference to the SDK
    installation folder, rather than creating a copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, add the Facebook SDK for iOS resource bundle by dragging the `FacebookSDKResources.bundle`
    file from the `FacebookSDK.framework/Resources` folder into the **Frameworks**
    section of your **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, the SDK relies on three other frameworks (AdSupport, Accounts, and Social)
    to use the Facebook features built into iOS6\. To add these, go to the **Linked
    Frameworks and Libraries** section of the target's **Summary** pane, and click
    on the **+** button to add them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to import the Facebook Dialog calls headers by dragging the `DeprecatedHeaders`
    folder from the `FacebookSDK.framework/Versions/A/DeprecatedHeaders` folder into
    the **Frameworks** section of your **Project Navigator**:![How to do it...](img/3349_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we need to add the **–lsqlite3.0** SQL library to the list of build dependencies
    in the **Build Settings** pane:![How to do it...](img/3349_09_08a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the changes have been made, your solution should contain the following
    files:![How to do it...](img/3349_09_08b.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project by selecting **File** | **Save**, as we are done adding the
    Facebook SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we learned how to manually add the Facebook SDK components into
    our project using Xcode to provide us with the ability to communicate with the
    Facebook platform to post messages to the current user's wall, or to retrieve
    information associated with the user using both the SSO feature and the Facebook
    Graph API methods.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about the new framework dependencies that are dependent upon the
    Facebook SDK when building projects under the iOS6 platform, as well as adding
    the SQLite SQL library to the list of build dependencies within our project build
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to import the Facebook Feed and Requests Dialogs methods
    to ensure backward compatibility of the Facebook SDK headers with the same methods
    used within Version 2.0 of the Facebook SDK.
  prefs: []
  type: TYPE_NORMAL
- en: In our next recipe, we will learn how to implement the SSO within our application
    to enable us to log in and out of Facebook, as well as positing message details
    to the current user's Facebook wall.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on the Facebook iOS SDK, please refer to the Facebook Developer
    Documentation, which can be found at [http://developers.facebook.com/docs/guides/mobile](http://developers.facebook.com/docs/guides/mobile)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Single Sign On (SSO) feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to implement the Single Sign On feature of
    the Facebook iOS SDK that will enable our application to communicate with Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: The process of using SSO works by redirecting the user to the Facebook iOS application
    on their device, and presenting them with an authentication dialog box, showing
    only those permissions that your application has been configured to use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `AppDelegate.hinterface` file from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open the `AppDelegate.m` implementation file from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the implementation file as shown by the highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `didFinishLaunchingWithOptions:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To ensure your application works with your own AppID, you will need to replace
    the `YOUR_APPID_HERE` string after the `initWithAppId:` with your own created
    Facebook AppID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the following code sections, as specified in the code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by extending our class to include the `FBSessionDelegate`
    and `FBDIalogDelegate` class protocols, as well as its methods. We then declared
    an instance variable called `facebook` that will enable us to access the `Facebook`
    class methods. Next, we added a property instance of the `Facebook` class to create
    the class getters and setters and then proceeded to synthesize our `facebook`
    variable that we defined within the `AppDelegate.h` interface file. This is done
    so that we can make our implementation file aware of the `facebook` variable,
    so that we can access the object properties and methods. In our `didFinishLaunchingWithOptions:`
    method, we initialize our `Facebook` object to invoke the SSO, by passing in the
    application AppID that we created when we registered our iOS mobile app, as well
    as the Graph API and Platform Dialogs from within our app. Once the object has
    been instantiated, we need to check for any previously saved access token information
    and then use this saved information to set up a valid session, by assigning the
    saved information to the Facebook access token and expiration date properties
    to ensure that your app does not redirect to the Facebook application. Invoke
    the authorization dialog box, if the application already has a valid `access_token`.
  prefs: []
  type: TYPE_NORMAL
- en: We proceed to check for a valid session and if it is not valid, we call the
    `authorize` method which will log the user in and prompt the user to authorize
    the application and then declare two methods that will be called by the iOS when
    the Facebook application redirects to the app during the SSO process. These methods
    provide the app with the user's credentials.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that we have declared two different methods that will be used
    to handle different versions of the iOS app. `The handleOpenURL:` method is for
    versions prior to Version 4.2, and the `openURL` one is for Versions 4.2 and greater.
    In our next step, we implement the Facebook `fbDidLogin:` method of `FBSessionDelegate`.
    After the SSO process has successfully signed in and the Facebook app redirects
    back to the calling application, we save the user's credentials using the `FBAccessTokenKey`
    and `FBExpirationDateKey` keys, and then save these into the user preferences
    `NSUserDefaults`.
  prefs: []
  type: TYPE_NORMAL
- en: We then proceed to implement the Facebook `fbDidLogout:` method of `FBSessionDelegate`.
    After the SSO process successfully signs out of the iOS app, the `callback` method
    gets called. We need to check to see if we have a successful access token key
    prior to removing the stored user's credentials, using the `FBAccessTokenKey`
    and `FBExpirationDateKey` keys.
  prefs: []
  type: TYPE_NORMAL
- en: We then remove those details from the user preferences using the `NSUserDefaults`
    object. Finally, we create an instance of the `UIAlertView` dialog box to notify
    the user that a successful logout has happened. In our previous sections, we implemented
    the Facebook `fbSessionInvalidated` method of `FBSessionDelegate`. When a request
    is made to post a new message to the current user's wall or to send notifications
    to your friends, the `fbSessionInvalidated` method is called to ensure that a
    valid session exists. This uses the `session` object, created by the SSO process
    when your application signed in. If the session state has expired, we declare
    an instance of the `UIAlertView` class to display a message to the user, before
    finally making a call to the `fbDidLogout` method to ensure that all of the required
    access tokens are removed cleanly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a user is already signed into the Facebook iOS application on their device,
    he won't need to provide this again. The process of using SSO works by redirecting
    the users to the Facebook iOS application on their device, and presenting them
    with an authentication dialog box, showing only those permissions that your application
    has been configured to use. Once the user has allowed those permissions requested
    by your iOS app, they will be redirected back to your application with the appropriate
    access token.
  prefs: []
  type: TYPE_NORMAL
- en: When using the Facebook SSO process, certain things can behave slightly differently
    depending on what version of the Facebook iOS app has been installed on the user's
    iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table explains what happens when the Facebook SSO process is
    run under certain conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Facebook SSO condition | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iOS application is running with a version of iOS that supports multitasking
    and running Version 3.2.3, or greater of the Facebook iOS app. | The Facebook
    SDK will attempt to open the authorization dialog box within the Facebook app.After
    the user grants or declines authorization, the user is redirected back to the
    calling application, passing back with it an authorization token, expiration,
    and any other parameters the Facebook `oAuth` authentication server may happen
    to return. |'
  prefs: []
  type: TYPE_TB
- en: '| iOS device running with a version of iOS that supports multitasking, and
    isn''t running Version 3.2.3, or greater of the Facebook iOS app. | The Facebook
    SDK will open the authorization dialog box within Safari. After the user grants,
    or declines authorization, Safari will redirect the user back to the calling application.This
    process is similar to the Facebook app authorization, and allows for multiple
    apps to share the same Facebook user `access_token` through the `Safari` cookie.
    |'
  prefs: []
  type: TYPE_TB
- en: '| If the iOS application is running a version of iOS that does not support
    multitasking. | The SDK will use the old mechanism of popping up an inline `UIWebView`
    web view control, prompting the user to log in and grant access. |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Facebook recommends that you should always ensure that your devices are running
    the latest version of the Facebook iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing the View Controller class* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the View Controller class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will start to implement additional functionality to our `ViewController`
    class, as well as importing some very important header files and extend our class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, ensure that our `SocialNetworkApp` project
    file is open.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow these simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.h` interface file from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the interface file as shown by the highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open the `ViewController.m` implementation file from the **Project Navigator**
    and modify the implementation file as shown by the highlighted code sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by extending our class to include the `UIActionSheetDelegate`
    and `FBRequestDelegate` class protocols, as well as its methods. We then declared
    an instance variable called `facebook` that will enable us to access the `Facebook`
    class methods. Next, we added a property instance of the `Facebook` class to create
    the class getters and setters and then proceed to synthesize our `facebook` variable
    that we defined within the `AppDelegate.h` interface file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we import the interface file header information for our `FBConnect.h`
    interface file, so that we can access the request dialog class methods. Next,
    we declare an application delegate object `mainDelegate` that points to the properties
    and class methods within our `delegate` class. Next, we initialize our facebook
    object within our `ViewController` to use the same object instance as the one
    which we instantiated within our `delegate` class. Finally, we initialize our
    user info details using `UITextView` control.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create our `loginButton:` method, and check the status of the button.
    If the button reads **Sign In**, we use the `isSessionValid` method of the `facebook`
    object to determine if we still have a valid connection to the `facebook` instance.
  prefs: []
  type: TYPE_NORMAL
- en: If it proves that our session has expired, we initialize and pass to our `authorize`
    method of the facebook class permissions to request for accessing the user's e-mail,
    and allow the iOS to publish to the **Open Graph API** actions. Finally, we release
    the memory that has been allocated by our `permissions` object and then update
    the title of the button to read **Sign Out**. If our button reads **Sign Out**
    as determined by the `loginButton:` method, we update the title of the button
    to read **Sign In** and then call the `logout` method of the `Facebook` class,
    and then pass in our `mainDelegate` object. When this method is called, it will
    call the `fbDidLogout` method of the `FBSessionDelegate` within our `AppDelegate`
    class to handle any post logout actions and releasing of objects as well as for
    notifying the user that a successful logout has taken place.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When making a call to the `logout` method, your application''s permissions
    will not be revoked; it will simply clear the value of your application''s `access_token`.
    If a user who has previously logged out of your application decides to run it
    again, they will simply see a notification that they are logging back into your
    application, not a notification requesting for permissions. For more information
    on the Facebook protocol methods, refer to the following URL: [http://developers.facebook.com/docs/reference/iossdk/#protocols](http://developers.facebook.com/docs/reference/iossdk/#protocols)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Requesting additional Facebook permissions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requesting additional Facebook permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to specify additional permissions to be used
    by our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn how to implement additional
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `AppDelegate.m` implementation file from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, modify the `didFinishLaunchingWithOptions:` method as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we begin by declaring an `NSArray` object variable permission
    that will be used to store each of our permissions that we want to request. We
    then pass this variable to our `authorize` method of the `facebook` object, before
    finally releasing the memory allocated by the object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the full list of available permissions that are made
    available to you, refer to the Facebook Permissions reference at the following
    URL: [https://developers.facebook.com/docs/authentication/permissions/](https://developers.facebook.com/docs/authentication/permissions/)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using Facebook integration within your application, you can specify additional
    permissions to be used by your application. When you launch the application without
    specifying additional permissions, this will use the default permissions and will
    only get the ability to read only the user's basic information and this includes
    certain properties of the `User` object such as id, name, picture, gender, and
    their locale. If you want to read additional data or publish data back to Facebook,
    you will need to request these additional permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'These additional permissions fall into the following sections, as shown in
    the given table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Requested permissions | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Basic information (no permissions) | When a user authorizes your application
    and you don''t specify additional permissions, your application will only have
    access to the user''s basic information. This includes certain properties such
    as their id, name, gender, locale, and their profile picture. |'
  prefs: []
  type: TYPE_TB
- en: '| User and friend permissions | As a part of the authorization process, you
    can also request for additional access to your user''s profile. You can access
    information such as their birthday, activities, checkins, and education history.
    The user must, however, authorize this at startup, in order to continue and authorize
    your application. |'
  prefs: []
  type: TYPE_TB
- en: '| Extended permissions | If you are using the Enhanced Authorization Dialog,
    the extended permissions will be presented to the user. These types of permissions
    allow you to read your user''s friend lists, read the user''s mail inbox, access
    your user''s friend requests, and create and modify events on the user''s behalf.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Open graph permissions | These types of permissions allow your applications
    to publish actions to the Open Graph API and enable it to retrieve any actions
    that have been published by any other application. |'
  prefs: []
  type: TYPE_TB
- en: '| Page permissions | These types of permissions allow you to retrieve `access_tokens`
    for pages and applications that the user administrates, and is only compatible
    with the Graph API. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Graph API to read JSON data* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Graph API to read JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn about the Graph API and the Facebook Query Language
    (FQL). The Graph API is the core of Facebook and represents a simple social graph
    pertaining to people and each of the connections they have, by representing each
    of the objects in the graph (for example, people, photos, events, and pages) and
    the connections between them (for example, friend relationships, shared content,
    and photo tags).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn how simple it is to access
    the Graph API by passing the Graph Path to the `request` method. This can be achieved
    by following the steps as outlined.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the **facebook DEVELOPERS** website, you can access the **Graph API Explorer**
    to learn more about what type of information is returned, and see a visual representation
    of the data schema that the **Facebook Query** **Language** (**FQL**) produces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the **facebook DEVELOPERS** website at the following address: [http://developers.facebook.com/tools](http://developers.facebook.com/tools).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, from the **Tools** section, click on the **Graph API Explorer** link.![How
    to do it...](img/3349_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will display the **Graph API Explorer** window and display an explanation
    of each of the data fields returned within the center view.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, from the **Application** section, select **Social Networking App** from
    the drop-down menu.![How to do it...](img/3349_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Submit** button to retrieve all basic information for the
    current user ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have seen how easy it is to use the Graph API Explorer to retrieve a visual
    representation of the data for various types of information. Let's take a look
    at how we can access information about the currently logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file, located within the `SocialNetworkApp`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections, as specified in the code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we start by declaring an `NSMutableDictionary` object variable
    `param` that will be used to pass an SQL query to the FQL object. This enables
    us to use an SQL style interface using the Graph API to query the data.
  prefs: []
  type: TYPE_NORMAL
- en: We then call the `requestWithMethodName` method of the `facebook` object and
    set up `type` to be `FQL.query`, which tells the method that we are passing in
    a query string and to return the contents as a dictionary array object. When our
    `requestWithMethodName` method completes, it calls the `didLoad` method of the
    `request` method. This method parses the result using a JSON call.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we check to see the type that has been returned. If multiple results are
    returned, an `NSArray` object is returned, otherwise an `NSDictionary` object
    is returned for single result values. We then set our result to point to the first
    position within the array, and then retrieve each of the fields for the `uid`,
    `name`, and `quotes`. We then declare a `UIImage` variable image and then typecast
    the profile picture to be of the type `UIImage`, before assigning this to our
    `imgPhoto` control on our form, as well as display the relevant profile details.
    Finally, if any JSON parsing errors are determined when our `requestWithMethodName`
    method completes, the `didFailWithError` method is called. Any error information
    is contained within the `NSError` variable error object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on the Graph API and FQL Query language, please refer
    to the Facebook API and FQL reference material at the following locations: [https://developers.facebook.com/docs/reference/api/](https://developers.facebook.com/docs/reference/api/)
    and [https://developers.facebook.com/docs/reference/fql/](https://developers.facebook.com/docs/reference/fql/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating with the Facebook social channels* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with the Facebook social channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will learn how to delete an item from a table view, as well
    our Core Data model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, we will learn how to delete a row from
    our table view, and permanently remove this from our Core Data database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file, located within the `SocialNetworkApp`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections, as specified in the code snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we start by declaring an `NSMutableDictionary` object variable
    `params` that will be used to pass the message and the notification text, using
    the `@message` and `@notification_text` parameters. We then use the `dialog` method
    of our `facebook` object, and tell the dialog that we want to use the `apprequests`
    dialog. Next, we declare the method called `dialogDidComplete`, which gets called
    if the `requests` dialog gets successfully displayed to the user. In the `postMessagetoWall:`
    method, we declare an `NSMutableDictionary` object variable `params` that will
    be used to pass the message and the notification text, using the `@name`, `@caption`,
    `@description`, `@link`, and `@picture` properties. These define what information
    is displayed when posting the messageto the user's wall. Next, we use the `dialog`
    method of our `facebook` object, and tell the dialog that we want to use the `feed`
    dialog, since we are posting details to the wall.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in our `postMessage:` method, we declare and instantiate an `actionsheet`
    object that is based on the `UIActionSheet` class, and then initialize our action
    sheet to display the different types of actions we want to perform, to have displayed
    as the list of options to choose from. Next, we proceed to set the style for our
    action sheet using the `actionSheetStyle` property of the `UIActionSheet` class,
    and then display the action sheet into the current view using the `showInView:self.view`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: In our next part, we define a delegate method to determine the button that was
    pressed from the action sheet and used the `clickedButtonAtIndex` method of the
    `actionSheet` property. We then check the value of the `buttonIndex` variable
    to determine the index of the button that was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook iOS SDK provides you with an easy way of making your applications
    integrate with the Facebook social channels. Using these social channels allows
    your users to submit posts to their wall, or send notification requests to their
    friends.
  prefs: []
  type: TYPE_NORMAL
- en: 'The iOS SDK provides you with a method to integrate through the social channels
    using the Facebook platform dialogs. The following table lists the dialogs that
    are currently supported by Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Social channel dialogs | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Feed dialog | This dialog is used for publishing posts to a user''s news
    feed. |'
  prefs: []
  type: TYPE_TB
- en: '| Requests dialog | This type of dialog allows you to send a request to one
    or more of your friends. |'
  prefs: []
  type: TYPE_TB
- en: When using Facebook requests, these social channel dialogs provide you with
    a great way of allowing users to invite their friends to your iOS application
    or even accept gifts from their friends.
  prefs: []
  type: TYPE_NORMAL
- en: Requests are sent using the `Request` dialog, and if the user's iOS device supports
    `push` notifications, they will receive a push notification via the Facebook iOS
    application whenever a notification request is sent.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *How to handle Facebook errors in your application* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling Facebook errors within your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to handle Facebook errors within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following on from our previous recipe, handling errors within your application
    when using the Facebook SDK is extremely easy. Should any errors occur within
    your iOS application, the `FBRequestDelegate` and the `FBDialogDelegateprotocols`
    will immediately handle them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, follow the simple steps as outlined in the given order:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ViewController.m` implementation file from the **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create the following code sections, as specified in the following code
    snippets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we start by creating the `request::(FBRequest *)request:didFailWithError:`,
    which gets called upon whenever an error during the requesting of information
    using the Graph API occurs. Any errors that occur will be captured and returned
    in the `error` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `dialog:didFailWithError` method is invoked if there is an error during
    the dialog process. Any errors that occur will be captured and returned in the
    `error` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on how to handle errors when using the Facebook iOS SDK,
    you can refer to the Facebook iOS Reference documentation at the following URL:
    [https://developers.facebook.com/docs/mobile/ios/build/#errors](https://developers.facebook.com/docs/mobile/ios/build/#errors)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just have a few more things to implement before we have a complete working
    application. We will need to make some changes to our application's property list
    to enable SSO support when the application is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved by following the given, simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `SocialNetworkApp-info.plist` file from within **Project Navigator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, right-click within the center of the panel, then select **Add Row** from
    the pop up list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new entry called `URL Types`, and set its type to be **Array**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **Add Row** inside the **URL** types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create a new item called `Item 0`, and set its type to be **Dictionary**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new entry called `URL Schemes`, and set its type to be **Array**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create a new item called `Item 0`, and set its type to be **String**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, using the Facebook AppID value when we registered our mobile application,
    enter this in for the **Value** field. You must prefix this with `fb` followed
    by your App ID for this to work correctly.![There's more…](img/3349_09_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see from the preceding screenshot, we have modified our `.plist`
    file so that it can support SSO. We specifically created and registered two URL
    variables: `URL Types` and `URL Schemes`, so that it can uniquely identify your
    application with iOS.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, build and run the application by choosing **Product** | **Run from the
    Product** menu, or Mac users can alternatively press *Command*+ *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the application running on the iOS device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3349_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can see that when we first load our social
    networking application, we receive the authorization dialog box with the permissions
    that we have requested.
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has pressed on the **Log In** button, the dialog box will disappear,
    and our iOS application will be displayed (as shown in the second part of the
    screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: We then press the **Action** button and select the **Submit new post** button
    to display the posted new message to our wall, which is shown in the final screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Integrating with the Facebook social channels* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing the Single Sign On (SSO) feature* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
