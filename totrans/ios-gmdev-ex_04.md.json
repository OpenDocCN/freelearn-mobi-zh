["```swift\n    override func viewDidLoad() {\n            super.viewDidLoad()\n\n            let menuscene = NodeMenuScene()\n\n            let skview = view as SKView\n\n            skview.showsFPS = true\n            skview.showsNodeCount = true\n            skview.ignoresSiblingOrder = true\n            menuscene.scaleMode = .ResizeFill\n\n            menuscene.anchorPoint = CGPoint(x: 0.5, y: 0.5)\n            menuscene.size = view.bounds.size\n            skview.presentScene(menuscene)\n\n        }\n    ```", "```swift\nimport Foundation\nimport SpriteKit\n\nlet BackgroundImage = \"BG\"\nlet FontFile = \"Mackinaw1\"\n\nlet sKCropNode = \"SKCropNode\"\n\nlet sKEmitterNode = \"SKEmitterNode\"\n\nlet sKLightNode = \"SKLightNode\"\nlet sKShapeNode = \"SKShapeNode\"\nlet sKVideoNode = \"SKVideoNode\"\nclass NodeMenuScene: SKScene {\n\n    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n    var labelNode : SKNode?\n    var backgroundNode : SKNode?\n\n    override func didMoveToView(view: SKView) {\n        backgroundNode = getBackgroundNode()\n        backgroundNode!.zPosition = 0\n        self.addChild(backgroundNode!)\n        labelNode = getLabelNode()\n        labelNode?.zPosition = 1\n        self.addChild(labelNode!)\n\n    }\n        func getBackgroundNode() -> SKNode {\n        var bgnode = SKNode()\n        var bgSprite = SKSpriteNode(imageNamed: \"BG\")\n        bgSprite.xScale = self.size.width/bgSprite.size.width\n        bgSprite.yScale = self.size.height/bgSprite.size.height\n        bgnode.addChild(bgSprite)\n        return bgnode\n    }\n    func getLabelNode() -> SKNode {\n    var labelNode = SKNode()\n        var cropnode = SKLabelNode(fontNamed: FontFile)\n        cropnode.fontColor = UIColor.whiteColor()\n        cropnode.name = sKCropNode\n        cropnode.text = sKCropNode\n        cropnode.position = CGPointMake(CGRectGetMinX(self.frame)+cropnode.frame.width/2, CGRectGetMaxY(self.frame)-cropnode.frame.height)\n        labelNode.addChild(cropnode)\n        var emitternode = SKLabelNode(fontNamed: FontFile)\n        emitternode.fontColor = UIColor.blueColor()\n        emitternode.name = sKEmitterNode\n        emitternode.text = sKEmitterNode\n        emitternode.position = CGPointMake(CGRectGetMinX(self.frame) + emitternode.frame.width/2 , CGRectGetMidY(self.frame) - emitternode.frame.height/2)\n        labelNode.addChild(emitternode)\n\n        var lightnode = SKLabelNode(fontNamed: FontFile)\n        lightnode.fontColor = UIColor.whiteColor()\n        lightnode.name = sKLightNode\n        lightnode.text = sKLightNode\n        lightnode.position = CGPointMake(CGRectGetMaxX(self.frame) - lightnode.frame.width/2 , CGRectGetMaxY(self.frame) - lightnode.frame.height)\n        labelNode.addChild(lightnode)\n\n        var shapetnode = SKLabelNode(fontNamed: FontFile)\n        shapetnode.fontColor = UIColor.greenColor()\n        shapetnode.name = sKShapeNode\n        shapetnode.text = sKShapeNode\n        shapetnode.position = CGPointMake(CGRectGetMaxX(self.frame) - shapetnode.frame.width/2 , CGRectGetMidY(self.frame) - shapetnode.frame.height/2)\n        labelNode.addChild(shapetnode)\n\n        var videonode = SKLabelNode(fontNamed: FontFile)\n        videonode.fontColor = UIColor.blueColor()\n        videonode.name = sKVideoNode\n        videonode.text = sKVideoNode\n        videonode.position = CGPointMake(CGRectGetMaxX(self.frame) - videonode.frame.width/2 , CGRectGetMinY(self.frame) )\n        labelNode.addChild(videonode)\n\n        return labelNode\n    }\n    var once:Bool = true\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        if !once {\n            return\n        }\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == sKCropNode {\n                once = false\n                var scene = CropScene()\n                scene.anchorPoint = CGPointMake(0.5, 0.5)\n                scene.scaleMode = .ResizeFill\n                scene.size = self.size\n                self.view?.presentScene(scene, transition:transitionEffect)\n            }\n\n            else if node.name == sKEmitterNode {\n                once = false\n                var scene = ParticleScene()\n                scene.anchorPoint = CGPointMake(0.5, 0.5)\n                scene.scaleMode = .ResizeFill\n                scene.size = self.size\n                self.view?.presentScene(scene, transition:transitionEffect)\n            }\n            else if node.name == sKLightNode {\n                once = false\n                var scene = LightScene()\n                scene.scaleMode = .ResizeFill\n                scene.size = self.size\n                scene.anchorPoint = CGPointMake(0.5, 0.5)\n                self.view?.presentScene(scene , transition:transitionEffect)\n            }\n            else if node.name == sKShapeNode {\n                once = false\n                var scene = ShapeScene()\n                scene.scaleMode = .ResizeFill\n                scene.size = self.size\n\n                scene.anchorPoint = CGPointMake(0.5, 0.5)\n                self.view?.presentScene(scene, transition:transitionEffect)\n            }\n            else if node.name == sKVideoNode {\n                once = false\n                var scene = VideoNodeScene()\n                scene.scaleMode = .ResizeFill\n                scene.size = self.size\n                scene.anchorPoint = CGPointMake(0.5, 0.5)\n                self.view?.presentScene(scene , transition:transitionEffect)\n            }\n        }\n    }\n}\n```", "```swift\nimport Foundation\nimport SpriteKit\nclass CropScene : SKScene {\n    var play : SKSpriteNode?\n    override func didMoveToView(view: SKView) {\n        play = SKSpriteNode(imageNamed: \"Play\")\n        var crop = SKCropNode()\n        crop.maskNode = play\n        crop.addChild(SKSpriteNode(imageNamed: \"BG\"))\n        addChild(crop)\n        addBackLabel()\n    }\n    func addBackLabel() {\n        var backbutton = SKLabelNode(fontNamed: FontFile)\n        backbutton.fontColor = UIColor.blueColor()\n        backbutton.name = \"BACK\"\n        backbutton.text = \"BACK\"\n        backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n       self.addChild(backbutton)\n    }\n    var once:Bool = true\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == \"BACK\" {\n                if once {\n                    once = false\n                    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n                    var scene = NodeMenuScene()\n                    scene.anchorPoint = CGPointMake(0.5, 0.5)\n                    scene.scaleMode = .ResizeFill\n                    scene.size = self.size\n                    self.view?.presentScene(scene, transition:transitionEffect)\n                }\n            }\n        }\n    }\n}\n```", "```swift\nimport Foundation\nimport SpriteKit\nclass ShapeScene : SKScene {\n    override func didMoveToView(view: SKView) {\n\n            var shape = SKShapeNode()\n            var path = CGPathCreateMutable()\n            CGPathMoveToPoint(path, nil, 0, 0)\n        CGPathAddLineToPoint(path, nil, 10  , 100)\n        CGPathAddLineToPoint(path, nil, 20, 0)\n        CGPathAddLineToPoint(path, nil, 10, -10)\n        CGPathAddLineToPoint(path, nil, 0, 0)\n        shape.path = path\n        shape.fillColor = UIColor.redColor()\n        shape.lineWidth = 4\n        addChild(shape)\n        addBackLabel()\n    }\n    func addBackLabel() {\n        var backbutton = SKLabelNode(fontNamed: FontFile)\n        backbutton.fontColor = UIColor.blueColor()\n        backbutton.name = \"BACK\"\n        backbutton.text = \"BACK\"\n        backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n        self.addChild(backbutton)\n    }\n    var once:Bool = true\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == \"BACK\" {\n                if once {\n                    once = false\n                    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n                    var scene = NodeMenuScene()\n                    scene.anchorPoint = CGPointMake(0.5, 0.5)\n                    scene.scaleMode = .ResizeFill\n                    scene.size = self.size\n                    self.view?.presentScene(scene, transition:transitionEffect)\n                }\n            }\n        }\n    }\n}\n```", "```swift\nimport Foundation.\nimport SpriteKit\nclass ParticleScene : SKScene {\n    var emitternode :SKEmitterNode?\n    override func didMoveToView(view: SKView) {\n    var path = NSBundle.mainBundle().pathForResource(\"MagicParticle\", ofType: \"sks\")\n    emitternode = NSKeyedUnarchiver.unarchiveObjectWithFile(path!) as? SKEmitterNode\n        self.addChild(emitternode!)\n  addBackLabel()\n    }\n    func addBackLabel() {\n        var backbutton = SKLabelNode(fontNamed: FontFile)\n        backbutton.fontColor = UIColor.blueColor()\n        backbutton.name = \"BACK\"\n        backbutton.text = \"BACK\"\n        backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n        self.addChild(backbutton)\n   }\n    var once:Bool = true\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch:AnyObject in touches {\n           var location = touch.locationInNode(self)\n           emitternode?.position = location\n           let node = self.nodeAtPoint(location)\n            if node.name == \"BACK\" {\n                if once {\n                    once = false\n                    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n                    var scene = NodeMenuScene()\n                    scene.anchorPoint = CGPointMake(0.5, 0.5)\n                    scene.scaleMode = .ResizeFill\n                    scene.size = self.size\n                    self.view?.presentScene(scene, transition:transitionEffect)\n                }\n            }\n       }\n    }\n}\n```", "```swift\nimport Foundation\nimport SpriteKit\nclass LightScene : SKScene {\n    var lightNode : SKLightNode?\n    override func didMoveToView(view: SKView) {\n        var background = SKSpriteNode(imageNamed: \"BG\")\n        background.zPosition = 0.5\n        var scaleX =  self.size.width/background.size.width\n        var scaleY =  self.size.height/background.size.height\n        background.xScale = scaleX\n        background.yScale = scaleY\n        addChild(background)\n        println(background.size)\n        var playbutton = SKSpriteNode(imageNamed: \"Play\")\n        playbutton.zPosition = 1\n        playbutton.size = CGSizeMake(100, 100)\n        playbutton.position = CGPointMake(-200, 0)\n        addChild(playbutton)\n        var playbutton2 = SKSpriteNode(imageNamed: \"Play\")\n        playbutton2.zPosition = 1\n        playbutton2.size = CGSizeMake(100, 100)\n        playbutton2.position = CGPointMake(0, 100)\n        addChild(playbutton2)\n        var playbutton3 = SKSpriteNode(imageNamed: \"Play\")\n        playbutton3.zPosition = 1\n        playbutton3.size = CGSizeMake(100, 100)\n        playbutton3.position = CGPointMake(200, 0)\n        addChild(playbutton3)\n        lightNode = SKLightNode()\n        lightNode!.categoryBitMask = 1\n        lightNode!.falloff = 1\n        lightNode!.ambientColor = UIColor.greenColor()\n        lightNode!.lightColor = UIColor.redColor()\n        lightNode!.shadowColor = UIColor.blueColor()\n        lightNode!.zPosition = 1\n        addChild(lightNode!)\n        playbutton.shadowCastBitMask = 1\n        playbutton2.shadowCastBitMask = 1\n        playbutton3.shadowCastBitMask = 1\n        background.lightingBitMask = 1;\n        addBackLabel()\n    }\n    func addBackLabel() {\n        var backbutton = SKLabelNode(fontNamed: FontFile)\n        backbutton.fontColor = UIColor.blueColor()\n        backbutton.name = \"BACK\"\n        backbutton.text = \"BACK\"\n        backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n        backbutton.zPosition = 3\n        self.addChild(backbutton)\n    }\n    var once:Bool = true\n    override func touchesMoved(touches: NSSet, withEvent event: UIEvent) {\n        for touch : AnyObject in touches {\n            let location = touch.locationInNode(self)\n            lightNode!.position = location\n            let node = self.nodeAtPoint(location)\n            if node.name == \"BACK\" {\n                if once {\n                    once = false\n                    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n                    var scene = NodeMenuScene()\n                    scene.anchorPoint = CGPointMake(0.5, 0.5)\n                    scene.scaleMode = .ResizeFill\n                    scene.size = self.size\n                    self.view?.presentScene(scene, transition:transitionEffect)\n                }\n            }\n        }\n    }\n}\n```", "```swift\nimport Foundation\nimport SpriteKit\nimport AVFoundation\nclass VideoNodeScene : SKScene {\n    var playonce :Bool = false\n    var videoNode : SKVideoNode?\n    override func didMoveToView(view: SKView) {\n        var background = SKSpriteNode(imageNamed: \"BG\")\n        background.zPosition = 0\n        var scaleX =  self.size.width/background.size.width\n        var scaleY =  self.size.height/background.size.height\n        background.xScale = scaleX\n        background.yScale = scaleY\n        addChild(background)\n        var fileurl = NSURL.fileURLWithPath(NSBundle.mainBundle().pathForResource\n(\"Movie\", ofType: \"m4v\")!)\n        var player = AVPlayer(URL: fileurl)\n        videoNode = SKVideoNode(AVPlayer: player)\n        videoNode?.size = CGSizeMake(200, 150)\n        videoNode?.zPosition = 1\n        videoNode?.name = \"Video\"\n        self.addChild(videoNode!)\n        addBackLabel()\n    }\n    func addBackLabel() {\n        var backbutton = SKLabelNode(fontNamed: FontFile)\n        backbutton.fontColor = UIColor.blueColor()\n        backbutton.name = \"BACK\"\n        backbutton.text = \"BACK\"\n        backbutton.position = CGPointMake(CGRectGetMinX(self.frame) + backbutton.frame.width/2 , CGRectGetMinY(self.frame))\n\n        self.addChild(backbutton)\n    }\n    var once:Bool = true\n    override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n        for touch: AnyObject in touches {\n            let location = touch.locationInNode(self)\n            let node = self.nodeAtPoint(location)\n            if node.name == videoNode?.name {\n                if !playonce {\n                        videoNode?.play()\n                    playonce = true\n                }\n\n            }\n            if node.name == \"BACK\" {\n                if once {\n                    once = false\n                    let transitionEffect = SKTransition.flipHorizontalWithDuration(1.0)\n                    var scene = NodeMenuScene()\n                    scene.anchorPoint = CGPointMake(0.5, 0.5)\n                    scene.scaleMode = .ResizeFill\n                    scene.size = self.size\n                    self.view?.presentScene(scene, transition:transitionEffect)\n                }\n            }\n    }\n    }\n\n}\n```"]