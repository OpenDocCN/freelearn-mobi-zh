["```kt\nval name: String? = null\nname?.let {\n  println(it)\n}\n```", "```kt\ndata class Person(val name: String, val age: Int)\n```", "```kt\nfun String.removeFirstAndLastChar(): String {\n  return when {\n  this.length <= 1 -> \"\"\n  else -> this.substring(1, this.length - 1)\n  }\n}\n// Example usage\nfun main(args: Array<String>) {\n  val myString = \"Hello Everyone\"\n  val result = myString.removeFirstAndLastChar ()\n  println(result)\n}\n```", "```kt\nello Everyon\n```", "```kt\nval name = \"John Doe\" // Compiler infers that name is of type String\nval age = 25 // Compiler infers that age is of type Int\n```", "```kt\nval mutableList = mutableListOf(\"Kotlin\", \"Java\", \"Python\")\nmutableList.add(\"Swift\")\n```", "```kt\nval immutableList = listOf(\"Kotlin\", \"Java\", \"Python\")\n```", "```kt\nval numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nval evenNumbers = numbers.filter { it % 2 == 0 }\nval oddNumbers = numbers.filter { it % 2 != 0 }\n```", "```kt\nsealed class Shape {\n  class Circle(val radius: Double) : Shape()\n  class Square(val length: Double) : Shape()\n  class Rectangle(val length: Double, val breadth: Double) : Shape()\n}\n```", "```kt\nval total = numbers.reduce { sum, element -> sum + element }\n```", "```kt\nfun makeNetworkCall() {\n  viewModelScope.launch {\n    val result = async {\n    // perform network call\n    }\n    // update UI\n  }\n}\n```", "```kt\nval number = when {\n  x % 2 == 0 -> \"Even\"\n  x % 2 != 0 -> \"Odd\"\n  else -> \"Invalid\"\n}\n```", "```kt\nid(\"org.jlleitschuh.gradle.ktlint\") version \"11.6.1\"\n```", "```kt\nsubprojects {\n    apply(plugin = \"org.jlleitschuh.gradle.ktlint\")\n    ktlint {\n        verbose.set(true)\n        android.set(true)\n        filter {\n            exclude(\"**/generated/**\")\n        }\n    }\n}\n```", "```kt\nroot = true\n[*]\ncharset = utf-8\ninsert_final_newline = false\ntrim_trailing_whitespace = true\n[*.{kt,kts}]\nindent_size = 4\nij_kotlin_packages_to_use_import_on_demand = unset\nij_kotlin_name_count_to_use_star_import = 999\nij_kotlin_name_count_to_use_star_import_for_members = 999\n```", "```kt\n./gradlew ktlintCheck\n```", "```kt\n./gradlew ktlintFormat\n```", "```kt\nid(\"io.gitlab.arturbosch.detekt\") version \"1.23.1\"\n```", "```kt\napply(plugin = \"io.gitlab.arturbosch.detekt\")\ndetekt {\n    parallel = true\n}\n```", "```kt\n./gradlew detekt\n```", "```kt\n./gradlew detektGenerateConfig\n```", "```kt\ndetekt {\n    parallel = true\n    config.setFrom(files(\"${project.rootDir}/config/detekt/detekt.yml\"))\n}\n```", "```kt\nMagicNumber:\n  active: false\n```", "```kt\nFunctionNaming:\n  active: true\n  excludes: ['**/test/**', '**/androidTest/**', '**/commonTest/**', '**/jvmTest/**', '**/androidUnitTest/**', '**/androidInstrumentedTest/**', '**/jsTest/**', '**/iosTest/**']\n  functionPattern: '[a-z][a-zA-Z0-9]*'\n  excludeClassPattern: '$^'\n  ignoreAnnotated: ['Composable']\n```", "```kt\nNewLineAtEndOfFile:\n  active: false\n```", "```kt\nLongMethod:\n  active: true\n  threshold: 140\n```", "```kt\nLongParameterList:\n  active: true\n  functionThreshold: 8\n```", "```kt\nComplexCondition:\n  active: true\n  threshold: 6\n```", "```kt\noverride suspend fun doWork(): Result {\n    return try {\n        petsRepository.fetchRemotePets()\n        Result.success()\n    } catch (e: Exception) {\n        Result.failure()\n    }\n}\n```", "```kt\noverride suspend fun doWork(): Result {\n    return try {\n        petsRepository.fetchRemotePets()\n        Result.success()\n    } catch (e: IOException) {\n        Log.d(\"PetsSyncWorker\", \"Error fetching pets\", e)\n        Result.failure()\n    }\n}\n```", "```kt\nclass LeakTestUtils {\n    companion object {\n        val leakCanaryTest = LeakCanaryTest()\n    }\n}\n```", "```kt\nobject LeakTestUtils {\n    val leakCanaryTest = LeakCanaryTest()\n}\n```"]