["```kt\nfun main(args: Array<String>) { }\n```", "```kt\nfun main(args: Array<String>) {\n     var x:Int\n     if(10>20){\n         x = 5\n     }\n     else{\n         x = 10\n     }\n     println(\"$x\")\n }\n```", "```kt\nfun main(args: Array<String>) {\n      var x:Int = if(10>20)  5  else  10\n    println(\"$x\")\n }\n```", "```kt\nfun main(args: Array<String>) {\n     var x:Int\n    x = if(10>20) {\n             doSomething()\n             25\n         }\n         else if (12<13) {\n             26\n         }\n         else{\n             27\n         }\n         println(\"$x\")\n}\nfun doSomething() {\n     var a = 6\n     println(\"$a\")\n }\n```", "```kt\nfun main(args: Array<String>) {\n    var x:Int\n    x = if(10<20) {\n        if(4 == 3){\n            56\n        }\n        else{\n            96\n        }\n    }\n    else if (12>13) {\n        26\n    }\n    else{\n        27\n    }\n    println(\"$x\")\n}\n\n//Output: 96\n```", "```kt\n fun main(args: Array<String>) {\n var x:Int\n x = if(10<20) {\n\n         if(4 == 3){\n                 56\n         }\n         else{\n                 96\n         }\n         565\n     }\n     else if (12>13) {\n        26\n     }\n     else{\n         27\n     }\n     println(\"$x\")\n}\n```", "```kt\nprintln(\"$a is a number something”)\n```", "```kt\nprintln(\"some variable whose value: ${if(a < 100) 25 else 29}\")\n```", "```kt\nfun main(args: Array<String>) {\n     val x = 12\n     when(x){\n         12 -> println(\"x is equal to 12\")\n         4 -> println(\"x is equal to 4\")\n         else -> println (\"no conditions match!\")\n     }\n }\n```", "```kt\nfun main(args: Array<String>) {\n     val x = 12\n     when(x){\n         in (1..10) -> println(\"x lies between 1 to 10\")\n         !in (1..10) -> println(\"x does not lie between 1 to 10\")\n     }\n }\n```", "```kt\nfun main(args: Array<String>) {\n     val x = 10\n     when(x){\n         magicNum(x) -> println(\"x is a magic number\")\n         in (1..10) -> {\n             println(\"lies between 1 to 10, value: ${if(x < 20) x else 0}\")\n         }\n         20,21 -> println(\"$x is special and has direct exit access\")\n         else -> println(\"$x needs to be executed\")\n     }\n}\nfun magicNum(a: Int): Int {\n return if(a in (15..25)) a else 0\n }\n```", "```kt\nfun main(args: Array<String>) {\n     val x = ob(2, true, 500)\n     when(x.value){\n         magicNum(x.value) -> println(\"$x is a magic number and         ${if(x.valid) \"valid\" else \"invalid\"}\")\n         in (1..10) -> {\n             println(\"lies between 1 to 10, value: ${if(x.value <           x.max) x.value else x.max}\")\n         }\n         20,21 -> println(\"$x is special and has direct exit access\")\n         else -> println(\"$x needs to be executed\")\n     }\n }\n data class ob(val value: Int, val valid: Boolean, val max: Int)\n fun magicNum(a: Int): Int {\n return if(a in (15..25)) a else 0\n }\n```", "```kt\nwhen(x) {\n    In collection_or_range -> // do something\n}\n```", "```kt\nprintln(\"$x is a magic number”)\n```", "```kt\nprintln(\"lies between 1 to 10, value: ${if(x.value < x.max) x.value else x.max}\")\n```", "```kt\nfun main(args: Array<String>) {\n     val x = ob(2, true, 500)\n     when(x){\n         ob(2, true, 500) -> println(\"equals correct object\")\n         ob(12, false, 800) -> {\n             println(\"equals wrong object\")\n         }\n         else -> println(\"does not match any object\")\n     }\n }\ndata class ob(val value: Int, val valid: Boolean, val max: Int)\n```", "```kt\ntry {\n // some code to execute\n }\n catch (e: SomeException) {\n // exception handler\n }\n finally {\n // optional finally block \n }\n```", "```kt\nfun main(args: Array<String>) {\n val str=\"23\"\n val a: Int? = try { str.toInt() } catch (e: NumberFormatException) { -1 }\n println(a)\n }\n```", "```kt\nOutput: 23\n```", "```kt\nfun main(args: Array<String>) {\n val str=\"abc\"\n val a: Int? = try { str.toInt() } catch (e: NumberFormatException) { -1 }\n println(a)\n }\n```", "```kt\nOutput: -1\n```", "```kt\nfun main(args: Array<String>) {\n     val str=\"abc\"\n     val a:Int = try {\n                    str.toInt()\n                 } catch (e: NumberFormatException) {\n                      -1\n                 } finally {\n                      -2\n                 }\n      println(a)\n }\n```", "```kt\nOutput: -1\n```", "```kt\nfun fileToString(file: File) : String {\n //readAllBytes throws IOException, but we can omit catching it\n fileContent = Files.readAllBytes(file)\n return String(fileContent)\n }\n```", "```kt\nvar a = 1\nvar b = 2\nrun { val temp = a; a = b; b = temp }\nprintln(a) // print 2\nprintln(b) // print 1\n```", "```kt\nvar a = 1\nvar b = 2\na = b.also { b = a }\nprintln(a) // print 2\nprintln(b) // print 1\n```", "```kt\nvar a = 1\n var b = 2\na = b.also {\n       b = a  // p\n       println(\"it=$it : b=$b : a=$a\") // prints it=2:b=1:a=1\n     }\nprintln(a) // print 2\nprintln(b) // print 1\n```", "```kt\npublic inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }\n```", "```kt\npublic inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }\n```", "```kt\nval result = Dog(12).also { it.age = 13 }\n```", "```kt\nval result2 =Dog(12).apply {age = 13 }\n```", "```kt\nclass CustomException(message:String): Exception(message)\n```", "```kt\nthrow CustomException(\"Threw custom exception\")\n```", "```kt\npublic class Exception extends Throwable {\n static final long serialVersionUID = -3387516993124229948L;\npublic Exception() {\n }\npublic Exception(String var1) {\n     super(var1);\n }.....\n```", "```kt\nint[] data = {5,6,7,1,3,4,5,7,12,13};\n for(int i=0;i<10&&i<data[i];i++){\n     System.out.println(data[i]);\n }\n```", "```kt\n(0..9).asSequence().takeWhile {\n     it<numbers[it]\n }.forEach \n    println(\"$it - ${data[it]}\")\n }\n```", "```kt\n(0..9).takeWhile {\n     println(\"Inside takeWhile\")\n     it<numbers[it]\n }.forEach {\n     println(\"Inside forEach\")\n }\n```", "```kt\nInside takeWhile\n Inside takeWhile\n Inside takeWhile\n Inside takeWhile\n Inside forEach\n Inside forEach\n Inside forEach\n```", "```kt\n(0..9).asSequence().takeWhile {\n     println(\"Inside takeWhile\")\n     it<numbers[it]\n }.forEach {\n     println(\"Inside forEach\")\n }\n```", "```kt\nInside takeWhile\n Inside forEach\n Inside takeWhile\n Inside forEach\n Inside takeWhile\n Inside forEach\n Inside takeWhile\n```"]