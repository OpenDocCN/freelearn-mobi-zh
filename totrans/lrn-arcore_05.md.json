["```kt\ncamera.updateProjectionMatrix();\n```", "```kt\nvar pos = camera.position;\nvar rot = camera.rotation;\nconsole.log(\"Device position (X:\" + pos.x + \",Y:\" + pos.y + \",Z:\" + pos.z + \")\");\nconsole.log(\"Device orientation (pitch:\" + rot._x + \",yaw:\" + rot._y + \",roll:\" + rot._z + \")\");\n```", "```kt\ncd /android\nhttp-server -d -p 9999\n```", "```kt\ncamera = new THREE.ARPerspectiveCamera(\n    vrDisplay,\n    60,\n    window.innerWidth / window.innerHeight,\n    vrDisplay.depthNear,\n    vrDisplay.depthFar\n  );  \n```", "```kt\nvar cube***;** * //after this line\nvar audioContext;\nvar resonanceAudioScene;\nvar audioElement;\nvar audioElementSource;\nvar audio;\n```", "```kt\nfunction initAudio(){\n\n}\n\nfunction update(){ //before this function\n```", "```kt\naudioContext = new AudioContext();\n```", "```kt\nresonanceAudioScene = new ResonanceAudio(audioContext); \nresonanceAudioScene.output.connect(audioContext.destination);\n```", "```kt\nlet roomDimensions = {   width: 10, height: 100, depth: 10 };\nlet roomMaterials = {\n   // Room wall materials\n   left: 'brick-bare',\n   right: 'curtain-heavy',\n   front: 'marble',\n   back: 'glass-thin',\n   // Room floor\n   down: 'grass',\n   // Room ceiling\n   up: 'transparent' };\n```", "```kt\nresonanceAudioScene.setRoomProperties(roomDimensions,       \n                                      roomMaterials);\n```", "```kt\naudioElement = document.createElement('audio');\naudioElement.src = 'cube-sound.wav'; \n\naudioElementSource = audioContext.createMediaElementSource(audioElement);\naudio = resonanceAudioScene.createSource();\naudioElementSource.connect(audio.input);\n```", "```kt\naudio.setPosition(cube.position.x,cube.position.y,cube.position.z);\n\naudioElement.play();\n```", "```kt\n//console.log(\"Device position (X:\" + pos.x + \",Y:\" + pos.y + \",Z:\" + pos.z + \")\");\n//console.log(\"Device orientation (pitch:\" + rot._x + \",yaw:\" + rot._y + \",roll:\" + rot._z + \")\");\n```", "```kt\naudio.setPosition(pos.x-cube.position.x,pos.y-cube.position.y,pos.z-cube.position.z);\n```", "```kt\n{  \"rules\": {    \".read\": true,    \".write\": true  }}\n```", "```kt\nvar database = firebase.database();\n```", "```kt\nfirebase.database().ref('pose/' + 1).set({x: 12,y: 1,z: 0});\n```", "```kt\nfirebase.database().ref('pose/' + 1).set({x: 12,y: 1,z : 0}); //delete me\n```", "```kt\nvar idx = 1;\nsetInterval(function(){\n idx = idx + 1;\n if(camera){\n  camera.updateProjectionMatrix();\n  var pos = camera.position;\n  var rot = camera.rotation;\n  firebase.database().ref('pose/' + idx).set({x: pos.x,y: pos.y,z : pos.z, roll: rot._z, pitch: rot._x, yaw: rot._y });\n }  }, 1000);\n```", "```kt\nfirebase.database().ref('pose/' + ... //after this lineif(lastPos){   \n  var material = new THREE.LineBasicMaterial({ color: 0x0000ff   });\n  var geometry = new THREE.Geometry();\n  geometry.vertices.push(\n     new THREE.Vector3( pos.x, pos.y, pos.z ),\n   new THREE.Vector3( lastPos.x, lastPos.y, lastPos.z )\n  );\n  var line = new THREE.Line( geometry, material );\n  scene.add( line );\n}\nlastPos = { x: pos.x, y: pos.y, z: pos.z};\n```"]