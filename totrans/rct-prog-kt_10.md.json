["```kt\n    interface Employee { \n      fun executeTask() \n    } \n    interface Task { \n      fun execute() \n    } \n```", "```kt\n    class RandomEmployee: Employee { \n      val task = RandomTask() \n      override fun executeTask() { \n        task.execute() \n      } \n    } \n```", "```kt\n    class RandomTask : Task { \n      override fun execute() { \n        println(\"Executing Random Task\") \n      } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      RandomEmployee().executeTask() \n    } \n```", "```kt\n    class SoftwareDeveloper(val task: ProgrammingTask) : Employee { \n      override fun executeTask() { \n        task.execute() \n      } \n    } \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd\"> \n\n      <bean id=\"employee\"  \n       class=\"com.rivuchk.reactivekotlin.springdi.SoftwareDeveloper\"> \n       <constructor-arg ref=\"task\"/> \n      </bean> \n\n      <bean id=\"task\" class=\"com.rivuchk.reactivekotlin.\n      springdi.ProgrammingTask\"/> \n\n   </beans> \n```", "```kt\nclass ProgrammingTask: Task {\n    override fun execute() {\n        println(\"Writing Programms\")\n    }\n}\n```", "```kt\n    fun main(args: Array<String>) { \n val context = ClassPathXmlApplicationContext( \"META-INF/spring/employee.xml\")//(1) val employee =  \n        context.getBean(Employee::class.java)//(2) \n        employee.executeTask() \n context.close()//(3) \n    } \n```", "```kt\n    class Assignment(val task:(String)->Unit) { \n      fun performAssignment(assignmentDtl:String) { \n        task(assignmentDtl) \n      } \n    } \n```", "```kt\n    class Student(val assignment: Assignment) { \n      fun completeAssignment(assignmentDtl:String) { \n        assignment.performAssignment(assignmentDtl) \n      } \n    } \n```", "```kt\n    @Configuration \n    class Configuration { \n\n      @Bean \n      fun student() = Student(assignment()) \n\n      @Bean \n      fun assignment()  \n        = Assignment { assignmentDtl -> println\n        (\"Performing Assignment $assignmentDtl\") } \n   } \n```", "```kt\n    fun main(args: Array<String>) { \n      val context = AnnotationConfigApplicationContext   \n      (Configuration::class.java) \n      val student = context.getBean(Student::class.java) \n      student.completeAssignment(\"One\") \n      student.completeAssignment(\"Two\") \n      student.completeAssignment(\"Three\") \n\n      context.close() \n    } \n```", "```kt\n    class Faculty { \n      fun evaluateAssignment() { \n        val marks = Random().nextInt(10) \n        println(\"This assignment is evaluated and given $marks points\") \n      } \n    } \n```", "```kt\n    class Student(val assignment: Assignment, \n      val faculty: Faculty) { \n        fun completeAssignment(assignmentDtl:String) { \n          assignment.performAssignment(assignmentDtl) \n          faculty.evaluateAssignment() \n        } \n      } \n```", "```kt\n    open class Student(public val assignment: Assignment) { \n      open public fun completeAssignment(assignmentDtl:String) { \n        assignment.performAssignment(assignmentDtl) \n      } \n    } \n```", "```kt\n    fun main(args: Array<String>) { \n      val context = ClassPathXmlApplicationContext( \n            \"META-INF/spring/student_faculty.xml\" \n      ) \n      val student = context.getBean(Student::class.java) \n      student.completeAssignment(\"One\") \n      student.completeAssignment(\"Two\") \n      student.completeAssignment(\"Three\") \n\n      context.close() \n    } \n```", "```kt\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n       http://www.springframework.org/schema/beans/spring-beans.xsd \n       http://www.springframework.org/schema/aop \n       http://www.springframework.org/schema/aop/spring-aop.xsd\"> \n\n    <bean id=\"student\" class=\"com.rivuchk.reactivekotlin.\n      springdi.aop_student_assignment.Student\"> \n      <constructor-arg ref=\"assignment\"/> \n    </bean> \n\n    <bean id=\"assignment\" class=\"com.rivuchk.reactivekotlin.springdi.\n     aop_student_assignment.Assignment\" /> \n\n <bean id=\"faculty\"    \n    class=\"com.rivuchk.reactivekotlin.springdi.aop_student_assignment.\n    Faculty\" /><!--1--> <aop:config><!--2--> <aop:aspect  \n    ref=\"faculty\"><!--3--> <aop:pointcut                     \n    id=\"assignment_complete\"                      \n    expression=\"execution(* *.completeAssignment(..))\"/><!--4--> <aop:after pointcut-ref=\"assignment_complete\" method=\"evaluateAssignment\" /><!--5--> \n    </aop:aspect> \n    </aop:config> \n\n   </beans> \n```", "```kt\n    data class Todo ( \n        var id:Int = 0, \n        var todoDescription:String, \n        var todoTargetDate:String, \n        var status:String \n    ) \n```", "```kt\n @RestController@RequestMapping(\"/api\") \n    class TodoController { \n @RequestMapping(\"/get_todo\") \n      fun getTodo() = Todo(1,\"TODO Project\",\"31/11/2017\",\"Running\") \n   } \n```", "```kt\n    {\"id\":1,\"todoDescription\":\"TODO   \n    Project\",\"todoTargetDate\":\"31/11/2017\",\"status\":\"Running\"} \n```"]