- en: Chapter 2. Playing with Swift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章. 玩转 Swift
- en: Xcode ships with both a command-line interpreter (which was covered in [Chapter
    1](part0016_split_000.html#F8901-d7e55eb5242648e89c396442afe4f84b "Chapter 1. Exploring
    Swift"), *Exploring Swift*) and a graphical interface called **playground** that
    can be used to prototype and test Swift code snippets. Code that is typed into
    the playground is compiled and executed interactively, which permits a fluid style
    of development. In addition, the user interface can present a graphical view of
    variables as well as a timeline, which can show how loops are executed. Finally,
    playgrounds can mix and match code and documentation leading to the possibility
    of providing example code as playgrounds and using playgrounds to learn how to
    use existing APIs and frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 随带一个命令行解释器（在 [第 1 章](part0016_split_000.html#F8901-d7e55eb5242648e89c396442afe4f84b
    "第 1 章. 探索 Swift") 中介绍过），*探索 Swift* 和一个名为 **playground** 的图形界面，可以用来原型设计和测试 Swift
    代码片段。在 playground 中输入的代码将被编译并交互式执行，这允许流畅的开发风格。此外，用户界面可以显示变量的图形视图以及时间轴，可以显示循环的执行情况。最后，playground
    可以混合和匹配代码和文档，从而有可能提供作为 playground 的示例代码，并使用 playground 来学习如何使用现有的 API 和框架。
- en: 'This chapter will present the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍以下主题：
- en: How to create a playground
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建 playground
- en: Displaying values in the timeline
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在时间轴中显示值
- en: Presenting objects with Quick Look
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用快速查看展示对象
- en: Running asynchronous code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行异步代码
- en: Using playground's live documentation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 playground 的实时文档
- en: Creating multiple pages in a playground
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 playground 中创建多个页面
- en: Limitations of playgrounds
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: playground 的限制
- en: Getting started with playgrounds
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 playground
- en: 'When Xcode is started, the welcome screen is displayed with various options,
    including the ability to create a playground. The welcome screen can be shown
    with *Command* + *Shift* + *1*, or by navigating to **Window** | **Welcome to
    Xcode**:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Xcode 启动时，将显示带有各种选项的欢迎屏幕，包括创建 playground 的能力。可以通过 *Command* + *Shift* + *1*
    显示欢迎屏幕，或通过导航到 **窗口** | **欢迎使用 Xcode**：
- en: '![Getting started with playgrounds](img/00002.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用 playground](img/00002.jpeg)'
- en: Creating a playground
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 playground
- en: Using either the Xcode welcome screen (which can be opened by navigating to
    **Window** | **Welcome to Xcode**) or by navigating to **File** | **New** | **Playground**,
    create `MyPlayground` in a suitable location targeting **iOS**. Creating the playground
    on the `Desktop` will allow easy access to testing Swift code, but it can be located
    anywhere on the filesystem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 Xcode 欢迎屏幕（可以通过导航到 **窗口** | **欢迎使用 Xcode** 打开）或通过导航到 **文件** | **新建** |
    **Playground** 来创建位于合适位置的 `MyPlayground`，目标为 **iOS**。在 `桌面` 上创建 playground 将允许轻松访问测试
    Swift 代码，但它可以位于文件系统的任何位置。
- en: 'Playgrounds can be targeted either towards OS X applications or towards iOS
    applications. This can be configured when the playground is created, or by switching
    to the **Utilities** view by navigating to **View** | **Utilities** | **Show File
    Inspector** or pressing *Command* + *Option* + *1* and changing the dropdown from
    OS X to iOS or vice versa:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: playground 可以针对 OS X 应用程序或 iOS 应用程序。这可以在创建 playground 时进行配置，或者通过导航到 **视图** |
    **实用工具** | **显示文件检查器** 或按 *Command* + *Option* + *1* 并将下拉菜单从 OS X 更改为 iOS 或反之亦然来切换到
    **实用工具** 视图：
- en: '![Creating a playground](img/00003.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![创建 playground](img/00003.jpeg)'
- en: 'When initially created, the playground will have a code snippet that looks
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 初始创建时，playground 将包含如下所示的代码片段：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Playgrounds targeting OS X will read `import Cocoa` instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 OS X 的 playground 将读取 `import Cocoa`。
- en: 'On the right-hand side, a column will display the value of the code when each
    line is executed. By grabbing the vertical divider between the Swift code and
    the output, the output can be resized to show the full value of the text:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，将显示每行代码执行时的值。通过抓住 Swift 代码和输出之间的垂直分隔线，可以调整输出的大小以显示文本的完整值：
- en: '![Creating a playground](img/00004.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![创建 playground](img/00004.jpeg)'
- en: 'Alternatively, by moving the mouse over the right-hand side of the playground,
    the **Quick Look** icon (the eye symbol) will appear. If this is clicked, a pop-up
    box will show the full details:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，通过将鼠标移至 playground 的右侧，将出现 **快速查看** 图标（眼睛符号）。如果点击它，将显示一个弹出框，显示完整详情：
- en: '![Creating a playground](img/00005.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建 playground](img/00005.jpeg)'
- en: Viewing the console output
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看控制台输出
- en: The console output can be viewed in the *Debug Area*. This can be shown by pressing
    *Command* + *Shift* + *Y* or by navigating to **View** | **Debug Area** | **Show
    Debug Area**. This will show the result of any `print` statements that are executed
    in the code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台输出可以在*调试区域*中查看。这可以通过按*Command* + *Shift* + *Y*或通过导航到**查看** | **调试区域** | **显示调试区域**来实现。这将显示代码中执行的任何`print`语句的结果。
- en: 'Add a simple `for` loop to the playground:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在游乐场中添加一个简单的`for`循环：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is shown in the debug area below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示在下面的调试区域中：
- en: '![Viewing the console output](img/00006.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![查看控制台输出](img/00006.jpeg)'
- en: Viewing the timeline
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看时间线
- en: The timeline shows what the values were at a particular time. In the case of
    the print loop that was shown previously, the output was displayed in the **Debug
    Area**. However, it is possible to use the playground to inspect the value of
    an expression on a line without having to display it directly. In addition, results
    can be graphed to show how these values change over time. The value of the graph
    is shown in-line with the source code unlike previous versions of Xcode, which
    displayed them on the right.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 时间线显示了特定时间点的值。在之前显示的打印循环的情况下，输出显示在**调试区域**中。然而，可以使用游乐场来检查表达式在行上的值，而无需直接显示它。此外，结果可以绘制成图表，以显示这些值随时间的变化。图表的值与源代码在同一行显示，这与Xcode的早期版本不同，后者将它们显示在右侧。
- en: Add another line above the `print` statement to calculate the result of executing
    an expression, `(i-6)*(i-7)`, and store it in a `j` constant.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`print`语句上方添加另一行来计算表达式`(i-6)*(i-7)`的执行结果，并将其存储在`j`常量中。
- en: 'On the line next to the variable definition, click on the add variable history
    (**+**) symbol, which is in the right-hand column (visible when the mouse moves
    over that area). After it is clicked , it will change to an (**o**) symbol and
    display the graph on the right-hand side. This can be done for the `print` statement
    as well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量定义旁边的行上，点击添加变量历史（**+**）符号，该符号位于右侧列（当鼠标移过该区域时可见）。点击后，它将变为（**o**）符号，并在右侧显示图表。这也可以应用于`print`语句：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Viewing the timeline](img/00007.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![查看时间线](img/00007.jpeg)'
- en: 'It is possible to display a timeline slider at the bottom of the window by
    selecting the **Show Timeline** checkbox in the **Utilities** area. This adds
    a timeline slider at the bottom, with a red tick mark, and this can be used to
    slide the vertical bar to see the exact value at certain points:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在**实用工具**区域中选择**显示时间线**复选框，可以在窗口底部显示时间线滑块。这将添加一个带有红色标记的时间线滑块在底部，并且可以使用它来滑动垂直条以查看特定点的确切值：
- en: '![Viewing the timeline](img/00008.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![查看时间线](img/00008.jpeg)'
- en: 'To display several values at once, use additional variables to hold the values
    and display them in the timeline as well:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时显示多个值，请使用额外的变量来保存这些值，并在时间线中显示它们：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Viewing the timeline](img/00009.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![查看时间线](img/00009.jpeg)'
- en: When the timeline slider is dragged, both values will be displayed at the same
    time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当拖动时间线滑块时，两个值将同时显示。
- en: Displaying objects with Quick Look
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用快速查看显示对象
- en: 'The playground timeline can display objects as well as numbers and simple strings.
    It is possible to load and view images in a playground using classes, such as
    `UIImage` (or `NSImage` on OS X). These are known as *Quick Look supported objects*,
    and by default include:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场时间线可以显示对象以及数字和简单的字符串。使用类，如`UIImage`（或在OS X上的`NSImage`）可以在游乐场中加载和查看图像。这些被称为*快速查看支持的对象*，默认包括：
- en: String (attributed and unattributed)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串（有归属和无归属）
- en: Views
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: Class and struct types (members are shown)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和结构体类型（成员显示）
- en: Colors
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is possible to build support for custom-based types into Swift by implementing
    a `debugQuickLookObject` method that returns a graphical view of the data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现返回数据图形视图的`debugQuickLookObject`方法，可以将对自定义类型的支持构建到Swift中。
- en: Showing colored labels
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示彩色标签
- en: To show a colored label, a color needs to be obtained first. When building against
    iOS, this will be `UIColor`; but when building against OS X, it will be `NSColor`.
    The methods and types are largely equivalent between the two, but this chapter
    will demonstrate using iOS types.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示彩色标签，首先需要获取颜色。当针对iOS构建时，这将使用`UIColor`；但当针对OS X构建时，它将使用`NSColor`。这两个方法类型在很大程度上是等效的，但本章将演示使用iOS类型。
- en: 'A color can be acquired with an initializer or using one of the predefined
    colors that are exposed in Swift using methods, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过初始化器或使用 Swift 中暴露的预定义颜色之一来获取颜色，如下所示：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In Xcode 7.1 and above, a color can be dragged in from a color picker into the
    Swift code directly where it will be translated as a color initializer with the
    specific hardcoded color values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 7.1 及以上版本中，可以从颜色选择器中直接拖动颜色到 Swift 代码中，它将被转换为具有特定硬编码颜色值的颜色初始化器。
- en: 'The color can be used as the `textColor` of a `UILabel`, which displays a text
    string in a particular size and color. The `UILabel` needs a size, which is represented
    by a `CGRect`, and this can be defined with an `x` and `y` position along with
    a `width` and `height`. The `x` and `y` positions are not relevant for playgrounds,
    and so, they can be left as zero:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色可以用作 `UILabel` 的 `textColor`，它以特定的大小和颜色显示文本字符串。`UILabel` 需要一个大小，这由一个 `CGRect`
    表示，并且可以使用 `x` 和 `y` 位置以及 `width` 和 `height` 来定义。`x` 和 `y` 位置对于游乐场来说不相关，因此可以将其保留为零：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, the text needs to be displayed in blue and with a larger font size:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，文本需要以蓝色和更大的字体大小显示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the playground is run, the color and font are displayed in the timeline
    and are available for quick view. Even though the same `UILabel` instance is being
    shown, the timeline and the quick look values show a snapshot of the state of
    the object at each point, making it easy to see what has happened between changes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当游乐场运行时，颜色和字体将在时间轴上显示，并且可供快速查看。尽管显示的是相同的 `UILabel` 实例，但时间轴和快速查看值显示了对象在每个点的状态快照，这使得查看变化之间发生的事情变得容易：
- en: '![Showing colored labels](img/00010.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![显示带颜色的标签](img/00010.jpeg)'
- en: Showing images
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示图片
- en: Images can be created and loaded into a playground using the `UIImage` constructor
    (or `NSImage` on OS X). Both take a `named` argument, which is used to find and
    load an image with the given name from the playground's `Resources` folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `UIImage` 构造函数（或在 OS X 上的 `NSImage`）创建和加载到游乐场中。两者都接受一个 `named` 参数，该参数用于从游乐场的
    `Resources` 文件夹中查找和加载具有给定名称的图像。
- en: 'To copy a file into the playground''s `Resources` folder, first download an
    image, such as `http://alblue.bandlem.com/images/AlexHeadshotLeft.png`, and save
    it as `alblue.png` in a suitable location such as the `Desktop`. In order to add
    it to the playground, the project navigator needs to be opened with *Command*
    + *1* or by navigating to **View** | **Navigators** | **Show Project Navigator**.
    Once opened, the file can be dragged and dropped into the `Resources` element
    in the tree:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文件复制到游乐场的 `Resources` 文件夹，首先下载一个图像，例如 `http://alblue.bandlem.com/images/AlexHeadshotLeft.png`，并将其保存为
    `alblue.png` 在一个合适的位置，如 `桌面`。为了将其添加到游乐场，需要使用 *Command* + *1* 或通过导航到 **视图** | **导航器**
    | **显示项目导航器** 打开项目导航器。一旦打开，文件可以拖放到树中的 `Resources` 元素：
- en: '![Showing images](img/00011.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![显示图片](img/00011.jpeg)'
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Xcode 7.1 allows the image to be dragged directly into the source code area.
    It will populate a `UIImage` (or `NSImage`) as well as copy it to the resources
    area. Xcode 7.0 and below will just copy the full file path of the source if dragged
    in.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 7.1 允许直接将图片拖动到源代码区域。它将填充一个 `UIImage`（或 `NSImage`），并将其复制到资源区域。Xcode 7.0
    及以下版本如果拖动图片，则仅复制源文件的完整路径。
- en: 'Alternatively, to download a logo with the command line, open `Terminal.app`
    and run the following commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，要使用命令行下载徽标，打开 `Terminal.app` 并运行以下命令：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An image can now be created in swift using the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用以下方式在 Swift 中创建图像：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The location of the `Resources` that are associated with a playground can be
    seen in the **File Inspector** utilities view, which can be opened by pressing
    *Command* + *Option* + *1*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与游乐场关联的 `Resources` 的位置可以在 **文件检查器** 工具视图中查看，该工具可以通过按 *Command* + *Option* +
    *1* 打开。
- en: 'The created image can be displayed using **Quick Look** or by adding it to
    the value history:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的图像可以使用 **快速查看** 或将其添加到值历史记录中显示：
- en: '![Showing images](img/00012.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![显示图片](img/00012.jpeg)'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is possible to use a URL to acquire an image by creating an NSURL with `NSURL(string:"http://...")!`,
    then loading the contents of the URL with `NSData(contentsOfURL:)!`, and finally,
    using `UIImage(data:)` to convert it to an image. However, as Swift will keep
    re-executing the code over and over again, the URL will be hit multiple times
    in a single debugging session without caching. It is recommended that `NSData(contentsOfURL:)`
    and similar networking classes be avoided in playgrounds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建一个 `NSURL` 对象 `NSURL(string:"http://...")!` 来使用 URL 获取图像，然后使用 `NSData(contentsOfURL:)!`
    加载 URL 的内容，最后使用 `UIImage(data:)` 将其转换为图像。然而，由于 Swift 会反复执行代码，URL 在单个调试会话中会被多次访问而不会缓存。建议在
    playground 中避免使用 `NSData(contentsOfURL:)` 和类似的网络类。
- en: Advanced techniques
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级技巧
- en: The playground has its own `XCPlayground` framework, which can be used to perform
    certain tasks. For example, individual values can be captured during loops for
    later analysis. It also permits asynchronous code to continue to execute once
    the playground has finished running.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: playground 有自己的 `XCPlayground` 框架，可以用来执行某些任务。例如，可以在循环中捕获单个值以供后续分析。它还允许在 playground
    完成运行后继续执行异步代码。
- en: Capturing values explicitly
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显式捕获值
- en: It is possible to explicitly add values to the timeline by importing the `XCPlayground`
    framework and using `XCPlaygroundPage.currentPage`, and calling `captureValue`
    with a value that should be displayed in the timeline. This takes an identifier,
    which is used both as the title and to group related data values in the same series.
    When the value history button is selected, it essentially inserts a call to `captureValue`
    with the value of the expression as the identifier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导入 `XCPlayground` 框架并使用 `XCPlaygroundPage.currentPage`，然后调用 `captureValue`
    方法来显式地向时间轴添加值，该方法需要一个标识符，该标识符既用作标题，也用于在相同系列中分组相关的数据值。当选择值历史按钮时，它实际上会插入一个调用 `captureValue`
    的调用，其中表达式的值作为标识符。
- en: 'For example, to add the logo to the timeline automatically:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要自动将徽标添加到时间轴上：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Opening the **Assistant Editor** will show the timeline along with the recorded
    values:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 **辅助编辑器** 将会显示时间轴以及记录的值：
- en: '![Capturing values explicitly](img/00013.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![显式捕获值](img/00013.jpeg)'
- en: 'It is possible to use the identifier to group the data that is being shown
    in a loop, with the identifier representing categories of the values. For example,
    to display a list of all even and odd numbers between `1` and `6`, the following
    code could be used:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用标识符来分组循环中显示的数据，标识符代表值的类别。例如，要显示 `1` 到 `6` 之间所有偶数和奇数的列表，可以使用以下代码：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When executed, the result will look like:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，结果将看起来像：
- en: '![Capturing values explicitly](img/00014.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![显式捕获值](img/00014.jpeg)'
- en: Running asynchronous code
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行异步代码
- en: By default, when execution hits the end of the current playground page, the
    execution stops. In most cases this is desirable, but when asynchronous code is
    involved, execution may need to continue to run even if the main code has finished
    executing. This may be the case if networking data is involved or if there are
    multiple tasks whose results need to be synchronized.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当执行到达当前 playground 页面的末尾时，执行会停止。在大多数情况下这是期望的，但当涉及异步代码时，即使主代码已经执行完成，执行可能还需要继续运行。这可能涉及网络数据或存在多个需要同步结果的任务。
- en: 'For example, wrapping the previous even/odd split in an asynchronous call will
    result in no data being displayed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将之前的偶数/奇数分割包裹在一个异步调用中，将不会显示任何数据：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'This uses one of Swift''s language features: the `dispatch_async` method which
    is actually a two-argument method that takes a queue and a block type. However,
    if the last argument is a block type, then it can be represented as a trailing
    closure rather than an argument.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了 Swift 的一种语言特性：`dispatch_async` 方法，它实际上是一个接受队列和块类型的两个参数的方法。然而，如果最后一个参数是块类型，那么它可以表示为一个尾随闭包而不是一个参数。
- en: 'To allow playground to continue executing after reaching the end, add the following
    assignment:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许 playground 在达到末尾后继续执行，请添加以下赋值：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Although this suggests that the execution will run forever, it is limited to
    30 seconds of runtime, or whatever the value is displayed at the bottom-right
    corner of the screen. This timeout can be changed by typing in a new value or
    using the **+** and **–** buttons to increase/decrease time by one second. In
    addition to this, the execution can be stopped by clicking the square icon on
    the lower left-hand side of the window:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这表明执行将永远运行，但它被限制在30秒的运行时间内，或者屏幕右下角显示的任何值。可以通过输入新值或使用**+**和**–**按钮来增加/减少一秒来更改此超时。此外，可以通过点击窗口左下角的方块图标来停止执行：
- en: '![Running asynchronous code](img/00015.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![运行异步代码](img/00015.jpeg)'
- en: Playgrounds and documentation
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游乐场与文档
- en: Playgrounds can contain a mix of code and documentation. This allows a set of
    code, samples, and explanations to be mixed in with the playground itself.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场可以包含代码和文档的混合。这允许将一组代码、示例和说明与游乐场本身混合在一起。
- en: Learning with playgrounds
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用游乐场学习
- en: As playgrounds can contain a mixture of code and documentation, it makes them
    an ideal format to view annotated code snippets. In fact, Apple's Swift Tour book
    can be opened as a playground file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于游乐场可以包含代码和文档的混合体，这使得它们成为查看注释代码片段的理想格式。实际上，Apple的Swift Tour手册可以作为一个游乐场文件打开。
- en: 'Xcode documentation can be searched by navigating to **Help** | **Documentation
    and API Reference** or by pressing *Command* + *Shift* + *0*. In the search dialog
    that is presented, type `Swift Tour` and then select the first result. The Swift
    Tour book should be presented in Xcode''s help system, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过导航到**帮助** | **文档和API参考**或按*Command* + *Shift* + *0*来搜索Xcode文档。在显示的搜索对话框中，键入`Swift
    Tour`并选择第一个结果。Swift Tour手册应该在Xcode的帮助系统中显示，如下所示：
- en: '![Learning with playgrounds](img/00016.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![使用游乐场学习](img/00016.jpeg)'
- en: 'A link to download and open the documentation as a playground is given in the
    first section; if this is downloaded, it can be opened in Xcode as a standalone
    playground. This provides the same information, but it allows the code examples
    to be dynamic and show the results in the window:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分提供了一个下载并作为游乐场打开文档的链接；如果下载，它可以在Xcode中以独立游乐场的形式打开。这提供了相同的信息，但它允许代码示例是动态的，并在窗口中显示结果：
- en: '![Learning with playgrounds](img/00017.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![使用游乐场学习](img/00017.jpeg)'
- en: A key advantage of learning through playground-based documentation is that the
    code can be experimented with. In the *Simple Values* section of the documentation,
    where `myVariable` is assigned, the right-hand side of the playground shows the
    values. If the literal numbers are changed, the new values will be recalculated
    and shown on the right-hand side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过基于游乐场文档的学习方式的一个关键优势是代码可以进行实验。在文档的*简单值*部分，其中`myVariable`被分配，游乐场的右侧显示了值。如果更改了字面数字，新的值将被重新计算并在右侧显示。
- en: Understanding the playground format
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解游乐场格式
- en: 'The playground is an *OS X bundle*, which means that it is a directory that
    looks like a single file. If the playground is selected either in `TextEdit.app`
    or in `Finder`, then it looks like a regular file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场是一个*OS X bundle*，这意味着它看起来像一个单独的文件。如果在`TextEdit.app`或`Finder`中选择游乐场，它看起来就像一个普通文件：
- en: '![Understanding the playground format](img/00018.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![理解游乐场格式](img/00018.jpeg)'
- en: 'Under the covers, it is actually a directory:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，它实际上是一个目录：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the directory, there are a number of files:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录内，有一些文件：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The files are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 文件如下：
- en: The `Contents.swift` file, which is the Swift file that is created by default
    when a new playground is created, and this contains the code that is typed in
    for any new playground content
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Contents.swift`文件，这是创建新游乐场时默认创建的Swift文件，它包含任何新游乐场内容的输入代码'
- en: The `Resources` directory, which was created earlier to hold the logo image
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前创建的`Resources`目录，用于存储标志图像
- en: The `contents.xcplayground` file, which is an XML table of contents of the files
    that make up the playground
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contents.xcplayground`文件，是构成游乐场的文件的XML目录表'
- en: The `playground.xcworkspace`, which is used to hold metadata about the project
    in Xcode
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playground.xcworkspace`，用于在Xcode中存储项目元数据'
- en: The `timeline.xctimeline`, which is the file containing timestamps of execution
    that are generated by the runtime when executing a Swift file and the timeline
    is open
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeline.xctimeline`文件，包含执行Swift文件时由运行时生成的执行时间戳文件，当时间线打开时'
- en: 'The table of contents file defines which runtime environment is being targeted
    (for example, iOS or OS X) and a reference to the timeline file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 目录文件定义了正在针对哪个运行时环境（例如，iOS 或 OS X）以及时间线文件的引用：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An Xcode playground directory is deleted and recreated whenever changes are
    made in Xcode. Any `Terminal.app` windows that are open in that directory will
    no longer display any files. As a result, using external tools and editing the
    files in place may result in changes being lost. In addition, using ancient versions
    of control systems, such as SVN and CVS, may find their version control metadata
    being wiped out between saves. Xcode ships with the industry standard Git version
    control system, which should be preferred instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Xcode 中进行更改时，Xcode 的 playground 目录会被删除并重新创建。在该目录中打开的任何 `Terminal.app` 窗口将不再显示任何文件。因此，使用外部工具或就地编辑文件可能会导致更改丢失。此外，使用过时的控制系统版本，如
    SVN 和 CVS，可能会在保存之间丢失版本控制元数据。Xcode 随带行业标准的 Git 版本控制系统，应优先使用。
- en: Adding a page
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加页面
- en: By default, an Xcode playground has a single page open. However, for more comprehensive
    documentation examples, many separate pages may be preferable. For example, instead
    of creating a single very long page with subheadings (which may take a while to
    interpret and execute), additional pages can be added, each with their own specific
    examples. This also has the advantage of being able to interactively experiment
    with code as only the examples on a page need to be recalculated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Xcode playground 只打开一个页面。然而，对于更全面的文档示例，可能更倾向于多个单独的页面。例如，与其创建一个包含子标题的非常长的页面（这可能需要一些时间来解释和执行），不如添加额外的页面，每个页面都有其特定的示例。这也具有这样的优势，即可以交互式地实验代码，因为只有页面上的示例需要重新计算。
- en: 'To add a new page to an existing playground, right-click on the **MyPlayground**
    top-level element in the project navigator and select the **New Playground Page**
    menu item. Alternatively, navigate to **File** | **New** | **Playground Page**
    or its keyboard shortcut, *Command* + *Option* + *N*. When this is done, the first
    page becomes **Untitled Page** and the newly added page becomes **Untitled Page
    2**:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有的 playground 添加新页面，在项目导航器中右键单击 **MyPlayground** 顶级元素，并选择 **New Playground
    Page** 菜单项。或者，导航到 **文件** | **新建** | **Playground 页面** 或其快捷键，*Command* + *Option*
    + *N*。完成此操作后，第一个页面变为 **未命名页面**，新添加的页面变为 **未命名页面 2**：
- en: '![Adding a page](img/00019.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![添加页面](img/00019.jpeg)'
- en: Pages can be reordered by dragging and dropping them in the project navigator
    on the left. They can also be renamed by selecting the page, then clicking it
    to reveal a text field that can be renamed. This is similar to renaming files
    in the `Finder`. The documentation's `@previous` and `@next` links allow the reader
    to navigate through the pages, as described in the following section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在左侧的项目导航器中拖放页面来重新排序页面。还可以通过选择页面，然后单击它以显示可以重命名的文本字段来重命名页面。这与在 `Finder` 中重命名文件类似。文档的
    `@previous` 和 `@next` 链接允许读者在以下部分中描述的页面上导航。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When working with a playground with pages, the `contents.xcplayground` file's
    version number is updated to `6.0`, and a new `Pages` directory is created that
    sits alongside the `Resources` top-level folder. Inside the `Pages` directory,
    each page is represented as its own `.xcplaygroundpage` folder, which contains
    a `Contents.swift` file and an individual `timeline.xctimeline` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当与具有页面的 playground 一起工作时，`contents.xcplayground` 文件的版本号更新为 `6.0`，并创建一个新的 `Pages`
    目录，该目录位于 `Resources` 顶级文件夹旁边。在 `Pages` 目录中，每个页面都表示为其自己的 `.xcplaygroundpage` 文件夹，其中包含一个
    `Contents.swift` 文件和一个单独的 `timeline.xctimeline` 文件。
- en: Documenting code
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码文档化
- en: Swift 2 adopts a new markup scheme for documentation, both for use with playgrounds
    but to also document Swift code. As a result, the documentation comments are described
    as applying to *Playground Comments* or *Symbol Documentation*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 2 采用了新的文档标记方案，用于与 playground 一起使用，同时也用于文档化 Swift 代码。因此，文档注释被描述为适用于 *Playground
    注释* 或 *符号文档*。
- en: Playground comments start with `//:` for single-line comments, and uses `/*:`
    and `*/` for block-level comments. These are rendered in playgrounds as in-line
    documentation, and they replace the nested HTML that existed in prior versions
    of Xcode. Markup defaults to showing as raw text, but the rendered content can
    be seen by navigating to **Editor** | **Show Rendered Markup**. To toggle it back
    to display the raw markup and allow the text to be edited, navigate to **Editor**
    | **Show Raw Markup**. This setting is also persisted in the `xcplayground` file
    with the `display-mode='rendered'` or `display-mode='raw'` attribute.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 游乐场注释以 `//:` 开头用于单行注释，并使用 `/*:` 和 `*/` 用于块级注释。这些在游乐场中作为内联文档呈现，并取代了先前版本的 Xcode
    中存在的嵌套 HTML。标记默认显示为原始文本，但可以通过导航到 **编辑器** | **显示渲染标记** 来查看渲染内容。要将它切换回显示原始标记并允许编辑文本，请导航到
    **编辑器** | **显示原始标记**。此设置也保存在 `xcplayground` 文件中，带有 `display-mode='rendered'` 或
    `display-mode='raw'` 属性。
- en: Symbol documentation starts with `///` for single-line comments, and uses `/**`
    and `*/` for block-level comments. Symbol documentation applies to variables and
    constants, functions, and types. Only one type of symbol documentation comment
    (either single-line or multiline, but not both) may be present above a symbol
    definition. Multiple contiguous single-line comments will be merged into a single
    block.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 符号文档以 `///` 开头用于单行注释，并使用 `/**` 和 `*/` 用于块级注释。符号文档适用于变量和常量、函数和类型。符号定义上方只能有一个类型的符号文档注释（单行或多行，但不能同时存在）。多个连续的单行注释将被合并为一个块。
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Symbol documentation can be revealed by pressing *Command* + *Control* + *?*
    while the cursor is over an identifier, or by pressing *Alt* and clicking on the
    identifier in Xcode.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 符号文档可以通过在标识符上按下 *Command* + *Control* + *?* 来揭示，或者通过在 Xcode 中按下 *Alt* 并单击标识符来揭示。
- en: Both playground and symbol documentation allow some markup to be used for text
    formatting purposes. In addition, there are certain symbol *format commands* that
    can be specified with a hyphen, followed by the command name, and then a colon.
    These are used to introduce documentation, for example, for a specific parameter
    of a function, the return type, or what errors are thrown.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是游乐场还是符号文档，都允许使用一些标记来格式化文本。此外，还有一些可以指定为带有短横线的符号 *格式命令*，后跟命令名称和冒号。这些用于引入文档，例如，对于函数的特定参数、返回类型或抛出的错误。
- en: Playground navigation documentation
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 游乐场导航文档
- en: It is possible to create navigational links between pages in a multipage playground.
    Each page has a name (which starts off as **Untitled Page**, **Untitled Page 2**,
    and so on) but can be renamed in the project navigator.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在多页游乐场中，可以在页面之间创建导航链接。每个页面都有一个名称（最初为 **未命名页面**、**未命名页面 2** 等），但可以在项目导航器中重命名。
- en: 'To rename a page, open the project navigator with *Command* + *1* and then
    select the page in the navigator view. The name can be made editable by double-clicking
    on the page name, which turns it into a text field:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要重命名页面，请使用 *Command* + *1* 打开项目导航器，然后在导航视图中选择页面。可以通过双击页面名称使其可编辑，从而将其转换为文本字段：
- en: '![Playground navigation documentation](img/00020.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Playground 导航文档](img/00020.jpeg)'
- en: 'Links to specific pages are performed with a link, which is represented as
    `[Link Name](Page%20Name)`. For example, to create a link to the first page that
    was just shown, the following can be used:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过链接到特定页面来执行，链接表示为 `[链接名称](页面名称)`。例如，要创建到刚刚显示的第一个页面的链接，可以使用以下内容：
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Spaces in the page name need to be URL escaped, so a space is represented as
    `%20`. Using `+` does not work.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 页面名称中的空格需要使用 URL 转义，因此空格表示为 `%20`。使用 `+` 是无效的。
- en: 'As page names may be fragile, it is recommended to use the **Next** and **Previous**
    links instead. These can be represented using the `@next` and `@previous` special
    identifiers as the page names, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于页面名称可能很脆弱，建议使用 **下一页** 和 **上一页** 链接。这些可以使用 `@next` 和 `@previous` 特殊标识符来表示页面名称，如下所示：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using `@next` and `@previous` is recommended in order to chain multiple pages
    together because it allows pages to be reordered without requiring any changes
    to the content. Pages can be reordered in the project navigator by dragging and
    dropping projects up and down the order.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用 `@next` 和 `@previous` 来连接多个页面，因为这允许在不修改内容的情况下重新排序页面。可以通过在项目导航器中拖放项目上下来重新排序页面。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Page navigation is only available in playgrounds.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 页面导航仅在游乐场中可用。
- en: Text formatting
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本格式化
- en: 'The playground and symbol documentation can use a number of different formatting
    styles using a markup language to represent different types of text. These include
    the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏场和符号文档可以使用多种不同的格式化样式，使用标记语言来表示不同类型的文本。以下是一些：
- en: Bulleted lists, which use one of the `*`, `+`, or `–` characters as the bullet,
    followed by a single space, and the text
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表项，使用`*`、`+`或`–`字符之一作为项目符号，后跟一个空格和文本
- en: Numbered lists, which use a number, followed by a period, a single space, and
    the text
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编号列表，使用数字，后跟一个点，一个空格和文本
- en: Horizontal rules, which use four dashes `----` to generate a horizontal rule
    in the text
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平线，使用四个破折号`----`在文本中生成水平线
- en: Block quotations, which start each line with `>` followed by a single space
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用块，每行以`>`后跟一个空格开始
- en: Block code, which is either indented four spaces in from the start, or begin
    and end with [PRE18]` [PRE19]
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块代码，要么从开头缩进四个空格，要么以[PRE18]` [PRE19]开始和结束
- en: '//: # Example Documentation'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '//: # 示例文档'
- en: '//: Navigate to the [previous](@previous) or [next](@next) page'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 导航到[上一页](@previous)或[下一页](@next)页面'
- en: '//: ----'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '//: ----'
- en: '//: Numbered lists:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 列表项：'
- en: '//: 1\. First item'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 1\. 第一项'
- en: '//: 2\. Second item'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 2\. 第二项'
- en: '//: 3\. Third item'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 3\. 第三项'
- en: '//:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '//:'
- en: '//: Bulleted lists:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 列表项：'
- en: '//: * First item'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '//: * 第一项'
- en: '//: * Second item'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '//: * 第二项'
- en: '//:   + child item'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '//:   + 子项'
- en: '//:   + child item'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '//:   + 子项'
- en: '//: * Third item'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '//: * 第三项'
- en: '//:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '//:'
- en: '//: How to do loops in Swift using `for`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 如何使用`for`在Swift中做循环：'
- en: '//:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '//:'
- en: '//:     for i in 1...12 {'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '//:     for i in 1...12 {'
- en: '//:       print("Looping \(i)")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '//:       print("Looping \(i)")'
- en: '//:     }'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '//:     }'
- en: '//:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '//:'
- en: '//: > This is a block quote'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '//: > 这是一个引用块'
- en: '//: > which is merged together'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '//: > 这被合并在一起'
- en: '//: > using _italics_ or **bold**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '//: > 使用斜体或**粗体**'
- en: '//:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '//:'
- en: '//: Link to [AlBlue''s Blog](http://alblue.bandlem.com)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '//: 链接到[AlBlue的博客](http://alblue.bandlem.com)'
- en: '//: Image of ![AlBlue](http://alblue.bandlem.com/images/AlexHeadshotLeft.png
    "AlBlue")'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '//: ![AlBlue的图片](http://alblue.bandlem.com/images/AlexHeadshotLeft.png "AlBlue")'
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: /**
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: /**
- en: Returns the string in SHOUTY CAPS
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 返回大写字母的字符串
- en: '- parameter input: the input string'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '- 参数 input：输入字符串'
- en: '- author: Alex Blewitt'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '- 作者：Alex Blewitt'
- en: '- returns: The input string, but in upper case'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '- 返回值：输入字符串，但为大写'
- en: '- throws: No errors thrown'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '- 抛出：不抛出错误'
- en: '- note: Please don''t shout'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '- 注意：请不要大喊大叫'
- en: '- seealso: String.uppercaseString'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '- 参考信息：String.uppercaseString'
- en: '- since: 2015'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '- 自：2015'
- en: '*/'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: func shout(input:String) -> String {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: func shout(input:String) -> String {
- en: return input.uppercaseString
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: return input.uppercaseString
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '```'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: 'When the mouse hovers over the `shout` function, the following documentation
    will be seen:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标悬停在`shout`函数上时，将看到以下文档：
- en: '![Symbol documentation](img/00022.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![符号文档](img/00022.jpeg)'
- en: Limitations of playgrounds
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏场的限制
- en: Although playgrounds can be very powerful for interacting with code, there are
    some limitations that are worth being aware of. There is no debugging support
    in the playground, so it is not possible to add a breakpoint and use the debugger
    and find out what are the values.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然游戏场可以非常强大地与代码交互，但也有一些值得注意的限制。游戏场中没有调试支持，因此无法添加断点并使用调试器来找出值。
- en: 'Given that the UI allows tracking values—and that it''s very easy to add new
    lines with just the value to be tracked—this is not much of a hardship. Other
    limitations of playgrounds include the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 由于UI允许跟踪值——并且只需添加新行并跟踪值就非常容易——这并不是什么大问题。游戏场的其他限制包括以下内容：
- en: Only the simulator can be used for the execution of iOS-based playgrounds. This
    prevents the use of hardware-specific features that may only be present on a device.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有模拟器可以用于执行基于iOS的游戏场。这防止了使用可能仅在设备上存在的特定硬件功能。
- en: The performance of playground scripts is mainly based on how many lines are
    executed and how much output is saved by the debugger. It should not be used to
    test the performance of performance-sensitive code.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏场脚本的性能主要基于执行了多少行代码以及调试器保存了多少输出。它不应用于测试对性能敏感的代码的性能。
- en: Although the playground is well suited to present user interface components,
    it cannot be used for user input.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然游戏场非常适合展示用户界面组件，但不能用于用户输入。
- en: Anything requiring entitlements (such as in-app purchases or access to iCloud)
    is not possible in playground at the current time of writing.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在当前写作时，需要权限（如应用内购买或访问iCloud）的功能在游戏场中是不可能的。
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter presented playgrounds, an innovative way of running Swift code
    with graphical representation of values and introspection of running code. Both
    expressions and timeline were presented as a way of showing the state of the program
    at any time, as well as graphically inspecting objects using Quick Look. The `XCPlayground`
    framework can also be used to record specific values and allow asynchronous code
    to be executed.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了游乐场，这是一种运行 Swift 代码的创新方式，它通过图形化展示值和运行代码的检查来呈现。表达式和时序都被展示为显示程序在任何时刻状态的方式，以及使用快速查看（Quick
    Look）图形化检查对象。`XCPlayground` 框架还可以用来记录特定值，并允许异步代码执行。
- en: The next chapter will look at how to create an iOS application with Swift.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨如何使用 Swift 创建 iOS 应用程序。
