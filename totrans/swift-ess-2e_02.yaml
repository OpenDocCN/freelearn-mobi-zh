- en: Chapter 2. Playing with Swift
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode ships with both a command-line interpreter (which was covered in [Chapter
    1](part0016_split_000.html#F8901-d7e55eb5242648e89c396442afe4f84b "Chapter 1. Exploring
    Swift"), *Exploring Swift*) and a graphical interface called **playground** that
    can be used to prototype and test Swift code snippets. Code that is typed into
    the playground is compiled and executed interactively, which permits a fluid style
    of development. In addition, the user interface can present a graphical view of
    variables as well as a timeline, which can show how loops are executed. Finally,
    playgrounds can mix and match code and documentation leading to the possibility
    of providing example code as playgrounds and using playgrounds to learn how to
    use existing APIs and frameworks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will present the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to create a playground
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying values in the timeline
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting objects with Quick Look
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running asynchronous code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using playground's live documentation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple pages in a playground
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations of playgrounds
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with playgrounds
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When Xcode is started, the welcome screen is displayed with various options,
    including the ability to create a playground. The welcome screen can be shown
    with *Command* + *Shift* + *1*, or by navigating to **Window** | **Welcome to
    Xcode**:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with playgrounds](img/00002.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Creating a playground
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using either the Xcode welcome screen (which can be opened by navigating to
    **Window** | **Welcome to Xcode**) or by navigating to **File** | **New** | **Playground**,
    create `MyPlayground` in a suitable location targeting **iOS**. Creating the playground
    on the `Desktop` will allow easy access to testing Swift code, but it can be located
    anywhere on the filesystem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Playgrounds can be targeted either towards OS X applications or towards iOS
    applications. This can be configured when the playground is created, or by switching
    to the **Utilities** view by navigating to **View** | **Utilities** | **Show File
    Inspector** or pressing *Command* + *Option* + *1* and changing the dropdown from
    OS X to iOS or vice versa:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a playground](img/00003.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: 'When initially created, the playground will have a code snippet that looks
    as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Playgrounds targeting OS X will read `import Cocoa` instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right-hand side, a column will display the value of the code when each
    line is executed. By grabbing the vertical divider between the Swift code and
    the output, the output can be resized to show the full value of the text:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a playground](img/00004.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, by moving the mouse over the right-hand side of the playground,
    the **Quick Look** icon (the eye symbol) will appear. If this is clicked, a pop-up
    box will show the full details:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a playground](img/00005.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Viewing the console output
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The console output can be viewed in the *Debug Area*. This can be shown by pressing
    *Command* + *Shift* + *Y* or by navigating to **View** | **Debug Area** | **Show
    Debug Area**. This will show the result of any `print` statements that are executed
    in the code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a simple `for` loop to the playground:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output is shown in the debug area below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the console output](img/00006.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Viewing the timeline
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The timeline shows what the values were at a particular time. In the case of
    the print loop that was shown previously, the output was displayed in the **Debug
    Area**. However, it is possible to use the playground to inspect the value of
    an expression on a line without having to display it directly. In addition, results
    can be graphed to show how these values change over time. The value of the graph
    is shown in-line with the source code unlike previous versions of Xcode, which
    displayed them on the right.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Add another line above the `print` statement to calculate the result of executing
    an expression, `(i-6)*(i-7)`, and store it in a `j` constant.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'On the line next to the variable definition, click on the add variable history
    (**+**) symbol, which is in the right-hand column (visible when the mouse moves
    over that area). After it is clicked , it will change to an (**o**) symbol and
    display the graph on the right-hand side. This can be done for the `print` statement
    as well:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Viewing the timeline](img/00007.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'It is possible to display a timeline slider at the bottom of the window by
    selecting the **Show Timeline** checkbox in the **Utilities** area. This adds
    a timeline slider at the bottom, with a red tick mark, and this can be used to
    slide the vertical bar to see the exact value at certain points:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the timeline](img/00008.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'To display several values at once, use additional variables to hold the values
    and display them in the timeline as well:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Viewing the timeline](img/00009.jpeg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: When the timeline slider is dragged, both values will be displayed at the same
    time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Displaying objects with Quick Look
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The playground timeline can display objects as well as numbers and simple strings.
    It is possible to load and view images in a playground using classes, such as
    `UIImage` (or `NSImage` on OS X). These are known as *Quick Look supported objects*,
    and by default include:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: String (attributed and unattributed)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Views
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class and struct types (members are shown)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Colors
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to build support for custom-based types into Swift by implementing
    a `debugQuickLookObject` method that returns a graphical view of the data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Showing colored labels
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To show a colored label, a color needs to be obtained first. When building against
    iOS, this will be `UIColor`; but when building against OS X, it will be `NSColor`.
    The methods and types are largely equivalent between the two, but this chapter
    will demonstrate using iOS types.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'A color can be acquired with an initializer or using one of the predefined
    colors that are exposed in Swift using methods, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Xcode 7.1 and above, a color can be dragged in from a color picker into the
    Swift code directly where it will be translated as a color initializer with the
    specific hardcoded color values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'The color can be used as the `textColor` of a `UILabel`, which displays a text
    string in a particular size and color. The `UILabel` needs a size, which is represented
    by a `CGRect`, and this can be defined with an `x` and `y` position along with
    a `width` and `height`. The `x` and `y` positions are not relevant for playgrounds,
    and so, they can be left as zero:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, the text needs to be displayed in blue and with a larger font size:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the playground is run, the color and font are displayed in the timeline
    and are available for quick view. Even though the same `UILabel` instance is being
    shown, the timeline and the quick look values show a snapshot of the state of
    the object at each point, making it easy to see what has happened between changes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing colored labels](img/00010.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Showing images
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images can be created and loaded into a playground using the `UIImage` constructor
    (or `NSImage` on OS X). Both take a `named` argument, which is used to find and
    load an image with the given name from the playground's `Resources` folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy a file into the playground''s `Resources` folder, first download an
    image, such as `http://alblue.bandlem.com/images/AlexHeadshotLeft.png`, and save
    it as `alblue.png` in a suitable location such as the `Desktop`. In order to add
    it to the playground, the project navigator needs to be opened with *Command*
    + *1* or by navigating to **View** | **Navigators** | **Show Project Navigator**.
    Once opened, the file can be dragged and dropped into the `Resources` element
    in the tree:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing images](img/00011.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Xcode 7.1 allows the image to be dragged directly into the source code area.
    It will populate a `UIImage` (or `NSImage`) as well as copy it to the resources
    area. Xcode 7.0 and below will just copy the full file path of the source if dragged
    in.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, to download a logo with the command line, open `Terminal.app`
    and run the following commands:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An image can now be created in swift using the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The location of the `Resources` that are associated with a playground can be
    seen in the **File Inspector** utilities view, which can be opened by pressing
    *Command* + *Option* + *1*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'The created image can be displayed using **Quick Look** or by adding it to
    the value history:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing images](img/00012.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to use a URL to acquire an image by creating an NSURL with `NSURL(string:"http://...")!`,
    then loading the contents of the URL with `NSData(contentsOfURL:)!`, and finally,
    using `UIImage(data:)` to convert it to an image. However, as Swift will keep
    re-executing the code over and over again, the URL will be hit multiple times
    in a single debugging session without caching. It is recommended that `NSData(contentsOfURL:)`
    and similar networking classes be avoided in playgrounds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Advanced techniques
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The playground has its own `XCPlayground` framework, which can be used to perform
    certain tasks. For example, individual values can be captured during loops for
    later analysis. It also permits asynchronous code to continue to execute once
    the playground has finished running.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Capturing values explicitly
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to explicitly add values to the timeline by importing the `XCPlayground`
    framework and using `XCPlaygroundPage.currentPage`, and calling `captureValue`
    with a value that should be displayed in the timeline. This takes an identifier,
    which is used both as the title and to group related data values in the same series.
    When the value history button is selected, it essentially inserts a call to `captureValue`
    with the value of the expression as the identifier.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add the logo to the timeline automatically:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Opening the **Assistant Editor** will show the timeline along with the recorded
    values:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Capturing values explicitly](img/00013.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'It is possible to use the identifier to group the data that is being shown
    in a loop, with the identifier representing categories of the values. For example,
    to display a list of all even and odd numbers between `1` and `6`, the following
    code could be used:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When executed, the result will look like:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![Capturing values explicitly](img/00014.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Running asynchronous code
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, when execution hits the end of the current playground page, the
    execution stops. In most cases this is desirable, but when asynchronous code is
    involved, execution may need to continue to run even if the main code has finished
    executing. This may be the case if networking data is involved or if there are
    multiple tasks whose results need to be synchronized.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, wrapping the previous even/odd split in an asynchronous call will
    result in no data being displayed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This uses one of Swift''s language features: the `dispatch_async` method which
    is actually a two-argument method that takes a queue and a block type. However,
    if the last argument is a block type, then it can be represented as a trailing
    closure rather than an argument.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow playground to continue executing after reaching the end, add the following
    assignment:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Although this suggests that the execution will run forever, it is limited to
    30 seconds of runtime, or whatever the value is displayed at the bottom-right
    corner of the screen. This timeout can be changed by typing in a new value or
    using the **+** and **–** buttons to increase/decrease time by one second. In
    addition to this, the execution can be stopped by clicking the square icon on
    the lower left-hand side of the window:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![Running asynchronous code](img/00015.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Playgrounds and documentation
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Playgrounds can contain a mix of code and documentation. This allows a set of
    code, samples, and explanations to be mixed in with the playground itself.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Learning with playgrounds
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As playgrounds can contain a mixture of code and documentation, it makes them
    an ideal format to view annotated code snippets. In fact, Apple's Swift Tour book
    can be opened as a playground file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Xcode documentation can be searched by navigating to **Help** | **Documentation
    and API Reference** or by pressing *Command* + *Shift* + *0*. In the search dialog
    that is presented, type `Swift Tour` and then select the first result. The Swift
    Tour book should be presented in Xcode''s help system, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning with playgrounds](img/00016.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'A link to download and open the documentation as a playground is given in the
    first section; if this is downloaded, it can be opened in Xcode as a standalone
    playground. This provides the same information, but it allows the code examples
    to be dynamic and show the results in the window:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning with playgrounds](img/00017.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: A key advantage of learning through playground-based documentation is that the
    code can be experimented with. In the *Simple Values* section of the documentation,
    where `myVariable` is assigned, the right-hand side of the playground shows the
    values. If the literal numbers are changed, the new values will be recalculated
    and shown on the right-hand side.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the playground format
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The playground is an *OS X bundle*, which means that it is a directory that
    looks like a single file. If the playground is selected either in `TextEdit.app`
    or in `Finder`, then it looks like a regular file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the playground format](img/00018.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Under the covers, it is actually a directory:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Inside the directory, there are a number of files:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The files are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: The `Contents.swift` file, which is the Swift file that is created by default
    when a new playground is created, and this contains the code that is typed in
    for any new playground content
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Resources` directory, which was created earlier to hold the logo image
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `contents.xcplayground` file, which is an XML table of contents of the files
    that make up the playground
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `playground.xcworkspace`, which is used to hold metadata about the project
    in Xcode
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `timeline.xctimeline`, which is the file containing timestamps of execution
    that are generated by the runtime when executing a Swift file and the timeline
    is open
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The table of contents file defines which runtime environment is being targeted
    (for example, iOS or OS X) and a reference to the timeline file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An Xcode playground directory is deleted and recreated whenever changes are
    made in Xcode. Any `Terminal.app` windows that are open in that directory will
    no longer display any files. As a result, using external tools and editing the
    files in place may result in changes being lost. In addition, using ancient versions
    of control systems, such as SVN and CVS, may find their version control metadata
    being wiped out between saves. Xcode ships with the industry standard Git version
    control system, which should be preferred instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Adding a page
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, an Xcode playground has a single page open. However, for more comprehensive
    documentation examples, many separate pages may be preferable. For example, instead
    of creating a single very long page with subheadings (which may take a while to
    interpret and execute), additional pages can be added, each with their own specific
    examples. This also has the advantage of being able to interactively experiment
    with code as only the examples on a page need to be recalculated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new page to an existing playground, right-click on the **MyPlayground**
    top-level element in the project navigator and select the **New Playground Page**
    menu item. Alternatively, navigate to **File** | **New** | **Playground Page**
    or its keyboard shortcut, *Command* + *Option* + *N*. When this is done, the first
    page becomes **Untitled Page** and the newly added page becomes **Untitled Page
    2**:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a page](img/00019.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Pages can be reordered by dragging and dropping them in the project navigator
    on the left. They can also be renamed by selecting the page, then clicking it
    to reveal a text field that can be renamed. This is similar to renaming files
    in the `Finder`. The documentation's `@previous` and `@next` links allow the reader
    to navigate through the pages, as described in the following section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working with a playground with pages, the `contents.xcplayground` file's
    version number is updated to `6.0`, and a new `Pages` directory is created that
    sits alongside the `Resources` top-level folder. Inside the `Pages` directory,
    each page is represented as its own `.xcplaygroundpage` folder, which contains
    a `Contents.swift` file and an individual `timeline.xctimeline` file.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Documenting code
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Swift 2 adopts a new markup scheme for documentation, both for use with playgrounds
    but to also document Swift code. As a result, the documentation comments are described
    as applying to *Playground Comments* or *Symbol Documentation*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Playground comments start with `//:` for single-line comments, and uses `/*:`
    and `*/` for block-level comments. These are rendered in playgrounds as in-line
    documentation, and they replace the nested HTML that existed in prior versions
    of Xcode. Markup defaults to showing as raw text, but the rendered content can
    be seen by navigating to **Editor** | **Show Rendered Markup**. To toggle it back
    to display the raw markup and allow the text to be edited, navigate to **Editor**
    | **Show Raw Markup**. This setting is also persisted in the `xcplayground` file
    with the `display-mode='rendered'` or `display-mode='raw'` attribute.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Symbol documentation starts with `///` for single-line comments, and uses `/**`
    and `*/` for block-level comments. Symbol documentation applies to variables and
    constants, functions, and types. Only one type of symbol documentation comment
    (either single-line or multiline, but not both) may be present above a symbol
    definition. Multiple contiguous single-line comments will be merged into a single
    block.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Symbol documentation can be revealed by pressing *Command* + *Control* + *?*
    while the cursor is over an identifier, or by pressing *Alt* and clicking on the
    identifier in Xcode.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Both playground and symbol documentation allow some markup to be used for text
    formatting purposes. In addition, there are certain symbol *format commands* that
    can be specified with a hyphen, followed by the command name, and then a colon.
    These are used to introduce documentation, for example, for a specific parameter
    of a function, the return type, or what errors are thrown.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Playground navigation documentation
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is possible to create navigational links between pages in a multipage playground.
    Each page has a name (which starts off as **Untitled Page**, **Untitled Page 2**,
    and so on) but can be renamed in the project navigator.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'To rename a page, open the project navigator with *Command* + *1* and then
    select the page in the navigator view. The name can be made editable by double-clicking
    on the page name, which turns it into a text field:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![Playground navigation documentation](img/00020.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'Links to specific pages are performed with a link, which is represented as
    `[Link Name](Page%20Name)`. For example, to create a link to the first page that
    was just shown, the following can be used:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Tip
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spaces in the page name need to be URL escaped, so a space is represented as
    `%20`. Using `+` does not work.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'As page names may be fragile, it is recommended to use the **Next** and **Previous**
    links instead. These can be represented using the `@next` and `@previous` special
    identifiers as the page names, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using `@next` and `@previous` is recommended in order to chain multiple pages
    together because it allows pages to be reordered without requiring any changes
    to the content. Pages can be reordered in the project navigator by dragging and
    dropping projects up and down the order.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Page navigation is only available in playgrounds.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Text formatting
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The playground and symbol documentation can use a number of different formatting
    styles using a markup language to represent different types of text. These include
    the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Bulleted lists, which use one of the `*`, `+`, or `–` characters as the bullet,
    followed by a single space, and the text
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numbered lists, which use a number, followed by a period, a single space, and
    the text
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal rules, which use four dashes `----` to generate a horizontal rule
    in the text
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block quotations, which start each line with `>` followed by a single space
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Block code, which is either indented four spaces in from the start, or begin
    and end with [PRE18]` [PRE19]
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '//: # Example Documentation'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '//: Navigate to the [previous](@previous) or [next](@next) page'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '//: ----'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '//: Numbered lists:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '//: 1\. First item'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '//: 2\. Second item'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '//: 3\. Third item'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '//:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '//: Bulleted lists:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '//: * First item'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '//: * Second item'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '//:   + child item'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '//:   + child item'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '//: * Third item'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '//:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '//: How to do loops in Swift using `for`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '//:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '//:     for i in 1...12 {'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '//:       print("Looping \(i)")'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '//:     }'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '//:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '//: > This is a block quote'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '//: > which is merged together'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '//: > using _italics_ or **bold**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '//:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '//: Link to [AlBlue''s Blog](http://alblue.bandlem.com)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '//: Image of ![AlBlue](http://alblue.bandlem.com/images/AlexHeadshotLeft.png
    "AlBlue")'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: /**
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Returns the string in SHOUTY CAPS
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '- parameter input: the input string'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '- author: Alex Blewitt'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '- returns: The input string, but in upper case'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '- throws: No errors thrown'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '- note: Please don''t shout'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '- seealso: String.uppercaseString'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '- since: 2015'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: func shout(input:String) -> String {
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: return input.uppercaseString
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'When the mouse hovers over the `shout` function, the following documentation
    will be seen:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Symbol documentation](img/00022.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: Limitations of playgrounds
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although playgrounds can be very powerful for interacting with code, there are
    some limitations that are worth being aware of. There is no debugging support
    in the playground, so it is not possible to add a breakpoint and use the debugger
    and find out what are the values.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that the UI allows tracking values—and that it''s very easy to add new
    lines with just the value to be tracked—this is not much of a hardship. Other
    limitations of playgrounds include the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Only the simulator can be used for the execution of iOS-based playgrounds. This
    prevents the use of hardware-specific features that may only be present on a device.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The performance of playground scripts is mainly based on how many lines are
    executed and how much output is saved by the debugger. It should not be used to
    test the performance of performance-sensitive code.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the playground is well suited to present user interface components,
    it cannot be used for user input.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anything requiring entitlements (such as in-app purchases or access to iCloud)
    is not possible in playground at the current time of writing.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented playgrounds, an innovative way of running Swift code
    with graphical representation of values and introspection of running code. Both
    expressions and timeline were presented as a way of showing the state of the program
    at any time, as well as graphically inspecting objects using Quick Look. The `XCPlayground`
    framework can also be used to record specific values and allow asynchronous code
    to be executed.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了游乐场，这是一种运行 Swift 代码的创新方式，它通过图形化展示值和运行代码的检查来呈现。表达式和时序都被展示为显示程序在任何时刻状态的方式，以及使用快速查看（Quick
    Look）图形化检查对象。`XCPlayground` 框架还可以用来记录特定值，并允许异步代码执行。
- en: The next chapter will look at how to create an iOS application with Swift.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨如何使用 Swift 创建 iOS 应用程序。
