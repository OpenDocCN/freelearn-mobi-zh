["```swift\n    // ToDoItemInputViewTests.swift\n    import XCTest\n    @testable import ToDo\n    import ViewInspector\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    extension ToDoItemInputView: Inspectable {}\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    var sut: ToDoItemInputView!\n    var toDoItemData: ToDoItemData!\n    ```", "```swift\n    // ToDoItemData.swift\n    import Foundation \n\n    class ToDoItemData: ObservableObject {\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests .swift\n    override func setUpWithError() throws {\n      toDoItemData = ToDoItemData()\n      sut = ToDoItemInputView(data: toDoItemData)\n    }\n\n    override func tearDownWithError() throws {\n      sut = nil\n      toDoItemData = nil\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    @ObservedObject var data: ToDoItemData\n    ```", "```swift\n    // ToDoItemInputView.swift\n    static var previews: some View {\n      ToDoItemInputView(data: ToDoItemData())\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_titleInput_shouldSetValueInData() throws {\n      let expected = \"dummy title\"\n      try sut\n        .inspect()\n        .find(ViewType.TextField.self)\n        .setInput(expected)\n\n      let input = toDoItemData.title\n    }\n    ```", "```swift\n    // ToDoItemData.swift\n    @Published var title = \"\"\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_shouldAllowTitleInput() throws {\n      let expected = \"dummy title\"\n      try sut\n        .inspect()\n        .find(ViewType.TextField.self)\n        .setInput(expected)\n\n      let input = toDoItemData.title\n\n      XCTAssertEqual(input, expected)\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    TextField(\"Title\", text: $data.title)\n    ```", "```swift\n    // ToDoItemInputView.swift\n    struct ToDoItemInputView: View { \n      @ObservedObject var data: ToDoItemData\n      @State var dummy: String = \"\"\n\n      var body: some View {\n        TextField(\"Title\", text: $dummy)\n      }\n    }\n    ```", "```swift\n// ToDoItemInputViewTests.swift\nfunc test_whenWithoutDate_shouldNotShowDateInput() {\n  XCTAssertThrowsError(try sut\n    .inspect()\n    .find(ViewType.DatePicker.self))\n}\n```", "```swift\n    // ToDoItemInputView.swift\n    struct ToDoItemInputView: View { \n      @ObservedObject var data: ToDoItemData\n      var didAppear: ((Self) -> Void)?\n\n      var body: some View {\n        VStack {\n          TextField(\"Title\", text: $data.title)\n        }\n        .onAppear { self.didAppear?(self) }\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_whenWithDate_shouldAllowDateInput() throws {\n      let exp = sut.on(\\.didAppear) { view in\n        try view.find(ViewType.Toggle.self).tap()\n        let expected = Date(timeIntervalSinceNow:\n          1_000_000)\n        try view\n          .find(ViewType.DatePicker.self)\n          .select(date: expected)\n\n        let input = self.toDoItemData.date\n      }\n\n      ViewHosting.host(view: sut)\n      wait(for: [exp], timeout: 0.1)\n    }\n    ```", "```swift\n    // ToDoItemData.swift\n    @Published var date = Date()\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func test_whenWithDate_shouldAllowDateInput() throws {\n      let exp = sut.on(\\.didAppear) { view in\n        try view.find(ViewType.Toggle.self).tap()\n\n        let expected = Date(timeIntervalSinceNow:\n          1_000_000)\n        try view\n          .find(ViewType.DatePicker.self)\n          .select(date: expected)\n\n        let input = self.toDoItemData.date\n        XCTAssertEqual(input, expected)\n      }\n\n      ViewHosting.host(view: sut)\n      wait(for: [exp], timeout: 0.1)\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    @State var withDate = false\n    ```", "```swift\n    // ToDoItemInputView.swift\n    VStack {\n      TextField(\"Title\", text: $data.title)\n      Toggle(\"Add Date\", isOn: $withDate)\n    }\n    .onAppear { self.didAppear?(self) }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    VStack {\n      TextField(\"Title\", text: $data.title)\n      Toggle(\"Add Date\", isOn: $withDate)\n      DatePicker(\"Date\", selection: $data.date)\n    }\n    .onAppear { self.didAppear?(self) }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    var body: some View {\n      VStack {\n        TextField(\"Title\", text: $data.title)\n        Toggle(\"Add Date\", isOn: $withDate)\n        if withDate {\n          DatePicker(\"Date\", selection: $data.date)\n        }\n      }\n      .onAppear { self.didAppear?(self) }\n    }\n    ```", "```swift\n    // ToDoItemInputTests.swift\n    func test_whenWithDate_shouldAllowDateInput() throws {\n      let expected = Date()\n      try sut.inspect().find(ViewType.Toggle.self).tap()\n      try sut\n        .inspect()\n        .find(ViewType.DatePicker.self)\n        .select(date: expected)\n\n      let input = toDoItemData.date\n\n      XCTAssertEqual(input, expected)\n    }\n    ```", "```swift\n    // ToDoItemData.swift\n    @Published var withDate = false\n    ```", "```swift\n    // ToDoItemInputView.swift\n    var body: some View {\n      VStack {\n        TextField(\"Title\", text: $data.title)\n        Toggle(\"Add Date\", isOn: $data.withDate)\n        if data.withDate {\n          DatePicker(\"Date\", selection: $data.date)\n        }\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_shouldAllowDescriptionInput() throws {\n      let expected = \"dummy description\"\n      try sut\n        .inspect()\n        .find(ViewType.TextField.self,\n          where: { view in\n          let label = try view\n            .labelView()\n            .text()\n            .string()\n          return label == \"Description\"\n        })\n        .setInput(expected)\n      let input = toDoItemData.itemDescription\n    }\n    ```", "```swift\n    // ToDoItemData.swift\n    class ToDoItemData: ObservableObject {\n      @Published var title = \"\"\n      @Published var date = Date()\n      @Published var withDate = false\n      @Published var itemDescription = \"\"\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    XCTAssertEqual(input, expected)\n    ```", "```swift\n    // ToDoItemInputView.swift\n    var body: some View {\n      VStack {\n        TextField(\"Title\", text: $data.title)\n        Toggle(\"Add Date\", isOn: $data.withDate)\n        if data.withDate {\n          DatePicker(\"Date\", selection: $data.date)\n        }\n        TextField(\"Description\",\n          text: $data.itemDescription)\n      }\n    }\n    ```", "```swift\n// ToDoItemInput.swift\nvar body: some View {\n  Form {\n    SwiftUI.Section {\n      TextField(\"Title\", text: $data.title)\n      Toggle(\"Add Date\", isOn: $data.withDate)\n      if data.withDate {\n        DatePicker(\"Date\", selection: $data.date)\n      }\n      TextField(\"Description\",\n        text: $data.itemDescription)\n    }\n    SwiftUI.Section {\n      TextField(\"Location name\",\n        text: $data.locationName)\n    }\n  }\n}\n```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_shouldHaveASaveButton() throws {\n      XCTAssertNoThrow(try sut\n        .inspect()\n        .find(ViewType.Button.self,\n          where: { view in\n          let label = try view\n            .labelView()\n            .text()\n            .string()\n          return label == \"Save\"\n        }))\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    SwiftUI.Section {\n      Button(action: addToDoItem,\n        label: {\n        Text(\"Save\")\n      })\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func addToDoItem() {\n    }\n    ```", "```swift\n    // APIClient.swift\n    protocol APIClientProtocol {\n      func coordinate(\n        for: String,\n        completion: (Coordinate?) -> Void)\n    }\n    ```", "```swift\n    // APIClientMock.swift\n    import Foundation\n    @testable import ToDo\n\n    class APIClientMock: APIClientProtocol { \n      var coordinateAddress: String?\n      var coordinateReturnValue: Coordinate?\n\n      func coordinate(\n        for address: String,\n        completion: (Coordinate?) -> Void) { \n          coordinateAddress = address\n          completion(coordinateReturnValue)\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    var apiClientMock: APIClientMock!\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    override func setUpWithError() throws {\n      toDoItemData = ToDoItemData()\n      apiClientMock = APIClientMock()\n      sut = ToDoItemInputView(\n        data: toDoItemData,\n        apiClient: apiClientMock)\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    override func tearDownWithError() throws {\n      sut = nil\n      toDoItemData = nil\n      apiClientMock = nil\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift:\n    let apiClient: APIClientProtocol\n    ```", "```swift\n    // ToDoItemInputView.swift\n    struct ToDoItemInputView_Previews: PreviewProvider {\n      static var previews: some View {\n        ToDoItemInputView(data: ToDoItemData(),\n          apiClient: APIClient())\n          .previewLayout(.sizeThatFits)\n      }\n    }\n    ```", "```swift\n    // APIClient.swift\n    class APIClient: APIClientProtocol {\n      func coordinate(\n        for: String,\n        completion: (Coordinate?) -> Void) {\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_saveButton_shouldFetchCoordinate() throws {\n      toDoItemData.title = \"dummy title\"\n      let expected = \"dummy address\"\n      toDoItemData.addressString = expected\n      try sut\n        .inspect()\n        .find(ViewType.Button.self,\n              where: { view in\n          let label = try view\n            .labelView()\n            .text()\n            .string()\n          return label == \"Save\"\n        })\n        .tap()\n\n      XCTAssertEqual(apiClientMock.coordinateAddress,\n        expected)\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func addToDoItem() {\n      apiClient.coordinate(\n        for: data.addressString,\n           completion: { coordinate in         \n      })\n    }\n    ```", "```swift\n    // ToDoInputViewTests.swift\n    func test_save_whenAddressEmpty_\n      shouldNotFetchCoordinate() throws {\n      toDoItemData.title = \"dummy title\"\n      try sut\n        .inspect()\n        .find(ViewType.Button.self,\n              where: { view in\n          let label = try view\n            .labelView()\n            .text()\n            .string()\n          return label == \"Save\"\n        })\n        .tap()\n\n      XCTAssertNil(apiClientMock.coordinateAddress)\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func addToDoItem() {\n      if false == data.addressString.isEmpty {\n        apiClient.coordinate(\n          for: data.addressString,\n             completion: { coordinate in\n             })\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    protocol ToDoItemInputViewDelegate {\n      func addToDoItem(with: ToDoItemData,\n        coordinate: Coordinate?)\n    }\n    ```", "```swift\n    // ToDoItemInputViewDelegateMock.swift\n    import Foundation\n    @testable import ToDo \n\n    class ToDoItemInputViewDelegateMock:\n      ToDoItemInputViewDelegate { \n\n      var lastToDoItemData: ToDoItemData?\n      var lastCoordinate: Coordinate? \n\n      func addToDoItem(with data: ToDoItemData,\n        coordinate: Coordinate?) { \n\n        lastToDoItemData = data\n        lastCoordinate = coordinate\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_save_shouldCallDelegate() throws {\n      toDoItemData.title = \"dummy title\"\n      toDoItemData.addressString = \"dummy address\"\n      apiClientMock.coordinateReturnValue =\n      Coordinate(latitude: 1, longitude: 2)\n      let delegateMock = ToDoItemInputViewDelegateMock()\n      sut.delegate = delegateMock\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    var delegate: ToDoItemInputViewDelegate?\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_save_shouldCallDelegate() throws {\n      toDoItemData.title = \"dummy title\"\n      toDoItemData.addressString = \"dummy address\"\n      apiClientMock.coordinateReturnValue =\n      Coordinate(latitude: 1, longitude: 2)\n      let delegateMock = ToDoItemInputViewDelegateMock()\n      sut.delegate = delegateMock\n      try sut\n        .inspect()\n        .find(ViewType.Button.self,\n              where: { view in\n          let label = try view\n            .labelView()\n            .text()\n            .string()\n          return label == \"Save\"\n        })\n        .tap()\n\n      XCTAssertEqual(delegateMock.lastToDoItemData?.title,\n        \"dummy title\")\n      XCTAssertEqual(delegateMock.lastCoordinate?\n        .latitude, 1)\n      XCTAssertEqual(delegateMock.lastCoordinate?\n        .longitude, 2)\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    extension ToDoItemInputView {\n      func tapButtonWith(name: String) throws {\n        try inspect()\n          .find(ViewType.Button.self,\n            where: { view in\n            let label = try view\n              .labelView()\n              .text()\n              .string()\n            return label == name\n          })\n          .tap()\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_save_shouldCallDelegate() throws {\n      toDoItemData.title = \"dummy title\"\n      toDoItemData.addressString = \"dummy address\"\n      apiClientMock.coordinateReturnValue =\n      Coordinate(latitude: 1, longitude: 2)\n      let delegateMock = ToDoItemInputViewDelegateMock()\n      sut.delegate = delegateMock\n      try sut.tapButtonWith(name: \"Save\")\n\n      XCTAssertEqual(delegateMock.lastToDoItemData?.title,\n        \"dummy title\")\n      XCTAssertEqual(delegateMock.lastCoordinate?\n        .latitude, 1)\n      XCTAssertEqual(delegateMock.lastCoordinate?\n        .longitude, 2)\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func addToDoItem() {\n      if false == data.addressString.isEmpty {\n        apiClient.coordinate(\n          for: data.addressString,\n             completion: { coordinate in\n               self.delegate?.addToDoItem(\n                with: data,\n                coordinate: coordinate)\n             })\n      }\n    }\n    ```", "```swift\n    // ToDoItemInputViewTests.swift\n    func test_save_whenAddressEmpty_\n      shouldCallDelegate() throws {\n      toDoItemData.title = \"dummy title\"\n      apiClientMock.coordinateReturnValue =\n      Coordinate(latitude: 1, longitude: 2)\n      let delegateMock = ToDoItemInputViewDelegateMock()\n      sut.delegate = delegateMock\n\n      try sut.tapButtonWith(name: \"Save\")\n\n      XCTAssertEqual(delegateMock.lastToDoItemData?.title,\n        \"dummy title\")\n    }\n    ```", "```swift\n    // ToDoItemInputView.swift\n    func addToDoItem() {\n      if false == data.addressString.isEmpty {\n        apiClient.coordinate(\n          for: data.addressString,\n             completion: { coordinate in\n               self.delegate?.addToDoItem(\n                with: data,\n                coordinate: coordinate)\n             })\n      } else {\n        delegate?.addToDoItem(with: data,\n          coordinate: nil)\n      }\n    }\n    ```"]