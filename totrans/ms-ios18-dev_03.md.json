["```swift\n class UserData: <st c=\"2971\">ObservableObject</st> { <st c=\"2990\">@Published</st> var username = \"Avi Tsadok\"\n}\nstruct ContentView: View {\n <st c=\"3058\">@ObservedObject var userData = UserData()</st> var body: some View {\n        Text(\"Welcome, \\(userData.username)!\")\n            .padding()\n    }\n}\n```", "```swift\n class Book: <st c=\"5323\">ObservableObject</st> { <st c=\"5342\">@Published</st> var title:String = \"\" <st c=\"5375\">@Published</st> var author: String = \"\" <st c=\"5410\">@Published</st> var publishedYear: Date = Date() <st c=\"5454\">@Published</st> var numberOfPages: Int = 0\n}\n```", "```swift\n<st c=\"5779\">@Observable</st> class Book {\n    var title:String = \"\"\n    var author: String = \"\"\n    var publishedYear: Date = Date()\n    var numberOfPages: Int = 0\n}\n```", "```swift\n struct ContentView: View { <st c=\"6140\">var book:Book = Book()</st> var body: some View {\n        VStack {\n            Text(book.title)\n            Button(\"Change\") { <st c=\"6230\">book.title = \"Mastering iOS 17\"</st> }\n        }\n        .padding()\n    }\n}\n```", "```swift\n @Observable\nclass Book { <st c=\"6902\">@ObservationTracked</st> var title:String = \"\"\n <st c=\"6944\">@ObservationIgnored private var _title: String = \"\"</st>\n <st c=\"6995\">{</st>\n <st c=\"6997\">@storageRestrictions(initializes: _title)</st>\n <st c=\"7039\">init(initialValue) {</st>\n <st c=\"7060\">_title = initialValue</st>\n <st c=\"7082\">}</st>\n <st c=\"7084\">get {</st>\n <st c=\"7090\">access(keyPath: \\.title)</st>\n <st c=\"7115\">return _title</st>\n <st c=\"7129\">}</st>\n <st c=\"7131\">set {</st>\n <st c=\"7137\">withMutation(keyPath: \\.title) {</st>\n <st c=\"7170\">_title = newValue</st>\n <st c=\"7188\">}</st>\n <st c=\"7190\">}</st>\n <st c=\"7192\">}</st>\n <st c=\"7194\">@ObservationTracked</st> var author: String = \"\" <st c=\"7239\">@ObservationTracked</st> var publishedYear: Date = Date() <st c=\"7292\">@ObservationTracked</st> var numberOfPages: Int = 0 <st c=\"7339\">@ObservationIgnored private let _$observationRegistrar</st>\n <st c=\"7393\">= Observation.ObservationRegistrar()</st>\n <st c=\"7430\">internal nonisolated func access<Member>(</st>\n <st c=\"7472\">keyPath: KeyPath<Book , Member></st>\n <st c=\"7504\">) {</st>\n <st c=\"7508\">_$observationRegistrar.access(self, keyPath:</st>\n <st c=\"7553\">keyPath)</st>\n <st c=\"7562\">}</st>\n <st c=\"7564\">internal nonisolated func withMutation<Member,</st>\n <st c=\"7611\">MutationResult>(</st>\n <st c=\"7628\">keyPath: KeyPath<Book , Member>,</st>\n <st c=\"7661\">_ mutation: () throws -> MutationResult</st>\n <st c=\"7701\">) rethrows -> MutationResult {</st>\n <st c=\"7732\">try _$observationRegistrar.withMutation(of: self,</st>\n <st c=\"7782\">keyPath: keyPath, mutation)</st>\n <st c=\"7810\">}</st>\n<st c=\"7812\">}</st>\n<st c=\"7813\">extension Book: Observation.Observable {</st>\n<st c=\"7853\">}</st>\n```", "```swift\n @Observable\nclass Book {\n    var title:String = \"\"\n    var author: String = \"\"\n    var publishedYear: Date = Date()\n    var numberOfPages: Int = 0 <st c=\"10944\">@ObservationIgnored</st>\n <st c=\"10963\">var lastPageRead: Int = 0</st> }\n```", "```swift\n class Book: ObservableObject {\n    @Published var pages: Int = 0\n    @Published var averageWordsPerPage: Int = 0 <st c=\"12092\">@Published var totalWordsInBook: Int {</st>\n <st c=\"12130\">return pages * averageWordsPerPage</st>\n <st c=\"12165\">}</st> }\n```", "```swift\n @Observable\nclass MyBook {\n    var pages: Int = 0\n    var averageWordsPerPage: Int = 0\n    var totalWordsInBook: Int {\n        return pages * averageWordsPerPage\n    }\n}\n```", "```swift\n @Observable\nclass Book {\n    var title:String = \"\"\n    var pages: Int = 0\n    var averageWordsPerPage: Int = 0 <st c=\"14340\">var totalWordsInBook: Int {</st>\n <st c=\"14367\">return pages * averageWordsPerPage</st>\n <st c=\"14402\">}</st> }\nstruct ContentView: View {\n    var book:Book = Book()\n    var body: some View {\n        VStack {\n            Text(book.title)\n            Button(\"Change\") { <st c=\"14524\">book.averageWordsPerPage = 300</st>\n <st c=\"14554\">book.pages = 200</st>\n <st c=\"14571\">}</st>\n <st c=\"14573\">Text(\"number of pages in the book:</st>\n <st c=\"14608\">\\(book.totalWordsInBook)\")</st> .padding()\n    }\n}\n```", "```swift\n<st c=\"16675\">@Observable</st> class Themes {\n    var primaryColor: Color = .red\n}\n```", "```swift\n @main\nstruct BookApp: App { <st c=\"16976\">var themes: Themes = Themes()</st> var body: some Scene {\n        WindowGroup {\n            ContentView() <st c=\"17057\">.environment(themes)</st> }\n    }\n}\n```", "```swift\nstruct ContentView: View { <st c=\"17496\">@Environment(Themes.self) var themes</st> var book: Book = {\n      let book = Book()\n      book.title = \"Mastering iOS 17\"\n      return book\n  }()\n  var body: some View {\n    VStack {\n      Text(book.title)<st c=\"17665\">.foregroundStyle(themes.primaryColor)</st> }\n  }\n}\n```", "```swift\n struct ContentView: View {\n    var body: some View {\n        VStack {\n            MyTitle(text: \"Mastering iOS 17\")\n        }\n    }\n}\nstruct MyTitle: View { <st c=\"18255\">@Environment(Themes.self) var themes</st> let text: String\n    var body: some View {\n        Text(text).foregroundStyle(<st c=\"18358\">themes.primaryColor</st>)\n    }\n}\n```", "```swift\n struct ThemesKey: <st c=\"19660\">EnvironmentKey</st> {\n    static let defaultValue = Themes()\n}\nextension <st c=\"19724\">EnvironmentValues</st> {\n    var themes: Themes {\n        get { self[ThemesKey.self]}\n        set { self[ThemesKey.self] = newValue}\n    }\n}\n```", "```swift\n struct ContentView: View { <st c=\"20514\">@Environment(\\.themes) var themes</st> // rest of the view\n}\n```", "```swift\n ContentView() <st c=\"20696\">EnvironmentValues</st> struct, we extended the global variables container of our app. That’s the reason why we have access from any view.\n\t\t\t<st c=\"20828\">Other than accessing the values from any view, working with environment variable keys has several</st> <st c=\"20927\">additional advantages:</st>\n\n\t\t\t\t*   **<st c=\"20949\">Quickly replacing the variable type in the future</st>**<st c=\"20999\">: Unlike adding an environment value by type, we are not tied to a specific type when adding the variable by key.</st> <st c=\"21114\">We can easily replace the type itself in one place and not have to replace it in all views as long as we keep the</st> <st c=\"21228\">same interface.</st>\n\t\t\t\t*   **<st c=\"21243\">Great for testing</st>**<st c=\"21261\">: Another advantage of not being coupled to a specific type is the ability to create mocks and add</st> <st c=\"21361\">unit tests.</st>\n\t\t\t\t*   `<st c=\"21505\">get</st>` <st c=\"21508\">and</st> `<st c=\"21513\">set</st>` <st c=\"21516\">functions in the</st> `<st c=\"21534\">EnvironmentValues</st>` <st c=\"21551\">struct?</st> <st c=\"21560\">Now, we can customize them the way we</st> <st c=\"21598\">want to.</st>\n\n\t\t\t<st c=\"21606\">We can understand why environment keys are essential for big projects by looking at the list</st> <st c=\"21700\">of advantages.</st>\n\t\t\t<st c=\"21714\">No matter how we work with environment variables, they are crucial for a clean and simple SwiftUI code, especially when we combine them with</st> `<st c=\"21856\">@</st>``<st c=\"21857\">Observable</st>` <st c=\"21867\">objects.</st>\n\t\t\t<st c=\"21876\">By now, we already know how to create an observed object and inject it into child views using</st> <st c=\"21971\">environment variables.</st>\n\t\t\t<st c=\"21993\">Our next topic revolves</st> <st c=\"22017\">around the compatibility problem that the</st> *<st c=\"22060\">Observation</st>* <st c=\"22071\">framework created for us, specifically</st> <st c=\"22111\">reg</st><st c=\"22114\">arding binding.</st>\n\t\t\t<st c=\"22130\">Binding objects using @Bindable</st>\n\t\t\t<st c=\"22162\">Let’s start with a short recap of what</st> <st c=\"22202\">binding is.</st>\n\t\t\t<st c=\"22213\">In some cases, a view and its</st> <st c=\"22244\">child must share a state and create a two-way connection for reading and modifying a value.</st> <st c=\"22336\">To do that, we use</st> <st c=\"22354\">something</st> <st c=\"22365\">called</st> **<st c=\"22372\">binding</st>**<st c=\"22379\">.</st>\n\t\t\t<st c=\"22380\">One classic</st> <st c=\"22392\">example is</st> `<st c=\"22404\">TextField</st>` <st c=\"22413\">– a</st> `<st c=\"22418\">TextField</st>` <st c=\"22427\">view is a SwiftUI component with a</st> `<st c=\"22463\">text</st>` <st c=\"22467\">variable.</st> <st c=\"22478\">Both</st> `<st c=\"22483\">TextField</st>` <st c=\"22492\">and its parent view share the same value of text.</st> <st c=\"22543\">Therefore, it’s a</st> <st c=\"22561\">binding</st> <st c=\"22569\">variable:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"22706\">We see that the</st> `<st c=\"22723\">email</st>` <st c=\"22728\">variable is marked as a state, but the</st> `<st c=\"22768\">TextField</st>` <st c=\"22777\">view is the one that updates it.</st> <st c=\"22811\">The binding occurs using the</st> `<st c=\"22840\">$</st>` <st c=\"22841\">character.</st>\n\t\t\t<st c=\"22851\">We can create a binding variable ourselves using the</st> `<st c=\"22905\">@Binding</st>` <st c=\"22913\">proper</st><st c=\"22920\">ty wrapper:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"23193\">The</st> `<st c=\"23198\">count</st>` <st c=\"23203\">variable in the parent</st> <st c=\"23227\">view (</st>`<st c=\"23233\">ContentView</st>`<st c=\"23245\">) and the</st> `<st c=\"23256\">value</st>` <st c=\"23261\">variable in the child view (</st>`<st c=\"23290\">ContentView</st>`<st c=\"23302\">) share</st> <st c=\"23311\">the same state, and now we have a two-way connection</st> <st c=\"23364\">between them.</st>\n\t\t\t<st c=\"23377\">We can connect a binding variable to a</st> `<st c=\"23417\">@State</st>` <st c=\"23423\">property wrapper (such as in the example we just saw) or a</st> `<st c=\"23483\">@</st>``<st c=\"23484\">ObservedObject</st>` <st c=\"23498\">variable.</st>\n\t\t\t<st c=\"23508\">Can you guess what the problem is</st> <st c=\"23543\">with trying to create a binding connection using the</st> `<st c=\"23596\">Observation</st>` <st c=\"23607\">framework?</st>\n\t\t\t<st c=\"23618\">So, apparently, classes</st> <st c=\"23642\">that are marked with the</st> `<st c=\"23668\">@Observed</st>` <st c=\"23677\">macro are not eligible for</st> `<st c=\"23705\">@State</st>` <st c=\"23711\">or</st> `<st c=\"23715\">@ObservedObject</st>`<st c=\"23730\">, so we can’t use</st> `<st c=\"23748\">@Binding</st>` <st c=\"23756\">with them.</st>\n\t\t\t<st c=\"23767\">Fortunately, with the</st> *<st c=\"23790\">Observation</st>* <st c=\"23801\">framework, we have a new property wrapper</st> <st c=\"23844\">called</st> **<st c=\"23851\">@Bindable</st>**<st c=\"23860\">.</st>\n\t\t\t<st c=\"23861\">Let’s see a short</st> <st c=\"23880\">example of how to use</st> `<st c=\"23902\">@Bindable</st>` <st c=\"23911\">with a</st> <st c=\"23919\">counter object:</st>\n\n```", "```swift\n\n\t\t\t<st c=\"24224\">The code example has two views as before – a</st> `<st c=\"24270\">ContentView</st>` <st c=\"24281\">view and a child view named</st> `<st c=\"24310\">CounterView</st>`<st c=\"24321\">. The</st> `<st c=\"24327\">ContentView</st>` <st c=\"24338\">view has a variable called</st> `<st c=\"24366\">counter</st>` <st c=\"24373\">of the</st> `<st c=\"24381\">Counter</st>` <st c=\"24388\">type.</st> <st c=\"24395\">The</st> `<st c=\"24399\">Counter</st>` <st c=\"24406\">class is marked</st> <st c=\"24422\">with</st> `<st c=\"24428\">@Observed</st>`<st c=\"24437\">, so we don’t need to mark the property as</st> `<st c=\"24480\">@State</st>` <st c=\"24486\">or</st> `<st c=\"24490\">@ObservedObject</st>`<st c=\"24505\">.</st>\n\t\t\t<st c=\"24506\">In the</st> `<st c=\"24514\">CounterView</st>` <st c=\"24525\">structure, we</st> <st c=\"24540\">also have a counter from the same type, but it is marked with</st> `<st c=\"24602\">@Bindable</st>`<st c=\"24611\">. This means we need to bind it to an object with a</st> <st c=\"24663\">similar type.</st>\n\t\t\t<st c=\"24676\">The</st> `<st c=\"24681\">CounterView.counter</st>` <st c=\"24700\">and</st> `<st c=\"24705\">ContentView.counter</st>` <st c=\"24724\">variables are linked – whenever we change the value in the child view, it automatically reflects in the parent view.</st> <st c=\"24842\">Notice that with</st> `<st c=\"24859\">@Bindable,</st>` <st c=\"24869\">we don’t need to add any</st> `<st c=\"24895\">$</st>` <st c=\"24896\">signs to the variable expression.</st> <st c=\"24931\">Everything</st> <st c=\"24942\">just works.</st>\n\t\t\t<st c=\"24953\">Binding is a critical usage of SwiftUI – it stands at the heart of many input views such as text fields, toggles, sheets,</st> <st c=\"25076\">and more.</st>\n\t\t\t<st c=\"25085\">Working with the</st> `<st c=\"25103\">@Bindable</st>` <st c=\"25112\">macro can be confusing – we now have both</st> `<st c=\"25155\">@Binding</st>` <st c=\"25163\">and</st> `<st c=\"25168\">@Bindable</st>` <st c=\"25177\">at the same time!</st> `<st c=\"25196\">@Binding</st>` <st c=\"25204\">is used for states and observable objects and</st> `<st c=\"25251\">@Bindable</st>` <st c=\"25260\">is used for...</st> <st c=\"25276\">observed objects?</st>\n\t\t\t<st c=\"25293\">So yes, it feels like we are in a transition era.</st> <st c=\"25344\">The good news is that we can solve the issue easily by migrating our project</st> <st c=\"25421\">to</st> *<st c=\"25424\">Observable</st>*<st c=\"25434\">.</st>\n\t\t\t<st c=\"25435\">Migrating to Observable</st>\n\t\t\t<st c=\"25459\">Before migrating to</st> *<st c=\"25480\">Observable</st>*<st c=\"25490\">, we must ensure that our app deployment target is at least 17\\.</st> <st c=\"25554\">Remember that this</st> <st c=\"25573\">feature (and most of the new features described in this book) are from iOS 17, and some are irrelevant if our app deployment target is</st> <st c=\"25708\">not 17.</st>\n\t\t\t<st c=\"25715\">Let’s try to recap the different</st> <st c=\"25749\">Observable attributes:</st>\n\n\t\t\t\t*   `<st c=\"25771\">@State</st>`<st c=\"25778\">: This is used to manage the state within a specific view.</st> <st c=\"25838\">A change to a</st> `<st c=\"25852\">@State</st>` <st c=\"25858\">property triggers a view update.</st> <st c=\"25892\">For example, data related to a list or view visibility can be marked</st> <st c=\"25961\">as</st> `<st c=\"25964\">@State</st>`<st c=\"25970\">.</st>\n\t\t\t\t*   `<st c=\"25971\">@Observable</st>`<st c=\"25983\">: This can</st> <st c=\"25995\">be applied to a class to make the class observable.</st> <st c=\"26047\">Each class property is automatically marked with</st> `<st c=\"26096\">@Published</st>` <st c=\"26106\">unless we mark them as</st> `<st c=\"26130\">@ObservataionIgnored</st>`<st c=\"26150\">.</st> `<st c=\"26152\">@Observable</st>` <st c=\"26163\">can be added to view models or business</st> <st c=\"26204\">logic classes.</st>\n\t\t\t\t*   `<st c=\"26218\">@Bindable</st>`<st c=\"26228\">: This creates a two-way connection between a property and another value.</st> <st c=\"26303\">Text field input, toggles, or a counter are examples of views for implementing a</st> `<st c=\"26384\">@</st>``<st c=\"26385\">Bindable</st>` <st c=\"26393\">connection.</st>\n\t\t\t\t*   `<st c=\"26405\">@Environment</st>`<st c=\"26418\">: Mark an object to be shared down the view hierarchy with this attribute.</st> <st c=\"26494\">For example, configuration or a theme can be shared with all views in the hierarchy using the</st> `<st c=\"26588\">@</st>``<st c=\"26589\">Environemnt</st>` <st c=\"26600\">attribute.</st>\n\n\t\t\t<st c=\"26611\">This list aims to summarize the different attributes in the Observable framework and their</st> <st c=\"26703\">use cases.</st>\n\t\t\t<st c=\"26713\">Once we decide to move to the</st> *<st c=\"26744\">Observable</st>* <st c=\"26754\">framework, there are a few things we need</st> <st c=\"26797\">to do:</st>\n\n\t\t\t\t*   <st c=\"26803\">Remove the pro</st><st c=\"26818\">tocol conformation to</st> `<st c=\"26841\">ObservableObject</st>` <st c=\"26857\">and add the</st> `<st c=\"26870\">@Observable</st>` <st c=\"26881\">macro for all the</st> <st c=\"26900\">relevant classes</st>\n\t\t\t\t*   <st c=\"26916\">Remove the</st> `<st c=\"26928\">@Published</st>` <st c=\"26938\">property wrapper and add</st> `<st c=\"26964\">@ObservationIgnored</st>` <st c=\"26983\">for the properties we don’t want</st> <st c=\"27017\">to observe</st>\n\t\t\t\t*   <st c=\"27027\">Remove the</st> `<st c=\"27039\">@ObservedObject</st>` <st c=\"27054\">property wrapper</st>\n\t\t\t\t*   <st c=\"27071\">Rename</st> `<st c=\"27079\">@Binding</st>` <st c=\"27087\">to</st> `<st c=\"27091\">@Bindable</st>` <st c=\"27100\">for the properties that are based</st> <st c=\"27135\">on classes</st>\n\n\t\t\t<st c=\"27145\">Once we finish migrating to the</st> `<st c=\"27178\">Observable</st>` <st c=\"27188\">framework, things will be clearer and more straightforward, with fewer property wrappers and less protocol conformation.</st> <st c=\"27310\">The binding can also be simple – now it’s</st> `<st c=\"27352\">@Binding</st>` <st c=\"27360\">for primitive values and</st> `<st c=\"27386\">@Bindable</st>` <st c=\"27395\">for classes.</st> <st c=\"27409\">That’s not perfect, but not too bad either.</st> <st c=\"27453\">It’s time to</st> <st c=\"27466\">enjoy</st> *<st c=\"27472\">Observable</st>*<st c=\"27482\">!</st>\n\t\t\t<st c=\"27483\">Summary</st>\n\t\t\t<st c=\"27490\">This was another chapter that made use of Swift macros and other advanced Swift techniques.</st> <st c=\"27583\">A small note: to understand topics such as</st> *<st c=\"27626\">Observable</st>*<st c=\"27636\">, I recommend having good knowledge of Swift.</st> <st c=\"27682\">Otherwise, it becomes just another boring tutorial.</st> <st c=\"27734\">Knowing how things work on the inside is fascinating and can only make</st> <st c=\"27805\">us better.</st>\n\t\t\t<st c=\"27815\">In this chapter, we did a recap of the SwiftUI observation system, and we discussed its problem.</st> <st c=\"27913\">We added the</st> `<st c=\"27926\">@Observable</st>` <st c=\"27937\">macro and explored how it works.</st> <st c=\"27971\">We talked about computed variables, environment variables, and bindable.</st> <st c=\"28044\">Ultimately, we discussed migrating from the “old” observation system to the new</st> *<st c=\"28124\">Observable</st>* <st c=\"28134\">framework.</st>\n\t\t\t<st c=\"28145\">Remember – observation is a core feature of SwiftUI and is crucial to delivering a superior experience to</st> <st c=\"28252\">our users.</st>\n\t\t\t<st c=\"28262\">In the next chapter, we will learn about another critical feature, especially in mobile – navigation</st> <st c=\"28364\">and search.</st>\n\n```"]