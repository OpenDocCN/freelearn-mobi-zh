["```swift\n// ToDoItemDetailsViewControllerTests.swift\nimport XCTest\n@testable import ToDo \nclass ToDoItemDetailsViewControllerTests: XCTestCase { \n  override func setUpWithError() throws {\n  } \n  override func tearDownWithError() throws {\n  }\n}\n```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    var sut: ToDoItemDetailsViewController!\n    ```", "```swift\n// ToDoItemDetailsViewControllerTests.swift\noverride func setUpWithError() throws {\n  let storyboard = UIStoryboard(name: \"Main\", bundle:\n    nil)\n  sut = (storyboard.instantiateViewController(\n    withIdentifier: \"ToDoItemDetailsViewController\")\n    as! ToDoItemDetailsViewController)\n  sut.loadViewIfNeeded()\n}\noverride func tearDownWithError() throws {\n  sut = nil\n}\n```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_view_shouldHaveTitleLabel() throws {\n      let subview = try XCTUnwrap(sut.titleLabel)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    class ToDoItemDetailsViewController: UIViewController { \n      @IBOutlet var titleLabel: UILabel!\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_view_shouldHaveTitleLabel() throws {\n      let subview = try XCTUnwrap(sut.titleLabel)\n      XCTAssertTrue(subview.isDescendant(of: sut.view))\n    }\n    ```", "```swift\n// ToDoItemDetailsViewControllerTests.swift\nfunc test_view_shouldHaveDateLabel() throws {\n  let subview = try XCTUnwrap(sut.dateLabel)\n  XCTAssertTrue(subview.isDescendant(of: sut.view))\n}\nfunc test_view_shouldHaveLocationLabel() throws {\n  let subview = try XCTUnwrap(sut.locationLabel)\n  XCTAssertTrue(subview.isDescendant(of: sut.view))\n}\nfunc test_view_shouldHaveDescriptionLabel() throws {\n  let subview = try XCTUnwrap(sut.descriptionLabel)\n  XCTAssertTrue(subview.isDescendant(of: sut.view))\n}\n```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_view_shouldHaveMapView() throws {\n      let subview = try XCTUnwrap(sut.mapView)\n      XCTAssertTrue(subview.isDescendant(of: sut.view))\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    import UIKit\n    import MapKit\n\n    class ToDoItemDetailsViewController: UIViewController {\n      @IBOutlet var titleLabel: UILabel!\n      @IBOutlet var dateLabel: UILabel!\n      @IBOutlet var locationLabel: UILabel!\n      @IBOutlet var descriptionLabel: UILabel!\n      @IBOutlet var mapView: MKMapView!\n    }\n    ```", "```swift\n// ToDoItemDetailsViewControllerTests.swift\nfunc test_view_shouldHaveDoneButton() throws {\n  let subview = try XCTUnwrap(sut.doneButton)\n  XCTAssertTrue(subview.isDescendant(of: sut.view))\n}\n```", "```swift\n    // TodoItemDetailsViewControllerTests.swift\n    func test_settingToDoItem_shouldUpdateTitleLabel() {\n      let title = \"dummy title\"\n      let toDoItem = ToDoItem(title: title)\n      sut.toDoItem = toDoItem\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    class ToDoItemDetailsViewController: UIViewController {\n      @IBOutlet var titleLabel: UILabel!\n      @IBOutlet var dateLabel: UILabel!\n      @IBOutlet var locationLabel: UILabel!\n      @IBOutlet var descriptionLabel: UILabel!\n      @IBOutlet var mapView: MKMapView!\n      @IBOutlet var doneButton: UIButton!\n      var toDoItem: ToDoItem?\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_settingToDoItem_shouldUpdateTitleLabel() {\n      let title = \"dummy title\"\n      let toDoItem = ToDoItem(title: title) \n      sut.toDoItem = toDoItem  \n      XCTAssertEqual(sut.titleLabel.text, title)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    var toDoItem: ToDoItem? {\n      didSet {\n        titleLabel.text = toDoItem?.title\n      }\n    }\n    ```", "```swift\n// ToDoItemDetailsViewControllerTests.swift\nfunc test_settingToDoItem_shouldUpdateDateLabel() {\n  let date = Date()\n  let toDoItem = ToDoItem(\n    title: \"dummy title\",\n    timestamp: date.timeIntervalSince1970)\n\n  sut.toDoItem = toDoItem\n\n  XCTAssertEqual(sut.dateLabel.text,\n                 sut.dateFormatter.string(from: date))\n}\nfunc test_settingToDoItem_shouldUpdateDescriptionLabel() {\n  let description = \"dummy discription\"\n  let toDoItem = ToDoItem(\n    title: \"dummy title\",\n    itemDescription: description)\n\n  sut.toDoItem = toDoItem\n\n  XCTAssertEqual(sut.descriptionLabel.text, description)\n}\nfunc test_settingToDoItem_shouldUpdateLocationLabel() {\n  let location = \"dummy location\"\n  let toDoItem = ToDoItem(\n    title: \"dummy title\",\n    location: Location(name: location))\n\n  sut.toDoItem = toDoItem\n\n  XCTAssertEqual(sut.locationLabel.text, location)\n}\n```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_settingToDoItem_shouldUpdateMapView() {\n      let latitude = 51.225556\n      let longitude = 6.782778\n      let toDoItem = ToDoItem(\n        title: \"dummy title\",\n        location: Location(\n          name: \"dummy location\",\n          coordinate: Coordinate(latitude: latitude,\n            longitude: longitude)))\n\n      sut.toDoItem = toDoItem\n\n      let center = sut.mapView.centerCoordinate\n      XCTAssertEqual(center.latitude,\n        latitude,\n        accuracy: 0.000_01)\n      XCTAssertEqual(center.longitude,\n        longitude,\n        accuracy: 0.000_01)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    if let coordinate = toDoItem?.location?.coordinate {\n      mapView.setCenter(\n        CLLocationCoordinate2D(\n          latitude: coordinate.latitude,\n          longitude: coordinate.longitude),\n        animated: false)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_settingToDoItem_shouldUpdateButtonState() {\n      var toDoItem = ToDoItem(title: \"dummy title\")\n      toDoItem.done = true\n\n      sut.toDoItem = toDoItem\n\n      XCTAssertFalse(sut.doneButton.isEnabled)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    doneButton.isEnabled = false\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_settingToDoItem_whenItemNotDone_\n     shouldUpdateButtonState() {\n      let toDoItem = ToDoItem(title: \"dummy title\")\n\n      sut.toDoItem = toDoItem\n\n      XCTAssertTrue(sut.doneButton.isEnabled)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    doneButton.isEnabled = (toDoItem?.done == false)\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTest.swift\n    func test_sendingButtonAction_shouldCheckItem() {\n      let toDoItem = ToDoItem(title: \"dummy title\")\n      sut.toDoItem = toDoItem\n      let storeMock = ToDoItemStoreProtocolMock()\n      sut.toDoItemStore = storeMock\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    var toDoItemStore: ToDoItemStoreProtocol?\n    ```", "```swift\n    // ToDoItemDetailsViewControllerTests.swift\n    func test_sendingButtonAction_shouldCheckItem() {\n      let toDoItem = ToDoItem(title: \"dummy title\")\n      sut.toDoItem = toDoItem\n      let storeMock = ToDoItemStoreProtocolMock()\n      sut.toDoItemStore = storeMock\n\n      sut.doneButton.sendActions(for: .touchUpInside)\n\n      XCTAssertEqual(storeMock.checkLastCallArgument,\n        toDoItem)\n    }\n    ```", "```swift\n    // ToDoItemDetailsViewController.swift\n    @IBAction func checkItem(_ sender: UIButton) {\n      if let toDoItem = toDoItem {\n        toDoItemStore?.check(toDoItem)\n      }\n    }\n    ```"]