["```swift\n        implementation \"androidx.lifecycle:\n        lifecycle-viewmodel-ktx:2.5.1\"\n    ```", "```swift\n        <string name=\"press_me\">Press Me</string>\n        <string name=\"total\">Total %d</string>\n    ```", "```swift\n    class SplitFragmentOne : Fragment() {\n        override fun onCreateView(\n            inflater: LayoutInflater,\n            container: ViewGroup?,\n            savedInstanceState: Bundle?\n        ): View? {\n            return inflater.inflate(\n            R.layout.fragment_split_one, container, false)\n        }\n        override fun onViewCreated(view: View,\n            savedInstanceState: Bundle?) {\n            super.onViewCreated(view, savedInstanceState)\n            view.findViewById<TextView>\n                (R.id.fragment_split_one_text_view)\n                    .text = getString(R.string.total, 0)\n        }\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\n        \"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"center\"\n        android:orientation=\"vertical\">\n        <TextView\n            android:id=\"@+id/fragment_split_one_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n        <Button\n            android:id=\"@+id/fragment_split_one_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/press_me\" />\n    </LinearLayout>\n    ```", "```swift\n    class SplitFragmentTwo : Fragment() {\n        override fun onCreateView(\n            inflater: LayoutInflater,\n            container: ViewGroup?,\n            savedInstanceState: Bundle?\n        ): View? {\n            Return inflater.inflate(\n            R.layout.fragment_split_two, container, false)\n        }\n        override fun onViewCreated(view: View,\n            savedInstanceState: Bundle?) {\n            super.onViewCreated(view, savedInstanceState)\n            view.findViewById<TextView> (\n            R.id.fragment_split_two_text_view).text =\n            getString(R.string.total, 0)\n        }\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android =\n        \"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:gravity=\"center\"\n        android:orientation=\"vertical\">\n        <TextView\n            android:id=\"@+id/fragment_split_two_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n    </LinearLayout>\n    ```", "```swift\n    class SplitActivity : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?)\n        {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_split)\n        }\n    }\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout>\n        <androidx.fragment.app.FragmentContainerView\n            android:id=\"@+id/activity_fragment_split_1\"\n            android:name=\"{package.path}.SplitFragmentOne\"\n            android:layout_width=\"match_parent\"\n            />\n        <androidx.fragment.app.FragmentContainerView\n            android:id=\"@+id/activity_fragment_split_2\"\n            android:name=\"{package.path}.SplitFragmentTwo\"\n            android:layout_width=\"match_parent\"\n            />\n    </LinearLayout>\n    ```", "```swift\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout>\n        <androidx.fragment.app.FragmentContainerView\n            android:id=\"@+id/activity_fragment_split_1\"\n            android:name=\"{package.path}.SplitFragmentOne\"\n            />\n        <androidx.fragment.app.FragmentContainerView\n            android:id=\"@+id/activity_fragment_split_2\"\n            android:name=\"{package.path}.SplitFragmentTwo\"\n            />\n    </LinearLayout>\n    ```", "```swift\n    class TotalsViewModel : ViewModel() {\n        var total = 0\n        fun increaseTotal(): Int {\n            total++\n            return total\n        }\n    }\n    ```", "```swift\n    class SplitFragmentOne : Fragment() {\n        …\n        override fun onViewCreated(view: View,\n        savedInstanceState: Bundle?) {\n            …\n            prepareViewModel()\n        }\n        private fun prepareViewModel() {\n    }\n        private fun updateText(total: Int) {\n            view?.findViewById<TextView>\n            (R.id.fragment_split_one_text_view)?.text =\n            getString(R.string.total, total)\n        }\n    }\n    ```", "```swift\n    private fun prepareViewModel() {\n        val totalsViewModel = ViewModelProvider(this)\n            .get(TotalsViewModel::class.java)\n    }\n    ```", "```swift\n    private fun prepareViewModel() {\n        val totalsViewModel = ViewModelProvider(this)\n            .get(TotalsViewModel::class.java)\n        updateText(totalsViewModel.total)\n    }\n    ```", "```swift\n    private fun prepareViewModel() {\n        val totalsViewModel =\n            ViewModelProvider(this)\n                .get(TotalsViewModel::class.java)\n        updateText(totalsViewModel.total)\n        view?.findViewById<Button>\n        (R.id.fragment_split_one_button)\n        ?.setOnClickListener {\n            updateText(totalsViewModel.increaseTotal())\n        }\n    }\n    ```", "```swift\n    class SplitFragmentTwo : Fragment() {\n        override fun onCreateView(\n            inflater: LayoutInflater,\n            container: ViewGroup?,\n            savedInstanceState: Bundle?\n        ): View? {\n            return inflater.inflate(\n            R.layout.fragment_split_two, container, false)\n        }\n        override fun onViewCreated(view: View,\n        savedInstanceState: Bundle?) {\n            super.onViewCreated(view, savedInstanceState)\n            val totalsViewModel = ViewModelProvider(this)\n                .get(TotalsViewModel::class.java)\n            updateText(totalsViewModel.total)\n        }\n        private fun updateText(total: Int) {\n            view?.findViewById<TextView> (\n            R.id. fragment_split_two_text_view)?.text =\n            getString(R.string.total, total)\n        }\n    }\n    ```", "```swift\n    val totalsViewModel = ViewModelProvider(this).get(TotalsViewModel::class.java)\n    ```", "```swift\nval totalsViewModel = ViewModelProvider(requireActivity()) .get(TotalsViewModel::class.java)\n```", "```swift\n    implementation \"androidx.lifecycle:\n    lifecycle-livedata-ktx:2.5.1\"\n    ```", "```swift\n    class TotalsViewModel : ViewModel() {\n        private val _total = MutableLiveData<Int>()\n        val total: LiveData<Int> = _total\n        init {\n            _total.postValue(0)\n        }\n        fun increaseTotal() {\n            _total.postValue((_total.value ?: 0) + 1)\n        }\n    }\n    ```", "```swift\n        override fun onViewCreated(view: View,\n        savedInstanceState: Bundle?) {\n            super.onViewCreated(view, savedInstanceState)\n                val totalsViewModel =\n                 ViewModelProvider(requireActivity())\n                     .get(TotalsViewModel::class.java)\n            totalsViewModel.total.observe(\n            viewLifecycleOwner, {\n                updateText(it)\n            })\n            view.findViewById<Button>(\n            R.id.fragment_split_one_button)\n            .setOnClickListener {\n                totalsViewModel.increaseTotal()\n            }\n        }\n    ```", "```swift\n        override fun onViewCreated(view: View,\n            savedInstanceState: Bundle?) {\n            super.onViewCreated(view, savedInstanceState)\n            val totalsViewModel =\n                ViewModelProvider(requireActivity())\n                    .get(TotalsViewModel::class.java)\n            totalsViewModel.total.observe(\n            viewLifecycleOwner, {\n                updateText(it)\n            })\n        }\n    ```", "```swift\n    class TotalsViewModelTest {\n        private lateinit var totalsViewModel:\n            TotalsViewModel\n        @Before\n        fun setUp() {\n            totalsViewModel = TotalsViewModel()\n            assertEquals(0, totalsViewModel.total.value)\n        }\n        @Test\n        fun increaseTotal() {\n            val total = 5\n            for (i in 0 until total) {\n                totalsViewModel.increaseTotal()\n            }\n            assertEquals(4, totalsViewModel.total.value)\n        }\n    }\n    ```", "```swift\n    java.lang.RuntimeException: Method getMainLooper in\n    android.os.Looper not mocked.\n    ```", "```swift\n    testImplementation \"androidx.arch.core:\n    core-testing:2.1.0\"\n    ```", "```swift\n    class TotalsViewModelTest {\n        @get:Rule\n        val rule = InstantTaskExecutorRule()\n        private val totalsViewModel = TotalsViewModel()\n    ```", "```swift\njava.lang.RuntimeException: Method getMainLooper in\nandroid.os.Looper not mocked\n```", "```swift\n    init {\n             total.postValue(0)\n    }\n    ```", "```swift\n    @get:Rule\n    val rule = InstantTaskExecutorRule()\n    private lateinit var totalsViewModel: TotalsViewModel\n    @Before\n    fun setUp() {\n        totalsViewModel = TotalsViewModel()\n        assertEquals(0, totalsViewModel.total.value)\n    }\n    ```", "```swift\n    java.lang.AssertionError:\n    Expected :4\n    Actual :5\n    ```", "```swift\nclass TotalsViewModel : ViewModel() {\n    private val _total = MutableStateFlow(0)\n    val total: StateFlow<Int> = _total\n    fun increaseTotal() {\n        _total.value = _total.value + 1\n    }\n}\n```", "```swift\n        val totalsViewModel =\n            ViewModelProvider(requireActivity())\n                .get(TotalsViewModel::class.java)\n        viewLifecycleOwner.lifecycleScope.launch {\n            repeatOnLifecycle(Lifecycle.State.CREATED) {\n                totalsViewModel.total.collect {\n                    updateText(it)\n                }\n            }\n        }\n```", "```swift\nclass TotalsViewModel : ViewModel() {\n    private val _total = BehaviorSubject.createDefault(0)\n    val total: Observable<Int> = _total\n    fun increaseTotal() {\n        _total.onNext(_total.blockingLast())\n    }\n}\n```", "```swift\n    private var disposable: Disposable? = null\n    override fun onViewCreated(view: View,\n    savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val totalsViewModel =\n            ViewModelProvider(requireActivity())\n                .get(TotalsViewModel::class.java)\n        disposable = totalsViewModel.total.subscribe {\n            updateText(it)\n        }\n    }\n    override fun onDestroyView() {\n        disposable?.dispose()\n        super.onDestroyView()\n    }\n```", "```swift\n@Entity(tableName = \"messages\")\ndata class Message(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name =\n        \"message_id\") val id: Long,\n    @ColumnInfo(name = \"text\", defaultValue = \"\") val text:\n        String,\n    @ColumnInfo(name = \"time\") val time: Long,\n    @ColumnInfo(name = \"user\") val userId: Long,\n)\n@Entity(tableName = \"users\")\ndata class User(\n    @PrimaryKey @ColumnInfo(name = \"user_id\") val id: Long,\n    @ColumnInfo(name = \"first_name\") val firstName: String,\n    @ColumnInfo(name = \"last_name\") val lastName: String,\n    @ColumnInfo(name = \"last_online\") val lastOnline: Long\n)\n```", "```swift\n@Entity(tableName = \"messages\", primaryKeys = [\"id\",\n\"time\"])\n```", "```swift\n@Entity(tableName = \"messages\")\ndata class Message(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name =\n        \"message_id\") val id: Long,\n    @ColumnInfo(name = \"text\", defaultValue = \"\") val text:\n        String,\n    @ColumnInfo(name = \"time\") val time: Long,\n    @ColumnInfo(name = \"user\") val userId: Long,\n    @Embedded val location: Location?\n)\ndata class Location(\n    @ColumnInfo(name = \"lat\") val lat: Double,\n    @ColumnInfo(name = \"long\") val log: Double,\n    @ColumnInfo(name = \"location_name\") val name: String\n)\n```", "```swift\n@Entity(\n    tableName = \"messages\",\n    foreignKeys = [ForeignKey(\n        entity = User::class,\n        parentColumns = [\"user_id\"],\n        childColumns = [\"user\"],\n        onDelete = ForeignKey.CASCADE\n    )]\n)\ndata class Message(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name =\n        \"message_id\") val id: Long,\n    @ColumnInfo(name = \"text\", defaultValue = \"\") val text:\n        String,\n    @ColumnInfo(name = \"time\") val time: Long,\n    @ColumnInfo(name = \"user\") val userId: Long,\n    @Embedded val location: Location?\n)\n```", "```swift\n@Dao\ninterface MessageDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertMessages(vararg messages: Message)\n    @Update\n    fun updateMessages(vararg messages: Message)\n    @Delete\n    fun deleteMessages(vararg messages: Message)\n    @Query(\"SELECT * FROM messages\")\n    fun loadAllMessages(): List<Message>\n    @Query(\"SELECT * FROM messages WHERE user=:userId AND\n        time>=:time\")\n    fun loadMessagesFromUserAfterTime(userId: String, time:\n        Long): List<Message>\n}\n@Dao\ninterface UserDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(user: User)\n    @Update\n    fun updateUser(user: User)\n    @Delete\n    fun deleteUser(user: User)\n    @Query(\"SELECT * FROM users\")\n    fun loadAllUsers(): List<User>\n}\n```", "```swift\n@Query(\"SELECT * FROM messages WHERE user IN (:userIds) AND time>=:time\")\nfun loadMessagesFromUserAfterTime(userIds: List<String>, time: Long): List<Message>\n```", "```swift\ndata class TextWithTime(\n    @ColumnInfo(name = \"text\") val text: String,\n    @ColumnInfo(name = \"time\") val time: Long\n)\n```", "```swift\n@Query(\"SELECT text,time FROM messages\")\nfun loadTextsAndTimes(): List<TextWithTime>\n```", "```swift\ndata class MessageWithUser(\n    @Embedded val message: Message,\n    @Embedded val user: User\n)\n```", "```swift\n@Query(\"SELECT * FROM messages INNER JOIN users on users.user_id=messages.user\")\nfun loadMessagesAndUsers(): List<MessageWithUser>\n```", "```swift\n@Database(entities = [User::class, Message::class],\nversion = 1)\nabstract class ChatDatabase : RoomDatabase() {\n    companion object {\n        private lateinit var chatDatabase: ChatDatabase\n        fun getDatabase(applicationContext: Context):\n        ChatDatabase {\n            if (!(::chatDatabase.isInitialized)) {\n                chatDatabase =\n                    Room.databaseBuilder(applicationContext\n                    , chatDatabase::class.java, \"chat-db\")\n                    .build()\n            }\n            return chatDatabase\n        }\n    }\n    abstract fun userDao(): UserDao\n    abstract fun messageDao(): MessageDao\n}\n```", "```swift\ndata class Message(\n    @PrimaryKey(autoGenerate = true) @ColumnInfo(name =\n        \"message_id\") val id: Long,\n    @ColumnInfo(name = \"text\", defaultValue = \"\") val text:\n        String,\n    @ColumnInfo(name = \"time\") val time: Long,\n    @ColumnInfo(name = \"user\") val userId: Long,\n    @ColumnInfo(name = \"status\") val status: Int,\n    @Embedded val location: Location?\n)\n```", "```swift\nDatabase(entities = [User::class, Message::class],\nversion = 2)\nabstract class ChatDatabase : RoomDatabase() {\n    companion object {\n        private lateinit var chatDatabase: ChatDatabase\n        private val MIGRATION_1_2 = object : Migration(1,\n        2) {\n            override fun migrate(database:\n            SupportSQLiteDatabase) {\n                database.execSQL(\"ALTER TABLE messages ADD\n                    COLUMN status INTEGER\")\n            }\n        }\n        fun getDatabase(applicationContext: Context):\n        ChatDatabase {\n            if (!(::chatDatabase.isInitialized)) {\n                chatDatabase =\n                   Room.databaseBuilder(applicationContext,\n                   chatDatabase::class.java, \"chat-db\")\n                   .addMigrations(MIGRATION_1_2)\n                   .build()\n            }\n            return chatDatabase\n        }\n    }\n    abstract fun userDao(): UserDao\n    abstract fun messageDao(): MessageDao\n}\n```", "```swift\ndata class User(\n    @PrimaryKey @ColumnInfo(name = \"user_id\") val id: Long,\n    @ColumnInfo(name = \"first_name\") val firstName: String,\n    @ColumnInfo(name = \"last_name\") val lastName: String,\n    @ColumnInfo(name = \"last_online\") val lastOnline: Date\n)\n```", "```swift\nclass DateConverter {\n    @TypeConverter\n    fun from(value: Long?): Date? {\n        return value?.let { Date(it) }\n    }\n    @TypeConverter\n    fun to(date: Date?): Long? {\n        return date?.time\n    }\n}\n```", "```swift\n@Database(entities = [User::class, Message::class],\nversion = 2)\n@TypeConverters(DateConverter::class)\nabstract class ChatDatabase : RoomDatabase() {\n```", "```swift\n    @Query(\"SELECT * FROM users\")\n    fun loadAllUsers(): LiveData<List<User>>\n```", "```swift\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertUser(user: User)\n    @Update\n    suspend fun updateUser(user: User)\n    @Delete\n    suspend fun deleteUser(user: User)\n```", "```swift\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(user: User) : Completable\n    @Update\n    fun updateUser(user: User) : Completable\n    @Delete\n    fun deleteUser(user: User) : Completable\n    @Query(\"SELECT * FROM users\")\n    fun loadAllUsers(): Flowable<List<User>>\n```", "```swift\n    @Query(\"SELECT * FROM users\")\n    fun loadAllUsers(): List<User>\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertUser(user: User)\n    @Update\n    fun updateUser(user: User)\n    @Delete\n    fun deleteUser(user: User)\n```", "```swift\n    fun getUsers(usersCallback:()->List<User>){\n        Thread(Runnable {\n            usersCallback.invoke(userDao.loadUsers())\n        }).start()\n    }\n```", "```swift\n    private val executor:Executor =\n        Executors.newSingleThreadExecutor()\n    fun getUsers(usersCallback:(List<User>)->Unit){\n        executor.execute {\n            usersCallback.invoke(userDao.loadUsers())\n        }\n    }\n```", "```swift\n    plugins {\n        …\n        id 'kotlin-kapt'\n    }\n    ```", "```swift\n    def room_version = \"2.2.5\"\n    implementation \"androidx.room:\n        room-runtime:$room_version\"\n    kapt \"androidx.room:room-compiler:$room_version\"\n    ```", "```swift\n    @Entity(tableName = \"article\")\n    data class Article(\n        @PrimaryKey(autoGenerate = true) @ColumnInfo(\n            name = \"id\") val id: Long = 0,\n        @ColumnInfo(name = \"title\") val title: String,\n        @ColumnInfo(name = \"content\") val content: String,\n        @ColumnInfo(name = \"time\") val time: Long\n    )\n    @Entity(tableName = \"journalist\")\n    data class Journalist(\n        @PrimaryKey(autoGenerate = true) @ColumnInfo(name\n            = \"id\") val id: Long = 0,\n        @ColumnInfo(name = \"first_name\") val firstName:\n            String,\n        @ColumnInfo(name = \"last_name\") val lastName:\n            String,\n        @ColumnInfo(name = \"job_title\") val jobTitle:\n            String\n    )\n    ```", "```swift\n    @Entity(\n        tableName = \"joined_article_journalist\",\n        primaryKeys = [\"article_id\", \"journalist_id\"],\n        foreignKeys = [ForeignKey(\n            entity = Article::class,\n            parentColumns = arrayOf(\"id\"),\n            childColumns = arrayOf(\"article_id\"),\n            onDelete = ForeignKey.CASCADE\n        ), ForeignKey(\n            entity = Journalist::class,\n            parentColumns = arrayOf(\"id\"),\n            childColumns = arrayOf(\"journalist_id\"),\n            onDelete = ForeignKey.CASCADE\n        )]\n    )\n    data class JoinedArticleJournalist(\n        @ColumnInfo(name = \"article_id\") val articleId:\n            Long,\n        @ColumnInfo(name = \"journalist_id\") val\n            journalistId: Long\n    )\n    ```", "```swift\n    @Dao\n    interface ArticleDao {\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        fun insertArticle(article: Article)\n        @Update\n        fun updateArticle(article: Article)\n        @Delete\n        fun deleteArticle(article: Article)\n        @Query(\"SELECT * FROM article\")\n        fun loadAllArticles(): List<Article>\n        @Query(\"SELECT * FROM article INNER JOIN\n                joined_article_journalist ON\n                article.id=joined_article_journalist\n                .article_id WHERE\n                joined_article_journalist.journalist_id=\n                :journalistId\")\n        fun loadArticlesForAuthor(journalistId: Long):\n            List<Article>\n    }\n    ```", "```swift\n    @Dao\n    interface JournalistDao {\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        fun insertJournalist(journalist: Journalist)\n        @Update\n        fun updateJournalist(journalist: Journalist)\n        @Delete\n        fun deleteJournalist(journalist: Journalist)\n        @Query(\"SELECT * FROM journalist\")\n        fun loadAllJournalists(): List<Journalist>\n        @Query(\"SELECT * FROM journalist INNER JOIN\n                joined_article_journalist ON\n                journalist.id=joined_article_journalist\n                .journalist_id WHERE\n                joined_article_journalist.article_id=\n                :articleId\")\n        fun getAuthorsForArticle(articleId: Long):\n            List<Journalist>\n    }\n    ```", "```swift\n    @Dao\n    interface JoinedArticleJournalistDao {\n        @Insert(onConflict = OnConflictStrategy.REPLACE)\n        fun insertArticleJournalist(\n          joinedArticleJournalist: JoinedArticleJournalist\n        )\n        @Delete\n        Fun deleteArticleJournalist(\n          joinedArticleJournalist: JoinedArticleJournalist\n        )\n    }\n    ```", "```swift\n    @Database(\n        entities = [Article::class, Journalist::class,\n            JoinedArticleJournalist::class],\n        version = 1\n    )\n    abstract class NewsDatabase : RoomDatabase() {\n        abstract fun articleDao(): ArticleDao\n        abstract fun journalistDao(): JournalistDao\n        abstract fun joinedArticleJournalistDao():\n            JoinedArticleJournalistDao\n    }\n    ```", "```swift\n    @RunWith(AndroidJUnit4::class)\n    class NewsDatabaseTest {\n        @Test\n        fun updateArticle() {\n            val article = articleDao.loadAllArticles()[0]\n            articleDao.updateArticle(article.copy(title = \n                \"new title\"))\n            assertEquals(\"new title\", articleDao.\n                loadAllArticles()[0].title)\n        }\n        @Test\n        fun updateJournalist() {\n            val journalist = journalistDao.\n                loadAllJournalists()[0] journalistDao.\n                updateJournalist(journalist.copy(jobTitle = \n                \"new job title\"))\n            assertEquals(\"new job title\", journalistDao.\n                loadAllJournalists()[0].jobTitle)\n        }\n    }\n    ```"]