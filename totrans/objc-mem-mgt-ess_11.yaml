- en: Chapter 11. Features of Xcode 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 Xcode 6的功能
- en: In this final chapter, we will go in-depth into the de facto **Integrate Development
    Environment** (**IDE**) provided by Apple, which is used by developers to create
    iOS and Mac OS applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最后的章节中，我们将深入探讨苹果提供的实际**集成开发环境**（**IDE**），开发者使用它来创建iOS和Mac OS应用程序。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to Xcode 6
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode 6简介
- en: What's new in storyboard?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Storyboard中的新特性？
- en: Debugging in Xcode 6
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode 6中的调试
- en: An Interface Builder in Xcode 6
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode 6中的Interface Builder
- en: Exploring playground
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索游乐场
- en: Introducing Xcode 6
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xcode 6介绍
- en: Xcode 6 was announced by Apple at the **Worldwide Developers Conference** (**WWDC**)
    on June 2, 2014 and it was officially released on September 17, 2014\. Xcode 6
    improved a lot with regards to features and tools for iOS and Mac developers as
    it has support for the new Swift programming language created by Apple and announced
    in 2014.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 6于2014年6月2日在**全球开发者大会**（**WWDC**）上由苹果公司宣布，并于2014年9月17日正式发布。Xcode 6在iOS和Mac开发者的功能和工具方面有了很大的改进，因为它支持苹果在2014年创建并宣布的新Swift编程语言。
- en: Xcode 6 also includes new features such as live rendering within Interface Builder
    where your handwritten UI code is displayed within the UI canvas and any change
    is also instantly reflected when you type in your code. It also has a new view
    debugging tool that you can use to help you see your UI layers in a 3D visualization
    so that you can understand the composition of your interface and see and identify
    any clipped or overlapped views.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 6还包括了新的特性，如Interface Builder中的实时渲染，你的手写UI代码在UI画布中显示，并且当你输入代码时，任何更改也会立即反映出来。它还有一个新的视图调试工具，你可以使用它来帮助你以3D可视化方式查看你的UI层，这样你可以理解界面的组成，并查看和识别任何被裁剪或重叠的视图。
- en: With Apple releasing newer devices every year with different screen sizes, having
    to support multiple screen devices is not an easy task to do. However, Xcode 6
    now has new features that are aimed at reducing the tedium of developing iOS apps
    for multiple screens. So, let's dig into this chapter and look at the new tools
    that Apple has provided for us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着苹果每年发布具有不同屏幕尺寸的新设备，支持多个屏幕设备并不是一件容易的事情。然而，Xcode 6现在有一些旨在减少为多个屏幕开发iOS应用程序的繁琐任务的新特性。因此，让我们深入本章，看看苹果为我们提供的新工具。
- en: In this entire chapter, we will devote the following paragraphs to examining
    the internals and new features that are present in Xcode 6.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个内容中，我们将用以下段落来检查Xcode 6内部的和新特性。
- en: What's new in storyboard
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Storyboard中的新特性
- en: Xcode 6 introduces a few new features with regards to storyboards and Interface
    Builder. Ever since the introduction of Xcode 4, storyboard allows you to link
    up your screen using a visual interface, describe the transition between the various
    screens, and have a good conceptual overview of all the screens since they are
    all placed into a single file. Storyboards have been an important tool for programmers,
    developers, and designers to create interfaces easily and link them up using a
    GUI. This is especially useful for designers as it allows them to overcome their
    fear of writing code, and storyboard allows them to create intuitive interfaces
    easily.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 6在Storyboard和Interface Builder方面引入了一些新特性。自从Xcode 4引入以来，Storyboard允许你通过可视化界面链接屏幕，描述不同屏幕之间的转换，并对所有屏幕有一个良好的概念性概述，因为它们都被放置在一个单独的文件中。Storyboard一直是程序员、开发人员和设计师创建界面并使用GUI轻松链接的重要工具。这对于设计师来说尤其有用，因为它允许他们克服编写代码的恐惧，Storyboard也允许他们轻松创建直观的界面。
- en: 'Similarly, with the introduction of Xcode 6, there have been new additions
    and changes to Storyboard. A few of the new additions are:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，随着Xcode 6的引入，Storyboard也增加了新的功能和变化。其中一些新的功能包括：
- en: Allowing storyboard or the NIB file to replace launch images
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许Storyboard或NIB文件替换启动图像
- en: Universal storyboard
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用Storyboard
- en: Now, let's expand more on the two new features in Xcode 6, which I mentioned
    earlier.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地探讨我之前提到的Xcode 6的两个新特性。
- en: Allowing storyboard or the NIB file to replace launch images
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 允许Storyboard或NIB文件替换启动图像
- en: 'When an iOS application is busy loading its initial first screen, the iOS (operating
    system) will show a static image, which is inserted into the application by the
    app developer. For an optimal effect, the launch image should resemble the user
    interface of the application. More information about launch images can be found
    on Apple''s website at [https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html](https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html),
    where it mentions this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当iOS应用程序忙于加载其初始的第一个屏幕时，iOS（操作系统）将显示一个静态图像，这是应用程序开发者插入的。为了达到最佳效果，启动图像应该类似于应用程序的用户界面。有关启动图像的更多信息，可以在Apple的网站上找到，网址为[https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html](https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html)，其中提到以下几点：
- en: '*"A launch file or image provides a simple placeholder image that iOS displays
    when your app starts up. The placeholder image gives users the impression that
    your app is fast and responsive because it appears instantly and is quickly replaced
    by the first screen of your app. Every app must supply a launch file or at least
    one static image.*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"启动文件或图像提供了一个简单的占位符图像，iOS在应用程序启动时显示。占位符图像给用户留下应用程序运行速度快、响应灵敏的印象，因为它立即出现，并迅速被应用程序的第一个屏幕所取代。每个应用程序都必须提供启动文件或至少一个静态图像。*'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In iOS 8 and later, you can create a XIB or storyboard file instead of a static
    launch image. When you create a launch file in Interface Builder, you use size
    classes to define different layouts for different display environments and you
    use Auto Layout to make minor adjustments. Using size classes and Auto Layout
    means that you can create a single launch file that looks good on all devices
    and display environments."*'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在iOS 8及以后版本中，你可以创建一个XIB或故事板文件，而不是静态的启动图像。当你在Interface Builder中创建启动文件时，你使用尺寸类别来定义不同显示环境的不同布局，并使用Auto
    Layout进行细微调整。使用尺寸类别和Auto Layout意味着你可以创建一个适用于所有设备和显示环境的单个启动文件。"*'
- en: Before iOS 8 and Xcode 6, developers had to provide launch images for each screen
    size, which can cover iPad, iPhones 4S, iPhone 5S, and so on. If your application
    is a universal application, that means you need to provide multiple versions of
    the launch images to support the various devices. But now with the introduction
    of using storyboards as launch images, you can use Auto Layout to create a single
    launch storyboard and this launch storyboard can be used as the launch image of
    all the devices that you are supporting. This is a very handy time-saving methods
    as this means that you do not need to create multiple launch images for various
    screen sizes anymore.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS 8和Xcode 6之前，开发者必须为每种屏幕尺寸提供启动图像，这些图像可以覆盖iPad、iPhone 4S、iPhone 5S等设备。如果你的应用程序是通用应用程序，这意味着你需要提供多个版本的启动图像以支持各种设备。但现在，随着使用故事板作为启动图像的引入，你可以使用Auto
    Layout创建单个启动故事板，这个启动故事板可以用作你支持的所有设备的启动图像。这是一个非常方便的节省时间的方法，因为这意味着你不再需要为各种屏幕尺寸创建多个启动图像。
- en: So, in the next few pages, we will go through a short introduction to using
    storyboards as launch images and you will appreciate this additional functionality
    that has been added into Xcode 6 for the sake of all developers. Do note that
    this function only works on iOS 8 and not on iOS 7\. So, if you are targeting
    devices using iOS 7, then using storyboards as launch images will not work for
    you and you need to revert back to the old method of using static images. However,
    considering this, most iOS users tend to upgrade their OS whenever a new version
    is released. From now on, you should be using storyboards as launch images often.
    However, do keep in mind that if you need to support iOS 7, you can use launch
    images as a fallback for devices running iOS 7, and yet use launch storyboards
    for devices running iOS 8\. So, let's get going and I will walk you through this
    new nifty feature available in Xcode 6.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在接下来的几页中，我们将简要介绍如何使用故事板作为启动图像，你将欣赏到Xcode 6为所有开发者添加的这项附加功能。请注意，此功能仅在iOS 8上工作，不在iOS
    7上工作。因此，如果你针对使用iOS 7的设备，那么使用故事板作为启动图像将不起作用，你需要回退到使用静态图像的旧方法。然而，考虑到这一点，大多数iOS用户在发布新版本时都会升级他们的操作系统。从现在开始，你应该经常使用故事板作为启动图像。但是，请记住，如果你需要支持iOS
    7，你可以使用启动图像作为运行iOS 7设备的后备，同时使用启动故事板为运行iOS 8的设备服务。那么，让我们开始吧，我将带你了解Xcode 6中这个新巧的功能。
- en: Launching images from your app
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从你的应用程序启动图像
- en: For this section, we will create a simple app to load a storyboard as a launch
    image. So, let's start, shall we?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将创建一个简单的应用来加载故事板作为启动图像。那么，让我们开始吧，好吗？
- en: First, we will create our project. For this tutorial, we will use a single view
    application after selecting **File** | **New Project**:![Launching images from
    your app](img/00053.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建我们的项目。在本教程中，我们将在选择 **文件** | **新建项目** 后使用单视图应用：![从您的应用启动图像](img/00053.jpeg)
- en: 'You will also see the following screen:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您还会看到以下屏幕：
- en: '![Launching images from your app](img/00054.jpeg)'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![从您的应用启动图像](img/00054.jpeg)'
- en: 'Then, we need to create a storyboard that will be the first image that the
    user sees when they launch the app, so we need to create a new storyboard and
    call it `launch.storyboard`. Do note that we need to add a view controller and
    can add other controls such as UILabels to our launch storyboard:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个故事板，这将是在用户启动应用时看到的第一个图像，因此我们需要创建一个新的故事板，并将其命名为 `launch.storyboard`。请注意，我们需要向我们的启动故事板添加一个视图控制器，并可以添加其他控件，例如
    UILabels：
- en: '![Launching images from your app](img/00055.jpeg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![从您的应用启动图像](img/00055.jpeg)'
- en: Next, we need to click on our project, which is named **LaunchApplication**
    and then set the **Launch Screen File** option to `launch.storyboard`, which is
    the storyboard that we just created:![Launching images from your app](img/00056.jpeg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要点击我们的项目，其名称为 **LaunchApplication**，然后设置 **启动屏幕文件** 选项为 `launch.storyboard`，这是我们刚刚创建的故事板：![从您的应用启动图像](img/00056.jpeg)
- en: 'To verify, we can go to `info.plist` and look for this key: **Launch screen
    interface file**. If this key exists, it means the value that is mapped to this
    key is the name of the storyboard or NIB file that we are using for our launch
    image:![Launching images from your app](img/00057.jpeg)'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证，我们可以前往 `info.plist` 并查找此键：**启动屏幕界面文件**。如果此键存在，则表示映射到该键的值是我们用于启动图像的故事板或
    NIB 文件的名称：![从您的应用启动图像](img/00057.jpeg)
- en: Then, we need to go to our `launch.storyboard` file and then select our **View
    Controller** for the `launch.storyboard` file and then click on the attributes
    inspector icon and make sure that **Is Initial View Controller** is checked.![Launching
    images from your app](img/00058.jpeg)
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要前往我们的 `launch.storyboard` 文件，然后选择 `launch.storyboard` 文件的 **视图控制器**，然后点击属性检查器图标，确保已勾选
    **是否为初始视图控制器**。![从您的应用启动图像](img/00058.jpeg)
- en: Finally, we need to build the project and run it to see that the launch image
    is now showing the `launch.storyboard` file, which has the text **Welcome to Launch
    Storyboard**:![Launching images from your app](img/00059.jpeg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要构建项目并运行它，以查看启动图像现在显示的是 `launch.storyboard` 文件，其中包含文本 **欢迎使用启动故事板**：![从您的应用启动图像](img/00059.jpeg)
- en: With just a few steps, we are able to use a storyboard or NIB file to replace
    our launch images, PNGs, and with the help of Auto Layout, replacing multiple
    launch images with just one storyboard or NIB is made easy in just a few steps.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 只需几个步骤，我们就能使用故事板或 NIB 文件来替换我们的启动图像、PNG 图像，借助自动布局，只需几个步骤就可以轻松地用单个故事板或 NIB 替换多个启动图像。
- en: With just these simple steps, we can use a launch storyboard.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只需这些简单的步骤，我们就可以使用启动故事板。
- en: Universal storyboards
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用故事板
- en: Now, let's move on to the next cool feature of Xcode 6 and that is universal
    storyboard. Universal storyboards means that your storyboard will be able to display
    the UI elements such as `UITextfields` and `UIButtons` in the correct position
    regardless of whether it is viewed with and iPad, iPhone 6+, and so on. So, you
    can create one storyboard and use it for iPad, iPhones, and other devices. The
    universal applications, which are applications that can be downloaded once and
    then run equally well on iPhones and iPads, are now becoming the norm in the iTunes
    App Store. There used to be the issue of generating different set of layouts for
    iPhone, iPads, retina devices, and non-retina devices. However, with the introduction
    of Auto Layout, it has made life easier for developers everywhere and Xcode 6
    has made it easier for us with the addition of universal storyboards. With universal
    storyboards, Xcode 6 now allows us to easily see how our layouts will look with
    devices of different resolution after we have used Auto Layout to create the user
    interface layout.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续探讨Xcode 6的下一个酷炫功能，那就是通用故事板。通用故事板意味着你的故事板将能够以正确的位置显示UI元素，如`UITextfields`和`UIButtons`，无论它是用iPad、iPhone
    6+等查看。因此，你可以创建一个故事板，并用于iPad、iPhone和其他设备。那些可以一次性下载并在iPhone和iPad上同样良好运行的通用应用程序，现在已成为iTunes
    App Store中的常态。过去，存在为iPhone、iPad、视网膜设备和非视网膜设备生成不同布局的问题。然而，随着自动布局的引入，它让全球的开发者生活变得更加容易，而Xcode
    6通过添加通用故事板使其变得更加容易。使用通用故事板，Xcode 6现在允许我们在使用自动布局创建用户界面布局后，轻松地看到我们的布局在不同分辨率的设备上的外观。
- en: To activate universal storyboards, we just need a few simple steps and use our
    Xcode project created to launch images to show you the simple steps we need. Do
    note that this feature will only work on iOS 8.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活通用故事板，我们只需要几个简单的步骤，并使用我们创建的Xcode项目启动图像来展示我们需要执行的简单步骤。请注意，此功能仅在iOS 8上有效。
- en: 'First, we need to select our **View Controller** in `Main.storyboard` and click
    the file inspector icon on the right of our screen and then make sure that **Use
    Size Classes** is checked:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`Main.storyboard`中选择我们的**视图控制器**，然后点击屏幕右侧的文件检查器图标，并确保**使用大小类**被勾选：
- en: '![Universal storyboards](img/00060.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![通用故事板](img/00060.jpeg)'
- en: 'Next, you will notice that at the bottom of your storyboard, there is an icon
    that you can click, which you can drag and resize to simulate how your Auto Layout
    user interface will look based on various screen layouts such as iPad portrait,
    iPhone landscape, and so on. So, feel free to click on it and move it around to
    see how your layouts will look and then adjust it according to your preference
    and specifications:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你会在你的故事板底部注意到一个可以点击的图标，你可以拖动并调整其大小来模拟你的自动布局用户界面在不同屏幕布局下的外观，例如iPad纵向、iPhone横向等。因此，请随意点击并移动它，看看你的布局将如何呈现，然后根据你的偏好和规格进行调整：
- en: '![Universal storyboards](img/00061.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![通用故事板](img/00061.jpeg)'
- en: Debugging in Xcode 6
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xcode 6中的调试
- en: 'As you can see, Xcode 6 has added some nifty new tools for us, developers,
    to aid us in our work. However, not only this, debugging is easier now with some
    additional goodies that are now part of Xcode 6\. Here are a few of the debugging
    goodies that are provided:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Xcode 6为我们开发者增加了一些实用的新工具，以帮助我们工作。然而，不仅如此，调试现在也变得更加容易，因为一些额外的功能现在已成为Xcode
    6的一部分。以下是一些提供的调试好工具：
- en: View hierarchy debugger
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图层次结构调试器
- en: Debug gauges
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试仪表盘
- en: Enhanced queue debugging
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强的队列调试
- en: Out of the list of additional debugging goodies, the view hierarchy debugger
    is the one that will prove most useful in terms of impact. Prior to Xcode 6, if
    you wanted to see the view hierarchy of your application, you had to use plugins
    such as Spark Inspector, Reveal, and so on. However, with the release of Xcode
    6, view hierarchy visualization is now officially supported and you will get the
    full power of the view hierarchy in Xcode 6.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在额外的调试好工具列表中，视图层次结构调试器是其中最有用的一个。在Xcode 6之前，如果你想查看应用程序的视图层次结构，你必须使用插件，如Spark
    Inspector、Reveal等。然而，随着Xcode 6的发布，视图层次结构可视化现在得到了官方支持，你将在Xcode 6中获得视图层次结构的全部功能。
- en: 'To use the view hierarchy debugger in Xcode 6, you need to make sure that your
    application is currently running, then you need to click the debug view hierarchy
    icon at the bottom of your, Xcode as shown, here and the button will have mouseover
    text called **Debug View Hierarchy** when you move over the icon:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Xcode 6中使用视图层次结构调试器，您需要确保您的应用程序当前正在运行，然后您需要点击Xcode底部的调试视图层次结构图标，如图所示，当您移过图标时，按钮将显示鼠标悬停文本**调试视图层次结构**：
- en: '![Debugging in Xcode 6](img/00062.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode 6中的调试](img/00062.jpeg)'
- en: 'When you click on that icon, you will see a spinning **UIActivityIndicator**
    appear for a few seconds before an image of your current view appears. Then you
    can just drag up, down, left, and right to rotate your view along a 3D axis to
    see the image they lines up, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击该图标时，您将看到一个旋转的**UIActivityIndicator**图标出现几秒钟，然后您的当前视图的图像出现。然后您只需向上、向下、向左和向右拖动，就可以沿着3D轴旋转您的视图，以查看图像是否对齐，如图所示：
- en: '![Debugging in Xcode 6](img/00063.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode 6中的调试](img/00063.jpeg)'
- en: 'The view hierarchy debugger will have a few options, as shown here, which you
    can use to aid your debugging:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 视图层次结构调试器将有一些选项，如图所示，您可以使用这些选项来帮助您的调试：
- en: '![Debugging in Xcode 6](img/00064.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Xcode 6中的调试](img/00064.jpeg)'
- en: 'Starting from left to right, the following table shows what the various buttons
    do:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右，以下表格显示了各个按钮的功能：
- en: '| Icon | Button name | Functionality |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 图标 | 按钮名称 | 功能 |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ![Debugging in Xcode 6](img/00065.jpeg) | Show clipped content | This hides
    or shows content that is clipped |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| ![Xcode 6中的调试](img/00065.jpeg) | 显示裁剪内容 | 这将隐藏或显示被裁剪的内容 |'
- en: '| ![Debugging in Xcode 6](img/00066.jpeg) | Show constraints | This shows the
    Auto Layout constraints |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| ![Xcode 6中的调试](img/00066.jpeg) | 显示约束 | 这显示了自动布局约束 |'
- en: '| ![Debugging in Xcode 6](img/00067.jpeg) | Reset viewing area | This resets
    the view to the default state |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| ![Xcode 6中的调试](img/00067.jpeg) | 重置查看区域 | 这将视图重置为默认状态 |'
- en: '| ![Debugging in Xcode 6](img/00068.jpeg) | Adjust view mode | This shows the
    view as wireframe, with contents |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| ![Xcode 6中的调试](img/00068.jpeg) | 调整视图模式 | 这显示了带有内容的线框视图 |'
- en: '| ![Debugging in Xcode 6](img/00069.jpeg) | Zoom out, actual size and zoom
    in | This sets the scale of the view |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| ![Xcode 6中的调试](img/00069.jpeg) | 缩放、实际大小和缩放 | 这将设置视图的缩放比例 |'
- en: Debug gauges
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试仪表盘
- en: 'Debug gauges has been spruced up with two new gauges and they are:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 调试仪表盘已经增加了两个新的仪表盘，它们是：
- en: The network activity gauge
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络活动仪表盘
- en: The disk activity gauge
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘活动仪表盘
- en: The network activity gauge will show you how much data is being sent and received
    alongside a list of open ports and the details such as IP address, as we can see
    in the following screenshot. The typical scenario when you will use this network
    activity gauge is when you need to track the amount of data being sent and received
    if you need to do network optimization, plus see the remote IP address and port
    number so that you can have an idea of where the device is connecting to.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 网络活动仪表盘将显示发送和接收的数据量，以及一个打开端口的列表和诸如IP地址等详细信息，如下面的截图所示。您将使用此网络活动仪表盘的典型场景是当您需要跟踪发送和接收的数据量以进行网络优化时，同时查看远程IP地址和端口号，以便您了解设备连接的位置。
- en: 'These will be useful if you want to minimize the amount of network traffic
    being sent and using the network activity gauge will be the first place you should
    look:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能将有助于您最小化发送和使用的网络流量，使用网络活动仪表盘将是您首先应该查看的地方：
- en: '![Debug gauges](img/00070.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![调试仪表盘](img/00070.jpeg)'
- en: 'The disk activity debug gauge will show real-time data of all the reads and
    writes that your application is doing to disk. It also gives information on all
    open files coupled with a log of the disk I/O activity for you to look at, which
    you can see in the following screenshot. If you are developing applications that
    do large read and writes to disk and are experiencing erratic disk read and write
    failures, this disk activity debug gauge will be a enormous boon to you as it
    will tell you the size of the read and write activities. This is a great tool
    for you so that you can use these figures to track how much data you are actually
    reading and writing to disk, which will in turn help you to get a better picture
    of your situation in order to fix your problems:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘活动调试仪表盘将显示应用程序对磁盘进行的所有读取和写入操作的真实时间数据。它还提供了所有打开的文件信息，以及磁盘I/O活动日志，供您查看，您可以在下面的屏幕截图中看到。如果您正在开发对磁盘进行大量读取和写入操作的应用程序，并且遇到不规则的磁盘读取和写入故障，那么这个磁盘活动调试仪表盘将为您带来巨大的帮助，因为它会告诉您读取和写入操作的大小。这是一个非常适合您的工具，您可以使用这些数据来跟踪您实际读取和写入到磁盘的数据量，这反过来又可以帮助您更好地了解情况，以便修复问题：
- en: '![Debug gauges](img/00071.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![调试仪表盘](img/00071.jpeg)'
- en: What's new in Interface Builder
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Interface Builder的新功能
- en: 'Interface Builder has few functions that are new in Xcode 6 and they are:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xcode 6中，Interface Builder新增的功能很少，它们是：
- en: Live rendering
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时渲染
- en: Size classes
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小类
- en: Preview assistant
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览助手
- en: Live rendering functions in exactly the same way as its name suggests. So, what
    live rendering does is display and render custom objects such as custom buttons,
    fonts, and so on in your Xcode IDE without building a line of code. So, what this
    means is that when you update your code for your custom objects, the Interface
    Builder design canvas will automatically update itself with the new look that
    you have just entered in the editor without requiring you to build and run your
    project to see it on the simulator or device. Previously, you had to run your
    app to see the changes that you did to custom objects, which are elements such
    as `UIButtons`, `fonts`, and so on that you created in storyboard or programmatically
    and which have a customized look to them. However, now, Apple has made it easier
    for us by introducing live rendering into Xcode 6 as it saves us time for development
    by not letting us waste time in building and running our code to see custom objects
    during the course of your development. You can expect to build and run your code
    thousands or even millions of times, so every second saved doing unnecessary building
    will save you hours of development time down the line.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实时渲染功能正如其名所暗示的那样工作。因此，实时渲染所做的就是在Xcode IDE中显示和渲染自定义对象，如自定义按钮、字体等，而无需编写一行代码。这意味着当您更新自定义对象的代码时，Interface
    Builder设计画布将自动更新为编辑器中输入的新外观，而无需您构建和运行项目来在模拟器或设备上查看。以前，您必须运行应用程序才能看到对自定义对象所做的更改，这些对象是您在故事板中创建或通过编程创建的，并且具有自定义的外观。然而，现在，苹果通过在Xcode
    6中引入实时渲染来简化了我们的工作，因为它在开发过程中节省了我们的时间，使我们不必浪费时间去构建和运行代码以查看自定义对象。您可以预期构建和运行代码成千上万次，甚至数百万次，因此节省的每一秒都会在后续的开发中节省您数小时的时间。
- en: One last thing that is new in Xcode 6 is the concept of size classes; we briefly
    covered size classes earlier on when I introduced the concept of universal storyboards.
    To explain in more detail, size classes for iOS 8 enables a developer to create
    and design a single universal storyboard with customized layouts for both iPad
    and iPhone. With the introduction of size classes, you can define common views
    and constraints once and then add your own custom variations for each supported
    device screen and form factor.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 6中新增的最后一项功能是大小类概念；在我介绍通用故事板概念时，我们简要地讨论了大小类。为了更详细地解释，iOS 8的大小类允许开发者创建和设计一个通用的故事板，并为iPad和iPhone提供定制的布局。随着大小类的引入，您可以一次性定义常见的视图和约束，然后为每个支持的设备屏幕和形态添加您自己的自定义变体。
- en: 'Finally, one more exciting feature in Xcode 6 is the preview assistant. The
    preview assistant allows you to preview and see how your layout looks one beside
    the other in different devices/targets. So, you can see your layout as it will
    appear on an iPad or iPhone 4S next to each other. To activate preview assistant,
    you need to click on the **Show Assistant Editor** button on the top right to
    activate Assistant Editor, then when Assistant Editor appears, click on the icon
    with the two interlinked icons, which will reveal a menu item called **Preview**.
    Click on the **Preview** item and select the storyboard that you wish to preview
    as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Xcode 6 中还有一个令人兴奋的新功能，即预览助手。预览助手允许您预览并查看您的布局在不同设备/目标上并排时的外观。因此，您可以看到您的布局在
    iPad 或 iPhone 4S 上并排时的样子。要激活预览助手，您需要点击右上角的**显示助手编辑器**按钮以激活助手编辑器，然后当助手编辑器出现时，点击带有两个相互连接图标的图标，这将显示一个名为**预览**的菜单项。点击**预览**项并选择您希望预览的故事板，如图所示：
- en: '![What''s new in Interface Builder](img/00072.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Interface Builder 中的新功能](img/00072.jpeg)'
- en: Next, you can see a **+** icon in the bottom-left corner. Click on it and you
    will see a list of iOS devices for different screen sizes, such as iPhone 4 inch,
    iPhone 4.7 inch, and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以在左下角看到一个**+**图标。点击它，您将看到一个包含不同屏幕尺寸的 iOS 设备列表，例如 iPhone 4 英寸、iPhone 4.7
    英寸等。
- en: '![What''s new in Interface Builder](img/00073.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Interface Builder 中的新功能](img/00073.jpeg)'
- en: 'These correspond to the various iOS screen devices that you wish to preview.
    So, click on a device and a canvas showing that screen size will appear, and in
    that canvas, you can see how your selected storyboard looks for that screen size.
    So, without building and selecting your targeted simulator, Xcode 6 allows you
    to preview how your layout looks without wasting a few seconds of build time.
    This features well for storyboard and XIB files too. To sum up, the steps to use
    preview assistant are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对应于您希望预览的各种 iOS 屏幕设备。因此，点击一个设备，将出现一个显示该屏幕大小的画布，在该画布中，您可以看到您选定的故事板在该屏幕尺寸下的外观。因此，无需构建和选择您的目标模拟器，Xcode
    6 允许您预览布局的外观，而无需浪费几秒钟的构建时间。这个功能对故事板和 XIB 文件也很有用。总之，使用预览助手的步骤如下：
- en: Click on **Show Assistant Editor** on the top right to activate Assistant Editor.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**显示助手编辑器**以激活助手编辑器。
- en: Click on the icon with the two interlinked icons to reveal a menu called **Preview**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击带有两个相互连接图标的图标以显示名为**预览**的菜单。
- en: Click on the **Preview** item and select the storyboard you wish to preview.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**预览**项并选择您希望预览的故事板。
- en: Click on the **+** icon in the bottom-left corner to select a list of iOS devices
    to see how your storyboard will look in that selected device screen.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左下角的**+**图标以选择一个 iOS 设备列表，以查看您的故事板在该选定设备屏幕上的外观。
- en: Playground for Swift
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Swift 的 Playground
- en: 'Apple announced the programming language Swift in 2014 during WWDC and in line
    with that, Xcode 6 comes with a new feature called Playground where you can have
    an interactive work area to write Swift code and get live feedback in Xcode. This
    makes writing Swift code simple and fun as you can input in a single line of code
    and see the results immediately. And if your code iterates through a loop, you
    can see its movement via the timeline assistant. The timeline assistant also displays
    your variables in a graph and draws each step when a view is composed. To give
    you a better understanding of playground, let''s try it out via a simple project:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果公司在 2014 年的 WWDC 上宣布了 Swift 编程语言，与此相应，Xcode 6 带来了一个名为 Playground 的新功能，您可以在其中拥有一个交互式工作区来编写
    Swift 代码并在 Xcode 中获得实时反馈。这使得编写 Swift 代码变得简单且有趣，因为您可以在一行代码中输入并立即看到结果。如果您的代码通过循环迭代，您可以通过时间线助手查看其运动。时间线助手还会以图表形式显示您的变量，并在视图组合时绘制每个步骤。为了更好地了解
    Playground，让我们通过一个简单的项目来尝试一下：
- en: To start off, we need to create a new playground by selecting the **File** |
    **New** | **Playground** menu and then giving our playground a name as you can
    see here. For this project, let's call our playground project `MyPlayground`:![Playground
    for Swift](img/00074.jpeg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要通过选择**文件**|**新建**|**Playground**菜单来创建一个新的 Playground，并像您在这里看到的那样为我们的
    Playground 命名。对于这个项目，让我们将我们的 Playground 项目命名为 `MyPlayground`：![Swift 的 Playground](img/00074.jpeg)
- en: 'Next, a screen will appear where you can enter Swift code and the results will
    be shown instantly on the right side. To test it, try entering the following code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将出现一个屏幕，您可以在其中输入 Swift 代码，结果将立即显示在右侧。为了测试它，请尝试输入以下代码：
- en: '[PRE0]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you will see the results of your Swift input on the right side of the
    screen, which you can see here:![Playground for Swift](img/00075.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将在屏幕右侧看到你的Swift输入的结果，你可以在这里看到：![Swift游乐场](img/00075.jpeg)
- en: Now, that looks pretty cool as the real-time feedback helps by telling you what
    the output is and provides validation of your code. This can be useful for developers
    who want to test an algorithm without building their code or for you to display
    drawing code and see it immediately.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，这看起来相当酷，因为实时反馈会告诉你输出结果，并提供代码验证。这对于想要测试算法而不必构建代码的开发者来说很有用，或者你可以显示绘图代码并立即看到它。
- en: 'Although playground sounds good, there are some limitations that you have to
    note for playground. Here is a list of limitations of what cannot be done with
    playground:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然游乐场听起来不错，但有一些限制需要注意，特别是关于游乐场的限制。以下是不能使用游乐场完成的限制列表：
- en: It cannot be used for user interaction
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能用于用户交互
- en: Playground only works on the simulator and not on the device
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游乐场只能在模拟器上运行，而不能在设备上运行
- en: Customer libraries and frameworks cannot be imported as only system libraries
    and frameworks can be used
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端库和框架不能导入，因为只能使用系统库和框架
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As you can see, Xcode is a big step forward in the right direction for developers
    with the introduction of new tools such as view hierarchy debugger, preview editor,
    and the addition of new functionalities such as allowing storyboards and NIBs
    to be used as launch images for your application instead of just static images.
    With all these new components to play with, Apple has made it much easier and
    better for developers to create and code cool projects with ease and reduce the
    effort to do so. With this,I leave you to your coding tasks and hope that you
    have a great time reading this book and getting some useful tips. With this, I
    bid you, "Goodbye, and enjoy coding."
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，随着新工具如视图层次结构调试器、预览编辑器和新增功能（如允许将故事板和NIBs用作应用的启动图像，而不是仅仅静态图像）的引入，Xcode为开发者向前迈出了重要的一步。有了所有这些可以玩的新组件，苹果使得开发者能够轻松地创建和编码酷炫的项目，并减少了完成这些任务的努力。因此，我将你留给你的编码任务，并希望你在阅读这本书并获得一些有用的提示时有一个愉快的时光。就此，我向你道别，祝你编码愉快。
- en: 'P.S. If you wish to dig more into Xcode 6, here is a link to the official Apple
    documentation for Xcode 6: [https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: P.S. 如果你希望深入了解Xcode 6，这里有一个链接到官方的Xcode 6 Apple文档：[https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html).
