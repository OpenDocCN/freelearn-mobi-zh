- en: Chapter 11. Features of Xcode 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will go in-depth into the de facto **Integrate Development
    Environment** (**IDE**) provided by Apple, which is used by developers to create
    iOS and Mac OS applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Xcode 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's new in storyboard?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in Xcode 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Interface Builder in Xcode 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring playground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Xcode 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode 6 was announced by Apple at the **Worldwide Developers Conference** (**WWDC**)
    on June 2, 2014 and it was officially released on September 17, 2014\. Xcode 6
    improved a lot with regards to features and tools for iOS and Mac developers as
    it has support for the new Swift programming language created by Apple and announced
    in 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Xcode 6 also includes new features such as live rendering within Interface Builder
    where your handwritten UI code is displayed within the UI canvas and any change
    is also instantly reflected when you type in your code. It also has a new view
    debugging tool that you can use to help you see your UI layers in a 3D visualization
    so that you can understand the composition of your interface and see and identify
    any clipped or overlapped views.
  prefs: []
  type: TYPE_NORMAL
- en: With Apple releasing newer devices every year with different screen sizes, having
    to support multiple screen devices is not an easy task to do. However, Xcode 6
    now has new features that are aimed at reducing the tedium of developing iOS apps
    for multiple screens. So, let's dig into this chapter and look at the new tools
    that Apple has provided for us.
  prefs: []
  type: TYPE_NORMAL
- en: In this entire chapter, we will devote the following paragraphs to examining
    the internals and new features that are present in Xcode 6.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in storyboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode 6 introduces a few new features with regards to storyboards and Interface
    Builder. Ever since the introduction of Xcode 4, storyboard allows you to link
    up your screen using a visual interface, describe the transition between the various
    screens, and have a good conceptual overview of all the screens since they are
    all placed into a single file. Storyboards have been an important tool for programmers,
    developers, and designers to create interfaces easily and link them up using a
    GUI. This is especially useful for designers as it allows them to overcome their
    fear of writing code, and storyboard allows them to create intuitive interfaces
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, with the introduction of Xcode 6, there have been new additions
    and changes to Storyboard. A few of the new additions are:'
  prefs: []
  type: TYPE_NORMAL
- en: Allowing storyboard or the NIB file to replace launch images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Universal storyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's expand more on the two new features in Xcode 6, which I mentioned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing storyboard or the NIB file to replace launch images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an iOS application is busy loading its initial first screen, the iOS (operating
    system) will show a static image, which is inserted into the application by the
    app developer. For an optimal effect, the launch image should resemble the user
    interface of the application. More information about launch images can be found
    on Apple''s website at [https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html](https://developer.apple.com/library/ios/documentation/userexperience/conceptual/mobilehig/LaunchImages.html),
    where it mentions this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A launch file or image provides a simple placeholder image that iOS displays
    when your app starts up. The placeholder image gives users the impression that
    your app is fast and responsive because it appears instantly and is quickly replaced
    by the first screen of your app. Every app must supply a launch file or at least
    one static image.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In iOS 8 and later, you can create a XIB or storyboard file instead of a static
    launch image. When you create a launch file in Interface Builder, you use size
    classes to define different layouts for different display environments and you
    use Auto Layout to make minor adjustments. Using size classes and Auto Layout
    means that you can create a single launch file that looks good on all devices
    and display environments."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before iOS 8 and Xcode 6, developers had to provide launch images for each screen
    size, which can cover iPad, iPhones 4S, iPhone 5S, and so on. If your application
    is a universal application, that means you need to provide multiple versions of
    the launch images to support the various devices. But now with the introduction
    of using storyboards as launch images, you can use Auto Layout to create a single
    launch storyboard and this launch storyboard can be used as the launch image of
    all the devices that you are supporting. This is a very handy time-saving methods
    as this means that you do not need to create multiple launch images for various
    screen sizes anymore.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the next few pages, we will go through a short introduction to using
    storyboards as launch images and you will appreciate this additional functionality
    that has been added into Xcode 6 for the sake of all developers. Do note that
    this function only works on iOS 8 and not on iOS 7\. So, if you are targeting
    devices using iOS 7, then using storyboards as launch images will not work for
    you and you need to revert back to the old method of using static images. However,
    considering this, most iOS users tend to upgrade their OS whenever a new version
    is released. From now on, you should be using storyboards as launch images often.
    However, do keep in mind that if you need to support iOS 7, you can use launch
    images as a fallback for devices running iOS 7, and yet use launch storyboards
    for devices running iOS 8\. So, let's get going and I will walk you through this
    new nifty feature available in Xcode 6.
  prefs: []
  type: TYPE_NORMAL
- en: Launching images from your app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this section, we will create a simple app to load a storyboard as a launch
    image. So, let's start, shall we?
  prefs: []
  type: TYPE_NORMAL
- en: First, we will create our project. For this tutorial, we will use a single view
    application after selecting **File** | **New Project**:![Launching images from
    your app](img/00053.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also see the following screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Launching images from your app](img/00054.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Then, we need to create a storyboard that will be the first image that the
    user sees when they launch the app, so we need to create a new storyboard and
    call it `launch.storyboard`. Do note that we need to add a view controller and
    can add other controls such as UILabels to our launch storyboard:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Launching images from your app](img/00055.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, we need to click on our project, which is named **LaunchApplication**
    and then set the **Launch Screen File** option to `launch.storyboard`, which is
    the storyboard that we just created:![Launching images from your app](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To verify, we can go to `info.plist` and look for this key: **Launch screen
    interface file**. If this key exists, it means the value that is mapped to this
    key is the name of the storyboard or NIB file that we are using for our launch
    image:![Launching images from your app](img/00057.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we need to go to our `launch.storyboard` file and then select our **View
    Controller** for the `launch.storyboard` file and then click on the attributes
    inspector icon and make sure that **Is Initial View Controller** is checked.![Launching
    images from your app](img/00058.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we need to build the project and run it to see that the launch image
    is now showing the `launch.storyboard` file, which has the text **Welcome to Launch
    Storyboard**:![Launching images from your app](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With just a few steps, we are able to use a storyboard or NIB file to replace
    our launch images, PNGs, and with the help of Auto Layout, replacing multiple
    launch images with just one storyboard or NIB is made easy in just a few steps.
  prefs: []
  type: TYPE_NORMAL
- en: With just these simple steps, we can use a launch storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Universal storyboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's move on to the next cool feature of Xcode 6 and that is universal
    storyboard. Universal storyboards means that your storyboard will be able to display
    the UI elements such as `UITextfields` and `UIButtons` in the correct position
    regardless of whether it is viewed with and iPad, iPhone 6+, and so on. So, you
    can create one storyboard and use it for iPad, iPhones, and other devices. The
    universal applications, which are applications that can be downloaded once and
    then run equally well on iPhones and iPads, are now becoming the norm in the iTunes
    App Store. There used to be the issue of generating different set of layouts for
    iPhone, iPads, retina devices, and non-retina devices. However, with the introduction
    of Auto Layout, it has made life easier for developers everywhere and Xcode 6
    has made it easier for us with the addition of universal storyboards. With universal
    storyboards, Xcode 6 now allows us to easily see how our layouts will look with
    devices of different resolution after we have used Auto Layout to create the user
    interface layout.
  prefs: []
  type: TYPE_NORMAL
- en: To activate universal storyboards, we just need a few simple steps and use our
    Xcode project created to launch images to show you the simple steps we need. Do
    note that this feature will only work on iOS 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to select our **View Controller** in `Main.storyboard` and click
    the file inspector icon on the right of our screen and then make sure that **Use
    Size Classes** is checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Universal storyboards](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you will notice that at the bottom of your storyboard, there is an icon
    that you can click, which you can drag and resize to simulate how your Auto Layout
    user interface will look based on various screen layouts such as iPad portrait,
    iPhone landscape, and so on. So, feel free to click on it and move it around to
    see how your layouts will look and then adjust it according to your preference
    and specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Universal storyboards](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging in Xcode 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, Xcode 6 has added some nifty new tools for us, developers,
    to aid us in our work. However, not only this, debugging is easier now with some
    additional goodies that are now part of Xcode 6\. Here are a few of the debugging
    goodies that are provided:'
  prefs: []
  type: TYPE_NORMAL
- en: View hierarchy debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug gauges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced queue debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out of the list of additional debugging goodies, the view hierarchy debugger
    is the one that will prove most useful in terms of impact. Prior to Xcode 6, if
    you wanted to see the view hierarchy of your application, you had to use plugins
    such as Spark Inspector, Reveal, and so on. However, with the release of Xcode
    6, view hierarchy visualization is now officially supported and you will get the
    full power of the view hierarchy in Xcode 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the view hierarchy debugger in Xcode 6, you need to make sure that your
    application is currently running, then you need to click the debug view hierarchy
    icon at the bottom of your, Xcode as shown, here and the button will have mouseover
    text called **Debug View Hierarchy** when you move over the icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging in Xcode 6](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on that icon, you will see a spinning **UIActivityIndicator**
    appear for a few seconds before an image of your current view appears. Then you
    can just drag up, down, left, and right to rotate your view along a 3D axis to
    see the image they lines up, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging in Xcode 6](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The view hierarchy debugger will have a few options, as shown here, which you
    can use to aid your debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging in Xcode 6](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Starting from left to right, the following table shows what the various buttons
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Icon | Button name | Functionality |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![Debugging in Xcode 6](img/00065.jpeg) | Show clipped content | This hides
    or shows content that is clipped |'
  prefs: []
  type: TYPE_TB
- en: '| ![Debugging in Xcode 6](img/00066.jpeg) | Show constraints | This shows the
    Auto Layout constraints |'
  prefs: []
  type: TYPE_TB
- en: '| ![Debugging in Xcode 6](img/00067.jpeg) | Reset viewing area | This resets
    the view to the default state |'
  prefs: []
  type: TYPE_TB
- en: '| ![Debugging in Xcode 6](img/00068.jpeg) | Adjust view mode | This shows the
    view as wireframe, with contents |'
  prefs: []
  type: TYPE_TB
- en: '| ![Debugging in Xcode 6](img/00069.jpeg) | Zoom out, actual size and zoom
    in | This sets the scale of the view |'
  prefs: []
  type: TYPE_TB
- en: Debug gauges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Debug gauges has been spruced up with two new gauges and they are:'
  prefs: []
  type: TYPE_NORMAL
- en: The network activity gauge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The disk activity gauge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The network activity gauge will show you how much data is being sent and received
    alongside a list of open ports and the details such as IP address, as we can see
    in the following screenshot. The typical scenario when you will use this network
    activity gauge is when you need to track the amount of data being sent and received
    if you need to do network optimization, plus see the remote IP address and port
    number so that you can have an idea of where the device is connecting to.
  prefs: []
  type: TYPE_NORMAL
- en: 'These will be useful if you want to minimize the amount of network traffic
    being sent and using the network activity gauge will be the first place you should
    look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debug gauges](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The disk activity debug gauge will show real-time data of all the reads and
    writes that your application is doing to disk. It also gives information on all
    open files coupled with a log of the disk I/O activity for you to look at, which
    you can see in the following screenshot. If you are developing applications that
    do large read and writes to disk and are experiencing erratic disk read and write
    failures, this disk activity debug gauge will be a enormous boon to you as it
    will tell you the size of the read and write activities. This is a great tool
    for you so that you can use these figures to track how much data you are actually
    reading and writing to disk, which will in turn help you to get a better picture
    of your situation in order to fix your problems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debug gauges](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: What's new in Interface Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Interface Builder has few functions that are new in Xcode 6 and they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Live rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview assistant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live rendering functions in exactly the same way as its name suggests. So, what
    live rendering does is display and render custom objects such as custom buttons,
    fonts, and so on in your Xcode IDE without building a line of code. So, what this
    means is that when you update your code for your custom objects, the Interface
    Builder design canvas will automatically update itself with the new look that
    you have just entered in the editor without requiring you to build and run your
    project to see it on the simulator or device. Previously, you had to run your
    app to see the changes that you did to custom objects, which are elements such
    as `UIButtons`, `fonts`, and so on that you created in storyboard or programmatically
    and which have a customized look to them. However, now, Apple has made it easier
    for us by introducing live rendering into Xcode 6 as it saves us time for development
    by not letting us waste time in building and running our code to see custom objects
    during the course of your development. You can expect to build and run your code
    thousands or even millions of times, so every second saved doing unnecessary building
    will save you hours of development time down the line.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing that is new in Xcode 6 is the concept of size classes; we briefly
    covered size classes earlier on when I introduced the concept of universal storyboards.
    To explain in more detail, size classes for iOS 8 enables a developer to create
    and design a single universal storyboard with customized layouts for both iPad
    and iPhone. With the introduction of size classes, you can define common views
    and constraints once and then add your own custom variations for each supported
    device screen and form factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, one more exciting feature in Xcode 6 is the preview assistant. The
    preview assistant allows you to preview and see how your layout looks one beside
    the other in different devices/targets. So, you can see your layout as it will
    appear on an iPad or iPhone 4S next to each other. To activate preview assistant,
    you need to click on the **Show Assistant Editor** button on the top right to
    activate Assistant Editor, then when Assistant Editor appears, click on the icon
    with the two interlinked icons, which will reveal a menu item called **Preview**.
    Click on the **Preview** item and select the storyboard that you wish to preview
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s new in Interface Builder](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, you can see a **+** icon in the bottom-left corner. Click on it and you
    will see a list of iOS devices for different screen sizes, such as iPhone 4 inch,
    iPhone 4.7 inch, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s new in Interface Builder](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'These correspond to the various iOS screen devices that you wish to preview.
    So, click on a device and a canvas showing that screen size will appear, and in
    that canvas, you can see how your selected storyboard looks for that screen size.
    So, without building and selecting your targeted simulator, Xcode 6 allows you
    to preview how your layout looks without wasting a few seconds of build time.
    This features well for storyboard and XIB files too. To sum up, the steps to use
    preview assistant are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Show Assistant Editor** on the top right to activate Assistant Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the icon with the two interlinked icons to reveal a menu called **Preview**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Preview** item and select the storyboard you wish to preview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon in the bottom-left corner to select a list of iOS devices
    to see how your storyboard will look in that selected device screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Playground for Swift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apple announced the programming language Swift in 2014 during WWDC and in line
    with that, Xcode 6 comes with a new feature called Playground where you can have
    an interactive work area to write Swift code and get live feedback in Xcode. This
    makes writing Swift code simple and fun as you can input in a single line of code
    and see the results immediately. And if your code iterates through a loop, you
    can see its movement via the timeline assistant. The timeline assistant also displays
    your variables in a graph and draws each step when a view is composed. To give
    you a better understanding of playground, let''s try it out via a simple project:'
  prefs: []
  type: TYPE_NORMAL
- en: To start off, we need to create a new playground by selecting the **File** |
    **New** | **Playground** menu and then giving our playground a name as you can
    see here. For this project, let's call our playground project `MyPlayground`:![Playground
    for Swift](img/00074.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, a screen will appear where you can enter Swift code and the results will
    be shown instantly on the right side. To test it, try entering the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, you will see the results of your Swift input on the right side of the
    screen, which you can see here:![Playground for Swift](img/00075.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, that looks pretty cool as the real-time feedback helps by telling you what
    the output is and provides validation of your code. This can be useful for developers
    who want to test an algorithm without building their code or for you to display
    drawing code and see it immediately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Although playground sounds good, there are some limitations that you have to
    note for playground. Here is a list of limitations of what cannot be done with
    playground:'
  prefs: []
  type: TYPE_NORMAL
- en: It cannot be used for user interaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playground only works on the simulator and not on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer libraries and frameworks cannot be imported as only system libraries
    and frameworks can be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, Xcode is a big step forward in the right direction for developers
    with the introduction of new tools such as view hierarchy debugger, preview editor,
    and the addition of new functionalities such as allowing storyboards and NIBs
    to be used as launch images for your application instead of just static images.
    With all these new components to play with, Apple has made it much easier and
    better for developers to create and code cool projects with ease and reduce the
    effort to do so. With this,I leave you to your coding tasks and hope that you
    have a great time reading this book and getting some useful tips. With this, I
    bid you, "Goodbye, and enjoy coding."
  prefs: []
  type: TYPE_NORMAL
- en: 'P.S. If you wish to dig more into Xcode 6, here is a link to the official Apple
    documentation for Xcode 6: [https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_6_0.html).'
  prefs: []
  type: TYPE_NORMAL
