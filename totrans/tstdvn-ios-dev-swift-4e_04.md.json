["```swift\n    // FirstDemoTests.swift\n    func \n     test_makeHeadline_shouldCapitalisePassedInString() {\n      let blogger = Blogger()\n    }\n    ```", "```swift\n    // Blogger.swift\n    import Foundation\n    struct Blogger { \n    }\n    ```", "```swift\n    // FirstDemoTests.swift\n    func\n     test_makeHeadline_shouldCapitalisePassedInString() {\n      let blogger = Blogger()\n      let headline = blogger.makeHeadline(from: \"the\n        Accessibility inspector\")\n    }\n    ```", "```swift\n    // Blogger.swift\n    struct Blogger {\n      func makeHeadline(from input: String) -> String {\n        return \"\"\n      }\n    }\n    ```", "```swift\n    // FirstDemoTests.swift\n    func \n     test_makeHeadline_shouldCapitalisePassedInString() {\n      let blogger = Blogger()\n      let headline = blogger.makeHeadline(from: \"the \n        Accessibility inspector\")\n      XCTAssertEqual(headline, \"The Accessibility \n        Inspector\")\n    }\n    ```", "```swift\nfunc makeHeadline(from input: String) -> String {\n  return \"The Accessibility Inspector\"\n}\n```", "```swift\n    func \n     test_makeHeadline_shouldCapitalisePassedInString() {\n      let blogger = Blogger()\n      let input = \"the Accessibility inspector\"\n      let result = blogger.makeHeadline(from: input)\n      let expected = \"The Accessibility Inspector\"\n      XCTAssertEqual(result, expected)\n    }\n    ```", "```swift\n    func makeHeadline(from input: String) -> String {\n      return \"The Accessibility\"\n    }\n    ```", "```swift\n// FirstDemoTests.swift\nfunc test_makeHeadline_shouldCapitalisePassedInString_2() {\n  let blogger = Blogger()\n  let input = \"The contextual action menu\"\n\n  let result = blogger.makeHeadline(from: input) \n  let expected = \"The Contextual Action Menu\"\n  XCTAssertEqual(result, expected)\n}\n```", "```swift\n// Blogger.swift\nfunc makeHeadline(from input: String) -> String {\n  let words = input.components(separatedBy: \" \")\n  var headline = \"\"\n  for var word in words {\n    let firstCharacter = word.remove(at: word.startIndex)\n    headline +=\n      \"\\(String(firstCharacter).uppercased())\\(word) \"\n  }\n  headline.remove(at: headline.index(before:\n    headline.endIndex))\n  return headline\n}\n```", "```swift\n// FirstDemoTests.swift\nvar blogger: Blogger!\n```", "```swift\n    // FirstDemoTests.swift\n    override func setUpWithError() throws {\n      blogger = Blogger()\n    }\n    ```", "```swift\n    // FirstDemoTests.swift\n    override func tearDownWithError() throws {\n      blogger = nil\n    }\n    ```", "```swift\n    // Blogger.swift\n    func makeHeadline(from input: String) -> String {\n      return input.capitalized\n    }\n    ```", "```swift\n    // FirstDemoTests.swift\n    func \n     test_makeHeadline_shouldCapitalisePassedInString_2()\n     { \n      let input = \"The contextual action menu\"  \n      let result = blogger.makeHeadline(from: input)\n      let expected = \"The ContextuaI Action Menu\"\n      XCTAssertEqual(result, expected)\n    }\n    ```", "```swift\n    (lldb) po expected\n    \"The ContextuaI Action Menu\"\n    ```", "```swift\n    (lldb) po result\n    \"The Contextual Action Menu\"\n    ```"]