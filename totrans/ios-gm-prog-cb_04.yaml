- en: Chapter 4. Particle System and Game Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be focusing on the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installation of the particle system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the particle system in games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Particle emitter integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game performance analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](part0025_split_000.html#page "Chapter 3. Animations and Texture"),
    *Animations and Texture*, we built a full game of collecting coins by a spaceship
    in a parallax infinite scrolling background. Now we are going to add some flyers
    to the game by introducing some particle systems, making the effects in the game
    look more alive and beautiful. Also, we will go through some performance analysis
    terminologies and tools. In this chapter, a performance-level analysis will be
    done using some performance and monitoring tools to increase the stability and
    performance of the game FlyingSpaceship.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of the particle system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A particle system is a collection of separate tiny objects called particles.
    They are added to scenes and nodes as emitter nodes, which control its position
    and motion in the scene. These particle systems are used to add some cool effects
    to the scene, which are highly intense effects such as fire, smoke, explosions,
    rain, water, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss how the particle system tools are installed
    and created for specific effect to be added in the game in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before iOS 7, there were open source particle editors used for the creation
    of particle systems. However, from iOS 7, there is an in-built support to create
    particle systems using a tool called Particle Editor, which comes integrated with
    Xcode 5.0\. So the prerequisite for this section is having iOS 7 and Xcode 5 to
    create some cool particle effects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For creation and implementation of particle systems, we will use Particle Editor.
    This editor doesn't need any installation as it is in-built in the Xcode, which
    will be used to create particle system files and then can be added as nodes as
    a part of the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we can start with the solution kit of [Chapter 3](part0025_split_000.html#page
    "Chapter 3. Animations and Texture"), *Animations and Texture*, and continue from
    there. The following are the steps involved to create a Sprite Kit Particle File:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode and go to **File** | **New** | **File**.![How to do it](img/00046.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then choose the **Resource** section in **iOS Section**, select **SpriteKit
    Particle File**, and press **Next**.![How to do it](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a list of particle system templates provided, select the **Fire** particle
    system template and click on **Next** to create a fire effect, which will be used
    to depict the thrust of spaceship in the game built so far.![How to do it](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `FireParticle` and click on **Create**.![How to do it](img/00049.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, a file named `FireParticle.sks`, which is the particle file, is
    created and a sample particle image named `spark.png`. `Spark.png` file is autogenerated,
    which is used as the sks file for the particle system.![How to do it](img/00050.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, when we select the `FireParticle.sks`
    file, the particle system created in the detail panel with a fire effect looks
    like this:![How to do it](img/00051.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the right-side inspector panel, we can customize the default particle
    system as per our need. You can scroll down to explore all the properties in the
    inspector and hence you can update the settings accordingly.![How to do it](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now as we have the particle system, we can now directly see the results when
    some values are changed from this inspector. The implementation also works with
    a few lines of code without changing any particle system values in the code, just
    picking the file and adding it to any node or scene.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try out and understand the parameters or the properties of the particle
    system file.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the list in the preceding screenshot, there is a background
    section that changes the color of the editor background. It is just saved while
    the game is built, but is not used at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Below this is a particle texture in which we can choose any image or asset to
    be used in rendering of the particle system. It should be of lesser dimension
    and memory as the count of particles will be equal to the count of images used
    there decreasing the frame rate or performance. Decreasing the frame rate in turn
    will slow down the game and hence it needs to be used wisely.
  prefs: []
  type: TYPE_NORMAL
- en: Some properties are there to determine the life cycle of the particles such
    as birthrate, lifetime, and maximum count to be emitted. The particle generation
    section has **Position Range**, **Angle**, **Speed**, and **Acceleration**.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from all these, it has scale, rotation, and alpha to change the transforms
    of the particles. Last but not least, the color modifier part in which the blending
    and color of our particles can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the project having a `FireParticle` file and explicitly imported image
    `spark.png` combined called as the particle system is the Starter Kit for this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The whole creation of a particle system or a particle file is very easy as discussed
    earlier. But the effort lies in fine-tuning the properties of the particle emitters,
    something similar to an anatomy of the particle system we can say. Every particle
    system has many different properties influencing the look, feel, and behavior
    of the individual particles and the particle system as one.
  prefs: []
  type: TYPE_NORMAL
- en: So to play with an particle system file the following values are changed accordingly
    thereby resulting in an effect of particles of the feel we want. The following
    is a list of properties described with what happens to the particle system if
    these are changed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Background**: This is the background of the particle editor. It is just saved
    at the built time but not reflected during runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Particle Texture**: This is an image or asset texture used as a particle
    image to render the overall particle system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ParticleBirthRate**: This is the number of particles generated every second
    of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Particles**: This is the number of particles that an emitter has
    to generate totally; for value zero, infinite stream of particles are generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LifeTime**: This is the average lifetime of a particle before it vanishes
    from the screen; the value is inserted in seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Position Range**: This is the average starting position of a particle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emitter Angle**: This is the average initial direction of a particle. It
    means the angle at which the particle has to be emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Particle Speed and Range**: This is the speed at which the particles should
    move and there is also a `SpeedRange` parameter; for example, if it is equal to
    50 and speed is 100, then the values of speed will vary from 50 (100 - 50) to
    150 (100 + 50).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acceleration**: These are for both *x* (horizontal) and *y* (vertical) accelerations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alpha**: This is the initial alpha set for the particles and it also has
    a range parameter to specify.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale**: This is the initial scale factor provided for the particle that
    is, the size of the particle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotation**: This is the initial rotation of a particle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color Blend**: In this whole section, some blend modes are provided by specifying
    the average initial color of the particle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the tour of the installation and understanding of the particle editor,
    there are many tweaks to be done with the editor in different particle systems
    to produce something alive and the cool effect of particles.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will play with the values of the `FireParticle`
    file to build a thrust of spaceship, which in future will be added at the back
    of it in the space environment of the game.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For better understanding and to learn more about the particle editor of Xcode
    and tweaking the values of the particle file, you can visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Using the particle system in games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now as a complete tour of particle editor is over, we can have a usage of the
    particle emitters. We will build some stuff for our game that is, the thrust of
    spaceship using the same `FireParticle` file and a collision effect when the coin
    is picked by the spaceship with a default template of smoke.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, editing of the particle file using the particle editor of Xcode
    will be done to produce a game particle effect such as the thrust of spaceship
    and a new particle file will be formed named `SmokeParticle` for the collision
    effect between the coin and spaceship. Also, we will discuss and understand some
    initial code-level classes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We should have hands on the particle editor of Xcode with changing values of
    any particle file and creating some good particle systems that could be used at
    some places in the game. As the basic elements of particle editor are covered
    in the previous section, now we will be changing some values of the `FireParticle`
    file and build some more particle systems.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with the files related to the particle system created and change
    its property values. There are two files created when building a particle system:'
  prefs: []
  type: TYPE_NORMAL
- en: An sks file, which is the particle file, is used to create an `SKEmitterNode`
    object to be added on any node or scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A default file called `spark.png` is imported, which is used to specify a particle
    image in the particle editor for a particular sks file. It can be any image imported
    externally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the whole process of creating a particle file is clear, we will go further
    with tweaking some of the properties of the `FireParticle` file to make a thrust
    of the spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, as the spaceship is headed towards the right side of the screen,
    we have to make a thrust coming from right to left. In the `FireParticle` file,
    the default value of the angle is around 89 degrees; change this to 180 to make
    it look right to left.![How to do it](img/00053.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding snapshot, the particles are more and the birth
    rate is very high compared to the spaceship. So we need to reduce the particles
    to 50 and the birth rate to 0.5 giving a smaller particle system with less lifetime,
    as shown in the following snapshot:![How to do it](img/00054.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do some more tweaks to make it look like a thrust, set its speed to `50`, make
    the initial alpha to `180`, and last and most importantly, set the scale to `0.2`
    so that it matches the spaceship scale.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have our spaceship thrust built, which will look like this:![How to do
    it](img/00055.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following are the values set in the particle editor of Xcode to create the
    thrust of the spaceship using the default `FireParticle` file.![How to do it](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this, one more particle effect called collision effect is left to be
    created when a coin is picked by the spaceship. The following are the steps involved
    to make a `SmokeParticle` file (particle system) for the collision effect of the
    coin and the spaceship:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Xcode and go to **File** | **New** | **File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Resource** section of **iOS**, select **SpriteKit Particle File** and
    click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Smoke** template for the particle system so that an inherited smoke
    effect is created and click on **Next**.![How to do it](img/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `SmokeParticle` and click on **Create**.![How to do it](img/00058.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, a `SmokeParticle.sks` file is created and the `spark.png` file
    imported explicitly will be used by this particle file also.![How to do it](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the particle editor of the `SmokeParticle` file, the default effect that
    is created will look like this:![How to do it](img/00060.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now to produce a white smoke effect change, we will be changing the properties
    of the particle file. Set the following values to create the required effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Color Blend Factor** to `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LifeTime** to `2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Particles** to `20`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angle** to `0`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Speed** to `20`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Particles** to `1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scale** to `0.2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a result, a small white smoke effect that will be displayed on the collision
    of coin and spaceship looks like this in the particle editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the editor inspector of the particle editor will look like this after all
    the changes have been made:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As of now, both the `FireParticle` and `SmokeParticle` files are ready to be
    added to the game, but we should know about some classes used to add these files
    as a node to some node or scene. The node class to be used is `SKEmitterNode`.
  prefs: []
  type: TYPE_NORMAL
- en: A `SKEmitterNode` is a subclass of `SKNode` that automatically creates small
    particles as sprites and renders them on the screen. These emitter nodes can be
    used to create smoke, fire sparks, rain, and many other particle effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, an object of `SKEmitterNode`, either we can use an sks particle
    file with properties set from the particle editor or directly create an object
    of the `SKEmitterNode` class and change the properties programmatically in the
    code. This means there are two ways to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an object of `SKEmitterNode` by getting the path of the particle file
    from the bundle with predefined property values and then adding to any other node
    or scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an object of `SKEmitterNode` just like any other node is created, setting
    all the properties such as particle image, lifetime, speed, and so on and then
    adding it to any other node or scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever a SpriteKit particle file is created, a default image that is imported,
    such as spark.png, is used as a particle in that particle system. We can also
    import any image of ours externally to make a personalized particle system.
  prefs: []
  type: TYPE_NORMAL
- en: 'As depicted earlier in the making of the thrust of the spaceship, we changed
    some values of the `FireParticle` file to have a fire thrust:'
  prefs: []
  type: TYPE_NORMAL
- en: We changed the angle value to 180 so that the direction of the thrust can be
    correct as per the spaceship that is, it moves right to left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We reduced the lifetime and birthrate to match the capacity of the spaceship
    so that it can emit as per its size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also changed the initial size of the particles to match the machinery by
    which the thrust is released
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We tweaked the speed, alpha, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As depicted earlier in the making of the collision effect, we changed some
    values of the `SmokeParticle` file to have a smoke effect:'
  prefs: []
  type: TYPE_NORMAL
- en: To make it white, we changed **Color Blend** to 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make it disappear fast, change **LifeTime** to 2 and **Speed** to 20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To reduce the intensity of particles, assign the number of **Particles** to
    20, and to play it once, assign maximum particles to 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the angle to 0 and scale to 0.2 to make the smoke move subtile from left
    to right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So it's all on us how we want the emitter particle system to behave, to be put,
    and build according to that.
  prefs: []
  type: TYPE_NORMAL
- en: Talking about the class that helps to add this particle system that is, `SKEmitterNode`,
    which is used to add the particle system in the game by a file or in the code
    itself. Both options we would be doing at the code level in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After using the particle editor thoroughly, we can really build some particle
    systems, which can be added as a change to the environment, such as making a snow
    effect and then adding them randomly onto the scene giving a feel of snowfall.
    Many more cool changes like this can be built using the particle system editor.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will add the thrust of the spaceship we built earlier
    in our game giving a better feel and liveliness of the spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For better documentation about the SKEmitterNode and its related properties,
    you can visit the following link [https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html](https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Particle emitter integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are ready and equipped for the particle system to be added to our game
    FlyingSpaceship. In this section, we will take the `FireParticle` and `SmokeParticle`
    files, create a `SKEmitterNode` object for the respective file and add it to the
    respective entity on some event.
  prefs: []
  type: TYPE_NORMAL
- en: After all this, a thrust for the spaceship will be visible in the game making
    our character more empowered. Also, a collision smoke effect will be seen when
    a coin is picked by the spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by adding emitters in the games. We should also go through the
    documentation of the `SKEmitterNode` class provided in the preceding sections.
    And then we can continue adding the code for the addition of the spaceship's thrust
    in the starter kit of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing with the same Xcode project, now we will create our solution kit
    for this chapter that is, Chapter 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to add the spaceship''s thrust in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `FSMyScene` class and add a method called `addSpaceShipThrust`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get a particle file, first we need the file's path to pick it from the bundle.
    The method to find the path will require the name of the particle file and its
    type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, we can instantiate a new object of `SKEmitterNode` with the file
    path that is, `emitterPath` used in preceding code. This is accomplished by using
    `NSKeyedUnarchiver`, which will return an object of `SKEMitterNode` for a path
    that is provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the object of emitter is created, specify its position which has to be
    given according to the center of the spaceship as it's its thrust.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lastly, after all the configuration is done, just add the `emitterNode` object
    to `SpaceShipSprite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Call the `addSpaceShipThrust` method in the `init` method just after the `addSpaceShip`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding `SKEmitterNode` was fully created using the **SpriteKit Particle**
    file. But we can tweak the properties of `SKEmitterNode` in the code itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we want to increase the speed of the thrust after adding the emitter node,
    similarly, for this, we can edit the speed property of the emitter node object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As output of all above creation of `FireParticle` file using particle editor
    and adding it in the code using `SKEmitterNode` class on the spaceship, the thrust
    appears at the back side of our character of game that is, spaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the steps to add the smoke effect on collision of the coin
    and the spaceship in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `FSMyScene` class and add a method called `addCoinCollisionEffectWithSpaceShip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps we performed while creating the thrust of the spaceship. Specify
    the filename and its type to get the path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this, we can instantiate a new object of `SKEmitterNode` using `NSKeyedUnarchiver`,
    which will return an object of `SKEMitterNode` for a path that is provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the object of the emitter is created, specify its position, which will
    be the center of spaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lastly, after all the configuration is done, just add the `emitterNode` object
    (that is, `SmokeEffect` object) to `SpaceShipSprite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add all these lines to the `addCoinCollisionEffectWithSpaceShip` method and
    it looks like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now call this method when the coin collides with the spaceship that is, in method
    named `spaceShipCollidedWithCoin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`spaceShipCollidedWithCoin` looks like this after a call is made to add `Coin
    CollisionEffect`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As output of all above creating of `SmokeParticle` file using particle editor
    and adding it in the code using `SKEmitterNode` class on the spaceship, the smoke
    collision effect appears at the collision point of coin and the spaceship.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is how it works when we add `SKEmitterNode` to `SKSprite` and the result
    of the preceding steps is depicted in the following screenshot, a thrust added
    to the spaceship:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, to add a collision smoke effect, we need the `ParticleSystem` file,
    which has been created in previous sections. For this effect also, the process
    works similar as depicted earlier for thrust of the spaceship. The following are
    the two snapshots after implementing the collision smoke effect.
  prefs: []
  type: TYPE_NORMAL
- en: Coin collides with the spaceship:![How it works](img/00064.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collision smoke effect produced:![How it works](img/00065.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the thrust of the spaceship is made, we can make a variety of such small
    particle effects to be added on such entities or when any sort of event occurs.
    Similarly, we can also add a particle effect when a coin is picked by the spaceship.
    And if needed, we can build a particle effect that can change the whole feel of
    an environment such as creating a rain or snowfall as discussed in previous sections.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a variety of things to do using the Particle Editor of Xcode. To explore
    more about the particle system visit [https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html](https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Game performance analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While building games, a lot of intense processing and analysis is done to create
    a real-time environment of the game, so there is a huge requirement of game performance
    analysis to be done for the smooth functioning of a game or it can be a software
    product also.
  prefs: []
  type: TYPE_NORMAL
- en: From a user's perspective, if the game becomes slow or stops responding, technically
    decreasing the frame rate, users are likely to get frustrated by the game they
    are playing and will look for an alternative. So there has to be a good level
    of performance of games, which can be achieved by a game developer by doing performance
    analysis, which also helps in identifying problems easily and then fixing them.
  prefs: []
  type: TYPE_NORMAL
- en: So in the field of software performance analysis, developers need to use specific
    tools and the performance documentation so that they can identify and fix common
    performance issues thereby building a game with a stable and better performance.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we look at some performance tools for an application, how to
    use them, determine the lose pools, and fix them, thereby maintaining a better
    performance level for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For doing performance analysis, we should go through and have a knowledge of
    some terminologies such as drawing code, launch time initialization code, file
    access code, application footprint, memory allocation code, basic optimizing tips,
    event-based handlers, improving concurrency of program's tasks, using accelerate
    framework, modernizing the application, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xcode includes tools with several graphical applications and command-line tools
    to collect performance metrics. There are many available tools such as instruments,
    analysis tools, monitoring tools, hardware analysis tools, additional command-line
    tools, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: All are used to gather performance data, but there are a few of the them used
    more frequently such as the in-built debug navigator inspector, instruments, and
    many more. So in this section, you will learn about the debug navigator and the
    instrument's tools.
  prefs: []
  type: TYPE_NORMAL
- en: Debug navigator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the project navigator of the Xcode project, there is a debug navigator at
    the sixth position of the panel, which shows the **CPU** utilization and the **Memory**
    utilization of the running application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps involved in analyzing the utilization types of
    the app:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open any project or we can open our own project the Solution kit
    of this chapter and press *command* + *R* to run the application FlyingSpaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the debug navigator; a panel like this appears:![Debug navigator](img/00066.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, the total **CPU** utilization in percentage that is, **72%** and **Memory**
    used that is, **54 MB** is shown in the panel. For further analysis of these metrics,
    we can click on the respective rows to view the proper graphs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **CPU** there are three different graphs of sections shown:'
  prefs: []
  type: TYPE_NORMAL
- en: The CPU Utilization section:![Debug navigator](img/00067.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Utilization Over Time section:![Debug navigator](img/00068.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Threads section:![Debug navigator](img/00069.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In **Memory**, two different graphs of sections are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: Memory utilization:![Debug navigator](img/00070.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory time-based graph:![Debug navigator](img/00071.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instruments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instruments is a collection of powerful analysis tools with an graphical user
    interface. Instruments help in knowing the runtime behavior of our application.
    It shows only one aspect of our program at a time, thereby we can configure each
    performance analysis session with multiple instruments each collecting a specific
    performance metric.
  prefs: []
  type: TYPE_NORMAL
- en: 'Talking about user interface, all data is shown side by side so that the data
    can be correlated from one instrument to another, identifying the trends followed
    in our application behavior. These metrics can be gathered using instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: Core data based applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read/write operation about filesystems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stats corresponding to memory-related allocations and objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory leaks information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about events dispatched by Cocoa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Samples of our app during runtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stats related to garbage collected code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the steps to use instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open any project or we can open our own project from the solution
    kit of this chapter and press *command* + *R* to run the application FlyingSpaceship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CPU** utilization section of debug navigator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then click on the **Profile in Instruments** button, which is at the topmost
    right position in this section. Xcode will show a pop up asking us to transfer
    the same session to instruments or to restart. We can select the one we wish to
    analyze.![Instruments](img/00072.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suppose we say transfer, then Xcode will open the instruments with a time profiler
    inserted in its user interface by default showing running time of different threads.![Instruments](img/00073.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also run the instruments by pressing *command* + *i* and it will open
    instruments to select the metrics to be analyzed similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Instruments](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose we select the **Allocations** category to view these allocations
    of the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But the allocations are not in readable format; hence, click on the **Statistics**
    button and select **Call Trees** so that the calls are arranged in the sequence
    of calls.![Instruments](img/00075.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, for better readability, check the **Show Obj-C Only** checkbox.![Instruments](img/00076.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on these two buttons, we can really look at how the allocations
    are happening in the application. You can see and analyze your allocations using
    these methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For further analysis, there many more metrics that can be included with the
    help of a library by clicking on the top bar button **Library**.![Instruments](img/00077.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what the library looks like with many options of selecting other metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Instruments](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By using this library, we can include multiple metrics such as leaks, time profiler,
    and view them collectively at the side panel of instruments.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For better understanding of how the performance varies with your change in
    code, use tools listed in this section, such as instruments. And also, for better
    understanding of the preceding terminologies discussed, read the documentation
    provided at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To check the level of performance for any application thereby improving that,
    use the tools and initial performance evaluation process documented at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
