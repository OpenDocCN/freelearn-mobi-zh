- en: Chapter 4. Particle System and Game Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 粒子系统与游戏性能
- en: 'In this chapter, we will be focusing on the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注以下食谱：
- en: Installation of the particle system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子系统的安装
- en: Using the particle system in games
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏中使用粒子系统
- en: Particle emitter integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子发射器集成
- en: Game performance analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏性能分析
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In [Chapter 3](part0025_split_000.html#page "Chapter 3. Animations and Texture"),
    *Animations and Texture*, we built a full game of collecting coins by a spaceship
    in a parallax infinite scrolling background. Now we are going to add some flyers
    to the game by introducing some particle systems, making the effects in the game
    look more alive and beautiful. Also, we will go through some performance analysis
    terminologies and tools. In this chapter, a performance-level analysis will be
    done using some performance and monitoring tools to increase the stability and
    performance of the game FlyingSpaceship.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](part0025_split_000.html#page "第3章. 动画和纹理")，*动画和纹理*中，我们构建了一个通过宇宙飞船在透视无限滚动背景中收集金币的全游戏。现在，我们将通过引入一些粒子系统来向游戏中添加一些飞行物，使游戏中的效果看起来更加生动和美丽。此外，我们还将了解一些性能分析术语和工具。在本章中，将使用一些性能和监控工具进行性能级别分析，以提高游戏FlyingSpaceship的稳定性和性能。
- en: Installation of the particle system
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子系统的安装
- en: A particle system is a collection of separate tiny objects called particles.
    They are added to scenes and nodes as emitter nodes, which control its position
    and motion in the scene. These particle systems are used to add some cool effects
    to the scene, which are highly intense effects such as fire, smoke, explosions,
    rain, water, and many more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统是一组称为粒子的独立微小对象集合。它们作为发射节点添加到场景和节点中，控制其在场景中的位置和运动。这些粒子系统用于向场景添加一些酷炫的效果，如火焰、烟雾、爆炸、雨、水等，效果非常强烈。
- en: In this section, we will discuss how the particle system tools are installed
    and created for specific effect to be added in the game in the upcoming sections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何安装和创建粒子系统工具，以便在接下来的章节中添加到游戏中特定的效果。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before iOS 7, there were open source particle editors used for the creation
    of particle systems. However, from iOS 7, there is an in-built support to create
    particle systems using a tool called Particle Editor, which comes integrated with
    Xcode 5.0\. So the prerequisite for this section is having iOS 7 and Xcode 5 to
    create some cool particle effects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS 7之前，有开源的粒子编辑器用于创建粒子系统。然而，从iOS 7开始，有一个内置的粒子编辑器支持使用名为粒子编辑器的工具创建粒子系统，该工具集成在Xcode
    5.0中。因此，本节的前提条件是拥有iOS 7和Xcode 5来创建一些酷炫的粒子效果。
- en: How to do it
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: For creation and implementation of particle systems, we will use Particle Editor.
    This editor doesn't need any installation as it is in-built in the Xcode, which
    will be used to create particle system files and then can be added as nodes as
    a part of the implementation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于粒子系统的创建和实现，我们将使用粒子编辑器。这个编辑器不需要安装，因为它内置在Xcode中，将用于创建粒子系统文件，然后可以作为节点的一部分添加到实现中。
- en: 'So we can start with the solution kit of [Chapter 3](part0025_split_000.html#page
    "Chapter 3. Animations and Texture"), *Animations and Texture*, and continue from
    there. The following are the steps involved to create a Sprite Kit Particle File:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以从第3章的解决方案套件开始，即 *动画和纹理*，并从这里继续。以下是为创建Sprite Kit粒子文件所涉及的步骤：
- en: Open Xcode and go to **File** | **New** | **File**.![How to do it](img/00046.jpeg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Xcode，转到 **文件** | **新建** | **文件**。![如何操作](img/00046.jpeg)
- en: Then choose the **Resource** section in **iOS Section**, select **SpriteKit
    Particle File**, and press **Next**.![How to do it](img/00047.jpeg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在 **iOS部分** 的 **资源** 部分中选择 **SpriteKit粒子文件**，然后按 **下一步**。![如何操作](img/00047.jpeg)
- en: From a list of particle system templates provided, select the **Fire** particle
    system template and click on **Next** to create a fire effect, which will be used
    to depict the thrust of spaceship in the game built so far.![How to do it](img/00048.jpeg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从提供的粒子系统模板列表中选择 **Fire** 粒子系统模板，然后点击 **下一步** 创建火焰效果，该效果将用于描绘到目前为止构建的游戏中宇宙飞船的推力。![如何操作](img/00048.jpeg)
- en: Name the file `FireParticle` and click on **Create**.![How to do it](img/00049.jpeg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `FireParticle` 并点击 **创建**。![如何操作](img/00049.jpeg)
- en: As a result, a file named `FireParticle.sks`, which is the particle file, is
    created and a sample particle image named `spark.png`. `Spark.png` file is autogenerated,
    which is used as the sks file for the particle system.![How to do it](img/00050.jpeg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，创建了一个名为`FireParticle.sks`的文件，它是粒子文件，并创建了一个名为`spark.png`的样本粒子图像。`Spark.png`文件是自动生成的，用作粒子系统的sks文件。![如何操作](img/00050.jpeg)
- en: As shown in the preceding screenshot, when we select the `FireParticle.sks`
    file, the particle system created in the detail panel with a fire effect looks
    like this:![How to do it](img/00051.jpeg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，当我们选择`FireParticle.sks`文件时，在详细面板中创建的具有火焰效果的粒子系统看起来是这样的：![如何操作](img/00051.jpeg)
- en: Using the right-side inspector panel, we can customize the default particle
    system as per our need. You can scroll down to explore all the properties in the
    inspector and hence you can update the settings accordingly.![How to do it](img/00052.jpeg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用右侧的检查器面板，我们可以根据我们的需求自定义默认的粒子系统。你可以向下滚动以探索检查器中的所有属性，因此你可以相应地更新设置。![如何操作](img/00052.jpeg)
- en: Now as we have the particle system, we can now directly see the results when
    some values are changed from this inspector. The implementation also works with
    a few lines of code without changing any particle system values in the code, just
    picking the file and adding it to any node or scene.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了粒子系统，我们可以直接看到当从检查器更改某些值时的结果。实现也只需要几行代码，无需在代码中更改任何粒子系统值，只需选择文件并将其添加到任何节点或场景中。
- en: Let's try out and understand the parameters or the properties of the particle
    system file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试并理解粒子系统文件的参数或属性。
- en: As we can see from the list in the preceding screenshot, there is a background
    section that changes the color of the editor background. It is just saved while
    the game is built, but is not used at runtime.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图中的列表所示，有一个背景部分可以改变编辑器背景的颜色。它只是在游戏构建时保存，但在运行时并不使用。
- en: Below this is a particle texture in which we can choose any image or asset to
    be used in rendering of the particle system. It should be of lesser dimension
    and memory as the count of particles will be equal to the count of images used
    there decreasing the frame rate or performance. Decreasing the frame rate in turn
    will slow down the game and hence it needs to be used wisely.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之下是一个粒子纹理，我们可以选择任何图像或资产用于粒子系统的渲染。它应该具有较小的尺寸和内存，因为粒子的数量将与使用的图像数量相等，这会降低帧率或性能。降低帧率反过来会减慢游戏速度，因此需要明智地使用。
- en: Some properties are there to determine the life cycle of the particles such
    as birthrate, lifetime, and maximum count to be emitted. The particle generation
    section has **Position Range**, **Angle**, **Speed**, and **Acceleration**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些属性用于确定粒子的生命周期，例如出生率、寿命和要发射的最大数量。粒子生成部分有**位置范围**、**角度**、**速度**和**加速度**。
- en: Apart from all these, it has scale, rotation, and alpha to change the transforms
    of the particles. Last but not least, the color modifier part in which the blending
    and color of our particles can be done.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了所有这些之外，它还有缩放、旋转和透明度来改变粒子的变换。最后但同样重要的是，颜色修饰部分，其中可以完成我们粒子的混合和颜色。
- en: Hence, the project having a `FireParticle` file and explicitly imported image
    `spark.png` combined called as the particle system is the Starter Kit for this
    chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，包含`FireParticle`文件并显式导入图像`spark.png`的粒子系统是该章节的入门套件。
- en: How it works
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: The whole creation of a particle system or a particle file is very easy as discussed
    earlier. But the effort lies in fine-tuning the properties of the particle emitters,
    something similar to an anatomy of the particle system we can say. Every particle
    system has many different properties influencing the look, feel, and behavior
    of the individual particles and the particle system as one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，创建整个粒子系统或粒子文件非常简单。但努力在于微调粒子发射器的属性，可以说类似于粒子系统的解剖。每个粒子系统都有许多不同的属性，影响单个粒子和整个粒子系统的外观、感觉和行为。
- en: So to play with an particle system file the following values are changed accordingly
    thereby resulting in an effect of particles of the feel we want. The following
    is a list of properties described with what happens to the particle system if
    these are changed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要玩粒子系统文件，以下值相应地更改，从而产生我们想要的粒子效果。以下是一个属性列表，描述了如果更改这些属性会发生什么。
- en: '**Background**: This is the background of the particle editor. It is just saved
    at the built time but not reflected during runtime.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**背景**：这是粒子编辑器的背景。它仅在构建时保存，但在运行时不会反映出来。'
- en: '**Particle Texture**: This is an image or asset texture used as a particle
    image to render the overall particle system.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子纹理**：这是一个用作粒子图像的图像或资产纹理，用于渲染整个粒子系统。'
- en: '**ParticleBirthRate**: This is the number of particles generated every second
    of the system.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子出生率**：这是系统每秒生成的粒子数量。'
- en: '**Maximum Particles**: This is the number of particles that an emitter has
    to generate totally; for value zero, infinite stream of particles are generated.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子数**：这是发射器必须总共生成的粒子数量；对于值为零的情况，将生成无限流粒子。'
- en: '**LifeTime**: This is the average lifetime of a particle before it vanishes
    from the screen; the value is inserted in seconds.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期**：这是粒子在从屏幕消失前的平均寿命；该值以秒为单位插入。'
- en: '**Position Range**: This is the average starting position of a particle.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置范围**：这是粒子的平均起始位置。'
- en: '**Emitter Angle**: This is the average initial direction of a particle. It
    means the angle at which the particle has to be emitted.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射器角度**：这是粒子的平均初始方向。这意味着粒子必须以该角度发射。'
- en: '**Particle Speed and Range**: This is the speed at which the particles should
    move and there is also a `SpeedRange` parameter; for example, if it is equal to
    50 and speed is 100, then the values of speed will vary from 50 (100 - 50) to
    150 (100 + 50).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子速度和范围**：这是粒子应该移动的速度，还有一个 `SpeedRange` 参数；例如，如果它等于 50 且速度为 100，则速度值将在 50（100
    - 50）到 150（100 + 50）之间变化。'
- en: '**Acceleration**: These are for both *x* (horizontal) and *y* (vertical) accelerations.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加速度**：这些用于 *x*（水平）和 *y*（垂直）加速度。'
- en: '**Alpha**: This is the initial alpha set for the particles and it also has
    a range parameter to specify.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alpha**：这是粒子的初始 Alpha 值，它还有一个范围参数可以指定。'
- en: '**Scale**: This is the initial scale factor provided for the particle that
    is, the size of the particle.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：这是为粒子提供的初始缩放因子，即粒子的大小。'
- en: '**Rotation**: This is the initial rotation of a particle.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：这是粒子的初始旋转。'
- en: '**Color Blend**: In this whole section, some blend modes are provided by specifying
    the average initial color of the particle.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色混合**：在本节中，通过指定粒子的平均初始颜色，提供了一些混合模式。'
- en: There's more
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: After the tour of the installation and understanding of the particle editor,
    there are many tweaks to be done with the editor in different particle systems
    to produce something alive and the cool effect of particles.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在游览安装和了解粒子编辑器之后，需要对不同粒子系统中的编辑器进行许多调整，以产生生动和酷炫的粒子效果。
- en: In the upcoming section, we will play with the values of the `FireParticle`
    file to build a thrust of spaceship, which in future will be added at the back
    of it in the space environment of the game.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将调整 `FireParticle` 文件的值来构建太空船的推力，这在未来将被添加到游戏的空间环境中。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For better understanding and to learn more about the particle editor of Xcode
    and tweaking the values of the particle file, you can visit the following link:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解并学习关于 Xcode 的粒子编辑器以及调整粒子文件值，您可以访问以下链接：
- en: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-particle_emitter/Introduction/Introduction.html)'
- en: Using the particle system in games
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中使用粒子系统
- en: Now as a complete tour of particle editor is over, we can have a usage of the
    particle emitters. We will build some stuff for our game that is, the thrust of
    spaceship using the same `FireParticle` file and a collision effect when the coin
    is picked by the spaceship with a default template of smoke.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在粒子编辑器的完整游览已经结束，我们可以使用粒子发射器了。我们将为我们的游戏构建一些东西，即使用相同的 `FireParticle` 文件来模拟太空船的推力，以及当太空船捡起硬币时使用默认烟雾模板的碰撞效果。
- en: In this section, editing of the particle file using the particle editor of Xcode
    will be done to produce a game particle effect such as the thrust of spaceship
    and a new particle file will be formed named `SmokeParticle` for the collision
    effect between the coin and spaceship. Also, we will discuss and understand some
    initial code-level classes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Xcode 的粒子编辑器编辑粒子文件，以产生游戏粒子效果，例如太空船的推力，并创建一个新的名为 `SmokeParticle` 的粒子文件，用于硬币与太空船之间的碰撞效果。此外，我们还将讨论和了解一些初始的代码级别类。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We should have hands on the particle editor of Xcode with changing values of
    any particle file and creating some good particle systems that could be used at
    some places in the game. As the basic elements of particle editor are covered
    in the previous section, now we will be changing some values of the `FireParticle`
    file and build some more particle systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该熟悉 Xcode 的粒子编辑器，了解如何更改任何粒子文件的值，并创建一些可以在游戏中的某些地方使用的良好粒子系统。由于粒子编辑器的基本元素已在上一节中介绍，现在我们将更改
    `FireParticle` 文件的某些值，并构建更多的粒子系统。
- en: How to do it
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做
- en: 'Let''s start with the files related to the particle system created and change
    its property values. There are two files created when building a particle system:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从与粒子系统创建相关的文件开始，并更改其属性值。在创建粒子系统时，会创建两个文件：
- en: An sks file, which is the particle file, is used to create an `SKEmitterNode`
    object to be added on any node or scene.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 sks 文件，即粒子文件，用于创建一个 `SKEmitterNode` 对象，可以添加到任何节点或场景中。
- en: A default file called `spark.png` is imported, which is used to specify a particle
    image in the particle editor for a particular sks file. It can be any image imported
    externally.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入了一个默认文件 `spark.png`，它用于在粒子编辑器中为特定的 sks 文件指定粒子图像。它可以是从外部导入的任何图像。
- en: Since the whole process of creating a particle file is clear, we will go further
    with tweaking some of the properties of the `FireParticle` file to make a thrust
    of the spaceship.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于创建粒子文件的全过程已经清楚，我们将进一步调整 `FireParticle` 文件的某些属性，以创建太空船的推力。
- en: First of all, as the spaceship is headed towards the right side of the screen,
    we have to make a thrust coming from right to left. In the `FireParticle` file,
    the default value of the angle is around 89 degrees; change this to 180 to make
    it look right to left.![How to do it](img/00053.jpeg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，由于太空船正朝屏幕的右侧移动，我们必须使推力从右向左产生。在 `FireParticle` 文件中，默认的角度值约为 89 度；将其更改为 180
    度，使其看起来是从右向左。![如何做](img/00053.jpeg)
- en: As you can see in the preceding snapshot, the particles are more and the birth
    rate is very high compared to the spaceship. So we need to reduce the particles
    to 50 and the birth rate to 0.5 giving a smaller particle system with less lifetime,
    as shown in the following snapshot:![How to do it](img/00054.jpeg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一张快照所示，粒子更多，与太空船相比出生率非常高。因此，我们需要将粒子数减少到 50，出生率减少到 0.5，从而创建一个粒子系统更小、生命周期更短的粒子系统，如下一张快照所示：![如何做](img/00054.jpeg)
- en: Do some more tweaks to make it look like a thrust, set its speed to `50`, make
    the initial alpha to `180`, and last and most importantly, set the scale to `0.2`
    so that it matches the spaceship scale.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行一些调整，使其看起来像推力，将其速度设置为 `50`，将初始 alpha 值设置为 `180`，最后也是最重要的，将比例设置为 `0.2`，以便与太空船的比例相匹配。
- en: Now we have our spaceship thrust built, which will look like this:![How to do
    it](img/00055.jpeg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经建立了太空船的推力，它看起来是这样的：![如何做](img/00055.jpeg)
- en: The following are the values set in the particle editor of Xcode to create the
    thrust of the spaceship using the default `FireParticle` file.![How to do it](img/00056.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是在 Xcode 的粒子编辑器中设置的值，用于使用默认的 `FireParticle` 文件创建太空船的推力。![如何做](img/00056.jpeg)
- en: 'After this, one more particle effect called collision effect is left to be
    created when a coin is picked by the spaceship. The following are the steps involved
    to make a `SmokeParticle` file (particle system) for the collision effect of the
    coin and the spaceship:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，当太空船拾取硬币时，还需要创建一个名为碰撞效果的粒子效果。以下是为硬币和太空船的碰撞效果创建 `SmokeParticle` 文件（粒子系统）的步骤：
- en: Open Xcode and go to **File** | **New** | **File**.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Xcode 并转到 **文件** | **新建** | **文件**。
- en: In the **Resource** section of **iOS**, select **SpriteKit Particle File** and
    click on **Next**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **iOS** 的 **资源** 部分中选择 **SpriteKit 粒子文件**，然后点击 **下一步**。
- en: Select the **Smoke** template for the particle system so that an inherited smoke
    effect is created and click on **Next**.![How to do it](img/00057.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为粒子系统选择**烟雾**模板，以创建一个继承的烟雾效果，然后点击**下一步**。![如何操作](img/00057.jpeg)
- en: Name the file `SmokeParticle` and click on **Create**.![How to do it](img/00058.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`SmokeParticle`并点击**创建**。![如何操作](img/00058.jpeg)
- en: As a result, a `SmokeParticle.sks` file is created and the `spark.png` file
    imported explicitly will be used by this particle file also.![How to do it](img/00059.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，创建了一个`SmokeParticle.sks`文件，并且显式导入的`spark.png`文件也将被这个粒子文件使用。![如何操作](img/00059.jpeg)
- en: In the particle editor of the `SmokeParticle` file, the default effect that
    is created will look like this:![How to do it](img/00060.jpeg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SmokeParticle`文件的粒子编辑器中，创建的默认效果将看起来像这样：![如何操作](img/00060.jpeg)
- en: 'Now to produce a white smoke effect change, we will be changing the properties
    of the particle file. Set the following values to create the required effect:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为了产生白色烟雾效果，我们将更改粒子文件的属性。设置以下值以创建所需的效果：
- en: '**Color Blend Factor** to `0`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色混合因子**设置为`0`'
- en: '**LifeTime** to `2`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期**设置为`2`'
- en: '**Particles** to `20`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子**设置为`20`'
- en: '**Angle** to `0`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角度**设置为`0`'
- en: '**Speed** to `20`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**设置为`20`'
- en: '**Maximum Particles** to `1`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子数**设置为`1`'
- en: '**Scale** to `0.2`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**设置为`0.2`'
- en: 'As a result, a small white smoke effect that will be displayed on the collision
    of coin and spaceship looks like this in the particle editor:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在粒子编辑器中，碰撞硬币和太空船时将显示的小白烟雾效果如下：
- en: '![How to do it](img/00061.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作](img/00061.jpeg)'
- en: 'And the editor inspector of the particle editor will look like this after all
    the changes have been made:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有更改完成后，粒子编辑器的编辑器检查器将看起来像这样：
- en: '![How to do it](img/00062.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作](img/00062.jpeg)'
- en: As of now, both the `FireParticle` and `SmokeParticle` files are ready to be
    added to the game, but we should know about some classes used to add these files
    as a node to some node or scene. The node class to be used is `SKEmitterNode`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`FireParticle`和`SmokeParticle`文件都已准备好添加到游戏中，但我们应该了解用于将这些文件作为节点添加到某些节点或场景中的类。要使用的节点类是`SKEmitterNode`。
- en: A `SKEmitterNode` is a subclass of `SKNode` that automatically creates small
    particles as sprites and renders them on the screen. These emitter nodes can be
    used to create smoke, fire sparks, rain, and many other particle effects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`SKEmitterNode`是`SKNode`的子类，它自动创建小粒子作为精灵并在屏幕上渲染。这些发射节点可以用来创建烟雾、火花、雨以及其他许多粒子效果。'
- en: 'For instance, an object of `SKEmitterNode`, either we can use an sks particle
    file with properties set from the particle editor or directly create an object
    of the `SKEmitterNode` class and change the properties programmatically in the
    code. This means there are two ways to do so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个`SKEmitterNode`对象，我们既可以使用从粒子编辑器设置的属性的自定义sks粒子文件，也可以直接创建`SKEmitterNode`类的对象并在代码中程序化地更改属性。这意味着有两种方法可以做到这一点：
- en: Create an object of `SKEmitterNode` by getting the path of the particle file
    from the bundle with predefined property values and then adding to any other node
    or scene
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过从包含预定义属性值的包中获取粒子文件路径来创建一个`SKEmitterNode`对象，然后将其添加到任何其他节点或场景中
- en: Create an object of `SKEmitterNode` just like any other node is created, setting
    all the properties such as particle image, lifetime, speed, and so on and then
    adding it to any other node or scene
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`SKEmitterNode`对象，就像创建任何其他节点一样，设置所有属性，如粒子图像、生命周期、速度等，然后将其添加到任何其他节点或场景中
- en: How it works
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: Whenever a SpriteKit particle file is created, a default image that is imported,
    such as spark.png, is used as a particle in that particle system. We can also
    import any image of ours externally to make a personalized particle system.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 每当创建一个SpriteKit粒子文件时，都会使用导入的默认图像，例如spark.png，作为该粒子系统中的粒子。我们也可以导入我们自己的任何图像来创建个性化的粒子系统。
- en: 'As depicted earlier in the making of the thrust of the spaceship, we changed
    some values of the `FireParticle` file to have a fire thrust:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在制作太空船推力的过程中，我们更改了`FireParticle`文件的一些值以产生火焰推力：
- en: We changed the angle value to 180 so that the direction of the thrust can be
    correct as per the spaceship that is, it moves right to left
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将角度值更改为180，以便推力的方向可以正确地按照太空船的方向，即从右向左移动
- en: We reduced the lifetime and birthrate to match the capacity of the spaceship
    so that it can emit as per its size
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们降低了生命周期和出生率以匹配太空船的容量，以便它可以按照其大小发射
- en: We also changed the initial size of the particles to match the machinery by
    which the thrust is released
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还更改了粒子的初始大小，以匹配释放推力的机械
- en: We tweaked the speed, alpha, and so on
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们调整了速度、alpha等参数
- en: 'As depicted earlier in the making of the collision effect, we changed some
    values of the `SmokeParticle` file to have a smoke effect:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在制作碰撞效果的过程中，我们更改了`SmokeParticle`文件的一些值以产生烟雾效果：
- en: To make it white, we changed **Color Blend** to 0
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使其变白，我们将**Color Blend**更改为0
- en: To make it disappear fast, change **LifeTime** to 2 and **Speed** to 20
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使其快速消失，将**LifeTime**更改为2，将**Speed**更改为20
- en: To reduce the intensity of particles, assign the number of **Particles** to
    20, and to play it once, assign maximum particles to 1
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了减少粒子的强度，将**Particles**的数量分配为20，并且为了播放一次，将最大粒子数分配为1
- en: Set the angle to 0 and scale to 0.2 to make the smoke move subtile from left
    to right
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将角度设置为0，比例设置为0.2，使烟雾从左向右缓慢移动
- en: So it's all on us how we want the emitter particle system to behave, to be put,
    and build according to that.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如何让发射粒子系统表现、放置和构建，完全取决于我们。
- en: Talking about the class that helps to add this particle system that is, `SKEmitterNode`,
    which is used to add the particle system in the game by a file or in the code
    itself. Both options we would be doing at the code level in the upcoming section.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 说到帮助添加该粒子系统的类，即`SKEmitterNode`，它通过文件或代码本身在游戏中添加粒子系统。我们将在下一节中在代码级别执行这两种选项。
- en: There's more
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: After using the particle editor thoroughly, we can really build some particle
    systems, which can be added as a change to the environment, such as making a snow
    effect and then adding them randomly onto the scene giving a feel of snowfall.
    Many more cool changes like this can be built using the particle system editor.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在彻底使用粒子编辑器后，我们真的可以构建一些粒子系统，这些系统可以作为环境变化添加，例如制作雪效果，然后随机添加到场景中，营造出下雪的感觉。使用粒子系统编辑器可以构建更多类似这样的酷炫变化。
- en: In the upcoming section, we will add the thrust of the spaceship we built earlier
    in our game giving a better feel and liveliness of the spaceship.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将添加我们之前在游戏中构建的太空船的推力，以增强太空船的感觉和活力。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: For better documentation about the SKEmitterNode and its related properties,
    you can visit the following link [https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html](https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`SKEmitterNode`及其相关属性的更详细文档，您可以访问以下链接 [https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html](https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKEmitterNode_Ref/index.html)。
- en: Particle emitter integration
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子发射器集成
- en: Now we are ready and equipped for the particle system to be added to our game
    FlyingSpaceship. In this section, we will take the `FireParticle` and `SmokeParticle`
    files, create a `SKEmitterNode` object for the respective file and add it to the
    respective entity on some event.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好并装备好将粒子系统添加到我们的游戏《FlyingSpaceship》中。在本节中，我们将取`FireParticle`和`SmokeParticle`文件，为相应的文件创建一个`SKEmitterNode`对象，并在某些事件中将它添加到相应的实体上。
- en: After all this, a thrust for the spaceship will be visible in the game making
    our character more empowered. Also, a collision smoke effect will be seen when
    a coin is picked by the spaceship.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有这些之后，游戏中将出现太空船的推力，使我们的角色变得更加强大。此外，当太空船拾取硬币时，还会看到碰撞烟雾效果。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start by adding emitters in the games. We should also go through the
    documentation of the `SKEmitterNode` class provided in the preceding sections.
    And then we can continue adding the code for the addition of the spaceship's thrust
    in the starter kit of this chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在游戏中添加发射器。我们还应该阅读前几节中提供的`SKEmitterNode`类的文档。然后我们可以继续添加本章入门套件中太空船推力添加的代码。
- en: How to do it
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: Continuing with the same Xcode project, now we will create our solution kit
    for this chapter that is, Chapter 4.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用相同的Xcode项目，现在我们将为这一章创建我们的解决方案包，即第4章。
- en: 'The following are the steps to add the spaceship''s thrust in our game:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在我们的游戏中添加太空船推力的步骤：
- en: Open the `FSMyScene` class and add a method called `addSpaceShipThrust`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`FSMyScene`类，并添加一个名为`addSpaceShipThrust`的方法。
- en: To get a particle file, first we need the file's path to pick it from the bundle.
    The method to find the path will require the name of the particle file and its
    type.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取一个粒子文件，首先我们需要文件的路径来从包中选取。找到路径的方法需要粒子文件的名称和类型。
- en: '[PRE0]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this, we can instantiate a new object of `SKEmitterNode` with the file
    path that is, `emitterPath` used in preceding code. This is accomplished by using
    `NSKeyedUnarchiver`, which will return an object of `SKEMitterNode` for a path
    that is provided.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`NSKeyedUnarchiver`实例化一个新的`SKEmitterNode`对象，该对象将返回一个`SKEMitterNode`对象，用于提供的路径。
- en: '[PRE1]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the object of emitter is created, specify its position which has to be
    given according to the center of the spaceship as it's its thrust.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了发射器对象，指定其位置，这个位置必须是飞船的中心，因为推力就在那里。
- en: '[PRE2]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Lastly, after all the configuration is done, just add the `emitterNode` object
    to `SpaceShipSprite`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在完成所有配置后，只需将`emitterNode`对象添加到`SpaceShipSprite`。
- en: '[PRE3]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Call the `addSpaceShipThrust` method in the `init` method just after the `addSpaceShip`
    method.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`addSpaceShip`方法之后立即调用`addSpaceShipThrust`方法。
- en: The preceding `SKEmitterNode` was fully created using the **SpriteKit Particle**
    file. But we can tweak the properties of `SKEmitterNode` in the code itself.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的`SKEmitterNode`完全使用**SpriteKit Particle**文件创建。但我们可以直接在代码中调整`SKEmitterNode`的属性。
- en: As we want to increase the speed of the thrust after adding the emitter node,
    similarly, for this, we can edit the speed property of the emitter node object.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们想在添加发射器节点后增加推力的速度，因此，为此，我们可以编辑发射器节点对象的`speed`属性。
- en: '[PRE4]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As output of all above creation of `FireParticle` file using particle editor
    and adding it in the code using `SKEmitterNode` class on the spaceship, the thrust
    appears at the back side of our character of game that is, spaceship.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用粒子编辑器创建`FireParticle`文件，并使用`SKEmitterNode`类将其添加到代码中，我们的游戏角色（即飞船）的后面出现了推力。
- en: 'The following are the steps to add the smoke effect on collision of the coin
    and the spaceship in our game:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，在硬币和飞船碰撞时添加烟雾效果的步骤如下：
- en: Open the `FSMyScene` class and add a method called `addCoinCollisionEffectWithSpaceShip`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`FSMyScene`类，并添加一个名为`addCoinCollisionEffectWithSpaceShip`的方法。
- en: Repeat the steps we performed while creating the thrust of the spaceship. Specify
    the filename and its type to get the path.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复我们在创建飞船推力时执行的步骤。指定文件名和类型以获取路径。
- en: '[PRE5]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After this, we can instantiate a new object of `SKEmitterNode` using `NSKeyedUnarchiver`,
    which will return an object of `SKEMitterNode` for a path that is provided.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`NSKeyedUnarchiver`实例化一个新的`SKEmitterNode`对象，该对象将返回一个`SKEMitterNode`对象，用于提供的路径。
- en: '[PRE6]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the object of the emitter is created, specify its position, which will
    be the center of spaceship.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了发射器对象，指定其位置，这个位置将是飞船的中心。
- en: '[PRE7]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Lastly, after all the configuration is done, just add the `emitterNode` object
    (that is, `SmokeEffect` object) to `SpaceShipSprite`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在完成所有配置后，只需将`emitterNode`对象（即`SmokeEffect`对象）添加到`SpaceShipSprite`。
- en: '[PRE8]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Add all these lines to the `addCoinCollisionEffectWithSpaceShip` method and
    it looks like this.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些行添加到`addCoinCollisionEffectWithSpaceShip`方法中，看起来是这样的。
- en: Now call this method when the coin collides with the spaceship that is, in method
    named `spaceShipCollidedWithCoin`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在名为`spaceShipCollidedWithCoin`的方法中调用此方法。
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`spaceShipCollidedWithCoin` looks like this after a call is made to add `Coin
    CollisionEffect`.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用添加`Coin CollisionEffect`后，`spaceShipCollidedWithCoin`看起来是这样的。
- en: As output of all above creating of `SmokeParticle` file using particle editor
    and adding it in the code using `SKEmitterNode` class on the spaceship, the smoke
    collision effect appears at the collision point of coin and the spaceship.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用粒子编辑器创建`SmokeParticle`文件，并使用`SKEmitterNode`类将其添加到飞船的代码中，烟雾碰撞效果出现在硬币和飞船的碰撞点。
- en: How it works
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理
- en: 'This is how it works when we add `SKEmitterNode` to `SKSprite` and the result
    of the preceding steps is depicted in the following screenshot, a thrust added
    to the spaceship:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在添加`SKEmitterNode`到`SKSprite`时的工作原理，以及前述步骤的结果，如下面的截图所示，为飞船添加了推力：
- en: '![How it works](img/00063.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理](img/00063.jpeg)'
- en: Similarly, to add a collision smoke effect, we need the `ParticleSystem` file,
    which has been created in previous sections. For this effect also, the process
    works similar as depicted earlier for thrust of the spaceship. The following are
    the two snapshots after implementing the collision smoke effect.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为了添加碰撞烟雾效果，我们需要在前面章节中创建的 `ParticleSystem` 文件。对于这种效果，过程与前面描述的太空船推力类似。以下是实现碰撞烟雾效果后的两个快照。
- en: Coin collides with the spaceship:![How it works](img/00064.jpeg)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬币与太空船碰撞：![如何工作](img/00064.jpeg)
- en: Collision smoke effect produced:![How it works](img/00065.jpeg)
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产生的碰撞烟雾效果：![如何工作](img/00065.jpeg)
- en: There's more
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容
- en: As the thrust of the spaceship is made, we can make a variety of such small
    particle effects to be added on such entities or when any sort of event occurs.
    Similarly, we can also add a particle effect when a coin is picked by the spaceship.
    And if needed, we can build a particle effect that can change the whole feel of
    an environment such as creating a rain or snowfall as discussed in previous sections.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当太空船产生推力时，我们可以在这些实体或发生任何事件时添加各种这样的小粒子效果。同样，我们也可以在太空船捡起硬币时添加粒子效果。如果需要，我们还可以构建一个可以改变整个环境感觉的粒子效果，例如在前面章节中讨论的创建雨或雪。
- en: See also
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: There are a variety of things to do using the Particle Editor of Xcode. To explore
    more about the particle system visit [https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html](https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Xcode 的粒子编辑器可以执行各种操作。要了解更多关于粒子系统的信息，请访问 [https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html](https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNParticleSystem_Class/index.html)。
- en: Game performance analysis
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏性能分析
- en: While building games, a lot of intense processing and analysis is done to create
    a real-time environment of the game, so there is a huge requirement of game performance
    analysis to be done for the smooth functioning of a game or it can be a software
    product also.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建游戏时，为了创建一个实时游戏环境，会进行大量的处理和分析，因此对游戏性能分析有巨大的需求，这对于游戏的平稳运行或软件产品的运行都是必要的。
- en: From a user's perspective, if the game becomes slow or stops responding, technically
    decreasing the frame rate, users are likely to get frustrated by the game they
    are playing and will look for an alternative. So there has to be a good level
    of performance of games, which can be achieved by a game developer by doing performance
    analysis, which also helps in identifying problems easily and then fixing them.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，如果游戏变得缓慢或停止响应，技术上降低帧率，用户可能会对他们正在玩的游戏感到沮丧，并会寻找替代方案。因此，游戏必须达到良好的性能水平，游戏开发者可以通过进行性能分析来实现这一点，这也有助于轻松识别问题并修复它们。
- en: So in the field of software performance analysis, developers need to use specific
    tools and the performance documentation so that they can identify and fix common
    performance issues thereby building a game with a stable and better performance.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在软件性能分析领域，开发者需要使用特定的工具和性能文档，以便他们可以识别和修复常见性能问题，从而构建一个性能稳定且更好的游戏。
- en: In this recipe, we look at some performance tools for an application, how to
    use them, determine the lose pools, and fix them, thereby maintaining a better
    performance level for the application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们查看一些应用程序的性能工具，如何使用它们，确定丢失的池，并修复它们，从而保持应用程序更好的性能水平。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For doing performance analysis, we should go through and have a knowledge of
    some terminologies such as drawing code, launch time initialization code, file
    access code, application footprint, memory allocation code, basic optimizing tips,
    event-based handlers, improving concurrency of program's tasks, using accelerate
    framework, modernizing the application, and many more.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行性能分析，我们应该了解一些术语，例如绘图代码、启动时间初始化代码、文件访问代码、应用程序足迹、内存分配代码、基本的优化技巧、基于事件的处理器、提高程序任务的并发性、使用加速框架、现代化应用程序等等。
- en: How to do it
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作
- en: Xcode includes tools with several graphical applications and command-line tools
    to collect performance metrics. There are many available tools such as instruments,
    analysis tools, monitoring tools, hardware analysis tools, additional command-line
    tools, and many more.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 包含了多个图形应用程序和命令行工具，用于收集性能指标。有许多可用的工具，例如仪器、分析工具、监控工具、硬件分析工具、额外的命令行工具等等。
- en: All are used to gather performance data, but there are a few of the them used
    more frequently such as the in-built debug navigator inspector, instruments, and
    many more. So in this section, you will learn about the debug navigator and the
    instrument's tools.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具都用于收集性能数据，但其中一些使用频率更高，例如内置的调试导航器检查器、工具和许多其他工具。因此，在本节中，你将了解调试导航器和工具的仪器。
- en: Debug navigator
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试导航器
- en: In the project navigator of the Xcode project, there is a debug navigator at
    the sixth position of the panel, which shows the **CPU** utilization and the **Memory**
    utilization of the running application.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xcode 项目的项目导航器中，调试导航器位于面板的第六位，显示正在运行的应用程序的 **CPU** 利用率和 **内存** 利用率。
- en: 'The following are the steps involved in analyzing the utilization types of
    the app:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 分析应用程序利用率类型的步骤如下：
- en: First of all, open any project or we can open our own project the Solution kit
    of this chapter and press *command* + *R* to run the application FlyingSpaceship.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开任何项目，或者我们可以打开本章解决方案套件中的自己的项目，然后按 *command* + *R* 运行应用程序 FlyingSpaceship。
- en: Click on the debug navigator; a panel like this appears:![Debug navigator](img/00066.jpeg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调试导航器；会出现一个类似这样的面板：![调试导航器](img/00066.jpeg)
- en: Here, the total **CPU** utilization in percentage that is, **72%** and **Memory**
    used that is, **54 MB** is shown in the panel. For further analysis of these metrics,
    we can click on the respective rows to view the proper graphs.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，显示在面板中的总 **CPU** 利用率百分比，即 **72%** 和使用的 **内存**，即 **54 MB**。为了进一步分析这些指标，我们可以点击相应的行以查看适当的图表。
- en: 'In **CPU** there are three different graphs of sections shown:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **CPU** 中，显示了三个不同部分的图表：
- en: The CPU Utilization section:![Debug navigator](img/00067.jpeg)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU 利用率部分：![调试导航器](img/00067.jpeg)
- en: The Utilization Over Time section:![Debug navigator](img/00068.jpeg)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时间利用部分：![调试导航器](img/00068.jpeg)
- en: The Threads section:![Debug navigator](img/00069.jpeg)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程部分：![调试导航器](img/00069.jpeg)
- en: 'In **Memory**, two different graphs of sections are shown:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **内存** 中，显示了两个不同部分的图表：
- en: Memory utilization:![Debug navigator](img/00070.jpeg)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存利用率：![调试导航器](img/00070.jpeg)
- en: Memory time-based graph:![Debug navigator](img/00071.jpeg)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于时间的内存图表：![调试导航器](img/00071.jpeg)
- en: Instruments
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仪器
- en: Instruments is a collection of powerful analysis tools with an graphical user
    interface. Instruments help in knowing the runtime behavior of our application.
    It shows only one aspect of our program at a time, thereby we can configure each
    performance analysis session with multiple instruments each collecting a specific
    performance metric.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Instruments 是一套功能强大的分析工具，具有图形用户界面。Instruments 帮助了解我们应用程序的运行时行为。它一次只显示我们程序的一个方面，因此我们可以使用多个仪器配置每个性能分析会话，每个仪器收集特定的性能指标。
- en: 'Talking about user interface, all data is shown side by side so that the data
    can be correlated from one instrument to another, identifying the trends followed
    in our application behavior. These metrics can be gathered using instruments:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到用户界面，所有数据都是并排显示的，以便可以从一个仪器关联到另一个仪器，识别我们应用程序行为中遵循的趋势。这些指标可以使用仪器收集：
- en: Core data based applications
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于核心数据的应用程序
- en: Read/write operation about filesystems
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件系统的读写操作
- en: Stats corresponding to memory-related allocations and objects
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与内存相关的分配和对象对应的统计数据
- en: Memory leaks information
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存泄漏信息
- en: Information about events dispatched by Cocoa
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cocoa 分发的有关事件的信息
- en: Samples of our app during runtime
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序在运行时的样本
- en: Stats related to garbage collected code
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与垃圾收集代码相关的统计数据
- en: 'The following are the steps to use instruments:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用仪器的步骤如下：
- en: First of all, open any project or we can open our own project from the solution
    kit of this chapter and press *command* + *R* to run the application FlyingSpaceship.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开任何项目，或者我们可以从本章解决方案套件中打开自己的项目，然后按 *command* + *R* 运行应用程序 FlyingSpaceship。
- en: Click on the **CPU** utilization section of debug navigator.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击调试导航器的 **CPU** 利用率部分。
- en: Then click on the **Profile in Instruments** button, which is at the topmost
    right position in this section. Xcode will show a pop up asking us to transfer
    the same session to instruments or to restart. We can select the one we wish to
    analyze.![Instruments](img/00072.jpeg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击此部分的顶部最右边的 **Profile in Instruments** 按钮。Xcode 将弹出一个窗口询问我们是否要将相同的会话传输到仪器或重新启动。我们可以选择我们希望分析的选项。![Instruments](img/00072.jpeg)
- en: Suppose we say transfer, then Xcode will open the instruments with a time profiler
    inserted in its user interface by default showing running time of different threads.![Instruments](img/00073.jpeg)
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们选择传输，那么 Xcode 将默认打开仪器，并在用户界面中插入一个时间分析器，显示不同线程的运行时间。![Instruments](img/00073.jpeg)
- en: 'We can also run the instruments by pressing *command* + *i* and it will open
    instruments to select the metrics to be analyzed similar to this:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过按下 *command* + *i* 来运行仪器，它将打开仪器以选择要分析的指标，类似于以下内容：
- en: '![Instruments](img/00074.jpeg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![Instruments](img/00074.jpeg)'
- en: 'Now perform the following steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行以下步骤：
- en: Now suppose we select the **Allocations** category to view these allocations
    of the app.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在假设我们选择 **Allocations** 类别来查看这些应用程序的分配。
- en: But the allocations are not in readable format; hence, click on the **Statistics**
    button and select **Call Trees** so that the calls are arranged in the sequence
    of calls.![Instruments](img/00075.jpeg)
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但分配不是可读格式；因此，点击 **Statistics** 按钮，并选择 **Call Trees** 以使调用按调用顺序排列。![Instruments](img/00075.jpeg)
- en: After that, for better readability, check the **Show Obj-C Only** checkbox.![Instruments](img/00076.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，为了更好的可读性，请勾选 **Show Obj-C Only** 复选框。![Instruments](img/00076.jpeg)
- en: After clicking on these two buttons, we can really look at how the allocations
    are happening in the application. You can see and analyze your allocations using
    these methods.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击这两个按钮后，我们就可以真正查看应用程序中分配是如何发生的。您可以使用这些方法查看和分析您的分配。
- en: For further analysis, there many more metrics that can be included with the
    help of a library by clicking on the top bar button **Library**.![Instruments](img/00077.jpeg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进一步分析，有许多更多可以通过点击顶部栏按钮 **Library** 来包含的指标。![Instruments](img/00077.jpeg)
- en: 'This is what the library looks like with many options of selecting other metrics:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是库的外观，有许多选择其他指标选项：
- en: '![Instruments](img/00078.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![Instruments](img/00078.jpeg)'
- en: By using this library, we can include multiple metrics such as leaks, time profiler,
    and view them collectively at the side panel of instruments.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这个库，我们可以包含多个指标，如泄漏、时间分析器，并在仪器的侧面板中集中查看它们。
- en: There's more
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'For better understanding of how the performance varies with your change in
    code, use tools listed in this section, such as instruments. And also, for better
    understanding of the preceding terminologies discussed, read the documentation
    provided at:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解代码更改如何影响性能，请使用本节中列出的工具，例如仪器。并且，为了更好地理解前面讨论的术语，请阅读以下提供的文档：
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/BasicTips/BasicTips.html#//apple_ref/doc/uid/TP40001410-CH204-BBCGCFGF).'
- en: See also
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'To check the level of performance for any application thereby improving that,
    use the tools and initial performance evaluation process documented at the following
    links:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查任何应用程序的性能水平并提高它，请使用以下链接中记录的工具和初始性能评估流程：
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ).'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/PerformanceTools/PerformanceTools.html#//apple_ref/doc/uid/TP40001410-CH205-BCIIHAAJ).'
- en: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB).'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB](https://developer.apple.com/library/mac/documentation/Performance/Conceptual/PerformanceOverview/InitialEvaluation/InitialEvaluation.html#//apple_ref/doc/uid/TP40001410-CH206-CJBFHBDB).'
