- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Conditionals and Optionals
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件语句和可选
- en: In the previous chapter, you looked at data types, constants, variables, and
    operations. At this point, you can write simple programs that process letters
    and numbers. However, programs don’t always proceed in sequence. Oftentimes, you
    will need to execute different instructions based on a condition. Swift allows
    you to do this by using **conditionals**, and you will learn how to use them in
    this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了数据类型、常量、变量和操作。到这一点，你可以编写简单的程序来处理字母和数字。然而，程序并不总是按顺序执行。很多时候，你需要根据条件执行不同的指令。Swift
    允许你通过使用 **条件语句** 来做到这一点，你将学习如何使用它们。
- en: Another thing you may have noticed is that, in the last chapter, each variable
    or constant was immediately assigned a value. What if you require a variable where
    the value may not be present initially? You will need a way to create a variable
    that may or may not have a value. Swift allows you to do this by using **optionals,**
    and you will also learn about them in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还注意到，在上一章中，每个变量或常量都被立即赋予了一个值。如果你需要一个可能最初没有值的变量，你将需要一个方法来创建一个可能或可能没有值的变量。Swift
    允许你通过使用 **可选** 来做到这一点，你也将在这章中了解它们。
- en: By the end of this chapter, you should be able to write programs that do different
    things based on different conditions and handle variables that may or may not
    have a value.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够编写根据不同条件执行不同操作的程序，并处理可能或可能没有值的变量。
- en: 'The following topics will be covered:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容将涵盖：
- en: Introducing conditionals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍条件语句
- en: Introducing optionals and optional binding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍可选和可选绑定
- en: Please spend some time understanding optionals. They can be daunting for the
    novice programmer, but as you will see, they are an important part of iOS development.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请花些时间了解可选。对于新手程序员来说，它们可能有些令人畏惧，但正如你将看到的，它们是 iOS 开发的重要组成部分。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The Xcode playground for this chapter is in the `Chapter03` folder of the code
    bundle for this book, which can be downloaded here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 Xcode 演示场位于本书代码包的 `Chapter03` 文件夹中，可以在此处下载：
- en: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition](https://github.com/PacktPublishing/iOS-18-Programming-for-Beginners-Ninth-Edition%0D)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际运行情况：
- en: '[https://youtu.be/f90pTabsOgc](https://youtu.be/f90pTabsOgc%0D)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/f90pTabsOgc](https://youtu.be/f90pTabsOgc%0D)'
- en: Create a new playground and name it `ConditionalsAndOptionals`. You can type
    in and run all the code in this chapter as you go along. You’ll start by learning
    about conditionals.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的演示场，并将其命名为 `ConditionalsAndOptionals`。你可以一边阅读一边输入并运行本章中的所有代码。你将从学习条件语句开始。
- en: Introducing conditionals
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍条件语句
- en: 'At times, you’ll want to execute different code blocks based on a specific
    condition, such as in the following scenarios:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你将想要根据特定的条件执行不同的代码块，例如在以下场景中：
- en: Choosing between different room types at a hotel. The price for bigger rooms
    would be higher.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在酒店中选择不同的房间类型。大房间的价格会更高。
- en: Switching between different payment methods at an online store. Different payment
    methods would have different procedures.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在在线商店之间切换不同的支付方式。不同的支付方式会有不同的程序。
- en: Deciding what to order at a fast-food restaurant. Preparation procedures for
    each food item would be different.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在快餐店决定要订购什么。每种食品的准备程序都不同。
- en: To do this, you would use conditionals. In Swift, this is implemented using
    the `if` statement (for a single condition) and the `switch` statement (for multiple
    conditions).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你会使用条件语句。在 Swift 中，这是通过使用 `if` 语句（用于单个条件）和 `switch` 语句（用于多个条件）来实现的。
- en: For more information on conditionals, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更多有关条件语句的信息，请访问 [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/controlflow)。
- en: Let’s see how `if` statements are used to execute different tasks depending
    on a condition’s value in the next section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在下一节中如何使用 `if` 语句根据条件值执行不同的任务。
- en: Using if statements
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用if语句
- en: 'An `if` statement executes a block of code if a condition is `true`, and optionally,
    another block of code if the condition is `false`. It looks like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句在条件为`true`时执行一段代码，如果条件为`false`，则可选地执行另一段代码。它看起来像这样：'
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s implement an `if` statement now to see this in action. Imagine that you’re
    programming an app for a restaurant. The app would allow you to check if a restaurant
    is open, search for a restaurant, and check to see if a customer is over the drinking
    age limit. Follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个`if`语句来观察其效果。想象一下，你正在为一家餐厅编写应用程序。该应用程序将允许你检查餐厅是否营业，搜索餐厅，并检查顾客是否超过饮酒年龄限制。按照以下步骤操作：
- en: 'To check if a restaurant is open, add the following code to your playground.
    Run it to create a constant and execute a statement if the constant’s value is
    `true`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查餐厅是否营业，将以下代码添加到你的playground中。运行它以创建一个常量，并在常量的值为`true`时执行一个语句：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, you created a constant, `isRestaurantOpen`, and assigned `true` to it.
    Next, you have an `if` statement that checks the value stored in `isRestaurantOpen`.
    Since the value is `true`, the `print()` statement is executed and **Restaurant
    is open** is printed in the Debug area.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你创建了一个常量`isRestaurantOpen`，并将其赋值为`true`。接下来，你有一个`if`语句，它会检查`isRestaurantOpen`中存储的值。由于值是`true`，`print()`语句被执行，并在Debug区域打印出**Restaurant
    is open**。
- en: Try changing the value of `isRestaurantOpen` to `false` and running your code
    again. As the condition is now `false`, nothing will be printed to the Debug area.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将`isRestaurantOpen`的值改为`false`并再次运行你的代码。由于当前条件是`false`，Debug区域将不会打印任何内容。
- en: 'You can also execute statements if a value is `false`. Let’s say the customer
    has searched for a particular restaurant that is not in the app’s database, so
    the app should display a message to say that the restaurant is not found. Type
    in the following code to create a constant and execute a statement if the constant’s
    value is `false`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以在值为`false`时执行语句。假设顾客搜索的餐厅不在应用程序的数据库中，因此应用程序应显示一条消息表示餐厅未找到。输入以下代码以创建一个常量，并在常量的值为`false`时执行一个语句：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The constant `isRestaurantFound` is set to `false`. Next, the `if` statement
    is checked. The `isRestaurantFound == false` condition returns `true`, and **Restaurant
    was not found** is printed in the Debug area.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 常量`isRestaurantFound`被设置为`false`。接下来，检查`if`语句。`isRestaurantFound == false`条件返回`true`，并在Debug区域打印出**Restaurant
    was not found**。
- en: You can also use `!isRestaurantFound` in place of `isRestaurantFound == false`
    to check the condition.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`!isRestaurantFound`代替`isRestaurantFound == false`来检查条件。
- en: Try changing the value of `isRestaurantFound` to `true`. As the condition is
    now `false`, nothing will be printed to the Debug area.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试将`isRestaurantFound`的值改为`true`。由于当前条件是`false`，Debug区域将不会打印任何内容。
- en: 'To execute one set of statements if a condition is `true`, and another set
    of statements if a condition is `false`, use the `else` keyword. Type in the following
    code, which checks if a customer at a bar is over the drinking age limit:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在条件为`true`时执行一组语句，在条件为`false`时执行另一组语句，请使用`else`关键字。输入以下代码，该代码检查酒吧中的顾客是否超过饮酒年龄限制：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `drinkingAgeLimit` is assigned the value `21` and `customerAge` is assigned
    the value `23`. In the `if` statement, `customerAge < drinkingAgeLimit` is checked.
    Since 23 < 21 returns `false`, the `else` statement is executed and **Over age
    limit** is printed in the Debug area. If you change the value of `customerAge`
    to `19`, `customerAge < drinkingAgeLimit` will return `true`, so **Under age limit**
    will be printed in the Debug area.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`drinkingAgeLimit`被赋值为`21`，`customerAge`被赋值为`23`。在`if`语句中，检查`customerAge
    < drinkingAgeLimit`。由于23 < 21返回`false`，所以执行`else`语句，并在Debug区域打印出**Over age limit**。如果你将`customerAge`的值改为`19`，`customerAge
    < drinkingAgeLimit`将返回`true`，因此将在Debug区域打印出**Under age limit**。
- en: Up to now, you have only been dealing with single conditions. What if there
    are multiple conditions? That’s where `switch` statements come in, and you will
    learn about them in the next section.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你只处理了单个条件。如果有多个条件怎么办？这就是`switch`语句的用武之地，你将在下一节中学习它们。
- en: Using switch statements
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`switch`语句
- en: 'To understand `switch` statements, let’s start by implementing an `if` statement
    with multiple conditions first. Imagine that you’re programming a traffic light.
    There are three possible colors for the traffic light—red, yellow, or green—and
    you want something different to happen based on the color of the light. To do
    this, you can nest multiple `if` statements together. Follow these steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`switch`语句，我们先从实现一个带有多个条件的`if`语句开始。想象一下你正在编写交通灯的代码。交通灯有三种可能的颜色——红色、黄色或绿色——并且你希望根据灯的颜色执行不同的操作。为此，你可以嵌套多个`if`语句。按照以下步骤操作：
- en: 'Add the following code to your playground to implement a traffic light using
    multiple `if` statements and run it:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，以使用多个`if`语句实现交通灯，并运行它：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first `if` condition, `trafficLightColor == "Red"`, returns `false`, so
    the `else` statement is executed. The second `if` condition, `trafficLightColor
    == "Yellow"`, returns `true`, so **Caution** is printed in the Debug area and
    no more `if` conditions are evaluated. Try changing the value of `trafficLightColor`
    to see different results.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`if`条件`trafficLightColor == "Red"`返回`false`，因此执行`else`语句。第二个`if`条件`trafficLightColor
    == "Yellow"`返回`true`，所以在调试区域打印出**Caution**，并且不再评估更多的`if`条件。尝试更改`trafficLightColor`的值以查看不同的结果。
- en: 'The code used here works, but it’s a little hard to read. In this case, a `switch`
    statement would be more concise and easier to comprehend. A `switch` statement
    looks like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的代码是有效的，但读起来有点困难。在这种情况下，使用`switch`语句会更加简洁且易于理解。`switch`语句看起来是这样的：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The value is checked and matched to a case, and the code for that case is executed.
    If none of the cases match, the code in the `default` case is executed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 值会被检查并与某个`case`匹配，然后执行该`case`的代码。如果没有任何一个`case`匹配，则执行`default`中的代码。
- en: 'Here’s how to write the `if` statement shown earlier as a `switch` statement.
    Type in the following code and run it:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是如何将前面显示的`if`语句写成`switch`语句的方法。输入以下代码并运行：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code here is much easier to read and understand when compared to the previous
    version. The value in `trafficLightColor` is `"Yellow"`, so `case "Yellow":` is
    matched and **Caution** is printed in the Debug area. Try changing the value of
    `trafficLightColor` to see different results.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的版本相比，这里的代码更容易阅读和理解。`trafficLightColor`中的值是`"Yellow"`，所以`case "Yellow":`被匹配，并在调试区域打印出**Caution**。尝试更改`trafficLightColor`的值以查看不同的结果。
- en: 'There are two things to remember about `switch` statements:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`switch`语句有两点需要注意：
- en: '`switch` statements in Swift do not fall through the bottom of each case and
    into the next one by default. In the example shown previously, once `case "Yellow":`
    is matched, `case "Red":`, `case "Green":`, and `default:` will not execute.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift中的`switch`语句默认不会从每个`case`的底部跌落到下一个`case`。在前面显示的示例中，一旦`case "Yellow":`被匹配，`case
    "Red"`、`case "Green"`和`default:`将不会执行。
- en: '`switch` statements must cover all possible cases. In the example shown previously,
    any `trafficLightColor` value other than `"Red"`, `"Yellow"`, or `"Green"` will
    be matched to d`efault:` and **Invalid color** will be printed in the Debug area.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switch`语句必须覆盖所有可能的`case`。在前面显示的示例中，任何除了`"Red"`、`"Yellow"`或`"Green"`之外的`trafficLightColor`值都将匹配到`default:`，并在调试区域打印出**Invalid
    color**。'
- en: This concludes the section on `if` and `switch` statements. In the next section,
    you’ll learn about optionals, which allow you to create variables without initial
    values, and **optional binding**, which allows instructions to be executed if
    an optional has a value.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分关于`if`和`switch`语句的内容到此结束。在下一部分，你将学习可选类型，它允许你创建没有初始值的变量，以及**可选绑定**，它允许在可选类型有值时执行指令。
- en: Introducing optionals and optional binding
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍可选类型和可选绑定
- en: Up until now, every time you have declared a variable or constant, you have
    assigned a value to it immediately. But what if you want to declare a variable
    first and assign a value later? In this case, you would use optionals.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，每次你声明一个变量或常量时，你都会立即给它赋值。但如果你想在声明变量后稍后再赋值呢？在这种情况下，你会使用可选类型。
- en: For more information on optionals, visit [https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于可选类型的信息，请访问[https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics](https://docs.swift.org/swift-book/documentation/the-swift-programming-language/thebasics)。
- en: Let’s learn how to create and use optionals and see how they are used in a program.
    Imagine you’re writing a program where the user needs to enter the name of their
    spouse. Of course, if the user is not married, there would be no value for this.
    In this case, you can use an optional to represent the spouse’s name.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何创建和使用可选类型，并看看它们如何在程序中使用。想象你正在编写一个程序，其中用户需要输入他们配偶的名字。当然，如果用户没有结婚，这个值就不存在。在这种情况下，你可以使用可选来表示配偶的名字。
- en: 'An optional may have one of two possible states. It can either contain a value
    or not contain a value. If an optional contains a value, you can access the value
    inside it. The process of accessing an optional’s value is known as **unwrapping**
    the optional. Let’s see how this works by following these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可选可能有两种可能的状态。它可以包含一个值，或者不包含值。如果可选包含一个值，你可以访问它内部的值。访问可选值的这个过程被称为 **解包** 可选。让我们通过以下步骤看看这是如何工作的：
- en: 'Add the following code to your playground to create a variable and print its
    contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的游乐场中，以创建一个变量并打印其内容：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since Swift is type-safe, an error will appear, **(Variable ‘spouseName’ used
    before being initialized)**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 Swift 是类型安全的，会出现一个错误，**（变量‘spouseName’在使用之前未初始化）**。
- en: 'To resolve this issue, you could assign an empty string to `spouseName`. Modify
    your code as shown:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，你可以将空字符串赋值给 `spouseName`。按照以下方式修改你的代码：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This makes the error go away, but an empty string is still a value, and `spouseName`
    should not have a value.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得错误消失，但空字符串仍然是一个值，而 `spouseName` 不应该有值。
- en: 'Since `spouseName` should not have a value initially, let’s make it an optional.
    To do so, type a question mark after the type annotation and remove the empty
    string assignment:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 `spouseName` 应该最初没有值，让我们将其设置为可选。要做到这一点，在类型注释后输入一个问号，并删除空字符串赋值：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You’ll see a warning because `spouseName` is now an optional string variable
    instead of a regular string variable, and the `print()` statement is expecting
    a regular string variable.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一个警告，因为 `spouseName` 现在是一个可选的字符串变量，而不是一个常规的字符串变量，而 `print()` 语句期望的是一个常规字符串变量。
- en: '![](img/B31371_03_01.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_03_01.png)'
- en: 'Figure 3.1: Warning notification'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：警告通知
- en: Even though there is a warning, ignore it for now and run your code. The value
    of `spouseName` is shown as **nil** in the Results area, and **nil** is printed
    in the Debug area. `nil` is a special keyword that means the optional variable
    `spouseName` has no value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有警告，现在先忽略它并运行你的代码。`spouseName` 的值在结果区域显示为 **nil**，并且在调试区域打印出 **nil**。`nil`
    是一个特殊的关键字，表示可选变量 `spouseName` 没有值。
- en: 'The warning appears because the `print` statement is treating `spouseName`
    as being of type `Any` instead of `String?`. Click the yellow triangle to display
    possible fixes, and choose the first fix:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警告出现是因为 `print` 语句将 `spouseName` 视为 `Any` 类型而不是 `String?` 类型。点击黄色三角形以显示可能的修复，并选择第一个修复：
- en: '![](img/B31371_03_02.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_03_02.png)'
- en: 'Figure 3.2: Expanded warning notification with the first fix highlighted'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2：突出显示第一个修复的扩展警告通知
- en: The statement will change to `print(spouseName ?? default value)`. Note the
    use of the `??` operator. This means that if `spouseName` does not contain a value,
    a default value that you provide will be used instead in the `print` statement.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 语句将变为 `print(spouseName ?? default value)`。注意 `??` 操作符的使用。这意味着如果 `spouseName`
    不包含值，将使用你提供的默认值在 `print` 语句中。
- en: 'Replace the default value placeholder with `"No value in spouseName"` as shown.
    The warning will disappear. Run your program again and **No value in spouseName**
    will appear in the Debug area:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认值占位符替换为 `"No value in spouseName"`，如图所示。警告将会消失。再次运行你的程序，**No value in spouseName**
    将会在调试区域显示：
- en: '![](img/B31371_03_03.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_03_03.png)'
- en: 'Figure 3.3: Debug area showing the default value'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3：显示默认值的调试区域
- en: 'Let’s assign a value to `spouseName`. Modify the code as shown:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们给 `spouseName` 赋予一个值。按照以下方式修改代码：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When your program runs, **Nia** appears in the Debug area.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的程序运行时，**Nia** 将会在调试区域显示。
- en: 'Add one more line of code to join `spouseName` to another string as shown:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一行代码以将 `spouseName` 与另一个字符串连接，如图所示：
- en: '[PRE11]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You’ll get an error, and the Debug area displays the error information and where
    the error occurred. This happens because you can’t join a regular string variable
    to an optional using the `+` operator. You will need to unwrap the optional first.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个错误，并且调试区域会显示错误信息和错误发生的位置。这是因为你不能使用 `+` 操作符将常规字符串变量与可选类型连接。你需要首先解包可选类型。
- en: 'Click on the red circle to display possible fixes, and you’ll see the following:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色圆圈以显示可能的修复方案，你会看到以下内容：
- en: '![](img/B31371_03_04.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_03_04.png)'
- en: 'Figure 3.4: Expanded error notification with the second fix highlighted'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：带有第二个修复方案高亮的扩展错误通知
- en: The second fix recommends **force-unwrapping** to resolve this issue. Force-unwrapping
    unwraps an optional whether it contains a value or not. It works fine if `spouseName`
    has a value, but if `spouseName` is nil, your code will crash.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个修复建议使用**强制解包**来解决这个问题。强制解包无论可选是否包含值都会解包。如果`spouseName`有值，它将正常工作，但如果`spouseName`是`nil`，你的代码将崩溃。
- en: 'Click the second fix, and you’ll see an exclamation mark appear after `spouseName`
    in the last line of code, which indicates the optional is force-unwrapped:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第二个修复方案，你会在代码的最后一行`spouseName`后面看到一个感叹号，这表示可选被强制解包了：
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Run your program, and you’ll see `Hello, Nia` assigned to `greeting`, as shown
    in the Results area. This means that `spouseName` has been successfully force-unwrapped.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你的程序，你会在结果区域看到`Hello, Nia`被分配给`greeting`，如图所示。这意味着`spouseName`已经成功被强制解包。
- en: 'To see the effect of force-unwrapping a variable containing `nil`, set `spouseName`
    to `nil`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看强制解包包含`nil`的变量的效果，将`spouseName`设置为`nil`：
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Your code crashes and you can see what caused the crash in the Debug area:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码崩溃了，你可以在调试区域中看到导致崩溃的原因：
- en: '![](img/B31371_03_05.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B31371_03_05.png)'
- en: 'Figure 3.5: Crashed program with details in the Debug area'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：崩溃的程序及其在调试区域中的详细信息
- en: Since `spouseName` is now `nil`, the program crashed while attempting to force-unwrap
    `spouseName`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`spouseName`现在是`nil`，程序在尝试强制解包`spouseName`时崩溃了。
- en: A better way of handling this is to use optional binding. In optional binding,
    you attempt to assign the value in an optional to a temporary variable (you can
    name it whatever you like). If the assignment is successful, a block of code is
    executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的一个更好的方法是使用可选绑定。在可选绑定中，你尝试将可选中的值分配给一个临时变量（你可以随意命名它）。如果分配成功，将执行一个代码块。
- en: 'To see the effect of optional binding, modify your code as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看可选绑定的效果，修改你的代码如下：
- en: '[PRE14]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Hello, Nia** will appear in the Debug area. Here’s how it works. If `spouseName`
    has a value, it will be unwrapped and assigned to a temporary constant, `spouseTempVar`,
    and the `if` statement will return `true`. The statements between the curly braces
    will be executed and the constant greeting will then be assigned the value `Hello,
    Nia`. Then, **Hello, Nia** will be printed in the Debug area. Note that the temporary
    variable `spouseTempVar` is not an optional.If `spouseName` does not have a value,
    no value can be assigned to `spouseTempVar` and the `if` statement will return
    `false`. In this case, the statements in the curly braces will not be executed
    at all.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hello, Nia**将出现在调试区域。以下是它是如何工作的。如果`spouseName`有值，它将被解包并分配给一个临时常量`spouseTempVar`，然后`if`语句将返回`true`。花括号之间的语句将被执行，常量`greeting`将被分配值`Hello,
    Nia`。然后，**Hello, Nia**将在调试区域打印出来。注意，临时变量`spouseTempVar`不是一个可选变量。如果`spouseName`没有值，无法将值分配给`spouseTempVar`，`if`语句将返回`false`。在这种情况下，花括号中的语句根本不会执行。'
- en: 'You can also write the code in the previous step in a simpler way as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以以前一个步骤更简单的方式编写代码，如下所示：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, the temporary constant is created with the same name as the optional value
    and will be used in the statements between the curly braces.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，临时常量使用与可选值相同的名称创建，并将用于花括号之间的语句中。
- en: 'To see the effect of optional binding when an optional contains `nil`, assign
    `nil` to `spouseName` once more:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看当可选包含`nil`时可选绑定的效果，再次将`nil`分配给`spouseName`：
- en: '[PRE16]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You’ll notice that nothing appears in the Debug area, and your program no longer
    crashes, even though `spouseName` is `nil`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到调试区域中没有出现任何内容，即使`spouseName`是`nil`，你的程序也不再崩溃。
- en: This concludes the section on optionals and optional binding, and you can now
    create and use optional variables. Awesome!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了关于可选和可选绑定的部分，你现在可以创建和使用可选变量了。太棒了！
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You’re doing great! You learned how to use `if` and `switch` statements, which
    means you are now able to write your own programs that do different things based
    on different conditions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你做得很好！你学习了如何使用`if`和`switch`语句，这意味着你现在能够编写基于不同条件执行不同操作的程序。
- en: You also learned about optionals and optional binding. This means you can now
    represent variables that may or may not have a value and execute instructions
    only if a variable’s value is present.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了可选类型和可选绑定。这意味着你现在可以表示可能具有也可能不具有值的变量，并且只有当变量的值存在时才执行指令。
- en: In the next chapter, you will study how to use a range of values instead of
    single values, and how to repeat program statements using loops.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用一系列值而不是单个值，以及如何使用循环重复程序语句。
- en: Join us on Discord!
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社群！
- en: Read this book alongside other users, experts, and the author himself. Ask questions,
    provide solutions to other readers, chat with the author via Ask Me Anything sessions,
    and much more. Scan the QR code or visit the link to join the community.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他用户、专家以及作者本人一起阅读这本书。提出问题，为其他读者提供解决方案，通过 Ask Me Anything 会话与作者聊天，等等。扫描二维码或访问链接加入社区。
- en: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/ios-Swift](https://packt.link/ios-Swift)'
- en: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/QR_Code2370024260177612484.png)](https://packt.link/ios-Swift)'
